commit 84747dbbabc7e974711c175232ddf71f6194edb6
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Feb 4 08:54:49 2019 -0800

    chore: Prefer const (#11862)

diff --git a/package.json b/package.json
index ff2a6409ff..eaeb9ab3c0 100644
--- a/package.json
+++ b/package.json
@@ -110,7 +110,7 @@
     "enzyme-adapter-react-16": "1.3.0",
     "enzyme-to-json": "3.3.1",
     "eslint": "5.11.1",
-    "eslint-config-sentry-app": "1.5.0",
+    "eslint-config-sentry-app": "1.6.0",
     "jest": "23.6.0",
     "jest-junit": "^3.4.1",
     "mockdate": "2.0.2",
@@ -141,7 +141,7 @@
     "dev-proxy": "node scripts/devproxy.js",
     "dev-server": "webpack-dev-server",
     "storybook": "start-storybook -p 9001 -c .storybook",
-    "storybook-build": "build-storybook -c .storybook -o .storybook-out && sed -i -e 's/\\\/sb_dll/sb_dll/g' .storybook-out/index.html",
+    "storybook-build": "build-storybook -c .storybook -o .storybook-out && sed -i -e 's/\\/sb_dll/sb_dll/g' .storybook-out/index.html",
     "snapshot": "build-storybook && PERCY_TOKEN=$STORYBOOK_PERCY_TOKEN PERCY_PROJECT=$STORYBOOK_PERCY_PROJECT percy-storybook --widths=1280",
     "webpack-profile": "yarn -s webpack --profile --json > stats.json"
   }
diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 063b993fbd..36246cb0d3 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -21,7 +21,7 @@ class Client {
 
   // Returns a jest mock that represents Client.request calls
   static addMockResponse(response) {
-    let mock = jest.fn();
+    const mock = jest.fn();
     Client.mockResponses.unshift([
       {
         statusCode: 200,
@@ -74,7 +74,7 @@ class Client {
   }
 
   request(url, options) {
-    let [response, mock] = Client.findMockResponse(url, options) || [];
+    const [response, mock] = Client.findMockResponse(url, options) || [];
 
     if (!response) {
       // Endpoints need to be mocked
@@ -92,7 +92,7 @@ class Client {
 
       if (response.statusCode !== 200) {
         response.callCount++;
-        let resp = {
+        const resp = {
           status: response.statusCode,
           responseText: JSON.stringify(body),
           responseJSON: body,
diff --git a/src/sentry/static/sentry/app/__mocks__/jquery.jsx b/src/sentry/static/sentry/app/__mocks__/jquery.jsx
index b2b335eec4..64e1864ea6 100644
--- a/src/sentry/static/sentry/app/__mocks__/jquery.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/jquery.jsx
@@ -1,4 +1,4 @@
-let jq = {
+const jq = {
   tooltip: () => jq,
   on: () => jq,
   off: () => jq,
diff --git a/src/sentry/static/sentry/app/actionCreators/account.jsx b/src/sentry/static/sentry/app/actionCreators/account.jsx
index 0ede89661d..251f30f516 100644
--- a/src/sentry/static/sentry/app/actionCreators/account.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/account.jsx
@@ -4,7 +4,7 @@ import IndicatorStore from 'app/stores/indicatorStore';
 
 export function disconnectIdentity(identity) {
   const api = new Client();
-  let request = api.requestPromise(`/users/me/social-identities/${identity.id}/`, {
+  const request = api.requestPromise(`/users/me/social-identities/${identity.id}/`, {
     method: 'DELETE',
   });
 
diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index f2eb75ac03..c23ad5e1ff 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -6,7 +6,7 @@ export function setActiveEnvironment(environment) {
 }
 
 export function setActiveEnvironmentName(name) {
-  let environment = EnvironmentStore.getByName(name);
+  const environment = EnvironmentStore.getByName(name);
 
   if (!environment) return;
   setActiveEnvironment(environment);
diff --git a/src/sentry/static/sentry/app/actionCreators/formSearch.jsx b/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
index 57071fb15d..1bd7f41891 100644
--- a/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
@@ -15,7 +15,7 @@ const createSearchMap = ({route, formGroups, fields, ...other}) => {
   // There are currently two ways to define forms (TODO(billy): Turn this into one):
   // If `formGroups` is defined, then return a flattened list of fields in all formGroups
   // Otherwise `fields` is a map of fieldName -> fieldObject -- create a list of fields
-  let listOfFields = formGroups
+  const listOfFields = formGroups
     ? flatMap(formGroups, formGroup => formGroup.fields)
     : Object.keys(fields).map(fieldName => fields[fieldName]);
 
@@ -31,14 +31,14 @@ const createSearchMap = ({route, formGroups, fields, ...other}) => {
 export function loadSearchMap() {
   // Load all form configuration files via webpack that export a named `route`
   // as well as either `fields` or `formGroups`
-  let context = require.context('../data/forms', true, /\.jsx$/);
+  const context = require.context('../data/forms', true, /\.jsx$/);
 
   // Get a list of all form fields defined in `../data/forms`
-  let allFormFields = flatten(
+  const allFormFields = flatten(
     context
       .keys()
       .map(key => {
-        let mod = context(key);
+        const mod = context(key);
 
         // Since we're dynamically importing an entire directly, there could be malformed modules defined?
         if (!mod) return null;
diff --git a/src/sentry/static/sentry/app/actionCreators/group.jsx b/src/sentry/static/sentry/app/actionCreators/group.jsx
index 919b1b3b2d..7118197797 100644
--- a/src/sentry/static/sentry/app/actionCreators/group.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/group.jsx
@@ -8,15 +8,15 @@ import {uniqueId} from 'app/utils/guid';
 export function assignToUser(params) {
   const api = new Client();
 
-  let endpoint = `/issues/${params.id}/`;
+  const endpoint = `/issues/${params.id}/`;
 
-  let id = uniqueId();
+  const id = uniqueId();
 
   GroupActions.assignTo(id, params.id, {
     email: (params.member && params.member.email) || '',
   });
 
-  let request = api.requestPromise(endpoint, {
+  const request = api.requestPromise(endpoint, {
     method: 'PUT',
     // Sending an empty value to assignedTo is the same as "clear",
     // so if no member exists, that implies that we want to clear the
@@ -40,15 +40,15 @@ export function assignToUser(params) {
 export function clearAssignment(groupId) {
   const api = new Client();
 
-  let endpoint = `/issues/${groupId}/`;
+  const endpoint = `/issues/${groupId}/`;
 
-  let id = uniqueId();
+  const id = uniqueId();
 
   GroupActions.assignTo(id, groupId, {
     email: '',
   });
 
-  let request = api.requestPromise(endpoint, {
+  const request = api.requestPromise(endpoint, {
     method: 'PUT',
     // Sending an empty value to assignedTo is the same as "clear"
     data: {
@@ -70,9 +70,9 @@ export function clearAssignment(groupId) {
 export function assignToActor({id, actor}) {
   const api = new Client();
 
-  let endpoint = `/issues/${id}/`;
+  const endpoint = `/issues/${id}/`;
 
-  let guid = uniqueId();
+  const guid = uniqueId();
   let actorId;
 
   GroupActions.assignTo(guid, id, {email: ''});
diff --git a/src/sentry/static/sentry/app/actionCreators/incidents.jsx b/src/sentry/static/sentry/app/actionCreators/incidents.jsx
index b49df6ed20..408094c07d 100644
--- a/src/sentry/static/sentry/app/actionCreators/incidents.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/incidents.jsx
@@ -9,7 +9,7 @@ function getIncidentsFromIncidentResponse(incidents) {
   }
 
   let isMajor = false;
-  let log = [];
+  const log = [];
   incidents.forEach(item => {
     if (!isMajor && item.impact === 'major') {
       isMajor = true;
@@ -28,7 +28,7 @@ function getIncidentsFromIncidentResponse(incidents) {
 }
 
 export function load() {
-  let cfg = ConfigStore.get('statuspage');
+  const cfg = ConfigStore.get('statuspage');
   if (cfg && cfg.id) {
     IncidentActions.update();
 
@@ -38,7 +38,7 @@ export function load() {
       crossDomain: true,
       cache: false,
       success: data => {
-        let [incidents, indicator] = getIncidentsFromIncidentResponse(data.incidents);
+        const [incidents, indicator] = getIncidentsFromIncidentResponse(data.incidents);
         IncidentActions.updateSuccess({
           status: {
             incidents,
diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
index 6f301b5725..8397cc5adc 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
@@ -23,7 +23,7 @@ export function addMessage(msg, type, options = {}) {
   // use default only if undefined, as 0 is a valid duration
   duration = typeof duration === 'undefined' ? DEFAULT_TOAST_DURATION : duration;
 
-  let action = options.append ? 'append' : 'replace';
+  const action = options.append ? 'append' : 'replace';
   // XXX: This differs from `IndicatorStore.add` since it won't return the indicator that is created
   // because we are firing an action. You can just add a new message and it will, by default,
   // replace active indicator
@@ -57,10 +57,10 @@ const PRETTY_VALUES = {
 // Transform form values into a string
 // Otherwise bool values will not get rendered and empty strings look like a bug
 const prettyFormString = (val, model, fieldName) => {
-  let descriptor = model.fieldDescriptor.get(fieldName);
+  const descriptor = model.fieldDescriptor.get(fieldName);
 
   if (descriptor && typeof descriptor.formatMessageValue === 'function') {
-    let initialData = model.initialData;
+    const initialData = model.initialData;
     // XXX(epurkhsier): We pass the "props" as the descriptor and initialData.
     // This isn't necessarily all of the props of the form field, but should
     // make up a good portion needed for formatting.
@@ -84,14 +84,14 @@ const prettyFormString = (val, model, fieldName) => {
 export function saveOnBlurUndoMessage(change, model, fieldName) {
   if (!model) return;
 
-  let label = model.getDescriptor(fieldName, 'label');
+  const label = model.getDescriptor(fieldName, 'label');
 
   if (!label) return;
 
-  let prettifyValue = val => prettyFormString(val, model, fieldName);
+  const prettifyValue = val => prettyFormString(val, model, fieldName);
 
   // Hide the change text when formatMessageValue is explicitly set to false
-  let showChangeText = model.getDescriptor(fieldName, 'formatMessageValue') !== false;
+  const showChangeText = model.getDescriptor(fieldName, 'formatMessageValue') !== false;
 
   addSuccessMessage(
     tct(
@@ -112,15 +112,15 @@ export function saveOnBlurUndoMessage(change, model, fieldName) {
       undo: () => {
         if (!model || !fieldName) return;
 
-        let oldValue = model.getValue(fieldName);
-        let didUndo = model.undo();
-        let newValue = model.getValue(fieldName);
+        const oldValue = model.getValue(fieldName);
+        const didUndo = model.undo();
+        const newValue = model.getValue(fieldName);
 
         if (!didUndo) return;
         if (!label) return;
 
         // `saveField` can return null if it can't save
-        let saveResult = model.saveField(fieldName, newValue);
+        const saveResult = model.saveField(fieldName, newValue);
 
         if (!saveResult) {
           addErrorMessage(
diff --git a/src/sentry/static/sentry/app/actionCreators/integrations.jsx b/src/sentry/static/sentry/app/actionCreators/integrations.jsx
index 22cb6b98ec..e6d8d00bec 100644
--- a/src/sentry/static/sentry/app/actionCreators/integrations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/integrations.jsx
@@ -60,9 +60,12 @@ export function addIntegrationToProject(orgId, projectId, integration) {
  */
 export function deleteRepository(client, orgId, repositoryId) {
   addLoadingMessage();
-  let promise = client.requestPromise(`/organizations/${orgId}/repos/${repositoryId}/`, {
-    method: 'DELETE',
-  });
+  const promise = client.requestPromise(
+    `/organizations/${orgId}/repos/${repositoryId}/`,
+    {
+      method: 'DELETE',
+    }
+  );
   promise.then(
     () => clearIndicators(),
     () => addErrorMessage(t('Unable to delete repository.'))
@@ -79,10 +82,13 @@ export function deleteRepository(client, orgId, repositoryId) {
  */
 export function cancelDeleteRepository(client, orgId, repositoryId) {
   addLoadingMessage();
-  let promise = client.requestPromise(`/organizations/${orgId}/repos/${repositoryId}/`, {
-    method: 'PUT',
-    data: {status: 'visible'},
-  });
+  const promise = client.requestPromise(
+    `/organizations/${orgId}/repos/${repositoryId}/`,
+    {
+      method: 'PUT',
+      data: {status: 'visible'},
+    }
+  );
   promise.then(
     () => clearIndicators(),
     () => addErrorMessage(t('Unable to cancel deletion.'))
@@ -93,13 +99,13 @@ export function cancelDeleteRepository(client, orgId, repositoryId) {
 function applyRepositoryAddComplete(promise) {
   promise.then(
     repo => {
-      let message = tct('[repo] has been successfully added.', {
+      const message = tct('[repo] has been successfully added.', {
         repo: repo.name,
       });
       addSuccessMessage(message);
     },
     errorData => {
-      let text = errorData.responseJSON.errors
+      const text = errorData.responseJSON.errors
         ? errorData.responseJSON.errors.__all__
         : t('Unable to add repository.');
       addErrorMessage(text);
@@ -117,12 +123,15 @@ function applyRepositoryAddComplete(promise) {
  * @param {Object} integration Integration provider data.
  */
 export function migrateRepository(client, orgId, repositoryId, integration) {
-  let data = {integrationId: integration.id};
+  const data = {integrationId: integration.id};
   addLoadingMessage();
-  let promise = client.requestPromise(`/organizations/${orgId}/repos/${repositoryId}/`, {
-    data,
-    method: 'PUT',
-  });
+  const promise = client.requestPromise(
+    `/organizations/${orgId}/repos/${repositoryId}/`,
+    {
+      data,
+      method: 'PUT',
+    }
+  );
   return applyRepositoryAddComplete(promise);
 }
 
@@ -135,13 +144,13 @@ export function migrateRepository(client, orgId, repositoryId, integration) {
  * @param {Object} integration Integration provider data.
  */
 export function addRepository(client, orgId, name, integration) {
-  let data = {
+  const data = {
     installation: integration.id,
     identifier: name,
     provider: `integrations:${integration.provider.key}`,
   };
   addLoadingMessage();
-  let promise = client.requestPromise(`/organizations/${orgId}/repos/`, {
+  const promise = client.requestPromise(`/organizations/${orgId}/repos/`, {
     method: 'POST',
     data,
   });
diff --git a/src/sentry/static/sentry/app/actionCreators/members.jsx b/src/sentry/static/sentry/app/actionCreators/members.jsx
index 3b4856d273..d20d64681b 100644
--- a/src/sentry/static/sentry/app/actionCreators/members.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/members.jsx
@@ -2,8 +2,8 @@ import MemberActions from 'app/actions/memberActions';
 import MemberListStore from 'app/stores/memberListStore';
 
 export function fetchOrgMembers(api, orgId) {
-  let endpoint = `/organizations/${orgId}/users/`;
-  let promise = api.requestPromise(endpoint, {method: 'GET'});
+  const endpoint = `/organizations/${orgId}/users/`;
+  const promise = api.requestPromise(endpoint, {method: 'GET'});
   return promise.then(members => {
     members = members.filter(m => m.user);
 
@@ -17,7 +17,7 @@ export function fetchOrgMembers(api, orgId) {
 export function updateMember(api, params) {
   MemberActions.update(params.memberId, params.data);
 
-  let endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
+  const endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
   return new Promise((resolve, reject) =>
     api.request(endpoint, {
       method: 'PUT',
@@ -37,7 +37,7 @@ export function updateMember(api, params) {
 export function resendMemberInvite(api, params) {
   MemberActions.resendMemberInvite(params.orgId, params.data);
 
-  let endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
+  const endpoint = `/organizations/${params.orgId}/members/${params.memberId}/`;
   return new Promise((resolve, reject) =>
     api.request(endpoint, {
       method: 'PUT',
diff --git a/src/sentry/static/sentry/app/actionCreators/navigation.jsx b/src/sentry/static/sentry/app/actionCreators/navigation.jsx
index b7478f4817..cdf4e440d1 100644
--- a/src/sentry/static/sentry/app/actionCreators/navigation.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/navigation.jsx
@@ -6,8 +6,8 @@ import NavigationActions from 'app/actions/navigationActions';
 
 export function navigateTo(to, router) {
   // Check for placeholder params
-  let needOrg = to.indexOf(':orgId') > -1;
-  let needProject = to.indexOf(':projectId') > -1;
+  const needOrg = to.indexOf(':orgId') > -1;
+  const needProject = to.indexOf(':projectId') > -1;
 
   if (needOrg || needProject) {
     openModal(
diff --git a/src/sentry/static/sentry/app/actionCreators/organizations.jsx b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
index 09c477ceb4..9eaf6b0710 100644
--- a/src/sentry/static/sentry/app/actionCreators/organizations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
@@ -9,7 +9,7 @@ import TeamStore from 'app/stores/teamStore';
 
 export function redirectToRemainingOrganization({orgId, removeOrg}) {
   // Remove queued, should redirect
-  let allOrgs = OrganizationsStore.getAll().filter(
+  const allOrgs = OrganizationsStore.getAll().filter(
     org => org.status.id === 'active' && org.slug !== orgId
   );
   if (!allOrgs.length) {
@@ -18,7 +18,7 @@ export function redirectToRemainingOrganization({orgId, removeOrg}) {
   }
 
   // Let's be smart and select the best org to redirect to
-  let firstRemainingOrg = allOrgs[0];
+  const firstRemainingOrg = allOrgs[0];
   browserHistory.push(`/${firstRemainingOrg.slug}/`);
 
   // Remove org from SidebarDropdown
@@ -28,7 +28,7 @@ export function redirectToRemainingOrganization({orgId, removeOrg}) {
 }
 
 export function remove(api, {successMessage, errorMessage, orgId} = {}) {
-  let endpoint = `/organizations/${orgId}/`;
+  const endpoint = `/organizations/${orgId}/`;
   return api
     .requestPromise(endpoint, {
       method: 'DELETE',
@@ -66,8 +66,8 @@ export function updateOrganization(org) {
 }
 
 export function fetchOrganizationByMember(memberId, {addOrg, fetchOrgDetails}) {
-  let api = new Client();
-  let request = api.requestPromise(`/organizations/?query=member_id:${memberId}`);
+  const api = new Client();
+  const request = api.requestPromise(`/organizations/?query=member_id:${memberId}`);
 
   request.then(data => {
     if (data.length) {
@@ -87,8 +87,8 @@ export function fetchOrganizationByMember(memberId, {addOrg, fetchOrgDetails}) {
 }
 
 export function fetchOrganizationDetails(orgId, {setActive, loadProjects, loadTeam}) {
-  let api = new Client();
-  let request = api.requestPromise(`/organizations/${orgId}/`);
+  const api = new Client();
+  const request = api.requestPromise(`/organizations/${orgId}/`);
 
   request.then(data => {
     if (setActive) {
diff --git a/src/sentry/static/sentry/app/actionCreators/plugins.jsx b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
index 3a57394bcd..4f8eb567f1 100644
--- a/src/sentry/static/sentry/app/actionCreators/plugins.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
@@ -9,7 +9,7 @@ const api = new Client();
 
 function doUpdate({orgId, projectId, pluginId, update, ...params}) {
   PluginActions.update(pluginId, update);
-  let request = api.requestPromise(
+  const request = api.requestPromise(
     `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,
     {
       ...params,
@@ -22,7 +22,7 @@ function doUpdate({orgId, projectId, pluginId, update, ...params}) {
       PluginActions.updateSuccess(pluginId, update);
     })
     .catch(resp => {
-      let err =
+      const err =
         resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'
           ? new Error(resp.responseJSON.detail)
           : new Error('Unable to update plugin');
@@ -43,13 +43,13 @@ function doUpdate({orgId, projectId, pluginId, update, ...params}) {
  * @return Promise
  */
 export function fetchPlugins({orgId, projectId}, options) {
-  let path = `/projects/${orgId}/${projectId}/plugins/`;
+  const path = `/projects/${orgId}/${projectId}/plugins/`;
 
   // Make sure we throttle fetches
   if (activeFetch[path]) return activeFetch[path];
 
   PluginActions.fetchAll(options);
-  let request = api.requestPromise(path, {
+  const request = api.requestPromise(path, {
     method: 'GET',
   });
 
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 01c7297692..b93be976c6 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -10,7 +10,7 @@ import ProjectActions from 'app/actions/projectActions';
 import ProjectsStatsStore from 'app/stores/projectsStatsStore';
 
 export function fetchProject(api, orgId, slug) {
-  let promise = api.requestPromise(`/projects/${orgId}/${slug}/`, {method: 'GET'});
+  const promise = api.requestPromise(`/projects/${orgId}/${slug}/`, {method: 'GET'});
   promise.then(project => {
     ProjectActions.fetchSuccess(project);
   });
@@ -21,7 +21,7 @@ export function fetchProject(api, orgId, slug) {
 export function update(api, params) {
   ProjectActions.update(params.projectId, params.data);
 
-  let endpoint = `/projects/${params.orgId}/${params.projectId}/`;
+  const endpoint = `/projects/${params.orgId}/${params.projectId}/`;
   return api
     .requestPromise(endpoint, {
       method: 'PUT',
@@ -42,7 +42,7 @@ export function update(api, params) {
 export function loadStats(api, params) {
   ProjectActions.loadStats(params.orgId, params.data);
 
-  let endpoint = `/organizations/${params.orgId}/stats/`;
+  const endpoint = `/organizations/${params.orgId}/stats/`;
   api.request(endpoint, {
     query: params.query,
     success: data => {
@@ -56,15 +56,15 @@ export function loadStats(api, params) {
 
 // This is going to queue up a list of project ids we need to fetch stats for
 // Will be cleared when debounced function fires
-let _projectStatsToFetch = new Set();
+const _projectStatsToFetch = new Set();
 
 // Max projects to query at a time, otherwise if we fetch too many in the same request
 // it can timeout
 const MAX_PROJECTS_TO_FETCH = 10;
 
 const _queryForStats = (api, projects, orgId) => {
-  let idQueryParams = projects.map(project => `id:${project}`).join(' ');
-  let endpoint = `/organizations/${orgId}/projects/`;
+  const idQueryParams = projects.map(project => `id:${project}`).join(' ');
+  const endpoint = `/organizations/${orgId}/projects/`;
 
   return api.requestPromise(endpoint, {
     query: {
@@ -75,8 +75,10 @@ const _queryForStats = (api, projects, orgId) => {
 };
 
 export const _debouncedLoadStats = debounce((api, projectSet, params) => {
-  let existingProjectStats = Object.values(ProjectsStatsStore.getAll()).map(({id}) => id);
-  let projects = Array.from(projectSet).filter(
+  const existingProjectStats = Object.values(ProjectsStatsStore.getAll()).map(
+    ({id}) => id
+  );
+  const projects = Array.from(projectSet).filter(
     project => !existingProjectStats.includes(project)
   );
 
@@ -117,7 +119,7 @@ export function setActiveProject(project) {
 }
 
 export function removeProject(api, orgId, project) {
-  let endpoint = `/projects/${orgId}/${project.slug}/`;
+  const endpoint = `/projects/${orgId}/${project.slug}/`;
 
   ProjectActions.removeProject(project);
   return api
@@ -140,7 +142,7 @@ export function removeProject(api, orgId, project) {
 }
 
 export function transferProject(api, orgId, project, email) {
-  let endpoint = `/projects/${orgId}/${project.slug}/transfer/`;
+  const endpoint = `/projects/${orgId}/${project.slug}/transfer/`;
 
   return api
     .requestPromise(endpoint, {
@@ -177,7 +179,7 @@ export function transferProject(api, orgId, project, email) {
  * @param {String} team Team data object
  */
 export function addTeamToProject(api, orgSlug, projectSlug, team) {
-  let endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${team.slug}/`;
+  const endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${team.slug}/`;
 
   addLoadingMessage();
   ProjectActions.addTeam(team);
@@ -219,7 +221,7 @@ export function addTeamToProject(api, orgSlug, projectSlug, team) {
  * @param {String} teamSlug Team Slug
  */
 export function removeTeamFromProject(api, orgSlug, projectSlug, teamSlug) {
-  let endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${teamSlug}/`;
+  const endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${teamSlug}/`;
 
   addLoadingMessage();
   ProjectActions.removeTeam(teamSlug);
@@ -269,7 +271,7 @@ export function changeProjectSlug(prev, next) {
  * @param {String} projectSlug Project Slug
  */
 export function sendSampleEvent(api, orgSlug, projectSlug) {
-  let endpoint = `/projects/${orgSlug}/${projectSlug}/create-sample/`;
+  const endpoint = `/projects/${orgSlug}/${projectSlug}/create-sample/`;
 
   return api.requestPromise(endpoint, {
     method: 'POST',
diff --git a/src/sentry/static/sentry/app/actionCreators/prompts.jsx b/src/sentry/static/sentry/app/actionCreators/prompts.jsx
index 57e7362dd4..5c54d15c25 100644
--- a/src/sentry/static/sentry/app/actionCreators/prompts.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/prompts.jsx
@@ -1,5 +1,5 @@
 export function promptsUpdate(api, params) {
-  let endpoint = '/promptsactivity/';
+  const endpoint = '/promptsactivity/';
   return api.requestPromise(endpoint, {
     method: 'PUT',
     data: {
diff --git a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
index 9e00203457..8985d6ae8e 100644
--- a/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/savedSearches.jsx
@@ -1,5 +1,5 @@
 export function fetchSavedSearches(api, orgId, projectId = null) {
-  let url = projectId
+  const url = projectId
     ? `/projects/${orgId}/${projectId}/searches/`
     : `/organizations/${orgId}/searches/`;
   return api.requestPromise(url, {
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx b/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx
index c0c101fc99..960176e702 100644
--- a/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/sentryAppInstallations.jsx
@@ -15,7 +15,7 @@ import {t} from 'app/locale';
  */
 export function installSentryApp(client, orgId, app) {
   addLoadingMessage();
-  let promise = client.requestPromise(
+  const promise = client.requestPromise(
     `/organizations/${orgId}/sentry-app-installations/`,
     {
       method: 'POST',
@@ -37,7 +37,7 @@ export function installSentryApp(client, orgId, app) {
  */
 export function uninstallSentryApp(client, install) {
   addLoadingMessage();
-  let promise = client.requestPromise(`/sentry-app-installations/${install.uuid}/`, {
+  const promise = client.requestPromise(`/sentry-app-installations/${install.uuid}/`, {
     method: 'DELETE',
   });
   promise.then(
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx b/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx
index a75860d640..8c66783581 100644
--- a/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/sentryApps.jsx
@@ -14,7 +14,7 @@ import {t} from 'app/locale';
  */
 export function removeSentryApp(client, app) {
   addLoadingMessage();
-  let promise = client.requestPromise(`/sentry-apps/${app.slug}/`, {
+  const promise = client.requestPromise(`/sentry-apps/${app.slug}/`, {
     method: 'DELETE',
   });
   promise.then(
diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index e00fd8e8bb..b5abd66a27 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -10,13 +10,13 @@ export function fetchTags(orgId, projectId = null) {
   TagStore.reset();
   TagActions.loadTags();
   const api = new Client();
-  let url = projectId
+  const url = projectId
     ? `/projects/${orgId}/${projectId}/tags/`
     : `/organizations/${orgId}/tags/`;
 
   api.request(url, {
     success: tags => {
-      let trimmedTags = tags.slice(0, MAX_TAGS);
+      const trimmedTags = tags.slice(0, MAX_TAGS);
 
       if (tags.length > MAX_TAGS) {
         AlertActions.addAlert({
@@ -31,7 +31,7 @@ export function fetchTags(orgId, projectId = null) {
 }
 
 export function fetchTagValues(api, tagKey, orgId, projectId = null, query = null) {
-  let url = projectId
+  const url = projectId
     ? `/projects/${orgId}/${projectId}/tags/${tagKey}/values/`
     : `/organizations/${orgId}/tags/${tagKey}/values/`;
 
diff --git a/src/sentry/static/sentry/app/actionCreators/teams.jsx b/src/sentry/static/sentry/app/actionCreators/teams.jsx
index 69b23ff557..f5cef448bf 100644
--- a/src/sentry/static/sentry/app/actionCreators/teams.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/teams.jsx
@@ -43,7 +43,7 @@ export function updateTeamSuccess(teamId, data) {
 }
 
 export function updateTeam(api, params, options) {
-  let endpoint = `/teams/${params.orgId}/${params.teamId}/`;
+  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;
   TeamActions.update(params.teamId, params.data);
 
   return api.request(endpoint, {
@@ -61,9 +61,9 @@ export function updateTeam(api, params, options) {
 }
 
 export function joinTeam(api, params, options) {
-  let endpoint = `/organizations/${params.orgId}/members/${params.memberId ||
+  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||
     'me'}/teams/${params.teamId}/`;
-  let id = uniqueId();
+  const id = uniqueId();
 
   TeamActions.update(id, params.teamId);
 
@@ -82,9 +82,9 @@ export function joinTeam(api, params, options) {
 }
 
 export function leaveTeam(api, params, options) {
-  let endpoint = `/organizations/${params.orgId}/members/${params.memberId ||
+  const endpoint = `/organizations/${params.orgId}/members/${params.memberId ||
     'me'}/teams/${params.teamId}/`;
-  let id = uniqueId();
+  const id = uniqueId();
 
   TeamActions.update(id, params.teamId);
 
diff --git a/src/sentry/static/sentry/app/actions/alertActions.jsx b/src/sentry/static/sentry/app/actions/alertActions.jsx
index d26d0fbbcc..c092e9dbb7 100644
--- a/src/sentry/static/sentry/app/actions/alertActions.jsx
+++ b/src/sentry/static/sentry/app/actions/alertActions.jsx
@@ -1,5 +1,5 @@
 import Reflux from 'reflux';
 
-let AlertActions = Reflux.createActions(['addAlert', 'closeAlert']);
+const AlertActions = Reflux.createActions(['addAlert', 'closeAlert']);
 
 export default AlertActions;
diff --git a/src/sentry/static/sentry/app/actions/environmentActions.jsx b/src/sentry/static/sentry/app/actions/environmentActions.jsx
index 7868019990..9210fa47bb 100644
--- a/src/sentry/static/sentry/app/actions/environmentActions.jsx
+++ b/src/sentry/static/sentry/app/actions/environmentActions.jsx
@@ -1,6 +1,6 @@
 import Reflux from 'reflux';
 
-let EnvironmentActions = Reflux.createActions([
+const EnvironmentActions = Reflux.createActions([
   'setActive',
   'clearActive',
   'loadData',
diff --git a/src/sentry/static/sentry/app/actions/groupActions.jsx b/src/sentry/static/sentry/app/actions/groupActions.jsx
index 72ecb4505d..621ed2f4cd 100644
--- a/src/sentry/static/sentry/app/actions/groupActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupActions.jsx
@@ -2,7 +2,7 @@ import Reflux from 'reflux';
 
 // TODO(dcramer): we should probably just make every parameter update
 // work on bulk groups
-let GroupActions = Reflux.createActions([
+const GroupActions = Reflux.createActions([
   'assignTo',
   'assignToError',
   'assignToSuccess',
diff --git a/src/sentry/static/sentry/app/actions/groupingActions.jsx b/src/sentry/static/sentry/app/actions/groupingActions.jsx
index 3310f6b562..9feae36447 100644
--- a/src/sentry/static/sentry/app/actions/groupingActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupingActions.jsx
@@ -1,7 +1,7 @@
 import Reflux from 'reflux';
 
 // Actions for "Grouping" view - for merging/unmerging events/issues
-let GroupingActions = Reflux.createActions([
+const GroupingActions = Reflux.createActions([
   'fetch',
   'showAllSimilarItems',
   'toggleUnmerge',
diff --git a/src/sentry/static/sentry/app/actions/guideActions.jsx b/src/sentry/static/sentry/app/actions/guideActions.jsx
index c833b80204..63aff07ddc 100644
--- a/src/sentry/static/sentry/app/actions/guideActions.jsx
+++ b/src/sentry/static/sentry/app/actions/guideActions.jsx
@@ -1,6 +1,6 @@
 import Reflux from 'reflux';
 
-let GuideActions = Reflux.createActions([
+const GuideActions = Reflux.createActions([
   'closeGuide',
   'fetchSucceeded',
   'nextStep',
diff --git a/src/sentry/static/sentry/app/actions/pluginActions.jsx b/src/sentry/static/sentry/app/actions/pluginActions.jsx
index 86d6f85985..e0f43d2e3a 100644
--- a/src/sentry/static/sentry/app/actions/pluginActions.jsx
+++ b/src/sentry/static/sentry/app/actions/pluginActions.jsx
@@ -1,6 +1,6 @@
 import Reflux from 'reflux';
 
-let PluginActions = Reflux.createActions([
+const PluginActions = Reflux.createActions([
   'update',
   'updateError',
   'updateSuccess',
diff --git a/src/sentry/static/sentry/app/actions/preferencesActions.jsx b/src/sentry/static/sentry/app/actions/preferencesActions.jsx
index 0ab54343bc..01026f6634 100644
--- a/src/sentry/static/sentry/app/actions/preferencesActions.jsx
+++ b/src/sentry/static/sentry/app/actions/preferencesActions.jsx
@@ -1,6 +1,6 @@
 import Reflux from 'reflux';
 
-let PreferencesActions = Reflux.createActions([
+const PreferencesActions = Reflux.createActions([
   'loadInitialState',
   'hideSidebar',
   'showSidebar',
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index b8806d6385..02cad4da16 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -1,6 +1,6 @@
 import Reflux from 'reflux';
 
-let TeamActions = Reflux.createActions([
+const TeamActions = Reflux.createActions([
   'update',
   'updateError',
   'updateSuccess',
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 77089d8ebe..32f18f632b 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -31,7 +31,7 @@ export class Request {
  * @param params
  */
 export function paramsToQueryArgs(params) {
-  let p = params.itemIds
+  const p = params.itemIds
     ? {id: params.itemIds} // items matching array of itemids
     : params.query
       ? {query: params.query} // items matching search query
@@ -58,13 +58,13 @@ export class Client {
    * If so, redirect user to new project slug
    */
   hasProjectBeenRenamed(response) {
-    let code = response?.responseJSON?.detail?.code;
+    const code = response?.responseJSON?.detail?.code;
 
     // XXX(billy): This actually will never happen because we can't intercept the 302
     // jQuery ajax will follow the redirect by default...
     if (code !== PROJECT_MOVED) return false;
 
-    let slug = response?.responseJSON?.detail?.extra?.slug;
+    const slug = response?.responseJSON?.detail?.extra?.slug;
 
     redirectToProject(slug);
     return true;
@@ -77,7 +77,7 @@ export class Client {
     }
 
     return (...args) => {
-      let req = this.activeRequests[id];
+      const req = this.activeRequests[id];
       if (cleanup === true) {
         delete this.activeRequests[id];
       }
@@ -96,14 +96,14 @@ export class Client {
    * Attempt to cancel all active XHR requests
    */
   clear() {
-    for (let id in this.activeRequests) {
+    for (const id in this.activeRequests) {
       this.activeRequests[id].cancel();
     }
   }
 
   handleRequestError({id, path, requestOptions}, response, ...responseArgs) {
-    let code = response?.responseJSON?.detail?.code;
-    let isSudoRequired = code === SUDO_REQUIRED || code === SUPERUSER_REQUIRED;
+    const code = response?.responseJSON?.detail?.code;
+    const isSudoRequired = code === SUDO_REQUIRED || code === SUPERUSER_REQUIRED;
 
     if (isSudoRequired) {
       openSudo({
@@ -131,7 +131,7 @@ export class Client {
     }
 
     // Call normal error callback
-    let errorCb = this.wrapCallback(id, requestOptions.error);
+    const errorCb = this.wrapCallback(id, requestOptions.error);
     if (typeof errorCb !== 'function') return;
     errorCb(response, ...responseArgs);
   }
@@ -148,9 +148,9 @@ export class Client {
       });
       throw err;
     }
-    let method = options.method || (options.data ? 'POST' : 'GET');
+    const method = options.method || (options.data ? 'POST' : 'GET');
     let data = options.data;
-    let id = uniqueId();
+    const id = uniqueId();
     metric.mark(`api-request-start-${id}`);
 
     if (!isUndefined(data) && method !== 'GET') {
@@ -183,7 +183,7 @@ export class Client {
           'X-Span-ID': tracing.getSpanId(),
         },
         success: (...args) => {
-          let [, , xhr] = args || [];
+          const [, , xhr] = args || [];
           metric.measure({
             name: 'app.api.request-success',
             start: `api-request-start-${id}`,
@@ -196,7 +196,7 @@ export class Client {
           }
         },
         error: (...args) => {
-          let [, , xhr] = args || [];
+          const [, , xhr] = args || [];
           metric.measure({
             name: 'app.api.request-error',
             start: `api-request-start-${id}`,
@@ -256,12 +256,12 @@ export class Client {
   }
 
   bulkDelete(params, options) {
-    let path = params.projectId
+    const path = params.projectId
       ? `/projects/${params.orgId}/${params.projectId}/issues/`
       : `/organizations/${params.orgId}/issues/`;
 
-    let query = paramsToQueryArgs(params);
-    let id = uniqueId();
+    const query = paramsToQueryArgs(params);
+    const id = uniqueId();
 
     GroupActions.delete(id, params.itemIds);
 
@@ -282,12 +282,12 @@ export class Client {
   }
 
   bulkUpdate(params, options) {
-    let path = params.projectId
+    const path = params.projectId
       ? `/projects/${params.orgId}/${params.projectId}/issues/`
       : `/organizations/${params.orgId}/issues/`;
 
-    let query = paramsToQueryArgs(params);
-    let id = uniqueId();
+    const query = paramsToQueryArgs(params);
+    const id = uniqueId();
 
     GroupActions.update(id, params.itemIds, params.data);
 
@@ -309,9 +309,9 @@ export class Client {
   }
 
   merge(params, options) {
-    let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
-    let query = paramsToQueryArgs(params);
-    let id = uniqueId();
+    const path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
+    const query = paramsToQueryArgs(params);
+    const id = uniqueId();
 
     GroupActions.merge(id, params.itemIds);
 
diff --git a/src/sentry/static/sentry/app/components/acl/feature.jsx b/src/sentry/static/sentry/app/components/acl/feature.jsx
index 63fbb90b1c..4066d3c2be 100644
--- a/src/sentry/static/sentry/app/components/acl/feature.jsx
+++ b/src/sentry/static/sentry/app/components/acl/feature.jsx
@@ -89,7 +89,7 @@ class Feature extends React.Component {
   };
 
   getAllFeatures() {
-    let {organization, project, configFeatures} = this.props;
+    const {organization, project, configFeatures} = this.props;
     return {
       configFeatures: configFeatures || [],
       organization: (organization && organization.features) || [],
@@ -98,11 +98,11 @@ class Feature extends React.Component {
   }
 
   hasFeature(feature, features) {
-    let shouldMatchOnlyProject = feature.match(/^projects:(.+)/);
-    let shouldMatchOnlyOrg = feature.match(/^organizations:(.+)/);
+    const shouldMatchOnlyProject = feature.match(/^projects:(.+)/);
+    const shouldMatchOnlyOrg = feature.match(/^organizations:(.+)/);
 
     // Array of feature strings
-    let {configFeatures, organization, project} = features;
+    const {configFeatures, organization, project} = features;
 
     // Check config store first as this overrides features scoped to org or
     // project contexts.
@@ -123,7 +123,7 @@ class Feature extends React.Component {
   }
 
   render() {
-    let {
+    const {
       children,
       features,
       renderDisabled,
@@ -132,9 +132,9 @@ class Feature extends React.Component {
       requireAll,
     } = this.props;
 
-    let allFeatures = this.getAllFeatures();
-    let method = requireAll ? 'every' : 'some';
-    let hasFeature =
+    const allFeatures = this.getAllFeatures();
+    const method = requireAll ? 'every' : 'some';
+    const hasFeature =
       !features || features[method](feat => this.hasFeature(feat, allFeatures));
 
     // Default renderDisabled to the ComingSoon component
@@ -151,7 +151,7 @@ class Feature extends React.Component {
         .map(hookFn => (customDisabledRender = hookFn));
     }
 
-    let renderProps = {
+    const renderProps = {
       organization,
       project,
       features,
@@ -194,7 +194,7 @@ const FeatureContainer = createReactClass({
   },
 
   render() {
-    let features = this.state.config.features
+    const features = this.state.config.features
       ? Array.from(this.state.config.features)
       : [];
 
diff --git a/src/sentry/static/sentry/app/components/actions/actionLink.jsx b/src/sentry/static/sentry/app/components/actions/actionLink.jsx
index 8707867fd8..557394cffd 100644
--- a/src/sentry/static/sentry/app/components/actions/actionLink.jsx
+++ b/src/sentry/static/sentry/app/components/actions/actionLink.jsx
@@ -22,7 +22,7 @@ export default class ActionLink extends React.Component {
   };
 
   render() {
-    let {
+    const {
       shouldConfirm,
       message,
       className,
diff --git a/src/sentry/static/sentry/app/components/actions/ignore.jsx b/src/sentry/static/sentry/app/components/actions/ignore.jsx
index a36b5b08a8..cc35d27653 100644
--- a/src/sentry/static/sentry/app/components/actions/ignore.jsx
+++ b/src/sentry/static/sentry/app/components/actions/ignore.jsx
@@ -58,7 +58,7 @@ export default class IgnoreActions extends React.Component {
   }
 
   render() {
-    let {
+    const {
       isIgnored,
       onUpdate,
       disabled,
@@ -67,11 +67,11 @@ export default class IgnoreActions extends React.Component {
       confirmLabel,
     } = this.props;
 
-    let linkClassName = classNames('btn btn-default btn-sm', {
+    const linkClassName = classNames('btn btn-default btn-sm', {
       active: isIgnored,
     });
 
-    let actionLinkProps = {
+    const actionLinkProps = {
       shouldConfirm,
       title: 'Ignore',
       message: confirmMessage,
diff --git a/src/sentry/static/sentry/app/components/actions/resolve.jsx b/src/sentry/static/sentry/app/components/actions/resolve.jsx
index cc6b2925f6..98371cf628 100644
--- a/src/sentry/static/sentry/app/components/actions/resolve.jsx
+++ b/src/sentry/static/sentry/app/components/actions/resolve.jsx
@@ -51,7 +51,7 @@ export default class ResolveActions extends React.Component {
   }
 
   renderResolved() {
-    let {isAutoResolved, onUpdate} = this.props;
+    const {isAutoResolved, onUpdate} = this.props;
 
     if (isAutoResolved) {
       return (
@@ -84,7 +84,7 @@ export default class ResolveActions extends React.Component {
   }
 
   render() {
-    let {
+    const {
       isResolved,
       hasRelease,
       latestRelease,
@@ -97,17 +97,17 @@ export default class ResolveActions extends React.Component {
       confirmLabel,
     } = this.props;
 
-    let buttonClass = this.getButtonClass();
+    const buttonClass = this.getButtonClass();
 
     if (isResolved) {
       return this.renderResolved();
     }
 
-    let actionTitle = !hasRelease
+    const actionTitle = !hasRelease
       ? t('Set up release tracking in order to use this feature.')
       : '';
 
-    let actionLinkProps = {
+    const actionLinkProps = {
       shouldConfirm,
       message: confirmMessage,
       confirmLabel,
diff --git a/src/sentry/static/sentry/app/components/activity/feed.jsx b/src/sentry/static/sentry/app/components/activity/feed.jsx
index 696ab272a2..74117eb158 100644
--- a/src/sentry/static/sentry/app/components/activity/feed.jsx
+++ b/src/sentry/static/sentry/app/components/activity/feed.jsx
@@ -47,8 +47,8 @@ const ActivityFeed = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let location = this.props.location;
-    let nextLocation = nextProps.location;
+    const location = this.props.location;
+    const nextLocation = nextProps.location;
     if (
       location.pathname != nextLocation.pathname ||
       location.search != nextLocation.search
@@ -62,7 +62,7 @@ const ActivityFeed = createReactClass({
   },
 
   fetchData() {
-    let location = this.props.location;
+    const location = this.props.location;
     this.api.clear();
     this.api.request(this.props.endpoint, {
       method: 'GET',
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index 3c0c576d08..35a1350ad8 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -41,7 +41,7 @@ class ActivityItem extends React.Component {
 
   componentDidMount() {
     if (this.activityBubbleRef.current) {
-      let bubbleHeight = this.activityBubbleRef.current.offsetHeight;
+      const bubbleHeight = this.activityBubbleRef.current.offsetHeight;
 
       if (bubbleHeight > this.props.clipHeight) {
         // okay if this causes re-render; cannot determine until
@@ -57,18 +57,18 @@ class ActivityItem extends React.Component {
   };
 
   formatProjectActivity = (author, item) => {
-    let data = item.data;
-    let orgId = this.props.organization.slug;
-    let project = item.project;
-    let issue = item.issue;
+    const data = item.data;
+    const orgId = this.props.organization.slug;
+    const project = item.project;
+    const issue = item.issue;
 
-    let hasSentry10 = this.hasSentry10();
+    const hasSentry10 = this.hasSentry10();
 
-    let basePath = hasSentry10
+    const basePath = hasSentry10
       ? `/organizations/${orgId}/issues/`
       : `/${orgId}/${project.slug}/issues/`;
 
-    let issueLink = issue ? (
+    const issueLink = issue ? (
       <IssueLink
         organization={this.props.organization}
         orgId={orgId}
@@ -80,7 +80,7 @@ class ActivityItem extends React.Component {
       </IssueLink>
     ) : null;
 
-    let versionLink = data.version ? (
+    const versionLink = data.version ? (
       <VersionHoverCard orgId={orgId} projectId={project.slug} version={data.version}>
         <Version
           version={data.version}
@@ -253,7 +253,7 @@ class ActivityItem extends React.Component {
         let assignee;
 
         if (data.assigneeType == 'team') {
-          let team = TeamStore.getById(data.assignee);
+          const team = TeamStore.getById(data.assignee);
           assignee = team ? team.slug : '<unknown-team>';
 
           return tct('[author] assigned [issue] to #[assignee]', {
@@ -316,15 +316,15 @@ class ActivityItem extends React.Component {
   };
 
   render() {
-    let item = this.props.item;
-    let orgId = this.props.organization.slug;
+    const item = this.props.item;
+    const orgId = this.props.organization.slug;
 
     let bubbleClassName = 'activity-item-bubble';
     if (this.state.clipped) {
       bubbleClassName += ' clipped';
     }
 
-    let avatar = item.user ? (
+    const avatar = item.user ? (
       <Avatar user={item.user} size={36} className="activity-avatar" />
     ) : (
       <div className="activity-avatar avatar sentry">
@@ -332,15 +332,15 @@ class ActivityItem extends React.Component {
       </div>
     );
 
-    let author = {
+    const author = {
       name: item.user ? item.user.name : 'Sentry',
       avatar,
     };
 
-    let hasSentry10 = this.hasSentry10();
+    const hasSentry10 = this.hasSentry10();
 
     if (item.type === 'note') {
-      let noteBody = marked(item.data.text);
+      const noteBody = marked(item.data.text);
       return (
         <li className="activity-item activity-item-compact">
           <div className="activity-item-content">
diff --git a/src/sentry/static/sentry/app/components/activity/note.jsx b/src/sentry/static/sentry/app/components/activity/note.jsx
index 3547389819..4c194d80aa 100644
--- a/src/sentry/static/sentry/app/components/activity/note.jsx
+++ b/src/sentry/static/sentry/app/components/activity/note.jsx
@@ -16,14 +16,14 @@ class Note extends React.Component {
   };
 
   canEdit = () => {
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
     return user.isSuperuser || user.id === this.props.item.user.id;
   };
 
   render() {
-    let {item, author, onEdit, onDelete} = this.props;
+    const {item, author, onEdit, onDelete} = this.props;
 
-    let noteBody = marked(item.data.text);
+    const noteBody = marked(item.data.text);
     return (
       <div>
         <TimeSince date={item.dateCreated} />
diff --git a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
index de37b619ce..b76e5c3d9a 100644
--- a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
@@ -34,7 +34,7 @@ class NoteContainer extends React.Component {
   };
 
   render() {
-    let {group, item, author, sessionUser, memberList} = this.props;
+    const {group, item, author, sessionUser, memberList} = this.props;
 
     return (
       <li className="activity-note">
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index f79c6fc60a..a2a975084b 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -42,16 +42,16 @@ const NoteInput = createReactClass({
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
-    let {item, group} = this.props;
-    let updating = !!item;
+    const {item, group} = this.props;
+    const updating = !!item;
     let defaultText = '';
 
     if (updating) {
       defaultText = item.data.text;
     } else {
-      let storage = localStorage.getItem(localStorageKey);
+      const storage = localStorage.getItem(localStorageKey);
       if (storage) {
-        let {groupId, value} = JSON.parse(storage);
+        const {groupId, value} = JSON.parse(storage);
         if (groupId === group.id) {
           defaultText = value;
         }
@@ -135,9 +135,9 @@ const NoteInput = createReactClass({
   },
 
   create() {
-    let {group} = this.props;
+    const {group} = this.props;
 
-    let loadingIndicator = IndicatorStore.add(t('Posting comment..'));
+    const loadingIndicator = IndicatorStore.add(t('Posting comment..'));
 
     this.api.request('/issues/' + group.id + '/comments/', {
       method: 'POST',
@@ -171,9 +171,9 @@ const NoteInput = createReactClass({
   },
 
   update() {
-    let {group, item} = this.props;
+    const {group, item} = this.props;
 
-    let loadingIndicator = IndicatorStore.add(t('Updating comment..'));
+    const loadingIndicator = IndicatorStore.add(t('Updating comment..'));
 
     this.api.request('/issues/' + group.id + '/comments/' + item.id + '/', {
       method: 'PUT',
@@ -235,7 +235,7 @@ const NoteInput = createReactClass({
   },
 
   finalizeMentions() {
-    let {memberMentions, teamMentions} = this.state;
+    const {memberMentions, teamMentions} = this.state;
 
     // each mention looks like [id, display]
     return [...memberMentions, ...teamMentions]
@@ -251,7 +251,7 @@ const NoteInput = createReactClass({
     // onFocus event
     if (!this.state._hasFocused) {
       this.setState({_hasFocused: true});
-      let value = e.target.value;
+      const value = e.target.value;
       e.target.value = '';
       e.target.value = value;
     }
@@ -264,7 +264,7 @@ const NoteInput = createReactClass({
   },
 
   mentionableUsers() {
-    let {memberList, sessionUser} = this.props;
+    const {memberList, sessionUser} = this.props;
     return _.uniqBy(memberList, ({id}) => id)
       .filter(member => sessionUser.id !== member.id)
       .map(member => ({
@@ -275,7 +275,7 @@ const NoteInput = createReactClass({
   },
 
   mentionableTeams() {
-    let {group} = this.props;
+    const {group} = this.props;
     return (ProjectsStore.getBySlug(group.project.slug) || {
       teams: [],
     }).teams.map(team => ({
@@ -286,7 +286,7 @@ const NoteInput = createReactClass({
   },
 
   render() {
-    let {
+    const {
       error,
       errorJSON,
       loading,
@@ -297,13 +297,13 @@ const NoteInput = createReactClass({
       mentionableTeams,
     } = this.state;
 
-    let placeHolderText = t(
+    const placeHolderText = t(
       'Add details or updates to this event. \nTag users with @, or teams with #'
     );
 
-    let btnText = updating ? t('Save Comment') : t('Post Comment');
+    const btnText = updating ? t('Save Comment') : t('Post Comment');
 
-    let errorMessage =
+    const errorMessage =
       (errorJSON &&
         (typeof errorJSON.detail === 'string'
           ? errorJSON.detail
diff --git a/src/sentry/static/sentry/app/components/actorAvatar.jsx b/src/sentry/static/sentry/app/components/actorAvatar.jsx
index 3d3aeb5582..72157d822a 100644
--- a/src/sentry/static/sentry/app/components/actorAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/actorAvatar.jsx
@@ -17,15 +17,15 @@ class ActorAvatar extends React.Component {
   };
 
   render() {
-    let {actor, ...props} = this.props;
+    const {actor, ...props} = this.props;
 
     if (actor.type == 'user') {
-      let user = actor.id ? MemberListStore.getById(actor.id) : actor;
+      const user = actor.id ? MemberListStore.getById(actor.id) : actor;
       return <Avatar user={user} hasTooltip {...props} />;
     }
 
     if (actor.type == 'team') {
-      let team = TeamStore.getById(actor.id);
+      const team = TeamStore.getById(actor.id);
       return <Avatar team={team} hasTooltip {...props} />;
     }
 
diff --git a/src/sentry/static/sentry/app/components/alertLink.jsx b/src/sentry/static/sentry/app/components/alertLink.jsx
index cb31862f53..097f4d31aa 100644
--- a/src/sentry/static/sentry/app/components/alertLink.jsx
+++ b/src/sentry/static/sentry/app/components/alertLink.jsx
@@ -20,7 +20,7 @@ export default class AlertLink extends React.Component {
   };
 
   render() {
-    let {icon, children, size} = this.props;
+    const {icon, children, size} = this.props;
 
     return (
       <StyledLink {...this.props}>
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index 8f7f517e78..a897cec889 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -53,7 +53,7 @@ export default class AlertMessage extends React.PureComponent {
   };
 
   render = () => {
-    let {alert, system} = this.props;
+    const {alert, system} = this.props;
     let icon;
 
     if (alert.type == 'success') {
diff --git a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
index 73473ce6ec..3b57614959 100644
--- a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
@@ -76,9 +76,9 @@ const StyledLoadingIndicator = styled(LoadingIndicator)`
 
 function ToastIndicator({indicator, onDismiss, className, ...props}) {
   let icon;
-  let {options, message, type} = indicator;
-  let {undo, disableDismiss} = options || {};
-  let showUndo = typeof undo === 'function';
+  const {options, message, type} = indicator;
+  const {undo, disableDismiss} = options || {};
+  const showUndo = typeof undo === 'function';
   const handleClick = e => {
     if (disableDismiss) return;
     if (typeof onDismiss === 'function') {
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 87fdd9f272..be08290d14 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -50,8 +50,8 @@ const AssigneeSelectorComponent = createReactClass({
       // If session user is in the filtered list of members, put them at the top
       if (!members) return [];
 
-      let sessionUser = ConfigStore.get('user');
-      let sessionUserIndex = members.findIndex(
+      const sessionUser = ConfigStore.get('user');
+      const sessionUserIndex = members.findIndex(
         member => sessionUser && member.id === sessionUser.id
       );
 
@@ -70,9 +70,9 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   getInitialState() {
-    let group = GroupStore.get(this.props.id);
-    let memberList = MemberListStore.loaded ? MemberListStore.getAll() : null;
-    let loading = GroupStore.hasStatus(this.props.id, 'assignTo');
+    const group = GroupStore.get(this.props.id);
+    const memberList = MemberListStore.loaded ? MemberListStore.getAll() : null;
+    const loading = GroupStore.hasStatus(this.props.id, 'assignTo');
 
     return {
       assignedTo: group && group.assignedTo,
@@ -82,9 +82,9 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let loading = GroupStore.hasStatus(nextProps.id, 'assignTo');
+    const loading = GroupStore.hasStatus(nextProps.id, 'assignTo');
     if (nextProps.id !== this.props.id || loading !== this.state.loading) {
-      let group = GroupStore.get(this.props.id);
+      const group = GroupStore.get(this.props.id);
       this.setState({
         loading,
         assignedTo: group && group.assignedTo,
@@ -97,7 +97,7 @@ const AssigneeSelectorComponent = createReactClass({
       return true;
     }
 
-    let currentMembers = this.memberList();
+    const currentMembers = this.memberList();
     // XXX(billyvg): this means that once `memberList` is not-null, this component will never update due to `memberList` changes
     // Note: this allows us to show a "loading" state for memberList, but only before `MemberListStore.loadInitialData`
     // is called
@@ -115,7 +115,7 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   assignableTeams() {
-    let group = GroupStore.get(this.props.id);
+    const group = GroupStore.get(this.props.id);
 
     return (ProjectsStore.getBySlug(group.project.slug) || {
       teams: [],
@@ -133,7 +133,7 @@ const AssigneeSelectorComponent = createReactClass({
     if (!itemIds.has(this.props.id)) {
       return;
     }
-    let group = GroupStore.get(this.props.id);
+    const group = GroupStore.get(this.props.id);
     this.setState({
       assignedTo: group && group.assignedTo,
       loading: GroupStore.hasStatus(this.props.id, 'assignTo'),
@@ -170,8 +170,8 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   renderNewMemberNodes() {
-    let {size} = this.props;
-    let members = AssigneeSelectorComponent.putSessionUserFirst(this.memberList());
+    const {size} = this.props;
+    const members = AssigneeSelectorComponent.putSessionUserFirst(this.memberList());
 
     return members.map(member => {
       return {
@@ -195,7 +195,7 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   renderNewTeamNodes() {
-    let {size} = this.props;
+    const {size} = this.props;
 
     return this.assignableTeams().map(({id, display, team}) => {
       return {
@@ -216,8 +216,8 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   renderNewDropdownItems() {
-    let teams = this.renderNewTeamNodes();
-    let members = this.renderNewMemberNodes();
+    const teams = this.renderNewTeamNodes();
+    const members = this.renderNewMemberNodes();
 
     return [
       {id: 'team-header', hideGroupLabel: true, items: teams},
@@ -226,12 +226,12 @@ const AssigneeSelectorComponent = createReactClass({
   },
 
   render() {
-    let {className} = this.props;
-    let {organization} = this.context;
-    let {loading, assignedTo} = this.state;
-    let canInvite = ConfigStore.get('invitesEnabled');
-    let hasOrgWrite = organization.access.includes('org:write');
-    let memberList = this.memberList();
+    const {className} = this.props;
+    const {organization} = this.context;
+    const {loading, assignedTo} = this.state;
+    const canInvite = ConfigStore.get('invitesEnabled');
+    const hasOrgWrite = organization.access.includes('org:write');
+    const memberList = this.memberList();
 
     return (
       <div className={className}>
diff --git a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
index c24ac8dcb7..05bf9af9b7 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideAnchor.jsx
@@ -36,7 +36,7 @@ const GuideAnchor = createReactClass({
 
   componentDidUpdate(prevProps, prevState) {
     if (!prevState.active && this.state.active && this.props.type !== 'invisible') {
-      let windowHeight = $(window).height();
+      const windowHeight = $(window).height();
       $('html,body').animate({
         scrollTop: $(this.anchorElement).offset().top - windowHeight / 4,
       });
@@ -63,7 +63,7 @@ const GuideAnchor = createReactClass({
   },
 
   render() {
-    let {target, type} = this.props;
+    const {target, type} = this.props;
 
     return (
       <GuideAnchorContainer innerRef={el => (this.anchorElement = el)} type={type}>
diff --git a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
index 57f46111c4..b5a2cea151 100644
--- a/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
+++ b/src/sentry/static/sentry/app/components/assistant/guideDrawer.jsx
@@ -66,7 +66,10 @@ const GuideDrawer = createReactClass({
     // has updated the guide store and triggered a component state change. But it doesn't seem
     // to cause any issues in practice.
     if (useful && this.state.guide.cta_link) {
-      let link = this.interpolate(this.state.guide.cta_link, this.state.messageVariables);
+      const link = this.interpolate(
+        this.state.guide.cta_link,
+        this.state.messageVariables
+      );
       this.props.router.push(link);
     }
   },
@@ -78,14 +81,14 @@ const GuideDrawer = createReactClass({
   },
 
   interpolate(template, variables) {
-    let regex = /\${([^{]+)}/g;
+    const regex = /\${([^{]+)}/g;
     return template.replace(regex, (match, g1) => {
       return variables[g1.trim()];
     });
   },
 
   render() {
-    let {guide, step, messageVariables} = this.state;
+    const {guide, step, messageVariables} = this.state;
 
     if (!guide) {
       return null;
@@ -103,7 +106,7 @@ const GuideDrawer = createReactClass({
       );
     }
 
-    let isTip = guide.guide_type === 'tip';
+    const isTip = guide.guide_type === 'tip';
 
     return (
       <GuideContainer>
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index d13869bf94..a823fe0815 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -112,8 +112,8 @@ export default class AsyncComponent extends React.Component {
 
   // XXX: cant call this getInitialState as React whines
   getDefaultState() {
-    let endpoints = this.getEndpoints();
-    let state = {
+    const endpoints = this.getEndpoints();
+    const state = {
       // has all data finished requesting?
       loading: true,
       // is the component reload
@@ -150,7 +150,7 @@ export default class AsyncComponent extends React.Component {
   reloadData = () => this.fetchData({reloading: true});
 
   fetchData = extraState => {
-    let endpoints = this.getEndpoints();
+    const endpoints = this.getEndpoints();
 
     if (!endpoints.length) {
       this.setState({loading: false, error: false});
@@ -169,7 +169,7 @@ export default class AsyncComponent extends React.Component {
       options = options || {};
       // If you're using nested async components/views make sure to pass the
       // props through so that the child component has access to props.location
-      let locationQuery = (this.props.location && this.props.location.query) || {};
+      const locationQuery = (this.props.location && this.props.location.query) || {};
       let query = (params && params.query) || {};
       // If paginate option then pass entire `query` object to API call
       // It should only be expecting `query.cursor` for pagination
@@ -206,7 +206,7 @@ export default class AsyncComponent extends React.Component {
 
   handleRequestSuccess = ({stateKey, data, jqXHR}, initialRequest) => {
     this.setState(prevState => {
-      let state = {
+      const state = {
         [stateKey]: data,
         // TODO(billy): This currently fails if this request is retried by SudoModal
         [`${stateKey}PageLinks`]: jqXHR && jqXHR.getResponseHeader('Link'),
@@ -224,7 +224,7 @@ export default class AsyncComponent extends React.Component {
   };
 
   handleError(error, args) {
-    let [stateKey] = args;
+    const [stateKey] = args;
     if (error && error.responseText) {
       Sentry.addBreadcrumb({
         message: error.responseText,
@@ -233,7 +233,7 @@ export default class AsyncComponent extends React.Component {
       });
     }
     this.setState(prevState => {
-      let state = {
+      const state = {
         [stateKey]: null,
         errors: {
           ...prevState.errors,
@@ -273,7 +273,7 @@ export default class AsyncComponent extends React.Component {
    * ]
    */
   getEndpoints() {
-    let endpoint = this.getEndpoint();
+    const endpoint = this.getEndpoint();
     if (!endpoint) return [];
     return [['data', endpoint, this.getEndpointParams()]];
   }
@@ -306,18 +306,18 @@ export default class AsyncComponent extends React.Component {
 
   renderError(error, disableLog = false, disableReport = false) {
     // 401s are captured by SudaModal, but may be passed back to AsyncComponent if they close the modal without identifying
-    let unauthorizedErrors = Object.values(this.state.errors).find(
+    const unauthorizedErrors = Object.values(this.state.errors).find(
       resp => resp && resp.status === 401
     );
 
     // Look through endpoint results to see if we had any 403s, means their role can not access resource
-    let permissionErrors = Object.values(this.state.errors).find(
+    const permissionErrors = Object.values(this.state.errors).find(
       resp => resp && resp.status === 403
     );
 
     // If all error responses have status code === 0, then show error message but don't
     // log it to sentry
-    let shouldLogSentry =
+    const shouldLogSentry =
       !!Object.values(this.state.errors).find(resp => resp && resp.status !== 0) ||
       disableLog;
 
@@ -332,7 +332,7 @@ export default class AsyncComponent extends React.Component {
     }
 
     if (this.shouldRenderBadRequests) {
-      let badRequests = Object.values(this.state.errors)
+      const badRequests = Object.values(this.state.errors)
         .filter(
           resp =>
             resp && resp.status === 400 && resp.responseJSON && resp.responseJSON.detail
diff --git a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
index 892f4f3a30..6712d495e5 100644
--- a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
@@ -40,7 +40,7 @@ class AsyncComponentSearchInput extends React.Component {
   }
 
   query = debounce(searchQuery => {
-    let {router} = this.props;
+    const {router} = this.props;
     this.setState({busy: true});
     return this.props.api.request(`${this.props.url}`, {
       method: 'GET',
@@ -60,7 +60,7 @@ class AsyncComponentSearchInput extends React.Component {
   }, this.props.debounceWait);
 
   handleChange = evt => {
-    let searchQuery = evt.target.value;
+    const searchQuery = evt.target.value;
     this.query(searchQuery);
     this.setState({query: searchQuery});
   };
@@ -69,12 +69,12 @@ class AsyncComponentSearchInput extends React.Component {
    * This is called when "Enter" (more specifically a form "submit" event) is pressed.
    */
   handleSearch = evt => {
-    let {updateRoute, onSearchSubmit} = this.props;
+    const {updateRoute, onSearchSubmit} = this.props;
     evt.preventDefault();
 
     // Update the URL to reflect search term.
     if (updateRoute) {
-      let {router, location} = this.props;
+      const {router, location} = this.props;
       router.push({
         pathname: location.pathname,
         query: {
@@ -88,7 +88,7 @@ class AsyncComponentSearchInput extends React.Component {
   };
 
   render() {
-    let {placeholder, className} = this.props;
+    const {placeholder, className} = this.props;
     return (
       <Form onSubmit={this.handleSearch}>
         <Input
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 6c17e0448b..24ec220e4d 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -94,7 +94,7 @@ class AutoComplete extends React.Component {
   isControlled = () => typeof this.props.isOpen !== 'undefined';
 
   getOpenState = () => {
-    let {isOpen} = this.props;
+    const {isOpen} = this.props;
 
     return this.isControlled() ? isOpen : this.state.isOpen;
   };
@@ -111,7 +111,7 @@ class AutoComplete extends React.Component {
   };
 
   handleInputChange = ({onChange} = {}, e) => {
-    let value = e.target.value;
+    const value = e.target.value;
 
     // We force `isOpen: true` here because:
     // 1) it's possible to have menu closed but input with focus (i.e. hitting "Esc")
@@ -159,10 +159,10 @@ class AutoComplete extends React.Component {
   };
 
   handleInputKeyDown = ({onKeyDown} = {}, e) => {
-    let hasHighlightedItem =
+    const hasHighlightedItem =
       this.items.size && this.items.has(this.state.highlightedIndex);
-    let canSelectWithEnter = this.props.shouldSelectWithEnter && e.key === 'Enter';
-    let canSelectWithTab = this.props.shouldSelectWithTab && e.key === 'Tab';
+    const canSelectWithEnter = this.props.shouldSelectWithEnter && e.key === 'Enter';
+    const canSelectWithTab = this.props.shouldSelectWithTab && e.key === 'Tab';
 
     if (hasHighlightedItem && (canSelectWithEnter || canSelectWithTab)) {
       this.handleSelect(this.items.get(this.state.highlightedIndex), e);
@@ -202,11 +202,11 @@ class AutoComplete extends React.Component {
    * When an item is selected via clicking or using the keyboard (e.g. pressing "Enter")
    */
   handleSelect = (item, e) => {
-    let {onSelect, itemToString, closeOnSelect} = this.props;
+    const {onSelect, itemToString, closeOnSelect} = this.props;
 
     callIfFunction(onSelect, item, this.state, e);
 
-    let newState = {
+    const newState = {
       selectedItem: item,
     };
 
@@ -219,7 +219,7 @@ class AutoComplete extends React.Component {
   };
 
   moveHighlightedIndex = (step, e) => {
-    let listSize = this.items.size - 1;
+    const listSize = this.items.size - 1;
     let newIndex = this.state.highlightedIndex + step;
 
     // Make sure new index is within bounds
@@ -236,7 +236,7 @@ class AutoComplete extends React.Component {
    * This is exposed to render function
    */
   openMenu = (...args) => {
-    let {onOpen, disabled} = this.props;
+    const {onOpen, disabled} = this.props;
 
     callIfFunction(onOpen, ...args);
 
@@ -254,7 +254,7 @@ class AutoComplete extends React.Component {
    * This is exposed to render function
    */
   closeMenu = (...args) => {
-    let {onClose, resetInputOnClose} = this.props;
+    const {onClose, resetInputOnClose} = this.props;
 
     callIfFunction(onClose, ...args);
 
@@ -283,7 +283,7 @@ class AutoComplete extends React.Component {
       console.warn('getItemProps requires an object with an `item` key');
     }
 
-    let newIndex = index || this.items.size;
+    const newIndex = index || this.items.size;
     this.items.set(newIndex, item);
 
     return {
@@ -298,8 +298,8 @@ class AutoComplete extends React.Component {
   });
 
   render() {
-    let {children, onMenuOpen} = this.props;
-    let isOpen = this.getOpenState();
+    const {children, onMenuOpen} = this.props;
+    const isOpen = this.getOpenState();
 
     return (
       <DropdownMenu
diff --git a/src/sentry/static/sentry/app/components/autoSelectText.jsx b/src/sentry/static/sentry/app/components/autoSelectText.jsx
index d85d6d6e66..93351ee8c6 100644
--- a/src/sentry/static/sentry/app/components/autoSelectText.jsx
+++ b/src/sentry/static/sentry/app/components/autoSelectText.jsx
@@ -27,7 +27,7 @@ class AutoSelectText extends React.Component {
   };
 
   render() {
-    let {children, ...props} = this.props;
+    const {children, ...props} = this.props;
 
     if (typeof children === 'function') {
       return children({
diff --git a/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
index 960263a83c..4a66bdfd44 100644
--- a/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/baseAvatar.jsx
@@ -68,10 +68,10 @@ class BaseAvatar extends React.Component {
   }
 
   getRemoteImageSize = () => {
-    let {remoteImageSize, size} = this.props;
+    const {remoteImageSize, size} = this.props;
     // Try to make sure remote image size is >= requested size
     // If requested size > allowed size then use the largest allowed size
-    let allowed =
+    const allowed =
       size &&
       (ALLOWED_SIZES.find(allowedSize => allowedSize >= size) ||
         ALLOWED_SIZES[ALLOWED_SIZES.length - 1]);
@@ -80,7 +80,7 @@ class BaseAvatar extends React.Component {
   };
 
   buildUploadUrl = () => {
-    let {uploadPath, uploadId} = this.props;
+    const {uploadPath, uploadId} = this.props;
 
     return `/${uploadPath || 'avatar'}/${uploadId}/?${qs.stringify({
       s: DEFAULT_REMOTE_SIZE,
@@ -100,9 +100,9 @@ class BaseAvatar extends React.Component {
       return null;
     }
 
-    let {type, round, gravatarId} = this.props;
+    const {type, round, gravatarId} = this.props;
 
-    let eventProps = {
+    const eventProps = {
       onError: this.handleError,
       onLoad: this.handleLoad,
     };
@@ -127,12 +127,20 @@ class BaseAvatar extends React.Component {
   };
 
   renderLetterAvatar() {
-    let {title, letterId, round} = this.props;
+    const {title, letterId, round} = this.props;
     return <LetterAvatar round={round} displayName={title} identifier={letterId} />;
   }
 
   render() {
-    let {className, round, hasTooltip, size, tooltip, tooltipOptions, style} = this.props;
+    const {
+      className,
+      round,
+      hasTooltip,
+      size,
+      tooltip,
+      tooltipOptions,
+      style,
+    } = this.props;
     let sizeStyle = {};
 
     if (size) {
diff --git a/src/sentry/static/sentry/app/components/avatar/gravatar.jsx b/src/sentry/static/sentry/app/components/avatar/gravatar.jsx
index ea0a07be16..a461bf2173 100644
--- a/src/sentry/static/sentry/app/components/avatar/gravatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/gravatar.jsx
@@ -45,12 +45,12 @@ class Gravatar extends React.Component {
   }
 
   buildGravatarUrl = () => {
-    let {gravatarId, remoteSize, placeholder} = this.props;
+    const {gravatarId, remoteSize, placeholder} = this.props;
     let url = ConfigStore.getConfig().gravatarBaseUrl + '/avatar/';
 
     url += this.state.MD5(gravatarId);
 
-    let query = {
+    const query = {
       s: remoteSize || undefined,
       // If gravatar is not found we need the request to return an error,
       // otherwise error handler will not trigger and avatar will not have a display a LetterAvatar backup.
@@ -67,7 +67,7 @@ class Gravatar extends React.Component {
       return null;
     }
 
-    let {round, ...props} = this.props;
+    const {round, ...props} = this.props;
 
     return <Image round={round} src={this.buildGravatarUrl()} {...props} />;
   }
diff --git a/src/sentry/static/sentry/app/components/avatar/index.jsx b/src/sentry/static/sentry/app/components/avatar/index.jsx
index e7e3530920..f43f8ab1a1 100644
--- a/src/sentry/static/sentry/app/components/avatar/index.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/index.jsx
@@ -19,7 +19,7 @@ class Avatar extends React.Component {
   };
 
   render() {
-    let {user, team, project, organization, ...props} = this.props;
+    const {user, team, project, organization, ...props} = this.props;
 
     if (user) {
       return <UserAvatar user={user} {...props} />;
diff --git a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
index e4520ca66f..6dd7e8eb50 100644
--- a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
@@ -11,10 +11,10 @@ class OrganizationAvatar extends React.Component {
   };
 
   render() {
-    let {organization, ...props} = this.props;
+    const {organization, ...props} = this.props;
     if (!organization) return null;
-    let slug = (organization && organization.slug) || '';
-    let title = explodeSlug(slug);
+    const slug = (organization && organization.slug) || '';
+    const title = explodeSlug(slug);
 
     return (
       <BaseAvatar
diff --git a/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
index 5bc33efcb7..297f17d616 100644
--- a/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/projectAvatar.jsx
@@ -22,7 +22,7 @@ class ProjectAvatar extends React.Component {
   };
 
   render() {
-    let {project, ...props} = this.props;
+    const {project, ...props} = this.props;
 
     return <PlatformList platforms={this.getPlatforms(project)} {...props} max={1} />;
   }
diff --git a/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx
index a0cf23f0bd..255f872776 100644
--- a/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx
@@ -10,7 +10,7 @@ class SentryAppAvatar extends React.Component {
   };
 
   render() {
-    let {sentryApp, ...props} = this.props;
+    const {sentryApp, ...props} = this.props;
     if (!sentryApp) return null;
 
     return (
diff --git a/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
index 499107b491..02fee50d96 100644
--- a/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
@@ -11,11 +11,11 @@ class TeamAvatar extends React.Component {
   };
 
   render() {
-    let {team, ...props} = this.props;
+    const {team, ...props} = this.props;
     if (!team) return null;
-    let slug = (team && team.slug) || '';
-    let title = explodeSlug(slug);
-    let tooltip = `#${title}`;
+    const slug = (team && team.slug) || '';
+    const title = explodeSlug(slug);
+    const tooltip = `#${title}`;
 
     return (
       <BaseAvatar
diff --git a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
index 78975df177..a21a095252 100644
--- a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
@@ -33,11 +33,11 @@ class UserAvatar extends React.Component {
   };
 
   render() {
-    let {user, gravatar, renderTooltip, ...props} = this.props;
+    const {user, gravatar, renderTooltip, ...props} = this.props;
 
     if (!user) return null;
 
-    let type = this.getType(user, gravatar);
+    const type = this.getType(user, gravatar);
 
     return (
       <BaseAvatar
diff --git a/src/sentry/static/sentry/app/components/avatarChooser.jsx b/src/sentry/static/sentry/app/components/avatarChooser.jsx
index cfb2abed35..e1cc74dda7 100644
--- a/src/sentry/static/sentry/app/components/avatarChooser.jsx
+++ b/src/sentry/static/sentry/app/components/avatarChooser.jsx
@@ -77,19 +77,19 @@ const AvatarChooser = createReactClass({
   },
 
   handleSuccess(model) {
-    let {onSave} = this.props;
+    const {onSave} = this.props;
     this.setState({model});
     onSave(model);
     addSuccessMessage(t('Successfully saved avatar preferences'));
   },
 
   handleSaveSettings(ev) {
-    let {endpoint} = this.props;
-    let {model, dataUrl} = this.state;
+    const {endpoint} = this.props;
+    const {model, dataUrl} = this.state;
     ev.preventDefault();
     let data = {};
-    let avatarType = model && model.avatar ? model.avatar.avatarType : undefined;
-    let avatarPhoto = dataUrl ? dataUrl.split(',')[1] : null;
+    const avatarType = model && model.avatar ? model.avatar.avatarType : undefined;
+    const avatarPhoto = dataUrl ? dataUrl.split(',')[1] : null;
 
     data = {
       avatar_photo: avatarPhoto,
@@ -108,13 +108,13 @@ const AvatarChooser = createReactClass({
   },
 
   handleChange(id) {
-    let model = {...this.state.model};
+    const model = {...this.state.model};
     model.avatar.avatarType = id;
     this.updateState(model);
   },
 
   render() {
-    let {
+    const {
       allowGravatar,
       allowUpload,
       allowLetter,
@@ -123,7 +123,7 @@ const AvatarChooser = createReactClass({
       isUser,
       disabled,
     } = this.props;
-    let {hasError, model} = this.state;
+    const {hasError, model} = this.state;
 
     if (hasError) {
       return <LoadingError />;
@@ -132,13 +132,13 @@ const AvatarChooser = createReactClass({
       return <LoadingIndicator />;
     }
 
-    let avatarType = (model.avatar && model.avatar.avatarType) || 'letter_avatar';
-    let isLetter = avatarType === 'letter_avatar';
+    const avatarType = (model.avatar && model.avatar.avatarType) || 'letter_avatar';
+    const isLetter = avatarType === 'letter_avatar';
     // let isUpload = avatarType === 'upload';
-    let isTeam = type === 'team';
-    let isOrganization = type === 'organization';
-    let isProject = type === 'project';
-    let choices = [];
+    const isTeam = type === 'team';
+    const isOrganization = type === 'organization';
+    const isProject = type === 'project';
+    const choices = [];
 
     if (allowLetter) {
       choices.push(['letter_avatar', 'Use initials']);
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.jsx b/src/sentry/static/sentry/app/components/avatarCropper.jsx
index 5b8034ecfd..32e4e3cd20 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.jsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.jsx
@@ -39,7 +39,7 @@ class AvatarCropper extends React.Component {
 
   onChange = ev => {
     /*eslint consistent-return:0*/
-    let file = ev.target.files[0];
+    const file = ev.target.files[0];
 
     if (!file) return; // No file selected (e.g. user clicked "cancel")
 
@@ -65,8 +65,8 @@ class AvatarCropper extends React.Component {
   updateDimensions = ev => {
     if (!this.cropContainer) return;
 
-    let $container = $(this.cropContainer);
-    let resizeDimensions = this.state.resizeDimensions;
+    const $container = $(this.cropContainer);
+    const resizeDimensions = this.state.resizeDimensions;
     let pageY = ev.pageY;
     let pageX = ev.pageX;
     let top = resizeDimensions.top + (pageY - this.state.mousePosition.pageY);
@@ -143,9 +143,9 @@ class AvatarCropper extends React.Component {
   updateSize = ev => {
     if (!this.cropContainer) return;
 
-    let yDiff = ev.pageY - this.state.mousePosition.pageY;
-    let xDiff = ev.pageX - this.state.mousePosition.pageX;
-    let $container = $(this.cropContainer);
+    const yDiff = ev.pageY - this.state.mousePosition.pageY;
+    const xDiff = ev.pageX - this.state.mousePosition.pageX;
+    const $container = $(this.cropContainer);
 
     this.setState({
       resizeDimensions: this.getNewDimensions($container, yDiff, xDiff),
@@ -173,9 +173,9 @@ class AvatarCropper extends React.Component {
   };
 
   getNewDimensions = ($container, yDiff, xDiff) => {
-    let oldDimensions = this.state.resizeDimensions;
-    let resizeDirection = this.state.resizeDirection;
-    let diff = this['getDiff' + resizeDirection.toUpperCase()](yDiff, xDiff);
+    const oldDimensions = this.state.resizeDimensions;
+    const resizeDirection = this.state.resizeDirection;
+    const diff = this['getDiff' + resizeDirection.toUpperCase()](yDiff, xDiff);
 
     let height = $container.height() - oldDimensions.top;
     let width = $container.width() - oldDimensions.left;
@@ -185,9 +185,9 @@ class AvatarCropper extends React.Component {
     // ne: size, top
     // sw: size, left
     // se: size
-    let editingTop = resizeDirection === 'nw' || resizeDirection === 'ne';
-    let editingLeft = resizeDirection === 'nw' || resizeDirection === 'sw';
-    let newDimensions = {size: oldDimensions.size + diff};
+    const editingTop = resizeDirection === 'nw' || resizeDirection === 'ne';
+    const editingLeft = resizeDirection === 'nw' || resizeDirection === 'sw';
+    const newDimensions = {size: oldDimensions.size + diff};
     if (editingTop) {
       newDimensions.top = oldDimensions.top - diff;
       height = $container.height() - newDimensions.top;
@@ -214,7 +214,7 @@ class AvatarCropper extends React.Component {
       newDimensions.left = 0;
     }
 
-    let maxSize = Math.min(width, height);
+    const maxSize = Math.min(width, height);
     if (newDimensions.size > maxSize) {
       if (editingTop) {
         newDimensions.top = newDimensions.top + newDimensions.size - maxSize;
@@ -240,7 +240,7 @@ class AvatarCropper extends React.Component {
   };
 
   validateImage = () => {
-    let img = this.image;
+    const img = this.image;
     if (!img) return;
     if (img.naturalWidth < this.MIN_DIMENSION || img.naturalHeight < this.MIN_DIMENSION) {
       return (
@@ -263,7 +263,7 @@ class AvatarCropper extends React.Component {
   };
 
   onLoad = ev => {
-    let error = this.validateImage();
+    const error = this.validateImage();
     if (error) {
       window.URL.revokeObjectURL(this.state.objectURL);
       this.setState({objectURL: null});
@@ -272,8 +272,8 @@ class AvatarCropper extends React.Component {
     }
     if (!this.image) return;
 
-    let $img = $(this.image);
-    let dimension = Math.min($img.height(), $img.width());
+    const $img = $(this.image);
+    const dimension = Math.min($img.height(), $img.width());
     this.setState(
       {
         resizeDimensions: Object.assign({size: dimension, top: 0, left: 0}),
@@ -283,13 +283,13 @@ class AvatarCropper extends React.Component {
   };
 
   drawToCanvas = () => {
-    let canvas = this.canvas;
+    const canvas = this.canvas;
     if (!canvas) return;
     if (!this.image) return;
-    let resizeDimensions = this.state.resizeDimensions;
-    let img = this.image;
+    const resizeDimensions = this.state.resizeDimensions;
+    const img = this.image;
     // Calculate difference between natural dimensions and rendered dimensions
-    let imgRatio =
+    const imgRatio =
       (img.naturalHeight / $(img).height() + img.naturalWidth / $(img).width()) / 2;
     canvas.width = resizeDimensions.size * imgRatio;
     canvas.height = resizeDimensions.size * imgRatio;
@@ -310,15 +310,15 @@ class AvatarCropper extends React.Component {
   };
 
   finishCrop = () => {
-    let canvas = this.canvas;
+    const canvas = this.canvas;
     if (!canvas) return;
     this.props.updateDataUrlState({dataUrl: canvas.toDataURL()});
   };
 
   getImgSrc = () => {
-    let {savedDataUrl, model, type} = this.props;
-    let uuid = model && model.avatar.avatarUuid;
-    let photoUrl = uuid && `/${AVATAR_URL_MAP[type] || 'avatar'}/${uuid}/`;
+    const {savedDataUrl, model, type} = this.props;
+    const uuid = model && model.avatar.avatarUuid;
+    const photoUrl = uuid && `/${AVATAR_URL_MAP[type] || 'avatar'}/${uuid}/`;
     return savedDataUrl || this.state.objectURL || photoUrl;
   };
 
@@ -327,12 +327,12 @@ class AvatarCropper extends React.Component {
   };
 
   renderImageCrop = () => {
-    let src = this.getImgSrc();
+    const src = this.getImgSrc();
     if (!src) {
       return null;
     }
-    let resizeDimensions = this.state.resizeDimensions;
-    let style = {
+    const resizeDimensions = this.state.resizeDimensions;
+    const style = {
       top: resizeDimensions.top,
       left: resizeDimensions.left,
       width: resizeDimensions.size,
@@ -379,8 +379,8 @@ class AvatarCropper extends React.Component {
   };
 
   render() {
-    let src = this.getImgSrc();
-    let style = {
+    const src = this.getImgSrc();
+    const style = {
       position: 'absolute',
       opacity: 0,
     };
diff --git a/src/sentry/static/sentry/app/components/avatarRadio.jsx b/src/sentry/static/sentry/app/components/avatarRadio.jsx
index 81279c72e4..742febb9a9 100644
--- a/src/sentry/static/sentry/app/components/avatarRadio.jsx
+++ b/src/sentry/static/sentry/app/components/avatarRadio.jsx
@@ -20,14 +20,16 @@ const AvatarRadio = createReactClass({
   },
 
   onChange(ev) {
-    let avatar = Object.assign({}, this.props.user.avatar, {avatarType: ev.target.value});
+    const avatar = Object.assign({}, this.props.user.avatar, {
+      avatarType: ev.target.value,
+    });
     this.props.user.avatar = avatar;
     this.props.updateUser(this.props.user);
   },
 
   render() {
-    let radios = [];
-    for (let opt in this.OPTIONS) {
+    const radios = [];
+    for (const opt in this.OPTIONS) {
       radios.push(
         <li className="radio" key={opt}>
           <label>
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 5892c42c24..81f765165e 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -29,10 +29,10 @@ class BarChart extends React.Component {
   };
 
   render() {
-    let points = this.props.points.map(point => {
+    const points = this.props.points.map(point => {
       return {x: point.x, y: [point.y]};
     });
-    let props = Object.assign({}, this.props, {points});
+    const props = Object.assign({}, this.props, {points});
     return <StackedBarChart {...props} />;
   }
 }
diff --git a/src/sentry/static/sentry/app/components/button/index.jsx b/src/sentry/static/sentry/app/components/button/index.jsx
index 35bba882e4..6d6529203b 100644
--- a/src/sentry/static/sentry/app/components/button/index.jsx
+++ b/src/sentry/static/sentry/app/components/button/index.jsx
@@ -52,7 +52,7 @@ class Button extends React.Component {
 
   // Intercept onClick and propagate
   handleClick = (...args) => {
-    let {disabled, busy, onClick} = this.props;
+    const {disabled, busy, onClick} = this.props;
 
     // Don't allow clicks when disabled or busy
     if (disabled || busy) return;
@@ -63,13 +63,13 @@ class Button extends React.Component {
   };
 
   getUrl = prop => {
-    let {disabled} = this.props;
+    const {disabled} = this.props;
     if (disabled) return null;
     return prop;
   };
 
   render() {
-    let {
+    const {
       size,
       to,
       href,
@@ -88,13 +88,13 @@ class Button extends React.Component {
     } = this.props;
 
     // For `aria-label`
-    let screenReaderLabel =
+    const screenReaderLabel =
       label || (typeof children === 'string' ? children : undefined);
 
     // Buttons come in 4 flavors: <Link>, <ExternalLink>, <a>, and <button>.
     // Let's use props to determine which to serve up, so we don't have to think about it.
     // *Note* you must still handle tabindex manually.
-    let button = (
+    const button = (
       <StyledButton
         aria-label={screenReaderLabel}
         to={this.getUrl(to)}
@@ -155,8 +155,8 @@ const getBoxShadow = active => ({priority, borderless, disabled}) => {
 };
 
 const getColors = ({priority, disabled, borderless, theme}) => {
-  let themeName = disabled ? 'disabled' : priority || 'default';
-  let {
+  const themeName = disabled ? 'disabled' : priority || 'default';
+  const {
     color,
     colorActive,
     background,
diff --git a/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx b/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx
index 8f963c8644..2c756aa232 100644
--- a/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx
+++ b/src/sentry/static/sentry/app/components/charts/panelChart/legend.jsx
@@ -19,7 +19,7 @@ const Legend = styled(
     };
 
     render() {
-      let {className, series, previousPeriod} = this.props;
+      const {className, series, previousPeriod} = this.props;
 
       return (
         <Flex className={className}>
diff --git a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
index f6d337b808..a3306c874d 100644
--- a/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/percentageAreaChart.jsx
@@ -30,7 +30,7 @@ export default class PercentageAreaChart extends React.Component {
   }
 
   getSeries() {
-    let {series, getDataItemName, getValue} = this.props;
+    const {series, getDataItemName, getValue} = this.props;
 
     const totalsArray = series.length
       ? series[0].data.map(({name, value}, i) => {
diff --git a/src/sentry/static/sentry/app/components/charts/pieChart.jsx b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
index e7b72a7507..386b2d6fba 100644
--- a/src/sentry/static/sentry/app/components/charts/pieChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
@@ -24,7 +24,7 @@ class PieChart extends React.Component {
   }
 
   componentDidMount() {
-    let {selectOnRender} = this.props;
+    const {selectOnRender} = this.props;
 
     if (!selectOnRender) return;
 
diff --git a/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx b/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
index 651fc1137c..7537082409 100644
--- a/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
+++ b/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
@@ -75,12 +75,12 @@ export const TableChart = styled(
       }) => (
         <TableBody height={bodyHeight}>
           {dataMaybeWithTotals.map((row, rowIndex) => {
-            let lastRowIndex = dataMaybeWithTotals.length - 1;
-            let isLastRow = rowIndex === lastRowIndex;
-            let showBar = !isLastRow && shadeRowPercentage;
+            const lastRowIndex = dataMaybeWithTotals.length - 1;
+            const isLastRow = rowIndex === lastRowIndex;
+            const showBar = !isLastRow && shadeRowPercentage;
 
             // rowTotals does not include the grand total of data
-            let rowTotal =
+            const rowTotal =
               showRowTotal && rowIndex < data.length
                 ? [dataTotals.rowTotals[rowIndex]]
                 : [];
@@ -145,8 +145,8 @@ export const TableChart = styled(
             <DataGroup>
               {items &&
                 items.slice(dataStartIndex).map((rowDataValue, columnIndex) => {
-                  let index = columnIndex + dataStartIndex;
-                  let renderCellProps = {
+                  const index = columnIndex + dataStartIndex;
+                  const renderCellProps = {
                     isTableHeader,
                     value: rowDataValue,
                     columnIndex: index,
@@ -169,7 +169,7 @@ export const TableChart = styled(
 
       // Default renderer for ALL cells
       const defaultRenderCell = p => {
-        let {
+        const {
           isTableHeader,
           isHeader,
           justify,
@@ -249,7 +249,7 @@ export const TableChart = styled(
     }
 
     getDataWithTotals(dataTotals) {
-      let {
+      const {
         data,
         dataStartIndex,
         showRowTotal,
@@ -259,7 +259,7 @@ export const TableChart = styled(
 
       if (!data) return [];
 
-      let totalRow = showColumnTotal
+      const totalRow = showColumnTotal
         ? [
             [
               // Label for Total Row
@@ -281,7 +281,7 @@ export const TableChart = styled(
     }
 
     render() {
-      let {
+      const {
         className,
         children,
         data,
@@ -297,18 +297,18 @@ export const TableChart = styled(
       } = this.props;
 
       // If we need to calculate totals...
-      let dataTotals =
+      const dataTotals =
         showRowTotal || showColumnTotal || shadeRowPercentage
           ? this.getTotals(data)
           : {
               rowTotals: [],
               columnTotals: [],
             };
-      let dataMaybeWithTotals = this.getDataWithTotals(dataTotals);
+      const dataMaybeWithTotals = this.getDataWithTotals(dataTotals);
 
       // For better render customization
-      let isRenderProp = typeof children === 'function';
-      let renderProps = {
+      const isRenderProp = typeof children === 'function';
+      const renderProps = {
         data,
         dataTotals,
         dataMaybeWithTotals,
@@ -359,8 +359,8 @@ export const TableChartRow = styled(
     };
 
     render() {
-      let {className, showBar, total, value, children} = this.props;
-      let barWidth =
+      const {className, showBar, total, value, children} = this.props;
+      const barWidth =
         total > 0 && typeof value === 'number' ? Math.round(value / total * 100) : 0;
 
       return (
diff --git a/src/sentry/static/sentry/app/components/charts/utils.jsx b/src/sentry/static/sentry/app/components/charts/utils.jsx
index 0d22387893..56e72aaa36 100644
--- a/src/sentry/static/sentry/app/components/charts/utils.jsx
+++ b/src/sentry/static/sentry/app/components/charts/utils.jsx
@@ -12,7 +12,7 @@ export function truncationFormatter(value, truncate) {
   if (!truncate) {
     return value;
   }
-  let truncationLength =
+  const truncationLength =
     truncate && typeof truncate === 'number' ? truncate : DEFAULT_TRUNCATE_LENGTH;
   return value.length > truncationLength
     ? value.substring(0, truncationLength) + '…'
diff --git a/src/sentry/static/sentry/app/components/checkbox.jsx b/src/sentry/static/sentry/app/components/checkbox.jsx
index 8fff7fceef..087585b4d0 100644
--- a/src/sentry/static/sentry/app/components/checkbox.jsx
+++ b/src/sentry/static/sentry/app/components/checkbox.jsx
@@ -7,8 +7,8 @@ class Checkbox extends React.Component {
   };
 
   render() {
-    let {className, ...otherProps} = this.props;
-    let cx = classNames('chk-select', className);
+    const {className, ...otherProps} = this.props;
+    const cx = classNames('chk-select', className);
     return <input type="checkbox" className={cx} {...otherProps} />;
   }
 }
diff --git a/src/sentry/static/sentry/app/components/clipboard.jsx b/src/sentry/static/sentry/app/components/clipboard.jsx
index 69db99f5b0..884403628c 100644
--- a/src/sentry/static/sentry/app/components/clipboard.jsx
+++ b/src/sentry/static/sentry/app/components/clipboard.jsx
@@ -35,10 +35,10 @@ class Clipboard extends React.Component {
   handleMount = ref => {
     if (!ref) return;
 
-    let {hideMessages, successMessage, errorMessage, onSuccess, onError} = this.props;
-    let hasSuccessCb = typeof onSuccess === 'function';
-    let hasErrorCb = typeof onError === 'function';
-    let bindEventHandlers = !hideMessages || hasSuccessCb || hasErrorCb;
+    const {hideMessages, successMessage, errorMessage, onSuccess, onError} = this.props;
+    const hasSuccessCb = typeof onSuccess === 'function';
+    const hasErrorCb = typeof onError === 'function';
+    const bindEventHandlers = !hideMessages || hasSuccessCb || hasErrorCb;
 
     this.clipboard = new Clip(ReactDOM.findDOMNode(ref), {
       text: () => this.props.value,
@@ -66,7 +66,7 @@ class Clipboard extends React.Component {
   };
 
   render() {
-    let {children, hideUnsupported} = this.props;
+    const {children, hideUnsupported} = this.props;
 
     // Browser doesn't support `execCommand`
     if (hideUnsupported && !Clip.isSupported()) {
diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
index cb83ea2ec5..45cbb2e2ee 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.jsx
@@ -29,7 +29,7 @@ class ClippedBox extends React.Component {
   }
 
   componentDidMount() {
-    let renderedHeight = ReactDOM.findDOMNode(this).offsetHeight;
+    const renderedHeight = ReactDOM.findDOMNode(this).offsetHeight;
 
     if (!this.state.clipped && renderedHeight > this.props.clipHeight) {
       /*eslint react/no-did-mount-set-state:0*/
diff --git a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
index b7d2411656..e7f077da44 100644
--- a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
+++ b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
@@ -20,7 +20,7 @@ class CommitBar extends React.Component {
   };
 
   render() {
-    let barStyle = {};
+    const barStyle = {};
     barStyle.width = this.props.authorCommits / this.props.totalCommits * 100 + '%';
 
     return <div className="commit-bar" style={barStyle} />;
@@ -84,10 +84,10 @@ const CommitAuthorStats = createReactClass({
 
     if (this.state.error) return <LoadingError />;
 
-    let {commitList} = this.state;
+    const {commitList} = this.state;
 
-    let commitAuthors = commitList.reduce((_commitAuthors, commit) => {
-      let {author} = commit;
+    const commitAuthors = commitList.reduce((_commitAuthors, commit) => {
+      const {author} = commit;
       if (!_commitAuthors.hasOwnProperty(author.email)) {
         _commitAuthors[author.email] = {
           commitCount: 1,
@@ -99,7 +99,7 @@ const CommitAuthorStats = createReactClass({
       return _commitAuthors;
     }, {});
 
-    let commitAuthorValues = Object.values(commitAuthors);
+    const commitAuthorValues = Object.values(commitAuthors);
 
     // sort commitAuthors by highest commitCount to lowest commitCount
     commitAuthorValues.sort((a, b) => {
@@ -113,7 +113,7 @@ const CommitAuthorStats = createReactClass({
         <Panel>
           <PanelBody>
             {commitAuthorValues.map((commitAuthor, i) => {
-              let {author, commitCount} = commitAuthor;
+              const {author, commitCount} = commitAuthor;
               return (
                 <PanelItem key={i} p={1} align="center">
                   <Flex>
diff --git a/src/sentry/static/sentry/app/components/commitRow.jsx b/src/sentry/static/sentry/app/components/commitRow.jsx
index 4e3cc1937d..275d358e3a 100644
--- a/src/sentry/static/sentry/app/components/commitRow.jsx
+++ b/src/sentry/static/sentry/app/components/commitRow.jsx
@@ -21,13 +21,13 @@ export default class CommitRow extends React.Component {
       return t('No message provided');
     }
 
-    let firstLine = message.split(/\n/)[0];
+    const firstLine = message.split(/\n/)[0];
 
     return firstLine;
   };
 
   render() {
-    let {id, dateCreated, message, author, repository} = this.props.commit;
+    const {id, dateCreated, message, author, repository} = this.props.commit;
     return (
       <PanelItem key={id} align="center">
         <AvatarWrapper mr={2}>
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index a5a903612c..458370f764 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -25,8 +25,8 @@ class CompactIssueHeader extends React.Component {
   };
 
   getTitle = () => {
-    let data = this.props.data;
-    let metadata = data.metadata;
+    const data = this.props.data;
+    const metadata = data.metadata;
     switch (data.type) {
       case 'error':
         return (
@@ -52,8 +52,8 @@ class CompactIssueHeader extends React.Component {
   };
 
   getMessage = () => {
-    let data = this.props.data;
-    let metadata = data.metadata;
+    const data = this.props.data;
+    const metadata = data.metadata;
     switch (data.type) {
       case 'error':
         return metadata.value;
@@ -65,13 +65,13 @@ class CompactIssueHeader extends React.Component {
   };
 
   render() {
-    let {data, organization, projectId} = this.props;
+    const {data, organization, projectId} = this.props;
 
-    let hasNewRoutes = new Set(organization.features).has('sentry10');
+    const hasNewRoutes = new Set(organization.features).has('sentry10');
 
     let styles = {};
 
-    let basePath = hasNewRoutes
+    const basePath = hasNewRoutes
       ? `/organizations/${organization.slug}/issues/`
       : `/${organization.slug}/${projectId}/issues/`;
 
@@ -149,15 +149,15 @@ const CompactIssue = createReactClass({
     if (!itemIds.has(this.props.id)) {
       return;
     }
-    let id = this.props.id;
-    let issue = GroupStore.get(id);
+    const id = this.props.id;
+    const issue = GroupStore.get(id);
     this.setState({
       issue,
     });
   },
 
   onSnooze(duration) {
-    let data = {
+    const data = {
       status: 'ignored',
     };
 
@@ -167,8 +167,8 @@ const CompactIssue = createReactClass({
   },
 
   onUpdate(data) {
-    let issue = this.state.issue;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const issue = this.state.issue;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
     this.api.bulkUpdate(
       {
@@ -186,8 +186,8 @@ const CompactIssue = createReactClass({
   },
 
   render() {
-    let issue = this.state.issue;
-    let {id, organization} = this.props;
+    const issue = this.state.issue;
+    const {id, organization} = this.props;
 
     let className = 'issue';
     if (issue.isBookmarked) {
@@ -209,7 +209,7 @@ const CompactIssue = createReactClass({
       className += ' with-graph';
     }
 
-    let title = <span className="icon-more" />;
+    const title = <span className="icon-more" />;
 
     return (
       <PanelItem
diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index ce58e5d16d..16269a83ea 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -57,7 +57,7 @@ class Confirm extends React.PureComponent {
   }
 
   openModal = () => {
-    let {onConfirming, disableConfirmButton} = this.props;
+    const {onConfirming, disableConfirmButton} = this.props;
     if (typeof onConfirming === 'function') {
       onConfirming();
     }
@@ -72,7 +72,7 @@ class Confirm extends React.PureComponent {
   };
 
   closeModal = () => {
-    let {onCancel, disableConfirmButton} = this.props;
+    const {onCancel, disableConfirmButton} = this.props;
     if (typeof onCancel === 'function') {
       onCancel();
     }
@@ -100,7 +100,7 @@ class Confirm extends React.PureComponent {
   };
 
   handleToggle = e => {
-    let {disabled, bypass} = this.props;
+    const {disabled, bypass} = this.props;
     if (disabled) return;
 
     if (bypass) {
@@ -117,7 +117,7 @@ class Confirm extends React.PureComponent {
   };
 
   render() {
-    let {
+    const {
       disabled,
       message,
       renderMessage,
diff --git a/src/sentry/static/sentry/app/components/confirmDelete.jsx b/src/sentry/static/sentry/app/components/confirmDelete.jsx
index 6b65ff9699..267c414b80 100644
--- a/src/sentry/static/sentry/app/components/confirmDelete.jsx
+++ b/src/sentry/static/sentry/app/components/confirmDelete.jsx
@@ -41,7 +41,7 @@ class ConfirmDelete extends React.PureComponent {
   }
 
   handleChange = evt => {
-    let input = evt.target.value;
+    const input = evt.target.value;
     if (input === this.props.confirmInput) {
       this.setState({disableConfirmButton: false, confirmInput: input});
     } else {
@@ -50,8 +50,8 @@ class ConfirmDelete extends React.PureComponent {
   };
 
   render() {
-    let {confirmInput, message, ...props} = this.props;
-    let {disableConfirmButton} = this.state;
+    const {confirmInput, message, ...props} = this.props;
+    const {disableConfirmButton} = this.state;
 
     return (
       <Confirm
diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index 95e4bf94b1..3dee2ed229 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -6,8 +6,8 @@ import _ from 'lodash';
 import {isUrl} from 'app/utils';
 
 function looksLikeObjectRepr(value) {
-  let a = value[0];
-  let z = value[value.length - 1];
+  const a = value[0];
+  const z = value[value.length - 1];
   if (a == '<' && z == '>') {
     return true;
   } else if (a == '[' && z == ']') {
@@ -48,7 +48,7 @@ function naturalCaseInsensitiveSort(a, b) {
 }
 
 function analyzeStringForRepr(value) {
-  let rv = {
+  const rv = {
     repr: value,
     isString: true,
     isMultiLine: false,
@@ -104,16 +104,16 @@ class ContextData extends React.Component {
 
     /*eslint no-shadow:0*/
     function walk(value, depth) {
-      let i = 0,
-        children = [];
+      let i = 0;
+      const children = [];
       if (value === null) {
         return <span className="val-null">{'None'}</span>;
       } else if (value === true || value === false) {
         return <span className="val-bool">{value ? 'True' : 'False'}</span>;
       } else if (_.isString(value)) {
-        let valueInfo = analyzeStringForRepr(value);
+        const valueInfo = analyzeStringForRepr(value);
 
-        let out = [
+        const out = [
           <span
             key="value"
             className={
@@ -162,10 +162,10 @@ class ContextData extends React.Component {
       } else if (React.isValidElement(value)) {
         return value;
       } else {
-        let keys = Object.keys(value);
+        const keys = Object.keys(value);
         keys.sort(naturalCaseInsensitiveSort);
         for (i = 0; i < keys.length; i++) {
-          let key = keys[i];
+          const key = keys[i];
           children.push(
             <span className="val-dict-pair" key={key}>
               <span className="val-dict-key">
@@ -207,10 +207,10 @@ class ContextData extends React.Component {
   render() {
     // XXX(dcramer): babel does not support this yet
     // let {data, className, ...other} = this.props;
-    let data = this.props.data;
-    let className = this.props.className;
-    let other = {};
-    for (let key in this.props) {
+    const data = this.props.data;
+    const className = this.props.className;
+    const other = {};
+    for (const key in this.props) {
       if (key !== 'data' && key !== 'className') {
         other[key] = this.props[key];
       }
diff --git a/src/sentry/static/sentry/app/components/contextPickerModal.jsx b/src/sentry/static/sentry/app/components/contextPickerModal.jsx
index b99a7db91e..0cf2399e16 100644
--- a/src/sentry/static/sentry/app/components/contextPickerModal.jsx
+++ b/src/sentry/static/sentry/app/components/contextPickerModal.jsx
@@ -65,9 +65,9 @@ class ContextPickerModal extends React.Component {
   constructor(props) {
     super(props);
 
-    let {needProject, latestContext} = props;
+    const {needProject, latestContext} = props;
 
-    let shouldHaveEmptyOrgSelector = !needProject || !latestContext.organization;
+    const shouldHaveEmptyOrgSelector = !needProject || !latestContext.organization;
     this.state = {
       // Initialize loading to true if there is only 1 organization because component will immediately
       // attempt to fetch org details for that org. Otherwise we'd have to change state in `DidMount`
@@ -82,7 +82,7 @@ class ContextPickerModal extends React.Component {
   }
 
   componentDidMount() {
-    let {latestContext, organizations} = this.props;
+    const {latestContext, organizations} = this.props;
 
     // Don't make any assumptions if there are multiple organizations
     if (organizations.length !== 1) {
@@ -110,7 +110,7 @@ class ContextPickerModal extends React.Component {
   componentWillReceiveProps(nextProps) {
     // Should only check the case where there is no latestContext.organization and we're waiting
     // for it to be set (after fetch in DidMount)
-    let {latestContext} = this.props;
+    const {latestContext} = this.props;
     if (
       (!latestContext.organization &&
         latestContext.organization !== nextProps.latestContext.organization) ||
@@ -135,7 +135,7 @@ class ContextPickerModal extends React.Component {
     projects,
     latestOrg = this.props.latestContext && this.props.latestContext.organization
   ) => {
-    let {needProject, onFinish, nextPath} = this.props;
+    const {needProject, onFinish, nextPath} = this.props;
 
     // If no project is needed and theres only 1 org OR
     // if we need a project and there's only 1 project
@@ -209,7 +209,7 @@ class ContextPickerModal extends React.Component {
   };
 
   handleSelectProject = ({value}) => {
-    let {latestContext} = this.props;
+    const {latestContext} = this.props;
 
     if (!value || !latestContext.organization) return;
 
@@ -217,18 +217,19 @@ class ContextPickerModal extends React.Component {
   };
 
   render() {
-    let {latestContext, needOrg, needProject, organizations, Header, Body} = this.props;
-    let {loading} = this.state;
+    const {latestContext, needOrg, needProject, organizations, Header, Body} = this.props;
+    const {loading} = this.state;
 
-    let shouldShowPicker = needOrg || needProject;
+    const shouldShowPicker = needOrg || needProject;
 
-    let projects = latestContext.organization && latestContext.organization.projects;
+    const projects = latestContext.organization && latestContext.organization.projects;
 
     if (!shouldShowPicker) return null;
 
-    let shouldShowProjectSelector = latestContext.organization && needProject && projects;
+    const shouldShowProjectSelector =
+      latestContext.organization && needProject && projects;
 
-    let orgChoices = organizations
+    const orgChoices = organizations
       .filter(({status}) => status.id !== 'pending_deletion')
       .map(({slug}) => ({label: slug, value: slug}));
 
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index 7be5183a42..a7848de66e 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -17,7 +17,7 @@ export default createReactClass({
   numberFormats: [[1000000000, 'b'], [1000000, 'm'], [1000, 'k']],
 
   floatFormat(number, places) {
-    let multi = Math.pow(10, places);
+    const multi = Math.pow(10, places);
     return parseInt(number * multi, 10) / multi;
   },
 
@@ -41,7 +41,7 @@ export default createReactClass({
   },
 
   render() {
-    let {value, className} = this.props;
+    const {value, className} = this.props;
 
     return <span className={className}>{this.formatNumber(value)}</span>;
   },
diff --git a/src/sentry/static/sentry/app/components/createSampleEvent.jsx b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
index d353a87a34..e9bc36039f 100644
--- a/src/sentry/static/sentry/app/components/createSampleEvent.jsx
+++ b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
@@ -26,13 +26,13 @@ const CreateSampleEvent = createReactClass({
   mixins: [ApiMixin],
 
   componentDidMount() {
-    let {projectId} = this.props.params;
-    let {organization} = this.context;
-    let project = organization.projects.find(proj => proj.slug === projectId);
+    const {projectId} = this.props.params;
+    const {organization} = this.context;
+    const project = organization.projects.find(proj => proj.slug === projectId);
 
     if (!project) return;
 
-    let data = {
+    const data = {
       org_id: parseInt(organization.id, 10),
       source: this.props.source,
       project_id: parseInt(project.id, 10),
@@ -42,10 +42,10 @@ const CreateSampleEvent = createReactClass({
 
   createSampleEvent() {
     // TODO(DENA): swap out for action creator
-    let {orgId, projectId} = this.props.params;
-    let {organization} = this.context;
-    let url = `/projects/${orgId}/${projectId}/create-sample/`;
-    let project = organization.projects.find(proj => proj.slug === projectId);
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
+    const url = `/projects/${orgId}/${projectId}/create-sample/`;
+    const project = organization.projects.find(proj => proj.slug === projectId);
 
     analytics('sample_event.created', {
       org_id: parseInt(organization.id, 10),
diff --git a/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx b/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx
index a2ea863f83..a1eb41041b 100644
--- a/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx
+++ b/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx
@@ -16,7 +16,7 @@ export default class CreateTeamForm extends React.Component {
   };
 
   handleCreateTeamSuccess = data => {
-    let {onSuccess} = this.props;
+    const {onSuccess} = this.props;
 
     if (typeof onSuccess !== 'function') {
       return;
@@ -26,7 +26,7 @@ export default class CreateTeamForm extends React.Component {
   };
 
   render() {
-    let {organization} = this.props;
+    const {organization} = this.props;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
index c8878551b8..7a14f8ae49 100644
--- a/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
+++ b/src/sentry/static/sentry/app/components/customIgnoreCountModal.jsx
@@ -36,7 +36,7 @@ export default class CustomIgnoreCountModal extends React.Component {
   };
 
   render() {
-    let {count, window} = this.state;
+    const {count, window} = this.state;
     return (
       <Modal show={this.props.show} animation={false} onHide={this.props.onCanceled}>
         <div className="modal-header">
diff --git a/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx b/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
index 193c4c70db..4a2ba42f66 100644
--- a/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
+++ b/src/sentry/static/sentry/app/components/customIgnoreDurationModal.jsx
@@ -56,7 +56,7 @@ export default class CustomIgnoreDurationModal extends React.Component {
   render() {
     // Give the user a sane starting point to select a date
     // (prettier than the empty date/time inputs):
-    let defaultDate = new Date();
+    const defaultDate = new Date();
     defaultDate.setDate(defaultDate.getDate() + 14);
     defaultDate.setSeconds(0);
     defaultDate.setMilliseconds(0);
diff --git a/src/sentry/static/sentry/app/components/customResolutionModal.jsx b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
index 9e8c006197..f8df72eb2c 100644
--- a/src/sentry/static/sentry/app/components/customResolutionModal.jsx
+++ b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
@@ -41,8 +41,8 @@ export default class CustomResolutionModal extends React.Component {
   };
 
   render() {
-    let {orgId, projectId} = this.props;
-    let url = projectId
+    const {orgId, projectId} = this.props;
+    const url = projectId
       ? `/projects/${orgId}/${projectId}/releases/`
       : `/organizations/${orgId}/releases/`;
 
diff --git a/src/sentry/static/sentry/app/components/dateTime.jsx b/src/sentry/static/sentry/app/components/dateTime.jsx
index a70a6faa12..69b02bde71 100644
--- a/src/sentry/static/sentry/app/components/dateTime.jsx
+++ b/src/sentry/static/sentry/app/components/dateTime.jsx
@@ -19,7 +19,7 @@ class DateTime extends React.Component {
   };
 
   getFormat = ({clock24Hours}) => {
-    let {dateOnly, seconds, shortDate} = this.props;
+    const {dateOnly, seconds, shortDate} = this.props;
 
     // October 26, 2017
     if (dateOnly) {
@@ -44,31 +44,19 @@ class DateTime extends React.Component {
   };
 
   render() {
-    let {
-      date,
-      // eslint-disable-next-line no-unused-vars
-      seconds,
-      // eslint-disable-next-line no-unused-vars
-      shortDate,
-      // eslint-disable-next-line no-unused-vars
-      dateOnly,
-      // eslint-disable-next-line no-unused-vars
-      utc,
-      ...carriedProps
-    } = this.props;
-    let user = ConfigStore.get('user');
-    let options = user ? user.options : {};
-    let format = this.getFormat(options);
+    // eslint-disable-next-line no-unused-vars
+    const {date, seconds, shortDate, dateOnly, utc, ...carriedProps} = this.props;
+    const user = ConfigStore.get('user');
+    const options = user ? user.options : {};
+    const format = this.getFormat(options);
 
-    if (_.isString(date) || _.isNumber(date)) {
-      date = new Date(date);
-    }
+    const coercedDate = _.isString(date) || _.isNumber(date) ? new Date(date) : date;
 
     return (
       <time {...carriedProps}>
         {utc
-          ? moment.utc(date).format(format)
-          : moment.tz(date, options.timezone).format(format)}
+          ? moment.utc(coercedDate).format(format)
+          : moment.tz(coercedDate, options.timezone).format(format)}
       </time>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/deviceName.jsx b/src/sentry/static/sentry/app/components/deviceName.jsx
index 498449ad5a..7336528a15 100644
--- a/src/sentry/static/sentry/app/components/deviceName.jsx
+++ b/src/sentry/static/sentry/app/components/deviceName.jsx
@@ -63,8 +63,8 @@ export default class DeviceName extends React.Component {
   }
 
   render() {
-    let {children} = this.props;
-    let {iOSDeviceList} = this.state;
+    const {children} = this.props;
+    const {iOSDeviceList} = this.state;
 
     // Children can be undefined, need to return null or else react throws
     if (!children) return null;
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
index 2037072491..1a0c52381c 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoComplete.jsx
@@ -15,13 +15,13 @@ class DropdownAutoComplete extends React.Component {
   };
 
   render() {
-    let {children, ...props} = this.props;
+    const {children, ...props} = this.props;
 
     return (
       <DropdownAutoCompleteMenu {...props}>
         {renderProps => {
           // Don't pass `onClick` from `getActorProps`
-          let {
+          const {
             //eslint-disable-next-line no-unused-vars
             onClick,
             ...actorProps
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index 2426e9f06e..467fce30a5 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -276,7 +276,7 @@ class DropdownAutoCompleteMenu extends React.Component {
   };
 
   render() {
-    let {
+    const {
       onSelect,
       onChange,
       onOpen,
@@ -328,31 +328,31 @@ class DropdownAutoCompleteMenu extends React.Component {
           actions,
         }) => {
           // This is the value to use to filter (default to value in filter input)
-          let filterValueOrInput =
+          const filterValueOrInput =
             typeof filterValue !== 'undefined' ? filterValue : inputValue;
           // Only filter results if menu is open and there are items
-          let autoCompleteResults =
+          const autoCompleteResults =
             (isOpen &&
               items &&
               this.autoCompleteFilter(items, filterValueOrInput || '')) ||
             [];
 
           // Can't search if there are no items
-          let hasItems = items && !!items.length;
+          const hasItems = items && !!items.length;
           // Items are loading if null
-          let itemsLoading = items === null;
+          const itemsLoading = items === null;
           // Has filtered results
-          let hasResults = !!autoCompleteResults.length;
+          const hasResults = !!autoCompleteResults.length;
           // No items to display
-          let showNoItems = !busy && !filterValueOrInput && !hasItems;
+          const showNoItems = !busy && !filterValueOrInput && !hasItems;
           // Results mean there was an attempt to search
-          let showNoResultsMessage = !busy && filterValueOrInput && !hasResults;
+          const showNoResultsMessage = !busy && filterValueOrInput && !hasResults;
 
           // Hide the input when we have no items to filter, only if
           // emptyHidesInput is set to true.
-          let showInput = !hideInput && (hasItems || !emptyHidesInput);
+          const showInput = !hideInput && (hasItems || !emptyHidesInput);
 
-          let renderedFooter =
+          const renderedFooter =
             typeof menuFooter === 'function' ? menuFooter({actions}) : menuFooter;
 
           return (
@@ -436,15 +436,15 @@ class DropdownAutoCompleteMenu extends React.Component {
  * Otherwise apply radius to opposite side of `alignMenu`
  */
 const getMenuBorderRadius = ({blendCorner, alignMenu, theme}) => {
-  let radius = theme.borderRadius;
+  const radius = theme.borderRadius;
   if (!blendCorner) {
     return css`
       border-radius: ${radius};
     `;
   }
 
-  let hasTopLeftRadius = alignMenu !== 'left';
-  let hasTopRightRadius = !hasTopLeftRadius;
+  const hasTopLeftRadius = alignMenu !== 'left';
+  const hasTopRightRadius = !hasTopLeftRadius;
 
   return css`
     border-radius: ${hasTopLeftRadius ? radius : 0} ${hasTopRightRadius ? radius : 0}
@@ -454,7 +454,7 @@ const getMenuBorderRadius = ({blendCorner, alignMenu, theme}) => {
 
 const getMenuArrow = ({menuWithArrow, alignMenu}) => {
   if (!menuWithArrow) return '';
-  let alignRight = alignMenu === 'right';
+  const alignRight = alignMenu === 'right';
 
   return css`
     top: 32px;
diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index 8fa0d7921f..fbc600b74a 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -39,7 +39,7 @@ class DropdownLink extends React.Component {
   }
 
   render() {
-    let {
+    const {
       anchorRight,
       disabled,
       title,
@@ -53,21 +53,21 @@ class DropdownLink extends React.Component {
     } = this.props;
 
     // Default anchor = left
-    let isRight = anchorRight;
+    const isRight = anchorRight;
 
     // .dropdown-actor-title = flexbox to fix vertical alignment on firefox
     // Need the extra container because dropdown-menu alignment is off if `dropdown-actor` is a flexbox
     return (
       <DropdownMenu alwaysRenderMenu={alwaysRenderMenu} {...otherProps}>
         {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
-          let shouldRenderMenu = alwaysRenderMenu || isOpen;
-          let cx = classNames('dropdown-actor', className, {
+          const shouldRenderMenu = alwaysRenderMenu || isOpen;
+          const cx = classNames('dropdown-actor', className, {
             'dropdown-menu-right': isRight,
             'dropdown-toggle': true,
             hover: isOpen,
             disabled,
           });
-          let topLevelCx = classNames('dropdown', topLevelClasses, {
+          const topLevelCx = classNames('dropdown', topLevelClasses, {
             'pull-right': isRight,
             'anchor-right': isRight,
             open: isOpen,
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.jsx b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
index 76c805c993..e802ec2f7a 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
@@ -62,15 +62,15 @@ class DropdownMenu extends React.Component {
 
   // Gets open state from props or local state when appropriate
   isOpen = () => {
-    let {isOpen} = this.props;
-    let isControlled = typeof isOpen !== 'undefined';
+    const {isOpen} = this.props;
+    const isControlled = typeof isOpen !== 'undefined';
     return (isControlled && isOpen) || this.state.isOpen;
   };
 
   // Checks if click happens inside of dropdown menu (or its button)
   // Closes dropdownmenu if it is "outside"
   checkClickOutside = e => {
-    let {onClickOutside, shouldIgnoreClickOutside} = this.props;
+    const {onClickOutside, shouldIgnoreClickOutside} = this.props;
 
     if (!this.dropdownMenu) return;
     // Dropdown menu itself
@@ -99,7 +99,7 @@ class DropdownMenu extends React.Component {
 
   // Callback function from <DropdownMenu> to see if we should close menu
   shouldIgnoreClickOutside = e => {
-    let {shouldIgnoreClickOutside} = this.props;
+    const {shouldIgnoreClickOutside} = this.props;
     if (this.dropdownActor.contains(e.target)) return true;
     if (typeof shouldIgnoreClickOutside === 'function') {
       return shouldIgnoreClickOutside(e);
@@ -110,8 +110,8 @@ class DropdownMenu extends React.Component {
 
   // Opens dropdown menu
   handleOpen = e => {
-    let {onOpen, isOpen, alwaysRenderMenu} = this.props;
-    let isControlled = typeof isOpen !== 'undefined';
+    const {onOpen, isOpen, alwaysRenderMenu} = this.props;
+    const isControlled = typeof isOpen !== 'undefined';
     if (!isControlled) {
       this.setState({
         isOpen: true,
@@ -136,10 +136,10 @@ class DropdownMenu extends React.Component {
   // Decide whether dropdown should be closed when mouse leaves element
   // Only for nested dropdowns
   handleMouseLeave = e => {
-    let {isNestedDropdown} = this.props;
+    const {isNestedDropdown} = this.props;
     if (!isNestedDropdown) return;
 
-    let toElement = e.toElement || e.relatedTarget;
+    const toElement = e.toElement || e.relatedTarget;
 
     try {
       if (this.dropdownMenu && !this.dropdownMenu.contains(toElement)) {
@@ -159,8 +159,8 @@ class DropdownMenu extends React.Component {
 
   // Closes dropdown menu
   handleClose = e => {
-    let {onClose, isOpen, alwaysRenderMenu} = this.props;
-    let isControlled = typeof isOpen !== 'undefined';
+    const {onClose, isOpen, alwaysRenderMenu} = this.props;
+    const isControlled = typeof isOpen !== 'undefined';
 
     if (!isControlled) {
       this.setState({isOpen: false});
@@ -182,7 +182,7 @@ class DropdownMenu extends React.Component {
   // this component and close menu if so
   handleMenuMount = ref => {
     if (ref && !(ref instanceof HTMLElement)) return;
-    let {alwaysRenderMenu} = this.props;
+    const {alwaysRenderMenu} = this.props;
 
     this.dropdownMenu = ref;
 
@@ -224,7 +224,7 @@ class DropdownMenu extends React.Component {
   getActorProps = (
     {onClick, onMouseEnter, onMouseLeave, onKeyDown, isStyled, style, ...props} = {}
   ) => {
-    let {isNestedDropdown, closeOnEscape} = this.props;
+    const {isNestedDropdown, closeOnEscape} = this.props;
 
     // Props that the actor needs to have <DropdownMenu> work
     //
@@ -322,10 +322,10 @@ class DropdownMenu extends React.Component {
   };
 
   render() {
-    let {children} = this.props;
+    const {children} = this.props;
 
     // Default anchor = left
-    let shouldShowDropdown = this.isOpen();
+    const shouldShowDropdown = this.isOpen();
 
     return children({
       isOpen: shouldShowDropdown,
diff --git a/src/sentry/static/sentry/app/components/duration.jsx b/src/sentry/static/sentry/app/components/duration.jsx
index 36d2089f68..a03ab9cb00 100644
--- a/src/sentry/static/sentry/app/components/duration.jsx
+++ b/src/sentry/static/sentry/app/components/duration.jsx
@@ -7,7 +7,7 @@ class Duration extends React.Component {
   };
 
   getDuration = () => {
-    let value = Math.abs(this.props.seconds * 1000);
+    const value = Math.abs(this.props.seconds * 1000);
     let result = '';
 
     if (value >= 604800000) {
diff --git a/src/sentry/static/sentry/app/components/errorBoundary.jsx b/src/sentry/static/sentry/app/components/errorBoundary.jsx
index 5cfd579bdb..032c0f7749 100644
--- a/src/sentry/static/sentry/app/components/errorBoundary.jsx
+++ b/src/sentry/static/sentry/app/components/errorBoundary.jsx
@@ -8,9 +8,9 @@ import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import DetailedError from 'app/components/errors/detailedError';
 
-let exclamation = ['Raspberries', 'Snap', 'Frig', 'Welp', 'Uhhhh', 'Hmmm'];
+const exclamation = ['Raspberries', 'Snap', 'Frig', 'Welp', 'Uhhhh', 'Hmmm'];
 
-let getExclamation = () => {
+const getExclamation = () => {
   return exclamation[Math.floor(Math.random() * exclamation.length)];
 };
 
@@ -53,7 +53,7 @@ class ErrorBoundary extends React.Component {
 
   render() {
     if (this.state.error) {
-      let {customComponent, mini, message, className} = this.props;
+      const {customComponent, mini, message, className} = this.props;
 
       if (customComponent) {
         return customComponent;
diff --git a/src/sentry/static/sentry/app/components/errorRobot.jsx b/src/sentry/static/sentry/app/components/errorRobot.jsx
index 40db6d22a4..9ce313d543 100644
--- a/src/sentry/static/sentry/app/components/errorRobot.jsx
+++ b/src/sentry/static/sentry/app/components/errorRobot.jsx
@@ -40,16 +40,16 @@ const ErrorRobot = createReactClass({
   },
 
   fetchData() {
-    let {org, project} = this.props;
-    let {sampleIssueId} = this.state;
+    const {org, project} = this.props;
+    const {sampleIssueId} = this.state;
 
     if (!project) {
       return;
     }
 
     if (sampleIssueId === null || sampleIssueId === undefined) {
-      let url = '/projects/' + org.slug + '/' + project.slug + '/issues/';
-      let requestParams = {limit: 1};
+      const url = '/projects/' + org.slug + '/' + project.slug + '/issues/';
+      const requestParams = {limit: 1};
 
       this.setState({loading: true});
       this.api.request(url, {
@@ -74,7 +74,7 @@ const ErrorRobot = createReactClass({
   },
 
   createSampleEvent() {
-    let {org, project} = this.props;
+    const {org, project} = this.props;
 
     analytics('sample_event.created', {
       org_id: parseInt(org.id, 10),
@@ -90,8 +90,8 @@ const ErrorRobot = createReactClass({
   },
 
   render() {
-    let {loading, error, sampleIssueId} = this.state;
-    let {org, project, gradient} = this.props;
+    const {loading, error, sampleIssueId} = this.state;
+    const {org, project, gradient} = this.props;
     let sampleLink;
 
     if (!loading && !error) {
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx b/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
index 0eb3d7756a..67aa2ff271 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
@@ -44,8 +44,8 @@ class EventOrGroupHeader extends React.Component {
   };
 
   getMessage() {
-    let {data} = this.props;
-    let {metadata, type, culprit} = data || {};
+    const {data} = this.props;
+    const {metadata, type, culprit} = data || {};
 
     switch (type) {
       case 'error':
@@ -62,22 +62,22 @@ class EventOrGroupHeader extends React.Component {
   }
 
   getLocation() {
-    let {data} = this.props;
-    let {metadata} = data || {};
+    const {data} = this.props;
+    const {metadata} = data || {};
     return metadata.filename || null;
   }
 
   getTitle() {
-    let {hideIcons, hideLevel, includeLink, data, params} = this.props;
-    let {orgId, projectId} = params;
+    const {hideIcons, hideLevel, includeLink, data, params} = this.props;
+    const {orgId, projectId} = params;
 
-    let {id, level, groupID} = data || {};
-    let isEvent = !!data.eventID;
+    const {id, level, groupID} = data || {};
+    const isEvent = !!data.eventID;
 
-    let props = {};
+    const props = {};
     let Wrapper;
 
-    let basePath = projectId
+    const basePath = projectId
       ? `/${orgId}/${projectId}/issues/`
       : `/organizations/${orgId}/issues/`;
 
@@ -121,10 +121,10 @@ class EventOrGroupHeader extends React.Component {
   }
 
   render() {
-    let {className} = this.props;
-    let cx = classNames('event-issue-header', className);
-    let message = this.getMessage();
-    let location = this.getLocation();
+    const {className} = this.props;
+    const cx = classNames('event-issue-header', className);
+    const message = this.getMessage();
+    const location = this.getLocation();
 
     return (
       <div className={cx}>
@@ -167,7 +167,7 @@ const LocationWrapper = styled.div`
 `;
 
 function Location(props) {
-  let {children, ...rest} = props;
+  const {children, ...rest} = props;
   return (
     <LocationWrapper {...rest}>
       in <span>{children}</span>
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
index b353f7ff1a..2cd36eadac 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
@@ -20,8 +20,9 @@ class EventOrGroupTitle extends React.Component {
   };
 
   render() {
-    let {data} = this.props;
-    let {metadata, title, type, culprit} = data;
+    const {data} = this.props;
+    const {metadata, type, culprit} = data;
+    let {title} = data;
     let subtitle = null;
 
     if (type == 'error') {
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary.jsx b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
index 6477a6aa5a..7f9dc5cc0c 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary.jsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
@@ -38,13 +38,13 @@ class GenericSummary extends React.Component {
   };
 
   render() {
-    let data = this.props.data;
+    const data = this.props.data;
 
     if (objectIsEmpty(data) || !data.name) {
       return <NoSummary title={this.props.unknownTitle} />;
     }
 
-    let className = generateClassName(data.name);
+    const className = generateClassName(data.name);
 
     return (
       <div className={`context-item ${className}`}>
@@ -64,13 +64,13 @@ export class OsSummary extends React.Component {
   };
 
   render() {
-    let data = this.props.data;
+    const data = this.props.data;
 
     if (objectIsEmpty(data) || !data.name) {
       return <NoSummary title={t('Unknown OS')} />;
     }
 
-    let className = generateClassName(data.name);
+    const className = generateClassName(data.name);
     let versionElement = null;
 
     if (data.version) {
@@ -109,13 +109,15 @@ class UserSummary extends React.Component {
   };
 
   render() {
-    let user = this.props.data;
+    const user = this.props.data;
 
     if (objectIsEmpty(user)) {
       return <NoSummary title={t('Unknown User')} />;
     }
 
-    let userTitle = user.email ? user.email : user.ip_address || user.id || user.username;
+    const userTitle = user.email
+      ? user.email
+      : user.ip_address || user.id || user.username;
 
     if (!userTitle) {
       return <NoSummary title={t('Unknown User')} />;
@@ -152,14 +154,14 @@ class DeviceSummary extends React.Component {
   };
 
   render() {
-    let data = this.props.data;
+    const data = this.props.data;
 
     if (objectIsEmpty(data)) {
       return <NoSummary title={t('Unknown Device')} />;
     }
 
     // TODO(dcramer): we need a better way to parse it
-    let className = data.model && generateClassName(data.model);
+    const className = data.model && generateClassName(data.model);
 
     let subTitle = <p />;
 
@@ -195,7 +197,7 @@ export class GpuSummary extends React.Component {
   };
 
   render() {
-    let data = this.props.data;
+    const data = this.props.data;
 
     if (objectIsEmpty(data) || !data.name) {
       return <NoSummary title={t('Unknown GPU')} />;
@@ -246,14 +248,14 @@ class EventContextSummary extends React.Component {
   };
 
   render() {
-    let evt = this.props.event;
+    const evt = this.props.event;
     let contextCount = 0;
 
     // Add defined contexts in the declared order, until we reach the limit
     // defined by MAX_CONTEXTS.
     let contexts = KNOWN_CONTEXTS.map(({key, Component, ...props}) => {
       if (contextCount >= MAX_CONTEXTS) return null;
-      let data = evt.contexts[key] || evt[key];
+      const data = evt.contexts[key] || evt[key];
       if (objectIsEmpty(data)) return null;
       contextCount += 1;
       return <Component key={key} data={data} {...props} />;
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 8825a33dca..713369c82f 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -23,7 +23,7 @@ function getSourcePlugin(pluginContexts, contextType) {
   if (CONTEXT_TYPES[contextType]) {
     return null;
   }
-  for (let plugin of pluginContexts) {
+  for (const plugin of pluginContexts) {
     if (plugin.contexts.indexOf(contextType) >= 0) {
       return plugin;
     }
@@ -58,7 +58,10 @@ class ContextChunk extends React.Component {
   }
 
   syncPlugin = () => {
-    let sourcePlugin = getSourcePlugin(this.props.group.pluginContexts, this.props.type);
+    const sourcePlugin = getSourcePlugin(
+      this.props.group.pluginContexts,
+      this.props.type
+    );
     if (!sourcePlugin) {
       this.setState({
         pluginLoading: false,
@@ -78,7 +81,7 @@ class ContextChunk extends React.Component {
   };
 
   renderTitle = component => {
-    let {value, alias, type} = this.props;
+    const {value, alias, type} = this.props;
     let title = null;
     if (defined(value.title)) {
       title = value.title;
@@ -105,10 +108,10 @@ class ContextChunk extends React.Component {
       return null;
     }
 
-    let group = this.props.group;
-    let evt = this.props.event;
-    let {type, alias, value} = this.props;
-    let Component = getContextComponent(type);
+    const group = this.props.group;
+    const evt = this.props.event;
+    const {type, alias, value} = this.props;
+    const Component = getContextComponent(type);
 
     // this can happen if the component does not exist
     if (!Component) {
@@ -136,9 +139,9 @@ class ContextsInterface extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-    let children = [];
+    const group = this.props.group;
+    const evt = this.props.event;
+    const children = [];
     if (!objectIsEmpty(evt.user)) {
       children.push(
         <ContextChunk
@@ -153,7 +156,7 @@ class ContextsInterface extends React.Component {
     }
 
     let value = null;
-    for (let key in evt.contexts) {
+    for (const key in evt.contexts) {
       value = evt.contexts[key];
       children.push(
         <ContextChunk
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app.jsx b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
index 741759a90e..ef96b7b5a5 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
@@ -10,7 +10,7 @@ class AppContextType extends React.Component {
   };
 
   render() {
-    let {
+    const {
       app_id,
       app_start_time,
       device_app_hash,
diff --git a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
index cb094db9e9..328b1749b9 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
@@ -14,7 +14,7 @@ class ContextBlock extends React.Component {
 
   render() {
     let data = [];
-    let className = `context-block context-block-${this.props.data.type}`;
+    const className = `context-block context-block-${this.props.data.type}`;
 
     (this.props.knownData || []).forEach(([key, value]) => {
       let allowSkip = false;
@@ -31,8 +31,8 @@ class ContextBlock extends React.Component {
       data.push([key, value]);
     });
 
-    let extraData = [];
-    for (let key in this.props.data) {
+    const extraData = [];
+    for (const key in this.props.data) {
       if (key !== 'type' && key !== 'title') {
         extraData.push([key, this.props.data[key]]);
       }
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
index 252c6414a9..5089b05f1a 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
@@ -55,7 +55,7 @@ class DeviceContextType extends React.Component {
   };
 
   render() {
-    let {
+    const {
       name,
       family,
       model,
@@ -78,15 +78,15 @@ class DeviceContextType extends React.Component {
       device_type,
       ...data
     } = this.props.data;
-    let memory = this.formatMemory(memory_size, free_memory, usable_memory);
-    let storage = this.formatStorage(
+    const memory = this.formatMemory(memory_size, free_memory, usable_memory);
+    const storage = this.formatStorage(
       storage_size,
       free_storage,
       external_storage_size,
       external_free_storage
     );
 
-    let renderedModel = isString(model) ? (
+    const renderedModel = isString(model) ? (
       <DeviceName>{model + (model_id ? ` (${model_id})` : '')}</DeviceName>
     ) : null;
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx b/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
index f3afd3d433..724d8b6170 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/gpu.jsx
@@ -22,7 +22,7 @@ class GpuContextType extends React.Component {
   };
 
   render() {
-    let {
+    const {
       id,
       name,
       version,
@@ -35,8 +35,8 @@ class GpuContextType extends React.Component {
       ...data
     } = this.props.data;
 
-    let memory = this.formatMemory(memory_size);
-    let knownData = [
+    const memory = this.formatMemory(memory_size);
+    const knownData = [
       ['?Name', name],
       ['?Version', version],
       ['?Vendor', vendor_name],
diff --git a/src/sentry/static/sentry/app/components/events/contexts/os.jsx b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
index 1d53a5db7d..0829ce437a 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/os.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
@@ -11,7 +11,7 @@ class OsContextType extends React.Component {
   };
 
   render() {
-    let {name, version, build, kernel_version, rooted, ...data} = this.props.data;
+    const {name, version, build, kernel_version, rooted, ...data} = this.props.data;
     return (
       <ContextBlock
         data={data}
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
index 925fcbe94f..143b8eb6c1 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
@@ -10,7 +10,7 @@ class RuntimeContextType extends React.Component {
   };
 
   render() {
-    let {name, version, build, ...data} = this.props.data;
+    const {name, version, build, ...data} = this.props.data;
     return (
       <ContextBlock
         data={data}
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user.jsx b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
index 588e4778e5..b5b6b1db20 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/user.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
@@ -15,9 +15,9 @@ class UserContextType extends React.Component {
   };
 
   render() {
-    let user = this.props.data;
-    let builtins = [];
-    let children = [];
+    const user = this.props.data;
+    const builtins = [];
+    const children = [];
 
     // Handle our native attributes special
     user.id && builtins.push(['ID', <pre>{user.id}</pre>]);
diff --git a/src/sentry/static/sentry/app/components/events/device.jsx b/src/sentry/static/sentry/app/components/events/device.jsx
index c4e42fb8c1..fdb43819ec 100644
--- a/src/sentry/static/sentry/app/components/events/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/device.jsx
@@ -13,10 +13,10 @@ class DeviceInterface extends React.Component {
   };
 
   render() {
-    let {group, event} = this.props;
-    let data = event.device;
-    let extras = Object.keys(data.data || {}).map(key => {
-      let value = data.data[key];
+    const {group, event} = this.props;
+    const data = event.device;
+    const extras = Object.keys(data.data || {}).map(key => {
+      const value = data.data[key];
       return (
         <tr key={key}>
           <td className="key">{key}</td>
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index 9584a81c50..a7c77078cf 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -31,7 +31,7 @@ class EventErrorItem extends React.Component {
   };
 
   cleanedData() {
-    let data = {...this.props.error.data};
+    const data = {...this.props.error.data};
 
     // The name is rendered as path in front of the message
     if (typeof data.name === 'string') {
@@ -45,8 +45,8 @@ class EventErrorItem extends React.Component {
 
     if (typeof data.image_path === 'string') {
       // Separate the image name for readability
-      let separator = /^([a-z]:\\|\\\\)/i.test(data.image_path) ? '\\' : '/';
-      let path = data.image_path.split(separator);
+      const separator = /^([a-z]:\\|\\\\)/i.test(data.image_path) ? '\\' : '/';
+      const path = data.image_path.split(separator);
       data.image_name = path.splice(-1, 1)[0];
       data.image_path = path.length ? path.join(separator) + separator : '';
     }
@@ -55,7 +55,7 @@ class EventErrorItem extends React.Component {
   }
 
   renderPath() {
-    let data = this.props.error.data || {};
+    const data = this.props.error.data || {};
 
     if (!data.name || typeof data.name !== 'string') {
       return null;
@@ -70,9 +70,9 @@ class EventErrorItem extends React.Component {
   }
 
   render() {
-    let error = this.props.error;
-    let isOpen = this.state.isOpen;
-    let data = this.cleanedData();
+    const error = this.props.error;
+    const isOpen = this.state.isOpen;
+    const data = this.cleanedData();
     return (
       <li>
         {this.renderPath()}
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index 9e240ad9de..d87880a09b 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -37,12 +37,12 @@ class EventErrors extends React.Component {
   };
 
   render() {
-    let eventErrors = this.props.event.errors;
+    const eventErrors = this.props.event.errors;
     // XXX: uniqueErrors is not performant with large datasets
-    let errors =
+    const errors =
       eventErrors.length > MAX_ERRORS ? eventErrors : this.uniqueErrors(eventErrors);
-    let numErrors = errors.length;
-    let isOpen = this.state.isOpen;
+    const numErrors = errors.length;
+    const isOpen = this.state.isOpen;
     return (
       <EventDataSection
         group={this.props.group}
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
index 477e4a90bd..97f19111a4 100644
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
@@ -63,12 +63,12 @@ export default createReactClass({
   },
 
   getDownloadUrl(attachment) {
-    let {orgId, event, projectId} = this.props;
+    const {orgId, event, projectId} = this.props;
     return `/api/0/projects/${orgId}/${projectId}/events/${event.id}/attachments/${attachment.id}/?download=1`;
   },
 
   render() {
-    let {attachmentList} = this.state;
+    const {attachmentList} = this.state;
     if (!(attachmentList && attachmentList.length)) {
       return null;
     }
diff --git a/src/sentry/static/sentry/app/components/events/eventCause.jsx b/src/sentry/static/sentry/app/components/events/eventCause.jsx
index 37df884a97..367caf2f86 100644
--- a/src/sentry/static/sentry/app/components/events/eventCause.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCause.jsx
@@ -70,9 +70,9 @@ export default createReactClass({
   },
 
   getUniqueCommitsWithAuthors() {
-    let {committers} = this.state;
+    const {committers} = this.state;
     //get a list of commits with author information attached
-    let commitsWithAuthors = flatMap(committers, ({commits, author}) =>
+    const commitsWithAuthors = flatMap(committers, ({commits, author}) =>
       commits.map(commit => ({
         ...commit,
         author,
@@ -80,17 +80,17 @@ export default createReactClass({
     );
 
     //remove duplicate commits
-    let uniqueCommitsWithAuthors = uniqBy(commitsWithAuthors, commit => commit.id);
+    const uniqueCommitsWithAuthors = uniqBy(commitsWithAuthors, commit => commit.id);
     return uniqueCommitsWithAuthors;
   },
 
   render() {
-    let {committers, expanded} = this.state;
+    const {committers, expanded} = this.state;
     if (!(committers && committers.length)) {
       return null;
     }
 
-    let commits = this.getUniqueCommitsWithAuthors();
+    const commits = this.getUniqueCommitsWithAuthors();
 
     return (
       <div className="box">
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
index c2375a08af..819e8a0c73 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
@@ -19,10 +19,10 @@ class GroupEventDataSection extends React.Component {
 
   componentDidMount() {
     if (location.hash) {
-      let [, hash] = location.hash.split('#');
+      const [, hash] = location.hash.split('#');
 
       try {
-        let anchorElement = hash && document.querySelector('div#' + hash);
+        const anchorElement = hash && document.querySelector('div#' + hash);
         if (anchorElement) {
           anchorElement.scrollIntoView();
         }
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 7d86288d3b..1c31de6bc3 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -63,12 +63,12 @@ class EventEntries extends React.Component {
   };
 
   componentDidMount() {
-    let {event} = this.props;
+    const {event} = this.props;
 
     if (!event || !event.errors || !(event.errors.length > 0)) return;
-    let errors = event.errors;
-    let errorTypes = errors.map(errorEntries => errorEntries.type);
-    let errorMessages = errors.map(errorEntries => errorEntries.message);
+    const errors = event.errors;
+    const errorTypes = errors.map(errorEntries => errorEntries.type);
+    const errorMessages = errors.map(errorEntries => errorEntries.message);
 
     this.recordIssueError(errorTypes, errorMessages);
   }
@@ -78,9 +78,9 @@ class EventEntries extends React.Component {
   }
 
   recordIssueError(errorTypes, errorMessages) {
-    let {organization, project, event} = this.props;
-    let orgId = organization.id;
-    let platform = project.platform;
+    const {organization, project, event} = this.props;
+    const orgId = organization.id;
+    const platform = project.platform;
 
     analytics('issue_error_banner.viewed', {
       org_id: parseInt(orgId, 10),
@@ -92,11 +92,11 @@ class EventEntries extends React.Component {
   }
 
   renderEntries() {
-    let {event, group, isShare} = this.props;
+    const {event, group, isShare} = this.props;
 
     return event.entries.map((entry, entryIdx) => {
       try {
-        let Component = INTERFACES[entry.type];
+        const Component = INTERFACES[entry.type];
         if (!Component) {
           /*eslint no-console:0*/
           window.console &&
@@ -131,11 +131,11 @@ class EventEntries extends React.Component {
   }
 
   render() {
-    let {organization, group, isShare, project, event, orgId} = this.props;
+    const {organization, group, isShare, project, event, orgId} = this.props;
 
-    let features = organization ? new Set(organization.features) : new Set();
+    const features = organization ? new Set(organization.features) : new Set();
 
-    let hasContext =
+    const hasContext =
       event && (!utils.objectIsEmpty(event.user) || !utils.objectIsEmpty(event.contexts));
 
     if (!event) {
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index bb27ec8d5f..a58bb0084c 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -32,12 +32,12 @@ class EventRow extends React.Component {
   }
 
   render() {
-    let event = this.state.event;
-    let eventLink = `/${this.props.orgSlug}/${this.props
+    const event = this.state.event;
+    const eventLink = `/${this.props.orgSlug}/${this.props
       .projectSlug}/issues/${event.groupID}/events/${event.id}/`;
 
-    let tagList = [];
-    for (let key in event.tags) {
+    const tagList = [];
+    for (const key in event.tags) {
       tagList.push([key, event.tags[key]]);
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
index 369ec7384e..1b055a32e1 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -23,10 +23,10 @@ class EventTags extends React.Component {
   };
 
   render() {
-    let tags = this.props.event.tags;
+    const tags = this.props.event.tags;
     if (_.isEmpty(tags)) return null;
 
-    let {orgId, projectId} = this.props;
+    const {orgId, projectId} = this.props;
     return (
       <EventDataSection
         group={this.props.group}
diff --git a/src/sentry/static/sentry/app/components/events/extraData.jsx b/src/sentry/static/sentry/app/components/events/extraData.jsx
index 346dcece10..d66977cf56 100644
--- a/src/sentry/static/sentry/app/components/events/extraData.jsx
+++ b/src/sentry/static/sentry/app/components/events/extraData.jsx
@@ -31,7 +31,7 @@ class EventExtraData extends React.Component {
   };
 
   render() {
-    let extraDataArray = objectToArray(this.props.event.context);
+    const extraDataArray = objectToArray(this.props.event.context);
     return (
       <div className="extra-data">
         <EventDataSection
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index 20e94deb1d..c23475612a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -23,7 +23,7 @@ function moduleToCategory(module) {
   if (!module) {
     return null;
   }
-  let match = module.match(/^.*\/(.*?)(:\d+)/);
+  const match = module.match(/^.*\/(.*?)(:\d+)/);
   if (match) {
     return match[1];
   }
@@ -87,12 +87,12 @@ class BreadcrumbsInterface extends React.Component {
   };
 
   getVirtualCrumb = () => {
-    let evt = this.props.event;
+    const evt = this.props.event;
     let crumb;
 
-    let exception = evt.entries.find(entry => entry.type === 'exception');
+    const exception = evt.entries.find(entry => entry.type === 'exception');
     if (exception) {
-      let {type, value, module} = exception.data.values[0];
+      const {type, value, module} = exception.data.values[0];
       crumb = {
         type: 'error',
         level: 'error',
@@ -103,8 +103,8 @@ class BreadcrumbsInterface extends React.Component {
         },
       };
     } else if (evt.message) {
-      let levelTag = (evt.tags || []).find(tag => tag.key === 'level');
-      let level = levelTag && levelTag.value;
+      const levelTag = (evt.tags || []).find(tag => tag.key === 'level');
+      const level = levelTag && levelTag.value;
       crumb = {
         type: 'message',
         level,
@@ -133,7 +133,7 @@ class BreadcrumbsInterface extends React.Component {
     return crumbs.filter(item => {
       // return true if any of category, message, or level contain queryValue
       return !!['category', 'message', 'level'].find(prop => {
-        let propValue = (item[prop] || '').toLowerCase();
+        const propValue = (item[prop] || '').toLowerCase();
         return propValue.includes(queryValue);
       });
     });
@@ -170,11 +170,11 @@ class BreadcrumbsInterface extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-    let data = this.props.data;
+    const group = this.props.group;
+    const evt = this.props.event;
+    const data = this.props.data;
 
-    let title = (
+    const title = (
       <div>
         <GuideAnchor target="breadcrumbs" type="text" />
         <h3>
@@ -187,15 +187,15 @@ class BreadcrumbsInterface extends React.Component {
     let all = data.values;
 
     // Add the error event as the final (virtual) breadcrumb
-    let virtualCrumb = this.getVirtualCrumb();
+    const virtualCrumb = this.getVirtualCrumb();
     if (virtualCrumb) {
       // make copy of values array / don't mutate props
       all = all.slice(0).concat([virtualCrumb]);
     }
 
     // filter breadcrumbs on text input
-    let {queryValue} = this.state;
-    let filtered = queryValue ? this.filterCrumbs(all, queryValue.toLowerCase()) : all;
+    const {queryValue} = this.state;
+    const filtered = queryValue ? this.filterCrumbs(all, queryValue.toLowerCase()) : all;
 
     // cap max number of breadcrumbs to show
     const MAX = BreadcrumbsInterface.MAX_CRUMBS_WHEN_COLLAPSED;
@@ -204,7 +204,7 @@ class BreadcrumbsInterface extends React.Component {
       crumbs = filtered.slice(-MAX);
     }
 
-    let numCollapsed = filtered.length - crumbs.length;
+    const numCollapsed = filtered.length - crumbs.length;
 
     let crumbContent;
     if (crumbs.length) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
index 7d0f1c0acd..db2b7e548e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
@@ -18,11 +18,11 @@ class Breadcrumb extends React.Component {
   };
 
   getClassName = () => {
-    let {crumb} = this.props;
+    const {crumb} = this.props;
 
     // use Set to avoid duplicate crumb classes (was previously adding
     // values like "crumb-default" as many as three times)
-    let classes = new Set(['crumb', 'crumb-default', 'crumb-' + crumb.level]);
+    const classes = new Set(['crumb', 'crumb-default', 'crumb-' + crumb.level]);
 
     if (crumb.type !== 'default') {
       classes.add('crumb-' + crumb.type.replace(/[\s_]+/g, '-').toLowerCase());
@@ -41,13 +41,13 @@ class Breadcrumb extends React.Component {
   };
 
   renderType = () => {
-    let {crumb} = this.props;
-    let Renderer = CUSTOM_RENDERERS[crumb.type] || DefaultRenderer;
+    const {crumb} = this.props;
+    const Renderer = CUSTOM_RENDERERS[crumb.type] || DefaultRenderer;
     return <Renderer crumb={crumb} />;
   };
 
   render() {
-    let {crumb} = this.props;
+    const {crumb} = this.props;
     return (
       <li className={this.getClassName()}>
         <span className="icon-container">
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
index bc2aaecbba..2480d11552 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
@@ -11,7 +11,7 @@ class DefaultRenderer extends React.Component {
   };
 
   getTitle = () => {
-    let crumb = this.props.crumb;
+    const crumb = this.props.crumb;
     if (crumb.type === 'default') {
       return null;
     }
@@ -24,7 +24,7 @@ class DefaultRenderer extends React.Component {
   };
 
   renderSummary = () => {
-    let {crumb} = this.props;
+    const {crumb} = this.props;
 
     return (
       <SummaryLine crumb={crumb}>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
index 60403b2549..e33ff032b1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
@@ -14,9 +14,9 @@ class ErrorRenderer extends React.Component {
   };
 
   render() {
-    let {crumb} = this.props;
-    let {type, value, ...extra} = crumb.data || {};
-    let messages = [];
+    const {crumb} = this.props;
+    const {type, value, ...extra} = crumb.data || {};
+    const messages = [];
 
     if (value) {
       messages.push(value);
@@ -25,7 +25,7 @@ class ErrorRenderer extends React.Component {
       messages.push(crumb.message);
     }
 
-    let summary = (
+    const summary = (
       <SummaryLine crumb={crumb}>
         <pre>
           <code>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
index c15dd8676d..d3f5dd77cd 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
@@ -18,9 +18,9 @@ class HttpRenderer extends React.Component {
   };
 
   render() {
-    let {crumb} = this.props;
-    let {method, status_code, url, ...extra} = crumb.data || {};
-    let summary = (
+    const {crumb} = this.props;
+    const {method, status_code, url, ...extra} = crumb.data || {};
+    const summary = (
       <SummaryLine crumb={crumb}>
         <pre>
           <code>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
index 5afacd0d74..4e5aeb7ca5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
@@ -30,7 +30,7 @@ class SummaryLine extends React.Component {
     if (!this.domElement) {
       return;
     }
-    let hasOverflow = isOverflowing(this.domElement);
+    const hasOverflow = isOverflowing(this.domElement);
     if (hasOverflow !== this.state.hasOverflow) {
       this.setState({
         hasOverflow,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
index 45c5808244..eb2f3af6bd 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/contextLine.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {defined} from 'app/utils';
 
 const ContextLine = function(props) {
-  let {line, isActive} = props;
+  const {line, isActive} = props;
   let liClassName = 'expandable';
   if (isActive) {
     liClassName += ' active';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index 6f9b0168a7..550e57d579 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -83,7 +83,7 @@ const CrashHeader = createReactClass({
   },
 
   render() {
-    let {stackView, stackType, newestFirst} = this.props;
+    const {stackView, stackType, newestFirst} = this.props;
 
     return (
       <div className="crash-title">
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
index 1409d6ee42..0b27844f60 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
@@ -29,7 +29,7 @@ export default class CspInterface extends React.Component {
 
   constructor(props) {
     super(props);
-    let {data} = props;
+    const {data} = props;
     // hide the report-uri since this is redundant and silly
     data.original_policy = data.original_policy.replace(/(;\s+)?report-uri [^;]+/, '');
 
@@ -46,10 +46,10 @@ export default class CspInterface extends React.Component {
   };
 
   render() {
-    let {view, data} = this.state;
-    let {group, event} = this.props;
+    const {view, data} = this.state;
+    const {group, event} = this.props;
 
-    let title = (
+    const title = (
       <div>
         <div className="btn-group">
           <a
@@ -75,7 +75,7 @@ export default class CspInterface extends React.Component {
       </div>
     );
 
-    let children = getView(view, data);
+    const children = getView(view, data);
 
     return (
       <GroupEventDataSection
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
index bd28b85484..1e46dec8d4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
@@ -10,7 +10,7 @@ class CSPContent extends React.Component {
   };
 
   render() {
-    let {data} = this.props;
+    const {data} = this.props;
     return (
       <div>
         <h4>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
index 693537da5c..b199714c8b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
@@ -144,7 +144,7 @@ function getLinkHref(key) {
 }
 
 function getLink(key) {
-  let href = getLinkHref(key);
+  const href = getLinkHref(key);
 
   return (
     <span>
@@ -162,8 +162,8 @@ class CSPHelp extends React.Component {
   };
 
   render() {
-    let {data} = this.props;
-    let key = data.effective_directive;
+    const {data} = this.props;
+    const key = data.effective_directive;
     return (
       <div>
         <h4>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 945a2b545e..71ac3cded0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -19,7 +19,7 @@ class DebugMetaInterface extends React.Component {
       return null;
     }
 
-    let name = img.name.split(/^([a-z]:\\|\\\\)/i.test(img.name) ? '\\' : '/').pop();
+    const name = img.name.split(/^([a-z]:\\|\\\\)/i.test(img.name) ? '\\' : '/').pop();
     if (name == 'dyld_sim') return null; // this is only for simulator builds
 
     let version = null;
@@ -41,8 +41,8 @@ class DebugMetaInterface extends React.Component {
   }
 
   render() {
-    let data = this.props.data;
-    let images = data.images
+    const data = this.props.data;
+    const images = data.images
       .map(img => this.getImageDetail(img, this.props.event))
       .filter(img => img); // removes null values
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 343f6f4a4e..656ec7d6c7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -29,12 +29,12 @@ class ExceptionInterface extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
-    let event = this.props.event;
-    let data = this.props.data;
-    let stackView = this.state.stackView;
-    let stackType = this.state.stackType;
-    let newestFirst = this.state.newestFirst;
+    const group = this.props.group;
+    const event = this.props.event;
+    const data = this.props.data;
+    const stackView = this.state.stackView;
+    const stackType = this.state.stackType;
+    const newestFirst = this.state.newestFirst;
 
     // in case there are threads in the event data, we don't render the
     // exception block.  Instead the exception is contained within the
@@ -43,7 +43,7 @@ class ExceptionInterface extends React.Component {
       return null;
     }
 
-    let title = (
+    const title = (
       <CrashHeader
         group={group}
         title={t('Exception')}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index c8a8662f8d..4689fd0d05 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -16,9 +16,9 @@ class ExceptionContent extends React.Component {
   };
 
   render() {
-    let stackView = this.props.view;
-    let newestFirst = this.props.newestFirst;
-    let children = this.props.values.map((exc, excIdx) => {
+    const stackView = this.props.view;
+    const newestFirst = this.props.newestFirst;
+    const children = this.props.values.map((exc, excIdx) => {
       return (
         <div key={excIdx} className="exception">
           <h5 className="break-word" style={{marginBottom: 5}}>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
index 07630f4136..13d88e543b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
@@ -37,17 +37,17 @@ class ExceptionMechanism extends React.Component {
   };
 
   render() {
-    let mechanism = this.props.data;
-    let {type, description, help_link, handled, meta = {}, data = {}} = mechanism;
-    let {errno, signal, mach_exception} = meta;
+    const mechanism = this.props.data;
+    const {type, description, help_link, handled, meta = {}, data = {}} = mechanism;
+    const {errno, signal, mach_exception} = meta;
 
-    let linkElement = help_link && (
+    const linkElement = help_link && (
       <a href={help_link} className="external-icon">
         <em className="icon-open" />
       </a>
     );
 
-    let descriptionElement = description && (
+    const descriptionElement = description && (
       <Hovercard
         header={
           <span>
@@ -61,7 +61,7 @@ class ExceptionMechanism extends React.Component {
       </Hovercard>
     );
 
-    let pills = [
+    const pills = [
       <Pill key="mechanism" name="mechanism" value={type}>
         {descriptionElement || linkElement}
       </Pill>,
@@ -72,19 +72,19 @@ class ExceptionMechanism extends React.Component {
     }
 
     if (errno) {
-      let value = errno.name || errno.number;
+      const value = errno.name || errno.number;
       pills.push(<Pill key="errno" name="errno" value={value} />);
     }
 
     if (mach_exception) {
-      let value = mach_exception.name || mach_exception.exception;
+      const value = mach_exception.name || mach_exception.exception;
       pills.push(<Pill key="mach" name="mach exception" value={value} />);
     }
 
     if (signal) {
-      let code = signal.code_name || `${t('code')} ${signal.code}`;
-      let name = signal.name || signal.number;
-      let value = _.isNil(signal.code) ? name : `${name} (${code})`;
+      const code = signal.code_name || `${t('code')} ${signal.code}`;
+      const name = signal.name || signal.number;
+      const value = _.isNil(signal.code) ? name : `${name} (${code})`;
       pills.push(<Pill key="signal" name="signal" value={value} />);
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 65a2da1bd3..e63c3a108e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -17,8 +17,8 @@ import Truncate from 'app/components/truncate';
 import space from 'app/styles/space';
 
 export function trimPackage(pkg) {
-  let pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
-  let filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
+  const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
+  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
   return filename.replace(/\.(dylib|so|a|dll|exe)$/, '');
 }
 
@@ -83,9 +83,9 @@ const Frame = createReactClass({
   },
 
   renderOriginalSourceInfo() {
-    let data = this.props.data;
+    const data = this.props.data;
 
-    let sourceMapText = t('Source Map');
+    const sourceMapText = t('Source Map');
 
     let out = `
     <div>
@@ -121,16 +121,16 @@ const Frame = createReactClass({
   },
 
   renderDefaultTitle() {
-    let data = this.props.data;
-    let title = [];
+    const data = this.props.data;
+    const title = [];
 
     // TODO(dcramer): this needs to use a formatted string so it can be
     // localized correctly
 
     if (defined(data.filename || data.module)) {
       // prioritize module name for Java as filename is often only basename
-      let shouldPrioritizeModuleName = this.shouldPrioritizeModuleName();
-      let pathName = shouldPrioritizeModuleName
+      const shouldPrioritizeModuleName = this.shouldPrioritizeModuleName();
+      const pathName = shouldPrioritizeModuleName
         ? data.module || data.filename
         : data.filename || data.module;
 
@@ -230,26 +230,26 @@ const Frame = createReactClass({
   },
 
   renderContext() {
-    let data = this.props.data;
+    const data = this.props.data;
     let context = '';
-    let {isExpanded} = this.state;
+    const {isExpanded} = this.state;
 
     let outerClassName = 'context';
     if (isExpanded) {
       outerClassName += ' expanded';
     }
 
-    let hasContextSource = this.hasContextSource();
-    let hasContextVars = this.hasContextVars();
-    let hasContextRegisters = this.hasContextRegisters();
-    let expandable = this.isExpandable();
+    const hasContextSource = this.hasContextSource();
+    const hasContextVars = this.hasContextVars();
+    const hasContextRegisters = this.hasContextRegisters();
+    const expandable = this.isExpandable();
 
-    let contextLines = isExpanded
+    const contextLines = isExpanded
       ? data.context
       : data.context && data.context.filter(l => l[0] === data.lineNo);
 
     if (hasContextSource || hasContextVars || hasContextRegisters) {
-      let startLineNo = hasContextSource ? data.context[0][0] : '';
+      const startLineNo = hasContextSource ? data.context[0][0] : '';
       context = (
         <ol start={startLineNo} className={outerClassName}>
           {defined(data.errors) && (
@@ -322,7 +322,7 @@ const Frame = createReactClass({
       return t('Found by stack scanning');
     }
     if (this.getPlatform() == 'cocoa') {
-      let func = this.props.data.function || '<unknown>';
+      const func = this.props.data.function || '<unknown>';
       if (func.match(/^@objc\s/)) {
         return t('Objective-C -> Swift shim frame');
       }
@@ -343,7 +343,7 @@ const Frame = createReactClass({
   },
 
   renderRepeats() {
-    let timesRepeated = this.props.timesRepeated;
+    const timesRepeated = this.props.timesRepeated;
     if (timesRepeated > 0) {
       return (
         <RepeatedFrames
@@ -376,8 +376,8 @@ const Frame = createReactClass({
   },
 
   renderNativeLine() {
-    let data = this.props.data;
-    let hint = this.getFrameHint();
+    const data = this.props.data;
+    const hint = this.getFrameHint();
     return (
       <StrictClick onClick={this.isExpandable() ? this.toggleContext : null}>
         <DefaultLine className="title as-table">
@@ -428,8 +428,8 @@ const Frame = createReactClass({
   },
 
   render() {
-    let data = this.props.data;
-    let className = classNames({
+    const data = this.props.data;
+    const className = classNames({
       frame: true,
       'is-expandable': this.isExpandable(),
       expanded: this.state.isExpanded,
@@ -439,9 +439,9 @@ const Frame = createReactClass({
       'leads-to-app': this.leadsToApp(),
       [this.getPlatform()]: true,
     });
-    let props = {className};
+    const props = {className};
 
-    let context = this.renderContext();
+    const context = this.renderContext();
 
     return (
       <li {...props}>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
index bf73056264..c09368f7ac 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
@@ -27,7 +27,7 @@ export class RegisterValue extends React.Component {
 
   formatValue = value => {
     try {
-      let parsed = typeof value === 'string' ? parseInt(value, 16) : value;
+      const parsed = typeof value === 'string' ? parseInt(value, 16) : value;
       if (isNaN(parsed)) return value;
 
       switch (this.state.view) {
@@ -66,7 +66,7 @@ class FrameRegisters extends React.Component {
   };
 
   render() {
-    let registers = objectToArray(this.props.data).filter(register =>
+    const registers = objectToArray(this.props.data).filter(register =>
       defined(register[1])
     );
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
index 29b73695f9..8f87f6c546 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
@@ -16,7 +16,7 @@ class FrameVariables extends React.Component {
   };
 
   render() {
-    let data = objectToArray(this.props.data);
+    const data = objectToArray(this.props.data);
 
     return (
       <KeyValueList data={data} isContextData={true} onClick={this.preventToggling} />
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx b/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx
index d83c140196..d6f7f174f5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/generic.jsx
@@ -27,7 +27,7 @@ export default class GenericInterface extends Component {
 
   constructor(props) {
     super(props);
-    let {data} = props;
+    const {data} = props;
     this.state = {
       view: 'report',
       data,
@@ -41,10 +41,10 @@ export default class GenericInterface extends Component {
   };
 
   render() {
-    let {view, data} = this.state;
-    let {group, event, type} = this.props;
+    const {view, data} = this.state;
+    const {group, event, type} = this.props;
 
-    let title = (
+    const title = (
       <div>
         <div className="btn-group">
           <a
@@ -64,7 +64,7 @@ export default class GenericInterface extends Component {
       </div>
     );
 
-    let children = getView(view, data);
+    const children = getView(view, data);
 
     return (
       <GroupEventDataSection
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
index 29109a89b9..2f1bc44ecc 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
@@ -31,7 +31,7 @@ class KeyValueList extends React.Component {
     }
 
     data = this.props.isSorted ? _.sortBy(data, [([key]) => key]) : data;
-    let raw = this.props.raw;
+    const raw = this.props.raw;
     const props = this.props.onClick ? {onClick: this.props.onClick} : {};
     return (
       <table className="table key-value" {...props}>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index a93c7f9da3..25117ef7b9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -34,7 +34,7 @@ class MessageInterface extends React.Component {
   }
 
   render() {
-    let {data, group, event} = this.props;
+    const {data, group, event} = this.props;
 
     return (
       <EventDataSection group={group} event={event} type="message" title={t('Message')}>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index 2408589c6c..8103e05daa 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -40,12 +40,12 @@ const RawExceptionContent = createReactClass({
   },
 
   isNative() {
-    let {platform} = this.props;
+    const {platform} = this.props;
     return platform === 'cocoa' || platform === 'native';
   },
 
   getAppleCrashReportEndpoint() {
-    let minified = this.props.type == 'minified';
+    const minified = this.props.type == 'minified';
     return `/events/${this.props.eventId}/apple-crash-report?minified=${minified}`;
   },
 
@@ -74,9 +74,9 @@ const RawExceptionContent = createReactClass({
   },
 
   render() {
-    let {type} = this.props;
+    const {type} = this.props;
     let downloadButton;
-    let children = this.props.values.map((exc, excIdx) => {
+    const children = this.props.values.map((exc, excIdx) => {
       let content =
         exc.stacktrace &&
         rawStacktraceContent(
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index 3480e91b21..2bcb8b3a05 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -45,7 +45,7 @@ function getRubyFrame(frame) {
 }
 
 export function getPHPFrame(frame, idx) {
-  let funcName = frame.function === 'null' ? '{main}' : frame.function;
+  const funcName = frame.function === 'null' ? '{main}' : frame.function;
   return `#${idx} ${frame.filename || frame.module}(${frame.lineNo}): ${funcName}`;
 }
 
@@ -163,7 +163,7 @@ function getFrame(frame, frameIdx, platform) {
 
 export default function render(data, platform, exception) {
   let firstFrameOmitted, lastFrameOmitted;
-  let frames = [];
+  const frames = [];
 
   if (data.framesOmitted) {
     firstFrameOmitted = data.framesOmitted[0];
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 45ec903019..10e3c70e72 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -44,10 +44,10 @@ class RequestInterface extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-    let data = this.props.data;
-    let view = this.state.view;
+    const group = this.props.group;
+    const evt = this.props.event;
+    const data = this.props.data;
+    const view = this.state.view;
 
     let fullUrl = getFullUrl(data);
     if (!isUrl(fullUrl)) {
@@ -62,7 +62,7 @@ class RequestInterface extends React.Component {
       parsedUrl.href = fullUrl;
     }
 
-    let children = [];
+    const children = [];
 
     if (!this.isPartial() && fullUrl) {
       children.push(
@@ -107,7 +107,7 @@ class RequestInterface extends React.Component {
       </h3>
     );
 
-    let title = <div>{children}</div>;
+    const title = <div>{children}</div>;
 
     return (
       <GroupEventDataSection
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index df4d3967cf..6aa6dde1d5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -39,7 +39,7 @@ class RichHttpContent extends React.Component {
   };
 
   render() {
-    let data = this.props.data;
+    const data = this.props.data;
     return (
       <div>
         {!objectIsEmpty(data.query) && (
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 1986134c76..caa20fb320 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -8,9 +8,9 @@ import CrashHeader from 'app/components/events/interfaces/crashHeader';
 import CrashContent from 'app/components/events/interfaces/crashContent';
 
 export function isStacktraceNewestFirst() {
-  let user = ConfigStore.get('user');
+  const user = ConfigStore.get('user');
   // user may not be authenticated
-  let options = user ? user.options : {};
+  const options = user ? user.options : {};
   switch (options.stacktraceOrder) {
     case 2:
       return true;
@@ -45,13 +45,13 @@ class StacktraceInterface extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-    let data = this.props.data;
-    let stackView = this.state.stackView;
-    let newestFirst = this.state.newestFirst;
+    const group = this.props.group;
+    const evt = this.props.event;
+    const data = this.props.data;
+    const stackView = this.state.stackView;
+    const newestFirst = this.state.newestFirst;
 
-    let title = (
+    const title = (
       <CrashHeader
         title={t('Stacktrace')}
         group={group}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index d77c1d07c4..c7ea8718d8 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -27,11 +27,11 @@ const StacktraceContent = createReactClass({
   },
 
   renderOmittedFrames(firstFrameOmitted, lastFrameOmitted) {
-    let props = {
+    const props = {
       className: 'frame frames-omitted',
       key: 'omitted',
     };
-    let text = t(
+    const text = t(
       'Frames %d until %d were omitted and not available.',
       firstFrameOmitted,
       lastFrameOmitted
@@ -46,7 +46,7 @@ const StacktraceContent = createReactClass({
   },
 
   render() {
-    let data = this.props.data;
+    const data = this.props.data;
     let firstFrameOmitted, lastFrameOmitted;
 
     if (data.framesOmitted) {
@@ -65,13 +65,13 @@ const StacktraceContent = createReactClass({
       lastFrameIdx = data.frames.length - 1;
     }
 
-    let expandFirstFrame = this.props.expandFirstFrame;
-    let frames = [];
+    const expandFirstFrame = this.props.expandFirstFrame;
+    const frames = [];
     let nRepeats = 0;
     data.frames.forEach((frame, frameIdx) => {
-      let prevFrame = data.frames[frameIdx - 1];
-      let nextFrame = data.frames[frameIdx + 1];
-      let repeatedFrame =
+      const prevFrame = data.frames[frameIdx - 1];
+      const nextFrame = data.frames[frameIdx + 1];
+      const repeatedFrame =
         nextFrame &&
         frame.lineNo === nextFrame.lineNo &&
         frame.instructionAddr === nextFrame.instructionAddr &&
@@ -109,7 +109,7 @@ const StacktraceContent = createReactClass({
     });
 
     if (frames.length > 0 && data.registers) {
-      let lastFrame = frames.length - 1;
+      const lastFrame = frames.length - 1;
       frames[lastFrame] = React.cloneElement(frames[lastFrame], {
         registers: data.registers,
       });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index 0df836a903..f4582fb0ec 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -13,7 +13,7 @@ import Pills from 'app/components/pills';
 import Pill from 'app/components/pill';
 
 function trimFilename(fn) {
-  let pieces = fn.split(/\//g);
+  const pieces = fn.split(/\//g);
   return pieces[pieces.length - 1];
 }
 
@@ -22,7 +22,7 @@ function findRelevantFrame(stacktrace) {
     return stacktrace.frames[stacktrace.frames.length - 1];
   }
   for (let i = stacktrace.frames.length - 1; i >= 0; i--) {
-    let frame = stacktrace.frames[i];
+    const frame = stacktrace.frames[i];
     if (frame.inApp) {
       return frame;
     }
@@ -32,11 +32,11 @@ function findRelevantFrame(stacktrace) {
 }
 
 function findThreadException(thread, event) {
-  for (let entry of event.entries) {
+  for (const entry of event.entries) {
     if (entry.type !== 'exception') {
       continue;
     }
-    for (let exc of entry.data.values) {
+    for (const exc of entry.data.values) {
       if (exc.threadId === thread.id) {
         return entry.data;
       }
@@ -51,10 +51,10 @@ function findThreadStacktrace(thread, event, raw) {
   } else if (thread.stacktrace) {
     return thread.stacktrace;
   }
-  let exc = findThreadException(thread, event);
+  const exc = findThreadException(thread, event);
   if (exc) {
     let rv = null;
-    for (let singleExc of exc.values) {
+    for (const singleExc of exc.values) {
       if (singleExc.threadId === thread.id) {
         rv = (raw && singleExc.rawStacktrace) || singleExc.stacktrace;
       }
@@ -65,8 +65,8 @@ function findThreadStacktrace(thread, event, raw) {
 }
 
 function getThreadTitle(thread, event, simplified) {
-  let stacktrace = findThreadStacktrace(thread, event, false);
-  let bits = ['Thread'];
+  const stacktrace = findThreadStacktrace(thread, event, false);
+  const bits = ['Thread'];
   if (defined(thread.name)) {
     bits.push(` "${thread.name}"`);
   }
@@ -76,7 +76,7 @@ function getThreadTitle(thread, event, simplified) {
 
   if (!simplified) {
     if (stacktrace) {
-      let frame = findRelevantFrame(stacktrace);
+      const frame = findRelevantFrame(stacktrace);
       bits.push(' — ');
       bits.push(
         <em key="location">
@@ -90,7 +90,7 @@ function getThreadTitle(thread, event, simplified) {
     }
 
     if (thread.crashed) {
-      let exc = findThreadException(thread, event);
+      const exc = findThreadException(thread, event);
       bits.push(' — ');
       bits.push(
         <small key="crashed">
@@ -109,12 +109,12 @@ function getIntendedStackView(thread, event) {
 }
 
 function findBestThread(threads) {
-  for (let thread of threads) {
+  for (const thread of threads) {
     if (thread.crashed) {
       return thread;
     }
   }
-  for (let thread of threads) {
+  for (const thread of threads) {
     if (thread.stacktrace) {
       return thread;
     }
@@ -204,7 +204,7 @@ class ThreadsInterface extends React.Component {
 
   constructor(props) {
     super(props);
-    let thread = findBestThread(props.data.values);
+    const thread = findBestThread(props.data.values);
 
     this.state = {
       activeThread: thread,
@@ -245,13 +245,13 @@ class ThreadsInterface extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
-    let evt = this.props.event;
-    let {stackView, stackType, newestFirst, activeThread} = this.state;
-    let exception = this.getException();
-    let stacktrace = this.getStacktrace();
+    const group = this.props.group;
+    const evt = this.props.event;
+    const {stackView, stackType, newestFirst, activeThread} = this.state;
+    const exception = this.getException();
+    const stacktrace = this.getStacktrace();
 
-    let threadSelector = (
+    const threadSelector = (
       <div className="pull-left btn-group">
         <DropdownLink
           btnGroup={true}
@@ -272,7 +272,7 @@ class ThreadsInterface extends React.Component {
       </div>
     );
 
-    let title = (
+    const title = (
       <CrashHeader
         title={null}
         beforeTitle={threadSelector}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index 91e613ae13..7b611c083d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -17,7 +17,7 @@ export function getCurlCommand(data) {
   }
 
   // TODO(benvinegar): just gzip? what about deflate?
-  let compressed = data.headers.find(
+  const compressed = data.headers.find(
     h => h[0] === 'Accept-Encoding' && h[1].indexOf('gzip') !== -1
   );
   if (compressed) {
@@ -25,11 +25,11 @@ export function getCurlCommand(data) {
   }
 
   // sort headers
-  let headers = data.headers.sort(function(a, b) {
+  const headers = data.headers.sort(function(a, b) {
     return a[0] === b[0] ? 0 : a[0] < b[0] ? -1 : 1;
   });
 
-  for (let header of headers) {
+  for (const header of headers) {
     result += ' \\\n -H "' + header[0] + ': ' + escapeQuotes(header[1] + '') + '"';
   }
 
@@ -65,8 +65,8 @@ export function stringifyQueryList(query) {
     return query;
   }
 
-  let queryObj = {};
-  for (let [k, v] of query) {
+  const queryObj = {};
+  for (const [k, v] of query) {
     queryObj[k] = v;
   }
   return queryString.stringify(queryObj);
@@ -102,7 +102,7 @@ export function getFullUrl(data) {
 export function objectToSortedTupleArray(obj) {
   return Object.keys(obj)
     .reduce((out, k) => {
-      let val = obj[k];
+      const val = obj[k];
       return out.concat(
         {}.toString.call(val) === '[object Array]'
           ? val.map(v => [k, v]) // key has multiple values (array)
diff --git a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx b/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
index 104fe6832d..50caf94370 100644
--- a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
@@ -45,7 +45,7 @@ const REMARKS = {
 
 function renderChunk(chunk) {
   if (chunk.type === 'redaction') {
-    let title = t('%s due to PII rule "%s"', REMARKS[chunk.remark], chunk.rule_id);
+    const title = t('%s due to PII rule "%s"', REMARKS[chunk.remark], chunk.rule_id);
     return (
       <Tooltip title={title}>
         <Redaction>{chunk.text}</Redaction>
@@ -61,7 +61,7 @@ function renderChunks(chunks) {
     return chunks[0].text;
   }
 
-  let spans = chunks.map((chunk, key) => React.cloneElement(renderChunk(chunk), {key}));
+  const spans = chunks.map((chunk, key) => React.cloneElement(renderChunk(chunk), {key}));
 
   return <Chunks>{spans}</Chunks>;
 }
@@ -81,7 +81,7 @@ function renderValue(value, chunks, errors, remarks) {
   }
 
   if (remarks && remarks.length) {
-    let title = t('%s due to PII rule "%s"', REMARKS[remarks[0][1]], remarks[0][0]);
+    const title = t('%s due to PII rule "%s"', REMARKS[remarks[0][1]], remarks[0][0]);
     element = <Tooltip title={title}>{element}</Tooltip>;
   }
 
@@ -93,7 +93,7 @@ function renderErrors(errors) {
     return null;
   }
 
-  let tooltip = `
+  const tooltip = `
   <div style="text-align: left">
     <strong>${tn('Processing Error:', 'Processing Errors:', errors.length)}</strong>
     <ul>
diff --git a/src/sentry/static/sentry/app/components/events/meta/metaData.jsx b/src/sentry/static/sentry/app/components/events/meta/metaData.jsx
index 021801f442..1bf7135312 100644
--- a/src/sentry/static/sentry/app/components/events/meta/metaData.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/metaData.jsx
@@ -23,10 +23,10 @@ export default class MetaData extends React.Component {
   };
 
   render() {
-    let {children, object, prop, required} = this.props;
+    const {children, object, prop, required} = this.props;
 
-    let value = object[prop];
-    let meta = getMeta(object, prop);
+    const value = object[prop];
+    const meta = getMeta(object, prop);
 
     return (
       <ErrorBoundary mini>
diff --git a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
index 0116247998..bf8b237c00 100644
--- a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
@@ -66,7 +66,7 @@ export function withMeta(event) {
     return event;
   }
 
-  let _meta = event._meta;
+  const _meta = event._meta;
   return new Proxy(event, new MetaProxy(_meta));
 }
 
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
index 43af457cd2..a004da4392 100644
--- a/src/sentry/static/sentry/app/components/events/packageData.jsx
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -19,7 +19,7 @@ class EventPackageData extends React.Component {
   }
 
   render() {
-    let packages = objectToArray(this.props.event.packages);
+    const packages = objectToArray(this.props.event.packages);
 
     return (
       <EventDataSection
diff --git a/src/sentry/static/sentry/app/components/events/sdk.jsx b/src/sentry/static/sentry/app/components/events/sdk.jsx
index 3156f83563..834226c6d0 100644
--- a/src/sentry/static/sentry/app/components/events/sdk.jsx
+++ b/src/sentry/static/sentry/app/components/events/sdk.jsx
@@ -11,8 +11,8 @@ class EventSdk extends React.Component {
   };
 
   render() {
-    let {group, event} = this.props;
-    let data = event.sdk;
+    const {group, event} = this.props;
+    const data = event.sdk;
 
     return (
       <GroupEventDataSection
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
index 8991cacdb9..91fa64528b 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTable.jsx
@@ -13,11 +13,11 @@ class EventsTable extends React.Component {
   };
 
   render() {
-    let {className, events, tagList} = this.props;
+    const {className, events, tagList} = this.props;
 
-    let cx = classNames('table events-table', className);
-    let hasUser = !!events.find(event => event.user);
-    let {orgId, projectId, groupId} = this.props.params;
+    const cx = classNames('table events-table', className);
+    const hasUser = !!events.find(event => event.user);
+    const {orgId, projectId, groupId} = this.props.params;
 
     return (
       <table className={cx}>
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index 757c1c848f..ba37872bb1 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -36,13 +36,13 @@ class EventsTableRow extends React.Component {
   };
 
   renderCrashFileLink() {
-    let {orgId, event, projectId} = this.props;
+    const {orgId, event, projectId} = this.props;
     if (!event.crashFile) {
       return null;
     }
-    let url = `/api/0/projects/${orgId}/${projectId}/events/${event.id}/attachments/${event
+    const url = `/api/0/projects/${orgId}/${projectId}/events/${event.id}/attachments/${event
       .crashFile.id}/?download=1`;
-    let crashFileType =
+    const crashFileType =
       event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';
     return (
       <small>
@@ -52,7 +52,7 @@ class EventsTableRow extends React.Component {
   }
 
   render() {
-    let {
+    const {
       organization,
       className,
       event,
@@ -62,7 +62,7 @@ class EventsTableRow extends React.Component {
       tagList,
       hasUser,
     } = this.props;
-    let tagMap = {};
+    const tagMap = {};
     event.tags.forEach(tag => {
       tagMap[tag.key] = tag.value;
     });
diff --git a/src/sentry/static/sentry/app/components/fileChange.jsx b/src/sentry/static/sentry/app/components/fileChange.jsx
index 7a4f0ae22f..03557f0b0f 100644
--- a/src/sentry/static/sentry/app/components/fileChange.jsx
+++ b/src/sentry/static/sentry/app/components/fileChange.jsx
@@ -18,7 +18,7 @@ class FileChange extends React.PureComponent {
   }
 
   render() {
-    let {filename, authors} = this.props;
+    const {filename, authors} = this.props;
     return (
       <li className="list-group-item list-group-item-sm release-file-change">
         <div className="row row-flex row-center-vertically">
diff --git a/src/sentry/static/sentry/app/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
index 7fbe9e02e9..ef6cd18738 100644
--- a/src/sentry/static/sentry/app/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/components/forms/apiForm.jsx
@@ -38,7 +38,7 @@ export default class ApiForm extends Form {
       return;
     }
 
-    let {data} = this.state;
+    const {data} = this.state;
 
     this.props.onSubmit && this.props.onSubmit(data);
     this.setState(
@@ -46,7 +46,7 @@ export default class ApiForm extends Form {
         state: FormState.SAVING,
       },
       () => {
-        let loadingIndicator = IndicatorStore.add(this.props.submitLoadingMessage);
+        const loadingIndicator = IndicatorStore.add(this.props.submitLoadingMessage);
         this.api.request(this.props.apiEndpoint, {
           method: this.props.apiMethod,
           data,
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
index ff8dd55c89..7ed636ebd6 100644
--- a/src/sentry/static/sentry/app/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -6,12 +6,12 @@ import InputField from 'app/components/forms/inputField';
 
 export default class BooleanField extends InputField {
   coerceValue(props) {
-    let value = super.coerceValue(props);
+    const value = super.coerceValue(props);
     return value ? true : false;
   }
 
   onChange = e => {
-    let value = e.target.checked;
+    const value = e.target.checked;
     this.setValue(value);
   };
 
@@ -28,7 +28,7 @@ export default class BooleanField extends InputField {
   }
 
   render() {
-    let {error} = this.state;
+    const {error} = this.state;
     let className = this.getClassName();
     if (error) {
       className += ' has-error';
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index 64588945c7..4994a34fed 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -53,7 +53,7 @@ class Form extends React.Component {
   }
 
   getChildContext() {
-    let {data, errors} = this.state;
+    const {data, errors} = this.state;
     return {
       form: {
         data,
@@ -69,7 +69,7 @@ class Form extends React.Component {
   };
 
   onSubmitSuccess = data => {
-    let curData = this.state.data;
+    const curData = this.state.data;
     let newData = {};
     if (data) {
       Object.keys(curData).forEach(k => {
@@ -113,14 +113,14 @@ class Form extends React.Component {
   };
 
   render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    let {initialData, data} = this.state;
-    let {errorMessage, hideErrors, requireChanges} = this.props;
-    let hasChanges = requireChanges
+    const isSaving = this.state.state === FormState.SAVING;
+    const {initialData, data} = this.state;
+    const {errorMessage, hideErrors, requireChanges} = this.props;
+    const hasChanges = requireChanges
       ? Object.keys(data).length && !_.isEqual(data, initialData)
       : true;
-    let isError = this.state.state == FormState.ERROR;
-    let nonFieldErrors = this.state.errors && this.state.errors.non_field_errors;
+    const isError = this.state.state == FormState.ERROR;
+    const nonFieldErrors = this.state.errors && this.state.errors.non_field_errors;
 
     return (
       <StyledForm onSubmit={this.onSubmit} className={this.props.className}>
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index f5185b411a..c765744779 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -56,12 +56,12 @@ export default class FormField extends React.PureComponent {
   componentDidMount() {}
 
   componentWillReceiveProps(nextProps, nextContext) {
-    let newError = this.getError(nextProps, nextContext);
+    const newError = this.getError(nextProps, nextContext);
     if (newError != this.state.error) {
       this.setState({error: newError});
     }
     if (this.props.value !== nextProps.value || defined(nextContext.form)) {
-      let newValue = this.getValue(nextProps, nextContext);
+      const newValue = this.getValue(nextProps, nextContext);
       if (newValue !== this.state.value) {
         this.setValue(newValue);
       }
@@ -71,7 +71,7 @@ export default class FormField extends React.PureComponent {
   componentWillUnmount() {}
 
   getValue(props, context) {
-    let form = (context || this.context || {}).form;
+    const form = (context || this.context || {}).form;
     props = props || this.props;
     if (defined(props.value)) {
       return props.value;
@@ -83,7 +83,7 @@ export default class FormField extends React.PureComponent {
   }
 
   getError(props, context) {
-    let form = (context || this.context || {}).form;
+    const form = (context || this.context || {}).form;
     props = props || this.props;
     if (defined(props.error)) {
       return props.error;
@@ -100,18 +100,18 @@ export default class FormField extends React.PureComponent {
   }
 
   onChange = e => {
-    let value = e.target.value;
+    const value = e.target.value;
     this.setValue(value);
   };
 
   setValue = value => {
-    let form = (this.context || {}).form;
+    const form = (this.context || {}).form;
     this.setState(
       {
         value,
       },
       () => {
-        let finalValue = this.coerceValue(this.state.value);
+        const finalValue = this.coerceValue(this.state.value);
         this.props.onChange && this.props.onChange(finalValue);
         form && form.onFieldChange(this.props.name, finalValue);
       }
@@ -123,8 +123,8 @@ export default class FormField extends React.PureComponent {
   }
 
   getFinalClassNames() {
-    let {className, required} = this.props;
-    let {error} = this.state;
+    const {className, required} = this.props;
+    const {error} = this.state;
     return classNames(className, this.getClassName(), {
       'has-error': !!error,
       required,
@@ -132,7 +132,7 @@ export default class FormField extends React.PureComponent {
   }
 
   renderDisabledReason() {
-    let {disabled, disabledReason} = this.props;
+    const {disabled, disabledReason} = this.props;
     if (!disabled) return null;
     if (!disabledReason) return null;
     return (
@@ -143,10 +143,10 @@ export default class FormField extends React.PureComponent {
   }
 
   render() {
-    let {label, hideErrorMessage, help, style} = this.props;
-    let {error} = this.state;
-    let cx = this.getFinalClassNames();
-    let shouldShowErrorMessage = error && !hideErrorMessage;
+    const {label, hideErrorMessage, help, style} = this.props;
+    const {error} = this.state;
+    const cx = this.getFinalClassNames();
+    const shouldShowErrorMessage = error && !hideErrorMessage;
 
     return (
       <div style={style} className={cx}>
diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index 4647251b14..4945c23069 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -29,9 +29,9 @@ export default class GenericField extends React.Component {
   };
 
   render() {
-    let config = this.props.config;
-    let required = defined(config.required) ? config.required : true;
-    let props = {
+    const config = this.props.config;
+    const required = defined(config.required) ? config.required : true;
+    const props = {
       ...config,
       value: this.props.formData[config.name],
       onChange: this.props.onChange,
diff --git a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
index 8a1cbe9024..130457ed59 100644
--- a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
@@ -29,7 +29,7 @@ export default class MultipleCheckboxField extends FormField {
   };
 
   render() {
-    let {
+    const {
       required,
       className,
       disabled,
@@ -40,16 +40,16 @@ export default class MultipleCheckboxField extends FormField {
       hideLabelDivider,
       style,
     } = this.props;
-    let {error} = this.state;
-    let cx = classNames(className, 'control-group', {
+    const {error} = this.state;
+    const cx = classNames(className, 'control-group', {
       'has-error': error,
     });
     // Hacky, but this isn't really a form label vs the checkbox labels, but
     // we want to treat it as one (i.e. for "required" indicator)
-    let labelCx = classNames({
+    const labelCx = classNames({
       required,
     });
-    let shouldShowDisabledReason = disabled && disabledReason;
+    const shouldShowDisabledReason = disabled && disabledReason;
 
     return (
       <div style={style} className={cx}>
diff --git a/src/sentry/static/sentry/app/components/forms/numberField.jsx b/src/sentry/static/sentry/app/components/forms/numberField.jsx
index d44ae5f457..573215e4e4 100644
--- a/src/sentry/static/sentry/app/components/forms/numberField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/numberField.jsx
@@ -9,10 +9,10 @@ export default class NumberField extends InputField {
   };
 
   coerceValue(value, prevValue) {
-    let intValue = parseInt(value, 10);
+    const intValue = parseInt(value, 10);
 
     // return previous value if new value is NaN, otherwise, will get recursive error
-    let isNewCoercedNaN = isNaN(intValue);
+    const isNewCoercedNaN = isNaN(intValue);
 
     if (!isNewCoercedNaN) {
       return intValue;
diff --git a/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx b/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx
index 140ed92163..b7ba489361 100644
--- a/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/radioBooleanField.jsx
@@ -21,12 +21,12 @@ export default class RadioBooleanField extends InputField {
   };
 
   coerceValue(props) {
-    let value = super.coerceValue(props);
+    const value = super.coerceValue(props);
     return value ? true : false;
   }
 
   onChange = e => {
-    let value = e.target.value === 'true';
+    const value = e.target.value === 'true';
     this.setValue(value);
   };
 
@@ -35,7 +35,7 @@ export default class RadioBooleanField extends InputField {
   }
 
   getField() {
-    let yesOption = (
+    const yesOption = (
       <div className="radio" key="yes">
         <label style={{fontWeight: 'normal'}}>
           <input
@@ -50,7 +50,7 @@ export default class RadioBooleanField extends InputField {
         </label>
       </div>
     );
-    let noOption = (
+    const noOption = (
       <div className="radio" key="no">
         <label style={{fontWeight: 'normal'}}>
           <input
@@ -83,10 +83,10 @@ export default class RadioBooleanField extends InputField {
   }
 
   render() {
-    let {label, hideErrorMessage, help, style} = this.props;
-    let {error} = this.state;
-    let cx = this.getFinalClassNames();
-    let shouldShowErrorMessage = error && !hideErrorMessage;
+    const {label, hideErrorMessage, help, style} = this.props;
+    const {error} = this.state;
+    const cx = this.getFinalClassNames();
+    const shouldShowErrorMessage = error && !hideErrorMessage;
 
     return (
       <div style={style} className={cx}>
diff --git a/src/sentry/static/sentry/app/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
index c6bff8f60a..7c58cc84e3 100644
--- a/src/sentry/static/sentry/app/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
@@ -40,19 +40,19 @@ export default class RangeField extends InputField {
   }
 
   attachSlider() {
-    let $value = $('<span class="value" />');
+    const $value = $('<span class="value" />');
     let suffixClassNames = '';
     if (this.props.disabled) {
       suffixClassNames += ' disabled';
     }
     $(ReactDOM.findDOMNode(this.refs.input))
       .on('slider:ready', (e, data) => {
-        let value = parseInt(data.value, 10);
+        const value = parseInt(data.value, 10);
         $value.appendTo(data.el);
         $value.html(this.props.formatLabel(value));
       })
       .on('slider:changed', (e, data) => {
-        let value = parseInt(data.value, 10);
+        const value = parseInt(data.value, 10);
         $value.html(this.props.formatLabel(value));
         this.setValue(value);
       })
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
index 0d842b0b28..dfd25fc3d2 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
@@ -53,8 +53,8 @@ class SelectAsyncControl extends React.Component {
   }
 
   doQuery = debounce(cb => {
-    let {url, onQuery} = this.props;
-    let {query} = this.state;
+    const {url, onQuery} = this.props;
+    const {query} = this.state;
 
     if (!this.api) return null;
 
@@ -76,7 +76,7 @@ class SelectAsyncControl extends React.Component {
       });
     }).then(
       resp => {
-        let {onResults} = this.props;
+        const {onResults} = this.props;
 
         // Note `SelectControl` expects this data type:
         // {
@@ -100,7 +100,7 @@ class SelectAsyncControl extends React.Component {
   };
 
   render() {
-    let {value} = this.props;
+    const {value} = this.props;
 
     return (
       <SelectControl
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
index a626886db1..0a0fe71727 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
@@ -35,8 +35,8 @@ class SelectAsyncField extends SelectField {
   };
 
   onResults = data => {
-    let {name} = this.props;
-    let results = data && data[name];
+    const {name} = this.props;
+    const results = data && data[name];
 
     return (results && results.map(({id, text}) => ({value: id, label: text}))) || [];
   };
diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index 04d0318f6e..441ea00507 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -36,10 +36,10 @@ export default class SelectControl extends React.Component {
   };
 
   render() {
-    let {async, creatable, options, choices, clearable, ...props} = this.props;
+    const {async, creatable, options, choices, clearable, ...props} = this.props;
 
     // Compatibility with old select2 API
-    let choicesOrOptions =
+    const choicesOrOptions =
       convertFromSelect2Choices(
         typeof choices === 'function' ? choices(this.props) : choices
       ) || options;
diff --git a/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx b/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
index 88dc92910c..e2cd0d24f4 100644
--- a/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
@@ -34,17 +34,17 @@ export default class SelectCreatableField extends SelectField {
   }
 
   componentWillReceiveProps(nextProps, nextContext) {
-    let newError = this.getError(nextProps, nextContext);
+    const newError = this.getError(nextProps, nextContext);
     if (newError != this.state.error) {
       this.setState({error: newError});
     }
     if (this.props.value !== nextProps.value || defined(nextContext.form)) {
-      let newValue = this.getValue(nextProps, nextContext);
+      const newValue = this.getValue(nextProps, nextContext);
       // This is the only thing that is different from parent, we compare newValue against coerved value in state
       // To remain compatible with react-select, we need to store the option object that
       // includes `value` and `label`, but when we submit the format, we need to coerce it
       // to just return `value`. Also when field changes, it propagates the coerced value up
-      let coercedValue = this.coerceValue(this.state.value);
+      const coercedValue = this.coerceValue(this.state.value);
 
       // newValue can be empty string because of `getValue`, while coerceValue needs to return null (to differentiate
       // empty string from cleared item). We could use `!=` to compare, but lets be a bit more explicit with strict equality
@@ -66,7 +66,7 @@ export default class SelectCreatableField extends SelectField {
   }
 
   getField() {
-    let {placeholder, disabled, required, clearable, name} = this.props;
+    const {placeholder, disabled, required, clearable, name} = this.props;
 
     return (
       <StyledSelectControl
diff --git a/src/sentry/static/sentry/app/components/forms/selectField.jsx b/src/sentry/static/sentry/app/components/forms/selectField.jsx
index 23b39d27e7..869ad064cc 100644
--- a/src/sentry/static/sentry/app/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectField.jsx
@@ -25,17 +25,17 @@ export default class SelectField extends FormField {
   };
 
   componentWillReceiveProps(nextProps, nextContext) {
-    let newError = this.getError(nextProps, nextContext);
+    const newError = this.getError(nextProps, nextContext);
     if (newError != this.state.error) {
       this.setState({error: newError});
     }
     if (this.props.value !== nextProps.value || defined(nextContext.form)) {
-      let newValue = this.getValue(nextProps, nextContext);
+      const newValue = this.getValue(nextProps, nextContext);
       // This is the only thing that is different from parent, we compare newValue against coerved value in state
       // To remain compatible with react-select, we need to store the option object that
       // includes `value` and `label`, but when we submit the format, we need to coerce it
       // to just return `value`. Also when field changes, it propagates the coerced value up
-      let coercedValue = this.coerceValue(this.state.value);
+      const coercedValue = this.coerceValue(this.state.value);
 
       // newValue can be empty string because of `getValue`, while coerceValue needs to return null (to differentiate
       // empty string from cleared item). We could use `!=` to compare, but lets be a bit more explicit with strict equality
@@ -50,11 +50,11 @@ export default class SelectField extends FormField {
 
   // Overriding this so that we can support `multi` fields through property
   getValue(props, context) {
-    let form = (context || this.context || {}).form;
+    const form = (context || this.context || {}).form;
     props = props || this.props;
 
     // Don't use `isMultiple` here because we're taking props from args as well
-    let defaultValue = this.isMultiple(props) ? [] : '';
+    const defaultValue = this.isMultiple(props) ? [] : '';
 
     if (defined(props.value)) {
       return props.value;
diff --git a/src/sentry/static/sentry/app/components/globalModal.jsx b/src/sentry/static/sentry/app/components/globalModal.jsx
index c671ef1495..c019927e1d 100644
--- a/src/sentry/static/sentry/app/components/globalModal.jsx
+++ b/src/sentry/static/sentry/app/components/globalModal.jsx
@@ -39,7 +39,7 @@ class GlobalModal extends React.Component {
   };
 
   handleCloseModal = () => {
-    let {options, onClose} = this.props;
+    const {options, onClose} = this.props;
 
     // onClose callback for calling component
     if (typeof options.onClose === 'function') {
@@ -56,7 +56,7 @@ class GlobalModal extends React.Component {
   };
 
   render() {
-    let {visible, children, options} = this.props;
+    const {visible, children, options} = this.props;
     let Component = Modal;
 
     if (options && options.type === 'confirm') {
@@ -107,8 +107,8 @@ const GlobalModalContainer = createReactClass({
   },
 
   render() {
-    let {modalStore} = this.state;
-    let visible = !!modalStore && typeof modalStore.renderer === 'function';
+    const {modalStore} = this.state;
+    const visible = !!modalStore && typeof modalStore.renderer === 'function';
 
     return (
       <GlobalModal {...this.props} {...modalStore} visible={visible}>
diff --git a/src/sentry/static/sentry/app/components/globalSelectionLink.jsx b/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
index 55e49cbcb1..cbeb060764 100644
--- a/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
+++ b/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
@@ -40,7 +40,7 @@ export default class GlobalSelectionLink extends React.Component {
 
       return <RouterLink {...routerProps}>{this.props.children}</RouterLink>;
     } else {
-      let {to, ...props} = this.props;
+      const {to, ...props} = this.props;
       return (
         <a {...props} href={to}>
           {this.props.children}
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index 7a61db31d1..db8ef8aaaa 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -39,7 +39,7 @@ class ExternalIssueForm extends AsyncComponent {
   shouldRenderBadRequests = true;
 
   getEndpoints() {
-    let {action, group, integration} = this.props;
+    const {action, group, integration} = this.props;
     return [
       [
         'integrationDetails',
@@ -62,10 +62,10 @@ class ExternalIssueForm extends AsyncComponent {
   }
 
   refetchConfig = () => {
-    let {dynamicFieldValues} = this.state;
-    let {action, group, integration} = this.props;
-    let endpoint = `/groups/${group.id}/integrations/${integration.id}/`;
-    let query = {action, ...dynamicFieldValues};
+    const {dynamicFieldValues} = this.state;
+    const {action, group, integration} = this.props;
+    const endpoint = `/groups/${group.id}/integrations/${integration.id}/`;
+    const query = {action, ...dynamicFieldValues};
 
     this.api.request(endpoint, {
       method: 'GET',
@@ -81,8 +81,8 @@ class ExternalIssueForm extends AsyncComponent {
 
   getDynamicFields(integrationDetails) {
     integrationDetails = integrationDetails || this.state.integrationDetails;
-    let {action} = this.props;
-    let config = integrationDetails[`${action}IssueConfig`];
+    const {action} = this.props;
+    const config = integrationDetails[`${action}IssueConfig`];
 
     return config
       .filter(field => field.updatesForm)
@@ -90,9 +90,9 @@ class ExternalIssueForm extends AsyncComponent {
   }
 
   onFieldChange = (label, value) => {
-    let dynamicFields = this.getDynamicFields();
+    const dynamicFields = this.getDynamicFields();
     if (label in dynamicFields) {
-      let dynamicFieldValues = this.state.dynamicFieldValues || {};
+      const dynamicFieldValues = this.state.dynamicFieldValues || {};
       dynamicFieldValues[label] = value;
 
       this.setState(
@@ -119,16 +119,16 @@ class ExternalIssueForm extends AsyncComponent {
 
   debouncedOptionLoad = debounce(
     (field, input, resolve) => {
-      let query = queryString.stringify({
+      const query = queryString.stringify({
         ...this.state.dynamicFieldValues,
         field: field.name,
         query: input,
       });
 
-      let url = field.url;
-      let separator = url.includes('?') ? '&' : '?';
+      const url = field.url;
+      const separator = url.includes('?') ? '&' : '?';
 
-      let request = {
+      const request = {
         url: [url, separator, query].join(''),
         method: 'GET',
       };
@@ -155,11 +155,11 @@ class ExternalIssueForm extends AsyncComponent {
       : {};
 
   renderBody() {
-    let {integrationDetails} = this.state;
-    let {action, group, integration} = this.props;
-    let config = integrationDetails[`${action}IssueConfig`];
+    const {integrationDetails} = this.state;
+    const {action, group, integration} = this.props;
+    const config = integrationDetails[`${action}IssueConfig`];
 
-    let initialData = {};
+    const initialData = {};
     config.forEach(field => {
       // passing an empty array breaks multi select
       // TODO(jess): figure out why this is breaking and fix
@@ -222,8 +222,8 @@ class ExternalIssueActions extends AsyncComponent {
   }
 
   deleteIssue(issueId) {
-    let {group, integration} = this.props;
-    let endpoint = `/groups/${group.id}/integrations/${integration.id}/?externalIssue=${issueId}`;
+    const {group, integration} = this.props;
+    const endpoint = `/groups/${group.id}/integrations/${integration.id}/?externalIssue=${issueId}`;
     this.api.request(endpoint, {
       method: 'DELETE',
       success: (data, _, jqXHR) => {
@@ -260,7 +260,7 @@ class ExternalIssueActions extends AsyncComponent {
   };
 
   renderBody() {
-    let {action, selectedIntegration, issue} = this.state;
+    const {action, selectedIntegration, issue} = this.state;
     return (
       <React.Fragment>
         <IssueSyncListElement
diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
index 01d3bcb7f6..0df5f22b0f 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
@@ -18,7 +18,7 @@ class ExternalIssueList extends AsyncComponent {
   };
 
   getEndpoints() {
-    let {group} = this.props;
+    const {group} = this.props;
     return [['integrations', `/groups/${group.id}/integrations/`]];
   }
 
diff --git a/src/sentry/static/sentry/app/components/group/participants.jsx b/src/sentry/static/sentry/app/components/group/participants.jsx
index 42e33c277f..7ad61899ad 100644
--- a/src/sentry/static/sentry/app/components/group/participants.jsx
+++ b/src/sentry/static/sentry/app/components/group/participants.jsx
@@ -15,7 +15,7 @@ const GroupParticipants = createReactClass({
   },
 
   render() {
-    let participants = this.props.participants;
+    const participants = this.props.participants;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/components/group/pluginActions.jsx b/src/sentry/static/sentry/app/components/group/pluginActions.jsx
index 6446d550f7..dcd638a8e4 100644
--- a/src/sentry/static/sentry/app/components/group/pluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/pluginActions.jsx
@@ -67,7 +67,7 @@ const PluginActions = createReactClass({
       },
       () => {
         plugins.load(data, () => {
-          let issue = data.issue || null;
+          const issue = data.issue || null;
           this.setState({pluginLoading: false, issue});
         });
       }
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index 72b66ac732..b02428942d 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -32,16 +32,16 @@ const GroupReleaseChart = createReactClass({
   },
 
   getNextState(props) {
-    let releaseStats = props.releaseStats;
-    let releasePoints = {};
+    const releaseStats = props.releaseStats;
+    const releasePoints = {};
     if (releaseStats) {
       releaseStats[props.statsPeriod].forEach(point => {
         releasePoints[point[0]] = point[1];
       });
     }
 
-    let envStats = props.environmentStats;
-    let envPoints = {};
+    const envStats = props.environmentStats;
+    const envPoints = {};
     if (envStats) {
       envStats[props.statsPeriod].forEach(point => {
         envPoints[point[0]] = point[1];
@@ -55,14 +55,14 @@ const GroupReleaseChart = createReactClass({
   },
 
   renderTooltip(point, pointIdx, chart) {
-    let timeLabel = chart.getTimeLabel(point);
+    const timeLabel = chart.getTimeLabel(point);
     let totalY = 0;
     for (let i = 0; i < point.y.length; i++) {
       totalY += point.y[i];
     }
 
-    let {environment, release} = this.props;
-    let {releasePoints, envPoints} = this.state;
+    const {environment, release} = this.props;
+    const {releasePoints, envPoints} = this.state;
 
     return (
       '<div style="width:150px">' +
@@ -91,29 +91,29 @@ const GroupReleaseChart = createReactClass({
   },
 
   render() {
-    let className = 'bar-chart group-chart ' + (this.props.className || '');
+    const className = 'bar-chart group-chart ' + (this.props.className || '');
 
-    let group = this.props.group;
-    let stats = group.stats[this.props.statsPeriod];
+    const group = this.props.group;
+    const stats = group.stats[this.props.statsPeriod];
     if (!stats || !stats.length) return null;
 
-    let {releasePoints, envPoints} = this.state;
+    const {releasePoints, envPoints} = this.state;
 
-    let points = stats.map(point => {
-      let rData = releasePoints[point[0]] || 0;
+    const points = stats.map(point => {
+      const rData = releasePoints[point[0]] || 0;
       let eData = (envPoints[point[0]] || 0) - rData;
       if (eData < 0) eData = 0;
-      let remaining = point[1] - rData - eData;
+      const remaining = point[1] - rData - eData;
       return {
         x: point[0],
         y: [rData, eData, remaining >= 0 ? remaining : 0],
       };
     });
 
-    let markers = [];
+    const markers = [];
 
     if (this.props.firstSeen) {
-      let firstSeenX = new Date(this.props.firstSeen).getTime() / 1000;
+      const firstSeenX = new Date(this.props.firstSeen).getTime() / 1000;
       if (firstSeenX >= points[0].x) {
         markers.push({
           label: t('First seen'),
@@ -126,7 +126,7 @@ const GroupReleaseChart = createReactClass({
     }
 
     if (this.props.lastSeen) {
-      let lastSeenX = new Date(this.props.lastSeen).getTime() / 1000;
+      const lastSeenX = new Date(this.props.lastSeen).getTime() / 1000;
       if (lastSeenX >= points[0].x) {
         markers.push({
           label: t('Last seen'),
diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index dfa092cc0a..86606b0d6d 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -34,7 +34,7 @@ const GroupReleaseStats = createReactClass({
   ],
 
   getInitialState() {
-    let envList = OrganizationEnvironmentsStore.getActive();
+    const envList = OrganizationEnvironmentsStore.getActive();
 
     let environments = [];
     if (this.hasSentry10()) {
@@ -68,8 +68,8 @@ const GroupReleaseStats = createReactClass({
   },
 
   render() {
-    let {group, project, allEnvironments} = this.props;
-    let {environments} = this.state;
+    const {group, project, allEnvironments} = this.props;
+    const {environments} = this.state;
 
     const environmentLabel = environments.length
       ? environments.map(env => env.displayName).join(', ')
@@ -80,10 +80,10 @@ const GroupReleaseStats = createReactClass({
         ? t('selected environments')
         : environments.length === 1 ? environments[0].displayName : null;
 
-    let projectId = project.slug;
-    let orgId = this.getOrganization().slug;
-    let hasRelease = new Set(project.features).has('releases');
-    let isLoading = !group || !allEnvironments;
+    const projectId = project.slug;
+    const orgId = this.getOrganization().slug;
+    const hasRelease = new Set(project.features).has('releases');
+    const isLoading = !group || !allEnvironments;
 
     return (
       <div className="env-stats">
diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index 29fd399b67..3d023cf68c 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -38,13 +38,13 @@ const SeenInfo = createReactClass({
   },
 
   getReleaseTrackingUrl() {
-    let {orgId, projectId} = this.props;
+    const {orgId, projectId} = this.props;
 
     return `/${orgId}/${projectId}/settings/release-tracking/`;
   },
 
   getTooltipTitle() {
-    let {date, dateGlobal, environment, title} = this.props;
+    const {date, dateGlobal, environment, title} = this.props;
 
     return componentToString(
       <div style={{width: 170}}>
@@ -68,7 +68,7 @@ const SeenInfo = createReactClass({
   },
 
   render() {
-    let {date, dateGlobal, environment, release, orgId, projectId} = this.props;
+    const {date, dateGlobal, environment, release, orgId, projectId} = this.props;
     return (
       <dl className="seen-info">
         <dt key={0}>{t('When')}:</dt>
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 70c81738aa..4b2b8d99e1 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -38,7 +38,7 @@ const GroupSidebar = createReactClass({
   },
 
   componentWillMount() {
-    let {group} = this.props;
+    const {group} = this.props;
     this.api.request(`/issues/${group.id}/participants/`, {
       success: data => {
         this.setState({
@@ -77,7 +77,7 @@ const GroupSidebar = createReactClass({
   },
 
   fetchTagData() {
-    let {group} = this.props;
+    const {group} = this.props;
 
     // Fetch the top values for the current group's top tags.
     this.api.request(`/issues/${group.id}/tags/`, {
@@ -111,9 +111,9 @@ const GroupSidebar = createReactClass({
   },
 
   toggleSubscription() {
-    let {group, project} = this.props;
-    let org = this.getOrganization();
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {group, project} = this.props;
+    const org = this.getOrganization();
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
     this.api.bulkUpdate(
       {
@@ -147,9 +147,9 @@ const GroupSidebar = createReactClass({
   },
 
   renderPluginIssue() {
-    let issues = [];
+    const issues = [];
     (this.props.group.pluginIssues || []).forEach(plugin => {
-      let issue = plugin.issue;
+      const issue = plugin.issue;
       // # TODO(dcramer): remove plugin.title check in Sentry 8.22+
       if (issue) {
         issues.push(
@@ -182,14 +182,14 @@ const GroupSidebar = createReactClass({
   },
 
   getNotificationText() {
-    let {group} = this.props;
+    const {group} = this.props;
 
     if (group.isSubscribed) {
       let result = t(
         "You're receiving updates because you are subscribed to this issue."
       );
       if (group.subscriptionDetails) {
-        let reason = group.subscriptionDetails.reason;
+        const reason = group.subscriptionDetails.reason;
         if (this.subscriptionReasons.hasOwnProperty(reason)) {
           result = this.subscriptionReasons[reason];
         }
@@ -214,8 +214,8 @@ const GroupSidebar = createReactClass({
   },
 
   renderParticipantData() {
-    let error = this.state.error;
-    let participants = (this.state || {}).participants || [];
+    const error = this.state.error;
+    const participants = (this.state || {}).participants || [];
 
     if (!error) {
       return (
@@ -231,11 +231,11 @@ const GroupSidebar = createReactClass({
   },
 
   render() {
-    let {group, project} = this.props;
-    let projectId = project.slug;
-    let orgId = this.getOrganization().slug;
+    const {group, project} = this.props;
+    const projectId = project.slug;
+    const orgId = this.getOrganization().slug;
 
-    let subscribeBtnClass = classNames('btn btn-default btn-subscribe', {
+    const subscribeBtnClass = classNames('btn btn-default btn-subscribe', {
       subscribed: group.isSubscribed,
     });
 
@@ -256,9 +256,9 @@ const GroupSidebar = createReactClass({
         </h6>
         {this.state.tagsWithTopValues &&
           group.tags.map(tag => {
-            let tagWithTopValues = this.state.tagsWithTopValues[tag.key];
-            let topValues = tagWithTopValues ? tagWithTopValues.topValues : [];
-            let topValuesTotal = tagWithTopValues ? tagWithTopValues.totalValues : 0;
+            const tagWithTopValues = this.state.tagsWithTopValues[tag.key];
+            const topValues = tagWithTopValues ? tagWithTopValues.topValues : [];
+            const topValuesTotal = tagWithTopValues ? tagWithTopValues.totalValues : 0;
             return (
               <TagDistributionMeter
                 key={tag.key}
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index 8817110425..213bfed19f 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -94,12 +94,12 @@ const TagDistributionMeter = createReactClass({
    */
 
   renderSegments() {
-    let {orgId, projectId, group, totalValues, topValues, tag} = this.props;
+    const {orgId, projectId, group, totalValues, topValues, tag} = this.props;
 
-    let totalVisible = topValues.reduce((sum, value) => sum + value.count, 0);
-    let hasOther = totalVisible < totalValues;
-    let otherPct = percent(totalValues - totalVisible, totalValues);
-    let otherPctLabel = Math.floor(otherPct);
+    const totalVisible = topValues.reduce((sum, value) => sum + value.count, 0);
+    const hasOther = totalVisible < totalValues;
+    const otherPct = percent(totalValues - totalVisible, totalValues);
+    const otherPctLabel = Math.floor(otherPct);
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index efa6ec70c2..5a5f9326c5 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -151,7 +151,7 @@ const GroupList = createReactClass({
         </Panel>
       );
 
-    let {orgId} = this.props;
+    const {orgId} = this.props;
 
     return (
       <Panel>
diff --git a/src/sentry/static/sentry/app/components/highlight.jsx b/src/sentry/static/sentry/app/components/highlight.jsx
index 9841121539..71f3b7352f 100644
--- a/src/sentry/static/sentry/app/components/highlight.jsx
+++ b/src/sentry/static/sentry/app/components/highlight.jsx
@@ -21,14 +21,14 @@ class HighlightComponent extends React.Component {
   };
 
   render() {
-    let {className, children, disabled, text} = this.props;
+    const {className, children, disabled, text} = this.props;
 
     if (!text || disabled) {
       return children;
     }
 
-    let highlightText = text.toLowerCase();
-    let idx = children.toLowerCase().indexOf(highlightText);
+    const highlightText = text.toLowerCase();
+    const idx = children.toLowerCase().indexOf(highlightText);
 
     if (idx === -1) {
       return children;
diff --git a/src/sentry/static/sentry/app/components/hook.jsx b/src/sentry/static/sentry/app/components/hook.jsx
index a377ecad78..91a55442f2 100644
--- a/src/sentry/static/sentry/app/components/hook.jsx
+++ b/src/sentry/static/sentry/app/components/hook.jsx
@@ -26,7 +26,7 @@ const Hook = createReactClass({
   mixins: [Reflux.listenTo(HookStore, 'handleHooks')],
 
   getInitialState() {
-    let {name, ...props} = this.props;
+    const {name, ...props} = this.props;
 
     return {
       hooks: HookStore.get(name).map(cb => cb(props)),
@@ -34,7 +34,7 @@ const Hook = createReactClass({
   },
 
   handleHooks(hookName, hooks) {
-    let {name, ...props} = this.props;
+    const {name, ...props} = this.props;
 
     // Make sure that the incoming hook update matches this component's hook name
     if (hookName !== name) return;
@@ -45,7 +45,7 @@ const Hook = createReactClass({
   },
 
   render() {
-    let {children} = this.props;
+    const {children} = this.props;
 
     if (!this.state.hooks || !this.state.hooks.length) return null;
 
diff --git a/src/sentry/static/sentry/app/components/hookOrDefault.jsx b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
index df1fbfa833..38162190a8 100644
--- a/src/sentry/static/sentry/app/components/hookOrDefault.jsx
+++ b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
@@ -45,8 +45,8 @@ function HookOrDefault({hookName, defaultComponent, params}) {
     },
 
     render() {
-      let hookExists = this.state.hooks && this.state.hooks.length;
-      let HookComponent =
+      const hookExists = this.state.hooks && this.state.hooks.length;
+      const HookComponent =
         hookExists && this.state.hooks[0]({params})
           ? this.state.hooks[0]({params})
           : defaultComponent;
diff --git a/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx
index 6fbc1ea02f..8a08992859 100644
--- a/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx
@@ -47,7 +47,7 @@ class BaseBadge extends React.PureComponent {
   };
 
   render() {
-    let {
+    const {
       className,
       hideAvatar,
       hideName,
@@ -61,7 +61,7 @@ class BaseBadge extends React.PureComponent {
       project,
     } = this.props;
 
-    let data = {
+    const data = {
       team,
       organization,
       project,
diff --git a/src/sentry/static/sentry/app/components/idBadge/index.jsx b/src/sentry/static/sentry/app/components/idBadge/index.jsx
index e88bbde8c5..2e97f2fe76 100644
--- a/src/sentry/static/sentry/app/components/idBadge/index.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/index.jsx
@@ -34,7 +34,7 @@ export default class IdBadge extends React.Component {
   render() {
     // Given the set of sentry types, find the prop name that was passed to this component,
     // of which we have a mapped component for
-    let propNameWithData = Object.keys(this.props).find(key => COMPONENT_MAP.has(key));
+    const propNameWithData = Object.keys(this.props).find(key => COMPONENT_MAP.has(key));
 
     if (!propNameWithData) {
       throw new Error(
@@ -42,7 +42,7 @@ export default class IdBadge extends React.Component {
       );
     }
 
-    let Component = COMPONENT_MAP.get(propNameWithData);
+    const Component = COMPONENT_MAP.get(propNameWithData);
 
     return (
       <InlineErrorBoundary mini>
diff --git a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
index 6bc95a1a57..a5ec9d96bd 100644
--- a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
@@ -28,7 +28,7 @@ class OrganizationBadge extends React.Component {
   };
 
   render() {
-    let {hideOverflow, organization, ...props} = this.props;
+    const {hideOverflow, organization, ...props} = this.props;
 
     return (
       <BaseBadge
@@ -66,7 +66,7 @@ const OrganizationBadgeContainer = createReactClass({
   },
 
   onOrganizationStoreUpdate() {
-    let org = OrganizationStore.get(this.state.organization.slug);
+    const org = OrganizationStore.get(this.state.organization.slug);
     if (isEqual(org.avatar, this.state.organization.avatar)) return;
 
     this.setState({
diff --git a/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx
index 8a59665b04..27a8693490 100644
--- a/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx
@@ -23,7 +23,7 @@ export default class ProjectBadge extends React.PureComponent {
   };
 
   render() {
-    let {hideOverflow, project, ...props} = this.props;
+    const {hideOverflow, project, ...props} = this.props;
 
     return (
       <BaseBadge
diff --git a/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
index e9d130febc..f91c30a3a7 100644
--- a/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
@@ -28,7 +28,7 @@ class TeamBadge extends React.Component {
   };
 
   render() {
-    let {hideOverflow, team, ...props} = this.props;
+    const {hideOverflow, team, ...props} = this.props;
 
     return (
       <BaseBadge
@@ -66,7 +66,7 @@ const TeamBadgeContainer = createReactClass({
   onTeamStoreUpdate(updatedTeam) {
     if (!updatedTeam.has(this.state.team.id)) return;
 
-    let team = TeamStore.getById(this.state.team.id);
+    const team = TeamStore.getById(this.state.team.id);
     if (isEqual(team.avatar, this.state.team.avatar)) return;
 
     this.setState({
diff --git a/src/sentry/static/sentry/app/components/idBadge/userBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/userBadge.jsx
index 0ec0b68175..75a840086c 100644
--- a/src/sentry/static/sentry/app/components/idBadge/userBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/userBadge.jsx
@@ -18,7 +18,7 @@ const UserBadge = ({
   hideEmail,
   ...props
 }) => {
-  let userFromPropsOrMember = user || (member && member.user) || member;
+  const userFromPropsOrMember = user || (member && member.user) || member;
   return (
     <StyledUserBadge {...props}>
       <StyledAvatar user={userFromPropsOrMember} size={avatarSize} />
diff --git a/src/sentry/static/sentry/app/components/inactivePlugins.jsx b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
index bc4b52b94e..2d64482bdb 100644
--- a/src/sentry/static/sentry/app/components/inactivePlugins.jsx
+++ b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
@@ -37,7 +37,7 @@ class InactivePlugins extends React.Component {
   };
 
   render() {
-    let plugins = this.props.plugins;
+    const plugins = this.props.plugins;
     if (plugins.length === 0) return null;
     return (
       <Panel>
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index 64d44a9764..61978b253d 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -40,7 +40,7 @@ class Indicators extends React.Component {
   };
 
   render() {
-    let {items, className, ...props} = this.props;
+    const {items, className, ...props} = this.props;
 
     return (
       <Toasts {...props} className={cx(className, 'ref-toasts')}>
diff --git a/src/sentry/static/sentry/app/components/installPromptBanner.jsx b/src/sentry/static/sentry/app/components/installPromptBanner.jsx
index 53e094d3d0..0979da44e3 100644
--- a/src/sentry/static/sentry/app/components/installPromptBanner.jsx
+++ b/src/sentry/static/sentry/app/components/installPromptBanner.jsx
@@ -25,8 +25,8 @@ const InstallPromptBanner = createReactClass({
   },
 
   componentDidMount() {
-    let {href} = window.location;
-    let {organization} = this.props;
+    const {href} = window.location;
+    const {organization} = this.props;
     analytics('install_prompt.banner_viewed', {
       org_id: parseInt(organization.id, 10),
       page: href,
@@ -40,28 +40,28 @@ const InstallPromptBanner = createReactClass({
   },
 
   sentFirstEvent() {
-    let {projects} = this.props.organization;
+    const {projects} = this.props.organization;
     return !!projects.find(project => project.firstEvent);
   },
 
   getUrl() {
-    let {organization} = this.props;
+    const {organization} = this.props;
     // if no projects - redirect back to onboarding flow
     let url = `/onboarding/${organization.slug}`;
 
     // if project with a valid platform then go straight to instructions
-    let projects = organization.projects;
-    let projectCount = projects.length;
+    const projects = organization.projects;
+    const projectCount = projects.length;
     if (projectCount > 0 && getPlatformName(projects[projectCount - 1].platform)) {
-      let project = projects[projectCount - 1];
+      const project = projects[projectCount - 1];
       url = `/onboarding/${organization.slug}/${project.slug}/configure/${project.platform}`;
     }
     return url;
   },
 
   recordAnalytics() {
-    let {href} = window.location;
-    let {organization} = this.props;
+    const {href} = window.location;
+    const {organization} = this.props;
     analytics('install_prompt.banner_clicked', {
       org_id: parseInt(organization.id, 10),
       page: href,
@@ -69,7 +69,7 @@ const InstallPromptBanner = createReactClass({
   },
 
   inSetupFlow() {
-    let path = window.location.pathname;
+    const path = window.location.pathname;
 
     return (
       path.indexOf('/getting-started/') !== -1 ||
@@ -79,8 +79,8 @@ const InstallPromptBanner = createReactClass({
   },
 
   render() {
-    let {sentFirstEvent} = this.state;
-    let hideBanner = sentFirstEvent || this.inSetupFlow();
+    const {sentFirstEvent} = this.state;
+    const hideBanner = sentFirstEvent || this.inSetupFlow();
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/issueDiff.jsx b/src/sentry/static/sentry/app/components/issueDiff.jsx
index 9237eade4f..263bbac878 100644
--- a/src/sentry/static/sentry/app/components/issueDiff.jsx
+++ b/src/sentry/static/sentry/app/components/issueDiff.jsx
@@ -37,7 +37,7 @@ class IssueDiff extends React.Component {
   }
 
   componentDidMount() {
-    let {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;
+    const {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;
 
     // Fetch component and event data
     Promise.all([
@@ -65,11 +65,11 @@ class IssueDiff extends React.Component {
     // diff multiple exceptions
     //
     // See: https://github.com/getsentry/sentry/issues/6055
-    let exc = event.entries.find(({type}) => type === 'exception');
+    const exc = event.entries.find(({type}) => type === 'exception');
 
     if (!exc) {
       // Look for a message if not an exception
-      let msg = event.entries.find(({type}) => type === 'message');
+      const msg = event.entries.find(({type}) => type === 'message');
       if (!msg) return [];
 
       return msg.data && msg.data.message && [msg.data.message];
@@ -98,9 +98,9 @@ class IssueDiff extends React.Component {
   }
 
   render() {
-    let {className} = this.props;
-    let DiffComponent = this.state.SplitDiffAsync;
-    let diffReady = !this.state.loading && !!DiffComponent;
+    const {className} = this.props;
+    const DiffComponent = this.state.SplitDiffAsync;
+    const diffReady = !this.state.loading && !!DiffComponent;
 
     return (
       <StyledIssueDiff className={className} loading={this.state.loading}>
diff --git a/src/sentry/static/sentry/app/components/issueLink.jsx b/src/sentry/static/sentry/app/components/issueLink.jsx
index 219157eef0..f2d9a69c85 100644
--- a/src/sentry/static/sentry/app/components/issueLink.jsx
+++ b/src/sentry/static/sentry/app/components/issueLink.jsx
@@ -107,7 +107,7 @@ export default class IssueLink extends React.Component {
   }
 
   render() {
-    let {card, issue, to} = this.props;
+    const {card, issue, to} = this.props;
     if (!card) return <Link to={to}>{this.props.children}</Link>;
 
     return (
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index e478858b21..22e8f9ce02 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -50,8 +50,8 @@ const IssueList = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let location = this.props.location;
-    let nextLocation = nextProps.location;
+    const location = this.props.location;
+    const nextLocation = nextProps.location;
     if (!location) return;
 
     if (
@@ -67,7 +67,7 @@ const IssueList = createReactClass({
   },
 
   fetchData() {
-    let location = this.props.location;
+    const location = this.props.location;
     this.api.clear();
     this.api.request(this.props.endpoint, {
       method: 'GET',
diff --git a/src/sentry/static/sentry/app/components/lastCommit.jsx b/src/sentry/static/sentry/app/components/lastCommit.jsx
index 6d34f4f087..8c3aa6b1d2 100644
--- a/src/sentry/static/sentry/app/components/lastCommit.jsx
+++ b/src/sentry/static/sentry/app/components/lastCommit.jsx
@@ -17,10 +17,10 @@ class LastCommit extends React.Component {
       return t('No message provided');
     }
 
-    let firstLine = message.split(/\n/)[0];
+    const firstLine = message.split(/\n/)[0];
     if (firstLine.length > 100) {
       let truncated = firstLine.substr(0, 90);
-      let words = truncated.split(/ /);
+      const words = truncated.split(/ /);
       // try to not have elipsis mid-word
       if (words.length > 1) {
         words.pop();
@@ -32,8 +32,8 @@ class LastCommit extends React.Component {
   };
 
   render() {
-    let {commit, headerClass} = this.props;
-    let commitAuthor = commit && commit.author;
+    const {commit, headerClass} = this.props;
+    const commitAuthor = commit && commit.author;
     return (
       <div>
         <h6 className={headerClass}>Last commit</h6>
diff --git a/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx b/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
index 227ec346a0..5edcd9e0ef 100644
--- a/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
+++ b/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
@@ -16,9 +16,9 @@ const LatestDeployOrReleaseTime = createReactClass({
   mixins: [ApiMixin],
 
   render() {
-    let {release} = this.props;
-    let earlierDeploysNum = release.totalDeploys - 1;
-    let latestDeploy = release.lastDeploy;
+    const {release} = this.props;
+    const earlierDeploysNum = release.totalDeploys - 1;
+    const latestDeploy = release.lastDeploy;
     // if there are deploys associated with the release
     // render the most recent deploy (API will return data ordered by dateFinished)
     // otherwise, render the dateCreated associated with release
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index 6ff85744e7..0aa55c7054 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -86,7 +86,7 @@ class LazyLoad extends React.Component {
   };
 
   async fetchComponent() {
-    let getComponent = this.getComponentGetter();
+    const getComponent = this.getComponentGetter();
 
     try {
       const Component = await retryableImport(getComponent);
@@ -108,9 +108,9 @@ class LazyLoad extends React.Component {
   };
 
   render() {
-    let {Component, error} = this.state;
+    const {Component, error} = this.state;
     // eslint-disable-next-line no-unused-vars
-    let {hideBusy, hideError, component, ...otherProps} = this.props;
+    const {hideBusy, hideError, component, ...otherProps} = this.props;
 
     if (error && !hideError) {
       return (
diff --git a/src/sentry/static/sentry/app/components/letterAvatar.jsx b/src/sentry/static/sentry/app/components/letterAvatar.jsx
index 63e999c2dc..9ec96402ca 100644
--- a/src/sentry/static/sentry/app/components/letterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/letterAvatar.jsx
@@ -35,7 +35,7 @@ const LetterAvatar = createReactClass({
   ],
 
   getColor() {
-    let id = this.hashIdentifier(this.props.identifier);
+    const id = this.hashIdentifier(this.props.identifier);
     return this.COLORS[id % this.COLORS.length];
   },
 
@@ -49,7 +49,7 @@ const LetterAvatar = createReactClass({
   },
 
   getInitials() {
-    let names = (this.props.displayName.trim() || '?').split(' ');
+    const names = (this.props.displayName.trim() || '?').split(' ');
     // Use Array.from as slicing and substring() work on ucs2 segments which
     // results in only getting half of any 4+ byte character.
     let initials = Array.from(names[0])[0];
diff --git a/src/sentry/static/sentry/app/components/link.jsx b/src/sentry/static/sentry/app/components/link.jsx
index a07720c053..0541e12719 100644
--- a/src/sentry/static/sentry/app/components/link.jsx
+++ b/src/sentry/static/sentry/app/components/link.jsx
@@ -17,7 +17,7 @@ class Link extends React.Component {
   };
 
   render() {
-    let {to, href, ...props} = this.props;
+    const {to, href, ...props} = this.props;
 
     if (this.context.location && to) {
       return <RouterLink {...this.props} />;
diff --git a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
index 3930046023..6cef82af99 100644
--- a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
+++ b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import classNames from 'classnames';
 
 import Confirm from 'app/components/confirm';
 
@@ -22,14 +23,11 @@ class LinkWithConfirmation extends React.PureComponent {
   }
 
   render() {
-    let {className, disabled, title, children, ...otherProps} = this.props;
-    if (this.props.disabled) {
-      className += ' disabled';
-    }
+    const {className, disabled, title, children, ...otherProps} = this.props;
     return (
       <Confirm {...otherProps} disabled={disabled}>
         <a
-          className={className}
+          className={classNames(className || '', {disabled})}
           disabled={disabled}
           onClick={this.onToggle}
           title={title}
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index 71a277a118..b25748ecf7 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -37,7 +37,7 @@ class ListLink extends React.Component {
   };
 
   getClassName = () => {
-    let _classNames = {};
+    const _classNames = {};
 
     if (this.props.className) _classNames[this.props.className] = true;
 
@@ -47,7 +47,7 @@ class ListLink extends React.Component {
   };
 
   render() {
-    let carriedProps = _.omit(this.props, 'activeClassName', 'isActive', 'index');
+    const carriedProps = _.omit(this.props, 'activeClassName', 'isActive', 'index');
     return (
       <li className={this.getClassName()}>
         <Link {...carriedProps} onlyActiveOnIndex={this.props.index}>
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
index 05bfbd8ddd..7a32633f4b 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import classNames from 'classnames';
 
 function LoadingIndicator(props) {
-  let {
+  const {
     hideMessage,
     mini,
     triangle,
@@ -17,7 +17,7 @@ function LoadingIndicator(props) {
     size,
     hideSpinner,
   } = props;
-  let cx = classNames(className, {
+  const cx = classNames(className, {
     overlay,
     dark,
     loading: true,
@@ -25,7 +25,7 @@ function LoadingIndicator(props) {
     triangle,
   });
 
-  let loadingCx = classNames({
+  const loadingCx = classNames({
     relative,
     'loading-indicator': true,
     'load-complete': finished,
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index 7c9f005172..648ddc0d95 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -56,7 +56,7 @@ class MenuItem extends React.Component {
   };
 
   render() {
-    let classes = {
+    const classes = {
       'dropdown-header': this.props.header,
       divider: this.props.divider,
       active: this.props.isActive,
diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index cc460972a3..46ca341c53 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -20,8 +20,8 @@ const MissingProjectMembership = createReactClass({
   mixins: [ApiMixin],
 
   getInitialState() {
-    let {organization, projectId} = this.props;
-    let project = organization.projects.find(p => p.slug === projectId);
+    const {organization, projectId} = this.props;
+    const project = organization.projects.find(p => p.slug === projectId);
 
     return {
       loading: false,
@@ -95,7 +95,7 @@ const MissingProjectMembership = createReactClass({
   },
 
   renderJoinTeams(features) {
-    let {teams} = this.state.project;
+    const {teams} = this.state.project;
     if (!teams.length) {
       return (
         <EmptyMessage>
@@ -116,8 +116,8 @@ const MissingProjectMembership = createReactClass({
   },
 
   render() {
-    let {organization} = this.props;
-    let features = new Set(organization.features);
+    const {organization} = this.props;
+    const features = new Set(organization.features);
 
     return (
       <div className="container">
diff --git a/src/sentry/static/sentry/app/components/modals/commandPalette.jsx b/src/sentry/static/sentry/app/components/modals/commandPalette.jsx
index 26e135cc27..c5496f4c8f 100644
--- a/src/sentry/static/sentry/app/components/modals/commandPalette.jsx
+++ b/src/sentry/static/sentry/app/components/modals/commandPalette.jsx
@@ -37,7 +37,7 @@ class CommandPaletteModal extends React.Component {
   };
 
   render() {
-    let {Body} = this.props;
+    const {Body} = this.props;
 
     return (
       <Body>
diff --git a/src/sentry/static/sentry/app/components/modals/createOwnershipRuleModal.jsx b/src/sentry/static/sentry/app/components/modals/createOwnershipRuleModal.jsx
index 7aa7359080..e57258474a 100644
--- a/src/sentry/static/sentry/app/components/modals/createOwnershipRuleModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/createOwnershipRuleModal.jsx
@@ -27,7 +27,7 @@ class CreateOwnershipRuleModal extends React.Component {
   };
 
   render() {
-    let {Body, Header, closeModal, ...props} = this.props;
+    const {Body, Header, closeModal, ...props} = this.props;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx b/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx
index ebf02aed5d..6dc4492689 100644
--- a/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx
@@ -37,7 +37,7 @@ class CreateTeamModal extends React.Component {
   };
 
   render() {
-    let {Body, Header, closeModal, ...props} = this.props;
+    const {Body, Header, closeModal, ...props} = this.props;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/modals/diffModal.jsx b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
index 3ac72f13b3..9b16b7c568 100644
--- a/src/sentry/static/sentry/app/components/modals/diffModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
@@ -9,7 +9,7 @@ class DiffModal extends React.Component {
   };
 
   render() {
-    let {className, Body} = this.props;
+    const {className, Body} = this.props;
 
     return (
       <Body>
diff --git a/src/sentry/static/sentry/app/components/modals/helpSearchModal.jsx b/src/sentry/static/sentry/app/components/modals/helpSearchModal.jsx
index 1371f922f7..f57c2f49cd 100644
--- a/src/sentry/static/sentry/app/components/modals/helpSearchModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/helpSearchModal.jsx
@@ -23,7 +23,7 @@ class HelpSearchModal extends React.Component {
   };
 
   render() {
-    let {Body} = this.props;
+    const {Body} = this.props;
 
     return (
       <Body>
diff --git a/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx b/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
index 9de9d4e0f7..e85ad952f3 100644
--- a/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/recoveryOptionsModal.jsx
@@ -33,15 +33,15 @@ class RecoveryOptionsModal extends AsyncComponent {
   };
 
   renderBody() {
-    let {authenticatorName, closeModal, Body, Header} = this.props;
-    let {authenticators, skipSms} = this.state;
+    const {authenticatorName, closeModal, Body, Header} = this.props;
+    const {authenticators, skipSms} = this.state;
 
-    let {recovery, sms} = authenticators.reduce((obj, item) => {
+    const {recovery, sms} = authenticators.reduce((obj, item) => {
       obj[item.id] = item;
       return obj;
     }, {});
-    let recoveryEnrolled = recovery && recovery.isEnrolled;
-    let displaySmsPrompt = sms && !sms.isEnrolled && !skipSms;
+    const recoveryEnrolled = recovery && recovery.isEnrolled;
+    const displaySmsPrompt = sms && !sms.isEnrolled && !skipSms;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/modals/redirectToProject.jsx b/src/sentry/static/sentry/app/components/modals/redirectToProject.jsx
index 5c7358b57f..b1489d3c0e 100644
--- a/src/sentry/static/sentry/app/components/modals/redirectToProject.jsx
+++ b/src/sentry/static/sentry/app/components/modals/redirectToProject.jsx
@@ -42,7 +42,7 @@ class RedirectToProjectModal extends React.Component {
   }
 
   getNewPath() {
-    let {params, slug} = this.props;
+    const {params, slug} = this.props;
 
     return recreateRoute('', {
       ...this.props,
@@ -54,7 +54,7 @@ class RedirectToProjectModal extends React.Component {
   }
 
   render() {
-    let {slug, Header, Body} = this.props;
+    const {slug, Header, Body} = this.props;
     return (
       <React.Fragment>
         <Header>{t('Redirecting to New Project...')}</Header>
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppPermissionsModal.jsx b/src/sentry/static/sentry/app/components/modals/sentryAppPermissionsModal.jsx
index aba34890c3..4538506b2f 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppPermissionsModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppPermissionsModal.jsx
@@ -64,7 +64,7 @@ class SentryAppPermissionsModal extends React.Component {
   }
 
   render() {
-    let {closeModal, app, orgId, Header, Body} = this.props;
+    const {closeModal, app, orgId, Header, Body} = this.props;
     return (
       <React.Fragment>
         <Header closeButton onHide={closeModal}>
diff --git a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
index 97a833602f..5d62ae815b 100644
--- a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
@@ -41,7 +41,7 @@ class SudoModal extends React.Component {
   }
 
   handleSuccess = () => {
-    let {closeModal, superuser, router, retryRequest} = this.props;
+    const {closeModal, superuser, router, retryRequest} = this.props;
 
     if (!retryRequest) {
       closeModal();
@@ -97,7 +97,7 @@ class SudoModal extends React.Component {
   };
 
   render() {
-    let {closeModal, superuser, user, Header, Body} = this.props;
+    const {closeModal, superuser, user, Header, Body} = this.props;
 
     return (
       <React.Fragment>
@@ -175,7 +175,7 @@ const SudoModalContainer = createReactClass({
   mixins: [ApiMixin],
 
   render() {
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
     return <SudoModal {...this.props} user={user} api={this.api} />;
   },
 });
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index 28c1fcbb0d..4bae575857 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -11,7 +11,7 @@ export default class MutedBox extends React.PureComponent {
   };
 
   renderReason = () => {
-    let details = this.props.statusDetails;
+    const details = this.props.statusDetails;
     if (details.ignoreUntil) {
       return t(
         'This issue has been ignored until %s',
diff --git a/src/sentry/static/sentry/app/components/navTabs.jsx b/src/sentry/static/sentry/app/components/navTabs.jsx
index 5f3b81a5c3..56196d5233 100644
--- a/src/sentry/static/sentry/app/components/navTabs.jsx
+++ b/src/sentry/static/sentry/app/components/navTabs.jsx
@@ -3,8 +3,8 @@ import PropTypes from 'prop-types';
 import classnames from 'classnames';
 
 function NavTabs(props) {
-  let {underlined, className, ...tabProps} = props;
-  let mergedClassName = classnames('nav nav-tabs', className, {
+  const {underlined, className, ...tabProps} = props;
+  const mergedClassName = classnames('nav nav-tabs', className, {
     'border-bottom': underlined,
   });
   return <ul className={mergedClassName} {...tabProps} />;
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
index 5b3e0fc50b..2d3c826d75 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
@@ -36,8 +36,8 @@ const TodoItem = createReactClass({
   },
 
   formatDescription() {
-    let {task} = this.props;
-    let {isExpanded} = this.state;
+    const {task} = this.props;
+    const {isExpanded} = this.state;
 
     return (
       <p>
@@ -47,8 +47,8 @@ const TodoItem = createReactClass({
   },
 
   learnMoreUrlCreator() {
-    let org = this.getOrganization();
-    let {task} = this.props;
+    const org = this.getOrganization();
+    const {task} = this.props;
     let learnMoreUrl;
     if (task.featureLocation === 'project') {
       learnMoreUrl = `/organizations/${org.slug}/projects/choose/?onboarding=1&task=${task.task}`;
@@ -67,8 +67,8 @@ const TodoItem = createReactClass({
   },
 
   recordAnalytics(action) {
-    let org = this.getOrganization();
-    let {task} = this.props;
+    const org = this.getOrganization();
+    const {task} = this.props;
     analytics('onboarding.wizard_clicked', {
       org_id: parseInt(org.id, 10),
       todo_id: parseInt(task.task, 10),
@@ -89,9 +89,9 @@ const TodoItem = createReactClass({
   },
 
   render() {
-    let {task, className} = this.props;
-    let {showConfirmation} = this.state;
-    let learnMoreUrl = this.learnMoreUrlCreator();
+    const {task, className} = this.props;
+    const {showConfirmation} = this.state;
+    const learnMoreUrl = this.learnMoreUrlCreator();
     let description;
 
     switch (task.status) {
@@ -117,11 +117,11 @@ const TodoItem = createReactClass({
         description = this.formatDescription();
     }
 
-    let classes = classNames(className, task.status, {
+    const classes = classNames(className, task.status, {
       blur: showConfirmation,
     });
 
-    let showSkipButton =
+    const showSkipButton =
       task.skippable &&
       task.status !== 'skipped' &&
       task.status !== 'complete' &&
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
index 065aedcbb6..1dc1421704 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
@@ -148,9 +148,9 @@ const TodoList = createReactClass({
 
   componentWillMount() {
     // Map server task state (who finished what) to TodoList.TASK objects
-    let org = this.getOrganization();
-    let tasks = TodoList.TASKS.map(task => {
-      for (let server_task of org.onboardingTasks) {
+    const org = this.getOrganization();
+    const tasks = TodoList.TASKS.map(task => {
+      for (const server_task of org.onboardingTasks) {
         if (server_task.task == task.task) {
           Object.assign(task, server_task);
           break;
@@ -162,12 +162,12 @@ const TodoList = createReactClass({
   },
 
   skipTask(skipped_task) {
-    let org = this.getOrganization();
+    const org = this.getOrganization();
     this.api.request('/organizations/' + org.slug + '/onboarding-tasks/', {
       method: 'POST',
       data: {task: skipped_task, status: 'skipped'},
       success: () => {
-        let new_state = this.state.tasks.map(task => {
+        const new_state = this.state.tasks.map(task => {
           if (task.task == skipped_task) {
             task.status = 'skipped';
           }
@@ -180,9 +180,9 @@ const TodoList = createReactClass({
   },
 
   render() {
-    let nextTasks = this.state.tasks.filter(task => task.display);
+    const nextTasks = this.state.tasks.filter(task => task.display);
 
-    let todoListTasks = nextTasks.map(task => {
+    const todoListTasks = nextTasks.map(task => {
       return <TodoItem key={task.task} task={task} onSkip={this.skipTask} />;
     });
 
diff --git a/src/sentry/static/sentry/app/components/organizationIssueList.jsx b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
index 8f1a8f851f..1de778b945 100644
--- a/src/sentry/static/sentry/app/components/organizationIssueList.jsx
+++ b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
@@ -34,16 +34,16 @@ class OrganizationIssueList extends React.Component {
   }
 
   getQueryStringState = props => {
-    let query = props.location.query;
-    let status = 'status' in query ? query.status : 'unresolved';
+    const query = props.location.query;
+    const status = 'status' in query ? query.status : 'unresolved';
     return {
       status,
     };
   };
 
   render() {
-    let path = this.props.location.pathname;
-    let {status} = this.state;
+    const path = this.props.location.pathname;
+    const {status} = this.state;
     return (
       <OrganizationHomeContainer>
         <div className="pull-right">
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
index 92ec6e4321..a3e12dffdc 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
@@ -9,8 +9,8 @@ export function getStateFromQuery(query) {
   let end = query[URL_PARAM.END] !== 'null' && query[URL_PARAM.END];
   let project = query[URL_PARAM.PROJECT];
   let environment = query[URL_PARAM.ENVIRONMENT];
-  let period = query[URL_PARAM.PERIOD];
-  let utc = query[URL_PARAM.UTC];
+  const period = query[URL_PARAM.PERIOD];
+  const utc = query[URL_PARAM.UTC];
 
   const hasAbsolute = !!start && !!end;
 
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
index 47a8b08aa0..9b04d88dee 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -230,13 +230,13 @@ const FetchOrganizationEnvironments = withApi(
     }
 
     componentDidMount() {
-      let {api, organization} = this.props;
+      const {api, organization} = this.props;
       fetchOrganizationEnvironments(api, organization.slug).then(environments =>
         this.setState({environments})
       );
     }
     render() {
-      let {children} = this.props;
+      const {children} = this.props;
       return children({
         environments: this.state.environments,
       });
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx
index d259b8c44b..47ec266821 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/selectorItem.jsx
@@ -13,12 +13,12 @@ class SelectorItem extends React.PureComponent {
   };
 
   handleClick = e => {
-    let {onClick, value} = this.props;
+    const {onClick, value} = this.props;
     onClick(value, e);
   };
 
   render() {
-    let {className, label} = this.props;
+    const {className, label} = this.props;
     return (
       <Flex className={className} onClick={this.handleClick}>
         <Label>{label}</Label>
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index 4edfd09b51..7f28ea5e7b 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -157,7 +157,8 @@ class TimeRangeSelector extends React.PureComponent {
   };
 
   handleUseUtc = () => {
-    let {onChange, start, end} = this.props;
+    const {onChange} = this.props;
+    let {start, end} = this.props;
 
     start = start || this.state.start;
     end = end || this.state.end;
diff --git a/src/sentry/static/sentry/app/components/pagination.jsx b/src/sentry/static/sentry/app/components/pagination.jsx
index 753f5347f3..dd8cf7a305 100644
--- a/src/sentry/static/sentry/app/components/pagination.jsx
+++ b/src/sentry/static/sentry/app/components/pagination.jsx
@@ -29,16 +29,16 @@ export default class Pagination extends React.Component {
   };
 
   render() {
-    let {className, onCursor, pageLinks} = this.props;
+    const {className, onCursor, pageLinks} = this.props;
     if (!pageLinks) {
       return null;
     }
 
-    let location = this.context.location;
-    let path = this.props.to || location.pathname;
-    let query = location.query;
+    const location = this.context.location;
+    const path = this.props.to || location.pathname;
+    const query = location.query;
 
-    let links = utils.parseLinkHeader(pageLinks);
+    const links = utils.parseLinkHeader(pageLinks);
 
     let previousPageClassName = 'btn btn-default btn-lg prev';
     if (links.previous.results === false) {
diff --git a/src/sentry/static/sentry/app/components/panels/panel.jsx b/src/sentry/static/sentry/app/components/panels/panel.jsx
index 604f568812..747199af53 100644
--- a/src/sentry/static/sentry/app/components/panels/panel.jsx
+++ b/src/sentry/static/sentry/app/components/panels/panel.jsx
@@ -7,7 +7,7 @@ import PanelHeader from 'app/components/panels/panelHeader';
 import space from 'app/styles/space';
 
 const Panel = styled(({title, body, dashedBorder, ...props}) => {
-  let hasHeaderAndBody = !!title && !!body;
+  const hasHeaderAndBody = !!title && !!body;
 
   return !hasHeaderAndBody ? (
     <div {...props} />
diff --git a/src/sentry/static/sentry/app/components/panels/panelBody.jsx b/src/sentry/static/sentry/app/components/panels/panelBody.jsx
index e811e78e81..6c792fe498 100644
--- a/src/sentry/static/sentry/app/components/panels/panelBody.jsx
+++ b/src/sentry/static/sentry/app/components/panels/panelBody.jsx
@@ -7,13 +7,13 @@ import space from 'app/styles/space';
 import textStyles from 'app/styles/text';
 
 const PanelBody = ({className, disablePadding, flex, direction, ...props}) => {
-  let padding = !disablePadding
+  const padding = !disablePadding
     ? css`
         padding: ${space(2)};
       `
     : '';
-  let flexDirection = flex ? direction : undefined;
-  let Comp = flex ? Flex : 'div';
+  const flexDirection = flex ? direction : undefined;
+  const Comp = flex ? Flex : 'div';
 
   return (
     <Comp
diff --git a/src/sentry/static/sentry/app/components/pill.jsx b/src/sentry/static/sentry/app/components/pill.jsx
index aa46b3dc10..25f52ebd03 100644
--- a/src/sentry/static/sentry/app/components/pill.jsx
+++ b/src/sentry/static/sentry/app/components/pill.jsx
@@ -30,7 +30,7 @@ class Pill extends React.Component {
 
   render() {
     const {name, children, className, ...props} = this.props;
-    let [extraClass, renderedValue] = this.renderValue();
+    const [extraClass, renderedValue] = this.renderValue();
 
     return (
       <li className={classNames(className, extraClass)} {...props}>
diff --git a/src/sentry/static/sentry/app/components/pills.jsx b/src/sentry/static/sentry/app/components/pills.jsx
index 64a2128f44..05d3553ff1 100644
--- a/src/sentry/static/sentry/app/components/pills.jsx
+++ b/src/sentry/static/sentry/app/components/pills.jsx
@@ -3,7 +3,7 @@ import classNames from 'classnames';
 
 class Pills extends React.Component {
   render() {
-    let {className, children, ...otherProps} = this.props;
+    const {className, children, ...otherProps} = this.props;
     return (
       <div className={classNames('pills', className)} {...otherProps}>
         {children}
diff --git a/src/sentry/static/sentry/app/components/platformicon.jsx b/src/sentry/static/sentry/app/components/platformicon.jsx
index 5cc81ddaf3..98cf142095 100644
--- a/src/sentry/static/sentry/app/components/platformicon.jsx
+++ b/src/sentry/static/sentry/app/components/platformicon.jsx
@@ -52,7 +52,7 @@ const PLATFORM_TO_ICON = {
 };
 
 export function getIcon(platform) {
-  let icon = PLATFORM_TO_ICON[platform];
+  const icon = PLATFORM_TO_ICON[platform];
 
   if (!icon) {
     return 'generic';
@@ -62,7 +62,7 @@ export function getIcon(platform) {
 }
 
 const Platformicon = ({platform, size, width, height, ...props}) => {
-  let icon = getIcon(platform);
+  const icon = getIcon(platform);
 
   return (
     <img
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index d8e86be0f8..5db56902f9 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -67,7 +67,7 @@ const PluginConfig = createReactClass({
   },
 
   getPluginEndpoint() {
-    let {organization, project, data} = this.props;
+    const {organization, project, data} = this.props;
     return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;
   },
 
@@ -76,7 +76,7 @@ const PluginConfig = createReactClass({
   },
 
   testPlugin() {
-    let loadingIndicator = IndicatorStore.add(t('Sending test..'));
+    const loadingIndicator = IndicatorStore.add(t('Sending test..'));
     this.api.request(this.getPluginEndpoint(), {
       method: 'POST',
       data: {
@@ -101,9 +101,9 @@ const PluginConfig = createReactClass({
   },
 
   render() {
-    let {data} = this.props;
+    const {data} = this.props;
     // If passed via props, use that value instead of from `data`
-    let enabled =
+    const enabled =
       typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;
 
     return (
diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
index cf31fa715e..95ae9fbe9f 100644
--- a/src/sentry/static/sentry/app/components/pluginList.jsx
+++ b/src/sentry/static/sentry/app/components/pluginList.jsx
@@ -21,7 +21,7 @@ export default class PluginList extends React.Component {
   };
 
   handleEnablePlugin = plugin => {
-    let {organization, project} = this.props;
+    const {organization, project} = this.props;
     enablePlugin({
       projectId: project.slug,
       orgId: organization.slug,
@@ -32,7 +32,7 @@ export default class PluginList extends React.Component {
   };
 
   handleDisablePlugin = plugin => {
-    let {organization, project} = this.props;
+    const {organization, project} = this.props;
     disablePlugin({
       projectId: project.slug,
       orgId: organization.slug,
@@ -43,7 +43,7 @@ export default class PluginList extends React.Component {
   };
 
   render() {
-    let {organization, pluginList, project} = this.props;
+    const {organization, pluginList, project} = this.props;
 
     if (!pluginList.length) {
       return (
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 14e87fc6f0..891bc93b0c 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -33,21 +33,21 @@ class ProjectHeader extends React.Component {
   };
 
   render() {
-    let {project, environments, activeEnvironment} = this.props;
-    let navSection = this.props.activeSection;
-    let org = this.props.organization;
-    let allEnvironmentsLabel = t('All environments');
+    const {project, environments, activeEnvironment} = this.props;
+    const navSection = this.props.activeSection;
+    const org = this.props.organization;
+    const allEnvironmentsLabel = t('All environments');
 
-    let pagesWithEnvironments = new Set([
+    const pagesWithEnvironments = new Set([
       'stream',
       'releases',
       'dashboard',
       'events',
       'user-feedback',
     ]);
-    let showEnvironmentsToggle = pagesWithEnvironments.has(navSection);
+    const showEnvironmentsToggle = pagesWithEnvironments.has(navSection);
 
-    let activeEnvironmentTitle = activeEnvironment
+    const activeEnvironmentTitle = activeEnvironment
       ? activeEnvironment.displayName
       : allEnvironmentsLabel;
 
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index dd60202063..a699f404d3 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -27,8 +27,8 @@ const ProjectHeaderProjectSelector = withRouter(
      * If not, passed as an absolute URL via the 'href' property.
      */
     getProjectUrlProps(project) {
-      let org = this.props.organization;
-      let path = `/${org.slug}/${project.slug}/`;
+      const org = this.props.organization;
+      const path = `/${org.slug}/${project.slug}/`;
 
       if (this.context.location) {
         return {to: path};
@@ -42,8 +42,8 @@ const ProjectHeaderProjectSelector = withRouter(
     }
 
     handleSelect = project => {
-      let {router} = this.props;
-      let {to, href} = this.getProjectUrlProps(project);
+      const {router} = this.props;
+      const {to, href} = this.getProjectUrlProps(project);
       if (to) {
         router.push(to);
       } else {
diff --git a/src/sentry/static/sentry/app/components/projectLabel.jsx b/src/sentry/static/sentry/app/components/projectLabel.jsx
index 9eeb098451..fe563842e7 100644
--- a/src/sentry/static/sentry/app/components/projectLabel.jsx
+++ b/src/sentry/static/sentry/app/components/projectLabel.jsx
@@ -7,7 +7,7 @@ export default class ProjectLabel extends React.PureComponent {
   };
 
   render() {
-    let {project} = this.props;
+    const {project} = this.props;
 
     return (
       <span className="project-label" {...this.props}>
diff --git a/src/sentry/static/sentry/app/components/projectLink.jsx b/src/sentry/static/sentry/app/components/projectLink.jsx
index c814dc82e5..a34a12eac8 100644
--- a/src/sentry/static/sentry/app/components/projectLink.jsx
+++ b/src/sentry/static/sentry/app/components/projectLink.jsx
@@ -37,7 +37,7 @@ class ProjectLink extends React.Component {
 
       return <RouterLink {...routerProps}>{this.props.children}</RouterLink>;
     } else {
-      let {to, ...props} = this.props;
+      const {to, ...props} = this.props;
       return (
         <a {...props} href={to}>
           {this.props.children}
diff --git a/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx b/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
index 534907fd17..9b2bc8c263 100644
--- a/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
+++ b/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
@@ -12,7 +12,7 @@ const BookmarkToggle = createReactClass({
   mixins: [ApiMixin, Reflux.connect(LatestContextStore, 'latestContext')],
 
   handleBookmarkClick() {
-    let {project, organization} = this.state.latestContext;
+    const {project, organization} = this.state.latestContext;
     if (project && organization) {
       projectUpdate(this.api, {
         orgId: organization.slug,
@@ -27,10 +27,10 @@ const BookmarkToggle = createReactClass({
   render() {
     // TODO: can't guarantee that a <span> is appropriate here 100% of the time
     //       if this is to be truly re-usable
-    let project = this.state.latestContext.project;
-    let isActive = project ? project.isBookmarked : false;
+    const project = this.state.latestContext.project;
+    const isActive = project ? project.isBookmarked : false;
 
-    let projectIconClass = classNames('project-select-bookmark icon icon-star-solid', {
+    const projectIconClass = classNames('project-select-bookmark icon icon-star-solid', {
       active: isActive,
     });
 
diff --git a/src/sentry/static/sentry/app/components/pullRequestLink.jsx b/src/sentry/static/sentry/app/components/pullRequestLink.jsx
index 44cb5d888f..382e7d3aac 100644
--- a/src/sentry/static/sentry/app/components/pullRequestLink.jsx
+++ b/src/sentry/static/sentry/app/components/pullRequestLink.jsx
@@ -16,7 +16,7 @@ class PullRequestLink extends React.Component {
       return null;
     }
 
-    let id = this.props.repository.provider.id;
+    const id = this.props.repository.provider.id;
     if (id.indexOf(':') > -1) {
       return id.split(':').pop();
     }
@@ -24,9 +24,9 @@ class PullRequestLink extends React.Component {
   }
 
   render() {
-    let {pullRequest, repository} = this.props;
-    let providerId = this.providerId;
-    let displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;
+    const {pullRequest, repository} = this.props;
+    const providerId = this.providerId;
+    const displayId = `${repository.name} #${pullRequest.id}: ${pullRequest.title}`;
 
     let icon = '';
     if (['github', 'gitlab', 'bitbucket'].indexOf(providerId) > -1) {
diff --git a/src/sentry/static/sentry/app/components/qrcode.jsx b/src/sentry/static/sentry/app/components/qrcode.jsx
index c0124494e5..c8a3957808 100644
--- a/src/sentry/static/sentry/app/components/qrcode.jsx
+++ b/src/sentry/static/sentry/app/components/qrcode.jsx
@@ -27,7 +27,7 @@ class Qrcode extends React.Component {
   };
 
   render() {
-    let {code} = this.props;
+    const {code} = this.props;
     return (
       <Table>
         <tbody>
diff --git a/src/sentry/static/sentry/app/components/radio.jsx b/src/sentry/static/sentry/app/components/radio.jsx
index ac05bc63fe..ad11f0c32e 100644
--- a/src/sentry/static/sentry/app/components/radio.jsx
+++ b/src/sentry/static/sentry/app/components/radio.jsx
@@ -7,8 +7,8 @@ class Radio extends React.Component {
   };
 
   render() {
-    let {className, ...otherProps} = this.props;
-    let cx = classNames('radio-select', className);
+    const {className, ...otherProps} = this.props;
+    const cx = classNames('radio-select', className);
     return <input type="radio" className={cx} {...otherProps} />;
   }
 }
diff --git a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
index bff193a1c8..8cd4c39469 100644
--- a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
+++ b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
@@ -54,9 +54,9 @@ const ReleaseProjectStatSparkline = createReactClass({
   },
 
   getStatReceived() {
-    let {orgId} = this.props;
-    let projectId = this.props.project.slug;
-    let path = `/projects/${orgId}/${projectId}/stats/`;
+    const {orgId} = this.props;
+    const projectId = this.props.project.slug;
+    const path = `/projects/${orgId}/${projectId}/stats/`;
     return this.api.requestPromise(path, {
       method: 'GET',
       data: 'stat=received',
@@ -75,9 +75,9 @@ const ReleaseProjectStatSparkline = createReactClass({
   },
 
   getNewIssuesCount() {
-    let {orgId, version} = this.props;
-    let projectId = this.props.project.slug;
-    let issuesPath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
+    const {orgId, version} = this.props;
+    const projectId = this.props.project.slug;
+    const issuesPath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
       version
     )}/`;
     return this.api.requestPromise(issuesPath, {
@@ -115,15 +115,15 @@ const ReleaseProjectStatSparkline = createReactClass({
   },
 
   render() {
-    let {organization, orgId, project, version} = this.props;
+    const {organization, orgId, project, version} = this.props;
 
     if (this.state.loading) return <LoadingIndicator />;
     if (this.state.error) return <LoadingError />;
 
-    let {Sparklines, SparklinesLine, stats} = this.state;
-    let values = stats.map(tuple => tuple[1]);
+    const {Sparklines, SparklinesLine, stats} = this.state;
+    const values = stats.map(tuple => tuple[1]);
 
-    let hasSentry10 = new Set(organization.features).has('sentry10');
+    const hasSentry10 = new Set(organization.features).has('sentry10');
 
     return (
       <li>
diff --git a/src/sentry/static/sentry/app/components/releaseStats.jsx b/src/sentry/static/sentry/app/components/releaseStats.jsx
index a75a7203a5..aaa685936e 100644
--- a/src/sentry/static/sentry/app/components/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/releaseStats.jsx
@@ -14,14 +14,14 @@ const ReleaseStats = createReactClass({
   },
 
   render() {
-    let release = this.props.release;
-    let commitCount = release.commitCount || 0;
-    let authorCount = (release.authors && release.authors.length) || 0;
+    const release = this.props.release;
+    const commitCount = release.commitCount || 0;
+    const authorCount = (release.authors && release.authors.length) || 0;
     if (commitCount === 0) {
       return null;
     }
 
-    let releaseSummary =
+    const releaseSummary =
       commitCount +
       t(commitCount !== 1 ? ' commits ' : ' commit ') +
       t('by ') +
diff --git a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
index 44d5ef3c9f..29e6373641 100644
--- a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
+++ b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
@@ -42,16 +42,16 @@ class RepositoryFileSummary extends React.Component {
   };
 
   render() {
-    let {repository, fileChangeSummary} = this.props;
+    const {repository, fileChangeSummary} = this.props;
     const MAX = RepositoryFileSummary.MAX_WHEN_COLLAPSED;
     let files = Object.keys(fileChangeSummary);
-    let fileCount = files.length;
+    const fileCount = files.length;
     files.sort();
     if (this.state.collapsed && fileCount > MAX) {
       files = files.slice(0, MAX);
     }
-    let numCollapsed = fileCount - files.length;
-    let canCollapse = fileCount > MAX;
+    const numCollapsed = fileCount - files.length;
+    const canCollapse = fileCount > MAX;
     return (
       <div>
         <h5>
@@ -63,7 +63,7 @@ class RepositoryFileSummary extends React.Component {
         </h5>
         <ul className="list-group list-group-striped m-b-2">
           {files.map(filename => {
-            let {id, authors, types} = fileChangeSummary[filename];
+            const {id, authors, types} = fileChangeSummary[filename];
             return (
               <FileChange
                 key={id}
diff --git a/src/sentry/static/sentry/app/components/repositoryRow.jsx b/src/sentry/static/sentry/app/components/repositoryRow.jsx
index d5de87c8d8..0d864f52be 100644
--- a/src/sentry/static/sentry/app/components/repositoryRow.jsx
+++ b/src/sentry/static/sentry/app/components/repositoryRow.jsx
@@ -41,7 +41,7 @@ class RepositoryRow extends React.Component {
   }
 
   cancelDelete = () => {
-    let {api, orgId, repository, onRepositoryChange} = this.props;
+    const {api, orgId, repository, onRepositoryChange} = this.props;
     cancelDeleteRepository(api, orgId, repository.id).then(
       data => {
         if (onRepositoryChange) onRepositoryChange(data);
@@ -51,7 +51,7 @@ class RepositoryRow extends React.Component {
   };
 
   deleteRepo = () => {
-    let {api, orgId, repository, onRepositoryChange} = this.props;
+    const {api, orgId, repository, onRepositoryChange} = this.props;
     deleteRepository(api, orgId, repository.id).then(
       data => {
         if (onRepositoryChange) onRepositoryChange(data);
@@ -65,8 +65,8 @@ class RepositoryRow extends React.Component {
   }
 
   render() {
-    let {repository, showProvider} = this.props;
-    let isActive = this.isActive;
+    const {repository, showProvider} = this.props;
+    const isActive = this.isActive;
 
     return (
       <Access access={['org:admin']}>
diff --git a/src/sentry/static/sentry/app/components/resolutionBox.jsx b/src/sentry/static/sentry/app/components/resolutionBox.jsx
index 79eb979538..b1ab8c8c02 100644
--- a/src/sentry/static/sentry/app/components/resolutionBox.jsx
+++ b/src/sentry/static/sentry/app/components/resolutionBox.jsx
@@ -14,8 +14,8 @@ export default class ResolutionBox extends React.Component {
   };
 
   renderReason = () => {
-    let {orgId, projectId, statusDetails} = this.props;
-    let actor = statusDetails.actor ? (
+    const {orgId, projectId, statusDetails} = this.props;
+    const actor = statusDetails.actor ? (
       <strong>
         <Avatar user={statusDetails.actor} size={20} className="avatar" />
         <span style={{marginLeft: 5}}>{statusDetails.actor.name}</span>
diff --git a/src/sentry/static/sentry/app/components/resourceCard.jsx b/src/sentry/static/sentry/app/components/resourceCard.jsx
index a6ab33a1a6..75ced09d98 100644
--- a/src/sentry/static/sentry/app/components/resourceCard.jsx
+++ b/src/sentry/static/sentry/app/components/resourceCard.jsx
@@ -15,13 +15,13 @@ export default class ResourceCard extends React.Component {
   };
 
   recordClick = () => {
-    let {link, title} = this.props;
+    const {link, title} = this.props;
     analytics('orgdash.resource_clicked', {link, title});
   };
 
   render() {
     const mediaUrl = ConfigStore.get('mediaUrl');
-    let {title, link, imgUrl} = this.props;
+    const {title, link, imgUrl} = this.props;
 
     return (
       <ResourceCardWrapper onClick={this.recordClick}>
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
index c9cf36c406..33df55b660 100644
--- a/src/sentry/static/sentry/app/components/resultGrid.jsx
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -19,7 +19,7 @@ class Filter extends React.Component {
   };
 
   getCurrentLabel = () => {
-    let selected = this.props.options.filter(item => {
+    const selected = this.props.options.filter(item => {
       return item[0] === (this.props.value || '');
     })[0];
     if (selected) return this.props.name + ': ' + selected[1];
@@ -27,7 +27,7 @@ class Filter extends React.Component {
   };
 
   getDefaultItem = () => {
-    let query = $.extend({}, this.props.location.query, {
+    const query = $.extend({}, this.props.location.query, {
       cursor: '',
     });
     delete query[this.props.queryKey];
@@ -49,10 +49,10 @@ class Filter extends React.Component {
       <DropdownLink title={this.getCurrentLabel()}>
         {this.getDefaultItem()}
         {this.props.options.map(item => {
-          let filterQuery = {};
+          const filterQuery = {};
           filterQuery[this.props.queryKey] = item[0];
           filterQuery.cursor = '';
-          let query = $.extend({}, this.props.location.query, filterQuery);
+          const query = $.extend({}, this.props.location.query, filterQuery);
           return (
             <MenuItem
               key={item[0]}
@@ -99,7 +99,7 @@ class SortBy extends React.Component {
     return (
       <DropdownLink title={this.getCurrentSortLabel()} className="sorted-by">
         {this.props.options.map(item => {
-          let query = $.extend({}, this.props.location.query, {
+          const query = $.extend({}, this.props.location.query, {
             sortBy: item[0],
             cursor: '',
           });
@@ -180,7 +180,7 @@ const ResultGrid = createReactClass({
   },
 
   getInitialState() {
-    let queryParams = (this.props.location || {}).query || {};
+    const queryParams = (this.props.location || {}).query || {};
 
     return {
       rows: [],
@@ -198,7 +198,7 @@ const ResultGrid = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let queryParams = (nextProps.location || {}).query || {};
+    const queryParams = (nextProps.location || {}).query || {};
     this.setState(
       {
         query: queryParams.query || '',
@@ -227,7 +227,7 @@ const ResultGrid = createReactClass({
 
   fetchData() {
     // TODO(dcramer): this should whitelist filters/sortBy/cursor/perPage
-    let queryParams = $.extend(
+    const queryParams = $.extend(
       {},
       this.props.defaultParams,
       {sortBy: this.state.sortBy},
@@ -255,9 +255,9 @@ const ResultGrid = createReactClass({
   },
 
   onSearch(e) {
-    let location = this.props.location || {};
-    let {query} = this.state;
-    let targetQueryParams = jQuery.extend({}, location.query || {}, {
+    const location = this.props.location || {};
+    const {query} = this.state;
+    const targetQueryParams = jQuery.extend({}, location.query || {}, {
       query,
       cursor: '',
     });
@@ -312,7 +312,7 @@ const ResultGrid = createReactClass({
   },
 
   render() {
-    let {filters} = this.props;
+    const {filters} = this.props;
     return (
       <div className="result-grid">
         <div className="table-options">
diff --git a/src/sentry/static/sentry/app/components/scoreBar.jsx b/src/sentry/static/sentry/app/components/scoreBar.jsx
index 2206b93388..d321e33274 100644
--- a/src/sentry/static/sentry/app/components/scoreBar.jsx
+++ b/src/sentry/static/sentry/app/components/scoreBar.jsx
@@ -23,13 +23,13 @@ class ScoreBar extends React.Component {
   };
 
   render() {
-    let {className, vertical, palette, score, size, thickness} = this.props;
-    let maxScore = palette.length;
+    const {className, vertical, palette, score, size, thickness} = this.props;
+    const maxScore = palette.length;
 
     // Make sure score is between 0 and maxScore
-    let scoreInBounds = score >= maxScore ? maxScore : score <= 0 ? 0 : score;
+    const scoreInBounds = score >= maxScore ? maxScore : score <= 0 ? 0 : score;
     // Make sure paletteIndex is 0 based
-    let paletteIndex = scoreInBounds - 1;
+    const paletteIndex = scoreInBounds - 1;
 
     // Size of bar, depends on orientation, although we could just apply a transformation via css
     const barProps = {
diff --git a/src/sentry/static/sentry/app/components/search/index.jsx b/src/sentry/static/sentry/app/components/search/index.jsx
index a552342dd5..e1207cc9b1 100644
--- a/src/sentry/static/sentry/app/components/search/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/index.jsx
@@ -82,7 +82,7 @@ class Search extends React.Component {
 
     analytics(`${this.props.entryPoint}.select`, {query: state && state.inputValue});
 
-    let {to, action} = item;
+    const {to, action} = item;
 
     // `action` refers to a callback function while
     // `to` is a react-router route
@@ -107,8 +107,8 @@ class Search extends React.Component {
       return;
     }
 
-    let {params, router} = this.props;
-    let nextPath = replaceRouterParams(to, params);
+    const {params, router} = this.props;
+    const nextPath = replaceRouterParams(to, params);
 
     navigateTo(nextPath, router);
   };
@@ -120,11 +120,11 @@ class Search extends React.Component {
 
   renderItem = ({resultObj, index, highlightedIndex, getItemProps}) => {
     // resultObj is a fuse.js result object with {item, matches, score}
-    let {renderItem} = this.props;
-    let highlighted = index === highlightedIndex;
-    let {item, matches} = resultObj;
-    let key = `${item.title}-${index}`;
-    let itemProps = {
+    const {renderItem} = this.props;
+    const highlighted = index === highlightedIndex;
+    const {item, matches} = resultObj;
+    const key = `${item.title}-${index}`;
+    const itemProps = {
       ...getItemProps({
         item,
       }),
@@ -149,7 +149,7 @@ class Search extends React.Component {
   };
 
   render() {
-    let {
+    const {
       params,
       dropdownStyle,
       searchOptions,
@@ -176,8 +176,8 @@ class Search extends React.Component {
           highlightedIndex,
           onChange,
         }) => {
-          let searchQuery = inputValue.toLowerCase().trim();
-          let isValidSearch = inputValue.length >= minSearch;
+          const searchQuery = inputValue.toLowerCase().trim();
+          const isValidSearch = inputValue.length >= minSearch;
 
           this.saveQueryMetrics(searchQuery);
 
diff --git a/src/sentry/static/sentry/app/components/search/searchResult.jsx b/src/sentry/static/sentry/app/components/search/searchResult.jsx
index cccd0f4aa7..b17d3cdf9d 100644
--- a/src/sentry/static/sentry/app/components/search/searchResult.jsx
+++ b/src/sentry/static/sentry/app/components/search/searchResult.jsx
@@ -64,14 +64,16 @@ class SearchResult extends React.Component {
   };
 
   renderContent() {
-    let {highlighted, item, matches, params} = this.props;
-    let {sourceType, title, description, model} = item;
+    const {highlighted, item, matches, params} = this.props;
+    const {sourceType, model} = item;
+    let {title, description} = item;
 
     if (matches) {
       const HighlightedMarker = p => <HighlightMarker highlighted={highlighted} {...p} />;
 
-      let matchedTitle = matches && matches.find(({key}) => key === 'title');
-      let matchedDescription = matches && matches.find(({key}) => key === 'description');
+      const matchedTitle = matches && matches.find(({key}) => key === 'title');
+      const matchedDescription =
+        matches && matches.find(({key}) => key === 'description');
 
       title = matchedTitle
         ? highlightFuseMatches(matchedTitle, HighlightedMarker)
@@ -82,11 +84,11 @@ class SearchResult extends React.Component {
     }
 
     if (['organization', 'member', 'project', 'team'].includes(sourceType)) {
-      let DescriptionNode = (
+      const DescriptionNode = (
         <BadgeDetail highlighted={highlighted}>{description}</BadgeDetail>
       );
 
-      let badgeProps = {
+      const badgeProps = {
         displayName: title,
         displayEmail: DescriptionNode,
         description: DescriptionNode,
@@ -110,13 +112,13 @@ class SearchResult extends React.Component {
   }
 
   renderResultType() {
-    let {item} = this.props;
-    let {resultIcon, resultType, model} = item;
+    const {item} = this.props;
+    const {resultIcon, resultType, model} = item;
 
-    let isSettings = resultType === 'settings';
-    let isField = resultType === 'field';
-    let isRoute = resultType === 'route';
-    let isIntegration = resultType === 'integration';
+    const isSettings = resultType === 'settings';
+    const isField = resultType === 'field';
+    const isRoute = resultType === 'route';
+    const isIntegration = resultType === 'integration';
 
     if (resultIcon) {
       return resultIcon;
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index 62d1b0bf6e..cb251554c5 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -18,7 +18,7 @@ const shouldSearchShortIds = query => /[\w\d]+-[\w\d]+/.test(query);
 
 // Helper functions to create result objects
 async function createOrganizationResults(organizationsPromise) {
-  let organizations = (await organizationsPromise) || [];
+  const organizations = (await organizationsPromise) || [];
   return flatten(
     organizations.map(org => [
       {
@@ -41,7 +41,7 @@ async function createOrganizationResults(organizationsPromise) {
   );
 }
 async function createProjectResults(projectsPromise, orgId) {
-  let projects = (await projectsPromise) || [];
+  const projects = (await projectsPromise) || [];
   return flatten(
     projects.map(project => [
       {
@@ -64,7 +64,7 @@ async function createProjectResults(projectsPromise, orgId) {
   );
 }
 async function createTeamResults(teamsPromise, orgId) {
-  let teams = (await teamsPromise) || [];
+  const teams = (await teamsPromise) || [];
   return teams.map(team => ({
     title: `#${team.slug}`,
     description: 'Team Settings',
@@ -76,7 +76,7 @@ async function createTeamResults(teamsPromise, orgId) {
 }
 
 async function createMemberResults(membersPromise, orgId) {
-  let members = (await membersPromise) || [];
+  const members = (await membersPromise) || [];
   return members.map(member => ({
     title: member.name,
     description: member.email,
@@ -88,7 +88,7 @@ async function createMemberResults(membersPromise, orgId) {
 }
 
 async function createLegacyIntegrationResults(pluginsPromise, orgId) {
-  let plugins = (await pluginsPromise) || [];
+  const plugins = (await pluginsPromise) || [];
   return plugins.map(plugin => ({
     title: `${plugin.name} (Legacy)`,
     description: plugin.description,
@@ -100,7 +100,7 @@ async function createLegacyIntegrationResults(pluginsPromise, orgId) {
 }
 
 async function createIntegrationResults(integrationsPromise, orgId) {
-  let {providers} = (await integrationsPromise) || {};
+  const {providers} = (await integrationsPromise) || {};
   return (
     (providers &&
       providers.map(provider => ({
@@ -122,10 +122,10 @@ async function createIntegrationResults(integrationsPromise, orgId) {
 }
 
 async function createShortIdLookupResult(shortIdLookupPromise) {
-  let shortIdLookup = await shortIdLookupPromise;
+  const shortIdLookup = await shortIdLookupPromise;
   if (!shortIdLookup) return null;
 
-  let issue = shortIdLookup && shortIdLookup.group;
+  const issue = shortIdLookup && shortIdLookup.group;
   return {
     item: {
       title: `${(issue && issue.metadata && issue.metadata.type) ||
@@ -140,10 +140,10 @@ async function createShortIdLookupResult(shortIdLookupPromise) {
 }
 
 async function createEventIdLookupResult(eventIdLookupPromise) {
-  let eventIdLookup = await eventIdLookupPromise;
+  const eventIdLookup = await eventIdLookupPromise;
   if (!eventIdLookup) return null;
 
-  let event = eventIdLookup && eventIdLookup.event;
+  const event = eventIdLookup && eventIdLookup.event;
   return {
     item: {
       title: `${(event && event.metadata && event.metadata.type) || t('Event')}`,
@@ -209,8 +209,8 @@ class ApiSource extends React.Component {
 
   // Debounced method to handle querying all API endpoints (when necessary)
   doSearch = debounce(async query => {
-    let {params, organization} = this.props;
-    let orgId = (params && params.orgId) || (organization && organization.slug);
+    const {params, organization} = this.props;
+    const orgId = (params && params.orgId) || (organization && organization.slug);
     let searchUrls = ['/organizations/'];
     let directUrls = [];
 
@@ -231,7 +231,7 @@ class ApiSource extends React.Component {
       ];
     }
 
-    let searchRequests = searchUrls.map(url =>
+    const searchRequests = searchUrls.map(url =>
       this.api
         .requestPromise(url, {
           query: {
@@ -247,7 +247,7 @@ class ApiSource extends React.Component {
         )
     );
 
-    let directRequests = directUrls.map(url => {
+    const directRequests = directUrls.map(url => {
       if (!url) return Promise.resolve(null);
 
       return this.api.requestPromise(url).then(
@@ -280,17 +280,24 @@ class ApiSource extends React.Component {
 
   // Handles a list of search request promises, and then updates state with response objects
   async handleSearchRequest(searchRequests, directRequests) {
-    let {searchOptions} = this.props;
+    const {searchOptions} = this.props;
 
     // Note we don't wait for all requests to resolve here (e.g. `await Promise.all(reqs)`)
     // so that we can start processing before all API requests are resolved
     //
     // This isn't particularly helpful in its current form because we still wait for all requests to finish before
     // updating state, but you could potentially optimize rendering direct results before all requests are finished.
-    let [organizations, projects, teams, members, plugins, integrations] = searchRequests;
-    let [shortIdLookup, eventIdLookup] = directRequests;
-
-    let [searchResults, directResults] = await Promise.all([
+    const [
+      organizations,
+      projects,
+      teams,
+      members,
+      plugins,
+      integrations,
+    ] = searchRequests;
+    const [shortIdLookup, eventIdLookup] = directRequests;
+
+    const [searchResults, directResults] = await Promise.all([
       this.getSearchableResults([
         organizations,
         projects,
@@ -302,7 +309,7 @@ class ApiSource extends React.Component {
       this.getDirectResults([shortIdLookup, eventIdLookup]),
     ]);
 
-    let fuzzy = createFuzzySearch(searchResults, {
+    const fuzzy = createFuzzySearch(searchResults, {
       ...searchOptions,
       keys: ['title', 'description'],
     });
@@ -317,10 +324,10 @@ class ApiSource extends React.Component {
 
   // Process API requests that create result objects that should be searchable
   async getSearchableResults(requests) {
-    let {params, organization} = this.props;
-    let orgId = (params && params.orgId) || (organization && organization.slug);
-    let [organizations, projects, teams, members, plugins, integrations] = requests;
-    let searchResults = flatten(
+    const {params, organization} = this.props;
+    const orgId = (params && params.orgId) || (organization && organization.slug);
+    const [organizations, projects, teams, members, plugins, integrations] = requests;
+    const searchResults = flatten(
       await Promise.all([
         createOrganizationResults(organizations),
         createProjectResults(projects, orgId),
@@ -337,9 +344,9 @@ class ApiSource extends React.Component {
   // Create result objects from API requests that do not require fuzzy search
   // i.e. these responses only return 1 object or they should always be displayed regardless of query input
   async getDirectResults(requests, query) {
-    let [shortIdLookup, eventIdLookup] = requests;
+    const [shortIdLookup, eventIdLookup] = requests;
 
-    let directResults = (await Promise.all([
+    const directResults = (await Promise.all([
       createShortIdLookupResult(shortIdLookup),
       createEventIdLookupResult(eventIdLookup),
     ])).filter(result => !!result);
@@ -350,9 +357,9 @@ class ApiSource extends React.Component {
   }
 
   render() {
-    let {children, query} = this.props;
-    let {fuzzy, directResults} = this.state;
-    let results = (fuzzy && fuzzy.search(query)) || null;
+    const {children, query} = this.props;
+    const {fuzzy, directResults} = this.state;
+    const results = (fuzzy && fuzzy.search(query)) || null;
 
     return children({
       isLoading: this.state.loading,
diff --git a/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx b/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
index b479c972f3..a398de8548 100644
--- a/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/commandSource.jsx
@@ -84,9 +84,9 @@ class CommandSource extends React.Component {
   }
 
   render() {
-    let {searchMap, query, isSuperuser, children} = this.props;
+    const {searchMap, query, isSuperuser, children} = this.props;
 
-    let results =
+    const results =
       (this.state.fuzzy &&
         this.state.fuzzy
           .search(query)
diff --git a/src/sentry/static/sentry/app/components/search/sources/formSource.jsx b/src/sentry/static/sentry/app/components/search/sources/formSource.jsx
index fdc6df402e..6ddb17d93e 100644
--- a/src/sentry/static/sentry/app/components/search/sources/formSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/formSource.jsx
@@ -59,9 +59,9 @@ class FormSource extends React.Component {
   }
 
   render() {
-    let {searchMap, query, params, children} = this.props;
+    const {searchMap, query, params, children} = this.props;
 
-    let results =
+    const results =
       searchMap && this.state.fuzzy
         ? this.state.fuzzy.search(query).map(({item, ...rest}) => ({
             item: {
diff --git a/src/sentry/static/sentry/app/components/search/sources/index.jsx b/src/sentry/static/sentry/app/components/search/sources/index.jsx
index 12782c7fef..7d98008f9a 100644
--- a/src/sentry/static/sentry/app/components/search/sources/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/index.jsx
@@ -18,17 +18,17 @@ class SearchSources extends React.Component {
 
   // `allSources` will be an array of all result objects from each source
   renderResults(allSources) {
-    let {children} = this.props;
+    const {children} = this.props;
 
     // loading means if any result has `isLoading` OR any result is null
-    let isLoading = !!allSources.find(arg => arg.isLoading || arg.results === null);
+    const isLoading = !!allSources.find(arg => arg.isLoading || arg.results === null);
 
-    let foundResults = isLoading
+    const foundResults = isLoading
       ? []
       : flatten(allSources.map(({results}) => results || [])).sort(
           (a, b) => a.score - b.score
         );
-    let hasAnyResults = !!foundResults.length;
+    const hasAnyResults = !!foundResults.length;
 
     return children({
       isLoading,
@@ -41,7 +41,7 @@ class SearchSources extends React.Component {
     if (idx >= sources.length) {
       return this.renderResults(results);
     }
-    let Source = sources[idx];
+    const Source = sources[idx];
     return (
       <Source {...this.props}>
         {args => {
@@ -56,7 +56,7 @@ class SearchSources extends React.Component {
   }
 
   render() {
-    let {sources} = this.props;
+    const {sources} = this.props;
     return this.renderSources(sources, new Array(sources.length), 0);
   }
 }
diff --git a/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx b/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
index 37a40c84f3..d40bb849d6 100644
--- a/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
@@ -70,7 +70,7 @@ class RouteSource extends React.Component {
   }
 
   async createSearch() {
-    let {project, organization} = this.props;
+    const {project, organization} = this.props;
     const searchMap = flattenDepth(
       [
         mapFunc(accountSettingsNavigation),
@@ -96,9 +96,9 @@ class RouteSource extends React.Component {
   }
 
   render() {
-    let {searchMap, query, params, children} = this.props;
+    const {searchMap, query, params, children} = this.props;
 
-    let results =
+    const results =
       (this.state.fuzzy &&
         this.state.fuzzy.search(query).map(({item, ...rest}) => ({
           item: {
diff --git a/src/sentry/static/sentry/app/components/searchBar.jsx b/src/sentry/static/sentry/app/components/searchBar.jsx
index d89053e09c..bd8f0c8b5f 100644
--- a/src/sentry/static/sentry/app/components/searchBar.jsx
+++ b/src/sentry/static/sentry/app/components/searchBar.jsx
@@ -63,7 +63,7 @@ class SearchBar extends React.PureComponent {
   };
 
   render() {
-    let {className} = this.props;
+    const {className} = this.props;
     return (
       <div className={cx('search', className)}>
         <form className="form-horizontal" onSubmit={this.onSubmit}>
diff --git a/src/sentry/static/sentry/app/components/shareIssue.jsx b/src/sentry/static/sentry/app/components/shareIssue.jsx
index 10fea45c1d..40959d65dd 100644
--- a/src/sentry/static/sentry/app/components/shareIssue.jsx
+++ b/src/sentry/static/sentry/app/components/shareIssue.jsx
@@ -44,8 +44,8 @@ class ShareUrlContainer extends React.Component {
   };
 
   render() {
-    let {isSharing, busy, shareUrl, onConfirming, onCancel, onShare} = this.props;
-    let url = !busy && isSharing ? shareUrl : 'Not shared';
+    const {isSharing, busy, shareUrl, onConfirming, onCancel, onShare} = this.props;
+    const url = !busy && isSharing ? shareUrl : 'Not shared';
 
     return (
       <FlowLayout
@@ -171,7 +171,7 @@ class ShareIssue extends React.Component {
   };
 
   handleShare = () => {
-    let {onShare} = this.props;
+    const {onShare} = this.props;
     this.setState({busy: true}, () => onShare());
     this.hasConfirmModal = false;
   };
@@ -188,11 +188,11 @@ class ShareIssue extends React.Component {
   handleConfirmReshare = () => (this.hasConfirmModal = true);
 
   render() {
-    let {className, isSharing} = this.props;
-    let {busy} = this.state;
-    let cx = classNames('share-issue btn-sm btn btn-default', className);
+    const {className, isSharing} = this.props;
+    const {busy} = this.state;
+    const cx = classNames('share-issue btn-sm btn btn-default', className);
 
-    let shareTitle = 'Share';
+    const shareTitle = 'Share';
 
     // Needs to wrap in an inline block for DropdownLink,
     // or else dropdown icon gets wrapped?
diff --git a/src/sentry/static/sentry/app/components/shortId.jsx b/src/sentry/static/sentry/app/components/shortId.jsx
index 8000626223..f43364b670 100644
--- a/src/sentry/static/sentry/app/components/shortId.jsx
+++ b/src/sentry/static/sentry/app/components/shortId.jsx
@@ -15,7 +15,7 @@ export default class ShortId extends React.Component {
   }
 
   render() {
-    let shortId = this.props.shortId;
+    const shortId = this.props.shortId;
     if (!shortId) {
       return null;
     }
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index 7756b2a743..50ecf56f01 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -120,7 +120,7 @@ const Broadcasts = createReactClass({
   },
 
   markSeen() {
-    let unseenBroadcastIds = this.getUnseenIds();
+    const unseenBroadcastIds = this.getUnseenIds();
     if (unseenBroadcastIds.length === 0) return;
 
     markBroadcastsAsSeen(this.api, unseenBroadcastIds).then(data => {
@@ -134,10 +134,10 @@ const Broadcasts = createReactClass({
   },
 
   render() {
-    let {orientation, collapsed, currentPanel, showPanel, hidePanel} = this.props;
-    let {broadcasts, loading} = this.state;
+    const {orientation, collapsed, currentPanel, showPanel, hidePanel} = this.props;
+    const {broadcasts, loading} = this.state;
 
-    let unseenPosts = this.getUnseenIds();
+    const unseenPosts = this.getUnseenIds();
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
index a9ee27700c..167105ced1 100644
--- a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
@@ -40,7 +40,7 @@ const Incidents = createReactClass({
   },
 
   render() {
-    let {
+    const {
       orientation,
       collapsed,
       currentPanel,
@@ -49,11 +49,11 @@ const Incidents = createReactClass({
       onShowPanel,
     } = this.props;
 
-    let {status} = this.state;
+    const {status} = this.state;
     if (!status) return null;
 
-    let active = currentPanel === 'statusupdate';
-    let isEmpty = !status.incidents || status.incidents.length === 0;
+    const active = currentPanel === 'statusupdate';
+    const isEmpty = !status.incidents || status.incidents.length === 0;
 
     if (isEmpty) return null;
 
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 1e86da2465..45defb5f2b 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -53,7 +53,7 @@ class Sidebar extends React.Component {
   }
 
   componentDidMount() {
-    let {router} = this.props;
+    const {router} = this.props;
     document.body.classList.add('body-sidebar');
     document.addEventListener('click', this.documentClickHandler);
 
@@ -72,8 +72,8 @@ class Sidebar extends React.Component {
   }
 
   componentWillReceiveProps(nextProps) {
-    let {collapsed, location} = this.props;
-    let nextLocation = nextProps.location;
+    const {collapsed, location} = this.props;
+    const nextLocation = nextProps.location;
 
     // Close active panel if we navigated anywhere
     if (nextLocation && location && location.pathname !== nextLocation.pathname) {
@@ -124,7 +124,7 @@ class Sidebar extends React.Component {
   }
 
   toggleSidebar = () => {
-    let {collapsed} = this.props;
+    const {collapsed} = this.props;
 
     if (!collapsed) {
       hideSidebar();
@@ -171,7 +171,7 @@ class Sidebar extends React.Component {
 
       // Handle cmd-click (mac) and meta-click (linux)
       if (evt.metaKey) {
-        let q = queryString.stringify(query);
+        const q = queryString.stringify(query);
         evt.currentTarget.href = `${evt.currentTarget.href}?${q}`;
         return;
       }
@@ -204,22 +204,22 @@ class Sidebar extends React.Component {
   };
 
   render() {
-    let {organization, collapsed} = this.props;
-    let {currentPanel, showPanel, horizontal} = this.state;
-    let config = ConfigStore.getConfig();
-    let user = ConfigStore.get('user');
-    let hasPanel = !!currentPanel;
-    let orientation = horizontal ? 'top' : 'left';
-    let sidebarItemProps = {
+    const {organization, collapsed} = this.props;
+    const {currentPanel, showPanel, horizontal} = this.state;
+    const config = ConfigStore.getConfig();
+    const user = ConfigStore.get('user');
+    const hasPanel = !!currentPanel;
+    const orientation = horizontal ? 'top' : 'left';
+    const sidebarItemProps = {
       orientation,
       collapsed,
       hasPanel,
     };
-    let hasOrganization = !!organization;
+    const hasOrganization = !!organization;
 
-    let hasSentry10 = hasOrganization && new Set(organization.features).has('sentry10');
+    const hasSentry10 = hasOrganization && new Set(organization.features).has('sentry10');
 
-    let projectsSidebarItem = () => (
+    const projectsSidebarItem = () => (
       <SidebarItem
         {...sidebarItemProps}
         index
diff --git a/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx b/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx
index faa133f352..d5bc3ce0f6 100644
--- a/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx
@@ -18,7 +18,7 @@ class OnboardingStatus extends React.Component {
   };
 
   componentDidUpdate(prevProps) {
-    let {currentPanel, org} = this.props;
+    const {currentPanel, org} = this.props;
     if (
       currentPanel !== prevProps.currentPanel &&
       (currentPanel || prevProps.currentPanel == 'todos')
@@ -34,20 +34,20 @@ class OnboardingStatus extends React.Component {
   }
 
   render() {
-    let {collapsed, org, currentPanel, hidePanel, showPanel, onShowPanel} = this.props;
+    const {collapsed, org, currentPanel, hidePanel, showPanel, onShowPanel} = this.props;
     if (typeof org.features === 'undefined' || org.features.indexOf('onboarding') === -1)
       return null;
 
-    let doneTasks = (org.onboardingTasks || []).filter(
+    const doneTasks = (org.onboardingTasks || []).filter(
       task => task.status === 'complete' || task.status === 'skipped'
     );
-    let allDisplayedTasks = TodoList.TASKS.filter(task => task.display);
+    const allDisplayedTasks = TodoList.TASKS.filter(task => task.display);
 
-    let percentage = Math.round(
+    const percentage = Math.round(
       doneTasks.length / allDisplayedTasks.length * 100
     ).toString();
 
-    let style = {
+    const style = {
       height: collapsed ? percentage + '%' : undefined,
       width: collapsed ? undefined : percentage + '%',
     };
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
index f10c0658f1..e8301807d0 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/index.jsx
@@ -42,17 +42,17 @@ const SidebarDropdown = withApi(
     };
 
     render() {
-      let {org, orientation, collapsed, config, user, onClick} = this.props;
-      let hasOrganization = !!org;
-      let hasUser = !!user;
+      const {org, orientation, collapsed, config, user, onClick} = this.props;
+      const hasOrganization = !!org;
+      const hasUser = !!user;
 
       // If there is no org in context, we use an org from `withLatestContext`
       // (which uses an org from organizations index endpoint versus details endpoint)
       // and does not have `access`
-      let hasOrgRead = org && org.access && org.access.indexOf('org:read') > -1;
-      let hasMemberRead = org && org.access && org.access.indexOf('member:read') > -1;
-      let hasTeamRead = org && org.access && org.access.indexOf('team:read') > -1;
-      let canCreateOrg = ConfigStore.get('features').has('organizations:create');
+      const hasOrgRead = org && org.access && org.access.indexOf('org:read') > -1;
+      const hasMemberRead = org && org.access && org.access.indexOf('member:read') > -1;
+      const hasTeamRead = org && org.access && org.access.indexOf('team:read') > -1;
+      const canCreateOrg = ConfigStore.get('features').has('organizations:create');
 
       // Avatar to use: Organization --> user --> Sentry
       const avatar =
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
index 03aea67100..3e74593589 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarDropdown/switchOrganization.jsx
@@ -23,8 +23,8 @@ class SwitchOrganization extends React.Component {
   };
 
   render() {
-    let {organizations, canCreateOrganization} = this.props;
-    let hasOrganizations = organizations && !!organizations.length;
+    const {organizations, canCreateOrganization} = this.props;
+    const hasOrganizations = organizations && !!organizations.length;
 
     return (
       <DropdownMenu isNestedDropdown>
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
index 6102109aee..ed2283776c 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
@@ -39,7 +39,7 @@ class SidebarItem extends React.Component {
   };
 
   handleClick = e => {
-    let {id, onClick} = this.props;
+    const {id, onClick} = this.props;
 
     if (typeof onClick !== 'function') return;
 
@@ -47,7 +47,7 @@ class SidebarItem extends React.Component {
   };
 
   render() {
-    let {
+    const {
       router,
       href,
       to,
@@ -62,13 +62,13 @@ class SidebarItem extends React.Component {
     } = this.props;
 
     // If there is no active panel open and if path is active according to react-router
-    let isActiveRouter =
+    const isActiveRouter =
       (!hasPanel && router && to && location.pathname.startsWith(to)) ||
       // TODO: this won't be necessary once we remove settingsHome
       (label === 'Settings' && location.pathname.startsWith('/settings/'));
 
-    let isTop = orientation === 'top';
-    let placement = isTop ? 'bottom' : 'right';
+    const isTop = orientation === 'top';
+    const placement = isTop ? 'bottom' : 'right';
 
     return (
       <Tooltip
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarMenuItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarMenuItem.jsx
index 2ed749341a..f8c4255f6f 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarMenuItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarMenuItem.jsx
@@ -23,8 +23,8 @@ class SidebarMenuItem extends React.Component {
     external: PropTypes.bool,
   };
   render() {
-    let {children, to, href, ...props} = this.props;
-    let hasMenu = !to && !href;
+    const {children, to, href, ...props} = this.props;
+    const hasMenu = !to && !href;
 
     return (
       <MenuItemLink to={to} href={href} {...props}>
@@ -54,7 +54,7 @@ const MenuItemLink = styled(({to, href, external, ...props}) => {
   }
 
   if (href) {
-    let Component = external ? ExternalLink : Link;
+    const Component = external ? ExternalLink : Link;
     return <Component href={href} {...props} />;
   }
 
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.jsx
index 76541973fa..1fae5ee857 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarOrgSummary.jsx
@@ -11,9 +11,9 @@ class SidebarOrgSummary extends React.Component {
   };
 
   render() {
-    let {organization} = this.props;
-    let projects = organization.projects && organization.projects.length;
-    let extra = [];
+    const {organization} = this.props;
+    const projects = organization.projects && organization.projects.length;
+    const extra = [];
 
     if (projects) {
       extra.push(`${projects} projects`);
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarPanel.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarPanel.jsx
index c9937219f9..e49b76fe2b 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarPanel.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarPanel.jsx
@@ -11,7 +11,7 @@ class SidebarPanel extends React.Component {
   };
 
   render() {
-    let {orientation, collapsed, hidePanel, title, children, ...props} = this.props;
+    const {orientation, collapsed, hidePanel, title, children, ...props} = this.props;
     return (
       <StyledSidebarPanel collapsed={collapsed} orientation={orientation} {...props}>
         <SidebarPanelHeader>
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.jsx
index d719708d92..81dbc67962 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarPanelItem.jsx
@@ -15,7 +15,7 @@ class SidebarPanelItem extends React.Component {
   };
 
   render() {
-    let {hasSeen, title, image, message, link} = this.props;
+    const {hasSeen, title, image, message, link} = this.props;
 
     return (
       <SidebarPanelItemRoot>
diff --git a/src/sentry/static/sentry/app/components/similarScoreCard.jsx b/src/sentry/static/sentry/app/components/similarScoreCard.jsx
index fe446d22d0..fea43df6a8 100644
--- a/src/sentry/static/sentry/app/components/similarScoreCard.jsx
+++ b/src/sentry/static/sentry/app/components/similarScoreCard.jsx
@@ -22,7 +22,7 @@ class SimilarScoreCard extends React.Component {
   };
 
   render() {
-    let {scoreList} = this.props;
+    const {scoreList} = this.props;
 
     if (!scoreList.length) {
       return null;
diff --git a/src/sentry/static/sentry/app/components/similarSpectrum.jsx b/src/sentry/static/sentry/app/components/similarSpectrum.jsx
index 302461a078..fc295114b9 100644
--- a/src/sentry/static/sentry/app/components/similarSpectrum.jsx
+++ b/src/sentry/static/sentry/app/components/similarSpectrum.jsx
@@ -5,7 +5,7 @@ import {t} from 'app/locale';
 
 class SimilarSpectrum extends React.Component {
   render() {
-    let {className} = this.props;
+    const {className} = this.props;
 
     return (
       <div className={className}>
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index 2059ebe607..1c5b00d63b 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -73,7 +73,7 @@ class SmartSearchBar extends React.Component {
    */
   static getLastTermIndex = (query, cursor) => {
     // TODO: work with quoted-terms
-    let cursorOffset = query.slice(cursor).search(/\s|$/);
+    const cursorOffset = query.slice(cursor).search(/\s|$/);
     return cursor + (cursorOffset === -1 ? 0 : cursorOffset);
   };
 
@@ -244,7 +244,7 @@ class SmartSearchBar extends React.Component {
    * with results
    */
   getPredefinedTagValues = function(tag, query, callback) {
-    let values = tag.values.filter(value => value.indexOf(query) > -1);
+    const values = tag.values.filter(value => value.indexOf(query) > -1);
 
     callback(values, tag.key);
   };
@@ -259,11 +259,11 @@ class SmartSearchBar extends React.Component {
       this.blurTimeout = null;
     }
 
-    let cursor = this.getCursorPosition();
+    const cursor = this.getCursorPosition();
     let query = this.state.query;
 
-    let lastTermIndex = SmartSearchBar.getLastTermIndex(query, cursor);
-    let terms = SmartSearchBar.getQueryTerms(query.slice(0, lastTermIndex));
+    const lastTermIndex = SmartSearchBar.getLastTermIndex(query, cursor);
+    const terms = SmartSearchBar.getQueryTerms(query.slice(0, lastTermIndex));
 
     if (
       !terms || // no terms
@@ -271,7 +271,7 @@ class SmartSearchBar extends React.Component {
       (terms.length === 1 && terms[0] === this.props.defaultQuery) || // default term
       /^\s+$/.test(query.slice(cursor - 1, cursor + 1))
     ) {
-      let {defaultSearchItems} = this.props;
+      const {defaultSearchItems} = this.props;
 
       if (!defaultSearchItems.length) {
         // Update searchTerm, otherwise <SearchDropdown> will have wrong state
@@ -292,11 +292,11 @@ class SmartSearchBar extends React.Component {
       });
     }
 
-    let last = terms.pop();
+    const last = terms.pop();
     let autoCompleteItems;
     let matchValue;
     let tagName;
-    let index = last.indexOf(':');
+    const index = last.indexOf(':');
 
     if (index === -1) {
       // No colon present; must still be deciding key
@@ -306,7 +306,7 @@ class SmartSearchBar extends React.Component {
       this.setState({searchTerm: matchValue});
       this.updateAutoCompleteState(autoCompleteItems, matchValue);
     } else {
-      let {supportedTags, prepareQuery} = this.props;
+      const {supportedTags, prepareQuery} = this.props;
 
       // TODO(billy): Better parsing for these examples
       // sentry:release:
@@ -321,7 +321,7 @@ class SmartSearchBar extends React.Component {
 
       // filter existing items immediately, until API can return
       // with actual tag value results
-      let filteredSearchItems = !preparedQuery
+      const filteredSearchItems = !preparedQuery
         ? this.state.searchItems
         : this.state.searchItems.filter(item => item.value.indexOf(preparedQuery) !== -1);
 
@@ -330,7 +330,7 @@ class SmartSearchBar extends React.Component {
         searchItems: filteredSearchItems,
       });
 
-      let tag = supportedTags[tagName];
+      const tag = supportedTags[tagName];
 
       if (!tag) return undefined;
 
@@ -353,10 +353,10 @@ class SmartSearchBar extends React.Component {
   };
 
   updateAutoCompleteState = (searchItems, tagName) => {
-    let {maxSearchItems} = this.props;
+    const {maxSearchItems} = this.props;
 
     searchItems = searchItems.map(item => {
-      let out = {
+      const out = {
         desc: item,
         value: item,
       };
@@ -396,8 +396,8 @@ class SmartSearchBar extends React.Component {
   };
 
   onKeyDown = evt => {
-    let state = this.state;
-    let searchItems = state.searchItems;
+    const state = this.state;
+    const searchItems = state.searchItems;
 
     if (!searchItems.length) return;
 
@@ -422,21 +422,21 @@ class SmartSearchBar extends React.Component {
   };
 
   onAutoComplete = replaceText => {
-    let cursor = this.getCursorPosition();
-    let query = this.state.query;
+    const cursor = this.getCursorPosition();
+    const query = this.state.query;
 
-    let lastTermIndex = SmartSearchBar.getLastTermIndex(query, cursor);
-    let terms = SmartSearchBar.getQueryTerms(query.slice(0, lastTermIndex));
+    const lastTermIndex = SmartSearchBar.getLastTermIndex(query, cursor);
+    const terms = SmartSearchBar.getQueryTerms(query.slice(0, lastTermIndex));
     let newQuery;
 
     // If not postfixed with : (tag value), add trailing space
-    let lastChar = replaceText.charAt(replaceText.length - 1);
+    const lastChar = replaceText.charAt(replaceText.length - 1);
     replaceText += lastChar === ':' || lastChar === '.' ? '' : ' ';
 
     if (!terms) {
       newQuery = replaceText;
     } else {
-      let last = terms.pop();
+      const last = terms.pop();
 
       newQuery = query.slice(0, lastTermIndex); // get text preceding last term
 
@@ -472,7 +472,7 @@ class SmartSearchBar extends React.Component {
   };
 
   render() {
-    let {className, dropdownClassName, disabled} = this.props;
+    const {className, dropdownClassName, disabled} = this.props;
 
     return (
       <div
diff --git a/src/sentry/static/sentry/app/components/splitDiff.jsx b/src/sentry/static/sentry/app/components/splitDiff.jsx
index b1acfc1c76..75ab1c60c8 100644
--- a/src/sentry/static/sentry/app/components/splitDiff.jsx
+++ b/src/sentry/static/sentry/app/components/splitDiff.jsx
@@ -21,18 +21,18 @@ class SplitDiff extends React.Component {
   };
 
   render() {
-    let {className, type, base, target} = this.props;
-    let diffFn = diffFnMap[type];
+    const {className, type, base, target} = this.props;
+    const diffFn = diffFnMap[type];
 
     if (typeof diffFn !== 'function') return null;
 
-    let baseLines = base.split('\n');
-    let targetLines = target.split('\n');
-    let [largerArray] =
+    const baseLines = base.split('\n');
+    const targetLines = target.split('\n');
+    const [largerArray] =
       baseLines.length > targetLines.length
         ? [baseLines, targetLines]
         : [targetLines, baseLines];
-    let results = largerArray.map((line, index) =>
+    const results = largerArray.map((line, index) =>
       diffFn(baseLines[index] || '', targetLines[index] || '', {newlineIsToken: true})
     );
 
@@ -40,8 +40,8 @@ class SplitDiff extends React.Component {
       <SplitTable className={className}>
         <SplitBody>
           {results.map((line, j) => {
-            let highlightAdded = line.find(result => result.added);
-            let highlightRemoved = line.find(result => result.removed);
+            const highlightAdded = line.find(result => result.added);
+            const highlightRemoved = line.find(result => result.removed);
 
             return (
               <tr key={j}>
diff --git a/src/sentry/static/sentry/app/components/splitLayout.jsx b/src/sentry/static/sentry/app/components/splitLayout.jsx
index 5ae11b43f9..f7a1bb88d0 100644
--- a/src/sentry/static/sentry/app/components/splitLayout.jsx
+++ b/src/sentry/static/sentry/app/components/splitLayout.jsx
@@ -5,18 +5,18 @@ import SpreadLayout from 'app/components/spreadLayout';
 
 // Flexbox, use when you want your children to be equal sizes
 const SplitLayout = ({children, className, responsive, splitWidth, ...props}) => {
-  let cx = classNames('split-layout', className, {
+  const cx = classNames('split-layout', className, {
     'allow-responsive': responsive,
   });
   let childCount = 0;
-  let totalChildren = React.Children.count(children);
+  const totalChildren = React.Children.count(children);
 
   return (
     <SpreadLayout {...props} className={cx}>
       {React.Children.map(children, child => {
-        let childProps = (child && child.props) || {};
+        const childProps = (child && child.props) || {};
         childCount++;
-        let isLastChild = childCount === totalChildren;
+        const isLastChild = childCount === totalChildren;
 
         return React.cloneElement(child, {
           style: {
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index bd63bddef5..aaa8eee382 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -112,7 +112,7 @@ class StackedBarChart extends React.Component {
   };
 
   pointsToSeries = points => {
-    let series = [];
+    const series = [];
     points.forEach((p, pIdx) => {
       p.y.forEach((y, yIdx) => {
         if (!series[yIdx]) {
@@ -125,7 +125,7 @@ class StackedBarChart extends React.Component {
   };
 
   pointIndex = series => {
-    let points = {};
+    const points = {};
     series.forEach(s => {
       s.data.forEach(p => {
         if (!points[p.x]) {
@@ -138,20 +138,20 @@ class StackedBarChart extends React.Component {
   };
 
   use24Hours() {
-    let user = ConfigStore.get('user');
-    let options = user ? user.options : {};
+    const user = ConfigStore.get('user');
+    const options = user ? user.options : {};
     return options.clock24Hours;
   }
 
   floatFormat(number, places) {
-    let multi = Math.pow(10, places);
+    const multi = Math.pow(10, places);
     return parseInt(number * multi, 10) / multi;
   }
 
   timeLabelAsHour(point) {
-    let timeMoment = moment(point.x * 1000);
-    let nextMoment = timeMoment.clone().add(59, 'minute');
-    let format = this.use24Hours() ? 'HH:mm' : 'LT';
+    const timeMoment = moment(point.x * 1000);
+    const nextMoment = timeMoment.clone().add(59, 'minute');
+    const format = this.use24Hours() ? 'HH:mm' : 'LT';
 
     return (
       '<span>' +
@@ -165,15 +165,15 @@ class StackedBarChart extends React.Component {
   }
 
   timeLabelAsDay(point) {
-    let timeMoment = moment(point.x * 1000);
+    const timeMoment = moment(point.x * 1000);
 
     return `<span>${timeMoment.format('LL')}</span>`;
   }
 
   timeLabelAsRange(interval, point) {
-    let timeMoment = moment(point.x * 1000);
-    let nextMoment = timeMoment.clone().add(interval - 1, 'second');
-    let format = this.use24Hours() ? 'MMM Do, HH:mm' : 'MMM Do, h:mm a';
+    const timeMoment = moment(point.x * 1000);
+    const nextMoment = timeMoment.clone().add(interval - 1, 'second');
+    const format = this.use24Hours() ? 'MMM Do, HH:mm' : 'MMM Do, h:mm a';
 
     return (
       '<span>' +
@@ -186,7 +186,7 @@ class StackedBarChart extends React.Component {
   }
 
   timeLabelAsFull(point) {
-    let timeMoment = moment(point.x * 1000);
+    const timeMoment = moment(point.x * 1000);
     return timeMoment.format('lll');
   }
 
@@ -213,13 +213,13 @@ class StackedBarChart extends React.Component {
   }
 
   renderMarker(marker, index, pointWidth) {
-    let timeLabel = moment(marker.x * 1000).format('lll');
-    let title =
+    const timeLabel = moment(marker.x * 1000).format('lll');
+    const title =
       '<div style="width:130px">' + marker.label + '<br/>' + timeLabel + '</div>';
 
     // example key: m-last-seen-22811123, m-first-seen-228191
-    let key = ['m', marker.className, marker.x].join('-');
-    let markerOffset = marker.offset || 0;
+    const key = ['m', marker.className, marker.x].join('-');
+    const markerOffset = marker.offset || 0;
 
     return (
       <Tooltip
@@ -250,8 +250,8 @@ class StackedBarChart extends React.Component {
   }
 
   renderTooltip = (point, pointIdx) => {
-    let timeLabel = this.getTimeLabel(point);
-    let totalY = point.y.reduce((a, b) => a + b);
+    const timeLabel = this.getTimeLabel(point);
+    const totalY = point.y.reduce((a, b) => a + b);
     let title =
       '<div style="width:130px">' +
       `<div class="time-label">${timeLabel}</div>` +
@@ -261,7 +261,7 @@ class StackedBarChart extends React.Component {
         .label}</div>`;
     }
     point.y.forEach((y, i) => {
-      let s = this.state.series[i];
+      const s = this.state.series[i];
       if (s.label) {
         title += `<div><span style="color:${s.color}">${s.label}:</span> ${(y || 0
         ).toLocaleString()}</div>`;
@@ -271,26 +271,26 @@ class StackedBarChart extends React.Component {
   };
 
   getMinHeight(index, pointLength) {
-    let {minHeights} = this.props;
+    const {minHeights} = this.props;
     return minHeights && (minHeights[index] || minHeights[index] == 0)
       ? this.props.minHeights[index]
       : 1;
   }
 
   renderChartColumn(point, maxval, pointWidth, index, totalPoints) {
-    let totalY = point.y.reduce((a, b) => a + b);
-    let totalPct = totalY / maxval;
+    const totalY = point.y.reduce((a, b) => a + b);
+    const totalPct = totalY / maxval;
     // we leave a little extra space for bars with min-heights.
-    let maxPercentage = 99;
+    const maxPercentage = 99;
 
     let prevPct = 0;
-    let pts = point.y.map((y, i) => {
-      let pct = Math.max(
+    const pts = point.y.map((y, i) => {
+      const pct = Math.max(
         totalY && this.floatFormat(y / totalY * totalPct * maxPercentage, 2),
         this.getMinHeight(i, point.y.length)
       );
 
-      let pt = (
+      const pt = (
         <rect
           key={i}
           x={index * pointWidth + '%'}
@@ -308,8 +308,8 @@ class StackedBarChart extends React.Component {
       return pt;
     });
 
-    let pointIdx = point.x;
-    let tooltipFunc = this.props.tooltip || this.renderTooltip;
+    const pointIdx = point.x;
+    const tooltipFunc = this.props.tooltip || this.renderTooltip;
 
     return (
       <Tooltip
@@ -331,19 +331,22 @@ class StackedBarChart extends React.Component {
   }
 
   renderChart() {
-    let {pointIndex, series} = this.state;
-    let totalPoints = Math.max(...series.map(s => s.data.length));
+    const {pointIndex, series} = this.state;
+    const totalPoints = Math.max(...series.map(s => s.data.length));
     // we expand the graph just a hair beyond 100% prevent a subtle white line on the edge
-    let nudge = 0.1;
-    let pointWidth = this.floatFormat((100.0 + this.props.gap + nudge) / totalPoints, 2);
+    const nudge = 0.1;
+    const pointWidth = this.floatFormat(
+      (100.0 + this.props.gap + nudge) / totalPoints,
+      2
+    );
 
-    let maxval = this.maxPointValue();
-    let markers = this.props.markers.slice();
+    const maxval = this.maxPointValue();
+    const markers = this.props.markers.slice();
 
     // group points, then resort
-    let points = Object.keys(pointIndex)
+    const points = Object.keys(pointIndex)
       .map(k => {
-        let p = pointIndex[k];
+        const p = pointIndex[k];
         return {x: p.x, y: p.y};
       })
       .sort((a, b) => {
@@ -354,8 +357,8 @@ class StackedBarChart extends React.Component {
       return a.x - b.x;
     });
 
-    let children = [];
-    let markerChildren = [];
+    const children = [];
+    const markerChildren = [];
     points.forEach((point, index) => {
       while (markers.length && markers[0].x <= point.x) {
         markerChildren.push(this.renderMarker(markers.shift(), index, pointWidth));
@@ -383,9 +386,9 @@ class StackedBarChart extends React.Component {
   }
 
   render() {
-    let {className, style, height, width} = this.props;
-    let figureClass = [className, 'barchart'].join(' ');
-    let maxval = this.maxPointValue();
+    const {className, style, height, width} = this.props;
+    const figureClass = [className, 'barchart'].join(' ');
+    const maxval = this.maxPointValue();
 
     return (
       <StyledFigure className={figureClass} style={{height, width, ...style}}>
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 5f7e77539a..1b529fc4a8 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -69,8 +69,8 @@ const StreamGroup = createReactClass({
     if (!itemIds.has(this.props.id)) {
       return;
     }
-    let id = this.props.id;
-    let data = GroupStore.get(id);
+    const id = this.props.id;
+    const data = GroupStore.get(id);
     this.setState({
       data,
     });
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 0f6afef30c..2448749fa7 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -19,17 +19,17 @@ class GroupChart extends React.Component {
     // Sometimes statsPeriod updates before graph data has been
     // pulled from server / propagated down to components ...
     // don't update until data is available
-    let {data, statsPeriod} = nextProps;
+    const {data, statsPeriod} = nextProps;
     return data.hasOwnProperty(statsPeriod);
   }
 
   render() {
-    let stats = this.props.statsPeriod
+    const stats = this.props.statsPeriod
       ? this.props.data.stats[this.props.statsPeriod]
       : null;
     if (!stats || !stats.length) return null;
 
-    let chartData = stats.map(point => {
+    const chartData = stats.map(point => {
       return {x: point[0], y: point[1]};
     });
 
diff --git a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
index e64f53613e..85477acc8d 100644
--- a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
@@ -34,7 +34,7 @@ const GroupCheckBox = createReactClass({
   },
 
   onSelectedGroupChange() {
-    let isSelected = SelectedGroupStore.isSelected(this.props.id);
+    const isSelected = SelectedGroupStore.isSelected(this.props.id);
     if (isSelected !== this.state.isSelected) {
       this.setState({
         isSelected,
@@ -43,7 +43,7 @@ const GroupCheckBox = createReactClass({
   },
 
   onSelect() {
-    let id = this.props.id;
+    const id = this.props.id;
     SelectedGroupStore.toggleSelect(id);
   },
 
diff --git a/src/sentry/static/sentry/app/components/stream/processingIssueHint.jsx b/src/sentry/static/sentry/app/components/stream/processingIssueHint.jsx
index 9325d174b3..a8be3809b4 100644
--- a/src/sentry/static/sentry/app/components/stream/processingIssueHint.jsx
+++ b/src/sentry/static/sentry/app/components/stream/processingIssueHint.jsx
@@ -20,10 +20,10 @@ class ProcessingIssueHint extends React.Component {
   };
 
   render() {
-    let {orgId, projectId, issue, showProject} = this.props;
-    let link = `/settings/${orgId}/${projectId}/processing-issues/`;
+    const {orgId, projectId, issue, showProject} = this.props;
+    const link = `/settings/${orgId}/${projectId}/processing-issues/`;
     let showButton = false;
-    let className = {
+    const className = {
       'processing-issues': true,
       alert: true,
     };
diff --git a/src/sentry/static/sentry/app/components/strictClick.jsx b/src/sentry/static/sentry/app/components/strictClick.jsx
index 22303a9866..96d626b87e 100644
--- a/src/sentry/static/sentry/app/components/strictClick.jsx
+++ b/src/sentry/static/sentry/app/components/strictClick.jsx
@@ -35,9 +35,9 @@ class StrictClick extends React.PureComponent {
     // Click happens if mouse down/up in same element - click will
     // not fire if either initial mouse down OR final ouse up occurs in
     // different element
-    let {startCoords} = this.state;
-    let deltaX = Math.abs(evt.screenX - startCoords.x);
-    let deltaY = Math.abs(evt.screenY - startCoords.y);
+    const {startCoords} = this.state;
+    const deltaX = Math.abs(evt.screenX - startCoords.x);
+    const deltaY = Math.abs(evt.screenY - startCoords.y);
 
     // If mouse hasn't moved more than 10 pixels in either Y
     // or X direction, fire onClick
diff --git a/src/sentry/static/sentry/app/components/switch.jsx b/src/sentry/static/sentry/app/components/switch.jsx
index d94c17005f..012407d66c 100644
--- a/src/sentry/static/sentry/app/components/switch.jsx
+++ b/src/sentry/static/sentry/app/components/switch.jsx
@@ -17,7 +17,7 @@ class Switch extends React.Component {
   };
 
   render() {
-    let {size, isActive, isLoading, isDisabled, toggle, id, className} = this.props;
+    const {size, isActive, isLoading, isDisabled, toggle, id, className} = this.props;
 
     return (
       <SwitchContainer
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index 42dbd23ae5..6bb5d6fa8c 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -53,7 +53,7 @@ class TimeSince extends React.PureComponent {
   };
 
   getRelativeDate = () => {
-    let date = TimeSince.getDateObj(this.props.date);
+    const date = TimeSince.getDateObj(this.props.date);
     if (!this.props.suffix) {
       return moment(date).fromNow(true);
     } else if (this.props.suffix === 'ago') {
@@ -66,10 +66,10 @@ class TimeSince extends React.PureComponent {
   };
 
   render() {
-    let date = TimeSince.getDateObj(this.props.date);
-    let user = ConfigStore.get('user');
-    let options = user ? user.options : {};
-    let format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
+    const date = TimeSince.getDateObj(this.props.date);
+    const user = ConfigStore.get('user');
+    const options = user ? user.options : {};
+    const format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
     return (
       <time
         dateTime={date.toISOString()}
diff --git a/src/sentry/static/sentry/app/components/tooltip.jsx b/src/sentry/static/sentry/app/components/tooltip.jsx
index 0c0e5fcf2c..eb5c217656 100644
--- a/src/sentry/static/sentry/app/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/tooltip.jsx
@@ -17,7 +17,7 @@ class Tooltip extends React.Component {
   };
 
   componentWillReceiveProps(newProps) {
-    let {disabled} = this.props;
+    const {disabled} = this.props;
     if (newProps.disabled && !disabled) {
       this.removeTooltips(this.ref);
     } else if (!newProps.disabled && disabled) {
@@ -50,8 +50,8 @@ class Tooltip extends React.Component {
   attachTooltips = ref => {
     this.$ref = $(ReactDOM.findDOMNode(ref));
 
-    let {title, tooltipOptions} = this.props;
-    let options =
+    const {title, tooltipOptions} = this.props;
+    const options =
       typeof tooltipOptions === 'function'
         ? tooltipOptions.call(this)
         : tooltipOptions || {};
@@ -67,7 +67,7 @@ class Tooltip extends React.Component {
   removeTooltips = ref => {
     this.$ref = $(ReactDOM.findDOMNode(ref));
 
-    let {tooltipOptions} = this.props;
+    const {tooltipOptions} = this.props;
 
     this.$ref
       .tooltip('destroy') // destroy tooltips on parent ...
@@ -78,7 +78,7 @@ class Tooltip extends React.Component {
   };
 
   render() {
-    let {
+    const {
       className,
       title,
       children,
diff --git a/src/sentry/static/sentry/app/components/truncate.jsx b/src/sentry/static/sentry/app/components/truncate.jsx
index 4a91bcbe83..1da5b18eee 100644
--- a/src/sentry/static/sentry/app/components/truncate.jsx
+++ b/src/sentry/static/sentry/app/components/truncate.jsx
@@ -21,7 +21,7 @@ class Truncate extends React.Component {
   }
 
   onFocus = e => {
-    let {value, maxLength} = this.props;
+    const {value, maxLength} = this.props;
     if (value.length <= maxLength) return;
     this.setState({isExpanded: true});
   };
@@ -31,8 +31,8 @@ class Truncate extends React.Component {
   };
 
   render() {
-    let {leftTrim, maxLength, value} = this.props;
-    let isTruncated = value.length > maxLength;
+    const {leftTrim, maxLength, value} = this.props;
+    const isTruncated = value.length > maxLength;
     let shortValue = '';
 
     if (isTruncated) {
diff --git a/src/sentry/static/sentry/app/components/u2fContainer.jsx b/src/sentry/static/sentry/app/components/u2fContainer.jsx
index 97a254ef75..554bb1fa57 100644
--- a/src/sentry/static/sentry/app/components/u2fContainer.jsx
+++ b/src/sentry/static/sentry/app/components/u2fContainer.jsx
@@ -31,7 +31,7 @@ class U2fContainer extends React.Component {
   }
 
   render() {
-    let {className, authenticators} = this.state;
+    const {className, authenticators} = this.state;
     if (authenticators && authenticators.length) {
       return (
         <div className={className}>
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index a313a08a8e..3fd867b7f7 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -56,7 +56,7 @@ class U2fInterface extends React.Component {
     if (this.props.flowMode === 'sign') {
       promise = u2f.sign(this.props.challengeData.authenticateRequests);
     } else if (this.props.flowMode === 'enroll') {
-      let {registerRequests, authenticateRequests} = this.props.challengeData;
+      const {registerRequests, authenticateRequests} = this.props.challengeData;
       promise = u2f.register(registerRequests, authenticateRequests);
     } else {
       throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);
@@ -68,8 +68,8 @@ class U2fInterface extends React.Component {
             hasBeenTapped: true,
           },
           () => {
-            let u2fResponse = JSON.stringify(data);
-            let challenge = JSON.stringify(this.props.challengeData);
+            const u2fResponse = JSON.stringify(data);
+            const challenge = JSON.stringify(this.props.challengeData);
 
             // eslint-disable-next-line react/no-direct-mutation-state
             this.state.responseElement.value = u2fResponse;
@@ -162,9 +162,9 @@ class U2fInterface extends React.Component {
   };
 
   renderFailure = () => {
-    let {deviceFailure} = this.state;
-    let supportMail = ConfigStore.get('supportEmail');
-    let support = supportMail ? (
+    const {deviceFailure} = this.state;
+    const supportMail = ConfigStore.get('supportEmail');
+    const support = supportMail ? (
       <a href={'mailto:' + supportMail}>{supportMail}</a>
     ) : (
       <span>{t('Support')}</span>
@@ -214,7 +214,7 @@ class U2fInterface extends React.Component {
   };
 
   renderPrompt = () => {
-    let {style} = this.props;
+    const {style} = this.props;
     return (
       <div
         style={style}
@@ -241,7 +241,7 @@ class U2fInterface extends React.Component {
   };
 
   render() {
-    let {isSupported} = this.state;
+    const {isSupported} = this.state;
     // if we are still waiting for the browser to tell us if we can do u2f
     // this will be null.
     if (isSupported === null) {
diff --git a/src/sentry/static/sentry/app/components/u2fsign.jsx b/src/sentry/static/sentry/app/components/u2fsign.jsx
index 61d08cf099..f3c18f21e5 100644
--- a/src/sentry/static/sentry/app/components/u2fsign.jsx
+++ b/src/sentry/static/sentry/app/components/u2fsign.jsx
@@ -25,8 +25,8 @@ class U2fSign extends React.Component {
   };
 
   render() {
-    let {displayMode, ...props} = this.props;
-    let flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';
+    const {displayMode, ...props} = this.props;
+    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';
     return (
       <U2fInterface
         {...props}
diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.jsx b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
index 0f98474dc9..9a9b5311bb 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.jsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
@@ -45,13 +45,13 @@ const VersionHoverCard = createReactClass({
   },
 
   fetchData() {
-    let {orgId, projectId, version} = this.props;
-    let done = _.after(3, () => {
+    const {orgId, projectId, version} = this.props;
+    const done = _.after(3, () => {
       this.setState({loading: false});
     });
 
     // releases
-    let releasePath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
+    const releasePath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(
       version
     )}/`;
     this.api.request(releasePath, {
@@ -70,7 +70,7 @@ const VersionHoverCard = createReactClass({
     });
 
     // repos
-    let repoPath = `/organizations/${orgId}/repos/`;
+    const repoPath = `/organizations/${orgId}/repos/`;
     this.api.request(repoPath, {
       method: 'GET',
       success: data => {
@@ -87,7 +87,7 @@ const VersionHoverCard = createReactClass({
     });
 
     //deploys
-    let deployPath = `/organizations/${orgId}/releases/${encodeURIComponent(
+    const deployPath = `/organizations/${orgId}/releases/${encodeURIComponent(
       version
     )}/deploys/`;
     this.api.request(deployPath, {
@@ -114,7 +114,7 @@ const VersionHoverCard = createReactClass({
   },
 
   getRepoLink() {
-    let {orgId} = this.props;
+    const {orgId} = this.props;
     return {
       body: (
         <Box p={2} className="align-center">
@@ -132,13 +132,13 @@ const VersionHoverCard = createReactClass({
   },
 
   getBody() {
-    let {release, deploys} = this.state;
-    let {version} = this.props;
-    let lastCommit = release.lastCommit;
-    let shortVersion = getShortVersion(version);
+    const {release, deploys} = this.state;
+    const {version} = this.props;
+    const lastCommit = release.lastCommit;
+    const shortVersion = getShortVersion(version);
 
-    let recentDeploysByEnviroment = deploys.reduce(function(dbe, deploy) {
-      let {dateFinished, environment} = deploy;
+    const recentDeploysByEnviroment = deploys.reduce(function(dbe, deploy) {
+      const {dateFinished, environment} = deploy;
       if (!dbe.hasOwnProperty(environment)) {
         dbe[environment] = dateFinished;
       }
@@ -184,7 +184,7 @@ const VersionHoverCard = createReactClass({
                 <h6 className="deploy-heading">{t('Deploys')}</h6>
               </div>
               {mostRecentDeploySlice.map((env, idx) => {
-                let dateFinished = recentDeploysByEnviroment[env];
+                const dateFinished = recentDeploysByEnviroment[env];
                 return (
                   <div className="deploy" key={idx}>
                     <div className="deploy-meta" style={{position: 'relative'}}>
@@ -226,7 +226,7 @@ const VersionHoverCard = createReactClass({
   },
 
   render() {
-    let {loading, error, hasRepos} = this.state;
+    const {loading, error, hasRepos} = this.state;
     let header = null;
     let body = loading ? (
       <LoadingIndicator mini={true} />
@@ -235,7 +235,7 @@ const VersionHoverCard = createReactClass({
     ) : null;
 
     if (!loading && !error) {
-      let renderObj = hasRepos ? this.getBody() : this.getRepoLink();
+      const renderObj = hasRepos ? this.getBody() : this.getRepoLink();
       header = renderObj.header;
       body = renderObj.body;
     }
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 8186d9791f..24dacd81bc 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -15,7 +15,7 @@ export const route = '/settings/:orgId/:projectId/';
 
 const getResolveAgeAllowedValues = () => {
   let i = 0;
-  let values = [];
+  const values = [];
   while (i <= 720) {
     values.push(i);
     if (i < 12) {
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index e257d94a81..9ab798ae04 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -90,8 +90,8 @@ if (window.__initialData) {
 // these get exported to a global variable, which is important as its the only
 // way we can call into scoped objects
 
-let render = Component => {
-  let rootEl = document.getElementById('blk_router');
+const render = Component => {
+  const rootEl = document.getElementById('blk_router');
   ReactDOM.render(<Component />, rootEl);
 };
 
@@ -99,7 +99,7 @@ let render = Component => {
 // zxcvbn, a relatively byte-heavy password strength estimation library. Load
 // it on demand.
 async function loadPasswordStrength(callback) {
-  let module = await import(/* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength');
+  const module = await import(/* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength');
   callback(module);
 }
 
diff --git a/src/sentry/static/sentry/app/locale.jsx b/src/sentry/static/sentry/app/locale.jsx
index dc20d7f1ab..b287b82b8c 100644
--- a/src/sentry/static/sentry/app/locale.jsx
+++ b/src/sentry/static/sentry/app/locale.jsx
@@ -7,7 +7,7 @@ import {getTranslations} from 'app/translations';
 
 let LOCALE_DEBUG = false;
 
-let sessionStorage = window.sessionStorage;
+const sessionStorage = window.sessionStorage;
 if (sessionStorage && sessionStorage.getItem('localeDebug') == '1') {
   LOCALE_DEBUG = true;
 }
@@ -25,7 +25,7 @@ export function setLocaleDebug(value) {
 let i18n = null;
 
 export function setLocale(locale) {
-  let translations = getTranslations(locale);
+  const translations = getTranslations(locale);
   i18n = new Jed({
     domain: 'sentry',
     missing_key_callback: function(key) {},
@@ -38,7 +38,7 @@ export function setLocale(locale) {
 setLocale('en');
 
 function formatForReact(formatString, args) {
-  let rv = [];
+  const rv = [];
   let cursor = 0;
 
   // always re-parse, do not cache, because we change the match
@@ -86,17 +86,17 @@ function argsInvolveReact(args) {
 }
 
 export function parseComponentTemplate(string) {
-  let rv = {};
+  const rv = {};
 
   function process(startPos, group, inGroup) {
-    let regex = /\[(.*?)(:|\])|\]/g;
+    const regex = /\[(.*?)(:|\])|\]/g;
     let match;
-    let buf = [];
+    const buf = [];
     let satisfied = false;
 
     let pos = (regex.lastIndex = startPos);
     while ((match = regex.exec(string)) !== null) {
-      let substr = string.substr(pos, match.index - pos);
+      const substr = string.substr(pos, match.index - pos);
       if (substr !== '') {
         buf.push(substr);
       }
@@ -121,7 +121,7 @@ export function parseComponentTemplate(string) {
 
     let endPos = regex.lastIndex;
     if (!satisfied) {
-      let rest = string.substr(pos);
+      const rest = string.substr(pos);
       if (rest) {
         buf.push(rest);
       }
@@ -140,7 +140,7 @@ export function parseComponentTemplate(string) {
 export function renderComponentTemplate(template, components) {
   let idx = 0;
   function renderGroup(group) {
-    let children = [];
+    const children = [];
 
     (template[group] || []).forEach(item => {
       if (_.isString(item)) {
@@ -172,7 +172,7 @@ function mark(rv) {
     return rv;
   }
 
-  let proxy = {
+  const proxy = {
     $$typeof: Symbol.for('react.element'),
     type: 'span',
     key: null,
@@ -231,7 +231,7 @@ export function ngettext(singular, plural, ...args) {
    the root string is always called "root", the rest is prefixed
    with the name in the brackets */
 export function gettextComponentTemplate(template, components) {
-  let tmpl = parseComponentTemplate(i18n.gettext(template));
+  const tmpl = parseComponentTemplate(i18n.gettext(template));
   return mark(renderComponentTemplate(tmpl, components));
 }
 
diff --git a/src/sentry/static/sentry/app/mixins/apiMixin.jsx b/src/sentry/static/sentry/app/mixins/apiMixin.jsx
index 2ea2716d2e..8a3aaf22a4 100644
--- a/src/sentry/static/sentry/app/mixins/apiMixin.jsx
+++ b/src/sentry/static/sentry/app/mixins/apiMixin.jsx
@@ -1,6 +1,6 @@
 import {Client} from 'app/api';
 
-let ApiMixin = {
+const ApiMixin = {
   componentWillMount() {
     this.api = new Client();
   },
diff --git a/src/sentry/static/sentry/app/mixins/appState.jsx b/src/sentry/static/sentry/app/mixins/appState.jsx
index b6b88dc73a..4fe5323360 100644
--- a/src/sentry/static/sentry/app/mixins/appState.jsx
+++ b/src/sentry/static/sentry/app/mixins/appState.jsx
@@ -1,6 +1,6 @@
 import OrganizationsStore from 'app/stores/organizationsStore';
 
-let AppState = {
+const AppState = {
   getOrganizationList() {
     return OrganizationsStore.getAll();
   },
diff --git a/src/sentry/static/sentry/app/mixins/organizationState.jsx b/src/sentry/static/sentry/app/mixins/organizationState.jsx
index d90a18c4e6..f522f67184 100644
--- a/src/sentry/static/sentry/app/mixins/organizationState.jsx
+++ b/src/sentry/static/sentry/app/mixins/organizationState.jsx
@@ -1,6 +1,6 @@
 import SentryTypes from 'app/sentryTypes';
 
-let OrganizationStateMixin = {
+const OrganizationStateMixin = {
   contextTypes: {
     organization: SentryTypes.Organization,
   },
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
index b88a0628a3..506921b631 100644
--- a/src/sentry/static/sentry/app/mixins/projectState.jsx
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -1,7 +1,7 @@
 import SentryTypes from 'app/sentryTypes';
 import OrganizationState from 'app/mixins/organizationState';
 
-let ProjectState = {
+const ProjectState = {
   mixins: [OrganizationState],
 
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index 2e7961f477..7c0309de8e 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -176,8 +176,8 @@ function optionsForSection(section) {
 }
 
 export function getOptionField(option, field) {
-  let meta = {...getOption(option), ...field};
-  let Field = meta.component || TextField;
+  const meta = {...getOption(option), ...field};
+  const Field = meta.component || TextField;
   return (
     <Field
       {...meta}
@@ -203,10 +203,10 @@ export function getForm(fields) {
   // fields is a object mapping key name to Fields, so the goal is to split
   // them up into multiple sections, and spit out fieldsets with a grouping of
   // all fields, in the right order, under their section.
-  let sets = [];
-  for (let section of sections) {
-    let set = [];
-    for (let option of optionsForSection(section)) {
+  const sets = [];
+  for (const section of sections) {
+    const set = [];
+    for (const option of optionsForSection(section)) {
       if (fields[option.key]) {
         set.push(fields[option.key]);
       }
diff --git a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
index 9079af2092..ae1ead25cd 100644
--- a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
@@ -44,7 +44,7 @@ class IssueActions extends PluginComponentBase {
   }
 
   componentDidMount() {
-    let plugin = this.props.plugin;
+    const plugin = this.props.plugin;
     if (!plugin.issue && this.props.actionType !== 'unlink') {
       this.fetchData();
     }
@@ -79,7 +79,7 @@ class IssueActions extends PluginComponentBase {
   }
 
   errorHandler(error) {
-    let state = {
+    const state = {
       loading: false,
     };
     if (error.status === 400 && error.responseJSON) {
@@ -94,7 +94,7 @@ class IssueActions extends PluginComponentBase {
     if (this.props.actionType === 'create') {
       this.api.request(this.getPluginCreateEndpoint(), {
         success: data => {
-          let createFormData = {};
+          const createFormData = {};
           data.forEach(field => {
             createFormData[field.name] = field.default;
           });
@@ -113,7 +113,7 @@ class IssueActions extends PluginComponentBase {
     } else if (this.props.actionType === 'link') {
       this.api.request(this.getPluginLinkEndpoint(), {
         success: data => {
-          let linkFormData = {};
+          const linkFormData = {};
           data.forEach(field => {
             linkFormData[field.name] = field.default;
           });
@@ -170,10 +170,10 @@ class IssueActions extends PluginComponentBase {
   }
 
   changeField(action, name, value) {
-    let key = action + 'FormData';
-    let formData = this.state[key];
+    const key = action + 'FormData';
+    const formData = this.state[key];
     formData[name] = value;
-    let state = {};
+    const state = {};
     state[key] = formData;
     this.setState(state);
   }
@@ -266,14 +266,14 @@ class IssueActions extends PluginComponentBase {
   }
 
   getPluginConfigureUrl() {
-    let org = this.getOrganization();
-    let project = this.getProject();
-    let plugin = this.props.plugin;
+    const org = this.getOrganization();
+    const project = this.getProject();
+    const plugin = this.props.plugin;
     return '/' + org.slug + '/' + project.slug + '/settings/plugins/' + plugin.slug;
   }
 
   renderError() {
-    let error = this.state.error;
+    const error = this.state.error;
     if (!error) {
       return null;
     }
@@ -327,8 +327,8 @@ class IssueActions extends PluginComponentBase {
         </div>
       );
     } else if (error.error_type === 'validation') {
-      let errors = [];
-      for (let name in error.errors) {
+      const errors = [];
+      for (const name in error.errors) {
         errors.push(<p key={name}>{error.errors[name]}</p>);
       }
       return <div className="alert alert-error alert-block">{errors}</div>;
diff --git a/src/sentry/static/sentry/app/plugins/components/pluginIcon.jsx b/src/sentry/static/sentry/app/plugins/components/pluginIcon.jsx
index 8545dcec61..d0a421a32e 100644
--- a/src/sentry/static/sentry/app/plugins/components/pluginIcon.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/pluginIcon.jsx
@@ -101,8 +101,8 @@ class PluginIcon extends React.Component {
   };
 
   render() {
-    let {pluginId, size, ...props} = this.props;
-    let src = ICON_PATHS[pluginId] || DEFAULT_ICON;
+    const {pluginId, size, ...props} = this.props;
+    const src = ICON_PATHS[pluginId] || DEFAULT_ICON;
 
     return <IntegrationIcon {...props} image={src} size={size} />;
   }
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index 8ad8974ad2..3779503f31 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -30,16 +30,16 @@ class PluginSettings extends PluginComponentBase {
   }
 
   getPluginEndpoint() {
-    let org = this.props.organization;
-    let project = this.props.project;
+    const org = this.props.organization;
+    const project = this.props.project;
     return `/projects/${org.slug}/${project.slug}/plugins/${this.props.plugin.id}/`;
   }
 
   changeField(name, value) {
-    let formData = this.state.formData;
+    const formData = this.state.formData;
     formData[name] = value;
     // upon changing a field, remove errors
-    let errors = this.state.errors;
+    const errors = this.state.errors;
     delete errors[name];
     this.setState({formData, errors});
   }
@@ -47,13 +47,13 @@ class PluginSettings extends PluginComponentBase {
   onSubmit() {
     let repo = this.state.formData.repo;
     repo = repo && parseRepo(repo);
-    let parsedFormData = {...this.state.formData, repo};
+    const parsedFormData = {...this.state.formData, repo};
     this.api.request(this.getPluginEndpoint(), {
       data: parsedFormData,
       method: 'PUT',
       success: this.onSaveSuccess.bind(this, data => {
-        let formData = {};
-        let initialData = {};
+        const formData = {};
+        const initialData = {};
         data.config.forEach(field => {
           formData[field.name] = field.value || field.defaultValue;
           initialData[field.name] = field.value;
@@ -86,8 +86,8 @@ class PluginSettings extends PluginComponentBase {
           );
           return;
         }
-        let formData = {};
-        let initialData = {};
+        const formData = {};
+        const initialData = {};
         data.config.forEach(field => {
           formData[field.name] = field.value || field.defaultValue;
           initialData[field.name] = field.value;
@@ -111,10 +111,10 @@ class PluginSettings extends PluginComponentBase {
     if (this.state.state === FormState.LOADING) {
       return <LoadingIndicator />;
     }
-    let isSaving = this.state.state === FormState.SAVING;
-    let hasChanges = !_.isEqual(this.state.initialData, this.state.formData);
+    const isSaving = this.state.state === FormState.SAVING;
+    const hasChanges = !_.isEqual(this.state.initialData, this.state.formData);
 
-    let data = this.state.rawData;
+    const data = this.state.rawData;
     if (data.config_error) {
       let authUrl = data.auth_url;
       if (authUrl.indexOf('?') === -1) {
diff --git a/src/sentry/static/sentry/app/plugins/registry.jsx b/src/sentry/static/sentry/app/plugins/registry.jsx
index 59fa2295f0..7ce7ae29d5 100644
--- a/src/sentry/static/sentry/app/plugins/registry.jsx
+++ b/src/sentry/static/sentry/app/plugins/registry.jsx
@@ -15,7 +15,7 @@ export default class Registry {
 
   loadAll(dataList, callback) {
     let remaining = dataList.length;
-    let pluginList = [];
+    const pluginList = [];
     dataList.map(data => {
       this.load(data, plugin => {
         remaining--;
@@ -30,7 +30,7 @@ export default class Registry {
   load(data, callback) {
     // TODO(dcramer): we should probably register all valid plugins
     let remainingAssets = data.assets.length;
-    let finishLoad = function() {
+    const finishLoad = function() {
       if (!defined(this.plugins[data.id])) {
         if (data.type === 'issue-tracking') {
           this.plugins[data.id] = DefaultIssuePlugin;
@@ -49,14 +49,14 @@ export default class Registry {
       return;
     }
 
-    let onAssetLoaded = function(asset) {
+    const onAssetLoaded = function(asset) {
       remainingAssets--;
       if (remainingAssets === 0) {
         finishLoad();
       }
     };
 
-    let onAssetFailed = function(asset) {
+    const onAssetFailed = function(asset) {
       remainingAssets--;
       console.error('[plugins] Failed to load asset ' + asset.url);
       if (remainingAssets === 0) {
@@ -68,7 +68,7 @@ export default class Registry {
     data.assets.forEach(asset => {
       if (!defined(this.assetCache[asset.url])) {
         console.info('[plugins] Loading asset for ' + data.id + ': ' + asset.url);
-        let s = document.createElement('script');
+        const s = document.createElement('script');
         s.src = asset.url;
         s.onload = onAssetLoaded.bind(this, asset);
         s.onerror = onAssetFailed.bind(this, asset);
@@ -82,7 +82,7 @@ export default class Registry {
   }
 
   get(data) {
-    let cls = this.plugins[data.id];
+    const cls = this.plugins[data.id];
     if (!defined(cls)) {
       throw new Error('Attempted to ``get`` an unloaded plugin: ' + data.id);
     }
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 15b2945dc4..d6531a9145 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -50,7 +50,7 @@ import Stream from 'app/views/stream';
 import errorHandler from 'app/utils/errorHandler';
 
 function appendTrailingSlash(nextState, replace) {
-  let lastChar = nextState.location.pathname.slice(-1);
+  const lastChar = nextState.location.pathname.slice(-1);
   if (lastChar !== '/') {
     replace(nextState.location.pathname + '/');
   }
@@ -66,22 +66,22 @@ function appendTrailingSlash(nextState, replace) {
 const lazyLoad = cb => m => cb(null, m.default);
 
 function routes() {
-  let hooksRoutes = [];
+  const hooksRoutes = [];
   HookStore.get('routes').forEach(cb => {
     hooksRoutes.push(cb());
   });
 
-  let hooksAdminRoutes = [];
+  const hooksAdminRoutes = [];
   HookStore.get('routes:admin').forEach(cb => {
     hooksAdminRoutes.push(cb());
   });
 
-  let hooksOrgRoutes = [];
+  const hooksOrgRoutes = [];
   HookStore.get('routes:organization').forEach(cb => {
     hooksOrgRoutes.push(cb());
   });
 
-  let hooksSurveyRoute = [];
+  const hooksSurveyRoute = [];
   HookStore.get('routes:onboarding-survey').forEach(cb => {
     hooksSurveyRoute.push(cb());
   });
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index b7ea82c48c..07da49cbfa 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -886,7 +886,7 @@ export const SeriesUnit = PropTypes.shape({
 
 export const Series = PropTypes.arrayOf(SeriesUnit);
 
-let SentryTypes = {
+const SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
   }),
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index 669468c70f..ca3f1fdb97 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -18,8 +18,8 @@ const AlertStore = Reflux.createStore({
         expirations = JSON.parse(expirations);
 
         // Remove any objects that have passed their mute duration.
-        let now = Math.floor(new Date() / 1000);
-        for (let key in expirations) {
+        const now = Math.floor(new Date() / 1000);
+        for (const key in expirations) {
           if (expirations.hasOwnProperty(key) && expirations[key] < now) {
             delete expirations[key];
           }
@@ -53,7 +53,7 @@ const AlertStore = Reflux.createStore({
 
   onCloseAlert(alert, duration = 60 * 60 * 7 * 24) {
     if (defined(alert.id) && defined(duration)) {
-      let expiry = Math.floor(new Date() / 1000) + duration;
+      const expiry = Math.floor(new Date() / 1000) + duration;
       let expirations = localStorage.getItem('alerts:muted');
       if (defined(expirations)) {
         expirations = JSON.parse(expirations);
diff --git a/src/sentry/static/sentry/app/stores/configStore.jsx b/src/sentry/static/sentry/app/stores/configStore.jsx
index 449e6f4b04..616ab6f33a 100644
--- a/src/sentry/static/sentry/app/stores/configStore.jsx
+++ b/src/sentry/static/sentry/app/stores/configStore.jsx
@@ -14,7 +14,7 @@ const ConfigStore = Reflux.createStore({
 
   set(key, value) {
     this.config[key] = value;
-    let out = {};
+    const out = {};
     out[key] = value;
     this.trigger(out);
   },
@@ -33,7 +33,7 @@ const ConfigStore = Reflux.createStore({
       moment.tz.setDefault(config.user.options.timezone);
 
       // Parse query string for `lang`
-      let queryString = qs.parse(window.location.search) || {};
+      const queryString = qs.parse(window.location.search) || {};
 
       // Priority:
       // "?lang=en" --> user configuration options --> django request.LANGUAGE_CODE --> "en"
diff --git a/src/sentry/static/sentry/app/stores/environmentStore.jsx b/src/sentry/static/sentry/app/stores/environmentStore.jsx
index 3d1d21ac24..37ca42ff25 100644
--- a/src/sentry/static/sentry/app/stores/environmentStore.jsx
+++ b/src/sentry/static/sentry/app/stores/environmentStore.jsx
@@ -78,9 +78,9 @@ const EnvironmentStore = Reflux.createStore({
   // Default environment is either the first based on the set of common names
   // or the first in the environment list if none match
   getDefault() {
-    let allEnvs = this.items;
+    const allEnvs = this.items;
 
-    let defaultEnv = allEnvs.find(e => e.name === this.defaultEnvironment);
+    const defaultEnv = allEnvs.find(e => e.name === this.defaultEnvironment);
 
     return defaultEnv || null;
   },
diff --git a/src/sentry/static/sentry/app/stores/eventStore.jsx b/src/sentry/static/sentry/app/stores/eventStore.jsx
index 22f2a830b6..dfd2ddf00a 100644
--- a/src/sentry/static/sentry/app/stores/eventStore.jsx
+++ b/src/sentry/static/sentry/app/stores/eventStore.jsx
@@ -14,7 +14,7 @@ const EventStore = Reflux.createStore({
   loadInitialData(items) {
     this.reset();
 
-    let itemIds = new Set();
+    const itemIds = new Set();
     items.forEach(item => {
       itemIds.add(item.id);
       this.items.push(item);
@@ -28,8 +28,8 @@ const EventStore = Reflux.createStore({
       items = [items];
     }
 
-    let itemsById = {};
-    let itemIds = new Set();
+    const itemsById = {};
+    const itemIds = new Set();
     items.forEach(item => {
       itemsById[item.id] = item;
       itemIds.add(item.id);
@@ -42,7 +42,7 @@ const EventStore = Reflux.createStore({
       }
     });
 
-    for (let itemId in itemsById) {
+    for (const itemId in itemsById) {
       this.items.push(itemsById[itemId]);
     }
 
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 2d92b84671..817869a31f 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -29,7 +29,7 @@ const GroupStore = Reflux.createStore({
   loadInitialData(items) {
     this.reset();
 
-    let itemIds = new Set();
+    const itemIds = new Set();
     items.forEach(item => {
       itemIds.add(item.id);
       this.items.push(item);
@@ -43,8 +43,8 @@ const GroupStore = Reflux.createStore({
       items = [items];
     }
 
-    let itemsById = {};
-    let itemIds = new Set();
+    const itemsById = {};
+    const itemIds = new Set();
     items.forEach(item => {
       itemsById[item.id] = item;
       itemIds.add(item.id);
@@ -62,7 +62,7 @@ const GroupStore = Reflux.createStore({
     });
 
     // New items
-    for (let itemId in itemsById) {
+    for (const itemId in itemsById) {
       this.items.push(itemsById[itemId]);
     }
 
@@ -101,7 +101,7 @@ const GroupStore = Reflux.createStore({
   },
 
   indexOfActivity(group_id, id) {
-    let group = this.get(group_id);
+    const group = this.get(group_id);
     if (!group) return -1;
 
     for (let i = 0; i < group.activity.length; i++) {
@@ -113,7 +113,7 @@ const GroupStore = Reflux.createStore({
   },
 
   addActivity(id, data, index = -1) {
-    let group = this.get(id);
+    const group = this.get(id);
     if (!group) return;
 
     // insert into beginning by default
@@ -128,10 +128,10 @@ const GroupStore = Reflux.createStore({
   },
 
   updateActivity(group_id, id, data) {
-    let group = this.get(group_id);
+    const group = this.get(group_id);
     if (!group) return;
 
-    let index = this.indexOfActivity(group_id, id);
+    const index = this.indexOfActivity(group_id, id);
     if (index === -1) return;
 
     // Here, we want to merge the new `data` being passed in
@@ -142,13 +142,13 @@ const GroupStore = Reflux.createStore({
   },
 
   removeActivity(group_id, id) {
-    let group = this.get(group_id);
+    const group = this.get(group_id);
     if (!group) return -1;
 
-    let index = this.indexOfActivity(group.id, id);
+    const index = this.indexOfActivity(group.id, id);
     if (index === -1) return -1;
 
-    let activity = group.activity.splice(index, 1);
+    const activity = group.activity.splice(index, 1);
 
     if (activity[0].type === 'note') group.numComments--;
 
@@ -157,7 +157,7 @@ const GroupStore = Reflux.createStore({
   },
 
   get(id) {
-    let pendingForId = [];
+    const pendingForId = [];
     this.pendingChanges.forEach(change => {
       if (change.id === id) {
         pendingForId.push(change);
@@ -190,7 +190,7 @@ const GroupStore = Reflux.createStore({
 
   getAllItems() {
     // regroup pending changes by their itemID
-    let pendingById = {};
+    const pendingById = {};
     this.pendingChanges.forEach(change => {
       if (_.isUndefined(pendingById[change.id])) {
         pendingById[change.id] = [];
@@ -226,7 +226,7 @@ const GroupStore = Reflux.createStore({
   },
 
   onAssignToSuccess(changeId, itemId, response) {
-    let item = this.get(itemId);
+    const item = this.get(itemId);
     if (!item) {
       return;
     }
@@ -256,7 +256,7 @@ const GroupStore = Reflux.createStore({
 
   onDeleteSuccess(changeId, itemIds, response) {
     itemIds = this._itemIdsOrAll(itemIds);
-    let itemIdSet = new Set(itemIds);
+    const itemIdSet = new Set(itemIds);
     itemIds.forEach(itemId => {
       delete this.statuses[itemId];
       this.clearStatus(itemId, 'delete');
@@ -314,7 +314,7 @@ const GroupStore = Reflux.createStore({
     });
 
     // Remove all but parent id (items were merged into this one)
-    let mergedIdSet = new Set(mergedIds);
+    const mergedIdSet = new Set(mergedIds);
 
     // Looks like the `PUT /api/0/projects/:orgId/:projectId/issues/` endpoint
     // actually returns a 204, so there is no `response` body
diff --git a/src/sentry/static/sentry/app/stores/groupingStore.jsx b/src/sentry/static/sentry/app/stores/groupingStore.jsx
index 730282af83..7ff41f818d 100644
--- a/src/sentry/static/sentry/app/stores/groupingStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupingStore.jsx
@@ -12,14 +12,14 @@ const MIN_SCORE = 0.6;
 
 // @param score: {[key: string]: number}
 const checkBelowThreshold = scores => {
-  let scoreKeys = (scores && Object.keys(scores)) || [];
+  const scoreKeys = (scores && Object.keys(scores)) || [];
   return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);
 };
 
 const GroupingStore = Reflux.createStore({
   listenables: [GroupingActions],
   init() {
-    let state = this.getInitialState();
+    const state = this.getInitialState();
 
     Object.entries(state).forEach(([key, value]) => {
       this[key] = value;
@@ -55,18 +55,18 @@ const GroupingStore = Reflux.createStore({
   },
 
   setStateForId(map, idOrIds, newState) {
-    let ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];
+    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];
 
     return ids.map(id => {
-      let state = (map.has(id) && map.get(id)) || {};
-      let mergedState = Object.assign({}, state, newState);
+      const state = (map.has(id) && map.get(id)) || {};
+      const mergedState = Object.assign({}, state, newState);
       map.set(id, mergedState);
       return mergedState;
     });
   },
 
   isAllUnmergedSelected() {
-    let lockedItems =
+    const lockedItems =
       Array.from(this.unmergeState.values()).filter(({busy}) => busy) || [];
     return (
       this.unmergeList.size ===
@@ -83,7 +83,7 @@ const GroupingStore = Reflux.createStore({
     this.init();
     this.triggerFetchState();
 
-    let promises = requests.map(({endpoint, queryParams, dataKey}) => {
+    const promises = requests.map(({endpoint, queryParams, dataKey}) => {
       return new Promise((resolve, reject) => {
         api.request(endpoint, {
           method: 'GET',
@@ -96,7 +96,7 @@ const GroupingStore = Reflux.createStore({
             });
           },
           error: err => {
-            let error = (err.responseJSON && err.responseJSON.detail) || true;
+            const error = (err.responseJSON && err.responseJSON.detail) || true;
             reject(error);
           },
         });
@@ -113,14 +113,14 @@ const GroupingStore = Reflux.createStore({
       },
       similar: ([issue, scoreMap]) => {
         // Hide items with a low scores
-        let isBelowThreshold = checkBelowThreshold(scoreMap);
+        const isBelowThreshold = checkBelowThreshold(scoreMap);
 
         // List of scores indexed by interface (i.e., exception and message)
-        let scoresByInterface = Object.keys(scoreMap)
+        const scoresByInterface = Object.keys(scoreMap)
           .map(scoreKey => [scoreKey, scoreMap[scoreKey]])
           .reduce((acc, [scoreKey, score]) => {
             // tokenize scorekey, first token is the interface name
-            let [interfaceName] = scoreKey.split(':');
+            const [interfaceName] = scoreKey.split(':');
             if (!acc[interfaceName]) {
               acc[interfaceName] = [];
             }
@@ -130,13 +130,13 @@ const GroupingStore = Reflux.createStore({
           }, {});
 
         // Aggregate score by interface
-        let aggregate = Object.keys(scoresByInterface)
+        const aggregate = Object.keys(scoresByInterface)
           .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])
           .reduce((acc, [interfaceName, allScores]) => {
             // `null` scores means feature was not present in both issues, do not
             // include in aggregate
-            let scores = allScores.filter(([, score]) => score !== null);
-            let avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;
+            const scores = allScores.filter(([, score]) => score !== null);
+            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;
             acc[interfaceName] = avg;
             return acc;
           }, {});
@@ -158,7 +158,7 @@ const GroupingStore = Reflux.createStore({
     return Promise.all(promises).then(
       resultsArray => {
         resultsArray.forEach(({dataKey, data, links}) => {
-          let items = data.map(responseProcessors[dataKey]);
+          const items = data.map(responseProcessors[dataKey]);
           this[`${dataKey}Items`] = items;
           this[`${dataKey}Links`] = links;
         });
@@ -180,7 +180,7 @@ const GroupingStore = Reflux.createStore({
     let checked;
 
     // Don't do anything if item is busy
-    let state = this.mergeState.has(id) && this.mergeState.get(id);
+    const state = this.mergeState.has(id) && this.mergeState.get(id);
     if (state && state.busy === true) return;
 
     if (this.mergeList.has(id)) {
@@ -203,7 +203,7 @@ const GroupingStore = Reflux.createStore({
     let checked;
 
     // Uncheck an item to unmerge
-    let state = this.unmergeState.get(fingerprint);
+    const state = this.unmergeState.get(fingerprint);
 
     if (state && state.busy === true) return;
 
@@ -228,7 +228,7 @@ const GroupingStore = Reflux.createStore({
   },
 
   onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {
-    let ids = Array.from(this.unmergeList.keys());
+    const ids = Array.from(this.unmergeList.keys());
 
     return new Promise((resolve, reject) => {
       if (this.isAllUnmergedSelected()) {
@@ -245,7 +245,7 @@ const GroupingStore = Reflux.createStore({
         busy: true,
       });
       this.triggerUnmergeState();
-      let loadingIndicator = IndicatorStore.add(loadingMessage);
+      const loadingIndicator = IndicatorStore.add(loadingMessage);
 
       api.request(`/issues/${groupId}/hashes/`, {
         method: 'DELETE',
@@ -281,7 +281,7 @@ const GroupingStore = Reflux.createStore({
   },
 
   onMerge({params, query}) {
-    let ids = Array.from(this.mergeList.values());
+    const ids = Array.from(this.mergeList.values());
 
     this.mergeDisabled = true;
     this.setStateForId(this.mergeState, ids, {
@@ -289,11 +289,11 @@ const GroupingStore = Reflux.createStore({
     });
     this.triggerMergeState();
 
-    let promise = new Promise((resolve, reject) => {
+    const promise = new Promise((resolve, reject) => {
       // Disable merge button
 
       if (params) {
-        let {orgId, groupId, projectId} = params;
+        const {orgId, groupId, projectId} = params;
         api.merge(
           {
             orgId,
@@ -351,7 +351,7 @@ const GroupingStore = Reflux.createStore({
   },
 
   onToggleCollapseFingerprint(fingerprint) {
-    let collapsed =
+    const collapsed =
       this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;
     this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});
     this.trigger({
@@ -360,7 +360,7 @@ const GroupingStore = Reflux.createStore({
   },
 
   triggerFetchState() {
-    let state = {
+    const state = {
       similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),
       filteredSimilarItems: this.similarItems.filter(
         ({isBelowThreshold}) => isBelowThreshold
@@ -380,7 +380,7 @@ const GroupingStore = Reflux.createStore({
   },
 
   triggerUnmergeState() {
-    let state = pick(this, [
+    const state = pick(this, [
       'unmergeDisabled',
       'unmergeState',
       'unmergeList',
@@ -392,7 +392,7 @@ const GroupingStore = Reflux.createStore({
   },
 
   triggerMergeState() {
-    let state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);
+    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);
     this.trigger(state);
     return state;
   },
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
index 1f30faf867..5066db13d8 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.jsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -75,7 +75,7 @@ const GuideStore = Reflux.createStore({
   },
 
   onCloseGuide() {
-    let {currentGuide} = this.state;
+    const {currentGuide} = this.state;
     this.state.guides[
       Object.keys(this.state.guides).find(key => {
         return this.state.guides[key].id == currentGuide.id;
@@ -107,7 +107,7 @@ const GuideStore = Reflux.createStore({
   },
 
   recordCue(id, cue) {
-    let data = {
+    const data = {
       guide: id,
       cue,
     };
@@ -140,13 +140,13 @@ const GuideStore = Reflux.createStore({
   },
 
   async getProjectStats(projectId) {
-    let {org, project, projectStats} = this.state;
+    const {org, project, projectStats} = this.state;
 
     if (projectStats.has(projectId)) {
       return Promise.resolve(projectStats.get(projectId));
     }
 
-    let path = `/projects/${org.slug}/${project.slug}/stats/`;
+    const path = `/projects/${org.slug}/${project.slug}/stats/`;
     return this.api
       .requestPromise(path, {
         query: {
@@ -155,20 +155,20 @@ const GuideStore = Reflux.createStore({
         },
       })
       .then(data => {
-        let eventsReceived = data.reduce((sum, point) => sum + point[1], 0);
+        const eventsReceived = data.reduce((sum, point) => sum + point[1], 0);
         projectStats.set(projectId, eventsReceived);
         return eventsReceived;
       });
   },
 
   async getProjectRules(projectId) {
-    let {org, project, projectRules} = this.state;
+    const {org, project, projectRules} = this.state;
 
     if (projectRules.has(projectId)) {
       return Promise.resolve(projectRules.get(projectId));
     }
 
-    let path = `/projects/${org.slug}/${project.slug}/rules/`;
+    const path = `/projects/${org.slug}/${project.slug}/rules/`;
     return this.api
       .requestPromise(path, {
         query: {
@@ -177,7 +177,7 @@ const GuideStore = Reflux.createStore({
         },
       })
       .then(data => {
-        let result = !this.isDefaultAlert(data);
+        const result = !this.isDefaultAlert(data);
         projectRules.set(projectId, result);
         return result;
       });
@@ -186,13 +186,13 @@ const GuideStore = Reflux.createStore({
   async checkAlertTipData() {
     // Check if we have the data needed to determine if the alert-reminder tip should be shown.
     // If not, take the necessary actions to fetch the data.
-    let {org, project} = this.state;
+    const {org, project} = this.state;
 
     if (!org || !project) {
       return Promise.resolve([]);
     }
 
-    let projectId = parseInt(project.id, 10);
+    const projectId = parseInt(project.id, 10);
     return Promise.all([
       this.getProjectStats(projectId),
       this.getProjectRules(projectId),
@@ -201,7 +201,7 @@ const GuideStore = Reflux.createStore({
 
   async getBestGuideKey(guideKeys) {
     // Pick the first guide that satisfies conditions.
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
 
     return new Promise(async (resolve, reject) => {
       let projectData = [];
@@ -214,7 +214,7 @@ const GuideStore = Reflux.createStore({
         guideKeys.find(key => {
           // Pick the first guide that satisfies conditions.
           if (key === ALERT_REMINDER_1) {
-            let [stats, rules] = projectData;
+            const [stats, rules] = projectData;
             return !rules && stats > 1000;
           } else if (
             user.isSuperuser ||
@@ -238,7 +238,7 @@ const GuideStore = Reflux.createStore({
     // 5. If the user has seen the guide, don't show it.
     // 6. Otherwise show the guide.
 
-    let availableTargets = [...this.state.anchors].map(a => a.props.target);
+    const availableTargets = [...this.state.anchors].map(a => a.props.target);
 
     // sort() so that we pick a guide deterministically every time this function is called.
     let guideKeys = Object.keys(this.state.guides)
@@ -254,7 +254,7 @@ const GuideStore = Reflux.createStore({
     }
 
     // Pick the first guide that satisfies conditions.
-    let bestGuideKey = await this.getBestGuideKey(guideKeys);
+    const bestGuideKey = await this.getBestGuideKey(guideKeys);
 
     let bestGuide = null;
     if (bestGuideKey) {
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index 8cc43db363..44e7f8f5f5 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -21,7 +21,7 @@ const IndicatorStore = Reflux.createStore({
   },
 
   addMessage(message, type, {append, ...options} = {}) {
-    let indicator = {
+    const indicator = {
       id: this.lastId++,
       message,
       type,
@@ -35,7 +35,7 @@ const IndicatorStore = Reflux.createStore({
       }, options.duration);
     }
 
-    let newItems = append ? [...this.items, indicator] : [indicator];
+    const newItems = append ? [...this.items, indicator] : [indicator];
 
     this.items = newItems;
     this.trigger(this.items);
diff --git a/src/sentry/static/sentry/app/stores/pluginsStore.jsx b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
index ee406b2c31..db298eba3f 100644
--- a/src/sentry/static/sentry/app/stores/pluginsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
@@ -8,7 +8,7 @@ const PluginsStore = Reflux.createStore({
   },
 
   getState() {
-    let {
+    const {
       //eslint-disable-next-line no-unused-vars
       plugins,
       ...state
@@ -73,8 +73,8 @@ const PluginsStore = Reflux.createStore({
   onUpdate(id, updateObj) {
     if (!this.plugins) return;
 
-    let plugin = this.plugins.get(id);
-    let newPlugin = {
+    const plugin = this.plugins.get(id);
+    const newPlugin = {
       ...plugin,
       ...updateObj,
     };
@@ -89,7 +89,7 @@ const PluginsStore = Reflux.createStore({
   },
 
   onUpdateError(id, updateObj, err) {
-    let origPlugin = this.updating.get(id);
+    const origPlugin = this.updating.get(id);
     if (!origPlugin) return;
 
     this.plugins.set(id, origPlugin);
diff --git a/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
index cba4919214..4bfecb8524 100644
--- a/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
@@ -37,11 +37,11 @@ const ProjectsStatsStore = Reflux.createStore({
    * @param {Object} data Project data
    */
   onUpdate(projectSlug, data) {
-    let project = this.getBySlug(projectSlug);
+    const project = this.getBySlug(projectSlug);
     this.updatingItems.set(projectSlug, project);
     if (!project) return;
 
-    let newProject = {
+    const newProject = {
       ...project,
       ...data,
     };
@@ -64,7 +64,7 @@ const ProjectsStatsStore = Reflux.createStore({
    * @param {Object} data Previous project data
    */
   onUpdateError(err, projectSlug) {
-    let project = this.updatingItems.get(projectSlug);
+    const project = this.updatingItems.get(projectSlug);
     if (!project) return;
 
     this.updatingItems.delete(projectSlug);
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index d2219dc9b4..cf0602145a 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -30,7 +30,7 @@ const ProjectsStore = Reflux.createStore({
   },
 
   onChangeSlug(prevSlug, newSlug) {
-    let prevProject = this.getBySlug(prevSlug);
+    const prevProject = this.getBySlug(prevSlug);
 
     // This shouldn't happen
     if (!prevProject) return;
@@ -67,8 +67,8 @@ const ProjectsStore = Reflux.createStore({
   },
 
   onUpdateSuccess(data) {
-    let project = this.getById(data.id);
-    let newProject = Object.assign({}, project, data);
+    const project = this.getById(data.id);
+    const newProject = Object.assign({}, project, data);
     this.itemsById = {
       ...this.itemsById,
       [project.id]: newProject,
@@ -77,7 +77,7 @@ const ProjectsStore = Reflux.createStore({
   },
 
   onStatsLoadSuccess(data) {
-    let touchedIds = [];
+    const touchedIds = [];
     _.each(data || [], (stats, projectId) => {
       if (projectId in this.itemsById) {
         this.itemsById[projectId].stats = stats;
@@ -93,7 +93,7 @@ const ProjectsStore = Reflux.createStore({
    */
   onDeleteTeam(teamSlug) {
     // Look for team in all projects
-    let projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {
+    const projectIds = this.getWithTeam(teamSlug).map(projectWithTeam => {
       this.removeTeamFromProject(teamSlug, projectWithTeam);
       return projectWithTeam.id;
     });
@@ -102,7 +102,7 @@ const ProjectsStore = Reflux.createStore({
   },
 
   onRemoveTeam(teamSlug, projectSlug) {
-    let project = this.getBySlug(projectSlug);
+    const project = this.getBySlug(projectSlug);
     if (!project) return;
 
     this.removeTeamFromProject(teamSlug, project);
@@ -110,7 +110,7 @@ const ProjectsStore = Reflux.createStore({
   },
 
   onAddTeam(team, projectSlug) {
-    let project = this.getBySlug(projectSlug);
+    const project = this.getBySlug(projectSlug);
 
     // Don't do anything if we can't find a project
     if (!project) return;
@@ -128,7 +128,7 @@ const ProjectsStore = Reflux.createStore({
 
   // Internal method, does not trigger
   removeTeamFromProject(teamSlug, project) {
-    let newTeams = project.teams.filter(({slug}) => slug !== teamSlug);
+    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);
 
     this.itemsById = {
       ...this.itemsById,
diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index 9aa1535b01..6dc9117de1 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -15,7 +15,7 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   add(ids) {
-    let allSelected = this.allSelected();
+    const allSelected = this.allSelected();
     ids.forEach(id => {
       if (!this.records.hasOwnProperty(id)) {
         this.records[id] = allSelected;
@@ -24,10 +24,10 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   prune() {
-    let existingIds = new Set(GroupStore.getAllItemIds());
+    const existingIds = new Set(GroupStore.getAllItemIds());
 
     // Remove ids that no longer exist
-    for (let itemId in this.records) {
+    for (const itemId in this.records) {
       if (!existingIds.has(itemId)) {
         delete this.records[itemId];
       }
@@ -35,8 +35,8 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   allSelected() {
-    let itemIds = this.getSelectedIds();
-    let numRecords = this.numSelected();
+    const itemIds = this.getSelectedIds();
+    const numRecords = this.numSelected();
     return itemIds.size > 0 && itemIds.size === numRecords;
   },
 
@@ -45,18 +45,18 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   anySelected() {
-    let itemIds = this.getSelectedIds();
+    const itemIds = this.getSelectedIds();
     return itemIds.size > 0;
   },
 
   multiSelected() {
-    let itemIds = this.getSelectedIds();
+    const itemIds = this.getSelectedIds();
     return itemIds.size > 1;
   },
 
   getSelectedIds() {
-    let selected = new Set();
-    for (let itemId in this.records) {
+    const selected = new Set();
+    for (const itemId in this.records) {
       if (this.records[itemId]) {
         selected.add(itemId);
       }
@@ -69,7 +69,7 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   deselectAll() {
-    for (let itemId in this.records) {
+    for (const itemId in this.records) {
       this.records[itemId] = false;
     }
     this.trigger();
@@ -82,9 +82,9 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   toggleSelectAll() {
-    let allSelected = !this.allSelected();
+    const allSelected = !this.allSelected();
 
-    for (let itemId in this.records) {
+    for (const itemId in this.records) {
       this.records[itemId] = allSelected;
     }
 
diff --git a/src/sentry/static/sentry/app/stores/tagStore.jsx b/src/sentry/static/sentry/app/stores/tagStore.jsx
index d767e4ae93..e2a1c8fde8 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.jsx
@@ -122,7 +122,7 @@ const TagStore = Reflux.createStore({
             tag
           );
 
-          let old = this.tags[tag.key];
+          const old = this.tags[tag.key];
 
           // Don't override predefined filters (e.g. "is")
           if (!old || !old.predefined) obj[tag.key] = tag;
@@ -137,7 +137,7 @@ const TagStore = Reflux.createStore({
   },
 
   onMemberListStoreChange(members) {
-    let assignedTag = this.tags.assigned;
+    const assignedTag = this.tags.assigned;
     assignedTag.values = getMemberListStoreUsernames();
     assignedTag.values.unshift('me');
     this.tags.bookmarks.values = assignedTag.values;
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 387bddff0e..5c57202b83 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -25,7 +25,7 @@ const TeamStore = Reflux.createStore({
   onUpdateSuccess(itemId, response) {
     if (!response) return;
 
-    let item = this.getBySlug(itemId);
+    const item = this.getBySlug(itemId);
 
     if (!item) {
       this.items.push(response);
diff --git a/src/sentry/static/sentry/app/translations.jsx b/src/sentry/static/sentry/app/translations.jsx
index 42d9e69d6f..ae154b375f 100644
--- a/src/sentry/static/sentry/app/translations.jsx
+++ b/src/sentry/static/sentry/app/translations.jsx
@@ -2,7 +2,7 @@ import * as Sentry from '@sentry/browser';
 
 // zh-cn => zh_CN
 function convertToDjangoLocaleFormat(language) {
-  let [left, right] = language.split('-');
+  const [left, right] = language.split('-');
   return left + (right ? '_' + right.toUpperCase() : '');
 }
 
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index d23f0c234e..ee8ed998ca 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -73,8 +73,8 @@ const objectMatchesSubset = function(obj, other, deep) {
 // XXX(dcramer): the previous mechanism of using _.map here failed
 // miserably if a param was named 'length'
 export const objectToArray = function(obj) {
-  let result = [];
-  for (let key in obj) {
+  const result = [];
+  for (const key in obj) {
     result.push([key, obj[key]]);
   }
   return result;
@@ -86,7 +86,7 @@ export const intcomma = function(x) {
 
 export function sortArray(arr, score_fn) {
   arr.sort((a, b) => {
-    let a_score = score_fn(a),
+    const a_score = score_fn(a),
       b_score = score_fn(b);
 
     for (let i = 0; i < a_score.length; i++) {
@@ -104,7 +104,7 @@ export function sortArray(arr, score_fn) {
 }
 
 export function objectIsEmpty(obj) {
-  for (let prop in obj) {
+  for (const prop in obj) {
     if (obj.hasOwnProperty(prop)) {
       return false;
     }
@@ -158,8 +158,8 @@ export function toTitleCase(str) {
 }
 
 export function formatBytes(bytes) {
-  let units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
-  let thresh = 1024;
+  const units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
+  const thresh = 1024;
   if (bytes < thresh) {
     return bytes + ' B';
   }
@@ -177,7 +177,7 @@ export function getShortVersion(version) {
     return version;
   }
 
-  let match = version.match(
+  const match = version.match(
     /^(?:[a-zA-Z][a-zA-Z0-9-]+)(?:\.[a-zA-Z][a-zA-Z0-9-]+)+-(.*)$/
   );
   if (match) {
@@ -193,9 +193,9 @@ export function parseRepo(repo) {
   if (!repo) {
     return repo;
   } else {
-    let re = /(?:github\.com|bitbucket\.org)\/([^\/]+\/[^\/]+)/i;
-    let match = repo.match(re);
-    let parsedRepo = match ? match[1] : repo;
+    const re = /(?:github\.com|bitbucket\.org)\/([^\/]+\/[^\/]+)/i;
+    const match = repo.match(re);
+    const parsedRepo = match ? match[1] : repo;
     return parsedRepo;
   }
 }
diff --git a/src/sentry/static/sentry/app/utils/__mocks__/localStorage.jsx b/src/sentry/static/sentry/app/utils/__mocks__/localStorage.jsx
index e0170840b8..8839003455 100644
--- a/src/sentry/static/sentry/app/utils/__mocks__/localStorage.jsx
+++ b/src/sentry/static/sentry/app/utils/__mocks__/localStorage.jsx
@@ -1,4 +1,4 @@
-let localStorageMock = function() {
+const localStorageMock = function() {
   let store = {};
   return {
     getItem: function(key) {
diff --git a/src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.jsx b/src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.jsx
index 6ddc55d260..9e5820985c 100644
--- a/src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.jsx
+++ b/src/sentry/static/sentry/app/utils/__mocks__/recreateRoute.jsx
@@ -1,3 +1,3 @@
-let mockFn = jest.fn(name => name);
+const mockFn = jest.fn(name => name);
 
 export default mockFn;
diff --git a/src/sentry/static/sentry/app/utils/collection.jsx b/src/sentry/static/sentry/app/utils/collection.jsx
index 3f55f6545d..347ad8176b 100644
--- a/src/sentry/static/sentry/app/utils/collection.jsx
+++ b/src/sentry/static/sentry/app/utils/collection.jsx
@@ -1,7 +1,7 @@
 import $ from 'jquery';
 import _ from 'lodash';
 
-let defaults = {
+const defaults = {
   limit: null,
   key: function(item) {
     return item.id;
@@ -49,7 +49,7 @@ Collection.prototype.push = function push(items) {
 
   items.forEach(
     function(item) {
-      let existing = this.pop(item);
+      const existing = this.pop(item);
       if (existing) {
         $.extend(true, existing, item);
         item = existing;
@@ -67,7 +67,7 @@ Collection.prototype.unshift = function unshift(items) {
   }
   items.reverse().forEach(
     function(item) {
-      let existing = this.pop(item);
+      const existing = this.pop(item);
       if (existing) {
         $.extend(true, existing, item);
         item = existing;
@@ -80,7 +80,7 @@ Collection.prototype.unshift = function unshift(items) {
 };
 
 Collection.prototype.get = function get(key) {
-  let idx = this.indexOf(key);
+  const idx = this.indexOf(key);
   if (idx === -1) {
     return null;
   }
@@ -88,11 +88,11 @@ Collection.prototype.get = function get(key) {
 };
 
 Collection.prototype.pop = function pop(item) {
-  let idx = this.indexOf(this.options.key(item));
+  const idx = this.indexOf(this.options.key(item));
   if (idx === -1) {
     return null;
   }
-  let result = this[idx];
+  const result = this[idx];
   this.splice(idx, idx + 1);
   return result;
 };
@@ -102,7 +102,7 @@ Collection.prototype.empty = function empty() {
 };
 
 Collection.prototype.indexOf = function indexOf(key) {
-  let keyFunc = this.options.key;
+  const keyFunc = this.options.key;
   for (let i = 0; i < this.length; i++) {
     if (keyFunc(this[i]) === key) {
       return i;
@@ -113,7 +113,7 @@ Collection.prototype.indexOf = function indexOf(key) {
 
 Collection.prototype.update = function update(item) {
   // returns true if the item already existed and was updated (as configured)
-  let existing = this.indexOf(this.options.key(item));
+  const existing = this.indexOf(this.options.key(item));
   if (existing !== -1) {
     $.extend(true, this[existing], item);
     return true;
diff --git a/src/sentry/static/sentry/app/utils/consolidatedScopes.jsx b/src/sentry/static/sentry/app/utils/consolidatedScopes.jsx
index ff3db0b9c4..aad1f8d452 100644
--- a/src/sentry/static/sentry/app/utils/consolidatedScopes.jsx
+++ b/src/sentry/static/sentry/app/utils/consolidatedScopes.jsx
@@ -39,8 +39,8 @@ export default class ConsolidatedScopes {
    *    }
    */
   toResourcePermissions() {
-    let scopes = [...this.scopes];
-    let permissions = this.defaultResourcePermissions;
+    const scopes = [...this.scopes];
+    const permissions = this.defaultResourcePermissions;
 
     // The scope for releases is `project:releases`, but instead of displaying
     // it as a permission of Project, we want to separate it out into its own
@@ -51,7 +51,7 @@ export default class ConsolidatedScopes {
     }
 
     this.topScopes(scopes).forEach(scope => {
-      let [resource, permission] = scope.split(':');
+      const [resource, permission] = scope.split(':');
       permissions[HUMAN_RESOURCE_NAMES[resource]] = permission;
     });
 
@@ -76,8 +76,8 @@ export default class ConsolidatedScopes {
    *    }
    */
   toPermissions() {
-    let scopes = [...this.scopes];
-    let permissions = {read: [], write: [], admin: []};
+    const scopes = [...this.scopes];
+    const permissions = {read: [], write: [], admin: []};
 
     // The scope for releases is `project:releases`, but instead of displaying
     // it as a permission of Project, we want to separate it out into its own
@@ -88,7 +88,7 @@ export default class ConsolidatedScopes {
     }
 
     this.topScopes(scopes).forEach(scope => {
-      let [resource, permission] = scope.split(':');
+      const [resource, permission] = scope.split(':');
       permissions[permission].push(HUMAN_RESOURCE_NAMES[resource]);
     });
 
@@ -120,7 +120,7 @@ export default class ConsolidatedScopes {
    * which is higher than Read. Used to sort scopes by access.
    */
   permissionLevel = scope => {
-    let permission = scope.split(':')[1];
+    const permission = scope.split(':')[1];
     return PERMISSION_LEVELS[permission];
   };
 
diff --git a/src/sentry/static/sentry/app/utils/cursorPoller.jsx b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
index f9823aa843..5a6bd93aa1 100644
--- a/src/sentry/static/sentry/app/utils/cursorPoller.jsx
+++ b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
@@ -14,7 +14,7 @@ class CursorPoller {
   }
 
   getDelay() {
-    let delay = this._baseDelay * (this._reqsWithoutData + 1);
+    const delay = this._baseDelay * (this._reqsWithoutData + 1);
     return Math.min(delay, this._maxDelay);
   }
 
@@ -59,7 +59,7 @@ class CursorPoller {
           this._reqsWithoutData -= 1;
         }
 
-        let links = parseLinkHeader(jqXHR.getResponseHeader('Link'));
+        const links = parseLinkHeader(jqXHR.getResponseHeader('Link'));
         this._pollingEndpoint = links.previous.href;
 
         this.options.success(data, jqXHR.getResponseHeader('Link'));
diff --git a/src/sentry/static/sentry/app/utils/getCookie.jsx b/src/sentry/static/sentry/app/utils/getCookie.jsx
index 9b55936a59..5b2284d449 100644
--- a/src/sentry/static/sentry/app/utils/getCookie.jsx
+++ b/src/sentry/static/sentry/app/utils/getCookie.jsx
@@ -1,9 +1,9 @@
 export default function getCookie(name) {
   let cookieValue = null;
   if (document.cookie && document.cookie !== '') {
-    let cookies = document.cookie.split(';');
+    const cookies = document.cookie.split(';');
     for (let i = 0; i < cookies.length; i++) {
-      let cookie = cookies[i].trim();
+      const cookie = cookies[i].trim();
       // Does this cookie string begin with the name we want?
       if (cookie.substring(0, name.length + 1) == name + '=') {
         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
diff --git a/src/sentry/static/sentry/app/utils/guid.jsx b/src/sentry/static/sentry/app/utils/guid.jsx
index c37886c75d..904e8c3ea3 100644
--- a/src/sentry/static/sentry/app/utils/guid.jsx
+++ b/src/sentry/static/sentry/app/utils/guid.jsx
@@ -1,5 +1,5 @@
 export function uniqueId() {
-  let s4 = () => {
+  const s4 = () => {
     return Math.floor((1 + Math.random()) * 0x10000)
       .toString(16)
       .substring(1);
diff --git a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
index 052340001d..c5f2089fdc 100644
--- a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
+++ b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
@@ -5,7 +5,7 @@ export default function handleXhrErrorResponse(message) {
     if (!resp) return;
     if (!resp.responseJSON) return;
 
-    let {responseJSON} = resp;
+    const {responseJSON} = resp;
 
     // If this is a string then just capture it as error
     if (typeof responseJSON.detail === 'string') {
diff --git a/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx b/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
index 771312e456..5b10fcb100 100644
--- a/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
+++ b/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
@@ -26,13 +26,13 @@ const getFuseMatches = ({value, indices}) => {
     return [{highlight: false, text: value}];
   }
 
-  let strLength = value.length;
-  let result = [];
+  const strLength = value.length;
+  const result = [];
   let prev = [0, -1];
 
   indices.forEach(([start, end]) => {
     // Unhighlighted string before the match
-    let stringBeforeMatch = value.substring(prev[1] + 1, start);
+    const stringBeforeMatch = value.substring(prev[1] + 1, start);
 
     // Only add to result if non-empty string
     if (!!stringBeforeMatch) {
@@ -43,7 +43,7 @@ const getFuseMatches = ({value, indices}) => {
     }
 
     // This is the matched string, which should be highlighted
-    let matchedString = value.substring(start, end + 1);
+    const matchedString = value.substring(start, end + 1);
     result.push({
       highlight: true,
       text: matchedString,
@@ -53,7 +53,7 @@ const getFuseMatches = ({value, indices}) => {
   });
 
   // The rest of the string starting from the last match index
-  let restOfString = value.substring(prev[1] + 1, strLength);
+  const restOfString = value.substring(prev[1] + 1, strLength);
   // Only add to result if non-empty string
   if (!!restOfString) {
     result.push({highlight: false, text: restOfString});
diff --git a/src/sentry/static/sentry/app/utils/localStorage.jsx b/src/sentry/static/sentry/app/utils/localStorage.jsx
index cda7098f10..97464283ed 100644
--- a/src/sentry/static/sentry/app/utils/localStorage.jsx
+++ b/src/sentry/static/sentry/app/utils/localStorage.jsx
@@ -1,9 +1,9 @@
 let functions = {};
 
-let localStorage = window.localStorage;
+const localStorage = window.localStorage;
 
 try {
-  let mod = 'sentry';
+  const mod = 'sentry';
   localStorage.setItem(mod, mod);
   localStorage.removeItem(mod);
 
diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.jsx
index 113cab9282..c860e30ac1 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.jsx
@@ -10,11 +10,11 @@ export function logException(ex, context) {
 }
 
 export function logAjaxError(error, context) {
-  let errorString = error.responseJSON
+  const errorString = error.responseJSON
     ? error.responseJSON.detail || JSON.stringify(error.responseJSON, null, 2)
     : error.responseText ? error.responseText.substr(0, 255) : '<unknown response>'; // occassionally responseText is undefined
 
-  let message = `HTTP ${error.status}: ${errorString}`;
+  const message = `HTTP ${error.status}: ${errorString}`;
   Sentry.withScope(scope => {
     scope.setExtra('context', context);
     Sentry.captureMessage(message);
diff --git a/src/sentry/static/sentry/app/utils/parseApiError.jsx b/src/sentry/static/sentry/app/utils/parseApiError.jsx
index 0a15c573c7..3a6add4850 100644
--- a/src/sentry/static/sentry/app/utils/parseApiError.jsx
+++ b/src/sentry/static/sentry/app/utils/parseApiError.jsx
@@ -1,5 +1,5 @@
 export default function parseApiError(resp) {
-  let {detail} = (resp && resp.responseJSON) || {};
+  const {detail} = (resp && resp.responseJSON) || {};
 
   // return immediately if string
   if (typeof detail === 'string') return detail;
diff --git a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
index 362570ceea..6e649a45e0 100644
--- a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
+++ b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
@@ -3,14 +3,14 @@ export default function parseLinkHeader(header) {
     return {};
   }
 
-  let header_vals = header.split(','),
+  const header_vals = header.split(','),
     links = {};
 
   header_vals.forEach(val => {
-    let match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(
+    const match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(
       val
     );
-    let hasResults = match[3] === 'true' ? true : match[3] === 'false' ? false : null;
+    const hasResults = match[3] === 'true' ? true : match[3] === 'false' ? false : null;
 
     links[match[2]] = {
       href: match[1],
diff --git a/src/sentry/static/sentry/app/utils/recreateRoute.jsx b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
index 89a0b5121b..c238bf6c7a 100644
--- a/src/sentry/static/sentry/app/utils/recreateRoute.jsx
+++ b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
@@ -9,10 +9,10 @@ import replaceRouterParams from 'app/utils/replaceRouterParams';
 //
 // See tests for examples
 export default function recreateRoute(to, {routes, params, location, stepBack}) {
-  let paths = routes.map(({path}) => path || '');
-  let lastRootIndex = findLastIndex(paths, path => path[0] === '/');
+  const paths = routes.map(({path}) => path || '');
+  const lastRootIndex = findLastIndex(paths, path => path[0] === '/');
   let routeIndex;
-  let routeToRoute = typeof to !== 'string';
+  const routeToRoute = typeof to !== 'string';
   if (routeToRoute) {
     routeIndex = routes.indexOf(to) + lastRootIndex;
   }
@@ -25,9 +25,9 @@ export default function recreateRoute(to, {routes, params, location, stepBack})
     baseRoute = baseRoute.slice(0, stepBack);
   }
 
-  let query = typeof location !== 'undefined' && location.search ? location.search : '';
+  const query = typeof location !== 'undefined' && location.search ? location.search : '';
 
-  let fullRoute = `${baseRoute.join('')}${routeToRoute ? '' : to}${query}`;
+  const fullRoute = `${baseRoute.join('')}${routeToRoute ? '' : to}${query}`;
 
   return replaceRouterParams(fullRoute, params);
 }
diff --git a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx b/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
index 83462f6214..784f7ccd69 100644
--- a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
+++ b/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
@@ -1,6 +1,6 @@
 export default function replaceRouterParams(route, params) {
   // parse route params from route
-  let matches = route.match(/:\w+/g);
+  const matches = route.match(/:\w+/g);
 
   if (!matches || !matches.length) {
     return route;
@@ -8,7 +8,7 @@ export default function replaceRouterParams(route, params) {
 
   // replace with current params
   matches.forEach(param => {
-    let paramName = param.slice(1);
+    const paramName = param.slice(1);
     if (typeof params[paramName] === 'undefined') return;
 
     route = route.replace(param, params[paramName]);
diff --git a/src/sentry/static/sentry/app/utils/selectText.jsx b/src/sentry/static/sentry/app/utils/selectText.jsx
index 8150fa2da3..0c72c938bc 100644
--- a/src/sentry/static/sentry/app/utils/selectText.jsx
+++ b/src/sentry/static/sentry/app/utils/selectText.jsx
@@ -2,13 +2,13 @@ export function selectText(node) {
   if (node.type && node.type === 'text') {
     node.select();
   } else if (document.selection) {
-    let range = document.body.createTextRange();
+    const range = document.body.createTextRange();
     range.moveToElementText(node);
     range.select();
   } else if (window.getSelection) {
-    let range = document.createRange();
+    const range = document.createRange();
     range.selectNode(node);
-    let selection = window.getSelection();
+    const selection = window.getSelection();
     selection.removeAllRanges();
     selection.addRange(range);
   }
diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
index a0d0f065c6..cdd93d815b 100644
--- a/src/sentry/static/sentry/app/utils/stream.jsx
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -16,18 +16,18 @@ import _ from 'lodash';
  */
 
 export function queryToObj(queryStr) {
-  let text = [];
+  const text = [];
 
-  let queryItems = queryStr.match(/\S+:"[^"]*"?|\S+/g);
-  let queryObj = _.reduce(
+  const queryItems = queryStr.match(/\S+:"[^"]*"?|\S+/g);
+  const queryObj = _.reduce(
     queryItems,
     (obj, item) => {
-      let index = item.indexOf(':');
+      const index = item.indexOf(':');
       if (index === -1) {
         text.push(item);
       } else {
-        let tagKey = item.slice(0, index);
-        let value = item.slice(index + 1).replace(/^"|"$/g, '');
+        const tagKey = item.slice(0, index);
+        const value = item.slice(index + 1).replace(/^"|"$/g, '');
         obj[tagKey] = value;
       }
       return obj;
@@ -48,9 +48,9 @@ export function queryToObj(queryStr) {
  * (consumable by the Sentry stream HTTP API).
  */
 export function objToQuery(queryObj) {
-  let tags = _.omit(queryObj, '__text');
+  const tags = _.omit(queryObj, '__text');
 
-  let parts = _.map(tags, (value, tagKey) => {
+  const parts = _.map(tags, (value, tagKey) => {
     if (value.indexOf(' ') > -1) value = `"${value}"`;
 
     return `${tagKey}:${value}`;
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index 7d80b6bcdc..391b3ce7b6 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -1,5 +1,5 @@
-let removeFromList = (item, list) => {
-  let idx = list.indexOf(item);
+const removeFromList = (item, list) => {
+  const idx = list.indexOf(item);
 
   if (idx !== -1) {
     list.splice(idx, 1);
@@ -16,7 +16,7 @@ class StreamManager {
   }
 
   trim() {
-    let excess = this.idList.splice(this.limit, this.idList.length - this.limit);
+    const excess = this.idList.splice(this.limit, this.idList.length - this.limit);
     excess.forEach(this.store.remove);
   }
 
@@ -27,7 +27,7 @@ class StreamManager {
     items = items.filter(item => item.hasOwnProperty('id'));
 
     items.forEach(item => removeFromList(item.id, this.idList));
-    let ids = items.map(item => item.id);
+    const ids = items.map(item => item.id);
     this.idList = [].concat(this.idList, ids);
 
     this.trim();
@@ -49,7 +49,7 @@ class StreamManager {
     if (items.length === 0) return this;
 
     items.forEach(item => removeFromList(item.id, this.idList));
-    let ids = items.map(item => item.id);
+    const ids = items.map(item => item.id);
     this.idList = [].concat(ids, this.idList);
 
     this.trim();
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
index 3a36dceb05..0f6732bce4 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
@@ -22,15 +22,15 @@ const withLatestContext = WrappedComponent =>
       mixins: [Reflux.connect(LatestContextStore, 'latestContext')],
 
       render() {
-        let {organizations} = this.props;
-        let {latestContext} = this.state;
-        let {organization, project, lastRoute} = latestContext || {};
+        const {organizations} = this.props;
+        const {latestContext} = this.state;
+        const {organization, project, lastRoute} = latestContext || {};
 
         // Even though org details exists in LatestContextStore,
         // fetch organization from OrganizationsStore so that we can
         // expect consistent data structure because OrganizationsStore has a list
         // of orgs but not full org details
-        let latestOrganization =
+        const latestOrganization =
           organization ||
           (organizations && organizations.length
             ? organizations.find(
diff --git a/src/sentry/static/sentry/app/utils/withPlugins.jsx b/src/sentry/static/sentry/app/utils/withPlugins.jsx
index ad8c5cf743..f72cacfd2f 100644
--- a/src/sentry/static/sentry/app/utils/withPlugins.jsx
+++ b/src/sentry/static/sentry/app/utils/withPlugins.jsx
@@ -27,12 +27,12 @@ const withPlugins = WrappedComponent =>
     },
 
     componentDidUpdate(prevProps, prevState, prevContext) {
-      let organization = this.props.organization || this.getOrganization();
-      let project = this.props.project || this.getProject();
+      const organization = this.props.organization || this.getOrganization();
+      const project = this.props.project || this.getProject();
 
       // Only fetch plugins when a org slug or project slug has changed
-      let prevOrg = prevProps.organization || (prevContext && prevContext.organization);
-      let prevProject = prevProps.project || (prevContext && prevContext.project);
+      const prevOrg = prevProps.organization || (prevContext && prevContext.organization);
+      const prevProject = prevProps.project || (prevContext && prevContext.project);
 
       // If previous org/project is undefined then it means:
       // the HoC has mounted, `fetchPlugins` has been called (via cDM), and
@@ -42,8 +42,8 @@ const withPlugins = WrappedComponent =>
       // e.g. when switching projects via breadcrumbs in settings.
       if (!defined(prevProject) || !defined(prevOrg)) return;
 
-      let isOrgSame = prevOrg.slug === organization.slug;
-      let isProjectSame = prevProject.slug === project.slug;
+      const isOrgSame = prevOrg.slug === organization.slug;
+      const isProjectSame = prevProject.slug === project.slug;
 
       // Don't do anything if org and project are the same
       if (isOrgSame && isProjectSame) return;
@@ -52,8 +52,8 @@ const withPlugins = WrappedComponent =>
     },
 
     fetchPlugins() {
-      let organization = this.props.organization || this.getOrganization();
-      let project = this.props.project || this.getProject();
+      const organization = this.props.organization || this.getOrganization();
+      const project = this.props.project || this.getProject();
 
       if (!project || !organization) return;
 
diff --git a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
index 7d8c69b74b..d440429886 100644
--- a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
+++ b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
@@ -10,7 +10,7 @@ import {t, tct} from 'app/locale';
 
 class AcceptProjectTransfer extends AsyncView {
   getEndpoints() {
-    let query = this.props.location.query;
+    const query = this.props.location.query;
     return [['transferDetails', '/accept-transfer/', {query}]];
   }
 
@@ -26,13 +26,13 @@ class AcceptProjectTransfer extends AsyncView {
         organization: formData.organization,
       },
       success: () => {
-        let orgSlug = formData.organization;
+        const orgSlug = formData.organization;
 
         this.props.router.push(`/${orgSlug}`);
         addSuccessMessage(t('Project successfully transferred'));
       },
       error: error => {
-        let errorMsg =
+        const errorMsg =
           error && error.responseJSON && typeof error.responseJSON.detail === 'string'
             ? error.responseJSON.detail
             : '';
@@ -57,8 +57,8 @@ class AcceptProjectTransfer extends AsyncView {
   }
 
   renderBody() {
-    let {transferDetails} = this.state;
-    let choices = [];
+    const {transferDetails} = this.state;
+    const choices = [];
 
     transferDetails.organizations.forEach(org => {
       choices.push([org.slug, org.slug]);
diff --git a/src/sentry/static/sentry/app/views/admin/adminLayout.jsx b/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
index 0bfffac576..0fe51d5aa8 100644
--- a/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminLayout.jsx
@@ -14,7 +14,7 @@ export default class AdminLayout extends React.Component {
   constructor(props) {
     super(props);
     // Allow injection via getsentry et all
-    let hooksManage = [];
+    const hooksManage = [];
     HookStore.get('admin:sidebar:manage').forEach(cb => {
       hooksManage.push(cb());
     });
diff --git a/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx
index aae51df8ba..6a78c40e8c 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOrganizations.jsx
@@ -20,7 +20,7 @@ class AdminOrganizations extends React.Component {
   };
 
   render() {
-    let columns = [<th>Organization</th>];
+    const columns = [<th>Organization</th>];
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
index 73370ece9a..5e6c479c12 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
@@ -41,7 +41,7 @@ export default createReactClass({
   },
 
   fetchData() {
-    let statNameList = [
+    const statNameList = [
       'client-api.all-versions.responses.2xx',
       'client-api.all-versions.responses.4xx',
       'client-api.all-versions.responses.5xx',
@@ -57,7 +57,7 @@ export default createReactClass({
         },
         success: data => {
           this.setState(prevState => {
-            let rawData = prevState.rawData;
+            const rawData = prevState.rawData;
             rawData[statName] = data;
             return {
               rawData,
@@ -74,7 +74,7 @@ export default createReactClass({
   },
 
   requestFinished() {
-    let {rawData} = this.state;
+    const {rawData} = this.state;
     if (rawData['events.total'] && rawData['events.dropped']) {
       this.processOrgData();
     }
@@ -96,7 +96,7 @@ export default createReactClass({
   },
 
   getChartSeries() {
-    let {rawData} = this.state;
+    const {rawData} = this.state;
     return [
       {
         data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
index 7b78fc7645..bb5085b166 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
@@ -42,7 +42,7 @@ export default createReactClass({
   },
 
   fetchData() {
-    let statNameList = ['events.total', 'events.dropped'];
+    const statNameList = ['events.total', 'events.dropped'];
 
     statNameList.forEach(statName => {
       // query the organization stats via a separate call as its possible the project stats
@@ -56,7 +56,7 @@ export default createReactClass({
         },
         success: data => {
           this.setState(prevState => {
-            let rawData = prevState.rawData;
+            const rawData = prevState.rawData;
             rawData[statName] = data;
             return {
               rawData,
@@ -73,23 +73,23 @@ export default createReactClass({
   },
 
   requestFinished() {
-    let {rawData} = this.state;
+    const {rawData} = this.state;
     if (rawData['events.total'] && rawData['events.dropped']) {
       this.processOrgData();
     }
   },
 
   processOrgData() {
-    let {rawData} = this.state;
+    const {rawData} = this.state;
     let oReceived = 0;
     let oRejected = 0;
-    let sReceived = {};
-    let sRejected = {};
-    let aReceived = [0, 0]; // received, points
+    const sReceived = {};
+    const sRejected = {};
+    const aReceived = [0, 0]; // received, points
     rawData['events.total'].forEach((point, idx) => {
-      let dReceived = point[1];
-      let dRejected = rawData['events.dropped'][idx][1];
-      let ts = point[0];
+      const dReceived = point[1];
+      const dRejected = rawData['events.dropped'][idx][1];
+      const ts = point[0];
       if (sReceived[ts] === undefined) {
         sReceived[ts] = dReceived;
         sRejected[ts] = dRejected;
@@ -125,7 +125,7 @@ export default createReactClass({
   },
 
   getChartSeries() {
-    let {stats} = this.state;
+    const {stats} = this.state;
 
     return [
       {
diff --git a/src/sentry/static/sentry/app/views/admin/adminProjects.jsx b/src/sentry/static/sentry/app/views/admin/adminProjects.jsx
index ad10c9b6a8..0add12f5d6 100644
--- a/src/sentry/static/sentry/app/views/admin/adminProjects.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminProjects.jsx
@@ -26,7 +26,7 @@ class AdminProjects extends React.Component {
   };
 
   render() {
-    let columns = [
+    const columns = [
       <th>Project</th>,
       <th style={{width: 150, textAlign: 'center'}}>Status</th>,
       <th style={{width: 200, textAlign: 'right'}}>Created</th>,
diff --git a/src/sentry/static/sentry/app/views/admin/adminQueue.jsx b/src/sentry/static/sentry/app/views/admin/adminQueue.jsx
index d96a9b382f..b6123a94e6 100644
--- a/src/sentry/static/sentry/app/views/admin/adminQueue.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminQueue.jsx
@@ -42,7 +42,7 @@ export default class AdminQueue extends AsyncView {
   };
 
   renderBody() {
-    let {activeTask, taskList} = this.state;
+    const {activeTask, taskList} = this.state;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/admin/adminQuotas.jsx b/src/sentry/static/sentry/app/views/admin/adminQuotas.jsx
index 15093a40ab..a12f20cd85 100644
--- a/src/sentry/static/sentry/app/views/admin/adminQuotas.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminQuotas.jsx
@@ -19,7 +19,7 @@ export default class AdminQuotas extends AsyncView {
   }
 
   renderBody() {
-    let {config} = this.state;
+    const {config} = this.state;
     return (
       <div>
         <h3>Quotas</h3>
diff --git a/src/sentry/static/sentry/app/views/admin/adminRelays.jsx b/src/sentry/static/sentry/app/views/admin/adminRelays.jsx
index 4b863bed84..97663c1149 100644
--- a/src/sentry/static/sentry/app/views/admin/adminRelays.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminRelays.jsx
@@ -69,7 +69,7 @@ const AdminRelays = createReactClass({
   },
 
   render() {
-    let columns = [
+    const columns = [
       <th style={{width: 350, textAlign: 'left'}}>Relay</th>,
       <th>Public Key</th>,
       <th style={{width: 150, textAlign: 'right'}}>First seen</th>,
diff --git a/src/sentry/static/sentry/app/views/admin/adminSettings.jsx b/src/sentry/static/sentry/app/views/admin/adminSettings.jsx
index 7febcf2a7d..86f7929549 100644
--- a/src/sentry/static/sentry/app/views/admin/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminSettings.jsx
@@ -29,15 +29,15 @@ export default class AdminSettings extends AsyncView {
   }
 
   renderBody() {
-    let {data} = this.state;
+    const {data} = this.state;
 
-    let initialData = {};
-    let fields = {};
-    for (let key of optionsAvailable) {
+    const initialData = {};
+    const fields = {};
+    for (const key of optionsAvailable) {
       // TODO(dcramer): we should not be mutating options
-      let option = data[key] || {field: {}};
+      const option = data[key] || {field: {}};
       if (_.isUndefined(option.value) || option.value === '') {
-        let defn = getOption(key);
+        const defn = getOption(key);
         initialData[key] = defn.defaultValue ? defn.defaultValue() : '';
       } else {
         initialData[key] = option.value;
diff --git a/src/sentry/static/sentry/app/views/admin/adminUsers.jsx b/src/sentry/static/sentry/app/views/admin/adminUsers.jsx
index c3f6382ba4..8a54455fab 100644
--- a/src/sentry/static/sentry/app/views/admin/adminUsers.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminUsers.jsx
@@ -26,7 +26,7 @@ class AdminUsers extends React.Component {
   };
 
   render() {
-    let columns = [
+    const columns = [
       <th>User</th>,
       <th style={{textAlign: 'center', width: 150}}>Joined</th>,
       <th style={{textAlign: 'center', width: 150}}>Last Login</th>,
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index dd07b07c5b..45bc049898 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -49,7 +49,7 @@ const App = createReactClass({
   mixins: [ApiMixin, Reflux.listenTo(ConfigStore, 'onConfigStoreChange')],
 
   getInitialState() {
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
     return {
       loading: false,
       error: false,
@@ -109,13 +109,13 @@ const App = createReactClass({
     $(document).ajaxError(function(evt, jqXHR) {
       // TODO: Need better way of identifying anonymous pages
       //       that don't trigger redirect
-      let pageAllowsAnon = /^\/share\//.test(window.location.pathname);
+      const pageAllowsAnon = /^\/share\//.test(window.location.pathname);
 
       // Ignore error unless it is a 401
       if (!jqXHR || jqXHR.status !== 401 || pageAllowsAnon) return;
 
-      let code = jqXHR?.responseJSON?.detail?.code;
-      let extra = jqXHR?.responseJSON?.detail?.extra;
+      const code = jqXHR?.responseJSON?.detail?.code;
+      const extra = jqXHR?.responseJSON?.detail?.extra;
 
       // 401s can also mean sudo is required or it's a request that is allowed to fail
       // Ignore if these are the cases
@@ -156,7 +156,7 @@ const App = createReactClass({
   },
 
   onConfigStoreChange(config) {
-    let newState = {};
+    const newState = {};
     if (config.needsUpgrade !== undefined) newState.needsUpgrade = config.needsUpgrade;
     if (config.user !== undefined) newState.user = config.user;
     if (Object.keys(newState).length > 0) this.setState(newState);
@@ -189,7 +189,7 @@ const App = createReactClass({
   },
 
   renderBody() {
-    let {needsUpgrade, newsletterConsentPrompt} = this.state;
+    const {needsUpgrade, newsletterConsentPrompt} = this.state;
     if (needsUpgrade) {
       return <InstallWizard onConfigured={this.onConfigured} />;
     }
diff --git a/src/sentry/static/sentry/app/views/asyncView.jsx b/src/sentry/static/sentry/app/views/asyncView.jsx
index 7fb72e5795..691cbba637 100644
--- a/src/sentry/static/sentry/app/views/asyncView.jsx
+++ b/src/sentry/static/sentry/app/views/asyncView.jsx
@@ -9,7 +9,7 @@ export default class AsyncView extends AsyncComponent {
   }
 
   render() {
-    let title = this.getTitle();
+    const title = this.getTitle();
     return (
       <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>
         {this.renderComponent()}
diff --git a/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
index 67e0e2986f..b2214d7e79 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
@@ -56,9 +56,9 @@ const GroupEvents = createReactClass({
   },
 
   handleSearch(query) {
-    let targetQueryParams = {...this.props.location.query};
+    const targetQueryParams = {...this.props.location.query};
     targetQueryParams.query = query;
-    let {groupId, orgId} = this.props.params;
+    const {groupId, orgId} = this.props.params;
 
     browserHistory.push({
       pathname: `/organizations/${orgId}/issues/${groupId}/events/`,
@@ -111,8 +111,8 @@ const GroupEvents = createReactClass({
   },
 
   renderResults() {
-    let group = this.props.group;
-    let tagList = group.tags.filter(tag => tag.key !== 'user') || [];
+    const group = this.props.group;
+    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];
 
     return (
       <EventsTable
diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
index ad053d8ef8..2181b448e8 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
@@ -103,9 +103,9 @@ const GroupEvents = createReactClass({
     }
 
     query = getQueryStringWithoutEnvironment(query);
-    let targetQueryParams = {...this.props.location.query};
+    const targetQueryParams = {...this.props.location.query};
     targetQueryParams.query = query;
-    let {groupId, orgId, projectId} = this.props.params;
+    const {groupId, orgId, projectId} = this.props.params;
 
     browserHistory.push({
       pathname: `/${orgId}/${projectId}/issues/${groupId}/events/`,
@@ -177,8 +177,8 @@ const GroupEvents = createReactClass({
   },
 
   renderResults() {
-    let group = this.props.group;
-    let tagList = group.tags.filter(tag => tag.key !== 'user') || [];
+    const group = this.props.group;
+    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];
 
     return (
       <EventsTable
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx
index ec92191c45..7502a3841b 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx
@@ -123,18 +123,18 @@ const GroupDetailsActions = createReactClass({
   getShareUrl(shareId, absolute) {
     if (!shareId) return '';
 
-    let path = `/share/issue/${shareId}/`;
+    const path = `/share/issue/${shareId}/`;
     if (!absolute) {
       return path;
     }
-    let {host, protocol} = window.location;
+    const {host, protocol} = window.location;
     return `${protocol}//${host}${path}`;
   },
 
   onDelete() {
-    let {group, project} = this.props;
-    let org = this.getOrganization();
-    let loadingIndicator = IndicatorStore.add(t('Delete event..'));
+    const {group, project} = this.props;
+    const org = this.getOrganization();
+    const loadingIndicator = IndicatorStore.add(t('Delete event..'));
 
     this.api.bulkDelete(
       {
@@ -153,9 +153,9 @@ const GroupDetailsActions = createReactClass({
   },
 
   onUpdate(data) {
-    let {group, project} = this.props;
-    let org = this.getOrganization();
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {group, project} = this.props;
+    const org = this.getOrganization();
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
     this.api.bulkUpdate(
       {
@@ -173,8 +173,8 @@ const GroupDetailsActions = createReactClass({
   },
 
   onShare(shared) {
-    let {group, project} = this.props;
-    let org = this.getOrganization();
+    const {group, project} = this.props;
+    const org = this.getOrganization();
     this.setState({shareBusy: true});
 
     // not sure why this is a bulkUpdate
@@ -207,10 +207,10 @@ const GroupDetailsActions = createReactClass({
   },
 
   onDiscard() {
-    let {group, project} = this.props;
-    let org = this.getOrganization();
-    let id = uniqueId();
-    let loadingIndicator = IndicatorStore.add(t('Discarding event..'));
+    const {group, project} = this.props;
+    const org = this.getOrganization();
+    const id = uniqueId();
+    const loadingIndicator = IndicatorStore.add(t('Discarding event..'));
 
     GroupActions.discard(id, group.id);
 
@@ -231,19 +231,19 @@ const GroupDetailsActions = createReactClass({
   },
 
   render() {
-    let {group, project} = this.props;
-    let org = this.getOrganization();
-    let orgFeatures = new Set(org.features);
+    const {group, project} = this.props;
+    const org = this.getOrganization();
+    const orgFeatures = new Set(org.features);
 
     let bookmarkClassName = 'group-bookmark btn btn-default btn-sm';
     if (group.isBookmarked) {
       bookmarkClassName += ' active';
     }
 
-    let hasRelease = new Set(project.features).has('releases');
+    const hasRelease = new Set(project.features).has('releases');
 
-    let isResolved = group.status === 'resolved';
-    let isIgnored = group.status === 'ignored';
+    const isResolved = group.status === 'resolved';
+    const isIgnored = group.status === 'ignored';
 
     return (
       <div className="group-actions">
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/eventToolbar.jsx
index 5497d5d973..1e25682a13 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/eventToolbar.jsx
@@ -13,11 +13,11 @@ import FileSize from 'app/components/fileSize';
 import Tooltip from 'app/components/tooltip';
 import {t} from 'app/locale';
 
-let formatDateDelta = (reference, observed) => {
-  let duration = moment.duration(Math.abs(+observed - +reference));
-  let hours = Math.floor(+duration / (60 * 60 * 1000));
-  let minutes = duration.minutes();
-  let results = [];
+const formatDateDelta = (reference, observed) => {
+  const duration = moment.duration(Math.abs(+observed - +reference));
+  const hours = Math.floor(+duration / (60 * 60 * 1000));
+  const minutes = duration.minutes();
+  const results = [];
 
   if (hours) {
     results.push(`${hours} hour${hours != 1 ? 's' : ''}`);
@@ -34,7 +34,7 @@ let formatDateDelta = (reference, observed) => {
   return results.join(', ');
 };
 
-let GroupEventToolbar = createReactClass({
+const GroupEventToolbar = createReactClass({
   displayName: 'GroupEventToolbar',
 
   propTypes: {
@@ -49,11 +49,11 @@ let GroupEventToolbar = createReactClass({
   },
 
   getDateTooltip() {
-    let evt = this.props.event;
-    let user = ConfigStore.get('user');
-    let options = user ? user.options : {};
-    let format = options.clock24Hours ? 'HH:mm:ss z' : 'LTS z';
-    let dateCreated = moment(evt.dateCreated);
+    const evt = this.props.event;
+    const user = ConfigStore.get('user');
+    const options = user ? user.options : {};
+    const format = options.clock24Hours ? 'HH:mm:ss z' : 'LTS z';
+    const dateCreated = moment(evt.dateCreated);
     let resp =
       '<dl class="flat" style="text-align:left;margin:0;min-width:200px">' +
       '<dt>Occurred</dt>' +
@@ -63,7 +63,7 @@ let GroupEventToolbar = createReactClass({
       dateCreated.format(format) +
       '</dd>';
     if (evt.dateReceived) {
-      let dateReceived = moment(evt.dateReceived);
+      const dateReceived = moment(evt.dateReceived);
       resp +=
         '<dt>Received</dt>' +
         '<dd>' +
@@ -80,12 +80,12 @@ let GroupEventToolbar = createReactClass({
   },
 
   render() {
-    let evt = this.props.event;
+    const evt = this.props.event;
 
-    let {orgId, projectId} = this.props;
-    let groupId = this.props.group.id;
+    const {orgId, projectId} = this.props;
+    const groupId = this.props.group.id;
 
-    let eventNavNodes = [
+    const eventNavNodes = [
       evt.previousEventID ? (
         <Link
           key="oldest"
@@ -144,13 +144,13 @@ let GroupEventToolbar = createReactClass({
 
     // TODO: possible to define this as a route in react-router, but without a corresponding
     //       React component?
-    let jsonUrl = `/${orgId}/${projectId}/issues/${groupId}/events/${evt.id}/json/`;
-    let style = {
+    const jsonUrl = `/${orgId}/${projectId}/issues/${groupId}/events/${evt.id}/json/`;
+    const style = {
       borderBottom: '1px dotted #dfe3ea',
     };
 
-    let latencyThreshold = 30 * 60 * 1000; // 30 minutes
-    let isOverLatencyThreshold =
+    const latencyThreshold = 30 * 60 * 1000; // 30 minutes
+    const isOverLatencyThreshold =
       evt.dateReceived &&
       Math.abs(+moment(evt.dateReceived) - +moment(evt.dateCreated)) > latencyThreshold;
 
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
index 5efe7e8137..6246f46d79 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupActivity.jsx
@@ -32,8 +32,8 @@ class GroupActivityItem extends React.Component {
   };
 
   render() {
-    let {author, item, orgId, projectId} = this.props;
-    let {data} = item;
+    const {author, item, orgId, projectId} = this.props;
+    const {data} = item;
 
     switch (item.type) {
       case 'note':
@@ -166,7 +166,7 @@ class GroupActivityItem extends React.Component {
         let assignee;
 
         if (data.assigneeType == 'team') {
-          let team = TeamStore.getById(data.assignee);
+          const team = TeamStore.getById(data.assignee);
           assignee = team ? team.slug : '<unknown-team>';
 
           return t('%(author)s assigned this issue to #%(assignee)s', {
@@ -214,10 +214,10 @@ const GroupActivity = createReactClass({
   mixins: [ApiMixin],
 
   onNoteDelete(item) {
-    let {group} = this.props;
+    const {group} = this.props;
 
     // Optimistically remove from UI
-    let index = GroupStore.removeActivity(group.id, item.id);
+    const index = GroupStore.removeActivity(group.id, item.id);
     if (index === -1) {
       // I dunno, the id wasn't found in the GroupStore
       return;
@@ -239,12 +239,12 @@ const GroupActivity = createReactClass({
   },
 
   render() {
-    let group = this.props.group;
-    let me = ConfigStore.get('user');
-    let memberList = MemberListStore.getAll();
+    const group = this.props.group;
+    const me = ConfigStore.get('user');
+    const memberList = MemberListStore.getAll();
 
-    let children = group.activity.map((item, itemIdx) => {
-      let authorName = item.user ? item.user.name : 'Sentry';
+    const children = group.activity.map((item, itemIdx) => {
+      const authorName = item.user ? item.user.name : 'Sentry';
 
       if (item.type === 'note') {
         return (
@@ -262,7 +262,7 @@ const GroupActivity = createReactClass({
           />
         );
       } else {
-        let avatar = item.user ? (
+        const avatar = item.user ? (
           <Avatar user={item.user} size={18} className="activity-avatar" />
         ) : (
           <div className="activity-avatar avatar sentry">
@@ -270,7 +270,7 @@ const GroupActivity = createReactClass({
           </div>
         );
 
-        let author = {
+        const author = {
           name: authorName,
           avatar,
         };
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
index 3d8562261e..0c0a51b50d 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
@@ -89,7 +89,7 @@ const GroupDetails = createReactClass({
         // `formatPattern` isn't actually exported until `react-router` 2.0.1:
         // https://github.com/reactjs/react-router/blob/v2.0.1/modules/index.js#L25
         if (this.props.params.groupId != data.id) {
-          let location = this.props.location;
+          const location = this.props.location;
           return void browserHistory.push(
             location.pathname.replace(
               `/issues/${this.props.params.groupId}/`,
@@ -100,7 +100,7 @@ const GroupDetails = createReactClass({
           );
         }
 
-        let project = this.props.project || ProjectsStore.getById(data.project.id);
+        const project = this.props.project || ProjectsStore.getById(data.project.id);
 
         if (!project) {
           Sentry.withScope(scope => {
@@ -135,9 +135,9 @@ const GroupDetails = createReactClass({
   },
 
   onGroupChange(itemIds) {
-    let id = this.props.params.groupId;
+    const id = this.props.params.groupId;
     if (itemIds.has(id)) {
-      let group = GroupStore.get(id);
+      const group = GroupStore.get(id);
       if (group) {
         if (group.stale) {
           this.fetchData();
@@ -151,13 +151,13 @@ const GroupDetails = createReactClass({
   },
 
   getGroupDetailsEndpoint() {
-    let id = this.props.params.groupId;
+    const id = this.props.params.groupId;
 
     return '/issues/' + id + '/';
   },
 
   getTitle() {
-    let group = this.state.group;
+    const group = this.state.group;
 
     if (!group) return 'Sentry';
 
@@ -180,8 +180,8 @@ const GroupDetails = createReactClass({
   },
 
   render() {
-    let params = this.props.params;
-    let {group, project} = this.state;
+    const params = this.props.params;
+    const {group, project} = this.state;
 
     if (this.state.error) {
       switch (this.state.errorType) {
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/index.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/index.jsx
index 3773a18a57..80df43cb65 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/index.jsx
@@ -17,7 +17,7 @@ const GroupMergedView = createReactClass({
   mixins: [ApiMixin, Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
 
   getInitialState() {
-    let queryParams = this.props.location.query;
+    const queryParams = this.props.location.query;
     return {
       mergedItems: [],
       loading: true,
@@ -35,7 +35,7 @@ const GroupMergedView = createReactClass({
       nextProps.params.groupId !== this.props.params.groupId ||
       nextProps.location.search !== this.props.location.search
     ) {
-      let queryParams = nextProps.location.query;
+      const queryParams = nextProps.location.query;
       this.setState(
         {
           query: queryParams.query,
@@ -57,8 +57,8 @@ const GroupMergedView = createReactClass({
   },
 
   getEndpoint(type = 'hashes') {
-    let params = this.props.params;
-    let queryParams = {
+    const params = this.props.params;
+    const queryParams = {
       ...this.props.location.query,
       limit: 50,
       query: this.state.query,
@@ -91,9 +91,9 @@ const GroupMergedView = createReactClass({
   },
 
   render() {
-    let isLoading = this.state.loading;
-    let isError = this.state.error && !isLoading;
-    let isLoadedSuccessfully = !isError && !isLoading;
+    const isLoading = this.state.loading;
+    const isError = this.state.error && !isLoading;
+    const isLoadedSuccessfully = !isError && !isLoading;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx
index 114438fa88..b315242875 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx
@@ -39,8 +39,8 @@ const MergedItem = createReactClass({
   onGroupingChange({unmergeState}) {
     if (!unmergeState) return;
 
-    let {fingerprint} = this.props;
-    let stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);
+    const {fingerprint} = this.props;
+    const stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);
     if (!stateForId) return;
 
     Object.keys(stateForId).forEach(key => {
@@ -53,7 +53,7 @@ const MergedItem = createReactClass({
   },
 
   handleToggleEvents() {
-    let {fingerprint} = this.props;
+    const {fingerprint} = this.props;
     GroupingActions.toggleCollapseFingerprint(fingerprint);
   },
 
@@ -63,7 +63,7 @@ const MergedItem = createReactClass({
   },
 
   handleToggle(e) {
-    let {disabled, fingerprint, event} = this.props;
+    const {disabled, fingerprint, event} = this.props;
 
     if (disabled || this.state.busy) return;
 
@@ -77,8 +77,8 @@ const MergedItem = createReactClass({
   },
 
   render() {
-    let {disabled, event, fingerprint} = this.props;
-    let checkboxDisabled = disabled || this.state.disabled;
+    const {disabled, event, fingerprint} = this.props;
+    const checkboxDisabled = disabled || this.state.disabled;
 
     // `event` can be null if last event w/ fingerprint is not within retention period
     return (
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedList.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedList.jsx
index 9795122b86..59b7926bf1 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedList.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedList.jsx
@@ -29,9 +29,9 @@ class MergedList extends React.Component {
   };
 
   render() {
-    let {items, pageLinks, onToggleCollapse, onUnmerge} = this.props;
-    let itemsWithLatestEvent = items.filter(({latestEvent}) => !!latestEvent);
-    let hasResults = itemsWithLatestEvent.length > 0;
+    const {items, pageLinks, onToggleCollapse, onUnmerge} = this.props;
+    const itemsWithLatestEvent = items.filter(({latestEvent}) => !!latestEvent);
+    const hasResults = itemsWithLatestEvent.length > 0;
 
     if (!hasResults) {
       return <Panel>{this.renderEmpty()}</Panel>;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx
index d5f2df6e69..25e20e7344 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx
@@ -26,7 +26,7 @@ const MergedToolbar = createReactClass({
   mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
 
   getInitialState() {
-    let {
+    const {
       unmergeList,
       unmergeLastCollapsed,
       unmergeDisabled,
@@ -42,7 +42,7 @@ const MergedToolbar = createReactClass({
   },
 
   onGroupingUpdate(updateObj) {
-    let allowedKeys = [
+    const allowedKeys = [
       'unmergeLastCollapsed',
       'unmergeDisabled',
       'unmergeList',
@@ -53,14 +53,16 @@ const MergedToolbar = createReactClass({
   },
 
   handleShowDiff(e) {
-    let {groupId} = this.props;
-    let entries = this.state.unmergeList.entries();
+    const {groupId} = this.props;
+    const entries = this.state.unmergeList.entries();
 
     // `unmergeList` should only have 2 items in map
     if (this.state.unmergeList.size !== 2) return;
 
     // only need eventId, not fingerprint
-    let [baseEventId, targetEventId] = Array.from(entries).map(([, eventId]) => eventId);
+    const [baseEventId, targetEventId] = Array.from(entries).map(
+      ([, eventId]) => eventId
+    );
 
     openDiffModal({
       baseIssueId: groupId,
@@ -73,8 +75,8 @@ const MergedToolbar = createReactClass({
   },
 
   render() {
-    let {onUnmerge, onToggleCollapse} = this.props;
-    let unmergeCount = (this.state.unmergeList && this.state.unmergeList.size) || 0;
+    const {onUnmerge, onToggleCollapse} = this.props;
+    const unmergeCount = (this.state.unmergeList && this.state.unmergeList.size) || 0;
 
     return (
       <StyledToolbar>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/index.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/index.jsx
index db82de1ee3..d6ff04b8b5 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/index.jsx
@@ -64,9 +64,9 @@ const GroupGroupingView = createReactClass({
         error: typeof error !== 'undefined' ? error : false,
       });
     } else if (mergedParent && mergedParent !== this.props.params.groupId) {
-      let {params} = this.props;
+      const {params} = this.props;
       // Merge success, since we can't specify target, we need to redirect to new parent
-      let baseUrl = params.projectId
+      const baseUrl = params.projectId
         ? `/${params.orgId}/${params.projectId}/issues/`
         : `/organizations/${params.orgId}/issues/`;
       browserHistory.push(`${baseUrl}${mergedParent}/similar/`);
@@ -74,8 +74,8 @@ const GroupGroupingView = createReactClass({
   },
 
   getEndpoint(type = 'similar') {
-    let params = this.props.params;
-    let queryParams = {
+    const params = this.props.params;
+    const queryParams = {
       ...this.props.location.query,
       limit: 50,
     };
@@ -93,7 +93,7 @@ const GroupGroupingView = createReactClass({
       error: false,
     });
 
-    let reqs = [];
+    const reqs = [];
 
     if (this.hasSimilarityFeature()) {
       reqs.push({
@@ -118,11 +118,11 @@ const GroupGroupingView = createReactClass({
   },
 
   render() {
-    let {orgId, groupId} = this.props.params;
-    let isLoading = this.state.loading;
-    let isError = this.state.error && !isLoading;
-    let isLoadedSuccessfully = !isError && !isLoading;
-    let hasSimilarItems =
+    const {orgId, groupId} = this.props.params;
+    const isLoading = this.state.loading;
+    const isError = this.state.error && !isLoading;
+    const isLoadedSuccessfully = !isError && !isLoading;
+    const hasSimilarItems =
       this.hasSimilarityFeature() &&
       (this.state.similarItems.length >= 0 ||
         this.state.filteredSimilarItems.length >= 0) &&
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarItem.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarItem.jsx
index 9a751d1f47..4a00ccc685 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarItem.jsx
@@ -48,7 +48,7 @@ const SimilarIssueItem = createReactClass({
   },
 
   onGroupingUpdate({mergeState}) {
-    let {issue} = this.props;
+    const {issue} = this.props;
     if (mergeState) {
       const stateForId = mergeState.has(issue.id) && mergeState.get(issue.id);
       if (stateForId) {
@@ -64,7 +64,7 @@ const SimilarIssueItem = createReactClass({
   },
 
   handleToggle(e) {
-    let {issue} = this.props;
+    const {issue} = this.props;
 
     // clicking anywhere in the row will toggle the checkbox
     if (!this.state.busy) {
@@ -73,7 +73,7 @@ const SimilarIssueItem = createReactClass({
   },
 
   handleShowDiff(e) {
-    let {groupId, issue} = this.props;
+    const {groupId, issue} = this.props;
     openDiffModal({
       baseIssueId: groupId,
       targetIssueId: issue.id,
@@ -88,13 +88,13 @@ const SimilarIssueItem = createReactClass({
   },
 
   render() {
-    let {aggregate, scoresByInterface, issue} = this.props;
+    const {aggregate, scoresByInterface, issue} = this.props;
 
     if (!this.state.visible) {
       return null;
     }
 
-    let cx = classNames('group', 'similar-issue', {
+    const cx = classNames('group', 'similar-issue', {
       isResolved: issue.status === 'resolved',
       busy: this.state.busy,
     });
@@ -134,10 +134,10 @@ const SimilarIssueItem = createReactClass({
           <Count className="similar-score-column" value={issue.count} />
 
           {similarInterfaces.map(interfaceName => {
-            let avgScore = aggregate[interfaceName];
-            let scoreList = scoresByInterface[interfaceName] || [];
+            const avgScore = aggregate[interfaceName];
+            const scoreList = scoresByInterface[interfaceName] || [];
             // Check for valid number (and not NaN)
-            let scoreValue =
+            const scoreValue =
               typeof avgScore === 'number' && !Number.isNaN(avgScore) ? avgScore : 0;
 
             return (
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarList.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarList.jsx
index 27ff1447ea..3135b607d1 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarList.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarList.jsx
@@ -55,10 +55,10 @@ class SimilarList extends React.Component {
   };
 
   render() {
-    let {groupId, items, filteredItems, pageLinks, onMerge} = this.props;
-    let hasHiddenItems = !!filteredItems.length;
-    let hasResults = items.length > 0 || hasHiddenItems;
-    let itemsWithFiltered = items.concat(
+    const {groupId, items, filteredItems, pageLinks, onMerge} = this.props;
+    const hasHiddenItems = !!filteredItems.length;
+    const hasResults = items.length > 0 || hasHiddenItems;
+    const itemsWithFiltered = items.concat(
       (this.state.showAllItems && filteredItems) || []
     );
 
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarToolbar.jsx
index f452646026..fbe7e12373 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupSimilar/similarToolbar.jsx
@@ -36,7 +36,7 @@ const SimilarToolbar = createReactClass({
   },
 
   render() {
-    let {onMerge} = this.props;
+    const {onMerge} = this.props;
     return (
       <Toolbar className="similar-toolbar">
         <SpreadLayout responsive>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupTagValues.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupTagValues.jsx
index a11530821d..13d743ee6c 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupTagValues.jsx
@@ -96,13 +96,16 @@ const GroupTagValues = createReactClass({
       return <LoadingError onRetry={this.fetchData} />;
     }
 
-    let {orgId, projectId} = this.props.params;
-    let tagKey = this.state.tagKey;
+    const {orgId, projectId} = this.props.params;
+    const tagKey = this.state.tagKey;
 
-    let sortedTagValueList = sortBy(this.state.tagValueList, property('count')).reverse();
+    const sortedTagValueList = sortBy(
+      this.state.tagValueList,
+      property('count')
+    ).reverse();
 
-    let children = sortedTagValueList.map((tagValue, tagValueIdx) => {
-      let pct = percent(tagValue.count, tagKey.totalValues).toFixed(2);
+    const children = sortedTagValueList.map((tagValue, tagValueIdx) => {
+      const pct = percent(tagValue.count, tagKey.totalValues).toFixed(2);
       return (
         <tr key={tagValueIdx}>
           <td className="bar-cell">
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx
index d172fce801..296bc5db25 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx
@@ -89,8 +89,8 @@ class GroupTags extends React.Component {
 
     if (this.state.tagList) {
       children = this.state.tagList.map((tag, tagIdx) => {
-        let valueChildren = tag.topValues.map((tagValue, tagValueIdx) => {
-          let pct = percent(tagValue.count, tag.totalValues);
+        const valueChildren = tag.topValues.map((tagValue, tagValueIdx) => {
+          const pct = percent(tagValue.count, tag.totalValues);
           return (
             <li key={tagValueIdx}>
               <Link
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/header.jsx
index dfa5724a42..bb18677fa5 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/header.jsx
@@ -36,9 +36,9 @@ const GroupHeader = createReactClass({
   mixins: [ApiMixin, OrganizationState],
 
   onToggleMute() {
-    let group = this.props.group;
-    let org = this.context.organization;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const group = this.props.group;
+    const org = this.context.organization;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
     this.api.bulkUpdate(
       {
@@ -58,8 +58,8 @@ const GroupHeader = createReactClass({
   },
 
   getMessage() {
-    let data = this.props.group;
-    let metadata = data.metadata;
+    const data = this.props.group;
+    const metadata = data.metadata;
     switch (data.type) {
       case 'error':
         return metadata.value;
@@ -71,9 +71,9 @@ const GroupHeader = createReactClass({
   },
 
   render() {
-    let {project, group, params} = this.props;
-    let projectFeatures = new Set(project ? project.features : []);
-    let userCount = group.userCount;
+    const {project, group, params} = this.props;
+    const projectFeatures = new Set(project ? project.features : []);
+    const userCount = group.userCount;
 
     let className = 'group-detail';
 
@@ -90,13 +90,13 @@ const GroupHeader = createReactClass({
       className += ' isResolved';
     }
 
-    let groupId = group.id;
-    let orgId = this.context.organization.slug;
-    let message = this.getMessage();
+    const groupId = group.id;
+    const orgId = this.context.organization.slug;
+    const message = this.getMessage();
 
-    let hasSimilarView = projectFeatures.has('similarity-view');
+    const hasSimilarView = projectFeatures.has('similarity-view');
 
-    let baseUrl = params.projectId
+    const baseUrl = params.projectId
       ? `/${orgId}/${params.projectId}/issues/`
       : `/organizations/${orgId}/issues/`;
 
@@ -185,8 +185,8 @@ const GroupHeader = createReactClass({
           <ListLink
             to={`${baseUrl}${groupId}/`}
             isActive={() => {
-              let rootGroupPath = `${baseUrl}${groupId}/`;
-              let pathname = this.context.location.pathname;
+              const rootGroupPath = `${baseUrl}${groupId}/`;
+              const pathname = this.context.location.pathname;
 
               // Because react-router 1.0 removes router.isActive(route)
               return pathname === rootGroupPath || /events\/\w+\/$/.test(pathname);
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index ce2632a6bb..eca8318238 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -28,7 +28,7 @@ export default class InstallWizard extends AsyncView {
   }
 
   renderFormFields() {
-    let options = this.state.data;
+    const options = this.state.data;
 
     let missingOptions = new Set(
       Object.keys(options).filter(option => !options[option].field.isSet)
@@ -43,10 +43,10 @@ export default class InstallWizard extends AsyncView {
     }
 
     // A mapping of option name to Field object
-    let fields = {};
+    const fields = {};
 
-    for (let key of missingOptions) {
-      let option = options[key];
+    for (const key of missingOptions) {
+      const option = options[key];
       if (option.field.disabled) {
         continue;
       }
@@ -57,10 +57,10 @@ export default class InstallWizard extends AsyncView {
   }
 
   getInitialData() {
-    let options = this.state.data;
-    let data = {};
+    const options = this.state.data;
+    const data = {};
     Object.keys(options).forEach(optionName => {
-      let option = options[optionName];
+      const option = options[optionName];
       if (!option.field.isSet) {
         data[optionName] = option.value;
       }
@@ -73,7 +73,7 @@ export default class InstallWizard extends AsyncView {
   }
 
   render() {
-    let version = ConfigStore.get('version');
+    const version = ConfigStore.get('version');
     return (
       <DocumentTitle title={this.getTitle()}>
         <div className="app">
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index 0f2a9cb43c..f1dfc1e278 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -28,7 +28,7 @@ const Configure = createReactClass({
   },
 
   componentWillMount() {
-    let {platform} = this.props.params;
+    const {platform} = this.props.params;
     //redirect if platform is not known.
     if (!platform || platform === 'other') {
       this.redirectToNeutralDocs();
@@ -40,9 +40,9 @@ const Configure = createReactClass({
   },
 
   componentDidMount() {
-    let {organization} = this.context;
-    let {params} = this.props;
-    let data = {
+    const {organization} = this.context;
+    const {params} = this.props;
+    const data = {
       project: params.projectId,
       platform: params.platform,
     };
@@ -73,7 +73,7 @@ const Configure = createReactClass({
 
   sentRealEvent(data) {
     if (data.length == 1) {
-      let firstError = data[0];
+      const firstError = data[0];
       return !firstError.message.includes('This is an example');
     } else {
       return data.length > 1;
@@ -81,14 +81,14 @@ const Configure = createReactClass({
   },
 
   redirectUrl() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
-    let url = `/${orgId}/${projectId}/#welcome`;
+    const url = `/${orgId}/${projectId}/#welcome`;
     browserHistory.push(url);
   },
 
   fetchEventData() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     this.api.request(`/projects/${orgId}/${projectId}/events/`, {
       method: 'GET',
@@ -109,8 +109,8 @@ const Configure = createReactClass({
   },
 
   submit() {
-    let {projectId} = this.props.params;
-    let {organization} = this.context;
+    const {projectId} = this.props.params;
+    const {organization} = this.context;
     analytics('onboarding.complete', {project: projectId});
     amplitude(
       'Completed Onboarding Installation Instructions',
@@ -121,10 +121,10 @@ const Configure = createReactClass({
   },
 
   redirectToNeutralDocs() {
-    let {orgId, projectId} = this.props.params;
-    let {organization} = this.context;
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
 
-    let url = new Set(organization.features).has('sentry10')
+    const url = new Set(organization.features).has('sentry10')
       ? `/organizations/${orgId}/projects/${projectId}/getting-started/`
       : `/${orgId}/${projectId}/getting-started/`;
 
@@ -132,8 +132,8 @@ const Configure = createReactClass({
   },
 
   render() {
-    let {orgId, projectId} = this.props.params;
-    let {hasSentRealEvent} = this.state;
+    const {orgId, projectId} = this.props.params;
+    const {hasSentRealEvent} = this.state;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
index 6bab753870..2e93b70644 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
@@ -12,7 +12,7 @@ class Waiting extends React.Component {
   };
 
   render() {
-    let {hasEvent} = this.props;
+    const {hasEvent} = this.props;
 
     return (
       <div className="awaiting-event">
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
index 28d5bf8686..49b3ec8d65 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -45,12 +45,12 @@ const CreateProject = createReactClass({
   },
 
   getInitialState() {
-    let {teams} = this.getOrganization();
-    let accessTeams = teams.filter(team => team.hasAccess);
-    let {query} = this.context.location;
+    const {teams} = this.getOrganization();
+    const accessTeams = teams.filter(team => team.hasAccess);
+    const {query} = this.context.location;
 
-    let team = query.team || (accessTeams.length && accessTeams[0].slug);
-    let platform = getPlatformName(query.platform) ? query.platform : '';
+    const team = query.team || (accessTeams.length && accessTeams[0].slug);
+    const platform = getPlatformName(query.platform) ? query.platform : '';
 
     return {
       loading: true,
@@ -63,7 +63,7 @@ const CreateProject = createReactClass({
   },
 
   onTeamCreated() {
-    let {router} = this.context;
+    const {router} = this.context;
     // After team gets created we need to force OrganizationContext to basically remount
     router.replace({
       pathname: router.location.pathname,
@@ -72,9 +72,9 @@ const CreateProject = createReactClass({
   },
 
   navigateNextUrl(data) {
-    let organization = this.getOrganization();
+    const organization = this.getOrganization();
 
-    let url =
+    const url =
       HookStore.get('utils:onboarding-survey-url').length &&
       organization.projects.length === 0
         ? HookStore.get('utils:onboarding-survey-url')[0](data, organization)
@@ -85,9 +85,9 @@ const CreateProject = createReactClass({
   },
 
   createProject() {
-    let {router} = this.context;
-    let {slug} = this.getOrganization();
-    let {projectName, platform, team, inFlight} = this.state;
+    const {router} = this.context;
+    const {slug} = this.getOrganization();
+    const {projectName, platform, team, inFlight} = this.state;
 
     //prevent double-trigger
     if (inFlight) return;
@@ -136,10 +136,10 @@ const CreateProject = createReactClass({
   },
 
   render() {
-    let {projectName, platform, error} = this.state;
-    let organization = this.getOrganization();
-    let {teams} = organization;
-    let accessTeams = teams.filter(team => team.hasAccess);
+    const {projectName, platform, error} = this.state;
+    const organization = this.getOrganization();
+    const {teams} = organization;
+    const accessTeams = teams.filter(team => team.hasAccess);
 
     const stepProps = {
       next: this.createProject,
diff --git a/src/sentry/static/sentry/app/views/onboarding/progress.jsx b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
index 7a7bd58d67..ad9081a27b 100644
--- a/src/sentry/static/sentry/app/views/onboarding/progress.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
@@ -23,9 +23,9 @@ const ProgressNodes = createReactClass({
   },
 
   componentDidMount() {
-    let {organization} = this.context;
-    let user = ConfigStore.get('user');
-    let step = this.inferStep();
+    const {organization} = this.context;
+    const user = ConfigStore.get('user');
+    const step = this.inferStep();
 
     if (step === 1) {
       analytics('onboarding.create_project_viewed', {
@@ -41,9 +41,9 @@ const ProgressNodes = createReactClass({
   steps: Object.keys(onboardingSteps),
 
   getAsset(type) {
-    let {organization} = this.context;
+    const {organization} = this.context;
 
-    let hook =
+    const hook =
       HookStore.get('sidebar:onboarding-assets').length &&
       HookStore.get('sidebar:onboarding-assets')[0]({organization});
 
@@ -60,9 +60,9 @@ const ProgressNodes = createReactClass({
   },
 
   inferStep() {
-    let {pathname} = this.context.location;
-    let {params} = this.props;
-    let steps = this.getAsset('steps');
+    const {pathname} = this.context.location;
+    const {params} = this.props;
+    const steps = this.getAsset('steps');
 
     if (!params.projectId) return steps.project;
     if (params.projectId && pathname.indexOf('/configure/') === -1) return steps.survey;
@@ -73,7 +73,7 @@ const ProgressNodes = createReactClass({
   node(stepKey, stepIndex) {
     const done = stepIndex < this.inferStep();
     const active = stepIndex === this.inferStep();
-    let descriptions = this.getAsset('descriptions');
+    const descriptions = this.getAsset('descriptions');
 
     return (
       <Node key={stepIndex} done={done} active={active} data-test-id="node">
@@ -86,9 +86,9 @@ const ProgressNodes = createReactClass({
   },
 
   render() {
-    let config = ConfigStore.getConfig();
-    let {slug} = this.context.organization;
-    let steps = Object.keys(this.getAsset('steps'));
+    const config = ConfigStore.getConfig();
+    const {slug} = this.context.organization;
+    const steps = Object.keys(this.getAsset('steps'));
     return (
       <div className="onboarding-sidebar">
         <div className="sentry-flag">
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
index 559df31d23..595c668fa6 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/index.jsx
@@ -49,7 +49,7 @@ class OnboardingProject extends React.Component {
   };
 
   renderTeamPicker = () => {
-    let {team, teams, setTeam} = this.props;
+    const {team, teams, setTeam} = this.props;
     return (
       <div className="new-project-team">
         <PageHeading withMargins>{t('Team') + ':'}</PageHeading>
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx b/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx
index 78dd437d55..a7b7756dd8 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/platformCard.jsx
@@ -12,7 +12,7 @@ class PlatformCard extends React.Component {
   };
 
   render() {
-    let platform = flattenedPlatforms.find(p => p.id === this.props.platform);
+    const platform = flattenedPlatforms.find(p => p.id === this.props.platform);
 
     return (
       <span
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx b/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx
index 31278f5032..1dd047f3f3 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/platformiconTile.jsx
@@ -8,7 +8,7 @@ class PlatformiconTile extends React.Component {
   };
 
   render() {
-    let {platform, className} = this.props;
+    const {platform, className} = this.props;
 
     return (
       <li
diff --git a/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx b/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx
index 5fdb71b2d3..6f76ad99fd 100644
--- a/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/project/platformpicker.jsx
@@ -39,13 +39,13 @@ class PlatformPicker extends React.Component {
   }, 300);
 
   getPlatformList = () => {
-    let subsetMatch = ({id}) => id.includes(this.state.filter.toLowerCase());
+    const subsetMatch = ({id}) => id.includes(this.state.filter.toLowerCase());
     let filtered;
 
     if (this.state.filter) {
       filtered = flattenedPlatforms.filter(subsetMatch);
     } else {
-      let {tab} = this.state;
+      const {tab} = this.state;
       const currentCategory = categoryList.find(({id}) => id === tab);
       const tabSubset = flattenedPlatforms.filter(platform => {
         return tab === 'all' || currentCategory.platforms.includes(platform.id);
@@ -61,8 +61,8 @@ class PlatformPicker extends React.Component {
   };
 
   render() {
-    let {filter} = this.state;
-    let filtered = this.getPlatformList();
+    const {filter} = this.state;
+    const filtered = this.getPlatformList();
     return (
       <div className="platform-picker">
         <NavTabs>
diff --git a/src/sentry/static/sentry/app/views/onboarding/utils.js b/src/sentry/static/sentry/app/views/onboarding/utils.js
index 7bad985e57..40226af492 100644
--- a/src/sentry/static/sentry/app/views/onboarding/utils.js
+++ b/src/sentry/static/sentry/app/views/onboarding/utils.js
@@ -112,7 +112,7 @@ const stepDescriptions = {
 };
 
 function getPlatformName(platform) {
-  let platformData = flattenedPlatforms.find(({id}) => platform == id);
+  const platformData = flattenedPlatforms.find(({id}) => platform == id);
   return platformData && platformData.name;
 }
 
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index e495567865..12169d5269 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -24,7 +24,7 @@ import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
 import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
 
-let ERROR_TYPES = {
+const ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND',
 };
 
@@ -93,7 +93,7 @@ const OrganizationContext = createReactClass({
     Promise.all(promises)
       .then(([data, environments]) => {
         // Allow injection via getsentry et all
-        let hooks = [];
+        const hooks = [];
         HookStore.get('organization:header').forEach(cb => {
           hooks.push(cb(data));
         });
@@ -128,7 +128,7 @@ const OrganizationContext = createReactClass({
         });
 
         // If user is superuser, open sudo window
-        let user = ConfigStore.get('user');
+        const user = ConfigStore.get('user');
         if (!user || !user.isSuperuser || err.status !== 403) {
           return;
         }
diff --git a/src/sentry/static/sentry/app/views/organizationCreate.jsx b/src/sentry/static/sentry/app/views/organizationCreate.jsx
index 73955083ac..684be4d570 100644
--- a/src/sentry/static/sentry/app/views/organizationCreate.jsx
+++ b/src/sentry/static/sentry/app/views/organizationCreate.jsx
@@ -22,8 +22,8 @@ export default class OrganizationCreate extends AsyncView {
   }
 
   renderBody() {
-    let termsUrl = ConfigStore.get('termsUrl');
-    let privacyUrl = ConfigStore.get('privacyUrl');
+    const termsUrl = ConfigStore.get('termsUrl');
+    const privacyUrl = ConfigStore.get('privacyUrl');
 
     return (
       <NarrowLayout showLogout>
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
index e4f94e7dad..a0a966aaac 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
@@ -114,7 +114,7 @@ class DiscoverQuery extends React.Component {
     // Fetch
     this.setState({reloading: true});
     const promises = this.queryBuilders.map(builder => builder.fetchWithoutLimit());
-    let results = await Promise.all(promises);
+    const results = await Promise.all(promises);
 
     this.setState({
       reloading: false,
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
index 83d18dd04b..fc5e28bc6c 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
@@ -10,7 +10,7 @@ const checkIsNull = operator => NULL_OPERATORS.includes(operator);
 const checkIsWildcard = operator => WILDCARD_OPERATORS.includes(operator);
 
 function getDiscoverConditionToSearchString(condition = []) {
-  let [field, operator, value] = condition;
+  const [field, operator, value] = condition;
   const isNegation = checkIsNegation(operator);
   const negationStr = isNegation ? '!' : '';
 
@@ -18,17 +18,19 @@ function getDiscoverConditionToSearchString(condition = []) {
     return `${negationStr}${field}:""`;
   }
 
-  if (!defined(value)) {
-    value = '';
+  let coercedValue = value;
+
+  if (!defined(coercedValue)) {
+    coercedValue = '';
   }
 
   if (checkIsWildcard(operator)) {
     // Do we support both?
-    value = value.replace(/%/g, '*');
+    coercedValue = coercedValue.replace(/%/g, '*');
   }
 
   // TODO(billy): Handle number operators on server
-  return `${negationStr}${field}:${value}`;
+  return `${negationStr}${field}:${coercedValue}`;
 }
 
 export function getDiscoverConditionsToSearchString(conditions = []) {
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 9264cb8167..61243f1ea3 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -17,7 +17,7 @@ class DeletionInProgress extends Component {
   };
 
   render() {
-    let {organization} = this.props;
+    const {organization} = this.props;
     return (
       <NarrowLayout>
         <p>
@@ -72,8 +72,8 @@ class DeletionPending extends Component {
   };
 
   render() {
-    let {organization} = this.props;
-    let access = new Set(organization.access);
+    const {organization} = this.props;
+    const access = new Set(organization.access);
     return (
       <NarrowLayout>
         <h3>{t('Deletion Scheduled')}</h3>
@@ -125,7 +125,7 @@ class OrganizationDetailsBody extends Component {
   };
 
   render() {
-    let {organization} = this.context;
+    const {organization} = this.context;
 
     if (organization.status)
       if (organization.status.id === 'pending_deletion') {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
index b2db1dab12..799ed4d74f 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
@@ -121,7 +121,7 @@ export function ignoreCase(input = '') {
 
   // Strip column name from the start
   const match = input.match(/^[\w._]+\s(.*)/);
-  let remaining = match ? match[1] : null;
+  const remaining = match ? match[1] : null;
 
   if (!remaining) {
     return input;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 3afc240873..9c32939ae8 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -25,9 +25,9 @@ const parseRowFromLinks = (links, numRows) => {
   if (!links.previous.results) {
     return `1-${numRows}`;
   }
-  let prevStart = links.previous.cursor.split(':')[1];
-  let nextStart = links.next.cursor.split(':')[1];
-  let currentStart = (prevStart + nextStart) / 2 + 1;
+  const prevStart = links.previous.cursor.split(':')[1];
+  const nextStart = links.next.cursor.split(':')[1];
+  const currentStart = (prevStart + nextStart) / 2 + 1;
   return `${currentStart}-${currentStart + numRows - 1}`;
 };
 
@@ -41,7 +41,7 @@ class TotalEventCount extends AsyncComponent {
 
   getEndpoints() {
     const {organization, location} = this.props;
-    let {statsPeriod, ...query} = location.query;
+    const {statsPeriod, ...query} = location.query;
 
     return [
       [
@@ -67,9 +67,9 @@ class TotalEventCount extends AsyncComponent {
   }
 
   renderBody() {
-    let {eventsMeta} = this.state;
-    let {isAllResults, numRows} = this.props;
-    let count = isAllResults ? numRows : eventsMeta.count;
+    const {eventsMeta} = this.state;
+    const {isAllResults, numRows} = this.props;
+    const count = isAllResults ? numRows : eventsMeta.count;
     return t(` of ${count.toLocaleString()}${isAllResults ? '' : ' (estimated)'}`);
   }
 }
@@ -108,7 +108,7 @@ class OrganizationEvents extends AsyncView {
 
   getEndpoints() {
     const {organization, location} = this.props;
-    let {statsPeriod, ...query} = location.query;
+    const {statsPeriod, ...query} = location.query;
 
     return [
       [
@@ -150,7 +150,7 @@ class OrganizationEvents extends AsyncView {
   renderBody() {
     const {organization, location} = this.props;
     const {error, loading, reloading, events, eventsPageLinks} = this.state;
-    let parsedLinks = !loading && !error ? utils.parseLinkHeader(eventsPageLinks) : {};
+    const parsedLinks = !loading && !error ? utils.parseLinkHeader(eventsPageLinks) : {};
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 4ba0ce5f07..cef57e0a0d 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -29,7 +29,7 @@ class OrganizationEventsContainer extends React.Component {
   }
 
   handleSearch = query => {
-    let {router, location} = this.props;
+    const {router, location} = this.props;
     router.push({
       pathname: location.pathname,
       query: getParams({
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
index ccfa0798a5..5e8d6e9158 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
@@ -44,7 +44,7 @@ class SearchBar extends React.PureComponent {
   }
 
   componentDidMount() {
-    let {api, organization} = this.props;
+    const {api, organization} = this.props;
     fetchOrganizationTags(api, organization.slug).then(
       results => {
         this.setState({
@@ -60,7 +60,7 @@ class SearchBar extends React.PureComponent {
    * with data when ready
    */
   getEventFieldValues = memoize((tag, query) => {
-    let {api, organization} = this.props;
+    const {api, organization} = this.props;
 
     return fetchEventFieldValues(api, organization.slug, tag.key, query).then(
       results => flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx
index 1ef6653adc..9a6a77976d 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils.jsx
@@ -8,20 +8,20 @@ import {defined} from 'app/utils';
 //
 // TODO(billy): Make period parameter name consistent
 export function getParams(params = {}) {
-  let {start, end, period, statsPeriod, ...otherParams} = params;
+  const {start, end, period, statsPeriod, ...otherParams} = params;
 
   // `statsPeriod` takes precendence for now
-  period = statsPeriod || period;
+  let coercedPeriod = statsPeriod || period;
 
-  if (!start && !end && !period) {
-    period = DEFAULT_STATS_PERIOD;
+  if (!start && !end && !coercedPeriod) {
+    coercedPeriod = DEFAULT_STATS_PERIOD;
   }
 
   // Filter null values
   return Object.entries({
-    statsPeriod: period,
-    start: period ? null : start,
-    end: period ? null : end,
+    statsPeriod: coercedPeriod,
+    start: coercedPeriod ? null : start,
+    end: coercedPeriod ? null : end,
     ...otherParams,
   })
     .filter(([key, value]) => defined(value))
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
index 1d94291bbf..b01165d49a 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
@@ -16,20 +16,20 @@ const getUtcValue = utc => {
 //
 // TODO(billy): Make period parameter name consistent
 export function getParams(params = {}) {
-  let {start, end, period, statsPeriod, utc, ...otherParams} = params;
+  const {start, end, period, statsPeriod, utc, ...otherParams} = params;
 
   // `statsPeriod` takes precendence for now
-  period = statsPeriod || period;
+  let coercedPeriod = statsPeriod || period;
 
-  if (!start && !end && !period) {
-    period = DEFAULT_STATS_PERIOD;
+  if (!start && !end && !coercedPeriod) {
+    coercedPeriod = DEFAULT_STATS_PERIOD;
   }
 
   // Filter null values
   return Object.entries({
-    statsPeriod: period,
-    start: period ? null : start,
-    end: period ? null : end,
+    statsPeriod: coercedPeriod,
+    start: coercedPeriod ? null : start,
+    end: coercedPeriod ? null : end,
     // coerce utc into a string (it can be both: a string representation from router,
     // or a boolean from time range picker)
     utc: getUtcValue(utc),
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
index 57c9f0665f..33c3ce8334 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
@@ -31,9 +31,9 @@ class OrganizationIntegrations extends AsyncComponent {
   }
 
   getEndpoints() {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     const query = {plugins: ['vsts', 'github', 'bitbucket']};
-    let endpoints = [
+    const endpoints = [
       ['config', `/organizations/${orgId}/config/integrations/`],
       ['integrations', `/organizations/${orgId}/integrations/`],
       ['plugins', `/organizations/${orgId}/plugins/`, {query}],
@@ -119,7 +119,7 @@ class OrganizationIntegrations extends AsyncComponent {
 
   onDisable = integration => {
     let url;
-    let [domainName, orgName] = integration.domainName.split('/');
+    const [domainName, orgName] = integration.domainName.split('/');
 
     if (integration.accountType === 'User') {
       url = `https://${domainName}/settings/installations/`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index 92eff4e3f8..fb53e592c7 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -37,7 +37,7 @@ export default class IntegrationRepos extends AsyncComponent {
   }
 
   getEndpoints() {
-    let orgId = this.context.organization.slug;
+    const orgId = this.context.organization.slug;
     return [
       ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],
       [
@@ -48,13 +48,13 @@ export default class IntegrationRepos extends AsyncComponent {
   }
 
   getIntegrationRepos() {
-    let integrationId = this.props.integration.id;
+    const integrationId = this.props.integration.id;
     return this.state.itemList.filter(repo => repo.integrationId === integrationId);
   }
 
   // Called by row to signal repository change.
   onRepositoryChange = data => {
-    let itemList = this.state.itemList;
+    const itemList = this.state.itemList;
     itemList.forEach(item => {
       if (item.id === data.id) {
         item.status = data.status;
@@ -69,9 +69,9 @@ export default class IntegrationRepos extends AsyncComponent {
   );
 
   searchRepositoriesRequest = searchQuery => {
-    let orgId = this.context.organization.slug;
-    let query = {search: searchQuery};
-    let endpoint = `/organizations/${orgId}/integrations/${this.props.integration
+    const orgId = this.context.organization.slug;
+    const query = {search: searchQuery};
+    const endpoint = `/organizations/${orgId}/integrations/${this.props.integration
       .id}/repos/`;
     return this.api.request(endpoint, {
       method: 'GET',
@@ -91,13 +91,13 @@ export default class IntegrationRepos extends AsyncComponent {
   };
 
   addRepo(selection) {
-    let {integration} = this.props;
-    let {itemList} = this.state;
-    let orgId = this.context.organization.slug;
+    const {integration} = this.props;
+    const {itemList} = this.state;
+    const orgId = this.context.organization.slug;
 
     this.setState({adding: true});
 
-    let migratableRepo = itemList.filter(item => {
+    const migratableRepo = itemList.filter(item => {
       if (!(selection.value && item.externalSlug)) {
         return false;
       }
@@ -119,7 +119,7 @@ export default class IntegrationRepos extends AsyncComponent {
   }
 
   renderDropdown() {
-    let access = new Set(this.context.organization.access);
+    const access = new Set(this.context.organization.access);
     if (!access.has('org:write')) {
       return (
         <DropdownButton
@@ -135,10 +135,10 @@ export default class IntegrationRepos extends AsyncComponent {
     const repositories = new Set(
       this.state.itemList.filter(item => item.integrationId).map(i => i.externalSlug)
     );
-    let repositoryOptions = (this.state.integrationRepos.repos || []).filter(
+    const repositoryOptions = (this.state.integrationRepos.repos || []).filter(
       repo => !repositories.has(repo.identifier)
     );
-    let items = repositoryOptions.map(repo => {
+    const items = repositoryOptions.map(repo => {
       return {
         searchKey: repo.name,
         value: repo.identifier,
@@ -150,8 +150,8 @@ export default class IntegrationRepos extends AsyncComponent {
       };
     });
 
-    let menuHeader = <StyledReposLabel>{t('Repositories')}</StyledReposLabel>;
-    let onChange = this.state.integrationRepos.searchable
+    const menuHeader = <StyledReposLabel>{t('Repositories')}</StyledReposLabel>;
+    const onChange = this.state.integrationRepos.searchable
       ? this.handleSearchRepositories
       : null;
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx
index f8dd30becc..dd17da7302 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx
@@ -15,7 +15,7 @@ export default class MigrationWarnings extends AsyncComponent {
   };
 
   getEndpoints() {
-    let {orgId} = this.props;
+    const {orgId} = this.props;
 
     return [['unmigratableRepos', `/organizations/${orgId}/repos/?status=unmigratable`]];
   }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
index b66b4c3c4f..f415a93b58 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
@@ -86,8 +86,8 @@ class SentryAppInstallations extends React.Component {
   }
 
   render() {
-    let {orgId} = this.props;
-    let isEmpty = this.state.applications.length === 0;
+    const {orgId} = this.props;
+    const isEmpty = this.state.applications.length === 0;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/organizationRoot.jsx b/src/sentry/static/sentry/app/views/organizationRoot.jsx
index 69692b18a3..44aee192f4 100644
--- a/src/sentry/static/sentry/app/views/organizationRoot.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRoot.jsx
@@ -15,8 +15,8 @@ class OrganizationRoot extends React.Component {
     setActiveProject(null);
   }
   componentWillUnmount() {
-    let {location} = this.props;
-    let {pathname, search} = location;
+    const {location} = this.props;
+    const {pathname, search} = location;
     // Save last route so that we can jump back to view from settings
     setLastRoute(`${pathname}${search || ''}`);
   }
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index bfc55e8ddb..add8c70a88 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -17,8 +17,8 @@ const OrganizationStatsContainer = createReactClass({
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 7;
+    const until = Math.floor(new Date().getTime() / 1000);
+    const since = until - 3600 * 24 * 7;
 
     return {
       projectsError: false,
@@ -56,7 +56,7 @@ const OrganizationStatsContainer = createReactClass({
   },
 
   componentDidUpdate(prevProps) {
-    let prevParams = prevProps.params,
+    const prevParams = prevProps.params,
       currentParams = this.props.params;
 
     if (prevParams.orgId !== currentParams.orgId) {
@@ -72,7 +72,7 @@ const OrganizationStatsContainer = createReactClass({
       }
       this.fetchProjectData();
     }
-    let state = this.state;
+    const state = this.state;
     if (state.statsLoading && !state.statsRequestsPending) {
       this.processOrgData();
     }
@@ -85,7 +85,7 @@ const OrganizationStatsContainer = createReactClass({
     this.api.request(this.getOrganizationProjectsEndpoint(), {
       query: this.props.location.query,
       success: (data, textStatus, jqxhr) => {
-        let projectMap = {};
+        const projectMap = {};
         data.forEach(project => {
           projectMap[project.id] = project;
         });
@@ -116,7 +116,7 @@ const OrganizationStatsContainer = createReactClass({
       projectsRequestsPending: 4,
     });
 
-    let statEndpoint = this.getOrganizationStatsEndpoint();
+    const statEndpoint = this.getOrganizationStatsEndpoint();
 
     $.each(this.state.rawOrgData, statName => {
       this.api.request(statEndpoint, {
@@ -128,7 +128,7 @@ const OrganizationStatsContainer = createReactClass({
         },
         success: data => {
           this.setState(prevState => {
-            let rawOrgData = prevState.rawOrgData;
+            const rawOrgData = prevState.rawOrgData;
             rawOrgData[statName] = data;
 
             return {
@@ -155,7 +155,7 @@ const OrganizationStatsContainer = createReactClass({
         },
         success: data => {
           this.setState(prevState => {
-            let rawProjectData = prevState.rawProjectData;
+            const rawProjectData = prevState.rawProjectData;
             rawProjectData[statName] = data;
 
             return {
@@ -176,12 +176,12 @@ const OrganizationStatsContainer = createReactClass({
   },
 
   getOrganizationStatsEndpoint() {
-    let params = this.props.params;
+    const params = this.props.params;
     return '/organizations/' + params.orgId + '/stats/';
   },
 
   getOrganizationProjectsEndpoint() {
-    let params = this.props.params;
+    const params = this.props.params;
     return '/organizations/' + params.orgId + '/projects/';
   },
 
@@ -189,14 +189,14 @@ const OrganizationStatsContainer = createReactClass({
     let oReceived = 0;
     let oRejected = 0;
     let oBlacklisted = 0;
-    let orgPoints = []; // accepted, rejected, blacklisted
-    let aReceived = [0, 0]; // received, points
-    let rawOrgData = this.state.rawOrgData;
+    const orgPoints = []; // accepted, rejected, blacklisted
+    const aReceived = [0, 0]; // received, points
+    const rawOrgData = this.state.rawOrgData;
     $.each(rawOrgData.received, (idx, point) => {
-      let dReceived = point[1];
-      let dRejected = rawOrgData.rejected[idx][1];
-      let dBlacklisted = rawOrgData.blacklisted[idx][1];
-      let dAccepted = Math.max(0, dReceived - dRejected - dBlacklisted);
+      const dReceived = point[1];
+      const dRejected = rawOrgData.rejected[idx][1];
+      const dBlacklisted = rawOrgData.blacklisted[idx][1];
+      const dAccepted = Math.max(0, dReceived - dRejected - dBlacklisted);
       orgPoints.push({
         x: point[0],
         y: [dAccepted, dRejected, dBlacklisted],
@@ -223,8 +223,8 @@ const OrganizationStatsContainer = createReactClass({
   },
 
   processProjectData() {
-    let rawProjectData = this.state.rawProjectData;
-    let projectTotals = [];
+    const rawProjectData = this.state.rawProjectData;
+    const projectTotals = [];
     $.each(rawProjectData.received, (projectId, data) => {
       let pReceived = 0;
       let pRejected = 0;
@@ -249,7 +249,7 @@ const OrganizationStatsContainer = createReactClass({
   },
 
   render() {
-    let organization = this.getOrganization();
+    const organization = this.getOrganization();
 
     return (
       <DocumentTitle title={`Stats - ${organization.slug} - Sentry`}>
diff --git a/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx b/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx
index e15756dfe6..3209aa1961 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/organizationStatsDetails.jsx
@@ -33,8 +33,8 @@ class OrganizationStats extends React.Component {
   };
 
   renderTooltip(point, pointIdx, chart) {
-    let timeLabel = chart.getTimeLabel(point);
-    let [accepted, rejected, blacklisted] = point.y;
+    const timeLabel = chart.getTimeLabel(point);
+    const [accepted, rejected, blacklisted] = point.y;
 
     let value = `${intcomma(accepted)} accepted`;
     if (rejected) {
@@ -53,7 +53,7 @@ class OrganizationStats extends React.Component {
   }
 
   renderContent() {
-    let {
+    const {
       statsLoading,
       orgTotal,
       statsError,
diff --git a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
index 5972ce8432..681e664ce6 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
@@ -28,7 +28,7 @@ const ProjectTable = ({projectMap, projectTotals, orgTotal, organization}) => {
   const hasSentry10 = new Set(organization.features).has('sentry10');
 
   return projectTotals.sort((a, b) => b.received - a.received).map((item, index) => {
-    let project = projectMap[item.id];
+    const project = projectMap[item.id];
 
     if (!project) return null;
 
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index d247b1df96..5368722a28 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -60,8 +60,8 @@ const OrganizationStream = createReactClass({
   ],
 
   getInitialState() {
-    let realtimeActiveCookie = Cookies.get('realtimeActive');
-    let realtimeActive =
+    const realtimeActiveCookie = Cookies.get('realtimeActive');
+    const realtimeActive =
       typeof realtimeActiveCookie === 'undefined'
         ? false
         : realtimeActiveCookie === 'true';
@@ -97,8 +97,8 @@ const OrganizationStream = createReactClass({
 
     fetchTags(this.props.organization.slug);
     fetchOrgMembers(this.api, this.props.organization.slug).then(members => {
-      let memberList = members.reduce((acc, member) => {
-        for (let project of member.projects) {
+      const memberList = members.reduce((acc, member) => {
+        for (const project of member.projects) {
           if (acc[project] === undefined) {
             acc[project] = [];
           }
@@ -130,8 +130,8 @@ const OrganizationStream = createReactClass({
       }
     }
 
-    let prevQuery = prevProps.location.query;
-    let newQuery = this.props.location.query;
+    const prevQuery = prevProps.location.query;
+    const newQuery = this.props.location.query;
 
     // If any important url parameter changed or saved search changed
     // reload data.
@@ -179,14 +179,14 @@ const OrganizationStream = createReactClass({
   },
 
   getGroupStatsPeriod() {
-    let currentPeriod = this.props.location.query.groupStatsPeriod;
+    const currentPeriod = this.props.location.query.groupStatsPeriod;
     return STATS_PERIODS.has(currentPeriod) ? currentPeriod : DEFAULT_STATS_PERIOD;
   },
 
   getEndpointParams() {
-    let {selection} = this.props;
+    const {selection} = this.props;
 
-    let params = {
+    const params = {
       project: selection.projects,
       environment: selection.environments,
       query: this.getQuery(),
@@ -203,12 +203,12 @@ const OrganizationStream = createReactClass({
       params.start = getUtcDateString(params.start);
     }
 
-    let sort = this.getSort();
+    const sort = this.getSort();
     if (sort !== DEFAULT_SORT) {
       params.sort = sort;
     }
 
-    let groupStatsPeriod = this.getGroupStatsPeriod();
+    const groupStatsPeriod = this.getGroupStatsPeriod();
     if (groupStatsPeriod !== DEFAULT_STATS_PERIOD) {
       params.groupStatsPeriod = groupStatsPeriod;
     }
@@ -240,13 +240,13 @@ const OrganizationStream = createReactClass({
       error: false,
     });
 
-    let requestParams = {
+    const requestParams = {
       ...this.getEndpointParams(),
       limit: MAX_ITEMS,
       shortIdLookup: 1,
     };
 
-    let currentQuery = this.props.location.query || {};
+    const currentQuery = this.props.location.query || {};
     if ('cursor' in currentQuery) {
       requestParams.cursor = currentQuery.cursor;
     }
@@ -261,15 +261,15 @@ const OrganizationStream = createReactClass({
       method: 'GET',
       data: qs.stringify(requestParams),
       success: (data, ignore, jqXHR) => {
-        let {orgId} = this.props.params;
+        const {orgId} = this.props.params;
         // If this is a direct hit, we redirect to the intended result directly.
         if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
           let redirect;
           if (data[0] && data[0].matchingEventId) {
-            let {id, matchingEventId} = data[0];
+            const {id, matchingEventId} = data[0];
             redirect = `/organizations/${orgId}/issues/${id}/events/${matchingEventId}/`;
           } else {
-            let {id} = data[0];
+            const {id} = data[0];
             redirect = `/organizations/${orgId}/issues/${id}/`;
           }
 
@@ -282,8 +282,8 @@ const OrganizationStream = createReactClass({
 
         this._streamManager.push(data);
 
-        let queryCount = jqXHR.getResponseHeader('X-Hits');
-        let queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');
+        const queryCount = jqXHR.getResponseHeader('X-Hits');
+        const queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');
 
         this.setState({
           error: false,
@@ -313,7 +313,7 @@ const OrganizationStream = createReactClass({
     if (!this.state.pageLinks) return;
 
     // Only resume polling if we're on the first page of results
-    let links = parseLinkHeader(this.state.pageLinks);
+    const links = parseLinkHeader(this.state.pageLinks);
     if (links && !links.previous.results && this.state.realtimeActive) {
       this._poller.setEndpoint(links.previous.href);
       this._poller.enable();
@@ -321,7 +321,7 @@ const OrganizationStream = createReactClass({
   },
 
   getGroupListEndpoint() {
-    let params = this.props.params;
+    const params = this.props.params;
 
     return `/organizations/${params.orgId}/issues/`;
   },
@@ -353,7 +353,7 @@ const OrganizationStream = createReactClass({
   },
 
   onGroupChange() {
-    let groupIds = this._streamManager.getAllItems().map(item => item.id);
+    const groupIds = this._streamManager.getAllItems().map(item => item.id);
     if (!isEqual(groupIds, this.state.groupIds)) {
       this.setState({groupIds});
     }
@@ -385,7 +385,7 @@ const OrganizationStream = createReactClass({
   },
 
   onSidebarToggle() {
-    let {organization} = this.props;
+    const {organization} = this.props;
     this.setState({
       isSidebarVisible: !this.state.isSidebarVisible,
     });
@@ -395,12 +395,12 @@ const OrganizationStream = createReactClass({
   },
 
   onSelectedGroupChange() {
-    let selected = SelectedGroupStore.getSelectedIds();
-    let projects = [...selected]
+    const selected = SelectedGroupStore.getSelectedIds();
+    const projects = [...selected]
       .map(id => GroupStore.get(id))
       .map(group => group.project.slug);
 
-    let uniqProjects = uniq(projects);
+    const uniqProjects = uniq(projects);
 
     // we only want selectedProject set if there is 1 project
     // more or fewer should result in a null so that the action toolbar
@@ -409,7 +409,7 @@ const OrganizationStream = createReactClass({
       this.setState({selectedProject: null});
       return;
     }
-    let selectedProject = this.props.organization.projects.find(
+    const selectedProject = this.props.organization.projects.find(
       p => p.slug === uniqProjects[0]
     );
     this.setState({selectedProject});
@@ -421,17 +421,17 @@ const OrganizationStream = createReactClass({
   allResultsVisible() {
     if (!this.state.pageLinks) return false;
 
-    let links = parseLinkHeader(this.state.pageLinks);
+    const links = parseLinkHeader(this.state.pageLinks);
     return links && !links.previous.results && !links.next.results;
   },
 
   transitionTo(newParams = {}) {
-    let query = {
+    const query = {
       ...this.getEndpointParams(),
       ...newParams,
     };
-    let {organization} = this.props;
-    let {savedSearch} = this.state;
+    const {organization} = this.props;
+    const {savedSearch} = this.state;
     let path;
 
     if (savedSearch && savedSearch.query === query.query) {
@@ -458,18 +458,18 @@ const OrganizationStream = createReactClass({
 
   renderGroupNodes(ids, groupStatsPeriod) {
     // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue
-    let userDateJoined = new Date(ConfigStore.get('user').dateJoined);
-    let dateCutoff = new Date();
+    const userDateJoined = new Date(ConfigStore.get('user').dateJoined);
+    const dateCutoff = new Date();
     dateCutoff.setDate(dateCutoff.getDate() - 30);
 
-    let topIssue = ids[0];
-    let {memberList} = this.state;
+    const topIssue = ids[0];
+    const {memberList} = this.state;
 
-    let {orgId} = this.props.params;
-    let groupNodes = ids.map(id => {
-      let hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
+    const {orgId} = this.props.params;
+    const groupNodes = ids.map(id => {
+      const hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
 
-      let group = GroupStore.get(id);
+      const group = GroupStore.get(id);
       let members = null;
       if (group && group.project) {
         members = memberList[group.project.slug] || null;
@@ -504,8 +504,8 @@ const OrganizationStream = createReactClass({
 
   renderStreamBody() {
     let body;
-    let selectedProjects = this.getGlobalSearchProjects();
-    let noEvents = selectedProjects.filter(p => !p.firstEvent).length > 0;
+    const selectedProjects = this.getGlobalSearchProjects();
+    const noEvents = selectedProjects.filter(p => !p.firstEvent).length > 0;
 
     if (this.state.issuesLoading) {
       body = this.renderLoading();
@@ -522,9 +522,9 @@ const OrganizationStream = createReactClass({
   },
 
   fetchSavedSearches() {
-    let {orgId, searchId} = this.props.params;
-    let {organization} = this.props;
-    let projectMap = organization.projects.reduce((acc, project) => {
+    const {orgId, searchId} = this.props.params;
+    const {organization} = this.props;
+    const projectMap = organization.projects.reduce((acc, project) => {
       acc[project.id] = project.slug;
       return acc;
     }, {});
@@ -532,18 +532,18 @@ const OrganizationStream = createReactClass({
     fetchSavedSearches(this.api, orgId).then(
       data => {
         // Add in project slugs so that we can display them in the picker bars.
-        let savedSearchList = data.map(search => {
+        const savedSearchList = data.map(search => {
           search.projectSlug = projectMap[search.projectId];
           return search;
         });
 
-        let newState = {
+        const newState = {
           savedSearchList,
           savedSearchLoading: false,
         };
 
         if (searchId) {
-          let match = savedSearchList.find(search => search.id === searchId);
+          const match = savedSearchList.find(search => search.id === searchId);
           newState.savedSearch = match ? match : null;
         }
         this.setState(newState);
@@ -555,7 +555,7 @@ const OrganizationStream = createReactClass({
   },
 
   onSavedSearchCreate(data) {
-    let savedSearchList = this.state.savedSearchList;
+    const savedSearchList = this.state.savedSearchList;
 
     savedSearchList.push(data);
     this.setState({
@@ -565,10 +565,10 @@ const OrganizationStream = createReactClass({
   },
 
   renderAwaitingEvents(projects) {
-    let {organization} = this.props;
-    let project = projects.length > 0 ? projects[0] : null;
+    const {organization} = this.props;
+    const project = projects.length > 0 ? projects[0] : null;
 
-    let sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';
+    const sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';
     return (
       <ErrorRobot
         org={organization}
@@ -583,30 +583,30 @@ const OrganizationStream = createReactClass({
     if (this.state.savedSearchLoading) {
       return this.renderLoading();
     }
-    let params = this.props.params;
-    let classes = ['stream-row'];
+    const params = this.props.params;
+    const classes = ['stream-row'];
     if (this.state.isSidebarVisible) {
       classes.push('show-sidebar');
     }
-    let {orgId, searchId} = this.props.params;
-    let access = this.getAccess();
-    let query = this.getQuery();
+    const {orgId, searchId} = this.props.params;
+    const access = this.getAccess();
+    const query = this.getQuery();
 
     // If we have a selected project set release data up
     // enabling stream actions
     let hasReleases = false;
     let projectId = null;
     let latestRelease = null;
-    let {selectedProject} = this.state;
+    const {selectedProject} = this.state;
     if (selectedProject) {
-      let features = new Set(selectedProject.features);
+      const features = new Set(selectedProject.features);
       hasReleases = features.has('releases');
       latestRelease = selectedProject.latestRelease;
       projectId = selectedProject.slug;
     } else {
       // If the user has filtered down to a single project
       // we can hint the autocomplete/savedsearch picker with that.
-      let projects = this.getGlobalSearchProjects();
+      const projects = this.getGlobalSearchProjects();
       if (projects.length === 1) {
         projectId = projects[0].slug;
       }
diff --git a/src/sentry/static/sentry/app/views/permissionDenied.jsx b/src/sentry/static/sentry/app/views/permissionDenied.jsx
index 4e8ab62197..b58a6d15af 100644
--- a/src/sentry/static/sentry/app/views/permissionDenied.jsx
+++ b/src/sentry/static/sentry/app/views/permissionDenied.jsx
@@ -22,10 +22,10 @@ class PermissionDenied extends React.Component {
   };
 
   componentDidMount() {
-    let {routes} = this.props;
-    let {organization, project} = this.context;
+    const {routes} = this.props;
+    const {organization, project} = this.context;
 
-    let route = getRouteStringFromRoutes(routes);
+    const route = getRouteStringFromRoutes(routes);
     Sentry.withScope(scope => {
       scope.setFingerprint([ERROR_NAME, route]);
       scope.setExtra('route', route);
diff --git a/src/sentry/static/sentry/app/views/projectChooser.jsx b/src/sentry/static/sentry/app/views/projectChooser.jsx
index ec8f2bb100..8c34346cfc 100644
--- a/src/sentry/static/sentry/app/views/projectChooser.jsx
+++ b/src/sentry/static/sentry/app/views/projectChooser.jsx
@@ -34,23 +34,23 @@ const ProjectChooser = createReactClass({
   },
 
   redirectNoMultipleProjects() {
-    let org = this.getOrganization();
-    let projects = org.projects;
-    let tasks = TodoList.TASKS.filter(
+    const org = this.getOrganization();
+    const projects = org.projects;
+    const tasks = TodoList.TASKS.filter(
       task_inst => task_inst.task === this.props.location.query.task
     );
 
     if (projects.length === 0) {
       browserHistory.push(`/organizations/${org.slug}/projects/new/`);
     } else if (projects.length === 1 && tasks && tasks.length === 1) {
-      let project = projects[0];
+      const project = projects[0];
       browserHistory.push(`/${org.slug}/${project.slug}/${tasks[0].location}`);
     }
   },
 
   render() {
-    let org = this.getOrganization();
-    let task = TodoList.TASKS.filter(
+    const org = this.getOrganization();
+    const task = TodoList.TASKS.filter(
       task_inst => task_inst.task == this.props.location.query.task
     )[0];
 
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index 93c98b373b..d300393886 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -54,14 +54,14 @@ const ProjectChart = createReactClass({
   },
 
   getStatsEndpoint() {
-    let org = this.getOrganization();
-    let project = this.getProject();
+    const org = this.getOrganization();
+    const project = this.getProject();
     return '/projects/' + org.slug + '/' + project.slug + '/stats/';
   },
 
   getProjectReleasesEndpoint() {
-    let org = this.getOrganization();
-    let project = this.getProject();
+    const org = this.getOrganization();
+    const project = this.getProject();
     return '/projects/' + org.slug + '/' + project.slug + '/releases/';
   },
 
@@ -106,13 +106,13 @@ const ProjectChart = createReactClass({
   },
 
   renderChart() {
-    let points = this.state.stats.map(point => {
+    const points = this.state.stats.map(point => {
       return {x: point[0], y: point[1]};
     });
-    let startX = this.props.dateSince;
-    let markers = this.state.releaseList
+    const startX = this.props.dateSince;
+    const markers = this.state.releaseList
       .filter(release => {
-        let date = new Date(release.dateCreated).getTime() / 1000;
+        const date = new Date(release.dateCreated).getTime() / 1000;
         return date >= startX;
       })
       .map(release => {
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index 46be7d8180..1654ca0dfe 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -51,7 +51,7 @@ const EventList = createReactClass({
   getEndpoint() {
     const {params, type, environment} = this.props;
 
-    let qs = {
+    const qs = {
       sort: type,
       query: 'is:unresolved',
       since: this.props.dateSince,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
index dea4b21d81..7e8a9a659f 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
@@ -18,8 +18,8 @@ const EventNode = createReactClass({
   mixins: [ProjectState],
 
   render() {
-    let group = this.props.group;
-    let userCount = group.userCount;
+    const group = this.props.group;
+    const userCount = group.userCount;
 
     return (
       <li className="group row">
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/index.jsx b/src/sentry/static/sentry/app/views/projectDashboard/index.jsx
index 10794d5d40..d144b8d9f9 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/index.jsx
@@ -51,7 +51,7 @@ const ProjectDashboard = createReactClass({
 
   getQueryStringState(props) {
     props = props || this.props;
-    let currentQuery = props.location.query;
+    const currentQuery = props.location.query;
     let statsPeriod = currentQuery.statsPeriod;
 
     if (!PERIODS.has(statsPeriod)) {
@@ -64,7 +64,7 @@ const ProjectDashboard = createReactClass({
   },
 
   getStatsPeriodBeginTimestamp(statsPeriod) {
-    let now = new Date().getTime() / 1000;
+    const now = new Date().getTime() / 1000;
     switch (statsPeriod) {
       case PERIOD_WEEK:
         return now - 3600 * 24 * 7;
@@ -89,12 +89,12 @@ const ProjectDashboard = createReactClass({
   },
 
   render() {
-    let {statsPeriod} = this.state;
-    let dateSince = this.getStatsPeriodBeginTimestamp(statsPeriod);
-    let resolution = this.getStatsPeriodResolution(statsPeriod);
-    let {orgId, projectId} = this.props.params;
-    let url = `/${orgId}/${projectId}/dashboard/`;
-    let routeQuery = this.props.location.query;
+    const {statsPeriod} = this.state;
+    const dateSince = this.getStatsPeriodBeginTimestamp(statsPeriod);
+    const resolution = this.getStatsPeriodResolution(statsPeriod);
+    const {orgId, projectId} = this.props.params;
+    const url = `/${orgId}/${projectId}/dashboard/`;
+    const routeQuery = this.props.location.query;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
index d9580f7d7e..f7915b90e7 100644
--- a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
+++ b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
@@ -18,11 +18,11 @@ import withProjects from 'app/utils/withProjects';
 
 class DataForwardingStats extends AsyncComponent {
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 30;
+    const {orgId, projectId} = this.props.params;
+    const until = Math.floor(new Date().getTime() / 1000);
+    const since = until - 3600 * 24 * 30;
 
-    let options = {
+    const options = {
       query: {
         since,
         until,
@@ -68,7 +68,7 @@ class DataForwardingStats extends AsyncComponent {
 
 class ProjectDataForwarding extends AsyncComponent {
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return [['plugins', `/projects/${orgId}/${projectId}/plugins/`]];
   }
@@ -80,7 +80,7 @@ class ProjectDataForwarding extends AsyncComponent {
   }
 
   updatePlugin(plugin, enabled) {
-    let plugins = this.state.plugins.map(p => ({
+    const plugins = this.state.plugins.map(p => ({
       ...p,
       enabled: p.id === plugin.id ? enabled : p.enabled,
     }));
@@ -92,11 +92,11 @@ class ProjectDataForwarding extends AsyncComponent {
   onDisablePlugin = plugin => this.updatePlugin(plugin, false);
 
   renderBody() {
-    let {params, organization, project} = this.props;
-    let plugins = this.forwardingPlugins;
-    let hasAccess = organization.access.includes('project:write');
+    const {params, organization, project} = this.props;
+    const plugins = this.forwardingPlugins;
+    const hasAccess = organization.access.includes('project:write');
 
-    let pluginsPanel =
+    const pluginsPanel =
       plugins.length > 0 ? (
         <PluginList
           organization={organization}
diff --git a/src/sentry/static/sentry/app/views/projectDebugFiles.jsx b/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
index 3b2d328237..7357e1fc38 100644
--- a/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugFiles.jsx
@@ -95,14 +95,14 @@ class ProjectDebugSymbols extends AsyncComponent {
   }
 
   renderDsyms() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
-    let rows = this.state.debugFiles.map((dsym, key) => {
-      let url = `${this.api
+    const rows = this.state.debugFiles.map((dsym, key) => {
+      const url = `${this.api
         .baseUrl}/projects/${orgId}/${projectId}/files/dsyms/?id=${dsym.id}`;
-      let fileType = getFileType(dsym);
-      let symbolType = fileType ? `${dsym.symbolType} ${fileType}` : dsym.symbolType;
-      let features = dsym.data && dsym.data.features;
+      const fileType = getFileType(dsym);
+      const symbolType = fileType ? `${dsym.symbolType} ${fileType}` : dsym.symbolType;
+      const features = dsym.data && dsym.data.features;
 
       return (
         <PanelItem key={key} align="center" px={2} py={1}>
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index ea2ecd3790..a6d1d6b03f 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -5,7 +5,7 @@ import ProjectDetailsLayout from 'app/views/projectDetailsLayout';
 
 class ProjectDetails extends React.Component {
   render() {
-    let {projectId, orgId} = this.props.params;
+    const {projectId, orgId} = this.props.params;
     return (
       <ProjectContext orgId={orgId} projectId={projectId}>
         <ProjectDetailsLayout>{this.props.children}</ProjectDetailsLayout>
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index ba6e82f589..716d214a7b 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -28,8 +28,8 @@ const ProjectDetailsLayout = createReactClass({
   },
 
   componentWillUnmount() {
-    let {location} = this.props;
-    let {pathname, search} = location;
+    const {location} = this.props;
+    const {pathname, search} = location;
     // Save last route so that we can jump back to view from settings
     setLastRoute(`${pathname}${search || ''}`);
   },
diff --git a/src/sentry/static/sentry/app/views/projectEnvironments.jsx b/src/sentry/static/sentry/app/views/projectEnvironments.jsx
index 0a3baa79ef..fe9e221584 100644
--- a/src/sentry/static/sentry/app/views/projectEnvironments.jsx
+++ b/src/sentry/static/sentry/app/views/projectEnvironments.jsx
@@ -216,9 +216,9 @@ const ProjectEnvironments = createReactClass({
   renderSystemRows() {
     // Not available in "Hidden" tab
     if (this.state.isHidden) return null;
-    let {project} = this.state;
+    const {project} = this.state;
 
-    let isAllEnvironmentsDefault = project && project.defaultEnvironment === null;
+    const isAllEnvironmentsDefault = project && project.defaultEnvironment === null;
 
     return (
       <EnvironmentRow
@@ -240,11 +240,11 @@ const ProjectEnvironments = createReactClass({
   renderInvalidDefaultEnvironment() {
     // Not available in "Hidden" tab
     if (this.state.isHidden) return null;
-    let {environments, project} = this.state;
+    const {environments, project} = this.state;
     // Default environment that is not a valid environment
-    let isAllEnvironmentsDefault = project && project.defaultEnvironment === null;
+    const isAllEnvironmentsDefault = project && project.defaultEnvironment === null;
 
-    let hasOtherDefaultEnvironment =
+    const hasOtherDefaultEnvironment =
       project &&
       environments &&
       !isAllEnvironmentsDefault &&
@@ -371,7 +371,7 @@ class EnvironmentRow extends React.Component {
   };
 
   render() {
-    let {
+    const {
       environment,
       shouldShowSetDefault,
       shouldShowAction,
diff --git a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
index 804cc3c236..a5f9092dd3 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
@@ -26,13 +26,13 @@ const ProjectDocsContext = createReactClass({
   },
 
   fetchData() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     if (!org) {
       return;
     }
 
-    let orgId = org.slug;
-    let projectId = this.context.project.slug;
+    const orgId = org.slug;
+    const projectId = this.context.project.slug;
 
     this.api.request(`/projects/${orgId}/${projectId}/docs/`, {
       success: data => {
@@ -48,7 +48,7 @@ const ProjectDocsContext = createReactClass({
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let data = this.state.data;
+    const data = this.state.data;
     return React.cloneElement(this.props.children, {
       platformData: data,
     });
diff --git a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
index 2cc3a53313..0ead295818 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
@@ -33,8 +33,8 @@ class ProjectInstallOverview extends React.Component {
   };
 
   redirectToDocs = platform => {
-    let {orgId, projectId} = this.props.params;
-    let prefix = recreateRoute('', {...this.props, stepBack: -3});
+    const {orgId, projectId} = this.props.params;
+    const prefix = recreateRoute('', {...this.props, stepBack: -3});
     let rootUrl = `${prefix}install`;
 
     if (this.isGettingStarted()) {
@@ -51,10 +51,10 @@ class ProjectInstallOverview extends React.Component {
   };
 
   render() {
-    let {data} = this.state;
-    let {orgId, projectId} = this.props.params;
+    const {data} = this.state;
+    const {orgId, projectId} = this.props.params;
 
-    let issueStreamLink = this.hasSentry10()
+    const issueStreamLink = this.hasSentry10()
       ? `/organizations/${orgId}/issues/#welcome`
       : `/${orgId}/${projectId}/#welcome`;
 
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index 125dc45b5a..d25ab3452e 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -37,8 +37,8 @@ const ProjectInstallPlatform = createReactClass({
 
   getInitialState(props) {
     props = props || this.props;
-    let params = props.params;
-    let key = params.platform;
+    const params = props.params;
+    const key = params.platform;
     let integration;
     let platform;
 
@@ -80,7 +80,7 @@ const ProjectInstallPlatform = createReactClass({
   },
 
   fetchData() {
-    let {orgId, projectId, platform} = this.props.params;
+    const {orgId, projectId, platform} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/docs/${platform}/`, {
       success: data => {
         this.setState({
@@ -99,8 +99,8 @@ const ProjectInstallPlatform = createReactClass({
   },
 
   getPlatformLink(platform, display) {
-    let {orgId, projectId} = this.props.params;
-    let path = this.props.linkPath(orgId, projectId, platform);
+    const {orgId, projectId} = this.props.params;
+    const path = this.props.linkPath(orgId, projectId, platform);
     return (
       <Link key={platform} to={path} className="list-group-item">
         {display || platform}
@@ -109,14 +109,14 @@ const ProjectInstallPlatform = createReactClass({
   },
 
   render() {
-    let {integration, platform} = this.state;
-    let {organization, params: {orgId, projectId}} = this.props;
+    const {integration, platform} = this.state;
+    const {organization, params: {orgId, projectId}} = this.props;
 
     if (!integration || !platform) {
       return <NotFound />;
     }
 
-    let issueStreamLink = new Set(organization.features).has('sentry10')
+    const issueStreamLink = new Set(organization.features).has('sentry10')
       ? `/organizations/${orgId}/issues/#welcome`
       : `/${orgId}/${projectId}/#welcome`;
 
diff --git a/src/sentry/static/sentry/app/views/projectPluginDetails.jsx b/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
index a8600f7073..a99213812d 100644
--- a/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
@@ -21,7 +21,7 @@ import withPlugins from 'app/utils/withPlugins';
  */
 class ProjectPluginDetails extends AsyncView {
   getTitle() {
-    let {plugin} = this.state;
+    const {plugin} = this.state;
     if (plugin && plugin.name) {
       return plugin.name;
     } else {
@@ -30,7 +30,7 @@ class ProjectPluginDetails extends AsyncView {
   }
 
   getEndpoints() {
-    let {projectId, orgId, pluginId} = this.props.params;
+    const {projectId, orgId, pluginId} = this.props.params;
     return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];
   }
 
@@ -39,8 +39,8 @@ class ProjectPluginDetails extends AsyncView {
   }
 
   handleReset = () => {
-    let {projectId, orgId, pluginId} = this.props.params;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {projectId, orgId, pluginId} = this.props.params;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
       method: 'POST',
       data: {reset: true},
@@ -65,10 +65,10 @@ class ProjectPluginDetails extends AsyncView {
 
   // Enabled state is handled via PluginsStore and not via plugins detail
   getEnabled() {
-    let {pluginDetails} = this.state;
-    let {plugins} = this.props;
+    const {pluginDetails} = this.state;
+    const {plugins} = this.props;
 
-    let plugin =
+    const plugin =
       plugins &&
       plugins.plugins &&
       plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);
@@ -77,16 +77,16 @@ class ProjectPluginDetails extends AsyncView {
   }
 
   renderActions() {
-    let {pluginDetails} = this.state;
-    let enabled = this.getEnabled();
+    const {pluginDetails} = this.state;
+    const enabled = this.getEnabled();
 
-    let enable = (
+    const enable = (
       <Button size="small" onClick={this.handleEnable} style={{marginRight: '6px'}}>
         {t('Enable Plugin')}
       </Button>
     );
 
-    let disable = (
+    const disable = (
       <Button
         size="small"
         priority="danger"
@@ -97,7 +97,7 @@ class ProjectPluginDetails extends AsyncView {
       </Button>
     );
 
-    let toggleEnable = enabled ? disable : enable;
+    const toggleEnable = enabled ? disable : enable;
 
     return (
       <div className="pull-right">
@@ -110,8 +110,8 @@ class ProjectPluginDetails extends AsyncView {
   }
 
   renderBody() {
-    let {organization, project} = this.props;
-    let {pluginDetails} = this.state;
+    const {organization, project} = this.props;
+    const {pluginDetails} = this.state;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
index ec851fd79d..e12a15f006 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -22,13 +22,13 @@ class ProjectPluginsContainer extends React.Component {
   };
 
   handleChange = (pluginId, shouldEnable) => {
-    let {projectId, orgId} = this.props.params;
-    let actionCreator = shouldEnable ? enablePlugin : disablePlugin;
+    const {projectId, orgId} = this.props.params;
+    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;
     actionCreator({projectId, orgId, pluginId});
   };
 
   render() {
-    let {loading, error, plugins} = this.props.plugins || {};
+    const {loading, error, plugins} = this.props.plugins || {};
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
index 84706d0dfa..425ea59522 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
@@ -24,12 +24,12 @@ class ProjectPluginRow extends React.PureComponent {
   };
 
   handleChange = () => {
-    let {onChange, id, enabled} = this.props;
+    const {onChange, id, enabled} = this.props;
     onChange(id, !enabled);
   };
 
   render() {
-    let {
+    const {
       id,
       name,
       slug,
@@ -40,7 +40,7 @@ class ProjectPluginRow extends React.PureComponent {
       canDisable,
     } = this.props;
 
-    let configureUrl = recreateRoute(id, this.props);
+    const configureUrl = recreateRoute(id, this.props);
     return (
       <Access access={['project:write']}>
         {({hasAccess}) => {
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
index c9e9e90f05..da1fd0d0fb 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
@@ -27,10 +27,10 @@ class ProjectPlugins extends Component {
   };
 
   render() {
-    let {plugins, loading, error, onError, onChange, routes, params} = this.props;
-    let {orgId} = this.props.params;
-    let hasError = error;
-    let isLoading = !hasError && loading;
+    const {plugins, loading, error, onError, onChange, routes, params} = this.props;
+    const {orgId} = this.props.params;
+    const hasError = error;
+    const isLoading = !hasError && loading;
 
     if (hasError) {
       return <RouteError error={error} component={this} onRetry={onError} />;
diff --git a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
index f4d94e4dad..0c8b515fea 100644
--- a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
@@ -30,12 +30,12 @@ class SavedSearchRow extends React.Component {
   };
 
   handleRemove = () => {
-    let {data, onRemove} = this.props;
+    const {data, onRemove} = this.props;
     onRemove({data});
   };
 
   handleDefault = () => {
-    let {data, onDefault} = this.props;
+    const {data, onDefault} = this.props;
     onDefault({
       data,
       isDefault: true,
@@ -43,7 +43,7 @@ class SavedSearchRow extends React.Component {
   };
 
   handleUserDefault = () => {
-    let {data, onUserDefault} = this.props;
+    const {data, onUserDefault} = this.props;
     onUserDefault({
       data,
       isUserDefault: true,
@@ -51,8 +51,8 @@ class SavedSearchRow extends React.Component {
   };
 
   render() {
-    let {data, canModify} = this.props;
-    let deleteDisabled = !canModify && !data.isPrivate;
+    const {data, canModify} = this.props;
+    const deleteDisabled = !canModify && !data.isPrivate;
 
     return (
       <PanelItem p={0} py={2} align="center">
@@ -106,17 +106,17 @@ class ProjectSavedSearches extends AsyncView {
   };
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['savedSearchList', `/projects/${orgId}/${projectId}/searches/`]];
   }
 
   handleUpdate = params => {
-    let {orgId, projectId} = this.props.params;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {data, isDefault, isUserDefault} = params;
-    let key = typeof isDefault !== 'undefined' ? 'isDefault' : 'isUserDefault';
-    let {savedSearchList} = this.state;
-    let newSearchList = savedSearchList.map(search => ({
+    const {orgId, projectId} = this.props.params;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {data, isDefault, isUserDefault} = params;
+    const key = typeof isDefault !== 'undefined' ? 'isDefault' : 'isUserDefault';
+    const {savedSearchList} = this.state;
+    const newSearchList = savedSearchList.map(search => ({
       ...search,
       [key]: data.id === search.id,
     }));
@@ -147,11 +147,11 @@ class ProjectSavedSearches extends AsyncView {
   };
 
   handleRemovedSearch = params => {
-    let {orgId, projectId} = this.props.params;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {data} = params;
-    let {savedSearchList} = this.state;
-    let newSearchList = savedSearchList.filter(search => {
+    const {orgId, projectId} = this.props.params;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {data} = params;
+    const {savedSearchList} = this.state;
+    const newSearchList = savedSearchList.filter(search => {
       return search.id !== data.id;
     });
 
@@ -183,10 +183,10 @@ class ProjectSavedSearches extends AsyncView {
   }
 
   renderResults() {
-    let {orgId, projectId} = this.props.params;
-    let {organization} = this.context;
-    let access = organization && new Set(organization.access);
-    let canModify = (organization && access.has('project:write')) || false;
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
+    const access = organization && new Set(organization.access);
+    const canModify = (organization && access.has('project:write')) || false;
 
     return (
       <React.Fragment>
@@ -210,10 +210,10 @@ class ProjectSavedSearches extends AsyncView {
   }
 
   renderBody() {
-    let {organization} = this.context;
-    let access = organization && new Set(organization.access);
-    let canModify = (organization && access.has('project:write')) || false;
-    let hasResults = this.state.savedSearchList.length > 0;
+    const {organization} = this.context;
+    const access = organization && new Set(organization.access);
+    const canModify = (organization && access.has('project:write')) || false;
+    const hasResults = this.state.savedSearchList.length > 0;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 431eb69884..e292c7751b 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -35,14 +35,14 @@ const ProjectSettings = createReactClass({
   },
 
   componentWillMount() {
-    let {setProjectNavSection} = this.props;
+    const {setProjectNavSection} = this.props;
 
     setProjectNavSection('settings');
     this.fetchData();
   },
 
   componentWillReceiveProps(nextProps) {
-    let params = this.props.params;
+    const params = this.props.params;
     if (
       nextProps.params.projectId !== params.projectId ||
       nextProps.params.orgId !== params.orgId
@@ -58,7 +58,7 @@ const ProjectSettings = createReactClass({
   },
 
   fetchData() {
-    let params = this.props.params;
+    const params = this.props.params;
 
     this.api.request(`/projects/${params.orgId}/${params.projectId}/`, {
       success: data => {
@@ -82,14 +82,14 @@ const ProjectSettings = createReactClass({
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let access = this.getAccess();
-    let {orgId, projectId} = this.props.params;
-    let pathPrefix = `/settings/${orgId}/${projectId}`;
-    let settingsUrlRoot = pathPrefix;
-    let project = this.state.project;
-    let rootInstallPath = `${pathPrefix}/install/`;
-    let path = this.props.location.pathname;
-    let processingIssues = this.state.project.processingIssues;
+    const access = this.getAccess();
+    const {orgId, projectId} = this.props.params;
+    const pathPrefix = `/settings/${orgId}/${projectId}`;
+    const settingsUrlRoot = pathPrefix;
+    const project = this.state.project;
+    const rootInstallPath = `${pathPrefix}/install/`;
+    const path = this.props.location.pathname;
+    const processingIssues = this.state.project.processingIssues;
 
     return (
       <div className="row">
diff --git a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
index f7785e7869..fac70e336b 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
@@ -15,10 +15,10 @@ const PluginNavigation = createReactClass({
   },
 
   render() {
-    let {urlRoot, plugins} = this.props;
+    const {urlRoot, plugins} = this.props;
 
     if (!plugins || !plugins.plugins) return null;
-    let enabledPlugins = plugins.plugins.filter(p => p.enabled && p.hasConfiguration);
+    const enabledPlugins = plugins.plugins.filter(p => p.enabled && p.hasConfiguration);
 
     if (!enabledPlugins.length) return null;
 
diff --git a/src/sentry/static/sentry/app/views/projectTags.jsx b/src/sentry/static/sentry/app/views/projectTags.jsx
index 27b6023309..826fef6d09 100644
--- a/src/sentry/static/sentry/app/views/projectTags.jsx
+++ b/src/sentry/static/sentry/app/views/projectTags.jsx
@@ -16,17 +16,17 @@ import Tooltip from 'app/components/tooltip';
 
 export default class ProjectTags extends AsyncView {
   getEndpoints() {
-    let {projectId, orgId} = this.props.params;
+    const {projectId, orgId} = this.props.params;
     return [['tags', `/projects/${orgId}/${projectId}/tags/`]];
   }
 
   onDelete(key, idx) {
-    let {projectId, orgId} = this.props.params;
+    const {projectId, orgId} = this.props.params;
 
     this.api.request(`/projects/${orgId}/${projectId}/tags/${key}/`, {
       method: 'DELETE',
       success: () => {
-        let tags = this.state.tags.slice();
+        const tags = this.state.tags.slice();
         tags.splice(idx, 1);
         this.setState({tags});
       },
@@ -40,8 +40,8 @@ export default class ProjectTags extends AsyncView {
   }
 
   renderBody() {
-    let {tags} = this.state;
-    let isEmpty = !tags || tags.length === 0;
+    const {tags} = this.state;
+    const isEmpty = !tags || tags.length === 0;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 792e0b4d52..d1eb427072 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -104,7 +104,7 @@ const ProjectContext = createReactClass({
       prevState.organization !== this.state.organization
     ) {
       if (!this.docTitle) return;
-      let docTitle = this.docTitleRef.docTitle;
+      const docTitle = this.docTitleRef.docTitle;
       if (docTitle) docTitle.forceUpdate();
     }
   },
@@ -128,16 +128,16 @@ const ProjectContext = createReactClass({
   },
 
   identifyProject() {
-    let {projects, projectId} = this.props;
-    let projectSlug = projectId;
+    const {projects, projectId} = this.props;
+    const projectSlug = projectId;
     return projects.find(({slug}) => slug === projectSlug) || null;
   },
 
   fetchData() {
-    let {orgId, projectId, location, skipReload} = this.props;
+    const {orgId, projectId, location, skipReload} = this.props;
     // we fetch core access/information from the global organization data
-    let activeProject = this.identifyProject();
-    let hasAccess = activeProject && activeProject.hasAccess;
+    const activeProject = this.identifyProject();
+    const hasAccess = activeProject && activeProject.hasAccess;
 
     this.setState(state => ({
       // if `skipReload` is true, then don't change loading state
@@ -209,12 +209,12 @@ const ProjectContext = createReactClass({
   },
 
   getEnvironmentListEndpoint() {
-    let {orgId, projectId} = this.props;
+    const {orgId, projectId} = this.props;
     return `/projects/${orgId}/${projectId}/environments/`;
   },
 
   getMemberListEndpoint() {
-    let {orgId, projectId} = this.props;
+    const {orgId, projectId} = this.props;
     return `/projects/${orgId}/${projectId}/members/`;
   },
 
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx
index 171c6652a3..6ccc2bda60 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx
@@ -12,7 +12,7 @@ export default class ReleaseAllEvents extends React.Component {
   };
 
   render() {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     return (
       <div>
         <Alert icon="icon-open" iconSize="14px" type="warning">
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx
index b688596b89..a1ff66a0d2 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx
@@ -12,7 +12,7 @@ export default class OrganizationReleaseNewEvents extends React.Component {
   };
 
   render() {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     return (
       <div>
         <Alert icon="icon-open" iconSize="14px" type="warning">
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
index ad2e205ffe..49d2fe6fa4 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
@@ -54,8 +54,8 @@ const ProjectReleaseDetails = createReactClass({
   },
 
   getTitle() {
-    let project = this.getProject();
-    let params = this.props.params;
+    const project = this.getProject();
+    const params = this.props.params;
     return 'Release ' + params.version + ' | ' + project.slug;
   },
 
@@ -86,10 +86,10 @@ const ProjectReleaseDetails = createReactClass({
   },
 
   getReleaseDetailsEndpoint() {
-    let params = this.props.params;
-    let orgId = params.orgId;
-    let projectId = params.projectId;
-    let version = encodeURIComponent(params.version);
+    const params = this.props.params;
+    const orgId = params.orgId;
+    const projectId = params.projectId;
+    const version = encodeURIComponent(params.version);
 
     return `/projects/${orgId}/${projectId}/releases/${version}/`;
   },
@@ -98,8 +98,8 @@ const ProjectReleaseDetails = createReactClass({
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let release = this.state.release;
-    let {orgId, projectId} = this.props.params;
+    const release = this.state.release;
+    const {orgId, projectId} = this.props.params;
 
     return (
       <DocumentTitle title={this.getTitle()}>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseAllEvents.jsx
index 6f3ca117c8..c16879d0f1 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/releaseAllEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/releaseAllEvents.jsx
@@ -17,7 +17,7 @@ class ReleaseAllEvents extends React.Component {
   };
 
   render() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return (
       <div>
         <div className="alert alert-block">
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseNewEvents.jsx
index de424f2bef..77d28e8f9f 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/releaseNewEvents.jsx
@@ -17,7 +17,7 @@ class ReleaseNewEvents extends React.Component {
   };
 
   render() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return (
       <div>
         <div className="alert alert-block">
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
index c848e650d9..ede61fa5ff 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
@@ -57,8 +57,8 @@ const ReleaseOverview = createReactClass({
   },
 
   fetchAll() {
-    let {orgId, version} = this.props.params;
-    let query = {
+    const {orgId, version} = this.props.params;
+    const query = {
       ...this.props.location.query,
     };
 
@@ -68,7 +68,7 @@ const ReleaseOverview = createReactClass({
       delete query.environment;
     }
 
-    let path = `/organizations/${orgId}/releases/${encodeURIComponent(
+    const path = `/organizations/${orgId}/releases/${encodeURIComponent(
       version
     )}/commitfiles/`;
     this.api.request(path, {
@@ -91,10 +91,12 @@ const ReleaseOverview = createReactClass({
   },
 
   getReleaseProjects() {
-    let {orgId, version} = this.props.params;
-    let query = this.props.environment ? {environment: this.props.environment.name} : {};
+    const {orgId, version} = this.props.params;
+    const query = this.props.environment
+      ? {environment: this.props.environment.name}
+      : {};
 
-    let path = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`;
+    const path = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/`;
     this.api.request(path, {
       query,
       method: 'GET',
@@ -112,9 +114,11 @@ const ReleaseOverview = createReactClass({
   },
 
   getDeploys() {
-    let {orgId, version} = this.props.params;
+    const {orgId, version} = this.props.params;
 
-    let path = `/organizations/${orgId}/releases/${encodeURIComponent(version)}/deploys/`;
+    const path = `/organizations/${orgId}/releases/${encodeURIComponent(
+      version
+    )}/deploys/`;
     this.api.request(path, {
       method: 'GET',
       success: (data, _, jqXHR) => {
@@ -132,10 +136,12 @@ const ReleaseOverview = createReactClass({
   },
 
   getRepos() {
-    let {orgId} = this.props.params;
-    let query = this.props.environment ? {environment: this.props.environment.name} : {};
+    const {orgId} = this.props.params;
+    const query = this.props.environment
+      ? {environment: this.props.environment.name}
+      : {};
 
-    let path = `/organizations/${orgId}/repos/`;
+    const path = `/organizations/${orgId}/repos/`;
     this.api.request(path, {
       method: 'GET',
       query,
@@ -157,19 +163,21 @@ const ReleaseOverview = createReactClass({
   },
 
   render() {
-    let {orgId, projectId, version} = this.props.params;
-    let {release} = this.context;
-    let lastCommit = release.lastCommit;
+    const {orgId, projectId, version} = this.props.params;
+    const {release} = this.context;
+    const lastCommit = release.lastCommit;
 
     if (this.state.loading) return <LoadingIndicator />;
 
     if (this.state.error) return <LoadingError />;
 
-    let {fileList, projects, hasRepos} = this.state;
+    const {fileList, projects, hasRepos} = this.state;
 
-    let filesByRepository = getFilesByRepository(fileList);
+    const filesByRepository = getFilesByRepository(fileList);
 
-    let query = this.props.environment ? {environment: this.props.environment.name} : {};
+    const query = this.props.environment
+      ? {environment: this.props.environment.name}
+      : {};
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
index 361a8ec829..78107e6a23 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
@@ -43,8 +43,8 @@ class ReleaseArtifacts extends React.Component {
   }
 
   getFilesEndpoint() {
-    let {orgId, projectId, version} = this.props.params;
-    let encodedVersion = encodeURIComponent(version);
+    const {orgId, projectId, version} = this.props.params;
+    const encodedVersion = encodeURIComponent(version);
 
     return projectId
       ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/files/`
@@ -78,12 +78,12 @@ class ReleaseArtifacts extends React.Component {
   };
 
   handleRemove(id) {
-    let loadingIndicator = IndicatorStore.add(t('Removing artifact..'));
+    const loadingIndicator = IndicatorStore.add(t('Removing artifact..'));
 
     this.props.api.request(this.getFilesEndpoint() + `${id}/`, {
       method: 'DELETE',
       success: () => {
-        let fileList = this.state.fileList.filter(file => {
+        const fileList = this.state.fileList.filter(file => {
           return file.id !== id;
         });
 
@@ -118,7 +118,7 @@ class ReleaseArtifacts extends React.Component {
         </Panel>
       );
 
-    let access = new Set(this.props.organization.access);
+    const access = new Set(this.props.organization.access);
 
     // TODO(dcramer): files should allow you to download them
     return (
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx
index 4b70f1a0dd..438688af13 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx
@@ -47,9 +47,9 @@ const ReleaseCommits = createReactClass({
   },
 
   getPath() {
-    let {orgId, projectId, version} = this.props.params;
+    const {orgId, projectId, version} = this.props.params;
 
-    let encodedVersion = encodeURIComponent(version);
+    const encodedVersion = encodeURIComponent(version);
 
     return projectId
       ? `/projects/${orgId}/${projectId}/releases/${encodedVersion}/commits/`
@@ -74,9 +74,9 @@ const ReleaseCommits = createReactClass({
   },
 
   getCommitsByRepository() {
-    let {commitList} = this.state;
-    let commitsByRepository = commitList.reduce(function(cbr, commit) {
-      let {repository} = commit;
+    const {commitList} = this.state;
+    const commitsByRepository = commitList.reduce(function(cbr, commit) {
+      const {repository} = commit;
       if (!cbr.hasOwnProperty(repository.name)) {
         cbr[repository.name] = [];
       }
@@ -88,8 +88,8 @@ const ReleaseCommits = createReactClass({
   },
 
   renderCommitsForRepo(repo) {
-    let commitsByRepository = this.getCommitsByRepository();
-    let activeCommits = commitsByRepository[repo];
+    const commitsByRepository = this.getCommitsByRepository();
+    const activeCommits = commitsByRepository[repo];
 
     return (
       <Panel key={repo}>
@@ -108,10 +108,10 @@ const ReleaseCommits = createReactClass({
 
     if (this.state.error) return <LoadingError />;
 
-    let {commitList, activeRepo} = this.state;
+    const {commitList, activeRepo} = this.state;
 
     if (!commitList.length) return <this.emptyState />;
-    let commitsByRepository = this.getCommitsByRepository();
+    const commitsByRepository = this.getCommitsByRepository();
     return (
       <div>
         <div className="heading">
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx
index 182e368356..b164790ca3 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseDetailActions.jsx
@@ -19,8 +19,8 @@ export default class ReleaseDetailsActions extends React.Component {
   };
 
   handleDelete = () => {
-    let {orgId, projectId, release} = this.props;
-    let redirectPath = projectId
+    const {orgId, projectId, release} = this.props;
+    const redirectPath = projectId
       ? `/${orgId}/${projectId}/releases/`
       : `/organizations/${orgId}/releases/`;
     addLoadingMessage(t('Deleting Release...'));
diff --git a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
index d96b1b044c..193ea19c1c 100644
--- a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
@@ -71,10 +71,10 @@ class OrganizationReleases extends AsyncView {
   }
 
   onSearch = query => {
-    let targetQueryParams = {};
+    const targetQueryParams = {};
     if (query !== '') targetQueryParams.query = query;
 
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     browserHistory.push({
       pathname: `/organizations/${orgId}/releases/`,
       query: targetQueryParams,
diff --git a/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx
index b4cfd5603f..bbb7404e02 100644
--- a/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx
@@ -42,7 +42,7 @@ const ProjectReleases = createReactClass({
   mixins: [ApiMixin],
 
   getInitialState() {
-    let queryParams = this.props.location.query;
+    const queryParams = this.props.location.query;
 
     return {
       releaseList: [],
@@ -60,7 +60,7 @@ const ProjectReleases = createReactClass({
   },
 
   componentDidMount() {
-    let {organization, project} = this.context;
+    const {organization, project} = this.context;
 
     analytics('releases.tab_viewed', {
       org_id: parseInt(organization.id, 10),
@@ -75,7 +75,7 @@ const ProjectReleases = createReactClass({
     );
 
     if (searchHasChanged) {
-      let queryParams = nextProps.location.query;
+      const queryParams = nextProps.location.query;
       this.setState(
         {
           query: queryParams.query,
@@ -90,10 +90,10 @@ const ProjectReleases = createReactClass({
   },
 
   onSearch(query) {
-    let targetQueryParams = {};
+    const targetQueryParams = {};
     if (query !== '') targetQueryParams.query = query;
 
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     browserHistory.push({
       pathname: `/${orgId}/${projectId}/releases/`,
       query: targetQueryParams,
@@ -143,7 +143,7 @@ const ProjectReleases = createReactClass({
 
   renderStreamBody() {
     let body;
-    let {params} = this.props;
+    const {params} = this.props;
 
     if (this.state.loading) body = this.renderLoading();
     else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
@@ -180,7 +180,7 @@ const ProjectReleases = createReactClass({
   renderEmpty() {
     const {environment} = this.state;
     const {project} = this.context;
-    let anyProjectReleases = project.latestRelease;
+    const anyProjectReleases = project.latestRelease;
 
     const message = environment
       ? tct("There don't seem to be any releases in your [env] environment yet", {
diff --git a/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx b/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx
index a3c7c7f754..0c5368de52 100644
--- a/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx
@@ -73,7 +73,7 @@ const ReleaseLanding = withApi(
     }
 
     componentDidMount() {
-      let {organization, project} = this.context;
+      const {organization, project} = this.context;
       analytics('releases.landing_card_viewed', {
         org_id: parseInt(organization.id, 10),
         project_id: project && parseInt(project.id, 10),
@@ -81,10 +81,10 @@ const ReleaseLanding = withApi(
     }
 
     handleClick = () => {
-      let {stepId} = this.state;
-      let {organization, project} = this.context;
+      const {stepId} = this.state;
+      const {organization, project} = this.context;
 
-      let title = cards[stepId].title;
+      const title = cards[stepId].title;
       if (stepId >= cards.length - 1) return;
       this.setState(state => ({
         stepId: state.stepId + 1,
@@ -103,8 +103,8 @@ const ReleaseLanding = withApi(
     };
 
     render() {
-      let {stepId} = this.state;
-      let card = this.getCard(stepId);
+      const {stepId} = this.state;
+      const card = this.getCard(stepId);
 
       return (
         <div className="container">
diff --git a/src/sentry/static/sentry/app/views/releases/list/shared/releaseLandingCard.jsx b/src/sentry/static/sentry/app/views/releases/list/shared/releaseLandingCard.jsx
index 5619521218..a1cb03489f 100644
--- a/src/sentry/static/sentry/app/views/releases/list/shared/releaseLandingCard.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/shared/releaseLandingCard.jsx
@@ -15,7 +15,7 @@ class ReleaseLandingCard extends React.Component {
   };
 
   getMessage = () => {
-    let {cardsLength, step} = this.props;
+    const {cardsLength, step} = this.props;
     if (step == 0) {
       return t('Tell Me More');
     } else if (step < cardsLength - 1) {
@@ -26,9 +26,9 @@ class ReleaseLandingCard extends React.Component {
   };
 
   render() {
-    let {card, cardsLength, step} = this.props;
-    let CardComponent = card.component;
-    let finalStep = step === cardsLength - 1;
+    const {card, cardsLength, step} = this.props;
+    const CardComponent = card.component;
+    const finalStep = step === cardsLength - 1;
     return (
       <div className="row">
         <div className="col-md-6">
diff --git a/src/sentry/static/sentry/app/views/releases/list/shared/releaseProgress.jsx b/src/sentry/static/sentry/app/views/releases/list/shared/releaseProgress.jsx
index e8d002606e..55167e180d 100644
--- a/src/sentry/static/sentry/app/views/releases/list/shared/releaseProgress.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/shared/releaseProgress.jsx
@@ -42,8 +42,8 @@ class ReleaseProgress extends AsyncComponent {
   };
 
   getEndpoints() {
-    let {project, organization} = this.props;
-    let data = {
+    const {project, organization} = this.props;
+    const data = {
       organization_id: organization.id,
       project_id: project.id,
       feature: 'releases',
@@ -65,7 +65,7 @@ class ReleaseProgress extends AsyncComponent {
   }
 
   buildMessage(remainingSteps) {
-    let keys = remainingSteps.map(step => step.step);
+    const keys = remainingSteps.map(step => step.step);
     let message = "You're missing out on ";
 
     if (keys.includes('tag')) {
@@ -88,7 +88,7 @@ class ReleaseProgress extends AsyncComponent {
     if (setupStatus) {
       remainingSteps = setupStatus.filter(step => step.complete === false);
 
-      let nextStep = remainingSteps[0] && STEPS[remainingSteps[0].step];
+      const nextStep = remainingSteps[0] && STEPS[remainingSteps[0].step];
 
       this.buildMessage(remainingSteps);
 
@@ -108,8 +108,8 @@ class ReleaseProgress extends AsyncComponent {
     let show;
     if (data && data.snoozed_ts) {
       // check if more than 3 days have passed since snooze
-      let now = Date.now() / 1000;
-      let snoozingTime = (now - data.snoozed_ts) / (60 * 24);
+      const now = Date.now() / 1000;
+      const snoozingTime = (now - data.snoozed_ts) / (60 * 24);
       show = snoozingTime > 3 ? true : false;
     } else if (data && data.dismissed_ts) {
       show = false;
@@ -121,9 +121,9 @@ class ReleaseProgress extends AsyncComponent {
   }
 
   handleClick(action) {
-    let {project, organization} = this.props;
+    const {project, organization} = this.props;
 
-    let params = {
+    const params = {
       projectId: project.id,
       organizationId: organization.id,
       feature: 'releases',
@@ -136,7 +136,7 @@ class ReleaseProgress extends AsyncComponent {
   }
 
   recordAnalytics(action, data) {
-    let {project, organization} = this.props;
+    const {project, organization} = this.props;
 
     data.org_id = parseInt(organization.id, 10);
     data.project_id = parseInt(project.id, 10);
@@ -151,15 +151,15 @@ class ReleaseProgress extends AsyncComponent {
   }
 
   getWidth() {
-    let {remainingSteps} = this.state;
-    let width =
+    const {remainingSteps} = this.state;
+    const width =
       100 * (Object.keys(STEPS).length - remainingSteps) / Object.keys(STEPS).length;
 
     return width === 0 ? 25 : width;
   }
 
   renderBody() {
-    let {remainingSteps, showBar, nextStep, message} = this.state;
+    const {remainingSteps, showBar, nextStep, message} = this.state;
 
     if (!remainingSteps || remainingSteps === 0 || !showBar) {
       return null;
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 138729baeb..8797447c9c 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -23,13 +23,14 @@ class RouteError extends React.Component {
   };
 
   componentWillMount() {
-    let {disableLogSentry, disableReport, routes, error} = this.props;
-    let {organization, project} = this.context;
+    let {error} = this.props;
+    const {disableLogSentry, disableReport, routes} = this.props;
+    const {organization, project} = this.context;
 
     if (disableLogSentry) return;
     if (!error) return;
 
-    let route = getRouteStringFromRoutes(routes);
+    const route = getRouteStringFromRoutes(routes);
     if (route) {
       error = new Error(error.message + `: ${route}`);
     }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
index d6825f9dc6..640d1c165f 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountAuthorizations.jsx
@@ -18,12 +18,12 @@ class AuthorizationRow extends React.Component {
   };
 
   handleRevoke = () => {
-    let {authorization} = this.props;
+    const {authorization} = this.props;
     this.props.onRevoke(authorization);
   };
 
   render() {
-    let authorization = this.props.authorization;
+    const authorization = this.props.authorization;
 
     return (
       <PanelItem>
@@ -67,14 +67,14 @@ class AccountAuthorizations extends AsyncView {
   }
 
   handleRevoke = authorization => {
-    let oldData = this.state.data;
+    const oldData = this.state.data;
 
     this.setState(
       state => ({
         data: state.data.filter(({id}) => id !== authorization.id),
       }),
       () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
         this.api.request('/api-authorizations/', {
           method: 'DELETE',
           data: {authorization: authorization.id},
@@ -94,8 +94,8 @@ class AccountAuthorizations extends AsyncView {
   };
 
   renderBody() {
-    let {data} = this.state;
-    let isEmpty = data.length === 0;
+    const {data} = this.state;
+    const isEmpty = data.length === 0;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountAvatar.jsx b/src/sentry/static/sentry/app/views/settings/account/accountAvatar.jsx
index aa3c102016..4a18987d14 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountAvatar.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountAvatar.jsx
@@ -65,7 +65,7 @@ const AccountAvatar = createReactClass({
   },
 
   handleSuccess(user) {
-    let {onSave} = this.props;
+    const {onSave} = this.props;
     this.setState({user});
     onSave(user);
     addSuccessMessage(t('Successfully saved avatar preferences'));
@@ -92,7 +92,7 @@ const AccountAvatar = createReactClass({
   },
 
   handleChange(id) {
-    let user = {...this.state.user};
+    const user = {...this.state.user};
     user.avatar.avatarType = id;
     this.updateUserState(user);
   },
@@ -105,7 +105,7 @@ const AccountAvatar = createReactClass({
       return <LoadingIndicator />;
     }
 
-    let gravatarMessage = (
+    const gravatarMessage = (
       <Well>
         {t('Gravatars are managed through ')}
         <a href="http://gravatar.com" target="_blank" rel="noreferrer noopener">
@@ -114,7 +114,7 @@ const AccountAvatar = createReactClass({
       </Well>
     );
 
-    let isLetter = this.state.user.avatar.avatarType == 'letter_avatar';
+    const isLetter = this.state.user.avatar.avatarType == 'letter_avatar';
 
     return (
       <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
index aced309a59..d8dbcfeb0e 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
@@ -68,13 +68,13 @@ class AccountClose extends AsyncView {
   };
 
   handleChange = ({slug}, isSingle, event) => {
-    let checked = event.target.checked;
+    const checked = event.target.checked;
 
     // Can't unselect an org where you are the single owner
     if (isSingle) return;
 
     this.setState(state => {
-      let set = state.orgsToRemove || new Set(this.getSingleOwners());
+      const set = state.orgsToRemove || new Set(this.getSingleOwners());
       if (checked) {
         set.add(slug);
       } else {
@@ -88,8 +88,9 @@ class AccountClose extends AsyncView {
   };
 
   handleRemoveAccount = () => {
-    let {orgsToRemove} = this.state;
-    let orgs = orgsToRemove === null ? this.getSingleOwners() : Array.from(orgsToRemove);
+    const {orgsToRemove} = this.state;
+    const orgs =
+      orgsToRemove === null ? this.getSingleOwners() : Array.from(orgsToRemove);
 
     addMessage('Closing account...');
 
@@ -114,7 +115,7 @@ class AccountClose extends AsyncView {
   };
 
   renderBody() {
-    let {organizations, orgsToRemove} = this.state;
+    const {organizations, orgsToRemove} = this.state;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx
index ae76e9c354..e14421a794 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountDetails.jsx
@@ -24,7 +24,7 @@ class AccountDetails extends AsyncView {
   handleSubmitError = (resp, model, id) => {};
 
   renderBody() {
-    let {user} = this.state;
+    const {user} = this.state;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
index 42c7ad6af8..a3f4c4b91c 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
@@ -42,7 +42,7 @@ class EmailRow extends React.Component {
   };
 
   render() {
-    let {email, isPrimary, isVerified, hideRemove} = this.props;
+    const {email, isPrimary, isVerified, hideRemove} = this.props;
 
     return (
       <PanelItem justify="space-between">
@@ -148,9 +148,9 @@ class AccountEmails extends AsyncView {
   };
 
   renderBody() {
-    let {emails} = this.state;
-    let primary = emails.find(({isPrimary}) => isPrimary);
-    let secondary = emails.filter(({isPrimary}) => !isPrimary);
+    const {emails} = this.state;
+    const primary = emails.find(({isPrimary}) => isPrimary);
+    const secondary = emails.filter(({isPrimary}) => !isPrimary);
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx b/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx
index 296c241be9..69093e4586 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx
@@ -27,11 +27,11 @@ class AccountIdentities extends AsyncView {
   }
 
   handleDisconnect = (identity, e) => {
-    let {identities} = this.state;
+    const {identities} = this.state;
 
     this.setState(
       state => {
-        let newIdentities = state.identities.filter(({id}) => id !== identity.id);
+        const newIdentities = state.identities.filter(({id}) => id !== identity.id);
 
         return {
           identities: newIdentities,
@@ -47,7 +47,7 @@ class AccountIdentities extends AsyncView {
   };
 
   renderBody() {
-    let isEmpty = this.state.identities.length === 0;
+    const isEmpty = this.state.identities.length === 0;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
index da329bfea4..729029c75a 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
@@ -94,7 +94,7 @@ class AccountNotificationsByProject extends React.Component {
   };
 
   getFieldData() {
-    let {projects, field} = this.props;
+    const {projects, field} = this.props;
     ProjectsStore.loadInitialData(projects);
 
     const projectsByOrg = ProjectsStore.getAllGroupedByOrganization();
@@ -215,7 +215,7 @@ export default class AccountNotificationFineTuning extends AsyncView {
 
   // Return a sorted list of user's verified emails
   getEmailChoices() {
-    let {emails} = this.state;
+    const {emails} = this.state;
     if (!emails) return [];
 
     return emails.filter(({isVerified}) => isVerified).sort((a, b) => {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
index 8efbc5b7a8..52722e4d3c 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
@@ -90,8 +90,8 @@ class FineTuningFooter extends React.Component {
   };
 
   render() {
-    let {path, text} = this.props;
-    let baseUrl = '/settings/account/notifications/';
+    const {path, text} = this.props;
+    const baseUrl = '/settings/account/notifications/';
 
     return (
       <PanelFooter css={{borderTop: 'none'}}>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
index c28ae1784e..fe9d2c6a64 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
@@ -46,7 +46,7 @@ class AuthenticatorDate extends React.Component {
     date: PropTypes.string,
   };
   render() {
-    let {label, date} = this.props;
+    const {label, date} = this.props;
 
     return (
       <Flex mb={1}>
@@ -81,11 +81,11 @@ class AccountSecurityDetails extends AsyncView {
   }
 
   handleRemove = device => {
-    let {authenticator} = this.state;
+    const {authenticator} = this.state;
 
     if (!authenticator || !authenticator.authId) return;
-    let isRemovingU2fDevice = !!device;
-    let deviceId = isRemovingU2fDevice ? `${device.key_handle}/` : '';
+    const isRemovingU2fDevice = !!device;
+    const deviceId = isRemovingU2fDevice ? `${device.key_handle}/` : '';
 
     this.setState(
       {
@@ -99,12 +99,12 @@ class AccountSecurityDetails extends AsyncView {
           .then(
             () => {
               this.props.router.push('/settings/account/security');
-              let deviceName = isRemovingU2fDevice ? device.name : 'Authenticator';
+              const deviceName = isRemovingU2fDevice ? device.name : 'Authenticator';
               addSuccessMessage(t('%s has been removed', deviceName));
             },
             () => {
               // Error deleting authenticator
-              let deviceName = isRemovingU2fDevice ? device.name : 'authenticator';
+              const deviceName = isRemovingU2fDevice ? device.name : 'authenticator';
               this.addError(t('Error removing %s', deviceName));
             }
           )
@@ -116,8 +116,8 @@ class AccountSecurityDetails extends AsyncView {
   };
 
   renderBody() {
-    let {authenticator} = this.state;
-    let {deleteDisabled, onRegenerateBackupCodes} = this.props;
+    const {authenticator} = this.state;
+    const {deleteDisabled, onRegenerateBackupCodes} = this.props;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index 62057f07d3..caf4faab76 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -39,7 +39,7 @@ const PENDING_INVITE = 'pending-invite';
  * @param {function} onU2fTap Callback when u2f device is activated
  */
 const getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTap}) => {
-  let {form, qrcode, challenge, id} = authenticator || {};
+  const {form, qrcode, challenge, id} = authenticator || {};
 
   if (!form) return null;
 
@@ -92,7 +92,7 @@ const getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTa
 
   // Need to render device name field + U2f component
   if (id === 'u2f') {
-    let deviceNameField = form.find(({name}) => name === 'deviceName');
+    const deviceNameField = form.find(({name}) => name === 'deviceName');
     return [
       deviceNameField,
       () => (
@@ -129,7 +129,7 @@ class AccountSecurityEnroll extends AsyncView {
         {},
         {
           allowError: err => {
-            let alreadyEnrolled =
+            const alreadyEnrolled =
               err &&
               err.status === 400 &&
               err.responseJSON &&
@@ -188,12 +188,12 @@ class AccountSecurityEnroll extends AsyncView {
 
   // Handles
   handleSmsSubmit = dataModel => {
-    let {authenticator, hasSentCode} = this.state;
+    const {authenticator, hasSentCode} = this.state;
 
     // Don't submit if empty
     if (!this._form.phone) return;
 
-    let data = {
+    const data = {
       phone: this._form.phone,
       // Make sure `otp` is undefined if we are submitting OTP verification
       // Otherwise API will think that we are on verification step (e.g. after submitting phone)
@@ -236,7 +236,7 @@ class AccountSecurityEnroll extends AsyncView {
         },
         error => {
           this._form = {};
-          let isSmsInterface = authenticator.id === 'sms';
+          const isSmsInterface = authenticator.id === 'sms';
 
           this.setState({
             hasSentCode: !isSmsInterface,
@@ -245,7 +245,7 @@ class AccountSecurityEnroll extends AsyncView {
           // Re-mount because we want to fetch a fresh secret
           this.remountComponent();
 
-          let errorMessage = this.state.hasSentCode
+          const errorMessage = this.state.hasSentCode
             ? t('Incorrect OTP')
             : t('Error sending SMS');
           addErrorMessage(errorMessage);
@@ -268,9 +268,9 @@ class AccountSecurityEnroll extends AsyncView {
 
   // Currently only TOTP uses this
   handleSubmit = dataModel => {
-    let {authenticator} = this.state;
+    const {authenticator} = this.state;
 
-    let data = {
+    const data = {
       ...this._form,
       ...(dataModel || {}),
       secret: authenticator.secret,
@@ -291,7 +291,7 @@ class AccountSecurityEnroll extends AsyncView {
   // Handler when we successfully add a 2fa device
   handleEnrollSuccess = () => {
     this.loadOrganizationContext();
-    let authenticatorName =
+    const authenticatorName =
       (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
     this.props.router.push('/settings/account/security');
     openRecoveryOptions({
@@ -301,7 +301,7 @@ class AccountSecurityEnroll extends AsyncView {
 
   // Handler when we failed to add a 2fa device
   handleEnrollError = () => {
-    let authenticatorName =
+    const authenticatorName =
       (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
     this.setState({loading: false});
     addErrorMessage(t('Error adding %s authenticator', authenticatorName));
@@ -309,7 +309,7 @@ class AccountSecurityEnroll extends AsyncView {
 
   // Removes an authenticator
   handleRemove = () => {
-    let {authenticator} = this.state;
+    const {authenticator} = this.state;
 
     if (!authenticator || !authenticator.authId) return;
 
@@ -332,15 +332,15 @@ class AccountSecurityEnroll extends AsyncView {
   };
 
   renderBody() {
-    let {authenticator} = this.state;
+    const {authenticator} = this.state;
 
     if (!authenticator) {
       return null;
     }
 
-    let endpoint = `${ENDPOINT}${this.props.params.authId}/`;
+    const endpoint = `${ENDPOINT}${this.props.params.authId}/`;
 
-    let fields = getFields({
+    const fields = getFields({
       authenticator,
       hasSentCode: this.state.hasSentCode,
       onSmsReset: this.handleSmsReset,
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx
index e4b5557222..10005bb88d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecuritySessionHistory.jsx
@@ -22,7 +22,7 @@ class SessionRow extends React.Component {
   };
 
   render() {
-    let {ipAddress, countryCode, regionCode, lastSeen, firstSeen} = this.props;
+    const {ipAddress, countryCode, regionCode, lastSeen, firstSeen} = this.props;
 
     return (
       <PanelItem justify="space-between">
@@ -66,7 +66,7 @@ class AccountSecuritySessionHistory extends AsyncView {
   }
 
   renderBody() {
-    let {ipList} = this.state;
+    const {ipList} = this.state;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
index e3a76be9c6..0a78391a21 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
@@ -44,13 +44,13 @@ class AccountSecurityWrapper extends AsyncComponent {
   };
 
   renderBody() {
-    let {authenticators, organizations} = this.state;
+    const {authenticators, organizations} = this.state;
 
-    let countEnrolled = authenticators.filter(
+    const countEnrolled = authenticators.filter(
       auth => auth.isEnrolled && !auth.isBackupInterface
     ).length;
-    let orgsRequire2fa = organizations.filter(org => org.require2FA);
-    let deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;
+    const orgsRequire2fa = organizations.filter(org => org.require2FA);
+    const deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;
 
     // This happens when you switch between children views
     // And the next child view is lazy loaded, it can potentially be `null`
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
index 040f7e0da5..6e4653f9d6 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
@@ -29,18 +29,18 @@ class RecoveryCodes extends React.Component {
   };
 
   printCodes = () => {
-    let iframe = window.frames.printable;
+    const iframe = window.frames.printable;
     iframe.document.write(this.props.codes.join('<br>'));
     iframe.print();
     iframe.document.close();
   };
 
   render() {
-    let {isEnrolled, codes} = this.props;
+    const {isEnrolled, codes} = this.props;
 
     if (!isEnrolled || !codes) return null;
 
-    let formattedCodes = codes.join(' \n');
+    const formattedCodes = codes.join(' \n');
 
     return (
       <Panel css={{marginTop: 30}}>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
index 02c4aee396..99108d167d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
@@ -8,7 +8,7 @@ import Alert from 'app/components/alert';
 import AsyncComponent from 'app/components/asyncComponent';
 import space from 'app/styles/space';
 
-let StyledAlert = styled(Alert)`
+const StyledAlert = styled(Alert)`
   margin: ${space(3)} 0;
 `;
 
@@ -22,18 +22,18 @@ class TwoFactorRequired extends AsyncComponent {
   }
 
   renderBody() {
-    let {orgsRequire2fa} = this.props;
+    const {orgsRequire2fa} = this.props;
     if (!orgsRequire2fa.length) {
       return null;
     }
 
     // singular vs plural message
-    let plural = orgsRequire2fa.length > 1;
-    let require = plural ? t('organizations require') : t('organization requires');
-    let organizations = plural ? t('these organizations') : t('this organization');
+    const plural = orgsRequire2fa.length > 1;
+    const require = plural ? t('organizations require') : t('organization requires');
+    const organizations = plural ? t('these organizations') : t('this organization');
 
-    let names = orgsRequire2fa.map(({name}) => capitalize(name));
-    let organizationNames = [names.slice(0, -1).join(', '), names.slice(-1)[0]].join(
+    const names = orgsRequire2fa.map(({name}) => capitalize(name));
+    const organizationNames = [names.slice(0, -1).join(', '), names.slice(-1)[0]].join(
       plural ? ' and ' : ''
     );
 
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
index 9c29af0122..a8a225cfc6 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
@@ -29,13 +29,13 @@ class U2fEnrolledDetails extends React.Component {
   };
 
   render() {
-    let {isEnrolled, devices, id, onRemoveU2fDevice} = this.props;
+    const {isEnrolled, devices, id, onRemoveU2fDevice} = this.props;
 
     if (id !== 'u2f' || !isEnrolled) return null;
 
-    let hasDevices = devices && devices.length;
+    const hasDevices = devices && devices.length;
     // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons
-    let isLastDevice = hasDevices === 1;
+    const isLastDevice = hasDevices === 1;
 
     return (
       <Panel css={{marginTop: 30}}>
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
index f7a6c60867..8a2cce48f7 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
@@ -55,14 +55,14 @@ class AccountSecurity extends AsyncView {
   };
 
   renderBody() {
-    let {
+    const {
       authenticators,
       orgsRequire2fa,
       countEnrolled,
       deleteDisabled,
       onDisable,
     } = this.props;
-    let isEmpty = !authenticators.length;
+    const isEmpty = !authenticators.length;
 
     return (
       <div>
@@ -115,7 +115,7 @@ class AccountSecurity extends AsyncView {
           <PanelBody>
             {!isEmpty &&
               authenticators.map(auth => {
-                let {
+                const {
                   id,
                   authId,
                   description,
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
index 5bb709a9d6..7282438770 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
@@ -12,7 +12,7 @@ class AccountSettingsLayout extends React.Component {
   };
 
   componentDidUpdate(prevProps) {
-    let {organization} = this.props;
+    const {organization} = this.props;
     if (prevProps.organization === organization) return;
 
     // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSubscriptions.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSubscriptions.jsx
index de86b58c64..d7310c1249 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSubscriptions.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSubscriptions.jsx
@@ -37,11 +37,11 @@ class AccountSubscriptions extends AsyncView {
   }
 
   handleToggle = (subscription, index, e) => {
-    let subscribed = !subscription.subscribed;
-    let oldSubscriptions = this.state.subscriptions;
+    const subscribed = !subscription.subscribed;
+    const oldSubscriptions = this.state.subscriptions;
 
     this.setState(state => {
-      let newSubscriptions = state.subscriptions.slice();
+      const newSubscriptions = state.subscriptions.slice();
       newSubscriptions[index] = {
         ...subscription,
         subscribed,
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
index 8c7c95b5c6..dcd7a4da08 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
@@ -38,7 +38,7 @@ class ApiApplicationDetails extends AsyncView {
   }
 
   renderBody() {
-    let urlPrefix = ConfigStore.get('urlPrefix');
+    const urlPrefix = ConfigStore.get('urlPrefix');
 
     return (
       <div>
@@ -99,7 +99,7 @@ class ApiApplicationDetails extends AsyncView {
 
                 <FormField name="" label="Token URL">
                   {() => {
-                    let value = `${urlPrefix}/oauth/token/`;
+                    const value = `${urlPrefix}/oauth/token/`;
                     return <TextCopyInput>{value}</TextCopyInput>;
                   }}
                 </FormField>
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
index 0693d4cae5..1ac8e2a462 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
@@ -41,14 +41,14 @@ const ApiApplicationRow = createReactClass({
   handleRemove() {
     if (this.state.loading) return;
 
-    let app = this.props.app;
+    const app = this.props.app;
 
     this.setState(
       {
         loading: true,
       },
       () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
         this.api.request(`/api-applications/${app.id}/`, {
           method: 'DELETE',
           success: data => {
@@ -71,7 +71,7 @@ const ApiApplicationRow = createReactClass({
   },
 
   render() {
-    let app = this.props.app;
+    const app = this.props.app;
 
     let btnClassName = 'btn btn-default';
     if (this.state.loading) btnClassName += ' disabled';
@@ -119,7 +119,7 @@ class ApiApplications extends AsyncView {
   }
 
   handleCreateApplication = () => {
-    let indicator = addLoadingMessage();
+    const indicator = addLoadingMessage();
     this.api.request('/api-applications/', {
       method: 'POST',
       success: app => {
@@ -141,7 +141,7 @@ class ApiApplications extends AsyncView {
   };
 
   renderBody() {
-    let action = (
+    const action = (
       <Button
         priority="primary"
         size="small"
@@ -153,7 +153,7 @@ class ApiApplications extends AsyncView {
       </Button>
     );
 
-    let isEmpty = this.state.appList.length === 0;
+    const isEmpty = this.state.appList.length === 0;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiTokenRow.jsx b/src/sentry/static/sentry/app/views/settings/account/apiTokenRow.jsx
index 529a936029..e0c9c1bc48 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiTokenRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiTokenRow.jsx
@@ -57,12 +57,12 @@ class ApiTokenRow extends React.Component {
   };
 
   handleRemove = () => {
-    let {onRemove, token} = this.props;
+    const {onRemove, token} = this.props;
     onRemove(token);
   };
 
   render() {
-    let {token} = this.props;
+    const {token} = this.props;
 
     return (
       <StyledPanelItem p={2}>
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx b/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx
index 5cea91d93e..54e01025ca 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiTokens.jsx
@@ -29,8 +29,8 @@ class ApiTokens extends AsyncView {
   }
 
   handleRemoveToken = token => {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let oldTokenList = this.state.tokenList;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const oldTokenList = this.state.tokenList;
 
     this.setState(
       state => ({
@@ -56,11 +56,11 @@ class ApiTokens extends AsyncView {
   };
 
   renderBody() {
-    let {tokenList} = this.state;
+    const {tokenList} = this.state;
 
-    let isEmpty = tokenList.length === 0;
+    const isEmpty = tokenList.length === 0;
 
-    let action = (
+    const action = (
       <Button
         priority="primary"
         size="small"
diff --git a/src/sentry/static/sentry/app/views/settings/account/passwordForm.jsx b/src/sentry/static/sentry/app/views/settings/account/passwordForm.jsx
index 318201e82c..5a972a085b 100644
--- a/src/sentry/static/sentry/app/views/settings/account/passwordForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/passwordForm.jsx
@@ -23,7 +23,7 @@ class PasswordForm extends React.Component {
   };
 
   render() {
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
     return (
       <Form
         apiMethod="PUT"
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
index b5d4a93050..0668add322 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/apiForm.jsx
@@ -25,7 +25,7 @@ export default class ApiForm extends React.Component {
 
   onSubmit = (data, onSuccess, onError) => {
     this.props.onSubmit && this.props.onSubmit(data);
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(this.props.apiEndpoint, {
       method: this.props.apiMethod,
       data,
@@ -42,7 +42,7 @@ export default class ApiForm extends React.Component {
 
   render() {
     // eslint-disable-next-line no-unused-vars
-    let {onSubmit, apiMethod, apiEndpoint, ...otherProps} = this.props;
+    const {onSubmit, apiMethod, apiEndpoint, ...otherProps} = this.props;
 
     return <Form onSubmit={this.onSubmit} {...otherProps} />;
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
index 08fe3eec78..7224d69798 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
@@ -19,13 +19,13 @@ export default class BooleanField extends InputField {
 
   handleChange = (value, onChange, onBlur, e) => {
     // We need to toggle current value because Switch is not an input
-    let newValue = this.coerceValue(!value);
+    const newValue = this.coerceValue(!value);
     onChange(newValue, e);
     onBlur(newValue, e);
   };
 
   render() {
-    let {confirm, ...fieldProps} = this.props;
+    const {confirm, ...fieldProps} = this.props;
 
     return (
       <InputField
@@ -33,9 +33,9 @@ export default class BooleanField extends InputField {
         resetOnError
         field={({onChange, onBlur, value, disabled, ...props}) => {
           // Create a function with required args bound
-          let handleChange = this.handleChange.bind(this, value, onChange, onBlur);
+          const handleChange = this.handleChange.bind(this, value, onChange, onBlur);
 
-          let switchProps = {
+          const switchProps = {
             size: 'lg',
             ...props,
             isActive: !!value,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
index 525155b550..ae0bbec179 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
@@ -32,7 +32,7 @@ export default class MultipleCheckbox extends React.Component {
   };
 
   onChange = (selectedValue, e) => {
-    let {value, onChange} = this.props;
+    const {value, onChange} = this.props;
     let newValue;
 
     if (typeof onChange !== 'function') return;
@@ -47,7 +47,7 @@ export default class MultipleCheckbox extends React.Component {
   };
 
   render() {
-    let {disabled, choices, value} = this.props;
+    const {disabled, choices, value} = this.props;
 
     return (
       <MultipleCheckboxWrapper>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioBoolean.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioBoolean.jsx
index 5230c40377..720cb3189e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioBoolean.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/radioBoolean.jsx
@@ -12,15 +12,15 @@ class Option extends React.Component {
   };
 
   handleChange = e => {
-    let {onChange} = this.props;
-    let value = e.target.value === 'true';
+    const {onChange} = this.props;
+    const value = e.target.value === 'true';
 
     if (typeof onChange === 'function') {
       onChange(value, e);
     }
   };
   render() {
-    let {name, disabled, label, value, checked} = this.props;
+    const {name, disabled, label, value, checked} = this.props;
 
     return (
       <div className="radio">
@@ -58,8 +58,8 @@ export default class RadioBoolean extends React.Component {
   };
 
   render() {
-    let {disabled, yesFirst, yesLabel, noLabel, name, onChange, value} = this.props;
-    let yesOption = (
+    const {disabled, yesFirst, yesLabel, noLabel, name, onChange, value} = this.props;
+    const yesOption = (
       <Option
         value="true"
         checked={value === true}
@@ -69,7 +69,7 @@ export default class RadioBoolean extends React.Component {
         onChange={onChange}
       />
     );
-    let noOption = (
+    const noOption = (
       <Option
         value="false"
         checked={value === false}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index 94e107ef6e..79b7ef390d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -50,7 +50,7 @@ class RangeSlider extends React.Component {
   constructor(props) {
     super(props);
 
-    let state = {sliderValue: props.value};
+    const state = {sliderValue: props.value};
     if (props.allowedValues) {
       // With `allowedValues` sliderValue will be the index to value in `allowedValues`
       // This is so we can snap the rangeSlider using `step`
@@ -67,7 +67,7 @@ class RangeSlider extends React.Component {
   componentWillReceiveProps(nextProps) {
     // Update local state when re-rendered with next `props.value` (e.g if this is controlled)
     if (typeof nextProps.value !== 'undefined') {
-      let {allowedValues} = this.props;
+      const {allowedValues} = this.props;
       let sliderValue = nextProps.value;
 
       // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`
@@ -79,7 +79,7 @@ class RangeSlider extends React.Component {
   }
 
   getActualValue = sliderValue => {
-    let {allowedValues} = this.props;
+    const {allowedValues} = this.props;
     let value;
 
     if (allowedValues) {
@@ -93,28 +93,29 @@ class RangeSlider extends React.Component {
   };
 
   handleInput = e => {
-    let sliderValue = parseInt(e.target.value, 10);
+    const sliderValue = parseInt(e.target.value, 10);
 
     this.setState({
       sliderValue,
     });
 
     if (this.props.onChange) {
-      let value = this.getActualValue(sliderValue);
+      const value = this.getActualValue(sliderValue);
       this.props.onChange(value, e);
     }
   };
 
   handleBlur = e => {
-    let {onBlur} = this.props;
+    const {onBlur} = this.props;
     if (typeof onBlur !== 'function') return;
 
     onBlur(e);
   };
 
   render() {
-    let {name, min, max, step, disabled, allowedValues, formatLabel} = this.props;
-    let {sliderValue} = this.state;
+    let {min, max, step} = this.props;
+    const {name, disabled, allowedValues, formatLabel} = this.props;
+    const {sliderValue} = this.state;
     let actualValue = sliderValue;
     let displayValue = actualValue;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
index 848d48b636..da4d95f6bb 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
@@ -55,7 +55,7 @@ class FieldControl extends React.Component {
   };
 
   render() {
-    let {
+    const {
       inline,
       alignRight,
       disabled,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
index 6978b947b4..912577ad2f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
@@ -100,8 +100,8 @@ class Field extends React.Component {
   };
 
   render() {
-    let {className, ...otherProps} = this.props;
-    let {
+    const {className, ...otherProps} = this.props;
+    const {
       controlClassName,
       alignRight,
       inline,
@@ -118,15 +118,15 @@ class Field extends React.Component {
       children,
       style,
     } = otherProps;
-    let isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
-    let isVisible = typeof visible === 'function' ? visible(this.props) : visible;
+    const isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
+    const isVisible = typeof visible === 'function' ? visible(this.props) : visible;
     let Control;
 
     if (!isVisible) {
       return null;
     }
 
-    let controlProps = {
+    const controlProps = {
       className: controlClassName,
       inline,
       alignRight,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index f6dad1aba5..3665a38fa6 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -59,9 +59,9 @@ export default class FieldFromConfig extends React.Component {
   };
 
   render() {
-    let {field, ...otherProps} = this.props;
+    const {field, ...otherProps} = this.props;
 
-    let props = {
+    const props = {
       ...otherProps,
       ...field,
     };
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
index f12afccb51..d46d73be06 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
@@ -59,7 +59,7 @@ export default class Form extends React.Component {
 
   constructor(props, context) {
     super(props, context);
-    let {
+    const {
       saveOnBlur,
       apiEndpoint,
       apiMethod,
@@ -127,7 +127,7 @@ export default class Form extends React.Component {
   };
 
   render() {
-    let {
+    const {
       className,
       children,
       footerClass,
@@ -142,7 +142,8 @@ export default class Form extends React.Component {
       saveOnBlur,
       hideFooter,
     } = this.props;
-    let shouldShowFooter = typeof hideFooter !== 'undefined' ? !hideFooter : !saveOnBlur;
+    const shouldShowFooter =
+      typeof hideFooter !== 'undefined' ? !hideFooter : !saveOnBlur;
 
     return (
       <form
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index c28526889f..37a2898d6f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -81,8 +81,8 @@ const ReturnButtonStyled = styled(returnButton)`
  * the case where they return a value as the first argument.
  */
 const getValueFromEvent = (valueOrEvent, e) => {
-  let event = e || valueOrEvent;
-  let value = defined(e) ? valueOrEvent : event && event.target && event.target.value;
+  const event = e || valueOrEvent;
+  const value = defined(e) ? valueOrEvent : event && event.target && event.target.value;
 
   return {
     value,
@@ -104,14 +104,14 @@ class ControlState extends React.Component {
   };
 
   render() {
-    let {model, name} = this.props;
+    const {model, name} = this.props;
 
     return (
       <React.Fragment>
         <Observer>
           {() => {
-            let isSaving = model.getFieldState(name, FormState.SAVING);
-            let isSaved = model.getFieldState(name, FormState.READY);
+            const isSaving = model.getFieldState(name, FormState.SAVING);
+            const isSaved = model.getFieldState(name, FormState.READY);
 
             if (isSaving) {
               return (
@@ -135,7 +135,7 @@ class ControlState extends React.Component {
 
         <Observer>
           {() => {
-            let error = model.getError(name);
+            const error = model.getError(name);
 
             if (!error) return null;
 
@@ -268,7 +268,7 @@ class FormField extends React.Component {
   // Attempts to autofocus input field if field's name is in url hash
   handleInputMount = ref => {
     if (ref && !this.input) {
-      let hash = this.context.location && this.context.location.hash;
+      const hash = this.context.location && this.context.location.hash;
 
       if (!hash) return;
 
@@ -287,9 +287,9 @@ class FormField extends React.Component {
    * Update field value in form model
    */
   handleChange = (...args) => {
-    let {name, onChange} = this.props;
-    let {value, event} = getValueFromEvent(...args);
-    let model = this.getModel();
+    const {name, onChange} = this.props;
+    const {value, event} = getValueFromEvent(...args);
+    const model = this.getModel();
 
     if (onChange) {
       onChange(value, event);
@@ -302,9 +302,9 @@ class FormField extends React.Component {
    * Notify model of a field being blurred
    */
   handleBlur = (...args) => {
-    let {name, onBlur} = this.props;
-    let {value, event} = getValueFromEvent(...args);
-    let model = this.getModel();
+    const {name, onBlur} = this.props;
+    const {value, event} = getValueFromEvent(...args);
+    const model = this.getModel();
 
     if (onBlur) {
       onBlur(value, event);
@@ -318,9 +318,9 @@ class FormField extends React.Component {
    * Handle keydown to trigger a save on Enter
    */
   handleKeyDown = (...args) => {
-    let {onKeyDown, name} = this.props;
-    let {value, event} = getValueFromEvent(...args);
-    let model = this.getModel();
+    const {onKeyDown, name} = this.props;
+    const {value, event} = getValueFromEvent(...args);
+    const model = this.getModel();
 
     if (event.key === 'Enter') {
       model.handleBlurField(name, value);
@@ -335,21 +335,21 @@ class FormField extends React.Component {
    * Handle saving an individual field via UI button
    */
   handleSaveField = (...args) => {
-    let {name} = this.props;
-    let model = this.getModel();
+    const {name} = this.props;
+    const model = this.getModel();
 
     model.handleSaveField(name, model.getValue(name));
   };
 
   handleCancelField = (...args) => {
-    let {name} = this.props;
-    let model = this.getModel();
+    const {name} = this.props;
+    const model = this.getModel();
 
     model.handleCancelSaveField(name);
   };
 
   render() {
-    let {
+    const {
       className,
       name,
       hideErrorMessage,
@@ -363,9 +363,9 @@ class FormField extends React.Component {
       defaultValue,
       ...props
     } = this.props;
-    let id = this.getId();
-    let model = this.getModel();
-    let saveOnBlurFieldOverride = typeof saveOnBlur !== 'undefined' && !saveOnBlur;
+    const id = this.getId();
+    const model = this.getModel();
+    const saveOnBlurFieldOverride = typeof saveOnBlur !== 'undefined' && !saveOnBlur;
 
     const makeField = extraProps => (
       <React.Fragment>
@@ -388,8 +388,8 @@ class FormField extends React.Component {
               errorState={
                 <Observer>
                   {() => {
-                    let error = this.getError();
-                    let shouldShowErrorMessage = error && !hideErrorMessage;
+                    const error = this.getError();
+                    const shouldShowErrorMessage = error && !hideErrorMessage;
                     if (!shouldShowErrorMessage) return null;
                     return <FormFieldErrorReason>{error}</FormFieldErrorReason>;
                   }}
@@ -398,9 +398,9 @@ class FormField extends React.Component {
             >
               <Observer>
                 {() => {
-                  let error = this.getError();
-                  let value = model.getValue(name);
-                  let showReturnButton = model.getFieldState(name, 'showReturnButton');
+                  const error = this.getError();
+                  const value = model.getValue(name);
+                  const showReturnButton = model.getFieldState(name, 'showReturnButton');
 
                   return (
                     <React.Fragment>
@@ -430,7 +430,7 @@ class FormField extends React.Component {
         {saveOnBlurFieldOverride && (
           <Observer>
             {() => {
-              let showFieldSave = model.getFieldState(name, 'showSave');
+              const showFieldSave = model.getFieldState(name, 'showSave');
 
               if (!showFieldSave) return null;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
index ef3ee79a8d..3a8d9baf47 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -22,7 +22,7 @@ export default class InputField extends React.Component {
   };
 
   render() {
-    let {className, field} = this.props;
+    const {className, field} = this.props;
 
     return (
       <FormField className={className} {...this.props}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index 5d88e5806f..21473e2cea 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -66,7 +66,7 @@ class JsonForm extends React.Component {
 
   componentWillReceiveProps(nextProps, e) {
     if (this.getLocation(this.props).hash !== this.getLocation(nextProps).hash) {
-      let hash = this.getLocation(nextProps).hash;
+      const hash = this.getLocation(nextProps).hash;
       this.scrollToHash(hash);
       this.setState({highlighted: hash});
     }
@@ -77,7 +77,7 @@ class JsonForm extends React.Component {
   };
 
   scrollToHash(toHash) {
-    let hash = toHash || this.getLocation(this.props).hash;
+    const hash = toHash || this.getLocation(this.props).hash;
 
     if (!hash) return;
 
@@ -88,7 +88,7 @@ class JsonForm extends React.Component {
   }
 
   render() {
-    let {
+    const {
       forms,
       title,
       fields,
@@ -104,8 +104,8 @@ class JsonForm extends React.Component {
       ...otherProps
     } = this.props;
 
-    let hasFormGroups = defined(forms);
-    let formPanelProps = {
+    const hasFormGroups = defined(forms);
+    const formPanelProps = {
       access,
       disabled,
       features,
@@ -172,7 +172,7 @@ class FormPanel extends React.Component {
   };
 
   render() {
-    let {
+    const {
       title,
       fields,
       access,
@@ -184,8 +184,8 @@ class FormPanel extends React.Component {
       location,
       ...otherProps
     } = this.props;
-    let shouldRenderFooter = typeof renderFooter === 'function';
-    let shouldRenderHeader = typeof renderHeader === 'function';
+    const shouldRenderFooter = typeof renderFooter === 'function';
+    const shouldRenderHeader = typeof renderHeader === 'function';
 
     return (
       <Panel key={title} id={title}>
@@ -199,7 +199,7 @@ class FormPanel extends React.Component {
             }
 
             // eslint-disable-next-line no-unused-vars
-            let {defaultValue, ...fieldWithoutDefaultValue} = field;
+            const {defaultValue, ...fieldWithoutDefaultValue} = field;
 
             // Allow the form panel disabled prop to override the fields
             // disabled prop, with fallback to the fields disabled state.
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 6890652ad1..43ac9f100b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -160,13 +160,13 @@ class FormModel {
    * will save Map to `snapshots
    */
   createSnapshot() {
-    let snapshot = new Map(this.fields);
+    const snapshot = new Map(this.fields);
     return () => this.snapshots.unshift(snapshot);
   }
 
   getDescriptor(id, key) {
     // Needs to call `has` or else component will not be reactive if `id` doesn't exist in observable map
-    let descriptor = this.fieldDescriptor.has(id) && this.fieldDescriptor.get(id);
+    const descriptor = this.fieldDescriptor.has(id) && this.fieldDescriptor.get(id);
     if (!descriptor) {
       return null;
     }
@@ -176,7 +176,7 @@ class FormModel {
 
   getFieldState(id, key) {
     // Needs to call `has` or else component will not be reactive if `id` doesn't exist in observable map
-    let fieldState = this.fieldState.has(id) && this.fieldState.get(id);
+    const fieldState = this.fieldState.has(id) && this.fieldState.get(id);
     if (!fieldState) {
       return null;
     }
@@ -193,12 +193,12 @@ class FormModel {
   }
 
   getTransformedValue(id) {
-    let fieldDescriptor = this.fieldDescriptor.get(id);
-    let transformer =
+    const fieldDescriptor = this.fieldDescriptor.get(id);
+    const transformer =
       fieldDescriptor && typeof fieldDescriptor.getValue === 'function'
         ? fieldDescriptor.getValue
         : null;
-    let value = this.getValue(id);
+    const value = this.getValue(id);
 
     return transformer ? transformer(value) : value;
   }
@@ -214,7 +214,7 @@ class FormModel {
    * Form data that will be sent to API endpoint (i.e. after transforms)
    */
   getTransformedData() {
-    let form = this.getData();
+    const form = this.getData();
 
     return Object.keys(form)
       .map(id => [id, this.getTransformedValue(id)])
@@ -231,7 +231,7 @@ class FormModel {
   // Returns true if not required or is required and is not empty
   isValidRequiredField(id) {
     // Check field descriptor to see if field is required
-    let isRequired = this.getDescriptor(id, 'required');
+    const isRequired = this.getDescriptor(id, 'required');
     return !isRequired || this.getValue(id) !== '';
   }
 
@@ -240,8 +240,8 @@ class FormModel {
   }
 
   doApiRequest({apiEndpoint, apiMethod, data}) {
-    let endpoint = apiEndpoint || this.options.apiEndpoint;
-    let method = apiMethod || this.options.apiMethod;
+    const endpoint = apiEndpoint || this.options.apiEndpoint;
+    const method = apiMethod || this.options.apiMethod;
     return new Promise((resolve, reject) => {
       this.api.request(endpoint, {
         method,
@@ -254,7 +254,7 @@ class FormModel {
 
   @action
   setValue(id, value) {
-    let fieldDescriptor = this.fieldDescriptor.get(id);
+    const fieldDescriptor = this.fieldDescriptor.get(id);
     let finalValue = value;
 
     if (fieldDescriptor && typeof fieldDescriptor.transformInput === 'function') {
@@ -274,7 +274,7 @@ class FormModel {
 
   @action
   validateField(id) {
-    let validate = this.getDescriptor(id, 'validate');
+    const validate = this.getDescriptor(id, 'validate');
     let errors = [];
 
     if (typeof validate === 'function') {
@@ -282,7 +282,7 @@ class FormModel {
       errors = validate({model: this, id, form: this.getData()}) || [];
     }
 
-    let fieldIsRequiredMessage = t('Field is required');
+    const fieldIsRequiredMessage = t('Field is required');
 
     if (!this.isValidRequiredField(id)) {
       errors.push([id, fieldIsRequiredMessage]);
@@ -296,10 +296,10 @@ class FormModel {
 
   @action
   updateShowSaveState(id, value) {
-    let isValueChanged = value !== this.initialData[id];
+    const isValueChanged = value !== this.initialData[id];
     // Update field state to "show save" if save on blur is disabled for this field
     // (only if contents of field differs from initial value)
-    let saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
+    const saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
     if (typeof saveOnBlurFieldOverride === 'undefined' || saveOnBlurFieldOverride) return;
     if (this.getFieldState(id, 'showSave') === isValueChanged) return;
 
@@ -308,8 +308,8 @@ class FormModel {
 
   @action
   updateShowReturnButtonState(id, value) {
-    let isValueChanged = value !== this.initialData[id];
-    let shouldShowReturnButton = this.getDescriptor(id, 'showReturnButton');
+    const isValueChanged = value !== this.initialData[id];
+    const shouldShowReturnButton = this.getDescriptor(id, 'showReturnButton');
 
     if (!shouldShowReturnButton) return;
     // Only update state if state has changed
@@ -341,7 +341,7 @@ class FormModel {
     if (this.isError) return null;
     let saveSnapshot = this.createSnapshot();
 
-    let request = this.doApiRequest({
+    const request = this.doApiRequest({
       data: this.getTransformedData(),
     });
 
@@ -380,15 +380,15 @@ class FormModel {
    */
   @action
   saveField(id, currentValue) {
-    let oldValue = this.initialData[id];
-    let savePromise = this.saveFieldRequest(id, currentValue);
+    const oldValue = this.initialData[id];
+    const savePromise = this.saveFieldRequest(id, currentValue);
 
     if (!savePromise) return null;
 
     return savePromise
       .then(resp => {
-        let newValue = this.getValue(id);
-        let change = {old: oldValue, new: newValue};
+        const newValue = this.getValue(id);
+        const change = {old: oldValue, new: newValue};
 
         // Only use `allowUndo` option if explicity defined
         if (typeof this.options.allowUndo === 'undefined' || this.options.allowUndo) {
@@ -420,7 +420,7 @@ class FormModel {
    */
   @action
   saveFieldRequest(id, currentValue) {
-    let initialValue = this.initialData[id];
+    const initialValue = this.initialData[id];
 
     // Don't save if field hasn't changed
     // Don't need to check for error state since initialData wouldn't have updated since last error
@@ -437,13 +437,13 @@ class FormModel {
     // Save field + value
     this.setSaving(id, true);
 
-    let fieldDescriptor = this.fieldDescriptor.get(id);
+    const fieldDescriptor = this.fieldDescriptor.get(id);
 
     // Check if field needs to handle transforming request object
-    let getData =
+    const getData =
       typeof fieldDescriptor.getData === 'function' ? fieldDescriptor.getData : a => a;
 
-    let request = this.doApiRequest({
+    const request = this.doApiRequest({
       data: getData(
         {[id]: this.getTransformedValue(id)},
         {model: this, id, form: this.getData()}
@@ -471,7 +471,7 @@ class FormModel {
 
         // Field can be configured to reset on error
         // e.g. BooleanFields
-        let shouldReset = this.getDescriptor(id, 'resetOnError');
+        const shouldReset = this.getDescriptor(id, 'resetOnError');
         if (shouldReset) {
           this.setValue(id, initialValue);
         }
@@ -517,7 +517,7 @@ class FormModel {
     if (!this.options.saveOnBlur) return null;
 
     // Fields can individually set `saveOnBlur` to `false` (note this is ignored when `undefined`)
-    let saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
+    const saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
     if (typeof saveOnBlurFieldOverride !== 'undefined' && !saveOnBlurFieldOverride) {
       return null;
     }
@@ -550,7 +550,7 @@ class FormModel {
 
   @action
   setFieldState(id, key, value) {
-    let state = {
+    const state = {
       ...(this.fieldState.get(id) || {}),
       [key]: value,
     };
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
index da57d9bb41..945a85887f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
@@ -55,7 +55,7 @@ export default class SelectField extends React.Component {
   };
 
   render() {
-    let {multiple, allowClear, ...otherProps} = this.props;
+    const {multiple, allowClear, ...otherProps} = this.props;
     return (
       <InputField
         {...otherProps}
@@ -63,7 +63,7 @@ export default class SelectField extends React.Component {
         field={({onChange, onBlur, disabled, required, ...props}) => {
           // We remove the required property here since applying it to the
           // DOM causes the native tooltip to render in strange places.
-          let choices = getChoices(props);
+          const choices = getChoices(props);
 
           // Check if value quacks like mobx and get the raw array.
           // Inside Form containers `value` can be a mobx observable
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
index a5ba8a8e09..be34de509d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
@@ -63,7 +63,7 @@ class TextCopyInput extends React.Component {
   handleCopyClick = e => {
     if (!this.textRef.current) return;
 
-    let {onCopy} = this.props;
+    const {onCopy} = this.props;
 
     this.handleSelectText();
 
@@ -81,7 +81,7 @@ class TextCopyInput extends React.Component {
   };
 
   render() {
-    let {style, children} = this.props;
+    const {style, children} = this.props;
 
     return (
       <Flex>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
index b81a71a585..cb9d54d58c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBackButton.jsx
@@ -48,24 +48,24 @@ class BackButton extends React.Component {
   };
 
   render() {
-    let {params, organization, lastRoute} = this.props;
-    let {lastAppContext} = this.context;
+    const {params, organization, lastRoute} = this.props;
+    const {lastAppContext} = this.context;
     // lastAppContext is set when Settings is initial loaded,
     // so if that is truthy, determine if we have project context at that point
     // otherwise use what we have in latest context (e.g. if you navigated to settings directly)
-    let shouldGoBackToProject = lastRoute && lastAppContext === 'project';
+    const shouldGoBackToProject = lastRoute && lastAppContext === 'project';
 
-    let projectId = shouldGoBackToProject || !lastAppContext ? params.projectId : null;
-    let orgId = params.orgId || (organization && organization.slug);
-    let url = projectId ? '/:orgId/:projectId/' : '/:orgId/';
-    let label =
+    const projectId = shouldGoBackToProject || !lastAppContext ? params.projectId : null;
+    const orgId = params.orgId || (organization && organization.slug);
+    const url = projectId ? '/:orgId/:projectId/' : '/:orgId/';
+    const label =
       shouldGoBackToProject || (!lastAppContext && projectId)
         ? t('Project')
         : t('Organization');
 
     // if the user needs to setup 2fa as part of the org invite flow,
     // send them back to accept the invite
-    let pendingInvite = Cookies.get('pending-invite');
+    const pendingInvite = Cookies.get('pending-invite');
 
     if (pendingInvite) {
       return (
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
index 56db77c3a7..bb99254496 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
@@ -81,7 +81,7 @@ class BreadcrumbDropdown extends React.Component {
   };
 
   render() {
-    let {hasMenu, route, isLast, name, items, onSelect} = this.props;
+    const {hasMenu, route, isLast, name, items, onSelect} = this.props;
     return (
       <DropdownAutoCompleteMenu
         blendCorner={false}
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
index a306f41c16..d01c57f1e9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
@@ -30,7 +30,7 @@ class Divider extends React.Component {
     isLast: PropTypes.bool,
   };
   render() {
-    let {isHover, isLast} = this.props;
+    const {isHover, isLast} = this.props;
     if (isLast) return null;
 
     return (
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
index 7fd930ceef..e209da4133 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
@@ -44,18 +44,18 @@ class SettingsBreadcrumb extends React.Component {
   }
 
   render() {
-    let {routes, params, pathMap} = this.props;
-    let lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);
+    const {routes, params, pathMap} = this.props;
+    const lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);
     return (
       <Breadcrumbs>
         {routes.map((route, i) => {
           if (!route.name) return null;
-          let pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];
-          let isLast = i === lastRouteIndex;
-          let createMenu = MENUS[route.name];
-          let Menu = typeof createMenu === 'function' && createMenu;
-          let hasMenu = !!Menu;
-          let CrumbPicker = hasMenu
+          const pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];
+          const isLast = i === lastRouteIndex;
+          const createMenu = MENUS[route.name];
+          const Menu = typeof createMenu === 'function' && createMenu;
+          const hasMenu = !!Menu;
+          const CrumbPicker = hasMenu
             ? Menu
             : () => (
                 <Crumb route={route} isLast={isLast}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/menuItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/menuItem.jsx
index ee4acfb36b..60e4cd68eb 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/menuItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/menuItem.jsx
@@ -5,7 +5,7 @@ import overflowEllipsis from 'app/styles/overflowEllipsis';
 
 class MenuItem extends React.Component {
   render() {
-    let {children, ...props} = this.props;
+    const {children, ...props} = this.props;
     return <StyledMenuItem {...props}>{children}</StyledMenuItem>;
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
index 1dfb8a0a39..335c51bef8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
@@ -20,11 +20,11 @@ class OrganizationCrumb extends React.Component {
   };
 
   render() {
-    let {organizations, organization, params, routes, route, ...props} = this.props;
+    const {organizations, organization, params, routes, route, ...props} = this.props;
 
     if (!organization) return null;
 
-    let hasMenu = organizations.length > 1;
+    const hasMenu = organizations.length > 1;
 
     return (
       <BreadcrumbDropdown
@@ -45,8 +45,8 @@ class OrganizationCrumb extends React.Component {
           // then we need to default to index route (e.g. `route`)
           //
           // Otherwise, using empty string ('') will keep the current route path but with target org
-          let hasProjectParam = !!params.projectId;
-          let destination = hasProjectParam ? route : '';
+          const hasProjectParam = !!params.projectId;
+          const destination = hasProjectParam ? route : '';
           browserHistory.push(
             recreateRoute(destination, {
               routes,
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
index 8a16f1c396..790c4fe075 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
@@ -27,12 +27,12 @@ class ProjectCrumb extends React.Component {
   };
 
   handleSelect = item => {
-    let {routes, params} = this.props;
+    const {routes, params} = this.props;
 
-    let lastRoute = routes[routes.length - 1];
+    const lastRoute = routes[routes.length - 1];
     // We have to make exceptions for routes like "Project Alerts Rule Edit" or "Client Key Details"
     // Since these models are project specific, we need to traverse up a route when switching projects
-    let stepBack = ROUTE_PATH_EXCEPTIONS.has(lastRoute.path) ? -1 : undefined;
+    const stepBack = ROUTE_PATH_EXCEPTIONS.has(lastRoute.path) ? -1 : undefined;
     browserHistory.push(
       recreateRoute('', {
         routes,
@@ -43,7 +43,7 @@ class ProjectCrumb extends React.Component {
   };
 
   render() {
-    let {
+    const {
       organization: latestOrganization,
       project: latestProject,
       projects,
@@ -54,7 +54,7 @@ class ProjectCrumb extends React.Component {
     if (!latestOrganization) return null;
     if (!projects) return null;
 
-    let hasMenu = projects && projects.length > 1;
+    const hasMenu = projects && projects.length > 1;
 
     return (
       <BreadcrumbDropdown
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
index ee115ca31a..cd42486e66 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
@@ -17,10 +17,10 @@ class TeamCrumb extends React.Component {
   };
 
   render() {
-    let {teams, params, routes, route, ...props} = this.props;
+    const {teams, params, routes, route, ...props} = this.props;
 
-    let team = teams.find(({slug}) => slug === params.teamId);
-    let hasMenu = teams.length > 1;
+    const team = teams.find(({slug}) => slug === params.teamId);
+    const hasMenu = teams.length > 1;
 
     if (!team) return null;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
index b10e7488e6..3cc8680693 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
@@ -21,11 +21,11 @@ class SettingsLayout extends React.Component {
   };
 
   render() {
-    let {params, routes, route, router, renderNavigation, children} = this.props;
+    const {params, routes, route, router, renderNavigation, children} = this.props;
     // We want child's view's props
-    let childProps = (children && children.props) || this.props;
-    let childRoutes = childProps.routes || routes || [];
-    let childRoute = childProps.route || route || {};
+    const childProps = (children && children.props) || this.props;
+    const childRoutes = childProps.routes || routes || [];
+    const childRoute = childProps.route || route || {};
     return (
       <React.Fragment>
         <Sidebar />
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
index f88f43e8ee..9ca1dc9197 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.jsx
@@ -14,7 +14,7 @@ class SettingsNavItem extends React.Component {
   };
 
   render() {
-    let {badge, label, index, ...props} = this.props;
+    const {badge, label, index, ...props} = this.props;
 
     let renderedBadge = '';
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
index d78e224d5b..5049e6442c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigation.jsx
@@ -18,8 +18,8 @@ class SettingsNavigation extends React.Component {
   };
 
   render() {
-    let {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;
-    let navWithHooks = navigationObjects.concat(hookConfigs);
+    const {navigationObjects, hooks, hookConfigs, ...otherProps} = this.props;
+    const navWithHooks = navigationObjects.concat(hookConfigs);
 
     return (
       <Box>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
index 6f0b6a2026..c4b89f58fd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
@@ -33,7 +33,7 @@ export default class NavigationGroup extends React.Component {
   };
 
   render() {
-    let {organization, project, name, items} = this.props;
+    const {organization, project, name, items} = this.props;
 
     return (
       <NavSection data-test-id={name}>
@@ -41,8 +41,8 @@ export default class NavigationGroup extends React.Component {
         {items.map(({path, title, index, show, badge}) => {
           if (typeof show === 'function' && !show(this.props)) return null;
           if (typeof show !== 'undefined' && !show) return null;
-          let badgeResult = typeof badge === 'function' ? badge(this.props) : null;
-          let to = replaceRouterParams(path, {
+          const badgeResult = typeof badge === 'function' ? badge(this.props) : null;
+          const to = replaceRouterParams(path, {
             orgId: organization && organization.slug,
             projectId: project && project.slug,
           });
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
index 01669fb56f..a470f6139c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
@@ -32,11 +32,11 @@ class SettingsPluginsNavigation extends React.Component {
   };
 
   render() {
-    let {organization, project} = this.props;
-    let {router} = this.context;
+    const {organization, project} = this.props;
+    const {router} = this.context;
 
     const pathPrefix = '/settings/:orgId/:projectId';
-    let allIntegrationsPath = replaceRouterParams(`${pathPrefix}/plugins/`, {
+    const allIntegrationsPath = replaceRouterParams(`${pathPrefix}/plugins/`, {
       orgId: organization && organization.slug,
       projectId: project && project.slug,
     });
@@ -53,7 +53,7 @@ class SettingsPluginsNavigation extends React.Component {
 
         <PluginNavigation>
           {plugin => {
-            let to = replaceRouterParams(`${pathPrefix}/plugins/${plugin.slug}/`, {
+            const to = replaceRouterParams(`${pathPrefix}/plugins/${plugin.slug}/`, {
               orgId: organization && organization.slug,
               projectId: project && project.slug,
             });
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
index 760f4052ae..c675b034f4 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsProjectItem.jsx
@@ -34,8 +34,8 @@ const ProjectItem = createReactClass({
   },
 
   handleToggleBookmark() {
-    let {project, organization} = this.props;
-    let {isBookmarked} = this.state;
+    const {project, organization} = this.props;
+    const {isBookmarked} = this.state;
 
     this.setState({isBookmarked: !isBookmarked}, () =>
       update(this.api, {
@@ -51,10 +51,10 @@ const ProjectItem = createReactClass({
   },
 
   render() {
-    let {project, organization} = this.props;
-    let {isBookmarked} = this.state;
+    const {project, organization} = this.props;
+    const {isBookmarked} = this.state;
 
-    let hasNewRoutes = new Set(organization.features).has('sentry10');
+    const hasNewRoutes = new Set(organization.features).has('sentry10');
 
     return (
       <div key={project.id} className={isBookmarked ? 'isBookmarked' : null}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsProjectProvider.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsProjectProvider.jsx
index 448af55759..b7de503e5c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsProjectProvider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsProjectProvider.jsx
@@ -14,8 +14,8 @@ class SettingsProjectProvider extends React.Component {
   };
 
   render() {
-    let {children} = this.props;
-    let {project} = this.context;
+    const {children} = this.props;
+    const {project} = this.context;
 
     return React.cloneElement(children, {
       ...this.props,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
index b2640fc69e..1c9ebd11e4 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
@@ -23,7 +23,7 @@ const OrganizationSettingsNavigation = createReactClass({
 
   getHooks() {
     // Allow injection via getsentry et all
-    let org = this.getOrganization();
+    const org = this.getOrganization();
 
     return {
       hookConfigs: HookStore.get('settings:organization-navigation-config').map(cb =>
@@ -34,7 +34,7 @@ const OrganizationSettingsNavigation = createReactClass({
   },
 
   handleHooks(name, hooks) {
-    let org = this.getOrganization();
+    const org = this.getOrganization();
     if (name !== 'settings:organization-navigation-config') return;
     this.setState(state => ({
       hookConfigs: hooks.map(cb => cb(org)),
@@ -42,10 +42,10 @@ const OrganizationSettingsNavigation = createReactClass({
   },
 
   render() {
-    let access = this.getAccess();
-    let features = this.getFeatures();
-    let org = this.getOrganization();
-    let {hooks, hookConfigs} = this.state;
+    const access = this.getAccess();
+    const features = this.getFeatures();
+    const org = this.getOrganization();
+    const {hooks, hookConfigs} = this.state;
 
     return (
       <SettingsNavigation
diff --git a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/index.jsx
index abf91a7bd8..810ee11c77 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/index.jsx
@@ -20,7 +20,7 @@ class OrganizationApiKeys extends AsyncView {
   }
 
   getTitle() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     return `${org.name} API Keys`;
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx
index 1b1d3fa29e..8ac4d62094 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx
@@ -47,7 +47,7 @@ class OrganizationApiKeyDetails extends AsyncView {
   }
 
   getTitle() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     return `${org.name} Edit API Key`;
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeysList.jsx b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeysList.jsx
index 24dad81dde..e0c4c0ee72 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeysList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationApiKeys/organizationApiKeysList.jsx
@@ -23,10 +23,10 @@ class OrganizationApiKeysList extends React.Component {
   };
 
   render() {
-    let {params, routes, keys, busy, onAddApiKey, onRemove} = this.props;
-    let hasKeys = keys && keys.length;
+    const {params, routes, keys, busy, onAddApiKey, onRemove} = this.props;
+    const hasKeys = keys && keys.length;
 
-    let action = (
+    const action = (
       <Button
         priority="primary"
         size="small"
@@ -85,7 +85,7 @@ class OrganizationApiKeysList extends React.Component {
 
             {keys &&
               keys.map(({id, key, label}) => {
-                let apiDetailsUrl = recreateRoute(`${id}/`, {
+                const apiDetailsUrl = recreateRoute(`${id}/`, {
                   params,
                   routes,
                 });
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx
index 9af86dcd94..11a13d7d2d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuditLog/auditLogList.jsx
@@ -53,15 +53,15 @@ class AuditLogList extends React.Component {
   };
 
   render() {
-    let {pageLinks, entries, eventType, eventTypes, onEventSelect} = this.props;
-    let hasEntries = entries && entries.length > 0;
-    let ipv4Length = 15;
-    let options = [
+    const {pageLinks, entries, eventType, eventTypes, onEventSelect} = this.props;
+    const hasEntries = entries && entries.length > 0;
+    const ipv4Length = 15;
+    const options = [
       {value: '', label: t('Any action'), clearableVaue: false},
       ...eventTypes.map(type => ({label: type, value: type, clearableValue: false})),
     ];
 
-    let action = (
+    const action = (
       <form>
         <SelectField
           name="event"
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuditLog/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuditLog/index.jsx
index 69029c9d66..3dde1a86b3 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuditLog/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuditLog/index.jsx
@@ -81,7 +81,7 @@ class OrganizationAuditLog extends AsyncView {
   }
 
   getTitle() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     return `${org.name} Audit Log`;
   }
 
@@ -98,7 +98,7 @@ class OrganizationAuditLog extends AsyncView {
   };
 
   renderBody() {
-    let currentEventType = this.props.location.query.event;
+    const currentEventType = this.props.location.query.event;
 
     return (
       <AuditLogList
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
index 8e774b60e6..11708a2653 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
@@ -30,7 +30,7 @@ class OrganizationAuth extends AsyncView {
   }
 
   getTitle() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     return `${org.name} - Auth Settings`;
   }
 
@@ -92,8 +92,8 @@ class OrganizationAuth extends AsyncView {
   };
 
   renderBody() {
-    let {providerList, provider} = this.state;
-    let access = this.context.organization.access;
+    const {providerList, provider} = this.state;
+    const access = this.context.organization.access;
 
     if (access.includes('org:admin') && provider) {
       // If SSO provider is configured, keep showing loading while we redirect
@@ -101,7 +101,7 @@ class OrganizationAuth extends AsyncView {
       return this.renderLoading();
     }
 
-    let activeProvider = providerList.find(
+    const activeProvider = providerList.find(
       p => provider && p.key === provider.provider_name
     );
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/applicationScopes.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/applicationScopes.jsx
index 9b009e0e1e..d642b2103e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/applicationScopes.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/applicationScopes.jsx
@@ -24,7 +24,7 @@ class ApplicationScopes extends React.Component {
   handleToggleScopes = (scope, e) => {
     this.setState(
       state => {
-        let {scopes} = this.state;
+        const {scopes} = this.state;
         if (scopes.has(scope)) {
           scopes.delete(scope);
         } else {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
index a27d30aab2..27b4416248 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.jsx
@@ -10,7 +10,7 @@ import {t} from 'app/locale';
 
 export default class OrganizationDeveloperSettings extends AsyncView {
   getEndpoints() {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
 
     return [['applications', `/organizations/${orgId}/sentry-apps/`]];
   }
@@ -26,8 +26,8 @@ export default class OrganizationDeveloperSettings extends AsyncView {
   };
 
   renderBody() {
-    let {orgId} = this.props.params;
-    let action = (
+    const {orgId} = this.props.params;
+    const action = (
       <Button
         priority="primary"
         size="small"
@@ -38,7 +38,7 @@ export default class OrganizationDeveloperSettings extends AsyncView {
       </Button>
     );
 
-    let isEmpty = this.state.applications.length === 0;
+    const isEmpty = this.state.applications.length === 0;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
index ce730c3e7b..b05d01dafe 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.jsx
@@ -58,7 +58,7 @@ export default class SentryApplicationDetails extends AsyncView {
   }
 
   getEndpoints() {
-    let {appSlug} = this.props.params;
+    const {appSlug} = this.props.params;
 
     if (appSlug) {
       return [['app', `/sentry-apps/${appSlug}/`]];
@@ -92,8 +92,8 @@ export default class SentryApplicationDetails extends AsyncView {
     const scopes = (app && [...app.scopes]) || [];
     const events = (app && this.normalize(app.events)) || [];
 
-    let method = app ? 'PUT' : 'POST';
-    let endpoint = app ? `/sentry-apps/${app.slug}/` : '/sentry-apps/';
+    const method = app ? 'PUT' : 'POST';
+    const endpoint = app ? `/sentry-apps/${app.slug}/` : '/sentry-apps/';
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx
index 9359f454ea..734213221d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/subscriptionBox.jsx
@@ -24,7 +24,7 @@ export default class SubscriptionBox extends React.Component {
   }
 
   onChange = evt => {
-    let checked = evt.target.checked;
+    const checked = evt.target.checked;
     const {resource} = this.props;
     this.setState({checked});
     this.props.onChange(resource, checked);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
index 6e4ecd102e..fa133d679a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
@@ -64,7 +64,7 @@ const OrganizationGeneralSettings = createReactClass({
   },
 
   handleRemoveOrganization() {
-    let {data} = this.state || {};
+    const {data} = this.state || {};
     if (!data) return;
 
     addLoadingMessage();
@@ -88,11 +88,11 @@ const OrganizationGeneralSettings = createReactClass({
   },
 
   render() {
-    let {data, loading, error} = this.state;
-    let orgId = this.props.params.orgId;
-    let access = data && new Set(data.access);
+    const {data, loading, error} = this.state;
+    const orgId = this.props.params.orgId;
+    const access = data && new Set(data.access);
 
-    let hasProjects = data && data.projects && !!data.projects.length;
+    const hasProjects = data && data.projects && !!data.projects.length;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
index 55f5748fc1..8aebef6a04 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
@@ -26,8 +26,8 @@ const OrganizationSettingsForm = createReactClass({
   mixins: [ApiMixin, OrganizationState],
 
   render() {
-    let {initialData, orgId, onSave, access} = this.props;
-    let endpoint = `/organizations/${orgId}/`;
+    const {initialData, orgId, onSave, access} = this.props;
+    const endpoint = `/organizations/${orgId}/`;
     return (
       <Form
         className="ref-organization-settings"
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
index 55d42fbb78..58aeb83be7 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
@@ -31,7 +31,7 @@ class OrganizationMembersView extends AsyncView {
 
   componentWillReceiveProps(nextProps, nextContext) {
     super.componentWillReceiveProps(nextProps, nextContext);
-    let searchQuery = nextProps?.location?.query?.query;
+    const searchQuery = nextProps?.location?.query?.query;
     if (searchQuery !== this.props?.location?.query?.query) {
       this.setState({searchQuery});
     }
@@ -40,7 +40,7 @@ class OrganizationMembersView extends AsyncView {
   // XXX(billy): setState causes re-render of the entire view...
   // we should not do this
   getDefaultState() {
-    let state = super.getDefaultState();
+    const state = super.getDefaultState();
     return {
       ...state,
       members: [],
@@ -78,13 +78,13 @@ class OrganizationMembersView extends AsyncView {
   }
 
   getTitle() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     return `${org.name} Members`;
   }
 
   removeMember = id => {
-    let {params} = this.props;
-    let {orgId} = params || {};
+    const {params} = this.props;
+    const {orgId} = params || {};
 
     return new Promise((resolve, reject) => {
       this.api.request(`/organizations/${orgId}/members/${id}/`, {
@@ -102,8 +102,8 @@ class OrganizationMembersView extends AsyncView {
   };
 
   approveOrDeny = (isApproved, id) => {
-    let {params} = this.props;
-    let {orgId} = params || {};
+    const {params} = this.props;
+    const {orgId} = params || {};
 
     this.setState(state => ({
       accessRequestBusy: state.accessRequestBusy.set(id, true),
@@ -135,8 +135,8 @@ class OrganizationMembersView extends AsyncView {
   handleDeny = id => this.approveOrDeny(false, id);
 
   handleRemove = ({id, name}, e) => {
-    let {organization} = this.context;
-    let {slug: orgName} = organization;
+    const {organization} = this.context;
+    const {slug: orgName} = organization;
 
     this.removeMember(id).then(
       () =>
@@ -157,8 +157,8 @@ class OrganizationMembersView extends AsyncView {
   };
 
   handleLeave = ({id}, e) => {
-    let {organization} = this.context;
-    let {slug: orgName} = organization;
+    const {organization} = this.context;
+    const {slug: orgName} = organization;
 
     this.removeMember(id).then(
       () => {
@@ -201,14 +201,14 @@ class OrganizationMembersView extends AsyncView {
   };
 
   handleChange = evt => {
-    let searchQuery = evt.target.value;
+    const searchQuery = evt.target.value;
     this.getMembers(searchQuery);
     this.setState({searchQuery});
   };
 
   getMembers = debounce(searchQuery => {
-    let {params} = this.props;
-    let {orgId} = params || {};
+    const {params} = this.props;
+    const {orgId} = params || {};
 
     this.api.request(`/organizations/${orgId}/members/?query=${searchQuery}`, {
       method: 'GET',
@@ -219,20 +219,20 @@ class OrganizationMembersView extends AsyncView {
   }, 200);
 
   renderBody() {
-    let {params, routes} = this.props;
-    let {membersPageLinks, members, requestList} = this.state;
-    let {organization} = this.context;
-    let {orgId} = params || {};
-    let {name: orgName, access} = organization;
-    let canAddMembers = access.indexOf('org:write') > -1;
-    let canRemove = access.indexOf('member:admin') > -1;
-    let currentUser = ConfigStore.get('user');
+    const {params, routes} = this.props;
+    const {membersPageLinks, members, requestList} = this.state;
+    const {organization} = this.context;
+    const {orgId} = params || {};
+    const {name: orgName, access} = organization;
+    const canAddMembers = access.indexOf('org:write') > -1;
+    const canRemove = access.indexOf('member:admin') > -1;
+    const currentUser = ConfigStore.get('user');
     // Find out if current user is the only owner
-    let isOnlyOwner = !members.find(
+    const isOnlyOwner = !members.find(
       ({role, email}) => role === 'owner' && email !== currentUser.email
     );
     // Only admins/owners can remove members
-    let requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
+    const requireLink = !!this.state.authProvider && this.state.authProvider.require_link;
 
     let action = (
       <Button
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index a9e403bffd..2b6d3a8920 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -56,10 +56,10 @@ const InviteMember = createReactClass({
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
-    let {teams} = this.getOrganization();
+    const {teams} = this.getOrganization();
 
     //select team if there's only one
-    let initialTeamSelection = teams.length === 1 ? [teams[0].slug] : [];
+    const initialTeamSelection = teams.length === 1 ? [teams[0].slug] : [];
 
     return {
       selectedTeams: new Set(initialTeamSelection),
@@ -73,13 +73,13 @@ const InviteMember = createReactClass({
   },
 
   componentDidMount() {
-    let {slug} = this.getOrganization();
-    let {isSuperuser} = ConfigStore.get('user');
+    const {slug} = this.getOrganization();
+    const {isSuperuser} = ConfigStore.get('user');
 
     this.api.request(`/organizations/${slug}/members/me/`, {
       method: 'GET',
       success: resp => {
-        let {roles} = resp || {};
+        const {roles} = resp || {};
 
         if (!resp || !roles) {
           this.setState({
@@ -123,9 +123,9 @@ const InviteMember = createReactClass({
   redirectToMemberPage() {
     // Get path to parent route (`/organizations/${slug}/members/`)
     // `recreateRoute` fucks up because of getsentry hooks
-    let {params, router} = this.props;
-    let isNewSettings = /^\/settings\//.test(router.location.pathname);
-    let pathToParentRoute = isNewSettings
+    const {params, router} = this.props;
+    const isNewSettings = /^\/settings\//.test(router.location.pathname);
+    const pathToParentRoute = isNewSettings
       ? '/settings/:orgId/members/'
       : '/organizations/:orgId/members/';
     router.push(replaceRouterParams(pathToParentRoute, params));
@@ -139,8 +139,8 @@ const InviteMember = createReactClass({
   },
 
   inviteUser(email) {
-    let {slug} = this.getOrganization();
-    let {selectedTeams, selectedRole} = this.state;
+    const {slug} = this.getOrganization();
+    const {selectedTeams, selectedRole} = this.state;
 
     return new Promise((resolve, reject) => {
       this.api.request(`/organizations/${slug}/members/`, {
@@ -177,8 +177,8 @@ const InviteMember = createReactClass({
   },
 
   submit() {
-    let {email} = this.state;
-    let emails = this.splitEmails(email);
+    const {email} = this.state;
+    const emails = this.splitEmails(email);
     if (!emails.length) return;
     this.setState({busy: true});
     Promise.all(emails.map(this.inviteUser))
@@ -197,7 +197,7 @@ const InviteMember = createReactClass({
 
   toggleTeam(slug) {
     this.setState(state => {
-      let {selectedTeams} = state;
+      const {selectedTeams} = state;
       if (selectedTeams.has(slug)) {
         selectedTeams.delete(slug);
       } else {
@@ -210,13 +210,13 @@ const InviteMember = createReactClass({
   },
 
   allSelected() {
-    let {teams} = this.getOrganization();
-    let {selectedTeams} = this.state;
+    const {teams} = this.getOrganization();
+    const {selectedTeams} = this.state;
     return teams.length === selectedTeams.size;
   },
 
   handleSelectAll() {
-    let {teams} = this.getOrganization();
+    const {teams} = this.getOrganization();
 
     this.setState(state => {
       let {selectedTeams} = state;
@@ -232,10 +232,10 @@ const InviteMember = createReactClass({
   },
 
   render() {
-    let {error, loading, roleList, selectedRole, selectedTeams} = this.state;
-    let {teams} = this.getOrganization();
-    let {invitesEnabled} = ConfigStore.getConfig();
-    let {isSuperuser} = ConfigStore.get('user');
+    const {error, loading, roleList, selectedRole, selectedTeams} = this.state;
+    const {teams} = this.getOrganization();
+    const {invitesEnabled} = ConfigStore.getConfig();
+    const {isSuperuser} = ConfigStore.get('user');
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx
index e829279f21..8230f905d8 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/roleSelect.jsx
@@ -28,7 +28,7 @@ class RoleSelect extends React.Component {
   };
 
   render() {
-    let {disabled, enforceAllowed, roleList, selectedRole} = this.props;
+    const {disabled, enforceAllowed, roleList, selectedRole} = this.props;
 
     return (
       <Panel className="new-invite-team">
@@ -36,8 +36,8 @@ class RoleSelect extends React.Component {
 
         <PanelBody>
           {roleList.map((role, i) => {
-            let {desc, name, id, allowed} = role;
-            let isDisabled = disabled || (enforceAllowed && !allowed);
+            const {desc, name, id, allowed} = role;
+            const isDisabled = disabled || (enforceAllowed && !allowed);
             return (
               <PanelItem
                 key={id}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
index 6fac7c44bc..6d3b8e7b32 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/teamSelect.jsx
@@ -19,7 +19,7 @@ class TeamSelect extends React.Component {
   };
 
   render() {
-    let {
+    const {
       disabled,
       teams,
       selectedTeams,
@@ -29,7 +29,7 @@ class TeamSelect extends React.Component {
     } = this.props;
     //no need to select a team when there's only one option
     if (teams.length < 2) return null;
-    let hasSelectAll = !!onSelectAll && !!allSelected;
+    const hasSelectAll = !!onSelectAll && !!allSelected;
 
     return (
       <Panel className="new-invite-team">
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
index e45639b351..049b299110 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
@@ -36,7 +36,7 @@ class OrganizationAccessRequests extends React.Component {
   };
 
   render() {
-    let {accessRequestBusy, requestList} = this.props;
+    const {accessRequestBusy, requestList} = this.props;
 
     if (!requestList || !requestList.length) return null;
 
@@ -52,7 +52,7 @@ class OrganizationAccessRequests extends React.Component {
 
         <PanelBody>
           {requestList.map(({id, member, team}, i) => {
-            let displayName =
+            const displayName =
               member.user &&
               (member.user.name || member.user.email || member.user.username);
             return (
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
index 3ea51251b3..2305a50cd0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
@@ -37,7 +37,7 @@ class OrganizationMemberDetail extends AsyncView {
 
   constructor(...args) {
     super(...args);
-    let {teams} = this.getOrganization();
+    const {teams} = this.getOrganization();
 
     this.state = {
       ...this.state,
@@ -49,8 +49,8 @@ class OrganizationMemberDetail extends AsyncView {
   }
 
   getEndpoints() {
-    let {slug} = this.getOrganization();
-    let {params} = this.props;
+    const {slug} = this.getOrganization();
+    const {params} = this.props;
     return [['member', `/organizations/${slug}/members/${params.memberId}/`]];
   }
 
@@ -59,7 +59,7 @@ class OrganizationMemberDetail extends AsyncView {
   }
 
   redirectToMemberPage() {
-    let members = recreateRoute('members/', {
+    const members = recreateRoute('members/', {
       routes: this.props.routes,
       params: this.props.params,
       stepBack: -2,
@@ -68,10 +68,10 @@ class OrganizationMemberDetail extends AsyncView {
   }
 
   handleSave = () => {
-    let {slug} = this.getOrganization();
-    let {params} = this.props;
+    const {slug} = this.getOrganization();
+    const {params} = this.props;
 
-    let indicator = IndicatorStore.add('Saving...');
+    const indicator = IndicatorStore.add('Saving...');
     this.setState({busy: true});
 
     updateMember(this.api, {
@@ -91,10 +91,10 @@ class OrganizationMemberDetail extends AsyncView {
   };
 
   handleInvite = regenerate => {
-    let {slug} = this.getOrganization();
-    let {params} = this.props;
+    const {slug} = this.getOrganization();
+    const {params} = this.props;
 
-    let indicator = IndicatorStore.add('Sending invite...');
+    const indicator = IndicatorStore.add('Sending invite...');
     this.setState({busy: true});
 
     resendMemberInvite(this.api, {
@@ -116,8 +116,8 @@ class OrganizationMemberDetail extends AsyncView {
   };
 
   handleToggleTeam = slug => {
-    let {member} = this.state;
-    let selectedTeams = new Set(member.teams);
+    const {member} = this.state;
+    const selectedTeams = new Set(member.teams);
     if (selectedTeams.has(slug)) {
       selectedTeams.delete(slug);
     } else {
@@ -133,14 +133,15 @@ class OrganizationMemberDetail extends AsyncView {
   };
 
   allSelected = () => {
-    let {member} = this.state;
-    let {teams} = this.getOrganization();
+    const {member} = this.state;
+    const {teams} = this.getOrganization();
     return teams.length === member.teams.length;
   };
 
   handleSelectAll = () => {
-    let {member, selectedTeams} = this.state;
-    let {teams} = this.getOrganization();
+    let {selectedTeams} = this.state;
+    const {member} = this.state;
+    const {teams} = this.getOrganization();
 
     if (this.allSelected()) {
       selectedTeams.clear();
@@ -157,10 +158,10 @@ class OrganizationMemberDetail extends AsyncView {
   };
 
   handle2faReset = () => {
-    let {user} = this.state.member;
-    let {slug} = this.getOrganization();
+    const {user} = this.state.member;
+    const {slug} = this.getOrganization();
 
-    let requests = user.authenticators.map(auth =>
+    const requests = user.authenticators.map(auth =>
       removeAuthenticator(this.api, user.id, auth.id)
     );
 
@@ -176,19 +177,19 @@ class OrganizationMemberDetail extends AsyncView {
   };
 
   showResetButton = () => {
-    let {member} = this.state;
-    let {require2FA} = this.getOrganization();
-    let {user} = member;
+    const {member} = this.state;
+    const {require2FA} = this.getOrganization();
+    const {user} = member;
 
     if (!user || !user.authenticators || require2FA) return false;
-    let hasAuth = user.authenticators.length >= 1;
+    const hasAuth = user.authenticators.length >= 1;
     return hasAuth && user.canReset2fa;
   };
 
   getTooltip = () => {
-    let {member} = this.state;
-    let {require2FA} = this.getOrganization();
-    let {user} = member;
+    const {member} = this.state;
+    const {require2FA} = this.getOrganization();
+    const {user} = member;
 
     if (!user) return '';
 
@@ -201,17 +202,17 @@ class OrganizationMemberDetail extends AsyncView {
   };
 
   renderBody() {
-    let {error, member} = this.state;
-    let {teams, access} = this.getOrganization();
+    const {error, member} = this.state;
+    const {teams, access} = this.getOrganization();
 
     if (!member) return <NotFound />;
 
-    let inviteLink = member.invite_link;
-    let canEdit = access.includes('org:write');
+    const inviteLink = member.invite_link;
+    const canEdit = access.includes('org:write');
 
-    let {email, expired, pending} = member;
-    let canResend = !expired;
-    let showAuth = !pending;
+    const {email, expired, pending} = member;
+    const canResend = !expired;
+    const showAuth = !pending;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx
index 29bec06f74..eeea85ae56 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx
@@ -49,7 +49,7 @@ export default class OrganizationMemberRow extends React.PureComponent {
   }
 
   handleRemove = e => {
-    let {onRemove} = this.props;
+    const {onRemove} = this.props;
 
     if (typeof onRemove !== 'function') return;
 
@@ -58,7 +58,7 @@ export default class OrganizationMemberRow extends React.PureComponent {
   };
 
   handleLeave = e => {
-    let {onLeave} = this.props;
+    const {onLeave} = this.props;
 
     if (typeof onLeave !== 'function') return;
 
@@ -67,7 +67,7 @@ export default class OrganizationMemberRow extends React.PureComponent {
   };
 
   handleSendInvite = e => {
-    let {onSendInvite} = this.props;
+    const {onSendInvite} = this.props;
 
     if (typeof onSendInvite !== 'function') return;
 
@@ -75,7 +75,7 @@ export default class OrganizationMemberRow extends React.PureComponent {
   };
 
   render() {
-    let {
+    const {
       params,
       routes,
       member,
@@ -88,21 +88,21 @@ export default class OrganizationMemberRow extends React.PureComponent {
       canAddMembers,
     } = this.props;
 
-    let {id, flags, email, name, roleName, pending, expired, user} = member;
+    const {id, flags, email, name, roleName, pending, expired, user} = member;
 
     // if member is not the only owner, they can leave
-    let needsSso = !flags['sso:linked'] && requireLink;
-    let isCurrentUser = currentUser.email === email;
-    let showRemoveButton = !isCurrentUser;
-    let showLeaveButton = isCurrentUser;
-    let canRemoveMember = canRemoveMembers && !isCurrentUser;
+    const needsSso = !flags['sso:linked'] && requireLink;
+    const isCurrentUser = currentUser.email === email;
+    const showRemoveButton = !isCurrentUser;
+    const showLeaveButton = isCurrentUser;
+    const canRemoveMember = canRemoveMembers && !isCurrentUser;
     // member has a `user` property if they are registered with sentry
     // i.e. has accepted an invite to join org
-    let has2fa = user && user.has2fa;
-    let detailsUrl = recreateRoute(id, {routes, params});
-    let isInviteSuccessful = status === 'success';
-    let isInviting = status === 'loading';
-    let canResend = !expired && canAddMembers && (pending || needsSso);
+    const has2fa = user && user.has2fa;
+    const detailsUrl = recreateRoute(id, {routes, params});
+    const isInviteSuccessful = status === 'success';
+    const isInviting = status === 'loading';
+    const canResend = !expired && canAddMembers && (pending || needsSso);
 
     return (
       <PanelItem align="center" p={0} py={2}>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
index f8e1ed6340..86b5f767b5 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationProjects/index.jsx
@@ -24,14 +24,14 @@ export default class OrganizationProjects extends AsyncView {
 
   componentWillReceiveProps(nextProps, nextContext) {
     super.componentWillReceiveProps(nextProps, nextContext);
-    let searchQuery = nextProps?.location?.query?.query;
+    const searchQuery = nextProps?.location?.query?.query;
     if (searchQuery !== this.props?.location?.query?.query) {
       this.setState({searchQuery});
     }
   }
 
   getEndpoints() {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     return [
       [
         'projectList',
@@ -64,20 +64,20 @@ export default class OrganizationProjects extends AsyncView {
   }
 
   getTitle() {
-    let org = this.context.organization;
+    const org = this.context.organization;
     return `${org.name} Projects`;
   }
 
   renderBody() {
-    let {projectList, projectListPageLinks, projectStats} = this.state;
-    let {organization} = this.context;
-    let canCreateProjects = getOrganizationState(this.context.organization)
+    const {projectList, projectListPageLinks, projectStats} = this.state;
+    const {organization} = this.context;
+    const canCreateProjects = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
 
-    let hasNewRoutes = new Set(organization.features).has('sentry10');
+    const hasNewRoutes = new Set(organization.features).has('sentry10');
 
-    let action = (
+    const action = (
       <Button
         priority="primary"
         size="small"
diff --git a/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx b/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx
index d245332b1e..3099f066a2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationProjects/projectStatsGraph.jsx
@@ -16,9 +16,9 @@ const ProjectStatsGraph = createReactClass({
   },
 
   render() {
-    let {project} = this.props;
-    let stats = this.props.stats || project.stats;
-    let chartData =
+    const {project} = this.props;
+    const stats = this.props.stats || project.stats;
+    const chartData =
       stats &&
       stats.map(point => {
         return {x: point[0], y: point[1]};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx b/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx
index 13f5d34384..14ac43a79a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRateLimits/organizationRateLimits.jsx
@@ -11,7 +11,7 @@ import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader
 import TextBlock from 'app/views/settings/components/text/textBlock';
 
 const getRateLimitValues = () => {
-  let steps = [];
+  const steps = [];
   let i = 0;
   while (i <= 1000000) {
     steps.push(i);
@@ -39,10 +39,10 @@ export default class OrganizationRateLimit extends React.Component {
   };
 
   render() {
-    let {organization} = this.props;
-    let {quota} = organization;
-    let {maxRate, maxRateInterval, projectLimit, accountLimit} = quota;
-    let initialData = {
+    const {organization} = this.props;
+    const {quota} = organization;
+    const {maxRate, maxRateInterval, projectLimit, accountLimit} = quota;
+    const initialData = {
       projectRateLimit: projectLimit || 100,
       accountRateLimit: accountLimit,
     };
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
index 610cadcddc..7e838f10d3 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
@@ -32,7 +32,7 @@ class AddRepositoryLink extends PluginComponentBase {
   }
 
   getDefaultState() {
-    let formData = {};
+    const formData = {};
     // makes sure default choice field is saved
     // if a user doesn't choose a different option
     this.props.provider.config.forEach(field => {
@@ -64,7 +64,7 @@ class AddRepositoryLink extends PluginComponentBase {
 
   onSubmit() {
     // TODO(dcramer): set form saving state
-    let formData = {
+    const formData = {
       ...this.state.formData,
       provider: this.props.provider.id,
     };
@@ -124,8 +124,8 @@ class AddRepositoryLink extends PluginComponentBase {
   }
 
   renderForm() {
-    let errors = this.state.error.errors || {};
-    let provider = this.props.provider;
+    const errors = this.state.error.errors || {};
+    const provider = this.props.provider;
     let hasIntegration = true;
     provider.config.forEach(field => {
       if (field.initial == '') hasIntegration = false;
@@ -155,7 +155,7 @@ class AddRepositoryLink extends PluginComponentBase {
   }
 
   renderBody() {
-    let error = this.state.error;
+    const error = this.state.error;
     if (error.error_type === 'auth') {
       let authUrl = error.auth_url;
       if (authUrl.indexOf('?') === -1) {
@@ -195,7 +195,7 @@ class AddRepositoryLink extends PluginComponentBase {
   }
 
   renderModal() {
-    let {error, state} = this.state;
+    const {error, state} = this.state;
     return (
       <Modal show={this.state.isModalOpen} animation={false}>
         <div className="modal-header">
@@ -227,7 +227,7 @@ class AddRepositoryLink extends PluginComponentBase {
   }
 
   render() {
-    let provider = this.props.provider;
+    const provider = this.props.provider;
     return (
       <React.Fragment>
         <a onClick={this.onOpen}>{provider.name}</a>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/index.jsx
index 21cc9591a3..e250e48804 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/index.jsx
@@ -7,7 +7,7 @@ import OrganizationRepositories from './organizationRepositories';
 
 export default class OrganizationRepositoriesContainer extends AsyncView {
   getEndpoints() {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     return [
       ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],
       ['repoConfig', `/organizations/${orgId}/config/repos/`],
@@ -16,7 +16,7 @@ export default class OrganizationRepositoriesContainer extends AsyncView {
 
   // Callback used by child component to signal state change
   onRepositoryChange = data => {
-    let itemList = this.state.itemList;
+    const itemList = this.state.itemList;
     itemList.forEach(item => {
       if (item.id === data.id) {
         item.status = data.status;
@@ -26,7 +26,7 @@ export default class OrganizationRepositoriesContainer extends AsyncView {
   };
 
   onAddRepo = repo => {
-    let itemList = this.state.itemList;
+    const itemList = this.state.itemList;
     itemList.push(repo);
     this.setState({
       itemList: sortArray(itemList, item => item.name),
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.jsx
index 67b4c52279..0ccabd99b2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/organizationRepositories.jsx
@@ -19,9 +19,9 @@ export default class OrganizationRepositories extends React.Component {
   };
 
   render() {
-    let {params, itemList, api, onRepositoryChange} = this.props;
-    let {orgId} = params;
-    let hasItemList = itemList && itemList.length > 0;
+    const {params, itemList, api, onRepositoryChange} = this.props;
+    const {orgId} = params;
+    const hasItemList = itemList && itemList.length > 0;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
index c87e079102..e490a77086 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
@@ -21,7 +21,7 @@ class AllTeamsList extends React.Component {
   };
 
   handleCreateTeam = e => {
-    let {useCreateModal, organization} = this.props;
+    const {useCreateModal, organization} = this.props;
 
     if (!useCreateModal) return;
 
@@ -34,8 +34,8 @@ class AllTeamsList extends React.Component {
   };
 
   render() {
-    let {access, organization, urlPrefix, openMembership, useCreateModal} = this.props;
-    let teamNodes = this.props.teamList.map((team, teamIdx) => {
+    const {access, organization, urlPrefix, openMembership, useCreateModal} = this.props;
+    const teamNodes = this.props.teamList.map((team, teamIdx) => {
       return (
         <AllTeamsRow
           urlPrefix={urlPrefix}
@@ -52,7 +52,7 @@ class AllTeamsList extends React.Component {
       return teamNodes;
     }
 
-    let to = useCreateModal ? '#' : `/organizations/${organization.slug}/teams/new/`;
+    const to = useCreateModal ? '#' : `/organizations/${organization.slug}/teams/new/`;
     return (
       <EmptyMessage>
         {tct('No teams here. [teamCreate]', {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
index 7c6aee1b13..60dc74f47b 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsRow.jsx
@@ -34,7 +34,7 @@ const AllTeamsRow = createReactClass({
   },
 
   joinTeam() {
-    let {organization, team} = this.props;
+    const {organization, team} = this.props;
 
     this.setState({
       loading: true,
@@ -74,7 +74,7 @@ const AllTeamsRow = createReactClass({
   },
 
   leaveTeam() {
-    let {organization, team} = this.props;
+    const {organization, team} = this.props;
 
     this.setState({
       loading: true,
@@ -114,8 +114,8 @@ const AllTeamsRow = createReactClass({
   },
 
   render() {
-    let {access, team, urlPrefix, openMembership} = this.props;
-    let display = (
+    const {access, team, urlPrefix, openMembership} = this.props;
+    const display = (
       <IdBadge
         team={team}
         avatarSize={36}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx
index 25807c4032..24cc54e0d0 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx
@@ -53,7 +53,7 @@ const OrganizationTeamsContainer = createReactClass({
   },
 
   onTeamListChange() {
-    let newTeamList = TeamStore.getAll();
+    const newTeamList = TeamStore.getAll();
 
     this.setState({
       teamList: sortArray(newTeamList, function(o) {
@@ -63,7 +63,7 @@ const OrganizationTeamsContainer = createReactClass({
   },
 
   onProjectListChange() {
-    let newProjectList = ProjectsStore.getAll();
+    const newProjectList = ProjectsStore.getAll();
 
     this.setState({
       projectList: sortArray(newProjectList, function(o) {
@@ -75,12 +75,12 @@ const OrganizationTeamsContainer = createReactClass({
   render() {
     if (!this.context.organization) return null;
 
-    let access = this.getAccess();
-    let features = this.getFeatures();
-    let org = this.getOrganization();
+    const access = this.getAccess();
+    const features = this.getFeatures();
+    const org = this.getOrganization();
 
-    let allTeams = this.state.teamList;
-    let activeTeams = this.state.teamList.filter(team => team.isMember);
+    const allTeams = this.state.teamList;
+    const activeTeams = this.state.teamList.filter(team => team.isMember);
 
     return (
       <OrganizationTeams
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
index 7359993f24..dc9ab02542 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
@@ -24,7 +24,7 @@ class OrganizationTeams extends React.Component {
   };
 
   render() {
-    let {
+    const {
       allTeams,
       activeTeams,
       organization,
@@ -33,15 +33,15 @@ class OrganizationTeams extends React.Component {
       routes,
       params,
     } = this.props;
-    let org = organization;
+    const org = organization;
 
     if (!organization) return null;
 
-    let canCreateTeams = getOrganizationState(organization)
+    const canCreateTeams = getOrganizationState(organization)
       .getAccess()
       .has('project:admin');
 
-    let action = (
+    const action = (
       <Button
         priority="primary"
         size="small"
@@ -59,11 +59,11 @@ class OrganizationTeams extends React.Component {
       </Button>
     );
 
-    let teamRoute = routes.find(({path}) => path === 'teams/');
-    let urlPrefix = recreateRoute(teamRoute, {routes, params, stepBack: -1});
+    const teamRoute = routes.find(({path}) => path === 'teams/');
+    const urlPrefix = recreateRoute(teamRoute, {routes, params, stepBack: -1});
 
-    let activeTeamIds = new Set(activeTeams.map(team => team.id));
-    let otherTeams = allTeams.filter(team => !activeTeamIds.has(team.id));
+    const activeTeamIds = new Set(activeTeams.map(team => team.id));
+    const otherTeams = allTeams.filter(team => !activeTeamIds.has(team.id));
 
     return (
       <div className="team-list">
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
index 0113473eda..e066cb42f2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
@@ -26,7 +26,7 @@ const TeamDetails = createReactClass({
   mixins: [ApiMixin, OrganizationState, Reflux.listenTo(TeamStore, 'onTeamStoreUpdate')],
 
   getInitialState() {
-    let team = TeamStore.getBySlug(this.props.params.teamId);
+    const team = TeamStore.getBySlug(this.props.params.teamId);
 
     return {
       loading: !TeamStore.initialized,
@@ -36,7 +36,7 @@ const TeamDetails = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let params = this.props.params;
+    const params = this.props.params;
     if (
       nextProps.params.teamId !== params.teamId ||
       nextProps.params.orgId !== params.orgId
@@ -52,9 +52,9 @@ const TeamDetails = createReactClass({
   },
 
   onTeamStoreUpdate(...args) {
-    let team = TeamStore.getBySlug(this.props.params.teamId);
-    let loading = !TeamStore.initialized;
-    let error = !loading && !team;
+    const team = TeamStore.getBySlug(this.props.params.teamId);
+    const loading = !TeamStore.initialized;
+    const error = !loading && !team;
     this.setState({
       team,
       error,
@@ -67,9 +67,9 @@ const TeamDetails = createReactClass({
   },
 
   onTeamChange(data) {
-    let team = this.state.team;
+    const team = this.state.team;
     if (data.slug !== team.slug) {
-      let orgId = this.props.params.orgId;
+      const orgId = this.props.params.orgId;
       browserHistory.push(`/organizations/${orgId}/teams/${data.slug}/settings/`);
     } else {
       this.setState({
@@ -82,13 +82,13 @@ const TeamDetails = createReactClass({
   },
 
   render() {
-    let {params, routes, children} = this.props;
-    let team = this.state.team;
+    const {params, routes, children} = this.props;
+    const team = this.state.team;
 
     if (this.state.loading) return <LoadingIndicator />;
     else if (!team || this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let routePrefix = recreateRoute('', {routes, params, stepBack: -1}); //`/organizations/${orgId}/teams/${teamId}`;
+    const routePrefix = recreateRoute('', {routes, params, stepBack: -1}); //`/organizations/${orgId}/teams/${teamId}`;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
index be4db73c4f..dc34bb3847 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
@@ -41,7 +41,7 @@ const TeamMembers = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let params = this.props.params;
+    const params = this.props.params;
     if (
       nextProps.params.teamId !== params.teamId ||
       nextProps.params.orgId !== params.orgId
@@ -66,7 +66,7 @@ const TeamMembers = createReactClass({
   }, 200),
 
   removeMember(member) {
-    let {params} = this.props;
+    const {params} = this.props;
     leaveTeam(
       this.api,
       {
@@ -97,7 +97,7 @@ const TeamMembers = createReactClass({
   },
 
   fetchMembersRequest(query) {
-    let {orgId} = this.props.params;
+    const {orgId} = this.props.params;
     return this.api.request(`/organizations/${orgId}/members/`, {
       query: {
         query,
@@ -120,7 +120,7 @@ const TeamMembers = createReactClass({
   },
 
   fetchData() {
-    let params = this.props.params;
+    const params = this.props.params;
 
     this.api.request(`/teams/${params.orgId}/${params.teamId}/members/`, {
       success: data => {
@@ -142,7 +142,7 @@ const TeamMembers = createReactClass({
   },
 
   addTeamMember(selection) {
-    let params = this.props.params;
+    const params = this.props.params;
 
     this.setState({
       loading: true,
@@ -160,7 +160,7 @@ const TeamMembers = createReactClass({
       },
       {
         success: () => {
-          let orgMember = this.state.orgMemberList.find(member => {
+          const orgMember = this.state.orgMemberList.find(member => {
             return member.id === selection.value;
           });
           this.setState({
@@ -193,7 +193,7 @@ const TeamMembers = createReactClass({
   },
 
   renderDropdown(access) {
-    let {params} = this.props;
+    const {params} = this.props;
 
     if (!access.has('org:write')) {
       return (
@@ -208,9 +208,9 @@ const TeamMembers = createReactClass({
       );
     }
 
-    let existingMembers = new Set(this.state.teamMemberList.map(member => member.id));
+    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));
 
-    let items = (this.state.orgMemberList || [])
+    const items = (this.state.orgMemberList || [])
       .filter(m => !existingMembers.has(m.id))
       .map(m => {
         return {
@@ -225,7 +225,7 @@ const TeamMembers = createReactClass({
         };
       });
 
-    let menuHeader = (
+    const menuHeader = (
       <StyledMembersLabel>
         {t('Members')}
         <StyledCreateMemberLink to={`/settings/${params.orgId}/members/new/`}>
@@ -270,9 +270,9 @@ const TeamMembers = createReactClass({
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let {params} = this.props;
+    const {params} = this.props;
 
-    let access = this.getAccess();
+    const access = this.getAccess();
 
     return (
       <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx
index ca73a09971..54322e9891 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamProjects.jsx
@@ -29,8 +29,8 @@ const TeamProjects = createReactClass({
   ],
 
   getInitialState() {
-    let {teamId} = this.props.params;
-    let projectList = ProjectsStore.getAll();
+    const {teamId} = this.props.params;
+    const projectList = ProjectsStore.getAll();
     return {
       allProjects: projectList,
       error: false,
@@ -39,7 +39,7 @@ const TeamProjects = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    let params = this.props.params;
+    const params = this.props.params;
     if (
       nextProps.params.teamId !== params.teamId ||
       nextProps.params.orgId !== params.orgId
@@ -49,8 +49,8 @@ const TeamProjects = createReactClass({
   },
 
   onProjectUpdate() {
-    let {teamId} = this.props.params;
-    let projectList = ProjectsStore.getAll();
+    const {teamId} = this.props.params;
+    const projectList = ProjectsStore.getAll();
     this.setState({
       allProjects: projectList,
       projectListLinked: projectList.filter(p => p.teams.find(t1 => teamId === t1.slug)),
@@ -58,7 +58,7 @@ const TeamProjects = createReactClass({
   },
 
   handleLinkProject(project, action) {
-    let {orgId, teamId} = this.props.params;
+    const {orgId, teamId} = this.props.params;
     this.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {
       method: action === 'add' ? 'POST' : 'DELETE',
       success: data => {
@@ -76,7 +76,7 @@ const TeamProjects = createReactClass({
   },
 
   handleProjectSelected(selection) {
-    let project = this.state.allProjects.find(p => {
+    const project = this.state.allProjects.find(p => {
       return p.id === selection.value;
     });
 
@@ -84,8 +84,8 @@ const TeamProjects = createReactClass({
   },
 
   projectPanelcontents(projects) {
-    let access = this.getAccess();
-    let canWrite = access.has('org:write');
+    const access = this.getAccess();
+    const canWrite = access.has('org:write');
 
     return projects.length ? (
       sortProjects(projects).map((project, i) => (
@@ -117,12 +117,12 @@ const TeamProjects = createReactClass({
   render() {
     if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
-    let {projectListLinked, allProjects} = this.state;
-    let access = this.getAccess();
+    const {projectListLinked, allProjects} = this.state;
+    const access = this.getAccess();
 
-    let linkedProjectIds = new Set(projectListLinked.map(p => p.id));
-    let linkedProjects = allProjects.filter(p => linkedProjectIds.has(p.id));
-    let otherProjects = allProjects
+    const linkedProjectIds = new Set(projectListLinked.map(p => p.id));
+    const linkedProjects = allProjects.filter(p => linkedProjectIds.has(p.id));
+    const otherProjects = allProjects
       .filter(p => {
         return !linkedProjectIds.has(p.id);
       })
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx
index e3ee4c7413..eff47ea301 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamSettings/index.jsx
@@ -63,10 +63,10 @@ export default class TeamSettings extends AsyncView {
   };
 
   renderBody() {
-    let {location, organization} = this.context;
-    let {team} = this.props;
+    const {location, organization} = this.context;
+    const {team} = this.props;
 
-    let access = new Set(organization.access);
+    const access = new Set(organization.access);
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index 3eff616be7..caa970f8af 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -3,7 +3,7 @@ import {t} from 'app/locale';
 const pathPrefix = '/settings/:orgId/:projectId';
 
 export default function getConfiguration({project}) {
-  let plugins = ((project && project.plugins) || []).filter(plugin => plugin.enabled);
+  const plugins = ((project && project.plugins) || []).filter(plugin => plugin.enabled);
 
   return [
     {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx b/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx
index 1f93bf2752..93cf63a35d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx
@@ -8,7 +8,7 @@ import ServiceHookSettingsForm from 'app/views/settings/project/serviceHookSetti
 
 export default class ProjectCreateServiceHook extends AsyncView {
   renderBody() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return (
       <div className="ref-project-create-service-hook">
         <SettingsPageHeader title={t('Create Service Hook')} />
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
index 557f953cba..b6b15f5648 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
@@ -20,7 +20,7 @@ class GroupTombstoneRow extends React.Component {
   };
 
   render() {
-    let {data, onUndiscard} = this.props,
+    const {data, onUndiscard} = this.props,
       actor = data.actor;
 
     return (
@@ -71,13 +71,13 @@ class GroupTombstones extends AsyncComponent {
   };
 
   getEndpoints() {
-    let {orgId, projectId} = this.props;
+    const {orgId, projectId} = this.props;
     return [['tombstones', `/projects/${orgId}/${projectId}/tombstones/`]];
   }
 
   handleUndiscard = tombstoneId => {
-    let {orgId, projectId} = this.props;
-    let path = `/projects/${orgId}/${projectId}/tombstones/${tombstoneId}/`;
+    const {orgId, projectId} = this.props;
+    const path = `/projects/${orgId}/${projectId}/tombstones/${tombstoneId}/`;
     this.api.request(path, {
       method: 'DELETE',
       success: data => {
@@ -99,7 +99,7 @@ class GroupTombstones extends AsyncComponent {
   }
 
   renderBody() {
-    let {tombstones} = this.state;
+    const {tombstones} = this.state;
 
     return tombstones.length ? (
       <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
index 4cfd25710e..db7aac4db8 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
@@ -18,11 +18,11 @@ class ProjectFilters extends React.Component {
   };
 
   render() {
-    let {project} = this.context;
-    let {orgId, projectId, filterType} = this.props.params;
+    const {project} = this.context;
+    const {orgId, projectId, filterType} = this.props.params;
     if (!project) return null;
 
-    let features = new Set(project.features);
+    const features = new Set(project.features);
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
index ab72ee2a63..3afa1e4e8b 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
@@ -25,8 +25,8 @@ const ProjectFiltersChart = createReactClass({
   mixins: [ApiMixin],
 
   getInitialState() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 30;
+    const until = Math.floor(new Date().getTime() / 1000);
+    const since = until - 3600 * 24 * 30;
 
     return {
       loading: true,
@@ -76,10 +76,10 @@ const ProjectFiltersChart = createReactClass({
   },
 
   getFilterStats() {
-    let statOptions = Object.keys(this.getStatOpts());
-    let {orgId, projectId} = this.props.params;
-    let statEndpoint = `/projects/${orgId}/${projectId}/stats/`;
-    let query = {
+    const statOptions = Object.keys(this.getStatOpts());
+    const {orgId, projectId} = this.props.params;
+    const statEndpoint = `/projects/${orgId}/${projectId}/stats/`;
+    const query = {
       since: this.state.querySince,
       until: this.state.queryUntil,
       resolution: '1d',
@@ -89,7 +89,7 @@ const ProjectFiltersChart = createReactClass({
         $,
         // parallelize requests for each statistic
         statOptions.map(stat => {
-          let deferred = $.Deferred();
+          const deferred = $.Deferred();
           this.api.request(statEndpoint, {
             query: Object.assign({stat}, query),
             success: deferred.resolve.bind(deferred),
@@ -100,7 +100,7 @@ const ProjectFiltersChart = createReactClass({
       )
       .done(
         function(/* statOption1, statOption2, ... statOptionN */) {
-          let rawStatsData = {};
+          const rawStatsData = {};
           // when there is a single request made, this is inexplicably called without being wrapped in an array
           if (statOptions.length === 1) {
             rawStatsData[statOptions[0]] = arguments[0];
@@ -130,18 +130,18 @@ const ProjectFiltersChart = createReactClass({
   },
 
   timeLabelAsDay(point) {
-    let timeMoment = moment(point.x * 1000);
+    const timeMoment = moment(point.x * 1000);
 
     return timeMoment.format('LL');
   },
 
   renderTooltip(point, pointIdx, chart) {
-    let timeLabel = this.timeLabelAsDay(point);
+    const timeLabel = this.timeLabelAsDay(point);
     let totalY = 0;
     for (let i = 0; i < point.y.length; i++) {
       totalY += point.y[i];
     }
-    let {formattedData} = this.state;
+    const {formattedData} = this.state;
 
     return ReactDOMServer.renderToStaticMarkup(
       <div style={{width: '175px'}}>
@@ -173,11 +173,11 @@ const ProjectFiltersChart = createReactClass({
   },
 
   render() {
-    let {loading, error} = this.state;
-    let isLoading = loading || !this.state.formattedData;
-    let hasError = !isLoading && error;
-    let hasLoaded = !isLoading && !error;
-    let classes = Object.keys(this.getStatOpts());
+    const {loading, error} = this.state;
+    const isLoading = loading || !this.state.formattedData;
+    const hasError = !isLoading && error;
+    const hasLoaded = !isLoading && !error;
+    const classes = Object.keys(this.getStatOpts());
 
     return (
       <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
index b143ddb960..75d5537406 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -113,7 +113,7 @@ class LegacyBrowserFilterRow extends React.Component {
   };
 
   render() {
-    let {disabled} = this.props;
+    const {disabled} = this.props;
     return (
       <div>
         {!disabled && (
@@ -130,7 +130,7 @@ class LegacyBrowserFilterRow extends React.Component {
 
         <FilterGrid>
           {LEGACY_BROWSER_KEYS.map(key => {
-            let subfilter = LEGACY_BROWSER_SUBFILTERS[key];
+            const subfilter = LEGACY_BROWSER_SUBFILTERS[key];
             return (
               <FilterGridItemWrapper key={key}>
                 <FilterGridItem>
@@ -172,7 +172,7 @@ class ProjectFiltersSettings extends AsyncComponent {
     };
   }
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [
       ['filterList', `/projects/${orgId}/${projectId}/filters/`],
       ['project', `/projects/${orgId}/${projectId}/`],
@@ -218,13 +218,13 @@ class ProjectFiltersSettings extends AsyncComponent {
   );
 
   renderBody() {
-    let {features, params} = this.props;
-    let {orgId, projectId} = params;
-    let {project} = this.state;
+    const {features, params} = this.props;
+    const {orgId, projectId} = params;
+    const {project} = this.state;
 
     if (!project) return null;
-    let projectEndpoint = `/projects/${orgId}/${projectId}/`;
-    let filtersEndpoint = `${projectEndpoint}filters/`;
+    const projectEndpoint = `/projects/${orgId}/${projectId}/`;
+    const filtersEndpoint = `${projectEndpoint}filters/`;
 
     return (
       <Access access={['project:write']}>
@@ -234,7 +234,7 @@ class ProjectFiltersSettings extends AsyncComponent {
               <PanelHeader>{t('Filters')}</PanelHeader>
               <PanelBody>
                 {this.state.filterList.map((filter, idx) => {
-                  let fieldProps = {
+                  const fieldProps = {
                     name: filter.id,
                     label: filter.name,
                     help: filter.description,
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
index 813bbf251b..9cbfa91187 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
@@ -53,8 +53,8 @@ const KeyRow = createReactClass({
   handleRemove() {
     if (this.state.loading) return;
 
-    let loadingIndicator = addLoadingMessage(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
+    const loadingIndicator = addLoadingMessage(t('Saving changes..'));
+    const {orgId, projectId, data} = this.props;
     this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
       method: 'DELETE',
       success: (d, _, jqXHR) => {
@@ -75,8 +75,8 @@ const KeyRow = createReactClass({
 
   handleUpdate(params, cb) {
     if (this.state.loading) return;
-    let loadingIndicator = addLoadingMessage(t('Saving changes..'));
-    let {orgId, projectId, data} = this.props;
+    const loadingIndicator = addLoadingMessage(t('Saving changes..'));
+    const {orgId, projectId, data} = this.props;
     this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
       method: 'PUT',
       data: params,
@@ -113,11 +113,11 @@ const KeyRow = createReactClass({
   },
 
   render() {
-    let {access, data} = this.props;
-    let editUrl = recreateRoute(`${data.id}/`, this.props);
-    let controlActive = access.has('project:write') && !this.state.loading;
+    const {access, data} = this.props;
+    const editUrl = recreateRoute(`${data.id}/`, this.props);
+    const controlActive = access.has('project:write') && !this.state.loading;
 
-    let controls = [
+    const controls = [
       <Button key="edit" to={editUrl} size="small">
         {t('Configure')}
       </Button>,
@@ -191,7 +191,7 @@ export default class ProjectKeys extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];
   }
 
@@ -207,7 +207,7 @@ export default class ProjectKeys extends AsyncView {
 
   handleToggleKey = (data, newData) => {
     this.setState(state => {
-      let keyList = state.keyList;
+      const keyList = state.keyList;
       keyList.forEach(key => {
         if (key.id === data.id) {
           key.isActive = newData.isActive;
@@ -218,7 +218,7 @@ export default class ProjectKeys extends AsyncView {
   };
 
   handleCreateKey = () => {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
       method: 'POST',
       success: (data, _, jqXHR) => {
@@ -247,9 +247,9 @@ export default class ProjectKeys extends AsyncView {
   }
 
   renderResults() {
-    let {routes, params} = this.props;
-    let {orgId, projectId} = params;
-    let access = getOrganizationState(this.context.organization).getAccess();
+    const {routes, params} = this.props;
+    const {orgId, projectId} = params;
+    const access = getOrganizationState(this.context.organization).getAccess();
 
     return (
       <div>
@@ -277,8 +277,8 @@ export default class ProjectKeys extends AsyncView {
   }
 
   renderBody() {
-    let access = getOrganizationState(this.context.organization).getAccess();
-    let isEmpty = !this.state.keyList.length;
+    const access = getOrganizationState(this.context.organization).getAccess();
+    const isEmpty = !this.state.keyList.length;
 
     return (
       <DocumentTitle title={t('Client Keys')}>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
index 4221dc3fb7..7007bf3731 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
@@ -35,7 +35,7 @@ class ProjectKeyCredentials extends React.Component {
   };
 
   render() {
-    let {
+    const {
       projectId,
       data,
       showDsn,
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index fa0273b711..8f853703b1 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -62,8 +62,8 @@ const KeyStats = createReactClass({
   mixins: [ApiMixin],
 
   getInitialState() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 30;
+    const until = Math.floor(new Date().getTime() / 1000);
+    const since = until - 3600 * 24 * 30;
 
     return {
       since,
@@ -80,7 +80,7 @@ const KeyStats = createReactClass({
   },
 
   fetchData() {
-    let {keyId, orgId, projectId} = this.props.params;
+    const {keyId, orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
       query: {
         since: this.state.since,
@@ -89,7 +89,7 @@ const KeyStats = createReactClass({
       },
       success: data => {
         let emptyStats = true;
-        let stats = data.map(p => {
+        const stats = data.map(p => {
           if (p.total) emptyStats = false;
           return {
             x: p.ts,
@@ -110,8 +110,8 @@ const KeyStats = createReactClass({
   },
 
   renderTooltip(point, pointIdx, chart) {
-    let timeLabel = chart.getTimeLabel(point);
-    let [accepted, dropped, filtered] = point.y;
+    const timeLabel = chart.getTimeLabel(point);
+    const [accepted, dropped, filtered] = point.y;
 
     let value = `${accepted.toLocaleString()} accepted`;
     if (dropped) {
@@ -173,7 +173,7 @@ class KeyRateLimitsForm extends React.Component {
   };
 
   handleChangeWindow = (onChange, onBlur, currentValueObj, value, e) => {
-    let valueObj = {
+    const valueObj = {
       ...currentValueObj,
       window: value,
     };
@@ -182,7 +182,7 @@ class KeyRateLimitsForm extends React.Component {
   };
 
   handleChangeCount = (cb, value, e) => {
-    let valueObj = {
+    const valueObj = {
       ...value,
       count: e.target.value,
     };
@@ -191,11 +191,11 @@ class KeyRateLimitsForm extends React.Component {
   };
 
   render() {
-    let {data, disabled} = this.props;
-    let {keyId, orgId, projectId} = this.props.params;
-    let apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+    const {data, disabled} = this.props;
+    const {keyId, orgId, projectId} = this.props.params;
+    const apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
 
-    let disabledAlert = ({features}) => (
+    const disabledAlert = ({features}) => (
       <FeatureDisabled
         alert={PanelAlert}
         features={features}
@@ -230,7 +230,7 @@ class KeyRateLimitsForm extends React.Component {
                   label={t('Rate Limit')}
                   disabled={disabled || !hasFeature}
                   validate={({id, form, model}) => {
-                    let isValid =
+                    const isValid =
                       form &&
                       form.rateLimit &&
                       typeof form.rateLimit.count !== 'undefined' &&
@@ -309,8 +309,8 @@ const KeySettings = createReactClass({
   handleRemove(e) {
     if (this.state.loading) return;
 
-    let loadingIndicator = addLoadingMessage(t('Saving changes..'));
-    let {keyId, orgId, projectId} = this.props.params;
+    const loadingIndicator = addLoadingMessage(t('Saving changes..'));
+    const {keyId, orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
       method: 'DELETE',
       success: (d, _, jqXHR) => {
@@ -330,9 +330,9 @@ const KeySettings = createReactClass({
   },
 
   render() {
-    let {keyId, orgId, projectId} = this.props.params;
-    let {data} = this.props;
-    let apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+    const {keyId, orgId, projectId} = this.props.params;
+    const {data} = this.props;
+    const apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
     const loaderLink = getDynamicText({
       value: data.dsn.cdn,
       fixed: '__JS_SDK_LOADER_URL__',
@@ -481,18 +481,18 @@ export default class ProjectKeyDetails extends AsyncView {
   }
 
   getEndpoints() {
-    let {keyId, orgId, projectId} = this.props.params;
+    const {keyId, orgId, projectId} = this.props.params;
     return [['data', `/projects/${orgId}/${projectId}/keys/${keyId}/`]];
   }
 
   handleRemove = data => {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     browserHistory.push(`/${orgId}/${projectId}/settings/keys/`);
   };
 
   renderBody() {
-    let {data} = this.state;
-    let {params} = this.props;
+    const {data} = this.state;
+    const {params} = this.props;
 
     return (
       <div className="ref-key-details">
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/index.jsx
index b901b61a3a..5418d83d32 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/index.jsx
@@ -28,13 +28,13 @@ class ProjectOwnership extends AsyncView {
   }
 
   getEndpoints() {
-    let {organization, project} = this.props;
+    const {organization, project} = this.props;
     return [['ownership', `/projects/${organization.slug}/${project.slug}/ownership/`]];
   }
 
   renderBody() {
-    let {project, organization} = this.props;
-    let {ownership} = this.state;
+    const {project, organization} = this.props;
+    const {ownership} = this.state;
 
     const disabled = !organization.access.includes('project:write');
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
index 220840d6f2..eda62ac096 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/modal.jsx
@@ -17,7 +17,7 @@ class ProjectOwnershipModal extends AsyncComponent {
   };
 
   getEndpoints() {
-    let {organization, project, issueId} = this.props;
+    const {organization, project, issueId} = this.props;
     return [
       ['ownership', `/projects/${organization.slug}/${project.slug}/ownership/`],
       [
@@ -36,8 +36,8 @@ class ProjectOwnershipModal extends AsyncComponent {
   }
 
   renderBody() {
-    let {ownership, urlTagData, eventData} = this.state;
-    let urls = urlTagData
+    const {ownership, urlTagData, eventData} = this.state;
+    const urls = urlTagData
       ? urlTagData.topValues
           .sort((a, b) => a.count - b.count)
           .map(i => i.value)
@@ -52,12 +52,12 @@ class ProjectOwnershipModal extends AsyncComponent {
       [];
 
     //filter frames by inApp unless there would be 0
-    let inAppFrames = frames.filter(frame => frame.inApp);
+    const inAppFrames = frames.filter(frame => frame.inApp);
     if (inAppFrames.length > 0) {
       frames = inAppFrames;
     }
 
-    let paths = uniq(
+    const paths = uniq(
       frames.map(frame => frame.filename || frame.absPath).filter(i => i)
     ).slice(0, 30);
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
index 5fa49de942..cead0257a2 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
@@ -40,7 +40,7 @@ class OwnerInput extends React.Component {
   }
 
   parseError(error) {
-    let text = error && error.raw && error.raw[0];
+    const text = error && error.raw && error.raw[0];
     if (!text) {
       return null;
     }
@@ -53,12 +53,12 @@ class OwnerInput extends React.Component {
   }
 
   handleUpdateOwnership = () => {
-    let {organization, project} = this.props;
-    let {text} = this.state;
+    const {organization, project} = this.props;
+    const {text} = this.state;
     this.setState({error: null});
 
     const api = new Client();
-    let request = api.requestPromise(
+    const request = api.requestPromise(
       `/projects/${organization.slug}/${project.slug}/ownership/`,
       {
         method: 'PUT',
@@ -104,7 +104,7 @@ class OwnerInput extends React.Component {
   }
 
   mentionableTeams() {
-    let {project} = this.props;
+    const {project} = this.props;
     return (ProjectsStore.getBySlug(project.slug) || {
       teams: [],
     }).teams.map(team => ({
@@ -128,8 +128,8 @@ class OwnerInput extends React.Component {
   };
 
   render() {
-    let {project, organization, disabled, urls, paths} = this.props;
-    let {text, error, initialText} = this.state;
+    const {project, organization, disabled, urls, paths} = this.props;
+    const {text, error, initialText} = this.state;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ruleBuilder.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ruleBuilder.jsx
index 9602b5b5c8..a089953832 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ruleBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ruleBuilder.jsx
@@ -59,14 +59,14 @@ class RuleBuilder extends React.Component {
   };
 
   handleAddRule = () => {
-    let {type, text, owners, isValid} = this.state;
+    const {type, text, owners, isValid} = this.state;
 
     if (!isValid) {
       addErrorMessage('A Rule needs a type, a value, and one or more owners.');
       return;
     }
 
-    let ownerText = owners
+    const ownerText = owners
       .map(
         owner =>
           owner.actor.type === 'team'
@@ -75,7 +75,7 @@ class RuleBuilder extends React.Component {
       )
       .join(' ');
 
-    let rule = `${type}:${text} ${ownerText}`;
+    const rule = `${type}:${text} ${ownerText}`;
     this.props.onAddRule(rule);
     this.setState(initialState);
   };
@@ -86,8 +86,8 @@ class RuleBuilder extends React.Component {
   };
 
   render() {
-    let {urls, paths, disabled, project, organization} = this.props;
-    let {type, text, owners, isValid} = this.state;
+    const {urls, paths, disabled, project, organization} = this.props;
+    const {type, text, owners, isValid} = this.state;
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
index adc3cd8762..574ef4b817 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
@@ -130,8 +130,8 @@ export default class SelectOwners extends React.Component {
   };
 
   createUnmentionableTeam = team => {
-    let {organization} = this.props;
-    let canAddTeam = organization.access.includes('project:write');
+    const {organization} = this.props;
+    const canAddTeam = organization.access.includes('project:write');
 
     return {
       ...this.createMentionableTeam(team),
@@ -172,8 +172,8 @@ export default class SelectOwners extends React.Component {
   }
 
   getMentionableTeams() {
-    let {project} = this.props;
-    let projectData = ProjectsStore.getBySlug(project.slug);
+    const {project} = this.props;
+    const projectData = ProjectsStore.getBySlug(project.slug);
 
     if (!projectData) {
       return [];
@@ -188,8 +188,8 @@ export default class SelectOwners extends React.Component {
    * @param {Team[]} teamsInProject A list of teams that are in the current project
    */
   getTeamsNotInProject(teamsInProject = []) {
-    let teams = TeamStore.getAll() || [];
-    let excludedTeamIds = teamsInProject.map(({actor}) => actor.id);
+    const teams = TeamStore.getAll() || [];
+    const excludedTeamIds = teamsInProject.map(({actor}) => actor.id);
 
     return teams
       .filter(team => excludedTeamIds.indexOf(team.id) === -1)
@@ -203,7 +203,7 @@ export default class SelectOwners extends React.Component {
   closeSelectMenu() {
     // Close select menu
     if (this.selectRef) {
-      let input = ReactDOM.findDOMNode(this.selectRef).querySelector(
+      const input = ReactDOM.findDOMNode(this.selectRef).querySelector(
         '.Select-input input'
       );
       if (input) {
@@ -214,9 +214,9 @@ export default class SelectOwners extends React.Component {
   }
 
   async handleAddTeamToProject(team) {
-    let {organization, project, value} = this.props;
+    const {organization, project, value} = this.props;
     // Copy old value
-    let oldValue = [...value];
+    const oldValue = [...value];
 
     // Optimistic update
     this.props.onChange([...this.props.value, this.createMentionableTeam(team)]);
@@ -248,7 +248,7 @@ export default class SelectOwners extends React.Component {
   };
 
   queryMembers = debounce((query, cb) => {
-    let {organization} = this.props;
+    const {organization} = this.props;
 
     // Because this function is debounced, the component can potentially be
     // unmounted before this fires, in which case, `this.api` is null
@@ -262,10 +262,10 @@ export default class SelectOwners extends React.Component {
   }, 250);
 
   handleLoadOptions = () => {
-    let usersInProject = this.getMentionableUsers();
-    let teamsInProject = this.getMentionableTeams();
-    let teamsNotInProject = this.getTeamsNotInProject(teamsInProject);
-    let usersInProjectById = usersInProject.map(({actor}) => actor.id);
+    const usersInProject = this.getMentionableUsers();
+    const teamsInProject = this.getMentionableTeams();
+    const teamsNotInProject = this.getTeamsNotInProject(teamsInProject);
+    const usersInProjectById = usersInProject.map(({actor}) => actor.id);
 
     // Return a promise for `react-select`
     return new Promise((resolve, reject) => {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
index e9161baeea..3b3a68f656 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
@@ -63,13 +63,13 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   fetchData() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     this.setState({
       expected: this.state.expected + 2,
     });
     this.api.request(`/projects/${orgId}/${projectId}/`, {
       success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           loading: expected > 0,
@@ -77,7 +77,7 @@ const ProjectProcessingIssues = createReactClass({
         });
       },
       error: () => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: true,
@@ -88,7 +88,7 @@ const ProjectProcessingIssues = createReactClass({
 
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
       success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: false,
@@ -98,7 +98,7 @@ const ProjectProcessingIssues = createReactClass({
         });
       },
       error: () => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: true,
@@ -112,8 +112,8 @@ const ProjectProcessingIssues = createReactClass({
     this.setState({
       reprocessing: true,
     });
-    let loadingIndicator = addLoadingMessage(t('Started reprocessing..'));
-    let {orgId, projectId} = this.props.params;
+    const loadingIndicator = addLoadingMessage(t('Started reprocessing..'));
+    const {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {
       method: 'POST',
       success: (data, _, jqXHR) => {
@@ -134,14 +134,14 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   discardEvents() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     this.setState({
       expected: this.state.expected + 1,
     });
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/discard/`, {
       method: 'DELETE',
       success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: false,
@@ -152,7 +152,7 @@ const ProjectProcessingIssues = createReactClass({
         window.location.reload();
       },
       error: () => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: true,
@@ -163,14 +163,14 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   deleteProcessingIssues() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     this.setState({
       expected: this.state.expected + 1,
     });
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
       method: 'DELETE',
       success: (data, _, jqXHR) => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: false,
@@ -181,7 +181,7 @@ const ProjectProcessingIssues = createReactClass({
         window.location.reload();
       },
       error: () => {
-        let expected = this.state.expected - 1;
+        const expected = this.state.expected - 1;
         this.setState({
           expected,
           error: true,
@@ -225,18 +225,18 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   getProblemDescription(item) {
-    let msg = MESSAGES[item.type];
+    const msg = MESSAGES[item.type];
     return msg || item.message || 'Unknown Error';
   },
 
   getImageName(path) {
-    let pathSegments = path.split(/^([a-z]:\\|\\\\)/i.test(path) ? '\\' : '/');
+    const pathSegments = path.split(/^([a-z]:\\|\\\\)/i.test(path) ? '\\' : '/');
     return pathSegments[pathSegments.length - 1];
   },
 
   renderProblem(item) {
-    let description = this.getProblemDescription(item);
-    let helpLink = HELP_LINKS[item.type];
+    const description = this.getProblemDescription(item);
+    const helpLink = HELP_LINKS[item.type];
     return (
       <div className="processing-issue">
         <span className="description">{description}</span>{' '}
@@ -276,14 +276,14 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   renderResolveButton() {
-    let issues = this.state.processingIssues;
+    const issues = this.state.processingIssues;
     if (issues === null || this.state.reprocessing) {
       return null;
     }
     if (issues.resolveableIssues <= 0) {
       return null;
     }
-    let fixButton = tn(
+    const fixButton = tn(
       'Click here to trigger processing for %s pending event',
       'Click here to trigger processing for %s pending events',
       issues.resolveableIssues
@@ -396,13 +396,13 @@ const ProjectProcessingIssues = createReactClass({
   },
 
   renderReprocessingSettings() {
-    let access = this.getAccess();
+    const access = this.getAccess();
     if (this.state.loading) {
       return this.renderLoading();
     }
 
-    let {formData} = this.state;
-    let {orgId, projectId} = this.props.params;
+    const {formData} = this.state;
+    const {orgId, projectId} = this.props.params;
     return (
       <Form
         saveOnBlur
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
index ecd6b978c7..a40374eaf8 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectReleaseTracking.jsx
@@ -34,7 +34,7 @@ class ProjectReleaseTracking extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     // Allow 403s
     return [
@@ -48,7 +48,7 @@ class ProjectReleaseTracking extends AsyncView {
   }
 
   handleRegenerateToken = () => {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
       method: 'POST',
       data: {project: projectId},
@@ -70,7 +70,7 @@ class ProjectReleaseTracking extends AsyncView {
   };
 
   getReleaseWebhookIntructions() {
-    let {webhookUrl} = this.state.data || {webhookUrl: WEBHOOK_PLACEHOLDER};
+    const {webhookUrl} = this.state.data || {webhookUrl: WEBHOOK_PLACEHOLDER};
     return (
       'curl ' +
       webhookUrl +
@@ -85,14 +85,14 @@ class ProjectReleaseTracking extends AsyncView {
   }
 
   renderBody() {
-    let {organization, project, plugins} = this.props;
-    let hasWrite = organization.access.includes('project:write');
+    const {organization, project, plugins} = this.props;
+    const hasWrite = organization.access.includes('project:write');
 
     if (plugins.loading) {
       return <LoadingIndicator />;
     }
 
-    let pluginList = plugins.plugins.filter(
+    const pluginList = plugins.plugins.filter(
       p => p.type === 'release-tracking' && p.hasConfiguration
     );
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
index 297503bb6b..b1457cbe0d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
@@ -26,9 +26,9 @@ const EmptyHeader = styled.div`
 
 class HookStats extends AsyncComponent {
   getEndpoints() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 30;
-    let {hookId, orgId, projectId} = this.props.params;
+    const until = Math.floor(new Date().getTime() / 1000);
+    const since = until - 3600 * 24 * 30;
+    const {hookId, orgId, projectId} = this.props.params;
     return [
       [
         'stats',
@@ -45,10 +45,10 @@ class HookStats extends AsyncComponent {
   }
 
   renderTooltip(point, pointIdx, chart) {
-    let timeLabel = chart.getTimeLabel(point);
-    let [total] = point.y;
+    const timeLabel = chart.getTimeLabel(point);
+    const [total] = point.y;
 
-    let value = `${total.toLocaleString()} events`;
+    const value = `${total.toLocaleString()} events`;
 
     return (
       '<div style="width:150px">' +
@@ -60,7 +60,7 @@ class HookStats extends AsyncComponent {
 
   renderBody() {
     let emptyStats = true;
-    let stats = this.state.stats.map(p => {
+    const stats = this.state.stats.map(p => {
       if (p.total) emptyStats = false;
       return {
         x: p.ts,
@@ -98,13 +98,13 @@ class HookStats extends AsyncComponent {
 
 export default class ProjectServiceHookDetails extends AsyncView {
   getEndpoints() {
-    let {orgId, projectId, hookId} = this.props.params;
+    const {orgId, projectId, hookId} = this.props.params;
     return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];
   }
 
   onDelete = () => {
-    let {orgId, projectId, hookId} = this.props.params;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {orgId, projectId, hookId} = this.props.params;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {
       method: 'DELETE',
       success: () => {
@@ -125,8 +125,8 @@ export default class ProjectServiceHookDetails extends AsyncView {
   };
 
   renderBody() {
-    let {orgId, projectId, hookId} = this.props.params;
-    let {hook} = this.state;
+    const {orgId, projectId, hookId} = this.props.params;
+    const {hook} = this.state;
     return (
       <div>
         <SettingsPageHeader title={t('Service Hook Details')} />
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
index 6406f4657b..31ff2eaca5 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
@@ -35,7 +35,7 @@ const ServiceHookRow = createReactClass({
   },
 
   render() {
-    let {orgId, projectId, hook} = this.props;
+    const {orgId, projectId, hook} = this.props;
     return (
       <Field
         label={
@@ -69,13 +69,13 @@ export default class ProjectServiceHooks extends AsyncView {
   };
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];
   }
 
   onToggleActive = hook => {
-    let {orgId, projectId} = this.props.params;
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    const {orgId, projectId} = this.props.params;
+    const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {
       method: 'PUT',
       data: {
@@ -83,7 +83,7 @@ export default class ProjectServiceHooks extends AsyncView {
       },
       success: data => {
         IndicatorStore.remove(loadingIndicator);
-        let hookList = this.state.hookList.map(h => {
+        const hookList = this.state.hookList.map(h => {
           if (h.id === data.id) {
             return {
               ...h,
@@ -116,7 +116,7 @@ export default class ProjectServiceHooks extends AsyncView {
   }
 
   renderResults() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return (
       <React.Fragment>
@@ -147,8 +147,8 @@ export default class ProjectServiceHooks extends AsyncView {
     if (this.state.hookList.length > 0) body = this.renderResults();
     else body = this.renderEmpty();
 
-    let {orgId, projectId} = this.props.params;
-    let access = new Set(this.context.organization.access);
+    const {orgId, projectId} = this.props.params;
+    const access = new Set(this.context.organization.access);
 
     return (
       <div className="ref-project-service-hooks">
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx
index 17def9b588..9257af7d21 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsLayout.jsx
@@ -11,7 +11,7 @@ class ProjectSettingsLayout extends React.Component {
   };
 
   render() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return (
       <ProjectContext
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
index b9b9720cec..2eaa6f10a9 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
@@ -13,8 +13,8 @@ const ProjectSettingsNavigation = createReactClass({
 
   getInitialState() {
     // Allow injection via getsentry et all
-    let org = this.getOrganization();
-    let hooks = [];
+    const org = this.getOrganization();
+    const hooks = [];
     HookStore.get('project:settings-sidebar').forEach(cb => {
       hooks.push(cb(org));
     });
@@ -25,10 +25,10 @@ const ProjectSettingsNavigation = createReactClass({
   },
 
   render() {
-    let access = this.getAccess();
-    let features = this.getFeatures();
-    let org = this.getOrganization();
-    let project = this.getProject();
+    const access = this.getAccess();
+    const features = this.getFeatures();
+    const org = this.getOrganization();
+    const project = this.getProject();
 
     return (
       <SettingsNavigation
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
index c0834429f4..4dacb6b2ec 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -46,7 +46,7 @@ const TeamRow = createReactClass({
   handleRemove() {
     if (this.state.loading) return;
 
-    let {orgId, projectId, team} = this.props;
+    const {orgId, projectId, team} = this.props;
 
     removeTeamFromProject(this.api, orgId, projectId, team.slug)
       .then(() => this.props.onRemove())
@@ -59,8 +59,8 @@ const TeamRow = createReactClass({
   },
 
   render() {
-    let {team, access, orgId, projectId} = this.props;
-    let hasAccess = access.has('project:write');
+    const {team, access, orgId, projectId} = this.props;
+    const hasAccess = access.has('project:write');
 
     return (
       <PanelItem p={2} align="center">
@@ -93,7 +93,7 @@ const TeamRow = createReactClass({
 
 class ProjectTeams extends AsyncView {
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [
       ['projectTeams', `/projects/${orgId}/${projectId}/teams/`],
       ['allTeams', `/organizations/${orgId}/teams/`],
@@ -101,8 +101,8 @@ class ProjectTeams extends AsyncView {
   }
 
   canCreateTeam = () => {
-    let {organization} = this.props;
-    let access = getOrganizationState(organization).getAccess();
+    const {organization} = this.props;
+    const access = getOrganizationState(organization).getAccess();
     return (
       access.has('org:write') && access.has('team:write') && access.has('project:write')
     );
@@ -129,9 +129,9 @@ class ProjectTeams extends AsyncView {
   handleAdd = selection => {
     if (this.state.loading) return;
 
-    let team = this.state.allTeams.find(tm => tm.id === selection.value);
+    const team = this.state.allTeams.find(tm => tm.id === selection.value);
 
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     addTeamToProject(this.api, orgId, projectId, team).then(
       () => {
@@ -147,7 +147,7 @@ class ProjectTeams extends AsyncView {
   };
 
   handleCreateTeam = e => {
-    let {project, organization} = this.props;
+    const {project, organization} = this.props;
 
     if (!this.canCreateTeam()) return;
 
@@ -167,9 +167,9 @@ class ProjectTeams extends AsyncView {
   };
 
   renderAddTeamToProject() {
-    let projectTeams = new Set(this.state.projectTeams.map(team => team.slug));
-    let canAddTeam = this.props.organization.access.includes('project:write');
-    let canCreateTeam = this.canCreateTeam();
+    const projectTeams = new Set(this.state.projectTeams.map(team => team.slug));
+    const canAddTeam = this.props.organization.access.includes('project:write');
+    const canCreateTeam = this.canCreateTeam();
     let teamsToAdd;
 
     if (!this.state.allTeams) {
@@ -190,7 +190,7 @@ class ProjectTeams extends AsyncView {
         }));
     }
 
-    let menuHeader = (
+    const menuHeader = (
       <StyledTeamsLabel>
         {t('Teams')}
         <Tooltip
@@ -229,8 +229,8 @@ class ProjectTeams extends AsyncView {
   }
 
   renderResults() {
-    let {orgId, projectId} = this.props.params;
-    let access = new Set(this.props.organization.access);
+    const {orgId, projectId} = this.props.params;
+    const access = new Set(this.props.organization.access);
 
     return this.state.projectTeams.map(team => {
       return (
@@ -248,8 +248,8 @@ class ProjectTeams extends AsyncView {
   }
 
   renderBody() {
-    let {params} = this.props;
-    let body =
+    const {params} = this.props;
+    const body =
       this.state.projectTeams.length > 0 ? this.renderResults() : this.renderEmpty();
 
     return (
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
index 4c0bfd0424..4a3a01b828 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -44,7 +44,7 @@ class ProjectUserFeedbackSettings extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [
       ['keyList', `/projects/${orgId}/${projectId}/keys/`],
       ['project', `/projects/${orgId}/${projectId}/`],
@@ -59,7 +59,7 @@ class ProjectUserFeedbackSettings extends AsyncView {
   };
 
   renderBody() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
index 029782deb7..9d582d78de 100644
--- a/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
@@ -24,14 +24,14 @@ export default createReactClass({
   },
 
   onSubmitSuccess() {
-    let {orgId, projectId} = this.props;
+    const {orgId, projectId} = this.props;
     browserHistory.push(`/settings/${orgId}/${projectId}/hooks/`);
   },
 
   render() {
-    let {initialData, orgId, projectId, hookId} = this.props;
+    const {initialData, orgId, projectId, hookId} = this.props;
 
-    let endpoint = hookId
+    const endpoint = hookId
       ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`
       : `/projects/${orgId}/${projectId}/hooks/`;
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx
index b8d7535509..fbb7dc1f58 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRuleDetails.jsx
@@ -11,14 +11,14 @@ class ProjectAlertRuleDetails extends AsyncView {
   };
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return [['configs', `/projects/${orgId}/${projectId}/rules/configuration/`]];
   }
 
   renderBody() {
-    let {organization, project} = this.context;
-    let {actions, conditions} = this.state.configs;
+    const {organization, project} = this.context;
+    const {actions, conditions} = this.state.configs;
 
     return (
       <RuleEditor
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
index 31c9950cd0..845bb9a2b5 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
@@ -211,7 +211,7 @@ class ProjectAlertRules extends AsyncView {
   };
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['ruleList', `/projects/${orgId}/${projectId}/rules/`]];
   }
 
@@ -232,9 +232,9 @@ class ProjectAlertRules extends AsyncView {
   }
 
   renderResults() {
-    let {orgId, projectId} = this.props.params;
-    let {organization} = this.context;
-    let canEditRule = organization.access.includes('project:write');
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
+    const canEditRule = organization.access.includes('project:write');
 
     return (
       <div className="rules-list">
@@ -258,9 +258,9 @@ class ProjectAlertRules extends AsyncView {
   }
 
   renderBody() {
-    let {ruleList} = this.state;
-    let {organization} = this.context;
-    let canEditRule = organization.access.includes('project:write');
+    const {ruleList} = this.state;
+    const {organization} = this.context;
+    const canEditRule = organization.access.includes('project:write');
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
index bce3130108..3d75c9ce76 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
@@ -29,7 +29,7 @@ export default class ProjectAlertSettings extends AsyncView {
   };
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [
       ['project', `/projects/${orgId}/${projectId}/`],
       ['pluginList', `/projects/${orgId}/${projectId}/plugins/`],
@@ -67,9 +67,9 @@ export default class ProjectAlertSettings extends AsyncView {
   }
 
   renderBody() {
-    let {orgId, projectId} = this.props.params;
-    let {organization} = this.props;
-    let canEditRule = organization.access.includes('project:write');
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.props;
+    const canEditRule = organization.access.includes('project:write');
 
     return (
       <Access access={['project:write']}>
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index d12772aa6f..9c27858f31 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -43,12 +43,12 @@ class ProjectGeneralSettings extends AsyncView {
   }
 
   getTitle() {
-    let {projectId} = this.props.params;
+    const {projectId} = this.props.params;
     return t('%s Settings', projectId);
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['data', `/projects/${orgId}/${projectId}/`]];
   }
 
@@ -57,8 +57,8 @@ class ProjectGeneralSettings extends AsyncView {
   };
 
   handleRemoveProject = () => {
-    let {orgId} = this.props.params;
-    let project = this.state.data;
+    const {orgId} = this.props.params;
+    const project = this.state.data;
     if (!project) return;
 
     removeProject(this.api, orgId, project).then(() => {
@@ -68,8 +68,8 @@ class ProjectGeneralSettings extends AsyncView {
   };
 
   handleTransferProject = () => {
-    let {orgId} = this.props.params;
-    let project = this.state.data;
+    const {orgId} = this.props.params;
+    const project = this.state.data;
     if (!project) return;
     if (!this._form.email) return;
 
@@ -80,11 +80,11 @@ class ProjectGeneralSettings extends AsyncView {
   };
 
   renderRemoveProject() {
-    let project = this.state.data;
-    let isProjectAdmin = getOrganizationState(this.context.organization)
+    const project = this.state.data;
+    const isProjectAdmin = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
-    let {isInternal} = project;
+    const {isInternal} = project;
 
     return (
       <Field
@@ -137,11 +137,11 @@ class ProjectGeneralSettings extends AsyncView {
   }
 
   renderTransferProject() {
-    let project = this.state.data;
-    let isProjectAdmin = getOrganizationState(this.context.organization)
+    const project = this.state.data;
+    const isProjectAdmin = getOrganizationState(this.context.organization)
       .getAccess()
       .has('project:admin');
-    let {isInternal} = project;
+    const {isInternal} = project;
 
     return (
       <Field
@@ -219,12 +219,12 @@ class ProjectGeneralSettings extends AsyncView {
   }
 
   renderBody() {
-    let {organization} = this.context;
-    let project = this.state.data;
-    let {orgId, projectId} = this.props.params;
-    let endpoint = `/projects/${orgId}/${projectId}/`;
-    let access = new Set(organization.access);
-    let jsonFormProps = {
+    const {organization} = this.context;
+    const project = this.state.data;
+    const {orgId, projectId} = this.props.params;
+    const endpoint = `/projects/${orgId}/${projectId}/`;
+    const access = new Set(organization.access);
+    const jsonFormProps = {
       additionalFieldProps: {organization},
       features: new Set(organization.features),
       access,
@@ -337,7 +337,7 @@ const ProjectGeneralSettingsContainer = createReactClass({
   mixins: [Reflux.listenTo(ProjectsStore, 'onProjectsUpdate')],
   onProjectsUpdate(projects) {
     if (!this.changedSlug) return;
-    let project = ProjectsStore.getBySlug(this.changedSlug);
+    const project = ProjectsStore.getBySlug(this.changedSlug);
 
     if (!project) return;
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx
index 73b2edf347..2a02ecf9f5 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/csp.jsx
@@ -26,7 +26,7 @@ export default class ProjectCspReports extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [
       ['keyList', `/projects/${orgId}/${projectId}/keys/`],
       ['project', `/projects/${orgId}/${projectId}/`],
@@ -61,7 +61,7 @@ export default class ProjectCspReports extends AsyncView {
   }
 
   renderBody() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx
index d657516709..f8b8d2ff1f 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/expectCt.jsx
@@ -22,7 +22,7 @@ export default class ProjectExpectCtReports extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
index b133ee16eb..80ccfe44cb 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
@@ -22,7 +22,7 @@ export default class ProjectHpkpReports extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [
       ['keyList', `/projects/${orgId}/${projectId}/keys/`],
       ['project', `/projects/${orgId}/${projectId}/`],
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
index de4835beb1..c8c5b5beaf 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
@@ -28,7 +28,7 @@ export default class ProjectSecurityHeaders extends AsyncView {
   }
 
   getEndpoints() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];
   }
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/reportUri.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/reportUri.jsx
index 7d2717c3cc..d93b9cd77b 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/reportUri.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/reportUri.jsx
@@ -11,7 +11,7 @@ import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
 const DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';
 
 export const getSecurityDsn = keyList => {
-  let endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;
+  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;
   return getDynamicText({
     value: endpoint,
     fixed: DEFAULT_ENDPOINT,
@@ -24,7 +24,7 @@ export default class ReportUri extends React.Component {
   };
 
   render() {
-    let {orgId, projectId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     return (
       <Panel>
         <PanelHeader>{'Report URI'}</PanelHeader>
diff --git a/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx b/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
index 05366ea895..32ba5dbd5f 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
@@ -46,7 +46,7 @@ class SettingsIndex extends React.Component {
   };
 
   componentDidUpdate(prevProps) {
-    let {organization} = this.props;
+    const {organization} = this.props;
     if (prevProps.organization === organization) return;
 
     // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`
@@ -61,20 +61,20 @@ class SettingsIndex extends React.Component {
   }
 
   render() {
-    let {organization} = this.props;
-    let user = ConfigStore.get('user');
-    let isOnPremise = ConfigStore.get('isOnPremise');
-    let isSuperuser = user.isSuperuser;
+    const {organization} = this.props;
+    const user = ConfigStore.get('user');
+    const isOnPremise = ConfigStore.get('isOnPremise');
+    const isSuperuser = user.isSuperuser;
 
-    let organizationSettingsUrl =
+    const organizationSettingsUrl =
       (organization && `/settings/${organization.slug}/`) || '';
 
-    let supportLinkProps = {
+    const supportLinkProps = {
       isOnPremise,
       href: LINKS.FORUM,
       to: `${organizationSettingsUrl}support`,
     };
-    let supportText = isOnPremise ? t('Community Forums') : t('Contact Support');
+    const supportText = isOnPremise ? t('Community Forums') : t('Contact Support');
 
     return (
       <DocumentTitle title={organization ? `${organization.slug} Settings` : 'Settings'}>
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index bf1562766e..2a10fbf716 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -72,13 +72,13 @@ const SharedGroupDetails = createReactClass({
   },
 
   getGroupDetailsEndpoint() {
-    let id = this.props.params.shareId;
+    const id = this.props.params.shareId;
 
     return '/shared/issues/' + id + '/';
   },
 
   render() {
-    let group = this.state.group;
+    const group = this.state.group;
 
     if (this.state.loading) {
       return <LoadingIndicator />;
@@ -88,7 +88,7 @@ const SharedGroupDetails = createReactClass({
       return <LoadingError onRetry={this.fetchData} />;
     }
 
-    let evt = this.state.group.latestEvent;
+    const evt = this.state.group.latestEvent;
 
     return (
       <DocumentTitle title={this.getTitle()}>
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
index 4352d75eed..f590148265 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
@@ -7,7 +7,7 @@ class SharedGroupHeader extends React.Component {
   };
 
   render() {
-    let group = this.props.group;
+    const group = this.props.group;
 
     return (
       <div className="group-detail" style={{paddingBottom: 20}}>
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index a38ac9591f..cb4af5f2ec 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -46,7 +46,7 @@ const getBulkConfirmMessage = (action, queryCount) => {
 
 const getConfirm = (numIssues, allInQuerySelected, query, queryCount) => {
   return function(action, canBeUndone, append = '') {
-    let question = allInQuerySelected
+    const question = allInQuerySelected
       ? getBulkConfirmMessage(`${action}${append}`, queryCount)
       : tn(
           `Are you sure you want to ${action} this %s issue${append}?`,
@@ -54,7 +54,7 @@ const getConfirm = (numIssues, allInQuerySelected, query, queryCount) => {
           numIssues
         );
 
-    let message =
+    const message =
       action == 'delete'
         ? tct(
             'Bulk deletion is only recommended for junk data. To clear your stream, consider resolving or ignoring. [link:When should I delete events?]',
@@ -84,8 +84,8 @@ const getConfirm = (numIssues, allInQuerySelected, query, queryCount) => {
 
 const getLabel = (numIssues, allInQuerySelected) => {
   return function(action, append = '') {
-    let capitalized = capitalize(action);
-    let text = allInQuerySelected
+    const capitalized = capitalize(action);
+    const text = allInQuerySelected
       ? t(`Bulk ${action} issues`)
       : tn(
           `${capitalized} %s selected issue`,
@@ -188,7 +188,7 @@ const StreamActions = createReactClass({
     if (this.state.allInQuerySelected) {
       selectedIds = undefined; // undefined means "all"
     } else {
-      let itemIdSet = SelectedGroupStore.getSelectedIds();
+      const itemIdSet = SelectedGroupStore.getSelectedIds();
       selectedIds = this.props.groupIds.filter(itemId => itemIdSet.has(itemId));
     }
 
@@ -204,7 +204,7 @@ const StreamActions = createReactClass({
 
   onUpdate(data) {
     this.actionSelectedGroups(itemIds => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
       this.api.bulkUpdate(
         {
           orgId: this.props.orgId,
@@ -224,7 +224,7 @@ const StreamActions = createReactClass({
   },
 
   onDelete(event) {
-    let loadingIndicator = IndicatorStore.add(t('Removing events..'));
+    const loadingIndicator = IndicatorStore.add(t('Removing events..'));
 
     this.actionSelectedGroups(itemIds => {
       this.api.bulkDelete(
@@ -245,7 +245,7 @@ const StreamActions = createReactClass({
   },
 
   onMerge(event) {
-    let loadingIndicator = IndicatorStore.add(t('Merging events..'));
+    const loadingIndicator = IndicatorStore.add(t('Merging events..'));
 
     this.actionSelectedGroups(itemIds => {
       this.api.merge(
@@ -284,7 +284,7 @@ const StreamActions = createReactClass({
   },
 
   shouldConfirm(action) {
-    let selectedItems = SelectedGroupStore.getSelectedIds();
+    const selectedItems = SelectedGroupStore.getSelectedIds();
     switch (action) {
       case 'resolve':
       case 'unresolve':
@@ -302,7 +302,7 @@ const StreamActions = createReactClass({
 
   render() {
     // TODO(mitsuhiko): very unclear how to translate this
-    let {
+    const {
       allResultsVisible,
       hasReleases,
       latestRelease,
@@ -313,16 +313,16 @@ const StreamActions = createReactClass({
       realtimeActive,
       statsPeriod,
     } = this.props;
-    let issues = this.state.selectedIds;
-    let numIssues = issues.size;
-    let {allInQuerySelected, anySelected, multiSelected, pageSelected} = this.state;
-    let confirm = getConfirm(numIssues, allInQuerySelected, query, queryCount);
-    let label = getLabel(numIssues, allInQuerySelected);
+    const issues = this.state.selectedIds;
+    const numIssues = issues.size;
+    const {allInQuerySelected, anySelected, multiSelected, pageSelected} = this.state;
+    const confirm = getConfirm(numIssues, allInQuerySelected, query, queryCount);
+    const label = getLabel(numIssues, allInQuerySelected);
 
     // resolve and merge require a single project to be active
     // in an org context projectId is null when 0 or >1 projects are selected.
-    let resolveDisabled = !(anySelected && projectId);
-    let mergeDisabled = !(multiSelected && projectId);
+    const resolveDisabled = !(anySelected && projectId);
+    const mergeDisabled = !(multiSelected && projectId);
 
     return (
       <Sticky>
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 910d92de10..cfc91b0962 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -42,7 +42,7 @@ class StreamFilters extends React.Component {
   };
 
   render() {
-    let {
+    const {
       access,
       orgId,
       projectId,
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index a226aef6cc..5ab2eb8fcf 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -56,7 +56,7 @@ const SaveSearchButton = withApi(
     }
 
     onFieldChange(name, value) {
-      let formData = this.state.formData;
+      const formData = this.state.formData;
       formData[name] = value;
       this.setState({
         formData,
@@ -77,15 +77,15 @@ const SaveSearchButton = withApi(
       if (this.state.state == FormState.SAVING) {
         return;
       }
-      let {api} = this.props;
+      const {api} = this.props;
 
       this.setState(
         {
           state: FormState.SAVING,
         },
         () => {
-          let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-          let {orgId, projectId} = this.props;
+          const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+          const {orgId, projectId} = this.props;
           api.request(`/projects/${orgId}/${projectId}/searches/`, {
             method: 'POST',
             data: this.state.formData,
@@ -114,8 +114,8 @@ const SaveSearchButton = withApi(
     }
 
     render() {
-      let isSaving = this.state.state === FormState.SAVING;
-      let {tooltip, buttonTitle, style, children, disabled} = this.props;
+      const isSaving = this.state.state === FormState.SAVING;
+      const {tooltip, buttonTitle, style, children, disabled} = this.props;
       return (
         <React.Fragment>
           <Tooltip
@@ -224,7 +224,7 @@ const SavedSearchSelector = withApi(
     };
 
     getTitle() {
-      let {searchId, query, savedSearchList} = this.props;
+      const {searchId, query, savedSearchList} = this.props;
       let result;
 
       if (searchId) {
@@ -237,10 +237,16 @@ const SavedSearchSelector = withApi(
     }
 
     render() {
-      let {orgId, projectId, queryCount, queryMaxCount, onSavedSearchSelect} = this.props;
-      let hasProject = !!projectId;
+      const {
+        orgId,
+        projectId,
+        queryCount,
+        queryMaxCount,
+        onSavedSearchSelect,
+      } = this.props;
+      const hasProject = !!projectId;
 
-      let children = this.props.savedSearchList.map(search => {
+      const children = this.props.savedSearchList.map(search => {
         return (
           <StyledMenuItem onSelect={() => onSavedSearchSelect(search)} key={search.id}>
             <span>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 362c7caf94..aed24fecc9 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -63,7 +63,7 @@ class SearchBar extends React.Component {
    * with data when ready
    */
   getTagValues = (tag, query) => {
-    let {api, orgId, projectId} = this.props;
+    const {api, orgId, projectId} = this.props;
 
     return fetchTagValues(api, tag.key, orgId, projectId, query).then(
       values => values.map(({value}) => value),
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index c2b7c9591a..397ec02498 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -22,11 +22,11 @@ class SearchDropdown extends React.PureComponent {
   };
 
   renderDescription = item => {
-    let searchSubstring = this.props.searchSubstring;
+    const searchSubstring = this.props.searchSubstring;
     if (!searchSubstring) return item.desc;
 
-    let text = item.desc;
-    let idx = text.toLowerCase().indexOf(searchSubstring.toLowerCase());
+    const text = item.desc;
+    const idx = text.toLowerCase().indexOf(searchSubstring.toLowerCase());
 
     if (idx === -1) return item.desc;
 
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 146ceeba59..2379efc43b 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -7,7 +7,7 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import {queryToObj, objToQuery} from 'app/utils/stream';
 import {t} from 'app/locale';
 
-let TEXT_FILTER_DEBOUNCE_IN_MS = 300;
+const TEXT_FILTER_DEBOUNCE_IN_MS = 300;
 
 const StreamSidebar = createReactClass({
   displayName: 'StreamSidebar',
@@ -31,7 +31,7 @@ const StreamSidebar = createReactClass({
   },
 
   getInitialState() {
-    let queryObj = queryToObj(this.props.query);
+    const queryObj = queryToObj(this.props.query);
     return {
       queryObj,
       textFilter: queryObj.__text,
@@ -41,10 +41,10 @@ const StreamSidebar = createReactClass({
   componentWillReceiveProps(nextProps) {
     // If query was updated by another source (e.g. SearchBar),
     // clobber state of sidebar with new query.
-    let query = objToQuery(this.state.queryObj);
+    const query = objToQuery(this.state.queryObj);
 
     if (!_.isEqual(nextProps.query, query)) {
-      let queryObj = queryToObj(nextProps.query);
+      const queryObj = queryToObj(nextProps.query);
       this.setState({
         queryObj,
         textFilter: queryObj.__text,
@@ -53,7 +53,7 @@ const StreamSidebar = createReactClass({
   },
 
   onSelectTag(tag, value) {
-    let newQuery = {...this.state.queryObj};
+    const newQuery = {...this.state.queryObj};
     if (value) newQuery[tag.key] = value;
     else delete newQuery[tag.key];
 
@@ -81,7 +81,7 @@ const StreamSidebar = createReactClass({
   onTextFilterSubmit(evt) {
     evt && evt.preventDefault();
 
-    let newQueryObj = {
+    const newQueryObj = {
       ...this.state.queryObj,
       __text: this.state.textFilter,
     };
@@ -95,7 +95,7 @@ const StreamSidebar = createReactClass({
   },
 
   onQueryChange() {
-    let query = objToQuery(this.state.queryObj);
+    const query = objToQuery(this.state.queryObj);
     this.props.onQueryChange && this.props.onQueryChange(query);
   },
 
@@ -109,7 +109,7 @@ const StreamSidebar = createReactClass({
   },
 
   render() {
-    let {loading, orgId, projectId, tags} = this.props;
+    const {loading, orgId, projectId, tags} = this.props;
     return (
       <div className="stream-sidebar">
         {loading ? (
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
index 648740f575..471d940eaf 100644
--- a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
@@ -57,7 +57,7 @@ class SortOptions extends React.PureComponent {
   };
 
   render() {
-    let dropdownTitle = (
+    const dropdownTitle = (
       <span>
         <strong>{t('Sort by')}:</strong>
         &nbsp; {this.getSortLabel(this.state.sortKey)}
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 4ab7d6c4b2..2fe60ba5c5 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -55,19 +55,19 @@ const Stream = createReactClass({
   mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ApiMixin, ProjectState],
 
   getInitialState() {
-    let searchId = this.props.params.searchId || null;
-    let project = this.getProject();
-    let realtimeActiveCookie = Cookies.get('realtimeActive');
-    let realtimeActive =
+    const searchId = this.props.params.searchId || null;
+    const project = this.getProject();
+    const realtimeActiveCookie = Cookies.get('realtimeActive');
+    const realtimeActive =
       typeof realtimeActiveCookie === 'undefined'
         ? project && !project.firstEvent
         : realtimeActiveCookie === 'true';
 
-    let currentQuery = this.props.location.query || {};
-    let sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
+    const currentQuery = this.props.location.query || {};
+    const sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
 
-    let hasQuery = 'query' in currentQuery;
-    let statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
+    const hasQuery = 'query' in currentQuery;
+    const statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
       ? currentQuery.statsPeriod
       : DEFAULT_STATS_PERIOD;
 
@@ -119,18 +119,18 @@ const Stream = createReactClass({
 
     // you cannot apply both a query and a saved search (our routes do not
     // support it), so the searchId takes priority
-    let nextSearchId = nextProps.params.searchId;
+    const nextSearchId = nextProps.params.searchId;
 
-    let searchIdChanged = this.state.isDefaultSearch
+    const searchIdChanged = this.state.isDefaultSearch
       ? nextSearchId !== undefined
       : nextSearchId !== this.props.params.searchId;
 
     // We are using qs.parse with location.search since this.props.location.query
     // returns the same value as nextProps.location.query
-    let currentSearchTerm = qs.parse(this.props.location.search);
-    let nextSearchTerm = qs.parse(nextProps.location.search);
+    const currentSearchTerm = qs.parse(this.props.location.search);
+    const nextSearchTerm = qs.parse(nextProps.location.search);
 
-    let searchTermChanged = !isEqual(
+    const searchTermChanged = !isEqual(
       omit(currentSearchTerm, 'environment'),
       omit(nextSearchTerm, 'environment')
     );
@@ -172,7 +172,7 @@ const Stream = createReactClass({
           savedSearchList: data,
           loading: false,
         };
-        let needsData = this.state.loading;
+        const needsData = this.state.loading;
         if (searchId) {
           const match = data.find(search => search.id === searchId);
 
@@ -229,7 +229,7 @@ const Stream = createReactClass({
   },
 
   onSavedSearchCreate(data) {
-    let savedSearchList = this.state.savedSearchList;
+    const savedSearchList = this.state.savedSearchList;
     savedSearchList.push(data);
 
     this.setState(
@@ -246,19 +246,21 @@ const Stream = createReactClass({
   },
 
   getQueryState(props) {
-    let currentQuery = props.location.query || {};
+    const currentQuery = props.location.query || {};
 
-    let hasQuery = 'query' in currentQuery;
+    const hasQuery = 'query' in currentQuery;
 
-    let searchId = hasQuery ? null : props.params.searchId || this.state.searchId || null;
+    const searchId = hasQuery
+      ? null
+      : props.params.searchId || this.state.searchId || null;
 
-    let sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
+    const sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
 
-    let statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
+    const statsPeriod = STATS_PERIODS.has(currentQuery.statsPeriod)
       ? currentQuery.statsPeriod
       : DEFAULT_STATS_PERIOD;
 
-    let newState = {
+    const newState = {
       sort,
       statsPeriod,
       query: hasQuery ? currentQuery.query : '',
@@ -267,7 +269,7 @@ const Stream = createReactClass({
     };
 
     if (searchId) {
-      let searchResult = this.state.savedSearchList.find(
+      const searchResult = this.state.savedSearchList.find(
         search => search.id === searchId
       );
       if (searchResult) {
@@ -288,7 +290,7 @@ const Stream = createReactClass({
         newState.searchId = null;
       }
     } else if (!hasQuery) {
-      let defaultResult = this.state.savedSearchList.find(search => search.isDefault);
+      const defaultResult = this.state.savedSearchList.find(search => search.isDefault);
       if (defaultResult) {
         newState.isDefaultSearch = true;
         newState.searchId = defaultResult.id;
@@ -303,7 +305,7 @@ const Stream = createReactClass({
 
   hasQuery(props) {
     props = props || this.props;
-    let currentQuery = props.location.query || {};
+    const currentQuery = props.location.query || {};
     return 'query' in currentQuery;
   },
 
@@ -316,14 +318,14 @@ const Stream = createReactClass({
       error: false,
     });
 
-    let url = this.getGroupListEndpoint();
+    const url = this.getGroupListEndpoint();
 
     // Remove leading and trailing whitespace
-    let query = queryString.formatQueryString(this.state.query);
+    const query = queryString.formatQueryString(this.state.query);
 
-    let {environment} = this.state;
+    const {environment} = this.state;
 
-    let requestParams = {
+    const requestParams = {
       query,
       limit: MAX_ITEMS,
       sort: this.state.sort,
@@ -341,7 +343,7 @@ const Stream = createReactClass({
       requestParams.environment = environment.name;
     }
 
-    let currentQuery = this.props.location.query || {};
+    const currentQuery = this.props.location.query || {};
     if ('cursor' in currentQuery) {
       requestParams.cursor = currentQuery.cursor;
     }
@@ -362,7 +364,7 @@ const Stream = createReactClass({
         // different projects.
         if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
           if (data && data[0].matchingEventId) {
-            let {project, id, matchingEventId, matchingEventEnvironment} = data[0];
+            const {project, id, matchingEventId, matchingEventEnvironment} = data[0];
             let redirect = `/${this.props.params
               .orgId}/${project.slug}/issues/${id}/events/${matchingEventId}/`;
             // Also direct to the environment of this specific event if this
@@ -380,8 +382,8 @@ const Stream = createReactClass({
 
         this._streamManager.push(data);
 
-        let queryCount = jqXHR.getResponseHeader('X-Hits');
-        let queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');
+        const queryCount = jqXHR.getResponseHeader('X-Hits');
+        const queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');
 
         return void this.setState({
           error: false,
@@ -412,7 +414,7 @@ const Stream = createReactClass({
     if (!this.state.pageLinks) return;
 
     // Only resume polling if we're on the first page of results
-    let links = parseLinkHeader(this.state.pageLinks);
+    const links = parseLinkHeader(this.state.pageLinks);
     if (links && !links.previous.results && this.state.realtimeActive) {
       this._poller.setEndpoint(links.previous.href);
       this._poller.enable();
@@ -420,7 +422,7 @@ const Stream = createReactClass({
   },
 
   getGroupListEndpoint() {
-    let params = this.props.params;
+    const params = this.props.params;
 
     return '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
   },
@@ -456,7 +458,7 @@ const Stream = createReactClass({
   },
 
   onGroupChange() {
-    let groupIds = this._streamManager.getAllItems().map(item => item.id);
+    const groupIds = this._streamManager.getAllItems().map(item => item.id);
     if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
       this.setState({
         groupIds,
@@ -490,7 +492,7 @@ const Stream = createReactClass({
 
     // Ignore saved searches
     if (this.state.savedSearchList.map(s => s.query == this.state.query).length > 0) {
-      let {orgId, projectId} = this.props.params;
+      const {orgId, projectId} = this.props.params;
       analytics('issue.search', {
         query: this.state.query,
         organization_id: orgId,
@@ -509,7 +511,7 @@ const Stream = createReactClass({
   },
 
   onSidebarToggle() {
-    let org = this.getOrganization();
+    const org = this.getOrganization();
     this.setState({
       isSidebarVisible: !this.state.isSidebarVisible,
     });
@@ -524,12 +526,12 @@ const Stream = createReactClass({
   allResultsVisible() {
     if (!this.state.pageLinks) return false;
 
-    let links = parseLinkHeader(this.state.pageLinks);
+    const links = parseLinkHeader(this.state.pageLinks);
     return links && !links.previous.results && !links.next.results;
   },
 
   transitionTo() {
-    let queryParams = {};
+    const queryParams = {};
 
     if (this.props.location.query.environment) {
       queryParams.environment = this.props.location.query.environment;
@@ -547,9 +549,9 @@ const Stream = createReactClass({
       queryParams.statsPeriod = this.state.statsPeriod;
     }
 
-    let params = this.props.params;
+    const params = this.props.params;
 
-    let path = this.state.searchId
+    const path = this.state.searchId
       ? `/${params.orgId}/${params.projectId}/searches/${this.state.searchId}/`
       : `/${params.orgId}/${params.projectId}/`;
     browserHistory.push({
@@ -560,15 +562,15 @@ const Stream = createReactClass({
 
   renderGroupNodes(ids, statsPeriod) {
     // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue
-    let userDateJoined = new Date(ConfigStore.get('user').dateJoined);
-    let dateCutoff = new Date();
+    const userDateJoined = new Date(ConfigStore.get('user').dateJoined);
+    const dateCutoff = new Date();
     dateCutoff.setDate(dateCutoff.getDate() - 30);
 
-    let topIssue = ids[0];
+    const topIssue = ids[0];
 
-    let {orgId} = this.props.params;
-    let groupNodes = ids.map(id => {
-      let hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
+    const {orgId} = this.props.params;
+    const groupNodes = ids.map(id => {
+      const hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
       return (
         <StreamGroup
           key={id}
@@ -584,9 +586,9 @@ const Stream = createReactClass({
   },
 
   renderAwaitingEvents() {
-    let org = this.getOrganization();
-    let project = this.getProject();
-    let sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';
+    const org = this.getOrganization();
+    const project = this.getProject();
+    const sampleIssueId = this.state.groupIds.length > 0 ? this.state.groupIds[0] : '';
     return (
       <ErrorRobot
         org={org}
@@ -618,7 +620,7 @@ const Stream = createReactClass({
 
   renderStreamBody() {
     let body;
-    let project = this.getProject();
+    const project = this.getProject();
 
     if (project.firstEvent) {
       ConfigStore.set('sentFirstEvent', project.firstEvent);
@@ -643,16 +645,16 @@ const Stream = createReactClass({
     if (this.state.loading) {
       return this.renderLoading();
     }
-    let params = this.props.params;
-    let classes = ['stream-row'];
+    const params = this.props.params;
+    const classes = ['stream-row'];
     if (this.state.isSidebarVisible) classes.push('show-sidebar');
-    let {orgId, projectId} = this.props.params;
-    let {organization} = this.context;
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
 
-    let searchId = this.state.searchId;
-    let access = this.getAccess();
-    let projectFeatures = this.getProjectFeatures();
-    let project = this.getProject();
+    const searchId = this.state.searchId;
+    const access = this.getAccess();
+    const projectFeatures = this.getProjectFeatures();
+    const project = this.getProject();
 
     return (
       <div className={classNames(classes)}>
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 77d9e49120..76ab01cb7f 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -56,8 +56,8 @@ class StreamTagFilter extends React.Component {
   }
 
   handleLoadOptions = () => {
-    let {orgId, projectId, tag} = this.props;
-    let {textValue} = this.state;
+    const {orgId, projectId, tag} = this.props;
+    const {textValue} = this.state;
     if (tag.isInput || tag.predefined) return;
     if (!this.api) return;
 
@@ -85,7 +85,7 @@ class StreamTagFilter extends React.Component {
   };
 
   handleChangeInput = e => {
-    let value = e.target.value;
+    const value = e.target.value;
     this.setState({
       textValue: value,
     });
@@ -108,7 +108,7 @@ class StreamTagFilter extends React.Component {
   };
 
   handleChangeSelect = valueObj => {
-    let value = valueObj ? valueObj.value : null;
+    const value = valueObj ? valueObj.value : null;
     this.handleChange(value);
   };
 
@@ -122,7 +122,7 @@ class StreamTagFilter extends React.Component {
   };
 
   handleChange = value => {
-    let {onSelect, tag} = this.props;
+    const {onSelect, tag} = this.props;
 
     this.setState(
       {
@@ -135,7 +135,7 @@ class StreamTagFilter extends React.Component {
   };
 
   render() {
-    let {tag} = this.props;
+    const {tag} = this.props;
     return (
       <div className="stream-tag-filter">
         <h6 className="nav-header">{tag.key}</h6>
diff --git a/src/sentry/static/sentry/app/views/teamCreate.jsx b/src/sentry/static/sentry/app/views/teamCreate.jsx
index 441d948bdc..0d0cf435aa 100644
--- a/src/sentry/static/sentry/app/views/teamCreate.jsx
+++ b/src/sentry/static/sentry/app/views/teamCreate.jsx
@@ -21,8 +21,8 @@ class TeamCreate extends AsyncView {
   }
 
   handleSubmitSuccess = data => {
-    let {orgId} = this.props.params;
-    let redirectUrl = `/settings/${orgId}/teams/${data.slug}/`;
+    const {orgId} = this.props.params;
+    const redirectUrl = `/settings/${orgId}/teams/${data.slug}/`;
     this.props.router.push(redirectUrl);
   };
 
diff --git a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
index 7154068852..b6a99f9b56 100644
--- a/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/userFeedback/projectUserFeedback.jsx
@@ -74,9 +74,9 @@ const ProjectUserFeedback = createReactClass({
   },
 
   getQueryStringState(props) {
-    let q = props.location.query;
-    let status = 'status' in q ? q.status : this.props.defaultStatus;
-    let query = 'query' in q ? q.query : this.props.defaultQuery;
+    const q = props.location.query;
+    const status = 'status' in q ? q.status : this.props.defaultStatus;
+    const query = 'query' in q ? q.query : this.props.defaultQuery;
 
     return {
       query,
@@ -90,9 +90,9 @@ const ProjectUserFeedback = createReactClass({
       error: false,
     });
 
-    let params = this.props.params;
+    const params = this.props.params;
 
-    let query = {
+    const query = {
       ...this.props.location.query,
       per_page: 50,
       query: this.state.query,
@@ -108,7 +108,7 @@ const ProjectUserFeedback = createReactClass({
     this.api.request(`/projects/${params.orgId}/${params.projectId}/user-reports/`, {
       query,
       success: (data, _, jqXHR) => {
-        let issues = data.map(r => r.issue);
+        const issues = data.map(r => r.issue);
         GroupStore.add(issues);
         this.setState({
           error: false,
@@ -127,7 +127,7 @@ const ProjectUserFeedback = createReactClass({
   },
 
   getUserFeedbackUrl() {
-    let params = this.props.params;
+    const params = this.props.params;
 
     return `/${params.orgId}/${params.projectId}/settings/user-feedback/`;
   },
diff --git a/tests/js/fixtures/eventIdQueryResult.js b/tests/js/fixtures/eventIdQueryResult.js
index 361d7d38aa..331e415c55 100644
--- a/tests/js/fixtures/eventIdQueryResult.js
+++ b/tests/js/fixtures/eventIdQueryResult.js
@@ -1,7 +1,7 @@
 import {Event} from './event';
 
 export function EventIdQueryResult(params = {}) {
-  let event = Event({
+  const event = Event({
     metadata: {
       type: 'event type',
       value: 'event description',
diff --git a/tests/js/fixtures/group.js b/tests/js/fixtures/group.js
index 54f6263110..c49fdad396 100644
--- a/tests/js/fixtures/group.js
+++ b/tests/js/fixtures/group.js
@@ -1,7 +1,7 @@
 import {Project} from './project';
 
 export function Group(params = {}) {
-  let project = Project();
+  const project = Project();
   return {
     id: '1',
     stats: {
diff --git a/tests/js/fixtures/shortIdQueryResult.js b/tests/js/fixtures/shortIdQueryResult.js
index c0e3dd3732..d131755c57 100644
--- a/tests/js/fixtures/shortIdQueryResult.js
+++ b/tests/js/fixtures/shortIdQueryResult.js
@@ -1,7 +1,7 @@
 import {Group} from './group';
 
 export function ShortIdQueryResult(params = {}) {
-  let group = Group({
+  const group = Group({
     metadata: {
       type: 'group type',
       value: 'group description',
diff --git a/tests/js/helpers/charts.jsx b/tests/js/helpers/charts.jsx
index 26d690dc9d..2351e1d392 100644
--- a/tests/js/helpers/charts.jsx
+++ b/tests/js/helpers/charts.jsx
@@ -1,4 +1,4 @@
-let data = [
+const data = [
   [1543276800000, 0],
   [1543363200000, 0],
   [1543449600000, 36],
@@ -8,7 +8,7 @@ let data = [
   [1543795200000, 104],
   [1543881600000, 13],
 ];
-let model = {
+const model = {
   xAxis: [
     {
       rangeStart: 1543449600000,
diff --git a/tests/js/helpers/mockRouterPush.jsx b/tests/js/helpers/mockRouterPush.jsx
index 69a5422b0c..7fdb006c27 100644
--- a/tests/js/helpers/mockRouterPush.jsx
+++ b/tests/js/helpers/mockRouterPush.jsx
@@ -9,7 +9,7 @@ export function mockRouterPush(wrapper, router) {
       query,
       search: qs.stringify(query),
     };
-    let newRouter = {
+    const newRouter = {
       router: {
         ...router,
         location,
diff --git a/tests/js/helpers/select.js b/tests/js/helpers/select.js
index a97a0e554a..0f1d28a462 100644
--- a/tests/js/helpers/select.js
+++ b/tests/js/helpers/select.js
@@ -5,12 +5,12 @@ export function getSelector(options = {}) {
     selector = `[name="${options.name}"]`;
   }
 
-  let field = `Select${options.control ? 'Control' : 'Field'}`;
+  const field = `Select${options.control ? 'Control' : 'Field'}`;
   return `${field}${selector}`;
 }
 
 export function openMenu(wrapper, options = {}) {
-  let selector = getSelector(options);
+  const selector = getSelector(options);
   wrapper.find(`${selector} input[role="combobox"]`).simulate('focus');
   wrapper.find(`${selector} .Select-control`).simulate('mouseDown', {button: 0});
 
@@ -22,8 +22,8 @@ export function clearValue(wrapper) {
 }
 
 export function findOption(wrapper, {value, label} = {}, options) {
-  let selector = getSelector(options);
-  let valueSelector = !!value ? 'value' : 'label';
+  const selector = getSelector(options);
+  const valueSelector = !!value ? 'value' : 'label';
 
   return wrapper
     .find(`${selector} Option`)
diff --git a/tests/js/helpers/stubReactComponent.jsx b/tests/js/helpers/stubReactComponent.jsx
index 735c0f067e..d2f3bff3b3 100644
--- a/tests/js/helpers/stubReactComponent.jsx
+++ b/tests/js/helpers/stubReactComponent.jsx
@@ -2,8 +2,8 @@
 // https://gist.github.com/TimothyRHuertas/d7d06313c5411fe242bb
 import React from 'react';
 
-let divFactory = React.createFactory('div');
-let originalCreateElement = React.createElement;
+const divFactory = React.createFactory('div');
+const originalCreateElement = React.createElement;
 
 // eslint-disable-next-line import/no-anonymous-default-export
 export default function(stubber, stubbedComponents) {
@@ -12,8 +12,8 @@ export default function(stubber, stubbedComponents) {
     if (stubbedComponents.indexOf(component) === -1) {
       return originalCreateElement.apply(React, arguments);
     } else {
-      let componentFactory = React.createFactory(component);
-      let displayName = componentFactory(props).type.displayName;
+      const componentFactory = React.createFactory(component);
+      const displayName = componentFactory(props).type.displayName;
 
       if (displayName) {
         if (props.className) {
diff --git a/tests/js/spec/api.spec.jsx b/tests/js/spec/api.spec.jsx
index 8da318c5ee..5da27e890c 100644
--- a/tests/js/spec/api.spec.jsx
+++ b/tests/js/spec/api.spec.jsx
@@ -74,10 +74,10 @@ describe('api', function() {
 
     describe('cancel()', function() {
       it('should abort any open XHR requests', function() {
-        let req1 = new Request({
+        const req1 = new Request({
           abort: sinon.stub(),
         });
-        let req2 = new Request({
+        const req2 = new Request({
           abort: sinon.stub(),
         });
 
@@ -95,7 +95,7 @@ describe('api', function() {
   });
 
   it('does not call success callback if 302 was returned because of a project slug change', function() {
-    let successCb = jest.fn();
+    const successCb = jest.fn();
     api.activeRequests = {id: {alive: true}};
     api.wrapCallback('id', successCb)({
       responseJSON: {
@@ -113,8 +113,8 @@ describe('api', function() {
 
   it('handles error callback', function() {
     sandbox.stub(api, 'wrapCallback', (id, func) => func);
-    let errorCb = jest.fn();
-    let args = ['test', true, 1];
+    const errorCb = jest.fn();
+    const args = ['test', true, 1];
     api.handleRequestError(
       {
         id: 'test',
@@ -158,7 +158,7 @@ describe('api', function() {
       });
 
       expect(api._wrapRequest.calledOnce).toBeTruthy();
-      let requestArgs = api._wrapRequest.getCall(0).args[1];
+      const requestArgs = api._wrapRequest.getCall(0).args[1];
       expect(requestArgs.query).toEqual({id: [1, 2, 3]});
     });
 
@@ -172,7 +172,7 @@ describe('api', function() {
       });
 
       expect(api._wrapRequest.calledOnce).toBeTruthy();
-      let requestArgs = api._wrapRequest.getCall(0).args[1];
+      const requestArgs = api._wrapRequest.getCall(0).args[1];
       expect(requestArgs.query).toEqual({query: 'is:resolved'});
     });
   });
@@ -195,7 +195,7 @@ describe('api', function() {
       });
 
       expect(api._wrapRequest.calledOnce).toBeTruthy();
-      let requestArgs = api._wrapRequest.getCall(0).args[1];
+      const requestArgs = api._wrapRequest.getCall(0).args[1];
       expect(requestArgs.query).toEqual({id: [1, 2, 3]});
     });
 
@@ -209,7 +209,7 @@ describe('api', function() {
       });
 
       expect(api._wrapRequest.calledOnce).toBeTruthy();
-      let requestArgs = api._wrapRequest.getCall(0).args[1];
+      const requestArgs = api._wrapRequest.getCall(0).args[1];
       expect(requestArgs.query).toEqual({query: 'is:resolved'});
     });
   });
diff --git a/tests/js/spec/components/acl/access.spec.jsx b/tests/js/spec/components/acl/access.spec.jsx
index 49bc2a1254..cc1ff21cac 100644
--- a/tests/js/spec/components/acl/access.spec.jsx
+++ b/tests/js/spec/components/acl/access.spec.jsx
@@ -11,7 +11,7 @@ describe('Access', function() {
   const routerContext = TestStubs.routerContext([{organization}]);
 
   describe('as render prop', function() {
-    let childrenMock = jest.fn().mockReturnValue(null);
+    const childrenMock = jest.fn().mockReturnValue(null);
     beforeEach(function() {
       childrenMock.mockClear();
     });
diff --git a/tests/js/spec/components/acl/feature.spec.jsx b/tests/js/spec/components/acl/feature.spec.jsx
index efe9572282..9dfc7fb0a5 100644
--- a/tests/js/spec/components/acl/feature.spec.jsx
+++ b/tests/js/spec/components/acl/feature.spec.jsx
@@ -20,7 +20,7 @@ describe('Feature', function() {
   ]);
 
   describe('as render prop', function() {
-    let childrenMock = jest.fn().mockReturnValue(null);
+    const childrenMock = jest.fn().mockReturnValue(null);
     beforeEach(function() {
       childrenMock.mockClear();
     });
diff --git a/tests/js/spec/components/actions/ignore.spec.jsx b/tests/js/spec/components/actions/ignore.spec.jsx
index 7a71cdd3c6..51767324a4 100644
--- a/tests/js/spec/components/actions/ignore.spec.jsx
+++ b/tests/js/spec/components/actions/ignore.spec.jsx
@@ -4,10 +4,10 @@ import $ from 'jquery';
 import IgnoreActions from 'app/components/actions/ignore';
 
 describe('IgnoreActions', function() {
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
   describe('disabled', function() {
     let component, button;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
 
     beforeEach(function() {
       component = mount(<IgnoreActions onUpdate={spy} disabled={true} />, routerContext);
@@ -26,13 +26,13 @@ describe('IgnoreActions', function() {
 
   describe('ignored', function() {
     let component;
-    let spy = sinon.spy();
+    const spy = sinon.spy();
     beforeEach(function() {
       component = mount(<IgnoreActions onUpdate={spy} isIgnored={true} />, routerContext);
     });
 
     it('displays ignored view', function() {
-      let button = component.find('a.btn.active');
+      const button = component.find('a.btn.active');
       expect(button).toHaveLength(1);
       expect(button.text()).toBe('');
     });
@@ -45,7 +45,7 @@ describe('IgnoreActions', function() {
 
   describe('without confirmation', function() {
     let component;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
 
     beforeEach(function() {
       component = mount(<IgnoreActions onUpdate={spy} />, routerContext);
@@ -56,7 +56,7 @@ describe('IgnoreActions', function() {
     });
 
     it('calls spy with ignore details when clicked', function() {
-      let button = component.find('a.btn.btn-default').first();
+      const button = component.find('a.btn.btn-default').first();
       button.simulate('click');
       expect(spy.calledOnce).toBe(true);
       expect(spy.calledWith({status: 'ignored'})).toBe(true);
@@ -65,7 +65,7 @@ describe('IgnoreActions', function() {
 
   describe('with confirmation step', function() {
     let component, button;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
 
     beforeEach(function() {
       component = mount(
@@ -82,7 +82,7 @@ describe('IgnoreActions', function() {
     it('displays confirmation modal with message provided', function() {
       button.simulate('click');
 
-      let modal = $(document.body).find('.modal');
+      const modal = $(document.body).find('.modal');
       expect(modal.text()).toContain('Yoooooo');
       expect(spy.notCalled).toBe(true);
       $(document.body)
diff --git a/tests/js/spec/components/actions/resolve.spec.jsx b/tests/js/spec/components/actions/resolve.spec.jsx
index 84721cf388..66c537da13 100644
--- a/tests/js/spec/components/actions/resolve.spec.jsx
+++ b/tests/js/spec/components/actions/resolve.spec.jsx
@@ -6,7 +6,7 @@ import ResolveActions from 'app/components/actions/resolve';
 describe('ResolveActions', function() {
   describe('disabled', function() {
     let component, button;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
 
     beforeEach(function() {
       component = mount(
@@ -34,7 +34,7 @@ describe('ResolveActions', function() {
 
   describe('resolved', function() {
     let component;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
     beforeEach(function() {
       component = mount(
         <ResolveActions
@@ -50,7 +50,7 @@ describe('ResolveActions', function() {
     });
 
     it('displays resolved view', function() {
-      let button = component.find('a.btn.active');
+      const button = component.find('a.btn.active');
       expect(button).toHaveLength(1);
       expect(button.text()).toBe('');
     });
@@ -63,8 +63,8 @@ describe('ResolveActions', function() {
 
   describe('auto resolved', function() {
     it('cannot be unresolved manually', function() {
-      let spy = sinon.stub();
-      let component = mount(
+      const spy = sinon.stub();
+      const component = mount(
         <ResolveActions
           onUpdate={spy}
           disabled={true}
@@ -84,7 +84,7 @@ describe('ResolveActions', function() {
 
   describe('without confirmation', function() {
     let component;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
     beforeEach(function() {
       component = mount(
         <ResolveActions
@@ -102,7 +102,7 @@ describe('ResolveActions', function() {
     });
 
     it('calls spy with resolved status when clicked', function() {
-      let button = component.find('a.btn.btn-default').first();
+      const button = component.find('a.btn.btn-default').first();
       button.simulate('click');
       expect(spy.calledOnce).toBe(true);
       expect(spy.calledWith({status: 'resolved'})).toBe(true);
@@ -111,7 +111,7 @@ describe('ResolveActions', function() {
 
   describe('with confirmation step', function() {
     let component, button;
-    let spy = sinon.stub();
+    const spy = sinon.stub();
 
     beforeEach(function() {
       component = mount(
@@ -135,7 +135,7 @@ describe('ResolveActions', function() {
     it('displays confirmation modal with message provided', function() {
       button.simulate('click');
 
-      let modal = $(document.body).find('.modal');
+      const modal = $(document.body).find('.modal');
       expect(modal.text()).toContain('Are you sure???');
       expect(spy.notCalled).toBe(true);
       $(document.body)
@@ -147,12 +147,12 @@ describe('ResolveActions', function() {
   });
 
   it('can resolve in "another version"', async function() {
-    let onUpdate = jest.fn();
+    const onUpdate = jest.fn();
     MockApiClient.addMockResponse({
       url: '/projects/org-slug/project-slug/releases/',
       body: [TestStubs.Release()],
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <ResolveActions
         hasRelease
         orgId="org-slug"
diff --git a/tests/js/spec/components/actorAvatar.spec.jsx b/tests/js/spec/components/actorAvatar.spec.jsx
index fc7a59a64b..9af681aa10 100644
--- a/tests/js/spec/components/actorAvatar.spec.jsx
+++ b/tests/js/spec/components/actorAvatar.spec.jsx
@@ -34,7 +34,7 @@ describe('Avatar', function() {
 
   describe('render()', function() {
     it('should show a gravatar when actor type is a user', function() {
-      let avatar = shallow(
+      const avatar = shallow(
         <ActorAvatar
           actor={{
             id: '1',
@@ -47,7 +47,7 @@ describe('Avatar', function() {
     });
 
     it('should show a gravatar when actor type is a team', function() {
-      let avatar = shallow(
+      const avatar = shallow(
         <ActorAvatar
           actor={{
             id: '3',
@@ -62,7 +62,7 @@ describe('Avatar', function() {
     it('should return null when actor type is a unknown', function() {
       window.console.error = jest.fn();
 
-      let avatar = mount(
+      const avatar = mount(
         <ActorAvatar
           actor={{
             id: '3',
diff --git a/tests/js/spec/components/alertLink.spec.jsx b/tests/js/spec/components/alertLink.spec.jsx
index ce2149a291..b590404806 100644
--- a/tests/js/spec/components/alertLink.spec.jsx
+++ b/tests/js/spec/components/alertLink.spec.jsx
@@ -4,7 +4,7 @@ import AlertLink from 'app/components/alertLink';
 
 describe('AlertLink', function() {
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <AlertLink to="/settings/accounts/notifications">
         This is an external link button
       </AlertLink>
@@ -13,7 +13,7 @@ describe('AlertLink', function() {
   });
 
   it('renders with icon', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <AlertLink to="/settings/accounts/notifications" icon="icon-mail">
         This is an external link button
       </AlertLink>
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index 8f3cd8f848..a9b9274bc2 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -101,7 +101,7 @@ describe('AssigneeSelector', function() {
       expect(assigneeSelector.find('UserAvatar')).toHaveLength(2);
       expect(assigneeSelector.find('TeamAvatar')).toHaveLength(1);
 
-      let names = assigneeSelector
+      const names = assigneeSelector
         .find('MenuItemWrapper Label Highlight')
         .map(el => el.text());
       expect(names).toEqual([`#${TEAM_1.slug}`, USER_2.name, USER_3.name]);
@@ -267,7 +267,7 @@ describe('AssigneeSelector', function() {
   });
 
   it('shows invite member button', async function() {
-    let routerContext = TestStubs.routerContext();
+    const routerContext = TestStubs.routerContext();
 
     openMenu();
     MemberListStore.loadInitialData([USER_1, USER_2]);
diff --git a/tests/js/spec/components/assistant/guideAnchor.spec.jsx b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
index fcbf8c3361..aeeb9579b1 100644
--- a/tests/js/spec/components/assistant/guideAnchor.spec.jsx
+++ b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
@@ -4,7 +4,7 @@ import GuideAnchor from 'app/components/assistant/guideAnchor';
 
 describe('GuideAnchor', function() {
   let sandbox;
-  let data = {
+  const data = {
     currentGuide: {steps: [{message: 'abc', target: 'target 1', title: 'title 1'}]},
     currentStep: 1,
     anchors: null,
@@ -21,7 +21,7 @@ describe('GuideAnchor', function() {
   });
 
   it('renders', function() {
-    let component = shallow(<GuideAnchor target="target 1" type="text" />);
+    const component = shallow(<GuideAnchor target="target 1" type="text" />);
     expect(component).toMatchSnapshot();
   });
 
diff --git a/tests/js/spec/components/assistant/guideDrawer.spec.jsx b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
index 3af03273ee..30dcecc2a8 100644
--- a/tests/js/spec/components/assistant/guideDrawer.spec.jsx
+++ b/tests/js/spec/components/assistant/guideDrawer.spec.jsx
@@ -4,7 +4,7 @@ import {GuideDrawer} from 'app/components/assistant/guideDrawer';
 import {shallow} from 'enzyme';
 
 describe('GuideDrawer', function() {
-  let guides = [
+  const guides = [
     {
       cue: 'Click here for a tour of the issue page',
       id: 1,
diff --git a/tests/js/spec/components/asyncComponent.spec.jsx b/tests/js/spec/components/asyncComponent.spec.jsx
index 4b0ae9d9a8..68dbfb7ef2 100644
--- a/tests/js/spec/components/asyncComponent.spec.jsx
+++ b/tests/js/spec/components/asyncComponent.spec.jsx
@@ -31,7 +31,7 @@ describe('AsyncComponent', function() {
         message: 'hi',
       },
     });
-    let wrapper = shallow(<TestAsyncComponent />);
+    const wrapper = shallow(<TestAsyncComponent />);
     expect(wrapper.find('div')).toHaveLength(1);
     expect(wrapper.find('div').text()).toEqual('hi');
   });
@@ -46,7 +46,7 @@ describe('AsyncComponent', function() {
       },
       statusCode: 400,
     });
-    let wrapper = mount(<TestAsyncComponent />);
+    const wrapper = mount(<TestAsyncComponent />);
     expect(wrapper.find('LoadingError')).toHaveLength(1);
     expect(
       wrapper
diff --git a/tests/js/spec/components/autoComplete.spec.jsx b/tests/js/spec/components/autoComplete.spec.jsx
index c084923e13..b6f5e8bc97 100644
--- a/tests/js/spec/components/autoComplete.spec.jsx
+++ b/tests/js/spec/components/autoComplete.spec.jsx
@@ -23,7 +23,7 @@ describe('AutoComplete', function() {
   let wrapper;
   let input;
   let autoCompleteState = [];
-  let mocks = {
+  const mocks = {
     onSelect: jest.fn(),
     onClose: jest.fn(),
     onOpen: jest.fn(),
@@ -36,7 +36,7 @@ describe('AutoComplete', function() {
     wrapper = mount(
       <AutoComplete {...mocks} itemToString={item => item.name} {...props}>
         {injectedProps => {
-          let {
+          const {
             getRootProps,
             getInputProps,
             getMenuProps,
@@ -150,7 +150,7 @@ describe('AutoComplete', function() {
     });
 
     it('can open and close dropdown menu using injected actions', function() {
-      let [injectedProps] = autoCompleteState;
+      const [injectedProps] = autoCompleteState;
       injectedProps.actions.open();
       expect(wrapper.state('isOpen')).toBe(true);
       expect(mocks.onOpen).toHaveBeenCalledTimes(1);
@@ -367,7 +367,7 @@ describe('AutoComplete', function() {
     });
 
     it('does not open and close dropdown menu using injected actions', function() {
-      let [injectedProps] = autoCompleteState;
+      const [injectedProps] = autoCompleteState;
       injectedProps.actions.open();
       expect(wrapper.state('isOpen')).toBe(true);
       expect(mocks.onOpen).toHaveBeenCalledTimes(1);
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index 76f447a142..524b5ebac2 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -19,24 +19,24 @@ describe('Avatar', function() {
 
   describe('render()', function() {
     it('has `avatar` className', function() {
-      let user = Object.assign({}, USER, {
+      const user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'gravatar',
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e',
         },
       });
-      let avatar = mount(<Avatar user={user} />);
+      const avatar = mount(<Avatar user={user} />);
       expect(avatar.find('span.avatar')).toHaveLength(1);
     });
 
     it('should show a gravatar when avatar type is gravatar', async function() {
-      let user = Object.assign({}, USER, {
+      const user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'gravatar',
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e',
         },
       });
-      let avatar = mount(<Avatar user={user} />);
+      const avatar = mount(<Avatar user={user} />);
 
       expect(avatar.find('BaseAvatar').prop('type')).toBe('gravatar');
 
@@ -50,13 +50,13 @@ describe('Avatar', function() {
     });
 
     it('should show an upload when avatar type is upload', function() {
-      let user = Object.assign({}, USER, {
+      const user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'upload',
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e',
         },
       });
-      let avatar = mount(<Avatar user={user} />);
+      const avatar = mount(<Avatar user={user} />);
       expect(avatar.find('BaseAvatar').prop('type')).toBe('upload');
       expect(avatar.find('BaseAvatar').prop('uploadId')).toBe(
         '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
@@ -67,7 +67,7 @@ describe('Avatar', function() {
     });
 
     it('should show an upload with the correct size (static 120 size)', function() {
-      let user = Object.assign({}, USER, {
+      const user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'upload',
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e',
@@ -95,65 +95,65 @@ describe('Avatar', function() {
     });
 
     it('should not show upload or gravatar when avatar type is letter', function() {
-      let user = Object.assign({}, USER, {
+      const user = Object.assign({}, USER, {
         avatar: {
           avatarType: 'letter_avatar',
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e',
         },
       });
-      let avatar = mount(<Avatar user={user} />);
+      const avatar = mount(<Avatar user={user} />);
       expect(avatar.find('BaseAvatar').prop('type')).toBe('letter_avatar');
     });
 
     it('use letter avatar by default, when no avatar type is set and user has an email address', function() {
-      let avatar = mount(<Avatar user={USER} />);
+      const avatar = mount(<Avatar user={USER} />);
       expect(avatar.find('BaseAvatar').prop('type')).toBe('letter_avatar');
     });
 
     it('should show a gravatar when no avatar type is set and user has an email address', function() {
-      let avatar = mount(<Avatar gravatar user={USER} />);
+      const avatar = mount(<Avatar gravatar user={USER} />);
       expect(avatar.find('BaseAvatar').prop('type')).toBe('gravatar');
     });
 
     it('should not show a gravatar when no avatar type is set and user has no email address', function() {
-      let user = Object.assign({}, USER);
+      const user = Object.assign({}, USER);
       delete user.email;
-      let avatar = mount(<Avatar gravatar user={user} />);
+      const avatar = mount(<Avatar gravatar user={user} />);
 
       expect(avatar.find('BaseAvatar').prop('type')).toBe('letter_avatar');
     });
 
     it('can display a team Avatar', function() {
-      let team = TestStubs.Team({slug: 'test-team_test'});
-      let avatar = mount(<Avatar team={team} />);
+      const team = TestStubs.Team({slug: 'test-team_test'});
+      const avatar = mount(<Avatar team={team} />);
       expect(avatar.find('LetterAvatar').prop('displayName')).toBe('test team test');
       expect(avatar.find('LetterAvatar').prop('identifier')).toBe('test-team_test');
     });
 
     it('can display an organization Avatar', function() {
-      let organization = TestStubs.Organization({slug: 'test-organization'});
-      let avatar = mount(<Avatar organization={organization} />);
+      const organization = TestStubs.Organization({slug: 'test-organization'});
+      const avatar = mount(<Avatar organization={organization} />);
       expect(avatar.find('LetterAvatar').prop('displayName')).toBe('test organization');
       expect(avatar.find('LetterAvatar').prop('identifier')).toBe('test-organization');
     });
 
     it('displays platform list icons for project Avatar', function() {
-      let project = TestStubs.Project({
+      const project = TestStubs.Project({
         platforms: ['python', 'javascript'],
         platform: 'java',
       });
-      let avatar = mount(<Avatar project={project} />);
+      const avatar = mount(<Avatar project={project} />);
       expect(avatar.find('PlatformList').prop('platforms')).toEqual(['java']);
     });
 
     it('displays a fallback platform list for project Avatar using the `platform` specified during onboarding', function() {
-      let project = TestStubs.Project({platform: 'java'});
-      let avatar = mount(<Avatar project={project} />);
+      const project = TestStubs.Project({platform: 'java'});
+      const avatar = mount(<Avatar project={project} />);
       expect(avatar.find('PlatformList').prop('platforms')).toEqual(['java']);
     });
     it('uses onboarding project when platforms is an empty array', function() {
-      let project = TestStubs.Project({platforms: [], platform: 'java'});
-      let avatar = mount(<Avatar project={project} />);
+      const project = TestStubs.Project({platforms: [], platform: 'java'});
+      const avatar = mount(<Avatar project={project} />);
       expect(avatar.find('PlatformList').prop('platforms')).toEqual(['java']);
     });
   });
diff --git a/tests/js/spec/components/avatarCropper.spec.jsx b/tests/js/spec/components/avatarCropper.spec.jsx
index b97a7c1e22..90327f7815 100644
--- a/tests/js/spec/components/avatarCropper.spec.jsx
+++ b/tests/js/spec/components/avatarCropper.spec.jsx
@@ -16,10 +16,10 @@ describe('AvatarCropper', function() {
       'should return a negative diff when yDiff and xDiff ' +
         'are positive (cropper is getting smaller)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffNW(4, 5);
+        const diff = cropper.getDiffNW(4, 5);
         expect(diff).toEqual(-4.5);
       }
     );
@@ -28,10 +28,10 @@ describe('AvatarCropper', function() {
       'should return a positive diff when yDiff and xDiff ' +
         'are negative (cropper is getting bigger)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffNW(-4, -5);
+        const diff = cropper.getDiffNW(-4, -5);
         expect(diff).toEqual(4.5);
       }
     );
@@ -42,10 +42,10 @@ describe('AvatarCropper', function() {
       'should return a positive diff when yDiff is negative and ' +
         'xDiff is positive (cropper is getting bigger)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffNE(-4, 5);
+        const diff = cropper.getDiffNE(-4, 5);
         expect(diff).toEqual(4.5);
       }
     );
@@ -54,10 +54,10 @@ describe('AvatarCropper', function() {
       'should return a negative diff when yDiff is positive and ' +
         'xDiff is negative (cropper is getting smaller)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffNE(4, -5);
+        const diff = cropper.getDiffNE(4, -5);
         expect(diff).toEqual(-4.5);
       }
     );
@@ -68,10 +68,10 @@ describe('AvatarCropper', function() {
       'should return a positive diff when yDiff and ' +
         'xDiff are positive (cropper is getting bigger)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffSE(4, 5);
+        const diff = cropper.getDiffSE(4, 5);
         expect(diff).toEqual(4.5);
       }
     );
@@ -80,10 +80,10 @@ describe('AvatarCropper', function() {
       'should return a negative diff when yDiff and ' +
         'xDiff are negative (cropper is getting smaller)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffSE(-4, -5);
+        const diff = cropper.getDiffSE(-4, -5);
         expect(diff).toEqual(-4.5);
       }
     );
@@ -94,10 +94,10 @@ describe('AvatarCropper', function() {
       'should return a positive diff when yDiff is positive and ' +
         'xDiff is negative (cropper is getting bigger)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffSW(4, -5);
+        const diff = cropper.getDiffSW(4, -5);
         expect(diff).toEqual(4.5);
       }
     );
@@ -106,10 +106,10 @@ describe('AvatarCropper', function() {
       'should return a negative diff when yDiff is negative and' +
         'xDiff is positive (cropper is getting smaller)',
       function() {
-        let cropper = shallow(
+        const cropper = shallow(
           <AvatarCropper model={USER} updateDataUrlState={function() {}} />
         ).instance();
-        let diff = cropper.getDiffSW(-4, 5);
+        const diff = cropper.getDiffSW(-4, 5);
         expect(diff).toEqual(-4.5);
       }
     );
diff --git a/tests/js/spec/components/button.spec.jsx b/tests/js/spec/components/button.spec.jsx
index e7d5a02435..c7c634b8e4 100644
--- a/tests/js/spec/components/button.spec.jsx
+++ b/tests/js/spec/components/button.spec.jsx
@@ -3,10 +3,10 @@ import {mount, shallow} from 'enzyme';
 import Button from 'app/components/button';
 
 describe('Button', function() {
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   it('renders', function() {
-    let component = shallow(
+    const component = shallow(
       <Button priority="primary" size="large">
         Button
       </Button>
@@ -15,12 +15,15 @@ describe('Button', function() {
   });
 
   it('renders react-router link', function() {
-    let component = shallow(<Button to="/some/route">Router Link</Button>, routerContext);
+    const component = shallow(
+      <Button to="/some/route">Router Link</Button>,
+      routerContext
+    );
     expect(component).toMatchSnapshot();
   });
 
   it('renders normal link', function() {
-    let component = shallow(
+    const component = shallow(
       <Button href="/some/relative/url">Normal Link</Button>,
       routerContext
     );
@@ -28,7 +31,7 @@ describe('Button', function() {
   });
 
   it('renders disabled normal link', function() {
-    let component = shallow(
+    const component = shallow(
       <Button href="/some/relative/url">Normal Link</Button>,
       routerContext
     );
@@ -36,16 +39,16 @@ describe('Button', function() {
   });
 
   it('calls `onClick` callback', function() {
-    let spy = jest.fn();
-    let component = mount(<Button onClick={spy} />, routerContext);
+    const spy = jest.fn();
+    const component = mount(<Button onClick={spy} />, routerContext);
     component.simulate('click');
 
     expect(spy).toHaveBeenCalled();
   });
 
   it('does not call `onClick` on disabled buttons', function() {
-    let spy = jest.fn();
-    let component = mount(<Button onClick={spy} disabled />, routerContext);
+    const spy = jest.fn();
+    const component = mount(<Button onClick={spy} disabled />, routerContext);
     component.simulate('click');
 
     expect(spy).not.toHaveBeenCalled();
diff --git a/tests/js/spec/components/charts/chartZoom.spec.jsx b/tests/js/spec/components/charts/chartZoom.spec.jsx
index e916463af3..f4356f16c7 100644
--- a/tests/js/spec/components/charts/chartZoom.spec.jsx
+++ b/tests/js/spec/components/charts/chartZoom.spec.jsx
@@ -5,8 +5,8 @@ import ChartZoom from 'app/components/charts/chartZoom';
 import ConfigStore from 'app/stores/configStore';
 
 describe('ChartZoom', function() {
-  let renderFunc = jest.fn(() => null);
-  let routerContext = TestStubs.routerContext();
+  const renderFunc = jest.fn(() => null);
+  const routerContext = TestStubs.routerContext();
   let axisLabelFormatter;
   let tooltipFormatter;
   const timestamp = 1531094400000;
diff --git a/tests/js/spec/components/charts/panelChart/index.spec.jsx b/tests/js/spec/components/charts/panelChart/index.spec.jsx
index a3d2736c85..90d9237429 100644
--- a/tests/js/spec/components/charts/panelChart/index.spec.jsx
+++ b/tests/js/spec/components/charts/panelChart/index.spec.jsx
@@ -81,7 +81,7 @@ describe('PanelChart', function() {
   });
 
   it('shows legend without a title', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <PanelChart series={SERIES} previousPeriod={PREVIOUS}>
         <div />
       </PanelChart>,
diff --git a/tests/js/spec/components/charts/releaseSeries.spec.jsx b/tests/js/spec/components/charts/releaseSeries.spec.jsx
index d1097acf4b..caa770142c 100644
--- a/tests/js/spec/components/charts/releaseSeries.spec.jsx
+++ b/tests/js/spec/components/charts/releaseSeries.spec.jsx
@@ -30,7 +30,7 @@ describe('ReleaseSeries', function() {
   });
 
   it('fetches releases if no releases passed through props', async function() {
-    let wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
+    const wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
 
     await tick();
     wrapper.update();
@@ -45,7 +45,7 @@ describe('ReleaseSeries', function() {
   });
 
   it('generates an eCharts `markLine` series from releases', async function() {
-    let wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
+    const wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
 
     await tick();
     wrapper.update();
diff --git a/tests/js/spec/components/checkbox.spec.jsx b/tests/js/spec/components/checkbox.spec.jsx
index 8d6e6be477..65d00c756b 100644
--- a/tests/js/spec/components/checkbox.spec.jsx
+++ b/tests/js/spec/components/checkbox.spec.jsx
@@ -5,7 +5,7 @@ import Checkbox from 'app/components/checkbox';
 
 describe('Checkbox', function() {
   it('renders', function() {
-    let component = shallow(<Checkbox />);
+    const component = shallow(<Checkbox />);
 
     expect(toJson(component)).toMatchSnapshot();
   });
diff --git a/tests/js/spec/components/circleIndicator.spec.jsx b/tests/js/spec/components/circleIndicator.spec.jsx
index 33a38ce2e4..4774b8d6dd 100644
--- a/tests/js/spec/components/circleIndicator.spec.jsx
+++ b/tests/js/spec/components/circleIndicator.spec.jsx
@@ -4,7 +4,7 @@ import CircleIndicator from 'app/components/circleIndicator';
 
 describe('CircleIndicator', function() {
   it('renders', function() {
-    let wrapper = shallow(<CircleIndicator />);
+    const wrapper = shallow(<CircleIndicator />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/confirm.spec.jsx b/tests/js/spec/components/confirm.spec.jsx
index d491467fc6..b931317251 100644
--- a/tests/js/spec/components/confirm.spec.jsx
+++ b/tests/js/spec/components/confirm.spec.jsx
@@ -4,8 +4,8 @@ import Confirm from 'app/components/confirm';
 
 describe('Confirm', function() {
   it('renders', function() {
-    let mock = jest.fn();
-    let wrapper = shallow(
+    const mock = jest.fn();
+    const wrapper = shallow(
       <Confirm message="Are you sure?" onConfirm={mock}>
         <button>Confirm?</button>
       </Confirm>,
@@ -15,8 +15,8 @@ describe('Confirm', function() {
   });
 
   it('clicking action button opens Modal', function() {
-    let mock = jest.fn();
-    let wrapper = shallow(
+    const mock = jest.fn();
+    const wrapper = shallow(
       <Confirm message="Are you sure?" onConfirm={mock}>
         <button>Confirm?</button>
       </Confirm>,
@@ -29,15 +29,15 @@ describe('Confirm', function() {
   });
 
   it('clicking action button twice causes Modal to end up closed', function() {
-    let mock = jest.fn();
-    let wrapper = shallow(
+    const mock = jest.fn();
+    const wrapper = shallow(
       <Confirm message="Are you sure?" onConfirm={mock}>
         <button>Confirm?</button>
       </Confirm>,
       TestStubs.routerContext()
     );
 
-    let button = wrapper.find('button');
+    const button = wrapper.find('button');
 
     button.simulate('click');
     button.simulate('click');
@@ -45,8 +45,8 @@ describe('Confirm', function() {
   });
 
   it('clicks Confirm in modal and calls `onConfirm` callback', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <Confirm message="Are you sure?" onConfirm={mock}>
         <button>Confirm?</button>
       </Confirm>,
diff --git a/tests/js/spec/components/confirmDelete.spec.jsx b/tests/js/spec/components/confirmDelete.spec.jsx
index da97b641c1..59188aec76 100644
--- a/tests/js/spec/components/confirmDelete.spec.jsx
+++ b/tests/js/spec/components/confirmDelete.spec.jsx
@@ -4,8 +4,8 @@ import ConfirmDelete from 'app/components/confirmDelete';
 
 describe('ConfirmDelete', function() {
   it('renders', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ConfirmDelete message="Are you sure?" onConfirm={mock} confirmInput="CoolOrg">
         <button>Confirm?</button>
       </ConfirmDelete>,
@@ -17,8 +17,8 @@ describe('ConfirmDelete', function() {
   });
 
   it('confirm button is disabled and bypass prop is false when modal opens', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ConfirmDelete message="Are you sure?" onConfirm={mock} confirmInput="CoolOrg">
         <button>Confirm?</button>
       </ConfirmDelete>,
@@ -32,8 +32,8 @@ describe('ConfirmDelete', function() {
   });
 
   it('confirm button stays disabled with non-matching input', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ConfirmDelete message="Are you sure?" onConfirm={mock} confirmInput="CoolOrg">
         <button>Confirm?</button>
       </ConfirmDelete>,
@@ -45,8 +45,8 @@ describe('ConfirmDelete', function() {
   });
 
   it('confirm button is enabled when confirm input matches', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ConfirmDelete message="Are you sure?" onConfirm={mock} confirmInput="CoolOrg">
         <button>Confirm?</button>
       </ConfirmDelete>,
diff --git a/tests/js/spec/components/contextData.spec.jsx b/tests/js/spec/components/contextData.spec.jsx
index 63217c4c7b..31347243b7 100644
--- a/tests/js/spec/components/contextData.spec.jsx
+++ b/tests/js/spec/components/contextData.spec.jsx
@@ -8,7 +8,7 @@ describe('ContextData', function() {
     describe('strings', function() {
       it('should render urls w/ an additional <a> link', function() {
         const URL = 'https://example.org/foo/bar/';
-        let wrapper = shallow(<ContextData data={URL} />);
+        const wrapper = shallow(<ContextData data={URL} />);
 
         expect(
           wrapper
diff --git a/tests/js/spec/components/contextPickerModal.spec.jsx b/tests/js/spec/components/contextPickerModal.spec.jsx
index c911bdba29..de3b03d9bc 100644
--- a/tests/js/spec/components/contextPickerModal.spec.jsx
+++ b/tests/js/spec/components/contextPickerModal.spec.jsx
@@ -8,7 +8,7 @@ jest.mock('jquery');
 
 describe('ContextPickerModal', function() {
   let project, project2, org, org2;
-  let onFinish = jest.fn();
+  const onFinish = jest.fn();
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -37,18 +37,18 @@ describe('ContextPickerModal', function() {
   );
 
   it('renders with only org selector when no org in latest context', function() {
-    let wrapper = shallow(getComponent());
+    const wrapper = shallow(getComponent());
 
     expect(wrapper.find('StyledSelectControl[name="organization"]').exists()).toBe(true);
     expect(wrapper.find('StyledSelectControl[name="project"]').exists()).toBe(false);
   });
 
   it('fetches org details and sets as active org if there is only one org', function() {
-    let spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
-    let api = MockApiClient.addMockResponse({
+    const spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
+    const api = MockApiClient.addMockResponse({
       url: `/organizations/${org2.slug}/`,
     });
-    let wrapper = mount(getComponent({organizations: [org2]}));
+    const wrapper = mount(getComponent({organizations: [org2]}));
 
     wrapper.update();
     expect(spy).toHaveBeenCalledWith('org2', {
@@ -59,11 +59,11 @@ describe('ContextPickerModal', function() {
   });
 
   it('calls onFinish after latestContext is set, if project id is not needed, and only 1 org', function() {
-    let spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
-    let api = MockApiClient.addMockResponse({
+    const spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
+    const api = MockApiClient.addMockResponse({
       url: `/organizations/${org2.slug}/`,
     });
-    let wrapper = mount(getComponent({organizations: [org2]}));
+    const wrapper = mount(getComponent({organizations: [org2]}));
 
     expect(spy).toHaveBeenCalledWith('org2', {
       setActive: true,
@@ -77,11 +77,11 @@ describe('ContextPickerModal', function() {
   });
 
   it('calls onFinish if there is only 1 org and 1 project', function() {
-    let spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
-    let api = MockApiClient.addMockResponse({
+    const spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
+    const api = MockApiClient.addMockResponse({
       url: `/organizations/${org2.slug}/`,
     });
-    let wrapper = mount(
+    const wrapper = mount(
       getComponent({
         needOrg: true,
         needProject: true,
@@ -102,8 +102,8 @@ describe('ContextPickerModal', function() {
   });
 
   it('selects an org and calls `onFinish` with URL with organization slug', function() {
-    let wrapper = mount(getComponent({}));
-    let mock = MockApiClient.addMockResponse({
+    const wrapper = mount(getComponent({}));
+    const mock = MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/`,
     });
 
@@ -121,7 +121,7 @@ describe('ContextPickerModal', function() {
   });
 
   it('renders with project selector and org selector selected when org is in latest context', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       getComponent({
         needOrg: true,
         needProject: true,
@@ -145,11 +145,11 @@ describe('ContextPickerModal', function() {
   });
 
   it('can select org and project', async function() {
-    let spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
-    let api = MockApiClient.addMockResponse({
+    const spy = jest.spyOn(OrgActions, 'fetchOrganizationDetails');
+    const api = MockApiClient.addMockResponse({
       url: `/organizations/${org2.slug}/`,
     });
-    let wrapper = mount(
+    const wrapper = mount(
       getComponent({
         needOrg: true,
         needProject: true,
diff --git a/tests/js/spec/components/customResolutionModal.spec.jsx b/tests/js/spec/components/customResolutionModal.spec.jsx
index c4affa4ecf..30872a5ba0 100644
--- a/tests/js/spec/components/customResolutionModal.spec.jsx
+++ b/tests/js/spec/components/customResolutionModal.spec.jsx
@@ -13,8 +13,8 @@ describe('CustomResolutionModal', function() {
   });
 
   it('can select a version', async function() {
-    let onSelected = jest.fn();
-    let wrapper = mount(
+    const onSelected = jest.fn();
+    const wrapper = mount(
       <CustomResolutionModal
         orgId="org-slug"
         projectId="project-slug"
diff --git a/tests/js/spec/components/detailedError.spec.jsx b/tests/js/spec/components/detailedError.spec.jsx
index a92673af57..2cf7a73fbf 100644
--- a/tests/js/spec/components/detailedError.spec.jsx
+++ b/tests/js/spec/components/detailedError.spec.jsx
@@ -5,7 +5,7 @@ import DetailedError from 'app/components/errors/detailedError';
 
 describe('DetailedError', function() {
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <DetailedError heading="Error heading" message={<div>Message</div>} />
     );
 
@@ -13,7 +13,7 @@ describe('DetailedError', function() {
   });
 
   it('renders with "Retry" button', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <DetailedError
         onRetry={() => {}}
         heading="Error heading"
@@ -25,7 +25,7 @@ describe('DetailedError', function() {
   });
 
   it('can hide support links', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <DetailedError
         hideSupportLinks
         onRetry={() => {}}
@@ -38,7 +38,7 @@ describe('DetailedError', function() {
   });
 
   it('hides footer when no "Retry" and no support links', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <DetailedError
         hideSupportLinks
         heading="Error heading"
diff --git a/tests/js/spec/components/dropdownLink.spec.jsx b/tests/js/spec/components/dropdownLink.spec.jsx
index ba6aec386f..9f2dc85c87 100644
--- a/tests/js/spec/components/dropdownLink.spec.jsx
+++ b/tests/js/spec/components/dropdownLink.spec.jsx
@@ -20,7 +20,7 @@ describe('DropdownLink', function() {
 
   describe('renders', function() {
     it('and anchors to left by default', function() {
-      let component = mount(
+      const component = mount(
         <DropdownLink {...INPUT_1}>
           <div>1</div>
           <div>2</div>
@@ -31,7 +31,7 @@ describe('DropdownLink', function() {
     });
 
     it('and anchors to right', function() {
-      let component = mount(
+      const component = mount(
         <DropdownLink {...INPUT_1} anchorRight>
           <div>1</div>
           <div>2</div>
diff --git a/tests/js/spec/components/dropdownMenu.spec.jsx b/tests/js/spec/components/dropdownMenu.spec.jsx
index de9a4b10b1..6d2ecd6a7d 100644
--- a/tests/js/spec/components/dropdownMenu.spec.jsx
+++ b/tests/js/spec/components/dropdownMenu.spec.jsx
@@ -116,11 +116,11 @@ describe('DropdownMenu', function() {
   });
 
   it('render prop getters all extend props and call original onClick handlers', function() {
-    let rootClick = jest.fn();
-    let actorClick = jest.fn();
-    let menuClick = jest.fn();
-    let addSpy = jest.spyOn(document, 'addEventListener');
-    let removeSpy = jest.spyOn(document, 'removeEventListener');
+    const rootClick = jest.fn();
+    const actorClick = jest.fn();
+    const menuClick = jest.fn();
+    const addSpy = jest.spyOn(document, 'addEventListener');
+    const removeSpy = jest.spyOn(document, 'removeEventListener');
 
     wrapper = mount(
       <DropdownMenu keepMenuOpen>
@@ -178,8 +178,8 @@ describe('DropdownMenu', function() {
   });
 
   it('always rendered menus should attach document event listeners only when opened', function() {
-    let addSpy = jest.spyOn(document, 'addEventListener');
-    let removeSpy = jest.spyOn(document, 'removeEventListener');
+    const addSpy = jest.spyOn(document, 'addEventListener');
+    const removeSpy = jest.spyOn(document, 'removeEventListener');
 
     wrapper = mount(
       <DropdownMenu alwaysRenderMenu>
diff --git a/tests/js/spec/components/dynamicWrapper.spec.jsx b/tests/js/spec/components/dynamicWrapper.spec.jsx
index 5d4811377a..6744899a2d 100644
--- a/tests/js/spec/components/dynamicWrapper.spec.jsx
+++ b/tests/js/spec/components/dynamicWrapper.spec.jsx
@@ -14,14 +14,14 @@ describe('DynamicWrapper', function() {
   });
 
   it('renders actual value', function() {
-    let wrapper = shallow(<DynamicWrapper fixed="Test" value="Dynamic Content" />);
+    const wrapper = shallow(<DynamicWrapper fixed="Test" value="Dynamic Content" />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders fixed content when `process.env.IS_PERCY` is true', function() {
     // eslint-disable-next-line no-undef
     process.env.IS_PERCY = true;
-    let wrapper = shallow(<DynamicWrapper fixed="Test" value="Dynamic Content" />);
+    const wrapper = shallow(<DynamicWrapper fixed="Test" value="Dynamic Content" />);
     expect(wrapper).toMatchSnapshot();
     // eslint-disable-next-line no-undef
     process.env.IS_PERCY = null;
diff --git a/tests/js/spec/components/errorRobot.spec.jsx b/tests/js/spec/components/errorRobot.spec.jsx
index 7ac11aeba0..454b371e0a 100644
--- a/tests/js/spec/components/errorRobot.spec.jsx
+++ b/tests/js/spec/components/errorRobot.spec.jsx
@@ -25,7 +25,7 @@ describe('ErrorRobot', function() {
     });
 
     it('Renders a button for creating an event', function() {
-      let button = wrapper.find('Button[priority="link"]');
+      const button = wrapper.find('Button[priority="link"]');
       expect(button).toHaveLength(1);
       expect(button.props().onClick).toBeDefined();
       expect(button.props().disabled).toBeFalsy();
@@ -33,7 +33,7 @@ describe('ErrorRobot', function() {
     });
 
     it('Renders installation instructions', function() {
-      let button = wrapper.find('Button[priority="primary"]');
+      const button = wrapper.find('Button[priority="primary"]');
       expect(button).toHaveLength(1);
       expect(button.props().to).toEqual(expect.stringContaining('getting-started'));
     });
@@ -59,14 +59,14 @@ describe('ErrorRobot', function() {
     });
 
     it('Renders a disabled create event button', function() {
-      let button = wrapper.find('Button[priority="link"]');
+      const button = wrapper.find('Button[priority="link"]');
       expect(button).toHaveLength(1);
       expect(button.props().disabled).toBeTruthy();
       expect(getIssues).toHaveBeenCalledTimes(0);
     });
 
     it('does not display install instructions', function() {
-      let button = wrapper.find('Button[priority="primary"]');
+      const button = wrapper.find('Button[priority="primary"]');
       expect(button).toHaveLength(0);
     });
   });
diff --git a/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx b/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx
index be9f341706..08a3635291 100644
--- a/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx
+++ b/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx
@@ -7,7 +7,7 @@ jest.mock('app/mixins/projectState');
 
 describe('EventOrGroupExtraDetails', function() {
   it('renders last and first seen', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupExtraDetails
         orgId="orgId"
         projectId="projectId"
@@ -21,7 +21,7 @@ describe('EventOrGroupExtraDetails', function() {
   });
 
   it('renders only first seen', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupExtraDetails
         orgId="orgId"
         projectId="projectId"
@@ -34,7 +34,7 @@ describe('EventOrGroupExtraDetails', function() {
   });
 
   it('renders only last seen', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupExtraDetails
         orgId="orgId"
         projectId="projectId"
@@ -47,7 +47,7 @@ describe('EventOrGroupExtraDetails', function() {
   });
 
   it('renders all details', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupExtraDetails
         orgId="orgId"
         projectId="projectId"
@@ -69,7 +69,7 @@ describe('EventOrGroupExtraDetails', function() {
   });
 
   it('renders assignee and status', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupExtraDetails
         orgId="orgId"
         projectId="projectId"
@@ -93,7 +93,7 @@ describe('EventOrGroupExtraDetails', function() {
   });
 
   it('details when mentioned', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupExtraDetails
         orgId="orgId"
         projectId="projectId"
diff --git a/tests/js/spec/components/eventOrGroupHeader.spec.jsx b/tests/js/spec/components/eventOrGroupHeader.spec.jsx
index 58b7ed1a44..b6ecc50b06 100644
--- a/tests/js/spec/components/eventOrGroupHeader.spec.jsx
+++ b/tests/js/spec/components/eventOrGroupHeader.spec.jsx
@@ -23,7 +23,7 @@ describe('EventOrGroupHeader', function() {
       id: 'id',
     };
     it('renders with `type = error`', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
@@ -40,7 +40,7 @@ describe('EventOrGroupHeader', function() {
     });
 
     it('renders with `type = csp`', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
@@ -57,7 +57,7 @@ describe('EventOrGroupHeader', function() {
     });
 
     it('renders with `type = default`', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
@@ -84,7 +84,7 @@ describe('EventOrGroupHeader', function() {
     };
 
     it('renders with `type = error`', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
@@ -101,7 +101,7 @@ describe('EventOrGroupHeader', function() {
     });
 
     it('renders with `type = csp`', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
@@ -118,7 +118,7 @@ describe('EventOrGroupHeader', function() {
     });
 
     it('renders with `type = default`', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
@@ -135,7 +135,7 @@ describe('EventOrGroupHeader', function() {
     });
 
     it('hides level tag', function() {
-      let component = shallow(
+      const component = shallow(
         <EventOrGroupHeader
           orgId="orgId"
           projectId="projectId"
diff --git a/tests/js/spec/components/eventOrGroupTitle.spec.jsx b/tests/js/spec/components/eventOrGroupTitle.spec.jsx
index 997c0f840d..5befeba991 100644
--- a/tests/js/spec/components/eventOrGroupTitle.spec.jsx
+++ b/tests/js/spec/components/eventOrGroupTitle.spec.jsx
@@ -15,7 +15,7 @@ describe('EventOrGroupTitle', function() {
   };
 
   it('renders with subtitle when `type = error`', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupTitle
         data={{
           ...data,
@@ -30,7 +30,7 @@ describe('EventOrGroupTitle', function() {
   });
 
   it('renders with subtitle when `type = csp`', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupTitle
         data={{
           ...data,
@@ -45,7 +45,7 @@ describe('EventOrGroupTitle', function() {
   });
 
   it('renders with no subtitle when `type = default`', function() {
-    let component = shallow(
+    const component = shallow(
       <EventOrGroupTitle
         data={{
           ...data,
diff --git a/tests/js/spec/components/events/crashContent.spec.jsx b/tests/js/spec/components/events/crashContent.spec.jsx
index 3991e4679c..dd9d7bd14e 100644
--- a/tests/js/spec/components/events/crashContent.spec.jsx
+++ b/tests/js/spec/components/events/crashContent.spec.jsx
@@ -5,13 +5,13 @@ import CrashContent from 'app/components/events/interfaces/crashContent';
 import {withMeta} from 'app/components/events/meta/metaProxy';
 
 describe('CrashContent', function() {
-  let exc = TestStubs.ExceptionWithMeta();
-  let event = TestStubs.Event();
+  const exc = TestStubs.ExceptionWithMeta();
+  const event = TestStubs.Event();
 
-  let proxiedExc = withMeta(exc);
+  const proxiedExc = withMeta(exc);
 
   it('renders with meta data', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <CrashContent
         stackView="full"
         stackType="original"
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
index d523de0115..841f439e06 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
@@ -5,7 +5,7 @@ import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRende
 describe('HttpRenderer', function() {
   describe('render()', function() {
     it('should work', function() {
-      let httpRendererWrapper = shallow(
+      const httpRendererWrapper = shallow(
         <HttpRenderer
           crumb={{
             data: {
@@ -18,9 +18,9 @@ describe('HttpRenderer', function() {
         />
       );
 
-      let summaryLine = httpRendererWrapper.prop('summary');
+      const summaryLine = httpRendererWrapper.prop('summary');
 
-      let summaryLineWrapper = shallow(summaryLine);
+      const summaryLineWrapper = shallow(summaryLine);
       expect(summaryLineWrapper.find('strong').text()).toEqual('POST ');
       expect(
         summaryLineWrapper
@@ -32,7 +32,7 @@ describe('HttpRenderer', function() {
     });
 
     it("shouldn't blow up if crumb.data is missing", function() {
-      let httpRendererWrapper = mount(
+      const httpRendererWrapper = mount(
         <HttpRenderer
           crumb={{
             category: 'xhr',
diff --git a/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx b/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
index 09d6ee09bb..a33e612c5b 100644
--- a/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
@@ -6,108 +6,108 @@ import ExceptionMechanism from 'app/components/events/interfaces/exceptionMechan
 describe('ExceptionMechanism', () => {
   describe('basic attributes', () => {
     it('should render the exception mechanism', () => {
-      let mechanism = {type: 'generic'};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic'};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should render a help_link icon', () => {
-      let mechanism = {type: 'generic', help_link: 'https://example.org/help'};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', help_link: 'https://example.org/help'};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should render a description hovercard', () => {
-      let mechanism = {type: 'generic', description: 'Nothing to see here.'};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', description: 'Nothing to see here.'};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should add the help_link to the description hovercard', () => {
-      let mechanism = {
+      const mechanism = {
         type: 'generic',
         description: 'Nothing to see here.',
         help_link: 'https://example.org/help',
       };
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should render the handled pill', () => {
-      let mechanism = {type: 'generic', handled: false};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', handled: false};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
   });
 
   describe('errno meta', () => {
     it('should render the errno number', () => {
-      let mechanism = {type: 'generic', meta: {errno: {number: 7}}};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', meta: {errno: {number: 7}}};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should prefer the errno name if present', () => {
-      let mechanism = {type: 'generic', meta: {errno: {number: 7, name: 'E2BIG'}}};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', meta: {errno: {number: 7, name: 'E2BIG'}}};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
   });
 
   describe('mach_exception meta', () => {
     it('should render the mach exception number', () => {
-      let mechanism = {
+      const mechanism = {
         type: 'generic',
         meta: {mach_exception: {exception: 1, subcode: 8, code: 1}},
       };
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should prefer the exception name if present', () => {
-      let mechanism = {
+      const mechanism = {
         type: 'generic',
         meta: {
           mach_exception: {exception: 1, subcode: 8, code: 1, name: 'EXC_BAD_ACCESS'},
         },
       };
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
   });
 
   describe('signal meta', () => {
     it('should render the signal number', () => {
-      let mechanism = {type: 'generic', meta: {signal: {number: 11}}};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', meta: {signal: {number: 11}}};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should add the signal code if present', () => {
-      let mechanism = {type: 'generic', meta: {signal: {number: 11, code: 0}}};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', meta: {signal: {number: 11, code: 0}}};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should prefer signal and code names if present', () => {
-      let mechanism = {
+      const mechanism = {
         type: 'generic',
         meta: {signal: {number: 11, code: 0, name: 'SIGSEGV', code_name: 'SEGV_NOOP'}},
       };
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
   });
 
   describe('additional data', () => {
     it('should render all fields in the data object', () => {
-      let mechanism = {type: 'generic', data: {relevant_address: '0x1'}};
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const mechanism = {type: 'generic', data: {relevant_address: '0x1'}};
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should skip object-like values', () => {
-      let mechanism = {
+      const mechanism = {
         type: 'generic',
         data: {
           a: {x: 11},
@@ -115,7 +115,7 @@ describe('ExceptionMechanism', () => {
           c: new Date(),
         },
       };
-      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      const wrapper = shallow(<ExceptionMechanism data={mechanism} />);
       expect(wrapper).toMatchSnapshot();
     });
   });
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index 78f8350d5c..6cfccfb59c 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -20,7 +20,7 @@ describe('Frame', function() {
     });
 
     it('should render the source map information as a HTML string', function() {
-      let frame = shallow(<Frame data={data} />);
+      const frame = shallow(<Frame data={data} />);
 
       expect(frame.find('Tooltip').prop('title')).toMatchSnapshot();
     });
@@ -36,13 +36,13 @@ describe('Frame', function() {
         ],
       };
 
-      let frame = shallow(<Frame data={data} isExpanded />);
+      const frame = shallow(<Frame data={data} isExpanded />);
       expect(frame.find('ContextLine')).toMatchSnapshot();
     });
 
     it('should render register values', () => {
       data = {};
-      let registers = {
+      const registers = {
         r10: '0x00007fff9300bf70',
         r11: '0xffffffffffffffff',
         r12: '0x0000000000000000',
@@ -62,15 +62,15 @@ describe('Frame', function() {
         rsp: '0x00007ffedfdff7c0',
       };
 
-      let frame = shallow(<Frame data={data} registers={registers} isExpanded />);
+      const frame = shallow(<Frame data={data} registers={registers} isExpanded />);
       expect(frame.find('FrameRegisters').prop('data')).toEqual(registers);
     });
 
     it('should not render empty registers', () => {
       data = {};
-      let registers = {};
+      const registers = {};
 
-      let frame = shallow(<Frame data={data} registers={registers} isExpanded />);
+      const frame = shallow(<Frame data={data} registers={registers} isExpanded />);
       expect(frame.find('FrameRegisters')).toHaveLength(0);
     });
 
@@ -88,7 +88,7 @@ describe('Frame', function() {
         },
       };
 
-      let frame = shallow(<Frame data={data} isExpanded />);
+      const frame = shallow(<Frame data={data} isExpanded />);
       expect(frame.find('FrameVariables').prop('data')).toEqual(data.vars);
     });
   });
diff --git a/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx b/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
index 2d98a66e44..ffeacb6920 100644
--- a/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
@@ -7,24 +7,24 @@ import FrameRegisters, {
 
 describe('FrameRegisters', () => {
   it('should render registers', () => {
-    let registers = {
+    const registers = {
       r10: '0x00007fff9300bf70',
       r11: '0xffffffffffffffff',
       r12: '0x0000000000000000',
     };
 
-    let wrapper = shallow(<FrameRegisters data={registers} />);
+    const wrapper = shallow(<FrameRegisters data={registers} />);
     expect(wrapper.find('RegisterValue')).toMatchSnapshot();
   });
 
   it('should skip registers without a value', () => {
-    let registers = {
+    const registers = {
       r10: '0x00007fff9300bf70',
       r11: null,
       r12: '0x0000000000000000',
     };
 
-    let wrapper = shallow(<FrameRegisters data={registers} />);
+    const wrapper = shallow(<FrameRegisters data={registers} />);
     expect(wrapper.find('RegisterValue')).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
index 983da62e31..e447ff84af 100644
--- a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
@@ -6,8 +6,8 @@ import KeyValueList from 'app/components/events/interfaces/keyValueList';
 describe('KeyValueList', function() {
   describe('render', function() {
     it('should render a definition list of key/value pairs', function() {
-      let data = [['a', 'x'], ['b', 'y']];
-      let wrapper = mount(<KeyValueList data={data} />);
+      const data = [['a', 'x'], ['b', 'y']];
+      const wrapper = mount(<KeyValueList data={data} />);
 
       expect(
         wrapper
@@ -37,8 +37,8 @@ describe('KeyValueList', function() {
     });
 
     it('should sort sort key/value pairs', function() {
-      let data = [['b', 'y'], ['a', 'x']];
-      let wrapper = mount(<KeyValueList data={data} />);
+      const data = [['b', 'y'], ['a', 'x']];
+      const wrapper = mount(<KeyValueList data={data} />);
 
       expect(
         wrapper
@@ -68,11 +68,11 @@ describe('KeyValueList', function() {
     });
 
     it('should use a single space for values that are an empty string', function() {
-      let data = [
+      const data = [
         ['b', 'y'],
         ['a', ''], // empty string
       ];
-      let wrapper = mount(<KeyValueList data={data} />);
+      const wrapper = mount(<KeyValueList data={data} />);
 
       expect(
         wrapper
@@ -102,8 +102,8 @@ describe('KeyValueList', function() {
     });
 
     it('can sort key/value pairs with non-string values', function() {
-      let data = [['b', {foo: 'bar'}], ['a', [3, 2, 1]]];
-      let wrapper = mount(<KeyValueList isContextData data={data} />);
+      const data = [['b', {foo: 'bar'}], ['a', [3, 2, 1]]];
+      const wrapper = mount(<KeyValueList isContextData data={data} />);
 
       // Ignore values, more interested in if keys rendered + are sorted
       expect(
@@ -121,8 +121,8 @@ describe('KeyValueList', function() {
     });
 
     it('should coerce non-strings into strings', function() {
-      let data = [['a', false]];
-      let wrapper = mount(<KeyValueList data={data} />);
+      const data = [['a', false]];
+      const wrapper = mount(<KeyValueList data={data} />);
 
       expect(
         wrapper
@@ -139,8 +139,8 @@ describe('KeyValueList', function() {
     });
 
     it("shouldn't blow up on null", function() {
-      let data = [['a', null]];
-      let wrapper = mount(<KeyValueList data={data} />);
+      const data = [['a', null]];
+      const wrapper = mount(<KeyValueList data={data} />);
 
       expect(
         wrapper
diff --git a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
index 2ea0856339..bef127c69b 100644
--- a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
@@ -56,7 +56,7 @@ describe('RawStacktraceContent', function() {
   });
 
   describe('render()', function() {
-    let exception = {
+    const exception = {
         module: 'example.application',
         type: 'Error',
         value: 'an error occurred',
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index 5b38523b19..ebcd362c32 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -26,7 +26,7 @@ describe('RichHttpContent', function() {
 
   describe('getBodySection', function() {
     it('should return plain-text when given unrecognized inferred Content-Type', function() {
-      let out = elem.getBodySection({
+      const out = elem.getBodySection({
         inferredContentType: null, // no inferred content type
         data: 'helloworld',
       });
@@ -35,7 +35,7 @@ describe('RichHttpContent', function() {
     });
 
     it('should return a KeyValueList element when inferred Content-Type is x-www-form-urlencoded', function() {
-      let out = elem.getBodySection({
+      const out = elem.getBodySection({
         inferredContentType: 'application/x-www-form-urlencoded',
         data: {foo: ['bar'], bar: ['baz']},
       });
@@ -46,7 +46,7 @@ describe('RichHttpContent', function() {
     });
 
     it('should return a ContextData element when inferred Content-Type is application/json', function() {
-      let out = elem.getBodySection({
+      const out = elem.getBodySection({
         inferredContentType: 'application/json',
         data: {foo: 'bar'},
       });
diff --git a/tests/js/spec/components/events/meta/annotated.spec.jsx b/tests/js/spec/components/events/meta/annotated.spec.jsx
index 77fa442829..ef0c57db3d 100644
--- a/tests/js/spec/components/events/meta/annotated.spec.jsx
+++ b/tests/js/spec/components/events/meta/annotated.spec.jsx
@@ -5,7 +5,7 @@ import Annotated from 'app/components/events/meta/annotated';
 import {withMeta} from 'app/components/events/meta/metaProxy';
 
 describe('Annotated', () => {
-  let mock = jest.fn(() => null);
+  const mock = jest.fn(() => null);
 
   const createEvent = (value, {err, rem, chunks} = {}) => {
     return withMeta({
@@ -28,7 +28,7 @@ describe('Annotated', () => {
 
   describe('without meta', () => {
     it('renders a string', () => {
-      let obj = {
+      const obj = {
         value: 'foo',
       };
       mount(
@@ -40,14 +40,14 @@ describe('Annotated', () => {
     });
 
     it('does not error if prop does not exist on object', () => {
-      let obj = {
+      const obj = {
         value: 'foo',
       };
       mount(<Annotated object={obj} prop="invalid" />);
     });
 
     it('renders a number', () => {
-      let obj = {
+      const obj = {
         value: 0,
       };
       mount(
@@ -59,7 +59,7 @@ describe('Annotated', () => {
     });
 
     it('renders a boolean', () => {
-      let obj = {
+      const obj = {
         value: false,
       };
       mount(
@@ -71,7 +71,7 @@ describe('Annotated', () => {
     });
 
     it('ignores empty meta data', () => {
-      let obj = withMeta({
+      const obj = withMeta({
         value: 'foo',
         _meta: {
           value: {
@@ -92,7 +92,7 @@ describe('Annotated', () => {
     });
 
     it('does not call render prop if required and value is falsy and no meta', () => {
-      let obj = createEvent(null, {});
+      const obj = createEvent(null, {});
 
       mount(
         <Annotated object={obj} prop="value" required>
@@ -106,7 +106,7 @@ describe('Annotated', () => {
 
   describe('with meta', () => {
     it('annotates errors', () => {
-      let obj = createEvent('foo', {err: ['something']});
+      const obj = createEvent('foo', {err: ['something']});
 
       mount(
         <Annotated object={obj} prop="value">
@@ -125,7 +125,7 @@ describe('Annotated', () => {
     });
 
     it('annotates remarks and chunks', () => {
-      let obj = createEvent('foo', {rem: [{type: 't'}], chunks: [{text: 'foo'}]});
+      const obj = createEvent('foo', {rem: [{type: 't'}], chunks: [{text: 'foo'}]});
 
       mount(
         <Annotated object={obj} prop="value">
@@ -144,7 +144,7 @@ describe('Annotated', () => {
     });
 
     it('annotates redacted text', () => {
-      let obj = createEvent(null, {err: ['something']});
+      const obj = createEvent(null, {err: ['something']});
 
       mount(
         <Annotated object={obj} prop="value">
diff --git a/tests/js/spec/components/events/meta/metaData.spec.jsx b/tests/js/spec/components/events/meta/metaData.spec.jsx
index b111c2eb15..e5f0b00e99 100644
--- a/tests/js/spec/components/events/meta/metaData.spec.jsx
+++ b/tests/js/spec/components/events/meta/metaData.spec.jsx
@@ -5,12 +5,12 @@ import {withMeta} from 'app/components/events/meta/metaProxy';
 import MetaData from 'app/components/events/meta/metaData';
 
 describe('MetaData', function() {
-  let exc = TestStubs.ExceptionWithMeta();
+  const exc = TestStubs.ExceptionWithMeta();
 
-  let proxiedExc = withMeta(exc);
+  const proxiedExc = withMeta(exc);
 
   it('can get meta data', function() {
-    let renderProp = jest.fn(() => null);
+    const renderProp = jest.fn(() => null);
     mount(
       <MetaData object={proxiedExc.exception.values[0]} prop="value">
         {renderProp}
diff --git a/tests/js/spec/components/eventsTable/eventsTable.spec.jsx b/tests/js/spec/components/eventsTable/eventsTable.spec.jsx
index a59655b1a3..bfdc30951c 100644
--- a/tests/js/spec/components/eventsTable/eventsTable.spec.jsx
+++ b/tests/js/spec/components/eventsTable/eventsTable.spec.jsx
@@ -16,7 +16,7 @@ describe('EventsTable', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <EventsTable
         tagList={[]}
         params={{orgId: 'orgId', projectId: 'projectId', groupId: 'groupId'}}
diff --git a/tests/js/spec/components/eventsTable/eventsTableRow.spec.jsx b/tests/js/spec/components/eventsTable/eventsTableRow.spec.jsx
index f082f20bce..a4ec0f3343 100644
--- a/tests/js/spec/components/eventsTable/eventsTableRow.spec.jsx
+++ b/tests/js/spec/components/eventsTable/eventsTableRow.spec.jsx
@@ -5,7 +5,7 @@ import events from '../../../mocks/events';
 
 describe('EventsTableRow', function() {
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <EventsTableRow
         organization={TestStubs.Organization()}
         tagList={[]}
diff --git a/tests/js/spec/components/externalLink.spec.jsx b/tests/js/spec/components/externalLink.spec.jsx
index 83a4c0b3ac..4708185f8c 100644
--- a/tests/js/spec/components/externalLink.spec.jsx
+++ b/tests/js/spec/components/externalLink.spec.jsx
@@ -4,7 +4,7 @@ import ExternalLink from 'app/components/externalLink';
 
 describe('ExternalLink', function() {
   it('renders', function() {
-    let wrapper = shallow(<ExternalLink href="https://www.sentry.io/" />);
+    const wrapper = shallow(<ExternalLink href="https://www.sentry.io/" />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/forms/booleanField.spec.jsx b/tests/js/spec/components/forms/booleanField.spec.jsx
index b8744253cf..63a44e800e 100644
--- a/tests/js/spec/components/forms/booleanField.spec.jsx
+++ b/tests/js/spec/components/forms/booleanField.spec.jsx
@@ -6,12 +6,12 @@ import {BooleanField} from 'app/components/forms';
 describe('BooleanField', function() {
   describe('render()', function() {
     it('renders without form context', function() {
-      let wrapper = shallow(<BooleanField name="fieldName" />);
+      const wrapper = shallow(<BooleanField name="fieldName" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(<BooleanField name="fieldName" />, {
+      const wrapper = shallow(<BooleanField name="fieldName" />, {
         context: {
           form: {
             data: {
diff --git a/tests/js/spec/components/forms/emailField.spec.jsx b/tests/js/spec/components/forms/emailField.spec.jsx
index e9aabf6157..db81d0c4e1 100644
--- a/tests/js/spec/components/forms/emailField.spec.jsx
+++ b/tests/js/spec/components/forms/emailField.spec.jsx
@@ -6,17 +6,17 @@ import {EmailField} from 'app/components/forms';
 describe('EmailField', function() {
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(<EmailField name="fieldName" />);
+      const wrapper = shallow(<EmailField name="fieldName" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with value', function() {
-      let wrapper = shallow(<EmailField name="fieldName" value="foo@example.com" />);
+      const wrapper = shallow(<EmailField name="fieldName" value="foo@example.com" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(<EmailField name="fieldName" />, {
+      const wrapper = shallow(<EmailField name="fieldName" />, {
         context: {
           form: {
             data: {
diff --git a/tests/js/spec/components/forms/form.spec.jsx b/tests/js/spec/components/forms/form.spec.jsx
index 4b24494f3d..0fd2b24c14 100644
--- a/tests/js/spec/components/forms/form.spec.jsx
+++ b/tests/js/spec/components/forms/form.spec.jsx
@@ -6,7 +6,7 @@ import {Form} from 'app/components/forms';
 describe('Form', function() {
   describe('render()', function() {
     it('renders with children', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <Form onSubmit={() => {}}>
           <hr />
         </Form>
diff --git a/tests/js/spec/components/forms/formField.spec.jsx b/tests/js/spec/components/forms/formField.spec.jsx
index d927dc2451..243081b159 100644
--- a/tests/js/spec/components/forms/formField.spec.jsx
+++ b/tests/js/spec/components/forms/formField.spec.jsx
@@ -8,7 +8,7 @@ import FormModel from 'app/views/settings/components/forms/model';
 describe('FormField + model', function() {
   let model;
   let wrapper;
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(function() {
     model = new FormModel();
diff --git a/tests/js/spec/components/forms/genericField.spec.jsx b/tests/js/spec/components/forms/genericField.spec.jsx
index 77c136ec81..cf48a7583e 100644
--- a/tests/js/spec/components/forms/genericField.spec.jsx
+++ b/tests/js/spec/components/forms/genericField.spec.jsx
@@ -5,7 +5,7 @@ import {GenericField, FormState} from 'app/components/forms';
 
 describe('GenericField', function() {
   it('renders text as TextInput', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <GenericField
         formState={FormState.READY}
         config={{
@@ -20,7 +20,7 @@ describe('GenericField', function() {
   });
 
   it('renders text with choices as SelectCreatableField', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <GenericField
         formState={FormState.READY}
         config={{
diff --git a/tests/js/spec/components/forms/multiSelectField.spec.jsx b/tests/js/spec/components/forms/multiSelectField.spec.jsx
index 3f24f0249c..ddf8361966 100644
--- a/tests/js/spec/components/forms/multiSelectField.spec.jsx
+++ b/tests/js/spec/components/forms/multiSelectField.spec.jsx
@@ -6,7 +6,7 @@ import {MultiSelectField} from 'app/components/forms';
 describe('MultiSelectField', function() {
   describe('render()', function() {
     it('renders without form context', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MultiSelectField
           options={[{label: 'a', value: 'a'}, {label: 'b', value: 'b'}]}
           name="fieldName"
@@ -16,7 +16,7 @@ describe('MultiSelectField', function() {
     });
 
     it('has the right value from props', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MultiSelectField
           options={[{label: 'a', value: 'a'}, {label: 'b', value: 'b'}]}
           name="fieldName"
@@ -27,7 +27,7 @@ describe('MultiSelectField', function() {
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MultiSelectField
           options={[{label: 'a', value: 'a'}, {label: 'b', value: 'b'}]}
           name="fieldName"
diff --git a/tests/js/spec/components/forms/multipleCheckboxField.spec.jsx b/tests/js/spec/components/forms/multipleCheckboxField.spec.jsx
index 086e397c9b..cad9fa183d 100644
--- a/tests/js/spec/components/forms/multipleCheckboxField.spec.jsx
+++ b/tests/js/spec/components/forms/multipleCheckboxField.spec.jsx
@@ -6,7 +6,7 @@ import {MultipleCheckboxField} from 'app/components/forms';
 describe('MultipleCheckboxField', function() {
   describe('render()', function() {
     it('renders without form context', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MultipleCheckboxField
           name="fieldName"
           choices={[['1', 'On'], ['2', 'Off']]}
@@ -17,7 +17,7 @@ describe('MultipleCheckboxField', function() {
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MultipleCheckboxField name="fieldName" choices={[['1', 'On'], ['2', 'Off']]} />,
         {
           context: {
diff --git a/tests/js/spec/components/forms/numberField.spec.jsx b/tests/js/spec/components/forms/numberField.spec.jsx
index d062e60b4c..059cb26bea 100644
--- a/tests/js/spec/components/forms/numberField.spec.jsx
+++ b/tests/js/spec/components/forms/numberField.spec.jsx
@@ -9,22 +9,22 @@ jest.mock('jquery');
 describe('NumberField', function() {
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(<NumberField name="fieldName" />);
+      const wrapper = shallow(<NumberField name="fieldName" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with optional attributes', function() {
-      let wrapper = shallow(<NumberField name="fieldName" min={0} max={100} />);
+      const wrapper = shallow(<NumberField name="fieldName" min={0} max={100} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with value', function() {
-      let wrapper = shallow(<NumberField name="fieldName" value={5} />);
+      const wrapper = shallow(<NumberField name="fieldName" value={5} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(<NumberField name="fieldName" />, {
+      const wrapper = shallow(<NumberField name="fieldName" />, {
         context: {
           form: {
             data: {
@@ -38,7 +38,7 @@ describe('NumberField', function() {
     });
 
     it('doesnt save `NaN` when new value is empty string', function() {
-      let wrapper = mount(
+      const wrapper = mount(
         <Form onSubmit={() => {}}>
           <NumberField name="fieldName" defaultValue="2" />
         </Form>
diff --git a/tests/js/spec/components/forms/passwordField.spec.jsx b/tests/js/spec/components/forms/passwordField.spec.jsx
index 2b3e750e54..61b89e4820 100644
--- a/tests/js/spec/components/forms/passwordField.spec.jsx
+++ b/tests/js/spec/components/forms/passwordField.spec.jsx
@@ -6,17 +6,17 @@ import {PasswordField} from 'app/components/forms';
 describe('PasswordField', function() {
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(<PasswordField name="fieldName" />);
+      const wrapper = shallow(<PasswordField name="fieldName" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with value', function() {
-      let wrapper = shallow(<PasswordField name="fieldName" value="foobar" />);
+      const wrapper = shallow(<PasswordField name="fieldName" value="foobar" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(<PasswordField name="fieldName" />, {
+      const wrapper = shallow(<PasswordField name="fieldName" />, {
         context: {
           form: {
             data: {
diff --git a/tests/js/spec/components/forms/radioBooleanField.spec.jsx b/tests/js/spec/components/forms/radioBooleanField.spec.jsx
index 06a5b71a32..9e2a09ac28 100644
--- a/tests/js/spec/components/forms/radioBooleanField.spec.jsx
+++ b/tests/js/spec/components/forms/radioBooleanField.spec.jsx
@@ -7,14 +7,14 @@ import NewRadioBooleanField from 'app/views/settings/components/forms/radioBoole
 describe('RadioBooleanField', function() {
   describe('render()', function() {
     it('renders without form context', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <RadioBooleanField name="fieldName" yesLabel="Yes" noLabel="No" />
       );
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <RadioBooleanField name="fieldName" yesLabel="Yes" noLabel="No" />,
         {
           context: {
@@ -31,15 +31,15 @@ describe('RadioBooleanField', function() {
     });
 
     it('renders new field without form context', function() {
-      let wrapper = mount(
+      const wrapper = mount(
         <NewRadioBooleanField name="fieldName" yesLabel="Yes" noLabel="No" />
       );
       expect(wrapper).toMatchSnapshot();
     });
 
     it('can change values', function() {
-      let mock = jest.fn();
-      let wrapper = mount(
+      const mock = jest.fn();
+      const wrapper = mount(
         <NewRadioBooleanField
           onChange={mock}
           name="fieldName"
diff --git a/tests/js/spec/components/forms/rangeField.spec.jsx b/tests/js/spec/components/forms/rangeField.spec.jsx
index 7beba069ed..22ed29f48d 100644
--- a/tests/js/spec/components/forms/rangeField.spec.jsx
+++ b/tests/js/spec/components/forms/rangeField.spec.jsx
@@ -6,12 +6,12 @@ import {RangeField} from 'app/components/forms';
 describe('RangeField', function() {
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(<RangeField name="fieldName" />);
+      const wrapper = shallow(<RangeField name="fieldName" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with optional attributes', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <RangeField
           name="fieldName"
           min={0}
@@ -25,12 +25,12 @@ describe('RangeField', function() {
     });
 
     it('renders with value', function() {
-      let wrapper = shallow(<RangeField name="fieldName" value={2} />);
+      const wrapper = shallow(<RangeField name="fieldName" value={2} />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(<RangeField name="fieldName" />, {
+      const wrapper = shallow(<RangeField name="fieldName" />, {
         context: {
           form: {
             data: {
@@ -44,7 +44,7 @@ describe('RangeField', function() {
     });
 
     it('renders with value=0 in form context', function() {
-      let wrapper = shallow(<RangeField name="fieldName" />, {
+      const wrapper = shallow(<RangeField name="fieldName" />, {
         context: {
           form: {
             data: {
diff --git a/tests/js/spec/components/forms/selectAsyncField.spec.jsx b/tests/js/spec/components/forms/selectAsyncField.spec.jsx
index 9ab58c36bd..5ecac4e192 100644
--- a/tests/js/spec/components/forms/selectAsyncField.spec.jsx
+++ b/tests/js/spec/components/forms/selectAsyncField.spec.jsx
@@ -20,7 +20,7 @@ describe('SelectAsyncField', function() {
   });
 
   it('supports autocomplete arguments from an integration', async function() {
-    let wrapper = mount(<SelectAsyncField url="/foo/bar/" name="fieldName" />);
+    const wrapper = mount(<SelectAsyncField url="/foo/bar/" name="fieldName" />);
 
     wrapper.find('input[id="id-fieldName"]').simulate('change', {target: {value: 'baz'}});
 
@@ -39,8 +39,8 @@ describe('SelectAsyncField', function() {
   });
 
   it('with Form context', async function() {
-    let submitMock = jest.fn();
-    let wrapper = mount(
+    const submitMock = jest.fn();
+    const wrapper = mount(
       <Form onSubmit={submitMock}>
         <SelectAsyncField url="/foo/bar/" name="fieldName" />
       </Form>,
diff --git a/tests/js/spec/components/forms/selectControl.spec.jsx b/tests/js/spec/components/forms/selectControl.spec.jsx
index 6c97ff6e48..db8e38e578 100644
--- a/tests/js/spec/components/forms/selectControl.spec.jsx
+++ b/tests/js/spec/components/forms/selectControl.spec.jsx
@@ -5,7 +5,7 @@ import SelectControl from 'app/components/forms/selectControl';
 
 describe('SelectControl', function() {
   it('renders with react-select "options"', function() {
-    let wrapper = shallow(<SelectControl options={[{value: 'foo', label: 'Foo'}]} />);
+    const wrapper = shallow(<SelectControl options={[{value: 'foo', label: 'Foo'}]} />);
 
     expect(wrapper.find('StyledSelect').prop('options')).toEqual([
       {value: 'foo', label: 'Foo'},
@@ -27,7 +27,7 @@ describe('SelectControl', function() {
   });
 
   it('renders with select2 flat "choices"', function() {
-    let wrapper = shallow(<SelectControl choices={['a', 'b', 'c']} name="fieldName" />);
+    const wrapper = shallow(<SelectControl choices={['a', 'b', 'c']} name="fieldName" />);
     expect(wrapper.find('StyledSelect').prop('options')).toEqual([
       {value: 'a', label: 'a'},
       {value: 'b', label: 'b'},
@@ -36,7 +36,7 @@ describe('SelectControl', function() {
   });
 
   it('renders with select2 paired "choices"', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <SelectControl
         choices={[['a', 'abc'], ['b', 'bcd'], ['c', 'cde']]}
         name="fieldName"
@@ -50,11 +50,11 @@ describe('SelectControl', function() {
   });
 
   it('renders with complex objects with paired "choices"', function() {
-    let mock = jest.fn();
-    let Foo = <div>Foo</div>;
-    let Bar = <div>Bar</div>;
+    const mock = jest.fn();
+    const Foo = <div>Foo</div>;
+    const Bar = <div>Bar</div>;
 
-    let wrapper = mount(
+    const wrapper = mount(
       <SelectControl
         choices={[[{id: 'foo', name: 'Foo'}, Foo], [{id: 'bar', name: 'Bar'}, Bar]]}
         name="fieldName"
diff --git a/tests/js/spec/components/forms/selectCreatableField.spec.jsx b/tests/js/spec/components/forms/selectCreatableField.spec.jsx
index ff0c9ed6d3..b5b1ebb38a 100644
--- a/tests/js/spec/components/forms/selectCreatableField.spec.jsx
+++ b/tests/js/spec/components/forms/selectCreatableField.spec.jsx
@@ -5,7 +5,7 @@ import {Form, SelectCreatableField} from 'app/components/forms';
 
 describe('SelectCreatableField', function() {
   it('can add user input into select field when using options', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <SelectCreatableField options={[{value: 'foo', label: 'Foo'}]} name="fieldName" />
     );
 
@@ -32,7 +32,7 @@ describe('SelectCreatableField', function() {
   });
 
   it('can add user input into select field when using choices', function() {
-    let wrapper = mount(<SelectCreatableField choices={['foo']} name="fieldName" />);
+    const wrapper = mount(<SelectCreatableField choices={['foo']} name="fieldName" />);
 
     wrapper
       .find('input[id="id-fieldName"]')
@@ -57,7 +57,7 @@ describe('SelectCreatableField', function() {
   });
 
   it('can add user input into select field when using paired choices', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <SelectCreatableField choices={[['foo', 'foo']]} name="fieldName" />
     );
 
@@ -84,8 +84,8 @@ describe('SelectCreatableField', function() {
   });
 
   it('with Form context', function() {
-    let submitMock = jest.fn();
-    let wrapper = mount(
+    const submitMock = jest.fn();
+    const wrapper = mount(
       <Form onSubmit={submitMock}>
         <SelectCreatableField choices={[['foo', 'foo']]} name="fieldName" />
       </Form>,
diff --git a/tests/js/spec/components/forms/selectField.spec.jsx b/tests/js/spec/components/forms/selectField.spec.jsx
index ba6cc7aa4a..42e2e21d70 100644
--- a/tests/js/spec/components/forms/selectField.spec.jsx
+++ b/tests/js/spec/components/forms/selectField.spec.jsx
@@ -7,7 +7,7 @@ import {selectByValue} from '../../../helpers/select';
 
 describe('SelectField', function() {
   it('renders without form context', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <SelectField
         options={[{label: 'a', value: 'a'}, {label: 'b', value: 'b'}]}
         name="fieldName"
@@ -18,7 +18,7 @@ describe('SelectField', function() {
   });
 
   it('renders with flat choices', function() {
-    let wrapper = shallow(<SelectField choices={['a', 'b', 'c']} name="fieldName" />, {
+    const wrapper = shallow(<SelectField choices={['a', 'b', 'c']} name="fieldName" />, {
       context: {
         form: {
           data: {
@@ -32,7 +32,7 @@ describe('SelectField', function() {
   });
 
   it('renders with paired choices', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <SelectField
         choices={[['a', 'abc'], ['b', 'bcd'], ['c', 'cde']]}
         name="fieldName"
@@ -52,8 +52,8 @@ describe('SelectField', function() {
   });
 
   it('can change value and submit', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <Form onSubmit={mock}>
         <SelectField
           options={[{label: 'a', value: 'a'}, {label: 'b', value: 'b'}]}
@@ -72,8 +72,8 @@ describe('SelectField', function() {
 
   describe('Multiple', function() {
     it('selects multiple values and submits', function() {
-      let mock = jest.fn();
-      let wrapper = mount(
+      const mock = jest.fn();
+      const wrapper = mount(
         <Form onSubmit={mock}>
           <SelectField
             multiple
diff --git a/tests/js/spec/components/forms/textField.spec.jsx b/tests/js/spec/components/forms/textField.spec.jsx
index ac00720b77..b1326d8059 100644
--- a/tests/js/spec/components/forms/textField.spec.jsx
+++ b/tests/js/spec/components/forms/textField.spec.jsx
@@ -6,12 +6,12 @@ import {TextField} from 'app/components/forms';
 describe('TextField', function() {
   describe('render()', function() {
     it('renders without form context', function() {
-      let wrapper = shallow(<TextField name="fieldName" />);
+      const wrapper = shallow(<TextField name="fieldName" />);
       expect(wrapper).toMatchSnapshot();
     });
 
     it('renders with form context', function() {
-      let wrapper = shallow(<TextField name="fieldName" />, {
+      const wrapper = shallow(<TextField name="fieldName" />, {
         context: {
           form: {
             data: {
diff --git a/tests/js/spec/components/globalModal.spec.jsx b/tests/js/spec/components/globalModal.spec.jsx
index 3d2267d2f7..5d2dd00c00 100644
--- a/tests/js/spec/components/globalModal.spec.jsx
+++ b/tests/js/spec/components/globalModal.spec.jsx
@@ -5,19 +5,19 @@ import {openModal, closeModal} from 'app/actionCreators/modal';
 
 describe('GlobalModal', function() {
   it('renders', function() {
-    let wrapper = shallow(<GlobalModal />);
+    const wrapper = shallow(<GlobalModal />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('uses actionCreators to open and close Modal', function(done) {
-    let wrapper = mount(<GlobalModal />);
+    const wrapper = mount(<GlobalModal />);
 
     openModal(() => <div id="modal-test">Hi</div>);
 
     // async :<
     setTimeout(() => {
       wrapper.update();
-      let modal = $(document.body).find('.modal');
+      const modal = $(document.body).find('.modal');
       expect(modal.text()).toBe('Hi');
       expect(wrapper.find('GlobalModal').prop('visible')).toBe(true);
 
@@ -31,8 +31,8 @@ describe('GlobalModal', function() {
   });
 
   it('calls onClose handler when modal closes', function(done) {
-    let wrapper = mount(<GlobalModal />);
-    let closeSpy = jest.fn();
+    const wrapper = mount(<GlobalModal />);
+    const closeSpy = jest.fn();
 
     openModal(
       ({Header}) => (
@@ -46,7 +46,7 @@ describe('GlobalModal', function() {
     // async :<
     setTimeout(() => {
       wrapper.update();
-      let modal = $(document.body).find('.modal');
+      const modal = $(document.body).find('.modal');
       modal.find('.close').click();
 
       setTimeout(() => {
diff --git a/tests/js/spec/components/group/externalIssueActions.spec.jsx b/tests/js/spec/components/group/externalIssueActions.spec.jsx
index 59e170273d..499c26b3b8 100644
--- a/tests/js/spec/components/group/externalIssueActions.spec.jsx
+++ b/tests/js/spec/components/group/externalIssueActions.spec.jsx
@@ -4,11 +4,11 @@ import {mount} from 'enzyme';
 import ExternalIssueActions from 'app/components/group/externalIssueActions';
 
 describe('ExternalIssueActions', function() {
-  let group = TestStubs.Group();
+  const group = TestStubs.Group();
 
   describe('with no external issues linked', function() {
-    let integration = TestStubs.GitHubIntegration({externalIssues: []});
-    let wrapper = mount(
+    const integration = TestStubs.GitHubIntegration({externalIssues: []});
+    const wrapper = mount(
       <ExternalIssueActions group={group} integration={integration} />,
       TestStubs.routerContext()
     );
@@ -48,15 +48,15 @@ describe('ExternalIssueActions', function() {
   });
 
   describe('with an external issue linked', function() {
-    let externalIssues = [
+    const externalIssues = [
       {
         id: 100,
         url: 'https://github.com/MeredithAnya/testing/issues/2',
         key: 'getsentry/sentry#2',
       },
     ];
-    let integration = TestStubs.GitHubIntegration({externalIssues});
-    let wrapper = mount(
+    const integration = TestStubs.GitHubIntegration({externalIssues});
+    const wrapper = mount(
       <ExternalIssueActions group={group} integration={integration} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/components/group/sidebar.spec.jsx b/tests/js/spec/components/group/sidebar.spec.jsx
index d1a65f1ef3..01315ea864 100644
--- a/tests/js/spec/components/group/sidebar.spec.jsx
+++ b/tests/js/spec/components/group/sidebar.spec.jsx
@@ -5,8 +5,8 @@ import GroupSidebar from 'app/components/group/sidebar';
 
 describe('GroupSidebar', function() {
   let group = TestStubs.Group({tags: TestStubs.Tags()});
-  let project = TestStubs.Project();
-  let environment = {name: 'production', displayName: 'Production', id: '1'};
+  const project = TestStubs.Project();
+  const environment = {name: 'production', displayName: 'Production', id: '1'};
   let wrapper;
   let tagValuesMock;
 
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index a64085c4c0..eae2343844 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -75,7 +75,7 @@ describe('TagDistributionMeter', function() {
           loading: false,
         },
         () => {
-          let out = emptyElement.renderBody();
+          const out = emptyElement.renderBody();
           expect(ReactDOMServer.renderToStaticMarkup(out)).toEqual(
             '<p>No recent data.</p>'
           );
diff --git a/tests/js/spec/components/highlight.spec.jsx b/tests/js/spec/components/highlight.spec.jsx
index 20a605cb8b..f00fb6022f 100644
--- a/tests/js/spec/components/highlight.spec.jsx
+++ b/tests/js/spec/components/highlight.spec.jsx
@@ -6,7 +6,7 @@ describe('Highlight', function() {
   it('highlights text', function() {
     // shallow because `mount` and React Fragments don't work when accessing children
     // it will only return first child
-    let wrapper = shallow(
+    const wrapper = shallow(
       <HighlightComponent text="ILL">billy@sentry.io</HighlightComponent>,
       TestStubs.routerContext()
     );
@@ -28,7 +28,7 @@ describe('Highlight', function() {
   it('does not have highlighted text if `text` prop is not found in main text', function() {
     // shallow because `mount` and React Fragments don't work when accessing children
     // it will only return first child
-    let wrapper = shallow(
+    const wrapper = shallow(
       <HighlightComponent text="invalid">billy@sentry.io</HighlightComponent>,
       TestStubs.routerContext()
     );
@@ -39,7 +39,7 @@ describe('Highlight', function() {
   it('does not have highlighted text if `text` prop is empty', function() {
     // shallow because `mount` and React Fragments don't work when accessing children
     // it will only return first child
-    let wrapper = shallow(
+    const wrapper = shallow(
       <HighlightComponent text="">billy@sentry.io</HighlightComponent>,
       TestStubs.routerContext()
     );
@@ -50,7 +50,7 @@ describe('Highlight', function() {
   it('does not have highlighted text if `disabled` prop is true', function() {
     // shallow because `mount` and React Fragments don't work when accessing children
     // it will only return first child
-    let wrapper = shallow(
+    const wrapper = shallow(
       <HighlightComponent text="">billy@sentry.io</HighlightComponent>,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/components/hook.spec.jsx b/tests/js/spec/components/hook.spec.jsx
index 5e38ed3aa4..facb11f503 100644
--- a/tests/js/spec/components/hook.spec.jsx
+++ b/tests/js/spec/components/hook.spec.jsx
@@ -26,7 +26,7 @@ describe('Hook', function() {
   });
 
   it('renders component from a hook', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <div>
         <Hook name="footer" organization={TestStubs.Organization()} />
       </div>,
@@ -39,7 +39,7 @@ describe('Hook', function() {
   });
 
   it('renders an invalid hook', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <div>
         <Hook name="invalid-hook" organization={TestStubs.Organization()} />
       </div>,
@@ -51,7 +51,7 @@ describe('Hook', function() {
   });
 
   it('can re-render when hooks get after initial render', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <div>
         <Hook name="footer" organization={TestStubs.Organization()} />
       </div>,
@@ -81,7 +81,7 @@ describe('Hook', function() {
   });
 
   it('can use children as a render prop', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <div>
         <Hook name="footer" organization={TestStubs.Organization()}>
           {({hooks}) => hooks.map((hook, i) => <Wrapper key={i}>{hook}</Wrapper>)}
diff --git a/tests/js/spec/components/idBadge/baseBadge.spec.jsx b/tests/js/spec/components/idBadge/baseBadge.spec.jsx
index 291261c55b..9a1b182918 100644
--- a/tests/js/spec/components/idBadge/baseBadge.spec.jsx
+++ b/tests/js/spec/components/idBadge/baseBadge.spec.jsx
@@ -4,7 +4,7 @@ import BaseBadge from 'app/components/idBadge/baseBadge';
 
 describe('BadgeBadge', function() {
   it('has a display name', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <BaseBadge
         organization={TestStubs.Organization()}
         displayName={<span id="test">display name</span>}
@@ -16,7 +16,7 @@ describe('BadgeBadge', function() {
   });
 
   it('can hide avatar', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <BaseBadge organization={TestStubs.Organization()} hideAvatar />,
       TestStubs.routerContext()
     );
@@ -24,7 +24,7 @@ describe('BadgeBadge', function() {
   });
 
   it('can hide name', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <BaseBadge
         organization={TestStubs.Organization()}
         hideName
diff --git a/tests/js/spec/components/idBadge/index.spec.jsx b/tests/js/spec/components/idBadge/index.spec.jsx
index 1e746751e5..15140997b7 100644
--- a/tests/js/spec/components/idBadge/index.spec.jsx
+++ b/tests/js/spec/components/idBadge/index.spec.jsx
@@ -4,27 +4,27 @@ import {shallow} from 'enzyme';
 import IdBadge from 'app/components/idBadge';
 
 describe('IdBadge', function() {
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
   it('renders the correct component when `user` property is passed', function() {
-    let wrapper = shallow(<IdBadge user={TestStubs.User()} />, routerContext);
+    const wrapper = shallow(<IdBadge user={TestStubs.User()} />, routerContext);
 
     expect(wrapper.find('UserBadge')).toHaveLength(1);
   });
 
   it('renders the correct component when `team` property is passed', function() {
-    let wrapper = shallow(<IdBadge team={TestStubs.Team()} />, routerContext);
+    const wrapper = shallow(<IdBadge team={TestStubs.Team()} />, routerContext);
 
     expect(wrapper.find('TeamBadgeContainer')).toHaveLength(1);
   });
 
   it('renders the correct component when `project` property is passed', function() {
-    let wrapper = shallow(<IdBadge project={TestStubs.Project()} />, routerContext);
+    const wrapper = shallow(<IdBadge project={TestStubs.Project()} />, routerContext);
 
     expect(wrapper.find('ProjectBadge')).toHaveLength(1);
   });
 
   it('renders the correct component when `organization` property is passed', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <IdBadge organization={TestStubs.Organization()} />,
       routerContext
     );
diff --git a/tests/js/spec/components/idBadge/organizationBadge.spec.jsx b/tests/js/spec/components/idBadge/organizationBadge.spec.jsx
index 99a822111d..1c242ca9eb 100644
--- a/tests/js/spec/components/idBadge/organizationBadge.spec.jsx
+++ b/tests/js/spec/components/idBadge/organizationBadge.spec.jsx
@@ -4,7 +4,7 @@ import OrganizationBadge from 'app/components/idBadge/organizationBadge';
 
 describe('OrganizationBadge', function() {
   it('renders with Avatar and organization name', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationBadge organization={TestStubs.Organization()} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/components/idBadge/projectBadge.spec.jsx b/tests/js/spec/components/idBadge/projectBadge.spec.jsx
index 1eb78ba675..b09e5fe235 100644
--- a/tests/js/spec/components/idBadge/projectBadge.spec.jsx
+++ b/tests/js/spec/components/idBadge/projectBadge.spec.jsx
@@ -4,7 +4,7 @@ import ProjectBadge from 'app/components/idBadge/projectBadge';
 
 describe('ProjectBadge', function() {
   it('renders with Avatar and team name', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectBadge project={TestStubs.Project()} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/components/idBadge/teamBadge.spec.jsx b/tests/js/spec/components/idBadge/teamBadge.spec.jsx
index 167d666c50..a84846d4fd 100644
--- a/tests/js/spec/components/idBadge/teamBadge.spec.jsx
+++ b/tests/js/spec/components/idBadge/teamBadge.spec.jsx
@@ -4,7 +4,10 @@ import TeamBadge from 'app/components/idBadge/teamBadge';
 
 describe('TeamBadge', function() {
   it('renders with Avatar and team name', function() {
-    let wrapper = mount(<TeamBadge team={TestStubs.Team()} />, TestStubs.routerContext());
+    const wrapper = mount(
+      <TeamBadge team={TestStubs.Team()} />,
+      TestStubs.routerContext()
+    );
     expect(wrapper.find('StyledAvatar')).toHaveLength(1);
     expect(wrapper.find('BadgeDisplayName').text()).toEqual('#team-slug');
   });
diff --git a/tests/js/spec/components/idBadge/userBadge.spec.jsx b/tests/js/spec/components/idBadge/userBadge.spec.jsx
index 02744a1bf6..a5f7d5cbd7 100644
--- a/tests/js/spec/components/idBadge/userBadge.spec.jsx
+++ b/tests/js/spec/components/idBadge/userBadge.spec.jsx
@@ -4,11 +4,11 @@ import {mount, shallow} from 'enzyme';
 import UserBadge from 'app/components/idBadge/userBadge';
 
 describe('UserBadge', function() {
-  let member = TestStubs.Member();
-  let user = TestStubs.User();
+  const member = TestStubs.Member();
+  const user = TestStubs.User();
 
   it('renders with link when member is supplied', function() {
-    let wrapper = mount(<UserBadge member={member} orgId="orgId" />);
+    const wrapper = mount(<UserBadge member={member} orgId="orgId" />);
 
     expect(wrapper.find('StyledUserBadge')).toHaveLength(1);
     expect(wrapper.find('StyledName').prop('children')).toBe('Foo Bar');
@@ -17,7 +17,7 @@ describe('UserBadge', function() {
   });
 
   it('renders with no link when user is supplied', function() {
-    let wrapper = mount(<UserBadge user={user} orgId="orgId" />);
+    const wrapper = mount(<UserBadge user={user} orgId="orgId" />);
 
     expect(wrapper.find('StyledUserBadge')).toHaveLength(1);
     expect(wrapper.find('StyledName').prop('children')).toBe('Foo Bar');
@@ -26,7 +26,7 @@ describe('UserBadge', function() {
   });
 
   it('can display alternate display names/emails', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <UserBadge
         user={user}
         displayName="Other Display Name"
@@ -39,19 +39,19 @@ describe('UserBadge', function() {
   });
 
   it('does not use a link for member name', function() {
-    let wrapper = mount(<UserBadge user={user} useLink={false} />);
+    const wrapper = mount(<UserBadge user={user} useLink={false} />);
 
     expect(wrapper.find('StyledName Link')).toHaveLength(0);
   });
 
   it('can hide email address', function() {
-    let wrapper = mount(<UserBadge user={user} hideEmail />);
+    const wrapper = mount(<UserBadge user={user} hideEmail />);
 
     expect(wrapper.find('StyledEmail')).toHaveLength(0);
   });
 
   it('renders when a member without a user to passed to member', function() {
-    let wrapper = mount(<UserBadge member={{...member, user: null}} />);
+    const wrapper = mount(<UserBadge member={{...member, user: null}} />);
 
     expect(wrapper.find('StyledName').prop('children')).toBe('Sentry 1 Name');
   });
diff --git a/tests/js/spec/components/inactivePlugins.spec.jsx b/tests/js/spec/components/inactivePlugins.spec.jsx
index b62a7585e4..01f241b284 100644
--- a/tests/js/spec/components/inactivePlugins.spec.jsx
+++ b/tests/js/spec/components/inactivePlugins.spec.jsx
@@ -4,21 +4,23 @@ import InactivePlugins from 'app/components/inactivePlugins';
 
 describe('InactivePlugins', function() {
   it('renders null when no plugins', function() {
-    let wrapper = shallow(<InactivePlugins plugins={[]} onEnablePlugin={() => {}} />);
+    const wrapper = shallow(<InactivePlugins plugins={[]} onEnablePlugin={() => {}} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders plugins list', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <InactivePlugins onEnablePlugin={() => {}} plugins={TestStubs.Plugins()} />
     );
     expect(wrapper).toMatchSnapshot();
   });
 
   it('enables a plugin', function() {
-    let enableFn = jest.fn();
-    let plugins = TestStubs.Plugins();
-    let wrapper = mount(<InactivePlugins onEnablePlugin={enableFn} plugins={plugins} />);
+    const enableFn = jest.fn();
+    const plugins = TestStubs.Plugins();
+    const wrapper = mount(
+      <InactivePlugins onEnablePlugin={enableFn} plugins={plugins} />
+    );
     wrapper
       .find('button')
       .first()
diff --git a/tests/js/spec/components/indicators.spec.jsx b/tests/js/spec/components/indicators.spec.jsx
index beb09b34ea..9058eadc59 100644
--- a/tests/js/spec/components/indicators.spec.jsx
+++ b/tests/js/spec/components/indicators.spec.jsx
@@ -35,7 +35,7 @@ describe('Indicators', function() {
 
   it('adds and removes a toast by calling IndicatorStore directly', function() {
     // when "type" is empty, we should treat it as loading state
-    let indicator = IndicatorStore.add('Loading');
+    const indicator = IndicatorStore.add('Loading');
     wrapper.update();
     expect(wrapper.find('ToastIndicator')).toHaveLength(1);
     expect(wrapper.find('Message').text()).toBe('Loading');
diff --git a/tests/js/spec/components/installPromptBanner.spec.jsx b/tests/js/spec/components/installPromptBanner.spec.jsx
index d4f8040755..65242cc385 100644
--- a/tests/js/spec/components/installPromptBanner.spec.jsx
+++ b/tests/js/spec/components/installPromptBanner.spec.jsx
@@ -4,10 +4,10 @@ import InstallPromptBanner from 'app/components/installPromptBanner';
 
 describe('InstallPromptBanner', function() {
   it('renders', function() {
-    let project1 = TestStubs.Project();
-    let project2 = TestStubs.Project({firstEvent: null});
-    let organization = TestStubs.Organization({projects: [project1, project2]});
-    let wrapper = shallow(
+    const project1 = TestStubs.Project();
+    const project2 = TestStubs.Project({firstEvent: null});
+    const organization = TestStubs.Organization({projects: [project1, project2]});
+    const wrapper = shallow(
       <InstallPromptBanner organization={organization} />,
       TestStubs.routerContext()
     );
@@ -16,10 +16,10 @@ describe('InstallPromptBanner', function() {
   });
 
   it('does not render if first event sent', function() {
-    let project1 = TestStubs.Project();
-    let project2 = TestStubs.Project({firstEvent: '2018-03-18'});
-    let organization = TestStubs.Organization({projects: [project1, project2]});
-    let wrapper = shallow(
+    const project1 = TestStubs.Project();
+    const project2 = TestStubs.Project({firstEvent: '2018-03-18'});
+    const organization = TestStubs.Organization({projects: [project1, project2]});
+    const wrapper = shallow(
       <InstallPromptBanner organization={organization} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/components/issueDiff.spec.jsx b/tests/js/spec/components/issueDiff.spec.jsx
index 03b9c10aa2..dd72543b3c 100644
--- a/tests/js/spec/components/issueDiff.spec.jsx
+++ b/tests/js/spec/components/issueDiff.spec.jsx
@@ -7,11 +7,11 @@ import entries from '../../mocks/entries';
 jest.mock('app/api');
 
 describe('IssueDiff', function() {
-  let routerContext = TestStubs.routerContext();
-  let api = new MockApiClient();
+  const routerContext = TestStubs.routerContext();
+  const api = new MockApiClient();
 
   it('is loading when initially rendering', function() {
-    let wrapper = shallow(<IssueDiff baseIssueId="base" targetIssueId="target" />);
+    const wrapper = shallow(<IssueDiff baseIssueId="base" targetIssueId="target" />);
     expect(wrapper.find('SplitDiff')).toHaveLength(0);
     expect(wrapper).toMatchSnapshot();
   });
@@ -32,7 +32,7 @@ describe('IssueDiff', function() {
     });
 
     // Need `mount` because of componentDidMount in <IssueDiff>
-    let wrapper = mount(
+    const wrapper = mount(
       <IssueDiff api={api} baseIssueId="base" targetIssueId="target" />,
       routerContext
     );
@@ -60,7 +60,7 @@ describe('IssueDiff', function() {
     });
 
     // Need `mount` because of componentDidMount in <IssueDiff>
-    let wrapper = mount(
+    const wrapper = mount(
       <IssueDiff api={api} baseIssueId="base" targetIssueId="target" />,
       routerContext
     );
diff --git a/tests/js/spec/components/issueSyncListElement.spec.jsx b/tests/js/spec/components/issueSyncListElement.spec.jsx
index 975d302fb8..63df3f0ec6 100644
--- a/tests/js/spec/components/issueSyncListElement.spec.jsx
+++ b/tests/js/spec/components/issueSyncListElement.spec.jsx
@@ -4,13 +4,13 @@ import IssueSyncListElement from 'app/components/issueSyncListElement';
 
 describe('AlertLink', function() {
   it('renders', function() {
-    let wrapper = shallow(<IssueSyncListElement integrationType="github" />);
+    const wrapper = shallow(<IssueSyncListElement integrationType="github" />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('can open', function() {
-    let onOpen = jest.fn();
-    let wrapper = shallow(
+    const onOpen = jest.fn();
+    const wrapper = shallow(
       <IssueSyncListElement integrationType="github" onOpen={onOpen} />
     );
     expect(onOpen).not.toHaveBeenCalled();
@@ -19,10 +19,10 @@ describe('AlertLink', function() {
   });
 
   it('can close', function() {
-    let onClose = jest.fn();
-    let onOpen = jest.fn();
+    const onClose = jest.fn();
+    const onOpen = jest.fn();
 
-    let wrapper = mount(
+    const wrapper = mount(
       <IssueSyncListElement
         integrationType="github"
         externalIssueLink="github.com/issues/gh-101"
diff --git a/tests/js/spec/components/issues/snoozeAction.spec.jsx b/tests/js/spec/components/issues/snoozeAction.spec.jsx
index cc5d869f13..2f3350d615 100644
--- a/tests/js/spec/components/issues/snoozeAction.spec.jsx
+++ b/tests/js/spec/components/issues/snoozeAction.spec.jsx
@@ -15,14 +15,14 @@ describe('SnoozeAction', function() {
 
   describe('render()', function() {
     it('should show a gravatar when avatar type is gravatar', function() {
-      let wrapper = shallow(<SnoozeAction onSnooze={function() {}} />);
+      const wrapper = shallow(<SnoozeAction onSnooze={function() {}} />);
       expect(wrapper.find('h5').text()).toEqual('How long should we ignore this issue?');
     });
   });
 
   describe('click handlers', function() {
     it('30m link should call prop w/ value 30', function(done) {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <SnoozeAction
           onSnooze={function(duration) {
             expect(duration).toEqual(30);
@@ -39,7 +39,7 @@ describe('SnoozeAction', function() {
     });
 
     it('forever link should call prop w/ value undefined', function(done) {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <SnoozeAction
           onSnooze={function(duration) {
             expect(duration).toEqual(undefined);
diff --git a/tests/js/spec/components/lazyLoad.spec.jsx b/tests/js/spec/components/lazyLoad.spec.jsx
index 1f0275d917..f00dba6ed6 100644
--- a/tests/js/spec/components/lazyLoad.spec.jsx
+++ b/tests/js/spec/components/lazyLoad.spec.jsx
@@ -4,9 +4,9 @@ import LazyLoad from 'app/components/lazyLoad';
 
 describe('LazyLoad', function() {
   it('renders with a loading indicator when promise is not resolved yet', function() {
-    let promise = new Promise((resolve, reject) => {});
-    let getComponent = () => promise;
-    let wrapper = shallow(<LazyLoad component={getComponent} />);
+    const promise = new Promise((resolve, reject) => {});
+    const getComponent = () => promise;
+    const wrapper = shallow(<LazyLoad component={getComponent} />);
 
     // Should be loading
     expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
@@ -14,17 +14,17 @@ describe('LazyLoad', function() {
 
   it('renders when given a promise of a "button" component', async function() {
     let res;
-    let promise = new Promise((resolve, reject) => {
+    const promise = new Promise((resolve, reject) => {
       res = resolve;
     });
-    let getComponent = () => promise;
-    let wrapper = mount(<LazyLoad component={getComponent} />);
+    const getComponent = () => promise;
+    const wrapper = mount(<LazyLoad component={getComponent} />);
 
     // Should be loading
     expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
 
     // resolve with button
-    let ResolvedComponent = 'button';
+    const ResolvedComponent = 'button';
     res(ResolvedComponent);
 
     await promise;
@@ -39,7 +39,7 @@ describe('LazyLoad', function() {
   it('renders with error message when promise is rejected', async function() {
     // eslint-disable-next-line no-console
     console.error = jest.fn();
-    let getComponent = jest.fn(
+    const getComponent = jest.fn(
       () =>
         new Promise((resolve, reject) => reject(new Error('Could not load component')))
     );
diff --git a/tests/js/spec/components/letterAvatar.spec.jsx b/tests/js/spec/components/letterAvatar.spec.jsx
index a749b87dbe..fe6d3bc757 100644
--- a/tests/js/spec/components/letterAvatar.spec.jsx
+++ b/tests/js/spec/components/letterAvatar.spec.jsx
@@ -42,64 +42,64 @@ describe('LetterAvatar', function() {
 
   describe('getInitials()', function() {
     it('should get initials based on name', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1} />);
       expect(letterAvatar.getInitials()).toEqual('JD');
     });
 
     it('should get initials based on email', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_2} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_2} />);
       expect(letterAvatar.getInitials()).toEqual('J');
     });
 
     it('should get initials based on username', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3} />);
       expect(letterAvatar.getInitials()).toEqual('F');
     });
 
     it('should show question mark if user has no display name', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4} />);
       expect(letterAvatar.getInitials()).toEqual('?');
     });
 
     it('should show question mark even if display name is a space', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_7} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_7} />);
       expect(letterAvatar.getInitials()).toEqual('?');
     });
 
     it('should get initials based on name even if there are trailing spaces', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_6} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_6} />);
       expect(letterAvatar.getInitials()).toEqual('JD');
     });
 
     it('should not slice multibyte characters in half', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_8} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_8} />);
       expect(letterAvatar.getInitials()).toEqual('\u2603\u2603');
     });
 
     it('should pick most last name', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_9} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_9} />);
       expect(letterAvatar.getInitials()).toEqual('JD');
     });
   });
 
   describe('getColor()', function() {
     it('should return a color based on email', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1} />);
       expect(letterAvatar.getColor()).toEqual('#f868bc');
     });
 
     it('should return a color based on username', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3} />);
       expect(letterAvatar.getColor()).toEqual('#315cac');
     });
 
     it('should return a color based on id', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4} />);
       expect(letterAvatar.getColor()).toEqual('#57be8c');
     });
 
     it('should return a color based on ip address', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_5} />);
+      const letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_5} />);
       expect(letterAvatar.getColor()).toEqual('#ec5e44');
     });
   });
diff --git a/tests/js/spec/components/modals/commandPaletteModal.spec.jsx b/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
index 001d1cd58b..b9db38c6c3 100644
--- a/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
+++ b/tests/js/spec/components/modals/commandPaletteModal.spec.jsx
@@ -52,7 +52,7 @@ describe('Command Palette Modal', function() {
   });
 
   it('can open command palette modal and search', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <App params={{orgId: 'org-slug'}}>{<div>placeholder content</div>}</App>,
       TestStubs.routerContext([
         {
diff --git a/tests/js/spec/components/modals/createTeamModal.spec.jsx b/tests/js/spec/components/modals/createTeamModal.spec.jsx
index 2ee5a47f07..ffad88e931 100644
--- a/tests/js/spec/components/modals/createTeamModal.spec.jsx
+++ b/tests/js/spec/components/modals/createTeamModal.spec.jsx
@@ -10,10 +10,10 @@ jest.mock('app/actionCreators/teams', () => ({
 }));
 
 describe('CreateTeamModal', function() {
-  let org = TestStubs.Organization();
-  let closeModal = jest.fn();
-  let onClose = jest.fn();
-  let onSuccess = jest.fn();
+  const org = TestStubs.Organization();
+  const closeModal = jest.fn();
+  const onClose = jest.fn();
+  const onSuccess = jest.fn();
 
   beforeEach(function() {
     onClose.mockReset();
@@ -23,7 +23,7 @@ describe('CreateTeamModal', function() {
   afterEach(function() {});
 
   it('calls createTeam action creator on submit', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <CreateTeamModal
         Body={Modal.Body}
         Header={Modal.Header}
diff --git a/tests/js/spec/components/modals/diffModal.spec.jsx b/tests/js/spec/components/modals/diffModal.spec.jsx
index 059eb7e1d1..f596d168dc 100644
--- a/tests/js/spec/components/modals/diffModal.spec.jsx
+++ b/tests/js/spec/components/modals/diffModal.spec.jsx
@@ -14,7 +14,7 @@ describe('DiffModal', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(<DiffModal Body={({children}) => <div>{children}</div>} />);
+    const wrapper = shallow(<DiffModal Body={({children}) => <div>{children}</div>} />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx b/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
index 00743b5515..f76534cee3 100644
--- a/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
+++ b/tests/js/spec/components/modals/recoveryOptionsModal.spec.jsx
@@ -5,8 +5,8 @@ import {mount} from 'enzyme';
 import RecoveryOptionsModal from 'app/components/modals/recoveryOptionsModal';
 
 describe('RecoveryOptionsModal', function() {
-  let closeModal = jest.fn();
-  let onClose = jest.fn();
+  const closeModal = jest.fn();
+  const onClose = jest.fn();
   let wrapper;
 
   beforeEach(function() {
@@ -31,14 +31,14 @@ describe('RecoveryOptionsModal', function() {
   afterEach(function() {});
 
   it('can redirect to recovery codes if user skips backup phone setup', async function() {
-    let getRecoveryCodes = 'RecoveryOptionsModal Button[name="getCodes"]';
+    const getRecoveryCodes = 'RecoveryOptionsModal Button[name="getCodes"]';
     expect(wrapper.find(getRecoveryCodes)).toHaveLength(0);
 
     // skip backup phone setup
     wrapper.find('RecoveryOptionsModal Button[name="skipStep"]').simulate('click');
     expect(wrapper.find(getRecoveryCodes)).toHaveLength(1);
 
-    let mockId = TestStubs.Authenticators().Recovery().authId;
+    const mockId = TestStubs.Authenticators().Recovery().authId;
     expect(
       wrapper.find('RecoveryOptionsModal Button[name="getCodes"]').prop('to')
     ).toMatch(`/settings/account/security/mfa/${mockId}/`);
@@ -48,7 +48,7 @@ describe('RecoveryOptionsModal', function() {
   });
 
   it('can redirect to backup phone setup', async function() {
-    let backupPhone = 'RecoveryOptionsModal Button[name="addPhone"]';
+    const backupPhone = 'RecoveryOptionsModal Button[name="addPhone"]';
 
     expect(wrapper.find(backupPhone)).toHaveLength(1);
     expect(wrapper.find(backupPhone).prop('to')).toMatch(
@@ -76,7 +76,7 @@ describe('RecoveryOptionsModal', function() {
       />,
       TestStubs.routerContext()
     );
-    let mockId = TestStubs.Authenticators().Recovery().authId;
+    const mockId = TestStubs.Authenticators().Recovery().authId;
     expect(
       wrapper.find('RecoveryOptionsModal Button[name="getCodes"]').prop('to')
     ).toMatch(`/settings/account/security/mfa/${mockId}/`);
diff --git a/tests/js/spec/components/modals/sudoModal.spec.jsx b/tests/js/spec/components/modals/sudoModal.spec.jsx
index f850a38502..7ea071141c 100644
--- a/tests/js/spec/components/modals/sudoModal.spec.jsx
+++ b/tests/js/spec/components/modals/sudoModal.spec.jsx
@@ -46,12 +46,11 @@ describe('Sudo Modal', function() {
       ...ConfigStore.get('user'),
       hasPasswordAuth: true,
     });
-    let wrapper = mount(<App>{<div>placeholder content</div>}</App>);
+    const wrapper = mount(<App>{<div>placeholder content</div>}</App>);
 
-    let api = new Client();
-    let successCb = jest.fn();
-    let errorCb = jest.fn();
-    let orgDeleteMock;
+    const api = new Client();
+    const successCb = jest.fn();
+    const errorCb = jest.fn();
 
     // No Modal
     expect(wrapper.find('ModalDialog')).toHaveLength(0);
@@ -76,12 +75,12 @@ describe('Sudo Modal', function() {
 
     // Clear mocks and allow DELETE
     Client.clearMockResponses();
-    orgDeleteMock = Client.addMockResponse({
+    const orgDeleteMock = Client.addMockResponse({
       url: '/organizations/org-slug/',
       method: 'DELETE',
       statusCode: 200,
     });
-    let sudoMock = Client.addMockResponse({
+    const sudoMock = Client.addMockResponse({
       url: '/auth/',
       method: 'PUT',
       statusCode: 200,
@@ -131,11 +130,11 @@ describe('Sudo Modal', function() {
       ...ConfigStore.get('user'),
       hasPasswordAuth: false,
     });
-    let wrapper = mount(<App>{<div>placeholder content</div>}</App>);
+    const wrapper = mount(<App>{<div>placeholder content</div>}</App>);
 
-    let api = new Client();
-    let successCb = jest.fn();
-    let errorCb = jest.fn();
+    const api = new Client();
+    const successCb = jest.fn();
+    const errorCb = jest.fn();
 
     // No Modal
     expect(wrapper.find('ModalDialog')).toHaveLength(0);
diff --git a/tests/js/spec/components/multipleCheckbox.spec.js b/tests/js/spec/components/multipleCheckbox.spec.js
index 86e6504dba..7f85f9f9e1 100644
--- a/tests/js/spec/components/multipleCheckbox.spec.js
+++ b/tests/js/spec/components/multipleCheckbox.spec.js
@@ -4,7 +4,7 @@ import MultipleCheckbox from 'app/views/settings/components/forms/controls/multi
 
 describe('MultipleCheckbox', function() {
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <MultipleCheckbox
         choices={[[0, 'Choice A'], [1, 'Choice B'], [2, 'Choice C']]}
         value={[1]}
@@ -15,8 +15,8 @@ describe('MultipleCheckbox', function() {
   });
 
   it('unselects a checked input', function() {
-    let onChange = jest.fn();
-    let wrapper = mount(
+    const onChange = jest.fn();
+    const wrapper = mount(
       <MultipleCheckbox
         choices={[[0, 'Choice A'], [1, 'Choice B'], [2, 'Choice C']]}
         value={[1]}
@@ -32,8 +32,8 @@ describe('MultipleCheckbox', function() {
   });
 
   it('selects an unchecked input', function() {
-    let onChange = jest.fn();
-    let wrapper = mount(
+    const onChange = jest.fn();
+    const wrapper = mount(
       <MultipleCheckbox
         choices={[[0, 'Choice A'], [1, 'Choice B'], [2, 'Choice C']]}
         value={[1]}
diff --git a/tests/js/spec/components/mutedBox.spec.jsx b/tests/js/spec/components/mutedBox.spec.jsx
index ccdeb0bef3..aa6731cf1f 100644
--- a/tests/js/spec/components/mutedBox.spec.jsx
+++ b/tests/js/spec/components/mutedBox.spec.jsx
@@ -6,33 +6,33 @@ import MutedBox from 'app/components/mutedBox';
 describe('MutedBox', function() {
   describe('render()', function() {
     it('handles ignoreUntil', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MutedBox statusDetails={{ignoreUntil: '2017-06-21T19:45:10Z'}} />
       );
       expect(wrapper).toMatchSnapshot();
     });
     it('handles ignoreCount', function() {
-      let wrapper = shallow(<MutedBox statusDetails={{ignoreUserCount: 100}} />);
+      const wrapper = shallow(<MutedBox statusDetails={{ignoreUserCount: 100}} />);
       expect(wrapper).toMatchSnapshot();
     });
     it('handles ignoreCount with ignoreWindow', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MutedBox statusDetails={{ignoreCount: 100, ignoreWindow: 1}} />
       );
       expect(wrapper).toMatchSnapshot();
     });
     it('handles ignoreUserCount', function() {
-      let wrapper = shallow(<MutedBox statusDetails={{ignoreUserCount: 100}} />);
+      const wrapper = shallow(<MutedBox statusDetails={{ignoreUserCount: 100}} />);
       expect(wrapper).toMatchSnapshot();
     });
     it('handles ignoreUserCount with ignoreUserWindow', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <MutedBox statusDetails={{ignoreUserCount: 100, ignoreUserWindow: 1}} />
       );
       expect(wrapper).toMatchSnapshot();
     });
     it('handles default', function() {
-      let wrapper = shallow(<MutedBox statusDetails={{}} />);
+      const wrapper = shallow(<MutedBox statusDetails={{}} />);
       expect(wrapper).toMatchSnapshot();
     });
   });
diff --git a/tests/js/spec/components/narrowLayout.spec.jsx b/tests/js/spec/components/narrowLayout.spec.jsx
index 62389fc359..3def7c17c6 100644
--- a/tests/js/spec/components/narrowLayout.spec.jsx
+++ b/tests/js/spec/components/narrowLayout.spec.jsx
@@ -5,20 +5,20 @@ import NarrowLayout from 'app/components/narrowLayout';
 
 describe('NarrowLayout', function() {
   it('renders without logout', function() {
-    let wrapper = mount(<NarrowLayout />);
+    const wrapper = mount(<NarrowLayout />);
     expect(wrapper.find('a.logout')).toHaveLength(0);
   });
   it('renders with logout', function() {
-    let wrapper = mount(<NarrowLayout showLogout />);
+    const wrapper = mount(<NarrowLayout showLogout />);
     expect(wrapper.find('a.logout')).toHaveLength(1);
   });
   it('can logout', function() {
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: '/auth/',
       method: 'DELETE',
       status: 204,
     });
-    let wrapper = mount(<NarrowLayout showLogout />);
+    const wrapper = mount(<NarrowLayout showLogout />);
 
     wrapper.find('a.logout').simulate('click');
     expect(mock).toHaveBeenCalled();
diff --git a/tests/js/spec/components/noteInput.spec.jsx b/tests/js/spec/components/noteInput.spec.jsx
index b3e4832fcb..40146b13e6 100644
--- a/tests/js/spec/components/noteInput.spec.jsx
+++ b/tests/js/spec/components/noteInput.spec.jsx
@@ -26,7 +26,7 @@ describe('NoteInput', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <NoteInput group={{project: {}}} memberList={[]} sessionUser={{}} />,
       TestStubs.routerContext()
     );
@@ -34,24 +34,24 @@ describe('NoteInput', function() {
   });
 
   it('submits when meta + enter is pressed', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <NoteInput group={{project: {}, id: 'groupId'}} memberList={[]} sessionUser={{}} />,
       TestStubs.routerContext()
     );
 
-    let input = wrapper.find('textarea');
+    const input = wrapper.find('textarea');
 
     input.simulate('keyDown', {key: 'Enter', metaKey: true});
     expect(spy).toHaveBeenCalled();
   });
 
   it('submits when ctrl + enter is pressed', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <NoteInput group={{project: {}, id: 'groupId'}} memberList={[]} sessionUser={{}} />,
       TestStubs.routerContext()
     );
 
-    let input = wrapper.find('textarea');
+    const input = wrapper.find('textarea');
 
     input.simulate('keyDown', {key: 'Enter', ctrlKey: true});
     expect(spy).toHaveBeenCalled();
@@ -64,12 +64,12 @@ describe('NoteInput', function() {
       body: {detail: {message: '', code: 401, extra: ''}},
       statusCode: 401,
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <NoteInput group={{project: {}, id: 'groupId'}} memberList={[]} sessionUser={{}} />,
       TestStubs.routerContext()
     );
 
-    let input = wrapper.find('textarea');
+    const input = wrapper.find('textarea');
 
     input.simulate('keyDown', {key: 'Enter', ctrlKey: true});
     wrapper.update();
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 746e58b01f..e0f3ca7d6e 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -105,7 +105,7 @@ describe('GlobalSelectionHeader', function() {
   });
 
   it('updates GlobalSelection store when re-rendered with different query params', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <GlobalSelectionHeader organization={organization} />,
       changeQuery(routerContext, {
         statsPeriod: '7d',
@@ -142,7 +142,7 @@ describe('GlobalSelectionHeader', function() {
   });
 
   it('does not update store if url params have not changed', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <GlobalSelectionHeader organization={organization} />,
       changeQuery(routerContext, {
         statsPeriod: '7d',
diff --git a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
index 4faacd6766..76ba667943 100644
--- a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
@@ -7,8 +7,8 @@ import MultipleEnvironmentSelector from 'app/components/organizations/multipleEn
 describe('MultipleEnvironmentSelector', function() {
   let getMock;
   let wrapper;
-  let onChange = jest.fn();
-  let onUpdate = jest.fn();
+  const onChange = jest.fn();
+  const onUpdate = jest.fn();
   const organization = TestStubs.Organization({});
   const envs = TestStubs.Environments();
   const routerContext = TestStubs.routerContext([
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
index cde6edfc58..6a84949b7b 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateRange.spec.jsx
@@ -34,8 +34,8 @@ const getSelectedRange = wrapper => {
 
 describe('DateRange', function() {
   let wrapper;
-  let onChange = jest.fn();
-  let routerContext = TestStubs.routerContext();
+  const onChange = jest.fn();
+  const routerContext = TestStubs.routerContext();
 
   beforeAll(function() {
     MockDate.set(new Date('2017-10-16T23:41:20.000Z'));
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
index c99c98d96b..6206dbf8f0 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/dateSummary.spec.jsx
@@ -8,7 +8,7 @@ const end = new Date('2017-10-17T02:38:00.000Z'); // National Pasta Day
 
 describe('DateSummary', function() {
   let wrapper;
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   const createWrapper = (props = {}) =>
     mount(<DateSummary utc start={start} end={end} {...props} />, routerContext);
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
index 8e6e657aba..6f752cb307 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
@@ -6,8 +6,8 @@ import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 
 describe('TimeRangeSelector', function() {
   let wrapper;
-  let onChange = jest.fn();
-  let routerContext = TestStubs.routerContext();
+  const onChange = jest.fn();
+  const routerContext = TestStubs.routerContext();
 
   const createWrapper = (props = {}) =>
     mount(
diff --git a/tests/js/spec/components/pageHeader.spec.jsx b/tests/js/spec/components/pageHeader.spec.jsx
index a83238a3e8..44e1981372 100644
--- a/tests/js/spec/components/pageHeader.spec.jsx
+++ b/tests/js/spec/components/pageHeader.spec.jsx
@@ -4,7 +4,7 @@ import PageHeading from 'app/components/pageHeading';
 
 describe('PageHeading', function() {
   it('renders', function() {
-    let wrapper = shallow(<PageHeading>New Header</PageHeading>);
+    const wrapper = shallow(<PageHeading>New Header</PageHeading>);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/pluginIcon.spec.jsx b/tests/js/spec/components/pluginIcon.spec.jsx
index 97176a7d94..ad32356fb1 100644
--- a/tests/js/spec/components/pluginIcon.spec.jsx
+++ b/tests/js/spec/components/pluginIcon.spec.jsx
@@ -9,14 +9,14 @@ jest.mock('images/integrations/github-logo.png', () => 'github', {});
 
 describe('PluginIcon', function() {
   it('renders', function() {
-    let wrapper = shallow(<PluginIcon pluginId="github" size={20} />);
+    const wrapper = shallow(<PluginIcon pluginId="github" size={20} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   // doesn't work because of the above comment
   // eslint-disable-next-line jest/no-disabled-tests
   it.skip('renders with default icon with invalid plugin id', function() {
-    let wrapper = shallow(<PluginIcon pluginId="invalid" size={20} />);
+    const wrapper = shallow(<PluginIcon pluginId="invalid" size={20} />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
index 951013a4f1..68c8c45973 100644
--- a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
+++ b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
@@ -37,7 +37,7 @@ describe('ProjectHeaderProjectSelector', function() {
   const openMenu = wrapper => wrapper.find('DropdownLabel').simulate('click');
 
   it('renders with "Select a project" when no project is selected', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectHeaderProjectSelector organization={mockOrg} projectId="" />,
       routerContext
     );
@@ -46,7 +46,7 @@ describe('ProjectHeaderProjectSelector', function() {
   });
 
   it('has project label when project is selected', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectHeaderProjectSelector organization={mockOrg} projectId="" />,
       routerContext
     );
@@ -66,8 +66,8 @@ describe('ProjectHeaderProjectSelector', function() {
   });
 
   it('calls `router.push` when a project is selected', function() {
-    let routerMock = TestStubs.router();
-    let wrapper = mount(
+    const routerMock = TestStubs.router();
+    const wrapper = mount(
       <ProjectHeaderProjectSelector
         organization={mockOrg}
         projectId=""
diff --git a/tests/js/spec/components/projectSelector.spec.jsx b/tests/js/spec/components/projectSelector.spec.jsx
index f05a40bccf..a09e92c348 100644
--- a/tests/js/spec/components/projectSelector.spec.jsx
+++ b/tests/js/spec/components/projectSelector.spec.jsx
@@ -46,7 +46,7 @@ describe('ProjectSelector', function() {
   };
 
   it('should show empty message with no projects button, when no projects, and has no "project:write" access', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectSelector
         {...props}
         organization={{
@@ -66,7 +66,7 @@ describe('ProjectSelector', function() {
   });
 
   it('should show empty message and create project button, when no projects and has "project:write" access', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectSelector
         {...props}
         organization={{
@@ -86,13 +86,13 @@ describe('ProjectSelector', function() {
   });
 
   it('lists projects and has filter', function() {
-    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    const wrapper = mount(<ProjectSelector {...props} />, routerContext);
     openMenu(wrapper);
     expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
   });
 
   it('can filter projects by project name', function() {
-    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    const wrapper = mount(<ProjectSelector {...props} />, routerContext);
     openMenu(wrapper);
 
     wrapper.find('StyledInput').simulate('change', {target: {value: 'TEST'}});
@@ -103,7 +103,7 @@ describe('ProjectSelector', function() {
   });
 
   it('does not close dropdown when input is clicked', async function() {
-    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    const wrapper = mount(<ProjectSelector {...props} />, routerContext);
     openMenu(wrapper);
 
     wrapper.find('StyledInput').simulate('click');
@@ -113,7 +113,7 @@ describe('ProjectSelector', function() {
   });
 
   it('closes dropdown when project is selected', function() {
-    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    const wrapper = mount(<ProjectSelector {...props} />, routerContext);
     openMenu(wrapper);
 
     // Select first project
@@ -125,8 +125,8 @@ describe('ProjectSelector', function() {
   });
 
   it('calls callback when project is selected', function() {
-    let mock = jest.fn();
-    let wrapper = mount(<ProjectSelector {...props} onSelect={mock} />, routerContext);
+    const mock = jest.fn();
+    const wrapper = mount(<ProjectSelector {...props} onSelect={mock} />, routerContext);
     openMenu(wrapper);
 
     // Select first project
@@ -143,7 +143,7 @@ describe('ProjectSelector', function() {
   });
 
   it('shows empty filter message when filtering has no results', function() {
-    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    const wrapper = mount(<ProjectSelector {...props} />, routerContext);
     openMenu(wrapper);
 
     wrapper.find('StyledInput').simulate('change', {target: {value: 'Foo'}});
@@ -151,8 +151,8 @@ describe('ProjectSelector', function() {
   });
 
   it('does not call `onSelect` when using multi select', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ProjectSelector {...props} multi onSelect={mock} />,
       routerContext
     );
@@ -169,8 +169,8 @@ describe('ProjectSelector', function() {
   });
 
   it('calls `onMultiSelect` and render prop when using multi select as an uncontrolled component', async function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ProjectSelector {...props} multi onMultiSelect={mock} />,
       routerContext
     );
diff --git a/tests/js/spec/components/pullRequestLink.spec.jsx b/tests/js/spec/components/pullRequestLink.spec.jsx
index 181b519fd9..d5ca589af4 100644
--- a/tests/js/spec/components/pullRequestLink.spec.jsx
+++ b/tests/js/spec/components/pullRequestLink.spec.jsx
@@ -5,12 +5,12 @@ import PullRequestLink from 'app/components/pullRequestLink';
 
 describe('PullRequestLink', function() {
   it('renders no url on missing externalUrl', function() {
-    let repository = TestStubs.Repository({provider: null});
-    let pullRequest = TestStubs.PullRequest({
+    const repository = TestStubs.Repository({provider: null});
+    const pullRequest = TestStubs.PullRequest({
       repository,
       externalUrl: null,
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <PullRequestLink repository={repository} pullRequest={pullRequest} />
     );
 
@@ -19,81 +19,81 @@ describe('PullRequestLink', function() {
   });
 
   it('renders github links for integrations:github repositories', function() {
-    let repository = TestStubs.Repository({
+    const repository = TestStubs.Repository({
       provider: {
         id: 'integrations:github',
       },
     });
-    let pullRequest = TestStubs.PullRequest({repository});
-    let wrapper = mount(
+    const pullRequest = TestStubs.PullRequest({repository});
+    const wrapper = mount(
       <PullRequestLink repository={repository} pullRequest={pullRequest} />
     );
 
-    let icon = wrapper.find('InlineSvg');
+    const icon = wrapper.find('InlineSvg');
     expect(icon).toHaveLength(1);
     expect(icon.props().src).toEqual('icon-github');
 
-    let link = wrapper.find('a');
+    const link = wrapper.find('a');
     expect(link).toHaveLength(1);
     expect(link.text().trim()).toEqual('example/repo-name #3: Fix first issue');
   });
 
   it('renders github links for github repositories', function() {
-    let repository = TestStubs.Repository({
+    const repository = TestStubs.Repository({
       provider: {
         id: 'github',
       },
     });
-    let pullRequest = TestStubs.PullRequest({repository});
-    let wrapper = mount(
+    const pullRequest = TestStubs.PullRequest({repository});
+    const wrapper = mount(
       <PullRequestLink repository={repository} pullRequest={pullRequest} />
     );
 
-    let icon = wrapper.find('InlineSvg');
+    const icon = wrapper.find('InlineSvg');
     expect(icon).toHaveLength(1);
     expect(icon.props().src).toEqual('icon-github');
 
-    let link = wrapper.find('a');
+    const link = wrapper.find('a');
     expect(link).toHaveLength(1);
     expect(link.text().trim()).toEqual('example/repo-name #3: Fix first issue');
   });
 
   it('renders gitlab links for integrations:gitlab repositories', function() {
-    let repository = TestStubs.Repository({
+    const repository = TestStubs.Repository({
       provider: {
         id: 'integrations:gitlab',
       },
     });
-    let pullRequest = TestStubs.PullRequest({repository});
-    let wrapper = mount(
+    const pullRequest = TestStubs.PullRequest({repository});
+    const wrapper = mount(
       <PullRequestLink repository={repository} pullRequest={pullRequest} />
     );
 
-    let icon = wrapper.find('InlineSvg');
+    const icon = wrapper.find('InlineSvg');
     expect(icon).toHaveLength(1);
     expect(icon.props().src).toEqual('icon-gitlab');
 
-    let link = wrapper.find('a');
+    const link = wrapper.find('a');
     expect(link).toHaveLength(1);
     expect(link.text().trim()).toEqual('example/repo-name #3: Fix first issue');
   });
 
   it('renders github links for gitlab repositories', function() {
-    let repository = TestStubs.Repository({
+    const repository = TestStubs.Repository({
       provider: {
         id: 'gitlab',
       },
     });
-    let pullRequest = TestStubs.PullRequest({repository});
-    let wrapper = mount(
+    const pullRequest = TestStubs.PullRequest({repository});
+    const wrapper = mount(
       <PullRequestLink repository={repository} pullRequest={pullRequest} />
     );
 
-    let icon = wrapper.find('InlineSvg');
+    const icon = wrapper.find('InlineSvg');
     expect(icon).toHaveLength(1);
     expect(icon.props().src).toEqual('icon-gitlab');
 
-    let link = wrapper.find('a');
+    const link = wrapper.find('a');
     expect(link).toHaveLength(1);
     expect(link.text().trim()).toEqual('example/repo-name #3: Fix first issue');
   });
diff --git a/tests/js/spec/components/qrcode.spec.jsx b/tests/js/spec/components/qrcode.spec.jsx
index 8695531790..9a6a563192 100644
--- a/tests/js/spec/components/qrcode.spec.jsx
+++ b/tests/js/spec/components/qrcode.spec.jsx
@@ -4,7 +4,7 @@ import Qrcode from 'app/components/qrcode';
 
 describe('Qrcode', function() {
   it('renders', function() {
-    let wrapper = shallow(<Qrcode code={[[0, 1, 1, 0, 0, 0, 0, 0]]} />);
+    const wrapper = shallow(<Qrcode code={[[0, 1, 1, 0, 0, 0, 0, 0]]} />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/rangeSlider.spec.jsx b/tests/js/spec/components/rangeSlider.spec.jsx
index 1d52b48f17..7b56954633 100644
--- a/tests/js/spec/components/rangeSlider.spec.jsx
+++ b/tests/js/spec/components/rangeSlider.spec.jsx
@@ -3,26 +3,26 @@ import {mount, shallow} from 'enzyme';
 import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
 
 describe('RangeSlider', function() {
-  let creator = props => (
+  const creator = props => (
     <RangeSlider name="test" value={5} min={0} max={10} onChange={() => {}} {...props} />
   );
 
   it('changes value', function() {
-    let wrapper = shallow(creator());
+    const wrapper = shallow(creator());
     expect(wrapper.state('sliderValue')).toBe(5);
     wrapper.find('Slider').simulate('input', {target: {value: 7}});
     expect(wrapper.state('sliderValue')).toBe(7);
   });
 
   it('has right label', function() {
-    let wrapper = mount(creator());
+    const wrapper = mount(creator());
     expect(wrapper.find('Label').text()).toBe('5');
     wrapper.find('Slider').simulate('input', {target: {value: 7}});
     expect(wrapper.find('Label').text()).toBe('7');
   });
 
   it('can use formatLabel', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       creator({
         formatLabel: value => (
           <div className="test">{value === 7 ? 'SEVEN!' : value + 1}</div>
@@ -36,8 +36,8 @@ describe('RangeSlider', function() {
   });
 
   it('calls onChange', function() {
-    let onChange = jest.fn();
-    let wrapper = shallow(
+    const onChange = jest.fn();
+    const wrapper = shallow(
       creator({
         onChange,
       })
@@ -48,8 +48,8 @@ describe('RangeSlider', function() {
   });
 
   it('can provide a list of allowedValues', function() {
-    let onChange = jest.fn();
-    let wrapper = mount(
+    const onChange = jest.fn();
+    const wrapper = mount(
       creator({
         // support unsorted arrays?
         allowedValues: [0, 100, 1000, 10000, 20000],
@@ -71,8 +71,8 @@ describe('RangeSlider', function() {
   });
 
   it('handles invalid values', function() {
-    let onChange = jest.fn();
-    let wrapper = mount(
+    const onChange = jest.fn();
+    const wrapper = mount(
       creator({
         // support unsorted arrays?
         allowedValues: [0, 100, 1000, 10000, 20000],
diff --git a/tests/js/spec/components/repositoryRow.spec.jsx b/tests/js/spec/components/repositoryRow.spec.jsx
index 9e7b9653af..d8a9cda511 100644
--- a/tests/js/spec/components/repositoryRow.spec.jsx
+++ b/tests/js/spec/components/repositoryRow.spec.jsx
@@ -48,7 +48,7 @@ describe('RepositoryRow', function() {
       expect(wrapper.find('Button[icon="icon-trash"]').props().disabled).toEqual(true);
 
       // Cancel button active
-      let cancel = wrapper.find('Button[data-test-id="repo-cancel"]');
+      const cancel = wrapper.find('Button[data-test-id="repo-cancel"]');
       expect(cancel).toHaveLength(1);
       expect(cancel.props().disabled).toEqual(false);
     });
@@ -91,7 +91,7 @@ describe('RepositoryRow', function() {
     const routerContext = TestStubs.routerContext([{organization}]);
 
     it('sends api request on delete', async function() {
-      let deleteRepo = Client.addMockResponse({
+      const deleteRepo = Client.addMockResponse({
         url: `/organizations/${organization.slug}/repos/${repository.id}/`,
         method: 'DELETE',
         statusCode: 204,
@@ -120,7 +120,7 @@ describe('RepositoryRow', function() {
     const routerContext = TestStubs.routerContext([{organization}]);
 
     it('sends api request to cancel', async function() {
-      let cancel = Client.addMockResponse({
+      const cancel = Client.addMockResponse({
         url: `/organizations/${organization.slug}/repos/${pendingRepo.id}/`,
         method: 'PUT',
         statusCode: 204,
diff --git a/tests/js/spec/components/resolutionBox.spec.jsx b/tests/js/spec/components/resolutionBox.spec.jsx
index 7a504f05a6..4b9aa60b1f 100644
--- a/tests/js/spec/components/resolutionBox.spec.jsx
+++ b/tests/js/spec/components/resolutionBox.spec.jsx
@@ -6,7 +6,7 @@ import ResolutionBox from 'app/components/resolutionBox';
 describe('ResolutionBox', function() {
   describe('render()', function() {
     it('handles inNextRelease', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ResolutionBox
           statusDetails={{inNextRelease: true}}
           orgId={'org'}
@@ -16,7 +16,7 @@ describe('ResolutionBox', function() {
       expect(wrapper).toMatchSnapshot();
     });
     it('handles inNextRelease with actor', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ResolutionBox
           statusDetails={{
             inNextRelease: true,
@@ -29,7 +29,7 @@ describe('ResolutionBox', function() {
       expect(wrapper).toMatchSnapshot();
     });
     it('handles inRelease', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ResolutionBox
           statusDetails={{
             inRelease: '1.0',
@@ -41,7 +41,7 @@ describe('ResolutionBox', function() {
       expect(wrapper).toMatchSnapshot();
     });
     it('handles inRelease with actor', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ResolutionBox
           statusDetails={{
             inRelease: '1.0',
@@ -54,13 +54,13 @@ describe('ResolutionBox', function() {
       expect(wrapper).toMatchSnapshot();
     });
     it('handles default', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ResolutionBox statusDetails={{}} orgId={'org'} projectId={'project'} />
       );
       expect(wrapper).toMatchSnapshot();
     });
     it('handles inCommit', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ResolutionBox
           statusDetails={{
             inCommit: TestStubs.Commit(),
diff --git a/tests/js/spec/components/returnButton.spec.jsx b/tests/js/spec/components/returnButton.spec.jsx
index 7ba636b52c..7d254f516f 100644
--- a/tests/js/spec/components/returnButton.spec.jsx
+++ b/tests/js/spec/components/returnButton.spec.jsx
@@ -4,7 +4,7 @@ import ReturnButton from 'app/views/settings/components/forms/returnButton';
 
 describe('returnButton', function() {
   it('renders', function() {
-    let wrapper = shallow(<ReturnButton />);
+    const wrapper = shallow(<ReturnButton />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/scoreBar.spec.jsx b/tests/js/spec/components/scoreBar.spec.jsx
index 8225f04403..cb02df8136 100644
--- a/tests/js/spec/components/scoreBar.spec.jsx
+++ b/tests/js/spec/components/scoreBar.spec.jsx
@@ -14,32 +14,32 @@ describe('ScoreBar', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(<ScoreBar size={60} thickness={2} score={3} />);
+    const wrapper = shallow(<ScoreBar size={60} thickness={2} score={3} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders vertically', function() {
-    let wrapper = shallow(<ScoreBar size={60} thickness={2} vertical score={2} />);
+    const wrapper = shallow(<ScoreBar size={60} thickness={2} vertical score={2} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders with score = 0', function() {
-    let wrapper = shallow(<ScoreBar size={60} thickness={2} score={0} />);
+    const wrapper = shallow(<ScoreBar size={60} thickness={2} score={0} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders with score > max score', function() {
-    let wrapper = shallow(<ScoreBar size={60} thickness={2} score={10} />);
+    const wrapper = shallow(<ScoreBar size={60} thickness={2} score={10} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders with < 0 score', function() {
-    let wrapper = shallow(<ScoreBar size={60} thickness={2} score={-2} />);
+    const wrapper = shallow(<ScoreBar size={60} thickness={2} score={-2} />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('has custom palette', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ScoreBar
         vertical
         size={60}
diff --git a/tests/js/spec/components/search/sources/apiSource.spec.jsx b/tests/js/spec/components/search/sources/apiSource.spec.jsx
index ee70325999..95dabe36be 100644
--- a/tests/js/spec/components/search/sources/apiSource.spec.jsx
+++ b/tests/js/spec/components/search/sources/apiSource.spec.jsx
@@ -5,7 +5,7 @@ import {ApiSource} from 'app/components/search/sources/apiSource';
 
 describe('ApiSource', function() {
   let wrapper;
-  let org = TestStubs.Organization();
+  const org = TestStubs.Organization();
   let orgsMock;
   let projectsMock;
   let teamsMock;
@@ -56,7 +56,7 @@ describe('ApiSource', function() {
   });
 
   it('queries all API endpoints', function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(
       <ApiSource params={{orgId: org.slug}} query="foo">
         {mock}
@@ -73,7 +73,7 @@ describe('ApiSource', function() {
   });
 
   it('only queries for shortids when query matches shortid format', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(
       <ApiSource params={{orgId: org.slug}} query="test-">
         {mock}
@@ -117,7 +117,7 @@ describe('ApiSource', function() {
   });
 
   it('only queries for eventids when query matches eventid format of 32 chars', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(
       <ApiSource params={{orgId: org.slug}} query="1234567890123456789012345678901">
         {mock}
@@ -163,7 +163,7 @@ describe('ApiSource', function() {
   });
 
   it('only queries org endpoint if there is no org in context', function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(
       <ApiSource params={{}} query="foo">
         {mock}
@@ -178,7 +178,7 @@ describe('ApiSource', function() {
   });
 
   it('render function is called with correct results', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(
       <ApiSource params={{orgId: org.slug}} query="foo">
         {mock}
@@ -260,7 +260,7 @@ describe('ApiSource', function() {
   });
 
   it('render function is called with correct results when API requests partially succeed', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
 
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/projects/',
@@ -309,7 +309,7 @@ describe('ApiSource', function() {
   });
 
   it('render function is updated as query changes', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(
       <ApiSource params={{orgId: org.slug}} query="foo">
         {mock}
diff --git a/tests/js/spec/components/search/sources/formSource.spec.jsx b/tests/js/spec/components/search/sources/formSource.spec.jsx
index 8b04995d2e..7c8d269321 100644
--- a/tests/js/spec/components/search/sources/formSource.spec.jsx
+++ b/tests/js/spec/components/search/sources/formSource.spec.jsx
@@ -7,7 +7,7 @@ import * as ActionCreators from 'app/actionCreators/formSearch';
 
 describe('FormSource', function() {
   let wrapper;
-  let searchMap = [
+  const searchMap = [
     {
       title: 'Test Field',
       description: 'test-help',
@@ -41,13 +41,13 @@ describe('FormSource', function() {
   });
 
   it('can find a form field', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(<FormSource query="te">{mock}</FormSource>);
 
     await tick();
     await tick();
     wrapper.update();
-    let calls = mock.mock.calls;
+    const calls = mock.mock.calls;
     expect(calls[calls.length - 1][0].results[0].item).toEqual({
       field: {
         label: 'Test Field',
@@ -64,7 +64,7 @@ describe('FormSource', function() {
   });
 
   it('does not find any form field ', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(<FormSource query="invalid">{mock}</FormSource>);
 
     await tick();
diff --git a/tests/js/spec/components/search/sources/routeSource.spec.jsx b/tests/js/spec/components/search/sources/routeSource.spec.jsx
index 05764b2112..0c78655c7c 100644
--- a/tests/js/spec/components/search/sources/routeSource.spec.jsx
+++ b/tests/js/spec/components/search/sources/routeSource.spec.jsx
@@ -7,12 +7,12 @@ describe('RouteSource', function() {
   let wrapper;
 
   it('can find a route', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(<RouteSource query="password">{mock}</RouteSource>);
 
     await tick();
     wrapper.update();
-    let calls = mock.mock.calls;
+    const calls = mock.mock.calls;
     expect(calls[calls.length - 1][0].results[0].item).toEqual({
       description: 'Change your account password and/or two factor authentication',
       path: '/settings/account/security/',
@@ -24,7 +24,7 @@ describe('RouteSource', function() {
   });
 
   it('does not find any form field ', async function() {
-    let mock = jest.fn().mockReturnValue(null);
+    const mock = jest.fn().mockReturnValue(null);
     wrapper = mount(<RouteSource query="invalid">{mock}</RouteSource>);
 
     await tick();
diff --git a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
index 23ef0d779b..7c8b6403c4 100644
--- a/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
+++ b/tests/js/spec/components/settingsBreadcrumbDropdown.spec.jsx
@@ -9,8 +9,8 @@ const CLOSE_DELAY = 0;
 
 describe('Settings Breadcrumb Dropdown', function() {
   let wrapper;
-  let selectMock = jest.fn();
-  let items = [{value: '1', label: 'foo'}, {value: '2', label: 'bar'}];
+  const selectMock = jest.fn();
+  const items = [{value: '1', label: 'foo'}, {value: '2', label: 'bar'}];
 
   beforeEach(function() {
     wrapper = mount(
diff --git a/tests/js/spec/components/settingsLayout.spec.jsx b/tests/js/spec/components/settingsLayout.spec.jsx
index a19af2dae5..91ab17026d 100644
--- a/tests/js/spec/components/settingsLayout.spec.jsx
+++ b/tests/js/spec/components/settingsLayout.spec.jsx
@@ -32,14 +32,14 @@ describe('SettingsLayout', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(<SettingsLayout route={{}} routes={[]} />);
+    const wrapper = shallow(<SettingsLayout route={{}} routes={[]} />);
 
     expect(wrapper).toMatchSnapshot();
   });
 
   it('can render navigation', function() {
     const Navigation = () => <div>Navigation</div>;
-    let wrapper = shallow(
+    const wrapper = shallow(
       <SettingsLayout route={{}} routes={[]} renderNavigation={() => <Navigation />} />
     );
 
diff --git a/tests/js/spec/components/shareIssue.spec.jsx b/tests/js/spec/components/shareIssue.spec.jsx
index da1f50ef23..f4a2ce8fc9 100644
--- a/tests/js/spec/components/shareIssue.spec.jsx
+++ b/tests/js/spec/components/shareIssue.spec.jsx
@@ -4,14 +4,14 @@ import ShareIssue from 'app/components/shareIssue';
 
 describe('ShareIssue', function() {
   it('renders when not shared', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ShareIssue isSharing={false} onToggle={() => {}} onShare={() => {}} />
     );
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders when shared ', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ShareIssue
         isSharing={true}
         onToggle={() => {}}
@@ -23,7 +23,7 @@ describe('ShareIssue', function() {
   });
 
   it('renders when busy', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ShareIssue onToggle={() => {}} onShare={() => {}} busy={true} />
     );
     expect(wrapper).toMatchSnapshot();
diff --git a/tests/js/spec/components/sidebar/index.spec.jsx b/tests/js/spec/components/sidebar/index.spec.jsx
index 0ca4a7ac18..e80dca31cc 100644
--- a/tests/js/spec/components/sidebar/index.spec.jsx
+++ b/tests/js/spec/components/sidebar/index.spec.jsx
@@ -7,12 +7,12 @@ import SidebarContainer, {Sidebar} from 'app/components/sidebar';
 
 describe('Sidebar', function() {
   let wrapper;
-  let routerContext = TestStubs.routerContext();
-  let {organization, router} = routerContext.context;
-  let user = TestStubs.User();
-  let apiMocks = {};
+  const routerContext = TestStubs.routerContext();
+  const {organization, router} = routerContext.context;
+  const user = TestStubs.User();
+  const apiMocks = {};
 
-  let createWrapper = props =>
+  const createWrapper = props =>
     mount(
       <Sidebar
         organization={organization}
@@ -102,7 +102,7 @@ describe('Sidebar', function() {
     it('can toggle help menu', function() {
       wrapper = createWrapper();
       wrapper.find('HelpActor').simulate('click');
-      let menu = wrapper.find('HelpMenu');
+      const menu = wrapper.find('HelpMenu');
       expect(menu).toHaveLength(1);
       expect(menu).toMatchSnapshot();
       expect(menu.find('SidebarMenuItem')).toHaveLength(3);
@@ -150,7 +150,7 @@ describe('Sidebar', function() {
     });
 
     it('has can logout', function() {
-      let mock = MockApiClient.addMockResponse({
+      const mock = MockApiClient.addMockResponse({
         url: '/auth/',
         method: 'DELETE',
         status: 204,
@@ -236,7 +236,7 @@ describe('Sidebar', function() {
     it('can unmount Sidebar (and Broadcasts) and kills Broadcast timers', async function() {
       jest.useFakeTimers();
       wrapper = createWrapper();
-      let broadcasts = wrapper.find('Broadcasts').instance();
+      const broadcasts = wrapper.find('Broadcasts').instance();
 
       // This will start timer to mark as seen
       await wrapper.find('Broadcasts SidebarItem').simulate('click');
diff --git a/tests/js/spec/components/sidebar/switchOrganization.spec.jsx b/tests/js/spec/components/sidebar/switchOrganization.spec.jsx
index 1eb0f92c53..5866c1b438 100644
--- a/tests/js/spec/components/sidebar/switchOrganization.spec.jsx
+++ b/tests/js/spec/components/sidebar/switchOrganization.spec.jsx
@@ -4,12 +4,12 @@ import {mount} from 'enzyme';
 import {SwitchOrganization} from 'app/components/sidebar/sidebarDropdown/switchOrganization';
 
 describe('SwitchOrganization', function() {
-  let routerContext = TestStubs.routerContext();
-  let {organization} = routerContext.context;
+  const routerContext = TestStubs.routerContext();
+  const {organization} = routerContext.context;
 
   it('can list organizations', function() {
     jest.useFakeTimers();
-    let wrapper = mount(
+    const wrapper = mount(
       <SwitchOrganization
         organizations={[organization, TestStubs.Organization({slug: 'org2'})]}
       />,
@@ -26,7 +26,7 @@ describe('SwitchOrganization', function() {
 
   it('shows "Create an Org" if they have permission', function() {
     jest.useFakeTimers();
-    let wrapper = mount(
+    const wrapper = mount(
       <SwitchOrganization
         organizations={[organization, TestStubs.Organization({slug: 'org2'})]}
         canCreateOrganization
@@ -45,7 +45,7 @@ describe('SwitchOrganization', function() {
 
   it('does not have "Create an Org" if they do not have permission', function() {
     jest.useFakeTimers();
-    let wrapper = mount(
+    const wrapper = mount(
       <SwitchOrganization
         organizations={[organization, TestStubs.Organization({slug: 'org2'})]}
         canCreateOrganization={false}
diff --git a/tests/js/spec/components/similarScoreCard.spec.jsx b/tests/js/spec/components/similarScoreCard.spec.jsx
index 1c25c783fb..54cdfd1e2d 100644
--- a/tests/js/spec/components/similarScoreCard.spec.jsx
+++ b/tests/js/spec/components/similarScoreCard.spec.jsx
@@ -14,12 +14,12 @@ describe('SimilarScoreCard', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(<SimilarScoreCard />);
+    const wrapper = shallow(<SimilarScoreCard />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders with score list', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <SimilarScoreCard
         scoreList={[
           ['exception,message,character-shingles', null],
diff --git a/tests/js/spec/components/similarSpectrum.spec.jsx b/tests/js/spec/components/similarSpectrum.spec.jsx
index ca4fb58667..a5fae928d3 100644
--- a/tests/js/spec/components/similarSpectrum.spec.jsx
+++ b/tests/js/spec/components/similarSpectrum.spec.jsx
@@ -14,7 +14,7 @@ describe('SimilarSpectrum', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(<SimilarSpectrum />);
+    const wrapper = shallow(<SimilarSpectrum />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index 2ac6a5755c..ddea341c36 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -37,7 +37,7 @@ describe('SmartSearchBar', function() {
   let options;
   let environmentTagValuesMock;
   let supportedTags;
-  let tagValuesMock = jest.fn(() => Promise.resolve([]));
+  const tagValuesMock = jest.fn(() => Promise.resolve([]));
 
   beforeEach(function() {
     TagStore.reset();
@@ -64,7 +64,7 @@ describe('SmartSearchBar', function() {
 
   describe('componentWillReceiveProps()', function() {
     it('should add a space when setting state.query', function() {
-      let searchBar = shallow(
+      const searchBar = shallow(
         <SmartSearchBar supportedTags={supportedTags} query="one" />,
         options
       );
@@ -73,7 +73,7 @@ describe('SmartSearchBar', function() {
     });
 
     it('should update state.query if props.query is updated from outside', function() {
-      let searchBar = shallow(
+      const searchBar = shallow(
         <SmartSearchBar supportedTags={supportedTags} query="one" />,
         options
       );
@@ -84,7 +84,7 @@ describe('SmartSearchBar', function() {
     });
 
     it('should not reset user input if a noop props change happens', function() {
-      let searchBar = shallow(
+      const searchBar = shallow(
         <SmartSearchBar supportedTags={supportedTags} query="one" />,
         options
       );
@@ -96,7 +96,7 @@ describe('SmartSearchBar', function() {
     });
 
     it('should reset user input if a meaningful props change happens', function() {
-      let searchBar = shallow(
+      const searchBar = shallow(
         <SmartSearchBar supportedTags={supportedTags} query="one" />,
         options
       );
@@ -141,14 +141,14 @@ describe('SmartSearchBar', function() {
 
   describe('clearSearch()', function() {
     it('clears the query', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved ruby',
         defaultQuery: 'is:unresolved',
         supportedTags,
       };
-      let searchBar = shallow(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = shallow(<SmartSearchBar {...props} />, options).instance();
 
       searchBar.clearSearch();
 
@@ -156,7 +156,7 @@ describe('SmartSearchBar', function() {
     });
 
     it('calls onSearch()', async function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved ruby',
@@ -164,7 +164,7 @@ describe('SmartSearchBar', function() {
         supportedTags,
         onSearch: sandbox.spy(),
       };
-      let searchBar = shallow(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = shallow(<SmartSearchBar {...props} />, options).instance();
 
       await searchBar.clearSearch();
       expect(props.onSearch.calledWith('')).toBe(true);
@@ -173,7 +173,7 @@ describe('SmartSearchBar', function() {
 
   describe('onQueryFocus()', function() {
     it('displays the drop down', function() {
-      let searchBar = shallow(
+      const searchBar = shallow(
         <SmartSearchBar
           orgId="123"
           projectId="456"
@@ -192,13 +192,13 @@ describe('SmartSearchBar', function() {
 
   describe('onQueryBlur()', function() {
     it('hides the drop down', function() {
-      let searchBar = shallow(
+      const searchBar = shallow(
         <SmartSearchBar orgId="123" projectId="456" supportedTags={supportedTags} />,
         options
       ).instance();
       searchBar.state.dropdownVisible = true;
 
-      let clock = sandbox.useFakeTimers();
+      const clock = sandbox.useFakeTimers();
       searchBar.onQueryBlur();
       clock.tick(201); // doesn't close until 200ms
 
@@ -209,13 +209,13 @@ describe('SmartSearchBar', function() {
   describe('onKeyUp()', function() {
     describe('escape', function() {
       it('blurs the input', function() {
-        let wrapper = shallow(
+        const wrapper = shallow(
           <SmartSearchBar orgId="123" projectId="456" supportedTags={supportedTags} />,
           options
         );
         wrapper.setState({dropdownVisible: true});
 
-        let instance = wrapper.instance();
+        const instance = wrapper.instance();
         sandbox.stub(instance, 'blur');
 
         wrapper.find('input').simulate('keyup', {key: 'Escape', keyCode: '27'});
@@ -227,8 +227,8 @@ describe('SmartSearchBar', function() {
 
   describe('render()', function() {
     it('invokes onSearch() when submitting the form', function() {
-      let stubbedOnSearch = sandbox.spy();
-      let wrapper = mount(
+      const stubbedOnSearch = sandbox.spy();
+      const wrapper = mount(
         <SmartSearchBar
           onSearch={stubbedOnSearch}
           orgId="123"
@@ -247,14 +247,14 @@ describe('SmartSearchBar', function() {
     });
 
     it('invokes onSearch() when search is cleared', function(done) {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved',
         supportedTags,
         onSearch: sandbox.spy(),
       };
-      let wrapper = mount(<SmartSearchBar {...props} />, options);
+      const wrapper = mount(<SmartSearchBar {...props} />, options);
 
       wrapper.find('.search-clear-form').simulate('click');
 
@@ -266,14 +266,14 @@ describe('SmartSearchBar', function() {
   });
 
   it('handles an empty query', function() {
-    let props = {
+    const props = {
       orgId: '123',
       projectId: '456',
       query: '',
       defaultQuery: 'is:unresolved',
       supportedTags,
     };
-    let wrapper = mount(<SmartSearchBar {...props} />, options);
+    const wrapper = mount(<SmartSearchBar {...props} />, options);
     expect(wrapper.state('query')).toEqual('');
   });
 
@@ -287,13 +287,13 @@ describe('SmartSearchBar', function() {
       clock.restore();
     });
     it('sets state when empty', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: '',
         supportedTags,
       };
-      let searchBar = mount(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       expect(searchBar.state.searchTerm).toEqual('');
       expect(searchBar.state.searchItems).toEqual(searchBar.props.defaultSearchItems);
@@ -301,13 +301,13 @@ describe('SmartSearchBar', function() {
     });
 
     it('sets state when incomplete tag', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'fu',
         supportedTags,
       };
-      let searchBar = mount(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       expect(searchBar.state.searchTerm).toEqual('fu');
       expect(searchBar.state.searchItems).toEqual([]);
@@ -315,13 +315,13 @@ describe('SmartSearchBar', function() {
     });
 
     it('sets state when incomplete tag as second input', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved fu',
         supportedTags,
       };
-      let searchBar = mount(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.getCursorPosition = jest.fn();
       searchBar.getCursorPosition.mockReturnValue(15); // end of line
       searchBar.updateAutoCompleteItems();
@@ -331,14 +331,14 @@ describe('SmartSearchBar', function() {
     });
 
     it('does not request values when tag is environments', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'environment:production',
         excludeEnvironment: true,
         supportedTags,
       };
-      let searchBar = mount(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       clock.tick(301);
       expect(environmentTagValuesMock).not.toHaveBeenCalled();
@@ -346,17 +346,17 @@ describe('SmartSearchBar', function() {
 
     it('does not request values when tag is `timesSeen`', function() {
       // This should never get called
-      let mock = MockApiClient.addMockResponse({
+      const mock = MockApiClient.addMockResponse({
         url: '/projects/123/456/tags/timesSeen/values/',
         body: [],
       });
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'timesSeen:',
         supportedTags,
       };
-      let searchBar = mount(<SmartSearchBar {...props} />, options).instance();
+      const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
       clock.tick(301);
       expect(mock).not.toHaveBeenCalled();
diff --git a/tests/js/spec/components/splitDiff.spec.jsx b/tests/js/spec/components/splitDiff.spec.jsx
index b1d5b09df7..1e3ca42628 100644
--- a/tests/js/spec/components/splitDiff.spec.jsx
+++ b/tests/js/spec/components/splitDiff.spec.jsx
@@ -14,18 +14,18 @@ describe('SplitDiff', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(<SplitDiff base="restaurant" target="aura" />);
+    const wrapper = shallow(<SplitDiff base="restaurant" target="aura" />);
     expect(wrapper).toMatchSnapshot();
   });
 
   it('renders with newlines', function() {
-    let base = `this is my restaurant
+    const base = `this is my restaurant
     and restaurant
     common`;
-    let target = `aura
+    const target = `aura
     and your aura
     common`;
-    let wrapper = shallow(<SplitDiff base={base} target={target} />);
+    const wrapper = shallow(<SplitDiff base={base} target={target} />);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/splitLayout.spec.jsx b/tests/js/spec/components/splitLayout.spec.jsx
index 8c669e6de6..cb4f8746db 100644
--- a/tests/js/spec/components/splitLayout.spec.jsx
+++ b/tests/js/spec/components/splitLayout.spec.jsx
@@ -5,7 +5,7 @@ import SplitLayout from 'app/components/splitLayout';
 
 describe('SplitLayout', function() {
   it('renders with one child', function() {
-    let component = shallow(
+    const component = shallow(
       <SplitLayout>
         <div>child</div>
       </SplitLayout>
@@ -15,7 +15,7 @@ describe('SplitLayout', function() {
   });
 
   it('renders with multiple children', function() {
-    let component = shallow(
+    const component = shallow(
       <SplitLayout>
         <div>child #1</div>
         <div>child #2</div>
@@ -27,7 +27,7 @@ describe('SplitLayout', function() {
   });
 
   it('renders with responsive property', function() {
-    let component = shallow(
+    const component = shallow(
       <SplitLayout responsive>
         <div>child #1</div>
         <div>child #2</div>
@@ -39,7 +39,7 @@ describe('SplitLayout', function() {
   });
 
   it('renders with a separation width', function() {
-    let component = shallow(
+    const component = shallow(
       <SplitLayout responsive splitWidth={5}>
         <div>child #1</div>
         <div>child #2</div>
diff --git a/tests/js/spec/components/spreadLayout.spec.jsx b/tests/js/spec/components/spreadLayout.spec.jsx
index 08c22a0d74..9e4b8d26fa 100644
--- a/tests/js/spec/components/spreadLayout.spec.jsx
+++ b/tests/js/spec/components/spreadLayout.spec.jsx
@@ -5,7 +5,7 @@ import SpreadLayout from 'app/components/spreadLayout';
 
 describe('SpreadLayout', function() {
   it('renders with one child', function() {
-    let component = shallow(
+    const component = shallow(
       <SpreadLayout>
         <div>child</div>
       </SpreadLayout>
@@ -15,7 +15,7 @@ describe('SpreadLayout', function() {
   });
 
   it('renders with multiple children', function() {
-    let component = shallow(
+    const component = shallow(
       <SpreadLayout>
         <div>child #1</div>
         <div>child #2</div>
diff --git a/tests/js/spec/components/stackedBarChart.spec.jsx b/tests/js/spec/components/stackedBarChart.spec.jsx
index 947f048ec2..cd7b0bfe0a 100644
--- a/tests/js/spec/components/stackedBarChart.spec.jsx
+++ b/tests/js/spec/components/stackedBarChart.spec.jsx
@@ -6,14 +6,14 @@ import StackedBarChart from 'app/components/stackedBarChart';
 describe('StackedBarChart', function() {
   describe('render()', function() {
     it('renders with points data', function() {
-      let points = [
+      const points = [
         {x: 1439766000, y: [10]},
         {x: 1439769600, y: [20]},
         {x: 1439773200, y: [30]},
       ];
 
-      let wrapper = shallow(<StackedBarChart points={points} />);
-      let columns = wrapper.find('[data-test-id="chart-column"]');
+      const wrapper = shallow(<StackedBarChart points={points} />);
+      const columns = wrapper.find('[data-test-id="chart-column"]');
 
       expect(columns).toHaveProperty('length', 3);
       expect(columns.at(0).text()).toEqual('10'); // check y values
@@ -22,18 +22,18 @@ describe('StackedBarChart', function() {
     });
 
     it('renders with points and markers', function() {
-      let points = [
+      const points = [
         {x: 1439769600, y: [10]},
         {x: 1439773200, y: [20]},
         {x: 1439776800, y: [30]},
       ];
-      let markers = [
+      const markers = [
         {x: 1439769600, className: 'first-seen', label: 'first seen'}, // matches first point
         {x: 1439776800, className: 'last-seen', label: 'last seen'}, // matches last point
       ];
 
-      let wrapper = shallow(<StackedBarChart points={points} markers={markers} />);
-      let columns = wrapper.find('[data-test-id="chart-column"]');
+      const wrapper = shallow(<StackedBarChart points={points} markers={markers} />);
+      const columns = wrapper.find('[data-test-id="chart-column"]');
 
       expect(columns).toHaveProperty('length', 5);
 
@@ -45,14 +45,14 @@ describe('StackedBarChart', function() {
     });
 
     it('renders with points and markers, when first and last seen are same data point', function() {
-      let points = [{x: 1439776800, y: [30]}];
-      let markers = [
+      const points = [{x: 1439776800, y: [30]}];
+      const markers = [
         {x: 1439776800, className: 'first-seen', label: 'first seen'},
         {x: 1439776800, className: 'last-seen', label: 'last seen'},
       ];
 
-      let wrapper = shallow(<StackedBarChart points={points} markers={markers} />);
-      let columns = wrapper.find('[data-test-id="chart-column"]');
+      const wrapper = shallow(<StackedBarChart points={points} markers={markers} />);
+      const columns = wrapper.find('[data-test-id="chart-column"]');
 
       expect(columns).toHaveProperty('length', 3);
 
diff --git a/tests/js/spec/components/stream/processingIssueHint.spec.jsx b/tests/js/spec/components/stream/processingIssueHint.spec.jsx
index 9c8aed8b86..7b1c70c8ac 100644
--- a/tests/js/spec/components/stream/processingIssueHint.spec.jsx
+++ b/tests/js/spec/components/stream/processingIssueHint.spec.jsx
@@ -5,8 +5,8 @@ import ProcessingIssueHint from 'app/components/stream/processingIssueHint';
 
 describe('ProcessingIssueHint', function() {
   let issue, wrapper;
-  let orgId = 'test-org';
-  let projectId = 'test-project';
+  const orgId = 'test-org';
+  const projectId = 'test-project';
 
   beforeEach(() => {
     issue = {
@@ -29,7 +29,7 @@ describe('ProcessingIssueHint', function() {
     });
 
     it('displays a button', function() {
-      let button = wrapper.find('Link');
+      const button = wrapper.find('Link');
       expect(button.length).toBe(1);
       expect(button.props().to).toEqual(
         `/settings/${orgId}/${projectId}/processing-issues/`
@@ -37,12 +37,12 @@ describe('ProcessingIssueHint', function() {
     });
 
     it('displays an icon', function() {
-      let icon = wrapper.find('[className*="icon-alert"]');
+      const icon = wrapper.find('[className*="icon-alert"]');
       expect(icon.length).toBe(1);
     });
 
     it('displays text', function() {
-      let text = wrapper.find('Container').text();
+      const text = wrapper.find('Container').text();
       expect(text).toEqual(expect.stringContaining('issues blocking'));
     });
   });
@@ -56,17 +56,17 @@ describe('ProcessingIssueHint', function() {
     });
 
     it('does not display a button', function() {
-      let button = wrapper.find('Link');
+      const button = wrapper.find('Link');
       expect(button.length).toBe(0);
     });
 
     it('displays an icon', function() {
-      let icon = wrapper.find('[className*="icon-processing"]');
+      const icon = wrapper.find('[className*="icon-processing"]');
       expect(icon.length).toBe(1);
     });
 
     it('displays text', function() {
-      let text = wrapper.find('Container').text();
+      const text = wrapper.find('Container').text();
       expect(text).toEqual(expect.stringContaining('Reprocessing'));
     });
   });
@@ -80,7 +80,7 @@ describe('ProcessingIssueHint', function() {
     });
 
     it('displays a button', function() {
-      let button = wrapper.find('Link');
+      const button = wrapper.find('Link');
       expect(button.length).toBe(1);
       expect(button.props().to).toEqual(
         `/settings/${orgId}/${projectId}/processing-issues/`
@@ -88,12 +88,12 @@ describe('ProcessingIssueHint', function() {
     });
 
     it('displays an icon', function() {
-      let icon = wrapper.find('[className*="icon-processing"]');
+      const icon = wrapper.find('[className*="icon-processing"]');
       expect(icon.length).toBe(1);
     });
 
     it('displays text', function() {
-      let text = wrapper.find('Container').text();
+      const text = wrapper.find('Container').text();
       expect(text).toEqual(expect.stringContaining('pending reprocessing'));
     });
   });
@@ -111,7 +111,7 @@ describe('ProcessingIssueHint', function() {
       );
     });
     it('displays the project slug', function() {
-      let text = wrapper.find('Container').text();
+      const text = wrapper.find('Container').text();
       expect(text).toEqual(expect.stringContaining(projectId));
     });
   });
diff --git a/tests/js/spec/components/stream/processingIssueList.spec.jsx b/tests/js/spec/components/stream/processingIssueList.spec.jsx
index fe381dffd9..8290586b36 100644
--- a/tests/js/spec/components/stream/processingIssueList.spec.jsx
+++ b/tests/js/spec/components/stream/processingIssueList.spec.jsx
@@ -91,7 +91,7 @@ describe('ProcessingIssueList', function() {
     });
 
     it('forwards the showProject prop', function() {
-      let hint = wrapper.find('ProcessingIssueHint').first();
+      const hint = wrapper.find('ProcessingIssueHint').first();
       expect(hint.props().showProject).toBeTruthy();
     });
   });
diff --git a/tests/js/spec/components/streamGroup.spec.jsx b/tests/js/spec/components/streamGroup.spec.jsx
index 1cd8945d80..8fc08a6b7c 100644
--- a/tests/js/spec/components/streamGroup.spec.jsx
+++ b/tests/js/spec/components/streamGroup.spec.jsx
@@ -28,7 +28,7 @@ describe('StreamGroup', function() {
   });
 
   it('renders with anchors', function() {
-    let component = shallow(
+    const component = shallow(
       <StreamGroup
         id="1L"
         orgId="orgId"
diff --git a/tests/js/spec/components/tag.spec.jsx b/tests/js/spec/components/tag.spec.jsx
index 23b1b74d55..795fb9a51e 100644
--- a/tests/js/spec/components/tag.spec.jsx
+++ b/tests/js/spec/components/tag.spec.jsx
@@ -4,7 +4,7 @@ import Tag from 'app/views/settings/components/tag';
 
 describe('Tag', function() {
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <Tag priority="info" border={true} size="small">
         Text to Copy
       </Tag>
diff --git a/tests/js/spec/components/textCopyInput.spec.jsx b/tests/js/spec/components/textCopyInput.spec.jsx
index 55a2f6ad2a..127a0cc268 100644
--- a/tests/js/spec/components/textCopyInput.spec.jsx
+++ b/tests/js/spec/components/textCopyInput.spec.jsx
@@ -4,7 +4,7 @@ import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
 
 describe('TextCopyInput', function() {
   it('renders', function() {
-    let wrapper = shallow(<TextCopyInput>Text to Copy</TextCopyInput>);
+    const wrapper = shallow(<TextCopyInput>Text to Copy</TextCopyInput>);
     expect(wrapper).toMatchSnapshot();
   });
 });
diff --git a/tests/js/spec/components/toggleRawEventData.spec.jsx b/tests/js/spec/components/toggleRawEventData.spec.jsx
index 67fd286b07..84d190bada 100644
--- a/tests/js/spec/components/toggleRawEventData.spec.jsx
+++ b/tests/js/spec/components/toggleRawEventData.spec.jsx
@@ -30,7 +30,7 @@ describe('EventDataSection', function() {
     culprit: undefined,
   };
   it('renders formatted', function() {
-    let component = shallow(
+    const component = shallow(
       <EventDataSection
         group={groupData}
         event={eventData}
@@ -44,7 +44,7 @@ describe('EventDataSection', function() {
   });
 
   it('renders raw', function() {
-    let component = shallow(
+    const component = shallow(
       <EventDataSection
         group={groupData}
         event={eventData}
@@ -66,7 +66,7 @@ describe('KeyValueList', function() {
   const extraDataArray = objectToArray(context);
 
   it('renders formatted', function() {
-    let component = shallow(
+    const component = shallow(
       <KeyValueList data={extraDataArray} isContextData={true} raw={false} />
     );
 
@@ -74,7 +74,7 @@ describe('KeyValueList', function() {
   });
 
   it('renders raw', function() {
-    let component = shallow(
+    const component = shallow(
       <KeyValueList data={extraDataArray} isContextData={true} raw={true} />
     );
 
diff --git a/tests/js/spec/components/toolbar.spec.jsx b/tests/js/spec/components/toolbar.spec.jsx
index b61b12f606..0dfda08012 100644
--- a/tests/js/spec/components/toolbar.spec.jsx
+++ b/tests/js/spec/components/toolbar.spec.jsx
@@ -14,7 +14,7 @@ describe('Toolbar', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <Toolbar>
         <div />
       </Toolbar>
diff --git a/tests/js/spec/components/toolbarHeader.spec.jsx b/tests/js/spec/components/toolbarHeader.spec.jsx
index ea143f0af6..82afe042b0 100644
--- a/tests/js/spec/components/toolbarHeader.spec.jsx
+++ b/tests/js/spec/components/toolbarHeader.spec.jsx
@@ -14,7 +14,7 @@ describe('ToolbarHeader', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ToolbarHeader>
         <div />
       </ToolbarHeader>
diff --git a/tests/js/spec/components/tooltip.spec.jsx b/tests/js/spec/components/tooltip.spec.jsx
index 8afd114cda..35a62cff17 100644
--- a/tests/js/spec/components/tooltip.spec.jsx
+++ b/tests/js/spec/components/tooltip.spec.jsx
@@ -4,7 +4,7 @@ import Tooltip from 'app/components/tooltip';
 
 describe('Tooltip', function() {
   it('renders', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <Tooltip title="test">
         <span>My Button</span>
       </Tooltip>
@@ -13,7 +13,7 @@ describe('Tooltip', function() {
   });
 
   it('updates title', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <Tooltip title="test">
         <span>My Button</span>
       </Tooltip>
@@ -28,7 +28,7 @@ describe('Tooltip', function() {
   });
 
   it('disables and re-enables', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <Tooltip title="test">
         <span>My Button</span>
       </Tooltip>
@@ -45,14 +45,14 @@ describe('Tooltip', function() {
   });
 
   it('simultaneous enable and text change', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <Tooltip title="test">
         <span>My Button</span>
       </Tooltip>
     );
 
     wrapper.setProps({disabled: true, title: 'bar'});
-    let tip = wrapper.find('span');
+    const tip = wrapper.find('span');
 
     expect(tip.props().title).toBeUndefined();
     wrapper.setProps({disabled: false});
diff --git a/tests/js/spec/stores/alertStore.spec.jsx b/tests/js/spec/stores/alertStore.spec.jsx
index f8d466deb2..836084307d 100644
--- a/tests/js/spec/stores/alertStore.spec.jsx
+++ b/tests/js/spec/stores/alertStore.spec.jsx
@@ -41,7 +41,7 @@ describe('AlertStore', function() {
       expect(AlertStore.alerts[1].key).toEqual(3);
     });
     it('should persist removal of persistent alerts', function() {
-      let alert = {key: 1, id: 'test', message: 'foo', type: 'error'};
+      const alert = {key: 1, id: 'test', message: 'foo', type: 'error'};
       AlertStore.onCloseAlert(alert);
       AlertStore.onAddAlert(alert);
       expect(AlertStore.alerts).toHaveLength(0);
diff --git a/tests/js/spec/stores/groupingStore.spec.jsx b/tests/js/spec/stores/groupingStore.spec.jsx
index 6e7035ce67..b72cd7131d 100644
--- a/tests/js/spec/stores/groupingStore.spec.jsx
+++ b/tests/js/spec/stores/groupingStore.spec.jsx
@@ -128,8 +128,8 @@ describe('Grouping Store', function() {
       ]);
 
       expect(trigger).toHaveBeenCalled();
-      let calls = trigger.mock.calls;
-      let arg = calls[calls.length - 1][0];
+      const calls = trigger.mock.calls;
+      const arg = calls[calls.length - 1][0];
 
       expect(arg.filteredSimilarItems).toHaveLength(1);
       expect(arg.similarItems).toHaveLength(3);
@@ -180,14 +180,14 @@ describe('Grouping Store', function() {
         body: {message: 'failed'},
       });
 
-      let promise = GroupingStore.onFetch([
+      const promise = GroupingStore.onFetch([
         {dataKey: 'similar', endpoint: '/issues/groupId/similar/'},
       ]);
 
       expect(trigger).toHaveBeenCalled();
-      let calls = trigger.mock.calls;
+      const calls = trigger.mock.calls;
       return promise.then(() => {
-        let arg = calls[calls.length - 1][0];
+        const arg = calls[calls.length - 1][0];
         expect(arg).toMatchObject({
           loading: false,
           error: true,
@@ -204,23 +204,23 @@ describe('Grouping Store', function() {
       ]);
 
       expect(trigger).toHaveBeenCalled();
-      let calls = trigger.mock.calls;
-      let arg = calls[calls.length - 1][0];
+      const calls = trigger.mock.calls;
+      const arg = calls[calls.length - 1][0];
 
-      let item = arg.similarItems.find(({issue}) => issue.id === '217');
+      const item = arg.similarItems.find(({issue}) => issue.id === '217');
       expect(item.aggregate.exception).toBe(0.25);
       expect(item.aggregate.message).toBe(0.7);
     });
 
     it('fetches list of hashes', function() {
-      let promise = GroupingStore.onFetch([
+      const promise = GroupingStore.onFetch([
         {dataKey: 'merged', endpoint: '/issues/groupId/hashes/'},
       ]);
 
       expect(trigger).toHaveBeenCalled();
-      let calls = trigger.mock.calls;
+      const calls = trigger.mock.calls;
       return promise.then(() => {
-        let arg = calls[calls.length - 1][0];
+        const arg = calls[calls.length - 1][0];
         expect(arg.mergedItems).toHaveLength(5);
         expect(arg).toMatchObject({
           loading: false,
@@ -247,14 +247,14 @@ describe('Grouping Store', function() {
         body: {message: 'failed'},
       });
 
-      let promise = GroupingStore.onFetch([
+      const promise = GroupingStore.onFetch([
         {dataKey: 'merged', endpoint: '/issues/groupId/hashes/'},
       ]);
 
       expect(trigger).toHaveBeenCalled();
-      let calls = trigger.mock.calls;
+      const calls = trigger.mock.calls;
       return promise.then(() => {
-        let arg = calls[calls.length - 1][0];
+        const arg = calls[calls.length - 1][0];
         expect(arg).toMatchObject({
           loading: false,
           error: true,
@@ -342,7 +342,7 @@ describe('Grouping Store', function() {
         trigger.mockReset();
 
         // Everything is sync so trigger will have been called multiple times
-        let promise = GroupingStore.onMerge({
+        const promise = GroupingStore.onMerge({
           params: {
             orgId: 'orgId',
             projectId: 'projectId',
@@ -399,7 +399,7 @@ describe('Grouping Store', function() {
         trigger.mockReset();
 
         // Start unmerge
-        let promise = GroupingStore.onMerge({
+        const promise = GroupingStore.onMerge({
           params: {
             orgId: 'orgId',
             projectId: 'projectId',
@@ -441,7 +441,7 @@ describe('Grouping Store', function() {
         mergeList.add('1');
         mergeState.set('1', {checked: true});
 
-        let promise = GroupingStore.onMerge({
+        const promise = GroupingStore.onMerge({
           params: {
             orgId: 'orgId',
             projectId: 'projectId',
@@ -622,7 +622,7 @@ describe('Grouping Store', function() {
           unmergeState,
         });
 
-        let promise = GroupingStore.onUnmerge({
+        const promise = GroupingStore.onUnmerge({
           groupId: 'groupId',
         });
 
@@ -654,7 +654,7 @@ describe('Grouping Store', function() {
         unmergeList.set('2', 'event-2');
         unmergeState.set('2', {checked: true, busy: false});
 
-        let promise = GroupingStore.onUnmerge({
+        const promise = GroupingStore.onUnmerge({
           groupId: 'groupId',
         });
 
@@ -690,7 +690,7 @@ describe('Grouping Store', function() {
         GroupingStore.onToggleUnmerge(['2', 'event-2']);
         unmergeList.set('2', 'event-2');
 
-        let promise = GroupingStore.onUnmerge({
+        const promise = GroupingStore.onUnmerge({
           groupId: 'groupId',
         });
 
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index fc14103c30..1aca60da96 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -5,8 +5,8 @@ import ConfigStore from 'app/stores/configStore';
 
 describe('GuideStore', function() {
   let sandbox;
-  let anchor1 = <GuideAnchor target="target 1" type="text" />;
-  let anchor2 = <GuideAnchor target="target 2" type="text" />;
+  const anchor1 = <GuideAnchor target="target 1" type="text" />;
+  const anchor2 = <GuideAnchor target="target 2" type="text" />;
   let data;
 
   beforeEach(function() {
@@ -103,7 +103,7 @@ describe('GuideStore', function() {
       },
     });
     expect(GuideStore.state.currentGuide).toEqual(null);
-    let spy = jest.spyOn(GuideStore, 'isDefaultAlert').mockImplementation(() => true);
+    const spy = jest.spyOn(GuideStore, 'isDefaultAlert').mockImplementation(() => true);
     GuideStore.onSetActiveOrganization({id: 1, slug: 'org'});
     GuideStore.onSetActiveProject({id: 1, slug: 'proj'});
     await tick();
@@ -112,7 +112,7 @@ describe('GuideStore', function() {
   });
 
   it('should record analytics events when guide is cued', async function() {
-    let spy = jest.spyOn(GuideStore, 'recordCue');
+    const spy = jest.spyOn(GuideStore, 'recordCue');
 
     GuideStore.onFetchSucceeded(data);
     await tick();
@@ -122,7 +122,7 @@ describe('GuideStore', function() {
   });
 
   it('should not send multiple cue analytics events for same guide', async function() {
-    let spy = jest.spyOn(GuideStore, 'recordCue');
+    const spy = jest.spyOn(GuideStore, 'recordCue');
 
     GuideStore.onFetchSucceeded(data);
     await tick();
diff --git a/tests/js/spec/stores/pluginsStore.spec.jsx b/tests/js/spec/stores/pluginsStore.spec.jsx
index d372d7472d..996e8391e4 100644
--- a/tests/js/spec/stores/pluginsStore.spec.jsx
+++ b/tests/js/spec/stores/pluginsStore.spec.jsx
@@ -110,7 +110,7 @@ describe('PluginsStore', function() {
   });
 
   describe('update', function() {
-    let plugin = TestStubs.Plugin();
+    const plugin = TestStubs.Plugin();
     beforeEach(function() {
       PluginsStore.reset();
       PluginsStore.plugins = new Map(TestStubs.Plugins().map(p => [p.id, p]));
@@ -119,7 +119,7 @@ describe('PluginsStore', function() {
     it('has optimistic state when updating', function() {
       PluginActions.update.trigger('amazon-sqs', {name: 'Amazon Sqs'});
 
-      let state = PluginsStore.getState();
+      const state = PluginsStore.getState();
       expect(state).toMatchObject({
         error: null,
         pageLinks: null,
@@ -141,7 +141,7 @@ describe('PluginsStore', function() {
     it('saves old plugin state', function() {
       PluginActions.update.trigger('amazon-sqs', {name: 'Amazon Sqs'});
 
-      let state = PluginsStore.getState();
+      const state = PluginsStore.getState();
       expect(state).toMatchObject({
         error: null,
         pageLinks: null,
diff --git a/tests/js/spec/stores/projectsStore.spec.jsx b/tests/js/spec/stores/projectsStore.spec.jsx
index a4190b4856..6a3ef97c25 100644
--- a/tests/js/spec/stores/projectsStore.spec.jsx
+++ b/tests/js/spec/stores/projectsStore.spec.jsx
@@ -3,19 +3,19 @@ import ProjectActions from 'app/actions/projectActions';
 import TeamActions from 'app/actions/teamActions';
 
 describe('ProjectsStore', function() {
-  let teamFoo = TestStubs.Team({
+  const teamFoo = TestStubs.Team({
     slug: 'team-foo',
   });
-  let teamBar = TestStubs.Team({
+  const teamBar = TestStubs.Team({
     slug: 'team-bar',
   });
-  let projectFoo = TestStubs.Project({
+  const projectFoo = TestStubs.Project({
     id: '2',
     slug: 'foo',
     name: 'Foo',
     teams: [teamFoo],
   });
-  let projectBar = TestStubs.Project({
+  const projectBar = TestStubs.Project({
     id: '10',
     slug: 'bar',
     name: 'Bar',
@@ -37,7 +37,7 @@ describe('ProjectsStore', function() {
   });
 
   it('adds project to store on "create success"', async function() {
-    let project = TestStubs.Project({id: '11', slug: 'created-project'});
+    const project = TestStubs.Project({id: '11', slug: 'created-project'});
     ProjectActions.createSuccess(project);
     await tick();
     expect(ProjectsStore.itemsById[project.id]).toMatchObject({
@@ -57,7 +57,7 @@ describe('ProjectsStore', function() {
 
   it('updates a project in store', async function() {
     // Create a new project, but should have same id as `projectBar`
-    let project = TestStubs.Project({id: '10', slug: 'bar', name: 'New Name'});
+    const project = TestStubs.Project({id: '10', slug: 'bar', name: 'New Name'});
     ProjectActions.updateSuccess(project);
     await tick();
     expect(ProjectsStore.itemsById[projectBar.id]).toMatchObject({
@@ -113,7 +113,7 @@ describe('ProjectsStore', function() {
   });
 
   it('can add a team to a project', async function() {
-    let team = TestStubs.Team({
+    const team = TestStubs.Team({
       slug: 'new-team',
     });
     ProjectActions.addTeamSuccess(team, 'foo');
diff --git a/tests/js/spec/stores/selectedGroupStore.spec.js b/tests/js/spec/stores/selectedGroupStore.spec.js
index f34dd0b7a6..aaa6494e0f 100644
--- a/tests/js/spec/stores/selectedGroupStore.spec.js
+++ b/tests/js/spec/stores/selectedGroupStore.spec.js
@@ -124,7 +124,7 @@ describe('SelectedGroupStore', function() {
   describe('getSelectedIds()', function() {
     it('returns selected ids', function() {
       SelectedGroupStore.records = {1: true, 2: false, 3: true};
-      let ids = SelectedGroupStore.getSelectedIds();
+      const ids = SelectedGroupStore.getSelectedIds();
 
       expect(ids.has('1')).toBe(true);
       expect(ids.has('3')).toBe(true);
@@ -133,7 +133,7 @@ describe('SelectedGroupStore', function() {
 
     it('returns empty set with no selected ids', function() {
       SelectedGroupStore.records = {1: false};
-      let ids = SelectedGroupStore.getSelectedIds();
+      const ids = SelectedGroupStore.getSelectedIds();
 
       expect(ids.has('1')).toBe(false);
       expect(ids.size).toEqual(0);
diff --git a/tests/js/spec/stores/tagStore.spec.jsx b/tests/js/spec/stores/tagStore.spec.jsx
index 6b3181e918..0f843185e3 100644
--- a/tests/js/spec/stores/tagStore.spec.jsx
+++ b/tests/js/spec/stores/tagStore.spec.jsx
@@ -68,7 +68,7 @@ describe('TagStore', function() {
     });
 
     it('should not overwrite predefined filters', () => {
-      let isTag = TagStore.tags.is;
+      const isTag = TagStore.tags.is;
       TagStore.onLoadTagsSuccess([
         {
           key: 'is',
diff --git a/tests/js/spec/utils/highlightFuseMatches.spec.jsx b/tests/js/spec/utils/highlightFuseMatches.spec.jsx
index b0b12b3006..8571e4ce85 100644
--- a/tests/js/spec/utils/highlightFuseMatches.spec.jsx
+++ b/tests/js/spec/utils/highlightFuseMatches.spec.jsx
@@ -1,7 +1,7 @@
 import highlightFuseMatches, {getFuseMatches} from 'app/utils/highlightFuseMatches';
 
 describe('highlightFuseMatches', function() {
-  let matchObj = {
+  const matchObj = {
     value: 'Authentication tokens allow you to perform actions',
     indices: [[4, 6], [12, 13], [15, 16]],
   };
diff --git a/tests/js/spec/utils/marked.spec.jsx b/tests/js/spec/utils/marked.spec.jsx
index ea1d4752fa..ce565de3f2 100644
--- a/tests/js/spec/utils/marked.spec.jsx
+++ b/tests/js/spec/utils/marked.spec.jsx
@@ -8,7 +8,7 @@ function expectMarkdown(test) {
 
 describe('marked', function() {
   it('normal links get rendered as html', function() {
-    for (let test of [
+    for (const test of [
       ['[x](http://example.com)', '<a href="http://example.com">x</a>'],
       ['[x](https://example.com)', '<a href="https://example.com">x</a>'],
       ['[x](mailto:foo@example.com)', '<a href="mailto:foo@example.com">x</a>'],
@@ -18,7 +18,7 @@ describe('marked', function() {
   });
 
   it('rejected links should be rendered as plain text', function() {
-    for (let test of [
+    for (const test of [
       ['[x](javascript:foo)', 'javascript:foo'],
       ['[x](java\nscript:foo)', 'java\nscript:foo'],
       ['[x](data:foo)', 'data:foo'],
@@ -29,7 +29,7 @@ describe('marked', function() {
   });
 
   it('normal images get rendered as html', function() {
-    for (let test of [
+    for (const test of [
       ['![](http://example.com)', '<img src="http://example.com" alt="">'],
       ['![x](http://example.com)', '<img src="http://example.com" alt="x">'],
       ['![x](https://example.com)', '<img src="https://example.com" alt="x">'],
@@ -39,7 +39,7 @@ describe('marked', function() {
   });
 
   it("rejected images shouldn't be rendered at all", function() {
-    for (let test of [['![x](javascript:foo)', '']]) {
+    for (const test of [['![x](javascript:foo)', '']]) {
       expectMarkdown(test);
     }
   });
diff --git a/tests/js/spec/utils/streamManager.spec.js b/tests/js/spec/utils/streamManager.spec.js
index 50a740ec85..e82c0ca483 100644
--- a/tests/js/spec/utils/streamManager.spec.js
+++ b/tests/js/spec/utils/streamManager.spec.js
@@ -13,24 +13,24 @@ describe('StreamManager', function() {
   });
 
   it('allows options configuration', function() {
-    let options = {limit: 2};
-    let mgr = new StreamManager(store, options);
+    const options = {limit: 2};
+    const mgr = new StreamManager(store, options);
 
     expect(mgr.limit).toEqual(options.limit);
   });
 
   describe('push()', function() {
     it('allows passing no items', function() {
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       expect(() => mgr.push()).not.toThrow();
       expect(() => mgr.push([])).not.toThrow();
       expect(mgr.idList).toHaveLength(0);
     });
 
     it('adds items', function() {
-      let storeAdd = sinon.spy(store, 'add');
-      let mgr = new StreamManager(store);
-      let items = [{id: 1}];
+      const storeAdd = sinon.spy(store, 'add');
+      const mgr = new StreamManager(store);
+      const items = [{id: 1}];
       mgr.push(items);
 
       expect(mgr.idList).toHaveLength(1);
@@ -38,9 +38,9 @@ describe('StreamManager', function() {
     });
 
     it('allows adding a single item', function() {
-      let storeAdd = sinon.spy(store, 'add');
-      let mgr = new StreamManager(store);
-      let item = {id: 1};
+      const storeAdd = sinon.spy(store, 'add');
+      const mgr = new StreamManager(store);
+      const item = {id: 1};
       mgr.push(item);
 
       expect(mgr.idList).toHaveLength(1);
@@ -48,9 +48,9 @@ describe('StreamManager', function() {
     });
 
     it('trims after adding', function() {
-      let mgr = new StreamManager(store, {limit: 1});
-      let storeRemove = sinon.spy(store, 'remove');
-      let mgrTrim = sinon.spy(mgr, 'trim');
+      const mgr = new StreamManager(store, {limit: 1});
+      const storeRemove = sinon.spy(store, 'remove');
+      const mgrTrim = sinon.spy(mgr, 'trim');
       mgr.push([{id: 1}, {id: 2}]);
 
       expect(mgr.idList).toHaveLength(1);
@@ -59,7 +59,7 @@ describe('StreamManager', function() {
     });
 
     it('preserves NEW order of duplicates', function() {
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       mgr.push([{id: 1}, {id: 3}]);
       mgr.push([{id: 1}, {id: 2}]); // New order of "1" if after "3"
 
@@ -69,8 +69,8 @@ describe('StreamManager', function() {
 
   describe('trim()', function() {
     it('removes trailing items in excess of the limit', function() {
-      let storeRemove = sinon.spy(store, 'remove');
-      let mgr = new StreamManager(store, {limit: 1});
+      const storeRemove = sinon.spy(store, 'remove');
+      const mgr = new StreamManager(store, {limit: 1});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
@@ -81,8 +81,8 @@ describe('StreamManager', function() {
     });
 
     it('does nothing with fewer items than limit', function() {
-      let storeRemove = sinon.spy(store, 'remove');
-      let mgr = new StreamManager(store, {limit: 10});
+      const storeRemove = sinon.spy(store, 'remove');
+      const mgr = new StreamManager(store, {limit: 10});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
@@ -94,24 +94,24 @@ describe('StreamManager', function() {
 
   describe('getAllItems()', function() {
     it('retrives ordered items from store', function() {
-      let storeGetAllItems = sinon.stub(store, 'getAllItems', function() {
+      const storeGetAllItems = sinon.stub(store, 'getAllItems', function() {
         return [{id: 1}, {id: 2}];
       });
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       mgr.push({id: 2});
       mgr.push({id: 1});
-      let items = mgr.getAllItems();
+      const items = mgr.getAllItems();
 
       expect(items).toEqual([{id: 2}, {id: 1}]);
       expect(storeGetAllItems.called).toBe(true);
     });
 
     it('does not mutate store', function() {
-      let storeItems = [{id: 1}, {id: 2}];
+      const storeItems = [{id: 1}, {id: 2}];
       sinon.stub(store, 'getAllItems', function() {
         return storeItems;
       });
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       mgr.push([{id: 2}, {id: 1}]);
       mgr.getAllItems();
 
@@ -121,8 +121,8 @@ describe('StreamManager', function() {
 
   describe('unshift()', function() {
     it('adds items to the start of the list', function() {
-      let storeAdd = sinon.spy(store, 'add');
-      let mgr = new StreamManager(store);
+      const storeAdd = sinon.spy(store, 'add');
+      const mgr = new StreamManager(store);
       mgr.unshift([{id: 2}]);
       mgr.unshift([{id: 1}]);
 
@@ -132,7 +132,7 @@ describe('StreamManager', function() {
     });
 
     it('moves duplicates to the start of the list', function() {
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       mgr.unshift([{id: 2}, {id: 1}]);
       mgr.unshift([{id: 1}]);
 
@@ -140,7 +140,7 @@ describe('StreamManager', function() {
     });
 
     it('moves a duplicate array to the start of the list and preserves order', function() {
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       mgr.unshift([{id: 3}, {id: 2}, {id: 1}]);
       mgr.unshift([{id: 2}, {id: 1}]);
 
@@ -148,7 +148,7 @@ describe('StreamManager', function() {
     });
 
     it('allows adding a single item', function() {
-      let mgr = new StreamManager(store);
+      const mgr = new StreamManager(store);
       mgr.unshift({id: 1});
 
       expect(mgr.idList).toEqual([1]);
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index 65de6c17d0..155a9137d6 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -9,7 +9,7 @@ import {
 
 describe('utils.valueIsEqual', function() {
   it('should return true when objects are deeply equal', function() {
-    let isEqual = valueIsEqual(
+    const isEqual = valueIsEqual(
       {
         username: 'foo',
         teams: ['bar', 'baz'],
@@ -32,7 +32,7 @@ describe('utils.valueIsEqual', function() {
   });
 
   it('should return false when objects are not deeply equal', function() {
-    let isEqual = valueIsEqual(
+    const isEqual = valueIsEqual(
       {
         username: 'foo',
         teams: ['bar', 'baz'],
@@ -55,7 +55,7 @@ describe('utils.valueIsEqual', function() {
   });
 
   it('should return true when objects are shalowly equal', function() {
-    let isEqual = valueIsEqual(
+    const isEqual = valueIsEqual(
       {
         username: 'foo',
         team: 'bar',
@@ -72,7 +72,7 @@ describe('utils.valueIsEqual', function() {
   });
 
   it('should return false when objects are not shalowly equal', function() {
-    let isEqual = valueIsEqual(
+    const isEqual = valueIsEqual(
       {
         username: 'foo',
         team: 'bar',
diff --git a/tests/js/spec/utils/withGlobalSelection.spec.jsx b/tests/js/spec/utils/withGlobalSelection.spec.jsx
index 99a129b1a8..b3539f1ee4 100644
--- a/tests/js/spec/utils/withGlobalSelection.spec.jsx
+++ b/tests/js/spec/utils/withGlobalSelection.spec.jsx
@@ -11,8 +11,8 @@ describe('withGlobalSelection HoC', function() {
 
   it('handles projects', function() {
     const MyComponent = () => null;
-    let Container = withGlobalSelection(MyComponent);
-    let wrapper = mount(<Container />);
+    const Container = withGlobalSelection(MyComponent);
+    const wrapper = mount(<Container />);
 
     expect(wrapper.find('MyComponent').prop('selection').projects).toEqual([]);
 
@@ -24,8 +24,8 @@ describe('withGlobalSelection HoC', function() {
 
   it('handles datetime', function() {
     const MyComponent = () => null;
-    let Container = withGlobalSelection(MyComponent);
-    let wrapper = mount(<Container />);
+    const Container = withGlobalSelection(MyComponent);
+    const wrapper = mount(<Container />);
 
     expect(wrapper.find('MyComponent').prop('selection').datetime.period).toEqual('14d');
 
@@ -47,8 +47,8 @@ describe('withGlobalSelection HoC', function() {
 
   it('handles environments', function() {
     const MyComponent = () => null;
-    let Container = withGlobalSelection(MyComponent);
-    let wrapper = mount(<Container />);
+    const Container = withGlobalSelection(MyComponent);
+    const wrapper = mount(<Container />);
 
     expect(wrapper.find('MyComponent').prop('selection').environments).toEqual([]);
 
diff --git a/tests/js/spec/utils/withProjects.spec.jsx b/tests/js/spec/utils/withProjects.spec.jsx
index 31a6823ad7..cef0f3ca22 100644
--- a/tests/js/spec/utils/withProjects.spec.jsx
+++ b/tests/js/spec/utils/withProjects.spec.jsx
@@ -11,17 +11,17 @@ describe('withProjects HoC', function() {
 
   it('works', function() {
     const MyComponent = () => null;
-    let Container = withProjects(MyComponent);
-    let wrapper = mount(<Container />);
+    const Container = withProjects(MyComponent);
+    const wrapper = mount(<Container />);
 
     expect(wrapper.find('MyComponent').prop('projects')).toEqual([]);
 
     // Insert into projects store
-    let project = TestStubs.Project();
+    const project = TestStubs.Project();
     ProjectsStore.loadInitialData([project]);
 
     wrapper.update();
-    let props = wrapper.find('MyComponent').prop('projects');
+    const props = wrapper.find('MyComponent').prop('projects');
     expect(props).toHaveLength(1);
     expect(props[0].id).toBe(project.id);
   });
diff --git a/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
index ffae167390..89a4c1c6e1 100644
--- a/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTags.spec.jsx.snap
@@ -366,6 +366,7 @@ exports[`ProjectTags renders 1`] = `
                                         priority="primary"
                                       >
                                         <a
+                                          className=""
                                           disabled={false}
                                           onClick={[Function]}
                                           title="Remove tag?"
@@ -594,6 +595,7 @@ exports[`ProjectTags renders 1`] = `
                                         priority="primary"
                                       >
                                         <a
+                                          className=""
                                           disabled={false}
                                           onClick={[Function]}
                                           title="Remove tag?"
@@ -822,6 +824,7 @@ exports[`ProjectTags renders 1`] = `
                                         priority="primary"
                                       >
                                         <a
+                                          className=""
                                           disabled={false}
                                           onClick={[Function]}
                                           title="Remove tag?"
@@ -1053,7 +1056,7 @@ exports[`ProjectTags renders 1`] = `
                                         priority="primary"
                                       >
                                         <a
-                                          className="undefined disabled"
+                                          className="disabled"
                                           disabled={true}
                                           onClick={[Function]}
                                           title="Remove tag?"
diff --git a/tests/js/spec/views/acceptProjectTransfer.spec.jsx b/tests/js/spec/views/acceptProjectTransfer.spec.jsx
index 5b2c107191..0223e8a7b0 100644
--- a/tests/js/spec/views/acceptProjectTransfer.spec.jsx
+++ b/tests/js/spec/views/acceptProjectTransfer.spec.jsx
@@ -8,7 +8,7 @@ jest.mock('jquery');
 describe('AcceptProjectTransfer', function() {
   let getMock;
   let postMock;
-  let endpoint = '/accept-transfer/';
+  const endpoint = '/accept-transfer/';
   beforeEach(function() {
     MockApiClient.clearMockResponses();
 
@@ -43,7 +43,7 @@ describe('AcceptProjectTransfer', function() {
   });
 
   it('submits', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <AcceptProjectTransfer
         location={{
           pathame: 'endpoint',
diff --git a/tests/js/spec/views/accountAuthorization.spec.jsx b/tests/js/spec/views/accountAuthorization.spec.jsx
index 962545034f..f17ba7eb53 100644
--- a/tests/js/spec/views/accountAuthorization.spec.jsx
+++ b/tests/js/spec/views/accountAuthorization.spec.jsx
@@ -17,7 +17,7 @@ describe('AccountAuthorizations', function() {
       body: [],
     });
 
-    let wrapper = shallow(<AccountAuthorizations />, {
+    const wrapper = shallow(<AccountAuthorizations />, {
       context: {
         location: TestStubs.location(),
         router: TestStubs.router(),
diff --git a/tests/js/spec/views/accountClose.spec.jsx b/tests/js/spec/views/accountClose.spec.jsx
index 75c636a37d..dc79b659d3 100644
--- a/tests/js/spec/views/accountClose.spec.jsx
+++ b/tests/js/spec/views/accountClose.spec.jsx
@@ -32,7 +32,7 @@ describe('AccountClose', function() {
   });
 
   it('lists all orgs user is an owner of', function() {
-    let wrapper = mount(<AccountClose />, TestStubs.routerContext());
+    const wrapper = mount(<AccountClose />, TestStubs.routerContext());
 
     // Input for single owner org
     expect(
diff --git a/tests/js/spec/views/accountDetail.spec.jsx b/tests/js/spec/views/accountDetail.spec.jsx
index ba69f60c25..b477f4af88 100644
--- a/tests/js/spec/views/accountDetail.spec.jsx
+++ b/tests/js/spec/views/accountDetail.spec.jsx
@@ -22,7 +22,7 @@ describe('AccountDetails', function() {
   });
 
   it('renders', function() {
-    let wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
+    const wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
 
     expect(wrapper.find('input[name="name"]')).toHaveLength(1);
 
@@ -35,7 +35,7 @@ describe('AccountDetails', function() {
 
   it('has username field if it is different than email', function() {
     mockUserDetails({username: 'different@example.com'});
-    let wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
+    const wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
 
     expect(wrapper.find('input[name="username"]')).toHaveLength(1);
     expect(wrapper.find('input[name="username"]').prop('disabled')).toBe(false);
@@ -44,7 +44,7 @@ describe('AccountDetails', function() {
   describe('Managed User', function() {
     it('does not have password fields', function() {
       mockUserDetails({isManaged: true});
-      let wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
+      const wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
 
       expect(wrapper.find('input[name="name"]')).toHaveLength(1);
       expect(wrapper.find('input[name="password"]')).toHaveLength(0);
@@ -53,7 +53,7 @@ describe('AccountDetails', function() {
 
     it('has disabled username field if it is different than email', function() {
       mockUserDetails({isManaged: true, username: 'different@example.com'});
-      let wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
+      const wrapper = mount(<AccountDetails location={{}} />, TestStubs.routerContext());
 
       expect(wrapper.find('input[name="username"]')).toHaveLength(1);
       expect(wrapper.find('input[name="username"]').prop('disabled')).toBe(true);
diff --git a/tests/js/spec/views/accountEmails.spec.jsx b/tests/js/spec/views/accountEmails.spec.jsx
index 2ab6efec94..6a7a22ec0c 100644
--- a/tests/js/spec/views/accountEmails.spec.jsx
+++ b/tests/js/spec/views/accountEmails.spec.jsx
@@ -18,19 +18,19 @@ describe('AccountEmails', function() {
   });
 
   it('renders with emails', function() {
-    let wrapper = shallow(<AccountEmails />, TestStubs.routerContext());
+    const wrapper = shallow(<AccountEmails />, TestStubs.routerContext());
 
     expect(wrapper).toMatchSnapshot();
   });
 
   it('can remove an email', function() {
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: ENDPOINT,
       method: 'DELETE',
       statusCode: 200,
     });
 
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    const wrapper = mount(<AccountEmails />, TestStubs.routerContext());
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -52,13 +52,13 @@ describe('AccountEmails', function() {
   });
 
   it('can change a secondary email to primary an email', function() {
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
       statusCode: 200,
     });
 
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    const wrapper = mount(<AccountEmails />, TestStubs.routerContext());
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -80,13 +80,13 @@ describe('AccountEmails', function() {
   });
 
   it('can resend verification email', function() {
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: `${ENDPOINT}confirm/`,
       method: 'POST',
       statusCode: 200,
     });
 
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    const wrapper = mount(<AccountEmails />, TestStubs.routerContext());
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -104,12 +104,12 @@ describe('AccountEmails', function() {
   });
 
   it('can add a secondary email', function() {
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: ENDPOINT,
       method: 'POST',
       statusCode: 200,
     });
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    const wrapper = mount(<AccountEmails />, TestStubs.routerContext());
 
     expect(mock).not.toHaveBeenCalled();
 
diff --git a/tests/js/spec/views/accountIdentities.spec.jsx b/tests/js/spec/views/accountIdentities.spec.jsx
index d397a0963e..87f29fb9ab 100644
--- a/tests/js/spec/views/accountIdentities.spec.jsx
+++ b/tests/js/spec/views/accountIdentities.spec.jsx
@@ -18,7 +18,7 @@ describe('AccountIdentities', function() {
       body: [],
     });
 
-    let wrapper = shallow(<AccountIdentities />, TestStubs.routerContext());
+    const wrapper = shallow(<AccountIdentities />, TestStubs.routerContext());
 
     expect(wrapper).toMatchSnapshot();
   });
@@ -36,7 +36,7 @@ describe('AccountIdentities', function() {
       ],
     });
 
-    let wrapper = shallow(<AccountIdentities />, TestStubs.routerContext());
+    const wrapper = shallow(<AccountIdentities />, TestStubs.routerContext());
     expect(wrapper).toMatchSnapshot();
   });
 
@@ -53,14 +53,14 @@ describe('AccountIdentities', function() {
       ],
     });
 
-    let wrapper = mount(<AccountIdentities />, TestStubs.routerContext());
+    const wrapper = mount(<AccountIdentities />, TestStubs.routerContext());
 
-    let disconnectRequest = {
+    const disconnectRequest = {
       url: `${ENDPOINT}1/`,
       method: 'DELETE',
     };
 
-    let mock = Client.addMockResponse(disconnectRequest);
+    const mock = Client.addMockResponse(disconnectRequest);
 
     expect(mock).not.toHaveBeenCalled();
 
diff --git a/tests/js/spec/views/accountNotifications.spec.jsx b/tests/js/spec/views/accountNotifications.spec.jsx
index bd9b23c3a9..73f08f353d 100644
--- a/tests/js/spec/views/accountNotifications.spec.jsx
+++ b/tests/js/spec/views/accountNotifications.spec.jsx
@@ -4,7 +4,7 @@ import {mount} from 'enzyme';
 import AccountNotifications from 'app/views/settings/account/accountNotifications';
 
 describe('AccountNotifications', function() {
-  let url = '/users/me/notifications/';
+  const url = '/users/me/notifications/';
 
   beforeEach(function() {
     MockApiClient.addMockResponse({
@@ -26,7 +26,7 @@ describe('AccountNotifications', function() {
   });
 
   it('renders with values from API', function() {
-    let wrapper = mount(<AccountNotifications />, TestStubs.routerContext());
+    const wrapper = mount(<AccountNotifications />, TestStubs.routerContext());
 
     // "Send Me Project Alerts"
     expect(wrapper.find('Switch[name="subscribeByDefault"]').prop('isActive')).toBe(true);
@@ -53,8 +53,8 @@ describe('AccountNotifications', function() {
   });
 
   it('can change "Deploy Notifications"', function() {
-    let wrapper = mount(<AccountNotifications />, TestStubs.routerContext());
-    let mock = MockApiClient.addMockResponse({
+    const wrapper = mount(<AccountNotifications />, TestStubs.routerContext());
+    const mock = MockApiClient.addMockResponse({
       url,
       method: 'PUT',
     });
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
index 4598577f33..cc16bb8848 100644
--- a/tests/js/spec/views/accountSecurity.spec.jsx
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -24,7 +24,7 @@ describe('AccountSecurity', function() {
       body: [],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -41,7 +41,7 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Totp({configureButton: 'Info'})],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -76,14 +76,14 @@ describe('AccountSecurity', function() {
       ],
     });
 
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `${ENDPOINT}15/`,
       method: 'DELETE',
     });
 
     expect(deleteMock).not.toHaveBeenCalled();
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -124,14 +124,14 @@ describe('AccountSecurity', function() {
       url: ORG_ENDPOINT,
       body: TestStubs.Organizations({require2FA: true}),
     });
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `${ENDPOINT}15/`,
       method: 'DELETE',
     });
 
     expect(deleteMock).not.toHaveBeenCalled();
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -173,14 +173,14 @@ describe('AccountSecurity', function() {
       url: ORG_ENDPOINT,
       body: TestStubs.Organizations({require2FA: true}),
     });
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `${ENDPOINT}15/`,
       method: 'DELETE',
     });
 
     expect(deleteMock).not.toHaveBeenCalled();
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -201,7 +201,7 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Totp({isEnrolled: false})],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -227,7 +227,7 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -249,7 +249,7 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Recovery({isEnrolled: true})],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -273,13 +273,13 @@ describe('AccountSecurity', function() {
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
     });
 
-    let url = '/users/me/password/';
-    let mock = Client.addMockResponse({
+    const url = '/users/me/password/';
+    const mock = Client.addMockResponse({
       url,
       method: 'PUT',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -317,13 +317,13 @@ describe('AccountSecurity', function() {
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
     });
-    let url = '/users/me/password/';
-    let mock = Client.addMockResponse({
+    const url = '/users/me/password/';
+    const mock = Client.addMockResponse({
       url,
       method: 'PUT',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
@@ -348,14 +348,14 @@ describe('AccountSecurity', function() {
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
     });
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: AUTH_ENDPOINT,
       body: {all: true},
       method: 'DELETE',
       status: 204,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <AccountSecurity />
       </AccountSecurityWrapper>,
diff --git a/tests/js/spec/views/accountSecurityDetails.spec.jsx b/tests/js/spec/views/accountSecurityDetails.spec.jsx
index 0a16e4303e..ff28bc3a23 100644
--- a/tests/js/spec/views/accountSecurityDetails.spec.jsx
+++ b/tests/js/spec/views/accountSecurityDetails.spec.jsx
@@ -52,7 +52,7 @@ describe('AccountSecurityDetails', function() {
     });
 
     it('can remove method', function() {
-      let deleteMock = Client.addMockResponse({
+      const deleteMock = Client.addMockResponse({
         url: `${ENDPOINT}15/`,
         method: 'DELETE',
       });
@@ -71,7 +71,7 @@ describe('AccountSecurityDetails', function() {
         url: ORG_ENDPOINT,
         body: TestStubs.Organizations({require2FA: true}),
       });
-      let deleteMock = Client.addMockResponse({
+      const deleteMock = Client.addMockResponse({
         url: `${ENDPOINT}15/`,
         method: 'DELETE',
       });
@@ -110,7 +110,7 @@ describe('AccountSecurityDetails', function() {
         url: ENDPOINT,
         body: [TestStubs.Authenticators().Totp()],
       });
-      let deleteMock = Client.addMockResponse({
+      const deleteMock = Client.addMockResponse({
         url: `${ENDPOINT}15/`,
         method: 'DELETE',
       });
@@ -182,7 +182,7 @@ describe('AccountSecurityDetails', function() {
     });
 
     it('regenerates codes', function() {
-      let deleteMock = Client.addMockResponse({
+      const deleteMock = Client.addMockResponse({
         url: `${ENDPOINT}16/`,
         method: 'PUT',
       });
@@ -193,9 +193,9 @@ describe('AccountSecurityDetails', function() {
     });
 
     it('has copy, print and download buttons', function() {
-      let codes = 'ABCD-1234 \nEFGH-5678';
+      const codes = 'ABCD-1234 \nEFGH-5678';
 
-      let downloadCodes = `Button[href="data:text/plain;charset=utf-8,${codes}"]`;
+      const downloadCodes = `Button[href="data:text/plain;charset=utf-8,${codes}"]`;
       expect(wrapper.find(downloadCodes)).toHaveLength(1);
       wrapper.find(downloadCodes).simulate('click');
 
diff --git a/tests/js/spec/views/accountSecurityEnroll.spec.jsx b/tests/js/spec/views/accountSecurityEnroll.spec.jsx
index 6d4cc7dd47..d40e9024b5 100644
--- a/tests/js/spec/views/accountSecurityEnroll.spec.jsx
+++ b/tests/js/spec/views/accountSecurityEnroll.spec.jsx
@@ -11,7 +11,7 @@ describe('AccountSecurityEnroll', function() {
 
   describe('Totp', function() {
     Client.clearMockResponses();
-    let authenticator = TestStubs.Authenticators().Totp({
+    const authenticator = TestStubs.Authenticators().Totp({
       isEnrolled: false,
       qrcode: [[1, 0]],
       secret: 'secret',
@@ -52,7 +52,7 @@ describe('AccountSecurityEnroll', function() {
     });
 
     it('can enroll', function() {
-      let enrollMock = Client.addMockResponse({
+      const enrollMock = Client.addMockResponse({
         url: `${ENDPOINT}${authenticator.authId}/enroll/`,
         method: 'POST',
       });
@@ -78,7 +78,7 @@ describe('AccountSecurityEnroll', function() {
         statusCode: 400,
       });
 
-      let pushMock = jest.fn();
+      const pushMock = jest.fn();
       wrapper = mount(
         <AccountSecurityEnroll />,
         TestStubs.routerContext([
diff --git a/tests/js/spec/views/accountSecuritySessionHistory.spec.jsx b/tests/js/spec/views/accountSecuritySessionHistory.spec.jsx
index f42e08e6b1..ab0890ef56 100644
--- a/tests/js/spec/views/accountSecuritySessionHistory.spec.jsx
+++ b/tests/js/spec/views/accountSecuritySessionHistory.spec.jsx
@@ -39,7 +39,7 @@ describe('AccountSecuritySessionHistory', function() {
       ],
     });
 
-    let wrapper = mount(<AccountSecuritySessionHistory />, TestStubs.routerContext());
+    const wrapper = mount(<AccountSecuritySessionHistory />, TestStubs.routerContext());
 
     wrapper.update();
     await tick();
diff --git a/tests/js/spec/views/accountSubscriptions.spec.jsx b/tests/js/spec/views/accountSubscriptions.spec.jsx
index a7111a368e..94a729d2a2 100644
--- a/tests/js/spec/views/accountSubscriptions.spec.jsx
+++ b/tests/js/spec/views/accountSubscriptions.spec.jsx
@@ -17,7 +17,7 @@ describe('AccountSubscriptions', function() {
       url: ENDPOINT,
       body: [],
     });
-    let wrapper = shallow(<AccountSubscriptions />, {
+    const wrapper = shallow(<AccountSubscriptions />, {
       context: {
         router: TestStubs.router(),
       },
@@ -34,12 +34,12 @@ describe('AccountSubscriptions', function() {
       url: ENDPOINT,
       body: TestStubs.Subscriptions(),
     });
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
     });
 
-    let wrapper = mount(<AccountSubscriptions />, {
+    const wrapper = mount(<AccountSubscriptions />, {
       context: {
         router: TestStubs.router(),
       },
diff --git a/tests/js/spec/views/admin/adminBuffer.spec.jsx b/tests/js/spec/views/admin/adminBuffer.spec.jsx
index 3a38744251..fa028ba4c4 100644
--- a/tests/js/spec/views/admin/adminBuffer.spec.jsx
+++ b/tests/js/spec/views/admin/adminBuffer.spec.jsx
@@ -8,7 +8,7 @@ import AdminBuffer from 'app/views/admin/adminBuffer';
 describe('AdminBuffer', function() {
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(<AdminBuffer params={{}} />, {
+      const wrapper = shallow(<AdminBuffer params={{}} />, {
         context: {
           router: TestStubs.router(),
         },
diff --git a/tests/js/spec/views/admin/adminQueue.spec.jsx b/tests/js/spec/views/admin/adminQueue.spec.jsx
index 76012d4166..aeaf3c471d 100644
--- a/tests/js/spec/views/admin/adminQueue.spec.jsx
+++ b/tests/js/spec/views/admin/adminQueue.spec.jsx
@@ -58,7 +58,7 @@ describe('AdminQueue', function() {
     });
 
     it('renders', function() {
-      let wrapper = shallow(<AdminQueue params={{}} />, {
+      const wrapper = shallow(<AdminQueue params={{}} />, {
         context: {
           router: TestStubs.router(),
         },
diff --git a/tests/js/spec/views/admin/adminQuotas.spec.jsx b/tests/js/spec/views/admin/adminQuotas.spec.jsx
index cf361107a8..0360941847 100644
--- a/tests/js/spec/views/admin/adminQuotas.spec.jsx
+++ b/tests/js/spec/views/admin/adminQuotas.spec.jsx
@@ -21,7 +21,7 @@ describe('AdminQuotas', function() {
     });
 
     it('renders', function() {
-      let wrapper = shallow(<AdminQuotas params={{}} />, {
+      const wrapper = shallow(<AdminQuotas params={{}} />, {
         context: {
           router: TestStubs.router(),
         },
diff --git a/tests/js/spec/views/admin/adminSettings.spec.jsx b/tests/js/spec/views/admin/adminSettings.spec.jsx
index 7ffec72d7f..0fa6e948aa 100644
--- a/tests/js/spec/views/admin/adminSettings.spec.jsx
+++ b/tests/js/spec/views/admin/adminSettings.spec.jsx
@@ -116,7 +116,7 @@ describe('AdminSettings', function() {
     });
 
     it('renders', function() {
-      let wrapper = shallow(<AdminSettings params={{}} />, {
+      const wrapper = shallow(<AdminSettings params={{}} />, {
         context: {
           router: TestStubs.router(),
         },
diff --git a/tests/js/spec/views/apiNewToken.spec.jsx b/tests/js/spec/views/apiNewToken.spec.jsx
index f16b78d91e..35dc045a17 100644
--- a/tests/js/spec/views/apiNewToken.spec.jsx
+++ b/tests/js/spec/views/apiNewToken.spec.jsx
@@ -6,7 +6,7 @@ import ApiNewToken from 'app/views/apiNewToken';
 describe('ApiNewToken', function() {
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(<ApiNewToken params={{}} />, {
+      const wrapper = shallow(<ApiNewToken params={{}} />, {
         context: {
           router: TestStubs.router(),
         },
diff --git a/tests/js/spec/views/apiTokenRow.spec.jsx b/tests/js/spec/views/apiTokenRow.spec.jsx
index c6ef182ffb..e753b43099 100644
--- a/tests/js/spec/views/apiTokenRow.spec.jsx
+++ b/tests/js/spec/views/apiTokenRow.spec.jsx
@@ -4,7 +4,7 @@ import ApiTokenRow from 'app/views/settings/account/apiTokenRow';
 
 describe('ApiTokenRow', function() {
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ApiTokenRow onRemove={() => {}} token={TestStubs.ApiToken()} />,
       TestStubs.routerContext()
     );
@@ -14,8 +14,8 @@ describe('ApiTokenRow', function() {
   });
 
   it('calls onRemove callback when trash can is clicked', function() {
-    let cb = jest.fn();
-    let wrapper = mount(
+    const cb = jest.fn();
+    const wrapper = mount(
       <ApiTokenRow onRemove={cb} token={TestStubs.ApiToken()} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/views/apiTokens.spec.jsx b/tests/js/spec/views/apiTokens.spec.jsx
index bd40542163..4183c1a395 100644
--- a/tests/js/spec/views/apiTokens.spec.jsx
+++ b/tests/js/spec/views/apiTokens.spec.jsx
@@ -5,7 +5,7 @@ import {Client} from 'app/api';
 import ApiTokens from 'app/views/settings/account/apiTokens';
 
 describe('ApiTokens', function() {
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(function() {
     Client.clearMockResponses();
@@ -16,7 +16,7 @@ describe('ApiTokens', function() {
       url: '/api-tokens/',
     });
 
-    let wrapper = shallow(<ApiTokens />, routerContext);
+    const wrapper = shallow(<ApiTokens />, routerContext);
 
     // Should be loading
     expect(wrapper).toMatchSnapshot();
@@ -28,7 +28,7 @@ describe('ApiTokens', function() {
       body: [TestStubs.ApiToken()],
     });
 
-    let wrapper = shallow(<ApiTokens />, routerContext);
+    const wrapper = shallow(<ApiTokens />, routerContext);
 
     // Should be loading
     expect(wrapper).toMatchSnapshot();
@@ -40,14 +40,14 @@ describe('ApiTokens', function() {
       body: [TestStubs.ApiToken()],
     });
 
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: '/api-tokens/',
       method: 'DELETE',
     });
 
     expect(mock).not.toHaveBeenCalled();
 
-    let wrapper = mount(<ApiTokens />, routerContext);
+    const wrapper = mount(<ApiTokens />, routerContext);
 
     wrapper.find('.ref-delete-api-token').simulate('click');
 
diff --git a/tests/js/spec/views/app.spec.jsx b/tests/js/spec/views/app.spec.jsx
index f8d96bd2ed..305d5b5406 100644
--- a/tests/js/spec/views/app.spec.jsx
+++ b/tests/js/spec/views/app.spec.jsx
@@ -27,12 +27,12 @@ describe('App', function() {
   });
 
   it('renders newsletter consent with flag', async function() {
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
     user.flags.newsletter_consent_prompt = true;
     // XXX(dcramer): shouldnt need to re-set
     ConfigStore.set('user', user);
 
-    let wrapper = mount(
+    const wrapper = mount(
       <App params={{orgId: 'org-slug'}}>{<div>placeholder content</div>}</App>
     );
 
@@ -40,12 +40,12 @@ describe('App', function() {
   });
 
   it('does not render newsletter consent without flag', async function() {
-    let user = ConfigStore.get('user');
+    const user = ConfigStore.get('user');
     user.flags.newsletter_consent_prompt = false;
     // XXX(dcramer): shouldnt need to re-set
     ConfigStore.set('user', user);
 
-    let wrapper = mount(
+    const wrapper = mount(
       <App params={{orgId: 'org-slug'}}>{<div>placeholder content</div>}</App>
     );
 
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index c7e17ac6b3..414ac0c2a7 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -23,7 +23,7 @@ describe('GroupActivity', function() {
   });
 
   it('renders a NoteInput', function() {
-    let wrapper = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
+    const wrapper = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
       context: {
         group: {id: '1337'},
         project: TestStubs.Project(),
@@ -50,7 +50,7 @@ describe('GroupActivity', function() {
 
     it('should do nothing if not present in GroupStore', function() {
       sandbox.stub(GroupStore, 'removeActivity').returns(-1); // not found
-      let request = sandbox.stub(instance.api, 'request');
+      const request = sandbox.stub(instance.api, 'request');
 
       instance.onNoteDelete({id: 1});
       expect(request.calledOnce).not.toBeTruthy();
@@ -59,7 +59,7 @@ describe('GroupActivity', function() {
     it('should remove remove the item from the GroupStore make a DELETE API request', function() {
       sandbox.stub(GroupStore, 'removeActivity').returns(1);
 
-      let request = sandbox.stub(instance.api, 'request');
+      const request = sandbox.stub(instance.api, 'request');
       instance.onNoteDelete({id: 1});
       expect(request.calledOnce).toBeTruthy();
       expect(request.getCall(0).args[0]).toEqual('/issues/1337/comments/1/');
diff --git a/tests/js/spec/views/groupDetails/actions.spec.jsx b/tests/js/spec/views/groupDetails/actions.spec.jsx
index 24bfec5c66..0e0773f17d 100644
--- a/tests/js/spec/views/groupDetails/actions.spec.jsx
+++ b/tests/js/spec/views/groupDetails/actions.spec.jsx
@@ -19,7 +19,7 @@ describe('GroupActions', function() {
 
   describe('render()', function() {
     it('renders correctly', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <GroupActions
           group={TestStubs.Group({
             id: '1337',
diff --git a/tests/js/spec/views/groupDetails/groupMergedView.spec.jsx b/tests/js/spec/views/groupDetails/groupMergedView.spec.jsx
index 2ca4b72b6f..04e43a9a8f 100644
--- a/tests/js/spec/views/groupDetails/groupMergedView.spec.jsx
+++ b/tests/js/spec/views/groupDetails/groupMergedView.spec.jsx
@@ -30,7 +30,7 @@ const mockData = {
 };
 
 describe('Issues -> Merged View', function() {
-  let context = {
+  const context = {
     group: {
       id: 'id',
       tags: [],
@@ -44,7 +44,7 @@ describe('Issues -> Merged View', function() {
   });
 
   it('renders initially with loading component', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <GroupMergedView
         params={{orgId: 'orgId', projectId: 'projectId', groupId: 'groupId'}}
         location={{query: {}}}
@@ -56,7 +56,7 @@ describe('Issues -> Merged View', function() {
   });
 
   it('renders with mocked data', async function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <GroupMergedView
         params={{orgId: 'orgId', projectId: 'projectId', groupId: 'groupId'}}
         location={{query: {}}}
diff --git a/tests/js/spec/views/groupDetails/groupSimilar.spec.jsx b/tests/js/spec/views/groupDetails/groupSimilar.spec.jsx
index f67f01b570..022d4e78bb 100644
--- a/tests/js/spec/views/groupDetails/groupSimilar.spec.jsx
+++ b/tests/js/spec/views/groupDetails/groupSimilar.spec.jsx
@@ -43,7 +43,7 @@ describe('Issues Similar View', function() {
   });
 
   it('renders initially with loading component', function() {
-    let component = shallow(
+    const component = shallow(
       <GroupSimilar project={project} params={{groupId: 'group-id'}} location={{}} />,
       routerContext
     );
@@ -52,7 +52,7 @@ describe('Issues Similar View', function() {
   });
 
   it('renders with mocked data', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <GroupSimilar
         project={project}
         query={''}
@@ -70,7 +70,7 @@ describe('Issues Similar View', function() {
   });
 
   it('can merge and redirect to new parent', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <GroupSimilar
         project={project}
         params={{orgId: 'org-slug', projectId: 'project-slug', groupId: 'group-id'}}
@@ -78,7 +78,7 @@ describe('Issues Similar View', function() {
       />,
       routerContext
     );
-    let merge = MockApiClient.addMockResponse({
+    const merge = MockApiClient.addMockResponse({
       method: 'PUT',
       url: '/projects/org-slug/project-slug/issues/',
       body: {
diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index 317f998067..b6a2f645eb 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -19,12 +19,14 @@ describe('GroupSeenBy', function() {
 
   describe('render()', function() {
     it('should return null if seenBy is falsy', function() {
-      let wrapper = shallow(<GroupSeenBy group={TestStubs.Group({seenBy: undefined})} />);
+      const wrapper = shallow(
+        <GroupSeenBy group={TestStubs.Group({seenBy: undefined})} />
+      );
       expect(wrapper.children()).toHaveLength(0);
     });
 
     it('should return a list of each user that saw', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <GroupSeenBy
           group={TestStubs.Group({
             seenBy: [
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index 1fb80e4c03..bd7d0896f1 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -41,7 +41,7 @@ describe('CreateProject', function() {
   });
 
   it('should render loading', function() {
-    let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+    const wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
     expect(wrapper).toMatchSnapshot();
   });
 
@@ -60,12 +60,12 @@ describe('CreateProject', function() {
       },
     });
 
-    let context = _.cloneDeep(baseContext);
+    const context = _.cloneDeep(baseContext);
 
-    let team = context.context.organization.teams.slice(0, 1);
+    const team = context.context.organization.teams.slice(0, 1);
     context.context.organization.teams = team;
 
-    let wrapper = mount(<InviteMember {...baseProps} />, context);
+    const wrapper = mount(<InviteMember {...baseProps} />, context);
 
     expect(wrapper.state('selectedTeams').size).toBe(1);
     expect(wrapper.state('selectedTeams').has(team[0].slug)).toBe(true);
@@ -86,11 +86,11 @@ describe('CreateProject', function() {
       },
     });
 
-    let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+    const wrapper = mount(<InviteMember {...baseProps} />, baseContext);
 
-    let first = 'TeamSelect Checkbox[id="bar"]';
-    let last = 'TeamSelect Checkbox[id="foo"]';
-    let selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
+    const first = 'TeamSelect Checkbox[id="bar"]';
+    const last = 'TeamSelect Checkbox[id="foo"]';
+    const selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
 
     expect(wrapper.state('selectedTeams').size).toBe(0);
     expect(selectAllButton).toHaveLength(1);
@@ -127,7 +127,7 @@ describe('CreateProject', function() {
     sandbox.restore(ConfigStore, 'getConfig');
     sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
 
-    let wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
+    const wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
     wrapper.setState({
       loading: false,
     });
@@ -151,7 +151,7 @@ describe('CreateProject', function() {
       },
     });
 
-    let pushMock = jest.fn();
+    const pushMock = jest.fn();
     let wrapper = mount(
       <InviteMember
         router={{
@@ -195,16 +195,16 @@ describe('CreateProject', function() {
       },
     });
 
-    let inviteRequest = {
+    const inviteRequest = {
       url: '/organizations/testOrg/members/',
       method: 'POST',
       statusCode: 200,
       body: {},
     };
 
-    let mock = MockApiClient.addMockResponse(inviteRequest);
+    const mock = MockApiClient.addMockResponse(inviteRequest);
 
-    let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+    const wrapper = mount(<InviteMember {...baseProps} />, baseContext);
 
     expect(wrapper.state('loading')).toBe(false);
 
@@ -239,7 +239,7 @@ describe('CreateProject', function() {
       },
     });
 
-    let inviteRequest = {
+    const inviteRequest = {
       url: '/organizations/testOrg/members/',
       method: 'POST',
       statusCode: 400,
@@ -248,9 +248,9 @@ describe('CreateProject', function() {
       },
     };
 
-    let mock = MockApiClient.addMockResponse(inviteRequest);
+    const mock = MockApiClient.addMockResponse(inviteRequest);
 
-    let wrapper = mount(<InviteMember {...baseProps} />, baseContext);
+    const wrapper = mount(<InviteMember {...baseProps} />, baseContext);
 
     let node = wrapper.find('RoleSelect PanelItem').first();
     node.props().onClick();
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index 25e1852960..c26bb32a9f 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -89,12 +89,12 @@ describe('Configure should render correctly', function() {
     };
 
     it("shouldn't redirect for a found platform", function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
       props.params.platform = 'node';
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <Configure {...props} />,
         TestStubs.routerContext([
           {
@@ -105,7 +105,7 @@ describe('Configure should render correctly', function() {
 
       const component = wrapper.instance();
 
-      let handleSubmitStub = sandbox.stub(component, 'redirectToNeutralDocs', () => {});
+      const handleSubmitStub = sandbox.stub(component, 'redirectToNeutralDocs', () => {});
 
       wrapper.update();
       expect(wrapper).toMatchSnapshot();
@@ -113,19 +113,19 @@ describe('Configure should render correctly', function() {
     });
 
     it('should redirect to if no matching platform', function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
       props.params.platform = 'other';
 
-      let handleSubmitStub = sandbox.stub(Configure.prototype, 'redirectToNeutralDocs');
+      const handleSubmitStub = sandbox.stub(Configure.prototype, 'redirectToNeutralDocs');
 
       // 👺 ⚠️ this is a hack to defeat the method auto binding so we can fully stub the method. It would not be neccessary with es6 class components and it relies on react internals so it's fragile - maxbittker
       const index =
         Configure.prototype.__reactAutoBindPairs.indexOf('redirectToNeutralDocs') + 1;
       Configure.prototype.__reactAutoBindPairs[index] = handleSubmitStub;
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <Configure {...props} />,
         TestStubs.routerContext([
           {
@@ -139,12 +139,12 @@ describe('Configure should render correctly', function() {
     });
 
     it('should render platform docs', async function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
       props.params.platform = 'node';
 
-      let wrapper = mount(
+      const wrapper = mount(
         <Configure {...props} />,
         TestStubs.routerContext([
           {
diff --git a/tests/js/spec/views/onboarding/createProject.spec.jsx b/tests/js/spec/views/onboarding/createProject.spec.jsx
index dd22196e17..a5e60daa96 100644
--- a/tests/js/spec/views/onboarding/createProject.spec.jsx
+++ b/tests/js/spec/views/onboarding/createProject.spec.jsx
@@ -16,11 +16,11 @@ describe('CreateProject', function() {
   };
 
   it('should block if you have access to no teams', function() {
-    let props = {
+    const props = {
       ...baseProps,
     };
 
-    let wrapper = shallow(
+    const wrapper = shallow(
       <CreateProject {...props} />,
       TestStubs.routerContext([
         {
@@ -38,11 +38,11 @@ describe('CreateProject', function() {
   });
 
   it('can create a new team if no access to teams', function() {
-    let props = {
+    const props = {
       ...baseProps,
     };
 
-    let wrapper = mount(
+    const wrapper = mount(
       <CreateProject {...props} />,
       TestStubs.routerContext([
         {
@@ -60,11 +60,11 @@ describe('CreateProject', function() {
   });
 
   it('should fill in project name if its empty when platform is chosen', function() {
-    let props = {
+    const props = {
       ...baseProps,
     };
 
-    let wrapper = mount(
+    const wrapper = mount(
       <CreateProject {...props} />,
       TestStubs.routerContext([
         {
@@ -97,11 +97,11 @@ describe('CreateProject', function() {
   });
 
   it('should fill in platform name if its provided by url', function() {
-    let props = {
+    const props = {
       ...baseProps,
     };
 
-    let wrapper = mount(
+    const wrapper = mount(
       <CreateProject {...props} />,
       TestStubs.routerContext([
         {
@@ -121,11 +121,11 @@ describe('CreateProject', function() {
   });
 
   it('should deal with incorrect platform name if its provided by url', function() {
-    let props = {
+    const props = {
       ...baseProps,
     };
 
-    let wrapper = mount(
+    const wrapper = mount(
       <CreateProject {...props} />,
       TestStubs.routerContext([
         {
diff --git a/tests/js/spec/views/onboarding/index.spec.jsx b/tests/js/spec/views/onboarding/index.spec.jsx
index c38ec8d5ee..835c91c99e 100644
--- a/tests/js/spec/views/onboarding/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/index.spec.jsx
@@ -28,21 +28,21 @@ describe('OnboardingWizard', function() {
     };
 
     it('should render NotFound if no matching organization', function() {
-      let props = {
+      const props = {
         ...baseProps,
         params: {
           orgId: 'my-cool-org',
         },
       };
 
-      let wrapper = shallow(<OnboardingWizard {...props} />, {
+      const wrapper = shallow(<OnboardingWizard {...props} />, {
         organization: {id: '1337', slug: 'testOrg', experiments: {}},
       });
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should render and respond to click events', function() {
-      let props = {
+      const props = {
         ...baseProps,
         children: (
           <Project
@@ -55,7 +55,7 @@ describe('OnboardingWizard', function() {
         ),
       };
 
-      let wrapper = mount(<OnboardingWizard {...props} />, {
+      const wrapper = mount(<OnboardingWizard {...props} />, {
         context: {
           organization: {id: '1337', slug: 'testOrg', experiments: {}},
           router: TestStubs.router(),
@@ -69,7 +69,7 @@ describe('OnboardingWizard', function() {
       });
 
       expect(wrapper).toMatchSnapshot();
-      let node = wrapper.find('PlatformCard').first();
+      const node = wrapper.find('PlatformCard').first();
       node.simulate('click');
       expect(wrapper).toMatchSnapshot();
     });
diff --git a/tests/js/spec/views/onboarding/progress.spec.jsx b/tests/js/spec/views/onboarding/progress.spec.jsx
index 7c53c7d332..580a39341c 100644
--- a/tests/js/spec/views/onboarding/progress.spec.jsx
+++ b/tests/js/spec/views/onboarding/progress.spec.jsx
@@ -12,13 +12,13 @@ describe('ProgressNodes', function() {
     };
 
     it('should render step 0 if no projectId', function() {
-      let baseContext = {
+      const baseContext = {
         context: {
           organization: {id: '1337', slug: 'testOrg', experiments: {}},
           location: {pathname: 'http://onboarding/lol/', query: {}},
         },
       };
-      let wrapper = shallow(<ProgressNodes {...baseProps} />, baseContext);
+      const wrapper = shallow(<ProgressNodes {...baseProps} />, baseContext);
 
       expect(wrapper.find('[data-test-id="node"]')).toHaveLength(3);
       expect(wrapper.find('[data-test-id="node"]').find({active: true})).toHaveLength(1);
@@ -37,7 +37,7 @@ describe('ProgressNodes', function() {
     });
 
     it('should render step 1 if has projectId', function() {
-      let baseContext = {
+      const baseContext = {
         context: {
           organization: {id: '1337', slug: 'testOrg', experiments: {}},
           location: {
@@ -46,14 +46,14 @@ describe('ProgressNodes', function() {
           },
         },
       };
-      let props = {
+      const props = {
         ...baseProps,
         params: {
           projectId: 'my-cool-project',
         },
       };
 
-      let wrapper = shallow(<ProgressNodes {...props} />, baseContext);
+      const wrapper = shallow(<ProgressNodes {...props} />, baseContext);
 
       expect(wrapper.find('[data-test-id="node"]')).toHaveLength(3);
       expect(wrapper.find('[data-test-id="node"]').find({active: true})).toHaveLength(1);
diff --git a/tests/js/spec/views/onboarding/project/index.spec.jsx b/tests/js/spec/views/onboarding/project/index.spec.jsx
index 6c850b5766..cd855c3ca6 100644
--- a/tests/js/spec/views/onboarding/project/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/project/index.spec.jsx
@@ -32,25 +32,25 @@ describe('Project', function() {
     };
 
     it('should render NotFound if no matching organization', function() {
-      let props = {
+      const props = {
         ...baseProps,
         params: {
           orgId: 'my-cool-org',
         },
       };
 
-      let wrapper = shallow(<Project {...props} />, {
+      const wrapper = shallow(<Project {...props} />, {
         organization: {id: '1337', slug: 'testOrg'},
       });
       expect(wrapper).toMatchSnapshot();
     });
 
     it('should set required class on empty submit', function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
 
-      let wrapper = mount(<Project {...props} />, {
+      const wrapper = mount(<Project {...props} />, {
         context: {
           organization: {id: '1337', slug: 'testOrg'},
           router: TestStubs.router(),
@@ -61,7 +61,7 @@ describe('Project', function() {
         },
       });
 
-      let submit = wrapper.find('button').last();
+      const submit = wrapper.find('button').last();
       expect(wrapper.state().projectRequired).toBe(false);
       submit.simulate('click');
       expect(wrapper.state().projectRequired).toBe(true);
diff --git a/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx b/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
index d7a8bae6fa..42f10439ef 100644
--- a/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
+++ b/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
@@ -26,13 +26,13 @@ describe('PlatformPicker', function() {
     };
 
     it('should only render Mobile platforms under Mobile tab', function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
 
-      let wrapper = shallow(<PlatformPicker {...props} />);
+      const wrapper = shallow(<PlatformPicker {...props} />);
       wrapper.setState({tab: 'mobile'});
-      let filteredPlatforms = wrapper
+      const filteredPlatforms = wrapper
         .find('PlatformCard')
         .map(node => node.prop('platform'));
 
@@ -43,15 +43,15 @@ describe('PlatformPicker', function() {
     });
 
     it('should render renderPlatformList with Python when filtered with py', function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
 
-      let wrapper = shallow(<PlatformPicker {...props} />);
+      const wrapper = shallow(<PlatformPicker {...props} />);
 
       wrapper.setState({tab: 'all', filter: 'py'});
 
-      let filteredPlatforms = wrapper
+      const filteredPlatforms = wrapper
         .find('PlatformCard')
         .map(node => node.prop('platform'));
       expect(filteredPlatforms).not.toContain('java');
@@ -61,11 +61,11 @@ describe('PlatformPicker', function() {
     });
 
     it('should render renderPlatformList with community SDKs message if platform not found', function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
 
-      let wrapper = shallow(<PlatformPicker {...props} />);
+      const wrapper = shallow(<PlatformPicker {...props} />);
       wrapper.setState({filter: 'aaaaaa'});
 
       expect(wrapper.text()).toContain('Not finding your platform?');
@@ -74,11 +74,11 @@ describe('PlatformPicker', function() {
     });
 
     it('should update State.tab onClick when particular tab is clicked', function() {
-      let props = {
+      const props = {
         ...baseProps,
       };
 
-      let wrapper = mount(<PlatformPicker {...props} />, {
+      const wrapper = mount(<PlatformPicker {...props} />, {
         context: {
           router: TestStubs.router(),
         },
@@ -87,7 +87,7 @@ describe('PlatformPicker', function() {
         },
       });
 
-      let testListLink = wrapper
+      const testListLink = wrapper
         .find('ListLink')
         .last()
         .find('a');
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index fadf2b9349..34055e810e 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -17,7 +17,7 @@ jest.mock('app/actionCreators/modal', () => ({
 
 describe('OrganizationContext', function() {
   let wrapper;
-  let org = TestStubs.Organization({
+  const org = TestStubs.Organization({
     teams: [TestStubs.Team()],
     projects: [TestStubs.Project()],
   });
@@ -75,7 +75,7 @@ describe('OrganizationContext', function() {
   });
 
   it('fetches new org when router params change', function() {
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: '/organizations/new-slug/',
       body: org,
     });
diff --git a/tests/js/spec/views/organizationCreate.spec.jsx b/tests/js/spec/views/organizationCreate.spec.jsx
index 131e6d5bfc..5e38fee75a 100644
--- a/tests/js/spec/views/organizationCreate.spec.jsx
+++ b/tests/js/spec/views/organizationCreate.spec.jsx
@@ -21,7 +21,7 @@ describe('OrganizationCreate', function() {
     it('renders without terms', function() {
       ConfigStore.set('termsUrl', null);
       ConfigStore.set('privacyUrl', null);
-      let wrapper = shallow(<OrganizationCreate />, {
+      const wrapper = shallow(<OrganizationCreate />, {
         context: {router: TestStubs.router()},
       });
       expect(wrapper).toMatchSnapshot();
@@ -30,7 +30,7 @@ describe('OrganizationCreate', function() {
     it('renders with terms', function() {
       ConfigStore.set('termsUrl', 'https://example.com/terms');
       ConfigStore.set('privacyUrl', 'https://example.com/privacy');
-      let wrapper = shallow(<OrganizationCreate />, {
+      const wrapper = shallow(<OrganizationCreate />, {
         context: {router: TestStubs.router()},
       });
       expect(wrapper).toMatchSnapshot();
diff --git a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
index 6cc51ac83c..5ad74f621f 100644
--- a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
+++ b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
@@ -45,7 +45,7 @@ describe('OrganizationDashboard', function() {
   });
 
   it('queries and renders discover-based widgets grouped by time', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationDashboardContainer>
         <Dashboard {...TestStubs.Dashboard()} />
       </OrganizationDashboardContainer>,
@@ -99,7 +99,7 @@ describe('OrganizationDashboard', function() {
   });
 
   it('queries and renders discover-based widgets not grouped by time', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationDashboardContainer>
         <Dashboard
           {...TestStubs.Dashboard([
diff --git a/tests/js/spec/views/organizationDashboard/discoverQuery.spec.jsx b/tests/js/spec/views/organizationDashboard/discoverQuery.spec.jsx
index 8aded5c6e1..bde3b426ad 100644
--- a/tests/js/spec/views/organizationDashboard/discoverQuery.spec.jsx
+++ b/tests/js/spec/views/organizationDashboard/discoverQuery.spec.jsx
@@ -121,7 +121,7 @@ describe('DiscoverQuery', function() {
 
   it('does not re-render if `props.children` "changes" (e.g. new function instance gets passed every render)', function() {
     renderMock.mockClear();
-    let newRender = jest.fn(() => null);
+    const newRender = jest.fn(() => null);
     wrapper.setProps({children: newRender});
     wrapper.update();
 
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
index e931c8cdc9..146d9ad435 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
@@ -88,7 +88,7 @@ describe('Condition', function() {
 
   describe('handleChange()', function() {
     let wrapper, focusSpy;
-    let onChangeMock = jest.fn();
+    const onChangeMock = jest.fn();
     beforeEach(function() {
       focusSpy = jest.spyOn(Condition.prototype, 'focus');
       const columns = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
@@ -123,7 +123,7 @@ describe('Condition', function() {
 
   describe('handleBlur()', function() {
     let wrapper;
-    let onChangeMock = jest.fn();
+    const onChangeMock = jest.fn();
     beforeEach(function() {
       const columns = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
       wrapper = mount(
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index e953ecf9a1..eb5679c471 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -78,7 +78,7 @@ describe('OrganizationEventsErrors', function() {
       statusCode: 500,
       body: {details: 'Error'},
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationEvents organization={org} location={{query: {}}} />,
       routerContext
     );
@@ -91,7 +91,7 @@ describe('OrganizationEventsErrors', function() {
   });
 
   it('renders events table', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationEvents organization={org} location={{query: {}}} />,
       routerContext
     );
@@ -121,7 +121,7 @@ describe('OrganizationEventsErrors', function() {
   // This tests the component's `shouldComponentUpdate`
   // Use `search` to compare instead of `query` because that's what we check in `AsyncComponent`
   it('location.query changes updates events table', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationEvents
         organization={org}
         location={{
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
index 4dadf130da..7e06accbbb 100644
--- a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
@@ -63,7 +63,6 @@ describe('EventsChart', function() {
   });
 
   it('has correct history entries when zooming', function() {
-    let newParams;
     const chartZoomInstance = wrapper.find('ChartZoom').instance();
 
     doZoom(wrapper, chart);
@@ -99,7 +98,7 @@ describe('EventsChart', function() {
     expect(chartZoomInstance.currentPeriod.period).toEqual(null);
     expect(chartZoomInstance.currentPeriod.start).toEqual('2018-11-29T00:00:00');
     expect(chartZoomInstance.currentPeriod.end).toEqual('2018-12-02T00:00:00');
-    newParams = {
+    const newParams = {
       period: null,
       start: '2018-11-29T00:00:00',
       end: '2018-12-02T00:00:00',
@@ -114,8 +113,6 @@ describe('EventsChart', function() {
   });
 
   it('updates url params when restoring zoom level on chart', function() {
-    let newParams;
-
     doZoom(wrapper, chart);
     // Zoom again
     mockZoomRange(1543536000000, 1543708800000);
@@ -134,7 +131,7 @@ describe('EventsChart', function() {
       start: null,
       end: null,
     });
-    newParams = {
+    const newParams = {
       period: '14d',
       start: null,
       end: null,
diff --git a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
index f33bf1e8ae..548b5782cd 100644
--- a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
@@ -30,8 +30,8 @@ describe('SearchBar', function() {
   let options;
   let tagValuesMock;
   let tagKeysMock;
-  let organization = TestStubs.Organization();
-  let props = {
+  const organization = TestStubs.Organization();
+  const props = {
     organization,
   };
 
@@ -56,7 +56,7 @@ describe('SearchBar', function() {
   });
 
   it('fetches organization tags on mount', async function() {
-    let wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = await mount(<SearchBar {...props} />, options);
     expect(tagKeysMock).toHaveBeenCalledTimes(1);
     wrapper.update();
     expect(wrapper.find('SmartSearchBar').prop('supportedTags')).toEqual(
@@ -68,7 +68,7 @@ describe('SearchBar', function() {
   });
 
   it('searches and selects an event field value', async function() {
-    let wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = await mount(<SearchBar {...props} />, options);
     setQuery(wrapper, 'gpu:');
 
     expect(tagValuesMock).toHaveBeenCalledWith(
@@ -92,7 +92,7 @@ describe('SearchBar', function() {
   });
 
   it('does not requery for event field values if query does not change', async function() {
-    let wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = await mount(<SearchBar {...props} />, options);
     setQuery(wrapper, 'gpu:');
 
     expect(tagValuesMock).toHaveBeenCalledTimes(1);
@@ -106,7 +106,7 @@ describe('SearchBar', function() {
   });
 
   it('removes highlight when query is empty', async function() {
-    let wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = await mount(<SearchBar {...props} />, options);
     setQuery(wrapper, 'gpu');
 
     await tick();
@@ -120,7 +120,7 @@ describe('SearchBar', function() {
   });
 
   it('ignores negation ("!") at the beginning of search term', async function() {
-    let wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = await mount(<SearchBar {...props} />, options);
 
     setQuery(wrapper, '!gp');
     await tick();
@@ -131,7 +131,7 @@ describe('SearchBar', function() {
   });
 
   it('ignores wildcard ("*") at the beginning of tag value query', async function() {
-    let wrapper = await mount(<SearchBar {...props} />, options);
+    const wrapper = await mount(<SearchBar {...props} />, options);
 
     setQuery(wrapper, '!gpu:*');
     await tick();
diff --git a/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx b/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
index 08f65d08e5..25f11ae49f 100644
--- a/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
@@ -16,7 +16,7 @@ describe('IntegrationRepos', function() {
 
   describe('Adding repositories', function() {
     it('can save successfully', async function() {
-      let addRepo = Client.addMockResponse({
+      const addRepo = Client.addMockResponse({
         url: `/organizations/${org.slug}/repos/`,
         method: 'POST',
         body: TestStubs.Repository({integrationId: '1'}),
@@ -53,7 +53,7 @@ describe('IntegrationRepos', function() {
           },
         })
       );
-      let name = wrapper
+      const name = wrapper
         .find('RepositoryRow')
         .find('strong')
         .first();
@@ -62,7 +62,7 @@ describe('IntegrationRepos', function() {
     });
 
     it('handles failure during save', async function() {
-      let addRepo = Client.addMockResponse({
+      const addRepo = Client.addMockResponse({
         url: `/organizations/${org.slug}/repos/`,
         method: 'POST',
         statusCode: 400,
diff --git a/tests/js/spec/views/organizationProjectsDashboard/emptyState.spec.jsx b/tests/js/spec/views/organizationProjectsDashboard/emptyState.spec.jsx
index 278d084839..b4a5987ef1 100644
--- a/tests/js/spec/views/organizationProjectsDashboard/emptyState.spec.jsx
+++ b/tests/js/spec/views/organizationProjectsDashboard/emptyState.spec.jsx
@@ -6,7 +6,7 @@ import EmptyState from 'app/views/organizationProjectsDashboard/emptyState';
 describe('EmptyState', function() {
   const org = TestStubs.Organization();
   it('shows "Create Project" button when there are no projects', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <EmptyState organization={org} projects={[]} />,
       TestStubs.routerContext()
     );
@@ -16,7 +16,7 @@ describe('EmptyState', function() {
   });
 
   it('"Create Project" is disabled when no access to `project:write`', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <EmptyState organization={TestStubs.Organization({access: []})} projects={[]} />,
       TestStubs.routerContext()
     );
@@ -26,7 +26,7 @@ describe('EmptyState', function() {
   });
 
   it('has "Join a Team" button', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <EmptyState organization={org} projects={[]} />,
       TestStubs.routerContext()
     );
@@ -34,7 +34,7 @@ describe('EmptyState', function() {
   });
 
   it('has a disabled "Join a Team" button if no access to `team:read`', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <EmptyState organization={TestStubs.Organization({access: []})} projects={[]} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/views/organizationRoot.spec.jsx b/tests/js/spec/views/organizationRoot.spec.jsx
index 9a93493099..7fbb103302 100644
--- a/tests/js/spec/views/organizationRoot.spec.jsx
+++ b/tests/js/spec/views/organizationRoot.spec.jsx
@@ -21,7 +21,7 @@ describe('OrganizationRoot', function() {
   });
 
   it('calls `setLastRoute` when unmounted', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationRoot location={{pathname: '/org-slug/dashboard/'}}>
         {null}
       </OrganizationRoot>
@@ -33,7 +33,7 @@ describe('OrganizationRoot', function() {
   });
 
   it('calls `setLastRoute` when unmounted with query string', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationRoot location={{pathname: '/org-slug/dashboard/', search: '?test=1'}}>
         {null}
       </OrganizationRoot>
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index bbea0af4c0..03186b07b9 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -113,7 +113,7 @@ describe('OrganizationStream', function() {
           datetime: {period: '14d'},
         },
       });
-      let value = wrapper.instance().getEndpointParams();
+      const value = wrapper.instance().getEndpointParams();
 
       expect(value.project).toBeUndefined();
       expect(value.projects).toBeUndefined();
@@ -131,7 +131,7 @@ describe('OrganizationStream', function() {
           },
         },
       });
-      let value = wrapper.instance().getEndpointParams();
+      const value = wrapper.instance().getEndpointParams();
 
       expect(value.groupStatsPeriod).toBeUndefined();
       expect(value.sort).toBeUndefined();
@@ -139,7 +139,7 @@ describe('OrganizationStream', function() {
 
     it('uses saved search data', function() {
       wrapper.setState({savedSearch});
-      let value = wrapper.instance().getEndpointParams();
+      const value = wrapper.instance().getEndpointParams();
 
       expect(value.query).toEqual(savedSearch.query);
       expect(value.project).toEqual([parseInt(savedSearch.projectId, 10)]);
@@ -152,7 +152,7 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches tags and sets state', async function() {
-      let instance = wrapper.instance();
+      const instance = wrapper.instance();
       await instance.componentDidMount();
 
       expect(fetchTagsRequest).toHaveBeenCalled();
@@ -161,11 +161,11 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches members and sets state', async function() {
-      let instance = wrapper.instance();
+      const instance = wrapper.instance();
       await instance.componentDidMount();
       await wrapper.update();
 
-      let members = instance.state.memberList;
+      const members = instance.state.memberList;
       // Spot check the resulting structure as we munge it a bit.
       expect(members).toBeTruthy();
       expect(members[project.slug]).toBeTruthy();
@@ -184,7 +184,7 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches searches and sets the savedSearch', async function() {
-      let instance = wrapper.instance();
+      const instance = wrapper.instance();
       await instance.componentDidMount();
       await wrapper.update();
 
@@ -192,7 +192,7 @@ describe('OrganizationStream', function() {
     });
 
     it('uses the saved search query', async function() {
-      let instance = wrapper.instance();
+      const instance = wrapper.instance();
       await instance.componentDidMount();
       await wrapper.update();
 
@@ -207,7 +207,7 @@ describe('OrganizationStream', function() {
     });
 
     it('does not set the savedSearch state', async function() {
-      let instance = wrapper.instance();
+      const instance = wrapper.instance();
       await instance.componentDidMount();
       await wrapper.update();
 
@@ -226,7 +226,7 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches data on selection change', function() {
-      let selection = {projects: [99], environments: [], datetime: {period: '24h'}};
+      const selection = {projects: [99], environments: [], datetime: {period: '24h'}};
       wrapper.setProps({selection, foo: 'bar'});
 
       expect(fetchDataMock).toHaveBeenCalled();
@@ -240,7 +240,7 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches data on location change', function() {
-      let queryAttrs = ['query', 'sort', 'statsPeriod', 'cursor', 'groupStatsPeriod'];
+      const queryAttrs = ['query', 'sort', 'statsPeriod', 'cursor', 'groupStatsPeriod'];
       let location = clonedeep(props.location);
       queryAttrs.forEach((attr, i) => {
         // reclone each iteration so that only one property changes.
@@ -260,7 +260,7 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches and displays processing issues', async function() {
-      let instance = wrapper.instance();
+      const instance = wrapper.instance();
       instance.componentDidMount();
       await wrapper.update();
 
@@ -270,7 +270,7 @@ describe('OrganizationStream', function() {
         loading: false,
       });
 
-      let issues = wrapper.find('ProcessingIssueList');
+      const issues = wrapper.find('ProcessingIssueList');
       expect(issues).toHaveLength(1);
     });
   });
@@ -292,7 +292,7 @@ describe('OrganizationStream', function() {
         issuesLoading: false,
       });
 
-      let error = wrapper.find('LoadingError');
+      const error = wrapper.find('LoadingError');
       expect(error).toHaveLength(1);
       expect(error.props().message).toEqual('Things broke');
     });
@@ -308,10 +308,10 @@ describe('OrganizationStream', function() {
     });
 
     it('displays the getting started state', function() {
-      let proj = TestStubs.ProjectDetails({
+      const proj = TestStubs.ProjectDetails({
         firstEvent: false,
       });
-      let org = TestStubs.Organization({
+      const org = TestStubs.Organization({
         access: ['releases'],
         projects: [proj],
       });
@@ -335,7 +335,7 @@ describe('OrganizationStream', function() {
         issuesLoading: false,
         groupIds: ['1'],
       });
-      let groups = wrapper.find('StreamGroup');
+      const groups = wrapper.find('StreamGroup');
       expect(groups).toHaveLength(1);
     });
   });
diff --git a/tests/js/spec/views/organizationTeamProjects.spec.jsx b/tests/js/spec/views/organizationTeamProjects.spec.jsx
index 5d229ea807..b9ead8160b 100644
--- a/tests/js/spec/views/organizationTeamProjects.spec.jsx
+++ b/tests/js/spec/views/organizationTeamProjects.spec.jsx
@@ -53,7 +53,7 @@ describe('OrganizationTeamProjects', function() {
   });
 
   it('Should render', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationTeamProjects params={{orgId: 'org-slug', teamId: team.slug}} />,
       TestStubs.routerContext()
     );
@@ -63,7 +63,7 @@ describe('OrganizationTeamProjects', function() {
   });
 
   it('Should allow bookmarking', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationTeamProjects params={{orgId: 'org-slug', teamId: team.slug}} />,
       TestStubs.routerContext()
     );
@@ -81,15 +81,15 @@ describe('OrganizationTeamProjects', function() {
   });
 
   it('Should allow adding and removing projects', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationTeamProjects params={{orgId: 'org-slug', teamId: team.slug}} />,
       TestStubs.routerContext()
     );
 
-    let add = wrapper.find('DropdownButton').first();
+    const add = wrapper.find('DropdownButton').first();
     add.simulate('click');
 
-    let el = wrapper.find('AutoCompleteItem').first();
+    const el = wrapper.find('AutoCompleteItem').first();
     el.simulate('click');
 
     wrapper.update();
@@ -100,7 +100,7 @@ describe('OrganizationTeamProjects', function() {
     wrapper.update();
 
     // find second project's remove button
-    let remove = wrapper.find('PanelBody Button').at(1);
+    const remove = wrapper.find('PanelBody Button').at(1);
     remove.simulate('click');
 
     expect(deleteMock).toHaveBeenCalledTimes(1);
diff --git a/tests/js/spec/views/organizationsDetails.spec.jsx b/tests/js/spec/views/organizationsDetails.spec.jsx
index 64f95eb772..21f9847561 100644
--- a/tests/js/spec/views/organizationsDetails.spec.jsx
+++ b/tests/js/spec/views/organizationsDetails.spec.jsx
@@ -29,7 +29,7 @@ describe('OrganizationDetails', function() {
             },
           }),
         });
-        let tree = mount(
+        const tree = mount(
           <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
           TestStubs.routerContext()
         );
@@ -55,7 +55,7 @@ describe('OrganizationDetails', function() {
             },
           }),
         });
-        let tree = mount(
+        const tree = mount(
           <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />,
           TestStubs.routerContext()
         );
@@ -87,7 +87,7 @@ describe('OrganizationDetails', function() {
       });
 
       it('should render a deletion in progress prompt', async function() {
-        let tree = mount(
+        const tree = mount(
           <OrganizationDetails params={{orgId: 'org-slug'}} location={{}} />
         );
         await tick();
diff --git a/tests/js/spec/views/ownershipInput.spec.jsx b/tests/js/spec/views/ownershipInput.spec.jsx
index a43422bb81..69f33020bd 100644
--- a/tests/js/spec/views/ownershipInput.spec.jsx
+++ b/tests/js/spec/views/ownershipInput.spec.jsx
@@ -26,7 +26,7 @@ describe('Project Ownership Input', function() {
   });
 
   it('renders', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OwnerInput
         params={{orgId: org.slug, projectId: project.slug}}
         organization={org}
@@ -36,7 +36,7 @@ describe('Project Ownership Input', function() {
       TestStubs.routerContext()
     );
 
-    let submit = wrapper.find('SaveButton button');
+    const submit = wrapper.find('SaveButton button');
 
     expect(put).not.toHaveBeenCalled();
 
diff --git a/tests/js/spec/views/passwordForm.spec.jsx b/tests/js/spec/views/passwordForm.spec.jsx
index 6e42089fe7..ed691d335e 100644
--- a/tests/js/spec/views/passwordForm.spec.jsx
+++ b/tests/js/spec/views/passwordForm.spec.jsx
@@ -9,7 +9,7 @@ const ENDPOINT = '/users/me/password/';
 describe('PasswordForm', function() {
   let wrapper;
   let putMock;
-  let routerContext = TestStubs.routerContext([
+  const routerContext = TestStubs.routerContext([
     {
       router: {
         ...TestStubs.router(),
diff --git a/tests/js/spec/views/projectAlertRuleDetails.spec.jsx b/tests/js/spec/views/projectAlertRuleDetails.spec.jsx
index 47d3a2f6a7..4d5ad58559 100644
--- a/tests/js/spec/views/projectAlertRuleDetails.spec.jsx
+++ b/tests/js/spec/views/projectAlertRuleDetails.spec.jsx
@@ -11,7 +11,7 @@ jest.mock('jquery');
 jest.unmock('app/utils/recreateRoute');
 
 describe('ProjectAlertRuleDetails', function() {
-  let projectAlertRuleDetailsRoutes = [
+  const projectAlertRuleDetailsRoutes = [
     {
       path: '/',
     },
@@ -88,7 +88,7 @@ describe('ProjectAlertRuleDetails', function() {
     });
 
     it('sets defaults', function() {
-      let selects = wrapper.find('SelectField Select');
+      const selects = wrapper.find('SelectField Select');
       expect(selects.first().props().value).toBe('all');
       expect(selects.last().props().value).toBe(30);
     });
@@ -113,7 +113,7 @@ describe('ProjectAlertRuleDetails', function() {
       });
 
       it('updates URL', function() {
-        let url = '/settings/org-slug/project-slug/alerts/rules/1/';
+        const url = '/settings/org-slug/project-slug/alerts/rules/1/';
         expect(browserHistory.replace).toHaveBeenCalledWith(url);
       });
     });
diff --git a/tests/js/spec/views/projectAlertSettings.spec.jsx b/tests/js/spec/views/projectAlertSettings.spec.jsx
index 24f17512e0..b769cc14d7 100644
--- a/tests/js/spec/views/projectAlertSettings.spec.jsx
+++ b/tests/js/spec/views/projectAlertSettings.spec.jsx
@@ -26,7 +26,7 @@ describe('ProjectAlertSettings', function() {
 
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ProjectAlertSettings
           params={{orgId: org.slug, projectId: project.slug}}
           organization={org}
diff --git a/tests/js/spec/views/projectChooser.spec.jsx b/tests/js/spec/views/projectChooser.spec.jsx
index 95eba35ccb..8d470253fe 100644
--- a/tests/js/spec/views/projectChooser.spec.jsx
+++ b/tests/js/spec/views/projectChooser.spec.jsx
@@ -70,7 +70,7 @@ describe('ProjectChooser', function() {
   };
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectChooser
         location={{
           pathname: 'https://sentry.io/organizations/tester1/projects/choose/',
diff --git a/tests/js/spec/views/projectDebugFiles.spec.jsx b/tests/js/spec/views/projectDebugFiles.spec.jsx
index 8f961f9e55..636dbd9e67 100644
--- a/tests/js/spec/views/projectDebugFiles.spec.jsx
+++ b/tests/js/spec/views/projectDebugFiles.spec.jsx
@@ -16,7 +16,7 @@ describe('ProjectDebugFiles', function() {
       url: ENDPOINT,
       body: [],
     });
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectDebugFiles params={{orgId: 'org', projectId: 'project'}} />,
       TestStubs.routerContext()
     );
@@ -34,7 +34,7 @@ describe('ProjectDebugFiles', function() {
       method: 'PUT',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectDebugFiles params={{orgId: 'org', projectId: 'project'}} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/views/projectEnvironments.spec.jsx b/tests/js/spec/views/projectEnvironments.spec.jsx
index 889e267909..fa7afb8a52 100644
--- a/tests/js/spec/views/projectEnvironments.spec.jsx
+++ b/tests/js/spec/views/projectEnvironments.spec.jsx
@@ -12,7 +12,7 @@ recreateRoute.mockReturnValue('/org-slug/project-slug/settings/environments/');
 function mountComponent(isHidden) {
   const org = TestStubs.Organization();
   const project = TestStubs.Project();
-  let pathname = isHidden ? 'environments/hidden/' : 'environments/';
+  const pathname = isHidden ? 'environments/hidden/' : 'environments/';
   return mount(
     <ProjectEnvironments
       params={{
@@ -52,7 +52,7 @@ describe('ProjectEnvironments', function() {
     it('renders empty message', function() {
       EnvironmentStore.loadInitialData([]);
       const wrapper = mountComponent(false);
-      let errorMessage = wrapper.find('div').first();
+      const errorMessage = wrapper.find('div').first();
 
       expect(errorMessage.text()).toContain("You don't have any environments yet");
       expect(wrapper.find('ProjectEnvironments')).toMatchSnapshot();
@@ -201,7 +201,7 @@ describe('ProjectEnvironments', function() {
       EnvironmentStore.loadHiddenData([]);
 
       const wrapper = mountComponent(true);
-      let errorMessage = wrapper.find('div').first();
+      const errorMessage = wrapper.find('div').first();
 
       expect(errorMessage.text()).toContain("You don't have any hidden environments");
 
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
index 7457e659ad..81dc33a30e 100644
--- a/tests/js/spec/views/projectFilters.spec.jsx
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -4,9 +4,9 @@ import {mount} from 'enzyme';
 import ProjectFilters from 'app/views/settings/project/projectFilters';
 
 describe('ProjectFilters', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project({options: {}});
-  let PROJECT_URL = `/projects/${org.slug}/${project.slug}/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project({options: {}});
+  const PROJECT_URL = `/projects/${org.slug}/${project.slug}/`;
   let wrapper;
 
   const getFilterEndpoint = filter => `${PROJECT_URL}filters/${filter}/`;
@@ -60,8 +60,8 @@ describe('ProjectFilters', function() {
   });
 
   it('has browser extensions enabled initially', function() {
-    let filter = 'browser-extensions';
-    let mock = createFilterMock(filter);
+    const filter = 'browser-extensions';
+    const mock = createFilterMock(filter);
     const Switch = wrapper.find(`BooleanField[name="${filter}"] Switch`);
 
     expect(Switch.prop('isActive')).toBe(true);
@@ -81,7 +81,7 @@ describe('ProjectFilters', function() {
 
   it('can toggle filters: localhost, web crawlers', function() {
     ['localhost', 'web-crawlers'].map((filter, i) => {
-      let mock = createFilterMock(filter);
+      const mock = createFilterMock(filter);
       const Switch = wrapper.find(`BooleanField[name="${filter}"] Switch`);
 
       // Toggle filter on
@@ -120,8 +120,8 @@ describe('ProjectFilters', function() {
   });
 
   it('can toggle legacy browser', function() {
-    let filter = 'legacy-browsers';
-    let mock = createFilterMock(filter);
+    const filter = 'legacy-browsers';
+    const mock = createFilterMock(filter);
 
     // default stubs ie_pre_9 and ie9 selected (first 2 switches)
     const Switch = wrapper.find('LegacyBrowserFilterRow Switch').at(4);
@@ -167,8 +167,8 @@ describe('ProjectFilters', function() {
   });
 
   it('can toggle all/none for legacy browser', function() {
-    let filter = 'legacy-browsers';
-    let mock = createFilterMock(filter);
+    const filter = 'legacy-browsers';
+    const mock = createFilterMock(filter);
     const All = wrapper.find('BulkFilterItem').at(0);
     const None = wrapper.find('BulkFilterItem').at(1);
 
@@ -191,7 +191,7 @@ describe('ProjectFilters', function() {
   });
 
   it('can set ip address filter', function() {
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: PROJECT_URL,
       method: 'PUT',
     });
@@ -236,7 +236,7 @@ describe('ProjectFilters', function() {
     expect(wrapper.find('TextArea[id="filters:releases"]')).toHaveLength(1);
     expect(wrapper.find('TextArea[id="filters:error_messages"]')).toHaveLength(1);
 
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: PROJECT_URL,
       method: 'PUT',
     });
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index 64918950fa..da299159ab 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -11,8 +11,8 @@ import {selectByValue} from '../../helpers/select';
 jest.mock('jquery');
 
 describe('projectGeneralSettings', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.ProjectDetails();
+  const org = TestStubs.Organization();
+  const project = TestStubs.ProjectDetails();
   let routerContext;
   let putMock;
 
@@ -52,7 +52,7 @@ describe('projectGeneralSettings', function() {
   });
 
   it('renders form fields', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       TestStubs.routerContext()
     );
@@ -91,7 +91,7 @@ describe('projectGeneralSettings', function() {
   it('disables field when equivalent org setting is true', function() {
     routerContext.context.organization.dataScrubber = true;
     routerContext.context.organization.scrubIPAddresses = false;
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       routerContext
     );
@@ -105,7 +105,7 @@ describe('projectGeneralSettings', function() {
 
   it('disables scrapeJavaScript when equivalent org setting is false', function() {
     routerContext.context.organization.scrapeJavaScript = false;
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       routerContext
     );
@@ -114,17 +114,17 @@ describe('projectGeneralSettings', function() {
   });
 
   it('project admins can remove project', function() {
-    let deleteMock = MockApiClient.addMockResponse({
+    const deleteMock = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/`,
       method: 'DELETE',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       TestStubs.routerContext()
     );
 
-    let removeBtn = wrapper.find('.ref-remove-project').first();
+    const removeBtn = wrapper.find('.ref-remove-project').first();
 
     expect(removeBtn.prop('children')).toBe('Remove Project');
 
@@ -138,17 +138,17 @@ describe('projectGeneralSettings', function() {
   });
 
   it('project admins can transfer project', function() {
-    let deleteMock = MockApiClient.addMockResponse({
+    const deleteMock = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/transfer/`,
       method: 'POST',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       TestStubs.routerContext()
     );
 
-    let removeBtn = wrapper.find('.ref-transfer-project').first();
+    const removeBtn = wrapper.find('.ref-transfer-project').first();
 
     expect(removeBtn.prop('children')).toBe('Transfer Project');
 
@@ -174,7 +174,7 @@ describe('projectGeneralSettings', function() {
 
   it('displays transfer/remove message for non-admins', function() {
     routerContext.context.organization.access = ['org:read'];
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       routerContext
     );
@@ -189,7 +189,7 @@ describe('projectGeneralSettings', function() {
 
   it('disables the form for users without write permissions', function() {
     routerContext.context.organization.access = ['org:read'];
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
       routerContext
     );
@@ -206,7 +206,7 @@ describe('projectGeneralSettings', function() {
   });
 
   it('changing project platform updates ProjectsStore', async function() {
-    let params = {orgId: org.slug, projectId: project.slug};
+    const params = {orgId: org.slug, projectId: project.slug};
     ProjectsStore.loadInitialData([project]);
     putMock = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/`,
@@ -216,7 +216,7 @@ describe('projectGeneralSettings', function() {
         platform: 'javascript',
       },
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectContext orgId={org.slug} projectId={project.slug}>
         <ProjectGeneralSettings
           routes={[]}
@@ -244,7 +244,7 @@ describe('projectGeneralSettings', function() {
   });
 
   it('changing slug updates ProjectsStore', async function() {
-    let params = {orgId: org.slug, projectId: project.slug};
+    const params = {orgId: org.slug, projectId: project.slug};
     ProjectsStore.loadInitialData([project]);
     putMock = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/`,
@@ -254,7 +254,7 @@ describe('projectGeneralSettings', function() {
         slug: 'new-project',
       },
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectContext orgId={org.slug} projectId={project.slug}>
         <ProjectGeneralSettings
           routes={[]}
@@ -278,17 +278,17 @@ describe('projectGeneralSettings', function() {
     wrapper.find('SaveButton').simulate('click');
 
     // fetches new slug
-    let newProjectGet = MockApiClient.addMockResponse({
+    const newProjectGet = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/new-project/`,
       method: 'GET',
       body: {...project, slug: 'new-project'},
     });
-    let newProjectEnv = MockApiClient.addMockResponse({
+    const newProjectEnv = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/new-project/environments/`,
       method: 'GET',
       body: [],
     });
-    let newProjectMembers = MockApiClient.addMockResponse({
+    const newProjectMembers = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/new-project/members/`,
       method: 'GET',
       body: [],
@@ -317,7 +317,7 @@ describe('projectGeneralSettings', function() {
     let wrapper;
 
     beforeEach(function() {
-      let params = {orgId: org.slug, projectId: project.slug};
+      const params = {orgId: org.slug, projectId: project.slug};
       ProjectsStore.loadInitialData([project]);
       putMock = MockApiClient.addMockResponse({
         url: `/projects/${org.slug}/${project.slug}/`,
diff --git a/tests/js/spec/views/projectInstall/newProject.spec.jsx b/tests/js/spec/views/projectInstall/newProject.spec.jsx
index 5d831720ec..2addfcc92e 100644
--- a/tests/js/spec/views/projectInstall/newProject.spec.jsx
+++ b/tests/js/spec/views/projectInstall/newProject.spec.jsx
@@ -18,7 +18,7 @@ describe('NewProjectPlatform', function() {
 
   describe('render()', function() {
     it('should render', function() {
-      let wrapper = shallow(<NewProject />, {
+      const wrapper = shallow(<NewProject />, {
         context: {
           organization: {
             id: '1337',
diff --git a/tests/js/spec/views/projectInstall/platform.spec.jsx b/tests/js/spec/views/projectInstall/platform.spec.jsx
index 2b0b2f908f..a5c44f1cf7 100644
--- a/tests/js/spec/views/projectInstall/platform.spec.jsx
+++ b/tests/js/spec/views/projectInstall/platform.spec.jsx
@@ -62,14 +62,14 @@ describe('ProjectInstallPlatform', function() {
     };
 
     it('should render NotFound if no matching integration/platform', function() {
-      let props = {
+      const props = {
         ...baseProps,
         params: {
           platform: 'lua',
         },
       };
 
-      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
+      const wrapper = shallow(<ProjectInstallPlatform {...props} />, {
         organization: {id: '1337'},
       });
 
@@ -77,14 +77,14 @@ describe('ProjectInstallPlatform', function() {
     });
 
     it('should rendering Loading if integration/platform exists', function() {
-      let props = {
+      const props = {
         ...baseProps,
         params: {
           platform: 'node-connect',
         },
       };
 
-      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
+      const wrapper = shallow(<ProjectInstallPlatform {...props} />, {
         organization: {id: '1337'},
       });
 
diff --git a/tests/js/spec/views/projectKeyDetails.spec.jsx b/tests/js/spec/views/projectKeyDetails.spec.jsx
index 1f66bcf9b6..30044c4ae6 100644
--- a/tests/js/spec/views/projectKeyDetails.spec.jsx
+++ b/tests/js/spec/views/projectKeyDetails.spec.jsx
@@ -74,7 +74,7 @@ describe('ProjectKeyDetails', function() {
       url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
       method: 'DELETE',
     });
-    let routerContext = TestStubs.routerContext();
+    const routerContext = TestStubs.routerContext();
 
     wrapper = mount(
       <ProjectKeyDetails
diff --git a/tests/js/spec/views/projectKeys.spec.jsx b/tests/js/spec/views/projectKeys.spec.jsx
index d61de289c0..c87194608a 100644
--- a/tests/js/spec/views/projectKeys.spec.jsx
+++ b/tests/js/spec/views/projectKeys.spec.jsx
@@ -24,7 +24,7 @@ describe('ProjectKeys', function() {
       url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
       method: 'DELETE',
     });
-    let routerContext = TestStubs.routerContext();
+    const routerContext = TestStubs.routerContext();
 
     wrapper = mount(
       <ProjectKeys routes={[]} params={{orgId: org.slug, projectId: project.slug}} />,
@@ -78,7 +78,7 @@ describe('ProjectKeys', function() {
   });
 
   it('disable and enables key', function() {
-    let enableMock = MockApiClient.addMockResponse({
+    const enableMock = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/keys/${projectKeys[0].id}/`,
       method: 'PUT',
     });
diff --git a/tests/js/spec/views/projectOwnership.spec.jsx b/tests/js/spec/views/projectOwnership.spec.jsx
index f90333ebbf..8871e3ca8d 100644
--- a/tests/js/spec/views/projectOwnership.spec.jsx
+++ b/tests/js/spec/views/projectOwnership.spec.jsx
@@ -26,7 +26,7 @@ describe('ProjectTeamsSettings', function() {
 
   describe('render()', function() {
     it('renders', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <ProjectOwnership
           params={{orgId: org.slug, projectId: project.slug}}
           organization={org}
diff --git a/tests/js/spec/views/projectPluginDetails.spec.jsx b/tests/js/spec/views/projectPluginDetails.spec.jsx
index 84c573469f..edb0b07e42 100644
--- a/tests/js/spec/views/projectPluginDetails.spec.jsx
+++ b/tests/js/spec/views/projectPluginDetails.spec.jsx
@@ -9,12 +9,12 @@ jest.mock('jquery');
 
 describe('ProjectPluginDetails', function() {
   let component;
-  let routerContext = TestStubs.routerContext();
-  let {organization, project} = routerContext.context;
-  let org = organization;
-  let plugins = TestStubs.Plugins();
-  let plugin = TestStubs.Plugin();
-  let pluginId = plugin.id;
+  const routerContext = TestStubs.routerContext();
+  const {organization, project} = routerContext.context;
+  const org = organization;
+  const plugins = TestStubs.Plugins();
+  const plugin = TestStubs.Plugin();
+  const pluginId = plugin.id;
 
   beforeAll(function() {
     sinon.stub(console, 'info');
@@ -69,7 +69,7 @@ describe('ProjectPluginDetails', function() {
 
   it('resets plugin', function() {
     // Test component instead of container so that we can access state
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectPluginDetails
         organization={org}
         project={project}
@@ -80,13 +80,13 @@ describe('ProjectPluginDetails', function() {
       routerContext
     );
 
-    let btn = wrapper.find('button').at(1);
+    const btn = wrapper.find('button').at(1);
     btn.simulate('click');
     expect(wrapper.state().pluginDetails.config[0].value).toBe('default');
   });
 
   it('enables/disables plugin', function(done) {
-    let btn = component.find('button').first();
+    const btn = component.find('button').first();
     expect(btn.text()).toBe('Enable Plugin');
 
     btn.simulate('click');
diff --git a/tests/js/spec/views/projectPlugins/index.spec.jsx b/tests/js/spec/views/projectPlugins/index.spec.jsx
index 283e95e351..554322c6cd 100644
--- a/tests/js/spec/views/projectPlugins/index.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/index.spec.jsx
@@ -8,7 +8,7 @@ jest.mock('app/actionCreators/plugins');
 
 describe('ProjectPluginsContainer', function() {
   let org, project, plugins, wrapper, params, organization;
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(function() {
     org = TestStubs.Organization();
@@ -57,7 +57,7 @@ describe('ProjectPluginsContainer', function() {
   });
 
   it('calls `enablePlugin` action creator when enabling plugin', function() {
-    let onChange = wrapper.find('ProjectPlugins').prop('onChange');
+    const onChange = wrapper.find('ProjectPlugins').prop('onChange');
 
     expect(enablePlugin).not.toHaveBeenCalled();
 
@@ -67,7 +67,7 @@ describe('ProjectPluginsContainer', function() {
   });
 
   it('calls `disablePlugin` action creator when disabling plugin', function() {
-    let onChange = wrapper.find('ProjectPlugins').prop('onChange');
+    const onChange = wrapper.find('ProjectPlugins').prop('onChange');
 
     expect(disablePlugin).not.toHaveBeenCalled();
 
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index f8cc673bf3..8fe7addcfc 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -7,10 +7,10 @@ jest.mock('app/api');
 
 describe('PluginNavigation Integration', function() {
   let wrapper;
-  let routerContext = TestStubs.routerContext();
-  let org = routerContext.context.organization;
-  let project = routerContext.context.project;
-  let plugins = TestStubs.Plugins();
+  const routerContext = TestStubs.routerContext();
+  const org = routerContext.context.organization;
+  const project = routerContext.context.project;
+  const plugins = TestStubs.Plugins();
 
   beforeEach(function() {
     MockApiClient.addMockResponse({
@@ -41,8 +41,8 @@ describe('PluginNavigation Integration', function() {
   // Integration test with PluginNavigation
   describe('with PluginNavigation', function() {
     beforeEach(function() {
-      let params = {orgId: org.slug, projectId: project.slug};
-      let organization = {...org, id: org.slug, features: []};
+      const params = {orgId: org.slug, projectId: project.slug};
+      const organization = {...org, id: org.slug, features: []};
       wrapper = mount(
         <div>
           <ProjectPlugins params={params} organization={organization} />
diff --git a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
index 2b86bef8f6..03a825a53e 100644
--- a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
@@ -4,11 +4,11 @@ import ProjectPlugins from 'app/views/projectPlugins/projectPlugins';
 
 describe('ProjectPlugins', function() {
   let wrapper;
-  let routerContext = TestStubs.routerContext();
-  let plugins = TestStubs.Plugins();
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
-  let params = {
+  const routerContext = TestStubs.routerContext();
+  const plugins = TestStubs.Plugins();
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  const params = {
     orgId: org.slug,
     projectId: project.slug,
   };
diff --git a/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx b/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx
index 84611f806e..c06316fb0b 100644
--- a/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx
@@ -4,11 +4,11 @@ import ProjectPluginRow from 'app/views/projectPlugins/projectPluginRow';
 
 describe('ProjectPluginRow', function() {
   let wrapper;
-  let plugin = TestStubs.Plugin();
-  let org = TestStubs.Organization({access: ['project:write']});
-  let project = TestStubs.Project();
-  let params = {orgId: org.slug, projectId: project.slug};
-  let routerContext = TestStubs.routerContext([{organization: org, project}]);
+  const plugin = TestStubs.Plugin();
+  const org = TestStubs.Organization({access: ['project:write']});
+  const project = TestStubs.Project();
+  const params = {orgId: org.slug, projectId: project.slug};
+  const routerContext = TestStubs.routerContext([{organization: org, project}]);
 
   it('renders', function() {
     wrapper = mount(<ProjectPluginRow {...params} {...plugin} />, routerContext);
@@ -17,7 +17,7 @@ describe('ProjectPluginRow', function() {
   });
 
   it('calls `onChange` when clicked', function() {
-    let onChange = jest.fn();
+    const onChange = jest.fn();
     wrapper = mount(
       <ProjectPluginRow {...params} {...plugin} onChange={onChange} />,
       routerContext
@@ -29,7 +29,7 @@ describe('ProjectPluginRow', function() {
   });
 
   it('can not enable/disable or configure plugin without `project:write`', function() {
-    let onChange = jest.fn();
+    const onChange = jest.fn();
     wrapper = mount(
       <ProjectPluginRow {...params} {...plugin} onChange={onChange} />,
       TestStubs.routerContext([{organization: TestStubs.Organization({access: []})}])
diff --git a/tests/js/spec/views/projectSavedSearches.spec.jsx b/tests/js/spec/views/projectSavedSearches.spec.jsx
index b1dd6b9e34..dc596cac0c 100644
--- a/tests/js/spec/views/projectSavedSearches.spec.jsx
+++ b/tests/js/spec/views/projectSavedSearches.spec.jsx
@@ -5,9 +5,9 @@ import ProjectSavedSearches from 'app/views/projectSavedSearches';
 
 describe('ProjectSavedSearches', function() {
   let wrapper;
-  let routerContext = TestStubs.routerContext();
-  let org = routerContext.context.organization;
-  let project = routerContext.context.project;
+  const routerContext = TestStubs.routerContext();
+  const org = routerContext.context.organization;
+  const project = routerContext.context.project;
 
   beforeEach(function() {
     MockApiClient.mockAsync = false;
@@ -45,7 +45,7 @@ describe('ProjectSavedSearches', function() {
   });
 
   it('removes a search query', function() {
-    let removed = MockApiClient.addMockResponse({
+    const removed = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/searches/2/`,
       method: 'DELETE',
     });
@@ -65,8 +65,8 @@ describe('ProjectSavedSearches', function() {
   });
 
   it('rolls back update default on error', function() {
-    let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
-    let remove = MockApiClient.addMockResponse({
+    const url = `/projects/${org.slug}/${project.slug}/searches/2/`;
+    const remove = MockApiClient.addMockResponse({
       url,
       method: 'DELETE',
       statusCode: 400,
@@ -107,8 +107,8 @@ describe('ProjectSavedSearches', function() {
   });
 
   it('updates a search query to default', function() {
-    let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
-    let update = MockApiClient.addMockResponse({
+    const url = `/projects/${org.slug}/${project.slug}/searches/2/`;
+    const update = MockApiClient.addMockResponse({
       url,
       method: 'PUT',
     });
@@ -162,8 +162,8 @@ describe('ProjectSavedSearches', function() {
   });
 
   it('rolls back update default on PUT error', function() {
-    let url = `/projects/${org.slug}/${project.slug}/searches/2/`;
-    let update = MockApiClient.addMockResponse({
+    const url = `/projects/${org.slug}/${project.slug}/searches/2/`;
+    const update = MockApiClient.addMockResponse({
       url,
       method: 'PUT',
       statusCode: 400,
diff --git a/tests/js/spec/views/projectSecurityHeaders/projectCspReports.spec.jsx b/tests/js/spec/views/projectSecurityHeaders/projectCspReports.spec.jsx
index 581cac6fd3..19d14c42bc 100644
--- a/tests/js/spec/views/projectSecurityHeaders/projectCspReports.spec.jsx
+++ b/tests/js/spec/views/projectSecurityHeaders/projectCspReports.spec.jsx
@@ -4,10 +4,10 @@ import {mount, shallow} from 'enzyme';
 import ProjectCspReports from 'app/views/settings/projectSecurityHeaders/csp';
 
 describe('ProjectCspReports', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
-  let projectUrl = `/projects/${org.slug}/${project.slug}/`;
-  let routeUrl = `/projects/${org.slug}/${project.slug}/csp/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  const projectUrl = `/projects/${org.slug}/${project.slug}/`;
+  const routeUrl = `/projects/${org.slug}/${project.slug}/csp/`;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -26,7 +26,7 @@ describe('ProjectCspReports', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectCspReports
         organization={org}
         project={project}
@@ -42,7 +42,7 @@ describe('ProjectCspReports', function() {
   });
 
   it('can enable default ignored sources', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectCspReports
         organization={org}
         project={project}
@@ -55,7 +55,7 @@ describe('ProjectCspReports', function() {
       TestStubs.routerContext()
     );
 
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: projectUrl,
       method: 'PUT',
     });
@@ -79,7 +79,7 @@ describe('ProjectCspReports', function() {
   });
 
   it('can set additional ignored sources', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectCspReports
         organization={org}
         project={project}
@@ -92,7 +92,7 @@ describe('ProjectCspReports', function() {
       TestStubs.routerContext()
     );
 
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: projectUrl,
       method: 'PUT',
     });
diff --git a/tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.spec.jsx b/tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.spec.jsx
index 5bcd527c11..52e3074800 100644
--- a/tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.spec.jsx
+++ b/tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.spec.jsx
@@ -4,9 +4,9 @@ import {shallow} from 'enzyme';
 import ProjectExpectCtReports from 'app/views/settings/projectSecurityHeaders/expectCt';
 
 describe('ProjectExpectCtReports', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
-  let url = `/projects/${org.slug}/${project.slug}/expect-ct/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  const url = `/projects/${org.slug}/${project.slug}/expect-ct/`;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -18,7 +18,7 @@ describe('ProjectExpectCtReports', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectExpectCtReports
         organization={org}
         project={project}
diff --git a/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx b/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx
index 59359d8362..290a02661c 100644
--- a/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx
+++ b/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx
@@ -4,9 +4,9 @@ import {shallow} from 'enzyme';
 import ProjectHpkpReports from 'app/views/settings/projectSecurityHeaders/hpkp';
 
 describe('ProjectHpkpReports', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
-  let url = `/projects/${org.slug}/${project.slug}/hpkp/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  const url = `/projects/${org.slug}/${project.slug}/hpkp/`;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -23,7 +23,7 @@ describe('ProjectHpkpReports', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectHpkpReports
         organization={org}
         project={project}
diff --git a/tests/js/spec/views/projectSecurityHeaders/projectSecurityHeaders.spec.jsx b/tests/js/spec/views/projectSecurityHeaders/projectSecurityHeaders.spec.jsx
index 092883853e..4a3978204a 100644
--- a/tests/js/spec/views/projectSecurityHeaders/projectSecurityHeaders.spec.jsx
+++ b/tests/js/spec/views/projectSecurityHeaders/projectSecurityHeaders.spec.jsx
@@ -4,9 +4,9 @@ import {shallow} from 'enzyme';
 import ProjectSecurityHeaders from 'app/views/settings/projectSecurityHeaders';
 
 describe('ProjectSecurityHeaders', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
-  let url = `/projects/${org.slug}/${project.slug}/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  const url = `/projects/${org.slug}/${project.slug}/`;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -18,7 +18,7 @@ describe('ProjectSecurityHeaders', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectSecurityHeaders
         organization={org}
         project={project}
diff --git a/tests/js/spec/views/projectTags.spec.jsx b/tests/js/spec/views/projectTags.spec.jsx
index 1587b9aa9f..56b16ee74f 100644
--- a/tests/js/spec/views/projectTags.spec.jsx
+++ b/tests/js/spec/views/projectTags.spec.jsx
@@ -63,7 +63,7 @@ describe('ProjectTags', function() {
   });
 
   it('deletes tag', function() {
-    let tags = wrapper.state('tags').length;
+    const tags = wrapper.state('tags').length;
 
     wrapper
       .find('Button')
diff --git a/tests/js/spec/views/projectTeams.spec.jsx b/tests/js/spec/views/projectTeams.spec.jsx
index c4a0b1602c..7bf7a836f2 100644
--- a/tests/js/spec/views/projectTeams.spec.jsx
+++ b/tests/js/spec/views/projectTeams.spec.jsx
@@ -11,7 +11,7 @@ describe('ProjectTeams', function() {
   let org;
   let project;
   let team;
-  let team2 = {
+  const team2 = {
     id: '2',
     slug: 'team-slug-2',
     name: 'Team Name 2',
@@ -47,7 +47,7 @@ describe('ProjectTeams', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <ProjectTeams
         params={{orgId: org.slug, projectId: project.slug}}
         organization={org}
@@ -64,21 +64,21 @@ describe('ProjectTeams', function() {
       body: [team, team2],
     });
 
-    let endpoint = `/projects/${org.slug}/${project.slug}/teams/${team.slug}/`;
-    let mock = MockApiClient.addMockResponse({
+    const endpoint = `/projects/${org.slug}/${project.slug}/teams/${team.slug}/`;
+    const mock = MockApiClient.addMockResponse({
       url: endpoint,
       method: 'DELETE',
       statusCode: 200,
     });
 
-    let endpoint2 = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
-    let mock2 = MockApiClient.addMockResponse({
+    const endpoint2 = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
+    const mock2 = MockApiClient.addMockResponse({
       url: endpoint2,
       method: 'DELETE',
       statusCode: 200,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectTeams
         params={{orgId: org.slug, projectId: project.slug}}
         organization={org}
@@ -123,14 +123,14 @@ describe('ProjectTeams', function() {
   });
 
   it('can associate a team with project', function() {
-    let endpoint = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
-    let mock = MockApiClient.addMockResponse({
+    const endpoint = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
+    const mock = MockApiClient.addMockResponse({
       url: endpoint,
       method: 'POST',
       statusCode: 200,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectTeams
         params={{orgId: org.slug, projectId: project.slug}}
         organization={org}
@@ -144,7 +144,7 @@ describe('ProjectTeams', function() {
     wrapper.find('DropdownButton').simulate('click');
 
     // click a team
-    let el = wrapper.find('AutoCompleteItem').first();
+    const el = wrapper.find('AutoCompleteItem').first();
     el.simulate('click');
 
     expect(mock).toHaveBeenCalledWith(
@@ -169,17 +169,17 @@ describe('ProjectTeams', function() {
       url: '/assistant/',
       body: {},
     });
-    let addTeamToProject = MockApiClient.addMockResponse({
+    const addTeamToProject = MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/teams/new-team/`,
       method: 'POST',
     });
-    let createTeam = MockApiClient.addMockResponse({
+    const createTeam = MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/teams/`,
       method: 'POST',
       body: {slug: 'new-team'},
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <App params={{orgId: org.slug}}>
         <ProjectTeams
           params={{orgId: org.slug, projectId: project.slug}}
diff --git a/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx b/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx
index d801436e4b..f04449d9a8 100644
--- a/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx
+++ b/tests/js/spec/views/projects/projectDetailsLayout.spec.jsx
@@ -12,7 +12,7 @@ jest.unmock('app/utils/recreateRoute');
 
 describe('ProjectLayout', function() {
   it('calls `setLastRoute` when unmounting', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectDetailsLayout location={{pathname: '/org-slug/dashboard/'}} />
     );
 
diff --git a/tests/js/spec/views/providerItem.spec.jsx b/tests/js/spec/views/providerItem.spec.jsx
index feafe5c3ef..1e2741ba01 100644
--- a/tests/js/spec/views/providerItem.spec.jsx
+++ b/tests/js/spec/views/providerItem.spec.jsx
@@ -12,7 +12,7 @@ describe('ProviderItem', function() {
   const routerContext = TestStubs.routerContext([{organization: org}]);
 
   it('renders', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProviderItem organization={org} provider={provider} onConfigure={() => {}} />,
       routerContext
     );
@@ -24,8 +24,8 @@ describe('ProviderItem', function() {
   });
 
   it('calls configure callback', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <ProviderItem organization={org} provider={provider} onConfigure={mock} />,
       routerContext
     );
@@ -36,7 +36,7 @@ describe('ProviderItem', function() {
 
   it('renders a disabled Tag when disabled', function() {
     const noFeatureRouterContext = TestStubs.routerContext();
-    let wrapper = mount(
+    const wrapper = mount(
       <ProviderItem organization={org} provider={provider} onConfigure={() => {}} />,
       noFeatureRouterContext
     );
diff --git a/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx b/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
index 117ff7ce47..faee153075 100644
--- a/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
+++ b/tests/js/spec/views/releases/detail/releaseArtifacts.spec.jsx
@@ -7,7 +7,7 @@ import {ReleaseArtifacts} from 'app/views/releases/detail/shared/releaseArtifact
 describe('ReleaseArtifacts', function() {
   let wrapper;
   let wrapperWithPermission;
-  let api = new Client();
+  const api = new Client();
   let projectMock;
   let organizationMock;
   let deleteMock;
diff --git a/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx b/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
index 9069fd7c3f..0f0e1863d1 100644
--- a/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
+++ b/tests/js/spec/views/releases/detail/releaseDetails.spec.jsx
@@ -30,8 +30,8 @@ describe('ReleaseDetails', function() {
   });
 
   it('shows release details', function() {
-    let noop = () => {};
-    let params = {
+    const noop = () => {};
+    const params = {
       orgId: 'acme',
       projectId: 'anvils',
       project: {
@@ -39,11 +39,11 @@ describe('ReleaseDetails', function() {
       },
       version: '9.1.1',
     };
-    let location = {
+    const location = {
       pathname: '/',
     };
 
-    let wrapper = mount(
+    const wrapper = mount(
       <ReleaseDetails location={location} params={params} setProjectNavSection={noop}>
         <div>hi</div>
       </ReleaseDetails>,
diff --git a/tests/js/spec/views/releases/list/projectReleases.spec.jsx b/tests/js/spec/views/releases/list/projectReleases.spec.jsx
index 9da7673096..302c5c3e69 100644
--- a/tests/js/spec/views/releases/list/projectReleases.spec.jsx
+++ b/tests/js/spec/views/releases/list/projectReleases.spec.jsx
@@ -59,9 +59,9 @@ describe('ProjectReleases', function() {
 
   describe('componentWillReceiveProps()', function() {
     it('should update state with latest query pulled from query string', function() {
-      let setState = sandbox.stub(projectReleases.instance(), 'setState');
+      const setState = sandbox.stub(projectReleases.instance(), 'setState');
 
-      let newProps = {
+      const newProps = {
         ...props,
         location: {
           search: '?query=newquery',
@@ -91,7 +91,7 @@ describe('ProjectReleases', function() {
         location: {query: {per_page: 0, query: ''}},
       };
 
-      let wrapper = mount(<ProjectReleases {...props} />, routerContext);
+      const wrapper = mount(<ProjectReleases {...props} />, routerContext);
 
       wrapper.setState({
         loading: false,
@@ -118,7 +118,7 @@ describe('ProjectReleases', function() {
         location: {query: {per_page: 0, query: ''}},
       };
 
-      let wrapper = mount(<ProjectReleases {...props} />, routerContext);
+      const wrapper = mount(<ProjectReleases {...props} />, routerContext);
       wrapper.setState({
         loading: false,
         environment: null,
diff --git a/tests/js/spec/views/routeError.spec.jsx b/tests/js/spec/views/routeError.spec.jsx
index 79f94402a3..5c45611a60 100644
--- a/tests/js/spec/views/routeError.spec.jsx
+++ b/tests/js/spec/views/routeError.spec.jsx
@@ -10,8 +10,8 @@ describe('RouteError', function() {
   beforeEach(function() {});
 
   it('captures errors with raven', async function() {
-    let error = new Error('Big Bad Error');
-    let routes = TestStubs.routes();
+    const error = new Error('Big Bad Error');
+    const routes = TestStubs.routes();
     mount(<RouteError routes={routes} error={error} />, TestStubs.routerContext());
 
     await tick();
diff --git a/tests/js/spec/views/ruleBuilder.spec.jsx b/tests/js/spec/views/ruleBuilder.spec.jsx
index f73101f9a7..a889b709f9 100644
--- a/tests/js/spec/views/ruleBuilder.spec.jsx
+++ b/tests/js/spec/views/ruleBuilder.spec.jsx
@@ -12,10 +12,10 @@ jest.mock('jquery');
 describe('RuleBuilder', function() {
   let sandbox;
 
-  let organization = TestStubs.Organization();
+  const organization = TestStubs.Organization();
   let project;
   let handleAdd;
-  let USER_1 = TestStubs.User({
+  const USER_1 = TestStubs.User({
     id: '1',
     name: 'Jane Doe',
     email: 'janedoe@example.com',
@@ -25,7 +25,7 @@ describe('RuleBuilder', function() {
       email: 'janedoe@example.com',
     },
   });
-  let USER_2 = TestStubs.User({
+  const USER_2 = TestStubs.User({
     id: '2',
     name: 'John Smith',
     email: 'johnsmith@example.com',
@@ -36,14 +36,14 @@ describe('RuleBuilder', function() {
     },
   });
 
-  let TEAM_1 = TestStubs.Team({
+  const TEAM_1 = TestStubs.Team({
     id: '3',
     name: 'COOL TEAM',
     slug: 'cool-team',
   });
 
   // This team is in project
-  let TEAM_2 = TestStubs.Team({
+  const TEAM_2 = TestStubs.Team({
     id: '4',
     name: 'TEAM NOT IN PROJECT',
     slug: 'team-not-in-project',
@@ -76,7 +76,7 @@ describe('RuleBuilder', function() {
   });
 
   it('renders', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <RuleBuilder project={project} organization={organization} onAddRule={handleAdd} />,
       TestStubs.routerContext()
     );
@@ -84,11 +84,11 @@ describe('RuleBuilder', function() {
     await tick();
     wrapper.update();
 
-    let add = wrapper.find('Button');
+    const add = wrapper.find('Button');
     add.simulate('click');
     expect(handleAdd).not.toHaveBeenCalled();
 
-    let text = wrapper.find('BuilderInput');
+    const text = wrapper.find('BuilderInput');
     text.simulate('change', {target: {value: 'some/path/*'}});
     expect(wrapper.find('Button').prop('disabled')).toBe(true);
 
@@ -110,7 +110,7 @@ describe('RuleBuilder', function() {
   });
 
   it('renders with suggestions', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <RuleBuilder
         project={project}
         organization={organization}
@@ -154,7 +154,7 @@ describe('RuleBuilder', function() {
     // Enter to select Jane Doe
     wrapper.find('SelectOwners .Select-control').simulate('keyDown', {keyCode: 13});
 
-    let ruleCandidate = wrapper.find('RuleCandidate').first();
+    const ruleCandidate = wrapper.find('RuleCandidate').first();
     ruleCandidate.simulate('click');
 
     // This is because after selecting, react-select (async) reloads
diff --git a/tests/js/spec/views/settings/accountSettingsLayout.spec.jsx b/tests/js/spec/views/settings/accountSettingsLayout.spec.jsx
index 67dd093f0e..643e92cba1 100644
--- a/tests/js/spec/views/settings/accountSettingsLayout.spec.jsx
+++ b/tests/js/spec/views/settings/accountSettingsLayout.spec.jsx
@@ -9,7 +9,7 @@ describe('AccountSettingsLayout', function() {
   let spy;
   let api;
 
-  let organization = {
+  const organization = {
     id: '44',
     name: 'Org Index',
     slug: 'org-index',
diff --git a/tests/js/spec/views/settings/auditLogView.spec.jsx b/tests/js/spec/views/settings/auditLogView.spec.jsx
index 29f001956d..92c63ff47a 100644
--- a/tests/js/spec/views/settings/auditLogView.spec.jsx
+++ b/tests/js/spec/views/settings/auditLogView.spec.jsx
@@ -7,7 +7,7 @@ import OrganizationAuditLog from 'app/views/settings/organizationAuditLog';
 jest.mock('jquery');
 
 describe('OrganizationAuditLog', function() {
-  let org = TestStubs.Organization();
+  const org = TestStubs.Organization();
   const ENDPOINT = `/organizations/${org.slug}/audit-logs/`;
 
   beforeEach(function() {
@@ -19,7 +19,7 @@ describe('OrganizationAuditLog', function() {
   });
 
   it('renders', function(done) {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationAuditLog location={{query: ''}} params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
@@ -33,7 +33,7 @@ describe('OrganizationAuditLog', function() {
   });
 
   it('displays whether an action was done by a superuser', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationAuditLog location={{query: ''}} params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
diff --git a/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx b/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
index 5bfe870782..6ad2526532 100644
--- a/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
+++ b/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
@@ -13,7 +13,7 @@ jest.mock('app/actionCreators/navigation');
 const SETTINGS_SEARCH_PLACEHOLDER = 'Search';
 describe('SettingsSearch', function() {
   let orgsMock;
-  let routerContext = TestStubs.routerContext([
+  const routerContext = TestStubs.routerContext([
     {
       router: TestStubs.router({
         params: {orgId: 'org-slug'},
@@ -57,7 +57,7 @@ describe('SettingsSearch', function() {
   });
 
   it('renders', async function() {
-    let wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
+    const wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
 
     // renders input
     expect(wrapper.find('SearchInput')).toHaveLength(1);
@@ -65,9 +65,9 @@ describe('SettingsSearch', function() {
   });
 
   it('can focus when `handleFocusSearch` is called and target is not search input', function() {
-    let wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
-    let searchInput = wrapper.instance().searchInput;
-    let focusSpy = jest.spyOn(searchInput, 'focus');
+    const wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
+    const searchInput = wrapper.instance().searchInput;
+    const focusSpy = jest.spyOn(searchInput, 'focus');
 
     wrapper.instance().handleFocusSearch({
       preventDefault: () => {},
@@ -78,9 +78,9 @@ describe('SettingsSearch', function() {
   });
 
   it('does not focus search input if it is current target and `handleFocusSearch` is called', function() {
-    let wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
-    let searchInput = wrapper.instance().searchInput;
-    let focusSpy = jest.spyOn(searchInput, 'focus');
+    const wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
+    const searchInput = wrapper.instance().searchInput;
+    const focusSpy = jest.spyOn(searchInput, 'focus');
 
     wrapper.instance().handleFocusSearch({
       preventDefault: () => {},
@@ -91,7 +91,7 @@ describe('SettingsSearch', function() {
   });
 
   it('can search', async function() {
-    let wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
+    const wrapper = mount(<SettingsSearch params={{orgId: 'org-slug'}} />, routerContext);
 
     wrapper.find('input').simulate('change', {target: {value: 'bil'}});
 
diff --git a/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx b/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx
index fe969f1fc1..bc191d906b 100644
--- a/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx
+++ b/tests/js/spec/views/settings/organizationAccessRequests.spec.jsx
@@ -7,7 +7,7 @@ describe('OrganizationAccessRequests', function() {
   beforeEach(function() {});
 
   it('renders empty', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationAccessRequests
         params={{apiKey: 1, orgId: 'org-slug'}}
         onApprove={() => {}}
@@ -18,7 +18,7 @@ describe('OrganizationAccessRequests', function() {
   });
 
   it('renders list', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationAccessRequests
         params={{apiKey: 1, orgId: 'org-slug'}}
         accessRequestBusy={new Map()}
@@ -47,8 +47,8 @@ describe('OrganizationAccessRequests', function() {
   });
 
   it('can approve', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <OrganizationAccessRequests
         params={{apiKey: 1, orgId: 'org-slug'}}
         accessRequestBusy={new Map()}
@@ -83,8 +83,8 @@ describe('OrganizationAccessRequests', function() {
   });
 
   it('can deny', function() {
-    let mock = jest.fn();
-    let wrapper = mount(
+    const mock = jest.fn();
+    const wrapper = mount(
       <OrganizationAccessRequests
         params={{apiKey: 1, orgId: 'org-slug'}}
         accessRequestBusy={new Map()}
diff --git a/tests/js/spec/views/settings/organizationApiKeyDetailsView.spec.jsx b/tests/js/spec/views/settings/organizationApiKeyDetailsView.spec.jsx
index 1b36b85ef7..7b845501bb 100644
--- a/tests/js/spec/views/settings/organizationApiKeyDetailsView.spec.jsx
+++ b/tests/js/spec/views/settings/organizationApiKeyDetailsView.spec.jsx
@@ -29,7 +29,7 @@ describe('OrganizationApiKeyDetails', function() {
   });
 
   it('renders', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationApiKeyDetails params={{apiKey: 1, orgId: 'org-slug'}} />,
       {
         context: {
diff --git a/tests/js/spec/views/settings/organizationApiKeysList.spec.jsx b/tests/js/spec/views/settings/organizationApiKeysList.spec.jsx
index 8fac625b55..34f3c0705f 100644
--- a/tests/js/spec/views/settings/organizationApiKeysList.spec.jsx
+++ b/tests/js/spec/views/settings/organizationApiKeysList.spec.jsx
@@ -16,7 +16,7 @@ describe('OrganizationApiKeysList', function() {
   beforeEach(function() {});
 
   it('renders', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationApiKeysList
         params={{orgId: 'org-slug'}}
         routes={routes}
@@ -28,7 +28,7 @@ describe('OrganizationApiKeysList', function() {
   });
 
   it('opens a modal when trying to delete a key', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationApiKeysList
         params={{orgId: 'org-slug'}}
         routes={routes}
@@ -43,7 +43,7 @@ describe('OrganizationApiKeysList', function() {
     wrapper.update();
 
     // expect a modal
-    let modal = wrapper.find('Modal');
+    const modal = wrapper.find('Modal');
     expect(modal.first().prop('show')).toBe(true);
   });
 });
diff --git a/tests/js/spec/views/settings/organizationApiKeysView.spec.jsx b/tests/js/spec/views/settings/organizationApiKeysView.spec.jsx
index 1c38a35e8c..5cc4026224 100644
--- a/tests/js/spec/views/settings/organizationApiKeysView.spec.jsx
+++ b/tests/js/spec/views/settings/organizationApiKeysView.spec.jsx
@@ -12,7 +12,7 @@ const routes = [
 ];
 
 describe('OrganizationApiKeys', function() {
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(function() {
     Client.clearMockResponses();
@@ -33,7 +33,7 @@ describe('OrganizationApiKeys', function() {
   });
 
   it('fetches api keys', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationApiKeys
         location={TestStubs.location()}
         params={{orgId: 'org-slug'}}
@@ -46,7 +46,7 @@ describe('OrganizationApiKeys', function() {
   });
 
   it('can delete a key', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationApiKeys
         location={TestStubs.location()}
         params={{orgId: 'org-slug'}}
diff --git a/tests/js/spec/views/settings/organizationAuthList.spec.jsx b/tests/js/spec/views/settings/organizationAuthList.spec.jsx
index a263e1d321..c8a86ee115 100644
--- a/tests/js/spec/views/settings/organizationAuthList.spec.jsx
+++ b/tests/js/spec/views/settings/organizationAuthList.spec.jsx
@@ -7,7 +7,7 @@ jest.mock('jquery');
 
 describe('OrganizationAuthList', function() {
   it('renders with no providers', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationAuthList providerList={[]} />,
       TestStubs.routerContext()
     );
@@ -16,7 +16,7 @@ describe('OrganizationAuthList', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationAuthList
         orgId="org-slug"
         onSendReminders={() => {}}
@@ -29,7 +29,7 @@ describe('OrganizationAuthList', function() {
   });
 
   it('renders for members', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationAuthList
         orgId="org-slug"
         onSendReminders={() => {}}
@@ -52,11 +52,11 @@ describe('OrganizationAuthList', function() {
     const withSAML = {features: ['sso-saml2']};
 
     it('renders', function() {
-      let context = TestStubs.routerContext([
+      const context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...require2fa, ...withSSO})},
       ]);
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationAuthList
           orgId="org-slug"
           onSendReminders={() => {}}
@@ -69,11 +69,11 @@ describe('OrganizationAuthList', function() {
     });
 
     it('renders with saml available', function() {
-      let context = TestStubs.routerContext([
+      const context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...require2fa, ...withSAML})},
       ]);
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationAuthList
           orgId="org-slug"
           onSendReminders={() => {}}
@@ -86,11 +86,11 @@ describe('OrganizationAuthList', function() {
     });
 
     it('does not render without sso available', function() {
-      let context = TestStubs.routerContext([
+      const context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...require2fa})},
       ]);
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationAuthList
           orgId="org-slug"
           onSendReminders={() => {}}
@@ -103,11 +103,11 @@ describe('OrganizationAuthList', function() {
     });
 
     it('does not render with sso and require 2fa disabled', function() {
-      let context = TestStubs.routerContext([
+      const context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...withSSO})},
       ]);
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationAuthList
           orgId="org-slug"
           onSendReminders={() => {}}
@@ -120,11 +120,11 @@ describe('OrganizationAuthList', function() {
     });
 
     it('does not render with saml and require 2fa disabled', function() {
-      let context = TestStubs.routerContext([
+      const context = TestStubs.routerContext([
         {organization: TestStubs.Organization({...withSAML})},
       ]);
 
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationAuthList
           orgId="org-slug"
           onSendReminders={() => {}}
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
index dd566e19f0..b1ece637e4 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/index.spec.jsx
@@ -6,9 +6,9 @@ import {mount} from 'enzyme';
 import OrganizationDeveloperSettings from 'app/views/settings/organizationDeveloperSettings/index';
 
 describe('Organization Developer Settings', function() {
-  let org = TestStubs.Organization();
-  let sentryApp = TestStubs.SentryApp();
-  let routerContext = TestStubs.routerContext();
+  const org = TestStubs.Organization();
+  const sentryApp = TestStubs.SentryApp();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(() => {
     Client.clearMockResponses();
@@ -37,7 +37,7 @@ describe('Organization Developer Settings', function() {
       body: [sentryApp],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationDeveloperSettings params={{orgId: org.slug}} />,
       routerContext
     );
@@ -74,7 +74,7 @@ describe('Organization Developer Settings', function() {
       url: `/organizations/${org.slug}/sentry-apps/`,
       body: [publishedSentryApp],
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationDeveloperSettings params={{orgId: org.slug}} />,
       routerContext
     );
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index 0d70073e3f..6ae39c9b69 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -67,7 +67,7 @@ describe('Sentry Application Details', function() {
           .simulate('change', {target: {checked: true}});
         wrapper.find('form').simulate('submit');
 
-        let data = {
+        const data = {
           name: 'Test App',
           organization: org.slug,
           redirectUrl: 'https://webhook.com/setup',
diff --git a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
index 2c16ddb993..d98ae77c8b 100644
--- a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
@@ -35,7 +35,7 @@ describe('OrganizationGeneralSettings', function() {
       statusCode: 500,
       body: {},
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
@@ -47,11 +47,11 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('can enable "early adopter"', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
     });
@@ -69,11 +69,11 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('changes org slug and redirects to new slug', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
     });
@@ -108,7 +108,7 @@ describe('OrganizationGeneralSettings', function() {
       url: ENDPOINT,
       body: readOnlyOrg,
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings routes={[]} params={{orgId: readOnlyOrg.slug}} />,
       TestStubs.routerContext([{organization: readOnlyOrg}])
     );
@@ -137,7 +137,7 @@ describe('OrganizationGeneralSettings', function() {
         access: ['org:write'],
       }),
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
@@ -157,11 +157,11 @@ describe('OrganizationGeneralSettings', function() {
         access: ['org:admin'],
       }),
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext()
     );
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: ENDPOINT,
       method: 'DELETE',
     });
@@ -186,7 +186,7 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('shows require2fa switch w/ feature flag', async function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext([
         {
@@ -204,11 +204,11 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('enables require2fa but cancels confirm modal', async function() {
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/',
       method: 'PUT',
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext([
         {
@@ -237,12 +237,12 @@ describe('OrganizationGeneralSettings', function() {
   });
 
   it('enables require2fa with confirm modal', async function() {
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/',
       method: 'PUT',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext([
         {
@@ -286,7 +286,7 @@ describe('OrganizationGeneralSettings', function() {
       statusCode: 500,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext([
         {
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
index d94c18eed2..6e589499a2 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallations.spec.jsx
@@ -11,16 +11,16 @@ jest.mock('app/actionCreators/modal', () => ({
 }));
 
 describe('Sentry App Installations', function() {
-  let org = TestStubs.Organization();
-  let sentryApp = TestStubs.SentryApp();
-  let install = TestStubs.SentryAppInstallation({
+  const org = TestStubs.Organization();
+  const sentryApp = TestStubs.SentryApp();
+  const install = TestStubs.SentryAppInstallation({
     organization: {slug: org.slug},
     app: {slug: sentryApp.slug, uuid: 'f4d972ba-1177-4974-943e-4800fe8c7d05'},
     code: '50624ecb-7aac-49d6-934a-83e53677560f',
   });
-  let api = new Client();
+  const api = new Client();
 
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(() => {
     Client.clearMockResponses();
diff --git a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
index bff97cbaba..b05ca10b74 100644
--- a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
@@ -12,9 +12,9 @@ jest.mock('app/api');
 jest.mock('app/actionCreators/indicator');
 
 describe('OrganizationMembers', function() {
-  let members = TestStubs.Members();
-  let currentUser = members[1];
-  let defaultProps = {
+  const members = TestStubs.Members();
+  const currentUser = members[1];
+  const defaultProps = {
     orgId: 'org-slug',
     orgName: 'Organization Name',
     status: '',
@@ -28,7 +28,7 @@ describe('OrganizationMembers', function() {
     onRemove: () => {},
     onLeave: () => {},
   };
-  let organization = TestStubs.Organization({
+  const organization = TestStubs.Organization({
     access: ['member:admin', 'org:admin'],
     status: {
       id: 'active',
@@ -88,12 +88,12 @@ describe('OrganizationMembers', function() {
   });
 
   it('can remove a member', async function() {
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `/organizations/org-id/members/${members[0].id}/`,
       method: 'DELETE',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -122,13 +122,13 @@ describe('OrganizationMembers', function() {
   });
 
   it('displays error message when failing to remove member', async function() {
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `/organizations/org-id/members/${members[0].id}/`,
       method: 'DELETE',
       statusCode: 500,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -157,12 +157,12 @@ describe('OrganizationMembers', function() {
   });
 
   it('can leave org', async function() {
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `/organizations/org-id/members/${members[1].id}/`,
       method: 'DELETE',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -191,11 +191,11 @@ describe('OrganizationMembers', function() {
   });
 
   it('can redirect to remaining org after leaving', async function() {
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `/organizations/org-id/members/${members[1].id}/`,
       method: 'DELETE',
     });
-    let secondOrg = TestStubs.Organization({
+    const secondOrg = TestStubs.Organization({
       slug: 'org-two',
       status: {
         id: 'active',
@@ -203,7 +203,7 @@ describe('OrganizationMembers', function() {
     });
     OrganizationsStore.add(secondOrg);
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -233,13 +233,13 @@ describe('OrganizationMembers', function() {
   });
 
   it('displays error message when failing to leave org', async function() {
-    let deleteMock = Client.addMockResponse({
+    const deleteMock = Client.addMockResponse({
       url: `/organizations/org-id/members/${members[1].id}/`,
       method: 'DELETE',
       statusCode: 500,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -268,14 +268,14 @@ describe('OrganizationMembers', function() {
   });
 
   it('can re-send invite to member', async function() {
-    let inviteMock = MockApiClient.addMockResponse({
+    const inviteMock = MockApiClient.addMockResponse({
       url: `/organizations/org-id/members/${members[0].id}/`,
       method: 'PUT',
       body: {
         id: '1234',
       },
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -297,11 +297,11 @@ describe('OrganizationMembers', function() {
   });
 
   it('can approve pending access request', async function() {
-    let approveMock = MockApiClient.addMockResponse({
+    const approveMock = MockApiClient.addMockResponse({
       url: '/organizations/org-id/access-requests/pending-id/',
       method: 'PUT',
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -330,11 +330,11 @@ describe('OrganizationMembers', function() {
   });
 
   it('can deny pending access request', async function() {
-    let denyMock = MockApiClient.addMockResponse({
+    const denyMock = MockApiClient.addMockResponse({
       url: '/organizations/org-id/access-requests/pending-id/',
       method: 'PUT',
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         params={{
@@ -364,12 +364,12 @@ describe('OrganizationMembers', function() {
   });
 
   it('can search organization members', async function() {
-    let searchMock = MockApiClient.addMockResponse({
+    const searchMock = MockApiClient.addMockResponse({
       url: '/organizations/org-id/members/',
       body: [],
     });
-    let routerContext = TestStubs.routerContext();
-    let wrapper = mount(
+    const routerContext = TestStubs.routerContext();
+    const wrapper = mount(
       <OrganizationMembers
         {...defaultProps}
         location={{}}
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
index 0dc8c6b9b4..2b229fc14c 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMemberDetail.spec.jsx
@@ -12,8 +12,8 @@ describe('OrganizationMemberDetail', function() {
   let organization;
   let wrapper;
   let routerContext;
-  let team = TestStubs.Team();
-  let teams = [
+  const team = TestStubs.Team();
+  const teams = [
     team,
     TestStubs.Team({
       id: '2',
@@ -22,12 +22,12 @@ describe('OrganizationMemberDetail', function() {
       isMember: false,
     }),
   ];
-  let member = TestStubs.Member({
+  const member = TestStubs.Member({
     roles: TestStubs.RoleList(),
     dateCreated: new Date(),
     teams: [team.slug],
   });
-  let pendingMember = TestStubs.Member({
+  const pendingMember = TestStubs.Member({
     id: 2,
     roles: TestStubs.RoleList(),
     dateCreated: new Date(),
@@ -35,7 +35,7 @@ describe('OrganizationMemberDetail', function() {
     invite_link: 'http://example.com/i/abc123',
     pending: true,
   });
-  let expiredMember = TestStubs.Member({
+  const expiredMember = TestStubs.Member({
     id: 3,
     roles: TestStubs.RoleList(),
     dateCreated: new Date(),
@@ -153,9 +153,9 @@ describe('OrganizationMemberDetail', function() {
       routerContext
     );
 
-    let first = 'TeamSelect Checkbox[id="team-slug"]';
-    let last = 'TeamSelect Checkbox[id="new-team"]';
-    let selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
+    const first = 'TeamSelect Checkbox[id="team-slug"]';
+    const last = 'TeamSelect Checkbox[id="new-team"]';
+    const selectAllButton = wrapper.find('Button[data-test-id="select-all"]');
 
     expect(selectAllButton).toHaveLength(1);
     expect(wrapper.find(first).prop('checked')).toBe(true);
@@ -255,7 +255,7 @@ describe('OrganizationMemberDetail', function() {
         routerContext
       );
 
-      let button = wrapper.find('Button[data-test-id="resend-invite"]');
+      const button = wrapper.find('Button[data-test-id="resend-invite"]');
       expect(button.text()).toEqual('Resend Invite');
     });
 
@@ -270,25 +270,25 @@ describe('OrganizationMemberDetail', function() {
   });
 
   describe('Reset member 2FA', function() {
-    let fields = {
+    const fields = {
       roles: TestStubs.RoleList(),
       dateCreated: new Date(),
       teams: [team.slug],
     };
 
-    let noAccess = TestStubs.Member({
+    const noAccess = TestStubs.Member({
       ...fields,
       id: '4',
       user: TestStubs.User({has2fa: false}),
     });
 
-    let no2fa = TestStubs.Member({
+    const no2fa = TestStubs.Member({
       ...fields,
       id: '5',
       user: TestStubs.User({has2fa: false, authenticators: [], canReset2fa: true}),
     });
 
-    let has2fa = TestStubs.Member({
+    const has2fa = TestStubs.Member({
       ...fields,
       id: '6',
       user: TestStubs.User({
@@ -302,7 +302,7 @@ describe('OrganizationMemberDetail', function() {
       }),
     });
 
-    let multipleOrgs = TestStubs.Member({
+    const multipleOrgs = TestStubs.Member({
       ...fields,
       id: '7',
       user: TestStubs.User({
@@ -339,8 +339,8 @@ describe('OrganizationMemberDetail', function() {
       });
     });
 
-    let button = 'Button[data-test-id="reset-2fa"]';
-    let tooltip = 'Tooltip[data-test-id="reset-2fa-tooltip"]';
+    const button = 'Button[data-test-id="reset-2fa"]';
+    const tooltip = 'Tooltip[data-test-id="reset-2fa-tooltip"]';
 
     const expectButtonEnabled = () => {
       expect(wrapper.find(button).text()).toEqual('Reset two-factor authentication');
@@ -383,7 +383,7 @@ describe('OrganizationMemberDetail', function() {
     });
 
     it('can reset member 2FA', function() {
-      let deleteMocks = has2fa.user.authenticators.map(auth => {
+      const deleteMocks = has2fa.user.authenticators.map(auth => {
         return MockApiClient.addMockResponse({
           url: `/users/${has2fa.user.id}/authenticators/${auth.id}/`,
           method: 'DELETE',
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationMemberRow.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationMemberRow.spec.jsx
index 8467d91652..aba3a97b8d 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationMemberRow.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationMemberRow.spec.jsx
@@ -7,7 +7,7 @@ const findWithText = (wrapper, text) =>
   wrapper.filterWhere(n => n.prop('children') && n.prop('children').includes(text));
 
 describe('OrganizationMemberRow', function() {
-  let member = {
+  const member = {
     id: '1',
     email: '',
     name: '',
@@ -24,12 +24,12 @@ describe('OrganizationMemberRow', function() {
     },
   };
 
-  let currentUser = {
+  const currentUser = {
     id: '2',
     email: 'currentUser@email.com',
   };
 
-  let defaultProps = {
+  const defaultProps = {
     routes: [],
     orgId: 'org-slug',
     orgName: 'Organization Name',
@@ -48,7 +48,7 @@ describe('OrganizationMemberRow', function() {
   beforeEach(function() {});
 
   it('does not have 2fa warning if user has 2fa', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationMemberRow
         {...defaultProps}
         member={{
@@ -65,7 +65,7 @@ describe('OrganizationMemberRow', function() {
   });
 
   it('has 2fa warning if user does not have 2fa enabled', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationMemberRow
         {...defaultProps}
         member={{
@@ -82,7 +82,7 @@ describe('OrganizationMemberRow', function() {
   });
 
   describe('Pending user', function() {
-    let props = {
+    const props = {
       ...defaultProps,
       member: {
         ...member,
@@ -91,7 +91,7 @@ describe('OrganizationMemberRow', function() {
     };
 
     it('has "Invited" status, no "Resend Invite"', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationMemberRow
           {...props}
           member={{
@@ -107,7 +107,7 @@ describe('OrganizationMemberRow', function() {
     });
 
     it('has "Resend Invite" button only if `canAddMembers` is true', function() {
-      let wrapper = shallow(<OrganizationMemberRow {...props} canAddMembers={true} />);
+      const wrapper = shallow(<OrganizationMemberRow {...props} canAddMembers={true} />);
 
       expect(findWithText(wrapper.find('strong'), 'Invited')).toHaveLength(1);
 
@@ -142,7 +142,7 @@ describe('OrganizationMemberRow', function() {
 
   describe('Expired user', function() {
     it('has "Expired" status', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationMemberRow
           {...defaultProps}
           member={{
@@ -159,7 +159,7 @@ describe('OrganizationMemberRow', function() {
   });
 
   describe('Requires SSO Link', function() {
-    let props = {
+    const props = {
       ...defaultProps,
       flags: {
         'sso:link': false,
@@ -168,7 +168,7 @@ describe('OrganizationMemberRow', function() {
     };
 
     it('shows "Invited" status if user has not registered and not linked', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationMemberRow
           {...props}
           member={{
@@ -184,7 +184,7 @@ describe('OrganizationMemberRow', function() {
     });
 
     it('shows "missing SSO link" message if user is registered and needs link', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationMemberRow
           {...props}
           member={{
@@ -199,7 +199,7 @@ describe('OrganizationMemberRow', function() {
     });
 
     it('has "Resend Invite" button only if `canAddMembers` is true and no link', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationMemberRow
           {...props}
           canAddMembers={true}
@@ -213,7 +213,7 @@ describe('OrganizationMemberRow', function() {
     });
 
     it('has 2fa warning if user is linked does not have 2fa enabled', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <OrganizationMemberRow
           {...defaultProps}
           member={{
@@ -234,7 +234,7 @@ describe('OrganizationMemberRow', function() {
   });
 
   describe('Is Current User', function() {
-    let props = {
+    const props = {
       ...defaultProps,
       member: {
         ...member,
@@ -243,13 +243,15 @@ describe('OrganizationMemberRow', function() {
     };
 
     it('has button to leave organization and no button to remove', function() {
-      let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
+      const wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
       expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(1);
       expect(findWithText(wrapper.find('Button'), 'Remove')).toHaveLength(0);
     });
 
     it('has disabled button to leave organization and no button to remove when member can not leave', function() {
-      let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={false} />);
+      const wrapper = shallow(
+        <OrganizationMemberRow {...props} memberCanLeave={false} />
+      );
       expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(1);
       expect(
         findWithText(wrapper.find('Button'), 'Leave')
@@ -261,27 +263,29 @@ describe('OrganizationMemberRow', function() {
   });
 
   describe('Not Current User', function() {
-    let props = {
+    const props = {
       ...defaultProps,
     };
 
     it('does not have Leave button', function() {
-      let wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
+      const wrapper = shallow(<OrganizationMemberRow {...props} memberCanLeave={true} />);
 
       expect(findWithText(wrapper.find('Button'), 'Leave')).toHaveLength(0);
     });
 
     it('has Remove disabled button when `canRemoveMembers` is false', function() {
-      let wrapper = shallow(<OrganizationMemberRow {...props} />);
+      const wrapper = shallow(<OrganizationMemberRow {...props} />);
 
       expect(findWithText(wrapper.find('Button'), 'Remove')).toHaveLength(1);
       expect(findWithText(wrapper.find('Button'), 'Remove').prop('disabled')).toBe(true);
     });
 
     it('has Remove button when `canRemoveMembers` is true', function() {
-      let wrapper = shallow(<OrganizationMemberRow {...props} canRemoveMembers={true} />);
+      const wrapper = shallow(
+        <OrganizationMemberRow {...props} canRemoveMembers={true} />
+      );
 
-      let removeButton = findWithText(wrapper.find('Button'), 'Remove');
+      const removeButton = findWithText(wrapper.find('Button'), 'Remove');
       expect(removeButton).toHaveLength(1);
       expect(removeButton.first().prop('disabled')).toBe(false);
     });
diff --git a/tests/js/spec/views/settings/organizationProjects.spec.jsx b/tests/js/spec/views/settings/organizationProjects.spec.jsx
index b10eba661b..b2403d5e9b 100644
--- a/tests/js/spec/views/settings/organizationProjects.spec.jsx
+++ b/tests/js/spec/views/settings/organizationProjects.spec.jsx
@@ -10,7 +10,7 @@ describe('OrganizationProjects', function() {
   let projectsGetMock;
   let statsGetMock;
   let projectsPutMock;
-  let routerContext = TestStubs.routerContext();
+  const routerContext = TestStubs.routerContext();
 
   beforeEach(function() {
     project = TestStubs.Project();
@@ -37,7 +37,7 @@ describe('OrganizationProjects', function() {
   });
 
   it('Should render the projects in the store', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationProjectsContainer params={{orgId: org.slug}} />,
       routerContext
     );
@@ -57,11 +57,11 @@ describe('OrganizationProjects', function() {
   });
 
   it('should search organization projects', async function() {
-    let searchMock = MockApiClient.addMockResponse({
+    const searchMock = MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/projects/`,
       body: [],
     });
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationProjectsContainer location={{}} params={{orgId: org.slug}} />,
       routerContext
     );
diff --git a/tests/js/spec/views/settings/organizationRateLimits.spec.jsx b/tests/js/spec/views/settings/organizationRateLimits.spec.jsx
index 2c00a85ec2..f10c9b7ba5 100644
--- a/tests/js/spec/views/settings/organizationRateLimits.spec.jsx
+++ b/tests/js/spec/views/settings/organizationRateLimits.spec.jsx
@@ -24,7 +24,7 @@ describe('Organization Rate Limits', function() {
   });
 
   it('renders with initialData', function() {
-    let wrapper = mount(creator(), TestStubs.routerContext());
+    const wrapper = mount(creator(), TestStubs.routerContext());
 
     expect(
       wrapper
@@ -48,7 +48,7 @@ describe('Organization Rate Limits', function() {
         maxRateInterval: 60,
       },
     };
-    let wrapper = mount(creator({organization: org}), TestStubs.routerContext());
+    const wrapper = mount(creator({organization: org}), TestStubs.routerContext());
 
     expect(wrapper.find('RangeSlider')).toHaveLength(1);
 
@@ -56,13 +56,13 @@ describe('Organization Rate Limits', function() {
   });
 
   it('can change Account Rate Limit', function() {
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
       statusCode: 200,
     });
 
-    let wrapper = mount(creator(), TestStubs.routerContext());
+    const wrapper = mount(creator(), TestStubs.routerContext());
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -86,13 +86,13 @@ describe('Organization Rate Limits', function() {
   });
 
   it('can change Project Rate Limit', function() {
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: ENDPOINT,
       method: 'PUT',
       statusCode: 200,
     });
 
-    let wrapper = mount(creator(), TestStubs.routerContext());
+    const wrapper = mount(creator(), TestStubs.routerContext());
 
     expect(mock).not.toHaveBeenCalled();
 
diff --git a/tests/js/spec/views/settings/organizationRepositories.spec.jsx b/tests/js/spec/views/settings/organizationRepositories.spec.jsx
index c4e626cc5f..462f1f01f2 100644
--- a/tests/js/spec/views/settings/organizationRepositories.spec.jsx
+++ b/tests/js/spec/views/settings/organizationRepositories.spec.jsx
@@ -6,7 +6,7 @@ import OrganizationRepositories from 'app/views/settings/organizationRepositorie
 
 describe('OrganizationRepositories', function() {
   it('renders without providers', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationRepositories
         params={{orgId: 'org-slug'}}
         itemList={[]}
@@ -17,7 +17,7 @@ describe('OrganizationRepositories', function() {
   });
 
   it('renders with github provider', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationRepositories
         params={{orgId: 'org-slug'}}
         repoConfig={{providers: [TestStubs.GitHubRepositoryProvider({id: 'github'})]}}
@@ -32,7 +32,7 @@ describe('OrganizationRepositories', function() {
       url: '/organizations/org-slug/repos/',
       body: [TestStubs.Repository()],
     });
-    let wrapper = shallow(
+    const wrapper = shallow(
       <OrganizationRepositories
         api={new Client()}
         params={{orgId: 'org-slug'}}
diff --git a/tests/js/spec/views/settings/organizationRepositoriesContainer.spec.jsx b/tests/js/spec/views/settings/organizationRepositoriesContainer.spec.jsx
index 6934605117..9e9ad4754c 100644
--- a/tests/js/spec/views/settings/organizationRepositoriesContainer.spec.jsx
+++ b/tests/js/spec/views/settings/organizationRepositoriesContainer.spec.jsx
@@ -29,7 +29,7 @@ describe('OrganizationRepositoriesContainer', function() {
       });
 
       it('is loading when initially rendering', function() {
-        let wrapper = shallow(
+        const wrapper = shallow(
           <OrganizationRepositoriesContainer params={{orgId: 'org-slug'}} />,
           {
             context: {
diff --git a/tests/js/spec/views/settings/organizationSettingsForm.spec.jsx b/tests/js/spec/views/settings/organizationSettingsForm.spec.jsx
index 4820acfc56..3a51db9787 100644
--- a/tests/js/spec/views/settings/organizationSettingsForm.spec.jsx
+++ b/tests/js/spec/views/settings/organizationSettingsForm.spec.jsx
@@ -8,9 +8,9 @@ jest.mock('jquery');
 jest.mock('app/actionCreators/indicator');
 
 describe('OrganizationSettingsForm', function() {
-  let organization = TestStubs.Organization();
+  const organization = TestStubs.Organization();
   let putMock;
-  let onSave = jest.fn();
+  const onSave = jest.fn();
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -26,7 +26,7 @@ describe('OrganizationSettingsForm', function() {
       },
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationSettingsForm
         location={TestStubs.location()}
         orgId={organization.id}
@@ -37,7 +37,7 @@ describe('OrganizationSettingsForm', function() {
       TestStubs.routerContext()
     );
 
-    let input = wrapper.find('input[name="name"]');
+    const input = wrapper.find('input[name="name"]');
     expect(input).toHaveLength(1);
 
     input.simulate('change', {target: {value: 'New Name'}});
@@ -91,7 +91,7 @@ describe('OrganizationSettingsForm', function() {
       method: 'PUT',
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationSettingsForm
         location={TestStubs.location()}
         orgId={organization.slug}
diff --git a/tests/js/spec/views/settings/organizationTeams.spec.jsx b/tests/js/spec/views/settings/organizationTeams.spec.jsx
index 9de1f48cb9..7fd346d4f5 100644
--- a/tests/js/spec/views/settings/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/settings/organizationTeams.spec.jsx
@@ -12,8 +12,8 @@ jest.mock('app/actionCreators/modal', () => ({
 }));
 
 describe('OrganizationTeams', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
   beforeEach(function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/stats/',
@@ -22,7 +22,7 @@ describe('OrganizationTeams', function() {
   });
 
   it('opens "create team modal" when creating a new team from header', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <OrganizationTeams
         params={{orgId: org.slug, projectId: project.slug}}
         routes={[]}
diff --git a/tests/js/spec/views/settings/projectReleaseTracking.spec.jsx b/tests/js/spec/views/settings/projectReleaseTracking.spec.jsx
index 4a27a4a4da..fab2b9c391 100644
--- a/tests/js/spec/views/settings/projectReleaseTracking.spec.jsx
+++ b/tests/js/spec/views/settings/projectReleaseTracking.spec.jsx
@@ -11,9 +11,9 @@ jest.mock('app/actionCreators/plugins', () => ({
 }));
 
 describe('ProjectReleaseTracking', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.Project();
-  let url = `/projects/${org.slug}/${project.slug}/releases/token/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.Project();
+  const url = `/projects/${org.slug}/${project.slug}/releases/token/`;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -33,7 +33,7 @@ describe('ProjectReleaseTracking', function() {
   });
 
   it('renders with token', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectReleaseTracking
         organization={org}
         project={project}
@@ -47,7 +47,7 @@ describe('ProjectReleaseTracking', function() {
   });
 
   it('can regenerate token', function(done) {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectReleaseTracking
         organization={org}
         project={project}
@@ -57,7 +57,7 @@ describe('ProjectReleaseTracking', function() {
       TestStubs.routerContext()
     );
 
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url,
       method: 'POST',
     });
@@ -85,7 +85,7 @@ describe('ProjectReleaseTracking', function() {
   });
 
   it('fetches new plugins when project changes', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectReleaseTrackingContainer
         organization={org}
         project={project}
diff --git a/tests/js/spec/views/settings/projectUserFeedback.spec.jsx b/tests/js/spec/views/settings/projectUserFeedback.spec.jsx
index cc241330e3..83b344c379 100644
--- a/tests/js/spec/views/settings/projectUserFeedback.spec.jsx
+++ b/tests/js/spec/views/settings/projectUserFeedback.spec.jsx
@@ -4,9 +4,9 @@ import {mount} from 'enzyme';
 import ProjectUserFeedback from 'app/views/settings/project/projectUserFeedback';
 
 describe('ProjectUserFeedback', function() {
-  let org = TestStubs.Organization();
-  let project = TestStubs.ProjectDetails();
-  let url = `/projects/${org.slug}/${project.slug}/`;
+  const org = TestStubs.Organization();
+  const project = TestStubs.ProjectDetails();
+  const url = `/projects/${org.slug}/${project.slug}/`;
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
@@ -23,7 +23,7 @@ describe('ProjectUserFeedback', function() {
   });
 
   it('can toggle sentry branding option', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <ProjectUserFeedback
         organization={org}
         project={project}
@@ -33,7 +33,7 @@ describe('ProjectUserFeedback', function() {
       TestStubs.routerContext()
     );
 
-    let mock = MockApiClient.addMockResponse({
+    const mock = MockApiClient.addMockResponse({
       url,
       method: 'PUT',
     });
diff --git a/tests/js/spec/views/settings/settingsIndex.spec.jsx b/tests/js/spec/views/settings/settingsIndex.spec.jsx
index 0836e6f896..a7924d8f27 100644
--- a/tests/js/spec/views/settings/settingsIndex.spec.jsx
+++ b/tests/js/spec/views/settings/settingsIndex.spec.jsx
@@ -40,7 +40,7 @@ describe('SettingsIndex', function() {
   describe('Fetch org details for Sidebar', function() {
     let spy;
     let api;
-    let organization = {
+    const organization = {
       id: '44',
       name: 'Org Index',
       slug: 'org-index',
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index 33bd813a44..d6552439be 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -51,7 +51,7 @@ describe('StreamActions', function() {
       });
 
       it('bulk resolves', async function() {
-        let apiMock = MockApiClient.addMockResponse({
+        const apiMock = MockApiClient.addMockResponse({
           url: '/projects/1337/1/issues/',
           method: 'PUT',
         });
@@ -107,7 +107,7 @@ describe('StreamActions', function() {
       });
 
       it('bulk resolves', async function() {
-        let apiMock = MockApiClient.addMockResponse({
+        const apiMock = MockApiClient.addMockResponse({
           url: '/projects/1337/1/issues/',
           method: 'PUT',
         });
@@ -150,7 +150,7 @@ describe('StreamActions', function() {
     describe('for all items', function() {
       it("should invoke the callback with 'undefined' and deselect all", function() {
         sandbox.stub(SelectedGroupStore, 'deselectAll');
-        let callback = sandbox.stub();
+        const callback = sandbox.stub();
 
         actions.state.allInQuerySelected = true;
 
@@ -170,7 +170,7 @@ describe('StreamActions', function() {
         sandbox.stub(SelectedGroupStore, 'getSelectedIds').returns(new Set([1, 2, 3]));
 
         actions.state.allInQuerySelected = false;
-        let callback = sandbox.stub();
+        const callback = sandbox.stub();
         actions.actionSelectedGroups(callback);
 
         expect(callback.withArgs([1, 2, 3]).calledOnce).toBeTruthy();
@@ -196,12 +196,12 @@ describe('StreamActions', function() {
     });
 
     it('should disable resolve picker', function() {
-      let resolve = wrapper.find('ResolveActions').first();
+      const resolve = wrapper.find('ResolveActions').first();
       expect(resolve.props().disabled).toBeTruthy();
     });
 
     it('should disable merge button', function() {
-      let merge = wrapper.find('ActionLink[className~="action-merge"]').first();
+      const merge = wrapper.find('ActionLink[className~="action-merge"]').first();
       expect(merge.props().disabled).toBeTruthy();
     });
   });
diff --git a/tests/js/spec/views/stream/savedSearchSelector.spec.jsx b/tests/js/spec/views/stream/savedSearchSelector.spec.jsx
index 4184e1034f..3dffa4e129 100644
--- a/tests/js/spec/views/stream/savedSearchSelector.spec.jsx
+++ b/tests/js/spec/views/stream/savedSearchSelector.spec.jsx
@@ -10,8 +10,8 @@ describe('SavedSearchSelector', function() {
   let orgId;
   let projectId;
   let savedSearchList;
-  let onCreate = jest.fn();
-  let onSelect = jest.fn();
+  const onCreate = jest.fn();
+  const onSelect = jest.fn();
 
   beforeEach(function() {
     projectId = 'test-project';
@@ -31,7 +31,7 @@ describe('SavedSearchSelector', function() {
       },
     ];
 
-    let access = new Set(['project:write']);
+    const access = new Set(['project:write']);
 
     props = {
       projectId,
@@ -50,21 +50,21 @@ describe('SavedSearchSelector', function() {
     });
 
     it('defaults to custom search', function() {
-      let instance = wrapper.find('SavedSearchSelector').instance();
+      const instance = wrapper.find('SavedSearchSelector').instance();
 
       expect(instance.getTitle()).toEqual('Custom Search');
     });
 
     it('uses searchId to match', function() {
       wrapper.setProps({searchId: '789'});
-      let instance = wrapper.find('SavedSearchSelector').instance();
+      const instance = wrapper.find('SavedSearchSelector').instance();
 
       expect(instance.getTitle()).toEqual('Unresolved');
     });
 
     it('uses query to match', function() {
       wrapper.setProps({query: 'is:unresolved assigned:me'});
-      let instance = wrapper.find('SavedSearchSelector').instance();
+      const instance = wrapper.find('SavedSearchSelector').instance();
 
       expect(instance.getTitle()).toEqual('Assigned to me');
     });
@@ -79,7 +79,7 @@ describe('SavedSearchSelector', function() {
       wrapper.find('DropdownLink').simulate('click');
       await wrapper.update();
 
-      let item = wrapper.find('StyledMenuItem a').first();
+      const item = wrapper.find('StyledMenuItem a').first();
       expect(item).toHaveLength(1);
 
       item.simulate('click');
@@ -95,14 +95,14 @@ describe('SavedSearchSelector', function() {
     it('renders enabled manage and create buttons', function() {
       wrapper.find('DropdownLink').simulate('click');
 
-      let buttons = wrapper.find('Button');
+      const buttons = wrapper.find('Button');
       expect(buttons).toHaveLength(2);
 
-      let createButton = buttons.first();
+      const createButton = buttons.first();
       expect(createButton.text()).toEqual('Save Current Search');
       expect(createButton.props().disabled).toBeFalsy();
 
-      let manageButton = buttons.last();
+      const manageButton = buttons.last();
       expect(manageButton.text()).toEqual('Manage');
       expect(manageButton.props().disabled).toBeFalsy();
     });
@@ -117,13 +117,13 @@ describe('SavedSearchSelector', function() {
     it('renders disabled manage and create buttons', function() {
       wrapper.find('DropdownLink').simulate('click');
 
-      let buttons = wrapper.find('Button');
+      const buttons = wrapper.find('Button');
       expect(buttons).toHaveLength(2);
 
-      let createButton = buttons.first();
+      const createButton = buttons.first();
       expect(createButton.props().disabled).toBeTruthy();
 
-      let manageButton = buttons.last();
+      const manageButton = buttons.last();
       expect(manageButton.props().disabled).toBeTruthy();
     });
   });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index a4e48e56ee..b97882ea89 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -49,13 +49,13 @@ describe('SearchBar', function() {
     });
 
     it('sets state with complete tag', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'url:"fu"',
         supportedTags,
       };
-      let searchBar = mount(<SearchBar {...props} />, options);
+      const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
       clock.tick(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
@@ -67,14 +67,14 @@ describe('SearchBar', function() {
     });
 
     it('sets state when value has colon', function() {
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'url:"http://example.com"',
         supportedTags,
       };
 
-      let searchBar = mount(<SearchBar {...props} />, options);
+      const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
       expect(searchBar.state.searchTerm).toEqual();
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual(
@@ -92,29 +92,29 @@ describe('SearchBar', function() {
 
     it('does not request values when tag is `timesSeen`', function() {
       // This should never get called
-      let mock = MockApiClient.addMockResponse({
+      const mock = MockApiClient.addMockResponse({
         url: '/projects/123/456/tags/timesSeen/values/',
         body: [],
       });
-      let props = {
+      const props = {
         orgId: '123',
         projectId: '456',
         query: 'timesSeen:',
         supportedTags,
       };
-      let searchBar = mount(<SearchBar {...props} />, options);
+      const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
       clock.tick(301);
       expect(mock).not.toHaveBeenCalled();
     });
 
     it('sets state with complete tag when there is no projectid', function() {
-      let props = {
+      const props = {
         orgId: '123',
         query: 'url:"fu"',
         supportedTags,
       };
-      let searchBar = mount(<SearchBar {...props} />, options);
+      const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
       clock.tick(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index d08694a350..c6068cd0ab 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -99,7 +99,7 @@ describe('Stream', function() {
       });
 
       it('should reset the poller endpoint and sets cursor URL', function() {
-        let stream = wrapper.instance();
+        const stream = wrapper.instance();
         stream.state.pageLinks = DEFAULT_LINKS_HEADER;
         stream.state.realtimeActive = true;
 
@@ -113,7 +113,7 @@ describe('Stream', function() {
       });
 
       it('should not enable the poller if realtimeActive is false', function() {
-        let stream = wrapper.instance();
+        const stream = wrapper.instance();
         stream.state.pageLinks = DEFAULT_LINKS_HEADER;
         stream.state.realtimeActive = false;
         stream.fetchData();
@@ -138,7 +138,7 @@ describe('Stream', function() {
           context,
         });
 
-        let stream = wrapper.instance();
+        const stream = wrapper.instance();
 
         stream.setState({
           pageLinks,
@@ -172,7 +172,7 @@ describe('Stream', function() {
     });
 
     it('should cancel any previous, unfinished fetches', function() {
-      let requestCancel = sandbox.stub();
+      const requestCancel = sandbox.stub();
       let requestOptions;
       sandbox.stub(Client.prototype, 'request', function(url, options) {
         requestOptions = options;
@@ -182,7 +182,7 @@ describe('Stream', function() {
       });
 
       // NOTE: fetchData called once after render automatically
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
 
       // 2nd fetch should call cancel
       stream.fetchData();
@@ -200,7 +200,7 @@ describe('Stream', function() {
     });
 
     it('sends environment attribute', function() {
-      let requestCancel = sandbox.stub();
+      const requestCancel = sandbox.stub();
       let requestOptions;
       sandbox.stub(Client.prototype, 'request', function(url, options) {
         requestOptions = options;
@@ -209,7 +209,7 @@ describe('Stream', function() {
         };
       });
 
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
       stream.state.activeEnvironment = {name: 'prod'};
       stream.state.query = 'is:unresolved environment:prod';
       stream.fetchData();
@@ -438,21 +438,21 @@ describe('Stream', function() {
     it('reads the realtimeActive state from a cookie', function() {
       Cookies.set('realtimeActive', 'false');
 
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
       expect(stream.getInitialState()).toHaveProperty('realtimeActive', false);
     });
 
     it('reads the true realtimeActive state from a cookie', function() {
       Cookies.set('realtimeActive', 'true');
 
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
       expect(stream.getInitialState()).toHaveProperty('realtimeActive', true);
     });
   });
 
   describe('onRealtimeChange', function() {
     it('sets the realtimeActive state', function() {
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
       stream.state.realtimeActive = false;
       stream.onRealtimeChange(true);
       expect(stream.state.realtimeActive).toEqual(true);
@@ -466,7 +466,7 @@ describe('Stream', function() {
 
   describe('getInitialState', function() {
     it('handles query', function() {
-      let expected = {
+      const expected = {
         groupIds: [],
         selectAllActive: false,
         multiSelected: false,
@@ -482,17 +482,17 @@ describe('Stream', function() {
         sort: 'date',
       };
 
-      let actual = wrapper.instance().getInitialState();
+      const actual = wrapper.instance().getInitialState();
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
     it('handles no searchId or query', async function() {
-      let streamProps = {
+      const streamProps = {
         ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
       };
 
-      let expected = {
+      const expected = {
         groupIds: [],
         selectAllActive: false,
         multiSelected: false,
@@ -512,20 +512,20 @@ describe('Stream', function() {
       });
       await wrapper.update();
 
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
 
-      let actual = stream.state;
+      const actual = stream.state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
     it('handles valid searchId in routing params', async function() {
-      let streamProps = {
+      const streamProps = {
         ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '789'},
       };
 
-      let expected = {
+      const expected = {
         groupIds: [],
         selectAllActive: false,
         multiSelected: false,
@@ -549,18 +549,18 @@ describe('Stream', function() {
       });
       await wrapper.update();
 
-      let actual = wrapper.instance().state;
+      const actual = wrapper.instance().state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
 
     it('handles invalid searchId in routing params', async function() {
-      let streamProps = {
+      const streamProps = {
         ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: 'org-slug', projectId: 'project-slug', searchId: '799'},
       };
 
-      let expected = {
+      const expected = {
         groupIds: [],
         selectAllActive: false,
         multiSelected: false,
@@ -579,9 +579,9 @@ describe('Stream', function() {
         context,
       });
       await wrapper.update();
-      let stream = wrapper.instance();
+      const stream = wrapper.instance();
 
-      let actual = stream.state;
+      const actual = stream.state;
       expect(_.pick(actual, _.keys(expected))).toEqual(expected);
     });
   });
diff --git a/tests/js/spec/views/stream/tagFilter.spec.jsx b/tests/js/spec/views/stream/tagFilter.spec.jsx
index a30e4a08e9..e0bf754b7c 100644
--- a/tests/js/spec/views/stream/tagFilter.spec.jsx
+++ b/tests/js/spec/views/stream/tagFilter.spec.jsx
@@ -44,9 +44,9 @@ describe('Stream TagFilter', function() {
   });
 
   it('calls API and renders options when opened', async function() {
-    let selectMock = jest.fn();
-    let tag = {key: 'browser', name: 'Browser'};
-    let wrapper = mount(
+    const selectMock = jest.fn();
+    const tag = {key: 'browser', name: 'Browser'};
+    const wrapper = mount(
       <StreamTagFilter
         tag={tag}
         orgId={organization.slug}
@@ -70,9 +70,9 @@ describe('Stream TagFilter', function() {
   });
 
   it('calls API and renders options when opened without project', async function() {
-    let selectMock = jest.fn();
-    let tag = {key: 'browser', name: 'Browser'};
-    let wrapper = mount(
+    const selectMock = jest.fn();
+    const tag = {key: 'browser', name: 'Browser'};
+    const wrapper = mount(
       <StreamTagFilter
         tag={tag}
         orgId={organization.slug}
diff --git a/tests/js/spec/views/teamCreate.spec.jsx b/tests/js/spec/views/teamCreate.spec.jsx
index b8c7a16cae..4c0fbce5df 100644
--- a/tests/js/spec/views/teamCreate.spec.jsx
+++ b/tests/js/spec/views/teamCreate.spec.jsx
@@ -6,7 +6,7 @@ import {TeamCreate} from 'app/views/teamCreate';
 describe('TeamCreate', function() {
   describe('render()', function() {
     it('renders correctly', function() {
-      let wrapper = shallow(
+      const wrapper = shallow(
         <TeamCreate
           params={{
             orgId: 'org',
@@ -22,7 +22,7 @@ describe('TeamCreate', function() {
 
   describe('handleSubmitSuccess()', function() {
     let wrapper;
-    let redirectMock = jest.fn();
+    const redirectMock = jest.fn();
 
     beforeEach(function() {
       redirectMock.mockReset();
diff --git a/tests/js/spec/views/teamMembers.spec.jsx b/tests/js/spec/views/teamMembers.spec.jsx
index 2d4a193e56..c2a06f4d2c 100644
--- a/tests/js/spec/views/teamMembers.spec.jsx
+++ b/tests/js/spec/views/teamMembers.spec.jsx
@@ -5,10 +5,10 @@ import {Client} from 'app/api';
 import TeamMembers from 'app/views/settings/organizationTeams/teamMembers';
 
 describe('TeamMembers', function() {
-  let routerContext = TestStubs.routerContext();
-  let org = routerContext.context.organization;
-  let team = TestStubs.Team();
-  let members = TestStubs.Members();
+  const routerContext = TestStubs.routerContext();
+  const org = routerContext.context.organization;
+  const team = TestStubs.Team();
+  const members = TestStubs.Members();
 
   beforeEach(function() {
     Client.clearMockResponses();
@@ -25,7 +25,7 @@ describe('TeamMembers', function() {
   });
 
   it('renders', function() {
-    let wrapper = shallow(
+    const wrapper = shallow(
       <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
       routerContext
     );
@@ -33,15 +33,15 @@ describe('TeamMembers', function() {
   });
 
   it('can remove a team', function() {
-    let endpoint = `/organizations/${org.slug}/members/${members[0]
+    const endpoint = `/organizations/${org.slug}/members/${members[0]
       .id}/teams/${team.slug}/`;
-    let mock = Client.addMockResponse({
+    const mock = Client.addMockResponse({
       url: endpoint,
       method: 'DELETE',
       statusCode: 200,
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
       routerContext
     );
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index 0caa0163f9..82aeb2f7b6 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -15,15 +15,15 @@ describe('TeamSettings', function() {
   });
 
   it('can change name and slug', async function() {
-    let team = TestStubs.Team();
-    let putMock = MockApiClient.addMockResponse({
+    const team = TestStubs.Team();
+    const putMock = MockApiClient.addMockResponse({
       url: `/teams/org/${team.slug}/`,
       method: 'PUT',
     });
-    let mountOptions = TestStubs.routerContext();
-    let {router} = mountOptions.context;
+    const mountOptions = TestStubs.routerContext();
+    const {router} = mountOptions.context;
 
-    let wrapper = mount(
+    const wrapper = mount(
       <TeamSettings
         routes={[]}
         router={router}
@@ -69,9 +69,9 @@ describe('TeamSettings', function() {
   });
 
   it('needs team:admin in order to see an enabled Remove Team button', function() {
-    let team = TestStubs.Team();
+    const team = TestStubs.Team();
 
-    let wrapper = mount(
+    const wrapper = mount(
       <TeamSettings
         routes={[]}
         params={{orgId: 'org', teamId: team.slug}}
@@ -90,13 +90,13 @@ describe('TeamSettings', function() {
   });
 
   it('can remove team', async function() {
-    let team = TestStubs.Team();
-    let deleteMock = MockApiClient.addMockResponse({
+    const team = TestStubs.Team();
+    const deleteMock = MockApiClient.addMockResponse({
       url: `/teams/org/${team.slug}/`,
       method: 'DELETE',
     });
-    let routerPushMock = jest.fn();
-    let teamStoreTriggerMock = jest.fn();
+    const routerPushMock = jest.fn();
+    const teamStoreTriggerMock = jest.fn();
     sinon.stub(TeamStore, 'trigger', teamStoreTriggerMock);
     TeamStore.loadInitialData([
       {
@@ -104,7 +104,7 @@ describe('TeamSettings', function() {
       },
     ]);
 
-    let wrapper = mount(
+    const wrapper = mount(
       <TeamSettings
         router={{push: routerPushMock}}
         routes={[]}
diff --git a/tests/js/spec/views/twoFactorRequired.spec.jsx b/tests/js/spec/views/twoFactorRequired.spec.jsx
index bb74e9f4ce..281574a992 100644
--- a/tests/js/spec/views/twoFactorRequired.spec.jsx
+++ b/tests/js/spec/views/twoFactorRequired.spec.jsx
@@ -27,7 +27,7 @@ describe('TwoFactorRequired', function() {
       body: [],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
@@ -38,7 +38,7 @@ describe('TwoFactorRequired', function() {
   });
 
   it('does not render when 2FA is not required, not 2FA enrolled', function() {
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
@@ -53,7 +53,7 @@ describe('TwoFactorRequired', function() {
       body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
@@ -72,7 +72,7 @@ describe('TwoFactorRequired', function() {
       body: TestStubs.Organizations({require2FA: true}),
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
@@ -87,7 +87,7 @@ describe('TwoFactorRequired', function() {
       body: TestStubs.Organizations({require2FA: true}),
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
@@ -111,7 +111,7 @@ describe('TwoFactorRequired', function() {
       ],
     });
 
-    let wrapper = mount(
+    const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
diff --git a/yarn.lock b/yarn.lock
index 930328b87b..2967a16b6c 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -5288,14 +5288,14 @@ eslint-config-prettier@3.3.0:
   dependencies:
     get-stdin "^6.0.0"
 
-eslint-config-sentry-app@1.5.0:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/eslint-config-sentry-app/-/eslint-config-sentry-app-1.5.0.tgz#12062e629e6d73c0dfbfdf6c4de27b519623c00d"
-  integrity sha512-7xgDT2Ct6QeAxYo9Hn+0rqAmvyCjlZ5jcZr51qilLYh/mbG3B6t7T63rLTlPtuUhbJrtLCBZxqb19cG4/APDrQ==
+eslint-config-sentry-app@1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/eslint-config-sentry-app/-/eslint-config-sentry-app-1.6.0.tgz#e475b62b0b674eabc546df0371fcafa143317fc4"
+  integrity sha512-Gc7KejhQ/BREqAcrmwn7kMf35kfm8nw/cxDieNU3QrL/TMMVYlkmj8AQctDBJJ31/tOQjnzCAkpYH77rphwiEA==
   dependencies:
     eslint-config-prettier "3.3.0"
-    eslint-config-sentry "^1.5.0"
-    eslint-config-sentry-react "^1.5.0"
+    eslint-config-sentry "^1.6.0"
+    eslint-config-sentry-react "^1.6.0"
     eslint-import-resolver-webpack "0.10.1"
     eslint-plugin-getsentry "2.0.0"
     eslint-plugin-import "2.14.0"
@@ -5303,17 +5303,17 @@ eslint-config-sentry-app@1.5.0:
     eslint-plugin-prettier "2.7.0"
     eslint-plugin-react "7.4.0"
 
-eslint-config-sentry-react@^1.5.0:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/eslint-config-sentry-react/-/eslint-config-sentry-react-1.5.0.tgz#633a44e3ca9ea3c9f9b5b3238acb1d6c90c05c4b"
-  integrity sha512-a6z9bv80qZeJGl2154YYioBV5GCNeFf1scd6ZF91Ns7kS0FVIgZmveUp71ykZkJ6vgTCbqKZAEBs69TE1eO7BA==
+eslint-config-sentry-react@^1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/eslint-config-sentry-react/-/eslint-config-sentry-react-1.6.0.tgz#8c6fdac976cdbbf5e4c4a25a99543cfa80ea46ed"
+  integrity sha512-8WSOHxhZpbEohSNYQpPjvKZiT5uzzH7CbDBgZ5Gl6eCbZZY9X7kOYXfqyHLE7pzUZ7Pq4riHrG7urBXVhFFnRA==
   dependencies:
-    eslint-config-sentry "^1.5.0"
+    eslint-config-sentry "^1.6.0"
 
-eslint-config-sentry@^1.5.0:
-  version "1.5.0"
-  resolved "https://registry.yarnpkg.com/eslint-config-sentry/-/eslint-config-sentry-1.5.0.tgz#8e0fdce4f0689a9fa827607daa41603ad9148864"
-  integrity sha512-XcU9eElrn94WOO5pBnrRaX5Mx8ZrGZigOE8jBgGcntFKm47wq1XCToOAWaZGKkwJDSn85fjVl2NhqrmyNpwnuw==
+eslint-config-sentry@^1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/eslint-config-sentry/-/eslint-config-sentry-1.6.0.tgz#ef2efd9ee0067d246e04d8f48e0f59758623efd0"
+  integrity sha512-w3uQKWdjvIgKCQPqVCjClqxGsePdC2yBlU9+hBgd6aVJIJ/kHOkpDwWej5AYUW6fL87SUcFdaprLSv3hD4V/Eg==
 
 eslint-import-resolver-node@^0.3.1:
   version "0.3.2"
