commit c149e3e95634a1292ebe8a32a5ecc2f944bb297a
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Wed Oct 16 16:29:36 2019 -0700

    fix(app-platform): Fix minor issues with install/uninstall stats in Sentry App Dashboard (#15103)
    
    * Calculate total install/uninstall stats over all time; Replace StackedBarChart with BarChart component
    
    * Remove unused code, Add date range to installations graph title
    
    * add date filter back to query
    
    * fix lint

diff --git a/src/sentry/api/endpoints/sentry_app_stats.py b/src/sentry/api/endpoints/sentry_app_stats.py
index 1db9375243..5a29d6775d 100644
--- a/src/sentry/api/endpoints/sentry_app_stats.py
+++ b/src/sentry/api/endpoints/sentry_app_stats.py
@@ -25,30 +25,29 @@ class SentryAppStatsEndpoint(SentryAppBaseEndpoint, StatsMixin):
         installations = SentryAppInstallation.with_deleted.filter(
             sentry_app=sentry_app, date_added__range=(query_args["start"], query_args["end"])
         ).values_list("date_added", "date_deleted", "organization_id")
+        install_count = SentryAppInstallation.with_deleted.filter(sentry_app=sentry_app).count()
+        uninstall_count = SentryAppInstallation.with_deleted.filter(
+            sentry_app=sentry_app, date_deleted__isnull=False
+        ).count()
 
         rollup, series = tsdb.get_optimal_rollup_series(query_args["start"], query_args["end"])
 
-        install_counter = 0
-        uninstall_counter = 0
-
         install_stats = dict.fromkeys(series, 0)
         uninstall_stats = dict.fromkeys(series, 0)
 
         for date_added, date_deleted, organization_id in installations:
-            install_counter += 1
             install_norm_epoch = tsdb.normalize_to_epoch(date_added, rollup)
-
             if install_norm_epoch in install_stats:
                 install_stats[install_norm_epoch] += 1
+
             if date_deleted is not None:
-                uninstall_counter += 1
                 uninstall_norm_epoch = tsdb.normalize_to_epoch(date_deleted, rollup)
                 if uninstall_norm_epoch in uninstall_stats:
                     uninstall_stats[uninstall_norm_epoch] += 1
 
         result = {
-            "total_installs": install_counter,
-            "total_uninstalls": uninstall_counter,
+            "total_installs": install_count,
+            "total_uninstalls": uninstall_count,
             "install_stats": sorted(install_stats.items(), key=lambda x: x[0]),
             "uninstall_stats": sorted(uninstall_stats.items(), key=lambda x: x[0]),
         }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
index d9e829b809..2d7bb3f8fa 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
@@ -3,15 +3,14 @@ import styled from 'react-emotion';
 
 import AsyncView from 'app/views/asyncView';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import StackedBarChart from 'app/components/stackedBarChart';
+import BarChart from 'app/components/charts/barChart';
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import DateTime from 'app/components/dateTime';
 import LoadingError from 'app/components/loadingError';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 
 import space from 'app/styles/space';
-import {intcomma} from 'app/utils';
-import {t, tn} from 'app/locale';
+import {t} from 'app/locale';
 import {SentryApp} from 'app/types';
 
 type Props = AsyncView['props'];
@@ -72,46 +71,44 @@ export default class SentryApplicationDashboard extends AsyncView<Props, State>
     );
   }
 
-  renderTooltip(point, _pointIdx, chart) {
-    const timeLabel = chart.getTimeLabel(point);
-    const [installed, uninstalled] = point.y;
-
-    return (
-      <div style={{width: '150px'}}>
-        <div className="time-label">{timeLabel}</div>
-        <div className="value-label">
-          {intcomma(installed)} {tn('install', 'installs', installed)}
-          {uninstalled > 0 && (
-            <React.Fragment>
-              <br />
-              {intcomma(uninstalled)} {tn('uninstall', 'uninstalls', uninstalled)}
-            </React.Fragment>
-          )}
-        </div>
-      </div>
-    );
-  }
-
   renderInstallCharts() {
     const {install_stats, uninstall_stats} = this.state.stats;
-    const points = install_stats.map((point, idx) => ({
-      x: point[0],
-      y: [point[1], uninstall_stats[idx][1]],
-    }));
+
+    const installSeries = {
+      data: install_stats.map(point => ({
+        name: point[0] * 1000,
+        value: point[1],
+      })),
+      seriesName: t('installed'),
+    };
+    const uninstallSeries = {
+      data: uninstall_stats.map(point => ({
+        name: point[0] * 1000,
+        value: point[1],
+      })),
+      seriesName: t('uninstalled'),
+    };
 
     return (
       <Panel>
-        <PanelHeader>{t('Installations/Uninstallations over Time')}</PanelHeader>
-
-        <StackedBarChart
-          points={points}
-          height={150}
-          className="standard-barchart b-a-0 m-b-0"
-          barClasses={['accepted', 'rate-limited']}
-          minHeights={[2, 0, 0]}
-          gap={0.25}
-          tooltip={this.renderTooltip}
-        />
+        <PanelHeader>{t('Installations/Uninstallations over Last 90 Days')}</PanelHeader>
+        <ChartWrapper>
+          <BarChart
+            series={[installSeries, uninstallSeries]}
+            height={150}
+            stacked
+            isGroupedByDate
+            legend={{
+              show: true,
+              orient: 'horizontal',
+              data: ['installed', 'uninstalled'],
+              itemWidth: 15,
+            }}
+            yAxis={{type: 'value', minInterval: 1, max: 'dataMax'}}
+            xAxis={{type: 'time'}}
+            grid={{left: space(4), right: space(4)}}
+          />
+        </ChartWrapper>
       </Panel>
     );
   }
@@ -204,3 +201,7 @@ const TableLayout = styled('div')`
 const OverflowBox = styled('div')`
   word-break: break-word;
 `;
+
+const ChartWrapper = styled('div')`
+  padding-top: ${space(3)};
+`;
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
index a7ef33b787..178d4d340c 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
@@ -71,13 +71,19 @@ describe('Sentry Application Dashboard', function() {
     });
 
     it('shows the installation stats in a graph', () => {
-      const chart = wrapper.find('StackedBarChart');
-      const bars = chart.find('[data-test-id="chart-column"]');
+      const chart = wrapper.find('BarChart');
+      const chartSeries = chart.props().series;
+
       expect(chart.exists()).toBeTruthy();
-      // There are only 2 bars because there is only 1 timepoint in the mock response
-      expect(bars).toHaveLength(2);
-      expect(bars.find('.accepted')).toHaveLength(1);
-      expect(bars.find('.rate-limited')).toHaveLength(1);
+      expect(chartSeries).toHaveLength(2);
+      expect(chartSeries).toContainEqual({
+        data: [{name: 1569783600 * 1000, value: NUM_INSTALLS}],
+        seriesName: 'installed',
+      });
+      expect(chartSeries).toContainEqual({
+        data: [{name: 1569783600 * 1000, value: NUM_UNINSTALLS}],
+        seriesName: 'uninstalled',
+      });
     });
 
     it('shows the error log', () => {
