commit a1a82e09e1932d012bd4576761dc7cdef37f53d1
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Dec 4 14:49:41 2015 -0800

    Spit out required keys from backend on install wizard

diff --git a/src/sentry/api/endpoints/system_options.py b/src/sentry/api/endpoints/system_options.py
index b72bee3997..748b5cc47a 100644
--- a/src/sentry/api/endpoints/system_options.py
+++ b/src/sentry/api/endpoints/system_options.py
@@ -10,12 +10,17 @@ from sentry.api.permissions import SuperuserPermission
 class SystemOptionsEndpoint(Endpoint):
     permission_classes = (SuperuserPermission,)
 
-    option_names = set(['system.url-prefix', 'system.admin-email'])
-
     def get(self, request):
         results = {
-            k: options.get(k)
-            for k in self.option_names
+            k.name: {
+                'value': options.get(k.name),
+                'field': {
+                    'default': k.default,
+                    'required': True,
+                    # TODO(mattrobenolt): help, placeholder, title, type
+                },
+            }
+            for k in options.filter(flag=options.FLAG_REQUIRED)
         }
 
         return Response(results)
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index eaaad0d439..28a3d29edb 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -9,7 +9,10 @@ from __future__ import absolute_import, print_function
 
 from .store import OptionsStore
 from .manager import OptionsManager
-from .manager import DEFAULT_FLAGS, FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY  # NOQA
+from .manager import (  # NOQA
+    DEFAULT_FLAGS, FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY,
+    FLAG_REQUIRED,
+)
 
 __all__ = (
     'get', 'set', 'delete', 'register',
@@ -25,5 +28,7 @@ get = default_manager.get
 set = default_manager.set
 delete = default_manager.delete
 register = default_manager.register
+all = default_manager.all
+filter = default_manager.filter
 
 from .defaults import *  # NOQA
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 64ed1b2f4f..8b43794603 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -8,16 +8,16 @@ sentry.options.defaults
 from __future__ import absolute_import, print_function
 
 
-from sentry.options import register, FLAG_NOSTORE
+from sentry.options import register, FLAG_NOSTORE, FLAG_REQUIRED
 
 
 register('cache.backend', flags=FLAG_NOSTORE)
 register('cache.options', default={}, flags=FLAG_NOSTORE)
-register('system.admin-email')
+register('system.admin-email', flags=FLAG_REQUIRED)
 register('system.databases', default={}, flags=FLAG_NOSTORE)
 register('system.debug', default=False, flags=FLAG_NOSTORE)
 register('system.secret-key', flags=FLAG_NOSTORE)
 register('redis.options', default={}, flags=FLAG_NOSTORE)
 
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
-register('system.url-prefix', ttl=60, grace=3600)
+register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index bcc7ddef07..a49356f537 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -8,6 +8,7 @@ sentry.options.manager
 from __future__ import absolute_import, print_function
 
 import logging
+from itertools import ifilter
 from types import NoneType
 from django.conf import settings
 
@@ -28,6 +29,8 @@ FLAG_NOSTORE = 1 << 2
 # Values that should only exist in datastore, and shouldn't exist in
 # config files.
 FLAG_STOREONLY = 1 << 3
+# Values that must be defined for setup to be considered complete
+FLAG_REQUIRED = 1 << 4
 
 # How long will a cache key exist in local memory before being evicted
 DEFAULT_KEY_TTL = 10
@@ -173,3 +176,19 @@ class OptionsManager(object):
         assert not (opt.flags & FLAG_STOREONLY), '%r is not allowed to be loaded from config' % key
         if not isinstance(value, opt.type):
             raise TypeError('%r: got %r, expected %r' % (key, _type(value), opt.type))
+
+    def all(self):
+        """
+        Return an interator for all keys in the registry.
+        """
+        return self.registry.itervalues()
+
+    def filter(self, flag=None):
+        """
+        Return an iterator that's filtered by which flags are set on a key.
+        """
+        if flag is None:
+            return self.all()
+        if flag is DEFAULT_FLAGS:
+            return ifilter(lambda k: k.flags is DEFAULT_FLAGS, self.all())
+        return ifilter(lambda k: k.flags & flag, self.all())
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index e66c4d2939..6670893f87 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import DocumentTitle from 'react-document-title';
+import _ from 'underscore';
 
 import {t} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
@@ -18,8 +19,8 @@ const InstallWizardSettings = React.createClass({
 
   render() {
     let options = this.props.options;
-    let requiredOptions = ['system.url-prefix', 'system.admin-email'];
-    let missingOptions = new Set(requiredOptions.filter(option => !options[option]));
+    let requiredOptions = Object.keys(_.pick(options, option => option.field.required));
+    let missingOptions = new Set(requiredOptions.filter(option => !options[option].value));
     let formValid = !missingOptions.length;
 
     return (
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 1a0a99a54b..00a47fc9cc 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -8,8 +8,8 @@ from mock import patch
 from sentry.models import Option
 from sentry.options.store import OptionsStore
 from sentry.options.manager import (
-    OptionsManager, UnknownOption,
-    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY)
+    OptionsManager, UnknownOption, DEFAULT_FLAGS,
+    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY, FLAG_REQUIRED)
 from sentry.testutils import TestCase
 
 
@@ -205,3 +205,28 @@ class OptionsManagerTest(TestCase):
     def test_unregister(self):
         with self.assertRaises(UnknownOption):
             self.manager.unregister('does-not-exist')
+
+    def test_all(self):
+        self.manager.register('bar')
+
+        keys = list(self.manager.all())
+        assert {k.name for k in keys} == {'foo', 'bar'}
+
+    def test_filter(self):
+        self.manager.register('nostore', flags=FLAG_NOSTORE)
+        self.manager.register('required', flags=FLAG_REQUIRED)
+        self.manager.register('nostorerequired', flags=FLAG_NOSTORE | FLAG_REQUIRED)
+
+        assert list(self.manager.filter()) == list(self.manager.all())
+
+        keys = list(self.manager.filter())
+        assert {k.name for k in keys} == {'foo', 'nostore', 'required', 'nostorerequired'}
+
+        keys = list(self.manager.filter(flag=DEFAULT_FLAGS))
+        assert {k.name for k in keys} == {'foo'}
+
+        keys = list(self.manager.filter(flag=FLAG_NOSTORE))
+        assert {k.name for k in keys} == {'nostore', 'nostorerequired'}
+
+        keys = list(self.manager.filter(flag=FLAG_REQUIRED))
+        assert {k.name for k in keys} == {'required', 'nostorerequired'}
