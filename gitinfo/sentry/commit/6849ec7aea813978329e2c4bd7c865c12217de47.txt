commit 6849ec7aea813978329e2c4bd7c865c12217de47
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Tue Jan 31 15:38:17 2017 -0800

    Prevent author from returning null and increase test comprehension (#4852)

diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index acfb19ea6a..c1d51b784d 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -51,8 +51,11 @@ def get_users_for_commits(item_list):
     users_by_email = {}
     for email in user_emails:
         if email.email not in users_by_email:
-            user = users_by_id.get(email.user_id)
-            users_by_email[email.email] = user
+            user = users_by_id.get(email.user_id, None)
+            # user can be None if there's a user associated
+            # with user_email in separate organization
+            if user:
+                users_by_email[email.email] = user
 
     author_objs = {}
     for author in authors:
diff --git a/tests/sentry/api/serializers/test_commit.py b/tests/sentry/api/serializers/test_commit.py
index 6d114c2dd4..39da44c968 100644
--- a/tests/sentry/api/serializers/test_commit.py
+++ b/tests/sentry/api/serializers/test_commit.py
@@ -47,3 +47,33 @@ class CommitSerializerTest(TestCase):
         assert result['message'] == 'waddap'
         assert result['repository']['name'] == 'test/test'
         assert result['author'] == {'name': 'stebe', 'email': 'stebe@sentry.io'}
+
+    def test_no_author(self):
+        user = self.create_user()
+        project = self.create_project()
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version=uuid4().hex,
+        )
+        release.add_project(project)
+        repository = Repository.objects.create(
+            organization_id=project.organization_id,
+            name='test/test',
+        )
+        commit = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=repository.id,
+            key='abc',
+            message='waddap',
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+
+        result = serialize(commit, user)
+
+        assert result['author'] == {}
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index 0bb63db37e..f9391ee61c 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -148,8 +148,13 @@ class ReleaseSerializerTest(TestCase):
         assert result_author['username'] == user.username
 
     def test_get_single_user_from_email(self):
+        """
+        Tests that the first useremail will be used to
+        associate a user with a commit author email
+        """
         user = User.objects.create(email='stebe@sentry.io')
         otheruser = User.objects.create(email='adifferentstebe@sentry.io')
+        UserEmail.objects.create(email='stebe@sentry.io', user=otheruser)
         project = self.create_project()
         self.create_member(user=user, organization=project.organization)
         self.create_member(user=otheruser, organization=project.organization)
@@ -185,3 +190,76 @@ class ReleaseSerializerTest(TestCase):
         assert int(result_author['id']) == user.id
         assert result_author['email'] == user.email
         assert result_author['username'] == user.username
+
+    def test_select_user_from_appropriate_org(self):
+        """
+        Tests that a user not belonging to the organization
+        is not returned as the author
+        """
+        user = User.objects.create(email='stebe@sentry.io')
+        email = UserEmail.objects.get(user=user, email='stebe@sentry.io')
+        otheruser = User.objects.create(email='adifferentstebe@sentry.io')
+        otheremail = UserEmail.objects.create(email='stebe@sentry.io', user=otheruser)
+        project = self.create_project()
+        self.create_member(user=otheruser, organization=project.organization)
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version=uuid4().hex,
+            new_groups=1,
+        )
+        release.add_project(project)
+        commit_author = CommitAuthor.objects.create(
+            name='stebe',
+            email='stebe@sentry.io',
+            organization_id=project.organization_id,
+        )
+        commit = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=1,
+            key='abc',
+            author=commit_author,
+            message='waddap',
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+
+        assert email.id < otheremail.id
+        result = serialize(release, user)
+        assert len(result['authors']) == 1
+        result_author = result['authors'][0]
+        assert int(result_author['id']) == otheruser.id
+        assert result_author['email'] == otheruser.email
+        assert result_author['username'] == otheruser.username
+
+    def test_no_commit_author(self):
+        user = User.objects.create(email='stebe@sentry.io')
+        otheruser = User.objects.create(email='adifferentstebe@sentry.io')
+        project = self.create_project()
+        self.create_member(user=otheruser, organization=project.organization)
+        release = Release.objects.create(
+            organization_id=project.organization_id,
+            version=uuid4().hex,
+            new_groups=1,
+        )
+        release.add_project(project)
+        commit = Commit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=1,
+            key='abc',
+            message='waddap',
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=release,
+            commit=commit,
+            order=1,
+        )
+
+        result = serialize(release, user)
+        assert result['authors'] == []
