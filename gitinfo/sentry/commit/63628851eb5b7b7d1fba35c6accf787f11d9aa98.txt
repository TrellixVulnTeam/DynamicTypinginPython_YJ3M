commit 63628851eb5b7b7d1fba35c6accf787f11d9aa98
Author: Lovepreet Sangha <lovepreetssangha@gmail.com>
Date:   Fri May 25 16:35:38 2018 -0700

    feat: Opera Mini Filter (#8533)
    
    * feat: Opera Mini Filter
    
    Users can now filter Opera Mini 8 and below legacy browsers
    
    * cleaned up src/sentry/data/samples/javascript.json by removing Opera where it wasn't needed

diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index 498d08fdb0..fdcc0a882b 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -19,13 +19,21 @@ MIN_VERSIONS = {
     'Edge': 0,
     'Opera': 15,
     'Android': 4,
+    'Opera Mini': 8
 }
 
 
 class LegacyBrowserFilterSerializer(serializers.Serializer):
     active = serializers.BooleanField()
     subfilters = MultipleChoiceField(
-        choices=['ie_pre_9', 'ie9', 'ie10', 'opera_pre_15', 'android_pre_4', 'safari_pre_6']
+        choices=[
+            'ie_pre_9',
+            'ie9',
+            'ie10',
+            'opera_pre_15',
+            'android_pre_4',
+            'safari_pre_6',
+            'opera_mini_pre_8']
     )
 
 
@@ -140,6 +148,20 @@ class LegacyBrowsersFilter(Filter):
 
         return False
 
+    def filter_opera_mini_pre_8(self, browser):
+        if not browser['family'] == "Opera Mini":
+            return False
+
+        try:
+            major_browser_version = int(browser['major'])
+        except (TypeError, ValueError):
+            return False
+
+        if major_browser_version < 8:
+            return True
+
+        return False
+
     def _filter_ie(self, browser, compare_version):
         if not browser['family'] == "IE":
             return False
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
index b608f10e6c..134667e59f 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -31,15 +31,20 @@ const LEGACY_BROWSER_SUBFILTERS = {
     helpText: 'Version 10',
     title: 'Internet Explorer',
   },
+  safari_pre_6: {
+    icon: 'safari',
+    helpText: 'Version 5 and lower',
+    title: 'Safari',
+  },
   opera_pre_15: {
     icon: 'opera',
     helpText: 'Version 14 and lower',
     title: 'Opera',
   },
-  safari_pre_6: {
-    icon: 'safari',
-    helpText: 'Version 5 and lower',
-    title: 'Safari',
+  opera_mini_pre_8: {
+    icon: 'opera',
+    helpText: 'Version 8 and lower',
+    title: 'Opera Mini',
   },
   android_pre_4: {
     icon: 'android',
@@ -291,7 +296,7 @@ const FilterGridItem = styled.div`
 // We want this wrapper to maining 30% width
 const FilterGridItemWrapper = styled.div`
   padding: 12px;
-  flex: 1;
+  width: 50%;
 `;
 
 const FilterGridIcon = styled.div`
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
index 8e09a39fb2..ab499629e5 100644
--- a/tests/js/spec/views/projectFilters.spec.jsx
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -124,7 +124,7 @@ describe('ProjectFilters', function() {
     let mock = createFilterMock(filter);
 
     // default stubs ie_pre_9 and ie9 selected (first 2 switches)
-    const Switch = wrapper.find('LegacyBrowserFilterRow Switch').at(3);
+    const Switch = wrapper.find('LegacyBrowserFilterRow Switch').at(4);
 
     // Toggle filter on
     Switch.simulate('click');
@@ -139,7 +139,7 @@ describe('ProjectFilters', function() {
     // Toggle filter off
     wrapper
       .find('LegacyBrowserFilterRow Switch')
-      .at(4)
+      .at(3)
       .simulate('click');
     expect(Array.from(mock.mock.calls[1][1].data.subfilters)).toEqual([
       'ie_pre_9',
@@ -179,8 +179,9 @@ describe('ProjectFilters', function() {
       'ie_pre_9',
       'ie9',
       'ie10',
-      'opera_pre_15',
       'safari_pre_6',
+      'opera_pre_15',
+      'opera_mini_pre_8',
       'android_pre_4',
     ]);
 
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 6fabd54263..71dd8ae22b 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -39,6 +39,10 @@ USER_AGENTS = {
     'Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-HK) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5',
     'safari_7':
     'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A',
+    'opera_mini_8':
+    'Opera/9.80 (J2ME/MIDP; Opera Mini/8.0.35158/36.2534; U; en) Presto/2.12.423 Version/12.16',
+    'opera_mini_7':
+    'Opera/9.80 (J2ME/MIDP; Opera Mini/7.0.32796/59.323; U; fr) Presto/2.12.423 Version/12.16',
 }
 
 
@@ -105,6 +109,24 @@ class SetLegacyBrowserFilterTest(APITestCase):
         options = ProjectOption.objects.get_value(project=project, key='filters:legacy-browsers')
         assert options == {'opera_pre_15'}
 
+    def test_set_opera_mini(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = reverse(
+            'sentry-api-0-project-filters',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+                'filter_id': "legacy-browsers"
+            }
+        )
+        response = self.client.put(url, data={'subfilters': ["opera_mini_pre_8"]})
+        assert response.status_code == 201, response.content
+
+        options = ProjectOption.objects.get_value(project=project, key='filters:legacy-browsers')
+        assert options == {'opera_mini_pre_8'}
+
     def test_set_ie9(self):
         self.login_as(user=self.user)
         project = self.create_project()
@@ -259,6 +281,15 @@ class LegacyBrowsersFilterTest(TestCase):
         data = self.get_mock_data(USER_AGENTS['opera_12'])
         assert self.apply_filter(data) is True
 
+    def test_filters_opera_mini_7_by_default(self):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key='filters:legacy-browsers',
+            value='1',
+        )
+        data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
+        assert self.apply_filter(data) is True
+
     def test_does_not_filter_chrome_by_default(self):
         ProjectOption.objects.set_value(
             project=self.project,
@@ -298,6 +329,27 @@ class LegacyBrowsersFilterTest(TestCase):
         browser = ua['user_agent']
         assert self.filter_cls(self.project).filter_opera_pre_15(browser) is False
 
+    def test_filter_opera_mini(self):
+        ProjectOption.objects.set_value(
+            project=self.project, key='filters:legacy-browsers', value={'opera_mini_pre_8'}
+        )
+        data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
+        assert self.apply_filter(data) is True
+
+    def test_filter_opera_mini_method(self):
+        data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_opera_mini_pre_8(browser) is True
+
+    def test_dont_filter_opera_mini_8(self):
+        data = self.get_mock_data(USER_AGENTS['opera_mini_8'])
+        ua_data = self.filter_cls(self.project).get_user_agent(data)
+        ua = Parse(ua_data)
+        browser = ua['user_agent']
+        assert self.filter_cls(self.project).filter_opera_mini_pre_8(browser) is False
+
     def test_filters_ie8(self):
         ProjectOption.objects.set_value(
             project=self.project, key='filters:legacy-browsers', value={'ie_pre_9'}
