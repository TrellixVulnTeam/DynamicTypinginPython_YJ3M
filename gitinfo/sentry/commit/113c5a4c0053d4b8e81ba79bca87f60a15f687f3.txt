commit 113c5a4c0053d4b8e81ba79bca87f60a15f687f3
Author: Jan Michael Auer <account@jauer.org>
Date:   Tue May 29 09:51:42 2018 -0700

    feat: Support the new exception mechanism (#8487)
    
    * feat: Support the new exception mechanism
    
    * test(mechanism): Add plugin tests for exception mechanisms
    
    * feat(native): Emit a "minidump" exception mechanism
    
    * test(native): Fix mechanism fixtures
    
    * feat(mechanism): Add mechanism mappings for well-known platforms
    
    * fix(mechanism): Fix mechanism schema and upgrade
    
    * fix(mechanism): Correctly normalize mechanisms and debug_meta
    
    * feat(mechanism): Adding tags for "mechanism" and "handled"
    
    * fix(mechanism): Create the mechanism handled tag correctly
    
    * fix(mechanism): Fix iter_tags without mechanism
    
    * fix(native): Bump expected query count due to added tags
    
    * feat(minidump): Hard code mechanism handled to false
    
    * test: Update snapshots after jest update
    
    * test(mechanism): Add tests for mechanism normalization

diff --git a/src/sentry/data/samples/cocoa.json b/src/sentry/data/samples/cocoa.json
index f319b8f2e3..a2c2a55d4a 100644
--- a/src/sentry/data/samples/cocoa.json
+++ b/src/sentry/data/samples/cocoa.json
@@ -5,17 +5,20 @@
       {
         "value": "Attempted to dereference null pointer.\nOriginated at or in a subcall of ViewController.causeCrash(Any) -> ()",
         "mechanism": {
-          "posix_signal": {
-            "code": 0,
-            "name": "SIGBUS",
-            "signal": 10,
-            "code_name": "BUS_NOOP"
-          },
-          "mach_exception": {
-            "code": 0,
-            "subcode": 8,
-            "exception_name": "EXC_BAD_ACCESS",
-            "exception": 1
+          "type": "mach",
+          "meta": {
+            "signal": {
+              "code": 0,
+              "name": "SIGBUS",
+              "number": 10,
+              "code_name": "BUS_NOOP"
+            },
+            "mach_exception": {
+              "code": 0,
+              "subcode": 8,
+              "exception": 1,
+              "name": "EXC_BAD_ACCESS"
+            }
           }
         },
         "thread_id": 0,
diff --git a/src/sentry/data/samples/react-native.json b/src/sentry/data/samples/react-native.json
index 3d04ed644f..c50a4f8934 100644
--- a/src/sentry/data/samples/react-native.json
+++ b/src/sentry/data/samples/react-native.json
@@ -4201,17 +4201,21 @@
         "frames_omitted": null
       },
       "mechanism": {
-        "type": "generic",
-        "posix_signal": {
-          "signal": 5,
-          "code": 0
+        "type": "mach",
+        "meta": {
+          "signal": {
+            "number": 5,
+            "code": 0
+          },
+          "mach_exception": {
+            "subcode": 8,
+            "code": 6425112,
+            "exception": 6,
+            "name": "EXC_BREAKPOINT"
+          }
         },
-        "relevant_address": "0x100620a18",
-        "mach_exception": {
-          "subcode": 8,
-          "code": 6425112,
-          "exception": 6,
-          "exception_name": "EXC_BREAKPOINT"
+        "data": {
+          "relevant_address": "0x100620a18"
         }
       },
       "type": "EXC_BREAKPOINT",
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 1be3b1ede0..8358b8c6e9 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -26,7 +26,9 @@ from sentry.constants import (
     DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, VALID_PLATFORMS
 )
 from sentry.interfaces.base import get_interface, InterfaceValidationError
+from sentry.interfaces.exception import normalize_mechanism_meta
 from sentry.interfaces.schemas import validate_and_default_interface
+from sentry.lang.native.utils import get_sdk_from_event
 from sentry.models import (
     Activity, Environment, Event, EventError, EventMapping, EventUser, Group,
     GroupEnvironment, GroupHash, GroupRelease, GroupResolution, GroupStatus,
@@ -477,6 +479,17 @@ class EventManager(object):
             exception['values'][0]['stacktrace'] = stacktrace
             del data['sentry.interfaces.Stacktrace']
 
+        # Exception mechanism needs SDK information to resolve proper names in
+        # exception meta (such as signal names). "SDK Information" really means
+        # the operating system version the event was generated on. Some
+        # normalization still works without sdk_info, such as mach_exception
+        # names (they can only occur on macOS).
+        if exception:
+            sdk_info = get_sdk_from_event(data)
+            for ex in exception['values']:
+                if 'mechanism' in ex:
+                    normalize_mechanism_meta(ex['mechanism'], sdk_info)
+
         # If there is no User ip_addres, update it either from the Http interface
         # or the client_ip of the request.
         auth = request_env.get('auth')
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index 77f611342f..c6d07c5d58 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -98,14 +98,13 @@ class DebugMeta(Interface):
 
     @classmethod
     def to_python(cls, data):
-        if 'images' not in data:
-            raise InterfaceValidationError('Missing key "images"')
+        images = data.get('images', [])
         is_debug_build = data.get('is_debug_build')
         if is_debug_build is not None and not isinstance(is_debug_build, bool):
             raise InterfaceValidationError('Invalid value for "is_debug_build"')
 
         return cls(
-            images=[cls.normalize_image(x) for x in data['images']],
+            images=[cls.normalize_image(x) for x in images],
             sdk_info=cls.normalize_sdk_info(data.get('sdk_info')),
             is_debug_build=is_debug_build,
         )
@@ -119,7 +118,7 @@ class DebugMeta(Interface):
         if func is None:
             raise InterfaceValidationError('Unknown image type %r' % image)
         rv = func(image)
-        assert 'uuid' in rv or 'id' in rv, 'debug image normalizer did not produce a UUID'
+        assert 'uuid' in rv or 'id' in rv, 'debug image normalizer did not produce an identifier'
         rv['type'] = ty
         return rv
 
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 90dacd8625..df690ed1d7 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -8,7 +8,7 @@ sentry.interfaces.exception
 
 from __future__ import absolute_import
 
-__all__ = ('Exception', )
+__all__ = ('Exception', 'Mechanism', 'normalize_mechanism_meta', 'upgrade_legacy_mechanism')
 
 import re
 import six
@@ -23,6 +23,787 @@ from sentry.utils.safe import trim
 
 _type_value_re = re.compile('^(\w+):(.*)$')
 
+WELL_KNOWN_ERRNO = {
+    'linux': {
+        1: 'EPERM',  # Operation not permitted
+        2: 'ENOENT',  # No such file or directory
+        3: 'ESRCH',  # No such process
+        4: 'EINTR',  # Interrupted system call
+        5: 'EIO',  # I/O error
+        6: 'ENXIO',  # No such device or address
+        7: 'E2BIG',  # Argument list too long
+        8: 'ENOEXEC',  # Exec format error
+        9: 'EBADF',  # Bad file number
+        10: 'ECHILD',  # No child processes
+        11: 'EAGAIN',  # Try again
+        12: 'ENOMEM',  # Out of memory
+        13: 'EACCES',  # Permission denied
+        14: 'EFAULT',  # Bad address
+        15: 'ENOTBLK',  # Block device required
+        16: 'EBUSY',  # Device or resource busy
+        17: 'EEXIST',  # File exists
+        18: 'EXDEV',  # Cross-device link
+        19: 'ENODEV',  # No such device
+        20: 'ENOTDIR',  # Not a directory
+        21: 'EISDIR',  # Is a directory
+        22: 'EINVAL',  # Invalid argument
+        23: 'ENFILE',  # File table overflow
+        24: 'EMFILE',  # Too many open files
+        25: 'ENOTTY',  # Not a typewriter
+        26: 'ETXTBSY',  # Text file busy
+        27: 'EFBIG',  # File too large
+        28: 'ENOSPC',  # No space left on device
+        29: 'ESPIPE',  # Illegal seek
+        30: 'EROFS',  # Read-only file system
+        31: 'EMLINK',  # Too many links
+        32: 'EPIPE',  # Broken pipe
+        33: 'EDOM',  # Math argument out of domain of func
+        34: 'ERANGE',  # Math result not representable
+
+        35: 'EDEADLK',  # Resource deadlock would occur
+        36: 'ENAMETOOLONG',  # File name too long
+        37: 'ENOLCK',  # No record locks available
+
+        38: 'ENOSYS',  # Invalid system call number
+
+        39: 'ENOTEMPTY',  # Directory not empty
+        40: 'ELOOP',  # Too many symbolic links encountered
+        42: 'ENOMSG',  # No message of desired type
+        43: 'EIDRM',  # Identifier removed
+        44: 'ECHRNG',  # Channel number out of range
+        45: 'EL2NSYNC',  # Level 2 not synchronized
+        46: 'EL3HLT',  # Level 3 halted
+        47: 'EL3RST',  # Level 3 reset
+        48: 'ELNRNG',  # Link number out of range
+        49: 'EUNATCH',  # Protocol driver not attached
+        50: 'ENOCSI',  # No CSI structure available
+        51: 'EL2HLT',  # Level 2 halted
+        52: 'EBADE',  # Invalid exchange
+        53: 'EBADR',  # Invalid request descriptor
+        54: 'EXFULL',  # Exchange full
+        55: 'ENOANO',  # No anode
+        56: 'EBADRQC',  # Invalid request code
+        57: 'EBADSLT',  # Invalid slot
+
+        59: 'EBFONT',  # Bad font file format
+        60: 'ENOSTR',  # Device not a stream
+        61: 'ENODATA',  # No data available
+        62: 'ETIME',  # Timer expired
+        63: 'ENOSR',  # Out of streams resources
+        64: 'ENONET',  # Machine is not on the network
+        65: 'ENOPKG',  # Package not installed
+        66: 'EREMOTE',  # Object is remote
+        67: 'ENOLINK',  # Link has been severed
+        68: 'EADV',  # Advertise error
+        69: 'ESRMNT',  # Srmount error
+        70: 'ECOMM',  # Communication error on send
+        71: 'EPROTO',  # Protocol error
+        72: 'EMULTIHOP',  # Multihop attempted
+        73: 'EDOTDOT',  # RFS specific error
+        74: 'EBADMSG',  # Not a data message
+        75: 'EOVERFLOW',  # Value too large for defined data type
+        76: 'ENOTUNIQ',  # Name not unique on network
+        77: 'EBADFD',  # File descriptor in bad state
+        78: 'EREMCHG',  # Remote address changed
+        79: 'ELIBACC',  # Can not access a needed shared library
+        80: 'ELIBBAD',  # Accessing a corrupted shared library
+        81: 'ELIBSCN',  # .lib section in a.out corrupted
+        82: 'ELIBMAX',  # Attempting to link in too many shared libraries
+        83: 'ELIBEXEC',  # Cannot exec a shared library directly
+        84: 'EILSEQ',  # Illegal byte sequence
+        85: 'ERESTART',  # Interrupted system call should be restarted
+        86: 'ESTRPIPE',  # Streams pipe error
+        87: 'EUSERS',  # Too many users
+        88: 'ENOTSOCK',  # Socket operation on non-socket
+        89: 'EDESTADDRREQ',  # Destination address required
+        90: 'EMSGSIZE',  # Message too long
+        91: 'EPROTOTYPE',  # Protocol wrong type for socket
+        92: 'ENOPROTOOPT',  # Protocol not available
+        93: 'EPROTONOSUPPORT',  # Protocol not supported
+        94: 'ESOCKTNOSUPPORT',  # Socket type not supported
+        95: 'EOPNOTSUPP',  # Operation not supported on transport endpoint
+        96: 'EPFNOSUPPORT',  # Protocol family not supported
+        97: 'EAFNOSUPPORT',  # Address family not supported by protocol
+        98: 'EADDRINUSE',  # Address already in use
+        99: 'EADDRNOTAVAIL',  # Cannot assign requested address
+        100: 'ENETDOWN',  # Network is down
+        101: 'ENETUNREACH',  # Network is unreachable
+        102: 'ENETRESET',  # Network dropped connection because of reset
+        103: 'ECONNABORTED',  # Software caused connection abort
+        104: 'ECONNRESET',  # Connection reset by peer
+        105: 'ENOBUFS',  # No buffer space available
+        106: 'EISCONN',  # Transport endpoint is already connected
+        107: 'ENOTCONN',  # Transport endpoint is not connected
+        108: 'ESHUTDOWN',  # Cannot send after transport endpoint shutdown
+        109: 'ETOOMANYREFS',  # Too many references: cannot splice
+        110: 'ETIMEDOUT',  # Connection timed out
+        111: 'ECONNREFUSED',  # Connection refused
+        112: 'EHOSTDOWN',  # Host is down
+        113: 'EHOSTUNREACH',  # No route to host
+        114: 'EALREADY',  # Operation already in progress
+        115: 'EINPROGRESS',  # Operation now in progress
+        116: 'ESTALE',  # Stale file handle
+        117: 'EUCLEAN',  # Structure needs cleaning
+        118: 'ENOTNAM',  # Not a XENIX named type file
+        119: 'ENAVAIL',  # No XENIX semaphores available
+        120: 'EISNAM',  # Is a named type file
+        121: 'EREMOTEIO',  # Remote I/O error
+        122: 'EDQUOT',  # Quota exceeded
+
+        123: 'ENOMEDIUM',  # No medium found
+        124: 'EMEDIUMTYPE',  # Wrong medium type
+        125: 'ECANCELED',  # Operation Canceled
+        126: 'ENOKEY',  # Required key not available
+        127: 'EKEYEXPIRED',  # Key has expired
+        128: 'EKEYREVOKED',  # Key has been revoked
+        129: 'EKEYREJECTED',  # Key was rejected by service
+
+        130: 'EOWNERDEAD',  # Owner died
+        131: 'ENOTRECOVERABLE',  # State not recoverable
+
+        132: 'ERFKILL',  # Operation not possible due to RF-kill
+
+        133: 'EHWPOISON',  # Memory page has hardware error
+    },
+    'darwin': {
+        1: 'EPERM',  # Operation not permitted
+        2: 'ENOENT',  # No such file or directory
+        3: 'ESRCH',  # No such process
+        4: 'EINTR',  # Interrupted system call
+        5: 'EIO',  # Input/output error
+        6: 'ENXIO',  # Device not configured
+        7: 'E2BIG',  # Argument list too long
+        8: 'ENOEXEC',  # Exec format error
+        9: 'EBADF',  # Bad file descriptor
+        10: 'ECHILD',  # No child processes
+        11: 'EDEADLK',  # Resource deadlock avoided
+        12: 'ENOMEM',  # Cannot allocate memory
+        13: 'EACCES',  # Permission denied
+        14: 'EFAULT',  # Bad address
+        15: 'ENOTBLK',  # Block device required
+        16: 'EBUSY',  # Device / Resource busy
+        17: 'EEXIST',  # File exists
+        18: 'EXDEV',  # Cross-device link
+        19: 'ENODEV',  # Operation not supported by device
+        20: 'ENOTDIR',  # Not a directory
+        21: 'EISDIR',  # Is a directory
+        22: 'EINVAL',  # Invalid argument
+        23: 'ENFILE',  # Too many open files in system
+        24: 'EMFILE',  # Too many open files
+        25: 'ENOTTY',  # Inappropriate ioctl for device
+        26: 'ETXTBSY',  # Text file busy
+        27: 'EFBIG',  # File too large
+        28: 'ENOSPC',  # No space left on device
+        29: 'ESPIPE',  # Illegal seek
+        30: 'EROFS',  # Read-only file system
+        31: 'EMLINK',  # Too many links
+        32: 'EPIPE',  # Broken pipe
+
+        # math software
+        33: 'EDOM',  # Numerical argument out of domain
+        34: 'ERANGE',  # Result too large
+
+        # non - blocking and interrupt i / o
+        35: 'EAGAIN',  # Resource temporarily unavailable
+        36: 'EINPROGRESS',  # Operation now in progress
+        37: 'EALREADY',  # Operation already in progress
+
+        # ipc / network software - - argument errors
+        38: 'ENOTSOCK',  # Socket operation on non-socket
+        39: 'EDESTADDRREQ',  # Destination address required
+        40: 'EMSGSIZE',  # Message too long
+        41: 'EPROTOTYPE',  # Protocol wrong type for socket
+        42: 'ENOPROTOOPT',  # Protocol not available
+        43: 'EPROTONOSUPPORT',  # Protocol not supported
+        44: 'ESOCKTNOSUPPORT',  # Socket type not supported
+        45: 'ENOTSUP',  # Operation not supported
+
+        46: 'EPFNOSUPPORT',  # Protocol family not supported
+        47: 'EAFNOSUPPORT',  # Address family not supported by protocol family
+        48: 'EADDRINUSE',  # Address already in use
+        49: 'EADDRNOTAVAIL',  # Can't assign requested address
+
+        # ipc / network software - - operational errors
+        50: 'ENETDOWN',  # Network is down
+        51: 'ENETUNREACH',  # Network is unreachable
+        52: 'ENETRESET',  # Network dropped connection on reset
+        53: 'ECONNABORTED',  # Software caused connection abort
+        54: 'ECONNRESET',  # Connection reset by peer
+        55: 'ENOBUFS',  # No buffer space available
+        56: 'EISCONN',  # Socket is already connected
+        57: 'ENOTCONN',  # Socket is not connected
+        58: 'ESHUTDOWN',  # Can't send after socket shutdown
+        59: 'ETOOMANYREFS',  # Too many references: can't splice
+        60: 'ETIMEDOUT',  # Operation timed out
+        61: 'ECONNREFUSED',  # Connection refused
+
+        62: 'ELOOP',  # Too many levels of symbolic links
+        63: 'ENAMETOOLONG',  # File name too long
+
+        # should be rearranged
+        64: 'EHOSTDOWN',  # Host is down
+        65: 'EHOSTUNREACH',  # No route to host
+        66: 'ENOTEMPTY',  # Directory not empty
+
+        # quotas & mush
+        67: 'EPROCLIM',  # Too many processes
+        68: 'EUSERS',  # Too many users
+        69: 'EDQUOT',  # Disc quota exceeded
+
+        # Network File System
+        70: 'ESTALE',  # Stale NFS file handle
+        71: 'EREMOTE',  # Too many levels of remote in path
+        72: 'EBADRPC',  # RPC struct is bad
+        73: 'ERPCMISMATCH',  # RPC version wrong
+        74: 'EPROGUNAVAIL',  # RPC prog. not avail
+        75: 'EPROGMISMATCH',  # Program version wrong
+        76: 'EPROCUNAVAIL',  # Bad procedure for program
+
+        77: 'ENOLCK',  # No locks available
+        78: 'ENOSYS',  # Function not implemented
+
+        79: 'EFTYPE',  # Inappropriate file type or format
+        80: 'EAUTH',  # Authentication error
+        81: 'ENEEDAUTH',  # Need authenticator
+
+        # Intelligent device errors
+        82: 'EPWROFF',  # Device power is off
+        83: 'EDEVERR',  # Device error, e.g. paper out
+
+        84: 'EOVERFLOW',  # Value too large to be stored in data type
+
+        # Program loading errors
+        85: 'EBADEXEC',  # Bad executable
+        86: 'EBADARCH',  # Bad CPU type in executable
+        87: 'ESHLIBVERS',  # Shared library version mismatch
+        88: 'EBADMACHO',  # Malformed Macho file
+
+        89: 'ECANCELED',  # Operation canceled
+
+        90: 'EIDRM',  # Identifier removed
+        91: 'ENOMSG',  # No message of desired type
+        92: 'EILSEQ',  # Illegal byte sequence
+        93: 'ENOATTR',  # Attribute not found
+
+        94: 'EBADMSG',  # Bad message
+        95: 'EMULTIHOP',  # Reserved
+        96: 'ENODATA',  # No message available on STREAM
+        97: 'ENOLINK',  # Reserved
+        98: 'ENOSR',  # No STREAM resources
+        99: 'ENOSTR',  # Not a STREAM
+        100: 'EPROTO',  # Protocol error
+        101: 'ETIME',  # STREAM ioctl timeout
+
+        102: 'EOPNOTSUPP',  # Operation not supported on socket
+        103: 'ENOPOLICY',  # No such policy registered
+        104: 'ENOTRECOVERABLE',  # State not recoverable
+        105: 'EOWNERDEAD',  # Previous owner died
+        106: 'EQFULL',  # Interface output queue is full
+    },
+    'windows': {
+        1: 'EPERM',
+        2: 'ENOENT',
+        3: 'ESRCH',
+        4: 'EINTR',
+        5: 'EIO',
+        6: 'ENXIO',
+        7: 'E2BIG',
+        8: 'ENOEXEC',
+        9: 'EBADF',
+        10: 'ECHILD',
+        11: 'EAGAIN',
+        12: 'ENOMEM',
+        13: 'EACCES',
+        14: 'EFAULT',
+        16: 'EBUSY',
+        17: 'EEXIST',
+        18: 'EXDEV',
+        19: 'ENODEV',
+        20: 'ENOTDIR',
+        21: 'EISDIR',
+        23: 'ENFILE',
+        24: 'EMFILE',
+        25: 'ENOTTY',
+        27: 'EFBIG',
+        28: 'ENOSPC',
+        29: 'ESPIPE',
+        30: 'EROFS',
+        31: 'EMLINK',
+        32: 'EPIPE',
+        33: 'EDOM',
+        36: 'EDEADLK',
+        38: 'ENAMETOOLONG',
+        39: 'ENOLCK',
+        40: 'ENOSYS',
+        41: 'ENOTEMPTY',
+
+        # Error codes used in the Secure CRT functions
+        22: 'EINVAL',
+        34: 'ERANGE',
+        42: 'EILSEQ',
+        80: 'STRUNCATE',
+
+        # POSIX Supplement
+        100: 'EADDRINUSE',
+        101: 'EADDRNOTAVAIL',
+        102: 'EAFNOSUPPORT',
+        103: 'EALREADY',
+        104: 'EBADMSG',
+        105: 'ECANCELED',
+        106: 'ECONNABORTED',
+        107: 'ECONNREFUSED',
+        108: 'ECONNRESET',
+        109: 'EDESTADDRREQ',
+        110: 'EHOSTUNREACH',
+        111: 'EIDRM',
+        112: 'EINPROGRESS',
+        113: 'EISCONN',
+        114: 'ELOOP',
+        115: 'EMSGSIZE',
+        116: 'ENETDOWN',
+        117: 'ENETRESET',
+        118: 'ENETUNREACH',
+        119: 'ENOBUFS',
+        120: 'ENODATA',
+        121: 'ENOLINK',
+        122: 'ENOMSG',
+        123: 'ENOPROTOOPT',
+        124: 'ENOSR',
+        125: 'ENOSTR',
+        126: 'ENOTCONN',
+        127: 'ENOTRECOVERABLE',
+        128: 'ENOTSOCK',
+        129: 'ENOTSUP',
+        130: 'EOPNOTSUPP',
+        131: 'EOTHER',
+        132: 'EOVERFLOW',
+        133: 'EOWNERDEAD',
+        134: 'EPROTO',
+        135: 'EPROTONOSUPPORT',
+        136: 'EPROTOTYPE',
+        137: 'ETIME',
+        138: 'ETIMEDOUT',
+        139: 'ETXTBSY',
+        140: 'EWOULDBLOCK',
+    },
+}
+
+WELL_KNOWN_SIGNALS = {
+    # Linux signals have been taken from <uapi/asm-generic/signal.h>
+    'linux': {
+        1: 'SIGHUP',  # Hangup.
+        2: 'SIGINT',  # Terminal interrupt signal.
+        3: 'SIGQUIT',  # Terminal quit signal.
+        4: 'SIGILL',  # Illegal instruction.
+        5: 'SIGTRAP',
+        6: 'SIGABRT',  # Process abort signal.
+        7: 'SIGBUS',
+        8: 'SIGFPE',  # Erroneous arithmetic operation.
+        9: 'SIGKILL',  # Kill (cannot be caught or ignored).
+        10: 'SIGUSR1',  # User-defined signal 1.
+        11: 'SIGSEGV',  # Invalid memory reference.
+        12: 'SIGUSR2',  # User-defined signal 2.
+        13: 'SIGPIPE',  # Write on a pipe with no one to read it.
+        14: 'SIGALRM',  # Alarm clock.
+        15: 'SIGTERM',  # Termination signal.
+        16: 'SIGSTKFLT',
+        17: 'SIGCHLD',  # Child process terminated or stopped.
+        18: 'SIGCONT',  # Continue executing, if stopped.
+        19: 'SIGSTOP',  # Stop executing (cannot be caught or ignored).
+        20: 'SIGTSTP',  # Terminal stop signal.
+        21: 'SIGTTIN',  # Background process attempting read.
+        22: 'SIGTTOU',  # Background process attempting write.
+        23: 'SIGURG',  # High bandwidth data is available at a socket.
+        24: 'SIGXCPU',  # CPU time limit exceeded.
+        25: 'SIGXFSZ',  # File size limit exceeded.
+        26: 'SIGVTALRM',  # Virtual timer expired.
+        27: 'SIGPROF',  # Profiling timer expired.
+        28: 'SIGWINCH',
+        29: 'SIGIO',
+        30: 'SIGPWR',
+        31: 'SIGSYS',
+    },
+    'darwin': {
+        1: 'SIGHUP',  # hangup
+        2: 'SIGINT',  # interrupt
+        3: 'SIGQUIT',  # quit
+        4: 'SIGILL',  # illegal instruction (not reset when caught)
+        5: 'SIGTRAP',  # trace trap (not reset when caught)
+        6: 'SIGABRT',  # abort()
+        # if (defined(_POSIX_C_SOURCE) && !defined(_DARWIN_C_SOURCE))
+        7: 'SIGPOLL',  # pollable event ([XSR] generated, not supported)
+        # if (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE)
+        # 7: 'SIGEMT', # EMT instruction
+        8: 'SIGFPE',  # floating point exception
+        9: 'SIGKILL',  # kill (cannot be caught or ignored)
+        10: 'SIGBUS',  # bus error
+        11: 'SIGSEGV',  # segmentation violation
+        12: 'SIGSYS',  # bad argument to system call
+        13: 'SIGPIPE',  # write on a pipe with no one to read it
+        14: 'SIGALRM',  # alarm clock
+        15: 'SIGTERM',  # software termination signal from kill
+        16: 'SIGURG',  # urgent condition on IO channel
+        17: 'SIGSTOP',  # sendable stop signal not from tty
+        18: 'SIGTSTP',  # stop signal from tty
+        19: 'SIGCONT',  # continue a stopped process
+        20: 'SIGCHLD',  # to parent on child stop or exit
+        21: 'SIGTTIN',  # to readers pgrp upon background tty read
+        22: 'SIGTTOU',  # like TTIN for output if (tp->t_local&LTOSTOP)
+        23: 'SIGIO',  # input/output possible signal
+        24: 'SIGXCPU',  # exceeded CPU time limit
+        25: 'SIGXFSZ',  # exceeded file size limit
+        26: 'SIGVTALRM',  # virtual time alarm
+        27: 'SIGPROF',  # profiling time alarm
+        28: 'SIGWINCH',  # window size changes
+        29: 'SIGINFO',  # information request
+        30: 'SIGUSR1',  # user defined signal 1
+        31: 'SIGUSR2',  # user defined signal 2
+    },
+}
+
+# Codes for Darwin `si_code`
+WELL_KNOWN_SIGNAL_CODES = {
+    # Codes for SIGILL
+    4: {
+        0: 'ILL_NOOP',  # if only I knew...
+        1: 'ILL_ILLOPC',  # [XSI] illegal opcode
+        2: 'ILL_ILLTRP',  # [XSI] illegal trap
+        3: 'ILL_PRVOPC',  # [XSI] privileged opcode
+        4: 'ILL_ILLOPN',  # [XSI] illegal operand -NOTIMP
+        5: 'ILL_ILLADR',  # [XSI] illegal addressing mode -NOTIMP
+        6: 'ILL_PRVREG',  # [XSI] privileged register -NOTIMP
+        7: 'ILL_COPROC',  # [XSI] coprocessor error -NOTIMP
+        8: 'ILL_BADSTK',  # [XSI] internal stack error -NOTIMP
+    },
+
+    # Codes for SIGFPE
+    8: {
+        0: 'FPE_NOOP',  # if only I knew...
+        1: 'FPE_FLTDIV',  # [XSI] floating point divide by zero
+        2: 'FPE_FLTOVF',  # [XSI] floating point overflow
+        3: 'FPE_FLTUND',  # [XSI] floating point underflow
+        4: 'FPE_FLTRES',  # [XSI] floating point inexact result
+        5: 'FPE_FLTINV',  # [XSI] invalid floating point operation
+        6: 'FPE_FLTSUB',  # [XSI] subscript out of range -NOTIMP
+        7: 'FPE_INTDIV',  # [XSI] integer divide by zero
+        8: 'FPE_INTOVF',  # [XSI] integer overflow
+    },
+
+    # Codes for SIGSEGV
+    11: {
+        0: 'SEGV_NOOP',  # if only I knew...
+        1: 'SEGV_MAPERR',  # [XSI] address not mapped to object
+        2: 'SEGV_ACCERR',  # [XSI] invalid permission for mapped object
+    },
+
+    # Codes for SIGBUS
+    10: {
+        0: 'BUS_NOOP',  # if only I knew...
+        1: 'BUS_ADRALN',  # [XSI] Invalid address alignment
+        2: 'BUS_ADRERR',  # [XSI] Nonexistent physical address -NOTIMP
+        3: 'BUS_OBJERR',  # [XSI] Object-specific HW error - NOTIMP
+    },
+
+    # Codes for SIGTRAP
+    5: {
+        1: 'TRAP_BRKPT',  # [XSI] Process breakpoint -NOTIMP
+        2: 'TRAP_TRACE',  # [XSI] Process trace trap -NOTIMP
+    },
+
+    # Codes for SIGCHLD
+    20: {
+        0: 'CLD_NOOP',  # if only I knew...
+        1: 'CLD_EXITED',  # [XSI] child has exited
+        2: 'CLD_KILLED',  # [XSI] terminated abnormally, no core file
+        3: 'CLD_DUMPED',  # [XSI] terminated abnormally, core file
+        4: 'CLD_TRAPPED',  # [XSI] traced child has trapped
+        5: 'CLD_STOPPED',  # [XSI] child has stopped
+        6: 'CLD_CONTINUED',  # [XSI] stopped child has continued
+    },
+
+    # Codes for SIGPOLL
+    7: {
+        1: 'POLL_IN',  # [XSR] Data input available
+        2: 'POLL_OUT',  # [XSR] Output buffers available
+        3: 'POLL_MSG',  # [XSR] Input message available
+        4: 'POLL_ERR',  # [XSR] I/O error
+        5: 'POLL_PRI',  # [XSR] High priority input available
+        6: 'POLL_HUP',  # [XSR] Device disconnected
+    },
+}
+
+# Mach exception codes used in Darwin.
+WELL_KNOWN_MACH_EXCEPTIONS = {
+    1: 'EXC_BAD_ACCESS',  # Could not access memory
+    2: 'EXC_BAD_INSTRUCTION',  # Instruction failed
+    3: 'EXC_ARITHMETIC',  # Arithmetic exception
+    4: 'EXC_EMULATION',  # Emulation instruction
+    5: 'EXC_SOFTWARE',  # Software generated exception
+    6: 'EXC_BREAKPOINT',  # Trace, breakpoint, etc.
+    7: 'EXC_SYSCALL',  # System calls.
+    8: 'EXC_MACH_SYSCALL',  # Mach system calls.
+    9: 'EXC_RPC_ALERT',  # RPC alert
+    10: 'EXC_CRASH',  # Abnormal process exit
+    11: 'EXC_RESOURCE',  # Hit resource consumption limit
+    12: 'EXC_GUARD',  # Violated guarded resource protections
+    13: 'EXC_CORPSE_NOTIFY',  # Abnormal process exited to corpse state
+}
+
+
+def normalize_mechanism_errno(errno, sdk):
+    if not sdk:
+        return
+
+    if 'name' not in errno:
+        errnos = WELL_KNOWN_ERRNO.get(sdk, {})
+        name = errnos.get(errno['number'])
+        if name:
+            errno['name'] = name
+
+
+def normalize_mechanism_signal(signal, sdk):
+    if not sdk:
+        return
+
+    if 'name' not in signal:
+        signals = WELL_KNOWN_SIGNALS.get(sdk, {})
+        name = signals.get(signal['number'])
+        if name:
+            signal['name'] = name
+
+    if sdk != 'darwin':
+        return
+
+    if 'code' in signal and 'code_name' not in signal:
+        codes = WELL_KNOWN_SIGNAL_CODES.get(signal['number'], {})
+        code_name = codes.get(signal['code'])
+        if code_name:
+            signal['code_name'] = code_name
+
+
+def normalize_mechanism_mach_exception(mach):
+    if 'name' not in mach:
+        name = WELL_KNOWN_MACH_EXCEPTIONS.get(mach['exception'])
+        if name:
+            mach['name'] = name
+
+
+def normalize_mechanism_meta(mechanism, sdk_info=None):
+    if mechanism is None or 'meta' not in mechanism:
+        return
+
+    meta = mechanism['meta']
+
+    sdk_name = sdk_info['sdk_name'].lower() if sdk_info else ''
+    if sdk_name in ('ios', 'watchos', 'tvos', 'macos'):
+        sdk = 'darwin'
+    elif sdk_name in ('linux', 'android'):
+        sdk = 'linux'
+    elif sdk_name in ('windows',):
+        sdk = 'windows'
+    else:
+        sdk = None
+
+    if 'errno' in meta:
+        normalize_mechanism_errno(meta['errno'], sdk)
+
+    if 'signal' in meta:
+        normalize_mechanism_signal(meta['signal'], sdk)
+
+    if 'mach_exception' in meta:
+        normalize_mechanism_mach_exception(meta['mach_exception'])
+
+
+def upgrade_legacy_mechanism(data):
+    """
+    Conversion from mechanism objects sent by old sentry-cocoa SDKs. It assumes
+    "type": "generic" and moves "posix_signal", "mach_exception" into "meta".
+    All other keys are moved into "data".
+
+    Example old payload:
+    >>> {
+    >>>     "posix_signal": {
+    >>>         "name": "SIGSEGV",
+    >>>         "code_name": "SEGV_NOOP",
+    >>>         "signal": 11,
+    >>>         "code": 0
+    >>>     },
+    >>>     "relevant_address": "0x1",
+    >>>     "mach_exception": {
+    >>>         "exception": 1,
+    >>>         "exception_name": "EXC_BAD_ACCESS",
+    >>>         "subcode": 8,
+    >>>         "code": 1
+    >>>     }
+    >>> }
+
+    Example normalization:
+    >>> {
+    >>>     "type": "generic",
+    >>>     "data": {
+    >>>         "relevant_address": "0x1"
+    >>>     },
+    >>>     "meta": {
+    >>>         "mach_exception": {
+    >>>             "exception": 1,
+    >>>             "subcode": 8,
+    >>>             "code": 1,
+    >>>             "name": "EXC_BAD_ACCESS"
+    >>>         },
+    >>>         "signal": {
+    >>>             "number": 11,
+    >>>             "code": 0,
+    >>>             "name": "SIGSEGV",
+    >>>             "code_name": "SEGV_NOOP"
+    >>>         }
+    >>>     }
+    >>> }
+    """
+
+    # Early exit for current protocol. We assume that when someone sends a
+    # "type", we do not need to preprocess and can immediately validate
+    if data is None or data.get('type') is not None:
+        return data
+
+    result = {'type': 'generic'}
+
+    # "posix_signal" and "mach_exception" were optional root-level objects,
+    # which have now moved to special keys inside "meta". We only create "meta"
+    # if there is actual data to add.
+
+    posix_signal = data.pop('posix_signal', None)
+    if posix_signal and posix_signal.get('signal'):
+        result.setdefault('meta', {})['signal'] = prune_empty_keys({
+            'number': posix_signal.get('signal'),
+            'code': posix_signal.get('code'),
+            'name': posix_signal.get('name'),
+            'code_name': posix_signal.get('code_name'),
+        })
+
+    mach_exception = data.pop('mach_exception', None)
+    if mach_exception:
+        result.setdefault('meta', {})['mach_exception'] = prune_empty_keys({
+            'exception': mach_exception.get('exception'),
+            'code': mach_exception.get('code'),
+            'subcode': mach_exception.get('subcode'),
+            'name': mach_exception.get('exception_name'),
+        })
+
+    # All remaining data has to be moved to the "data" key. We assume that even
+    # if someone accidentally sent a corret top-level key (such as "handled"),
+    # it will not pass our interface validation and should be moved to "data"
+    # instead.
+    result.setdefault('data', {}).update(data)
+    return result
+
+
+def prune_empty_keys(obj):
+    if obj is None:
+        return None
+
+    return dict((k, v) for k, v in six.iteritems(obj) if (v == 0 or v is False or v))
+
+
+class Mechanism(Interface):
+    """
+    an optional field residing in the exception interface. It carries additional
+    information about the way the exception was created on the target system.
+    This includes general exception values obtained from operating system or
+    runtime APIs, as well as mechanism-specific values.
+
+    >>> {
+    >>>     "type": "mach",
+    >>>     "description": "EXC_BAD_ACCESS",
+    >>>     "data": {
+    >>>         "relevant_address": "0x1"
+    >>>     },
+    >>>     "handled": false,
+    >>>     "help_link": "https://developer.apple.com/library/content/qa/qa1367/_index.html",
+    >>>     "meta": {
+    >>>         "mach_exception": {
+    >>>              "exception": 1,
+    >>>              "subcode": 8,
+    >>>              "code": 1
+    >>>         },
+    >>>         "signal": {
+    >>>             "number": 11
+    >>>         }
+    >>>     }
+    >>> }
+    """
+
+    path = 'mechanism'
+
+    @classmethod
+    def to_python(cls, data):
+        data = upgrade_legacy_mechanism(data)
+        is_valid, errors = validate_and_default_interface(data, cls.path)
+        if not is_valid:
+            raise InterfaceValidationError("Invalid mechanism")
+
+        if not data.get('type'):
+            raise InterfaceValidationError("No 'type' present")
+
+        meta = data.get('meta', {})
+        mach_exception = meta.get('mach_exception')
+        if mach_exception is not None:
+            mach_exception = prune_empty_keys({
+                'exception': mach_exception['exception'],
+                'code': mach_exception['code'],
+                'subcode': mach_exception['subcode'],
+                'name': mach_exception.get('name'),
+            })
+
+        signal = meta.get('signal')
+        if signal is not None:
+            signal = prune_empty_keys({
+                'number': signal['number'],
+                'code': signal.get('code'),
+                'name': signal.get('name'),
+                'code_name': signal.get('code_name'),
+            })
+
+        errno = meta.get('errno')
+        if errno is not None:
+            errno = prune_empty_keys({
+                'number': errno['number'],
+                'name': errno.get('name'),
+            })
+
+        kwargs = {
+            'type': trim(data['type'], 128),
+            'description': trim(data.get('description'), 1024),
+            'help_link': trim(data.get('help_link'), 1024),
+            'handled': data.get('handled'),
+            'data': trim(data.get('data'), 4096),
+            'meta': {
+                'errno': errno,
+                'mach_exception': mach_exception,
+                'signal': signal,
+            },
+        }
+
+        return cls(**kwargs)
+
+    def to_json(self):
+        return prune_empty_keys({
+            'type': self.type,
+            'description': self.description,
+            'help_link': self.help_link,
+            'handled': self.handled,
+            'data': self.data,
+            'meta': prune_empty_keys(self.meta),
+        })
+
+    def get_path(self):
+        return self.path
+
+    def iter_tags(self):
+        yield (self.path, self.type)
+
+        if self.handled is not None:
+            yield ('handled', self.handled and 'yes' or 'no')
+
 
 class SingleException(Interface):
     """
@@ -33,7 +814,7 @@ class SingleException(Interface):
     You can also optionally bind a stacktrace interface to an exception. The
     spec is identical to ``sentry.interfaces.Stacktrace``.
 
-    >>>  {
+    >>> {
     >>>     "type": "ValueError",
     >>>     "value": "My exception value",
     >>>     "module": "__builtins__",
@@ -83,10 +864,10 @@ class SingleException(Interface):
 
         value = trim(value, 4096)
 
-        mechanism = data.get('mechanism')
-        if mechanism is not None:
-            mechanism = trim(data.get('mechanism'), 4096)
-            mechanism.setdefault('type', 'generic')
+        if data.get('mechanism'):
+            mechanism = Mechanism.to_python(data['mechanism'])
+        else:
+            mechanism = None
 
         kwargs = {
             'type': trim(type, 128),
@@ -101,6 +882,11 @@ class SingleException(Interface):
         return cls(**kwargs)
 
     def to_json(self):
+        if self.mechanism:
+            mechanism = self.mechanism.to_json()
+        else:
+            mechanism = None
+
         if self.stacktrace:
             stacktrace = self.stacktrace.to_json()
         else:
@@ -114,7 +900,7 @@ class SingleException(Interface):
         return {
             'type': self.type,
             'value': self.value,
-            'mechanism': self.mechanism or None,
+            'mechanism': mechanism,
             'module': self.module,
             'stacktrace': stacktrace,
             'thread_id': self.thread_id,
@@ -122,6 +908,11 @@ class SingleException(Interface):
         }
 
     def get_api_context(self, is_public=False):
+        if self.mechanism:
+            mechanism = self.mechanism.to_json()
+        else:
+            mechanism = None
+
         if self.stacktrace:
             stacktrace = self.stacktrace.get_api_context(is_public=is_public)
         else:
@@ -135,7 +926,7 @@ class SingleException(Interface):
         return {
             'type': self.type,
             'value': six.text_type(self.value) if self.value else None,
-            'mechanism': self.mechanism or None,
+            'mechanism': mechanism,
             'threadId': self.thread_id,
             'module': self.module,
             'stacktrace': stacktrace,
@@ -176,7 +967,9 @@ class Exception(Interface):
     >>>         "type": "ValueError",
     >>>         "value": "My exception value",
     >>>         "module": "__builtins__",
-    >>>         "mechanism": {},
+    >>>         "mechanism": {
+    >>>             # see sentry.interfaces.Mechanism
+    >>>         },
     >>>         "stacktrace": {
     >>>             # see sentry.interfaces.Stacktrace
     >>>         }
@@ -304,6 +1097,15 @@ class Exception(Interface):
             return exc.stacktrace.get_stacktrace(*args, **kwargs)
         return ''
 
+    def iter_tags(self):
+        if not self.values:
+            return
+
+        mechanism = self.values[0].mechanism
+        if mechanism:
+            for tag in mechanism.iter_tags():
+                yield tag
+
 
 def slim_exception_data(instance, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
     """
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index 2c077553ff..d4a6fbf3af 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -156,6 +156,64 @@ STACKTRACE_INTERFACE_SCHEMA = {
     'additionalProperties': {'not': {}},
 }
 
+EXCEPTION_MECHANISM_INTERFACE_SCHEMA = {
+    'type': 'object',
+    'properties': {
+        'type': {
+            'type': 'string',
+            'minLength': 1,
+        },
+        'description': {
+            'type': 'string',
+        },
+        'help_link': {
+            'type': 'string',
+            'minLength': 1,
+        },
+        'handled': {
+            'type': 'boolean',
+        },
+        'data': {
+            'type': 'object',
+        },
+        'meta': {
+            'type': 'object',
+            'default': {},
+            'properties': {
+                'signal': {
+                    'type': 'object',
+                    'properties': {
+                        'number': {'type': 'number'},
+                        'code': {'type': 'number'},
+                        'name': {'type': 'string'},
+                        'code_name': {'type': 'string'},
+                    },
+                    'required': ['number'],
+                },
+                'errno': {
+                    'type': 'object',
+                    'properties': {
+                        'number': {'type': 'number'},
+                        'name': {'type': 'string'},
+                    },
+                    'required': ['number'],
+                },
+                'mach_exception': {
+                    'type': 'object',
+                    'properties': {
+                        'exception': {'type': 'number'},
+                        'code': {'type': 'number'},
+                        'subcode': {'type': 'number'},
+                        'name': {'type': 'string'},
+                    },
+                    'required': ['exception', 'code', 'subcode'],
+                },
+            },
+        }
+    },
+    'required': ['type'],
+}
+
 EXCEPTION_INTERFACE_SCHEMA = {
     'type': 'object',
     'properties': {
@@ -169,7 +227,7 @@ EXCEPTION_INTERFACE_SCHEMA = {
             # 'minLength': 1,
         },
         'module': {'type': 'string'},
-        'mechanism': {'type': 'object'},
+        'mechanism': {},  # see EXCEPTION_MECHANISM_INTERFACE_SCHEMA
         'stacktrace': {
             # To validate stacktraces use STACKTRACE_INTERFACE_SCHEMA
             'type': 'object',
@@ -642,6 +700,7 @@ INTERFACE_SCHEMAS = {
     'sentry.interfaces.Stacktrace': STACKTRACE_INTERFACE_SCHEMA,
     'frame': FRAME_INTERFACE_SCHEMA,  # Not listed in SENTRY_INTERFACES
     'logentry': MESSAGE_INTERFACE_SCHEMA,
+    'mechanism': EXCEPTION_MECHANISM_INTERFACE_SCHEMA,
     'sentry.interfaces.Message': MESSAGE_INTERFACE_SCHEMA,
     'template': TEMPLATE_INTERFACE_SCHEMA,
     'sentry.interfaces.Template': TEMPLATE_INTERFACE_SCHEMA,
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index 3161cb522d..d393d3c71a 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import posixpath
 
+from sentry.interfaces.exception import upgrade_legacy_mechanism
 from sentry.lang.native.utils import image_name
 from sentry.utils.compat import implements_to_string
 from sentry.constants import NATIVE_UNKNOWN_STRING
@@ -42,11 +43,11 @@ class AppleCrashReport(object):
         if self.exceptions and self.exceptions[0]:
             # We only have one exception at a time
             exception = self.exceptions[0] or {}
-            mechanism = exception.get('mechanism') or {}
+            mechanism = upgrade_legacy_mechanism(exception.get('mechanism')) or {}
+            mechanism_meta = mechanism.get('meta', {})
 
-            signal = (mechanism.get('posix_signal') or {}).get('name')
-            name = (mechanism.get('mach_exception')
-                    or {}).get('exception_name')
+            signal = mechanism_meta.get('signal', {}).get('name')
+            name = mechanism_meta.get('mach_exception', {}).get('name')
 
             if name or signal:
                 rv.append(
@@ -54,8 +55,8 @@ class AppleCrashReport(object):
                     (name or 'Unknown', signal and (' (%s)' % signal) or '', )
                 )
 
-            exc_name = (mechanism.get('posix_signal') or {}).get('code_name')
-            exc_addr = mechanism.get('relevant_address')
+            exc_name = (mechanism_meta.get('signal', {})).get('code_name')
+            exc_addr = mechanism.get('data', {}).get('relevant_address')
             if exc_name:
                 rv.append(
                     'Exception Codes: %s%s' %
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index b14fbdfe96..c028eea7c0 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -77,9 +77,10 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             exc = self.data.get('sentry.interfaces.Exception')
             if exc is not None:
                 mechanism = exc['values'][0].get('mechanism')
-                if mechanism and 'posix_signal' in mechanism and \
-                   'signal' in mechanism['posix_signal']:
-                    signal = int(mechanism['posix_signal']['signal'])
+                if mechanism and 'meta' in mechanism and \
+                    'signal' in mechanism['meta'] and \
+                        'number' in mechanism['meta']['signal']:
+                    signal = int(mechanism['meta']['signal']['number'])
             registers = processable_frame.stacktrace_info.stacktrace.get(
                 'registers')
             if registers:
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 869e28bb46..66adaa56fc 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -218,6 +218,13 @@ def merge_minidump_event(data, minidump):
         'type': state.crash_reason,
         # Move stacktrace here from crashed_thread (mutating!)
         'stacktrace': crashed_thread.pop('stacktrace'),
+        'mechanism': {
+            'type': 'minidump',
+            'handled': False,
+            # We cannot extract exception codes or signals with the breakpad
+            # extractor just yet. Once these capabilities are added to symbolic,
+            # these values should go in the mechanism here.
+        }
     }
 
     # Extract referenced (not all loaded) images
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
index cc8fbb5dfb..07630f4136 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
@@ -3,75 +3,97 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import Pills from 'app/components/pills';
 import Pill from 'app/components/pill';
+import Hovercard from 'app/components/hovercard';
+import InlineSvg from 'app/components/inlineSvg';
+import {t} from 'app/locale';
 
 class ExceptionMechanism extends React.Component {
   static propTypes = {
-    data: PropTypes.object.isRequired,
-    platform: PropTypes.string,
+    data: PropTypes.shape({
+      type: PropTypes.string.isRequired,
+      description: PropTypes.string,
+      help_link: PropTypes.string,
+      handled: PropTypes.bool,
+      meta: PropTypes.shape({
+        errno: PropTypes.shape({
+          number: PropTypes.number.isRequired,
+          name: PropTypes.string,
+        }),
+        mach_exception: PropTypes.shape({
+          exception: PropTypes.number.isRequired,
+          code: PropTypes.number.isRequired,
+          subcode: PropTypes.number.isRequired,
+          name: PropTypes.string,
+        }),
+        signal: PropTypes.shape({
+          number: PropTypes.number.isRequired,
+          code: PropTypes.nubmer,
+          name: PropTypes.string,
+          code_name: PropTypes.string,
+        }),
+      }),
+      data: PropTypes.object,
+    }).isRequired,
   };
 
   render() {
-    let pills = [];
+    let mechanism = this.props.data;
+    let {type, description, help_link, handled, meta = {}, data = {}} = mechanism;
+    let {errno, signal, mach_exception} = meta;
 
-    if (this.props.data.mach_exception) {
-      const {mach_exception} = this.props.data;
-      if (mach_exception.exception_name) {
-        pills.push(
-          <Pill
-            key="mach-exception"
-            name="mach exception"
-            value={mach_exception.exception_name}
-          />
-        );
-      }
-      if (mach_exception.code_name) {
-        pills.push(
-          <Pill key="mach-code" name="mach code" value={mach_exception.code_name} />
-        );
-      }
+    let linkElement = help_link && (
+      <a href={help_link} className="external-icon">
+        <em className="icon-open" />
+      </a>
+    );
+
+    let descriptionElement = description && (
+      <Hovercard
+        header={
+          <span>
+            {t('Details')} {linkElement}
+          </span>
+        }
+        body={description}
+        containerClassName="pill-icon"
+      >
+        <InlineSvg src="icon-circle-info" size="14px" />
+      </Hovercard>
+    );
+
+    let pills = [
+      <Pill key="mechanism" name="mechanism" value={type}>
+        {descriptionElement || linkElement}
+      </Pill>,
+    ];
+
+    if (!_.isNil(handled)) {
+      pills.push(<Pill key="handled" name="handled" value={handled} />);
     }
-    if (this.props.data.posix_signal) {
-      const {posix_signal} = this.props.data;
-      pills.push(
-        <Pill key="signal" name="signal">
-          {posix_signal.name} <em>({posix_signal.signal})</em>
-        </Pill>
-      );
+
+    if (errno) {
+      let value = errno.name || errno.number;
+      pills.push(<Pill key="errno" name="errno" value={value} />);
     }
 
-    if (this.props.data.type && this.props.data.description) {
-      pills.push(
-        <Pill
-          key="generic"
-          name={this.props.data.type}
-          value={this.props.data.description}
-        />
-      );
-      if (this.props.data.extra && _.isObject(this.props.data.extra)) {
-        let counter = 0;
-        _.forOwn(this.props.data.extra, function(value, key) {
-          if (!_.isObject(value)) {
-            pills.push(
-              <Pill key={`generic-extra-${counter++}`} name={key} value={value} />
-            );
-          }
-        });
-      }
-      if (this.props.data.handled !== undefined) {
-        pills.push(
-          <Pill
-            key="generic-extra-handled"
-            name="handled"
-            value={this.props.data.handled}
-          />
-        );
-      }
+    if (mach_exception) {
+      let value = mach_exception.name || mach_exception.exception;
+      pills.push(<Pill key="mach" name="mach exception" value={value} />);
     }
 
-    if (pills.length === 0) {
-      return null;
+    if (signal) {
+      let code = signal.code_name || `${t('code')} ${signal.code}`;
+      let name = signal.name || signal.number;
+      let value = _.isNil(signal.code) ? name : `${name} (${code})`;
+      pills.push(<Pill key="signal" name="signal" value={value} />);
     }
 
+    _.forOwn(data, (value, key) => {
+      if (!_.isObject(value)) {
+        pills.push(<Pill key={`data:${key}`} name={key} value={value} />);
+      }
+    });
+
     return (
       <div className="exception-mechanism">
         <Pills>{pills}</Pills>
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/exceptionMechanism.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/exceptionMechanism.spec.jsx.snap
new file mode 100644
index 0000000000..d5f9781e04
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/exceptionMechanism.spec.jsx.snap
@@ -0,0 +1,293 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ExceptionMechanism additional data should render all fields in the data object 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="data:relevant_address"
+      name="relevant_address"
+      value="0x1"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism additional data should skip object-like values 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism basic attributes should add the help_link to the description hovercard 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    >
+      <Hovercard
+        body="Nothing to see here."
+        containerClassName="pill-icon"
+        displayTimeout={100}
+        header={
+          <span>
+            Details
+             
+            <a
+              className="external-icon"
+              href="https://example.org/help"
+            >
+              <em
+                className="icon-open"
+              />
+            </a>
+          </span>
+        }
+      >
+        <InlineSvg
+          size="14px"
+          src="icon-circle-info"
+        />
+      </Hovercard>
+    </Pill>
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism basic attributes should render a description hovercard 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    >
+      <Hovercard
+        body="Nothing to see here."
+        containerClassName="pill-icon"
+        displayTimeout={100}
+        header={
+          <span>
+            Details
+             
+          </span>
+        }
+      >
+        <InlineSvg
+          size="14px"
+          src="icon-circle-info"
+        />
+      </Hovercard>
+    </Pill>
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism basic attributes should render a help_link icon 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    >
+      <a
+        className="external-icon"
+        href="https://example.org/help"
+      >
+        <em
+          className="icon-open"
+        />
+      </a>
+    </Pill>
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism basic attributes should render the exception mechanism 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism basic attributes should render the handled pill 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="handled"
+      name="handled"
+      value={false}
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism errno meta should prefer the errno name if present 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="errno"
+      name="errno"
+      value="E2BIG"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism errno meta should render the errno number 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="errno"
+      name="errno"
+      value={7}
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism mach_exception meta should prefer the exception name if present 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="mach"
+      name="mach exception"
+      value="EXC_BAD_ACCESS"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism mach_exception meta should render the mach exception number 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="mach"
+      name="mach exception"
+      value={1}
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism signal meta should add the signal code if present 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="signal"
+      name="signal"
+      value="11 (code 0)"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism signal meta should prefer signal and code names if present 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="signal"
+      name="signal"
+      value="SIGSEGV (SEGV_NOOP)"
+    />
+  </Pills>
+</div>
+`;
+
+exports[`ExceptionMechanism signal meta should render the signal number 1`] = `
+<div
+  className="exception-mechanism"
+>
+  <Pills>
+    <Pill
+      key="mechanism"
+      name="mechanism"
+      value="generic"
+    />
+    <Pill
+      key="signal"
+      name="signal"
+      value={11}
+    />
+  </Pills>
+</div>
+`;
diff --git a/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx b/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
index 3b21cd0293..09d6ee09bb 100644
--- a/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/exceptionMechanism.spec.jsx
@@ -1,250 +1,122 @@
 import React from 'react';
-import {mount} from 'enzyme';
+import {shallow} from 'enzyme';
 
 import ExceptionMechanism from 'app/components/events/interfaces/exceptionMechanism';
 
-describe('ExceptionMechanism', function() {
-  let sandbox;
-  let mechanism;
-  let platform;
-  let elem;
+describe('ExceptionMechanism', () => {
+  describe('basic attributes', () => {
+    it('should render the exception mechanism', () => {
+      let mechanism = {type: 'generic'};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
+    });
 
-  beforeEach(function() {
-    platform = 'cocoa';
+    it('should render a help_link icon', () => {
+      let mechanism = {type: 'generic', help_link: 'https://example.org/help'};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
+    });
 
-    sandbox = sinon.sandbox.create();
-  });
+    it('should render a description hovercard', () => {
+      let mechanism = {type: 'generic', description: 'Nothing to see here.'};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
+    });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+    it('should add the help_link to the description hovercard', () => {
+      let mechanism = {
+        type: 'generic',
+        description: 'Nothing to see here.',
+        help_link: 'https://example.org/help',
+      };
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
+    });
 
-  describe('render', function() {
-    it('should render no Pills on empty', function() {
-      mechanism = {};
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(0);
+    it('should render the handled pill', () => {
+      let mechanism = {type: 'generic', handled: false};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
+  });
 
-    it('should not render generic pills if description is missing', function() {
-      mechanism = {
-        type: 'promise',
-      };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(0);
+  describe('errno meta', () => {
+    it('should render the errno number', () => {
+      let mechanism = {type: 'generic', meta: {errno: {number: 7}}};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render one mach_exception', function() {
-      mechanism = {
-        mach_exception: {
-          exception_name: 'EXC_!',
-        },
-      };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(1);
-      expect(
-        elem
-          .find('li')
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('mach exception');
-      expect(
-        elem
-          .find('li')
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('EXC_!');
+    it('should prefer the errno name if present', () => {
+      let mechanism = {type: 'generic', meta: {errno: {number: 7, name: 'E2BIG'}}};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
+  });
 
-    it('should render one posix_signal', function() {
-      mechanism = {
-        posix_signal: {
-          name: 'SIG_',
-          signal: '01',
-        },
+  describe('mach_exception meta', () => {
+    it('should render the mach exception number', () => {
+      let mechanism = {
+        type: 'generic',
+        meta: {mach_exception: {exception: 1, subcode: 8, code: 1}},
       };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(1);
-      expect(
-        elem
-          .find('li')
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('signal');
-      expect(
-        elem
-          .find('li')
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('SIG_ (01)');
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render posix_signal and mach_exception', function() {
-      mechanism = {
-        posix_signal: {
-          name: 'SIG_',
-          signal: '01',
-        },
-        mach_exception: {
-          exception_name: 'EXC_!',
+    it('should prefer the exception name if present', () => {
+      let mechanism = {
+        type: 'generic',
+        meta: {
+          mach_exception: {exception: 1, subcode: 8, code: 1, name: 'EXC_BAD_ACCESS'},
         },
       };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(2);
-      expect(
-        elem
-          .find('li')
-          .first()
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('mach exception');
-      expect(
-        elem
-          .find('li')
-          .first()
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('EXC_!');
-      expect(
-        elem
-          .find('li')
-          .last()
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('signal');
-      expect(
-        elem
-          .find('li')
-          .last()
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('SIG_ (01)');
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
+  });
 
-    it('should render generic mechanism', function() {
-      mechanism = {
-        type: 'promise',
-        description: 'unhandledPromiseRejection',
-      };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(1);
-      expect(
-        elem
-          .find('li')
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('promise');
-      expect(
-        elem
-          .find('li')
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('unhandledPromiseRejection');
+  describe('signal meta', () => {
+    it('should render the signal number', () => {
+      let mechanism = {type: 'generic', meta: {signal: {number: 11}}};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render generic mechanism with extra', function() {
-      mechanism = {
-        type: 'promise',
-        description: 'unhandledPromiseRejection',
-        extra: {
-          pid: 0,
-          or: 'anything really',
-        },
-      };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(3);
-      expect(
-        elem
-          .find('li')
-          .first()
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('promise');
-      expect(
-        elem
-          .find('li')
-          .first()
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('unhandledPromiseRejection');
-      expect(
-        elem
-          .find('li')
-          .last()
-          .find('span')
-          .first()
-          .text()
-      ).toEqual('or');
-      expect(
-        elem
-          .find('li')
-          .last()
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('anything really');
+    it('should add the signal code if present', () => {
+      let mechanism = {type: 'generic', meta: {signal: {number: 11, code: 0}}};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
 
-    it('should not render generic mechanism with extra containing object', function() {
-      mechanism = {
-        type: 'promise',
-        description: 'unhandledPromiseRejection',
-        extra: {
-          pid: 0,
-          or: 'anything really',
-          ob: {iam: 'an object'},
-        },
+    it('should prefer signal and code names if present', () => {
+      let mechanism = {
+        type: 'generic',
+        meta: {signal: {number: 11, code: 0, name: 'SIGSEGV', code_name: 'SEGV_NOOP'}},
       };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(3);
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
+  });
 
-    it('should render generic mechanism with unhandled flag true', function() {
-      mechanism = {
-        type: 'promise',
-        description: 'unhandledPromiseRejection',
-        handled: false,
-      };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(2);
-      expect(
-        elem
-          .find('li')
-          .last()
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('no');
+  describe('additional data', () => {
+    it('should render all fields in the data object', () => {
+      let mechanism = {type: 'generic', data: {relevant_address: '0x1'}};
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
 
-    it('should render generic mechanism with unhandled flag false', function() {
-      mechanism = {
-        type: 'promise',
-        description: 'unhandledPromiseRejection',
-        handled: true,
+    it('should skip object-like values', () => {
+      let mechanism = {
+        type: 'generic',
+        data: {
+          a: {x: 11},
+          b: [4, 2],
+          c: new Date(),
+        },
       };
-      elem = mount(<ExceptionMechanism data={mechanism} platform={platform} />);
-      expect(elem.find('li')).toHaveLength(2);
-      expect(
-        elem
-          .find('li')
-          .last()
-          .find('span')
-          .last()
-          .text()
-      ).toEqual('yes');
+      let wrapper = shallow(<ExceptionMechanism data={mechanism} />);
+      expect(wrapper).toMatchSnapshot();
     });
   });
 });
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 7897e6cf00..7cbcf61d3a 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -4,7 +4,8 @@ from __future__ import absolute_import
 
 from exam import fixture
 
-from sentry.interfaces.exception import (SingleException, Exception, slim_exception_data)
+from sentry.interfaces.exception import (SingleException, Exception, slim_exception_data,
+                                         Mechanism, normalize_mechanism_meta, upgrade_legacy_mechanism)
 from sentry.testutils import TestCase
 from sentry.stacktraces import normalize_in_app
 
@@ -277,6 +278,35 @@ ValueError: hello world
         assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'
         assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'
 
+    def test_context_with_mechanism(self):
+        inst = Exception.to_python(
+            dict(
+                values=[
+                    {
+                        'type': 'ValueError',
+                        'value': 'hello world',
+                        'module': 'foo.bar',
+                        'stacktrace': {
+                            'frames': [{
+                                'filename': 'foo/baz.py',
+                                'lineno': 1,
+                                'in_app': True,
+                            }]
+                        },
+                        'mechanism': {
+                            'type': 'generic',
+                        }
+                    }
+                ]
+            )
+        )
+
+        self.create_event(data={
+            'sentry.interfaces.Exception': inst.to_json(),
+        })
+        context = inst.get_api_context()
+        assert context['values'][0]['mechanism']['type'] == 'generic'
+
 
 class SingleExceptionTest(TestCase):
     @fixture
@@ -429,3 +459,358 @@ class SlimExceptionDataTest(TestCase):
                     assert frame.vars is None
                     assert frame.pre_context is None
                     assert frame.post_context is None
+
+
+class MechanismTest(TestCase):
+    def test_path(self):
+        inst = Mechanism.to_python({'type': 'generic'})
+        assert inst.get_path() == 'mechanism'
+
+    def test_empty_mechanism(self):
+        data = {'type': 'generic'}
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_tag(self):
+        data = {'type': 'generic'}
+        inst = Mechanism.to_python(data)
+        assert list(inst.iter_tags()) == [
+            ('mechanism', 'generic')
+        ]
+
+    def test_tag_with_handled(self):
+        data = {
+            'type': 'generic',
+            'handled': False,
+        }
+
+        inst = Mechanism.to_python(data)
+        assert list(inst.iter_tags()) == [
+            ('mechanism', 'generic'),
+            ('handled', 'no')
+        ]
+
+    def test_data(self):
+        data = {
+            'type': 'generic',
+            'data': {'relevant_address': '0x1'},
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_empty_data(self):
+        data = {
+            'type': 'generic',
+            'data': {},
+        }
+
+        assert Mechanism.to_python(data).to_json() == {
+            'type': 'generic'
+        }
+
+    def test_min_mach_meta(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'mach_exception': {
+                    'exception': 10,
+                    'code': 0,
+                    'subcode': 0,
+                }
+            }
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_full_mach_meta(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'mach_exception': {
+                    'exception': 10,
+                    'code': 0,
+                    'subcode': 0,
+                    'name': 'EXC_CRASH'
+                }
+            }
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_min_signal_meta(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'signal': {
+                    'number': 10,
+                    'code': 0,
+                }
+            }
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_full_signal_meta(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'signal': {
+                    'number': 10,
+                    'code': 0,
+                    'name': 'SIGBUS',
+                    'code_name': 'BUS_NOOP',
+                }
+            }
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_min_errno_meta(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'errno': {
+                    'number': 2,
+                }
+            }
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_full_errno_meta(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'errno': {
+                    'number': 2,
+                    'name': 'ENOENT',
+                }
+            }
+        }
+        assert Mechanism.to_python(data).to_json() == data
+
+    def test_upgrade(self):
+        data = {
+            "posix_signal": {
+                "name": "SIGSEGV",
+                "code_name": "SEGV_NOOP",
+                "signal": 11,
+                "code": 0
+            },
+            "relevant_address": "0x1",
+            "mach_exception": {
+                "exception": 1,
+                "exception_name": "EXC_BAD_ACCESS",
+                "subcode": 8,
+                "code": 1
+            }
+        }
+
+        assert upgrade_legacy_mechanism(data) == {
+            "type": "generic",
+            "data": {
+                "relevant_address": "0x1"
+            },
+            "meta": {
+                "mach_exception": {
+                    "exception": 1,
+                    "subcode": 8,
+                    "code": 1,
+                    "name": "EXC_BAD_ACCESS"
+                },
+                "signal": {
+                    "number": 11,
+                    "code": 0,
+                    "name": "SIGSEGV",
+                    "code_name": "SEGV_NOOP"
+                }
+            }
+        }
+
+    def test_normalize_missing(self):
+        data = {'type': 'generic'}
+        normalize_mechanism_meta(data, None)
+        assert data == {'type': 'generic'}
+
+    def test_normalize_errno(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'errno': {
+                    'number': 2
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'linux'})
+        assert data['meta']['errno'] == {
+            'number': 2,
+            'name': 'ENOENT'
+        }
+
+    def test_normalize_errno_override(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'errno': {
+                    'number': 2,
+                    'name': 'OVERRIDDEN',
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'linux'})
+        assert data['meta']['errno'] == {
+            'number': 2,
+            'name': 'OVERRIDDEN',
+        }
+
+    def test_normalize_errno_fail(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'errno': {
+                    'number': 2
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'invalid'})
+        assert data['meta']['errno'] == {
+            'number': 2,
+        }
+
+    def test_normalize_signal(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'signal': {
+                    'number': 11,
+                    'code': 0,
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'macos'})
+        assert data['meta']['signal'] == {
+            'number': 11,
+            'code': 0,
+            'name': 'SIGSEGV',
+            'code_name': 'SEGV_NOOP'
+        }
+
+    def test_normalize_partial_signal(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'signal': {
+                    'number': 11
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'linux'})
+        assert data['meta']['signal'] == {
+            'number': 11,
+            'name': 'SIGSEGV',
+        }
+
+    def test_normalize_signal_override(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'signal': {
+                    'number': 11,
+                    'code': 0,
+                    'name': 'OVERRIDDEN',
+                    'code_name': 'OVERRIDDEN',
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'macos'})
+        assert data['meta']['signal'] == {
+            'number': 11,
+            'code': 0,
+            'name': 'OVERRIDDEN',
+            'code_name': 'OVERRIDDEN',
+        }
+
+    def test_normalize_signal_fail(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'signal': {
+                    'number': 11,
+                    'code': 0,
+                }
+            }
+        }
+
+        normalize_mechanism_meta(data, {'sdk_name': 'invalid'})
+        assert data['meta']['signal'] == {
+            'number': 11,
+            'code': 0,
+        }
+
+    def test_normalize_mach(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'mach_exception': {
+                    'exception': 1,
+                    'subcode': 8,
+                    'code': 1,
+                }
+            }
+        }
+
+        # We do not need SDK information here because mach exceptions only
+        # occur on Darwin
+
+        normalize_mechanism_meta(data, None)
+        assert data['meta']['mach_exception'] == {
+            'exception': 1,
+            'subcode': 8,
+            'code': 1,
+            'name': 'EXC_BAD_ACCESS'
+        }
+
+    def test_normalize_mach_override(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'mach_exception': {
+                    'exception': 1,
+                    'subcode': 8,
+                    'code': 1,
+                    'name': 'OVERRIDDEN',
+                }
+            }
+        }
+
+        # We do not need SDK information here because mach exceptions only
+        # occur on Darwin
+
+        normalize_mechanism_meta(data, None)
+        assert data['meta']['mach_exception'] == {
+            'exception': 1,
+            'subcode': 8,
+            'code': 1,
+            'name': 'OVERRIDDEN'
+        }
+
+    def test_normalize_mach_fail(self):
+        data = {
+            'type': 'generic',
+            'meta': {
+                'mach_exception': {
+                    'exception': 99,
+                    'subcode': 8,
+                    'code': 1,
+                }
+            }
+        }
+
+        # We do not need SDK information here because mach exceptions only
+        # occur on Darwin
+
+        normalize_mechanism_meta(data, None)
+        assert data['meta']['mach_exception'] == {
+            'exception': 99,
+            'subcode': 8,
+            'code': 1,
+        }
diff --git a/tests/sentry/lang/native/test_applecrashreport.py b/tests/sentry/lang/native/test_applecrashreport.py
index 332f8077b2..b1c87127f5 100644
--- a/tests/sentry/lang/native/test_applecrashreport.py
+++ b/tests/sentry/lang/native/test_applecrashreport.py
@@ -672,6 +672,44 @@ def test__convert_debug_meta_to_binary_image_row():
 
 
 def test__get_exception_info():
+    acr = AppleCrashReport(
+        exceptions=[
+            {
+                "value": "Attempted to dereference garbage pointer 0x10.",
+                "mechanism": {
+                    "type": "mach",
+                    "data": {
+                        "relevant_address": "0x10"
+                    },
+                    "meta": {
+                        "signal": {
+                            "number": 10,
+                            "code": 0,
+                            "name": "SIGBUS",
+                            "code_name": "BUS_NOOP"
+                        },
+                        "mach_exception": {
+                            "exception": 1,
+                            "name": "EXC_BAD_ACCESS",
+                            "subcode": 8,
+                            "code": 16
+                        }
+                    }
+                },
+                "type": "EXC_BAD_ACCESS",
+                "thread_id": 0
+            }
+        ]
+    )
+    exception_info = acr._get_exception_info()
+    assert exception_info == 'Exception Type: EXC_BAD_ACCESS (SIGBUS)\n\
+Exception Codes: BUS_NOOP at 0x10\n\
+Crashed Thread: 0\n\n\
+Application Specific Information:\n\
+Attempted to dereference garbage pointer 0x10.'
+
+
+def test__get_exception_info_legacy_mechanism():
     acr = AppleCrashReport(
         exceptions=[
             {
@@ -709,10 +747,6 @@ def test__get_exception_info_partial():
         exceptions=[
             {
                 "value": "Attempted to dereference garbage pointer 0x10.",
-                "mechanism": {
-                    "posix_signal": None,
-                    "mach_exception": None,
-                },
                 "type": "EXC_BAD_ACCESS",
                 "thread_id": 0
             }
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 6a50aa34ba..6c60307bc3 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -103,18 +103,20 @@ class BasicResolvingIntegrationTest(TestCase):
                         },
                         "type": "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
@@ -175,10 +177,10 @@ class BasicResolvingIntegrationTest(TestCase):
             'sentry_environmentproject': 1,
             'sentry_eventtag': 1,
             'sentry_eventuser': 1,
-            'sentry_filtervalue': 7,
+            'sentry_filtervalue': 8,
             'sentry_groupedmessage': 1,
             'sentry_message': 1,
-            'sentry_messagefiltervalue': 7,
+            'sentry_messagefiltervalue': 8,
             'sentry_userreport': 1
         }):
             resp = self._postWithHeader(event_data)
@@ -312,18 +314,20 @@ class BasicResolvingIntegrationTest(TestCase):
                         },
                         "type": "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
@@ -476,18 +480,20 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                         },
                         "type": "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
@@ -670,18 +676,20 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                         },
                         "type": "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
@@ -858,18 +866,20 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                         },
                         "type": "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
@@ -993,18 +1003,20 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                         },
                         "type": "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
@@ -1303,3 +1315,198 @@ class RealResolvingIntegrationTest(TestCase):
         assert frames[0].filename == 'c:\\projects\\breakpad-tools\\windows\\crash\\main.cpp'
         assert frames[0].abs_path == 'c:\\projects\\breakpad-tools\\windows\\crash\\main.cpp'
         assert frames[0].lineno == 35
+
+
+class ExceptionMechanismIntegrationTest(TestCase):
+
+    def test_full_mechanism(self):
+        event_data = {
+            "sentry.interfaces.User": {
+                "ip_address": "31.172.207.97"
+            },
+            "extra": {},
+            "project": self.project.id,
+            "platform": "cocoa",
+            "debug_meta": {
+                "sdk_info": {
+                    "dsym_type": "macho",
+                    "sdk_name": "iOS",
+                    "version_major": 9,
+                    "version_minor": 3,
+                    "version_patchlevel": 0
+                }
+            },
+            "sentry.interfaces.Exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": []
+                        },
+                        "type": "NSRangeException",
+                        "mechanism": {
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT"
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
+                            }
+                        },
+                        "value": (
+                            "*** -[__NSArray0 objectAtIndex:]: index 3 "
+                            "beyond bounds for empty NSArray"
+                        )
+                    }
+                ]
+            }
+        }
+
+        resp = self._postWithHeader(event_data)
+        assert resp.status_code == 200
+
+        event = Event.objects.get()
+
+        mechanism = event.interfaces['sentry.interfaces.Exception'].values[0].mechanism
+
+        assert mechanism.type == 'mach'
+        assert mechanism.meta['signal']['number'] == 6
+        assert mechanism.meta['signal']['code'] == 0
+        assert mechanism.meta['signal']['name'] == 'SIGABRT'
+        assert mechanism.meta['mach_exception']['exception'] == 10
+        assert mechanism.meta['mach_exception']['code'] == 0
+        assert mechanism.meta['mach_exception']['subcode'] == 0
+        assert mechanism.meta['mach_exception']['name'] == 'EXC_CRASH'
+
+    def test_mechanism_name_expansion(self):
+        event_data = {
+            "sentry.interfaces.User": {
+                "ip_address": "31.172.207.97"
+            },
+            "extra": {},
+            "project": self.project.id,
+            "platform": "cocoa",
+            "debug_meta": {
+                "sdk_info": {
+                    "dsym_type": "macho",
+                    "sdk_name": "iOS",
+                    "version_major": 9,
+                    "version_minor": 3,
+                    "version_patchlevel": 0
+                }
+            },
+            "sentry.interfaces.Exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": []
+                        },
+                        "type": "NSRangeException",
+                        "mechanism": {
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 10,
+                                    "code": 0
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10
+                                }
+                            }
+                        },
+                        "value": (
+                            "*** -[__NSArray0 objectAtIndex:]: index 3 "
+                            "beyond bounds for empty NSArray"
+                        )
+                    }
+                ]
+            }
+        }
+
+        resp = self._postWithHeader(event_data)
+        assert resp.status_code == 200
+
+        event = Event.objects.get()
+
+        mechanism = event.interfaces['sentry.interfaces.Exception'].values[0].mechanism
+
+        assert mechanism.type == 'mach'
+        assert mechanism.meta['signal']['number'] == 10
+        assert mechanism.meta['signal']['code'] == 0
+        assert mechanism.meta['signal']['name'] == 'SIGBUS'
+        assert mechanism.meta['signal']['code_name'] == 'BUS_NOOP'
+        assert mechanism.meta['mach_exception']['exception'] == 10
+        assert mechanism.meta['mach_exception']['code'] == 0
+        assert mechanism.meta['mach_exception']['subcode'] == 0
+        assert mechanism.meta['mach_exception']['name'] == 'EXC_CRASH'
+
+    def test_legacy_mechanism(self):
+        event_data = {
+            "sentry.interfaces.User": {
+                "ip_address": "31.172.207.97"
+            },
+            "extra": {},
+            "project": self.project.id,
+            "platform": "cocoa",
+            "debug_meta": {
+                "sdk_info": {
+                    "dsym_type": "macho",
+                    "sdk_name": "iOS",
+                    "version_major": 9,
+                    "version_minor": 3,
+                    "version_patchlevel": 0
+                }
+            },
+            "sentry.interfaces.Exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": []
+                        },
+                        "type": "NSRangeException",
+                        "mechanism": {
+                            "posix_signal": {
+                                "signal": 6,
+                                "code": 0,
+                                "name": "SIGABRT"
+                            },
+                            "mach_exception": {
+                                "subcode": 0,
+                                "code": 0,
+                                "exception": 10,
+                                "exception_name": "EXC_CRASH"
+                            }
+                        },
+                        "value": (
+                            "*** -[__NSArray0 objectAtIndex:]: index 3 "
+                            "beyond bounds for empty NSArray"
+                        )
+                    }
+                ]
+            }
+        }
+
+        resp = self._postWithHeader(event_data)
+        assert resp.status_code == 200
+
+        event = Event.objects.get()
+
+        mechanism = event.interfaces['sentry.interfaces.Exception'].values[0].mechanism
+
+        # NOTE: legacy mechanisms are always classified "generic"
+        assert mechanism.type == 'generic'
+        assert mechanism.meta['signal']['number'] == 6
+        assert mechanism.meta['signal']['code'] == 0
+        assert mechanism.meta['signal']['name'] == 'SIGABRT'
+        assert mechanism.meta['mach_exception']['exception'] == 10
+        assert mechanism.meta['mach_exception']['code'] == 0
+        assert mechanism.meta['mach_exception']['subcode'] == 0
+        assert mechanism.meta['mach_exception']['name'] == 'EXC_CRASH'
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index 99a912e9ba..2344dffeeb 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -131,18 +131,20 @@ class BasicResolvingFileTest(TestCase):
                         "type":
                         "NSRangeException",
                         "mechanism": {
-                            "posix_signal": {
-                                "signal": 6,
-                                "code": 0,
-                                "name": "SIGABRT",
-                                "code_name": None
-                            },
-                            "type": "cocoa",
-                            "mach_exception": {
-                                "subcode": 0,
-                                "code": 0,
-                                "exception": 10,
-                                "exception_name": "EXC_CRASH"
+                            "type": "mach",
+                            "meta": {
+                                "signal": {
+                                    "number": 6,
+                                    "code": 0,
+                                    "name": "SIGABRT",
+                                    "code_name": None
+                                },
+                                "mach_exception": {
+                                    "subcode": 0,
+                                    "code": 0,
+                                    "exception": 10,
+                                    "name": "EXC_CRASH"
+                                }
                             }
                         },
                         "value": (
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index 8f9d3ec7ac..3aea343328 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -189,6 +189,10 @@ def test_minidump_linux():
             ]
         },
         'exception': {
+            'mechanism': {
+                'type': 'minidump',
+                'handled': False
+            },
             'stacktrace': {
                 'frames': [
                     {
@@ -337,6 +341,10 @@ def test_minidump_macos():
             ]
         },
         'exception': {
+            'mechanism': {
+                'type': 'minidump',
+                'handled': False
+            },
             'stacktrace': {
                 'frames': [
                     {
@@ -436,6 +444,10 @@ def test_minidump_windows():
             ]
         },
         'exception': {
+            'mechanism': {
+                'type': 'minidump',
+                'handled': False
+            },
             'stacktrace': {
                 'frames': [
                     {
