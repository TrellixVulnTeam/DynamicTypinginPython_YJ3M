commit 3e2f89e9d2d654c37dce7ca103e4b1cade2d476c
Author: Bruno Garcia <bruno@brunogarcia.com>
Date:   Mon May 27 15:55:59 2019 +0200

    feat: Upload event attachment (#13384)

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 667d53488f..1a6ac8efef 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -40,7 +40,7 @@ from sentry.models import (
     Activity, Environment, Event, EventDict, EventError, EventMapping, EventUser, Group,
     GroupEnvironment, GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
     Project, Release, ReleaseEnvironment, ReleaseProject,
-    ReleaseProjectEnvironment, UserReport, Organization,
+    ReleaseProjectEnvironment, UserReport, Organization, EventAttachment
 )
 from sentry.plugins import plugins
 from sentry.signals import event_discarded, event_saved, first_event_received
@@ -819,6 +819,14 @@ class EventManager(object):
             environment=environment,
         )
 
+        # Update any event attachment that arrived before the event group was defined.
+        EventAttachment.objects.filter(
+            project_id=project.id,
+            event_id=event_id,
+        ).update(
+            group_id=group.id,
+        )
+
         # save the event unless its been sampled
         if not is_sample:
             try:
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 66ddc8b6c6..11b8a7ce1f 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -284,6 +284,30 @@ class BaseTestCase(Fixtures, Exam):
                 **extra
             )
 
+    def _postEventAttachmentWithHeader(self, attachment, **extra):
+        path = reverse(
+            'sentry-api-event-attachment',
+            kwargs={
+                'project_id': self.project.id,
+                'event_id': self.event.id})
+
+        key = self.projectkey.public_key
+        secret = self.projectkey.secret_key
+
+        with self.tasks():
+            return self.client.post(
+                path,
+                attachment,
+                # HTTP_USER_AGENT=DEFAULT_USER_AGENT,
+                HTTP_X_SENTRY_AUTH=get_auth_header(
+                    '_postWithHeader/0.0.0',
+                    key,
+                    secret,
+                    7,
+                ),
+                **extra
+            )
+
     def _getWithReferer(self, data, key=None, referer='sentry.io', protocol='4'):
         if key is None:
             key = self.projectkey.public_key
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 7a36936be6..76768a091a 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -41,7 +41,7 @@ from sentry.lang.native.unreal import process_unreal_crash, merge_apple_crash_re
     unreal_attachment_type, merge_unreal_context_event, merge_unreal_logs_event
 from sentry.lang.native.minidump import merge_attached_event, merge_attached_breadcrumbs, write_minidump_placeholder, \
     MINIDUMP_ATTACHMENT_TYPE
-from sentry.models import Project, OrganizationOption, Organization
+from sentry.models import Project, OrganizationOption, Organization, File, EventAttachment, Event
 from sentry.signals import (
     event_accepted, event_dropped, event_filtered, event_received)
 from sentry.quotas.base import RateLimit
@@ -572,6 +572,53 @@ class StoreView(APIView):
                              key, remote_addr, helper, attachments)
 
 
+class EventAttachmentStoreView(StoreView):
+
+    def post(self, request, project, event_id, **kwargs):
+        if not features.has('organizations:event-attachments',
+                            project.organization, actor=request.user):
+            raise APIForbidden("Event attachments are not enabled for this organization.")
+
+        if len(request.FILES) == 0:
+            return HttpResponse(status=400)
+
+        for name, uploaded_file in six.iteritems(request.FILES):
+            file = File.objects.create(
+                name=uploaded_file.name,
+                type='event.attachment',
+                headers={'Content-Type': uploaded_file.content_type},
+            )
+            file.putfile(uploaded_file)
+
+            # To avoid a race with EventManager which tries to set the group_id on attachments received before
+            # the event, first insert the attachment, then lookup for the event for its group.
+            event_attachment = EventAttachment.objects.create(
+                project_id=project.id,
+                event_id=event_id,
+                name=uploaded_file.name,
+                file=file,
+            )
+
+            try:
+                event = Event.objects.get(
+                    project_id=project.id,
+                    event_id=event_id,
+                )
+            except Event.DoesNotExist:
+                pass
+            else:
+                # If event was created but the group not defined, EventManager will take care of setting the
+                # group to all dangling attachments
+                if event.group_id is not None:
+                    EventAttachment.objects.filter(
+                        id=event_attachment.id,
+                    ).update(
+                        group_id=event.group_id,
+                    )
+
+        return HttpResponse(status=201)
+
+
 class MinidumpView(StoreView):
     auth_helper_cls = MinidumpAuthHelper
     content_types = ('multipart/form-data', )
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index bd8903ffa5..5a6fbc0525 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -108,6 +108,11 @@ urlpatterns += patterns(
         api.MinidumpView.as_view(),
         name='sentry-api-minidump'
     ),
+    url(
+        r'^api/(?P<project_id>[\w_-]+)/events/(?P<event_id>[\w-]+)/attachments/$',
+        api.EventAttachmentStoreView.as_view(),
+        name='sentry-api-event-attachment'
+    ),
     url(
         r'^api/(?P<project_id>[\w_-]+)/unreal/(?P<sentry_key>\w+)/$',
         api.UnrealView.as_view(),
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index eec9c46ca2..97dc922ffc 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -20,7 +20,7 @@ from sentry.models import (
     Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment,
     GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
     GroupTombstone, EventMapping, Integration, Release,
-    ReleaseProjectEnvironment, OrganizationIntegration, UserReport,
+    ReleaseProjectEnvironment, OrganizationIntegration, UserReport, EventAttachment, File
 )
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase
@@ -999,6 +999,28 @@ class EventManagerTest(TestCase):
 
         assert UserReport.objects.get(event_id=event_id).environment == environment
 
+    def test_event_attachment_gets_group_id(self):
+        project = self.create_project()
+        event_id = 'a' * 32
+        uploaded_file_name = 'attachment.zip'
+        EventAttachment.objects.create(
+            project_id=project.id,
+            event_id=event_id,
+            name=uploaded_file_name,
+            file=File.objects.create(
+                name=uploaded_file_name,
+            ),
+        )
+
+        event = self.store_event(
+            data=make_event(
+                event_id=event_id
+            ),
+            project_id=project.id
+        )
+
+        assert EventAttachment.objects.get(event_id=event_id).group_id == event.group_id
+
     def test_default_event_type(self):
         manager = EventManager(make_event(message='foo bar'))
         manager.normalize()
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 6b78da4d08..3da13546fa 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -5,11 +5,13 @@ from __future__ import absolute_import
 import mock
 
 from django.core.urlresolvers import reverse
+from django.core.files.uploadedfile import SimpleUploadedFile
 from exam import fixture
 from mock import Mock
+from six import BytesIO
 
 from sentry.coreapi import APIRateLimited
-from sentry.models import ProjectKey
+from sentry.models import ProjectKey, EventAttachment, Event
 from sentry.signals import event_accepted, event_dropped, event_filtered
 from sentry.testutils import (assert_mock_called_once_with_partial, TestCase)
 from sentry.utils import json
@@ -728,6 +730,95 @@ class CrossDomainXmlTest(TestCase):
         )
 
 
+class EventAttachmentStoreViewTest(TestCase):
+    @fixture
+    def path(self):
+        # TODO: Having the event set here means the case where event isnt' created
+        # yet isn't covered by this test class
+        return reverse('sentry-api-event-attachment',
+                       kwargs={'project_id': self.project.id, 'event_id': self.event.event_id})
+
+    def has_attachment(self):
+        return EventAttachment.objects.filter(
+            project_id=self.project.id, event_id=self.event.id).exists()
+
+    def test_event_attachments_feature_creates_attachment(self):
+        out = BytesIO()
+        out.write('hi')
+        with self.feature('organizations:event-attachments'):
+            response = self._postEventAttachmentWithHeader({
+                'attachment1':
+                SimpleUploadedFile('mapping.txt', out.getvalue(), content_type='text/plain'),
+            }, format='multipart')
+
+        assert response.status_code == 201
+        assert self.has_attachment()
+
+    def test_event_attachments_without_feature_returns_forbidden(self):
+        out = BytesIO()
+        out.write('hi')
+        with self.feature({'organizations:event-attachments': False}):
+            response = self._postEventAttachmentWithHeader({
+                'attachment1':
+                SimpleUploadedFile('mapping.txt', out.getvalue(), content_type='text/plain'),
+            }, format='multipart')
+
+        assert response.status_code == 403
+        assert not self.has_attachment()
+
+    def test_event_attachments_without_files_returns_400(self):
+        out = BytesIO()
+        out.write('hi')
+        with self.feature('organizations:event-attachments'):
+            response = self._postEventAttachmentWithHeader({}, format='multipart')
+
+        assert response.status_code == 400
+        assert not self.has_attachment()
+
+    def test_event_attachments_event_doesnt_exist_creates_attachment(self):
+        with self.feature('organizations:event-attachments'):
+            self.path = self.path.replace(self.event.event_id, 'z' * 32)
+            out = BytesIO()
+            out.write('hi')
+            response = self._postEventAttachmentWithHeader({
+                'attachment1':
+                    SimpleUploadedFile('mapping.txt', out.getvalue(), content_type='text/plain'),
+            }, format='multipart')
+
+        assert response.status_code == 201
+        assert self.has_attachment()
+
+    def test_event_attachments_event_empty_file_creates_attachment(self):
+        with self.feature('organizations:event-attachments'):
+            response = self._postEventAttachmentWithHeader({
+                'attachment1':
+                    SimpleUploadedFile(
+                        'mapping.txt',
+                        BytesIO().getvalue(),
+                        content_type='text/plain'),
+            }, format='multipart')
+
+        assert response.status_code == 201
+        assert self.has_attachment()
+
+    def test_event_attachments_event_exists_without_group_id(self):
+        out = BytesIO()
+        out.write('hi')
+        event_id = 'z' * 32
+        Event.objects.create(project_id=self.project.id, event_id=event_id)
+        with self.feature('organizations:event-attachments'):
+            self.path = self.path.replace(self.event.event_id, event_id)
+            response = self._postEventAttachmentWithHeader({
+                'attachment1':
+                    SimpleUploadedFile('mapping.txt', out.getvalue(), content_type='text/plain'),
+            }, format='multipart')
+
+        assert response.status_code == 201
+        assert EventAttachment.objects.get(
+            project_id=self.project.id,
+            event_id=self.event.id).group_id is None
+
+
 class RobotsTxtTest(TestCase):
     @fixture
     def path(self):
