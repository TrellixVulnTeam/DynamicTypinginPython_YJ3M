commit 0165a57e9c79df8ad2d4d3d8128b7f891f676d1e
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 28 12:29:01 2015 -0800

    Initial framing for my issues

diff --git a/src/sentry/api/bases/__init__.py b/src/sentry/api/bases/__init__.py
index 666352d928..bbaa3c7e4c 100644
--- a/src/sentry/api/bases/__init__.py
+++ b/src/sentry/api/bases/__init__.py
@@ -2,5 +2,6 @@ from __future__ import absolute_import
 
 from .group import *  # NOQA
 from .organization import *  # NOQA
+from .organizationmember import *  # NOQA
 from .project import *  # NOQA
 from .team import *  # NOQA
diff --git a/src/sentry/api/bases/organizationmember.py b/src/sentry/api/bases/organizationmember.py
new file mode 100644
index 0000000000..e94cc9bb88
--- /dev/null
+++ b/src/sentry/api/bases/organizationmember.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from django.db.models import Q
+
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import OrganizationMember
+
+from .organization import OrganizationEndpoint
+
+
+class OrganizationMemberEndpoint(OrganizationEndpoint):
+    def convert_args(self, request, organization_slug, member_id, *args, **kwargs):
+        args, kwargs = super(OrganizationMemberEndpoint, self).convert_args(
+            request, organization_slug
+        )
+
+        try:
+            kwargs['member'] = self._get_member(
+                request, kwargs['organization'], member_id
+            )
+        except OrganizationMember.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return (args, kwargs)
+
+    def _get_member(self, request, organization, member_id):
+        if member_id == 'me':
+            queryset = OrganizationMember.objects.filter(
+                organization=organization,
+                user__id=request.user.id,
+                user__is_active=True,
+            )
+        else:
+            queryset = OrganizationMember.objects.filter(
+                Q(user__is_active=True) | Q(user__isnull=True),
+                organization=organization,
+                id=member_id,
+            )
+        return queryset.select_related('user').get()
diff --git a/src/sentry/api/endpoints/organization_member_issues_assigned.py b/src/sentry/api/endpoints/organization_member_issues_assigned.py
new file mode 100644
index 0000000000..d2042a0752
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_member_issues_assigned.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from sentry.api.bases import OrganizationMemberEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.paginator import DateTimePaginator
+from sentry.models import Group, OrganizationMemberTeam, Project
+
+
+class OrganizationMemberIssuesAssignedEndpoint(OrganizationMemberEndpoint):
+    def get(self, request, organization, member):
+        """
+        Return a list of issues assigned to the given member.
+        """
+        project_list = Project.objects.filter(
+            organization=organization,
+            team__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+                is_active=True,
+            ).values('team')
+        )
+
+        queryset = Group.objects.filter(
+            assignee_set__user=member.user,
+            assignee_set__project__in=project_list,
+        ).extra(
+            select={'sort_by': 'sentry_groupasignee.date_added'},
+        ).order_by('-sort_by')
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-sort_by',
+            paginator_cls=DateTimePaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/endpoints/organization_member_issues_bookmarked.py b/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
new file mode 100644
index 0000000000..4f435b27e7
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_member_issues_bookmarked.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from sentry.api.bases import OrganizationMemberEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.paginator import DateTimePaginator
+from sentry.models import Group, OrganizationMemberTeam, Project
+
+
+class OrganizationMemberIssuesBookmarkedEndpoint(OrganizationMemberEndpoint):
+    def get(self, request, organization, member):
+        """
+        Return a list of issues assigned to the given member.
+        """
+        project_list = Project.objects.filter(
+            organization=organization,
+            team__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+                is_active=True,
+            ).values('team')
+        )
+
+        queryset = Group.objects.filter(
+            bookmark_set__user=member.user,
+            bookmark_set__project__in=project_list,
+        ).extra(
+            select={'sort_by': 'sentry_groupbookmark.date_added'},
+        ).order_by('-sort_by')
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-sort_by',
+            paginator_cls=DateTimePaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/endpoints/organization_member_issues_viewed.py b/src/sentry/api/endpoints/organization_member_issues_viewed.py
new file mode 100644
index 0000000000..c3a6220aa4
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_member_issues_viewed.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from sentry.api.bases import OrganizationMemberEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.paginator import DateTimePaginator
+from sentry.models import Group, OrganizationMemberTeam, Project
+
+
+class OrganizationMemberIssuesViewedEndpoint(OrganizationMemberEndpoint):
+    def get(self, request, organization, member):
+        """
+        Return a list of issues assigned to the given member.
+        """
+        project_list = Project.objects.filter(
+            organization=organization,
+            team__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+                is_active=True,
+            ).values('team')
+        )
+
+        queryset = Group.objects.filter(
+            groupseen__user=member.user,
+            groupseen__project__in=project_list,
+        ).extra(
+            select={'sort_by': 'sentry_groupseen.last_seen'},
+        ).order_by('-sort_by')
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-sort_by',
+            paginator_cls=DateTimePaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 63a8ac4686..d38bc58022 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -24,6 +24,9 @@ from .endpoints.organization_access_request_details import OrganizationAccessReq
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
 from .endpoints.organization_member_index import OrganizationMemberIndexEndpoint
+from .endpoints.organization_member_issues_assigned import OrganizationMemberIssuesAssignedEndpoint
+from .endpoints.organization_member_issues_bookmarked import OrganizationMemberIssuesBookmarkedEndpoint
+from .endpoints.organization_member_issues_viewed import OrganizationMemberIssuesViewedEndpoint
 from .endpoints.organization_member_team_details import OrganizationMemberTeamDetailsEndpoint
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
@@ -96,6 +99,15 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>[^\/]+)/$',
         OrganizationMemberDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-member-details'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>[^\/]+)/issues/assigned/$',
+        OrganizationMemberIssuesAssignedEndpoint.as_view(),
+        name='sentry-api-0-organization-member-issues-assigned'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>[^\/]+)/issues/bookmarked/$',
+        OrganizationMemberIssuesBookmarkedEndpoint.as_view(),
+        name='sentry-api-0-organization-member-issues-bookmarked'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>[^\/]+)/issues/viewed/$',
+        OrganizationMemberIssuesViewedEndpoint.as_view(),
+        name='sentry-api-0-organization-member-issues-viewed'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/members/(?P<member_id>[^\/]+)/teams/(?P<team_slug>[^\/]+)/$',
         OrganizationMemberTeamDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-member-team-details'),
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
new file mode 100644
index 0000000000..3ae1b3e698
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -0,0 +1,120 @@
+import React from 'react';
+import Reflux from 'reflux';
+import {Link} from 'react-router';
+
+import TimeSince from './timeSince';
+
+import GroupStore from '../stores/groupStore';
+
+const CompactIssue = React.createClass({
+  propTypes: {
+    id: React.PropTypes.string.isRequired,
+  },
+
+  mixins: [
+    Reflux.listenTo(GroupStore, 'onGroupChange')
+  ],
+
+  getInitialState() {
+    return {
+      data: GroupStore.get(this.props.id)
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.id != this.props.id) {
+      this.setState({
+        data: GroupStore.get(this.props.id)
+      });
+    }
+  },
+
+  onGroupChange(itemIds) {
+    if (!itemIds.has(this.props.id)) {
+      return;
+    }
+    let id = this.props.id;
+    let data = GroupStore.get(id);
+    this.setState({
+      data: data,
+    });
+  },
+
+  render() {
+    let data = this.state.data;
+
+    let className = 'group row';
+    if (data.isBookmarked) {
+      className += ' isBookmarked';
+    }
+    if (data.hasSeen) {
+      className += ' hasSeen';
+    }
+    if (data.status === 'resolved') {
+      className += ' isResolved';
+    }
+    if (data.status === 'muted') {
+      className += ' isMuted';
+    }
+
+    className += ' level-' + data.level;
+
+    let {id, orgId} = this.props;
+    let projectId = data.project.slug;
+
+    return (
+      <div className={className} onClick={this.toggleSelect}>
+        <div className="col-md-7 col-xs-8 event-details">
+          <h3 className="truncate">
+            <Link to={`/${orgId}/${projectId}/issues/${data.id}/`}>
+              <span className="error-level truncate">{data.level}</span>
+              <span className="icon icon-soundoff"></span>
+              <span className="icon icon-bookmark"></span>
+              {data.title}
+            </Link>
+          </h3>
+          <div className="event-message truncate">
+            <span className="message">{data.culprit}</span>
+          </div>
+          <div className="event-extra">
+            <ul>
+              <li>
+                <span className="icon icon-clock"></span>
+                <TimeSince date={data.lastSeen} />
+                &nbsp;&mdash;&nbsp;
+                <TimeSince date={data.firstSeen} suffix="old" />
+              </li>
+              {data.numComments !== 0 &&
+                <li>
+                  <Link to={`/${orgId}/${projectId}/issues/${id}/activity/`} className="comments">
+                    <span className="icon icon-comments"></span>
+                    <span className="tag-count">{data.numComments}</span>
+                  </Link>
+                </li>
+              }
+              {data.logger &&
+                <li className="event-annotation">
+                  <Link to={`/${orgId}/${projectId}/`} query={{query: 'logger:' + data.logger}}>
+                    {data.logger}
+                  </Link>
+                </li>
+              }
+              {data.annotations.map((annotation, key) => {
+                return (
+                  <li className="event-annotation"
+                      dangerouslySetInnerHTML={{__html: annotation}}
+                      key={key} />
+                );
+              })}
+            </ul>
+          </div>
+        </div>
+        <div className="event-assignee col-md-1 hidden-sm hidden-xs">
+
+        </div>
+      </div>
+    );
+  }
+});
+
+export default CompactIssue;
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
new file mode 100644
index 0000000000..36d3bd4bdc
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -0,0 +1,106 @@
+import React from 'react';
+
+import api from '../api';
+import CompactIssue from './compactIssue';
+import GroupStore from '../stores/groupStore';
+import LoadingError from './loadingError';
+import LoadingIndicator from './loadingIndicator';
+import Pagination from './pagination';
+import {t} from '../locale';
+
+const IssueList = React.createClass({
+  getDefaultProps() {
+    return {
+      pagination: true,
+    };
+  },
+
+  getInitialState() {
+    return {
+      issueIds: [],
+      loading: true,
+      error: false,
+      pageLinks: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.props.params.orgId !== nextProps.params.orgId) {
+      this.remountComponent();
+    }
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    api.request(this.props.endpoint, {
+      method: 'GET',
+      success: (data, _, jqXHR) => {
+        GroupStore.add(data);
+
+        this.setState({
+          loading: false,
+          error: false,
+          issueIds: data.map(item => item.id),
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  renderResults() {
+    let body;
+    let params = this.props.params;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.issueIds.length > 0) {
+      body = (
+        <ul>
+          {this.state.issueIds.map((id) => {
+            return <CompactIssue key={id} id={id} orgId={params.orgId} />;
+          })}
+        </ul>
+      );
+    }
+    else
+      body = this.renderEmpty();
+
+    return body;
+  },
+
+  renderLoading() {
+    return <LoadingIndicator />;
+  },
+
+  renderEmpty() {
+    return <p>{t('Nothing to show here, move along.')}</p>;
+  },
+
+  render() {
+    return (
+      <div>
+        {this.renderResults()}
+        {this.props.pagination && this.state.pageLinks &&
+          <Pagination pageLinks={this.state.pageLinks} />
+        }
+      </div>
+    );
+  }
+});
+
+export default IssueList;
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index eeba690a99..ecc03d98d0 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -1,5 +1,4 @@
 import React from 'react';
-
 import ListLink from '../listLink';
 import OrganizationState from '../../mixins/organizationState';
 import ConfigStore from '../../stores/configStore';
@@ -31,6 +30,12 @@ const HomeSidebar = React.createClass({
             <ListLink to={`/organizations/${orgId}/stats/`}>{t('Stats')}</ListLink>
           }
         </ul>
+        <h6 className="nav-header">{t('My Issues')}</h6>
+        <ul className="nav nav-stacked">
+          <ListLink to={`/organizations/${orgId}/issues/assigned/`}>{t('Assigned to Me')}</ListLink>
+          <ListLink to={`/organizations/${orgId}/issues/bookmarks/`}>{t('Bookmarks')}</ListLink>
+          <ListLink to={`/organizations/${orgId}/issues/history/`}>{t('History')}</ListLink>
+        </ul>
         {access.has('org:read') &&
           <div>
             <h6 className="nav-header">{t('Manage')}</h6>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 4f15a43055..4259f08935 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -12,6 +12,9 @@ import GroupEvents from './views/groupEvents';
 import GroupTags from './views/groupTags';
 import GroupTagValues from './views/groupTagValues';
 import GroupUserReports from './views/groupUserReports';
+import MyIssuesAssignedToMe from './views/myIssues/assignedToMe';
+import MyIssuesBookmarked from './views/myIssues/bookmarked';
+import MyIssuesViewed from './views/myIssues/viewed';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationStats from './views/organizationStats';
@@ -41,6 +44,9 @@ function appendTrailingSlash(nextState, replaceState) {
 let routes = (
   <Route path="/" component={App}>
     <Route path="/organizations/:orgId/" component={OrganizationDetails}>
+      <Route path="issues/assigned/" component={MyIssuesAssignedToMe} />
+      <Route path="issues/bookmarks/" component={MyIssuesBookmarked} />
+      <Route path="issues/history/" component={MyIssuesViewed} />
       <Route path="stats/" component={OrganizationStats} />
       <Route path="rate-limits/" component={OrganizationRateLimits} />
     </Route>
diff --git a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
new file mode 100644
index 0000000000..afa6bf0131
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import GroupStore from '../../stores/groupStore';
+import IssueList from '../../components/issueList';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+
+const AssignedToMe = React.createClass({
+  componentWillUnmount() {
+    GroupStore.reset();
+  },
+
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/`;
+  },
+
+  render() {
+    return (
+      <OrganizationHomeContainer>
+        <h1>Assigned to Me</h1>
+        <IssueList endpoint={this.getEndpoint()} {...this.props} />
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default AssignedToMe;
diff --git a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
new file mode 100644
index 0000000000..3ad686b586
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import GroupStore from '../../stores/groupStore';
+import IssueList from '../../components/issueList';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+
+const Bookmarked = React.createClass({
+  componentWillUnmount() {
+    GroupStore.reset();
+  },
+
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/members/me/issues/bookmarked/`;
+  },
+
+  render() {
+    return (
+      <OrganizationHomeContainer>
+        <h1>Bookmarks</h1>
+        <IssueList endpoint={this.getEndpoint()} {...this.props} />
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default Bookmarked;
diff --git a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
new file mode 100644
index 0000000000..d80bc72ed3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import GroupStore from '../../stores/groupStore';
+import IssueList from '../../components/issueList';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+
+const Viewed = React.createClass({
+  componentWillUnmount() {
+    GroupStore.reset();
+  },
+
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/members/me/issues/viewed/`;
+  },
+
+  render() {
+    return (
+      <OrganizationHomeContainer>
+        <h1>History</h1>
+        <IssueList endpoint={this.getEndpoint()} {...this.props} />
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default Viewed;
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index 441700f5f2..5f7bc9a943 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -178,7 +178,7 @@ const ProjectReleases = React.createClass({
           </div>
         </div>
         {this.renderStreamBody()}
-        <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
+        <Pagination pageLinks={this.state.pageLinks} />
       </div>
     );
   }
