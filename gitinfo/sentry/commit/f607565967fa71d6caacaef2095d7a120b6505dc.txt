commit f607565967fa71d6caacaef2095d7a120b6505dc
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri May 27 14:15:01 2016 -0700

    Sourcemap tool tip now only shows source map url/name

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 90cffe99c9..292e9ddb92 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -28,7 +28,7 @@ const Frame = React.createClass({
     TooltipMixin({
       html: true,
       selector: '.tip',
-      trigger: 'click'
+      trigger: 'hover'
     })
   ],
 
@@ -68,34 +68,17 @@ const Frame = React.createClass({
   renderOriginalSourceInfo() {
     let data = this.props.data;
 
-    // TODO: is there a way to render a react element as a string? All the
-    // documented methods don't exist on the client (meant for server rendering)
-    let escapedAbsPath = isUrl(data.origAbsPath)
-      ? `<a href="${_.escape(data.origAbsPath)}">${_.escape(data.origAbsPath)}</a>`
-      : _.escape(data.origAbsPath);
-
-    let originalFilenameText = t('Original Filename');
-    let lineNumberText = t('Line Number');
-    let columnNumberText = t('Column Number');
-    let functionText = t('Function');
     let sourceMapText = t('Source Map');
 
     let out = `
     <div>
-      <strong>${originalFilenameText}</strong><br/>
-      ${escapedAbsPath}<br/>
-      <strong>${lineNumberText}</strong><br/>
-      ${_.escape(data.origLineNo)}<br/>
-      <strong>${columnNumberText}</strong><br/>
-      ${_.escape(data.origColNo)}<br/>
-      <strong>${functionText}</strong><br/>
-      ${_.escape(data.origFunction)}<br/>
       <strong>${sourceMapText}</strong><br/>`;
 
     // mapUrl not always present; e.g. uploaded source maps
-    out += data.mapUrl
-      ? `<a href="${_.escape(data.mapUrl)}">${_.escape(data.map)}<br/>`
-      : `${_.escape(data.map)}<br/>`;
+    if (data.mapUrl)
+      out += `${_.escape(data.mapUrl)}<br/>`;
+    else
+      out += `${_.escape(data.map)}<br/>`;
 
     out += '</div>';
 
@@ -156,6 +139,29 @@ const Frame = React.createClass({
     return title;
   },
 
+  renderContextLine(line, activeLineNo) {
+    let liClassName = 'expandable';
+    if (line[0] === activeLineNo) {
+      liClassName += ' active';
+    }
+
+    let lineWs;
+    let lineCode;
+    if (defined(line[1]) && line[1].match) {
+      [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
+    } else {
+      lineWs = '';
+      lineCode = '';
+    }
+    return (
+      <li className={liClassName} key={line[0]}>
+        <span className="ws">{
+        lineWs}</span><span className="contextline">{lineCode
+        }</span>
+      </li>
+    );
+  },
+
   renderContext() {
     let data = this.props.data;
     let context = '';
@@ -183,6 +189,7 @@ const Frame = React.createClass({
           <li className={expandable ? 'expandable error' : 'error'}
               key="errors">{data.errors.join(', ')}</li>
           }
+
           {data.context && contextLines.map((line, index) => {
             return <ContextLine key={index} line={line} isActive={data.lineNo === line[0]}/>;
           })}
