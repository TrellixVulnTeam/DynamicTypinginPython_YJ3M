commit 22f4105092fd1a2dee3dac1f8a7aa777378d2145
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue Nov 5 10:27:05 2019 -0800

    migration(plugins): use aws sqs plugin from sentry core (#15428)

diff --git a/conftest.py b/conftest.py
index 696605e10f..2180016227 100644
--- a/conftest.py
+++ b/conftest.py
@@ -32,7 +32,7 @@ def install_sentry_plugins():
     from sentry.runner.importer import install_plugin_apps
     from django.conf import settings
 
-    install_plugin_apps("sentry.new_apps", settings)
+    install_plugin_apps("sentry.test_only_apps", settings)
 
     from sentry.runner.initializer import register_plugins
 
diff --git a/setup.py b/setup.py
index 8863752344..1a17000654 100755
--- a/setup.py
+++ b/setup.py
@@ -140,31 +140,33 @@ setup(
     include_package_data=True,
     entry_points={
         "console_scripts": ["sentry = sentry.runner:main"],
-        "sentry.new_apps": [
-            "jira_ac = new_sentry_plugins.jira_ac",
-            "jira = new_sentry_plugins.jira",
-            "sessionstack = new_sentry_plugins.sessionstack",
+        "sentry.test_only_apps": [
+            "jira_ac = test_only_plugins.jira_ac",
+            "jira = test_only_plugins.jira",
+            "sessionstack = test_only_plugins.sessionstack",
         ],
         "sentry.new_plugins": [
             "amazon_sqs = new_sentry_plugins.amazon_sqs.plugin:AmazonSQSPlugin",
-            "asana = new_sentry_plugins.asana.plugin:AsanaPlugin",
-            "bitbucket = new_sentry_plugins.bitbucket.plugin:BitbucketPlugin",
-            "clubhouse = new_sentry_plugins.clubhouse.plugin:ClubhousePlugin",
-            "github = new_sentry_plugins.github.plugin:GitHubPlugin",
-            "gitlab = new_sentry_plugins.gitlab.plugin:GitLabPlugin",
-            "heroku = new_sentry_plugins.heroku.plugin:HerokuPlugin",
-            "jira = new_sentry_plugins.jira.plugin:JiraPlugin",
-            "jira_ac = new_sentry_plugins.jira_ac.plugin:JiraACPlugin",
-            "pagerduty = new_sentry_plugins.pagerduty.plugin:PagerDutyPlugin",
-            "phabricator = new_sentry_plugins.phabricator.plugin:PhabricatorPlugin",
-            "pivotal = new_sentry_plugins.pivotal.plugin:PivotalPlugin",
-            "pushover = new_sentry_plugins.pushover.plugin:PushoverPlugin",
-            "segment = new_sentry_plugins.segment.plugin:SegmentPlugin",
-            "sessionstack = new_sentry_plugins.sessionstack.plugin:SessionStackPlugin",
-            "slack = new_sentry_plugins.slack.plugin:SlackPlugin",
-            "splunk = new_sentry_plugins.splunk.plugin:SplunkPlugin",
-            "victorops = new_sentry_plugins.victorops.plugin:VictorOpsPlugin",
-            "vsts = new_sentry_plugins.vsts.plugin:VstsPlugin",
+        ],
+        "sentry.test_only_plugins": [
+            "asana = test_only_plugins.asana.plugin:AsanaPlugin",
+            "bitbucket = test_only_plugins.bitbucket.plugin:BitbucketPlugin",
+            "clubhouse = test_only_plugins.clubhouse.plugin:ClubhousePlugin",
+            "github = test_only_plugins.github.plugin:GitHubPlugin",
+            "gitlab = test_only_plugins.gitlab.plugin:GitLabPlugin",
+            "heroku = test_only_plugins.heroku.plugin:HerokuPlugin",
+            "jira = test_only_plugins.jira.plugin:JiraPlugin",
+            "jira_ac = test_only_plugins.jira_ac.plugin:JiraACPlugin",
+            "pagerduty = test_only_plugins.pagerduty.plugin:PagerDutyPlugin",
+            "phabricator = test_only_plugins.phabricator.plugin:PhabricatorPlugin",
+            "pivotal = test_only_plugins.pivotal.plugin:PivotalPlugin",
+            "pushover = test_only_plugins.pushover.plugin:PushoverPlugin",
+            "segment = test_only_plugins.segment.plugin:SegmentPlugin",
+            "sessionstack = test_only_plugins.sessionstack.plugin:SessionStackPlugin",
+            "slack = test_only_plugins.slack.plugin:SlackPlugin",
+            "splunk = test_only_plugins.splunk.plugin:SplunkPlugin",
+            "victorops = test_only_plugins.victorops.plugin:VictorOpsPlugin",
+            "vsts = test_only_plugins.vsts.plugin:VstsPlugin",
         ],
     },
     classifiers=[
diff --git a/src/new_sentry_plugins/__init__.py b/src/new_sentry_plugins/__init__.py
index 436cc44f0e..96f8926c56 100644
--- a/src/new_sentry_plugins/__init__.py
+++ b/src/new_sentry_plugins/__init__.py
@@ -1,3 +1,4 @@
+
 from __future__ import absolute_import
 
 try:
diff --git a/src/new_sentry_plugins/base.py b/src/new_sentry_plugins/base.py
index bb0f8e9d64..2ce4f248e4 100644
--- a/src/new_sentry_plugins/base.py
+++ b/src/new_sentry_plugins/base.py
@@ -1,18 +1,18 @@
 from __future__ import absolute_import
 
 import pkg_resources
-import new_sentry_plugins
+import test_only_plugins
 import six
 import sys
 
 from sentry.exceptions import InvalidIdentity, PluginError
 
-from new_sentry_plugins.constants import (
+from test_only_plugins.constants import (
     ERR_INTERNAL,
     ERR_UNAUTHORIZED,
     ERR_UNSUPPORTED_RESPONSE_TYPE,
 )
-from new_sentry_plugins.exceptions import (
+from test_only_plugins.exceptions import (
     ApiError,
     ApiHostError,
     ApiUnauthorized,
@@ -23,7 +23,7 @@ from new_sentry_plugins.exceptions import (
 class CorePluginMixin(object):
     author = "Sentry Team"
     author_url = "https://github.com/getsentry/sentry-plugins"
-    version = new_sentry_plugins.VERSION
+    version = test_only_plugins.VERSION
     resource_links = [
         ("Bug Tracker", "https://github.com/getsentry/sentry-plugins/issues"),
         ("Source", "https://github.com/getsentry/sentry-plugins"),
diff --git a/src/new_sentry_plugins/github/__init__.py b/src/new_sentry_plugins/github/__init__.py
deleted file mode 100644
index 6c2cba01b4..0000000000
--- a/src/new_sentry_plugins/github/__init__.py
+++ /dev/null
@@ -1,7 +0,0 @@
-from __future__ import absolute_import
-
-from new_sentry_plugins.base import assert_package_not_installed
-
-assert_package_not_installed("sentry-github")
-
-from new_sentry_plugins.github import options  # NOQA
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 0d77851728..712699f1db 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -20,19 +20,23 @@ def register_plugins(settings, test_plugins=False):
     #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
     #     ],
     # },
-    # TODO (Steve): Remove option for test_plugins
-    entry_point = "sentry.new_plugins" if test_plugins else "sentry.plugins"
-    for ep in iter_entry_points(entry_point):
-        try:
-            plugin = ep.load()
-        except Exception:
-            import traceback
+    entry_points = [
+        "sentry.new_plugins",
+        "sentry.test_only_plugins" if test_plugins else "sentry.plugins",
+    ]
 
-            click.echo(
-                "Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True
-            )
-        else:
-            plugins.register(plugin)
+    for entry_point in entry_points:
+        for ep in iter_entry_points(entry_point):
+            try:
+                plugin = ep.load()
+            except Exception:
+                import traceback
+
+                click.echo(
+                    "Failed to load plugin %r:\n%s" % (ep.name, traceback.format_exc()), err=True
+                )
+            else:
+                plugins.register(plugin)
 
     for plugin in plugins.all(version=None):
         init_plugin(plugin)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index b2035a0788..47255f8169 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -675,8 +675,8 @@ class PluginTestCase(TestCase):
         self.fail("Missing app from entry_points: %r" % (name,))
 
     # TODO (Steve): remove function
-    def assertNewAppInstalled(self, name, path):
-        for ep in iter_entry_points("sentry.new_apps"):
+    def assertTestOnlyAppInstalled(self, name, path):
+        for ep in iter_entry_points("sentry.test_only_apps"):
             if ep.name == name:
                 ep_path = ep.module_name
                 if ep_path == path:
@@ -700,6 +700,20 @@ class PluginTestCase(TestCase):
                 )
         self.fail("Missing plugin from entry_points: %r" % (name,))
 
+    # TODO (Steve): remove function
+    def assertTestOnlyPluginInstalled(self, name, plugin):
+        path = type(plugin).__module__ + ":" + type(plugin).__name__
+        for ep in iter_entry_points("sentry.test_only_plugins"):
+            if ep.name == name:
+                ep_path = ep.module_name + ":" + ".".join(ep.attrs)
+                if ep_path == path:
+                    return
+                self.fail(
+                    "Found plugin in entry_points, but wrong class. Got %r, expected %r"
+                    % (ep_path, path)
+                )
+        self.fail("Missing plugin from entry_points: %r" % (name,))
+
     # TODO (Steve): remove function
     def assertNewPluginInstalled(self, name, plugin):
         path = type(plugin).__module__ + ":" + type(plugin).__name__
diff --git a/src/test_only_plugins/__init__.py b/src/test_only_plugins/__init__.py
new file mode 100644
index 0000000000..662f0d20f1
--- /dev/null
+++ b/src/test_only_plugins/__init__.py
@@ -0,0 +1,6 @@
+from __future__ import absolute_import
+
+try:
+    VERSION = __import__("pkg_resources").get_distribution("sentry-plugins").version
+except Exception:
+    VERSION = "unknown"
diff --git a/src/test_only_plugins/anonymizeip.py b/src/test_only_plugins/anonymizeip.py
new file mode 100644
index 0000000000..77b3a79e3a
--- /dev/null
+++ b/src/test_only_plugins/anonymizeip.py
@@ -0,0 +1,126 @@
+# Port of https://github.com/samuelmeuli/anonymize-ip to Python 2
+"""
+MIT License
+
+Copyright (c) 2018 Samuel Meuli
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+"""
+from __future__ import absolute_import, unicode_literals
+
+import six
+
+from ipaddress import ip_address
+
+
+def anonymize_ip(
+    address, ipv4_mask="255.255.255.0", ipv6_mask="ffff:ffff:ffff:0000:0000:0000:0000:0000"
+):
+    """
+    Anonymize the provided IPv4 or IPv6 address by setting parts of the
+    address to 0
+    :param str|int address: IP address to be anonymized
+    :param str ipv4_mask: Mask that defines which parts of an IPv4 address are
+    set to 0 (default: "255.255.255.0")
+    :param str ipv6_mask: Mask that defines which parts of an IPv6 address are
+    set to 0 (default: "ffff:ffff:ffff:0000:0000:0000:0000:0000")
+    :return: Anonymized IP address
+    :rtype: str
+    """
+
+    # IP address to be anonymized
+    address_packed = ip_address(six.text_type(address)).packed
+    address_len = len(address_packed)
+
+    if address_len == 4:
+        # IPv4
+        ipv4_mask_packed = ip_address(ipv4_mask).packed
+        __validate_ipv4_mask(ipv4_mask_packed)
+        return __apply_mask(address_packed, ipv4_mask_packed, 4)
+    elif address_len == 16:
+        # IPv6
+        ipv6_mask_packed = ip_address(ipv6_mask).packed
+        __validate_ipv6_mask(ipv6_mask_packed)
+        return __apply_mask(address_packed, ipv6_mask_packed, 16)
+    else:
+        # Invalid address
+        raise ValueError("Address does not consist of 4 (IPv4) or 16 (IPv6) " "octets")
+
+
+def __apply_mask(address_packed, mask_packed, nr_bytes):
+    """
+    Perform a bitwise AND operation on all corresponding bytes between the
+    mask and the provided address. Mask parts set to 0 will become 0 in the
+    anonymized IP address as well
+    :param bytes address_packed: Binary representation of the IP address to
+    be anonymized
+    :param bytes mask_packed: Binary representation of the corresponding IP
+    address mask
+    :param int nr_bytes: Number of bytes in the address (4 for IPv4, 16 for
+    IPv6)
+    :return: Anonymized IP address
+    :rtype: str
+    """
+
+    anon_packed = bytearray()
+    for i in range(0, nr_bytes):
+        anon_packed.append(ord(mask_packed[i]) & ord(address_packed[i]))
+    return six.text_type(ip_address(six.binary_type(anon_packed)))
+
+
+def __validate_ipv4_mask(mask_packed):
+    # Test that mask only contains valid numbers
+    for byte in mask_packed:
+        if byte != b"\x00" and byte != b"\xff":
+            raise ValueError("ipv4_mask must only contain numbers 0 or 255")
+
+    # Test that IP address does not get anonymized completely
+    if mask_packed == b"\x00\x00\x00\x00":
+        raise ValueError(
+            'ipv4_mask cannot be set to "0.0.0.0" (all ' "anonymized addresses will be 0.0.0.0)"
+        )
+
+    # Test that IP address is changed by anonymization
+    if mask_packed == b"\xff\xff\xff\xff":
+        raise ValueError(
+            'ipv4_mask cannot be set to "255.255.255.255" ' "(addresses will not be anonymized)"
+        )
+
+
+def __validate_ipv6_mask(mask_packed):
+    # Test that mask only contains valid numbers
+    for byte in mask_packed:
+        if byte != b"\x00" and byte != b"\xff":
+            raise ValueError("ipv6_mask must only contain numbers 0 or ffff")
+
+    # Test that IP address does not get anonymized completely
+    if mask_packed == b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00":
+        raise ValueError(
+            "ipv6_mask cannot be set to "
+            '"0000:0000:0000:0000:0000:0000:0000:0000" (all '
+            "anonymized addresses will be 0.0.0.0)"
+        )
+
+    # Test that IP address is changed by anonymization
+    if mask_packed == b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff":
+        raise ValueError(
+            "ipv6_mask cannot be set to "
+            '"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" '
+            "(addresses will not be anonymized)"
+        )
diff --git a/src/new_sentry_plugins/asana/README.rst b/src/test_only_plugins/asana/README.rst
similarity index 100%
rename from src/new_sentry_plugins/asana/README.rst
rename to src/test_only_plugins/asana/README.rst
diff --git a/src/new_sentry_plugins/asana/__init__.py b/src/test_only_plugins/asana/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/asana/__init__.py
rename to src/test_only_plugins/asana/__init__.py
diff --git a/src/new_sentry_plugins/asana/client.py b/src/test_only_plugins/asana/client.py
similarity index 95%
rename from src/new_sentry_plugins/asana/client.py
rename to src/test_only_plugins/asana/client.py
index 231f77d834..dd07636836 100644
--- a/src/new_sentry_plugins/asana/client.py
+++ b/src/test_only_plugins/asana/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.client import AuthApiClient
+from test_only_plugins.client import AuthApiClient
 from six import text_type
 
 
diff --git a/src/new_sentry_plugins/asana/plugin.py b/src/test_only_plugins/asana/plugin.py
similarity index 99%
rename from src/new_sentry_plugins/asana/plugin.py
rename to src/test_only_plugins/asana/plugin.py
index 472a4bfbd8..da385da51d 100644
--- a/src/new_sentry_plugins/asana/plugin.py
+++ b/src/test_only_plugins/asana/plugin.py
@@ -8,7 +8,7 @@ from sentry.exceptions import PluginError, PluginIdentityRequired
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
+from test_only_plugins.base import CorePluginMixin
 from .client import AsanaClient
 
 
diff --git a/src/new_sentry_plugins/assets.json b/src/test_only_plugins/assets.json
similarity index 100%
rename from src/new_sentry_plugins/assets.json
rename to src/test_only_plugins/assets.json
diff --git a/src/test_only_plugins/base.py b/src/test_only_plugins/base.py
new file mode 100644
index 0000000000..2ce4f248e4
--- /dev/null
+++ b/src/test_only_plugins/base.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+import pkg_resources
+import test_only_plugins
+import six
+import sys
+
+from sentry.exceptions import InvalidIdentity, PluginError
+
+from test_only_plugins.constants import (
+    ERR_INTERNAL,
+    ERR_UNAUTHORIZED,
+    ERR_UNSUPPORTED_RESPONSE_TYPE,
+)
+from test_only_plugins.exceptions import (
+    ApiError,
+    ApiHostError,
+    ApiUnauthorized,
+    UnsupportedResponseType,
+)
+
+
+class CorePluginMixin(object):
+    author = "Sentry Team"
+    author_url = "https://github.com/getsentry/sentry-plugins"
+    version = test_only_plugins.VERSION
+    resource_links = [
+        ("Bug Tracker", "https://github.com/getsentry/sentry-plugins/issues"),
+        ("Source", "https://github.com/getsentry/sentry-plugins"),
+    ]
+
+    # HACK(dcramer): work around MRO issue with plugin metaclass
+    logger = None
+
+    # TODO(dcramer): The following is a possible "better implementation" of the
+    # core issue implementation, though it would need a compat layer to push
+    # it upstream
+    def error_message_from_json(self, data):
+        return data.get("message", "unknown error")
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiUnauthorized):
+            return ERR_UNAUTHORIZED
+        elif isinstance(exc, ApiHostError):
+            return exc.text
+        elif isinstance(exc, UnsupportedResponseType):
+            return ERR_UNSUPPORTED_RESPONSE_TYPE.format(content_type=exc.content_type)
+        elif isinstance(exc, ApiError):
+            if exc.json:
+                msg = self.error_message_from_json(exc.json) or "unknown error"
+            else:
+                msg = "unknown error"
+            return "Error Communicating with %s (HTTP %s): %s" % (self.title, exc.code, msg)
+        else:
+            return ERR_INTERNAL
+
+    def raise_error(self, exc, identity=None):
+        if isinstance(exc, ApiUnauthorized):
+            six.reraise(
+                InvalidIdentity,
+                InvalidIdentity(self.message_from_error(exc), identity=identity),
+                sys.exc_info()[2],
+            )
+        elif isinstance(exc, ApiError):
+            six.reraise(PluginError, PluginError(self.message_from_error(exc)), sys.exc_info()[2])
+        elif isinstance(exc, PluginError):
+            raise
+        else:
+            self.logger.exception(six.text_type(exc))
+            six.reraise(PluginError, PluginError(self.message_from_error(exc)), sys.exc_info()[2])
+
+
+def assert_package_not_installed(name):
+    try:
+        pkg_resources.get_distribution(name)
+    except pkg_resources.DistributionNotFound:
+        return
+    else:
+        raise RuntimeError(
+            "Found %r. This has been superseded by 'sentry-plugins', so please uninstall." % name
+        )
diff --git a/src/new_sentry_plugins/bitbucket/README.rst b/src/test_only_plugins/bitbucket/README.rst
similarity index 100%
rename from src/new_sentry_plugins/bitbucket/README.rst
rename to src/test_only_plugins/bitbucket/README.rst
diff --git a/src/new_sentry_plugins/bitbucket/__init__.py b/src/test_only_plugins/bitbucket/__init__.py
similarity index 58%
rename from src/new_sentry_plugins/bitbucket/__init__.py
rename to src/test_only_plugins/bitbucket/__init__.py
index 12350e2bd6..767201f195 100644
--- a/src/new_sentry_plugins/bitbucket/__init__.py
+++ b/src/test_only_plugins/bitbucket/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-bitbucket")
diff --git a/src/new_sentry_plugins/bitbucket/client.py b/src/test_only_plugins/bitbucket/client.py
similarity index 98%
rename from src/new_sentry_plugins/bitbucket/client.py
rename to src/test_only_plugins/bitbucket/client.py
index 4befa9e3dd..3fa7c211de 100644
--- a/src/new_sentry_plugins/bitbucket/client.py
+++ b/src/test_only_plugins/bitbucket/client.py
@@ -6,7 +6,7 @@ from django.conf import settings
 from requests_oauthlib import OAuth1
 from unidiff import PatchSet
 
-from new_sentry_plugins.client import AuthApiClient
+from test_only_plugins.client import AuthApiClient
 
 
 class BitbucketClient(AuthApiClient):
diff --git a/src/new_sentry_plugins/bitbucket/endpoints/__init__.py b/src/test_only_plugins/bitbucket/endpoints/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/bitbucket/endpoints/__init__.py
rename to src/test_only_plugins/bitbucket/endpoints/__init__.py
diff --git a/src/new_sentry_plugins/bitbucket/endpoints/webhook.py b/src/test_only_plugins/bitbucket/endpoints/webhook.py
similarity index 100%
rename from src/new_sentry_plugins/bitbucket/endpoints/webhook.py
rename to src/test_only_plugins/bitbucket/endpoints/webhook.py
diff --git a/src/new_sentry_plugins/bitbucket/mixins.py b/src/test_only_plugins/bitbucket/mixins.py
similarity index 90%
rename from src/new_sentry_plugins/bitbucket/mixins.py
rename to src/test_only_plugins/bitbucket/mixins.py
index 3a194be704..1a2e1af087 100644
--- a/src/new_sentry_plugins/bitbucket/mixins.py
+++ b/src/test_only_plugins/bitbucket/mixins.py
@@ -4,7 +4,7 @@ import logging
 
 from sentry.exceptions import PluginError
 
-from new_sentry_plugins.base import CorePluginMixin
+from test_only_plugins.base import CorePluginMixin
 
 from .client import BitbucketClient
 
diff --git a/src/new_sentry_plugins/bitbucket/plugin.py b/src/test_only_plugins/bitbucket/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/bitbucket/plugin.py
rename to src/test_only_plugins/bitbucket/plugin.py
index d7c75319a3..9116643661 100644
--- a/src/new_sentry_plugins/bitbucket/plugin.py
+++ b/src/test_only_plugins/bitbucket/plugin.py
@@ -5,7 +5,7 @@ from rest_framework.response import Response
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.exceptions import ApiError
+from test_only_plugins.exceptions import ApiError
 
 from .mixins import BitbucketMixin
 from .repository_provider import BitbucketRepositoryProvider
@@ -49,7 +49,7 @@ class BitbucketPlugin(BitbucketMixin, IssuePlugin2):
         ]
 
     def get_url_module(self):
-        return "new_sentry_plugins.bitbucket.urls"
+        return "test_only_plugins.bitbucket.urls"
 
     def is_configured(self, request, project, **kwargs):
         return bool(self.get_option("repo", project))
diff --git a/src/new_sentry_plugins/bitbucket/repository_provider.py b/src/test_only_plugins/bitbucket/repository_provider.py
similarity index 98%
rename from src/new_sentry_plugins/bitbucket/repository_provider.py
rename to src/test_only_plugins/bitbucket/repository_provider.py
index a6bbe3afa5..1afb101f6b 100644
--- a/src/new_sentry_plugins/bitbucket/repository_provider.py
+++ b/src/test_only_plugins/bitbucket/repository_provider.py
@@ -9,7 +9,7 @@ from sentry.models import OrganizationOption
 from sentry.plugins import providers
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.exceptions import ApiError
+from test_only_plugins.exceptions import ApiError
 
 from .endpoints.webhook import parse_raw_user_email, parse_raw_user_name
 from .mixins import BitbucketMixin
diff --git a/src/new_sentry_plugins/bitbucket/testutils.py b/src/test_only_plugins/bitbucket/testutils.py
similarity index 100%
rename from src/new_sentry_plugins/bitbucket/testutils.py
rename to src/test_only_plugins/bitbucket/testutils.py
diff --git a/src/new_sentry_plugins/bitbucket/urls.py b/src/test_only_plugins/bitbucket/urls.py
similarity index 100%
rename from src/new_sentry_plugins/bitbucket/urls.py
rename to src/test_only_plugins/bitbucket/urls.py
diff --git a/src/test_only_plugins/client.py b/src/test_only_plugins/client.py
new file mode 100644
index 0000000000..d276263134
--- /dev/null
+++ b/src/test_only_plugins/client.py
@@ -0,0 +1,260 @@
+from __future__ import absolute_import
+
+from collections import OrderedDict
+import logging
+import json
+import requests
+
+from BeautifulSoup import BeautifulStoneSoup
+from cached_property import cached_property
+from requests.exceptions import ConnectionError, HTTPError
+
+from sentry.http import build_session
+from sentry.utils import metrics
+
+from .exceptions import ApiHostError, ApiError, ApiUnauthorized, UnsupportedResponseType
+
+
+class BaseApiResponse(object):
+    text = ""
+
+    def __init__(self, headers=None, status_code=None):
+        self.headers = headers
+        self.status_code = status_code
+
+    def __repr__(self):
+        return u"<%s: code=%s, content_type=%s>" % (
+            type(self).__name__,
+            self.status_code,
+            self.headers.get("Content-Type", "") if self.headers else "",
+        )
+
+    @cached_property
+    def rel(self):
+        if not self.headers:
+            return {}
+        link_header = self.headers.get("Link")
+        if not link_header:
+            return {}
+        return {item["rel"]: item["url"] for item in requests.utils.parse_header_links(link_header)}
+
+    @classmethod
+    def from_response(self, response, allow_text=False):
+        # XXX(dcramer): this doesnt handle leading spaces, but they're not common
+        # paths so its ok
+        if response.text.startswith(u"<?xml"):
+            return XmlApiResponse(response.text, response.headers, response.status_code)
+        elif response.text.startswith("<"):
+            if not allow_text:
+                raise ValueError("Not a valid response type: {}".format(response.text[:128]))
+            elif response.status_code < 200 or response.status_code >= 300:
+                raise ValueError(
+                    "Received unexpected plaintext response for code {}".format(
+                        response.status_code
+                    )
+                )
+            return TextApiResponse(response.text, response.headers, response.status_code)
+
+        # Some APIs will return JSON with an invalid content-type, so we try
+        # to decode it anyways
+        if "application/json" not in response.headers["Content-Type"]:
+            try:
+                data = json.loads(response.text, object_pairs_hook=OrderedDict)
+            except (TypeError, ValueError):
+                if allow_text:
+                    return TextApiResponse(response.text, response.headers, response.status_code)
+                raise UnsupportedResponseType(
+                    response.headers["Content-Type"], response.status_code
+                )
+        else:
+            data = json.loads(response.text, object_pairs_hook=OrderedDict)
+
+        if isinstance(data, dict):
+            return MappingApiResponse(data, response.headers, response.status_code)
+        elif isinstance(data, (list, tuple)):
+            return SequenceApiResponse(data, response.headers, response.status_code)
+        else:
+            raise NotImplementedError
+
+
+class TextApiResponse(BaseApiResponse):
+    def __init__(self, text, *args, **kwargs):
+        self.text = text
+        super(TextApiResponse, self).__init__(*args, **kwargs)
+
+
+class XmlApiResponse(BaseApiResponse):
+    def __init__(self, text, *args, **kwargs):
+        self.xml = BeautifulStoneSoup(text)
+        super(XmlApiResponse, self).__init__(*args, **kwargs)
+
+
+class MappingApiResponse(dict, BaseApiResponse):
+    def __init__(self, data, *args, **kwargs):
+        dict.__init__(self, data)
+        BaseApiResponse.__init__(self, *args, **kwargs)
+
+    @property
+    def json(self):
+        return self
+
+
+class SequenceApiResponse(list, BaseApiResponse):
+    def __init__(self, data, *args, **kwargs):
+        list.__init__(self, data)
+        BaseApiResponse.__init__(self, *args, **kwargs)
+
+    @property
+    def json(self):
+        return self
+
+
+def track_response_metric(plugin, code):
+    metrics.incr("sentry-plugins.http_response", tags={"status": code, "plugin": plugin})
+
+
+class ApiClient(object):
+    base_url = None
+
+    allow_text = False
+
+    allow_redirects = None
+
+    logger = logging.getLogger("sentry.plugins")
+
+    plugin_name = "undefined"
+
+    def __init__(self, verify_ssl=True):
+        self.verify_ssl = verify_ssl
+
+    def build_url(self, path):
+        if path.startswith("/"):
+            if not self.base_url:
+                raise ValueError("Invalid URL: {}".format(path))
+            return "{}{}".format(self.base_url, path)
+        return path
+
+    def _request(
+        self,
+        method,
+        path,
+        headers=None,
+        data=None,
+        params=None,
+        auth=None,
+        json=True,
+        allow_text=None,
+        allow_redirects=None,
+    ):
+
+        if allow_text is None:
+            allow_text = self.allow_text
+
+        if allow_redirects is None:
+            allow_redirects = self.allow_redirects
+
+        if allow_redirects is None:  # is still None
+            allow_redirects = method.upper() == "GET"
+
+        full_url = self.build_url(path)
+        metrics.incr("sentry-plugins.http_request", tags={"plugin": self.plugin_name})
+
+        session = build_session()
+        try:
+            resp = getattr(session, method.lower())(
+                url=full_url,
+                headers=headers,
+                json=data if json else None,
+                data=data if not json else None,
+                params=params,
+                auth=auth,
+                verify=self.verify_ssl,
+                allow_redirects=allow_redirects,
+            )
+            resp.raise_for_status()
+        except ConnectionError as e:
+            raise ApiHostError.from_exception(e)
+        except HTTPError as e:
+            resp = e.response
+            if resp is None:
+                track_response_metric(self.plugin_name, "unknown")
+                self.logger.exception(
+                    "request.error", extra={"plugin": self.plugin_name, "url": full_url}
+                )
+                raise ApiError("Internal Error")
+            track_response_metric(self.plugin_name, resp.status_code)
+            raise ApiError.from_response(resp)
+
+        track_response_metric(self.plugin_name, resp.status_code)
+        if resp.status_code == 204:
+            return {}
+
+        return BaseApiResponse.from_response(resp, allow_text=allow_text)
+
+    # subclasses should override ``request``
+    def request(self, *args, **kwargs):
+        return self._request(*args, **kwargs)
+
+    def delete(self, *args, **kwargs):
+        return self.request("DELETE", *args, **kwargs)
+
+    def get(self, *args, **kwargs):
+        return self.request("GET", *args, **kwargs)
+
+    def patch(self, *args, **kwargs):
+        return self.request("PATCH", *args, **kwargs)
+
+    def post(self, *args, **kwargs):
+        return self.request("POST", *args, **kwargs)
+
+    def put(self, *args, **kwargs):
+        return self.request("PUT", *args, **kwargs)
+
+
+class AuthApiClient(ApiClient):
+    auth = None
+
+    def __init__(self, auth=None, *args, **kwargs):
+        self.auth = auth
+        super(AuthApiClient, self).__init__(*args, **kwargs)
+
+    def has_auth(self):
+        return self.auth and "access_token" in self.auth.tokens
+
+    def exception_means_unauthorized(self, exc):
+        return isinstance(exc, ApiUnauthorized)
+
+    def ensure_auth(self, **kwargs):
+        headers = kwargs["headers"]
+        if "Authorization" not in headers and self.has_auth() and "auth" not in kwargs:
+            kwargs = self.bind_auth(**kwargs)
+        return kwargs
+
+    def bind_auth(self, **kwargs):
+        token = self.auth.tokens["access_token"]
+        kwargs["headers"]["Authorization"] = "Bearer {}".format(token)
+        return kwargs
+
+    def _request(self, method, path, **kwargs):
+        headers = kwargs.setdefault("headers", {})
+        headers.setdefault("Accept", "application/json, application/xml")
+
+        # TODO(dcramer): we could proactively refresh the token if we knew
+        # about expires
+        kwargs = self.ensure_auth(**kwargs)
+
+        try:
+            return ApiClient._request(self, method, path, **kwargs)
+        except Exception as exc:
+            if not self.exception_means_unauthorized(exc):
+                raise
+            if not self.auth:
+                raise
+
+        # refresh token
+        self.logger.info(
+            "token.refresh", extra={"auth_id": self.auth.id, "provider": self.auth.provider}
+        )
+        self.auth.refresh_token()
+        kwargs = self.bind_auth(**kwargs)
+        return ApiClient._request(self, method, path, **kwargs)
diff --git a/src/new_sentry_plugins/clubhouse/__init__.py b/src/test_only_plugins/clubhouse/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/clubhouse/__init__.py
rename to src/test_only_plugins/clubhouse/__init__.py
diff --git a/src/new_sentry_plugins/clubhouse/client.py b/src/test_only_plugins/clubhouse/client.py
similarity index 96%
rename from src/new_sentry_plugins/clubhouse/client.py
rename to src/test_only_plugins/clubhouse/client.py
index 9137c6be1f..7564f6825e 100644
--- a/src/new_sentry_plugins/clubhouse/client.py
+++ b/src/test_only_plugins/clubhouse/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.client import ApiClient
+from test_only_plugins.client import ApiClient
 
 
 class ClubhouseClient(ApiClient):
diff --git a/src/new_sentry_plugins/clubhouse/plugin.py b/src/test_only_plugins/clubhouse/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/clubhouse/plugin.py
rename to src/test_only_plugins/clubhouse/plugin.py
index 054c8d49ff..d04c47a41b 100644
--- a/src/new_sentry_plugins/clubhouse/plugin.py
+++ b/src/test_only_plugins/clubhouse/plugin.py
@@ -8,8 +8,8 @@ from sentry.exceptions import PluginError
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
 
 from .client import ClubhouseClient
 
diff --git a/src/test_only_plugins/constants.py b/src/test_only_plugins/constants.py
new file mode 100644
index 0000000000..70f837ed28
--- /dev/null
+++ b/src/test_only_plugins/constants.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import
+
+
+ERR_INTERNAL = (
+    "An internal error occurred with the integration and the Sentry team has" " been notified"
+)
+
+ERR_UNAUTHORIZED = "Unauthorized: either your access token was invalid or you do not have" " access"
+
+ERR_UNSUPPORTED_RESPONSE_TYPE = "An unsupported response type was returned: {content_type}"
diff --git a/src/test_only_plugins/exceptions.py b/src/test_only_plugins/exceptions.py
new file mode 100644
index 0000000000..c5066dfed2
--- /dev/null
+++ b/src/test_only_plugins/exceptions.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+
+from BeautifulSoup import BeautifulStoneSoup
+from collections import OrderedDict
+from simplejson.decoder import JSONDecodeError
+from six.moves.urllib.parse import urlparse
+from sentry.utils import json
+
+
+class ApiError(Exception):
+    code = None
+    json = None
+    xml = None
+
+    def __init__(self, text, code=None):
+        if code is not None:
+            self.code = code
+        self.text = text
+        self.xml = None
+        # TODO(dcramer): pull in XML support from Jira
+        if text:
+            try:
+                self.json = json.loads(text, object_pairs_hook=OrderedDict)
+            except (JSONDecodeError, ValueError):
+                if self.text[:5] == "<?xml":
+                    # perhaps it's XML?
+                    self.xml = BeautifulStoneSoup(self.text)
+                # must be an awful code.
+                self.json = None
+        else:
+            self.json = None
+        super(ApiError, self).__init__(text[:128])
+
+    @classmethod
+    def from_response(cls, response):
+        if response.status_code == 401:
+            return ApiUnauthorized(response.text)
+        return cls(response.text, response.status_code)
+
+
+class ApiHostError(ApiError):
+    code = 503
+
+    @classmethod
+    def from_exception(cls, exception):
+        if hasattr(exception, "request"):
+            return cls.from_request(exception.request)
+        return cls("Unable to reach host")
+
+    @classmethod
+    def from_request(cls, request):
+        host = urlparse(request.url).netloc
+        return cls("Unable to reach host: {}".format(host))
+
+
+class ApiUnauthorized(ApiError):
+    code = 401
+
+
+class UnsupportedResponseType(ApiError):
+    @property
+    def content_type(self):
+        return self.text
diff --git a/src/new_sentry_plugins/github/README.rst b/src/test_only_plugins/github/README.rst
similarity index 100%
rename from src/new_sentry_plugins/github/README.rst
rename to src/test_only_plugins/github/README.rst
diff --git a/src/test_only_plugins/github/__init__.py b/src/test_only_plugins/github/__init__.py
new file mode 100644
index 0000000000..9d0f3baf9f
--- /dev/null
+++ b/src/test_only_plugins/github/__init__.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from test_only_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-github")
+
+from test_only_plugins.github import options  # NOQA
diff --git a/src/new_sentry_plugins/github/client.py b/src/test_only_plugins/github/client.py
similarity index 98%
rename from src/new_sentry_plugins/github/client.py
rename to src/test_only_plugins/github/client.py
index d81b042462..578996dfdb 100644
--- a/src/new_sentry_plugins/github/client.py
+++ b/src/test_only_plugins/github/client.py
@@ -8,7 +8,7 @@ import time
 from django.conf import settings
 from sentry import options
 
-from new_sentry_plugins.client import ApiClient, AuthApiClient
+from test_only_plugins.client import ApiClient, AuthApiClient
 
 
 class GitHubClientMixin(AuthApiClient):
diff --git a/src/new_sentry_plugins/github/endpoints/__init__.py b/src/test_only_plugins/github/endpoints/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/github/endpoints/__init__.py
rename to src/test_only_plugins/github/endpoints/__init__.py
diff --git a/src/new_sentry_plugins/github/endpoints/webhook.py b/src/test_only_plugins/github/endpoints/webhook.py
similarity index 99%
rename from src/new_sentry_plugins/github/endpoints/webhook.py
rename to src/test_only_plugins/github/endpoints/webhook.py
index 01ade861de..3f6bc8d910 100644
--- a/src/new_sentry_plugins/github/endpoints/webhook.py
+++ b/src/test_only_plugins/github/endpoints/webhook.py
@@ -30,8 +30,8 @@ from sentry.models import (
 from sentry.plugins.providers import RepositoryProvider
 from sentry.utils import json
 
-from new_sentry_plugins.exceptions import ApiError
-from new_sentry_plugins.github.client import GitHubClient
+from test_only_plugins.exceptions import ApiError
+from test_only_plugins.github.client import GitHubClient
 
 logger = logging.getLogger("sentry.webhooks")
 
diff --git a/src/new_sentry_plugins/github/options.py b/src/test_only_plugins/github/options.py
similarity index 100%
rename from src/new_sentry_plugins/github/options.py
rename to src/test_only_plugins/github/options.py
diff --git a/src/new_sentry_plugins/github/plugin.py b/src/test_only_plugins/github/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/github/plugin.py
rename to src/test_only_plugins/github/plugin.py
index 5764cb1cf2..2a61076f6f 100644
--- a/src/new_sentry_plugins/github/plugin.py
+++ b/src/test_only_plugins/github/plugin.py
@@ -16,9 +16,9 @@ from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.plugins import providers
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.constants import ERR_UNAUTHORIZED, ERR_INTERNAL
-from new_sentry_plugins.exceptions import ApiError
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.constants import ERR_UNAUTHORIZED, ERR_INTERNAL
+from test_only_plugins.exceptions import ApiError
 
 from .client import GitHubClient, GitHubAppsClient
 
@@ -77,7 +77,7 @@ class GitHubPlugin(GitHubMixin, IssuePlugin2):
         ]
 
     def get_url_module(self):
-        return "new_sentry_plugins.github.urls"
+        return "test_only_plugins.github.urls"
 
     def is_configured(self, request, project, **kwargs):
         return bool(self.get_option("repo", project))
diff --git a/src/new_sentry_plugins/github/testutils.py b/src/test_only_plugins/github/testutils.py
similarity index 100%
rename from src/new_sentry_plugins/github/testutils.py
rename to src/test_only_plugins/github/testutils.py
diff --git a/src/new_sentry_plugins/github/urls.py b/src/test_only_plugins/github/urls.py
similarity index 100%
rename from src/new_sentry_plugins/github/urls.py
rename to src/test_only_plugins/github/urls.py
diff --git a/src/new_sentry_plugins/gitlab/README.rst b/src/test_only_plugins/gitlab/README.rst
similarity index 100%
rename from src/new_sentry_plugins/gitlab/README.rst
rename to src/test_only_plugins/gitlab/README.rst
diff --git a/src/new_sentry_plugins/gitlab/__init__.py b/src/test_only_plugins/gitlab/__init__.py
similarity index 57%
rename from src/new_sentry_plugins/gitlab/__init__.py
rename to src/test_only_plugins/gitlab/__init__.py
index 250c582cc4..01718f64d7 100644
--- a/src/new_sentry_plugins/gitlab/__init__.py
+++ b/src/test_only_plugins/gitlab/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-gitlab")
diff --git a/src/new_sentry_plugins/gitlab/client.py b/src/test_only_plugins/gitlab/client.py
similarity index 94%
rename from src/new_sentry_plugins/gitlab/client.py
rename to src/test_only_plugins/gitlab/client.py
index 3565a41e9f..3ed0b99f44 100644
--- a/src/new_sentry_plugins/gitlab/client.py
+++ b/src/test_only_plugins/gitlab/client.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import
 
 from six.moves.urllib.parse import quote
-from new_sentry_plugins.client import ApiClient
+from test_only_plugins.client import ApiClient
 
-from new_sentry_plugins.exceptions import ApiError
+from test_only_plugins.exceptions import ApiError
 
 
 class GitLabClient(ApiClient):
diff --git a/src/new_sentry_plugins/gitlab/endpoints.py b/src/test_only_plugins/gitlab/endpoints.py
similarity index 100%
rename from src/new_sentry_plugins/gitlab/endpoints.py
rename to src/test_only_plugins/gitlab/endpoints.py
diff --git a/src/new_sentry_plugins/gitlab/plugin.py b/src/test_only_plugins/gitlab/plugin.py
similarity index 97%
rename from src/new_sentry_plugins/gitlab/plugin.py
rename to src/test_only_plugins/gitlab/plugin.py
index 8a32ac9a65..b611201095 100644
--- a/src/new_sentry_plugins/gitlab/plugin.py
+++ b/src/test_only_plugins/gitlab/plugin.py
@@ -3,9 +3,9 @@ from __future__ import absolute_import
 from sentry.plugins.bases.issue2 import IssuePlugin2
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.exceptions import ApiError
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.exceptions import ApiError
+from test_only_plugins.utils import get_secret_field_config
 
 from .client import GitLabClient
 
diff --git a/src/new_sentry_plugins/heroku/__init__.py b/src/test_only_plugins/heroku/__init__.py
similarity index 57%
rename from src/new_sentry_plugins/heroku/__init__.py
rename to src/test_only_plugins/heroku/__init__.py
index eac7bc3a61..74ff594067 100644
--- a/src/new_sentry_plugins/heroku/__init__.py
+++ b/src/test_only_plugins/heroku/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-heroku")
diff --git a/src/new_sentry_plugins/heroku/plugin.py b/src/test_only_plugins/heroku/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/heroku/plugin.py
rename to src/test_only_plugins/heroku/plugin.py
index 089761ec92..9e38413b88 100644
--- a/src/new_sentry_plugins/heroku/plugin.py
+++ b/src/test_only_plugins/heroku/plugin.py
@@ -6,7 +6,7 @@ from sentry.api import client
 
 from sentry.models import ApiKey, User, ProjectOption, Repository
 from sentry.plugins.interfaces.releasehook import ReleaseHook
-from new_sentry_plugins.base import CorePluginMixin
+from test_only_plugins.base import CorePluginMixin
 from sentry.plugins.base.configuration import react_plugin_config
 from sentry.plugins.bases import ReleaseTrackingPlugin
 
diff --git a/src/new_sentry_plugins/jira/__init__.py b/src/test_only_plugins/jira/__init__.py
similarity index 56%
rename from src/new_sentry_plugins/jira/__init__.py
rename to src/test_only_plugins/jira/__init__.py
index 55004ee429..4bbae983cd 100644
--- a/src/new_sentry_plugins/jira/__init__.py
+++ b/src/test_only_plugins/jira/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-jira")
diff --git a/src/new_sentry_plugins/jira/client.py b/src/test_only_plugins/jira/client.py
similarity index 97%
rename from src/new_sentry_plugins/jira/client.py
rename to src/test_only_plugins/jira/client.py
index b528860921..ccc6244581 100644
--- a/src/new_sentry_plugins/jira/client.py
+++ b/src/test_only_plugins/jira/client.py
@@ -7,8 +7,8 @@ from hashlib import md5 as _md5
 from sentry.utils.cache import cache
 from django.utils.encoding import force_bytes
 
-from new_sentry_plugins.exceptions import ApiError
-from new_sentry_plugins.client import ApiClient
+from test_only_plugins.exceptions import ApiError
+from test_only_plugins.client import ApiClient
 
 log = logging.getLogger(__name__)
 
diff --git a/src/new_sentry_plugins/jira/plugin.py b/src/test_only_plugins/jira/plugin.py
similarity index 99%
rename from src/new_sentry_plugins/jira/plugin.py
rename to src/test_only_plugins/jira/plugin.py
index ee247c909f..63e8cb992a 100644
--- a/src/new_sentry_plugins/jira/plugin.py
+++ b/src/test_only_plugins/jira/plugin.py
@@ -19,10 +19,10 @@ from sentry.models import GroupMeta
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint, PluginError
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.exceptions import ApiError, ApiUnauthorized
-from new_sentry_plugins.jira.client import JiraClient
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.exceptions import ApiError, ApiUnauthorized
+from test_only_plugins.jira.client import JiraClient
+from test_only_plugins.utils import get_secret_field_config
 
 # A list of common builtin custom field types for JIRA for easy reference.
 JIRA_CUSTOM_FIELD_TYPES = {
diff --git a/src/new_sentry_plugins/jira/static/jira/components/issueActions.jsx b/src/test_only_plugins/jira/static/jira/components/issueActions.jsx
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/components/issueActions.jsx
rename to src/test_only_plugins/jira/static/jira/components/issueActions.jsx
diff --git a/src/new_sentry_plugins/jira/static/jira/components/settings.jsx b/src/test_only_plugins/jira/static/jira/components/settings.jsx
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/components/settings.jsx
rename to src/test_only_plugins/jira/static/jira/components/settings.jsx
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js b/src/test_only_plugins/jira/static/jira/dist/jira.js
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/dist/jira.js
rename to src/test_only_plugins/jira/static/jira/dist/jira.js
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js.gz b/src/test_only_plugins/jira/static/jira/dist/jira.js.gz
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/dist/jira.js.gz
rename to src/test_only_plugins/jira/static/jira/dist/jira.js.gz
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map b/src/test_only_plugins/jira/static/jira/dist/jira.js.map
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/dist/jira.js.map
rename to src/test_only_plugins/jira/static/jira/dist/jira.js.map
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map.gz b/src/test_only_plugins/jira/static/jira/dist/jira.js.map.gz
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/dist/jira.js.map.gz
rename to src/test_only_plugins/jira/static/jira/dist/jira.js.map.gz
diff --git a/src/new_sentry_plugins/jira/static/jira/jira.jsx b/src/test_only_plugins/jira/static/jira/jira.jsx
similarity index 100%
rename from src/new_sentry_plugins/jira/static/jira/jira.jsx
rename to src/test_only_plugins/jira/static/jira/jira.jsx
diff --git a/src/new_sentry_plugins/jira_ac/__init__.py b/src/test_only_plugins/jira_ac/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/__init__.py
rename to src/test_only_plugins/jira_ac/__init__.py
diff --git a/src/new_sentry_plugins/jira_ac/forms.py b/src/test_only_plugins/jira_ac/forms.py
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/forms.py
rename to src/test_only_plugins/jira_ac/forms.py
diff --git a/src/new_sentry_plugins/jira_ac/migrations/0001_initial.py b/src/test_only_plugins/jira_ac/migrations/0001_initial.py
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/migrations/0001_initial.py
rename to src/test_only_plugins/jira_ac/migrations/0001_initial.py
diff --git a/src/new_sentry_plugins/jira_ac/migrations/__init__.py b/src/test_only_plugins/jira_ac/migrations/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/migrations/__init__.py
rename to src/test_only_plugins/jira_ac/migrations/__init__.py
diff --git a/src/new_sentry_plugins/jira_ac/models.py b/src/test_only_plugins/jira_ac/models.py
similarity index 94%
rename from src/new_sentry_plugins/jira_ac/models.py
rename to src/test_only_plugins/jira_ac/models.py
index 7f4e94f4a2..9dcd73a4a6 100644
--- a/src/new_sentry_plugins/jira_ac/models.py
+++ b/src/test_only_plugins/jira_ac/models.py
@@ -7,7 +7,7 @@ import jwt
 from django.db import models
 
 from sentry.db.models import Model, FlexibleForeignKey
-from new_sentry_plugins.jira_ac.utils import get_query_hash
+from test_only_plugins.jira_ac.utils import get_query_hash
 
 
 class JiraTenant(Model):
diff --git a/src/new_sentry_plugins/jira_ac/plugin.py b/src/test_only_plugins/jira_ac/plugin.py
similarity index 75%
rename from src/new_sentry_plugins/jira_ac/plugin.py
rename to src/test_only_plugins/jira_ac/plugin.py
index 0ce9a064e7..c7254b9c0a 100644
--- a/src/new_sentry_plugins/jira_ac/plugin.py
+++ b/src/test_only_plugins/jira_ac/plugin.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.plugins.base import Plugin
 
-from new_sentry_plugins.base import CorePluginMixin
+from test_only_plugins.base import CorePluginMixin
 
 
 class JiraACPlugin(CorePluginMixin, Plugin):
@@ -13,4 +13,4 @@ class JiraACPlugin(CorePluginMixin, Plugin):
     conf_key = "jira-ac"
 
     def get_url_module(self):
-        return "new_sentry_plugins.jira_ac.urls"
+        return "test_only_plugins.jira_ac.urls"
diff --git a/src/new_sentry_plugins/jira_ac/templates/base.html b/src/test_only_plugins/jira_ac/templates/base.html
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/templates/base.html
rename to src/test_only_plugins/jira_ac/templates/base.html
diff --git a/src/new_sentry_plugins/jira_ac/templates/config.html b/src/test_only_plugins/jira_ac/templates/config.html
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/templates/config.html
rename to src/test_only_plugins/jira_ac/templates/config.html
diff --git a/src/new_sentry_plugins/jira_ac/templates/error.html b/src/test_only_plugins/jira_ac/templates/error.html
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/templates/error.html
rename to src/test_only_plugins/jira_ac/templates/error.html
diff --git a/src/new_sentry_plugins/jira_ac/templates/signin.html b/src/test_only_plugins/jira_ac/templates/signin.html
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/templates/signin.html
rename to src/test_only_plugins/jira_ac/templates/signin.html
diff --git a/src/new_sentry_plugins/jira_ac/templates/widget.html b/src/test_only_plugins/jira_ac/templates/widget.html
similarity index 100%
rename from src/new_sentry_plugins/jira_ac/templates/widget.html
rename to src/test_only_plugins/jira_ac/templates/widget.html
diff --git a/src/new_sentry_plugins/jira_ac/urls.py b/src/test_only_plugins/jira_ac/urls.py
similarity index 90%
rename from src/new_sentry_plugins/jira_ac/urls.py
rename to src/test_only_plugins/jira_ac/urls.py
index e1f4e48edb..7017e81b18 100644
--- a/src/new_sentry_plugins/jira_ac/urls.py
+++ b/src/test_only_plugins/jira_ac/urls.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.conf.urls import patterns, url
 
-from new_sentry_plugins.jira_ac.views import (
+from test_only_plugins.jira_ac.views import (
     JiraConfigView,
     JiraDescriptorView,
     JiraInstalledCallback,
diff --git a/src/new_sentry_plugins/jira_ac/utils.py b/src/test_only_plugins/jira_ac/utils.py
similarity index 95%
rename from src/new_sentry_plugins/jira_ac/utils.py
rename to src/test_only_plugins/jira_ac/utils.py
index 5012531483..016bb1ebaa 100644
--- a/src/new_sentry_plugins/jira_ac/utils.py
+++ b/src/test_only_plugins/jira_ac/utils.py
@@ -5,7 +5,7 @@ import jwt
 
 from six.moves.urllib.parse import quote
 
-from new_sentry_plugins.exceptions import ApiError
+from test_only_plugins.exceptions import ApiError
 
 
 def percent_encode(val):
@@ -51,7 +51,7 @@ def get_jira_auth_from_request(request):
     issuer = decoded["iss"]
     # Look up the sharedSecret for the clientKey, as stored
     # by the add-on during the installation handshake
-    from new_sentry_plugins.jira_ac.models import JiraTenant
+    from test_only_plugins.jira_ac.models import JiraTenant
 
     jira_auth = JiraTenant.objects.get(client_key=issuer)
     # Verify the signature with the sharedSecret and
diff --git a/src/new_sentry_plugins/jira_ac/views.py b/src/test_only_plugins/jira_ac/views.py
similarity index 97%
rename from src/new_sentry_plugins/jira_ac/views.py
rename to src/test_only_plugins/jira_ac/views.py
index 2bfe41209c..b9e68b7b3e 100644
--- a/src/new_sentry_plugins/jira_ac/views.py
+++ b/src/test_only_plugins/jira_ac/views.py
@@ -15,9 +15,9 @@ from sentry.models import Organization
 from sentry.utils.http import absolute_uri
 from sentry.web.helpers import render_to_response
 
-from new_sentry_plugins.jira_ac.forms import JiraConfigForm
-from new_sentry_plugins.jira_ac.models import JiraTenant
-from new_sentry_plugins.jira_ac.utils import get_jira_auth_from_request, ApiError
+from test_only_plugins.jira_ac.forms import JiraConfigForm
+from test_only_plugins.jira_ac.models import JiraTenant
+from test_only_plugins.jira_ac.utils import get_jira_auth_from_request, ApiError
 from jwt.exceptions import ExpiredSignatureError
 
 JIRA_KEY = "%s.jira_ac" % (urlparse(absolute_uri()).hostname,)
diff --git a/src/new_sentry_plugins/pagerduty/__init__.py b/src/test_only_plugins/pagerduty/__init__.py
similarity index 58%
rename from src/new_sentry_plugins/pagerduty/__init__.py
rename to src/test_only_plugins/pagerduty/__init__.py
index 97157bb135..1e7c7f86c3 100644
--- a/src/new_sentry_plugins/pagerduty/__init__.py
+++ b/src/test_only_plugins/pagerduty/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-pagerduty")
diff --git a/src/new_sentry_plugins/pagerduty/client.py b/src/test_only_plugins/pagerduty/client.py
similarity index 96%
rename from src/new_sentry_plugins/pagerduty/client.py
rename to src/test_only_plugins/pagerduty/client.py
index 6f0fbf31e2..15652d8218 100644
--- a/src/new_sentry_plugins/pagerduty/client.py
+++ b/src/test_only_plugins/pagerduty/client.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.utils.http import absolute_uri
-from new_sentry_plugins.client import ApiClient
+from test_only_plugins.client import ApiClient
 
 # https://v2.developer.pagerduty.com/docs/events-api
 INTEGRATION_API_URL = "https://events.pagerduty.com/generic/2010-04-15/create_event.json"
diff --git a/src/new_sentry_plugins/pagerduty/plugin.py b/src/test_only_plugins/pagerduty/plugin.py
similarity index 96%
rename from src/new_sentry_plugins/pagerduty/plugin.py
rename to src/test_only_plugins/pagerduty/plugin.py
index d8ad220e3c..2da1c7c967 100644
--- a/src/new_sentry_plugins/pagerduty/plugin.py
+++ b/src/test_only_plugins/pagerduty/plugin.py
@@ -5,8 +5,8 @@ import six
 from sentry.plugins.bases.notify import NotifyPlugin
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
 
 from .client import PagerDutyClient
 
diff --git a/src/new_sentry_plugins/phabricator/__init__.py b/src/test_only_plugins/phabricator/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/phabricator/__init__.py
rename to src/test_only_plugins/phabricator/__init__.py
diff --git a/src/new_sentry_plugins/phabricator/plugin.py b/src/test_only_plugins/phabricator/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/phabricator/plugin.py
rename to src/test_only_plugins/phabricator/plugin.py
index e870819fc4..94e332c77b 100644
--- a/src/new_sentry_plugins/phabricator/plugin.py
+++ b/src/test_only_plugins/phabricator/plugin.py
@@ -6,8 +6,8 @@ from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
 from six.moves.urllib.parse import urljoin
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
 
 import httplib
 import json
diff --git a/src/new_sentry_plugins/pivotal/__init__.py b/src/test_only_plugins/pivotal/__init__.py
similarity index 57%
rename from src/new_sentry_plugins/pivotal/__init__.py
rename to src/test_only_plugins/pivotal/__init__.py
index 49b0760b46..ee890de8ec 100644
--- a/src/new_sentry_plugins/pivotal/__init__.py
+++ b/src/test_only_plugins/pivotal/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-pivotal")
diff --git a/src/new_sentry_plugins/pivotal/plugin.py b/src/test_only_plugins/pivotal/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/pivotal/plugin.py
rename to src/test_only_plugins/pivotal/plugin.py
index ef6856439f..8b131e0d59 100644
--- a/src/new_sentry_plugins/pivotal/plugin.py
+++ b/src/test_only_plugins/pivotal/plugin.py
@@ -10,8 +10,8 @@ from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
 from six.moves.urllib.parse import urlencode
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
 
 
 class PivotalPlugin(CorePluginMixin, IssuePlugin2):
diff --git a/src/new_sentry_plugins/pushover/__init__.py b/src/test_only_plugins/pushover/__init__.py
similarity index 57%
rename from src/new_sentry_plugins/pushover/__init__.py
rename to src/test_only_plugins/pushover/__init__.py
index 9b498c7e99..4ab73a7ae5 100644
--- a/src/new_sentry_plugins/pushover/__init__.py
+++ b/src/test_only_plugins/pushover/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-pushover")
diff --git a/src/new_sentry_plugins/pushover/client.py b/src/test_only_plugins/pushover/client.py
similarity index 94%
rename from src/new_sentry_plugins/pushover/client.py
rename to src/test_only_plugins/pushover/client.py
index e2f33cbb9b..5e0ab6bf95 100644
--- a/src/new_sentry_plugins/pushover/client.py
+++ b/src/test_only_plugins/pushover/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.client import ApiClient
+from test_only_plugins.client import ApiClient
 
 
 class PushoverClient(ApiClient):
diff --git a/src/new_sentry_plugins/pushover/plugin.py b/src/test_only_plugins/pushover/plugin.py
similarity index 97%
rename from src/new_sentry_plugins/pushover/plugin.py
rename to src/test_only_plugins/pushover/plugin.py
index 1037a20bd0..358a06376f 100644
--- a/src/new_sentry_plugins/pushover/plugin.py
+++ b/src/test_only_plugins/pushover/plugin.py
@@ -4,8 +4,8 @@ import six
 
 from sentry.plugins.bases.notify import NotifyPlugin
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
 
 from .client import PushoverClient
 
diff --git a/src/new_sentry_plugins/segment/__init__.py b/src/test_only_plugins/segment/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/segment/__init__.py
rename to src/test_only_plugins/segment/__init__.py
diff --git a/src/new_sentry_plugins/segment/plugin.py b/src/test_only_plugins/segment/plugin.py
similarity index 97%
rename from src/new_sentry_plugins/segment/plugin.py
rename to src/test_only_plugins/segment/plugin.py
index f609698d3c..16738e855d 100644
--- a/src/new_sentry_plugins/segment/plugin.py
+++ b/src/test_only_plugins/segment/plugin.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import
 from sentry import http
 from sentry.plugins.bases.data_forwarding import DataForwardingPlugin
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
 
 
 class SegmentPlugin(CorePluginMixin, DataForwardingPlugin):
diff --git a/src/new_sentry_plugins/sessionstack/__init__.py b/src/test_only_plugins/sessionstack/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/__init__.py
rename to src/test_only_plugins/sessionstack/__init__.py
diff --git a/src/new_sentry_plugins/sessionstack/client.py b/src/test_only_plugins/sessionstack/client.py
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/client.py
rename to src/test_only_plugins/sessionstack/client.py
diff --git a/src/new_sentry_plugins/sessionstack/plugin.py b/src/test_only_plugins/sessionstack/plugin.py
similarity index 99%
rename from src/new_sentry_plugins/sessionstack/plugin.py
rename to src/test_only_plugins/sessionstack/plugin.py
index c1a2913f94..d2f35ee3f4 100644
--- a/src/new_sentry_plugins/sessionstack/plugin.py
+++ b/src/test_only_plugins/sessionstack/plugin.py
@@ -8,7 +8,7 @@ from sentry.plugins.base import Plugin2
 from sentry.plugins.base.configuration import react_plugin_config
 from sentry.exceptions import PluginError
 
-from new_sentry_plugins.base import CorePluginMixin
+from test_only_plugins.base import CorePluginMixin
 
 from .client import SessionStackClient, UnauthorizedError, InvalidWebsiteIdError, InvalidApiUrlError
 
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/components/settings.jsx b/src/test_only_plugins/sessionstack/static/sessionstack/components/settings.jsx
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/components/settings.jsx
rename to src/test_only_plugins/sessionstack/static/sessionstack/components/settings.jsx
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx b/src/test_only_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx
rename to src/test_only_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js b/src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js
rename to src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz b/src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz
rename to src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map b/src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map
rename to src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz b/src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz
rename to src/test_only_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/sessionstack.jsx b/src/test_only_plugins/sessionstack/static/sessionstack/sessionstack.jsx
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/static/sessionstack/sessionstack.jsx
rename to src/test_only_plugins/sessionstack/static/sessionstack/sessionstack.jsx
diff --git a/src/new_sentry_plugins/sessionstack/utils.py b/src/test_only_plugins/sessionstack/utils.py
similarity index 100%
rename from src/new_sentry_plugins/sessionstack/utils.py
rename to src/test_only_plugins/sessionstack/utils.py
diff --git a/src/new_sentry_plugins/slack/README.rst b/src/test_only_plugins/slack/README.rst
similarity index 100%
rename from src/new_sentry_plugins/slack/README.rst
rename to src/test_only_plugins/slack/README.rst
diff --git a/src/new_sentry_plugins/slack/__init__.py b/src/test_only_plugins/slack/__init__.py
similarity index 56%
rename from src/new_sentry_plugins/slack/__init__.py
rename to src/test_only_plugins/slack/__init__.py
index a37e36c003..329b8e23fa 100644
--- a/src/new_sentry_plugins/slack/__init__.py
+++ b/src/test_only_plugins/slack/__init__.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.base import assert_package_not_installed
+from test_only_plugins.base import assert_package_not_installed
 
 assert_package_not_installed("sentry-slack")
diff --git a/src/new_sentry_plugins/slack/plugin.py b/src/test_only_plugins/slack/plugin.py
similarity index 99%
rename from src/new_sentry_plugins/slack/plugin.py
rename to src/test_only_plugins/slack/plugin.py
index 02b667345c..479e2c1b1b 100644
--- a/src/new_sentry_plugins/slack/plugin.py
+++ b/src/test_only_plugins/slack/plugin.py
@@ -5,7 +5,7 @@ from sentry.plugins.bases import notify
 from sentry.utils import json
 from sentry.utils.http import absolute_uri
 
-from new_sentry_plugins.base import CorePluginMixin
+from test_only_plugins.base import CorePluginMixin
 
 LEVEL_TO_COLOR = {
     "debug": "cfd3da",
diff --git a/src/new_sentry_plugins/splunk/README.rst b/src/test_only_plugins/splunk/README.rst
similarity index 100%
rename from src/new_sentry_plugins/splunk/README.rst
rename to src/test_only_plugins/splunk/README.rst
diff --git a/src/new_sentry_plugins/splunk/__init__.py b/src/test_only_plugins/splunk/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/splunk/__init__.py
rename to src/test_only_plugins/splunk/__init__.py
diff --git a/src/new_sentry_plugins/splunk/plugin.py b/src/test_only_plugins/splunk/plugin.py
similarity index 98%
rename from src/new_sentry_plugins/splunk/plugin.py
rename to src/test_only_plugins/splunk/plugin.py
index 4adccc4190..b5bfa39c76 100644
--- a/src/new_sentry_plugins/splunk/plugin.py
+++ b/src/test_only_plugins/splunk/plugin.py
@@ -27,9 +27,9 @@ from sentry.plugins.base.configuration import react_plugin_config
 from sentry.utils import metrics
 from sentry.utils.hashlib import md5_text
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.utils import get_secret_field_config
-from new_sentry_plugins.anonymizeip import anonymize_ip
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.utils import get_secret_field_config
+from test_only_plugins.anonymizeip import anonymize_ip
 
 logger = logging.getLogger(__name__)
 
diff --git a/src/test_only_plugins/utils.py b/src/test_only_plugins/utils.py
new file mode 100644
index 0000000000..89ddf1e08d
--- /dev/null
+++ b/src/test_only_plugins/utils.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+
+def get_secret_field_config(secret, help_text=None, include_prefix=False, **kwargs):
+    has_saved_value = bool(secret)
+    saved_text = "Only enter a new value if you wish to update the existing one. "
+    context = {
+        "type": "secret",
+        "has_saved_value": has_saved_value,
+        "prefix": (secret or "")[:4] if include_prefix else "",
+        "required": not has_saved_value,
+    }
+    if help_text:
+        context["help"] = "%s%s" % ((saved_text if has_saved_value else ""), help_text)
+    context.update(kwargs)
+    return context
diff --git a/src/new_sentry_plugins/victorops/__init__.py b/src/test_only_plugins/victorops/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/victorops/__init__.py
rename to src/test_only_plugins/victorops/__init__.py
diff --git a/src/new_sentry_plugins/victorops/client.py b/src/test_only_plugins/victorops/client.py
similarity index 96%
rename from src/new_sentry_plugins/victorops/client.py
rename to src/test_only_plugins/victorops/client.py
index a80b04569a..6ef2e9ec4c 100644
--- a/src/new_sentry_plugins/victorops/client.py
+++ b/src/test_only_plugins/victorops/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.client import ApiClient
+from test_only_plugins.client import ApiClient
 
 
 class VictorOpsClient(ApiClient):
diff --git a/src/new_sentry_plugins/victorops/plugin.py b/src/test_only_plugins/victorops/plugin.py
similarity index 94%
rename from src/new_sentry_plugins/victorops/plugin.py
rename to src/test_only_plugins/victorops/plugin.py
index 17270f35f5..dd3d03f344 100644
--- a/src/new_sentry_plugins/victorops/plugin.py
+++ b/src/test_only_plugins/victorops/plugin.py
@@ -5,9 +5,9 @@ import six
 from sentry.exceptions import PluginError
 from sentry.plugins.bases.notify import NotifyPlugin
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.exceptions import ApiError
-from new_sentry_plugins.utils import get_secret_field_config
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.exceptions import ApiError
+from test_only_plugins.utils import get_secret_field_config
 
 from .client import VictorOpsClient
 
diff --git a/src/new_sentry_plugins/vsts/.gitignore b/src/test_only_plugins/vsts/.gitignore
similarity index 100%
rename from src/new_sentry_plugins/vsts/.gitignore
rename to src/test_only_plugins/vsts/.gitignore
diff --git a/src/new_sentry_plugins/vsts/LICENSE b/src/test_only_plugins/vsts/LICENSE
similarity index 100%
rename from src/new_sentry_plugins/vsts/LICENSE
rename to src/test_only_plugins/vsts/LICENSE
diff --git a/src/new_sentry_plugins/vsts/README.rst b/src/test_only_plugins/vsts/README.rst
similarity index 100%
rename from src/new_sentry_plugins/vsts/README.rst
rename to src/test_only_plugins/vsts/README.rst
diff --git a/src/new_sentry_plugins/vsts/__init__.py b/src/test_only_plugins/vsts/__init__.py
similarity index 100%
rename from src/new_sentry_plugins/vsts/__init__.py
rename to src/test_only_plugins/vsts/__init__.py
diff --git a/src/new_sentry_plugins/vsts/client.py b/src/test_only_plugins/vsts/client.py
similarity index 98%
rename from src/new_sentry_plugins/vsts/client.py
rename to src/test_only_plugins/vsts/client.py
index 1352ff953a..afb3f1a864 100644
--- a/src/new_sentry_plugins/vsts/client.py
+++ b/src/test_only_plugins/vsts/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.client import AuthApiClient
+from test_only_plugins.client import AuthApiClient
 
 UNSET = object()
 
diff --git a/src/new_sentry_plugins/vsts/mixins.py b/src/test_only_plugins/vsts/mixins.py
similarity index 84%
rename from src/new_sentry_plugins/vsts/mixins.py
rename to src/test_only_plugins/vsts/mixins.py
index 5d1b802c07..843ec54aff 100644
--- a/src/new_sentry_plugins/vsts/mixins.py
+++ b/src/test_only_plugins/vsts/mixins.py
@@ -4,8 +4,8 @@ import logging
 
 from sentry.exceptions import PluginError
 
-from new_sentry_plugins.base import CorePluginMixin
-from new_sentry_plugins.constants import ERR_UNAUTHORIZED
+from test_only_plugins.base import CorePluginMixin
+from test_only_plugins.constants import ERR_UNAUTHORIZED
 
 from .client import VstsClient
 
diff --git a/src/new_sentry_plugins/vsts/plugin.py b/src/test_only_plugins/vsts/plugin.py
similarity index 100%
rename from src/new_sentry_plugins/vsts/plugin.py
rename to src/test_only_plugins/vsts/plugin.py
diff --git a/src/new_sentry_plugins/vsts/repository_provider.py b/src/test_only_plugins/vsts/repository_provider.py
similarity index 100%
rename from src/new_sentry_plugins/vsts/repository_provider.py
rename to src/test_only_plugins/vsts/repository_provider.py
diff --git a/src/new_sentry_plugins/vsts/testutils.py b/src/test_only_plugins/vsts/testutils.py
similarity index 100%
rename from src/new_sentry_plugins/vsts/testutils.py
rename to src/test_only_plugins/vsts/testutils.py
diff --git a/tests/sentry_plugins/asana/test_plugin.py b/tests/sentry_plugins/asana/test_plugin.py
index f5a818ef2a..d1a0e8c38d 100644
--- a/tests/sentry_plugins/asana/test_plugin.py
+++ b/tests/sentry_plugins/asana/test_plugin.py
@@ -10,7 +10,7 @@ from sentry.testutils import PluginTestCase
 from sentry.utils import json
 from social_auth.models import UserSocialAuth
 
-from new_sentry_plugins.asana.plugin import AsanaPlugin
+from test_only_plugins.asana.plugin import AsanaPlugin
 
 
 class AsanaPluginTest(PluginTestCase):
@@ -26,7 +26,7 @@ class AsanaPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "asana"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("asana", self.plugin)
+        self.assertTestOnlyPluginInstalled("asana", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py b/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py
index c92d6d73fa..0acadba72f 100644
--- a/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py
+++ b/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py
@@ -6,8 +6,8 @@ from django.utils import timezone
 from sentry.models import Commit, CommitAuthor, Repository
 from sentry.testutils import APITestCase, TestCase
 
-from new_sentry_plugins.bitbucket.endpoints.webhook import parse_raw_user_email, parse_raw_user_name
-from new_sentry_plugins.bitbucket.testutils import PUSH_EVENT_EXAMPLE
+from test_only_plugins.bitbucket.endpoints.webhook import parse_raw_user_email, parse_raw_user_name
+from test_only_plugins.bitbucket.testutils import PUSH_EVENT_EXAMPLE
 
 BAD_IP = "109.111.111.10"
 BITBUCKET_IP_IN_RANGE = "104.192.143.10"
diff --git a/tests/sentry_plugins/bitbucket/test_plugin.py b/tests/sentry_plugins/bitbucket/test_plugin.py
index c5c1361d9f..ecf03051fd 100644
--- a/tests/sentry_plugins/bitbucket/test_plugin.py
+++ b/tests/sentry_plugins/bitbucket/test_plugin.py
@@ -10,7 +10,7 @@ from sentry.testutils import PluginTestCase
 
 from social_auth.models import UserSocialAuth
 
-from new_sentry_plugins.bitbucket.plugin import BitbucketPlugin
+from test_only_plugins.bitbucket.plugin import BitbucketPlugin
 
 
 class BitbucketPluginTest(PluginTestCase):
@@ -26,7 +26,7 @@ class BitbucketPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "bitbucket"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("bitbucket", self.plugin)
+        self.assertTestOnlyPluginInstalled("bitbucket", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/bitbucket/test_repository_provider.py b/tests/sentry_plugins/bitbucket/test_repository_provider.py
index 57ba6a1699..c41904bfa0 100644
--- a/tests/sentry_plugins/bitbucket/test_repository_provider.py
+++ b/tests/sentry_plugins/bitbucket/test_repository_provider.py
@@ -7,8 +7,8 @@ from sentry.models import Repository
 from sentry.testutils import PluginTestCase
 from social_auth.models import UserSocialAuth
 
-from new_sentry_plugins.bitbucket.plugin import BitbucketRepositoryProvider
-from new_sentry_plugins.bitbucket.testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH
+from test_only_plugins.bitbucket.plugin import BitbucketRepositoryProvider
+from test_only_plugins.bitbucket.testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH
 
 
 class BitbucketPluginTest(PluginTestCase):
diff --git a/tests/sentry_plugins/clubhouse/test_plugin.py b/tests/sentry_plugins/clubhouse/test_plugin.py
index 01d6660682..bbf300a928 100644
--- a/tests/sentry_plugins/clubhouse/test_plugin.py
+++ b/tests/sentry_plugins/clubhouse/test_plugin.py
@@ -8,7 +8,7 @@ from django.test import RequestFactory
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.clubhouse.plugin import ClubhousePlugin
+from test_only_plugins.clubhouse.plugin import ClubhousePlugin
 
 
 class ClubhousePluginTest(PluginTestCase):
@@ -24,7 +24,7 @@ class ClubhousePluginTest(PluginTestCase):
         assert self.plugin.conf_key == "clubhouse"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("clubhouse", self.plugin)
+        self.assertTestOnlyPluginInstalled("clubhouse", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/github/endpoints/test_webhooks.py b/tests/sentry_plugins/github/endpoints/test_webhooks.py
index 7101cd58df..df5565e77d 100644
--- a/tests/sentry_plugins/github/endpoints/test_webhooks.py
+++ b/tests/sentry_plugins/github/endpoints/test_webhooks.py
@@ -16,7 +16,7 @@ from sentry.models import (
 from sentry.testutils import APITestCase
 from uuid import uuid4
 
-from new_sentry_plugins.github.testutils import (
+from test_only_plugins.github.testutils import (
     INSTALLATION_EVENT_EXAMPLE,
     INSTALLATION_REPO_EVENT,
     PUSH_EVENT_EXAMPLE,
diff --git a/tests/sentry_plugins/github/test_plugin.py b/tests/sentry_plugins/github/test_plugin.py
index 1854daa655..9fb3b38130 100644
--- a/tests/sentry_plugins/github/test_plugin.py
+++ b/tests/sentry_plugins/github/test_plugin.py
@@ -10,7 +10,7 @@ from sentry.testutils import PluginTestCase
 from sentry.utils import json
 from social_auth.models import UserSocialAuth
 
-from new_sentry_plugins.github.plugin import GitHubPlugin
+from test_only_plugins.github.plugin import GitHubPlugin
 
 
 class GitHubPluginTest(PluginTestCase):
@@ -26,7 +26,7 @@ class GitHubPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "github"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("github", self.plugin)
+        self.assertTestOnlyPluginInstalled("github", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/github/test_provider.py b/tests/sentry_plugins/github/test_provider.py
index 101a03c7ad..f060f5dd4f 100644
--- a/tests/sentry_plugins/github/test_provider.py
+++ b/tests/sentry_plugins/github/test_provider.py
@@ -9,9 +9,9 @@ from sentry.models import Integration, OrganizationIntegration, Repository
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.github.client import GitHubClient, GitHubAppsClient
-from new_sentry_plugins.github.plugin import GitHubAppsRepositoryProvider, GitHubRepositoryProvider
-from new_sentry_plugins.github.testutils import (
+from test_only_plugins.github.client import GitHubClient, GitHubAppsClient
+from test_only_plugins.github.plugin import GitHubAppsRepositoryProvider, GitHubRepositoryProvider
+from test_only_plugins.github.testutils import (
     COMPARE_COMMITS_EXAMPLE,
     GET_LAST_COMMITS_EXAMPLE,
     INTSTALLATION_REPOSITORIES_API_RESPONSE,
diff --git a/tests/sentry_plugins/gitlab/test_plugin.py b/tests/sentry_plugins/gitlab/test_plugin.py
index 38a582acf5..32b454243b 100644
--- a/tests/sentry_plugins/gitlab/test_plugin.py
+++ b/tests/sentry_plugins/gitlab/test_plugin.py
@@ -8,7 +8,7 @@ from django.test import RequestFactory
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.gitlab.plugin import GitLabPlugin
+from test_only_plugins.gitlab.plugin import GitLabPlugin
 
 
 class GitLabPluginTest(PluginTestCase):
@@ -24,7 +24,7 @@ class GitLabPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "gitlab"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("gitlab", self.plugin)
+        self.assertTestOnlyPluginInstalled("gitlab", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/heroku/test_plugin.py b/tests/sentry_plugins/heroku/test_plugin.py
index 4773d0f817..13b95a0563 100644
--- a/tests/sentry_plugins/heroku/test_plugin.py
+++ b/tests/sentry_plugins/heroku/test_plugin.py
@@ -20,7 +20,7 @@ from sentry.models import (
 )
 from sentry.testutils import TestCase
 
-from new_sentry_plugins.heroku.plugin import HerokuReleaseHook
+from test_only_plugins.heroku.plugin import HerokuReleaseHook
 
 
 class SetRefsTest(TestCase):
diff --git a/tests/sentry_plugins/jira/test_plugin.py b/tests/sentry_plugins/jira/test_plugin.py
index c029f8dab2..bb8a2643c9 100644
--- a/tests/sentry_plugins/jira/test_plugin.py
+++ b/tests/sentry_plugins/jira/test_plugin.py
@@ -9,7 +9,7 @@ from django.test import RequestFactory
 from sentry.testutils import TestCase
 from sentry.utils import json
 
-from new_sentry_plugins.jira.plugin import JiraPlugin
+from test_only_plugins.jira.plugin import JiraPlugin
 
 create_meta_response = {
     "expand": "projects",
diff --git a/tests/sentry_plugins/jira_ac/test_plugin.py b/tests/sentry_plugins/jira_ac/test_plugin.py
index 56bc138803..9c71bdf87e 100644
--- a/tests/sentry_plugins/jira_ac/test_plugin.py
+++ b/tests/sentry_plugins/jira_ac/test_plugin.py
@@ -4,7 +4,7 @@ from exam import fixture
 from django.test import RequestFactory
 from sentry.testutils import PluginTestCase
 
-from new_sentry_plugins.jira_ac.plugin import JiraACPlugin
+from test_only_plugins.jira_ac.plugin import JiraACPlugin
 
 
 class JiraPluginTest(PluginTestCase):
@@ -20,5 +20,5 @@ class JiraPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "jira-ac"
 
     def test_entry_point(self):
-        self.assertNewAppInstalled("jira_ac", "new_sentry_plugins.jira_ac")
-        self.assertNewPluginInstalled("jira_ac", self.plugin)
+        self.assertTestOnlyAppInstalled("jira_ac", "test_only_plugins.jira_ac")
+        self.assertTestOnlyPluginInstalled("jira_ac", self.plugin)
diff --git a/tests/sentry_plugins/pagerduty/test_plugin.py b/tests/sentry_plugins/pagerduty/test_plugin.py
index 9a7e816e9d..1e8c38e261 100644
--- a/tests/sentry_plugins/pagerduty/test_plugin.py
+++ b/tests/sentry_plugins/pagerduty/test_plugin.py
@@ -10,7 +10,7 @@ from sentry.plugins.base import Notification
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.pagerduty.plugin import PagerDutyPlugin
+from test_only_plugins.pagerduty.plugin import PagerDutyPlugin
 
 INVALID_METHOD = (
     '{"status":"invalid method","message":"You must use HTTP POST to submit your event"}'
@@ -32,7 +32,7 @@ class PagerDutyPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "pagerduty"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("pagerduty", self.plugin)
+        self.assertTestOnlyPluginInstalled("pagerduty", self.plugin)
 
     def test_is_configured(self):
         assert self.plugin.is_configured(self.project) is False
diff --git a/tests/sentry_plugins/phabricator/test_plugin.py b/tests/sentry_plugins/phabricator/test_plugin.py
index f97be2b438..6c009e743d 100644
--- a/tests/sentry_plugins/phabricator/test_plugin.py
+++ b/tests/sentry_plugins/phabricator/test_plugin.py
@@ -6,7 +6,7 @@ from exam import fixture
 from django.test import RequestFactory
 from sentry.testutils import PluginTestCase
 
-from new_sentry_plugins.phabricator.plugin import PhabricatorPlugin
+from test_only_plugins.phabricator.plugin import PhabricatorPlugin
 
 
 class PhabricatorPluginTest(PluginTestCase):
@@ -22,7 +22,7 @@ class PhabricatorPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "phabricator"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("phabricator", self.plugin)
+        self.assertTestOnlyPluginInstalled("phabricator", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/pivotal/test_pivotal_plugin.py b/tests/sentry_plugins/pivotal/test_pivotal_plugin.py
index e868ded260..32ec8d7f7d 100644
--- a/tests/sentry_plugins/pivotal/test_pivotal_plugin.py
+++ b/tests/sentry_plugins/pivotal/test_pivotal_plugin.py
@@ -5,7 +5,7 @@ from django.core.urlresolvers import reverse
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.pivotal.plugin import PivotalPlugin
+from test_only_plugins.pivotal.plugin import PivotalPlugin
 
 
 class PivotalPluginTest(PluginTestCase):
@@ -17,7 +17,7 @@ class PivotalPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "pivotal"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("pivotal", self.plugin)
+        self.assertTestOnlyPluginInstalled("pivotal", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/pushover/test_plugin.py b/tests/sentry_plugins/pushover/test_plugin.py
index 1f177e68d0..0381649a5d 100644
--- a/tests/sentry_plugins/pushover/test_plugin.py
+++ b/tests/sentry_plugins/pushover/test_plugin.py
@@ -10,7 +10,7 @@ from sentry.testutils import PluginTestCase
 from sentry.utils import json
 from six.moves.urllib.parse import parse_qs
 
-from new_sentry_plugins.pushover.plugin import PushoverPlugin
+from test_only_plugins.pushover.plugin import PushoverPlugin
 
 SUCCESS = """{"status":1,"request":"e460545a8b333d0da2f3602aff3133d6"}"""
 
@@ -24,7 +24,7 @@ class PushoverPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "pushover"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("pushover", self.plugin)
+        self.assertTestOnlyPluginInstalled("pushover", self.plugin)
 
     def test_is_configured(self):
         assert self.plugin.is_configured(self.project) is False
diff --git a/tests/sentry_plugins/segment/test_plugin.py b/tests/sentry_plugins/segment/test_plugin.py
index 9a17a6f578..6151bfcdb8 100644
--- a/tests/sentry_plugins/segment/test_plugin.py
+++ b/tests/sentry_plugins/segment/test_plugin.py
@@ -6,7 +6,7 @@ from exam import fixture
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.segment.plugin import SegmentPlugin
+from test_only_plugins.segment.plugin import SegmentPlugin
 
 
 class SegmentPluginTest(PluginTestCase):
@@ -18,7 +18,7 @@ class SegmentPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "segment"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("segment", self.plugin)
+        self.assertTestOnlyPluginInstalled("segment", self.plugin)
 
     @responses.activate
     def test_simple_notification(self):
diff --git a/tests/sentry_plugins/sessionstack/test_plugin.py b/tests/sentry_plugins/sessionstack/test_plugin.py
index ff741a80e3..d7ee23d8a4 100644
--- a/tests/sentry_plugins/sessionstack/test_plugin.py
+++ b/tests/sentry_plugins/sessionstack/test_plugin.py
@@ -5,7 +5,7 @@ import responses
 from exam import fixture
 from sentry.testutils import PluginTestCase
 
-from new_sentry_plugins.sessionstack.plugin import SessionStackPlugin
+from test_only_plugins.sessionstack.plugin import SessionStackPlugin
 
 EXPECTED_SESSION_URL = (
     "https://app.sessionstack.com/player/#/sessions/588778a6c5762c1d566653ff"
@@ -26,7 +26,7 @@ class SessionStackPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "sessionstack"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("sessionstack", self.plugin)
+        self.assertTestOnlyPluginInstalled("sessionstack", self.plugin)
 
     @responses.activate
     def test_config_validation(self):
diff --git a/tests/sentry_plugins/slack/test_plugin.py b/tests/sentry_plugins/slack/test_plugin.py
index 5d37820134..32b8221fc0 100644
--- a/tests/sentry_plugins/slack/test_plugin.py
+++ b/tests/sentry_plugins/slack/test_plugin.py
@@ -9,7 +9,7 @@ from sentry.testutils import PluginTestCase
 from sentry.utils import json
 from six.moves.urllib.parse import parse_qs
 
-from new_sentry_plugins.slack.plugin import SlackPlugin
+from test_only_plugins.slack.plugin import SlackPlugin
 
 
 class SlackPluginTest(PluginTestCase):
@@ -21,7 +21,7 @@ class SlackPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "slack"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("slack", self.plugin)
+        self.assertTestOnlyPluginInstalled("slack", self.plugin)
 
     @responses.activate
     def test_simple_notification(self):
diff --git a/tests/sentry_plugins/splunk/test_plugin.py b/tests/sentry_plugins/splunk/test_plugin.py
index a5fe0c9f46..cbc3989e8a 100644
--- a/tests/sentry_plugins/splunk/test_plugin.py
+++ b/tests/sentry_plugins/splunk/test_plugin.py
@@ -6,7 +6,7 @@ from exam import fixture
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.splunk.plugin import SplunkPlugin
+from test_only_plugins.splunk.plugin import SplunkPlugin
 
 
 class SplunkPluginTest(PluginTestCase):
@@ -18,7 +18,7 @@ class SplunkPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "splunk"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("splunk", self.plugin)
+        self.assertTestOnlyPluginInstalled("splunk", self.plugin)
 
     @responses.activate
     def test_simple_notification(self):
diff --git a/tests/sentry_plugins/test_anonymizeip.py b/tests/sentry_plugins/test_anonymizeip.py
index 2d9f8e38cd..0c1f0091bd 100644
--- a/tests/sentry_plugins/test_anonymizeip.py
+++ b/tests/sentry_plugins/test_anonymizeip.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from new_sentry_plugins.anonymizeip import anonymize_ip
+from test_only_plugins.anonymizeip import anonymize_ip
 
 
 def test_ipv6():
diff --git a/tests/sentry_plugins/test_client.py b/tests/sentry_plugins/test_client.py
index a17ee294cf..29a05abbef 100644
--- a/tests/sentry_plugins/test_client.py
+++ b/tests/sentry_plugins/test_client.py
@@ -6,13 +6,13 @@ import responses
 from mock import Mock
 from sentry.testutils import TestCase
 
-from new_sentry_plugins.exceptions import (
+from test_only_plugins.exceptions import (
     ApiError,
     ApiHostError,
     ApiUnauthorized,
     UnsupportedResponseType,
 )
-from new_sentry_plugins.client import ApiClient, AuthApiClient
+from test_only_plugins.client import ApiClient, AuthApiClient
 
 
 class ApiClientTest(TestCase):
diff --git a/tests/sentry_plugins/victorops/test_plugin.py b/tests/sentry_plugins/victorops/test_plugin.py
index bf9c101cc7..c751b4d92a 100644
--- a/tests/sentry_plugins/victorops/test_plugin.py
+++ b/tests/sentry_plugins/victorops/test_plugin.py
@@ -8,7 +8,7 @@ from sentry.plugins.base import Notification
 from sentry.testutils import PluginTestCase
 from sentry.utils import json
 
-from new_sentry_plugins.victorops.plugin import VictorOpsPlugin
+from test_only_plugins.victorops.plugin import VictorOpsPlugin
 
 SUCCESS = """{
   "result":"success",
@@ -37,7 +37,7 @@ class VictorOpsPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "victorops"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("victorops", self.plugin)
+        self.assertTestOnlyPluginInstalled("victorops", self.plugin)
 
     def test_is_configured(self):
         assert self.plugin.is_configured(self.project) is False
diff --git a/tests/sentry_plugins/vsts/test_plugin.py b/tests/sentry_plugins/vsts/test_plugin.py
index dc66c68091..41a54c9633 100644
--- a/tests/sentry_plugins/vsts/test_plugin.py
+++ b/tests/sentry_plugins/vsts/test_plugin.py
@@ -11,7 +11,7 @@ from sentry.testutils import PluginTestCase
 from sentry.utils import json
 from social_auth.models import UserSocialAuth
 
-from new_sentry_plugins.vsts.plugin import VstsPlugin
+from test_only_plugins.vsts.plugin import VstsPlugin
 
 WORK_ITEM_RESPONSE = """{
   "id": 309,
@@ -72,7 +72,7 @@ class VstsPluginTest(PluginTestCase):
         assert self.plugin.conf_key == "vsts"
 
     def test_entry_point(self):
-        self.assertNewPluginInstalled("vsts", self.plugin)
+        self.assertTestOnlyPluginInstalled("vsts", self.plugin)
 
     def test_get_issue_label(self):
         group = self.create_group(message="Hello world", culprit="foo.bar")
diff --git a/tests/sentry_plugins/vsts/test_provider.py b/tests/sentry_plugins/vsts/test_provider.py
index ae4209fb4d..70b09c0825 100644
--- a/tests/sentry_plugins/vsts/test_provider.py
+++ b/tests/sentry_plugins/vsts/test_provider.py
@@ -7,8 +7,8 @@ from social_auth.models import UserSocialAuth
 from sentry.testutils import PluginTestCase
 from sentry.models import Repository
 
-from new_sentry_plugins.vsts.repository_provider import VisualStudioRepositoryProvider
-from new_sentry_plugins.vsts.testutils import COMPARE_COMMITS_EXAMPLE, FILE_CHANGES_EXAMPLE
+from test_only_plugins.vsts.repository_provider import VisualStudioRepositoryProvider
+from test_only_plugins.vsts.testutils import COMPARE_COMMITS_EXAMPLE, FILE_CHANGES_EXAMPLE
 
 
 class VisualStudioRepositoryProviderPluginTest(PluginTestCase):
