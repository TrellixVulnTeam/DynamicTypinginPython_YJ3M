commit ecfc15e9afb5faa7bb7bf826c99f1c10f98f9939
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Nov 20 10:47:27 2019 -0500

    fix(global-header): Fix default values for the datetime prop of the global selection store (#15663)

diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index 04c77c9740..df8de4b5b7 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -8,20 +8,23 @@ import {
   LOCAL_STORAGE_KEY,
 } from 'app/constants/globalSelectionHeader';
 import {getStateFromQuery} from 'app/components/organizations/globalSelectionHeader/utils';
+import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import OrganizationsStore from 'app/stores/organizationsStore';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
 import localStorage from 'app/utils/localStorage';
 
+const DEFAULT_PARAMS = getParams({});
+
 const getDefaultSelection = () => {
   return {
     projects: [],
     environments: [],
     datetime: {
-      [DATE_TIME.START]: null,
-      [DATE_TIME.END]: null,
-      [DATE_TIME.PERIOD]: null,
-      [DATE_TIME.UTC]: null,
+      [DATE_TIME.START]: DEFAULT_PARAMS.start || null,
+      [DATE_TIME.END]: DEFAULT_PARAMS.end || null,
+      [DATE_TIME.PERIOD]: DEFAULT_PARAMS.statsPeriod || null,
+      [DATE_TIME.UTC]: DEFAULT_PARAMS.utc || null,
     },
   };
 };
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index 6106663e84..a4b07f4ac2 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -26,7 +26,7 @@ describe('GlobalSelectionStore', function() {
     expect(GlobalSelectionStore.get()).toEqual({
       projects: [],
       environments: [],
-      datetime: {period: null, start: null, end: null, utc: null},
+      datetime: {period: '14d', start: null, end: null, utc: null},
     });
   });
 
@@ -39,7 +39,7 @@ describe('GlobalSelectionStore', function() {
 
   it('updateDateTime()', async function() {
     expect(GlobalSelectionStore.get().datetime).toEqual({
-      period: null,
+      period: '14d',
       start: null,
       end: null,
       utc: null,
diff --git a/tests/js/spec/utils/withGlobalSelection.spec.jsx b/tests/js/spec/utils/withGlobalSelection.spec.jsx
index f6a1bf90eb..a9f43efb60 100644
--- a/tests/js/spec/utils/withGlobalSelection.spec.jsx
+++ b/tests/js/spec/utils/withGlobalSelection.spec.jsx
@@ -29,7 +29,7 @@ describe('withGlobalSelection HoC', function() {
     const wrapper = mount(<Container />);
 
     selection = wrapper.find('MyComponent').prop('selection');
-    expect(selection.datetime.period).toEqual(null);
+    expect(selection.datetime.period).toEqual('14d');
     expect(selection.datetime.start).toEqual(null);
     expect(selection.datetime.end).toEqual(null);
 
diff --git a/tests/js/spec/views/events/index.spec.jsx b/tests/js/spec/views/events/index.spec.jsx
index 8d3f540c99..e5282551e2 100644
--- a/tests/js/spec/views/events/index.spec.jsx
+++ b/tests/js/spec/views/events/index.spec.jsx
@@ -261,7 +261,7 @@ describe('EventsContainer', function() {
     it('updates router when changing periods', async function() {
       expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(null);
       expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(null);
-      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual(null);
+      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual('14d');
 
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
diff --git a/tests/js/spec/views/issueList/overview.spec.jsx b/tests/js/spec/views/issueList/overview.spec.jsx
index 85abbae666..ed9b47363a 100644
--- a/tests/js/spec/views/issueList/overview.spec.jsx
+++ b/tests/js/spec/views/issueList/overview.spec.jsx
@@ -475,6 +475,7 @@ describe('IssueList,', function() {
             environment: [],
             project: [],
             sort: 'freq',
+            statsPeriod: '14d',
           },
         })
       );
@@ -514,6 +515,7 @@ describe('IssueList,', function() {
             environment: [],
             project: [],
             query: 'dogs',
+            statsPeriod: '14d',
           },
         })
       );
@@ -656,6 +658,7 @@ describe('IssueList,', function() {
           query: {
             environment: [],
             project: ['3559'],
+            statsPeriod: '14d',
           },
         })
       );
@@ -711,6 +714,7 @@ describe('IssueList,', function() {
           query: {
             project: [],
             environment: [],
+            statsPeriod: '14d',
           },
         })
       );
@@ -913,6 +917,7 @@ describe('IssueList,', function() {
           environment: [],
           project: [],
           query: 'is:unresolved',
+          statsPeriod: '14d',
         },
       };
       expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
@@ -940,6 +945,7 @@ describe('IssueList,', function() {
           environment: [],
           project: [],
           query: 'is:unresolved',
+          statsPeriod: '14d',
         },
       };
       expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
@@ -960,6 +966,7 @@ describe('IssueList,', function() {
           environment: [],
           project: [],
           query: 'is:unresolved',
+          statsPeriod: '14d',
         },
       };
       expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
@@ -977,9 +984,12 @@ describe('IssueList,', function() {
       expect(browserHistory.push).toHaveBeenLastCalledWith({
         pathname: '/organizations/org-slug/issues/',
         query: {
+          cursor: undefined,
           environment: [],
+          page: undefined,
           project: [],
           query: 'is:unresolved',
+          statsPeriod: '14d',
         },
       });
     });
