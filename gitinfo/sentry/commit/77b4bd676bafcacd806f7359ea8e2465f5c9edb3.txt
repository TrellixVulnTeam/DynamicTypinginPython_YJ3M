commit 77b4bd676bafcacd806f7359ea8e2465f5c9edb3
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 31 16:02:04 2012 -0800

    Better handling of invalid timestamps

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 2487c5ded5..51fbd8e3d8 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -20,7 +20,11 @@ from sentry.queue.client import delay
 from sentry.utils import is_float, json
 from sentry.utils.auth import get_signature, parse_auth_header
 
-logger = logging.getLogger(__name__)
+logger = logging.getLogger('sentry.errors.coreapi')
+
+
+class InvalidTimestamp(ValueError):
+    pass
 
 
 class APIError(Exception):
@@ -177,8 +181,7 @@ def process_data_timestamp(data):
         try:
             data['timestamp'] = datetime.strptime(data['timestamp'], format)
         except:
-            logger.exception('Failed reading timestamp')
-            del data['timestamp']
+            raise InvalidTimestamp('Invalid value for timestamp: %r' % data['timestamp'])
 
     return data
 
diff --git a/sentry/web/api.py b/sentry/web/api.py
index bf54c589b2..b7ea73d512 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -5,6 +5,7 @@ sentry.web.views
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+import logging
 
 from django.db.models import Q
 from django.http import HttpResponse, HttpResponseBadRequest, \
@@ -16,7 +17,7 @@ from sentry.conf import settings
 from sentry.coreapi import project_from_auth_vars, project_from_api_key_and_id, \
   project_from_id, decode_and_decompress_data, safely_load_json_string, \
   validate_data, insert_data_to_database, APIError, APIUnauthorized, \
-  extract_auth_vars
+  extract_auth_vars, InvalidTimestamp
 from sentry.models import Group, GroupBookmark, Project, View
 from sentry.utils import json
 from sentry.web.decorators import has_access
@@ -24,6 +25,8 @@ from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response, \
   get_project_list, render_to_string
 
+logger = logging.getLogger('sentry.errors.coreapi')
+
 
 @csrf_exempt
 @require_http_methods(['POST'])
@@ -34,8 +37,10 @@ def store(request):
 
         if auth_vars:
             server_version = auth_vars.get('sentry_version', '1.0')
+            client = auth_vars.get('sentry_client', '<unknown client>')
         else:
             server_version = request.GET.get('version', '1.0')
+            client = request.META.get('HTTP_REFERER', request.GET.get('client'))
 
         if server_version not in ('1.0', '2.0'):
             raise APIError('Client/server version mismatch. Unsupported version: %r' % server_version)
@@ -55,7 +60,16 @@ def store(request):
             data = decode_and_decompress_data(data)
         data = safely_load_json_string(data)
 
-        validate_data(project, data)
+        try:
+            validate_data(project, data)
+        except InvalidTimestamp:
+            # Log the error, remove the timestamp, and revalidate
+            logger.error('Client %r passed an invalid value for timestamp %r' % (
+                data['timestamp'],
+                client,
+            ))
+            del data['timestamp']
+            validate_data(project, data)
 
         insert_data_to_database(data)
     except APIError, error:
diff --git a/tests/api/tests.py b/tests/api/tests.py
index 67ade94c96..4bcb01aea1 100644
--- a/tests/api/tests.py
+++ b/tests/api/tests.py
@@ -13,7 +13,7 @@ from sentry.models import Project
 from sentry.coreapi import project_from_id, project_from_api_key_and_id, \
   extract_auth_vars, project_from_auth_vars, validate_hmac, APIUnauthorized, \
   APIForbidden, APITimestampExpired, APIError, process_data_timestamp, \
-  insert_data_to_database
+  insert_data_to_database, InvalidTimestamp
 from sentry.utils.auth import get_signature
 
 from tests.base import TestCase
@@ -162,6 +162,11 @@ class APITest(TestCase):
         self.assertTrue('timestamp' in data)
         self.assertEquals(data['timestamp'], d)
 
+    def test_process_data_timestamp_invalid_timestamp(self):
+        self.assertRaises(InvalidTimestamp, process_data_timestamp, {
+            'timestamp': 'foo'
+        })
+
     def test_insert_data_to_database_with_queue(self):
         insert_data_to_database({
             'foo': 'bar'
