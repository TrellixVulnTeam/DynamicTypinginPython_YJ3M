commit a595779256eb56c747b91be4fd2ecb112c26e3ab
Author: Mark Story <mark@sentry.io>
Date:   Wed Jan 15 13:33:15 2020 -0500

    ref(ts) Conver OrganizationBadge to Typescript (#16467)
    
    I've removed the direct OrganizationStore subscription and instead
    decided to leverage the withOrganization() HOC which retains the
    behavior of seeing avatar updates in org settings immediately.

diff --git a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.tsx b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.tsx
index 796f8e2957..5d9584ac4d 100644
--- a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.tsx
+++ b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.tsx
@@ -1,12 +1,12 @@
 import React from 'react';
 
-import {LightWeightOrganization} from 'app/types';
+import {OrganizationSummary} from 'app/types';
 import {explodeSlug} from 'app/utils';
 import BaseAvatar from 'app/components/avatar/baseAvatar';
 import SentryTypes from 'app/sentryTypes';
 
 type Props = {
-  organization: LightWeightOrganization;
+  organization: OrganizationSummary;
 } & Omit<BaseAvatar['props'], 'uploadPath' | 'uploadId'>;
 
 class OrganizationAvatar extends React.Component<Props> {
diff --git a/src/sentry/static/sentry/app/components/idBadge/badgeDisplayName.tsx b/src/sentry/static/sentry/app/components/idBadge/badgeDisplayName.tsx
index 9725e742ad..c668502225 100644
--- a/src/sentry/static/sentry/app/components/idBadge/badgeDisplayName.tsx
+++ b/src/sentry/static/sentry/app/components/idBadge/badgeDisplayName.tsx
@@ -3,7 +3,7 @@ import styled from '@emotion/styled';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
-const BadgeDisplayName = styled('span')<{hideOverflow?: boolean}>`
+const BadgeDisplayName = styled('span')<{hideOverflow?: string | boolean}>`
   ${p => p.hideOverflow && overflowEllipsis};
   ${p =>
     p.hideOverflow &&
diff --git a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
deleted file mode 100644
index 44f4cd7bf1..0000000000
--- a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
+++ /dev/null
@@ -1,87 +0,0 @@
-import isEqual from 'lodash/isEqual';
-import createReactClass from 'create-react-class';
-import PropTypes from 'prop-types';
-import React from 'react';
-import Reflux from 'reflux';
-
-import BaseBadge from 'app/components/idBadge/baseBadge';
-import BadgeDisplayName from 'app/components/idBadge/badgeDisplayName';
-import OrganizationStore from 'app/stores/organizationsStore';
-import SentryTypes from 'app/sentryTypes';
-
-class OrganizationBadge extends React.Component {
-  static propTypes = {
-    ...BaseBadge.propTypes,
-    organization: SentryTypes.Organization.isRequired,
-    avatarSize: PropTypes.number,
-    /**
-     * If true, will use default max-width, or specify one as a string
-     */
-    hideOverflow: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
-    hideAvatar: PropTypes.bool,
-  };
-
-  static defaultProps = {
-    avatarSize: 24,
-    hideAvatar: false,
-    hideOverflow: true,
-  };
-
-  render() {
-    const {hideOverflow, organization, ...props} = this.props;
-
-    return (
-      <BaseBadge
-        displayName={
-          <BadgeDisplayName hideOverflow={hideOverflow}>
-            {organization.slug}
-          </BadgeDisplayName>
-        }
-        organization={organization}
-        {...props}
-      />
-    );
-  }
-}
-
-const OrganizationBadgeContainer = createReactClass({
-  displayName: 'OrganizationBadgeContainer',
-  propTypes: {
-    organization: SentryTypes.Organization.isRequired,
-  },
-  mixins: [Reflux.listenTo(OrganizationStore, 'onOrganizationStoreUpdate')],
-  getInitialState() {
-    return {
-      organization: this.props.organization,
-    };
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (this.state.organization === nextProps.organization) {
-      return;
-    }
-    if (isEqual(this.state.organization, nextProps.organization)) {
-      return;
-    }
-
-    this.setState({
-      organization: nextProps.organization,
-    });
-  },
-
-  onOrganizationStoreUpdate() {
-    const organization = OrganizationStore.get(this.state.organization.slug);
-    if (organization && isEqual(organization.avatar, this.state.organization.avatar)) {
-      return;
-    }
-
-    this.setState({
-      organization,
-    });
-  },
-
-  render() {
-    return <OrganizationBadge {...this.props} organization={this.state.organization} />;
-  },
-});
-export default OrganizationBadgeContainer;
diff --git a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx
new file mode 100644
index 0000000000..a0776eecc5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.tsx
@@ -0,0 +1,54 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import BaseBadge from 'app/components/idBadge/baseBadge';
+import BadgeDisplayName from 'app/components/idBadge/badgeDisplayName';
+import SentryTypes from 'app/sentryTypes';
+import {Organization} from 'app/types';
+import OrganizationAvatar from 'app/components/avatar/organizationAvatar';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = {
+  // A full organization is not used, but required to satisfy types with
+  // withOrganization()
+  organization: Organization;
+  className?: string;
+  avatarSize?: OrganizationAvatar['props']['size'];
+  // If true, will use default max-width, or specify one as a string
+  hideOverflow?: boolean | string;
+  hideAvatar?: boolean;
+};
+
+class OrganizationBadge extends React.Component<Props> {
+  static propTypes = {
+    ...BaseBadge.propTypes,
+    organization: SentryTypes.Organization.isRequired,
+    avatarSize: PropTypes.number,
+    hideOverflow: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
+    hideAvatar: PropTypes.bool,
+  };
+
+  static defaultProps: Partial<Props> = {
+    avatarSize: 24,
+    hideAvatar: false,
+    hideOverflow: true,
+  };
+
+  render() {
+    const {hideOverflow, organization, ...props} = this.props;
+
+    return (
+      <BaseBadge
+        displayName={
+          <BadgeDisplayName hideOverflow={hideOverflow}>
+            {organization.slug}
+          </BadgeDisplayName>
+        }
+        organization={organization}
+        {...props}
+      />
+    );
+  }
+}
+
+export default withOrganization(OrganizationBadge);
diff --git a/src/sentry/static/sentry/app/components/shortId.tsx b/src/sentry/static/sentry/app/components/shortId.tsx
index 652d5f423e..3633e26826 100644
--- a/src/sentry/static/sentry/app/components/shortId.tsx
+++ b/src/sentry/static/sentry/app/components/shortId.tsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
+import isPropValid from '@emotion/is-prop-valid';
 
 import AutoSelectText from 'app/components/autoSelectText';
 
@@ -44,7 +45,7 @@ const StyledShortId = styled('div')`
   justify-content: flex-end;
 `;
 
-const StyledAutoSelectText = styled(AutoSelectText)<{
+const StyledAutoSelectText = styled(AutoSelectText, {shouldForwardProp: isPropValid})<{
   avatar: boolean;
 }>`
   margin-left: ${p => p.avatar && '0.5em'};
diff --git a/tests/js/spec/components/idBadge/index.spec.jsx b/tests/js/spec/components/idBadge/index.spec.jsx
index 12bcffd04a..6f8dba7d9b 100644
--- a/tests/js/spec/components/idBadge/index.spec.jsx
+++ b/tests/js/spec/components/idBadge/index.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import {shallow} from 'sentry-test/enzyme';
+import {mountWithTheme, shallow} from 'sentry-test/enzyme';
 
 import IdBadge from 'app/components/idBadge';
 
@@ -24,12 +24,12 @@ describe('IdBadge', function() {
   });
 
   it('renders the correct component when `organization` property is passed', function() {
-    const wrapper = shallow(
+    const wrapper = mountWithTheme(
       <IdBadge organization={TestStubs.Organization()} />,
       routerContext
     );
 
-    expect(wrapper.find('OrganizationBadgeContainer')).toHaveLength(1);
+    expect(wrapper.find('OrganizationBadge')).toHaveLength(1);
   });
 
   it('throws when no valid properties are passed', function() {
diff --git a/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap b/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap
index f3155f86ad..3d67320a43 100644
--- a/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap
+++ b/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap
@@ -1502,11 +1502,9 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                                             avatar={true}
                                           >
                                             <AutoSelectText
-                                              avatar={true}
                                               className="css-xnqjkz-StyledAutoSelectText e10rcxf31"
                                             >
                                               <div
-                                                avatar={true}
                                                 className="auto-select-text css-xnqjkz-StyledAutoSelectText e10rcxf31"
                                                 onClick={[Function]}
                                               >
