commit 29e0f36bbf253e5ff0804d7036bdd42f63f0e4fb
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 28 21:09:43 2014 -0700

    Implement additional tests/functionality for search

diff --git a/src/sentry/search/elastic_search/backend.py b/src/sentry/search/elastic_search/backend.py
index dfd2a0849a..e428cd3143 100644
--- a/src/sentry/search/elastic_search/backend.py
+++ b/src/sentry/search/elastic_search/backend.py
@@ -110,9 +110,26 @@ class ElasticSearchBackend(SearchBackend):
                 },
             }})
 
-        if date_to or date_from:
-            # TODO(dcramer):
-            raise NotImplementedError
+        # TODO(dcramer): filter might be too expensive here, need to confirm
+        if date_to and date_from:
+            query_body['filter']['and'].append({
+                'range': {date_filter: {
+                    'gte': date_from,
+                    'lte': date_to,
+                }}
+            })
+        elif date_from:
+            query_body['filter']['and'].append({
+                'range': {date_filter: {
+                    'gte': date_from,
+                }}
+            })
+        elif date_to:
+            query_body['filter']['and'].append({
+                'range': {date_filter: {
+                    'lte': date_to,
+                }}
+            })
 
         if bookmarked_by:
             # TODO(dcramer): we could store an array on each event similar to how
@@ -140,6 +157,7 @@ class ElasticSearchBackend(SearchBackend):
             body={
                 'query': {'filtered': query_body},
                 'sort': sort_clause,
+                'size': limit,
             },
         )
         if not results.get('hits'):
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index c451c61663..e014450fdb 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 from datetime import datetime, timedelta
 
 from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import GroupTagValue
+from sentry.models import GroupBookmark, GroupTagValue
 from sentry.search.django.backend import DjangoSearchBackend
 from sentry.testutils import TestCase
 
@@ -70,6 +70,12 @@ class DjangoSearchBackendTest(TestCase):
                 value=value,
             )
 
+        GroupBookmark.objects.create(
+            user=self.user,
+            group=self.group2,
+            project=self.group2.project,
+        )
+
         self.backend.index(self.event1)
         self.backend.index(self.event2)
 
@@ -119,6 +125,11 @@ class DjangoSearchBackendTest(TestCase):
         results = self.backend.query(self.project1, tags={'env': 'example.com'})
         assert len(results) == 0
 
+    def test_bookmarked_by(self):
+        results = self.backend.query(self.project1, bookmarked_by=self.user)
+        assert len(results) == 1
+        assert results[0] == self.group2
+
     def test_project(self):
         results = self.backend.query(self.project2)
         assert len(results) == 0
@@ -142,6 +153,15 @@ class DjangoSearchBackendTest(TestCase):
         assert len(results) == 1
         assert results[0] == self.group1
 
+        results = self.backend.query(
+            self.project1,
+            date_from=self.group1.first_seen,
+            date_to=self.group1.first_seen + timedelta(minutes=1),
+            date_filter='first_seen',
+        )
+        assert len(results) == 1
+        assert results[0] == self.group1
+
     def test_last_seen_date_filter(self):
         backend = self.create_backend()
 
@@ -152,7 +172,17 @@ class DjangoSearchBackendTest(TestCase):
         assert results[0] == self.group1
 
         results = self.backend.query(
-            self.project1, date_to=self.group1.last_seen - timedelta(minutes=1),
+            self.project1,
+            date_to=self.group1.last_seen - timedelta(minutes=1),
             date_filter='last_seen')
         assert len(results) == 1
         assert results[0] == self.group2
+
+        results = self.backend.query(
+            self.project1,
+            date_from=self.group2.last_seen,
+            date_to=self.group1.last_seen - timedelta(minutes=1),
+            date_filter='last_seen',
+        )
+        assert len(results) == 1
+        assert results[0] == self.group2
diff --git a/tests/sentry/search/elastic_search/test_backend.py b/tests/sentry/search/elastic_search/test_backend.py
index 81015f77f8..c1d5c717bd 100644
--- a/tests/sentry/search/elastic_search/test_backend.py
+++ b/tests/sentry/search/elastic_search/test_backend.py
@@ -7,7 +7,7 @@ import pytest
 from datetime import datetime, timedelta
 
 from sentry.constants import STATUS_RESOLVED, STATUS_UNRESOLVED
-from sentry.models import GroupTagValue
+from sentry.models import GroupBookmark, GroupTagValue
 from sentry.search.elastic_search.backend import ElasticSearchBackend
 from sentry.testutils import TestCase
 from sentry.testutils.skips import requires_elastic_search
@@ -85,6 +85,12 @@ class ElasticSearchTest(TestCase):
                 value=value,
             )
 
+        GroupBookmark.objects.create(
+            user=self.user,
+            group=self.group2,
+            project=self.group2.project,
+        )
+
         self.backend.index(self.event1)
         self.backend.index(self.event2)
 
@@ -141,11 +147,15 @@ class ElasticSearchTest(TestCase):
         assert len(results) == 0
 
     @pytest.mark.xfail
+    def test_bookmarked_by(self):
+        results = self.backend.query(self.project1, bookmarked_by=self.user)
+        assert len(results) == 1
+        assert results[0] == self.group2
+
     def test_limit(self):
         results = self.backend.query(self.project1, limit=1)
         assert len(results) == 1
 
-    @pytest.mark.xfail
     def test_first_seen_date_filter(self):
         backend = self.create_backend()
 
@@ -161,7 +171,15 @@ class ElasticSearchTest(TestCase):
         assert len(results) == 1
         assert results[0] == self.group1
 
-    @pytest.mark.xfail
+        results = self.backend.query(
+            self.project1,
+            date_from=self.group1.first_seen,
+            date_to=self.group1.first_seen + timedelta(minutes=1),
+            date_filter='first_seen',
+        )
+        assert len(results) == 1
+        assert results[0] == self.group1
+
     def test_last_seen_date_filter(self):
         backend = self.create_backend()
 
@@ -172,7 +190,17 @@ class ElasticSearchTest(TestCase):
         assert results[0] == self.group1
 
         results = self.backend.query(
-            self.project1, date_to=self.group1.last_seen - timedelta(minutes=1),
+            self.project1,
+            date_to=self.group1.last_seen - timedelta(minutes=1),
             date_filter='last_seen')
         assert len(results) == 1
         assert results[0] == self.group2
+
+        results = self.backend.query(
+            self.project1,
+            date_from=self.group2.last_seen,
+            date_to=self.group1.last_seen - timedelta(minutes=1),
+            date_filter='last_seen',
+        )
+        assert len(results) == 1
+        assert results[0] == self.group2
