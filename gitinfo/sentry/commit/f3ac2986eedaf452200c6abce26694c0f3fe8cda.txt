commit f3ac2986eedaf452200c6abce26694c0f3fe8cda
Author: Danny Lee <dlee@sentry.io>
Date:   Wed Nov 13 15:00:17 2019 -0800

    test(discover2): Tests to create/update/delete Saved Queries (#15583)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 1b21d86899..0c2d6ca096 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -384,18 +384,24 @@ class EventView {
       };
     });
 
+    const {start, end, statsPeriod} = getParams({
+      start: undefined,
+      end: undefined,
+      statsPeriod: eventViewV1.statsPeriod,
+    });
+
     return new EventView({
       fields,
+      id: undefined,
       name: eventViewV1.name,
       sorts: fromSorts(eventViewV1.data.sort),
       tags: eventViewV1.tags,
       query: eventViewV1.data.query || '',
       project: [],
-      id: undefined,
-      start: undefined,
-      end: undefined,
-      statsPeriod: eventViewV1.statsPeriod,
       environment: [],
+      start: decodeScalar(start),
+      end: decodeScalar(end),
+      statsPeriod: decodeScalar(statsPeriod),
       yAxis: undefined,
     });
   }
@@ -417,7 +423,6 @@ class EventView {
     }
 
     // normalize datetime selection
-
     const {start, end, statsPeriod} = getParams({
       start: saved.start,
       end: saved.end,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 80a0719f9a..ef5d2d5403 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -23,6 +23,14 @@ import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
 
 type Props = {
   api: Client;
+
+  /**
+   * DO NOT USE `Location` TO GENERATE `EventView` IN THIS COMPONENT.
+   *
+   * In this component, state is generated from EventView and SavedQueriesStore.
+   * Using Location to rebuild EventView will break the tests. `Location` is
+   * passed down only because it is needed for navigation.
+   */
   location: Location;
   organization: Organization;
   eventView: EventView;
@@ -106,10 +114,12 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
   };
 
   onBlurInput = (event: React.FormEvent<HTMLInputElement>) => {
-    this.setState({queryName: event.currentTarget.value});
+    const target = event.target as HTMLInputElement;
+    this.setState({queryName: target.value});
   };
   onChangeInput = (event: React.FormEvent<HTMLInputElement>) => {
-    this.setState({queryName: event.currentTarget.value});
+    const target = event.target as HTMLInputElement;
+    this.setState({queryName: target.value});
   };
 
   /**
@@ -121,20 +131,20 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     event.preventDefault();
     event.stopPropagation();
 
-    const {api, location, organization} = this.props;
-    const eventView = EventView.fromLocation({
-      ...location,
-      query: {
-        ...location.query,
-        name: this.state.queryName,
-      },
-    });
+    const {api, location, organization, eventView} = this.props;
+
+    if (!this.state.queryName) {
+      return;
+    }
+
+    const nextEventView = eventView.clone();
+    nextEventView.name = this.state.queryName;
 
     // Checks if "Save as" button is clicked from a clean state, or it is
     // clicked while modifying an existing query
-    const isNewQuery = !!this.state.queryId;
+    const isNewQuery = !this.state.queryId;
 
-    handleCreateQuery(api, organization, eventView, isNewQuery).then(
+    handleCreateQuery(api, organization, nextEventView, isNewQuery).then(
       (savedQuery: any) => {
         const view = EventView.fromSavedQuery(savedQuery);
 
@@ -151,8 +161,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     event.preventDefault();
     event.stopPropagation();
 
-    const {api, location, organization} = this.props;
-    const eventView = EventView.fromLocation(location);
+    const {api, organization, eventView} = this.props;
 
     handleUpdateQuery(api, organization, eventView).then(() => {
       this.setState({queryName: ''});
@@ -163,8 +172,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     event.preventDefault();
     event.stopPropagation();
 
-    const {api, location, organization} = this.props;
-    const eventView = EventView.fromLocation(location);
+    const {api, location, organization, eventView} = this.props;
 
     handleDeleteQuery(api, organization, eventView).then(() => {
       browserHistory.push({
@@ -191,7 +199,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
         alignRight
         menuWidth="220px"
         button={({isOpen, getActorProps}) => (
-          <ButtonSave
+          <ButtonSaveAs
             {...getActorProps({isStyled: true})}
             isOpen={isOpen}
             showChevron={false}
@@ -202,7 +210,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
               size="14"
             />
             {t('Save as...')}
-          </ButtonSave>
+          </ButtonSaveAs>
         )}
       >
         <ButtonSaveDropDown onClick={SavedQueryButtonGroup.stopEventPropagation}>
@@ -216,6 +224,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
           <Button
             onClick={this.handleCreateQuery}
             priority="primary"
+            disabled={!this.state.queryName}
             style={{width: '100%'}}
           >
             {t('Save')}
@@ -248,7 +257,10 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     }
 
     return (
-      <Button onClick={this.handleUpdateQuery}>
+      <Button
+        onClick={this.handleUpdateQuery}
+        data-test-id="discover2-savedquery-button-update"
+      >
         <ButtonUpdateIcon />
         {t('Update query')}
       </Button>
@@ -262,7 +274,13 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
       return null;
     }
 
-    return <Button icon="icon-trash" onClick={this.handleDeleteQuery} />;
+    return (
+      <Button
+        data-test-id="discover2-savedquery-button-delete"
+        icon="icon-trash"
+        onClick={this.handleDeleteQuery}
+      />
+    );
   }
 
   render() {
@@ -286,7 +304,7 @@ const ButtonGroup = styled('div')`
   }
 `;
 
-const ButtonSave = styled(DropdownButton)`
+const ButtonSaveAs = styled(DropdownButton)`
   z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};
   white-space: nowrap;
 `;
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
new file mode 100644
index 0000000000..8a973945a2
--- /dev/null
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -0,0 +1,279 @@
+import React from 'react';
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import SavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
+
+import SavedQueryButtonGroup from 'app/views/eventsV2/savedQuery';
+import {ALL_VIEWS} from 'app/views/eventsV2/data';
+import EventView from 'app/views/eventsV2/eventView';
+import * as utils from 'app/views/eventsV2/savedQuery/utils';
+
+const SELECTOR_BUTTON_SAVE_AS = 'ButtonSaveAs';
+const SELECTOR_BUTTON_SAVED = 'ButtonSaved';
+const SELECTOR_BUTTON_UPDATE = '[data-test-id="discover2-savedquery-button-update"]';
+const SELECTOR_BUTTON_DELETE = '[data-test-id="discover2-savedquery-button-delete"]';
+
+function generateWrappedComponent(location, organization, eventView) {
+  return mountWithTheme(
+    <SavedQueryButtonGroup
+      location={location}
+      organization={organization}
+      eventView={eventView}
+    />,
+    TestStubs.routerContext()
+  );
+}
+
+describe('EventsV2 > SaveQueryButtonGroup', function() {
+  // Organization + Location does not affect state in this component
+  const organization = TestStubs.Organization();
+  const location = {
+    pathname: '/organization/eventsv2/',
+    query: {},
+  };
+
+  const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors');
+  const errorsView = EventView.fromEventViewv1(errorsQuery);
+
+  const errorsViewSaved = EventView.fromEventViewv1(errorsQuery);
+  errorsViewSaved.id = '1';
+
+  const errorsViewModified = EventView.fromEventViewv1(errorsQuery);
+  errorsViewModified.id = '1';
+  errorsViewModified.name = 'Modified Name';
+  errorsViewModified.fields[0].title = 'Modified Field Name';
+
+  const errorsSavedQuery = errorsViewSaved.toNewQuery();
+
+  SavedQueriesStore.state = {
+    isLoading: false,
+    hasError: false,
+    savedQueries: [errorsSavedQuery],
+  };
+
+  describe('building on a new query', () => {
+    let mockUtils;
+    beforeAll(() => {
+      mockUtils = jest
+        .spyOn(utils, 'handleCreateQuery')
+        .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+    });
+
+    afterEach(() => {
+      mockUtils.mockClear();
+    });
+
+    it('renders the correct set of buttons', () => {
+      const wrapper = generateWrappedComponent(location, organization, errorsView);
+
+      const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
+      const buttonSaved = wrapper.find(SELECTOR_BUTTON_SAVED);
+      const buttonUpdate = wrapper.find(SELECTOR_BUTTON_UPDATE);
+      const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE);
+
+      expect(buttonSaveAs.exists()).toBe(true);
+      expect(buttonSaved.exists()).toBe(false);
+      expect(buttonUpdate.exists()).toBe(false);
+      expect(buttonDelete.exists()).toBe(false);
+    });
+
+    describe('saving the new query', () => {
+      it('accepts a well-formed query', async () => {
+        const wrapper = generateWrappedComponent(location, organization, errorsView);
+
+        // Click on ButtonSaveAs to open dropdown
+        const buttonSaveAs = wrapper.find('DropdownControl').first();
+        buttonSaveAs.simulate('click');
+
+        // Fill in the Input
+        buttonSaveAs
+          .find('ButtonSaveInput')
+          .simulate('change', {target: {value: 'My New Query Name'}}); // currentTarget.value does not work
+        await tick();
+
+        // Click on Save in the Dropdown
+        buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
+
+        expect(mockUtils).toHaveBeenCalledWith(
+          expect.anything(), // api
+          organization,
+          expect.objectContaining({
+            ...errorsView,
+            name: 'My New Query Name',
+          }),
+          true
+        );
+      });
+
+      it('rejects if query.name is empty', async () => {
+        const wrapper = generateWrappedComponent(location, organization, errorsView);
+
+        // Click on ButtonSaveAs to open dropdown
+        const buttonSaveAs = wrapper.find('DropdownControl').first();
+        buttonSaveAs.simulate('click');
+
+        // Do not fill in Input
+        await tick();
+
+        // Click on Save in the Dropdown
+        buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
+
+        // Check that EventView has a name
+        expect(errorsView.name).toBe('Errors');
+
+        /**
+         * This does not work because SavedQueryButtonGroup is wrapped by 2 HOCs
+         * and we cannot access the state of the inner component. But it should
+         * be empty because we didn't fill in Input. If it has a value, then the
+         * test will fail anyway
+         */
+        // expect(wrapper.state('queryName')).toBe('');
+
+        expect(mockUtils).not.toHaveBeenCalled();
+      });
+    });
+  });
+
+  describe('viewing a saved query', () => {
+    let mockUtils;
+
+    beforeEach(() => {
+      mockUtils = jest
+        .spyOn(utils, 'handleDeleteQuery')
+        .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+    });
+
+    afterEach(() => {
+      mockUtils.mockClear();
+    });
+
+    it('renders the correct set of buttons', () => {
+      const wrapper = generateWrappedComponent(location, organization, errorsViewSaved);
+
+      const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
+      const buttonSaved = wrapper.find(SELECTOR_BUTTON_SAVED);
+      const buttonUpdate = wrapper.find(SELECTOR_BUTTON_UPDATE);
+      const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE);
+
+      expect(buttonSaveAs.exists()).toBe(false);
+      expect(buttonSaved.exists()).toBe(true);
+      expect(buttonUpdate.exists()).toBe(false);
+      expect(buttonDelete.exists()).toBe(true);
+    });
+
+    it('deletes the saved query', () => {
+      const wrapper = generateWrappedComponent(location, organization, errorsViewSaved);
+
+      const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE).first();
+      buttonDelete.simulate('click');
+
+      expect(mockUtils).toHaveBeenCalledWith(
+        expect.anything(), // api
+        organization,
+        expect.objectContaining({id: '1'})
+      );
+    });
+  });
+
+  describe('modifying a saved query', () => {
+    let mockUtils;
+
+    it('renders the correct set of buttons', () => {
+      SavedQueriesStore.state = {
+        isLoading: false,
+        hasError: false,
+        savedQueries: [errorsViewSaved.toNewQuery()],
+      };
+      const wrapper = generateWrappedComponent(
+        location,
+        organization,
+        errorsViewModified
+      );
+
+      const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
+      const buttonSaved = wrapper.find(SELECTOR_BUTTON_SAVED);
+      const buttonUpdate = wrapper.find(SELECTOR_BUTTON_UPDATE);
+      const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE);
+
+      expect(buttonSaveAs.exists()).toBe(true);
+      expect(buttonSaved.exists()).toBe(false);
+      expect(buttonUpdate.exists()).toBe(true);
+      expect(buttonDelete.exists()).toBe(true);
+    });
+
+    describe('updates the saved query', () => {
+      beforeEach(() => {
+        mockUtils = jest
+          .spyOn(utils, 'handleUpdateQuery')
+          .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+      });
+
+      afterEach(() => {
+        mockUtils.mockClear();
+      });
+
+      it('accepts a well-formed query', async () => {
+        const wrapper = generateWrappedComponent(
+          location,
+          organization,
+          errorsViewModified
+        );
+
+        // Click on Save in the Dropdown
+        const buttonUpdate = wrapper.find(SELECTOR_BUTTON_UPDATE).first();
+        buttonUpdate.simulate('click');
+
+        expect(mockUtils).toHaveBeenCalledWith(
+          expect.anything(), // api
+          organization,
+          expect.objectContaining({
+            ...errorsViewModified,
+          })
+        );
+      });
+    });
+
+    describe('creates a separate query', () => {
+      beforeEach(() => {
+        mockUtils = jest
+          .spyOn(utils, 'handleCreateQuery')
+          .mockImplementation(() => Promise.resolve(errorsSavedQuery));
+      });
+
+      afterEach(() => {
+        mockUtils.mockClear();
+      });
+
+      it('checks that it is forked from a saved query', async () => {
+        const wrapper = generateWrappedComponent(
+          location,
+          organization,
+          errorsViewModified
+        );
+
+        // Click on ButtonSaveAs to open dropdown
+        const buttonSaveAs = wrapper.find('DropdownControl').first();
+        buttonSaveAs.simulate('click');
+
+        // Fill in the Input
+        buttonSaveAs
+          .find('ButtonSaveInput')
+          .simulate('change', {target: {value: 'Forked Query'}});
+        await tick();
+
+        // Click on Save in the Dropdown
+        buttonSaveAs.find('ButtonSaveDropDown Button').simulate('click');
+
+        expect(mockUtils).toHaveBeenCalledWith(
+          expect.anything(), // api
+          organization,
+          expect.objectContaining({
+            ...errorsViewModified,
+            name: 'Forked Query',
+          }),
+          false
+        );
+      });
+    });
+  });
+});
diff --git a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
new file mode 100644
index 0000000000..c5dfaaac13
--- /dev/null
+++ b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
@@ -0,0 +1,81 @@
+import {ALL_VIEWS} from 'app/views/eventsV2/data';
+import EventView from 'app/views/eventsV2/eventView';
+import {
+  handleCreateQuery,
+  handleUpdateQuery,
+  handleUpdateQueryName,
+  handleDeleteQuery,
+} from 'app/views/eventsV2/savedQuery/utils';
+
+describe('SavedQueries API helpers', () => {
+  const api = new MockApiClient();
+  const organization = TestStubs.Organization();
+
+  const errorsQuery = ALL_VIEWS.find(view => view.name === 'Errors');
+  const errorsView = EventView.fromEventViewv1(errorsQuery);
+  errorsView.id = '1'; // set id manually as errorsView.id is undefined
+
+  afterEach(() => {
+    MockApiClient.clearMockResponses();
+  });
+
+  describe('handleCreateQuery', () => {
+    beforeEach(() => {
+      MockApiClient.addMockResponse({
+        method: 'POST',
+        url: `/organizations/${organization.slug}/discover/saved/`,
+        body: {data: {}, fromBody: {}},
+      });
+    });
+
+    it('calls the correct API endpoint', async () => {
+      const response = await handleCreateQuery(api, organization, errorsView);
+      expect(response).toEqual({data: {}, fromBody: {}});
+    });
+  });
+
+  describe('handleUpdateQuery', () => {
+    beforeEach(() => {
+      MockApiClient.addMockResponse({
+        method: 'PUT',
+        url: `/organizations/${organization.slug}/discover/saved/${errorsView.id}/`,
+        body: {data: {}, fromBody: {}},
+      });
+    });
+
+    it('calls the correct API endpoint', async () => {
+      const response = await handleUpdateQuery(api, organization, errorsView);
+      expect(response).toEqual({data: {}, fromBody: {}});
+    });
+  });
+
+  describe('handleUpdateQueryName', () => {
+    beforeEach(() => {
+      MockApiClient.addMockResponse({
+        method: 'PUT',
+        url: `/organizations/${organization.slug}/discover/saved/${errorsView.id}/`,
+        body: {data: {}, fromBody: {}},
+      });
+    });
+
+    it('calls the correct API endpoint', async () => {
+      const response = await handleUpdateQueryName(api, organization, errorsView);
+      expect(response).toEqual({data: {}, fromBody: {}});
+    });
+  });
+
+  describe('handleDeleteQuery', () => {
+    beforeEach(() => {
+      MockApiClient.addMockResponse({
+        method: 'DELETE',
+        url: `/organizations/${organization.slug}/discover/saved/${errorsView.id}/`,
+        body: {data: {}, fromBody: {}},
+      });
+    });
+
+    it('calls the correct API endpoint', async () => {
+      const response = await handleDeleteQuery(api, organization, errorsView);
+      expect(response).toEqual({data: {}, fromBody: {}});
+    });
+  });
+});
diff --git a/tests/js/spec/views/eventsV2/savedQueryButtonGroup.spec.jsx b/tests/js/spec/views/eventsV2/savedQueryButtonGroup.spec.jsx
deleted file mode 100644
index 0ae173e56b..0000000000
--- a/tests/js/spec/views/eventsV2/savedQueryButtonGroup.spec.jsx
+++ /dev/null
@@ -1,139 +0,0 @@
-import React from 'react';
-import {mountWithTheme} from 'sentry-test/enzyme';
-import {browserHistory} from 'react-router';
-
-import SavedQueryButtonGroup from 'app/views/eventsV2/savedQuery';
-import {ALL_VIEWS} from 'app/views/eventsV2/data';
-import EventView from 'app/views/eventsV2/eventView';
-
-// eslint-disable-next-line jest/no-disabled-tests
-describe.skip('EventsV2 > SaveQueryButtonGroup', function() {
-  const errorsView = EventView.fromEventViewv1(
-    ALL_VIEWS.find(view => view.name === 'Errors')
-  );
-  let organization, location;
-  beforeEach(function() {
-    organization = TestStubs.Organization();
-    location = {
-      pathname: '/organization/eventsv2/',
-      query: {},
-    };
-  });
-
-  it('renders a button', function() {
-    const wrapper = mountWithTheme(
-      <SavedQueryButtonGroup
-        organization={organization}
-        location={location}
-        isEditing={false}
-        eventView={errorsView}
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('StyledDropdownButton');
-    expect(button.text()).toEqual('Save query');
-  });
-
-  it('renders a popover for a new query', function() {
-    const wrapper = mountWithTheme(
-      <SavedQueryButtonGroup
-        organization={organization}
-        location={location}
-        isEditing={false}
-        eventView={errorsView}
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('StyledDropdownButton');
-    button.simulate('click');
-
-    const input = wrapper.find('SaveQueryContainer input');
-    expect(input).toHaveLength(1);
-
-    const submit = wrapper.find('SaveQueryContainer Button');
-    expect(submit).toHaveLength(1);
-    expect(submit.text()).toEqual('Save');
-  });
-
-  it('renders a popover for an existing query', function() {
-    const wrapper = mountWithTheme(
-      <SavedQueryButtonGroup
-        organization={organization}
-        location={location}
-        eventView={errorsView}
-        isEditing
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('StyledDropdownButton');
-    button.simulate('click');
-
-    const submit = wrapper.find('SaveQueryContainer Button');
-    expect(submit).toHaveLength(1);
-    expect(submit.text()).toEqual('Save');
-  });
-
-  it('sets input value based on props', function() {
-    const wrapper = mountWithTheme(
-      <SavedQueryButtonGroup
-        organization={organization}
-        location={location}
-        eventView={errorsView}
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('StyledDropdownButton');
-    button.simulate('click');
-
-    // Creating a new query
-    expect(wrapper.find('StyledInput').props().value).toEqual('');
-  });
-
-  it('saves a new query', async function() {
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/discover/saved/',
-      method: 'POST',
-      body: {
-        id: '2',
-        name: 'my query',
-        fields: ['title', 'count()'],
-        fieldnames: ['title', 'total'],
-      },
-    });
-    const wrapper = mountWithTheme(
-      <SavedQueryButtonGroup
-        organization={organization}
-        location={location}
-        eventView={errorsView}
-      />,
-      TestStubs.routerContext()
-    );
-    const button = wrapper.find('StyledDropdownButton');
-    button.simulate('click');
-
-    const input = wrapper.find('SaveQueryContainer input');
-    input.simulate('change', {target: {value: 'my query'}});
-
-    const submit = wrapper.find('button[aria-label="Save"]');
-    submit.simulate('click');
-
-    // Wait for reflux
-    await tick();
-    await tick();
-
-    // should redirect to query
-    expect(browserHistory.push).toHaveBeenCalledWith({
-      pathname: location.pathname,
-      query: {
-        field: ['title', 'count()'],
-        id: '2',
-        fieldnames: ['title', 'total'],
-        name: 'my query',
-        query: '',
-        sort: [],
-        statsPeriod: '14d',
-        tag: [],
-      },
-    });
-  });
-});
