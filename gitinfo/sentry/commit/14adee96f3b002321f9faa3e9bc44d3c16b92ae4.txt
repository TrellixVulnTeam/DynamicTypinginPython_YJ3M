commit 14adee96f3b002321f9faa3e9bc44d3c16b92ae4
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Oct 25 11:15:24 2017 -0500

    ref(tags): Remove unused methods and group QuerySet methods (#6423)

diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index f0451ffa65..b5586a063b 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -59,14 +59,11 @@ class TagStorage(Service):
         'get_group_tag_values',
 
         'delete_tag_key',
-        'delete_group_tag_key',
         'delete_all_group_tag_keys',
         'delete_all_group_tag_values',
 
         'get_group_values_seen',
         'get_group_event_ids',
-        'get_tag_value_qs',
-        'get_group_tag_value_qs',
         'get_group_tag_value_count',
         'get_top_group_tag_values',
         'get_first_release',
@@ -79,8 +76,11 @@ class TagStorage(Service):
         'get_group_ids_for_users',
         'get_group_tag_values_for_users',
         'get_tags_for_search_filter',
-        'get_event_tag_qs',
         'update_group_tag_key_values_seen',
+
+        'get_tag_value_qs',
+        'get_group_tag_value_qs',
+        'get_event_tag_qs',
     )
 
     def is_valid_key(self, key):
@@ -238,12 +238,6 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def delete_group_tag_key(self, group_id, key):
-        """
-        >>> delete_group_tag_key(1, "key1")
-        """
-        raise NotImplementedError
-
     def delete_all_group_tag_keys(self, group_id):
         """
         >>> delete_all_group_tag_keys(1)
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 7be0b02249..9bdfdc9ff7 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -265,12 +265,6 @@ class LegacyTagStorage(TagStorage):
 
         return (updated, tagkey)
 
-    def delete_group_tag_key(self, group_id, key):
-        GroupTagKey.objects.filter(
-            group_id=group_id,
-            key=key
-        ).delete()
-
     def delete_all_group_tag_keys(self, group_id):
         GroupTagKey.objects.filter(
             group_id=group_id,
@@ -308,15 +302,13 @@ class LegacyTagStorage(TagStorage):
         })
 
     def incr_group_tag_value_times_seen(self, group_id, key, value, extra=None, count=1):
-        buffer.incr(
-            GroupTagValue, {
-                'times_seen': count,
-            }, {
-                'group_id': group_id,
-                'key': key,
-                'value': value,
-            }, extra
-        )
+        buffer.incr(GroupTagValue, {
+            'times_seen': count,
+        }, {
+            'group_id': group_id,
+            'key': key,
+            'value': value,
+        }, extra)
 
     def get_group_event_ids(self, project_id, group_id, tags):
         tagkeys = dict(
@@ -374,23 +366,6 @@ class LegacyTagStorage(TagStorage):
 
         return matches
 
-    def get_tag_value_qs(self, project_id, key, query=None):
-        queryset = TagValue.objects.filter(
-            project_id=project_id,
-            key=key,
-        )
-
-        if query:
-            queryset = queryset.filter(value__contains=query)
-
-        return queryset
-
-    def get_group_tag_value_qs(self, group_id, key):
-        return GroupTagValue.objects.filter(
-            group_id=group_id,
-            key=key,
-        )
-
     def get_group_values_seen(self, group_ids, key):
         if isinstance(group_ids, six.integer_types):
             qs = GroupTagKey.objects.filter(group_id=group_ids)
@@ -546,9 +521,6 @@ class LegacyTagStorage(TagStorage):
 
         return matches
 
-    def get_event_tag_qs(self, **kwargs):
-        return EventTag.objects.filter(**kwargs)
-
     def update_group_tag_key_values_seen(self, group_ids):
         instances = self.get_group_tag_keys(group_ids)
         for instance in instances:
@@ -559,3 +531,23 @@ class LegacyTagStorage(TagStorage):
                     key=instance.key,
                 ).count(),
             )
+
+    def get_tag_value_qs(self, project_id, key, query=None):
+        queryset = TagValue.objects.filter(
+            project_id=project_id,
+            key=key,
+        )
+
+        if query:
+            queryset = queryset.filter(value__contains=query)
+
+        return queryset
+
+    def get_group_tag_value_qs(self, group_id, key):
+        return GroupTagValue.objects.filter(
+            group_id=group_id,
+            key=key,
+        )
+
+    def get_event_tag_qs(self, **kwargs):
+        return EventTag.objects.filter(**kwargs)
