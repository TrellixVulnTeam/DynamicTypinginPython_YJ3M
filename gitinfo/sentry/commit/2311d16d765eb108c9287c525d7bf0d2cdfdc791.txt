commit 2311d16d765eb108c9287c525d7bf0d2cdfdc791
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Aug 9 11:22:29 2019 -0700

    feat(ui): Implement deleting an incident rule [SEN-843] (#14320)
    
    * Changes Incident list to typescript
    * Adds type for an Incident Rule

diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts
new file mode 100644
index 0000000000..d960b2e920
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts
@@ -0,0 +1,13 @@
+import {IncidentRule} from './types';
+
+// TODO(ts): type api and response
+export function deleteRule(
+  api: any,
+  orgId: string,
+  projectId: string,
+  rule: IncidentRule
+): Promise<any> {
+  return api.requestPromise(`/projects/${orgId}/${projectId}/alert-rules/${rule.id}/`, {
+    method: 'DELETE',
+  });
+}
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
index 27f0ef37b1..1ebc606f9d 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
@@ -6,10 +6,9 @@ import {t} from 'app/locale';
 import AsyncView, {AsyncViewState} from 'app/views/asyncView';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 
+import {IncidentRule} from './types';
 import RuleForm from './ruleForm';
 
-type IncidentRule = {};
-
 type State = {
   rule: IncidentRule;
 } & AsyncViewState;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx
rename to src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.tsx
index aa414bb418..9806bd9027 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.tsx
@@ -1,10 +1,11 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
 import {Link} from 'react-router';
 import React from 'react';
 import styled from 'react-emotion';
 
 import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
+import AsyncView, {AsyncViewState} from 'app/views/asyncView';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
@@ -12,26 +13,40 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import space from 'app/styles/space';
 
-class IncidentRulesList extends AsyncView {
+import {IncidentRule} from './types';
+import {deleteRule} from './actions';
+
+type State = {
+  rules: IncidentRule[];
+} & AsyncViewState;
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+};
+type Props = RouteComponentProps<RouteParams, {}>;
+class IncidentRulesList extends AsyncView<Props, State> {
   getEndpoints() {
     const {orgId, projectId} = this.props.params;
 
-    return [['rules', `/projects/${orgId}/${projectId}/alert-rules/`]];
+    return [
+      ['rules', `/projects/${orgId}/${projectId}/alert-rules/`] as [string, string],
+    ];
   }
 
-  handleRemoveRule = async (rule, e) => {
-    e.stopPropagation();
+  handleRemoveRule = async (rule: IncidentRule) => {
+    const {orgId, projectId} = this.props.params;
 
     // Optimistic update
     const oldRules = this.state.rules.slice(0);
-    const newRules = this.state.rules.filter(({id}) => id === rule.id);
+
+    const newRules = this.state.rules.filter(({id}) => id !== rule.id);
 
     try {
       this.setState({
         rules: newRules,
       });
 
-      // TODO: Delete rule
+      deleteRule(this.api, orgId, projectId, rule);
     } catch (_err) {
       this.setState({
         rules: oldRules,
@@ -80,7 +95,8 @@ class IncidentRulesList extends AsyncView {
                     {rule.name}
                   </RuleLink>
                   <Confirm
-                    onConfirm={e => this.handleRemoveRule(rule, e)}
+                    priority="danger"
+                    onConfirm={() => this.handleRemoveRule(rule)}
                     message={t('Are you sure you want to remove this rule?')}
                   >
                     <RemoveButton
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/types.ts b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/types.ts
new file mode 100644
index 0000000000..346c33f6dc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/types.ts
@@ -0,0 +1,17 @@
+export type IncidentRule = {
+  aggregations: number[];
+  alertThreshold: number;
+  dataset: 'events';
+  dateAdded: string;
+  dateModified: string;
+  id: string;
+  name: string;
+  projectId: string;
+  query: string;
+  resolution: number;
+  resolveThreshold: number;
+  status: number;
+  thresholdPeriod: number;
+  thresholdType: number;
+  timeWindow: number;
+};
