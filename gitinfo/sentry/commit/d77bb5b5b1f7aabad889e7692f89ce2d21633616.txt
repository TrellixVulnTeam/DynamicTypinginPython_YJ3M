commit d77bb5b5b1f7aabad889e7692f89ce2d21633616
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Mar 20 14:18:17 2020 -0700

    chore(ts): Convert app setup / boot files (#17752)

diff --git a/src/sentry/static/sentry/app/bootstrap.jsx b/src/sentry/static/sentry/app/bootstrap.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/bootstrap.jsx
rename to src/sentry/static/sentry/app/bootstrap.tsx
index 92d0953bf4..7222049efb 100644
--- a/src/sentry/static/sentry/app/bootstrap.jsx
+++ b/src/sentry/static/sentry/app/bootstrap.tsx
@@ -39,7 +39,11 @@ function getSentryIntegrations() {
   if (window.__SENTRY__USER && window.__SENTRY__USER.isStaff) {
     // eslint-disable-next-line no-console
     console.log('[sentry] Instrumenting session with rrweb');
-    integrations.push(new SentryRRWeb());
+
+    // TODO(ts): The type returned by SentryRRWeb seems to be somewhat
+    // incompatible. It's a newer plugin, so this can be expected, but we
+    // should fix.
+    integrations.push(new SentryRRWeb() as any);
   }
   return integrations;
 }
@@ -81,7 +85,7 @@ jQuery.ajaxSetup({
   beforeSend: ajaxCsrfSetup,
 });
 
-const render = Component => {
+const render = (Component: React.ComponentType) => {
   const rootEl = document.getElementById('blk_router');
 
   try {
@@ -102,7 +106,7 @@ const render = Component => {
 // The password strength component is very heavyweight as it includes the
 // zxcvbn, a relatively byte-heavy password strength estimation library. Load
 // it on demand.
-async function loadPasswordStrength(callback) {
+async function loadPasswordStrength(callback: Function) {
   const module = await import(
     /* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength'
   );
@@ -133,6 +137,7 @@ const globals = {
 
   // django templates make use of these globals
   createReactClass,
+  SentryApp: {},
 };
 
 // The SentryApp global contains exported app modules for use in javascript
diff --git a/src/sentry/static/sentry/app/constants/index.tsx b/src/sentry/static/sentry/app/constants/index.tsx
index 18a52c7ce2..467cb21655 100644
--- a/src/sentry/static/sentry/app/constants/index.tsx
+++ b/src/sentry/static/sentry/app/constants/index.tsx
@@ -154,14 +154,7 @@ export const SENTRY_APP_PERMISSIONS: PermissionObj[] = [
 export const DEFAULT_TOAST_DURATION = 6000;
 export const DEFAULT_DEBOUNCE_DURATION = 300;
 
-declare global {
-  interface Window {
-    csrfCookieName?: string;
-    sentryEmbedCallback?: ((embed: any) => void) | null;
-  }
-}
-
-export const CSRF_COOKIE_NAME: string = window.csrfCookieName || 'sc';
+export const CSRF_COOKIE_NAME = window.csrfCookieName ?? 'sc';
 
 export const ALL_ENVIRONMENTS_KEY = '__all_environments__';
 
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/index.js
rename to src/sentry/static/sentry/app/index.tsx
index 6f7de98ce9..38b24e388e 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.tsx
@@ -2,9 +2,11 @@
 import 'core-js/stable';
 import 'regenerator-runtime/runtime';
 
+import {Config} from 'app/types';
+
 const BOOTSTRAP_URL = '/api/client-config/';
 
-const bootApplication = data => {
+const bootApplication = (data: Config) => {
   const {distPrefix, csrfCookieName, sentryConfig, userIdentity} = data;
 
   // TODO(epurkhiser): Would be great if we could remove some of these from
@@ -23,7 +25,7 @@ const bootApplication = data => {
 
 async function bootWithHydration() {
   const response = await fetch(BOOTSTRAP_URL);
-  const data = await response.json();
+  const data: Config = await response.json();
 
   // XXX(epurkhiser): Currently we only boot with hydration in experimental SPA
   // mode, where assets are *currently not versioned*. We hardcode this here
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 6d55a02f2b..24a7ea8a72 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -8,6 +8,42 @@ import {
 } from 'app/views/organizationIntegrations/constants';
 import {PlatformKey} from 'app/data/platformCategories';
 
+declare global {
+  interface Window {
+    /**
+     * Assets public location
+     */
+    __sentryGlobalStaticPrefix: string;
+    /**
+     * The config object provided by the backend.
+     */
+    __initialData: Config;
+    /**
+     * Sentry SDK configuration
+     */
+    __SENTRY__OPTIONS: Config['sentryConfig'];
+    /**
+     * The authenticated user identity, a bare-bones version of User
+     */
+    __SENTRY__USER: Config['userIdentity'];
+    /**
+     * Sentrys version string
+     */
+    __SENTRY__VERSION?: string;
+    /**
+     * The CSRF cookie ised on the backend
+     */
+    csrfCookieName?: string;
+    /**
+     * Primary entrypoint for rendering the sentry app. This is typically
+     * called in the django templates, or in the case of the EXPERIMENTAL_SPA,
+     * after config hydration.
+     */
+    SentryRenderApp: () => void;
+    sentryEmbedCallback?: ((embed: any) => void) | null;
+  }
+}
+
 export type IntegrationInstallationStatus =
   | typeof INSTALLED
   | typeof NOT_INSTALLED
@@ -464,7 +500,7 @@ export type Config = {
   gravatarBaseUrl: string;
   messages: string[];
   dsn: string;
-  userIdentity: {ip_address: string; email: string; id: number; isStaff: boolean};
+  userIdentity: {ip_address: string; email: string; id: string; isStaff: boolean};
   termsUrl: string | null;
   isAuthenticated: boolean;
   version: {
@@ -483,6 +519,8 @@ export type Config = {
     whitelistUrls: string[];
   };
   distPrefix: string;
+  apmSampling: number;
+  dsn_requests: string;
 };
 
 export type EventOrGroupType =
diff --git a/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.jsx b/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.tsx
similarity index 54%
rename from src/sentry/static/sentry/app/utils/ajaxCsrfSetup.jsx
rename to src/sentry/static/sentry/app/utils/ajaxCsrfSetup.tsx
index c7da981452..f3b0d7c52c 100644
--- a/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.jsx
+++ b/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.tsx
@@ -1,13 +1,17 @@
 import getCookie from 'app/utils/getCookie';
 import {CSRF_COOKIE_NAME} from 'app/constants';
 
-function csrfSafeMethod(method) {
+function csrfSafeMethod(method?: string) {
   // these HTTP methods do not require CSRF protection
-  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
+  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method ?? '');
 }
 
-export default function ajaxCsrfSetup(xhr, settings) {
+export default function ajaxCsrfSetup(
+  this: JQueryAjaxSettings,
+  xhr: JQueryXHR,
+  settings: JQueryAjaxSettings
+) {
   if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
-    xhr.setRequestHeader('X-CSRFToken', getCookie(CSRF_COOKIE_NAME));
+    xhr.setRequestHeader('X-CSRFToken', getCookie(CSRF_COOKIE_NAME) ?? '');
   }
 }
diff --git a/src/sentry/static/sentry/app/utils/emotion-setup.js b/src/sentry/static/sentry/app/utils/emotion-setup.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/utils/emotion-setup.js
rename to src/sentry/static/sentry/app/utils/emotion-setup.tsx
diff --git a/src/sentry/static/sentry/app/utils/statics-setup.js b/src/sentry/static/sentry/app/utils/statics-setup.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/utils/statics-setup.js
rename to src/sentry/static/sentry/app/utils/statics-setup.tsx
index a805b7a6bc..a8e6b5ed16 100644
--- a/src/sentry/static/sentry/app/utils/statics-setup.js
+++ b/src/sentry/static/sentry/app/utils/statics-setup.tsx
@@ -1,7 +1,7 @@
 /* eslint no-native-reassign:0 */
 
 // This (global) errors for some reason :|
-/* eslint-disable-next-line no-unused-vars */
+// eslint-disable-next-line @typescript-eslint/no-unused-vars
 /* global __webpack_public_path__ */
 
 /**
diff --git a/tests/sentry/web/frontend/generic/test_static_media.py b/tests/sentry/web/frontend/generic/test_static_media.py
index f5b218327f..bce1b3387d 100644
--- a/tests/sentry/web/frontend/generic/test_static_media.py
+++ b/tests/sentry/web/frontend/generic/test_static_media.py
@@ -9,7 +9,7 @@ from sentry.web.frontend.generic import FOREVER_CACHE, NEVER_CACHE
 class StaticMediaTest(TestCase):
     @override_settings(DEBUG=False)
     def test_basic(self):
-        url = "/_static/sentry/app/index.js"
+        url = "/_static/sentry/js/ads.js"
         response = self.client.get(url)
         assert response.status_code == 200, response
         assert response["Cache-Control"] == NEVER_CACHE
@@ -19,7 +19,7 @@ class StaticMediaTest(TestCase):
 
     @override_settings(DEBUG=False)
     def test_versioned(self):
-        url = "/_static/1234567890/sentry/app/index.js"
+        url = "/_static/1234567890/sentry/js/ads.js"
         response = self.client.get(url)
         assert response.status_code == 200, response
         assert response["Cache-Control"] == FOREVER_CACHE
@@ -27,7 +27,7 @@ class StaticMediaTest(TestCase):
         assert response["Access-Control-Allow-Origin"] == "*"
         "Content-Encoding" not in response
 
-        url = "/_static/a43db3b08ddd4918972f80739f15344b/sentry/app/index.js"
+        url = "/_static/a43db3b08ddd4918972f80739f15344b/sentry/js/ads.js"
         response = self.client.get(url)
         assert response.status_code == 200, response
         assert response["Cache-Control"] == FOREVER_CACHE
@@ -58,14 +58,14 @@ class StaticMediaTest(TestCase):
         assert response.status_code == 404, response
 
     def test_gzip(self):
-        url = "/_static/sentry/app/index.js"
+        url = "/_static/sentry/js/ads.js"
         response = self.client.get(url, HTTP_ACCEPT_ENCODING="gzip,deflate")
         assert response.status_code == 200, response
         assert response["Vary"] == "Accept-Encoding"
         "Content-Encoding" not in response
 
         try:
-            open("src/sentry/static/sentry/app/index.js.gz", "a").close()
+            open("src/sentry/static/sentry/js/ads.js.gz", "a").close()
 
             # Not a gzip Accept-Encoding, so shouldn't serve gzipped file
             response = self.client.get(url, HTTP_ACCEPT_ENCODING="lol")
@@ -79,7 +79,7 @@ class StaticMediaTest(TestCase):
             assert response["Content-Encoding"] == "gzip"
         finally:
             try:
-                os.unlink("src/sentry/static/sentry/app/index.js.gz")
+                os.unlink("src/sentry/static/sentry/js/ads.js.gz")
             except Exception:
                 pass
 
