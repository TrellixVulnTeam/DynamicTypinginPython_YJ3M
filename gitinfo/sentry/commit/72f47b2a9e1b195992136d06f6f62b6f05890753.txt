commit 72f47b2a9e1b195992136d06f6f62b6f05890753
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Aug 27 16:16:41 2018 -0700

    feat(ui): Add requireAll prop to feature component

diff --git a/src/sentry/static/sentry/app/components/feature.jsx b/src/sentry/static/sentry/app/components/feature.jsx
index a2196b2cfc..c7d09799af 100644
--- a/src/sentry/static/sentry/app/components/feature.jsx
+++ b/src/sentry/static/sentry/app/components/feature.jsx
@@ -45,6 +45,11 @@ class Feature extends React.Component {
      */
     access: PropTypes.arrayOf(PropTypes.string),
 
+    /**
+     * Should the feature require all feature tags/access levels or just one or more.
+     */
+    requireAll: PropTypes.bool,
+
     /**
      * Requires superuser
      */
@@ -71,6 +76,7 @@ class Feature extends React.Component {
 
   static defaultProps = {
     renderNoFeatureMessage: false,
+    requireAll: true,
   };
 
   getAllFeatures = () => {
@@ -114,12 +120,14 @@ class Feature extends React.Component {
       configUser,
       isSuperuser,
       renderNoFeatureMessage,
+      requireAll,
     } = this.props;
     let {access: orgAccess} = organization || {access: []};
     let allFeatures = this.getAllFeatures();
+    let method = requireAll ? 'every' : 'some';
     let hasFeature =
-      !feature || feature.every(feat => this.hasFeature(feat, allFeatures));
-    let hasAccess = !access || access.every(acc => orgAccess.includes(acc));
+      !feature || feature[method](feat => this.hasFeature(feat, allFeatures));
+    let hasAccess = !access || access[method](acc => orgAccess.includes(acc));
     let hasSuperuser = !isSuperuser || configUser.isSuperuser;
     let renderProps = {
       hasFeature,
diff --git a/tests/js/spec/components/feature.spec.jsx b/tests/js/spec/components/feature.spec.jsx
index c76e21afdf..61cbe20621 100644
--- a/tests/js/spec/components/feature.spec.jsx
+++ b/tests/js/spec/components/feature.spec.jsx
@@ -38,6 +38,39 @@ describe('Feature', function() {
       });
     });
 
+    it('has feature when requireAll is false', function() {
+      mount(
+        <Feature feature={['org-foo', 'project-foo', 'apple']} requireAll={false}>
+          {childrenMock}
+        </Feature>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasFeature: true,
+        hasAccess: true,
+        hasSuperuser: true,
+      });
+    });
+
+    it('has access when requireAll is false', function() {
+      mount(
+        <Feature
+          access={['project:write', 'project:read', 'org:read']}
+          requireAll={false}
+        >
+          {childrenMock}
+        </Feature>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith({
+        hasFeature: true,
+        hasAccess: true,
+        hasSuperuser: true,
+      });
+    });
+
     it('has accesss (has feature because optional)', function() {
       mount(
         <Feature access={['project:write', 'project:read']}>{childrenMock}</Feature>,
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
index 97d67c1fcb..aa15639d49 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
@@ -81,6 +81,7 @@ exports[`ProjectPluginRow renders 1`] = `
         }
       }
       renderNoFeatureMessage={false}
+      requireAll={true}
     >
       <Flex
         align="center"
