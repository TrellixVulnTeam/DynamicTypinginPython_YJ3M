commit a157229ca97aa2102300a3f032795376d784735f
Author: Jeremy Dunck <jdunck@votizen.com>
Date:   Wed Jun 13 13:50:28 2012 -0700

    Reformatting all internal logs to defer interpolation so rollup works.
    Originally motivated by 'bad message from ('75.101.56.188', 38109): Message has expired' not rolling up.

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index ce0052df72..4ec7ef810e 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -290,10 +290,10 @@ def validate_data(project, data, client=None):
             process_data_timestamp(data)
         except InvalidTimestamp:
             # Log the error, remove the timestamp, and continue
-            logger.error('Client %r passed an invalid value for timestamp %r' % (
+            logger.error('Client %r passed an invalid value for timestamp %r', 
                 client or '<unknown client>',
                 data['timestamp'],
-            ))
+            )
             del data['timestamp']
 
     if data.get('modules') and type(data['modules']) != dict:
diff --git a/sentry/filters/helpers.py b/sentry/filters/helpers.py
index 0c57d1f329..212b0adf92 100644
--- a/sentry/filters/helpers.py
+++ b/sentry/filters/helpers.py
@@ -32,7 +32,7 @@ def get_filters(model=None, project=None):
                 cls = getattr(module, class_name)
             except Exception:
                 logger = logging.getLogger('sentry.errors.filters')
-                logger.exception('Unable to import %s' % (class_path,))
+                logger.exception('Unable to import %s', class_path)
                 continue
             FILTER_CACHE[class_path] = cls
         filter_list.append(FILTER_CACHE[class_path])
diff --git a/sentry/manager.py b/sentry/manager.py
index f487730a4f..58ce99befd 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -455,9 +455,9 @@ class GroupManager(BaseManager, ChartMixin):
         except Exception, exc:
             # TODO: should we mail admins when there are failures?
             try:
-                logger.exception(u'Unable to process log entry: %s' % (exc,))
+                logger.exception(u'Unable to process log entry: %s', exc)
             except Exception, exc:
-                warnings.warn(u'Unable to process log entry: %s' % (exc,))
+                warnings.warn(u'Unable to process log entry: %s', exc)
 
             return
 
diff --git a/sentry/models.py b/sentry/models.py
index 272de9365a..82f2b35ed7 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -708,7 +708,7 @@ def register_indexes(**kwargs):
     logger = logging.getLogger('sentry.setup')
     for cls in (f for f in get_filters() if f.column.startswith('data__')):
         MessageIndex.objects.register_index(cls.column, index_to='group')
-        logger.debug('Registered index for for %r' % cls.column)
+        logger.debug('Registered index for for %r', cls.column)
 class_prepared.connect(register_indexes, sender=MessageIndex)
 
 
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
index edb8fd11ed..5886c88ed2 100644
--- a/sentry/services/udp.py
+++ b/sentry/services/udp.py
@@ -56,7 +56,7 @@ class SentryUDPServer(Service):
 
             return insert_data_to_database(data)
         except APIError, error:
-            logger.error('bad message from %s: %s' % (address, error.msg))
+            logger.error('bad message from %s: %s', address, error.msg)
             return error
 
     def run(self):
diff --git a/sentry/utils/db.py b/sentry/utils/db.py
index fc1679dbef..e3e6adff5b 100644
--- a/sentry/utils/db.py
+++ b/sentry/utils/db.py
@@ -63,7 +63,7 @@ class InstanceManager(object):
                     results.append(cls)
             except Exception:
                 logger = logging.getLogger('sentry.errors')
-                logger.exception('Unable to import %s' % (cls_path,))
+                logger.exception('Unable to import %s', cls_path)
                 continue
         self.cache = results
 
diff --git a/sentry/utils/safe.py b/sentry/utils/safe.py
index 73250c87e1..7a02109e24 100644
--- a/sentry/utils/safe.py
+++ b/sentry/utils/safe.py
@@ -22,7 +22,7 @@ def safe_execute(func, *args, **kwargs):
         else:
             cls = func.__class__
         logger = logging.getLogger('sentry.plugins')
-        logger.error('Error processing %r on %%r: %%s' % func.__name__, cls.__name__, e, extra={
+        logger.error('Error processing %r on %%r: %%s', func.__name__, cls.__name__, e, extra={
             'func_module': cls.__module__,
             'func_args': args,
             'func_kwargs': kwargs,
diff --git a/sentry/web/api.py b/sentry/web/api.py
index 3b81620345..181bf36fc8 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -172,12 +172,12 @@ def store(request, project=None):
 
             insert_data_to_database(data)
         except APIError, error:
-            logger.error('Client %r raised API error: %s' % (client, error), extra={
+            logger.error('Client %r raised API error: %s', client, error, extra={
                 'request': request,
             }, exc_info=True)
             response = HttpResponse(unicode(error.msg), status=error.http_status)
         else:
-            logger.info('New event from client %r (id=%%s)' % client, data['event_id'])
+            logger.info('New event from client %r (id=%%s)', client, data['event_id'])
 
     return response
 
