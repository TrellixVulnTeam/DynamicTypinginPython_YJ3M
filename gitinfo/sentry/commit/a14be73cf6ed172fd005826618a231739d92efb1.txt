commit a14be73cf6ed172fd005826618a231739d92efb1
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 11 14:06:15 2015 -0700

    Exclude inactive members from Team.member_set

diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 6f4e70857b..b27e0836c1 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -177,8 +177,11 @@ class Team(Model):
     @property
     def member_set(self):
         return self.organization.member_set.filter(
-            Q(teams=self) | Q(has_global_access=True),
+            Q(organizationmemberteam__team=self) | Q(has_global_access=True),
             user__is_active=True,
+        ).exclude(
+            organizationmemberteam__team=self,
+            organizationmemberteam__is_active=False,
         ).distinct()
 
     def has_access(self, user, access=None):
diff --git a/tests/sentry/models/test_team.py b/tests/sentry/models/test_team.py
new file mode 100644
index 0000000000..1545abf3c9
--- /dev/null
+++ b/tests/sentry/models/test_team.py
@@ -0,0 +1,62 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.models import OrganizationMember, OrganizationMemberTeam
+from sentry.testutils import TestCase
+
+
+class TeamTest(TestCase):
+    def test_global_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        member = OrganizationMember.objects.get(
+            user=user,
+            organization=org,
+        )
+
+        assert list(team.member_set.all()) == [member]
+
+    def test_inactive_global_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        member = OrganizationMember.objects.get(
+            user=user,
+            organization=org,
+        )
+        OrganizationMemberTeam.objects.create(
+            organizationmember=member,
+            team=team,
+            is_active=False
+        )
+
+        assert list(team.member_set.all()) == []
+
+    def test_active_basic_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        user2 = self.create_user('foo@example.com')
+        member = self.create_member(
+            user=user2,
+            organization=org,
+            has_global_access=False,
+            teams=[team]
+        )
+
+        assert member in team.member_set.all()
+
+    def test_teamless_basic_member(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        user2 = self.create_user('foo@example.com')
+        member = self.create_member(
+            user=user2,
+            organization=org,
+            has_global_access=False,
+        )
+
+        assert member not in team.member_set.all()
