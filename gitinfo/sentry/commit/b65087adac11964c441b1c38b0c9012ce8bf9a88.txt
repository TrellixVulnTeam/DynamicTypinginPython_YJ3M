commit b65087adac11964c441b1c38b0c9012ce8bf9a88
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Oct 16 16:49:03 2015 -0700

    Fix incorrect behavior in fix_culprit for js.
    
    This was trying to generate_culprit based on the unprocessed data.
    Instead, we have a real stacktrace object that has been mapped with our
    sourcemaps and prettied up, so we should extract culprit string out of
    that instead of the initial raw data.

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 6f13e3f151..2722dafc42 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -25,7 +25,6 @@ except ImportError:
 from sentry import http
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import EventError, Release, ReleaseFile
-from sentry.event_manager import generate_culprit
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5
 from sentry.utils.http import is_valid_origin
@@ -462,7 +461,15 @@ class SourceProcessor(object):
         return data
 
     def fix_culprit(self, data, stacktraces):
-        data['culprit'] = generate_culprit(data)
+        # This is a bit weird, since the original culprit we get
+        # will be wrong, so we want to touch it up after we've processed
+        # a stack trace.
+
+        # In this case, we have a list of all stacktraces as a tuple
+        # (stacktrace as dict, stacktrace class)
+        # So we need to take the [1] index to get the Stacktrace class,
+        # then extract the culprit string from that.
+        data['culprit'] = stacktraces[-1][1].get_culprit_string()
 
     def update_stacktraces(self, stacktraces):
         for raw, interface in stacktraces:
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 5be03bdd66..fa48035781 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -216,3 +216,36 @@ class SourceProcessorTest(TestCase):
         result = processor.get_stacktraces(data)
         assert len(result) == 1
         assert type(result[0][1]) is Stacktrace
+
+    def test_get_culprit_is_patched(self):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'Error',
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/foo.js',
+                                'filename': 'foo.js',
+                                'lineno': 4,
+                                'colno': 0,
+                                'function': 'thing',
+                            },
+                            {
+                                'abs_path': 'http://example.com/bar.js',
+                                'filename': 'bar.js',
+                                'lineno': 1,
+                                'colno': 0,
+                                'function': 'oops',
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+
+        processor = SourceProcessor()
+        result = processor.process(self.project, data)
+        assert result['culprit'] == 'bar in oops'
