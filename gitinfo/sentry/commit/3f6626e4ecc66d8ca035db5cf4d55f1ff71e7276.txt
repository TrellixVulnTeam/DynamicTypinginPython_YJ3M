commit 3f6626e4ecc66d8ca035db5cf4d55f1ff71e7276
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Apr 7 13:56:52 2016 -0700

    Better guard against invalid auth headers
    
    Refs: SENTRY-11K SENTRY-SZ
    
    /cc @getsentry/infrastructure

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 2521ab0240..33199481bb 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -174,16 +174,16 @@ class ClientApiHelper(object):
         self.log = ClientLogHelper(self.context)
 
     def auth_from_request(self, request):
-        if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
+        if request.META.get('HTTP_X_SENTRY_AUTH', '')[:7].lower() == 'sentry ':
             result = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
-        elif request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
+        elif request.META.get('HTTP_AUTHORIZATION', '')[:7].lower() == 'sentry ':
             result = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
         else:
-            result = dict(
-                (k, request.GET[k])
+            result = {
+                k: request.GET[k]
                 for k in request.GET.iterkeys()
-                if k.startswith('sentry_')
-            )
+                if k[:7] == 'sentry_'
+            }
         if not result:
             raise APIUnauthorized('Unable to find authentication information')
 
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index da7d2c6e5b..551ab4edbc 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -19,8 +19,15 @@ from sentry.models import User
 logger = logging.getLogger('sentry.auth')
 
 
+def _make_key_value(val):
+    return val.strip().split('=', 1)
+
+
 def parse_auth_header(header):
-    return dict(map(lambda x: x.strip().split('='), header.split(' ', 1)[1].split(',')))
+    try:
+        return dict(map(_make_key_value, header.split(' ', 1)[1].split(',')))
+    except Exception:
+        return {}
 
 
 def get_auth_providers():
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index a477b99aa7..9ce08b7d68 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -32,6 +32,18 @@ class AuthFromRequestTest(BaseAPITest):
         result = self.helper.auth_from_request(request)
         assert result.public_key == 'value'
 
+    def test_valid_missing_space(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,biz=baz'}
+        result = self.helper.auth_from_request(request)
+        assert result.public_key == 'value'
+
+    def test_valid_ignore_case(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'SeNtRy sentry_key=value, biz=baz'}
+        result = self.helper.auth_from_request(request)
+        assert result.public_key == 'value'
+
     def test_invalid_header_defers_to_GET(self):
         request = mock.Mock()
         request.META = {'HTTP_X_SENTRY_AUTH': 'foobar'}
@@ -46,6 +58,25 @@ class AuthFromRequestTest(BaseAPITest):
         result = self.helper.auth_from_request(request)
         assert result.version == '1'
 
+    def test_invalid_header_bad_token(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentryfoo'}
+        request.GET = {}
+        with self.assertRaises(APIUnauthorized):
+            self.helper.auth_from_request(request)
+
+    def test_invalid_header_missing_pair(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry foo'}
+        with self.assertRaises(APIUnauthorized):
+            self.helper.auth_from_request(request)
+
+    def test_invalid_malformed_value(self):
+        request = mock.Mock()
+        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,,biz=baz'}
+        with self.assertRaises(APIUnauthorized):
+            self.helper.auth_from_request(request)
+
 
 class ProjectFromAuthTest(BaseAPITest):
     def test_invalid_if_missing_key(self):
