commit e7afd31ae5da99866346af49b32bf7a606b1dbae
Author: Lovepreet Sangha <lovepreetssangha@gmail.com>
Date:   Mon May 7 16:28:14 2018 -0700

    feat: Continuation of Project Settings Audit Log (#8334)
    
    Can now view change(s) made to a project's allowed domain, source fetching, security token, security token head, and verify SSL

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index c6981f0f2a..51314777a5 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -354,11 +354,14 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if project.update_option('sentry:scrub_ip_address', result['scrubIPAddresses']):
                 changed_proj_settings['sentry:scrub_ip_address'] = result['scrubIPAddresses']
         if result.get('securityToken') is not None:
-            project.update_option('sentry:token', result['securityToken'])
+            if project.update_option('sentry:token', result['securityToken']):
+                changed_proj_settings['sentry:token'] = result['securityToken']
         if result.get('securityTokenHeader') is not None:
-            project.update_option('sentry:token_header', result['securityTokenHeader'])
+            if project.update_option('sentry:token_header', result['securityTokenHeader']):
+                changed_proj_settings['sentry:token_header'] = result['securityTokenHeader']
         if result.get('verifySSL') is not None:
-            project.update_option('sentry:verify_ssl', result['verifySSL'])
+            if project.update_option('sentry:verify_ssl', result['verifySSL']):
+                changed_proj_settings['sentry:verify_ssl'] = result['verifySSL']
         if result.get('dataScrubber') is not None:
             if project.update_option('sentry:scrub_data', result['dataScrubber']):
                 changed_proj_settings['sentry:scrub_data'] = result['dataScrubber']
@@ -384,9 +387,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     result['resolveAge'])):
                 changed_proj_settings['sentry:resolve_age'] = result['resolveAge']
         if result.get('scrapeJavaScript') is not None:
-            project.update_option('sentry:scrape_javascript', result['scrapeJavaScript'])
+            if project.update_option('sentry:scrape_javascript', result['scrapeJavaScript']):
+                changed_proj_settings['sentry:scrape_javascript'] = result['scrapeJavaScript']
         if result.get('allowedDomains'):
-            project.update_option('sentry:origins', result['allowedDomains'])
+            if project.update_option('sentry:origins', result['allowedDomains']):
+                changed_proj_settings['sentry:origins'] = result['allowedDomains']
 
         if result.get('isSubscribed'):
             UserOption.objects.set_value(
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 8dae518143..d65876d92e 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -245,7 +245,12 @@ class ProjectUpdateTest(APITestCase):
             'filters:releases': '1.*\n2.1.*',
             'filters:error_messages': 'TypeError*\n*: integer division by modulo or zero',
             'mail:subject_prefix': '[Sentry]',
-            'sentry:scrub_ip_address': False
+            'sentry:scrub_ip_address': False,
+            'sentry:origins': '*',
+            'sentry:scrape_javascript': False,
+            'sentry:token': '*',
+            'sentry:token_header': '*',
+            'sentry:verify_ssl': False
         }
         with self.feature('projects:custom-inbound-filters'):
             resp = self.client.put(self.path, data={'options': options})
@@ -300,6 +305,35 @@ class ProjectUpdateTest(APITestCase):
             organization=project.organization,
             event=AuditLogEntryEvent.PROJECT_EDIT,
         ).exists()
+        assert project.get_option('sentry:origins', '*')
+        assert AuditLogEntry.objects.filter(
+            organization=project.organization,
+            event=AuditLogEntryEvent.PROJECT_EDIT,
+        ).exists()
+        assert project.get_option(
+            'sentry:scrape_javascript',
+            False) == options['sentry:scrape_javascript']
+        assert AuditLogEntry.objects.filter(
+            organization=project.organization,
+            event=AuditLogEntryEvent.PROJECT_EDIT,
+        ).exists()
+        assert project.get_option('sentry:token', '*')
+        assert AuditLogEntry.objects.filter(
+            organization=project.organization,
+            event=AuditLogEntryEvent.PROJECT_EDIT,
+        ).exists()
+        assert project.get_option('sentry:token_header', '*')
+        assert AuditLogEntry.objects.filter(
+            organization=project.organization,
+            event=AuditLogEntryEvent.PROJECT_EDIT,
+        ).exists()
+        assert project.get_option(
+            'sentry:verify_ssl',
+            False) == options['sentry:verify_ssl']
+        assert AuditLogEntry.objects.filter(
+            organization=project.organization,
+            event=AuditLogEntryEvent.PROJECT_EDIT,
+        ).exists()
 
     def test_bookmarks(self):
         resp = self.client.put(self.path, data={
