commit e3d87c322c5b286784a70a52cbffd1df848bddf7
Author: Jess MacQueen <jess@getsentry.com>
Date:   Tue Oct 31 17:11:20 2017 -0700

    feat(store): Save key_id as part of event data
    
    refs GH-2709

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index b03516ecb0..ceae397095 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -144,7 +144,7 @@ HTTP_METHODS = ('GET', 'POST', 'PUT', 'OPTIONS', 'HEAD',
 CLIENT_RESERVED_ATTRS = (
     'project', 'errors', 'event_id', 'message', 'checksum', 'culprit', 'fingerprint', 'level',
     'time_spent', 'logger', 'server_name', 'site', 'received', 'timestamp', 'extra', 'modules',
-    'tags', 'platform', 'release', 'dist', 'environment', 'transaction',
+    'tags', 'platform', 'release', 'dist', 'environment', 'transaction', 'key_id',
 )
 
 # XXX: Must be all lowercase
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 29f9e7e917..5f3d7748b6 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -413,10 +413,7 @@ class ClientApiHelper(object):
 
         return (False, None)
 
-    def validate_data(self, project, data):
-        # TODO(dcramer): move project out of the data packet
-        data['project'] = project.id
-
+    def validate_data(self, data):
         data['errors'] = []
 
         if data.get('culprit'):
@@ -866,7 +863,7 @@ class MinidumpApiHelper(ClientApiHelper):
         auth.client = 'sentry-minidump'
         return auth
 
-    def validate_data(self, project, data):
+    def validate_data(self, data):
         try:
             release = data.pop('release')
         except KeyError:
@@ -884,7 +881,6 @@ class MinidumpApiHelper(ClientApiHelper):
 
         validated = {
             'platform': 'native',
-            'project': project.id,
             'extra': data,
             'errors': [],
             'sentry.interfaces.User': {
@@ -952,7 +948,7 @@ class CspApiHelper(ClientApiHelper):
             return (True, FilterStatKeys.INVALID_CSP)
         return super(CspApiHelper, self).should_filter(project, data, ip_address)
 
-    def validate_data(self, project, data):
+    def validate_data(self, data):
         # pop off our meta data used to hold Sentry specific stuff
         meta = data.pop('_meta', {})
 
@@ -973,7 +969,6 @@ class CspApiHelper(ClientApiHelper):
 
         data = {
             'logger': 'csp',
-            'project': project.id,
             'message': inst.get_message(),
             'culprit': inst.get_culprit(),
             'release': meta.get('release'),
@@ -1038,11 +1033,12 @@ class CspApiHelper(ClientApiHelper):
 
 
 class LazyData(MutableMapping):
-    def __init__(self, data, content_encoding, helper, project, auth, client_ip):
+    def __init__(self, data, content_encoding, helper, project, key, auth, client_ip):
         self._data = data
         self._content_encoding = content_encoding
         self._helper = helper
         self._project = project
+        self._key = key
         self._auth = auth
         self._client_ip = client_ip
         self._decoded = False
@@ -1051,7 +1047,6 @@ class LazyData(MutableMapping):
         data = self._data
         content_encoding = self._content_encoding
         helper = self._helper
-        project = self._project
         auth = self._auth
 
         # TODO(dcramer): CSP is passing already decoded JSON, which sort of
@@ -1074,7 +1069,7 @@ class LazyData(MutableMapping):
         # version of the data
 
         # mutates data
-        data = helper.validate_data(project, data)
+        data = helper.validate_data(data)
 
         if 'sdk' not in data:
             sdk = helper.parse_client_as_sdk(auth.client)
@@ -1085,6 +1080,9 @@ class LazyData(MutableMapping):
 
         data['sdk']['client_ip'] = self._client_ip
 
+        data['project'] = self._project.id
+        data['key_id'] = self._key.id
+
         # we always fill in the IP so that filters and other items can
         # access it (even if it eventually gets scrubbed)
         helper.ensure_has_ip(
diff --git a/src/sentry/utils/raven.py b/src/sentry/utils/raven.py
index 67de7716b8..891542f904 100644
--- a/src/sentry/utils/raven.py
+++ b/src/sentry/utils/raven.py
@@ -96,7 +96,7 @@ class SentryInternalClient(DjangoClient):
             # This in theory is the right way to do it because validate
             # also normalizes currently, but we just send in data already
             # normalised in the raven client now.
-            # data = helper.validate_data(project, kwargs)
+            # data = helper.validate_data(kwargs)
             data = kwargs
             manager = EventManager(data)
             data = manager.normalize()
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 2b3f48c5e5..f3bfcb44c3 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -349,6 +349,7 @@ class StoreView(APIView):
             content_encoding=request.META.get('HTTP_CONTENT_ENCODING', ''),
             helper=helper,
             project=project,
+            key=key,
             auth=auth,
             client_ip=remote_addr,
         )
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 5143354f04..e83a3070b6 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -19,6 +19,7 @@ from sentry.coreapi import (
     get_interface,
     CspApiHelper,
     APIForbidden,
+    LazyData,
 )
 from sentry.testutils import TestCase
 
@@ -181,27 +182,21 @@ class ProcessDataTimestampTest(BaseAPITest):
 
 
 class ValidateDataTest(BaseAPITest):
-    def test_missing_project_id(self):
-        data = self.helper.validate_data(self.project, {
-            'message': 'foo',
-        })
-        assert data['project'] == self.project.id
-
     @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_empty_event_id(self, uuid4):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'event_id': '',
         })
         assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
 
     @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_missing_event_id(self, uuid4):
-        data = self.helper.validate_data(self.project, {})
+        data = self.helper.validate_data({})
         assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
 
     @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_invalid_event_id(self, uuid4):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'event_id': 'a' * 33,
         })
         assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
@@ -210,7 +205,7 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['name'] == 'event_id'
         assert data['errors'][0]['value'] == 'a' * 33
 
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'event_id': 'xyz',
         })
         assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
@@ -220,10 +215,10 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 'xyz'
 
     def test_invalid_event_id_raises(self):
-        self.assertRaises(APIError, self.helper.validate_data, self.project, {'event_id': 1})
+        self.assertRaises(APIError, self.helper.validate_data, {'event_id': 1})
 
     def test_unknown_attribute(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo',
             'foo': 'bar',
         })
@@ -233,7 +228,7 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['name'] == 'foo'
 
     def test_invalid_interface_name(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo',
             'foo.baz': 'bar',
         })
@@ -243,12 +238,10 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['name'] == 'foo.baz'
 
     def test_invalid_interface_import_path(self):
-        data = self.helper.validate_data(
-            self.project, {
-                'message': 'foo',
-                'sentry.interfaces.Exception2': 'bar',
-            }
-        )
+        data = self.helper.validate_data({
+            'message': 'foo',
+            'sentry.interfaces.Exception2': 'bar',
+        })
         assert 'sentry.interfaces.Exception2' not in data
         assert len(data['errors']) == 1
         assert data['errors'][0]['type'] == 'invalid_attribute'
@@ -256,7 +249,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_does_expand_list(self):
         data = self.helper.validate_data(
-            self.project, {
+            {
                 'message': 'foo',
                 'exception':
                 [{
@@ -269,14 +262,14 @@ class ValidateDataTest(BaseAPITest):
         assert 'sentry.interfaces.Exception' in data
 
     def test_log_level_as_string(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo',
             'level': 'error',
         })
         assert data['level'] == 40
 
     def test_invalid_log_level(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo',
             'level': 'foobar',
         })
@@ -287,7 +280,7 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 'foobar'
 
     def test_tags_as_string(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo',
             'tags': 'bar',
         })
@@ -295,7 +288,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_tags_with_spaces(self):
         data = self.helper.validate_data(
-            self.project, {
+            {
                 'message': 'foo',
                 'tags': {
                     'foo bar': 'baz bar'
@@ -306,7 +299,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_tags_out_of_bounds(self):
         data = self.helper.validate_data(
-            self.project, {
+            {
                 'message': 'foo',
                 'tags': {
                     'f' * 33: 'value',
@@ -320,7 +313,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_tags_as_invalid_pair(self):
         data = self.helper.validate_data(
-            self.project, {
+            {
                 'message': 'foo',
                 'tags': [('foo', 'bar'), ('biz', 'baz', 'boz')],
             }
@@ -333,7 +326,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_reserved_tags(self):
         data = self.helper.validate_data(
-            self.project, {
+            {
                 'message': 'foo',
                 'tags': [('foo', 'bar'), ('release', 'abc123')],
             }
@@ -346,7 +339,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_tag_value(self):
         data = self.helper.validate_data(
-            self.project, {
+            {
                 'message': 'foo',
                 'tags': [('foo', 'bar\n'), ('biz', 'baz')],
             }
@@ -358,17 +351,17 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == ('foo', 'bar\n')
 
     def test_extra_as_string(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo',
             'extra': 'bar',
         })
         assert 'extra' not in data
 
     def test_invalid_culprit_raises(self):
-        self.assertRaises(APIError, self.helper.validate_data, self.project, {'culprit': 1})
+        self.assertRaises(APIError, self.helper.validate_data, {'culprit': 1})
 
     def test_release_too_long(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'release': 'a' * 65,
         })
         assert not data.get('release')
@@ -378,13 +371,13 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 'a' * 65
 
     def test_release_as_non_string(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'release': 42,
         })
         assert data.get('release') == '42'
 
     def test_distribution_too_long(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'release': 'a' * 62,
             'dist': 'b' * 65,
         })
@@ -395,7 +388,7 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 'b' * 65
 
     def test_distribution_bad_char(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'release': 'a' * 62,
             'dist': '^%',
         })
@@ -406,14 +399,14 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == '^%'
 
     def test_distribution_strip(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'release': 'a' * 62,
             'dist': ' foo ',
         })
         assert data.get('dist') == 'foo'
 
     def test_distribution_as_non_string(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'release': '42',
             'dist': 23,
         })
@@ -421,29 +414,29 @@ class ValidateDataTest(BaseAPITest):
         assert data.get('dist') == '23'
 
     def test_distribution_no_release(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'dist': 23,
         })
         assert data.get('dist') is None
 
     def test_valid_platform(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'platform': 'python',
         })
         assert data.get('platform') == 'python'
 
     def test_no_platform(self):
-        data = self.helper.validate_data(self.project, {})
+        data = self.helper.validate_data({})
         assert data.get('platform') == 'other'
 
     def test_invalid_platform(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'platform': 'foobar',
         })
         assert data.get('platform') == 'other'
 
     def test_environment_too_long(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'environment': 'a' * 65,
         })
         assert not data.get('environment')
@@ -453,13 +446,13 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 'a' * 65
 
     def test_environment_as_non_string(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'environment': 42,
         })
         assert data.get('environment') == '42'
 
     def test_time_spent_too_large(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'time_spent': 2147483647 + 1,
         })
         assert not data.get('time_spent')
@@ -469,7 +462,7 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 2147483647 + 1
 
     def test_time_spent_invalid(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'time_spent': 'lol',
         })
         assert not data.get('time_spent')
@@ -479,27 +472,27 @@ class ValidateDataTest(BaseAPITest):
         assert data['errors'][0]['value'] == 'lol'
 
     def test_time_spent_non_int(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'time_spent': '123',
         })
         assert data['time_spent'] == 123
 
     def test_fingerprints(self):
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'fingerprint': '2012-01-01T10:30:45',
         })
         assert not data.get('fingerprint')
         assert data['errors'][0]['type'] == 'invalid_data'
         assert data['errors'][0]['name'] == 'fingerprint'
 
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'fingerprint': ['foo', ['bar']],
         })
         assert not data.get('fingerprint')
         assert data['errors'][0]['type'] == 'invalid_data'
         assert data['errors'][0]['name'] == 'fingerprint'
 
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'fingerprint': ['{{default}}', 1, 'bar', 4.5],
         })
         assert data.get('fingerprint') == ['{{default}}', '1', 'bar', '4.5']
@@ -507,7 +500,7 @@ class ValidateDataTest(BaseAPITest):
 
     def test_messages(self):
         # Just 'message': wrap it in interface
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo is bar',
         })
         assert 'message' not in data
@@ -515,7 +508,7 @@ class ValidateDataTest(BaseAPITest):
 
         # both 'message' and interface with no 'formatted' value, put 'message'
         # into 'formatted'.
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo is bar',
             'sentry.interfaces.Message': {
                 'message': 'something else',
@@ -528,7 +521,7 @@ class ValidateDataTest(BaseAPITest):
         }
 
         # both 'message' and complete interface, 'message' is discarded
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo is bar',
             'sentry.interfaces.Message': {
                 'message': 'something else',
@@ -546,7 +539,7 @@ class ValidateDataTest(BaseAPITest):
         # both 'message' and complete valid interface but interface has the same
         # value for both keys so the 'formatted' value is discarded and ends up
         # being replaced with 'message'
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo is bar',
             'sentry.interfaces.Message': {
                 'message': 'something else',
@@ -562,7 +555,7 @@ class ValidateDataTest(BaseAPITest):
 
         # interface discarded as invalid, replaced by new interface containing
         # wrapped 'message'
-        data = self.helper.validate_data(self.project, {
+        data = self.helper.validate_data({
             'message': 'foo is bar',
             'sentry.interfaces.Message': {
                 'invalid': 'invalid',
@@ -574,6 +567,12 @@ class ValidateDataTest(BaseAPITest):
             'message': 'foo is bar'
         }
 
+    def test_does_not_strip_key_id(self):
+        data = self.helper.validate_data({
+            'key_id': 12345,
+        })
+        assert data['key_id'] == 12345
+
 
 class SafelyLoadJSONStringTest(BaseAPITest):
     def test_valid_payload(self):
@@ -710,9 +709,8 @@ class CspApiHelperTest(BaseAPITest):
                 "release": "abc123",
             }
         }
-        result = self.helper.validate_data(self.project, report)
+        result = self.helper.validate_data(report)
         assert result['logger'] == 'csp'
-        assert result['project'] == self.project.id
         assert result['release'] == 'abc123'
         assert result['errors'] == []
         assert 'message' in result
@@ -733,7 +731,7 @@ class CspApiHelperTest(BaseAPITest):
     @mock.patch('sentry.interfaces.csp.Csp.to_python', mock.Mock(side_effect=Exception))
     def test_validate_raises_invalid_interface(self):
         with self.assertRaises(APIForbidden):
-            self.helper.validate_data(self.project, {})
+            self.helper.validate_data({})
 
     def test_tags_out_of_bounds(self):
         report = {
@@ -755,7 +753,7 @@ class CspApiHelperTest(BaseAPITest):
                 "release": "abc123",
             }
         }
-        result = self.helper.validate_data(self.project, report)
+        result = self.helper.validate_data(report)
         assert result['tags'] == [
             ('effective-directive', 'img-src'),
         ]
@@ -781,7 +779,7 @@ class CspApiHelperTest(BaseAPITest):
                 "release": "abc123",
             }
         }
-        result = self.helper.validate_data(self.project, report)
+        result = self.helper.validate_data(report)
         assert result['tags'] == [
             ('effective-directive', 'img-src'),
         ]
@@ -807,6 +805,32 @@ class CspApiHelperTest(BaseAPITest):
                 "release": "abc123",
             }
         }
-        result = self.helper.validate_data(self.project, report)
+        result = self.helper.validate_data(report)
         assert 'tags' not in result
         assert len(result['errors']) == 2
+
+
+class LazyDataTest(BaseAPITest):
+    def test_missing_project_id(self):
+        data = LazyData(
+            data={'message': 'foo'},
+            content_encoding='',
+            helper=self.helper,
+            project=self.project,
+            key=self.pk,
+            auth=mock.MagicMock(),
+            client_ip='',
+        )
+        assert data['project'] == self.project.id
+
+    def test_missing_key_id(self):
+        data = LazyData(
+            data={'message': 'foo'},
+            content_encoding='',
+            helper=self.helper,
+            project=self.project,
+            key=self.pk,
+            auth=mock.MagicMock(),
+            client_ip='',
+        )
+        assert data['key_id'] == self.pk.id
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 7ea7f66541..902855d69c 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -37,6 +37,13 @@ class EventManagerTest(TransactionTestCase):
         result.update(kwargs)
         return result
 
+    def test_key_id_remains_in_data(self):
+        manager = EventManager(self.make_event(key_id=12345))
+        manager.normalize()
+        assert manager.data['key_id'] == 12345
+        event = manager.save(1)
+        assert event.data['key_id'] == 12345
+
     def test_similar_message_prefix_doesnt_group(self):
         # we had a regression which caused the default hash to just be
         # 'event.message' instead of '[event.message]' which caused it to
