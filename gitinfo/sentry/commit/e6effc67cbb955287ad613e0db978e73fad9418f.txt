commit e6effc67cbb955287ad613e0db978e73fad9418f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Apr 10 11:47:34 2019 +0200

    feat(grouping): Introduce stacktrace discarding on newstyle grouping (#12700)
    
    This now discards variants in the newstyle grouping like we did in the
    legacy grouping if one of the variants does not contain a stacktrace.
    Unlike the legacy variant this now also applies to stacktraces and
    threads.
    
    Note: This changes the newstyle grouping strategy instead of introducing
    a new one as this one is clearly buggy behavior and not intended.

diff --git a/src/sentry/grouping/component.py b/src/sentry/grouping/component.py
index 025c9d0dbd..4b1014fb2e 100644
--- a/src/sentry/grouping/component.py
+++ b/src/sentry/grouping/component.py
@@ -70,14 +70,19 @@ class GroupingComponent(object):
             return ' '.join(items[-1])
         return self.name or 'others'
 
-    def get_subcomponent(self, id):
+    def get_subcomponent(self, id, only_contributing=False):
         """Looks up a subcomponent by the id and returns the first or `None`."""
-        return next(self.iter_subcomponents(id), None)
+        return next(self.iter_subcomponents(
+            id=id,
+            only_contributing=only_contributing
+        ), None)
 
-    def iter_subcomponents(self, id, recursive=False):
+    def iter_subcomponents(self, id, recursive=False, only_contributing=False):
         """Finds all subcomponents matching an id, optionally recursively."""
         for value in self.values:
             if isinstance(value, GroupingComponent):
+                if only_contributing and not value.contributes:
+                    continue
                 if value.id == id:
                     yield value
                 if recursive:
diff --git a/src/sentry/grouping/strategies/__init__.py b/src/sentry/grouping/strategies/__init__.py
index 4acf30d386..27932210e2 100644
--- a/src/sentry/grouping/strategies/__init__.py
+++ b/src/sentry/grouping/strategies/__init__.py
@@ -6,7 +6,6 @@ def _import_all():
     strategy_modules = [
         'message',
         'security',
-        'threads',
         'template',
         'legacy',
         'newstyle',
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 9abebdf751..aa9253ee2f 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -33,7 +33,7 @@ register_strategy_config(
         'expect-staple:v1',
         'hpkp:v1',
         'csp:v1',
-        'threads:v1',
+        'threads:legacy',
         'stacktrace:legacy',
         'chained-exception:legacy',
         'template:v1',
diff --git a/src/sentry/grouping/strategies/legacy.py b/src/sentry/grouping/strategies/legacy.py
index 2329ec5203..cf3101ed86 100644
--- a/src/sentry/grouping/strategies/legacy.py
+++ b/src/sentry/grouping/strategies/legacy.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import
 
 import re
-import six
 import posixpath
 
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
+from sentry.grouping.strategies.utils import remove_non_stacktrace_variants
 
 
 _ruby_anon_func = re.compile(r'_\d{2,}')
@@ -248,38 +248,7 @@ def chained_exception_legacy(chained_exception, config, **meta):
 
 @chained_exception_legacy.variant_processor
 def chained_exception_legacy_variant_processor(variants, config, **meta):
-    if len(variants) <= 1:
-        return variants
-    any_stacktrace_contributes = False
-    non_contributing_components = []
-    stacktrace_variants = set()
-
-    # In case any of the variants has a contributing stacktrace, we want
-    # to make all other variants non contributing.  Thr e
-    for (key, component) in six.iteritems(variants):
-        if any(s.contributes for s in component.iter_subcomponents(
-                id='stacktrace', recursive=True)):
-            any_stacktrace_contributes = True
-            stacktrace_variants.add(key)
-        else:
-            non_contributing_components.append(component)
-
-    if any_stacktrace_contributes:
-        if len(stacktrace_variants) == 1:
-            hint_suffix = 'but the %s variant does' % next(iter(stacktrace_variants))
-        else:
-            # this branch is basically dead because we only have two
-            # variants right now, but this is so this does not break in
-            # the future.
-            hint_suffix = 'others do'
-        for component in non_contributing_components:
-            component.update(
-                contributes=False,
-                hint='ignored because this variant does not contain a '
-                'stacktrace, but %s' % hint_suffix
-            )
-
-    return variants
+    return remove_non_stacktrace_variants(variants)
 
 
 @strategy(
@@ -517,3 +486,32 @@ def stacktrace_legacy(stacktrace, config, variant, **meta):
         contributes=contributes,
         hint=hint,
     )
+
+
+@strategy(
+    id='threads:legacy',
+    interfaces=['threads'],
+    variants=['!system', 'app'],
+    score=1900,
+)
+def threads_legacy(threads_interface, config, **meta):
+    thread_count = len(threads_interface.values)
+    if thread_count != 1:
+        return GroupingComponent(
+            id='threads',
+            contributes=False,
+            hint='ignored because contains %d threads' % thread_count,
+        )
+
+    stacktrace = threads_interface.values[0].get('stacktrace')
+    if not stacktrace:
+        return GroupingComponent(
+            id='threads',
+            contributes=False,
+            hint='thread has no stacktrace',
+        )
+
+    return GroupingComponent(
+        id='threads',
+        values=[config.get_grouping_component(stacktrace, **meta)],
+    )
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index aef780ae58..04b3a1bb51 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -5,7 +5,8 @@ import re
 
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
-from sentry.grouping.strategies.utils import replace_enclosed_string, split_func_tokens
+from sentry.grouping.strategies.utils import replace_enclosed_string, \
+    split_func_tokens, remove_non_stacktrace_variants
 
 
 _rust_hash = re.compile(r'::h[a-z0-9]{16}$')
@@ -353,6 +354,11 @@ def stacktrace_v1(stacktrace, config, variant, **meta):
     )
 
 
+@stacktrace_v1.variant_processor
+def stacktrace_v1_variant_processor(variants, config, **meta):
+    return remove_non_stacktrace_variants(variants)
+
+
 @strategy(
     id='single-exception:v1',
     interfaces=['singleexception'],
@@ -405,3 +411,42 @@ def chained_exception_v1(chained_exception, config, **meta):
         id='chained-exception',
         values=values,
     )
+
+
+@chained_exception_v1.variant_processor
+def chained_exception_v1_variant_processor(variants, config, **meta):
+    return remove_non_stacktrace_variants(variants)
+
+
+@strategy(
+    id='threads:v1',
+    interfaces=['threads'],
+    variants=['!system', 'app'],
+    score=1900,
+)
+def threads_v1(threads_interface, config, **meta):
+    thread_count = len(threads_interface.values)
+    if thread_count != 1:
+        return GroupingComponent(
+            id='threads',
+            contributes=False,
+            hint='ignored because contains %d threads' % thread_count,
+        )
+
+    stacktrace = threads_interface.values[0].get('stacktrace')
+    if not stacktrace:
+        return GroupingComponent(
+            id='threads',
+            contributes=False,
+            hint='thread has no stacktrace',
+        )
+
+    return GroupingComponent(
+        id='threads',
+        values=[config.get_grouping_component(stacktrace, **meta)],
+    )
+
+
+@threads_v1.variant_processor
+def threads_v1_variant_processor(variants, config, **meta):
+    return remove_non_stacktrace_variants(variants)
diff --git a/src/sentry/grouping/strategies/threads.py b/src/sentry/grouping/strategies/threads.py
deleted file mode 100644
index c539463466..0000000000
--- a/src/sentry/grouping/strategies/threads.py
+++ /dev/null
@@ -1,33 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.grouping.component import GroupingComponent
-from sentry.grouping.strategies.base import strategy
-
-
-@strategy(
-    id='threads:v1',
-    interfaces=['threads'],
-    variants=['!system', 'app'],
-    score=1900,
-)
-def threads_v1(threads_interface, config, **meta):
-    thread_count = len(threads_interface.values)
-    if thread_count != 1:
-        return GroupingComponent(
-            id='threads',
-            contributes=False,
-            hint='ignored because contains %d threads' % thread_count,
-        )
-
-    stacktrace = threads_interface.values[0].get('stacktrace')
-    if not stacktrace:
-        return GroupingComponent(
-            id='threads',
-            contributes=False,
-            hint='thread has no stacktrace',
-        )
-
-    return GroupingComponent(
-        id='threads',
-        values=[config.get_grouping_component(stacktrace, **meta)],
-    )
diff --git a/src/sentry/grouping/strategies/utils.py b/src/sentry/grouping/strategies/utils.py
index edb6f4163c..cfa7d6e69e 100644
--- a/src/sentry/grouping/strategies/utils.py
+++ b/src/sentry/grouping/strategies/utils.py
@@ -80,3 +80,46 @@ def trim_function_name(function, platform):
     if len(component.values) == 1 and isinstance(component.values[0], six.string_types):
         return component.values[0]
     return function
+
+
+def remove_non_stacktrace_variants(variants):
+    """This is a utility function that when given multiple variants will
+    mark all variants as non contributing that do not contain any stacktraces
+    if any of the other variants contain a stacktrace that contributes.
+    """
+    if len(variants) <= 1:
+        return variants
+    any_stacktrace_contributes = False
+    non_contributing_components = []
+    stacktrace_variants = set()
+
+    # In case any of the variants has a contributing stacktrace, we want
+    # to make all other variants non contributing.
+    for key, component in six.iteritems(variants):
+        stacktrace_iter = component.iter_subcomponents(
+            id='stacktrace',
+            recursive=True,
+            only_contributing=True
+        )
+        if next(stacktrace_iter, None) is not None:
+            any_stacktrace_contributes = True
+            stacktrace_variants.add(key)
+        else:
+            non_contributing_components.append(component)
+
+    if any_stacktrace_contributes:
+        if len(stacktrace_variants) == 1:
+            hint_suffix = 'the %s variant does' % next(iter(stacktrace_variants))
+        else:
+            # this branch is basically dead because we only have two
+            # variants right now, but this is so this does not break in
+            # the future.
+            hint_suffix = 'others do'
+        for component in non_contributing_components:
+            component.update(
+                contributes=False,
+                hint='ignored because this variant does not have a contributing '
+                'stacktrace, but %s' % hint_suffix
+            )
+
+    return variants
diff --git a/tests/sentry/grouping/grouping_inputs/exception-javascript-no-in-app.json b/tests/sentry/grouping/grouping_inputs/exception-javascript-no-in-app.json
new file mode 100644
index 0000000000..40867b9c1b
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/exception-javascript-no-in-app.json
@@ -0,0 +1,112 @@
+{
+  "culprit": "onError(app/views/settings/components/forms/form)",
+  "event_id": "764b1abef8844ef6a25435301fa58af9",
+  "environment": "prod",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "webpack:///./app/components/modals/createTeamModal.jsx",
+              "pre_context": [
+                "      .then(resp => {",
+                "        this.handleSuccess(resp);",
+                "        onSuccess(resp);",
+                "      })",
+                "      .catch(err => {"
+              ],
+              "post_context": [
+                "      });",
+                "  };",
+                "",
+                "  handleSuccess = data => {",
+                "    if (this.props.onClose) {"
+              ],
+              "module": "app/components/modals/createTeamModal",
+              "in_app": false,
+              "lineno": 27,
+              "colno": 9,
+              "filename": "./app/components/modals/createTeamModal.jsx",
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7929ba007069f1372e3af911f1e947cd/sentry/dist/CreateTeamModal.js.map"
+              },
+              "context_line": "        onError(err);"
+            },
+            {
+              "function": "onError",
+              "abs_path": "webpack:///./app/views/settings/components/forms/form.jsx",
+              "pre_context": [
+                "    this.model.submitSuccess(data);",
+                "    this.props.onSubmitSuccess(data, this.model);",
+                "  };",
+                "",
+                "  onSubmitError = error => {"
+              ],
+              "module": "app/views/settings/components/forms/form",
+              "filename": "./app/views/settings/components/forms/form.jsx",
+              "post_context": [
+                "    this.props.onSubmitError(error, this.model);",
+                "  };",
+                "",
+                "  render() {",
+                "    const {"
+              ],
+              "colno": 16,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7929ba007069f1372e3af911f1e947cd/sentry/dist/app.js.map"
+              },
+              "context_line": "    this.model.submitError(error);",
+              "lineno": 125
+            }
+          ]
+        },
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "abs_path": "https://s1.sentry-cdn.com/_static/7929ba007069f1372e3af911f1e947cd/sentry/dist/CreateTeamModal.js",
+              "post_context": [
+                "//# sourceMappingURL=CreateTeamModal.js.map"
+              ],
+              "in_app": false,
+              "lineno": 1,
+              "colno": 948,
+              "filename": "/_static/7929ba007069f1372e3af911f1e947cd/sentry/dist/CreateTeamModal.js",
+              "context_line": "{snip} en(function(e){a.handleSuccess(e),t(e)}).catch(function(e){n(e)})},a.handleSuccess=function(e){a.props.onClose&&a.props.onClose(e),a.props.c {snip}"
+            },
+            {
+              "function": "a.onSubmitError",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7929ba007069f1372e3af911f1e947cd/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": false,
+              "lineno": 1,
+              "colno": 137210,
+              "filename": "/_static/7929ba007069f1372e3af911f1e947cd/sentry/dist/app.js",
+              "context_line": "{snip} mitSuccess(e,a.model)},a.onSubmitError=function(e){a.model.submitError(e),a.props.onSubmitError(e,a.model)};var i=e.saveOnBlur,o=e.apiEndpoi {snip}"
+            }
+          ]
+        },
+        "mechanism": {
+          "data": {
+            "message": "Cannot read property 'submitError' of null",
+            "mode": "stack",
+            "name": "TypeError"
+          },
+          "type": "onunhandledrejection",
+          "handled": false
+        },
+        "value": "Cannot read property 'submitError' of null",
+        "type": "TypeError"
+      }
+    ]
+  },
+  "release": "678e58f7fba703cae83404ceb1538665b4c875db"
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/aspnetcore.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/aspnetcore.pysnap
index be22f5ba1a..c160ad9be9 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/aspnetcore.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/aspnetcore.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T10:03:30.946441Z'
+created: '2019-04-09T18:49:34.560544Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception (ignored because this variant does not contain a stacktrace, but but the system variant does)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace (less than 10% of frames are in-app)
           frame (non app frame)
             module*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/exception_javascript_no_in_app.pysnap
new file mode 100644
index 0000000000..b544995912
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/exception_javascript_no_in_app.pysnap
@@ -0,0 +1,66 @@
+---
+created: '2019-04-09T18:49:34.676384Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'./app/components/modals/createTeamModal.jsx'
+            context-line*
+              u'        onError(err);'
+            lineno (line number is used only if module or filename are available)
+              27
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'./app/views/settings/components/forms/form.jsx'
+            context-line*
+              u'    this.model.submitError(error);'
+            function (function name is used only if module or filename are available)
+              u'onError'
+            lineno (line number is used only if module or filename are available)
+              125
+        type*
+          u'TypeError'
+        value (stacktrace and type take precedence)
+          u"Cannot read property 'submitError' of null"
+--------------------------------------------------------------------------
+system:
+  hash: 'd1f185038ed0941ba9e5d2bad519b773'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'./app/components/modals/createTeamModal.jsx'
+            context-line*
+              u'        onError(err);'
+            lineno (line number is used only if module or filename are available)
+              27
+          frame*
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'./app/views/settings/components/forms/form.jsx'
+            context-line*
+              u'    this.model.submitError(error);'
+            function (function name is used only if module or filename are available)
+              u'onError'
+            lineno (line number is used only if module or filename are available)
+              125
+        type*
+          u'TypeError'
+        value (stacktrace and type take precedence)
+          u"Cannot read property 'submitError' of null"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/laravel.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/laravel.pysnap
index 176adcc771..98430f6f54 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/laravel.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/laravel.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T10:03:31.465550Z'
+created: '2019-04-09T18:49:35.041211Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception (ignored because this variant does not contain a stacktrace, but but the system variant does)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace (less than 10% of frames are in-app)
           frame*
             filename*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap
index df8cd94d10..b15b943092 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T10:03:31.522541Z'
+created: '2019-04-09T18:49:35.092083Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             function* (isolated function)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/react_native.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/react_native.pysnap
index 110f319576..cb9e893304 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/react_native.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/react_native.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-07T10:03:31.590097Z'
+created: '2019-04-09T18:49:35.213236Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception (ignored because this variant does not contain a stacktrace, but but the system variant does)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace (less than 10% of frames are in-app)
           frame (non app frame)
             module*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/aspnetcore.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/aspnetcore.pysnap
index c3e2258fe7..958be09109 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/aspnetcore.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/aspnetcore.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:36.873840Z'
+created: '2019-04-09T18:49:35.432802Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception (ignored because this variant does not contain a stacktrace, but but the system variant does)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace (less than 10% of frames are in-app)
           frame (non app frame)
             module*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_javascript_no_in_app.pysnap
new file mode 100644
index 0000000000..77746d32cf
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/exception_javascript_no_in_app.pysnap
@@ -0,0 +1,66 @@
+---
+created: '2019-04-09T18:49:35.541296Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'./app/components/modals/createTeamModal.jsx'
+            context-line*
+              u'        onError(err);'
+            lineno (line number is used only if module or filename are available)
+              27
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'./app/views/settings/components/forms/form.jsx'
+            context-line*
+              u'    this.model.submitError(error);'
+            function (function name is used only if module or filename are available)
+              u'onError'
+            lineno (line number is used only if module or filename are available)
+              125
+        type*
+          u'TypeError'
+        value (stacktrace and type take precedence)
+          u"Cannot read property 'submitError' of null"
+--------------------------------------------------------------------------
+system:
+  hash: 'd1f185038ed0941ba9e5d2bad519b773'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'./app/components/modals/createTeamModal.jsx'
+            context-line*
+              u'        onError(err);'
+            lineno (line number is used only if module or filename are available)
+              27
+          frame*
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'./app/views/settings/components/forms/form.jsx'
+            context-line*
+              u'    this.model.submitError(error);'
+            function (function name is used only if module or filename are available)
+              u'onError'
+            lineno (line number is used only if module or filename are available)
+              125
+        type*
+          u'TypeError'
+        value (stacktrace and type take precedence)
+          u"Cannot read property 'submitError' of null"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/laravel.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/laravel.pysnap
index d6e33242a9..39c4fd6b58 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/laravel.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/laravel.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:37.395721Z'
+created: '2019-04-09T18:49:35.887760Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception (ignored because this variant does not contain a stacktrace, but but the system variant does)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace (less than 10% of frames are in-app)
           frame*
             filename*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/react_native.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/react_native.pysnap
index 114d511746..6837818e41 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/react_native.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/react_native.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-14T17:12:37.489179Z'
+created: '2019-04-09T18:49:36.002678Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception (ignored because this variant does not contain a stacktrace, but but the system variant does)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace (less than 10% of frames are in-app)
           frame (non app frame)
             module*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes.pysnap
index e560507955..bdb43f6f12 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes.pysnap
@@ -1,13 +1,13 @@
 ---
-created: '2019-04-03T22:37:15.731313Z'
+created: '2019-04-09T18:49:36.299638Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
-  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  hash: None
   component:
-    app*
-      exception*
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             filename*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes_2.pysnap
index 4d16a1dcf0..1110a4da07 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes_2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_compute_hashes_2.pysnap
@@ -1,13 +1,13 @@
 ---
-created: '2019-04-03T22:37:15.741137Z'
+created: '2019-04-09T18:49:36.308557Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
-  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  hash: None
   component:
-    app*
-      exception*
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             filename*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_javascript_no_in_app.pysnap
new file mode 100644
index 0000000000..90f0d3922f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/exception_javascript_no_in_app.pysnap
@@ -0,0 +1,46 @@
+---
+created: '2019-04-09T18:49:36.326246Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+          frame (non app frame)
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function*
+              u'onError'
+        type*
+          u'TypeError'
+--------------------------------------------------------------------------
+system:
+  hash: '8717a0fb8a1ddcabdd21bc2b7ca9ebee'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+          frame*
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function*
+              u'onError'
+        type*
+          u'TypeError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/java_minimal.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/java_minimal.pysnap
index 2bb7ea0253..bdf634df28 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/java_minimal.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/java_minimal.pysnap
@@ -1,13 +1,13 @@
 ---
-created: '2019-03-15T11:58:33.182022Z'
+created: '2019-04-09T18:49:36.619808Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
-  hash: '83661bfca7422cbab6c9bb849514e26b'
+  hash: None
   component:
-    app*
-      exception*
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             module*
@@ -400,8 +400,8 @@ app:
 default:
   hash: None
   component:
-    default (exception of app takes precedence)
-      message (exception of app takes precedence)
+    default (exception of system takes precedence)
+      message (exception of system takes precedence)
         u'Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause'
 --------------------------------------------------------------------------
 system:
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_no_in_app.pysnap
index 1d22192863..30f1c0f5b9 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_no_in_app.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_exception_no_in_app.pysnap
@@ -1,13 +1,13 @@
 ---
-created: '2019-03-15T11:58:33.192278Z'
+created: '2019-04-09T18:49:36.630959Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
-  hash: 'f0c115b5c5c017cd42bb8050e8d82306'
+  hash: None
   component:
-    app*
-      exception*
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             filename*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/minified_javascript.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/minified_javascript.pysnap
index e278337127..8e472af3df 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/minified_javascript.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/minified_javascript.pysnap
@@ -1,13 +1,13 @@
 ---
-created: '2019-03-16T15:38:21.060366Z'
+created: '2019-04-09T18:49:36.705412Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
-  hash: 'fc370a55338a8eab50cef81666096af3'
+  hash: None
   component:
-    app*
-      exception*
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             module*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap
index f55596f6a7..14bf5ebd60 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/native_complex_function_names.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-21T00:08:18.464103Z'
+created: '2019-04-09T18:49:36.714864Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (exception of system takes precedence)
-      exception
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             function* (isolated function)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/threads_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/threads_compute_hashes.pysnap
index 2c10362414..5c7f481445 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/threads_compute_hashes.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/threads_compute_hashes.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-04-03T22:37:16.384086Z'
+created: '2019-04-09T18:57:09.573418Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -7,7 +7,7 @@ app:
   hash: None
   component:
     app (threads of system takes precedence)
-      threads
+      threads (ignored because this variant does not have a contributing stacktrace, but the system variant does)
         stacktrace
           frame (non app frame)
             filename*
