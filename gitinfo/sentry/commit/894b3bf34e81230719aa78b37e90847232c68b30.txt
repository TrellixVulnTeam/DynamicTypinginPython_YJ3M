commit 894b3bf34e81230719aa78b37e90847232c68b30
Author: Mark Story <mark@sentry.io>
Date:   Wed Jun 3 09:43:37 2020 -0400

    feat(perf-views) Enable user defined charts on performance overview (#19083)
    
    Enable users to control which charts are shown on the performance
    overview so they can diagnose issues and focus in on problems more
    easily.

diff --git a/src/sentry/static/sentry/app/views/performance/charts/chart.tsx b/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
index cda665433c..05213d5c8e 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
@@ -23,7 +23,7 @@ class Chart extends React.Component<Props> {
     if (!data || data.length <= 0) {
       return null;
     }
-    const colors = theme.charts.getColorPalette(1);
+    const colors = theme.charts.getColorPalette(4);
 
     const areaChartProps = {
       seriesOptions: {
@@ -70,7 +70,7 @@ class Chart extends React.Component<Props> {
       utc,
       isGroupedByDate: true,
       showTimeInTooltip: true,
-      colors: [colors[0], colors[0]],
+      colors: [colors[0], colors[1]],
       tooltip: {
         nameFormatter(value) {
           return value === 'epm()' ? 'tpm()' : value;
diff --git a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
index f23015b512..5d893dcdfd 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
@@ -1,7 +1,9 @@
 import React from 'react';
 import * as Sentry from '@sentry/browser';
+import {browserHistory} from 'react-router';
 import {Location} from 'history';
 
+import {Organization} from 'app/types';
 import {t} from 'app/locale';
 import {Client} from 'app/api';
 import {
@@ -11,14 +13,18 @@ import {
   SectionValue,
 } from 'app/components/charts/styles';
 import {fetchTotalCount} from 'app/actionCreators/events';
+import OptionSelector from 'app/components/charts/optionSelector';
 import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
-import {Organization} from 'app/types';
+
+import {AXIS_OPTIONS} from '../constants';
 
 type Props = {
   api: Client;
   eventView: EventView;
   organization: Organization;
   location: Location;
+  rightAxis: string;
+  leftAxis: string;
 };
 
 type State = {
@@ -57,6 +63,15 @@ class ChartFooter extends React.Component<Props, State> {
     return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
   };
 
+  handleSelectorChange(key: string, value: string) {
+    const {location} = this.props;
+
+    browserHistory.push({
+      pathname: location.pathname,
+      query: {...location.query, [key]: value},
+    });
+  }
+
   mounted: boolean = false;
 
   async fetchTotalCount() {
@@ -81,9 +96,18 @@ class ChartFooter extends React.Component<Props, State> {
   }
 
   render() {
+    const {leftAxis, rightAxis} = this.props;
     const {totalValues} = this.state;
 
     const value = typeof totalValues === 'number' ? totalValues.toLocaleString() : '-';
+    const leftOptions = AXIS_OPTIONS.map(opt => ({
+      ...opt,
+      disabled: opt.value === rightAxis,
+    }));
+    const rightOptions = AXIS_OPTIONS.map(opt => ({
+      ...opt,
+      disabled: opt.value === leftAxis,
+    }));
 
     return (
       <ChartControls>
@@ -91,6 +115,22 @@ class ChartFooter extends React.Component<Props, State> {
           <SectionHeading>{t('Total Events')}</SectionHeading>
           <SectionValue>{value}</SectionValue>
         </InlineContainer>
+        <InlineContainer>
+          <OptionSelector
+            title={t('Left')}
+            selected={leftAxis}
+            options={leftOptions}
+            onChange={(val: string) => this.handleSelectorChange('left', val)}
+            menuWidth="200px"
+          />
+          <OptionSelector
+            title={t('Right')}
+            selected={rightAxis}
+            options={rightOptions}
+            onChange={(val: string) => this.handleSelectorChange('right', val)}
+            menuWidth="200px"
+          />
+        </InlineContainer>
       </ChartControls>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/performance/charts/index.tsx b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
index 18f6451bcf..50fe5998f4 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
@@ -16,24 +16,11 @@ import EventsRequest from 'app/components/charts/eventsRequest';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {IconWarning} from 'app/icons';
 
-import {PERFORMANCE_TERMS} from '../constants';
+import {AXIS_OPTIONS} from '../constants';
 import {HeaderContainer, HeaderTitle, ErrorPanel} from '../styles';
 import Chart from './chart';
 import Footer from './footer';
 
-const YAXIS_OPTIONS = [
-  {
-    label: 'Apdex',
-    value: 'apdex(300)',
-    tooltip: PERFORMANCE_TERMS.apdex,
-  },
-  {
-    label: 'Transactions Per Minute',
-    value: 'epm()',
-    tooltip: PERFORMANCE_TERMS.tpm,
-  },
-];
-
 type Props = {
   api: Client;
   eventView: EventView;
@@ -44,11 +31,20 @@ type Props = {
 };
 
 class Container extends React.Component<Props> {
+  getChartParameters() {
+    const {location} = this.props;
+    const left =
+      AXIS_OPTIONS.find(opt => opt.value === location.query.left) || AXIS_OPTIONS[0];
+    const right =
+      AXIS_OPTIONS.find(opt => opt.value === location.query.right) || AXIS_OPTIONS[1];
+
+    return [left, right];
+  }
+
   render() {
     const {api, organization, location, eventView, router, keyTransactions} = this.props;
 
     // construct request parameters for fetching chart data
-
     const globalSelection = eventView.getGlobalSelection();
     const start = globalSelection.start
       ? getUtcToLocalDateObject(globalSelection.start)
@@ -59,6 +55,7 @@ class Container extends React.Component<Props> {
       : undefined;
 
     const {utc} = getParams(location.query);
+    const axisOptions = this.getChartParameters();
 
     return (
       <Panel>
@@ -81,7 +78,7 @@ class Container extends React.Component<Props> {
           showLoading={false}
           query={eventView.getEventsAPIPayload(location).query}
           includePrevious={false}
-          yAxis={YAXIS_OPTIONS.map(option => option.value)}
+          yAxis={axisOptions.map(opt => opt.value)}
           keyTransactions={keyTransactions}
         >
           {({loading, reloading, errored, results}) => {
@@ -96,8 +93,8 @@ class Container extends React.Component<Props> {
             return (
               <React.Fragment>
                 <HeaderContainer>
-                  {YAXIS_OPTIONS.map(option => (
-                    <div key={option.label}>
+                  {axisOptions.map((option, i) => (
+                    <div key={`${option.label}:${i}`}>
                       <HeaderTitle>
                         {option.label}
                         <QuestionTooltip
@@ -133,6 +130,8 @@ class Container extends React.Component<Props> {
         </EventsRequest>
         <Footer
           api={api}
+          leftAxis={axisOptions[0].value}
+          rightAxis={axisOptions[1].value}
           organization={organization}
           eventView={eventView}
           location={location}
diff --git a/src/sentry/static/sentry/app/views/performance/constants.tsx b/src/sentry/static/sentry/app/views/performance/constants.tsx
index f8adf937cc..cf3c9649a5 100644
--- a/src/sentry/static/sentry/app/views/performance/constants.tsx
+++ b/src/sentry/static/sentry/app/views/performance/constants.tsx
@@ -1,4 +1,5 @@
 import {t} from 'app/locale';
+import {SelectValue} from 'app/types';
 
 export const PERFORMANCE_TERMS: Record<string, string> = {
   apdex: t(
@@ -8,6 +9,9 @@ export const PERFORMANCE_TERMS: Record<string, string> = {
   errorRate: t(
     'Error rate is the percentage of recorded transactions that had a known and unsuccessful status.'
   ),
+  p50: t('p50 indicates the duration that 50% of transactions are faster than.'),
+  p95: t('p95 indicates the duration that 95% of transactions are faster than.'),
+  p99: t('p99 indicates the duration that 99% of transactions are faster than.'),
 };
 
 export const TOP_TRANSACTION_LIMIT = 5;
@@ -29,3 +33,40 @@ export const TOP_TRANSACTION_FILTERS = [
     label: t('Recent Transactions'),
   },
 ] as const;
+
+type TooltipOption = SelectValue<string> & {
+  tooltip: string;
+};
+
+export const AXIS_OPTIONS: TooltipOption[] = [
+  {
+    tooltip: PERFORMANCE_TERMS.apdex,
+    value: 'apdex(300)',
+    label: t('Apdex'),
+  },
+  {
+    tooltip: PERFORMANCE_TERMS.tpm,
+    value: 'epm()',
+    label: t('Transactions Per Minute'),
+  },
+  {
+    tooltip: PERFORMANCE_TERMS.errorRate,
+    value: 'error_rate()',
+    label: t('Error Rate'),
+  },
+  {
+    tooltip: PERFORMANCE_TERMS.p50,
+    value: 'p50()',
+    label: t('p50 Duration'),
+  },
+  {
+    tooltip: PERFORMANCE_TERMS.p95,
+    value: 'p95()',
+    label: t('p95 Duration'),
+  },
+  {
+    tooltip: PERFORMANCE_TERMS.p99,
+    value: 'p99()',
+    label: t('p99 Duration'),
+  },
+];
