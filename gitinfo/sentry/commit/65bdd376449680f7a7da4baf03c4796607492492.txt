commit 65bdd376449680f7a7da4baf03c4796607492492
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 5 13:00:42 2018 -0800

    feat(ui): Change to use PluginsStore (#6848)
    
    Changes the following views:
    * Issue tracking
    * Plugin Details
    * Release Tracking
    
    * small refactor to plugin action creators, add a simple throttle to fetchPlugins actions
    * Add HoC for "plugins"
    * fix project settings in new settings, that requires project context
    * fix link from new project settings -> old
    * add plugin navigation menu component
    * change acceptance to wait until indicator disappears

diff --git a/src/sentry/static/sentry/app/__mocks__/jquery.jsx b/src/sentry/static/sentry/app/__mocks__/jquery.jsx
index f05ab76ab7..70a8262871 100644
--- a/src/sentry/static/sentry/app/__mocks__/jquery.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/jquery.jsx
@@ -2,6 +2,7 @@ let jq = {
   tooltip: () => jq,
   select2: () => jq,
   on: () => jq,
+  unbind: () => jq,
 };
 
 export default () => jq;
diff --git a/src/sentry/static/sentry/app/actionCreators/plugins.jsx b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
index 10a7429376..4f93c7d1a1 100644
--- a/src/sentry/static/sentry/app/actionCreators/plugins.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
@@ -1,39 +1,58 @@
+import {t} from '../locale';
 import PluginActions from '../actions/pluginActions';
 import IndicatorStore from '../stores/indicatorStore';
+import {Client} from '../api';
 
-function doUpdate(api, {orgId, projectId, pluginId, update, ...params}) {
+const activeFetch = {};
+// PluginsStore always exists, so api client should be independent of component lifecycle
+const api = new Client();
+
+function doUpdate({orgId, projectId, pluginId, update, ...params}) {
   PluginActions.update(pluginId, update);
-  return api
-    .requestPromise(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
+  let request = api.requestPromise(
+    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,
+    {
       ...params,
-    })
+    }
+  );
+
+  // This is intentionally not chained because we want the unhandled promise to be returned
+  request
     .then(() => {
       PluginActions.updateSuccess(pluginId, update);
     })
     .catch(err => {
       PluginActions.updateError(pluginId, update, err);
-      throw err;
     });
+
+  return request;
 }
 
 /**
  * Fetches list of available plugins for a project
  *
- * @param {Client} api
  * @param {object} params
  * @param {string} params.orgId Organization ID
  * @param {string} params.projectId Project ID
- * @param {string} params.pluginId Plugin ID
  * @param {object} options
- * @param {boolean} options.noReset Reset will set loading state = true
+ * @param {boolean} options.resetLoading Reset will set loading state = true
  * @return Promise
  */
-export function fetchPlugins(api, {orgId, projectId}, options) {
+export function fetchPlugins({orgId, projectId}, options) {
+  let path = `/projects/${orgId}/${projectId}/plugins/`;
+
+  // Make sure we throttle fetches
+  if (activeFetch[path]) return activeFetch[path];
+
   PluginActions.fetchAll(options);
-  return api
-    .requestPromise(`/projects/${orgId}/${projectId}/plugins/`, {
-      method: 'GET',
-    })
+  let request = api.requestPromise(path, {
+    method: 'GET',
+  });
+
+  activeFetch[path] = request;
+
+  // This is intentionally not chained because we want the unhandled promise to be returned
+  request
     .then((data, _, jqXHR) => {
       PluginActions.fetchAllSuccess(data, {
         pageLinks: jqXHR && jqXHR.getResponseHeader('Link'),
@@ -44,38 +63,39 @@ export function fetchPlugins(api, {orgId, projectId}, options) {
     .catch(err => {
       PluginActions.fetchAllError(err);
       throw err;
-    });
+    })
+    .then(() => (activeFetch[path] = null));
+
+  return request;
 }
 
 /**
  * Enables a plugin
  *
- * @param {Client} api
  * @param {object} params
  * @param {string} params.orgId Organization ID
  * @param {string} params.projectId Project ID
  * @param {string} params.pluginId Plugin ID
  * @return Promise
  */
-export function enablePlugin(api, params) {
-  IndicatorStore.add('Enabling...');
-  return doUpdate(api, {...params, update: {enabled: true}, method: 'POST'})
-    .then(() => IndicatorStore.addSuccess('Plugin was enabled'))
-    .catch(() => IndicatorStore.addError('Unable to enable plugin'));
+export function enablePlugin(params) {
+  IndicatorStore.add(t('Enabling...'));
+  return doUpdate({...params, update: {enabled: true}, method: 'POST'})
+    .then(() => IndicatorStore.addSuccess(t('Plugin was enabled')))
+    .catch(() => IndicatorStore.addError(t('Unable to enable plugin')));
 }
 
 /**
  * Disables a plugin
  *
- * @param {Client} api
  * @param {object} params
  * @param {string} params.orgId Organization ID
  * @param {string} params.projectId Project ID
  * @param {string} params.pluginId Plugin ID
  */
-export function disablePlugin(api, params) {
-  IndicatorStore.add('Disabling...');
-  return doUpdate(api, {...params, update: {enabled: false}, method: 'DELETE'})
-    .then(() => IndicatorStore.addSuccess('Plugin was disabled'))
-    .catch(() => IndicatorStore.addError('Unable to disable plugin'));
+export function disablePlugin(params) {
+  IndicatorStore.add(t('Disabling...'));
+  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})
+    .then(() => IndicatorStore.addSuccess(t('Plugin was disabled')))
+    .catch(() => IndicatorStore.addError(t('Unable to disable plugin')));
 }
diff --git a/src/sentry/static/sentry/app/components/inactivePlugins.jsx b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
index c78836aa90..16f5a2a6e9 100644
--- a/src/sentry/static/sentry/app/components/inactivePlugins.jsx
+++ b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 
 import {t} from '../locale';
 
-export default class extends React.Component {
+class InactivePlugins extends React.Component {
   static propTypes = {
     plugins: PropTypes.array.isRequired,
     onEnablePlugin: PropTypes.func.isRequired,
@@ -42,3 +42,5 @@ export default class extends React.Component {
     );
   }
 }
+
+export default InactivePlugins;
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index e2fe308582..73583db763 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -3,11 +3,12 @@ import React from 'react';
 import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
+import {disablePlugin} from '../actionCreators/plugins';
+import {t} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import plugins from '../plugins';
-import {t} from '../locale';
 
 const PluginConfig = createReactClass({
   displayName: 'PluginConfig',
@@ -17,15 +18,14 @@ const PluginConfig = createReactClass({
     project: PropTypes.object.isRequired,
     data: PropTypes.object.isRequired,
     onDisablePlugin: PropTypes.func,
+    enabled: PropTypes.bool,
   },
 
   mixins: [ApiMixin],
 
   getDefaultProps() {
     return {
-      onDisablePlugin: () => {
-        window.location.reload();
-      },
+      onDisablePlugin: () => {},
     };
   },
 
@@ -69,17 +69,10 @@ const PluginConfig = createReactClass({
   },
 
   disablePlugin() {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(this.getPluginEndpoint(), {
-      method: 'DELETE',
-      success: () => {
-        this.props.onDisablePlugin();
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: error => {
-        IndicatorStore.add(t('Unable to disable plugin. Please try again.'), 'error');
-      },
-    });
+    let {organization, project, data} = this.props;
+    disablePlugin({projectId: project.slug, orgId: organization.slug, pluginId: data.id});
+
+    this.props.onDisablePlugin(this.props.data);
   },
 
   testPlugin() {
@@ -108,13 +101,16 @@ const PluginConfig = createReactClass({
   },
 
   render() {
-    let data = this.props.data;
+    let {data} = this.props;
+    // If passed via props, use that value instead of from `data`
+    let enabled =
+      typeof this.props.enabled !== 'undefined' ? this.props.enabled : data.enabled;
 
     return (
       <div className={`box ref-plugin-config-${data.id}`}>
         <div className="box-header">
           {data.canDisable &&
-            data.enabled && (
+            enabled && (
               <div className="pull-right">
                 {data.isTestable && (
                   <a onClick={this.testPlugin} className="btn btn-sm btn-default">
@@ -132,7 +128,7 @@ const PluginConfig = createReactClass({
           {data.status === 'beta' ? (
             <div className="alert alert-block alert-warning">
               <strong>
-                Note: This plugin is considered beta and may change in the future.
+                {t('Note: This plugin is considered beta and may change in the future.')}
               </strong>
             </div>
           ) : null}
diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
index 3d42178c41..1c2d426feb 100644
--- a/src/sentry/static/sentry/app/components/pluginList.jsx
+++ b/src/sentry/static/sentry/app/components/pluginList.jsx
@@ -1,16 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import createReactClass from 'create-react-class';
 
+import {enablePlugin, disablePlugin} from '../actionCreators/plugins';
 import ApiMixin from '../mixins/apiMixin';
 import InactivePlugins from './inactivePlugins';
-import IndicatorStore from '../stores/indicatorStore';
 import PluginConfig from './pluginConfig';
 import {t} from '../locale';
 
+
 export default createReactClass({
-  displayName: 'pluginList',
+  displayName: 'PluginList',
 
   propTypes: {
     organization: PropTypes.object.isRequired,
@@ -22,26 +22,32 @@ export default createReactClass({
 
   mixins: [ApiMixin],
 
-  enablePlugin(plugin) {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+  getDefaultProps() {
+    return {
+      onDisablePlugin: () => {},
+      onEnablePlugin: () => {},
+    };
+  },
+
+  handleEnablePlugin(plugin) {
     let {organization, project} = this.props;
-    this.api.request(
-      `/projects/${organization.slug}/${project.slug}/plugins/${plugin.id}/`,
-      {
-        method: 'POST',
-        success: () => {
-          IndicatorStore.remove(loadingIndicator);
-          this.props.onEnablePlugin(plugin);
-        },
-        error: error => {
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-        },
-      }
-    );
+    enablePlugin({
+      projectId: project.slug,
+      orgId: organization.slug,
+      pluginId: plugin.slug,
+    });
+
+    this.props.onEnablePlugin(plugin);
   },
 
-  onDisablePlugin(plugin) {
+  handleDisablePlugin(plugin) {
+    let {organization, project} = this.props;
+    disablePlugin({
+      projectId: project.slug,
+      orgId: organization.slug,
+      pluginId: plugin.slug,
+    });
+
     this.props.onDisablePlugin(plugin);
   },
 
@@ -52,7 +58,9 @@ export default createReactClass({
       return (
         <div className="panel panel-default">
           <div className="panel-body p-b-0">
-            <p>{"Oops! Looks like there aren't any available integrations installed."}</p>
+            <p>
+              {t("Oops! Looks like there aren't any available integrations installed.")}
+            </p>
           </div>
         </div>
       );
@@ -67,13 +75,14 @@ export default createReactClass({
               organization={organization}
               project={project}
               key={data.id}
-              onDisablePlugin={this.onDisablePlugin.bind(this, data)}
+              onDisablePlugin={this.handleDisablePlugin}
             />
           );
         })}
+
         <InactivePlugins
           plugins={pluginList.filter(p => !p.enabled)}
-          onEnablePlugin={this.enablePlugin}
+          onEnablePlugin={this.handleEnablePlugin}
         />
       </div>
     );
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 71c051b214..12217003bb 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -170,6 +170,13 @@ export const Plugin = {
 
 export const PluginShape = PropTypes.shape(Plugin);
 
+export const PluginsStore = PropTypes.shape({
+  loading: PropTypes.bool,
+  plugins: PropTypes.arrayOf(PluginShape),
+  error: PropTypes.object,
+  pageLinks: PropTypes.any,
+});
+
 let SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
@@ -191,6 +198,7 @@ let SentryTypes = {
   Member,
   Plugin,
   PluginShape,
+  PluginsStore,
   User,
 };
 
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 03bde450a6..7dda122ade 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -102,6 +102,7 @@ import RouteNotFound from './views/routeNotFound';
 import SetCallsignsAction from './views/requiredAdminActions/setCallsigns';
 import SettingsIndex from './views/settings/settingsIndex';
 import SettingsWrapper from './views/settings/settingsWrapper';
+import SettingsProjectProvider from './views/settings/settingsProjectProvider';
 import SharedGroupDetails from './views/sharedGroupDetails';
 import Stream from './views/stream';
 import TeamCreate from './views/teamCreate';
@@ -436,7 +437,9 @@ function routes() {
                 path=":projectId/"
                 component={errorHandler(ProjectSettingsLayout)}
               >
-                {projectSettingsRoutes}
+                <Route component={errorHandler(SettingsProjectProvider)}>
+                  {projectSettingsRoutes}
+                </Route>
               </Route>
             </Route>
           </Route>
diff --git a/src/sentry/static/sentry/app/utils/withPlugins.jsx b/src/sentry/static/sentry/app/utils/withPlugins.jsx
new file mode 100644
index 0000000000..19952e0f9d
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withPlugins.jsx
@@ -0,0 +1,29 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import {fetchPlugins} from '../actionCreators/plugins';
+import PluginsStore from '../stores/pluginsStore';
+import ProjectState from '../mixins/projectState';
+
+/**
+ * Higher order component that fetches list of plugins and
+ * passes PluginsStore to component as `plugins`
+ */
+const withPlugins = WrappedComponent =>
+  React.createClass({
+    displayName: 'withPlugins',
+    mixins: [ProjectState, Reflux.connect(PluginsStore, 'store')],
+    componentDidMount() {
+      let organization = this.props.organization || this.getOrganization();
+      let project = this.props.project || this.getProject();
+
+      if (!project || !organization) return;
+
+      fetchPlugins({projectId: project.slug, orgId: organization.slug});
+    },
+    render() {
+      return <WrappedComponent {...this.props} plugins={this.state.store} />;
+    },
+  });
+
+export default withPlugins;
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index c08df2d0b8..970241a795 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -1,25 +1,36 @@
 import React from 'react';
-import PropTypes from 'prop-types';
-import AsyncView from './asyncView';
 import PluginList from '../components/pluginList';
+import withPlugins from '../utils/withPlugins';
 
 import {t} from '../locale';
+import {fetchPlugins} from '../actionCreators/plugins';
+import LoadingIndicator from '../components/loadingIndicator';
+import SentryTypes from '../proptypes';
+
+class ProjectIssueTracking extends React.Component {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
 
-export default class ProjectIssueTracking extends AsyncView {
   static propTypes = {
-    organization: PropTypes.object,
-    project: PropTypes.object,
+    plugins: SentryTypes.PluginsStore,
   };
 
-  getEndpoints() {
-    let {projectId, orgId} = this.props.params;
-    return [['plugins', `/projects/${orgId}/${projectId}/plugins/`]];
+  componentDidMount() {
+    let {projectId, orgId} = this.props.params || {};
+    fetchPlugins({projectId, orgId});
   }
 
-  renderBody() {
-    let {organization, project} = this.props;
+  render() {
+    let {organization, project} = this.context;
+    let {loading, plugins} = this.props.plugins || {};
 
-    let issueTrackingPlugins = this.state.plugins.filter(function(plugin) {
+    if (loading || !project || !plugins) {
+      return <LoadingIndicator />;
+    }
+
+    let issueTrackingPlugins = plugins.filter(function(plugin) {
       return plugin.type === 'issue-tracking' && plugin.hasConfiguration;
     });
 
@@ -37,8 +48,6 @@ export default class ProjectIssueTracking extends AsyncView {
             organization={organization}
             project={project}
             pluginList={issueTrackingPlugins}
-            onEnablePlugin={this.fetchData}
-            onDisablePlugin={this.fetchData}
           />
         </div>
       );
@@ -54,3 +63,5 @@ export default class ProjectIssueTracking extends AsyncView {
     }
   }
 }
+
+export default withPlugins(ProjectIssueTracking);
diff --git a/src/sentry/static/sentry/app/views/projectPluginDetails.jsx b/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
index d4eed8dc8f..1ac59d6997 100644
--- a/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectPluginDetails.jsx
@@ -1,12 +1,24 @@
 import React from 'react';
-import AsyncView from './asyncView';
+
+import {disablePlugin, enablePlugin} from '../actionCreators/plugins';
 import {t} from '../locale';
+import AsyncView from './asyncView';
 import Button from '../components/buttons/button';
-import PluginConfig from '../components/pluginConfig';
 import ExternalLink from '../components/externalLink';
 import IndicatorStore from '../stores/indicatorStore';
-
-export default class ProjectPlugins extends AsyncView {
+import PluginConfig from '../components/pluginConfig';
+import withPlugins from '../utils/withPlugins';
+
+/**
+ * There are currently two sources of truths for plugin details:
+ *
+ * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives
+ * 2) We fetch "plugin details" via API and save it to local state as `pluginDetails`.
+ *    This is because "details" call contains form `config` and the "list" endpoint does not.
+ *    The more correct way would be to pass `config` to PluginConfig and use plugin from
+ *    PluginsStore
+ */
+class ProjectPluginDetails extends AsyncView {
   getTitle() {
     let {plugin} = this.state;
     if (plugin && plugin.name) {
@@ -18,7 +30,7 @@ export default class ProjectPlugins extends AsyncView {
 
   getEndpoints() {
     let {projectId, orgId, pluginId} = this.props.params;
-    return [['plugin', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];
+    return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];
   }
 
   trimSchema(value) {
@@ -31,8 +43,8 @@ export default class ProjectPlugins extends AsyncView {
     this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
       method: 'POST',
       data: {reset: true},
-      success: plugin => {
-        this.setState({plugin});
+      success: pluginDetails => {
+        this.setState({pluginDetails});
         IndicatorStore.addSuccess(t('Plugin was reset'));
       },
       error: () => {
@@ -42,68 +54,48 @@ export default class ProjectPlugins extends AsyncView {
     });
   };
 
-  enable = () => {
-    this.toggleEnable(true);
-  };
-
-  disable = () => {
-    this.toggleEnable(false);
+  handleEnable = () => {
+    enablePlugin(this.props.params);
   };
 
   handleDisable = () => {
-    this.setState(prevState => ({
-      plugin: {
-        ...prevState.plugin,
-        enabled: false,
-      },
-    }));
+    disablePlugin(this.props.params);
   };
 
-  toggleEnable(shouldEnable) {
-    let method = shouldEnable ? 'POST' : 'DELETE';
+  // Enabled state is handled via PluginsStore and not via plugins detail
+  getEnabled() {
+    let {pluginDetails} = this.state;
+    let {plugins} = this.props;
 
-    let {orgId, projectId, pluginId} = this.props.params;
-
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let plugin =
+      plugins &&
+      plugins.plugins &&
+      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);
 
-    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
-      method,
-      success: () => {
-        this.setState(prevState => ({
-          plugin: {
-            ...prevState.plugin,
-            enabled: shouldEnable,
-          },
-        }));
-        IndicatorStore.addSuccess(t('Plugin was updated'));
-      },
-      error: () => {
-        IndicatorStore.addError(t('An error occurred'));
-      },
-      complete: () => IndicatorStore.remove(loadingIndicator),
-    });
+    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;
   }
 
   renderActions() {
-    let {plugin} = this.state;
+    let {pluginDetails} = this.state;
+    let enabled = this.getEnabled();
 
     let enable = (
-      <Button onClick={this.enable} style={{marginRight: '6px'}}>
+      <Button onClick={this.handleEnable} style={{marginRight: '6px'}}>
         {t('Enable Plugin')}
       </Button>
     );
 
     let disable = (
-      <Button priority="danger" onClick={this.disable} style={{marginRight: '6px'}}>
+      <Button priority="danger" onClick={this.handleDisable} style={{marginRight: '6px'}}>
         {t('Disable Plugin')}
       </Button>
     );
 
-    let toggleEnable = plugin.enabled ? disable : enable;
+    let toggleEnable = enabled ? disable : enable;
 
     return (
       <div className="pull-right">
-        {plugin.canDisable && toggleEnable}
+        {pluginDetails.canDisable && toggleEnable}
         <Button onClick={this.handleReset}>{t('Reset Configuration')}</Button>
       </div>
     );
@@ -111,57 +103,58 @@ export default class ProjectPlugins extends AsyncView {
 
   renderBody() {
     let {organization, project} = this.props;
-    let {plugin} = this.state;
+    let {pluginDetails} = this.state;
 
     return (
       <div>
         {this.renderActions()}
-        <h2>{plugin.name}</h2>
+        <h2>{pluginDetails.name}</h2>
         <hr />
         <div className="row">
           <div className="col-md-7">
             <PluginConfig
               organization={organization}
               project={project}
-              data={plugin}
+              data={pluginDetails}
+              enabled={this.getEnabled()}
               onDisablePlugin={this.handleDisable}
             />
           </div>
           <div className="col-md-4 col-md-offset-1">
-            <div className="plugin-meta">
+            <div className="pluginDetails-meta">
               <h4>{t('Plugin Information')}</h4>
 
               <dl className="flat">
                 <dt>{t('Name')}</dt>
-                <dd>{plugin.name}</dd>
+                <dd>{pluginDetails.name}</dd>
                 <dt>{t('Author')}</dt>
-                <dd>{plugin.author.name}</dd>
-                {plugin.author.url && (
+                <dd>{pluginDetails.author.name}</dd>
+                {pluginDetails.author.url && (
                   <div>
                     <dt>{t('URL')}</dt>
                     <dd>
-                      <ExternalLink href={plugin.author.url}>
-                        {this.trimSchema(plugin.author.url)}
+                      <ExternalLink href={pluginDetails.author.url}>
+                        {this.trimSchema(pluginDetails.author.url)}
                       </ExternalLink>
                     </dd>
                   </div>
                 )}
                 <dt>{t('Version')}</dt>
-                <dd>{plugin.version}</dd>
+                <dd>{pluginDetails.version}</dd>
               </dl>
 
-              {plugin.description && (
+              {pluginDetails.description && (
                 <div>
                   <h4>{t('Description')}</h4>
-                  <p className="description">{plugin.description}</p>
+                  <p className="description">{pluginDetails.description}</p>
                 </div>
               )}
 
-              {plugin.resourceLinks && (
+              {pluginDetails.resourceLinks && (
                 <div>
                   <h4>{t('Resources')}</h4>
                   <dl className="flat">
-                    {plugin.resourceLinks.map(({title, url}) => (
+                    {pluginDetails.resourceLinks.map(({title, url}) => (
                       <dd key={url}>
                         <ExternalLink href={url}>{title}</ExternalLink>
                       </dd>
@@ -176,3 +169,7 @@ export default class ProjectPlugins extends AsyncView {
     );
   }
 }
+
+export {ProjectPluginDetails};
+
+export default withPlugins(ProjectPluginDetails);
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
index 9e3d47cd03..c7b2963734 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -1,44 +1,43 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
-import Reflux from 'reflux';
 
 import {fetchPlugins, enablePlugin, disablePlugin} from '../../actionCreators/plugins';
-import ApiMixin from '../../mixins/apiMixin';
-import PluginsStore from '../../stores/pluginsStore';
+import withPlugins from '../../utils/withPlugins';
 import ProjectPlugins from './projectPlugins';
+import SentryTypes from '../../proptypes';
 
-const ProjectPluginsContainer = createReactClass({
-  displayName: 'ProjectPluginsContainer',
-  mixins: [ApiMixin, Reflux.connect(PluginsStore, 'store')],
+class ProjectPluginsContainer extends React.Component {
+  static propTypes = {
+    plugins: SentryTypes.PluginsStore,
+  };
 
   componentDidMount() {
     this.fetchData();
-  },
+  }
 
   fetchData() {
-    fetchPlugins(this.api, this.props.params);
-  },
+    fetchPlugins(this.props.params);
+  }
 
-  handleChange(pluginId, shouldEnable) {
+  handleChange = (pluginId, shouldEnable) => {
     let {projectId, orgId} = this.props.params;
     let actionCreator = shouldEnable ? enablePlugin : disablePlugin;
-    actionCreator(this.api, {projectId, orgId, pluginId});
-  },
+    actionCreator({projectId, orgId, pluginId});
+  };
 
   render() {
-    let {store} = this.state;
+    let {loading, error, plugins} = this.props.plugins || {};
 
     return (
       <ProjectPlugins
         {...this.props}
         onError={this.fetchData}
         onChange={this.handleChange}
-        loading={store.loading}
-        error={store.error}
-        plugins={store.plugins}
+        loading={loading}
+        error={error}
+        plugins={plugins}
       />
     );
-  },
-});
+  }
+}
 
-export default ProjectPluginsContainer;
+export default withPlugins(ProjectPluginsContainer);
diff --git a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
index 15df964748..e60c5669d2 100644
--- a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
@@ -1,14 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
-import _ from 'lodash';
 
-import ApiMixin from '../mixins/apiMixin';
 import {t, tct} from '../locale';
 import AlertActions from '../actions/alertActions';
-import PluginList from '../components/pluginList';
+import ApiMixin from '../mixins/apiMixin';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
+import PluginList from '../components/pluginList';
+import withPlugins from '../utils/withPlugins';
+import SentryTypes from '../proptypes';
 
 const ProjectReleaseTracking = createReactClass({
   displayName: 'ProjectReleaseTracking',
@@ -16,6 +17,7 @@ const ProjectReleaseTracking = createReactClass({
   propTypes: {
     organization: PropTypes.object,
     project: PropTypes.object,
+    plugins: PropTypes.arrayOf(SentryTypes.PluginShape),
   },
 
   mixins: [ApiMixin],
@@ -24,7 +26,6 @@ const ProjectReleaseTracking = createReactClass({
     return {
       loading: true,
       error: false,
-      pluginList: [],
       webhookUrl: '',
       token: '',
     };
@@ -36,9 +37,7 @@ const ProjectReleaseTracking = createReactClass({
 
   fetchData() {
     let {orgId, projectId} = this.props.params;
-    let done = _.after(2, () => {
-      this.setState({loading: false});
-    });
+
     this.api.request(`/projects/${orgId}/${projectId}/releases/token/`, {
       method: 'GET',
       success: data =>
@@ -51,52 +50,9 @@ const ProjectReleaseTracking = createReactClass({
           error: true,
         });
       },
-      complete: done,
-    });
-    this.getPluginConfig(done);
-  },
-
-  getPluginConfig(done) {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/plugins/`, {
-      success: data => {
-        this.setState({
-          pluginList: data.filter(
-            p => p.type === 'release-tracking' && p.hasConfiguration
-          ),
-        });
+      complete: () => {
+        this.setState({loading: false});
       },
-      error: () => {
-        this.setState({
-          error: true,
-        });
-      },
-      complete: done,
-    });
-  },
-
-  onEnablePlugin(plugin) {
-    this.setState({
-      pluginList: this.state.pluginList.map(p => {
-        if (p.id !== plugin.id) return p;
-        return {
-          ...plugin,
-          enabled: true,
-        };
-      }),
-    });
-    this.getPluginConfig();
-  },
-
-  onDisablePlugin(plugin) {
-    this.setState({
-      pluginList: this.state.pluginList.map(p => {
-        if (p.id !== plugin.id) return p;
-        return {
-          ...plugin,
-          enabled: false,
-        };
-      }),
     });
   },
 
@@ -160,9 +116,9 @@ const ProjectReleaseTracking = createReactClass({
   },
 
   render() {
-    let {organization, project} = this.props;
-    let {pluginList} = this.state;
-    if (this.state.loading)
+    let {organization, project, plugins} = this.props;
+
+    if (this.state.loading || plugins.loading)
       return (
         <div className="box">
           <LoadingIndicator />
@@ -170,6 +126,10 @@ const ProjectReleaseTracking = createReactClass({
       );
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
+    let pluginList = plugins.plugins.filter(
+      p => p.type === 'release-tracking' && p.hasConfiguration
+    );
+
     return (
       <div>
         <h2>{t('Release Tracking')}</h2>
@@ -262,9 +222,8 @@ const ProjectReleaseTracking = createReactClass({
           organization={organization}
           project={project}
           pluginList={pluginList}
-          onEnablePlugin={this.onEnablePlugin}
-          onDisablePlugin={this.onDisablePlugin}
         />
+
         <div className="box">
           <div className="box-header">
             <h3>{t('API')}</h3>
@@ -290,4 +249,4 @@ const ProjectReleaseTracking = createReactClass({
   },
 });
 
-export default ProjectReleaseTracking;
+export default withPlugins(ProjectReleaseTracking);
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index c60493d2b4..724cf3fa0d 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -1,9 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-
 import createReactClass from 'create-react-class';
 
-import {fetchPlugins} from '../../actionCreators/plugins';
 import {t} from '../../locale';
 import ApiMixin from '../../mixins/apiMixin';
 import Badge from '../../components/badge';
@@ -36,15 +34,10 @@ const ProjectSettings = createReactClass({
   },
 
   componentWillMount() {
-    let {params, setProjectNavSection} = this.props;
-    let {projectId, orgId} = params || {};
+    let {setProjectNavSection} = this.props;
 
     setProjectNavSection('settings');
     this.fetchData();
-
-    // fetch list of plugins, we will also fetch everytime we are routed
-    // to plugins view (e.g. "All Integrations")
-    fetchPlugins(this.api, {projectId, orgId});
   },
 
   componentWillReceiveProps(nextProps) {
diff --git a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
index 15023c03da..6103fe4dfa 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
@@ -1,24 +1,24 @@
 import React from 'react';
+
 import createReactClass from 'create-react-class';
-import Reflux from 'reflux';
 import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 
-import PluginsStore from '../../stores/pluginsStore';
+import withPlugins from '../../utils/withPlugins';
+import SentryTypes from '../../proptypes';
 
 const PluginNavigation = createReactClass({
   displayName: 'PluginNavigation',
   propTypes: {
     urlRoot: PropTypes.string,
+    plugins: PropTypes.arrayOf(SentryTypes.PluginShape),
   },
-  mixins: [Reflux.connect(PluginsStore, 'store')],
 
   render() {
-    let {store} = this.state;
-    let {urlRoot} = this.props;
+    let {urlRoot, plugins} = this.props;
 
-    if (!store || !store.plugins) return null;
-    let enabledPlugins = store.plugins.filter(p => p.enabled && p.hasConfiguration);
+    if (!plugins || !plugins.plugins) return null;
+    let enabledPlugins = plugins.plugins.filter(p => p.enabled && p.hasConfiguration);
 
     if (!enabledPlugins.length) return null;
 
@@ -34,4 +34,4 @@ const PluginNavigation = createReactClass({
   },
 });
 
-export default PluginNavigation;
+export default withPlugins(PluginNavigation);
diff --git a/src/sentry/static/sentry/app/views/settings/components/navSection.styled.jsx b/src/sentry/static/sentry/app/views/settings/components/navSection.styled.jsx
new file mode 100644
index 0000000000..85c3b9b278
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/navSection.styled.jsx
@@ -0,0 +1,7 @@
+import styled from 'react-emotion';
+
+const NavSection = styled.div`
+  margin-bottom: 20px;
+`;
+
+export default NavSection;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsHeading.styled.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsHeading.styled.jsx
new file mode 100644
index 0000000000..739f47b565
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsHeading.styled.jsx
@@ -0,0 +1,11 @@
+import styled from 'react-emotion';
+
+const SettingsHeading = styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 12px;
+  font-weight: 600;
+  text-transform: uppercase;
+  margin-bottom: 20px;
+`;
+
+export default SettingsHeading;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
new file mode 100644
index 0000000000..b3b725bd28
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsPluginsNavigation.jsx
@@ -0,0 +1,75 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../../locale';
+import SentryTypes from '../../../proptypes';
+import SettingsNavItem from './settingsNavItem';
+import NavSection from './navSection.styled';
+import SettingsHeading from './settingsHeading.styled';
+import replaceRouterParams from '../../../utils/replaceRouterParams';
+import PluginNavigation from '../../projectSettings/pluginNavigation';
+
+/**
+ * Navigation menu for integrations.
+ *
+ * Is composed of:
+ *   - header
+ *   - "All Integrations"
+ *   - enabled plugins that have configurations
+ */
+class SettingsPluginsNavigation extends React.Component {
+  static propTypes = {
+    ...SentryTypes.NavigationGroup,
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+    access: PropTypes.object,
+    features: PropTypes.object,
+  };
+
+  static contextTypes = {
+    router: PropTypes.object,
+    location: PropTypes.object,
+  };
+
+  render() {
+    let {organization, project} = this.props;
+    let {router} = this.context;
+
+    const pathPrefix = '/settings/organization/:orgId/project/:projectId';
+    let allIntegrationsPath = replaceRouterParams(`${pathPrefix}/plugins/`, {
+      orgId: organization && organization.slug,
+      projectId: project && project.slug,
+    });
+
+    return (
+      <NavSection>
+        <SettingsHeading>{t('Integrations')}</SettingsHeading>
+
+        <SettingsNavItem
+          active={router.isActive(allIntegrationsPath)}
+          to={allIntegrationsPath}
+          label={t('All Integrations')}
+        />
+
+        <PluginNavigation>
+          {plugin => {
+            let to = replaceRouterParams(`${pathPrefix}/plugins/${plugin.slug}/`, {
+              orgId: organization && organization.slug,
+              projectId: project && project.slug,
+            });
+            return (
+              <SettingsNavItem
+                active={router.isActive(to)}
+                key={plugin.id}
+                to={to}
+                label={plugin.name}
+              />
+            );
+          }}
+        </PluginNavigation>
+      </NavSection>
+    );
+  }
+}
+
+export default SettingsPluginsNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
index 9d0dcbb74c..31bceec331 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
@@ -31,9 +31,18 @@ let StyledWarning = styled.div`
 // TODO(billy): Temp
 let NewSettingsWarning = ({location = {}}) => {
   // TODO(billy): Remove this warning when ready
-  let oldLocation = location.pathname
-    ? location.pathname.replace(/^\/settings\/organization\//, '/organizations/')
-    : '';
+  let projectRegex = /^\/settings\/organization\/([^\/]+)\/project\/([^\/]+)\//;
+  let isProject = projectRegex.test(location.pathname);
+  let oldLocation;
+
+  if (isProject) {
+    oldLocation = location.pathname.replace(projectRegex, '/$1/$2/settings/');
+  } else {
+    oldLocation = location.pathname.replace(
+      /^\/settings\/organization\//,
+      '/organizations/'
+    );
+  }
 
   //if (oldLocation === location.pathname) return null;
 
diff --git a/src/sentry/static/sentry/app/views/settings/settingsProjectProvider.jsx b/src/sentry/static/sentry/app/views/settings/settingsProjectProvider.jsx
new file mode 100644
index 0000000000..e94d423e1a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/settingsProjectProvider.jsx
@@ -0,0 +1,28 @@
+import React from 'react';
+import SentryTypes from '../../proptypes';
+
+/**
+ * Simple Component that takes project from context and passes it as props to children
+ *
+ * Don't do anything additional (e.g. loader) because not all children require project
+ *
+ * This is made because some components (e.g. ProjectPluginDetail) takes project as prop
+ */
+class SettingsProjectProvider extends React.Component {
+  static contextTypes = {
+    project: SentryTypes.Project,
+  };
+
+  render() {
+    let {children} = this.props;
+    let {project} = this.context;
+
+    return React.cloneElement(children, {
+      ...this.props,
+      ...children.props,
+      project,
+    });
+  }
+}
+
+export default SettingsProjectProvider;
diff --git a/tests/acceptance/test_project_alert_settings.py b/tests/acceptance/test_project_alert_settings.py
index 912f1f0277..f181d26008 100644
--- a/tests/acceptance/test_project_alert_settings.py
+++ b/tests/acceptance/test_project_alert_settings.py
@@ -53,6 +53,7 @@ class ProjectAlertSettingsTest(AcceptanceTestCase):
         self.browser.click('.ref-plugin-enable-webhooks')
         self.browser.wait_until('.ref-plugin-config-webhooks')
         self.browser.wait_until_not('.loading-indicator')
+        self.browser.wait_until_not('.indicators-container .toast')
         self.browser.snapshot('project alert settings webhooks enabled')
 
     def test_rules_load(self):
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 3b82428bbd..e6284bf1b0 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -230,7 +230,17 @@ window.TestStubs = {
   },
   Plugins: (...params) => {
     return [
-      TestStubs.Plugin(),
+      {
+        author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
+        enabled: false,
+        id: 'amazon-sqs',
+        name: 'Amazon SQS',
+        slug: 'amazon-sqs',
+        version: '8.23.0.dev0',
+        assets: [],
+        hasConfiguration: true,
+        canDisable: true,
+      },
       {
         author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
         enabled: true,
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 92509414ab..8259886748 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -108,7 +108,7 @@ exports[`ProjectAlertSettings render() renders 1`] = `
       orgId="org-slug"
       projectId="project-slug"
     />
-    <pluginList
+    <PluginList
       onDisablePlugin={[Function]}
       onEnablePlugin={[Function]}
       organization={
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index 2e1adc2431..32f46d3888 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -1,7 +1,13 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`ProjectPluginDetails renders 1`] = `
-<ProjectPlugins
+<withPlugins
+  location={
+    Object {
+      "pathame": "/mock-pathname/",
+      "query": Object {},
+    }
+  }
   organization={
     Object {
       "access": Array [
@@ -41,262 +47,318 @@ exports[`ProjectPluginDetails renders 1`] = `
     }
   }
 >
-  <DocumentTitle
-    title="Amazon SQS"
+  <ProjectPluginDetails
+    location={
+      Object {
+        "pathame": "/mock-pathname/",
+        "query": Object {},
+      }
+    }
+    organization={
+      Object {
+        "access": Array [
+          "org:read",
+          "org:write",
+          "org:admin",
+          "project:read",
+          "project:write",
+          "project:admin",
+          "team:read",
+          "team:write",
+          "team:admin",
+        ],
+        "features": Array [],
+        "id": "3",
+        "name": "Organization Name",
+        "onboardingTasks": Array [],
+        "slug": "org-slug",
+        "teams": Array [],
+      }
+    }
+    params={
+      Object {
+        "orgId": "org-slug",
+        "pluginId": "amazon-sqs",
+        "projectId": "project-slug",
+      }
+    }
+    plugins={
+      Object {
+        "error": null,
+        "loading": true,
+        "pageLinks": null,
+        "plugins": Array [],
+      }
+    }
+    project={
+      Object {
+        "digestsMaxDelay": 60,
+        "digestsMinDelay": 5,
+        "id": "2",
+        "name": "Project Name",
+        "slug": "project-slug",
+        "subjectTemplate": "[$project] \${tag:level}: $title",
+      }
+    }
   >
-    <div>
-      <div
-        className="pull-right"
-      >
-        <Button
-          disabled={false}
-          onClick={[Function]}
-          style={
-            Object {
-              "marginRight": "6px",
-            }
-          }
+    <DocumentTitle
+      title="Sentry"
+    >
+      <div>
+        <div
+          className="pull-right"
         >
-          <button
-            className="button button-default"
+          <Button
             disabled={false}
             onClick={[Function]}
-            role="button"
             style={
               Object {
                 "marginRight": "6px",
               }
             }
           >
-            <FlowLayout
-              truncate={false}
+            <button
+              className="button button-default"
+              disabled={false}
+              onClick={[Function]}
+              role="button"
+              style={
+                Object {
+                  "marginRight": "6px",
+                }
+              }
             >
-              <div
-                className="flow-layout"
+              <FlowLayout
+                truncate={false}
               >
-                <span
-                  className="button-label"
+                <div
+                  className="flow-layout"
                 >
-                  Enable Plugin
-                </span>
-              </div>
-            </FlowLayout>
-          </button>
-        </Button>
-        <Button
-          disabled={false}
-          onClick={[Function]}
-        >
-          <button
-            className="button button-default"
+                  <span
+                    className="button-label"
+                  >
+                    Enable Plugin
+                  </span>
+                </div>
+              </FlowLayout>
+            </button>
+          </Button>
+          <Button
             disabled={false}
             onClick={[Function]}
-            role="button"
           >
-            <FlowLayout
-              truncate={false}
+            <button
+              className="button button-default"
+              disabled={false}
+              onClick={[Function]}
+              role="button"
             >
-              <div
-                className="flow-layout"
+              <FlowLayout
+                truncate={false}
               >
-                <span
-                  className="button-label"
+                <div
+                  className="flow-layout"
                 >
-                  Reset Configuration
-                </span>
-              </div>
-            </FlowLayout>
-          </button>
-        </Button>
-      </div>
-      <h2>
-        Amazon SQS
-      </h2>
-      <hr />
-      <div
-        className="row"
-      >
+                  <span
+                    className="button-label"
+                  >
+                    Reset Configuration
+                  </span>
+                </div>
+              </FlowLayout>
+            </button>
+          </Button>
+        </div>
+        <h2>
+          Amazon SQS
+        </h2>
+        <hr />
         <div
-          className="col-md-7"
+          className="row"
         >
-          <PluginConfig
-            data={
-              Object {
-                "assets": Array [],
-                "author": Object {
-                  "name": "Sentry Team",
-                  "url": "https://github.com/getsentry/sentry",
-                },
-                "canDisable": true,
-                "enabled": false,
-                "hasConfiguration": true,
-                "id": "amazon-sqs",
-                "name": "Amazon SQS",
-                "slug": "amazon-sqs",
-                "version": "8.23.0.dev0",
+          <div
+            className="col-md-7"
+          >
+            <PluginConfig
+              data={
+                Object {
+                  "assets": Array [],
+                  "author": Object {
+                    "name": "Sentry Team",
+                    "url": "https://github.com/getsentry/sentry",
+                  },
+                  "canDisable": true,
+                  "enabled": false,
+                  "hasConfiguration": true,
+                  "id": "amazon-sqs",
+                  "name": "Amazon SQS",
+                  "slug": "amazon-sqs",
+                  "version": "8.23.0.dev0",
+                }
               }
-            }
-            onDisablePlugin={[Function]}
-            organization={
-              Object {
-                "access": Array [
-                  "org:read",
-                  "org:write",
-                  "org:admin",
-                  "project:read",
-                  "project:write",
-                  "project:admin",
-                  "team:read",
-                  "team:write",
-                  "team:admin",
-                ],
-                "features": Array [],
-                "id": "3",
-                "name": "Organization Name",
-                "onboardingTasks": Array [],
-                "slug": "org-slug",
-                "teams": Array [],
+              enabled={false}
+              onDisablePlugin={[Function]}
+              organization={
+                Object {
+                  "access": Array [
+                    "org:read",
+                    "org:write",
+                    "org:admin",
+                    "project:read",
+                    "project:write",
+                    "project:admin",
+                    "team:read",
+                    "team:write",
+                    "team:admin",
+                  ],
+                  "features": Array [],
+                  "id": "3",
+                  "name": "Organization Name",
+                  "onboardingTasks": Array [],
+                  "slug": "org-slug",
+                  "teams": Array [],
+                }
               }
-            }
-            project={
-              Object {
-                "digestsMaxDelay": 60,
-                "digestsMinDelay": 5,
-                "id": "2",
-                "name": "Project Name",
-                "slug": "project-slug",
-                "subjectTemplate": "[$project] \${tag:level}: $title",
+              project={
+                Object {
+                  "digestsMaxDelay": 60,
+                  "digestsMinDelay": 5,
+                  "id": "2",
+                  "name": "Project Name",
+                  "slug": "project-slug",
+                  "subjectTemplate": "[$project] \${tag:level}: $title",
+                }
               }
-            }
-          >
-            <div
-              className="box ref-plugin-config-amazon-sqs"
             >
               <div
-                className="box-header"
-              >
-                <h3>
-                  Amazon SQS
-                </h3>
-              </div>
-              <div
-                className="box-content with-padding"
+                className="box ref-plugin-config-amazon-sqs"
               >
                 <div
-                  dangerouslySetInnerHTML={
-                    Object {
-                      "__html": undefined,
+                  className="box-header"
+                >
+                  <h3>
+                    Amazon SQS
+                  </h3>
+                </div>
+                <div
+                  className="box-content with-padding"
+                >
+                  <div
+                    dangerouslySetInnerHTML={
+                      Object {
+                        "__html": undefined,
+                      }
                     }
-                  }
-                />
-                <PluginSettings
-                  organization={
-                    Object {
-                      "access": Array [
-                        "org:read",
-                        "org:write",
-                        "org:admin",
-                        "project:read",
-                        "project:write",
-                        "project:admin",
-                        "team:read",
-                        "team:write",
-                        "team:admin",
-                      ],
-                      "features": Array [],
-                      "id": "3",
-                      "name": "Organization Name",
-                      "onboardingTasks": Array [],
-                      "slug": "org-slug",
-                      "teams": Array [],
+                  />
+                  <PluginSettings
+                    organization={
+                      Object {
+                        "access": Array [
+                          "org:read",
+                          "org:write",
+                          "org:admin",
+                          "project:read",
+                          "project:write",
+                          "project:admin",
+                          "team:read",
+                          "team:write",
+                          "team:admin",
+                        ],
+                        "features": Array [],
+                        "id": "3",
+                        "name": "Organization Name",
+                        "onboardingTasks": Array [],
+                        "slug": "org-slug",
+                        "teams": Array [],
+                      }
                     }
-                  }
-                  plugin={
-                    DefaultPlugin {
-                      "assets": Array [],
-                      "author": Object {
-                        "name": "Sentry Team",
-                        "url": "https://github.com/getsentry/sentry",
-                      },
-                      "canDisable": true,
-                      "enabled": false,
-                      "hasConfiguration": true,
-                      "id": "amazon-sqs",
-                      "name": "Amazon SQS",
-                      "slug": "amazon-sqs",
-                      "version": "8.23.0.dev0",
+                    plugin={
+                      DefaultPlugin {
+                        "assets": Array [],
+                        "author": Object {
+                          "name": "Sentry Team",
+                          "url": "https://github.com/getsentry/sentry",
+                        },
+                        "canDisable": true,
+                        "enabled": false,
+                        "hasConfiguration": true,
+                        "id": "amazon-sqs",
+                        "name": "Amazon SQS",
+                        "slug": "amazon-sqs",
+                        "version": "8.23.0.dev0",
+                      }
                     }
-                  }
-                  project={
-                    Object {
-                      "digestsMaxDelay": 60,
-                      "digestsMinDelay": 5,
-                      "id": "2",
-                      "name": "Project Name",
-                      "slug": "project-slug",
-                      "subjectTemplate": "[$project] \${tag:level}: $title",
+                    project={
+                      Object {
+                        "digestsMaxDelay": 60,
+                        "digestsMinDelay": 5,
+                        "id": "2",
+                        "name": "Project Name",
+                        "slug": "project-slug",
+                        "subjectTemplate": "[$project] \${tag:level}: $title",
+                      }
                     }
-                  }
-                />
+                  />
+                </div>
               </div>
-            </div>
-          </PluginConfig>
-        </div>
-        <div
-          className="col-md-4 col-md-offset-1"
-        >
+            </PluginConfig>
+          </div>
           <div
-            className="plugin-meta"
+            className="col-md-4 col-md-offset-1"
           >
-            <h4>
-              Plugin Information
-            </h4>
-            <dl
-              className="flat"
+            <div
+              className="pluginDetails-meta"
             >
-              <dt>
-                Name
-              </dt>
-              <dd>
-                Amazon SQS
-              </dd>
-              <dt>
-                Author
-              </dt>
-              <dd>
-                Sentry Team
-              </dd>
-              <div>
+              <h4>
+                Plugin Information
+              </h4>
+              <dl
+                className="flat"
+              >
                 <dt>
-                  URL
+                  Name
                 </dt>
                 <dd>
-                  <ExternalLink
-                    href="https://github.com/getsentry/sentry"
-                    rel="noreferrer noopener"
-                    target="_blank"
-                  >
-                    <a
+                  Amazon SQS
+                </dd>
+                <dt>
+                  Author
+                </dt>
+                <dd>
+                  Sentry Team
+                </dd>
+                <div>
+                  <dt>
+                    URL
+                  </dt>
+                  <dd>
+                    <ExternalLink
                       href="https://github.com/getsentry/sentry"
                       rel="noreferrer noopener"
                       target="_blank"
                     >
-                      github.com/getsentry/sentry
-                    </a>
-                  </ExternalLink>
+                      <a
+                        href="https://github.com/getsentry/sentry"
+                        rel="noreferrer noopener"
+                        target="_blank"
+                      >
+                        github.com/getsentry/sentry
+                      </a>
+                    </ExternalLink>
+                  </dd>
+                </div>
+                <dt>
+                  Version
+                </dt>
+                <dd>
+                  8.23.0.dev0
                 </dd>
-              </div>
-              <dt>
-                Version
-              </dt>
-              <dd>
-                8.23.0.dev0
-              </dd>
-            </dl>
+              </dl>
+            </div>
           </div>
         </div>
       </div>
-    </div>
-  </DocumentTitle>
-</ProjectPlugins>
+    </DocumentTitle>
+  </ProjectPluginDetails>
+</withPlugins>
 `;
diff --git a/tests/js/spec/views/projectPluginDetails.spec.jsx b/tests/js/spec/views/projectPluginDetails.spec.jsx
index c8bc0f6c7d..4d5f361b06 100644
--- a/tests/js/spec/views/projectPluginDetails.spec.jsx
+++ b/tests/js/spec/views/projectPluginDetails.spec.jsx
@@ -1,15 +1,32 @@
 import React from 'react';
+import PropTypes from 'prop-types';
+
 import {mount} from 'enzyme';
-import ProjectPluginDetails from 'app/views/projectPluginDetails';
+import ProjectPluginDetailsContainer, {
+  ProjectPluginDetails,
+} from 'app/views/projectPluginDetails';
+
+jest.mock('jquery');
 
 describe('ProjectPluginDetails', function() {
-  let org, project, component;
+  let component;
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let plugins = TestStubs.Plugins();
+  let plugin = TestStubs.Plugin();
+  let pluginId = plugin.id;
 
   beforeEach(function() {
-    org = TestStubs.Organization();
-    project = TestStubs.Project();
-    let plugin = TestStubs.Plugins()[0];
-    let pluginId = plugin.id;
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/`,
+      method: 'GET',
+      body: plugins,
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/${pluginId}/`,
+      method: 'DELETE',
+    });
 
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/plugins/${pluginId}/`,
@@ -27,34 +44,71 @@ describe('ProjectPluginDetails', function() {
     });
 
     component = mount(
-      <ProjectPluginDetails
+      <ProjectPluginDetailsContainer
         organization={org}
         project={project}
         params={{orgId: org.slug, projectId: project.slug, pluginId: 'amazon-sqs'}}
+        location={TestStubs.location()}
       />,
       {
         context: {
           router: TestStubs.router(),
+          team: TestStubs.Team(),
+        },
+
+        childContextTypes: {
+          router: PropTypes.object,
+          team: PropTypes.object,
         },
       }
     );
   });
+
   it('renders', function() {
     expect(component).toMatchSnapshot();
   });
 
-  it('enables/disables plugin', function() {
-    let btn = component.find('button').first();
-    expect(component.state().plugin.enabled).toBe(false);
-    expect(btn.text()).toBe('Enable Plugin');
+  it('resets plugin', function() {
+    // Test component instead of container so that we can access state
+    let wrapper = mount(
+      <ProjectPluginDetails
+        organization={org}
+        project={project}
+        plugins={TestStubs.Plugins()}
+        params={{orgId: org.slug, projectId: project.slug, pluginId: 'amazon-sqs'}}
+        location={TestStubs.location()}
+      />,
+      {
+        context: {
+          router: TestStubs.router(),
+          team: TestStubs.Team(),
+        },
+
+        childContextTypes: {
+          router: PropTypes.object,
+          team: PropTypes.object,
+        },
+      }
+    );
+
+    let btn = wrapper.find('button').at(1);
     btn.simulate('click');
-    expect(component.state().plugin.enabled).toBe(true);
-    expect(btn.text()).toBe('Disable Plugin');
+    expect(wrapper.state().pluginDetails.config[0].value).toBe('default');
   });
 
-  it('resets plugin', function() {
-    let btn = component.find('button').at(1);
+  it('enables/disables plugin', function(done) {
+    let btn = component.find('button').first();
+    expect(btn.text()).toBe('Enable Plugin');
+
     btn.simulate('click');
-    expect(component.state().plugin.config[0].value).toBe('default');
+
+    // Reason for setTimeout is because this is more of an integration test
+    // and it relies on stores + withPlugins HoC
+    //
+    // The component itself could be tidied up a bit too
+    setTimeout(() => {
+      expect(btn.text()).toBe('Disable Plugin');
+      done();
+    }, 250);
   });
 });
diff --git a/tests/js/spec/views/projectPlugins/index.spec.jsx b/tests/js/spec/views/projectPlugins/index.spec.jsx
index ddedf105ad..c8c0874a5e 100644
--- a/tests/js/spec/views/projectPlugins/index.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/index.spec.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import {mount} from 'enzyme';
+
 import ProjectPlugins from 'app/views/projectPlugins';
 import {fetchPlugins, enablePlugin, disablePlugin} from 'app/actionCreators/plugins';
 
@@ -31,6 +33,12 @@ describe('ProjectPluginsContainer', function() {
       {
         context: {
           router: TestStubs.router(),
+          team: TestStubs.Team(),
+        },
+
+        childContextTypes: {
+          router: PropTypes.object,
+          team: PropTypes.object,
         },
       }
     );
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
index 50e634ffbd..a0480383f2 100644
--- a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import {mount} from 'enzyme';
 import ProjectPlugins from 'app/views/projectPlugins';
 import PluginNavigation from 'app/views/projectSettings/pluginNavigation';
@@ -35,7 +36,7 @@ describe('PluginNavigation Integration', function() {
   });
 
   // Integration test with PluginNavigation
-  describe.only('with PluginNavigation', function() {
+  describe('with PluginNavigation', function() {
     beforeEach(async function() {
       let params = {orgId: org.slug, projectId: project.slug};
 
@@ -46,8 +47,13 @@ describe('PluginNavigation Integration', function() {
         </div>,
         {
           context: {
+            team: TestStubs.Team(),
             router: TestStubs.router(),
           },
+          childContextTypes: {
+            team: PropTypes.object,
+            router: PropTypes.object,
+          },
         }
       );
     });
@@ -61,38 +67,32 @@ describe('PluginNavigation Integration', function() {
      */
     it('has Amazon in <PluginNavigation /> after enabling', function(done) {
       let hasEnabled = false;
+      let originalDidUpdate =
+        ProjectPlugins.prototype.componentDidUpdate || function() {};
 
       // Yuck, not sure of a better way to test these
       ProjectPlugins.prototype.componentDidUpdate = function() {
-        try {
-          wrapper.update();
-          if (!hasEnabled && wrapper.find('Checkbox').length) {
-            hasEnabled = true;
-            // Enable first plugin, should be amazon
-            wrapper
-              .find('Checkbox')
-              .first()
-              .simulate('change');
+        wrapper.update();
+        if (!hasEnabled && wrapper.find('Checkbox').length) {
+          hasEnabled = true;
+          // Enable first plugin, should be amazon
+          wrapper
+            .find('Checkbox')
+            .first()
+            .simulate('change');
 
-            wrapper.update();
-          }
-        } catch (err) {
-          // eslint-disable-next-line no-console
-          console.error(err);
+          wrapper.update();
         }
+        originalDidUpdate();
       };
 
       PluginNavigation.prototype.componentDidUpdate = function() {
-        try {
-          wrapper.update();
-          if (wrapper.find('PluginNavigation a').length) {
-            expect(wrapper.find('PluginNavigation').find('a')).toHaveLength(1);
-            done();
-          }
-        } catch (err) {
-          // eslint-disable-next-line no-console
-          console.error(err);
+        wrapper.update();
+        if (wrapper.find('PluginNavigation a').length) {
+          expect(wrapper.find('PluginNavigation').find('a')).toHaveLength(1);
+          done();
         }
+        originalDidUpdate();
       };
     });
   });
