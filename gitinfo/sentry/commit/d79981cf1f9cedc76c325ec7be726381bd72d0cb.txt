commit d79981cf1f9cedc76c325ec7be726381bd72d0cb
Author: Chris Fuller <cfuller@sentry.io>
Date:   Tue Apr 28 17:55:01 2020 -0400

    feat(workflow): Confirm 404 on AlertRule PUT if snapshot (#18217)
    
    * Adding project and org level tests to ensure endpoint 404s on snapshot updates

diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
index d5dc735905..5c7c2072b7 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
@@ -86,6 +86,7 @@ class AlertRuleDetailsBase(object):
         self.method = "get"
         with self.feature("organizations:incidents"):
             resp = self.get_valid_response(self.organization.slug)
+            assert len(resp.data) >= 1
             serialized_alert_rule = resp.data[0]
         self.endpoint = original_endpoint
         self.method = original_method
@@ -378,6 +379,24 @@ class AlertRuleDetailsPutEndpointTest(AlertRuleDetailsBase, APITestCase):
             )
         serialized_alert_rule["triggers"][0]["thresholdType"] = 0  # Back to normal, valid.
 
+    def test_update_snapshot(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        alert_rule = self.alert_rule
+        # We need the IDs to force update instead of create, so we just get the rule using our own API. Like frontend would.
+        serialized_alert_rule = self.get_serialized_alert_rule()
+
+        # Archive the rule so that the endpoint 404's, without this, it should 200 and the test would fail:
+        alert_rule.status = AlertRuleStatus.SNAPSHOT.value
+        alert_rule.save()
+
+        with self.feature("organizations:incidents"):
+            self.get_valid_response(
+                self.organization.slug, alert_rule.id, status_code=404, **serialized_alert_rule
+            )
+
 
 class AlertRuleDetailsDeleteEndpointTest(AlertRuleDetailsBase, APITestCase):
     method = "delete"
@@ -387,6 +406,7 @@ class AlertRuleDetailsDeleteEndpointTest(AlertRuleDetailsBase, APITestCase):
             user=self.user, organization=self.organization, role="owner", teams=[self.team]
         )
         self.login_as(self.user)
+
         with self.feature("organizations:incidents"):
             self.get_valid_response(self.organization.slug, self.alert_rule.id, status_code=204)
 
diff --git a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
index 994f271299..5cbd502448 100644
--- a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
+++ b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
@@ -47,6 +47,20 @@ class AlertRuleDetailsBase(object):
             ],
         }
 
+    def get_serialized_alert_rule(self):
+        # Only call after calling self.alert_rule to create it.
+        original_endpoint = self.endpoint
+        original_method = self.method
+        self.endpoint = "sentry-api-0-organization-alert-rules"
+        self.method = "get"
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(self.organization.slug)
+            assert len(resp.data) >= 1
+            serialized_alert_rule = resp.data[0]
+        self.endpoint = original_endpoint
+        self.method = original_method
+        return serialized_alert_rule
+
     @fixture
     def organization(self):
         return self.create_organization()
@@ -154,6 +168,28 @@ class AlertRuleDetailsPutEndpointTest(AlertRuleDetailsBase, APITestCase):
         updated_sub = AlertRule.objects.get(id=self.alert_rule.id).query_subscriptions.first()
         assert updated_sub.subscription_id == existing_sub.subscription_id
 
+    def test_update_snapshot(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        alert_rule = self.alert_rule
+        # We need the IDs to force update instead of create, so we just get the rule using our own API. Like frontend would.
+        serialized_alert_rule = self.get_serialized_alert_rule()
+
+        # Archive the rule so that the endpoint 404s:
+        alert_rule.status = AlertRuleStatus.SNAPSHOT.value
+        alert_rule.save()
+
+        with self.feature("organizations:incidents"):
+            self.get_valid_response(
+                self.organization.slug,
+                self.project.slug,
+                alert_rule.id,
+                status_code=404,
+                **serialized_alert_rule
+            )
+
 
 class AlertRuleDetailsDeleteEndpointTest(AlertRuleDetailsBase, APITestCase):
     method = "delete"
