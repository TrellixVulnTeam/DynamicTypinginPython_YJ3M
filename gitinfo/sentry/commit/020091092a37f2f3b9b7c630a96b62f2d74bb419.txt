commit 020091092a37f2f3b9b7c630a96b62f2d74bb419
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Apr 22 12:59:19 2020 -0700

    feat(slack): make slack v2 fully functional (#18382)

diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 9a8900803f..506042a3cb 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -157,6 +157,9 @@ class SlackIntegrationProvider(IntegrationProvider):
             "icon": team_data["icon"]["image_132"],
             "domain_name": team_data["domain"] + ".slack.com",
         }
+        # only set installation type for bot apps
+        if not self.use_wst_app:
+            metadata["installation_type"] = "born_as_bot"
 
         return {
             "name": team_name,
diff --git a/src/sentry/integrations/slack/requests.py b/src/sentry/integrations/slack/requests.py
index 23a6deb36a..cff7dcc1bd 100644
--- a/src/sentry/integrations/slack/requests.py
+++ b/src/sentry/integrations/slack/requests.py
@@ -96,25 +96,35 @@ class SlackRequest(object):
             raise SlackRequestError(status=400)
 
     def _authorize(self):
-        # TODO(steve): update check when we add the v2 slack app
+        # check v1 then v2
         signing_secret = options.get("slack.signing-secret")
-        # use the signing_secret if it's available
+        verification_token = options.get("slack.verification-token")
+        # for v1, only check the verification_token if we don't have a signing_secret
         if signing_secret:
-            # Taken from: https://github.com/slackapi/python-slack-events-api/blob/master/slackeventsapi/server.py#L47
-            # Slack docs on this here: https://api.slack.com/authentication/verifying-requests-from-slack#about
-            signature = self.request.META["HTTP_X_SLACK_SIGNATURE"]
-            timestamp = self.request.META["HTTP_X_SLACK_REQUEST_TIMESTAMP"]
-
-            req = six.binary_type("v0:%s:%s" % (timestamp, self.request.body))
-            request_hash = (
-                "v0=" + hmac.new(six.binary_type(signing_secret), req, sha256).hexdigest()
-            )
-            if not hmac.compare_digest(six.binary_type(request_hash), six.binary_type(signature)):
-                self._error("slack.action.invalid-token-signing-secret")
-                raise SlackRequestError(status=401)
-        elif self.data.get("token") != options.get("slack.verification-token"):
-            self._error("slack.action.invalid-token")
-            raise SlackRequestError(status=401)
+            if self._check_signing_secret(signing_secret):
+                return
+        elif verification_token and self._check_verification_token(verification_token):
+            return
+        # for v2, only check signing secret
+        signing_secret = options.get("slack-v2.signing-secret")
+        if signing_secret and self._check_signing_secret(signing_secret):
+            return
+        # unfortunately, we can't know which auth was supposed to succeed
+        self._error("slack.action.auth")
+        raise SlackRequestError(status=401)
+
+    def _check_signing_secret(self, signing_secret):
+        # Taken from: https://github.com/slackapi/python-slack-events-api/blob/master/slackeventsapi/server.py#L47
+        # Slack docs on this here: https://api.slack.com/authentication/verifying-requests-from-slack#about
+        signature = self.request.META["HTTP_X_SLACK_SIGNATURE"]
+        timestamp = self.request.META["HTTP_X_SLACK_REQUEST_TIMESTAMP"]
+
+        req = six.binary_type("v0:%s:%s" % (timestamp, self.request.body))
+        request_hash = "v0=" + hmac.new(six.binary_type(signing_secret), req, sha256).hexdigest()
+        return hmac.compare_digest(six.binary_type(request_hash), six.binary_type(signature))
+
+    def _check_verification_token(self, verification_token):
+        return self.data.get("token") == verification_token
 
     def _validate_integration(self):
         try:
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 077235e4ac..28d4ca9bc8 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -126,7 +126,7 @@ register("slack.signing-secret", flags=FLAG_PRIORITIZE_DISK)
 # Slack V2 Integration
 register("slack-v2.client-id", flags=FLAG_PRIORITIZE_DISK)
 register("slack-v2.client-secret", flags=FLAG_PRIORITIZE_DISK)
-# TODO: add signing secret
+register("slack-v2.signing-secret", flags=FLAG_PRIORITIZE_DISK)
 
 # GitHub Integration
 register("github-app.id", default=0)
diff --git a/tests/sentry/integrations/slack/test_integration.py b/tests/sentry/integrations/slack/test_integration.py
index 27f3d0a492..a943c34cfc 100644
--- a/tests/sentry/integrations/slack/test_integration.py
+++ b/tests/sentry/integrations/slack/test_integration.py
@@ -114,6 +114,7 @@ class SlackIntegrationTest(IntegrationTestCase):
             "scopes": sorted(self.provider.bot_oauth_scopes),
             "icon": "http://example.com/ws_icon.jpg",
             "domain_name": "test-slack-workspace.slack.com",
+            "installation_type": "born_as_bot",
         }
         oi = OrganizationIntegration.objects.get(
             integration=integration, organization=self.organization
diff --git a/tests/sentry/integrations/slack/test_requests.py b/tests/sentry/integrations/slack/test_requests.py
index 024f8d9c89..e03e3d268a 100644
--- a/tests/sentry/integrations/slack/test_requests.py
+++ b/tests/sentry/integrations/slack/test_requests.py
@@ -167,6 +167,16 @@ class SlackEventRequestTest(TestCase):
             self.set_signature(options.get("slack.signing-secret"), self.request.body)
             self.slack_request.validate()
 
+    def test_signing_secret_v2(self):
+        with override_options({"slack-v2.signing-secret": "secret-v2"}):
+            self.request.data = {"challenge": "abc123", "type": "url_verification"}
+
+            # we get a url encoded body with Slack
+            self.request.body = urlencode(self.request.data)
+
+            self.set_signature(options.get("slack-v2.signing-secret"), self.request.body)
+            self.slack_request.validate()
+
     def test_signing_secret_bad(self):
         with override_options({"slack.signing-secret": "secret"}):
             # even though we provide the token, should still fail
