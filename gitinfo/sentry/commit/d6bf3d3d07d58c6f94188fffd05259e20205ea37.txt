commit d6bf3d3d07d58c6f94188fffd05259e20205ea37
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 10 21:49:57 2014 -0700

    Serializer refactor
    
    Cherry-picked from fdbbdeefaa13d0abb3e90704b77ea61b13366ef4

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index b38fd87a9e..ebff5c1951 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -14,12 +14,12 @@ from .authentication import KeyAuthentication
 from .paginator import Paginator
 
 
-LINK_HEADER = '<{uri}&cursor={cursor}>; rel="{name}"'
-
 ONE_MINUTE = 60
 ONE_HOUR = ONE_MINUTE * 60
 ONE_DAY = ONE_HOUR * 24
 
+LINK_HEADER = '<{uri}&cursor={cursor}>; rel="{name}"'
+
 
 class Endpoint(APIView):
     authentication_classes = (KeyAuthentication, SessionAuthentication)
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index ef239e0ea3..0ac3b45663 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.contrib.auth.models import AnonymousUser
 
 
-serializers = {}
+registry = {}
 
 
 def serialize(objects, user=None):
@@ -18,27 +18,27 @@ def serialize(objects, user=None):
     # elif isinstance(obj, dict):
     #     return dict((k, serialize(v, request=request)) for k, v in obj.iteritems())
     try:
-        t = serializers[type(objects[0])]
+        serializer = registry[type(objects[0])]
     except KeyError:
         return objects
 
-    t.attach_metadata(objects, user=user)
-    return [t(o, user=user) for o in objects]
+    attrs = serializer.get_attrs(item_list=objects, user=user)
+    return [serializer(o, attrs=attrs.get(o, {}), user=user) for o in objects]
 
 
 def register(type):
     def wrapped(cls):
-        serializers[type] = cls()
+        registry[type] = cls()
         return cls
     return wrapped
 
 
 class Serializer(object):
-    def __call__(self, obj, user):
-        return self.serialize(obj, user)
+    def __call__(self, *args, **kwargs):
+        return self.serialize(*args, **kwargs)
 
-    def attach_metadata(self, objects, user):
-        pass
+    def get_attrs(self, item_list, user):
+        return {}
 
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         return {}
diff --git a/src/sentry/api/serializers/models/access_group.py b/src/sentry/api/serializers/models/access_group.py
index 8de7eae69a..0a60f7fbfd 100644
--- a/src/sentry/api/serializers/models/access_group.py
+++ b/src/sentry/api/serializers/models/access_group.py
@@ -6,7 +6,7 @@ from sentry.models import AccessGroup
 
 @register(AccessGroup)
 class AccessGroupSerializer(Serializer):
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'name': obj.name,
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index aa128093fd..44d204c7f8 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -6,7 +6,7 @@ from sentry.models import Activity
 
 @register(Activity)
 class ActivitySerializer(Serializer):
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'user': serialize(obj.user),
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 7c64dff4df..34f633673a 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -6,7 +6,7 @@ from sentry.models import Event
 
 @register(Event)
 class EventSerializer(Serializer):
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'eventID': str(obj.event_id),
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 273e5a691f..39cdf2e534 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -1,75 +1,89 @@
 from __future__ import absolute_import
 
 from collections import defaultdict
+from datetime import timedelta
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 
 from sentry.api.serializers import Serializer, register
+from sentry.app import tsdb
 from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupTagKey, GroupSeen, ProjectOption
+    Group, GroupBookmark, GroupTagKey, GroupSeen
 )
-# from sentry.templatetags.sentry_plugins import get_tags
-# from sentry.templatetags.sentry_plugins import handle_before_events
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
 
 
 @register(Group)
 class GroupSerializer(Serializer):
-    def attach_metadata(self, objects, user):
-        attach_foreignkey(objects, Group.project, ['team'])
+    def get_attrs(self, item_list, user):
+        attach_foreignkey(item_list, Group.project, ['team'])
 
-        # if request and objects:
-        #     handle_before_events(request, objects)
-
-        if user.is_authenticated() and objects:
+        if user.is_authenticated() and item_list:
             bookmarks = set(GroupBookmark.objects.filter(
                 user=user,
-                group__in=objects,
+                group__in=item_list,
             ).values_list('group_id', flat=True))
             seen_groups = dict(GroupSeen.objects.filter(
                 user=user,
-                group__in=objects,
+                group__in=item_list,
             ).values_list('group_id', 'last_seen'))
         else:
             bookmarks = set()
             seen_groups = {}
 
-        project_list = set(o.project for o in objects)
-        tag_keys = set(['sentry:user'])
-        project_annotations = {}
-        for project in project_list:
-            enabled_annotations = ProjectOption.objects.get_value(
-                project, 'annotations', ['sentry:user'])
-            project_annotations[project] = enabled_annotations
-            tag_keys.update(enabled_annotations)
-
-        annotation_counts = defaultdict(dict)
-        annotation_results = GroupTagKey.objects.filter(
-            group__in=objects,
-            key__in=tag_keys,
+        tag_counts = defaultdict(dict)
+        tag_results = GroupTagKey.objects.filter(
+            group__in=item_list,
         ).values_list('key', 'group', 'values_seen')
-        for key, group_id, values_seen in annotation_results:
-            annotation_counts[key][group_id] = values_seen
+        for key, group_id, values_seen in tag_results:
+            tag_counts[key][group_id] = values_seen
+
+        # we need to compute stats at 1d (1h resolution), and 14d/30d (1 day res)
+        group_ids = [g.id for g in item_list]
+        now = timezone.now()
+        hourly_stats = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=group_ids,
+            end=now,
+            start=now - timedelta(days=1),
+            rollup=3600,
+        )
+        daily_stats = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=group_ids,
+            end=now,
+            start=now - timedelta(days=30),
+            rollup=3600 * 24,
+        )
 
-        for g in objects:
-            g.is_bookmarked = g.pk in bookmarks
-            active_date = g.active_at or g.last_seen
-            g.has_seen = seen_groups.get(g.id, active_date) > active_date
-            g.annotations = []
-            for key in sorted(tag_keys):
-                if key in project_annotations[project]:
-                    label = TAG_LABELS.get(key, key.replace('_', ' ')).lower() + 's'
-                    try:
-                        value = annotation_counts[key].get(g.id, 0)
-                    except KeyError:
-                        value = 0
-                    g.annotations.append({
-                        'label': label,
-                        'count': value,
-                    })
+        result = {}
+        for item in item_list:
+            active_date = item.active_at or item.last_seen
 
-    def serialize(self, obj, user):
+            tags = {}
+            for key in tag_counts.iterkeys():
+                label = TAG_LABELS.get(key, key.replace('_', ' ')).lower() + 's'
+                try:
+                    value = tag_counts[key].get(item.id, 0)
+                except KeyError:
+                    value = 0
+                tags[key] = {
+                    'label': label,
+                    'count': value,
+                }
+
+            result[item] = {
+                'is_bookmarked': item.id in bookmarks,
+                'has_seen': seen_groups.get(item.id, active_date) > active_date,
+                'tags': tags,
+                'hourly_stats': hourly_stats[item.id],
+                'daily_stats': hourly_stats[item.id],
+            }
+        return result
+
+    def serialize(self, obj, attrs, user):
         status = obj.get_status()
         if status == STATUS_RESOLVED:
             status_label = 'resolved'
@@ -105,15 +119,12 @@ class GroupSerializer(Serializer):
                 'name': obj.project.name,
                 'slug': obj.project.slug,
             },
+            'stats': {
+                '24h': attrs['hourly_stats'],
+                '30d': attrs['daily_stats'],
+            },
+            'isBookmarked': attrs['is_bookmarked'],
+            'hasSeen': attrs['has_seen'],
+            'tags': attrs['tags'],
         }
-        if hasattr(obj, 'is_bookmarked'):
-            d['isBookmarked'] = obj.is_bookmarked
-        if hasattr(obj, 'has_seen'):
-            d['hasSeen'] = obj.has_seen
-        if hasattr(obj, 'historical_data'):
-            d['historicalData'] = obj.historical_data
-        if hasattr(obj, 'annotations'):
-            d['annotations'] = obj.annotations
-        # if request:
-        #     d['tags'] = list(get_tags(obj, request))
         return d
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index d0348d0712..c705f3fcd0 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -6,7 +6,7 @@ from sentry.models import OrganizationMember
 
 @register(OrganizationMember)
 class OrganizationMemberSerializer(Serializer):
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'email': obj.email or obj.user.email,
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 06fb51ef10..68848a8229 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -1,18 +1,13 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
-from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, Team
-from sentry.utils.db import attach_foreignkey
+from sentry.models import OrganizationMemberType, Project, Team
 
 
 @register(Project)
 class ProjectSerializer(Serializer):
-    def attach_metadata(self, objects, user):
-        if not objects:
-            return
-
-        organization = objects[0].team.organization
+    def get_attrs(self, item_list, user):
+        organization = item_list[0].team.organization
 
         team_map = dict(
             (t.id, t) for t in Team.objects.get_for_user(
@@ -21,17 +16,22 @@ class ProjectSerializer(Serializer):
             )
         )
 
-        for project in objects:
+        result = {}
+        for project in item_list:
             try:
                 team = team_map[project.team_id]
-                project.access_type = team.access_type
-                project.team = team
             except KeyError:
-                project.access_type = None
+                access_type = None
+            else:
+                access_type = team.access_type
+
+            result[project] = {
+                'access_type': access_type,
+            }
 
-        attach_foreignkey(objects, Project.team)
+        return result
 
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'slug': obj.slug,
@@ -39,11 +39,8 @@ class ProjectSerializer(Serializer):
             'isPublic': obj.public,
             'dateCreated': obj.date_added,
             'permission': {
-                'edit': obj.access_type == MEMBER_OWNER or user.is_superuser,
+                'owner': attrs['access_type'] <= OrganizationMemberType.OWNER,
+                'admin': attrs['access_type'] <= OrganizationMemberType.ADMIN,
             },
         }
-        if obj.team:
-            d['permission']['admin'] = obj.team.owner_id == user.id or user.is_superuser
-        else:
-            d['permission']['admin'] = user.is_superuser
         return d
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 2f300c92b8..8e911eca9a 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -6,7 +6,7 @@ from sentry.models import Release
 
 @register(Release)
 class ReleaseSerializer(Serializer):
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'version': obj.version,
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index e92d9adf48..2d589b0519 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -1,38 +1,41 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
-from sentry.constants import MEMBER_OWNER
-from sentry.models import Team
+from sentry.models import OrganizationMemberType, Team
 
 
 @register(Team)
 class TeamSerializer(Serializer):
-    def attach_metadata(self, objects, user):
-        if not objects:
-            return
-
-        organization = objects[0].organization
+    def get_attrs(self, item_list, user):
+        organization = item_list[0].organization
         team_map = dict(
             (t.id, t) for t in Team.objects.get_for_user(
                 organization=organization,
                 user=user,
             )
         )
-        for team in objects:
+
+        result = {}
+        for team in item_list:
             try:
-                team.access_type = team_map[team.id].access_type
+                access_type = team_map[team.id].access_type
             except KeyError:
-                team.access_type = None
+                access_type = None
+
+            result[team] = {
+                'access_type': access_type,
+            }
+        return result
 
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'dateCreated': obj.date_added,
             'permission': {
-                'edit': obj.access_type == MEMBER_OWNER or user.is_superuser,
-                'admin': obj.owner_id == user.id or user.is_superuser,
+                'owner': attrs['access_type'] <= OrganizationMemberType.OWNER,
+                'admin': attrs['access_type'] <= OrganizationMemberType.ADMIN,
             }
         }
         return d
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index fff89d6298..6e7439050c 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -7,7 +7,7 @@ from sentry.utils.avatar import get_gravatar_url
 
 @register(User)
 class UserSerializer(Serializer):
-    def serialize(self, obj, user):
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'name': obj.get_full_name(),
