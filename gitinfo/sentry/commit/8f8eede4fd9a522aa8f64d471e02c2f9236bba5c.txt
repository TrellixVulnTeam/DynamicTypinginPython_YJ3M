commit 8f8eede4fd9a522aa8f64d471e02c2f9236bba5c
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 9 10:10:47 2015 -0400

    Kill djcelery

diff --git a/setup.py b/setup.py
index 6afeaa1a6f..008ac50f09 100755
--- a/setup.py
+++ b/setup.py
@@ -69,7 +69,6 @@ install_requires = [
     'cssutils>=0.9.9,<0.10.0',
     'Django>=1.6.0,<1.7',
     'django-bitfield>=1.7.0,<1.8.0',
-    'django-celery>=3.1.6,<3.2.0',
     'django-crispy-forms>=1.4.0,<1.5.0',
     'django-paging>=0.2.5,<0.3.0',
     'django-jsonfield>=0.9.13,<0.10.0',
diff --git a/src/sentry/management/commands/celery.py b/src/sentry/management/commands/celery.py
index 161ae77f0c..40bf8e5966 100644
--- a/src/sentry/management/commands/celery.py
+++ b/src/sentry/management/commands/celery.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import, unicode_literals
 
 from celery.bin import celery
-from djcelery.management.base import CeleryCommand
 
-from sentry.app import celery
+from sentry.celery import app
+from sentry.queue.command import CeleryCommand
 
-base = celery.CeleryCommand(app=celery)
+base = celery.CeleryCommand(app=app)
 
 
 # this is a reimplementation of the djcelery 'celery' command
diff --git a/src/sentry/management/commands/celerybeat.py b/src/sentry/management/commands/celerybeat.py
index 93a359072e..98cb525211 100644
--- a/src/sentry/management/commands/celerybeat.py
+++ b/src/sentry/management/commands/celerybeat.py
@@ -6,11 +6,11 @@ Start the celery clock service from the Django management command.
 from __future__ import absolute_import, unicode_literals
 
 from celery.bin import beat
-from djcelery.management.base import CeleryCommand
 
-from sentry.app import celery
+from sentry.celery import app
+from sentry.queue.command import CeleryCommand
 
-beat = beat.beat(app=celery)
+beat = beat.beat(app=app)
 
 
 # this is a reimplementation of the djcelery 'celerybeat' command
diff --git a/src/sentry/queue/command.py b/src/sentry/queue/command.py
new file mode 100644
index 0000000000..2e7ff7410c
--- /dev/null
+++ b/src/sentry/queue/command.py
@@ -0,0 +1,103 @@
+from __future__ import absolute_import
+
+import celery
+import os
+import sys
+
+from django.core.management.base import BaseCommand
+
+DB_SHARED_THREAD = """\
+DatabaseWrapper objects created in a thread can only \
+be used in that same thread.  The object with alias '%s' \
+was created in thread id %s and this is thread id %s.\
+"""
+
+
+def patch_thread_ident():
+    # monkey patch django.
+    # This patch make sure that we use real threads to get the ident which
+    # is going to happen if we are using gevent or eventlet.
+    # -- patch taken from gunicorn
+    if getattr(patch_thread_ident, 'called', False):
+        return
+    try:
+        from django.db.backends import BaseDatabaseWrapper, DatabaseError
+
+        if 'validate_thread_sharing' in BaseDatabaseWrapper.__dict__:
+            import thread
+            _get_ident = thread.get_ident
+
+            __old__init__ = BaseDatabaseWrapper.__init__
+
+            def _init(self, *args, **kwargs):
+                __old__init__(self, *args, **kwargs)
+                self._thread_ident = _get_ident()
+
+            def _validate_thread_sharing(self):
+                if (not self.allow_thread_sharing
+                        and self._thread_ident != _get_ident()):
+                    raise DatabaseError(
+                        DB_SHARED_THREAD % (
+                            self.alias, self._thread_ident, _get_ident()),
+                    )
+
+            BaseDatabaseWrapper.__init__ = _init
+            BaseDatabaseWrapper.validate_thread_sharing = \
+                _validate_thread_sharing
+
+        patch_thread_ident.called = True
+    except ImportError:
+        pass
+patch_thread_ident()
+
+
+class CeleryCommand(BaseCommand):
+    options = BaseCommand.option_list
+    skip_opts = ['--app', '--loader', '--config']
+    keep_base_opts = False
+
+    def get_version(self):
+        return 'celery %s' % (celery.__version__)
+
+    def execute(self, *args, **options):
+        broker = options.get('broker')
+        if broker:
+            self.set_broker(broker)
+        super(CeleryCommand, self).execute(*args, **options)
+
+    def set_broker(self, broker):
+        os.environ['CELERY_BROKER_URL'] = broker
+
+    def run_from_argv(self, argv):
+        self.handle_default_options(argv[2:])
+        return super(CeleryCommand, self).run_from_argv(argv)
+
+    def handle_default_options(self, argv):
+        acc = []
+        broker = None
+        for i, arg in enumerate(argv):
+            if '--settings=' in arg:
+                _, settings_module = arg.split('=')
+                os.environ['DJANGO_SETTINGS_MODULE'] = settings_module
+            elif '--pythonpath=' in arg:
+                _, pythonpath = arg.split('=')
+                sys.path.insert(0, pythonpath)
+            elif '--broker=' in arg:
+                _, broker = arg.split('=')
+            elif arg == '-b':
+                broker = argv[i + 1]
+            else:
+                acc.append(arg)
+        if broker:
+            self.set_broker(broker)
+        return argv if self.keep_base_opts else acc
+
+    def die(self, msg):
+        sys.stderr.write(msg)
+        sys.stderr.write('\n')
+        sys.exit()
+
+    @property
+    def option_list(self):
+        return [x for x in self.options
+                if x._long_opts[0] not in self.skip_opts]
