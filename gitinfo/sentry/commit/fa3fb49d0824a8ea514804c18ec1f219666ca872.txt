commit fa3fb49d0824a8ea514804c18ec1f219666ca872
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 2 20:04:38 2014 -0700

    Add event frequency condition

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 5159873841..f63e9defb6 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -189,6 +189,7 @@ SENTRY_RULES = (
     'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
     'sentry.rules.conditions.regression_event.RegressionEventCondition',
     'sentry.rules.conditions.tagged_event.TaggedEventCondition',
+    'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
 )
 
 # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html + PATCH
diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
new file mode 100644
index 0000000000..90c17a5af7
--- /dev/null
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -0,0 +1,78 @@
+"""
+sentry.rules.conditions.event_frequency
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from datetime import datetime, timedelta
+from django import forms
+from pytz import utc
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class Interval(object):
+    ONE_MINUTE = '1m'
+    ONE_HOUR = '1h'
+
+
+class EventFrequencyForm(forms.Form):
+    interval = forms.ChoiceField(choices=(
+        (Interval.ONE_MINUTE, 'one minute'),
+        (Interval.ONE_HOUR, 'one hour'),
+    ))
+    value = forms.IntegerField(widget=forms.TextInput(attrs={
+        'placeholder': '100',
+        'type': 'number'
+    }))
+
+
+class EventFrequencyCondition(EventCondition):
+    form_cls = EventFrequencyForm
+    label = 'An event is seen more than {value} times in {interval}'
+
+    def __init__(self, *args, **kwargs):
+        from sentry.app import tsdb
+
+        self.tsdb = kwargs.pop('tsdb', tsdb)
+
+        super(EventFrequencyCondition, self).__init__(*args, **kwargs)
+
+    def passes(self, event, is_regression, **kwargs):
+        interval = self.get_option('interval')
+        value = int(self.get_option('value'))
+
+        current_value = self.get_rate(event, interval)
+
+        return current_value > value
+
+    def clear_cache(self, event):
+        event._rate_cache = {}
+
+    def get_rate(self, event, interval):
+        if not hasattr(event, '_rate_cache'):
+            event._rate_cache = {}
+
+        result = event._rate_cache.get(interval)
+        if result is None:
+            end = datetime.utcnow().replace(tzinfo=utc)
+            if interval == Interval.ONE_MINUTE:
+                start = end - timedelta(minutes=1)
+            elif interval == Interval.ONE_HOUR:
+                start = end - timedelta(hours=1)
+            else:
+                raise ValueError(interval)
+
+            result = self.tsdb.get_sums(
+                model=self.tsdb.models.group,
+                keys=[event.group_id],
+                start=start,
+                end=end,
+            )[event.group_id]
+            event._rate_cache[interval] = result
+
+        return result
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index f2022067d4..c7bdce4d8e 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -223,6 +223,9 @@ class APITestCase(BaseTestCase, BaseAPITestCase):
 class RuleTestCase(TestCase):
     rule_cls = None
 
+    def get_event(self):
+        return self.event
+
     def get_rule(self, data=None):
         return self.rule_cls(
             project=self.project,
diff --git a/tests/sentry/rules/conditions/test_event_frequency.py b/tests/sentry/rules/conditions/test_event_frequency.py
new file mode 100644
index 0000000000..505471aa20
--- /dev/null
+++ b/tests/sentry/rules/conditions/test_event_frequency.py
@@ -0,0 +1,43 @@
+from sentry.app import tsdb
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.conditions.event_frequency import EventFrequencyCondition, Interval
+
+
+class EventFrequencyConditionTest(RuleTestCase):
+    rule_cls = EventFrequencyCondition
+
+    def test_one_minute(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'interval': Interval.ONE_MINUTE,
+            'value': '10',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        tsdb.incr(tsdb.models.group, event.group_id, count=11)
+
+        rule.clear_cache(event)
+
+        rule = self.get_rule({
+            'interval': Interval.ONE_MINUTE,
+            'value': '10',
+        })
+        self.assertPasses(rule, event)
+
+    def test_one_hour(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'interval': Interval.ONE_HOUR,
+            'value': '10',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        tsdb.incr(tsdb.models.group, event.group_id, count=11)
+
+        rule.clear_cache(event)
+
+        rule = self.get_rule({
+            'interval': Interval.ONE_HOUR,
+            'value': '10',
+        })
+        self.assertPasses(rule, event)
