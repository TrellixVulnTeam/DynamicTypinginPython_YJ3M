commit 1016fd1ba6a6abf37f011a3d8b22cad70ac609b5
Author: Jess MacQueen <jess@getsentry.com>
Date:   Wed Nov 15 17:26:29 2017 -0800

    fix(releases): Match short ids when commits are updated also

diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 5da0578f76..e92ae27236 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -45,10 +45,6 @@ def resolve_group_resolutions(instance, created, **kwargs):
 
 
 def resolved_in_commit(instance, created, **kwargs):
-    # TODO(dcramer): we probably should support an updated message
-    if not created:
-        return
-
     groups = instance.find_referenced_groups()
     for group in groups:
         try:
diff --git a/tests/sentry/receivers/test_releases.py b/tests/sentry/receivers/test_releases.py
index 9efc8996ad..b9087314c4 100644
--- a/tests/sentry/receivers/test_releases.py
+++ b/tests/sentry/receivers/test_releases.py
@@ -70,6 +70,61 @@ class ResolvedInCommitTest(TestCase):
             linked_type=GroupLink.LinkedType.commit,
             linked_id=commit.id).exists()
 
+    def test_updating_commit(self):
+        group = self.create_group()
+
+        repo = Repository.objects.create(
+            name='example',
+            organization_id=self.group.organization.id,
+        )
+
+        commit = Commit.objects.create(
+            key=sha1(uuid4().hex).hexdigest(),
+            repository_id=repo.id,
+            organization_id=group.organization.id,
+        )
+
+        assert not GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).exists()
+
+        commit.message = 'Foo Biz\n\nFixes {}'.format(group.qualified_short_id)
+        commit.save()
+
+        assert GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).exists()
+
+    def test_updating_commit_with_existing_grouplink(self):
+        group = self.create_group()
+
+        repo = Repository.objects.create(
+            name='example',
+            organization_id=self.group.organization.id,
+        )
+
+        commit = Commit.objects.create(
+            key=sha1(uuid4().hex).hexdigest(),
+            repository_id=repo.id,
+            organization_id=group.organization.id,
+            message='Foo Biz\n\nFixes {}'.format(group.qualified_short_id),
+        )
+
+        assert GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).exists()
+
+        commit.message = 'Foo Bar Biz\n\nFixes {}'.format(group.qualified_short_id)
+        commit.save()
+
+        assert GroupLink.objects.filter(
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.commit,
+            linked_id=commit.id).count() == 1
+
     def test_no_matching_group(self):
         repo = Repository.objects.create(
             name='example',
