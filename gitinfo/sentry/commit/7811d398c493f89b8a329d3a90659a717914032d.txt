commit 7811d398c493f89b8a329d3a90659a717914032d
Author: William Mak <william@wmak.io>
Date:   Thu May 7 18:17:48 2020 -0400

    feat(discover): Support release:latest in discover (#18568)
    
    * feat(discover): Supporting release:latest in queries
    
    - Adding latest to autocomplete
    - When the tag key is release, this adds `latest` tag a possible value

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index ed10317deb..f48f286800 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -278,10 +278,16 @@ class OrganizationEndpoint(Endpoint):
         if not projects:
             raise NoProjects
 
-        environments = [env.name for env in self.get_environments(request, organization)]
-        params = {"start": start, "end": end, "project_id": [p.id for p in projects]}
+        environments = self.get_environments(request, organization)
+        params = {
+            "start": start,
+            "end": end,
+            "project_id": [p.id for p in projects],
+            "organization_id": organization.id,
+        }
         if environments:
-            params["environment"] = environments
+            params["environment"] = [env.name for env in environments]
+            params["environment_objects"] = environments
 
         return params
 
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index a8fec188a7..ca069ce02d 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -126,8 +126,6 @@ class OrganizationEventsV2Endpoint(OrganizationEventsV2EndpointBase):
             except NoProjects:
                 return Response([])
 
-            params["organization_id"] = organization.id
-
             has_global_views = features.has(
                 "organizations:global-views", organization, actor=request.user
             )
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 3dde0825c3..1100574ea5 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -21,6 +21,7 @@ from sentry.search.utils import (
     parse_datetime_range,
     parse_datetime_string,
     parse_datetime_value,
+    parse_release,
     InvalidQuery,
 )
 from sentry.snuba.dataset import Dataset
@@ -180,6 +181,7 @@ PROJECT_ALIAS = "project"
 ISSUE_ALIAS = "issue"
 ISSUE_ID_ALIAS = "issue.id"
 USER_ALIAS = "user"
+RELEASE_ALIAS = "release"
 
 
 class InvalidSearchQuery(Exception):
@@ -808,16 +810,15 @@ def get_filter(query=None, params=None):
     for term in parsed_terms:
         if isinstance(term, SearchFilter):
             name = term.key.name
+            value = term.value.value
             if name in (PROJECT_ALIAS, PROJECT_NAME_ALIAS):
                 project = None
                 try:
-                    project = Project.objects.get(
-                        id__in=params.get("project_id", []), slug=term.value.value
-                    )
+                    project = Project.objects.get(id__in=params.get("project_id", []), slug=value)
                 except Exception:
                     raise InvalidSearchQuery(
                         u"Invalid query. Project {} does not exist or is not an actively selected project.".format(
-                            term.value.value
+                            value
                         )
                     )
 
@@ -829,19 +830,19 @@ def get_filter(query=None, params=None):
                         project_to_filter = project.id
 
                     kwargs["conditions"].append(converted_filter)
-            elif name == ISSUE_ID_ALIAS and term.value.value != "":
+            elif name == ISSUE_ID_ALIAS and value != "":
                 # A blank term value means that this is a has filter
-                kwargs["group_ids"].extend(to_list(term.value.value))
-            elif name == ISSUE_ALIAS and term.value.value != "":
+                kwargs["group_ids"].extend(to_list(value))
+            elif name == ISSUE_ALIAS and value != "":
                 if params and "organization_id" in params:
                     try:
                         group = Group.objects.by_qualified_short_id(
-                            params["organization_id"], term.value.value
+                            params["organization_id"], value
                         )
                         kwargs["group_ids"].extend(to_list(group.id))
                     except Exception:
                         raise InvalidSearchQuery(
-                            u"Invalid value '{}' for 'issue:' filter".format(term.value.value)
+                            u"Invalid value '{}' for 'issue:' filter".format(value)
                         )
             elif name == USER_ALIAS:
                 # If the key is user, do an OR across all the different possible user fields
@@ -849,10 +850,27 @@ def get_filter(query=None, params=None):
                     convert_search_filter_to_snuba_query(term, key=field)
                     for field in FIELD_ALIASES[USER_ALIAS]["fields"]
                 ]
-                if term.operator == "!=" and term.value.value != "":
+                if term.operator == "!=" and value != "":
                     kwargs["conditions"].extend(user_conditions)
                 else:
                     kwargs["conditions"].append(user_conditions)
+            elif name == RELEASE_ALIAS and params and value == "latest":
+                converted_filter = convert_search_filter_to_snuba_query(
+                    SearchFilter(
+                        term.key,
+                        term.operator,
+                        SearchValue(
+                            parse_release(
+                                value,
+                                params["project_id"],
+                                params.get("environment_objects"),
+                                params["organization_id"],
+                            )
+                        ),
+                    )
+                )
+                if converted_filter:
+                    kwargs["conditions"].append(converted_filter)
             elif name in FIELD_ALIASES and name != PROJECT_ALIAS:
                 if "column_alias" in FIELD_ALIASES[name]:
                     term = SearchFilter(
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index b314a5a31c..0a9001f542 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -224,10 +224,15 @@ def parse_user_value(value, user):
         return User(id=0)
 
 
-def get_latest_release(projects, environments):
-    release_qs = Release.objects.filter(
-        organization_id=projects[0].organization_id, projects__in=projects
-    )
+def get_latest_release(projects, environments, organization_id=None):
+    if organization_id is None:
+        project = projects[0]
+        if hasattr(project, "organization_id"):
+            organization_id = project.organization_id
+        else:
+            return ""
+
+    release_qs = Release.objects.filter(organization_id=organization_id, projects__in=projects)
 
     if environments is not None:
         release_qs = release_qs.filter(
@@ -244,10 +249,10 @@ def get_latest_release(projects, environments):
     )
 
 
-def parse_release(value, projects, environments):
+def parse_release(value, projects, environments, organization_id=None):
     if value == "latest":
         try:
-            return get_latest_release(projects, environments)
+            return get_latest_release(projects, environments, organization_id)
         except Release.DoesNotExist:
             # Should just get no results here, so return an empty release name.
             return ""
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
index eb17731e67..e50c485bb3 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.tsx
@@ -602,6 +602,9 @@ class SmartSearchBar extends React.Component<Props, State> {
         Sentry.captureException(err);
         return [];
       }
+      if (tag.key === 'release' && !values.includes('latest')) {
+        values.push('latest');
+      }
 
       const noValueQuery = values.length === 0 && query.length > 0 ? query : undefined;
       this.setState({noValueQuery});
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 75cb319cab..4fd1265cc4 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1015,6 +1015,7 @@ class GetSnubaQueryArgsTest(TestCase):
             "user.email:foo@example.com release:1.2.1 fruit:apple hello",
             {
                 "project_id": [1, 2, 3],
+                "organization_id": 1,
                 "start": datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
                 "end": datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc),
             },
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 47320c5425..3476ce0824 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -526,6 +526,12 @@ class GetLatestReleaseTest(TestCase):
         result = get_latest_release([self.project], [environment])
         assert result == new.version
 
+        assert get_latest_release([self.project.id], [environment]) == ""
+        assert (
+            get_latest_release([self.project.id], [environment], self.project.organization_id)
+            == new.version
+        )
+
         with pytest.raises(Release.DoesNotExist):
             # environment with no releases
             environment = self.create_environment()
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 02b4bff730..746a427196 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -250,6 +250,18 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         assert data[0]["message"] == self.event.message
         assert "event_id" not in data[0]
 
+    def test_latest_release_condition(self):
+        result = discover.query(
+            selected_columns=["id", "message"],
+            query="release:latest",
+            params={"project_id": [self.project.id], "organization_id": self.organization.id},
+        )
+        assert len(result["data"]) == 1
+        data = result["data"]
+        assert data[0]["id"] == self.event.event_id
+        assert data[0]["message"] == self.event.message
+        assert "event_id" not in data[0]
+
     def test_environment_condition(self):
         result = discover.query(
             selected_columns=["id", "message"],
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index 6970add3a2..9bdef9f33d 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -520,6 +520,21 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 200
 
+    def test_latest_release_query_filter(self):
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "end": iso_format(before_now()),
+                    "start": iso_format(before_now(hours=2)),
+                    "query": "release:latest",
+                    "interval": "30m",
+                    "yAxis": "count()",
+                },
+            )
+        assert response.status_code == 200
+
     def test_simple_multiple_yaxis(self):
         with self.feature("organizations:discover-basic"):
             response = self.client.get(
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 1dfd304613..75f7c45482 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -636,6 +636,41 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert response.status_code == 400
         assert "order by" in response.content
 
+    def test_latest_release_alias(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        event1 = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": self.two_min_ago, "release": "0.8"},
+            project_id=project.id,
+        )
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["issue.id", "release"], "query": "release:latest"},
+            )
+
+        assert response.status_code == 200, response.content
+        data = response.data["data"]
+        assert data[0]["issue.id"] == event1.group_id
+        assert data[0]["release"] == "0.8"
+
+        event2 = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": self.min_ago, "release": "0.9"},
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["issue.id", "release"], "query": "release:latest"},
+            )
+        assert response.status_code == 200, response.content
+        data = response.data["data"]
+        assert data[0]["issue.id"] == event2.group_id
+        assert data[0]["release"] == "0.9"
+
     def test_aliased_fields(self):
         self.login_as(user=self.user)
         project = self.create_project()
