commit e2cd34e69cdb6b763d15e05a80fe3f0ab2b7ba1a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Oct 1 15:56:57 2018 -0700

    ref(discover): Extract getQueryByType function (#9954)
    
    This will make it easier to add additional query types in the future

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index bdc02abb3c..1824afe085 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -1,7 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
-import {uniq} from 'lodash';
 
 import {addErrorMessage, clearIndicators} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
@@ -37,8 +36,8 @@ export default class OrganizationDiscover extends React.Component {
     queryBuilder: PropTypes.object,
   };
 
-  constructor(props) {
-    super(props);
+  constructor() {
+    super();
     this.state = {
       data: null,
       query: null,
@@ -118,18 +117,10 @@ export default class OrganizationDiscover extends React.Component {
 
     clearIndicators();
 
-    // If there are no aggregations, always ensure we fetch event ID and
-    // project ID so we can display the link to event
     const externalQuery = queryBuilder.getExternal();
-    const queryToFetch =
-      !externalQuery.aggregations.length && externalQuery.fields.length
-        ? {
-            ...externalQuery,
-            fields: uniq([...externalQuery.fields, 'event_id', 'project_id']),
-          }
-        : externalQuery;
-
-    queryBuilder.fetch(queryToFetch).then(
+    const baseQuery = queryBuilder.getQueryByType(externalQuery, 'baseQuery');
+
+    queryBuilder.fetch(baseQuery).then(
       data => {
         const query = queryBuilder.getInternal();
         const queryCopy = {...query};
@@ -147,14 +138,8 @@ export default class OrganizationDiscover extends React.Component {
     );
 
     // If there are aggregations, get data for chart
-    if (queryBuilder.getInternal().aggregations.length > 0) {
-      const chartQuery = {
-        ...queryBuilder.getExternal(),
-        groupby: ['time'],
-        rollup: 60 * 60 * 24,
-        orderby: 'time',
-        limit: 1000,
-      };
+    if (externalQuery.aggregations.length > 0) {
+      const chartQuery = queryBuilder.getQueryByType(externalQuery, 'byDayQuery');
 
       queryBuilder.fetch(chartQuery).then(
         chartData => {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index fd09d8abd4..e5569d7da6 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -1,6 +1,7 @@
 /*eslint no-use-before-define: ["error", { "functions": false }]*/
 
 import moment from 'moment-timezone';
+import {uniq} from 'lodash';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
@@ -43,6 +44,7 @@ export default function createQueryBuilder(initial = {}, organization) {
     getExternal,
     updateField,
     fetch,
+    getQueryByType,
     getColumns,
     load,
     reset,
@@ -193,6 +195,38 @@ export default function createQueryBuilder(initial = {}, organization) {
       });
   }
 
+  /**
+   * Get the actual query to be run for each visualization type
+   *
+   * @param {Object} originalQuery Original query input by user (external query representation)
+   * @param {String} Type to fetch - currently either byDay or base
+   * @returns {Object} Modified query to be run for that type
+   */
+  function getQueryByType(originalQuery, type) {
+    if (type === 'byDayQuery') {
+      return {
+        ...originalQuery,
+        groupby: ['time'],
+        rollup: 60 * 60 * 24,
+        orderby: 'time',
+        limit: 1000,
+      };
+    }
+
+    // If there are no aggregations, always ensure we fetch event ID and
+    // project ID so we can display the link to event
+    if (type === 'baseQuery') {
+      return !originalQuery.aggregations.length && originalQuery.fields.length
+        ? {
+            ...originalQuery,
+            fields: uniq([...originalQuery.fields, 'event_id', 'project_id']),
+          }
+        : originalQuery;
+    }
+
+    throw new Error('Invalid query type');
+  }
+
   /**
    * Returns all column objects, including tags
    *
