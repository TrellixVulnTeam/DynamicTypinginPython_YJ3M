commit 205bc082209ea6c8a452114177a2b4556298e703
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 11 20:39:48 2014 -0800

    New create team prototype

diff --git a/src/sentry/templates/sentry/create-team.html b/src/sentry/templates/sentry/create-team.html
index 69d0b88c3c..813ad71354 100644
--- a/src/sentry/templates/sentry/create-team.html
+++ b/src/sentry/templates/sentry/create-team.html
@@ -5,29 +5,47 @@
 
 {% block title %}{% trans "New Team" %} | {{ block.super }}{% endblock %}
 
-{% block inner %}
-  <div class="page-header">
-    <div class="pull-right">
-      <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
+{% block main %}
+  <section class="body">
+    <div class="page-header">
+      <div class="pull-right">
+        <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
+      </div>
+      <h2>{% trans "Create a New Team" %}</h2>
     </div>
-    <h2>{% trans "Create a New Team" %}</h2>
-  </div>
 
-  <p>{% blocktrans %}Teams in Sentry represent a collection of users and projects. They're the the primary component
-     of your organization allowing you to control access and scope of events.{% endblocktrans %}</p>
+    <br>
 
-  <br>
-
-  <form class="form-stacked" action="" method="post">
-    {% csrf_token %}
-    <fieldset>
+    <form class="form-stacked" action="" method="post">
+      {% csrf_token %}
       {{ form|as_crispy_errors }}
-      {% for field in form %}
-          {{ field|as_crispy_field }}
-      {% endfor %}
-    </fieldset>
-    <div class="actions">
-      <button type="submit" class="btn btn-primary">{% trans "Create Team" %}</button>
-    </div>
-  </form>
+
+      <fieldset>
+        <h3>Team</h3>
+
+        <div class="help-block">
+          A team generally represents a group of people within your organization. It might be something like <strong>"Platform"</strong> or <strong>"API"</strong>, or it could just be a specific product that may (or may not) have sub-projects. You'll be able to select which teams a member in your organization has access to so they also act as ACLs.
+        </div>
+
+        {{ team_form.name|as_crispy_field }}
+      </fieldset>
+
+      <fieldset>
+        <h3>Project</h3>
+
+        <div class="help-block">
+          Projects generally pair up well with repositories. In addition to thinking about each repository being a project, also consider your environments. You might have something like <strong>"Backend"</strong> or <strong>"Frontend (Staging)"</strong>.
+        </div>
+
+        {{ project_form.name|as_crispy_field }}
+
+        {{ project_form.platform|as_crispy_field }}
+
+      </fieldset>
+
+      <div class="actions">
+        <button type="submit" class="btn btn-primary">{% trans "Create Team" %}</button>
+      </div>
+    </form>
+  </section>
 {% endblock %}
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 14e1ccb23c..5c135486be 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -5,56 +5,70 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import OrganizationMemberType, Team
+from sentry.models import OrganizationMemberType, Project, Team
 from sentry.permissions import can_create_teams, Permissions
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.frontend.generic import missing_perm
 
+BLANK_CHOICE = [("", "")]
+
 
 class NewTeamForm(forms.ModelForm):
-    name = forms.CharField(label=_('Team Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('example.com')}))
+    name = forms.CharField(label=_('Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('e.g. Website')}))
 
     class Meta:
         fields = ('name',)
         model = Team
 
 
+class NewProjectForm(forms.ModelForm):
+    name = forms.CharField(label=_('Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('e.g. Backend')}))
+    platform = forms.ChoiceField(
+        choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
+        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}),
+        help_text='Your platform choices helps us setup some defaults for this project.',
+    )
+
+    class Meta:
+        fields = ('name', 'platform')
+        model = Project
+
+
 class CreateTeamView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
 
-    def get_form(self, request):
-        return NewTeamForm(request.POST or None)
-
-    def get(self, request, organization):
+    def handle(self, request, organization):
         if not can_create_teams(request.user, organization):
             return missing_perm(request, Permissions.ADD_TEAM)
 
-        form = self.get_form(request)
-
-        context = {
-            'form': form,
-        }
+        team_form = NewTeamForm(request.POST or None, prefix='team_')
+        project_form = NewProjectForm(request.POST or None, prefix='project_')
 
-        return self.respond('sentry/create-team.html', context)
+        all_forms = [team_form, project_form]
 
-    def post(self, request, organization):
-        if not can_create_teams(request.user, organization):
-            return missing_perm(request, Permissions.ADD_TEAM)
-
-        form = self.get_form(request)
-        if form.is_valid():
-            team = form.save(commit=False)
+        if all(f.is_valid() for f in all_forms):
+            team = team_form.save(commit=False)
             team.organization = organization
             team.owner = organization.owner
             team.save()
 
-            url = reverse('sentry-create-project', args=[organization.slug])
+            project = project_form.save(commit=False)
+            project.team = team
+            project.organization = organization
+            project.save()
+
+            if project.platform not in (None, 'other'):
+                url = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
+            else:
+                url = reverse('sentry-get-started', args=[organization.slug, project.slug])
 
-            return HttpResponseRedirect(url + '?team=' + team.slug)
+            return HttpResponseRedirect(url)
 
         context = {
-            'form': form,
+            'team_form': team_form,
+            'project_form': project_form,
         }
 
         return self.respond('sentry/create-team.html', context)
