commit 291d005e0c3a72e902af36691d7bd5ac6be868c8
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Oct 18 14:21:38 2018 -0700

    ref(discover): Refactor query fields to accept custom actions (#10175)
    
    We'll want to make the actions block of query fields  more customizable since we'll want
    to render different variants of this for the new saved search design.
    
    Since we won't have the edit vs read versions of the query component
    in future, simply rename QueryEdit to QueryFields

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 03ce9e82a6..036b030f4e 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -17,7 +17,7 @@ import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import Result from './result';
 import Intro from './intro';
 import EarlyAdopterMessage from './earlyAdopterMessage';
-import QueryEdit from './sidebar/queryEdit';
+import NewQuery from './sidebar/newQuery';
 import QueryRead from './sidebar/queryRead';
 import SavedQueryList from './sidebar/savedQueryList';
 
@@ -338,12 +338,12 @@ export default class OrganizationDiscover extends React.Component {
             />
           )}
           {shouldRenderEditMode && (
-            <QueryEdit
+            <NewQuery
               queryBuilder={queryBuilder}
               isFetchingQuery={isFetchingQuery}
               onUpdateField={this.updateField}
               onRunQuery={this.runQuery}
-              reset={this.reset}
+              onReset={this.reset}
             />
           )}
           {shouldRenderSavedList && <SavedQueryList organization={organization} />}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.jsx
new file mode 100644
index 0000000000..83ccf36766
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.jsx
@@ -0,0 +1,46 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Flex, Box} from 'grid-emotion';
+
+import Button from 'app/components/button';
+import {t} from 'app/locale';
+
+import QueryFields from './queryFields';
+import {ButtonSpinner} from '../styles';
+
+export default class NewQuery extends React.Component {
+  static propTypes = {
+    onRunQuery: PropTypes.func.isRequired,
+    onReset: PropTypes.func.isRequired,
+    isFetchingQuery: PropTypes.bool.isRequired,
+  };
+
+  render() {
+    const {onRunQuery, onReset, isFetchingQuery, ...props} = this.props;
+    return (
+      <QueryFields
+        {...props}
+        actions={
+          <Flex>
+            <Box mr={1}>
+              <Button
+                size="xsmall"
+                onClick={onRunQuery}
+                priority="primary"
+                busy={isFetchingQuery}
+              >
+                {t('Run Query')}
+                {isFetchingQuery && <ButtonSpinner />}
+              </Button>
+            </Box>
+            <Box>
+              <Button size="xsmall" onClick={onReset}>
+                {t('Reset')}
+              </Button>
+            </Box>
+          </Flex>
+        }
+      />
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
index 19df2e5c91..0325325109 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
@@ -1,24 +1,20 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import {Flex, Box} from 'grid-emotion';
 
 import {t} from 'app/locale';
-import Button from 'app/components/button';
 import NumberField from 'app/components/forms/numberField';
 import SelectControl from 'app/components/forms/selectControl';
 
 import Aggregations from '../aggregations';
 import Conditions from '../conditions';
 import {getOrderByOptions} from '../utils';
-import {Fieldset, PlaceholderText, SidebarLabel, ButtonSpinner} from '../styles';
+import {Fieldset, PlaceholderText, SidebarLabel} from '../styles';
 
-export default class QueryEdit extends React.Component {
+export default class QueryFields extends React.Component {
   static propTypes = {
     queryBuilder: PropTypes.object.isRequired,
-    isFetchingQuery: PropTypes.bool.isRequired,
     onUpdateField: PropTypes.func.isRequired,
-    onRunQuery: PropTypes.func.isRequired,
-    reset: PropTypes.func.isRequired,
+    actions: PropTypes.node.isRequired,
   };
 
   getSummarizePlaceholder = () => {
@@ -32,7 +28,7 @@ export default class QueryEdit extends React.Component {
   };
 
   render() {
-    const {queryBuilder, isFetchingQuery, onUpdateField, onRunQuery, reset} = this.props;
+    const {queryBuilder, onUpdateField, actions} = this.props;
 
     const currentQuery = queryBuilder.getInternal();
     const columns = queryBuilder.getColumns();
@@ -98,24 +94,7 @@ export default class QueryEdit extends React.Component {
             onChange={val => onUpdateField('limit', typeof val === 'number' ? val : null)}
           />
         </Fieldset>
-        <Fieldset>
-          <Flex>
-            <Button
-              size="xsmall"
-              onClick={onRunQuery}
-              priority="primary"
-              busy={isFetchingQuery}
-            >
-              {t('Run')}
-              {isFetchingQuery && <ButtonSpinner />}
-            </Button>
-            <Box ml={1}>
-              <Button size="xsmall" onClick={reset}>
-                {t('Reset')}
-              </Button>
-            </Box>
-          </Flex>
-        </Fieldset>
+        <Fieldset>{actions}</Fieldset>
       </React.Fragment>
     );
   }
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 103c52a8b4..3bef8716bc 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -73,13 +73,13 @@ describe('Discover', function() {
         />,
         TestStubs.routerContext([{organization}])
       );
-      expect(wrapper.find('QueryEdit')).toHaveLength(1);
+      expect(wrapper.find('QueryFields')).toHaveLength(1);
       expect(wrapper.find('QueryRead')).toHaveLength(0);
       wrapper.setProps({
         savedQuery: TestStubs.DiscoverSavedQuery(),
       });
       wrapper.update();
-      expect(wrapper.find('QueryEdit')).toHaveLength(0);
+      expect(wrapper.find('QueryFields')).toHaveLength(0);
       expect(wrapper.find('QueryRead')).toHaveLength(1);
     });
   });
@@ -271,13 +271,13 @@ describe('Discover', function() {
 
     it('toggles edit mode', function() {
       expect(wrapper.find('QueryRead')).toHaveLength(1);
-      expect(wrapper.find('QueryEdit')).toHaveLength(0);
+      expect(wrapper.find('QueryFields')).toHaveLength(0);
       wrapper
         .find('SavedQueryTitle')
         .find('a')
         .simulate('click');
       expect(wrapper.find('QueryRead')).toHaveLength(0);
-      expect(wrapper.find('QueryEdit')).toHaveLength(1);
+      expect(wrapper.find('QueryFields')).toHaveLength(1);
     });
 
     it('delete saved query', function() {
@@ -385,14 +385,14 @@ describe('Discover', function() {
     });
 
     it('toggles sidebar', function() {
-      expect(wrapper.find('QueryEdit')).toHaveLength(1);
+      expect(wrapper.find('QueryFields')).toHaveLength(1);
       expect(wrapper.find('SavedQueries')).toHaveLength(0);
       wrapper
         .find('SidebarTabs')
         .find('a')
         .at(1)
         .simulate('click');
-      expect(wrapper.find('QueryEdit')).toHaveLength(0);
+      expect(wrapper.find('QueryFields')).toHaveLength(0);
       expect(wrapper.find('SavedQueries')).toHaveLength(1);
     });
   });
