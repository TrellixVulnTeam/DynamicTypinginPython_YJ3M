commit 90569eb593bf46c151964c09bb74524357aea354
Author: Mark Story <mark@mark-story.com>
Date:   Thu Mar 14 16:28:47 2019 -0400

    fix(release) Fix project release API removing commit messages when not provided (#12391)
    
    When the project release API is used and existing commit references are
    used, if the API request does not contain the commit message & timestamp
    those properties would be replaced with incorrect data. Which should not
    happen.

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index d65190f853..0d7296e1af 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -417,18 +417,24 @@ class Release(Model):
                     else:
                         author = authors[author_email]
 
-                    commit_data = {
-                        'message': data.get('message'),
-                        'date_added': data.get('timestamp') or timezone.now(),
-                    }
-                    # If we didn't get an author don't overwrite an existing one.
+                    commit_data = {}
+                    defaults = {}
+
+                    # Update/set message and author if they are provided.
                     if author is not None:
                         commit_data['author'] = author
+                    if 'message' in data:
+                        commit_data['message'] = data['message']
+                    if 'timestamp' in data:
+                        commit_data['date_added'] = data['timestamp']
+                    else:
+                        defaults['date_added'] = timezone.now()
 
                     commit, created = Commit.objects.create_or_update(
                         organization_id=self.organization_id,
                         repository_id=repo.id,
                         key=data['id'],
+                        defaults=defaults,
                         values=commit_data)
                     if not created:
                         commit = Commit.objects.get(
diff --git a/tests/sentry/models/test_release.py b/tests/sentry/models/test_release.py
index f53dfd7f3f..3eabcfee95 100644
--- a/tests/sentry/models/test_release.py
+++ b/tests/sentry/models/test_release.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import pytest
 import six
 
+from django.utils import timezone
 from mock import patch
 
 from sentry.api.exceptions import InvalidRepository
@@ -253,29 +254,34 @@ class SetCommitsTestCase(TestCase):
             ]
         )
 
-        assert Commit.objects.filter(
+        author = CommitAuthor.objects.get(
+            name='foo bar baz',
+            email='foo@example.com',
+            organization_id=org.id,
+        )
+
+        commit_a = Commit.objects.get(
             repository_id=repo.id,
             organization_id=org.id,
             key='a' * 40,
-        ).exists()
-        assert Commit.objects.filter(
+        )
+        assert commit_a
+        assert commit_a.message == 'i fixed a bug'
+        assert commit_a.author_id == author.id
+
+        commit_c = Commit.objects.get(
             repository_id=repo.id,
             organization_id=org.id,
             key='c' * 40,
-        ).exists()
-
-        author = CommitAuthor.objects.get(
-            name='foo bar baz',
-            email='foo@example.com',
-            organization_id=org.id,
         )
+        assert commit_c
+        assert 'fixes' in commit_c.message
+        assert commit_c.author_id == author.id
 
         # test that backfilling fills in missing message and author
         commit = Commit.objects.get(id=commit.id)
         assert commit.message == 'i fixed another bug'
-        assert commit.author
-        assert commit.author.email == 'foo@example.com'
-        assert commit.author.name == 'foo bar baz'
+        assert commit.author_id == author.id
 
         assert ReleaseCommit.objects.filter(
             commit__key='a' * 40,
@@ -296,10 +302,7 @@ class SetCommitsTestCase(TestCase):
         assert GroupLink.objects.filter(
             group_id=group.id,
             linked_type=GroupLink.LinkedType.commit,
-            linked_id=Commit.objects.get(
-                key='c' * 40,
-                repository_id=repo.id,
-            ).id
+            linked_id=commit_c.id
         ).exists()
 
         assert GroupResolution.objects.filter(group=group, release=release).exists()
@@ -339,6 +342,8 @@ class SetCommitsTestCase(TestCase):
             organization_id=org.id,
             key='b' * 40,
             author=author,
+            date_added='2019-03-01 12:00:00',
+            message='fixed a thing'
         )
 
         release = Release.objects.create(version='abcdabc', organization=org)
@@ -358,16 +363,28 @@ class SetCommitsTestCase(TestCase):
             ]
         )
 
+        date_format = '%Y-%m-%d %H:%M:%S'
         assert Commit.objects.filter(
             repository_id=repo.id,
             organization_id=org.id,
             key='a' * 40,
         ).exists()
-        assert Commit.objects.filter(
+        commit_c = Commit.objects.get(
             repository_id=repo.id,
             organization_id=org.id,
             key='c' * 40,
-        ).exists()
+        )
+        assert commit_c.date_added.strftime(date_format) == timezone.now().strftime(date_format)
+        assert commit_c.message is None
+
+        # Using the id/repository payload should retain existing data.
+        commit_b = Commit.objects.get(
+            repository_id=repo.id,
+            organization_id=org.id,
+            key='b' * 40,
+        )
+        assert commit_b.message == 'fixed a thing'
+        assert commit_b.date_added.strftime(date_format) == '2019-03-01 12:00:00'
 
         latest_commit = Commit.objects.get(
             repository_id=repo.id,
