commit b638e5fb4e8c57e9f06389e66ad068881899406d
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri May 10 14:20:38 2019 -0700

    feat(incidents): Add seen by list to incident details (#13172)
    
    Ref: SEN-592

diff --git a/src/sentry/api/endpoints/organization_incident_details.py b/src/sentry/api/endpoints/organization_incident_details.py
index f9ae48fb55..f8f5d51331 100644
--- a/src/sentry/api/endpoints/organization_incident_details.py
+++ b/src/sentry/api/endpoints/organization_incident_details.py
@@ -7,6 +7,7 @@ from sentry.api.bases.incident import IncidentPermission
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.incident import DetailedIncidentSerializer
 from sentry.incidents.models import Incident
 
 
@@ -40,5 +41,6 @@ class OrganizationIncidentDetailsEndpoint(OrganizationEndpoint):
         ``````````````````
         :auth: required
         """
+        data = serialize(incident, request.user, DetailedIncidentSerializer())
 
-        return Response(serialize(incident, request.user))
+        return Response(data)
diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index ce8d2820f4..e8928191b3 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -7,6 +7,7 @@ import six
 from sentry.api.serializers import (
     Serializer,
     register,
+    serialize,
 )
 from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.incidents.logic import (
@@ -16,6 +17,7 @@ from sentry.incidents.logic import (
 from sentry.incidents.models import (
     Incident,
     IncidentProject,
+    IncidentSeen,
 )
 
 
@@ -56,3 +58,18 @@ class IncidentSerializer(Serializer):
             'totalEvents': aggregates['count'],
             'uniqueUsers': aggregates['unique_users'],
         }
+
+
+class DetailedIncidentSerializer(IncidentSerializer):
+    def _get_incident_seen_list(self, incident):
+        incident_seen = list(IncidentSeen.objects.filter(
+            incident=incident
+        ).select_related('user').order_by('-last_seen'))
+        return [serialize(seenby) for seenby in incident_seen]
+
+    def serialize(self, obj, attrs, user):
+        context = super(DetailedIncidentSerializer, self).serialize(obj, attrs, user)
+        context.update({
+            'seenBy': self._get_incident_seen_list(obj)
+        })
+        return context
diff --git a/src/sentry/api/serializers/models/incidentseen.py b/src/sentry/api/serializers/models/incidentseen.py
new file mode 100644
index 0000000000..02cb62c876
--- /dev/null
+++ b/src/sentry/api/serializers/models/incidentseen.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.incidents.models import IncidentSeen
+
+
+@register(IncidentSeen)
+class IncidentSeenSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        user_map = {d['id']: d for d in serialize(set(i.user for i in item_list), user)}
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'user': user_map[six.text_type(item.user_id)],
+            }
+        return result
+
+    def serialize(self, obj, attrs, user):
+        data = attrs['user']
+        data['lastSeen'] = obj.last_seen
+        return data
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 9bcf867f2d..da04473ac0 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -24,6 +24,7 @@ from sentry.incidents.models import (
     Incident,
     IncidentGroup,
     IncidentProject,
+    IncidentSeen,
 )
 from sentry.mediators import sentry_apps, sentry_app_installations, service_hooks
 from sentry.models import (
@@ -844,7 +845,7 @@ class Factories(object):
     def create_incident(
         organization, projects, detection_uuid=None, status=0,
         title=None, query='test query', date_started=None, date_detected=None,
-        date_closed=None, groups=None,
+        date_closed=None, groups=None, seen_by=None,
     ):
         if not title:
             title = petname.Generate(2, ' ', letters=10).title()
@@ -864,5 +865,7 @@ class Factories(object):
         if groups:
             for group in groups:
                 IncidentGroup.objects.create(incident=incident, group=group)
-
+        if seen_by:
+            for user in seen_by:
+                IncidentSeen.objects.create(incident=incident, user=user, last_seen=timezone.now())
         return incident
diff --git a/tests/sentry/api/endpoints/test_organization_incident_details.py b/tests/sentry/api/endpoints/test_organization_incident_details.py
index a54eedd1cc..a5689d4966 100644
--- a/tests/sentry/api/endpoints/test_organization_incident_details.py
+++ b/tests/sentry/api/endpoints/test_organization_incident_details.py
@@ -1,6 +1,10 @@
 from __future__ import absolute_import
 
 from exam import fixture
+import mock
+from django.utils import timezone
+import pytz
+from datetime import datetime
 
 from sentry.api.serializers import serialize
 from sentry.testutils import APITestCase
@@ -21,13 +25,31 @@ class IncidentDetailsTest(APITestCase):
     def user(self):
         return self.create_user()
 
-    def test_simple(self):
+    @mock.patch('django.utils.timezone.now')
+    def test_simple(self, mock_now):
+        mock_now.return_value = datetime.utcnow().replace(tzinfo=pytz.utc)
+
         self.create_team(organization=self.organization, members=[self.user])
-        incident = self.create_incident()
+        incident = self.create_incident(seen_by=[self.user])
         self.login_as(self.user)
         with self.feature('organizations:incidents'):
             resp = self.get_valid_response(incident.organization.slug, incident.id)
-        assert resp.data == serialize(incident)
+
+        expected = serialize(incident)
+
+        user_data = serialize(self.user)
+        user_data['lastSeen'] = timezone.now()
+        seen_by = [user_data]
+
+        assert resp.data['id'] == expected['id']
+        assert resp.data['identifier'] == expected['identifier']
+        assert resp.data['query'] == expected['query']
+        assert resp.data['projects'] == expected['projects']
+        assert resp.data['dateDetected'] == expected['dateDetected']
+        assert resp.data['dateAdded'] == expected['dateAdded']
+        assert resp.data['projects'] == expected['projects']
+        assert resp.data['eventStats'] == expected['eventStats']
+        assert resp.data['seenBy'] == seen_by
 
     def test_no_perms(self):
         incident = self.create_incident()
