commit f4a7ae679d0d684757dd20922db2001a51ec485c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Feb 1 11:32:19 2018 -0800

    feat(translation): Translate new settings and a few other things (#7109)

diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 5ff8904474..dbd387a1bb 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -87,7 +87,7 @@ class ProjectHeader extends React.Component {
           </div>
           {showEnvironmentsToggle && (
             <div className="project-header-toggle">
-              <label>Environment</label>
+              <label>{t('Environment')}</label>
               <DropdownLink
                 anchorRight={true}
                 title={activeEnvironmentTitle}
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 021a351e76..325c72a659 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -1,12 +1,14 @@
 import {extractMultilineFields} from '../../utils';
 
+import {t} from '../../locale';
+
 // Export route to make these forms searchable by label/help
 export const route = '/settings/organization/:orgId/settings/';
 
 const formGroups = [
   {
     // Form "section"/"panel"
-    title: 'General',
+    title: t('General'),
     fields: [
       {
         name: 'name',
@@ -14,21 +16,21 @@ const formGroups = [
         required: true,
 
         // additional data/props that is related to rendering of form field rather than data
-        label: 'Name',
-        help: 'The name of your organization. e.g. My Company',
+        label: t('Name'),
+        help: t('The name of your organization. e.g. My Company'),
       },
       {
         name: 'slug',
         type: 'string',
         required: true,
-        label: 'Short Name',
-        help: 'A unique ID used to identify this organization.',
+        label: t('Short Name'),
+        help: t('A unique ID used to identify this organization.'),
       },
       {
         name: 'isEarlyAdopter',
         type: 'boolean',
-        label: 'Early Adopter',
-        help: "Opt-in to new features before they're released to the public.",
+        label: t('Early Adopter'),
+        help: t("Opt-in to new features before they're released to the public."),
       },
     ],
   },
@@ -40,68 +42,72 @@ const formGroups = [
         name: 'defaultRole',
         type: 'array',
         required: true,
-        label: 'Default Role',
+        label: t('Default Role'),
         // seems weird to have choices in initial form data
         choices: ({initialData} = {}) =>
           (initialData.availableRoles &&
             initialData.availableRoles.map(r => [r.id, r.name])) ||
           [],
-        help: 'The default role new members will receive.',
+        help: t('The default role new members will receive.'),
         disabled: ({access}) => !access.has('org:admin'),
       },
       {
         name: 'openMembership',
         type: 'boolean',
         required: true,
-        label: 'Open Membership',
-        help: 'Allow organization members to freely join or leave any team.',
+        label: t('Open Membership'),
+        help: t('Allow organization members to freely join or leave any team.'),
       },
     ],
   },
 
   {
-    title: 'Security & Privacy',
+    title: t('Security & Privacy'),
     fields: [
       {
         name: 'allowSharedIssues',
         type: 'boolean',
 
-        label: 'Allow Shared Issues',
-        help: 'Enable sharing of limited details on issues to anonymous users.',
+        label: t('Allow Shared Issues'),
+        help: t('Enable sharing of limited details on issues to anonymous users.'),
       },
       {
         name: 'enhancedPrivacy',
         type: 'boolean',
 
-        label: 'Enhanced Privacy',
-        help:
-          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.',
+        label: t('Enhanced Privacy'),
+        help: t(
+          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'
+        ),
       },
       {
         name: 'dataScrubber',
         type: 'boolean',
-        label: 'Require Data Scrubber',
-        help: 'Require server-side data scrubbing be enabled for all projects.',
+        label: t('Require Data Scrubber'),
+        help: t('Require server-side data scrubbing be enabled for all projects.'),
       },
       {
         name: 'dataScrubberDefaults',
         type: 'boolean',
 
         required: true,
-        label: 'Require Using Default Scrubbers',
-        help:
-          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.',
+        label: t('Require Using Default Scrubbers'),
+        help: t(
+          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.'
+        ),
       },
       {
         name: 'sensitiveFields',
         type: 'string',
         multiline: true,
         placeholder: 'e.g. email',
-        label: 'Global sensitive fields',
-        help:
-          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.',
-        extraHelp:
-          'Note: These fields will be used in addition to project specific fields.',
+        label: t('Global sensitive fields'),
+        help: t(
+          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
+        ),
+        extraHelp: t(
+          'Note: These fields will be used in addition to project specific fields.'
+        ),
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
       },
@@ -109,20 +115,24 @@ const formGroups = [
         name: 'safeFields',
         type: 'string',
         multiline: true,
-        placeholder: 'e.g. business-email',
-        label: 'Global safe fields',
-        help:
-          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.',
-        extraHelp:
-          'Note: These fields will be used in addition to project specific fields.',
+        placeholder: t('e.g. business-email'),
+        label: t('Global safe fields'),
+        help: t(
+          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
+        ),
+        extraHelp: t(
+          'Note: These fields will be used in addition to project specific fields.'
+        ),
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
       },
       {
         name: 'scrubIPAddresses',
         type: 'boolean',
-        label: 'Prevent Storing of IP Addresses',
-        help: 'Preventing IP addresses from being stored for new events on all projects.',
+        label: t('Prevent Storing of IP Addresses'),
+        help: t(
+          'Preventing IP addresses from being stored for new events on all projects.'
+        ),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 72869ad39a..ac7c703301 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -1,4 +1,5 @@
 import {extractMultilineFields} from '../../utils';
+import {t} from '../../locale';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/organization/:orgId/project/:projectId/settings/';
@@ -6,7 +7,7 @@ export const route = '/settings/organization/:orgId/project/:projectId/settings/
 const formGroups = [
   {
     // Form "section"/"panel"
-    title: 'Project Details',
+    title: t('Project Details'),
     fields: [
       {
         name: 'name',
@@ -14,50 +15,50 @@ const formGroups = [
         required: true,
 
         // additional data/props that is related to rendering of form field rather than data
-        label: 'Project Name',
-        placeholder: 'My Service Name',
-        help: 'The name of your project',
+        label: t('Project Name'),
+        placeholder: t('My Service Name'),
+        help: t('The name of your project'),
       },
       {
         name: 'slug',
         type: 'string',
         required: true,
-        label: 'Short Name',
-        placeholder: 'my-service-name',
-        help: 'A unique ID used to identify this project',
+        label: t('Short Name'),
+        placeholder: t('my-service-name'),
+        help: t('A unique ID used to identify this project'),
       },
       {
         name: 'team',
         type: 'array',
-        label: 'Team',
+        label: t('Team'),
         choices: ({organization}) =>
           organization.teams.filter(o => o.isMember).map(o => [o.id, o.slug]),
-        help: "Opt-in to new features before they're released to the public.",
+        help: t("Opt-in to new features before they're released to the public."),
       },
     ],
   },
 
   {
-    title: 'Email',
+    title: t('Email'),
     fields: [
       {
         name: 'subjectPrefix',
         type: 'string',
-        label: 'Subject Prefix',
-        help: 'Choose a custom prefix for emails from this project',
+        label: t('Subject Prefix'),
+        help: t('Choose a custom prefix for emails from this project'),
       },
     ],
   },
 
   {
-    title: 'Event Settings',
+    title: t('Event Settings'),
     fields: [
       {
         name: 'defaultEnvironment',
         type: 'string',
-        label: 'Default Environment',
-        placeholder: 'production',
-        help: 'The default selected environment when viewing issues',
+        label: t('Default Environment'),
+        placeholder: t('production'),
+        help: t('The default selected environment when viewing issues'),
       },
       {
         name: 'resolveAge',
@@ -66,38 +67,41 @@ const formGroups = [
         min: 0,
         max: 168,
         step: 1,
-        label: 'Auto Resolve',
-        help:
-          "Automatically resolve an issue if it hasn't been seen for this amount of time",
+        label: t('Auto Resolve'),
+        help: t(
+          "Automatically resolve an issue if it hasn't been seen for this amount of time"
+        ),
       },
     ],
   },
 
   {
-    title: 'Data Privacy',
+    title: t('Data Privacy'),
     fields: [
       {
         name: 'dataScrubber',
         type: 'boolean',
-        label: 'Data Scrubber',
-        help: 'Enable server-side data scrubbing',
+        label: t('Data Scrubber'),
+        help: t('Enable server-side data scrubbing'),
       },
       {
         name: 'dataScrubberDefaults',
         type: 'boolean',
 
-        label: 'Use Default Scrubbers',
-        help:
-          'Apply default scrubbers to prevent things like passwords and credit cards from being stored',
+        label: t('Use Default Scrubbers'),
+        help: t(
+          'Apply default scrubbers to prevent things like passwords and credit cards from being stored'
+        ),
       },
       {
         name: 'sensitiveFields',
         type: 'string',
         multiline: true,
-        placeholder: 'email',
-        label: 'Additional Sensitive Fields',
-        help:
-          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline',
+        placeholder: t('email'),
+        label: t('Additional Sensitive Fields'),
+        help: t(
+          'Additional field names to match against when scrubbing data. Separate multiple entries with a newline'
+        ),
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
       },
@@ -105,61 +109,66 @@ const formGroups = [
         name: 'safeFields',
         type: 'string',
         multiline: true,
-        placeholder: 'business-email',
-        label: 'Safe Fields',
-        help:
-          'Field names which data scrubbers should ignore. Separate multiple entries with a newline',
+        placeholder: t('business-email'),
+        label: t('Safe Fields'),
+        help: t(
+          'Field names which data scrubbers should ignore. Separate multiple entries with a newline'
+        ),
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
       },
       {
         name: 'scrubIPAddresses',
         type: 'boolean',
-        label: "Don't Store IP Addresses",
-        help: 'Preventing IP addresses from being stored for new events',
+        label: t("Don't Store IP Addresses"),
+        help: t('Preventing IP addresses from being stored for new events'),
       },
     ],
   },
 
   {
-    title: 'Client Security',
+    title: t('Client Security'),
     fields: [
       {
         name: 'allowedDomains',
         type: 'string',
         multiline: true,
-        placeholder: 'https://example.com or example.com',
-        label: 'Allowed Domains',
-        help: 'Separate multiple entries with a newline',
+        placeholder: t('https://example.com or example.com'),
+        label: t('Allowed Domains'),
+        help: t('Separate multiple entries with a newline'),
         getValue: val => extractMultilineFields(val),
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
       },
       {
         name: 'scrapeJavaScript',
         type: 'boolean',
-        label: 'Enable JavaScript source fetching',
-        help: 'Allow Sentry to scrape missing JavaScript source context when possible',
+        label: t('Enable JavaScript source fetching'),
+        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
       },
       {
         name: 'securityToken',
         type: 'string',
-        label: 'Security Token',
-        help:
-          'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended',
+        label: t('Security Token'),
+        help: t(
+          'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended'
+        ),
       },
       {
         name: 'securityTokenHeader',
         type: 'string',
-        placeholder: 'X-Sentry-Token',
-        label: 'Security Token Header',
-        help:
-          'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.',
+        placeholder: t('X-Sentry-Token'),
+        label: t('Security Token Header'),
+        help: t(
+          'Outbound requests matching Allowed Domains will have the header "{token_header}: {token}" appended.'
+        ),
       },
       {
         name: 'verifySSL',
         type: 'boolean',
-        label: 'Verify TLS/SSL',
-        help: 'Outbound requests will verify TLS (sometimes known as SSL) connections.',
+        label: t('Verify TLS/SSL'),
+        help: t(
+          'Outbound requests will verify TLS (sometimes known as SSL) connections.'
+        ),
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
index b14cfa2a4d..dc7f1cfa84 100644
--- a/src/sentry/static/sentry/app/views/projectCspSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
@@ -263,8 +263,8 @@ const ProjectCspSettings = createReactClass({
         <SettingsPageHeader title={t('CSP Reports')} />
 
         <div className="alert alert-block alert-info">
-          Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!
+          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
+          adopter!`)}
         </div>
 
         <TextBlock>
diff --git a/src/sentry/static/sentry/app/views/projectEvents/index.jsx b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
index 88b230fe24..06b1f1297b 100644
--- a/src/sentry/static/sentry/app/views/projectEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
@@ -208,8 +208,8 @@ const ProjectEvents = createReactClass({
           </div>
         </div>
         <div className="alert alert-block alert-info">
-          Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!
+          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
+          adopter!`)}
         </div>
         {this.renderStreamBody()}
         <Pagination pageLinks={this.state.pageLinks} />
diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index da097472c5..a64c19f48d 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -296,24 +296,24 @@ const ProjectUserReportSettings = createReactClass({
         <SettingsPageHeader title={t('User Feedback')} />
 
         <div className="alert alert-block alert-info">
-          Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!
+          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
+          adopter!`)}
         </div>
 
         <TextBlock>
-          Enabling User Feedback allows you to interact with your users on an
+          {t(`Enabling User Feedback allows you to interact with your users on an
           unprecedented level. Collect additional details about issues affecting them, and
-          more importantly reach out to them with resolutions.
+          more importantly reach out to them with resolutions.`)}
         </TextBlock>
         <TextBlock>
-          When configured, your users will be presented with a dialog prompting them for
+          {t(`When configured, your users will be presented with a dialog prompting them for
           additional information. That information will get attached to the issue in
-          Sentry
+          Sentry`)}
         </TextBlock>
 
         <p>
           <a className="btn btn-primary" onClick={this.handleClick}>
-            See the report dialog in action
+            {t('See the report dialog in action')}
           </a>
         </p>
 
@@ -324,14 +324,14 @@ const ProjectUserReportSettings = createReactClass({
 
           <div className="box-content with-padding">
             <TextBlock>
-              The following example uses our Django integration. Check the documentation
-              for the SDK you're using for more details.
+              {t(`The following example uses our Django integration. Check the documentation
+              for the SDK you're using for more details.`)}
             </TextBlock>
             <pre>{this.getInstructions()}</pre>
 
             <TextBlock>
-              If you're capturing an error with our Browser JS SDK, things get even
-              simpler:
+              {t(`If you're capturing an error with our Browser JS SDK, things get even
+              simpler:`)}
             </TextBlock>
 
             <pre>{this.getBrowserJSInstructions()}</pre>
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserReports.jsx
index a59409dba6..5e15cc974e 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReports.jsx
@@ -223,8 +223,8 @@ const ProjectUserReports = createReactClass({
           </div>
         </div>
         <div className="alert alert-block alert-info">
-          Psst! This feature is still a work-in-progress. Thanks for being an early
-          adopter!
+          {t(`Psst! This feature is still a work-in-progress. Thanks for being an early
+          adopter!`)}
         </div>
         {this.renderStreamBody()}
         <Pagination pageLinks={this.state.pageLinks} />
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index bcf40e8b6b..50183526ef 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -8,7 +8,7 @@ const organizationNavigation = [
     items: [
       {
         path: `${pathPrefix}/settings/`,
-        title: 'General Settings',
+        title: t('General Settings'),
         show: ({access}) => access.has('org:write'),
       },
       {
@@ -26,7 +26,7 @@ const organizationNavigation = [
       },
       {
         path: `${pathPrefix}/members/`,
-        title: 'Members',
+        title: t('Members'),
         // eslint-disable-next-line no-shadow
         badge: ({organization, access, features}) => {
           if (!access.has('org:write')) return null;
@@ -38,32 +38,32 @@ const organizationNavigation = [
       },
       {
         path: `${pathPrefix}/auth/`,
-        title: 'Auth',
+        title: t('Auth'),
         show: ({access, features}) => features.has('sso') && access.has('org:admin'),
       },
       {
         path: `${pathPrefix}/api-keys/`,
-        title: 'API Keys',
+        title: t('API Keys'),
         show: ({access, features}) => features.has('api-keys') && access.has('org:admin'),
       },
       {
         path: `${pathPrefix}/audit-log/`,
-        title: 'Audit Log',
+        title: t('Audit Log'),
         show: ({access}) => access.has('org:write'),
       },
       {
         path: `${pathPrefix}/rate-limits/`,
-        title: 'Rate Limits',
+        title: t('Rate Limits'),
         show: ({access}) => access.has('org:write'),
       },
       {
         path: `${pathPrefix}/repos/`,
-        title: 'Repositories',
+        title: t('Repositories'),
         show: ({access}) => access.has('org:write'),
       },
       {
         path: `${pathPrefix}/integrations/`,
-        title: 'Integrations',
+        title: t('Integrations'),
         show: ({access, features}) =>
           features.has('integrations-v3') && access.has('org:integrations'),
       },
diff --git a/src/sentry/templates/sentry/bases/account.html b/src/sentry/templates/sentry/bases/account.html
index 3070ea7a01..5d5d33ea3c 100644
--- a/src/sentry/templates/sentry/bases/account.html
+++ b/src/sentry/templates/sentry/bases/account.html
@@ -21,11 +21,11 @@
     </a>
   </div>
   <div class="box-content with-padding">
-    <h4 class="m-b-1">My Settings</h4>
+    <h4 class="m-b-1">{% trans "My Settings" %}</h4>
     {% block nav %}
       <div class="dropdown pull-right anchor-right">
         <a class="dropdown-toggle" data-toggle="dropdown">
-          More <i class="icon-arrow-down"></i>
+          {% trans "More" %} <i class="icon-arrow-down"></i>
         </a>
         <ul class="dropdown-menu dropdown-menu-right">
           <li><a href="{% absolute_uri '/account/authorizations/' %}">{% trans "Authorized Applications" %}</a></li>
