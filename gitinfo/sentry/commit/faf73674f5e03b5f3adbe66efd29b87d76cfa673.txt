commit faf73674f5e03b5f3adbe66efd29b87d76cfa673
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 20 11:26:21 2010 -0700

    Clean up traceback generation. Add handling in case for some reason it errors. Traceback now properly handles request object. Tracebacks now store SESSION and COOKIES. Added some initial code for efficiency in the admin on large error sets.

diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index b19a0685ea..c5b0b3aaf5 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -1,9 +1,10 @@
 from django.contrib import admin
-from django.http import HttpResponse
 from django.contrib.admin.util import unquote
+from django.contrib.admin.views.main import ChangeList, Paginator
+from django.forms.util import flatatt
+from django.http import HttpResponse
 from django.utils.safestring import mark_safe
 from django.utils.encoding import force_unicode
-from django.forms.util import flatatt
 from django import forms
 
 from djangodblog.models import ErrorBatch, Error
@@ -12,21 +13,24 @@ from djangodblog.utils import JSONDictFormField
 
 import base64
 import re
+import logging
+import sys
 try:
     import cPickle as pickle
 except ImportError:
     import pickle
 
+logger = logging.getLogger('dblog')
+
 class PreformattedText(forms.Textarea):
     input_type = 'textarea'
     
     def render(self, name, value, attrs=None):
         if value is None: value = ''
-        final_attrs = self.build_attrs(attrs, type=self.input_type, name=name)
         if value != '':
             # Only add the 'value' attribute if a value is non-empty.
             value = force_unicode(value)
-        return mark_safe(u'<pre style="clear:left;display:block;padding-top:5px;white-space: pre-wrap;white-space: -moz-pre-wrap;white-space: -pre-wrap;white-space: -o-pre-wrap;word-wrap: break-word;"%s>%s</pre>' % (flatatt(final_attrs), value))
+        return mark_safe(u'<pre style="clear:left;display:block;padding-top:5px;white-space: pre-wrap;white-space: -moz-pre-wrap;white-space: -pre-wrap;white-space: -o-pre-wrap;word-wrap: break-word;">%s</pre>' % (value,))
 
 class ErrorBatchAdminForm(forms.ModelForm):
     traceback = forms.CharField(widget=PreformattedText())
@@ -42,7 +46,37 @@ class ErrorAdminForm(forms.ModelForm):
         fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'datetime', 'traceback')
         model = ErrorBatch
 
-class ErrorBatchAdmin(admin.ModelAdmin):
+class EfficientChangeList(ChangeList):
+    def get_results(self, request):
+        paginator = Paginator(self.query_set, self.list_per_page)
+        # Get the number of objects, with admin filters applied.
+        result_count = paginator.count
+
+        multi_page = result_count > self.list_per_page
+
+        # Get the list of objects to display on this page.
+        try:
+            result_list = paginator.page(self.page_num+1).object_list
+        except InvalidPage:
+            result_list = ()
+
+        self.full_result_count = result_count
+        self.result_count = result_count
+        self.result_list = result_list
+        self.can_show_all = False
+        self.multi_page = multi_page
+        self.paginator = paginator
+
+class EfficientModelAdmin(admin.ModelAdmin):
+    def get_changelist(self, request, **kwargs):
+        return EfficientChangeList
+
+UNDEFINED = object()
+
+class FakeRequest(object):
+    def build_absolute_uri(self): return self.url
+
+class ErrorBatchAdmin(EfficientModelAdmin):
     form            = ErrorBatchAdminForm
     list_display    = ('shortened_url', 'logger', 'server_name', 'times_seen', 'last_seen')
     list_display_links = ('shortened_url',)
@@ -68,7 +102,7 @@ class ErrorBatchAdmin(admin.ModelAdmin):
         
     resolve_errorbatch.short_description = 'Resolve selected error summaries'
 
-class ErrorAdmin(admin.ModelAdmin):
+class ErrorAdmin(EfficientModelAdmin):
     form            = ErrorAdminForm
     list_display    = ('shortened_url', 'logger', 'server_name', 'datetime')
     list_display_links = ('shortened_url',)
@@ -87,32 +121,54 @@ class ErrorAdmin(admin.ModelAdmin):
     
     def change_view(self, request, object_id, extra_context={}):
         obj = self.get_object(request, unquote(object_id))
-        has_traceback = bool('exc' in obj.data)
+        has_traceback = bool('exc' in obj.data) and not request.GET.get('raw')
         frame = request.GET.get('frame')
+        if has_traceback:
+            try:
+                extra_context.update(self.get_traceback_context(request, obj))
+            except Exception:
+                exc_info = sys.exc_info()
+                logger.exception(exc_info[1])
+                has_traceback = False
         extra_context.update({
             'frame': frame,
             'has_traceback': has_traceback,
         })
-        if has_traceback and frame == 'exc':
-            """
-            Create a technical server error response. The last three arguments are
-            the values returned from sys.exc_info() and friends.
-            """
-            module, args, frames = pickle.loads(base64.b64decode(obj.data['exc']))
-        
-            obj.class_name = str(obj.class_name)
+        return super(ErrorAdmin, self).change_view(request, object_id, extra_context)
         
-            if module == '__builtin__':
-                exc_type = __builtins__[obj.class_name]
-            else:
-                exc_type = __import__(module + '.' + obj.class_name, {}, {}, obj.class_name)
-            exc_value = exc_type(obj.message)
-            exc_value.args = args
+    def get_traceback_context(self, request, obj):
+        """
+        Create a technical server error response. The last three arguments are
+        the values returned from sys.exc_info() and friends.
+        """
+        module, args, frames = pickle.loads(base64.b64decode(obj.data['exc']))
+    
+        obj.class_name = str(obj.class_name)
+    
+        if module == '__builtin__':
+            exc_type = __builtins__[obj.class_name]
+        else:
+            exc_type = __import__(module + '.' + obj.class_name, {}, {}, obj.class_name)
+        exc_value = exc_type(obj.message)
+        exc_value.args = args
+    
+        fake_request = FakeRequest()
+        fake_request.META = obj.data['META']
+        fake_request.GET = obj.data['GET']
+        fake_request.POST = obj.data['POST']
+        fake_request.FILES = obj.data.get('FILES', {})
+        fake_request.COOKIES = obj.data.get('COOKIES', {})
+        fake_request.url = obj.url
+        fake_request.path_info = '/' + obj.url.split('/', 3)[-1]
+        print fake_request.build_absolute_uri()
+
+        reporter = ImprovedExceptionReporter(fake_request, exc_type, exc_value, frames)
+        html = reporter.get_traceback_html()
         
-            reporter = ImprovedExceptionReporter(request, exc_type, exc_value, frames)
-            html = reporter.get_traceback_html()
-            return HttpResponse(html)
-        return super(ErrorAdmin, self).change_view(request, object_id, extra_context)
+        return {
+            'error_body': mark_safe(self._body_re.search(html).group(1)),
+            'error_headers': mark_safe(self._header_re.search(html).group(1)),
+        }
 
     def get_results(self, request):
         paginator = Paginator(self.query_set, self.list_per_page)
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index 309c10403c..60d11e26b4 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -19,4 +19,6 @@ class DBLogMiddleware(object):
             META=request.META,
             POST=request.POST,
             GET=request.GET,
+            COOKIES=request.COOKIES,
+            SESSION=request.SESSION,
         ))
\ No newline at end of file
diff --git a/djangodblog/templates/admin/djangodblog/error/change_form.html b/djangodblog/templates/admin/djangodblog/error/change_form.html
index acb555e2fe..593cda9b6c 100644
--- a/djangodblog/templates/admin/djangodblog/error/change_form.html
+++ b/djangodblog/templates/admin/djangodblog/error/change_form.html
@@ -2,8 +2,20 @@
 
 {% load i18n admin_modify adminmedia %}
 
-{% block extra_style %}
+{% block extrahead %}
 	{{ block.super }}
+	{% if has_traceback %}
+		{{ error_headers }}
+		<style type="text/css">
+		#reporter_body { 
+			padding: 8px;
+			background: none repeat scroll 0 0 #FFFFCC
+		}
+		#reporter_body #traceback li { list-style-type: inherit; }
+		#reporter_body #traceback { padding: 8px; margin-top: 10px; }
+		#content { margin: 0; }
+		</style>
+	{% endif %}
 {% endblock %}
 
 {% block content_title %}{% endblock %}
@@ -12,9 +24,8 @@
 	{% if not has_traceback %}
 		{{ block.super }}
 	{% else %}
-		<iframe src="?frame=exc" width="100%" height="75%" id="dblog_exc"/>
-		<script type="text/javascript">
-			document.getElementById('dblog_exc').style.height = '100%';
-		</script>
+		<div id="reporter_body">
+			{{ error_body }}
+		</div>
 	{% endif %}
 {% endblock %}
\ No newline at end of file
diff --git a/djangodblog/utils.py b/djangodblog/utils.py
index d588cb4b6b..94c136388e 100644
--- a/djangodblog/utils.py
+++ b/djangodblog/utils.py
@@ -66,4 +66,4 @@ class JSONDictField(models.TextField):
         from south.modelsinspector import introspector
         field_class = "django.db.models.fields.TextField"
         args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
+        return (field_class, args, kwargs)
\ No newline at end of file
