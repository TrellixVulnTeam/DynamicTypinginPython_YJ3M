commit 44d48ba9406c238580e60093ede0edd8559a651c
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jul 24 11:12:08 2017 -0700

    lint: try to make yapf and flake8 both happy

diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
index 5e5316f234..8c1f748bfd 100644
--- a/src/sentry/runner/commands/cleanup.py
+++ b/src/sentry/runner/commands/cleanup.py
@@ -205,8 +205,9 @@ def cleanup(days, project, concurrency, silent, model, router, timed):
                 threads = []
                 for shard_id in range(concurrency):
                     t = Thread(
-                        target=
-                        lambda shard_id=shard_id: query.execute_sharded(concurrency, shard_id)
+                        target=(
+                            lambda shard_id=shard_id: query.execute_sharded(concurrency, shard_id)
+                        )
                     )
                     t.start()
                     threads.append(t)
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 721c906b62..64948db947 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -225,10 +225,11 @@ def is_valid_ip(ip_address, project):
 
         # Check to make sure it's actually a range before
         try:
-            if '/' in addr and ipaddress.ip_address(six.text_type(ip_address)
-                                                    ) in ipaddress.ip_network(
-                                                        six.text_type(addr), strict=False
-                                                    ):
+            if '/' in addr and (
+                ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(
+                    six.text_type(addr), strict=False
+                )
+            ):
                 return False
         except ValueError:
             # Ignore invalid values here
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 5dbabafa0e..034be71d41 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -810,7 +810,7 @@ class GroupUpdateTest(APITestCase):
         response.data['statusDetails']['ignoreUntil'] = response.data['statusDetails'
                                                                       ]['ignoreUntil'].replace(
                                                                           microsecond=0
-                                                                      )
+                                                                      )  # noqa
 
         assert response.data['status'] == 'ignored'
         assert response.data['statusDetails']['ignoreCount'] == snooze.count
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index a7175dc151..9dc614abbc 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -196,7 +196,7 @@ class GroupSerializerTest(TestCase):
             assert serialize(group, user
                              )['isSubscribed'] is expected_result, 'expected {!r} for {!r}'.format(
                                  expected_result, options
-                             )
+                             )  # noqa
 
     def test_no_user_unsubscribed(self):
         group = self.create_group()
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
index 2cb0d15c27..017ab702df 100644
--- a/tests/sentry/filters/test_browser_extensions.py
+++ b/tests/sentry/filters/test_browser_extensions.py
@@ -47,8 +47,9 @@ class BrowserExtensionsFilterTest(TestCase):
 
     def test_filters_kaspersky_extension(self):
         data = self.get_mock_data(
-            exc_source=
-            'https://ff.kis.v2.scr.kaspersky-labs.com/14E4A3DB-9B72-1047-8296-E970532BF7B7/main.js'
+            exc_source=(
+                'https://ff.kis.v2.scr.kaspersky-labs.com/14E4A3DB-9B72-1047-8296-E970532BF7B7/main.js'
+            )
         )
         assert self.apply_filter(data)
 
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 1eeebdd437..c721a4f4ba 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -982,8 +982,9 @@ class JavascriptIntegrationTest(TestCase):
         responses.add(
             responses.GET,
             'http://example.com/file.html',
-            body=
-            '<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>'
+            body=(
+                '<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>'
+            )
         )
 
         data = {
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index c9e9c7f95d..a7c28b04e6 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -17,8 +17,10 @@ class OrganizationMemberTest(TestCase):
     def test_legacy_token_generation_unicode_key(self):
         member = OrganizationMember(id=1, organization_id=1, email='foo@example.com')
         with self.settings(
-            SECRET_KEY=
-            "\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"
+            SECRET_KEY=(
+                "\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H"
+                "\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"
+            )
         ):
             assert member.legacy_token == 'df41d9dfd4ba25d745321e654e15b5d0'
 
