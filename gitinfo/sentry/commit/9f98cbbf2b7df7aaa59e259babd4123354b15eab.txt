commit 9f98cbbf2b7df7aaa59e259babd4123354b15eab
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jun 25 11:36:06 2020 -0400

    fix(apm): Display contextual information if a span has only one child (#19525)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index f809a8e65a..617e507e38 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -132,32 +132,8 @@ class SpanDetail extends React.Component<Props, State> {
     assert(!isGapSpan(span));
 
     if (this.state.transactionResults.length === 1) {
-      const eventSlug = generateSlug(this.state.transactionResults[0]);
-
-      return (
-        <SpanEntryContext.Consumer>
-          {({getViewChildTransactionTarget}) => {
-            const to = getViewChildTransactionTarget({
-              ...this.state.transactionResults![0],
-              eventSlug,
-            });
-
-            if (!to) {
-              return null;
-            }
-
-            return (
-              <StyledDiscoverButton
-                data-test-id="view-child-transaction"
-                size="xsmall"
-                to={to}
-              >
-                {t('View Child')}
-              </StyledDiscoverButton>
-            );
-          }}
-        </SpanEntryContext.Consumer>
-      );
+      // Note: This is rendered by this.renderSpanChild() as a dedicated row
+      return null;
     }
 
     const orgFeatures = new Set(organization.features);
@@ -196,6 +172,47 @@ class SpanDetail extends React.Component<Props, State> {
     );
   }
 
+  renderSpanChild(): React.ReactNode {
+    if (!this.state.transactionResults || this.state.transactionResults.length !== 1) {
+      return null;
+    }
+
+    const eventSlug = generateSlug(this.state.transactionResults[0]);
+
+    const viewChildButton = (
+      <SpanEntryContext.Consumer>
+        {({getViewChildTransactionTarget}) => {
+          const to = getViewChildTransactionTarget({
+            ...this.state.transactionResults![0],
+            eventSlug,
+          });
+
+          if (!to) {
+            return null;
+          }
+
+          return (
+            <StyledDiscoverButton
+              data-test-id="view-child-transaction"
+              size="xsmall"
+              to={to}
+            >
+              {t('View Span')}
+            </StyledDiscoverButton>
+          );
+        }}
+      </SpanEntryContext.Consumer>
+    );
+
+    const results = this.state.transactionResults[0];
+
+    return (
+      <Row title="Child Span" extra={viewChildButton}>
+        {`${results['trace.span']} - ${results.transaction} (${results['project.name']})`}
+      </Row>
+    );
+  }
+
   renderTraceButton() {
     const {span, orgId, organization, trace, event} = this.props;
 
@@ -371,10 +388,11 @@ class SpanDetail extends React.Component<Props, State> {
               <Row title="Span ID" extra={this.renderTraversalButton()}>
                 {span.span_id}
               </Row>
+              <Row title="Parent Span ID">{span.parent_span_id || ''}</Row>
+              {this.renderSpanChild()}
               <Row title="Trace ID" extra={this.renderTraceButton()}>
                 {span.trace_id}
               </Row>
-              <Row title="Parent Span ID">{span.parent_span_id || ''}</Row>
               <Row title="Description">{span?.description ?? ''}</Row>
               <Row title="Status">{span.status || ''}</Row>
               <Row title="Start Date">
