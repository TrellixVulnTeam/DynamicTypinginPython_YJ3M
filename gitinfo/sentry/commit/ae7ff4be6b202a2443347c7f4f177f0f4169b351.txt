commit ae7ff4be6b202a2443347c7f4f177f0f4169b351
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 25 12:02:44 2011 -0700

    Renamed async client to AsyncSentryClient. Fixed call in AsyncSentryClient._target

diff --git a/sentry/client/async.py b/sentry/client/async.py
index 9c58fc1a4b..3f70def567 100644
--- a/sentry/client/async.py
+++ b/sentry/client/async.py
@@ -2,7 +2,7 @@ from Queue import Queue
 from sentry.client.base import SentryClient
 from threading import Thread, Lock
 
-class SentryAsyncClient(SentryClient):
+class AsyncSentryClient(SentryClient):
     """This client uses a single background thread to dispatch errors."""
     _terminator = object()
 
@@ -39,10 +39,10 @@ class SentryAsyncClient(SentryClient):
             record = self.queue.get()
             if record is self._terminator:
                 break
-            self.send_remote_sync(**record)
+            self.send_sync(**record)
 
     def send_sync(self, **kwargs):
-        super(SentryAsyncClient, self).send(**kwargs)
+        super(AsyncSentryClient, self).send(**kwargs)
 
     def send(self, **kwargs):
         self.queue.put_nowait(kwargs)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index f6c2f07ea8..c3ee0fa7c3 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -1054,6 +1054,7 @@ class SentryClientTest(TestCase):
     
     def test_get_client(self):
         from sentry.client.log import LoggingSentryClient
+
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
     
@@ -1086,6 +1087,7 @@ class SentryClientTest(TestCase):
 
     def test_celery_client(self):
         from sentry.client.celery import CelerySentryClient
+
         self.assertEquals(get_client().__class__, SentryClient)
         self.assertEquals(get_client(), get_client())
 
@@ -1101,6 +1103,26 @@ class SentryClientTest(TestCase):
         self.assertEqual(message.message, 'view exception')
 
         conf.CLIENT = 'sentry.client.base.SentryClient'
+
+    # XXX: need to fix behavior with threads so this test works correctly
+    # def test_async_client(self):
+    #     from sentry.client.async import AsyncSentryClient
+    # 
+    #     self.assertEquals(get_client().__class__, SentryClient)
+    #     self.assertEquals(get_client(), get_client())
+    # 
+    #     conf.CLIENT = 'sentry.client.async.AsyncSentryClient'
+    # 
+    #     self.assertEquals(get_client().__class__, AsyncSentryClient)
+    #     self.assertEquals(get_client(), get_client())
+    # 
+    #     self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+    # 
+    #     message = GroupedMessage.objects.get()
+    #     self.assertEqual(message.class_name, 'Exception')
+    #     self.assertEqual(message.message, 'view exception')
+    # 
+    #     conf.CLIENT = 'sentry.client.base.SentryClient'
         
 class SentryManageTest(TestCase):
     fixtures = ['sentry/tests/fixtures/cleanup.json']
