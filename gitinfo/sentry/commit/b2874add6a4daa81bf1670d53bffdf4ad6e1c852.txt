commit b2874add6a4daa81bf1670d53bffdf4ad6e1c852
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 3 20:59:33 2012 -0700

    More refactoring

diff --git a/sentry/filters/base.py b/sentry/filters/base.py
index a11fac86f6..ac76fe3675 100644
--- a/sentry/filters/base.py
+++ b/sentry/filters/base.py
@@ -15,7 +15,7 @@ from django.utils.datastructures import SortedDict
 
 from sentry.conf import settings
 from sentry.models import Group, Event, FilterValue, MessageIndex
-from sentry.utils import InstanceManager
+from sentry.utils.db import InstanceManager
 from .widgets import ChoiceWidget
 
 
diff --git a/sentry/manager.py b/sentry/manager.py
index 50d5eeac8d..809611b99f 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -27,9 +27,8 @@ from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.tasks.index import index_event
-from sentry.utils import get_db_engine
-from sentry.utils.charts import has_charts
 from sentry.utils.dates import utc_to_local, get_sql_date_trunc
+from sentry.utils.db import get_db_engine, has_charts
 from sentry.utils.queue import maybe_delay
 
 logger = logging.getLogger('sentry.errors')
diff --git a/sentry/plugins/base.py b/sentry/plugins/base.py
index aaefafb8d6..549991fc1c 100644
--- a/sentry/plugins/base.py
+++ b/sentry/plugins/base.py
@@ -13,7 +13,7 @@ import logging
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect, HttpResponse
 
-from sentry.utils import InstanceManager
+from sentry.utils.db import InstanceManager
 from threading import local
 
 
diff --git a/sentry/processors/base.py b/sentry/processors/base.py
index 57c058e145..ce0d4cfb68 100644
--- a/sentry/processors/base.py
+++ b/sentry/processors/base.py
@@ -5,20 +5,13 @@ sentry.processors.base
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import logging
-
-from django.db import transaction
-
 from sentry.plugins import plugins
+from sentry.utils.safe import safe_execute
 
 __all__ = ('send_group_processors',)
 
 
 def send_group_processors(group, **kwargs):
-    for inst in plugins.all():
-        try:
-            inst.post_process(group=group, **kwargs)
-        except Exception, e:
-            transaction.rollback_unless_managed(using=group._state.db)
-            logger = logging.getLogger('sentry.plugins')
-            logger.exception('Error processing post_process() on %r: %s', inst.__class__, e)
+    for plugin in plugins.all():
+        if safe_execute(plugin.is_enabled, group.project):
+            safe_execute(plugin.post_process, group=group, **kwargs)
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 2c6635e7b6..5393b3f607 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -50,7 +50,7 @@ def subtract(value, amount):
 
 @register.filter
 def has_charts(group):
-    from sentry.utils.charts import has_charts
+    from sentry.utils.db import has_charts
     if hasattr(group, '_state'):
         db = group._state.db
     else:
diff --git a/sentry/templatetags/sentry_plugins.py b/sentry/templatetags/sentry_plugins.py
index 5afb2425e1..35806b81db 100644
--- a/sentry/templatetags/sentry_plugins.py
+++ b/sentry/templatetags/sentry_plugins.py
@@ -8,7 +8,7 @@ sentry.templatetags.sentry_plugins
 from django import template
 
 from sentry.plugins import plugins
-from sentry.utils import safe_execute
+from sentry.utils.safe import safe_execute
 
 register = template.Library()
 
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index f694682a33..a58771ef4b 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -6,90 +6,10 @@ sentry.utils
 :license: BSD, see LICENSE for more details.
 """
 
-import logging
-from pprint import pformat
-
-import django
-from django.conf import settings as django_settings
 from django.http import HttpRequest
 from django.utils.encoding import force_unicode
 
 
-def safe_execute(func, *args, **kwargs):
-    try:
-        return func(*args, **kwargs)
-    except Exception, e:
-        cls = func.__class__
-        logger = logging.getLogger('sentry.plugins')
-        logger.error('Error processing %r on %%r: %%s' % func.__name__, cls.__name__, e, extra={
-            'func_module': cls.__module__,
-            'func_args': args,
-            'func_kwargs': kwargs,
-        }, exc_info=True)
-
-
-class InstanceManager(object):
-    def __init__(self, class_list=None, instances=True):
-        if class_list is None:
-            class_list = []
-        self.instances = instances
-        self.update(class_list)
-
-    def add(self, class_path):
-        self.cache = None
-        self.class_list.append(class_path)
-
-    def remove(self, class_path):
-        self.cache = None
-        self.class_list.remove(class_path)
-
-    def update(self, class_list):
-        """
-        Updates the class list and wipes the cache.
-        """
-        self.cache = None
-        self.class_list = class_list
-
-    def all(self):
-        """
-        Returns a list of cached instances.
-        """
-        if not self.class_list:
-            self.cache = []
-            return []
-
-        if self.cache is not None:
-            return self.cache
-
-        results = []
-        for cls_path in self.class_list:
-            module_name, class_name = cls_path.rsplit('.', 1)
-            try:
-                module = __import__(module_name, {}, {}, class_name)
-                cls = getattr(module, class_name)
-                if self.instances:
-                    results.append(cls())
-                else:
-                    results.append(cls)
-            except Exception:
-                logger = logging.getLogger('sentry.errors')
-                logger.exception('Unable to import %s' % (cls_path,))
-                continue
-        self.cache = results
-
-        return results
-
-
-def get_db_engine(alias='default'):
-    has_multidb = django.VERSION >= (1, 2)
-    if has_multidb:
-        value = django_settings.DATABASES[alias]['ENGINE']
-    else:
-        assert alias == 'default', 'You cannot fetch a database engine other than the default on Django < 1.2'
-        value = django_settings.DATABASE_ENGINE
-    return value.rsplit('.', 1)[-1]
-
-
 class _Missing(object):
     def __repr__(self):
         return 'no value'
@@ -170,6 +90,8 @@ class MockDjangoRequest(HttpRequest):
         self.__dict__.update(kwargs)
 
     def __repr__(self):
+        from pprint import pformat
+
         # Since this is called as part of error handling, we need to be very
         # robust against potentially malformed input.
         try:
@@ -214,7 +136,3 @@ def is_float(var):
     except ValueError:
         return False
     return True
-
-
-def has_trending(alias='default'):
-    return not get_db_engine('default').startswith('sqlite')
diff --git a/sentry/utils/charts.py b/sentry/utils/charts.py
deleted file mode 100644
index e9b0373c94..0000000000
--- a/sentry/utils/charts.py
+++ /dev/null
@@ -1,16 +0,0 @@
-"""
-sentry.utils.charts
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.utils import get_db_engine
-
-
-def has_charts(db):
-    engine = get_db_engine(db)
-    if engine.startswith('sqlite'):
-        return False
-    return True
diff --git a/sentry/utils/dates.py b/sentry/utils/dates.py
index 14df1c60fb..ae073b250d 100644
--- a/sentry/utils/dates.py
+++ b/sentry/utils/dates.py
@@ -9,7 +9,8 @@ import pytz
 
 from django.conf import settings
 from django.db import connections
-from sentry.utils import get_db_engine
+
+from sentry.utils.db import get_db_engine
 
 
 def utc_to_local(dt):
diff --git a/sentry/utils/db.py b/sentry/utils/db.py
new file mode 100644
index 0000000000..4b8a4a8606
--- /dev/null
+++ b/sentry/utils/db.py
@@ -0,0 +1,84 @@
+"""
+sentry.utils.db
+~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import django
+import logging
+
+from django.conf import settings as django_settings
+
+
+class InstanceManager(object):
+    def __init__(self, class_list=None, instances=True):
+        if class_list is None:
+            class_list = []
+        self.instances = instances
+        self.update(class_list)
+
+    def add(self, class_path):
+        self.cache = None
+        self.class_list.append(class_path)
+
+    def remove(self, class_path):
+        self.cache = None
+        self.class_list.remove(class_path)
+
+    def update(self, class_list):
+        """
+        Updates the class list and wipes the cache.
+        """
+        self.cache = None
+        self.class_list = class_list
+
+    def all(self):
+        """
+        Returns a list of cached instances.
+        """
+        if not self.class_list:
+            self.cache = []
+            return []
+
+        if self.cache is not None:
+            return self.cache
+
+        results = []
+        for cls_path in self.class_list:
+            module_name, class_name = cls_path.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                cls = getattr(module, class_name)
+                if self.instances:
+                    results.append(cls())
+                else:
+                    results.append(cls)
+            except Exception:
+                logger = logging.getLogger('sentry.errors')
+                logger.exception('Unable to import %s' % (cls_path,))
+                continue
+        self.cache = results
+
+        return results
+
+
+def get_db_engine(alias='default'):
+    has_multidb = django.VERSION >= (1, 2)
+    if has_multidb:
+        value = django_settings.DATABASES[alias]['ENGINE']
+    else:
+        assert alias == 'default', 'You cannot fetch a database engine other than the default on Django < 1.2'
+        value = django_settings.DATABASE_ENGINE
+    return value.rsplit('.', 1)[-1]
+
+
+def has_trending(alias='default'):
+    return not get_db_engine('default').startswith('sqlite')
+
+
+def has_charts(db):
+    engine = get_db_engine(db)
+    if engine.startswith('sqlite'):
+        return False
+    return True
diff --git a/sentry/utils/safe.py b/sentry/utils/safe.py
new file mode 100644
index 0000000000..6c0385c3d4
--- /dev/null
+++ b/sentry/utils/safe.py
@@ -0,0 +1,28 @@
+"""
+sentry.utils.safe
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+import logging
+
+from django.db import transaction
+
+
+def safe_execute(func, *args, **kwargs):
+    sid = transaction.savepoint()
+    try:
+        return func(*args, **kwargs)
+    except Exception, e:
+        transaction.savepoint_rollback(sid)
+        cls = func.__class__
+        logger = logging.getLogger('sentry.plugins')
+        logger.error('Error processing %r on %%r: %%s' % func.__name__, cls.__name__, e, extra={
+            'func_module': cls.__module__,
+            'func_args': args,
+            'func_kwargs': kwargs,
+        }, exc_info=True)
+    else:
+        transaction.savepoint_commit(sid)
diff --git a/sentry/views/base.py b/sentry/views/base.py
index 47c4c25361..b4c6da7f5d 100644
--- a/sentry/views/base.py
+++ b/sentry/views/base.py
@@ -7,7 +7,7 @@ sentry.views.base
 """
 
 from sentry.conf import settings
-from sentry.utils import InstanceManager
+from sentry.utils.db import InstanceManager
 
 __all__ = ('View',)
 
diff --git a/sentry/web/api.py b/sentry/web/api.py
index 28bad889b4..0473168539 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -129,7 +129,8 @@ def notification(request, project):
 @csrf_exempt
 @has_access
 def poll(request, project):
-    from sentry.templatetags.sentry_helpers import as_bookmarks, handle_before_events
+    from sentry.templatetags.sentry_helpers import as_bookmarks
+    from sentry.templatetags.sentry_plugins import handle_before_events
 
     offset = 0
     limit = settings.MESSAGES_PER_PAGE
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 53024396a5..7517fe649c 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -23,7 +23,8 @@ from sentry.constants import SORT_OPTIONS, SEARCH_SORT_OPTIONS, DATE_OPTIONS, \
 from sentry.filters import Filter
 from sentry.models import Group, Event, View, SearchDocument
 from sentry.plugins import plugins
-from sentry.utils import json, has_trending, get_db_engine
+from sentry.utils import json
+from sentry.utils.db import has_trending, get_db_engine
 from sentry.web.decorators import has_access, login_required
 from sentry.web.helpers import render_to_response
 
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index f94487cbc4..ba1c7bea4c 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -319,7 +319,7 @@ class SentrySearchTest(TestCase):
 
 class SentryHelpersTest(TestCase):
     def test_get_db_engine(self):
-        from sentry.utils import get_db_engine
+        from sentry.utils.db import get_db_engine
         _databases = getattr(django_settings, 'DATABASES', {}).copy()
 
         django_settings.DATABASES['default'] = {'ENGINE': 'blah.sqlite3'}
