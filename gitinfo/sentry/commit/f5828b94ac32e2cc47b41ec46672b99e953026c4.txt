commit f5828b94ac32e2cc47b41ec46672b99e953026c4
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 4 11:43:58 2011 -0700

    Fix behavior of capturing locals

diff --git a/sentry/client/base.py b/sentry/client/base.py
index a06f1ac34e..28e4457fd9 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -18,7 +18,7 @@ import sentry
 from sentry.conf import settings
 from sentry.utils import json
 from sentry.utils import construct_checksum, transform, get_installed_apps, force_unicode, \
-                           get_versions, shorten, get_signature, get_auth_header
+                           get_versions, shorten, get_signature, get_auth_header, varmap
 from sentry.utils.stacks import get_stack_info, iter_stack_frames, iter_traceback_frames
 
 logger = logging.getLogger('sentry.errors')
@@ -302,7 +302,7 @@ class SentryClient(object):
                     else:
                         continue
                 stack.append(frame)
-            data['__sentry__']['frames'] = get_stack_info(stack)
+            data['__sentry__']['frames'] = varmap(shorten, get_stack_info(stack))
 
         return self.process(
             traceback=record.exc_text,
@@ -332,7 +332,7 @@ class SentryClient(object):
         try:
             exc_type, exc_value, exc_traceback = exc_info
 
-            frames = get_stack_info(iter_traceback_frames(exc_traceback))
+            frames = varmap(shorten, get_stack_info(iter_traceback_frames(exc_traceback)))
 
             if hasattr(exc_type, '__class__'):
                 exc_module = exc_type.__class__.__module__
diff --git a/sentry/utils/stacks.py b/sentry/utils/stacks.py
index e4ab7380a1..896fe51c56 100644
--- a/sentry/utils/stacks.py
+++ b/sentry/utils/stacks.py
@@ -4,8 +4,7 @@ import re
 from django.utils.html import escape
 
 from sentry.conf import settings
-from sentry.utils import get_installed_apps, shorten, varmap, \
-                         transform
+from sentry.utils import get_installed_apps, transform
 
 def get_lines_from_file(filename, lineno, context_lines, loader=None, module_name=None):
     """
@@ -93,6 +92,10 @@ def iter_stack_frames():
 def get_stack_info(frames):
     results = []
     for frame in frames:
+        # Support hidden frames
+        if frame.f_locals.get('__traceback_hide__'):
+            continue
+
         filename = frame.f_code.co_filename
         function = frame.f_code.co_name
         lineno = frame.f_lineno - 1
@@ -107,7 +110,7 @@ def get_stack_info(frames):
                 'function': function,
                 'lineno': lineno + 1,
                 # TODO: vars need to be references
-                'vars': transform(frame.f_locals),
+                'vars': transform(frame.f_locals.items()),
                 'pre_context': pre_context,
                 'context_line': context_line,
                 'post_context': post_context,
