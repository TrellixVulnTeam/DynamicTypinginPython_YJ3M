commit 6ff7f989529f452b72ed4d2c70f3a34eef96e76f
Author: Billy Vong <billyvg@gmail.com>
Date:   Wed Jul 26 12:46:18 2017 -0700

    Add UI for merging similar issues
    
    * Moved "Hashes" tab and combined with Similar Issues so you can merge
    and unmerge from same area
    * Redesigned "Hashes" to display more than fingerprint

diff --git a/src/sentry/static/sentry/app/actions/groupingActions.jsx b/src/sentry/static/sentry/app/actions/groupingActions.jsx
new file mode 100644
index 0000000000..d42452054f
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/groupingActions.jsx
@@ -0,0 +1,12 @@
+import Reflux from 'reflux';
+
+// Actions for "Grouping" view - for merging/unmerging events/issues
+let GroupingActions = Reflux.createActions([
+  'fetch',
+  'showAllSimilarItems',
+  'toggleUnmerge',
+  'toggleMerge',
+  'unmerge',
+  'merge'
+]);
+export default GroupingActions;
diff --git a/src/sentry/static/sentry/app/components/checkbox.jsx b/src/sentry/static/sentry/app/components/checkbox.jsx
new file mode 100644
index 0000000000..2aa9958d94
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/checkbox.jsx
@@ -0,0 +1,15 @@
+import React from 'react';
+
+const Checkbox = React.createClass({
+  getDefaultProps() {
+    return {
+      checked: false
+    };
+  },
+
+  render() {
+    return <input type="checkbox" className="chk-select" {...this.props} />;
+  }
+});
+
+export default Checkbox;
diff --git a/src/sentry/static/sentry/app/components/eventExtraDetails.jsx b/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/eventExtraDetails.jsx
rename to src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
index 193b79f682..3b9334c82b 100644
--- a/src/sentry/static/sentry/app/components/eventExtraDetails.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
@@ -5,7 +5,7 @@ import ProjectState from '../mixins/projectState';
 import TimeSince from './timeSince';
 import ShortId from './shortId';
 
-const EventExtraDetails = React.createClass({
+const EventOrGroupExtraDetails = React.createClass({
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -93,4 +93,4 @@ const EventExtraDetails = React.createClass({
     );
   }
 });
-export default EventExtraDetails;
+export default EventOrGroupExtraDetails;
diff --git a/src/sentry/static/sentry/app/components/stream/streamGroupHeader.jsx b/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
similarity index 80%
rename from src/sentry/static/sentry/app/components/stream/streamGroupHeader.jsx
rename to src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
index 1a662d9401..b890083e0b 100644
--- a/src/sentry/static/sentry/app/components/stream/streamGroupHeader.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupHeader.jsx
@@ -1,12 +1,13 @@
 import React, {PropTypes} from 'react';
 import {Link} from 'react-router';
 
-import GroupTitle from '../group/title';
+import {Metadata} from '../proptypes';
+import EventOrGroupTitle from './eventOrGroupTitle';
 
 /**
  * Displays an event or group/issue title (i.e. in Stream)
  */
-class StreamGroupHeader extends React.Component {
+class EventOrGroupHeader extends React.Component {
   static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -16,14 +17,7 @@ class StreamGroupHeader extends React.Component {
       level: PropTypes.string,
       type: PropTypes.oneOf(['error', 'csp', 'default']).isRequired,
       title: PropTypes.string,
-      metadata: PropTypes.shape({
-        value: PropTypes.string,
-        message: PropTypes.string,
-        directive: PropTypes.string,
-        type: PropTypes.string,
-        title: PropTypes.string,
-        uri: PropTypes.string
-      }),
+      metadata: Metadata,
       groupID: PropTypes.string,
       culprit: PropTypes.string
     }),
@@ -58,7 +52,7 @@ class StreamGroupHeader extends React.Component {
             {!hideLevel && level && <span className="error-level truncate">{level}</span>}
             <span className="icon icon-soundoff" />
             <span className="icon icon-star-solid" />
-            <GroupTitle {...this.props} />
+            <EventOrGroupTitle {...this.props} />
           </Link>
         </h3>
         {message &&
@@ -70,4 +64,4 @@ class StreamGroupHeader extends React.Component {
   }
 }
 
-export default StreamGroupHeader;
+export default EventOrGroupHeader;
diff --git a/src/sentry/static/sentry/app/components/group/title.jsx b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
similarity index 76%
rename from src/sentry/static/sentry/app/components/group/title.jsx
rename to src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
index 6bce104be3..b0db22a19f 100644
--- a/src/sentry/static/sentry/app/components/group/title.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupTitle.jsx
@@ -1,16 +1,12 @@
 import React, {PropTypes} from 'react';
+import {Metadata} from '../proptypes';
 
-const GroupTitle = React.createClass({
+const EventOrGroupTitle = React.createClass({
   propTypes: {
     data: PropTypes.shape({
       type: PropTypes.oneOf(['error', 'csp', 'default']).isRequired,
       title: PropTypes.string,
-      metadata: PropTypes.shape({
-        directive: PropTypes.string,
-        type: PropTypes.string,
-        title: PropTypes.string,
-        uri: PropTypes.string
-      }).isRequired,
+      metadata: Metadata.isRequired,
       culprit: PropTypes.string
     })
   },
@@ -43,4 +39,4 @@ const GroupTitle = React.createClass({
   }
 });
 
-export default GroupTitle;
+export default EventOrGroupTitle;
diff --git a/src/sentry/static/sentry/app/components/issueLink.jsx b/src/sentry/static/sentry/app/components/issueLink.jsx
index bc42ed8ada..3843d77eea 100644
--- a/src/sentry/static/sentry/app/components/issueLink.jsx
+++ b/src/sentry/static/sentry/app/components/issueLink.jsx
@@ -3,7 +3,7 @@ import {Link} from 'react-router';
 
 import ApiMixin from '../mixins/apiMixin';
 import Count from './count';
-import GroupTitle from './group/title';
+import EventOrGroupTitle from './eventOrGroupTitle';
 import TimeSince from './timeSince';
 
 export default React.createClass({
@@ -72,7 +72,7 @@ export default React.createClass({
           <div className={className}>
             <div style={{marginBottom: 20}}>
               <h3>
-                <GroupTitle data={issue} />
+                <EventOrGroupTitle data={issue} />
               </h3>
               <div className="event-message">
                 <span className="error-level">{issue.level}</span>
diff --git a/src/sentry/static/sentry/app/components/splitLayout.jsx b/src/sentry/static/sentry/app/components/splitLayout.jsx
new file mode 100644
index 0000000000..e782fa1cc5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/splitLayout.jsx
@@ -0,0 +1,27 @@
+import React, {PropTypes} from 'react';
+import classNames from 'classnames';
+import SpreadLayout from './spreadLayout';
+
+const SplitLayout = ({children, className, responsive, ...props}) => {
+  const cx = classNames('split-layout', className, {
+    'allow-responsive': responsive
+  });
+
+  return (
+    <SpreadLayout {...props} className={cx}>
+      {React.Children.map(children, child => {
+        const childProps = (child && child.props) || {};
+        return React.cloneElement(child, {
+          className: classNames(childProps.className, 'split-layout-child')
+        });
+      })}
+    </SpreadLayout>
+  );
+};
+
+SplitLayout.propTypes = {
+  children: PropTypes.node,
+  responsive: PropTypes.bool
+};
+
+export default SplitLayout;
diff --git a/src/sentry/static/sentry/app/components/spreadLayout.jsx b/src/sentry/static/sentry/app/components/spreadLayout.jsx
new file mode 100644
index 0000000000..c4873b2a98
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/spreadLayout.jsx
@@ -0,0 +1,19 @@
+import React, {PropTypes} from 'react';
+import classNames from 'classnames';
+
+const SpreadLayout = ({children, className, ...props}) => {
+  const cx = classNames(className, 'spread-layout', {});
+  return (
+    <div {...props} className={cx}>
+      {children}
+    </div>
+  );
+};
+
+SpreadLayout.propTypes = {
+  children: PropTypes.node,
+  style: PropTypes.object,
+  className: PropTypes.string
+};
+
+export default SpreadLayout;
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 2c814bdedc..e09a6169b5 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -9,8 +9,8 @@ import GroupCheckBox from './groupCheckBox';
 import ProjectState from '../../mixins/projectState';
 import GroupStore from '../../stores/groupStore';
 import SelectedGroupStore from '../../stores/selectedGroupStore';
-import StreamGroupHeader from './streamGroupHeader';
-import EventExtraDetails from '../eventExtraDetails';
+import EventOrGroupHeader from '../eventOrGroupHeader';
+import EventOrGroupExtraDetails from '../eventOrGroupExtraDetails';
 
 import {valueIsEqual} from '../../utils';
 
@@ -106,8 +106,8 @@ const StreamGroup = React.createClass({
             <div className="checkbox">
               <GroupCheckBox id={data.id} />
             </div>}
-          <StreamGroupHeader data={data} orgId={orgId} projectId={projectId} />
-          <EventExtraDetails
+          <EventOrGroupHeader data={data} orgId={orgId} projectId={projectId} />
+          <EventOrGroupExtraDetails
             group
             {...data}
             groupId={id}
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index d2a25b13d7..14a19ba14f 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -1,15 +1,92 @@
 import React from 'react';
 
+const Metadata = React.PropTypes.shape({
+  value: React.PropTypes.string,
+  message: React.PropTypes.string,
+  directive: React.PropTypes.string,
+  type: React.PropTypes.string,
+  title: React.PropTypes.string,
+  uri: React.PropTypes.string
+});
+
+const User = React.PropTypes.shape({
+  id: React.PropTypes.string.isRequired
+});
+
+const Group = React.PropTypes.shape({
+  id: React.PropTypes.string.isRequired,
+  annotations: React.PropTypes.array,
+  assignedTo: User,
+  count: React.PropTypes.string,
+  culprit: React.PropTypes.string,
+  firstSeen: React.PropTypes.string,
+  hasSeen: React.PropTypes.bool,
+  isBookmarked: React.PropTypes.bool,
+  isPublic: React.PropTypes.bool,
+  isSubscribed: React.PropTypes.bool,
+  lastSeen: React.PropTypes.string,
+  level: React.PropTypes.string,
+  logger: React.PropTypes.string,
+  metadata: Metadata,
+  numComments: React.PropTypes.number,
+  permalink: React.PropTypes.string,
+  project: React.PropTypes.shape({
+    name: React.PropTypes.string,
+    slug: React.PropTypes.string
+  }),
+  shareId: React.PropTypes.string,
+  shortId: React.PropTypes.string,
+  status: React.PropTypes.string,
+  statusDetails: React.PropTypes.object,
+  title: React.PropTypes.string,
+  type: React.PropTypes.oneOf(['error', 'csp', 'default']),
+  userCount: React.PropTypes.number
+});
+
+const Event = React.PropTypes.shape({
+  id: React.PropTypes.string.isRequired,
+  context: React.PropTypes.object,
+  contexts: React.PropTypes.object,
+  dateCreated: React.PropTypes.string,
+  dateReceived: React.PropTypes.string,
+  entries: React.PropTypes.arrayOf(
+    React.PropTypes.shape({
+      data: React.PropTypes.object,
+      type: React.PropTypes.string
+    })
+  ),
+  errors: React.PropTypes.arrayOf(
+    React.PropTypes.shape({
+      data: React.PropTypes.object,
+      message: React.PropTypes.string,
+      type: React.PropTypes.string
+    })
+  ),
+  eventID: React.PropTypes.string,
+  fingerprints: React.PropTypes.arrayOf(React.PropTypes.string),
+  groupID: React.PropTypes.string,
+  message: React.PropTypes.string,
+  metadata: Metadata,
+  packages: React.PropTypes.object,
+  platform: React.PropTypes.string,
+  sdk: React.PropTypes.object,
+  size: React.PropTypes.number,
+  tags: React.PropTypes.arrayOf(
+    React.PropTypes.shape({
+      key: React.PropTypes.string,
+      value: React.PropTypes.string
+    })
+  ),
+  type: React.PropTypes.oneOf(['error', 'csp', 'default']),
+  user: React.PropTypes.object
+});
+
 let PropTypes = {
   AnyModel: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
-  Group: React.PropTypes.shape({
-    id: React.PropTypes.string.isRequired
-  }),
-  Event: React.PropTypes.shape({
-    id: React.PropTypes.string.isRequired
-  }),
+  Group,
+  Event,
   Organization: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
@@ -22,9 +99,9 @@ let PropTypes = {
   Team: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
-  User: React.PropTypes.shape({
-    id: React.PropTypes.string.isRequired
-  })
+  User
 };
 
+export {Group, Event, Metadata};
+
 export default PropTypes;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index b8be5f3509..3fff0e752d 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -28,7 +28,7 @@ import GroupHashes from './views/groupHashes';
 import GroupTags from './views/groupTags';
 import GroupTagValues from './views/groupTagValues';
 import GroupUserReports from './views/groupUserReports';
-import SimilarIssues from './views/similarIssues';
+import GroupGroupingView from './views/groupGrouping/groupGroupingView';
 import MyIssuesAssignedToMe from './views/myIssues/assignedToMe';
 import MyIssuesBookmarked from './views/myIssues/bookmarked';
 import MyIssuesViewed from './views/myIssues/viewed';
@@ -278,7 +278,7 @@ function routes() {
             <Route path="tags/" component={errorHandler(GroupTags)} />
             <Route path="tags/:tagKey/" component={errorHandler(GroupTagValues)} />
             <Route path="feedback/" component={errorHandler(GroupUserReports)} />
-            <Route path="similar/" component={errorHandler(SimilarIssues)} />
+            <Route path="grouping/" component={errorHandler(GroupGroupingView)} />
 
           </Route>
         </Route>
diff --git a/src/sentry/static/sentry/app/stores/groupingStore.jsx b/src/sentry/static/sentry/app/stores/groupingStore.jsx
new file mode 100644
index 0000000000..dcb106d857
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/groupingStore.jsx
@@ -0,0 +1,294 @@
+import Reflux from 'reflux';
+
+import IndicatorStore from './indicatorStore';
+import {Client} from '../api';
+import GroupingActions from '../actions/groupingActions';
+
+const api = new Client();
+
+// Between 0-100
+const SIMILARITY_THRESHOLD = 75;
+
+// @param score: {[key: string]: number}
+const getAvgScore = score => {
+  let scoreKeys = (score && Object.keys(score)) || [];
+  return (
+    scoreKeys.map(key => score[key]).reduce((acc, s) => acc + s * 100, 0) /
+    scoreKeys.length
+  );
+};
+
+const GroupingStore = Reflux.createStore({
+  listenables: [GroupingActions],
+  init() {
+    this.unmergeList = new Set();
+    this.unmergeState = new Map();
+
+    this.mergeState = new Map();
+    this.mergeList = new Set();
+
+    this.unmergeDisabled = false;
+    this.mergedItems = [];
+    this.similarItems = [];
+    this.filteredSimilarItems = [];
+  },
+
+  setStateForId(map, id, newState) {
+    let state = (map.has(id) && map.get(id)) || {};
+    let mergedState = Object.assign({}, state, newState);
+    map.set(id, mergedState);
+    return mergedState;
+  },
+
+  // Fetches data
+  onFetch(toFetchArray) {
+    let promises = toFetchArray.map(({endpoint, queryParams, dataKey}) => {
+      return new Promise((resolve, reject) => {
+        api.request(endpoint, {
+          method: 'GET',
+          data: queryParams,
+          success: (data, _, jqXHR) => {
+            resolve({
+              dataKey,
+              data,
+              links: jqXHR.getResponseHeader('Link')
+            });
+          },
+          error: err => {
+            let error = (err.responseJSON && err.responseJSON.detail) || true;
+            reject(error);
+          }
+        });
+      });
+    });
+
+    const responseProcessors = {
+      merged: item => {
+        // Check for locked items
+        this.setStateForId(this.unmergeState, item.id, {
+          locked: item.status === 'locked'
+        });
+        return item;
+      },
+      similar: ([issue, score]) => {
+        // Hide items with a low average score
+        let avgScore = getAvgScore(score);
+        let isBelowThreshold = avgScore < SIMILARITY_THRESHOLD;
+
+        return {
+          issue,
+          score,
+          avgScore,
+          isBelowThreshold
+        };
+      }
+    };
+
+    Promise.all(promises).then(resultsArray => {
+      resultsArray.forEach(({dataKey, data, links}) => {
+        let items = data.map(responseProcessors[dataKey]);
+        this[`${dataKey}Items`] = items;
+        this[`${dataKey}Links`] = links;
+      });
+
+      this.trigger({
+        // List of merged items that can be unmerged
+        mergedItems: this.mergedItems,
+        // Pagination for above list
+        mergedLinks: this.mergedLinks,
+        // List of similar items above min. score index
+        similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),
+        // List of similar items below min. score index
+        filteredSimilarItems: this.similarItems.filter(
+          ({isBelowThreshold}) => isBelowThreshold
+        ),
+        // Pagination for above list
+        similarLinks: this.similarLinks,
+        // State object for merged row items
+        mergeState: this.mergeState,
+        // State object for unmerge row items
+        unmergeState: this.unmergeState
+      });
+    });
+  },
+
+  // Toggle merge checkbox
+  onToggleMerge(id) {
+    let checked;
+
+    if (this.mergeList.has(id)) {
+      this.mergeList.delete(id);
+      checked = false;
+    } else {
+      this.mergeList.add(id);
+      checked = true;
+    }
+
+    this.setStateForId(this.mergeState, id, {
+      checked
+    });
+
+    this.triggerMergeState();
+  },
+
+  // Toggle unmerge check box
+  onToggleUnmerge(id) {
+    let checked;
+
+    // Uncheck an item to unmerge
+    if (this.unmergeList.has(id)) {
+      this.unmergeList.delete(id);
+      checked = false;
+
+      // If there was a single unchecked item before, make sure we reset its disabled state
+      if (this.remainingItem) {
+        this.setStateForId(this.unmergeState, this.remainingItem.id, {
+          disabled: false
+        });
+        this.remainingItem = null;
+      }
+    } else {
+      // at least 1 item must be unchecked for unmerge
+      // make sure that not all events have been selected
+
+      // Account for items in unmerge queue, or "locked" items
+      let lockedItems = Array.from(this.unmergeState.values()).filter(
+        ({locked}) => locked
+      ) || [];
+
+      if (this.unmergeList.size + 1 < this.mergedItems.length - lockedItems.length) {
+        this.unmergeList.add(id);
+        checked = true;
+
+        // Check if there's only one remaining item, and make sure to disable it from being
+        // selected to unmerge
+        if (this.unmergeList.size + 1 === this.mergedItems.length - lockedItems.length) {
+          let remainingItem = this.mergedItems.find(
+            item => !this.unmergeList.has(item.id)
+          );
+          if (remainingItem) {
+            this.remainingItem = remainingItem;
+            this.setStateForId(this.unmergeState, remainingItem.id, {
+              disabled: true
+            });
+          }
+        }
+      }
+    }
+
+    // Update "checked" state for row
+    this.setStateForId(this.unmergeState, id, {
+      checked
+    });
+
+    this.triggerUnmergeState();
+  },
+
+  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {
+    let ids = Array.from(this.unmergeList.values());
+    // Disable unmerge button
+    this.unmergeDisabled = true;
+
+    let loadingIndicator = IndicatorStore.add(loadingMessage);
+    api.request(`/issues/${groupId}/hashes/`, {
+      method: 'DELETE',
+      query: {
+        id: ids
+      },
+      success: (data, _, jqXHR) => {
+        IndicatorStore.add(successMessage, 'success', {
+          duration: 5000
+        });
+        this.unmergeDisabled = false;
+      },
+      error: error => {
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(errorMessage, 'error');
+        this.unmergeDisabled = false;
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+        this.unmergeDisabled = false;
+      }
+    });
+
+    // Disable rows
+    ids.forEach(id => {
+      this.setStateForId(this.unmergeState, id, {
+        checked: false,
+        locked: true,
+        busy: true
+      });
+    });
+
+    this.unmergeList.clear();
+
+    this.triggerUnmergeState();
+  },
+
+  onMerge({params, query, loadingMessage, successMessage, errorMessage}) {
+    let ids = Array.from(this.mergeList.values());
+    // Disable merge button
+    this.mergeDisabled = true;
+
+    if (params) {
+      let {orgId, groupId, projectId} = params;
+      let loadingIndicator = IndicatorStore.add(loadingMessage);
+      api.merge(
+        {
+          orgId,
+          projectId,
+          // parent = last element in array
+          itemIds: [...ids, groupId],
+          query
+        },
+        {
+          success: (data, _, jqXHR) => {
+            IndicatorStore.add(successMessage, 'success', {
+              duration: 5000
+            });
+            // Hide rows after successful merge
+            ids.forEach(id => {
+              let state = this.mergeState.get(id) || {};
+              this.mergeState.set(id, {
+                ...state,
+                visible: false
+              });
+            });
+            this.mergeList.clear();
+            this.mergeDisabled = false;
+          },
+          error: error => {
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(errorMessage, 'error');
+            this.mergeDisabled = false;
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+            this.mergeDisabled = false;
+          }
+        }
+      );
+    }
+
+    this.triggerMergeState();
+  },
+
+  triggerUnmergeState() {
+    this.trigger({
+      unmergeDisabled: this.unmergeDisabled,
+      unmergeState: this.unmergeState,
+      unmergeList: this.unmergeList
+    });
+  },
+
+  triggerMergeState() {
+    this.trigger({
+      mergeDisabled: this.mergeDisabled,
+      mergeState: this.mergeState,
+      mergeList: this.mergeList
+    });
+  }
+});
+
+export default GroupingStore;
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 67cda1cfcb..ba151c8de2 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -121,13 +121,15 @@ const GroupDetails = React.createClass({
     let id = this.props.params.groupId;
     if (itemIds.has(id)) {
       let group = GroupStore.get(id);
-      if (group.stale) {
-        this.fetchData();
-        return;
+      if (group) {
+        if (group.stale) {
+          this.fetchData();
+          return;
+        }
+        this.setState({
+          group: group
+        });
       }
-      this.setState({
-        group: group
-      });
     }
   },
 
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index f924970cbd..bf14f78cc4 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -8,7 +8,7 @@ import GroupSeenBy from './seenBy';
 import IndicatorStore from '../../stores/indicatorStore';
 import ListLink from '../../components/listLink';
 import ShortId from '../../components/shortId';
-import GroupTitle from '../../components/group/title';
+import EventOrGroupTitle from '../../components/eventOrGroupTitle';
 import ProjectState from '../../mixins/projectState';
 import TooltipMixin from '../../mixins/tooltip';
 import ConfigStore from '../../stores/configStore';
@@ -131,7 +131,7 @@ const GroupHeader = React.createClass({
         <div className="row">
           <div className="col-sm-7">
             <h3>
-              <GroupTitle data={group} />
+              <EventOrGroupTitle data={group} />
             </h3>
             <div className="event-message">
               <span className="error-level">{group.level}</span>
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx b/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx
new file mode 100644
index 0000000000..48f6285002
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/groupGroupingView.jsx
@@ -0,0 +1,170 @@
+import React, {PropTypes} from 'react';
+import Reflux from 'reflux';
+
+import {t} from '../../locale';
+import GroupingStore from '../../stores/groupingStore';
+import GroupingActions from '../../actions/groupingActions';
+
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import MergedList from './mergedList';
+import SimilarList from './similarList';
+
+const GroupGroupingView = React.createClass({
+  propTypes: {
+    query: PropTypes.string
+  },
+
+  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+
+  getInitialState() {
+    return {
+      mergedItems: [],
+      similarItems: [],
+      filteredSimilarItems: [],
+      mergedLinks: [],
+      similarLinks: [],
+      loading: true,
+      error: false
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (
+      nextProps.params.groupId !== this.props.params.groupId ||
+      nextProps.location.search !== this.props.location.search
+    ) {
+      this.fetchData();
+    }
+  },
+
+  onGroupingUpdate({
+    mergedItems,
+    mergedLinks,
+    similarItems,
+    similarLinks,
+    filteredSimilarItems
+  }) {
+    if (mergedItems && similarItems) {
+      this.setState({
+        mergedItems,
+        mergedLinks,
+        similarItems,
+        similarLinks,
+        filteredSimilarItems,
+        loading: false,
+        error: false
+      });
+    }
+  },
+
+  getEndpoint(type) {
+    let params = this.props.params;
+    let queryParams = {
+      ...this.props.location.query,
+      limit: 50
+    };
+    return `/issues/${params.groupId}/${type}/?${jQuery.param(queryParams)}`;
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    GroupingActions.fetch([
+      {
+        endpoint: this.getEndpoint('hashes'),
+        dataKey: 'merged',
+        queryParams: this.props.location.query
+      },
+      {
+        endpoint: this.getEndpoint('similar'),
+        dataKey: 'similar',
+        queryParams: this.props.location.query
+      }
+    ]);
+  },
+
+  handleMerge() {
+    const {query, params} = this.props;
+
+    if (params) {
+      GroupingActions.merge({
+        params,
+        query,
+        loadingMessage: `${t('Merging issues')}...`,
+        successMessage: t('Issues successfully merged.'),
+        errorMessage: t('Unable to merge issues.')
+      });
+    }
+  },
+
+  handleUnmerge() {
+    let {params} = this.props;
+
+    GroupingActions.unmerge({
+      groupId: params.groupId,
+      loadingMessage: `${t('Unmerging events')}...`,
+      successMessage: t('Events successfully queued for unmerging.'),
+      errorMessage: t('Unable to queue events for unmerging.')
+    });
+  },
+
+  render() {
+    let {orgId, projectId, groupId} = this.props.params;
+    let isLoading = this.state.loading;
+    let isError = this.state.error && !isLoading;
+    let hasMergedItems = this.state.mergedItems.length >= 0 && !isError && !isLoading;
+    let hasSimilarItems =
+      (this.state.similarItems.length >= 0 ||
+        this.state.filteredSimilarItems.length >= 0) &&
+      !isError &&
+      !isLoading;
+
+    return (
+      <div>
+        <div className="alert alert-block alert-warning">
+          <strong>{t('Warning')}:</strong>
+          {' '}
+          {t(
+            'This is an experimental feature. Data may not be immediately available while we process the unmerge.'
+          )}
+        </div>
+
+        {isLoading && <LoadingIndicator />}
+        {isError && <LoadingError message={this.state.error} onRetry={this.fetchData} />}
+
+        {hasSimilarItems &&
+          <SimilarList
+            items={this.state.similarItems}
+            filteredItems={this.state.filteredSimilarItems}
+            onMerge={this.handleMerge}
+            orgId={orgId}
+            projectId={projectId}
+            pageLinks={this.state.similarLinks}
+          />}
+
+        {hasMergedItems &&
+          <MergedList
+            items={this.state.mergedItems}
+            onUnmerge={this.handleUnmerge}
+            orgId={orgId}
+            projectId={projectId}
+            groupId={groupId}
+            pageLinks={this.state.mergedLinks}
+            busyMap={this.state.busy}
+            hiddenMap={this.state.hidden}
+          />}
+
+      </div>
+    );
+  }
+});
+
+export default GroupGroupingView;
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx b/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx
new file mode 100644
index 0000000000..fa977bcbc6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/mergedItem.jsx
@@ -0,0 +1,115 @@
+import React, {PropTypes} from 'react';
+import Reflux from 'reflux';
+
+import GroupingStore from '../../stores/groupingStore';
+import GroupingActions from '../../actions/groupingActions';
+import EventOrGroupHeader from '../../components/eventOrGroupHeader';
+import EventOrGroupExtraDetails from '../../components/eventOrGroupExtraDetails';
+import SpreadLayout from '../../components/spreadLayout';
+import SplitLayout from '../../components/splitLayout';
+import Checkbox from '../../components/checkbox';
+
+const MergedItem = React.createClass({
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    groupId: PropTypes.string.isRequired,
+    fingerprint: PropTypes.string.isRequired,
+    disabled: PropTypes.bool,
+    event: PropTypes.shape({
+      groupID: PropTypes.string,
+      type: PropTypes.oneOf(['error', 'csp', 'default']),
+      dateCreated: PropTypes.string,
+      platform: PropTypes.string
+    })
+  },
+
+  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+
+  getInitialState() {
+    return {
+      checked: false,
+      locked: false,
+      busy: false
+    };
+  },
+
+  onGroupingUpdate({unmergeState}) {
+    let {fingerprint} = this.props;
+    if (unmergeState) {
+      const stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);
+      if (stateForId) {
+        Object.keys(stateForId).forEach(key => {
+          if (stateForId[key] !== this.state[key]) {
+            this.setState({
+              [key]: stateForId[key]
+            });
+          }
+        });
+      }
+    }
+  },
+
+  handleToggle(e) {
+    let {disabled, fingerprint} = this.props;
+
+    // clicking anywhere in the row will toggle the checkbox
+    if (!disabled && !this.state.locked) {
+      GroupingActions.toggleUnmerge(fingerprint);
+    }
+  },
+
+  render() {
+    let {disabled, event, orgId, fingerprint, projectId, groupId} = this.props;
+    let checkboxDisabled = disabled || this.state.disabled || this.state.locked;
+
+    // Not sure why, but `event` can be null
+    return (
+      <SplitLayout
+        style={{
+          opacity: this.state.busy || this.state.locked ? 0.6 : 1
+        }}
+        onClick={this.handleToggle}
+        className="group merged-event"
+        responsive>
+        <div>
+          <div className="event-details">
+            {event &&
+              <EventOrGroupHeader
+                orgId={orgId}
+                projectId={projectId}
+                data={event}
+                hideLevel
+              />}
+            {event &&
+              <EventOrGroupExtraDetails
+                groupId={groupId}
+                orgId={orgId}
+                projectId={projectId}
+                event={event}
+                firstSeen={event.dateCreated}
+                logger={event.platform}
+              />}
+          </div>
+        </div>
+
+        <SpreadLayout className="grouping-controls">
+          <div className="truncate fingerprint">
+            {fingerprint}
+          </div>
+          <div className="align-right action-column">
+            <Checkbox
+              id={fingerprint}
+              value={fingerprint}
+              checked={this.state.checked}
+              disabled={checkboxDisabled}
+            />
+          </div>
+        </SpreadLayout>
+
+      </SplitLayout>
+    );
+  }
+});
+
+export default MergedItem;
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/mergedList.jsx b/src/sentry/static/sentry/app/views/groupGrouping/mergedList.jsx
new file mode 100644
index 0000000000..706d8db60c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/mergedList.jsx
@@ -0,0 +1,56 @@
+import React, {PropTypes} from 'react';
+
+import {t} from '../../locale';
+import {Event} from '../../proptypes';
+
+import Pagination from '../../components/pagination';
+import MergedItem from './MergedItem';
+import MergedToolbar from './MergedToolbar';
+
+const MergedList = React.createClass({
+  propTypes: {
+    onUnmerge: PropTypes.func.isRequired,
+    items: PropTypes.arrayOf(Event),
+    pageLinks: PropTypes.string
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t("There don't seem to be any hashes for this issue.")}</p>
+      </div>
+    );
+  },
+
+  render() {
+    let {items, pageLinks, onUnmerge, ...otherProps} = this.props;
+    let hasResults = items.length > 0;
+
+    if (hasResults) {
+      return (
+        <div className="grouping-list-container grouping-merged-list-container">
+          <h2>{t('Merged with this Issue')}</h2>
+          <MergedToolbar onUnmerge={onUnmerge} />
+
+          <div className="grouping-list">
+            {items.map(({id, latestEvent}) => (
+              <MergedItem
+                key={id}
+                {...otherProps}
+                event={latestEvent}
+                fingerprint={id}
+                itemCount={items.length}
+              />
+            ))}
+          </div>
+          <Pagination pageLinks={pageLinks} />
+        </div>
+      );
+    }
+
+    return this.renderEmpty();
+  }
+});
+
+export default MergedList;
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/mergedToolbar.jsx b/src/sentry/static/sentry/app/views/groupGrouping/mergedToolbar.jsx
new file mode 100644
index 0000000000..fe40dab07a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/mergedToolbar.jsx
@@ -0,0 +1,64 @@
+import React, {PropTypes} from 'react';
+import Reflux from 'reflux';
+
+import {t} from '../../locale';
+import GroupingStore from '../../stores/groupingStore';
+
+import LinkWithConfirmation from '../../components/linkWithConfirmation';
+import SpreadLayout from '../../components/spreadLayout';
+import SplitLayout from '../../components/splitLayout';
+
+const MergedToolbar = React.createClass({
+  propTypes: {
+    onUnmerge: PropTypes.func
+  },
+  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+  getInitialState() {
+    return {
+      unmergeCount: 0
+    };
+  },
+
+  onGroupingUpdate({unmergeList}) {
+    if (unmergeList && unmergeList.size !== this.state.unmergedCount) {
+      this.setState({
+        unmergeCount: unmergeList.size
+      });
+    }
+  },
+
+  render() {
+    let {onUnmerge} = this.props;
+    return (
+      <div className="grouping-toolbar stream-actions">
+        <SplitLayout responsive>
+          <SpreadLayout>
+            <div className="stream-actions-header">
+              {t('Event')}
+            </div>
+          </SpreadLayout>
+          <SpreadLayout>
+            <div className="stream-actions-header event-fingerprint-header">
+              {t('Fingerprint')}
+            </div>
+            <div className="grouping-toolbar-actions">
+              <LinkWithConfirmation
+                disabled={this.state.unmergeCount === 0}
+                title={t(`Unmerging ${this.state.unmergeCount} events`)}
+                message={t(
+                  'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'
+                )}
+                className="btn btn btn-default"
+                onConfirm={onUnmerge}>
+                {t('Unmerge')}
+                {this.state.unmergeCount ? ` (${this.state.unmergeCount})` : null}
+              </LinkWithConfirmation>
+            </div>
+          </SpreadLayout>
+        </SplitLayout>
+      </div>
+    );
+  }
+});
+
+export default MergedToolbar;
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx b/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx
new file mode 100644
index 0000000000..73a772576c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/similarItem.jsx
@@ -0,0 +1,150 @@
+import React, {PropTypes} from 'react';
+import Reflux from 'reflux';
+
+import {t} from '../../locale';
+import GroupingStore from '../../stores/groupingStore';
+import GroupingActions from '../../actions/groupingActions';
+
+import Count from '../../components/count';
+import EventOrGroupHeader from '../../components/eventOrGroupHeader';
+import EventOrGroupExtraDetails from '../../components/eventOrGroupExtraDetails';
+import SpreadLayout from '../../components/spreadLayout';
+import SplitLayout from '../../components/splitLayout';
+import Checkbox from '../../components/checkbox';
+
+// TODO(billy): Replace this with a quantified aggregate score
+const scoreComponents = {
+  'exception:message:character-shingles': t('Exception'),
+  'exception:stacktrace:application-chunks': t('App code'),
+  'exception:stacktrace:pairs': t('Stacktrace'),
+  'message:message:character-shingles': t('Message')
+};
+
+const SimilarIssueItem = React.createClass({
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    score: PropTypes.object,
+    issue: PropTypes.shape({
+      id: PropTypes.string.isRequired,
+      level: PropTypes.string.isRequired,
+      type: PropTypes.oneOf(['error', 'csp', 'default']).isRequired,
+      title: PropTypes.string.isRequired,
+      metadata: PropTypes.shape({
+        value: PropTypes.string,
+        message: PropTypes.string,
+        directive: PropTypes.string,
+        type: PropTypes.string,
+        title: PropTypes.string,
+        uri: PropTypes.string
+      }).isRequired,
+      culprit: PropTypes.string,
+      hideLevel: PropTypes.bool
+    })
+  },
+  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+
+  getInitialState() {
+    return {
+      visible: true,
+      checked: false,
+      busy: false
+    };
+  },
+
+  onGroupingUpdate({mergeState}) {
+    let {issue} = this.props;
+    if (mergeState) {
+      const stateForId = mergeState.has(issue.id) && mergeState.get(issue.id);
+      if (stateForId) {
+        Object.keys(stateForId).forEach(key => {
+          if (stateForId[key] !== this.state[key]) {
+            this.setState({
+              [key]: stateForId[key]
+            });
+          }
+        });
+      }
+    }
+  },
+
+  displaySimilarity(value) {
+    return isNaN(value) ? '' : `${Math.round(value * 100)}%`;
+  },
+
+  handleToggle(e) {
+    let {issue} = this.props;
+
+    // clicking anywhere in the row will toggle the checkbox
+    GroupingActions.toggleMerge(issue.id);
+  },
+
+  render() {
+    let {score, issue, orgId, projectId} = this.props;
+
+    if (!this.state.visible) {
+      return null;
+    }
+
+    return (
+      <SplitLayout className="group similar-issue" responsive onClick={this.handleToggle}>
+        <SpreadLayout>
+          <div className="event-details">
+            <EventOrGroupHeader
+              orgId={orgId}
+              projectId={projectId}
+              data={issue}
+              hideLevel
+            />
+            <EventOrGroupExtraDetails
+              {...issue}
+              groupId={issue.id}
+              orgId={orgId}
+              projectId={projectId}
+              group
+            />
+          </div>
+
+          <Count className="event-count" value={issue.count} />
+        </SpreadLayout>
+
+        <SpreadLayout>
+          <div className="similarity-score">
+            {Object.keys(score).map(scoreKey => {
+              const color = `hsl(${score[scoreKey] * 100},40%,50%)`;
+              return (
+                <div key={scoreKey} className="similarity-score-row">
+                  <div className="similarity-score-label">
+                    <span>
+                      {scoreComponents[scoreKey]}
+                    </span>
+                    <span
+                      style={{
+                        fontWeight: 'bold',
+                        color
+                      }}>
+                      {this.displaySimilarity(score[scoreKey])}
+                    </span>
+                  </div>
+                  <div
+                    className="similarity-score-bar"
+                    style={{
+                      width: `${Math.round(score[scoreKey] * 100)}%`,
+                      backgroundColor: color
+                    }}
+                  />
+                </div>
+              );
+            })}
+          </div>
+
+          <div className="action-column">
+            <Checkbox id={issue.id} value={issue.id} checked={this.state.checked} />
+          </div>
+        </SpreadLayout>
+      </SplitLayout>
+    );
+  }
+});
+
+export default SimilarIssueItem;
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/similarList.jsx b/src/sentry/static/sentry/app/views/groupGrouping/similarList.jsx
new file mode 100644
index 0000000000..3e40a47cc9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/similarList.jsx
@@ -0,0 +1,94 @@
+import React, {PropTypes} from 'react';
+
+import {t} from '../../locale';
+import {Group} from '../../proptypes';
+
+import Pagination from '../../components/pagination';
+
+import SimilarToolbar from './similarToolbar';
+import SimilarItem from './similarItem';
+
+const SimilarItemPropType = PropTypes.shape({
+  issue: Group,
+  score: PropTypes.object,
+  avgScore: PropTypes.number,
+  isBelowThreshold: PropTypes.bool
+});
+
+const SimilarList = React.createClass({
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    onMerge: PropTypes.func.isRequired,
+    pageLinks: PropTypes.string,
+    items: PropTypes.arrayOf(SimilarItemPropType),
+    filteredItems: PropTypes.arrayOf(SimilarItemPropType)
+  },
+
+  getInitialState() {
+    return {
+      showAllItems: false
+    };
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>
+          {t('There are no similar issues.')}
+        </p>
+      </div>
+    );
+  },
+
+  render() {
+    let {orgId, projectId, items, filteredItems, pageLinks, onMerge} = this.props;
+    let hasHiddenItems = !!filteredItems.length;
+    let hasResults = items.length > 0 || hasHiddenItems;
+
+    if (hasResults) {
+      return (
+        <div className="grouping-list-container grouping-similar-list-container">
+          <h2>{t('Similar Issues')}</h2>
+          <SimilarToolbar onMerge={onMerge} />
+
+          <div className="grouping-list">
+            {items.map(item => (
+              <SimilarItem
+                key={item.issue.id}
+                orgId={orgId}
+                projectId={projectId}
+                {...item}
+              />
+            ))}
+
+            {this.state.showAllItems &&
+              filteredItems.map(item => (
+                <SimilarItem
+                  key={item.issue.id}
+                  orgId={orgId}
+                  projectId={projectId}
+                  {...item}
+                />
+              ))}
+            {hasHiddenItems &&
+              !this.state.showAllItems &&
+              <div className="similar-items-footer">
+                <button
+                  className="btn btn-default btn-xl"
+                  onClick={() => this.setState({showAllItems: true})}>
+                  Show {filteredItems.length} issues below threshold
+                </button>
+              </div>}
+          </div>
+          <Pagination pageLinks={pageLinks} />
+        </div>
+      );
+    }
+
+    return this.renderEmpty();
+  }
+});
+
+export default SimilarList;
diff --git a/src/sentry/static/sentry/app/views/groupGrouping/similarToolbar.jsx b/src/sentry/static/sentry/app/views/groupGrouping/similarToolbar.jsx
new file mode 100644
index 0000000000..d0430d6c8d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupGrouping/similarToolbar.jsx
@@ -0,0 +1,68 @@
+import React, {PropTypes} from 'react';
+import Reflux from 'reflux';
+
+import {t} from '../../locale';
+import GroupingStore from '../../stores/groupingStore';
+
+import SpreadLayout from '../../components/spreadLayout';
+import SplitLayout from '../../components/splitLayout';
+import LinkWithConfirmation from '../../components/linkWithConfirmation';
+
+const SimilarToolbar = React.createClass({
+  propTypes: {
+    onMerge: PropTypes.func.isRequired
+  },
+
+  mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
+
+  getInitialState() {
+    return {
+      mergeCount: 0
+    };
+  },
+
+  onGroupingUpdate({mergeList}) {
+    if (mergeList && mergeList.size !== this.state.mergedCount) {
+      this.setState({
+        mergeCount: mergeList.size
+      });
+    }
+  },
+
+  render() {
+    let {onMerge} = this.props;
+    return (
+      <div className="grouping-toolbar stream-actions">
+        <SplitLayout responsive>
+          <SpreadLayout>
+            <div className="stream-actions-header">
+              {t('Issue')}
+            </div>
+            <div className="stream-actions-header event-count-header">
+              {t('Events')}
+            </div>
+          </SpreadLayout>
+
+          <SpreadLayout>
+            <div className="stream-actions-header event-similar-header">
+              {t('Similarity Score')}
+            </div>
+            <div className="grouping-toolbar-actions">
+              <LinkWithConfirmation
+                disabled={this.state.mergeCount === 0}
+                title={t(`Merging ${this.state.mergeCount} issues`)}
+                message={t('Are you sure you want to merge these issues?')}
+                className="btn btn btn-default"
+                onConfirm={onMerge}>
+                {t('Merge')}
+                {this.state.mergeCount ? ` (${this.state.mergeCount})` : null}
+              </LinkWithConfirmation>
+            </div>
+          </SpreadLayout>
+        </SplitLayout>
+      </div>
+    );
+  }
+});
+
+export default SimilarToolbar;
diff --git a/src/sentry/static/sentry/app/views/similarIssues.jsx b/src/sentry/static/sentry/app/views/similarIssues.jsx
index 0752c3a1d9..9607dec742 100644
--- a/src/sentry/static/sentry/app/views/similarIssues.jsx
+++ b/src/sentry/static/sentry/app/views/similarIssues.jsx
@@ -1,19 +1,19 @@
-import React from 'react';
-import {Link} from 'react-router';
+import React, {PropTypes} from 'react';
 
+import {t} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
-import DateTime from '../components/dateTime';
 import GroupState from '../mixins/groupState';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import Pagination from '../components/pagination';
-import {t} from '../locale';
+import SimilarIssueItem from '../components/SimilarIssueItem';
 
 const GroupEvents = React.createClass({
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  propTypes: {
+    query: PropTypes.string
+  },
+
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     return {
@@ -21,6 +21,8 @@ const GroupEvents = React.createClass({
       loading: true,
       error: false,
       pageLinks: '',
+      hidden: {},
+      busy: {}
     };
   },
 
@@ -29,21 +31,17 @@ const GroupEvents = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.params.groupId !== this.props.params.groupId ||
-        nextProps.location.search !== this.props.location.search) {
+    if (
+      nextProps.params.groupId !== this.props.params.groupId ||
+      nextProps.location.search !== this.props.location.search
+    ) {
       this.fetchData();
     }
   },
 
   getEndpoint() {
     let params = this.props.params;
-    // let queryParams = {
-    //   ...this.props.location.query,
-    //   limit: 50,
-    //   query: this.state.query
-    // };
-
-    return `/issues/${params.groupId}/similar/`;//`?${jQuery.param(queryParams)}`;
+    return `/issues/${params.groupId}/similar/`;
   },
 
   fetchData() {
@@ -63,7 +61,7 @@ const GroupEvents = React.createClass({
           pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
-      error: (err) => {
+      error: err => {
         let error = err.responseJSON || true;
         error = error.detail || true;
         this.setState({
@@ -74,144 +72,91 @@ const GroupEvents = React.createClass({
     });
   },
 
-  // getEventTitle(event) {
-  //   switch (event.type) {
-  //     case 'error':
-  //       if (event.metadata.type && event.metadata.value)
-  //         return `${event.metadata.type}: ${event.metadata.value}`;
-  //       return event.metadata.type || event.metadata.value || event.metadata.title;
-  //     case 'csp':
-  //       return event.metadata.message;
-  //     case 'default':
-  //       return event.metadata.title;
-  //     default:
-  //       return event.message.split('\n')[0];
-  //   }
-  // },
-
-  renderEmpty() {
-    return (
-      <div className="box empty-stream">
-        <span className="icon icon-exclamation" />
-        <p>{t('Found no similar issues.')}</p>
-      </div>
-    );
-  },
-
-  scoreComponents : {
-    'exception:message:character-shingles': 'exception',
-    'exception:stacktrace:application-chunks': 'application code paths',
-    'exception:stacktrace:pairs': 'stacktrace',
-    'message:message:character-shingles': 'message',
-  },
-
-  displaySimilarity(value) {
-    return isNaN(value) ? '' : `${Math.round(value * 100)}%`;
-  },
-
-  renderResults() {
-    let tagList = ['count'];//, 'culprit'];
-
-    let {orgId, projectId, groupId} = this.props.params;
-
-    let seenScoreComponents = {};
+  handleMerge({issue}, e) {
+    const {query, params} = this.props;
 
-    this.state.issueList.forEach(([_, score]) => {
-      for(let sc in this.scoreComponents){
-        if(score[sc]){
-          seenScoreComponents[sc] = this.scoreComponents[sc];
+    if (params) {
+      this.setState({
+        ...this.state,
+        busy: {
+          ...this.state.busy,
+          [issue.id]: true
         }
-      }
-    });
-
-    let children = this.state.issueList.map(([issue, score]) => {
-      let tagMap = tagList.map( (key) => {
-        return {key, value:issue[key]};
       });
-      let scoreElements = Object.keys(seenScoreComponents).map(key=>{
-          return (<td key={key}>
-            <span className="similarity-score" style={{backgroundColor:`hsl(${score[key] * 100},40%,80%)`, padding:'9px',display:'block', textAlign:'center', margin:'0 auto'}}>
-            {this.displaySimilarity(score[key])}
-          </span>
-          </td>);
-      });
-      return (
-        <tr key={issue.id}>
-          <td>
-            <h5>
-              <Link to={`/${orgId}/${projectId}/issues/${groupId}/events/${issue.id}/`}>
-                {(issue.title || '').substr(0, 70)}
-              </Link>
-              <small><DateTime date={issue.firstSeen} /></small>
-            </h5>
-          </td>
-          {tagMap.map((tag) => {
-            return (
-              <td key={tag.key}>
-                {tag.value.substr(0,100)}
-              </td>
-            );
-          })}
-          {scoreElements}
-          <td key="button">
-            <a className="btn btn-default">merge</a>
-          </td>
-        </tr>
-      );
-    });
 
-    let scoreHeaders = Object.keys(seenScoreComponents).map(key=>{
-        return (<th key={key}>{seenScoreComponents[key]} similarity</th>);
-    });
+      const {groupId, orgId, projectId} = params;
+      if (groupId && orgId && projectId) {
+        this.api.merge(
+          {
+            orgId,
+            projectId,
+            itemIds: [params.groupId, issue.id],
+            query
+          },
+          {
+            success: () => {
+              this.setState({
+                ...this.state,
+                hidden: {
+                  ...this.state.hidden,
+                  [issue.id]: true
+                }
+              });
+            },
+            error: () => {
+              this.setState({
+                ...this.state,
+                busy: {
+                  ...this.state.busy,
+                  [issue.id]: false
+                }
+              });
+            }
+          }
+        );
+      }
+    }
+  },
+
+  renderEmpty() {
     return (
-      <div>
-        <div className="event-list">
-          <table className="table">
-            <thead>
-              <tr>
-                <th>{t('title')}</th>
-                {tagList.map((tag) => {
-                  return (
-                    <th key={tag}>
-                      {tag}
-                    </th>
-                  );
-                })}
-                {scoreHeaders}
-                <th key="button">
-                  Merge
-                </th>
-              </tr>
-            </thead>
-            <tbody>
-              {children}
-            </tbody>
-          </table>
-        </div>
-        <Pagination pageLinks={this.state.pageLinks}/>
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>
+          {t('Found no similar issues.')}
+        </p>
       </div>
     );
   },
 
-  renderBody() {
-    let body;
-
-    if (this.state.loading)
-      body = <LoadingIndicator />;
-    else if (this.state.error)
-      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
-    else if (this.state.issueList.length > 0)
-      body = this.renderResults();
-    else
-      body = this.renderEmpty();
-
-    return body;
-  },
-
   render() {
+    let {orgId, projectId} = this.props.params;
+    const isLoading = this.state.loading;
+    const isError = this.state.error && !isLoading;
+    const hasResults = this.state.issueList.length > 0 && !isError && !isLoading;
+    const noResults = !hasResults && !isError && !isLoading;
+
     return (
       <div>
-        {this.renderBody()}
+        {isLoading && <LoadingIndicator />}
+        {isError && <LoadingError message={this.state.error} onRetry={this.fetchData} />}
+        {hasResults &&
+          <ul className="group-list">
+            {this.state.issueList.map(([issue, score]) => (
+              <SimilarIssueItem
+                key={issue.id}
+                visible={!this.state.hidden[issue.id]}
+                busy={this.state.busy[issue.id]}
+                orgId={orgId}
+                projectId={projectId}
+                event={issue}
+                score={score}
+                onMerge={this.handleMerge}
+              />
+            ))}
+          </ul>}
+        {hasResults && <Pagination pageLinks={this.state.pageLinks} />}
+        {noResults && this.renderEmpty()}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/less/component-layouts.less b/src/sentry/static/sentry/less/component-layouts.less
new file mode 100644
index 0000000000..72a80b84d4
--- /dev/null
+++ b/src/sentry/static/sentry/less/component-layouts.less
@@ -0,0 +1,23 @@
+@media(max-width:629px) {
+  .split-layout {
+    &.allow-responsive {
+      flex-direction: column;
+      align-items: stretch;
+      justify-content: center;
+
+      .split-layout-child {
+        flex: 1 0 auto;
+      }
+    }
+  }
+}
+
+.split-layout-child {
+  flex: 1 0 0;
+  overflow: hidden;
+}
+.spread-layout {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+}
diff --git a/src/sentry/static/sentry/less/group-grouping.less b/src/sentry/static/sentry/less/group-grouping.less
new file mode 100644
index 0000000000..c79715a5cd
--- /dev/null
+++ b/src/sentry/static/sentry/less/group-grouping.less
@@ -0,0 +1,107 @@
+// For interface for merging/unmerging events/issues
+// Shares CSS with "stream.less" so some defs are in there
+
+.grouping-list-container {
+  margin-bottom: 24px;
+
+  h2 {
+    font-size: 18px;
+    text-transform: uppercase;
+    color: #968ba0;
+    margin-top: 20px;
+    margin-bottom: 10px;
+  }
+
+  .stream-actions-header {
+    padding: 3px 12px;
+  }
+
+  .event-count-header {
+    padding-right: 0;
+    padding-left: 12px;
+  }
+
+  .event-count {
+    padding: 12px 12px 12px 24px;
+  }
+}
+
+.grouping-list {
+  .group {
+    padding-right: 0;
+  }
+  .event-details {
+    padding: 12px;
+  }
+  .fingerprint {
+    padding: 12px;
+  }
+  .action-column {
+    padding: 12px;
+  }
+  .event-extra {
+    ul {
+      margin-bottom: 0;
+    }
+  }
+}
+
+.grouping-similar-list-container {
+  .event-details {
+    overflow: hidden;
+  }
+}
+
+.grouping-toolbar {
+  &.stream-actions {
+    height: auto;
+    padding-right: 0;
+  }
+}
+.grouping-toolbar-actions {
+  padding: 6px;
+}
+
+.similar-items-footer {
+  display: flex;
+  justify-content: center;
+  padding: 12px;
+}
+
+.similarity-score {
+  flex: 1;
+  padding: 6px 12px;
+}
+.similarity-score-row {
+  display: flex;
+  flex-direction: column;
+  margin-bottom: 12px;
+
+  &:last-child {
+    margin-bottom: 0;
+  }
+}
+
+.similarity-score-label {
+  display: flex;
+  justify-content: space-between;
+  flex: 1;
+}
+.similarity-score-bar {
+  height: 3px;
+  border-radius: 2px;
+}
+
+.merged-event {
+  .fingerprint {
+    font-size: 12px;
+  }
+}
+
+@media(max-width: 629px) {
+  .grouping-similar-list-container {
+    .event-count-header {
+      padding-right: 12px;
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index a433391b1b..2604c486cc 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -45,3 +45,5 @@
 @import url("./setup-wizard.less");
 @import url("./spacing.less");
 @import url("./stream.less");
+@import url("./group-grouping.less");
+@import url("./component-layouts");
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 5cf06c1b9e..89ecb77651 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -116,6 +116,7 @@
     padding-top: 11px;
   }
 
+  .stream-actions-header,
   .stream-actions-count,
   .stream-actions-users,
   .stream-actions-level,
@@ -225,7 +226,7 @@
   }
 }
 
-.group-list {
+.group-list, .grouping-list {
   background: #fff;
   border: 1px solid @trim;
   border-top: 1px solid @trim;
@@ -234,7 +235,8 @@
   // position: relative;
 }
 
-.group-list, .events {
+// .grouping-list is used in a tab in an Issue
+.group-list, .events, .grouping-list {
   .list-unstyled;
 
   .group {
@@ -1240,7 +1242,7 @@
   }
 
   .stream-actions {
-    .stream-actions-count, .stream-actions-users {
+    .stream-actions-header, .stream-actions-count, .stream-actions-users {
       font-size: 13px;
       padding-top: 8px;
     }
diff --git a/tests/js/spec/components/__snapshots__/checkbox.spec.jsx.snap b/tests/js/spec/components/__snapshots__/checkbox.spec.jsx.snap
new file mode 100644
index 0000000000..175145ff04
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/checkbox.spec.jsx.snap
@@ -0,0 +1,9 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Checkbox renders 1`] = `
+<input
+  checked={false}
+  className="chk-select"
+  type="checkbox"
+/>
+`;
diff --git a/tests/js/spec/components/__snapshots__/eventOrGroupExtraDetails.spec.jsx.snap b/tests/js/spec/components/__snapshots__/eventOrGroupExtraDetails.spec.jsx.snap
new file mode 100644
index 0000000000..918bdb9baf
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/eventOrGroupExtraDetails.spec.jsx.snap
@@ -0,0 +1,230 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`EventOrGroupExtraDetails details when mentioned 1`] = `
+<div
+  className="event-extra"
+>
+  <ul>
+    <li>
+      <ShortId
+        shortId="shortId"
+      />
+    </li>
+    <li>
+      <span
+        className="icon icon-clock"
+      />
+      <TimeSince
+        date="2017-07-25T22:56:12Z"
+        suffix="ago"
+      />
+      <span>
+         — 
+      </span>
+      <TimeSince
+        date="2017-07-01T02:06:02Z"
+        suffix="old"
+      />
+    </li>
+    <li>
+      <Link
+        className="comments"
+        onlyActiveOnIndex={false}
+        style={Object {}}
+        to="/orgId/projectId/issues/groupId/activity/"
+      >
+        <span
+          className="icon icon-comments"
+          style={
+            Object {
+              "color": "#57be8c",
+            }
+          }
+        />
+        <span
+          className="tag-count"
+        >
+          14
+        </span>
+      </Link>
+    </li>
+    <li
+      className="event-annotation"
+    >
+      <Link
+        onlyActiveOnIndex={false}
+        style={Object {}}
+        to={
+          Object {
+            "pathname": "/orgId/projectId/",
+            "query": Object {
+              "query": "logger:javascript logger",
+            },
+          }
+        }
+      >
+        javascript logger
+      </Link>
+    </li>
+    <li
+      className="event-annotation"
+      dangerouslySetInnerHTML={
+        Object {
+          "__html": "annotation1",
+        }
+      }
+    />
+    <li
+      className="event-annotation"
+      dangerouslySetInnerHTML={
+        Object {
+          "__html": "annotation2",
+        }
+      }
+    />
+  </ul>
+</div>
+`;
+
+exports[`EventOrGroupExtraDetails renders all details 1`] = `
+<div
+  className="event-extra"
+>
+  <ul>
+    <li>
+      <ShortId
+        shortId="shortId"
+      />
+    </li>
+    <li>
+      <span
+        className="icon icon-clock"
+      />
+      <TimeSince
+        date="2017-07-25T22:56:12Z"
+        suffix="ago"
+      />
+      <span>
+         — 
+      </span>
+      <TimeSince
+        date="2017-07-01T02:06:02Z"
+        suffix="old"
+      />
+    </li>
+    <li>
+      <Link
+        className="comments"
+        onlyActiveOnIndex={false}
+        style={Object {}}
+        to="/orgId/projectId/issues/groupId/activity/"
+      >
+        <span
+          className="icon icon-comments"
+          style={Object {}}
+        />
+        <span
+          className="tag-count"
+        >
+          14
+        </span>
+      </Link>
+    </li>
+    <li
+      className="event-annotation"
+    >
+      <Link
+        onlyActiveOnIndex={false}
+        style={Object {}}
+        to={
+          Object {
+            "pathname": "/orgId/projectId/",
+            "query": Object {
+              "query": "logger:javascript logger",
+            },
+          }
+        }
+      >
+        javascript logger
+      </Link>
+    </li>
+    <li
+      className="event-annotation"
+      dangerouslySetInnerHTML={
+        Object {
+          "__html": "annotation1",
+        }
+      }
+    />
+    <li
+      className="event-annotation"
+      dangerouslySetInnerHTML={
+        Object {
+          "__html": "annotation2",
+        }
+      }
+    />
+  </ul>
+</div>
+`;
+
+exports[`EventOrGroupExtraDetails renders last and first seen 1`] = `
+<div
+  className="event-extra"
+>
+  <ul>
+    <li>
+      <span
+        className="icon icon-clock"
+      />
+      <TimeSince
+        date="2017-07-25T22:56:12Z"
+        suffix="ago"
+      />
+      <span>
+         — 
+      </span>
+      <TimeSince
+        date="2017-07-01T02:06:02Z"
+        suffix="old"
+      />
+    </li>
+  </ul>
+</div>
+`;
+
+exports[`EventOrGroupExtraDetails renders only first seen 1`] = `
+<div
+  className="event-extra"
+>
+  <ul>
+    <li>
+      <span
+        className="icon icon-clock"
+      />
+      <TimeSince
+        date="2017-07-01T02:06:02Z"
+        suffix="old"
+      />
+    </li>
+  </ul>
+</div>
+`;
+
+exports[`EventOrGroupExtraDetails renders only last seen 1`] = `
+<div
+  className="event-extra"
+>
+  <ul>
+    <li>
+      <span
+        className="icon icon-clock"
+      />
+      <TimeSince
+        date="2017-07-25T22:56:12Z"
+        suffix="ago"
+      />
+    </li>
+  </ul>
+</div>
+`;
diff --git a/tests/js/spec/components/__snapshots__/eventOrGroupHeader.spec.jsx.snap b/tests/js/spec/components/__snapshots__/eventOrGroupHeader.spec.jsx.snap
new file mode 100644
index 0000000000..b2e447def3
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/eventOrGroupHeader.spec.jsx.snap
@@ -0,0 +1,367 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`EventOrGroupHeader Event hides level tag 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/groupID/events/id/"
+    >
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": undefined,
+            "eventID": "eventID",
+            "groupID": "groupID",
+            "id": "id",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "default",
+          }
+        }
+        hideLevel={true}
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+</div>
+`;
+
+exports[`EventOrGroupHeader Event renders with \`type = csp\` 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/groupID/events/id/"
+    >
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": undefined,
+            "eventID": "eventID",
+            "groupID": "groupID",
+            "id": "id",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "csp",
+          }
+        }
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+  <div
+    className="event-message truncate"
+  >
+    <span
+      className="message"
+    >
+      metadata message
+    </span>
+  </div>
+</div>
+`;
+
+exports[`EventOrGroupHeader Event renders with \`type = default\` 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/groupID/events/id/"
+    >
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": undefined,
+            "eventID": "eventID",
+            "groupID": "groupID",
+            "id": "id",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "default",
+          }
+        }
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+</div>
+`;
+
+exports[`EventOrGroupHeader Event renders with \`type = error\` 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/groupID/events/id/"
+    >
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": undefined,
+            "eventID": "eventID",
+            "groupID": "groupID",
+            "id": "id",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "error",
+          }
+        }
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+  <div
+    className="event-message truncate"
+  >
+    <span
+      className="message"
+    >
+      metadata value
+    </span>
+  </div>
+</div>
+`;
+
+exports[`EventOrGroupHeader Group renders with \`type = csp\` 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/id/"
+    >
+      <span
+        className="error-level truncate"
+      >
+        error
+      </span>
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": "culprit",
+            "id": "id",
+            "level": "error",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "csp",
+          }
+        }
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+  <div
+    className="event-message truncate"
+  >
+    <span
+      className="message"
+    >
+      metadata message
+    </span>
+  </div>
+</div>
+`;
+
+exports[`EventOrGroupHeader Group renders with \`type = default\` 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/id/"
+    >
+      <span
+        className="error-level truncate"
+      >
+        error
+      </span>
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": "culprit",
+            "id": "id",
+            "level": "error",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "default",
+          }
+        }
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+  <div
+    className="event-message truncate"
+  >
+    <span
+      className="message"
+    >
+      culprit
+    </span>
+  </div>
+</div>
+`;
+
+exports[`EventOrGroupHeader Group renders with \`type = error\` 1`] = `
+<div
+  className="event-issue-header"
+>
+  <h3
+    className="truncate"
+  >
+    <Link
+      onlyActiveOnIndex={false}
+      style={Object {}}
+      to="/orgId/projectId/issues/id/"
+    >
+      <span
+        className="error-level truncate"
+      >
+        error
+      </span>
+      <span
+        className="icon icon-soundoff"
+      />
+      <span
+        className="icon icon-star-solid"
+      />
+      <EventOrGroupTitle
+        data={
+          Object {
+            "culprit": "culprit",
+            "id": "id",
+            "level": "error",
+            "metadata": Object {
+              "directive": "metadata directive",
+              "message": "metadata message",
+              "title": "metadata title",
+              "type": "metadata type",
+              "uri": "metadata uri",
+              "value": "metadata value",
+            },
+            "type": "error",
+          }
+        }
+        orgId="orgId"
+        projectId="projectId"
+      />
+    </Link>
+  </h3>
+  <div
+    className="event-message truncate"
+  >
+    <span
+      className="message"
+    >
+      metadata value
+    </span>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/__snapshots__/eventOrGroupTitle.spec.jsx.snap b/tests/js/spec/components/__snapshots__/eventOrGroupTitle.spec.jsx.snap
new file mode 100644
index 0000000000..ef6496a007
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/eventOrGroupTitle.spec.jsx.snap
@@ -0,0 +1,43 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`EventOrGroupTitle renders with no subtitle when \`type = default\` 1`] = `
+<span>
+  metadata title
+</span>
+`;
+
+exports[`EventOrGroupTitle renders with subtitle when \`type = csp\` 1`] = `
+<span>
+  <span
+    style={
+      Object {
+        "marginRight": 10,
+      }
+    }
+  >
+    metadata directive
+  </span>
+  <em>
+    metadata uri
+  </em>
+  <br />
+</span>
+`;
+
+exports[`EventOrGroupTitle renders with subtitle when \`type = error\` 1`] = `
+<span>
+  <span
+    style={
+      Object {
+        "marginRight": 10,
+      }
+    }
+  >
+    metadata type
+  </span>
+  <em>
+    culprit
+  </em>
+  <br />
+</span>
+`;
diff --git a/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap
new file mode 100644
index 0000000000..a09a4b9f00
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap
@@ -0,0 +1,57 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`SplitLayout renders with multiple children 1`] = `
+<SpreadLayout
+  className="split-layout"
+>
+  <div
+    className="split-layout-child"
+  >
+    child #1
+  </div>
+  <div
+    className="split-layout-child"
+  >
+    child #2
+  </div>
+  <div
+    className="split-layout-child"
+  >
+    child #3
+  </div>
+</SpreadLayout>
+`;
+
+exports[`SplitLayout renders with one child 1`] = `
+<SpreadLayout
+  className="split-layout"
+>
+  <div
+    className="split-layout-child"
+  >
+    child
+  </div>
+</SpreadLayout>
+`;
+
+exports[`SplitLayout renders with responsive property 1`] = `
+<SpreadLayout
+  className="split-layout allow-responsive"
+>
+  <div
+    className="split-layout-child"
+  >
+    child #1
+  </div>
+  <div
+    className="split-layout-child"
+  >
+    child #2
+  </div>
+  <div
+    className="split-layout-child"
+  >
+    child #3
+  </div>
+</SpreadLayout>
+`;
diff --git a/tests/js/spec/components/__snapshots__/spreadLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/spreadLayout.spec.jsx.snap
new file mode 100644
index 0000000000..a73ed54412
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/spreadLayout.spec.jsx.snap
@@ -0,0 +1,24 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`SpreadLayout renders with multiple children 1`] = `
+<div
+  className="spread-layout"
+>
+  <div>
+    child #1
+  </div>
+  <div>
+    child #2
+  </div>
+</div>
+`;
+
+exports[`SpreadLayout renders with one child 1`] = `
+<div
+  className="spread-layout"
+>
+  <div>
+    child
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/checkbox.spec.jsx b/tests/js/spec/components/checkbox.spec.jsx
new file mode 100644
index 0000000000..8d6e6be477
--- /dev/null
+++ b/tests/js/spec/components/checkbox.spec.jsx
@@ -0,0 +1,12 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+import Checkbox from 'app/components/checkbox';
+
+describe('Checkbox', function() {
+  it('renders', function() {
+    let component = shallow(<Checkbox />);
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx b/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx
new file mode 100644
index 0000000000..43e3d62cda
--- /dev/null
+++ b/tests/js/spec/components/eventOrGroupExtraDetails.spec.jsx
@@ -0,0 +1,89 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+import EventOrGroupExtraDetails from 'app/components/eventOrGroupExtraDetails';
+
+jest.mock('app/mixins/projectState', () => {
+  return {
+    getFeatures: () => new Set(['callsigns'])
+  };
+});
+
+describe('EventOrGroupExtraDetails', function() {
+  it('renders last and first seen', function() {
+    let component = shallow(
+      <EventOrGroupExtraDetails
+        orgId="orgId"
+        projectId="projectId"
+        groupId="groupId"
+        lastSeen="2017-07-25T22:56:12Z"
+        firstSeen="2017-07-01T02:06:02Z"
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders only first seen', function() {
+    let component = shallow(
+      <EventOrGroupExtraDetails
+        orgId="orgId"
+        projectId="projectId"
+        groupId="groupId"
+        firstSeen="2017-07-01T02:06:02Z"
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders only last seen', function() {
+    let component = shallow(
+      <EventOrGroupExtraDetails
+        orgId="orgId"
+        projectId="projectId"
+        groupId="groupId"
+        lastSeen="2017-07-25T22:56:12Z"
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders all details', function() {
+    let component = shallow(
+      <EventOrGroupExtraDetails
+        orgId="orgId"
+        projectId="projectId"
+        groupId="groupId"
+        lastSeen="2017-07-25T22:56:12Z"
+        firstSeen="2017-07-01T02:06:02Z"
+        numComments={14}
+        shortId="shortId"
+        logger="javascript logger"
+        annotations={['annotation1', 'annotation2']}
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('details when mentioned', function() {
+    let component = shallow(
+      <EventOrGroupExtraDetails
+        orgId="orgId"
+        projectId="projectId"
+        groupId="groupId"
+        lastSeen="2017-07-25T22:56:12Z"
+        firstSeen="2017-07-01T02:06:02Z"
+        numComments={14}
+        shortId="shortId"
+        logger="javascript logger"
+        annotations={['annotation1', 'annotation2']}
+        subscriptionDetails={{reason: 'mentioned'}}
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/components/eventOrGroupHeader.spec.jsx b/tests/js/spec/components/eventOrGroupHeader.spec.jsx
new file mode 100644
index 0000000000..5ea3f161fa
--- /dev/null
+++ b/tests/js/spec/components/eventOrGroupHeader.spec.jsx
@@ -0,0 +1,155 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+import EventOrGroupHeader from 'app/components/eventOrGroupHeader';
+
+const data = {
+  metadata: {
+    title: 'metadata title',
+    type: 'metadata type',
+    directive: 'metadata directive',
+    uri: 'metadata uri',
+    value: 'metadata value',
+    message: 'metadata message'
+  },
+  culprit: 'culprit'
+};
+
+describe('EventOrGroupHeader', function() {
+  describe('Group', function() {
+    const groupData = {
+      ...data,
+      level: 'error',
+      id: 'id'
+    };
+    it('renders with `type = error`', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          data={{
+            ...groupData,
+            ...{
+              type: 'error'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+
+    it('renders with `type = csp`', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          data={{
+            ...groupData,
+            ...{
+              type: 'csp'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+
+    it('renders with `type = default`', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          data={{
+            ...groupData,
+            ...{
+              type: 'default'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+  });
+
+  describe('Event', function() {
+    const eventData = {
+      ...data,
+      id: 'id',
+      eventID: 'eventID',
+      groupID: 'groupID',
+      culprit: undefined
+    };
+
+    it('renders with `type = error`', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          data={{
+            ...eventData,
+            ...{
+              type: 'error'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+
+    it('renders with `type = csp`', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          data={{
+            ...eventData,
+            ...{
+              type: 'csp'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+
+    it('renders with `type = default`', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          data={{
+            ...eventData,
+            ...{
+              type: 'default'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+
+    it('hides level tag', function() {
+      let component = shallow(
+        <EventOrGroupHeader
+          orgId="orgId"
+          projectId="projectId"
+          hideLevel
+          data={{
+            ...eventData,
+            ...{
+              type: 'default'
+            }
+          }}
+        />
+      );
+
+      expect(toJson(component)).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/components/eventOrGroupTitle.spec.jsx b/tests/js/spec/components/eventOrGroupTitle.spec.jsx
new file mode 100644
index 0000000000..24b2385372
--- /dev/null
+++ b/tests/js/spec/components/eventOrGroupTitle.spec.jsx
@@ -0,0 +1,61 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+import EventOrGroupTitle from 'app/components/eventOrGroupTitle';
+
+describe('EventOrGroupTitle', function() {
+  const data = {
+    metadata: {
+      title: 'metadata title',
+      type: 'metadata type',
+      directive: 'metadata directive',
+      uri: 'metadata uri'
+    },
+    culprit: 'culprit'
+  };
+
+  it('renders with subtitle when `type = error`', function() {
+    let component = shallow(
+      <EventOrGroupTitle
+        data={{
+          ...data,
+          ...{
+            type: 'error'
+          }
+        }}
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders with subtitle when `type = csp`', function() {
+    let component = shallow(
+      <EventOrGroupTitle
+        data={{
+          ...data,
+          ...{
+            type: 'csp'
+          }
+        }}
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders with no subtitle when `type = default`', function() {
+    let component = shallow(
+      <EventOrGroupTitle
+        data={{
+          ...data,
+          ...{
+            type: 'default'
+          }
+        }}
+      />
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/components/splitLayout.spec.jsx b/tests/js/spec/components/splitLayout.spec.jsx
new file mode 100644
index 0000000000..c6a9518f76
--- /dev/null
+++ b/tests/js/spec/components/splitLayout.spec.jsx
@@ -0,0 +1,40 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+import SplitLayout from 'app/components/splitLayout';
+
+describe('SplitLayout', function() {
+  it('renders with one child', function() {
+    let component = shallow(
+      <SplitLayout>
+        <div>child</div>
+      </SplitLayout>
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders with multiple children', function() {
+    let component = shallow(
+      <SplitLayout>
+        <div>child #1</div>
+        <div>child #2</div>
+        <div>child #3</div>
+      </SplitLayout>
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders with responsive property', function() {
+    let component = shallow(
+      <SplitLayout responsive>
+        <div>child #1</div>
+        <div>child #2</div>
+        <div>child #3</div>
+      </SplitLayout>
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/components/spreadLayout.spec.jsx b/tests/js/spec/components/spreadLayout.spec.jsx
new file mode 100644
index 0000000000..08c22a0d74
--- /dev/null
+++ b/tests/js/spec/components/spreadLayout.spec.jsx
@@ -0,0 +1,27 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import toJson from 'enzyme-to-json';
+import SpreadLayout from 'app/components/spreadLayout';
+
+describe('SpreadLayout', function() {
+  it('renders with one child', function() {
+    let component = shallow(
+      <SpreadLayout>
+        <div>child</div>
+      </SpreadLayout>
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+
+  it('renders with multiple children', function() {
+    let component = shallow(
+      <SpreadLayout>
+        <div>child #1</div>
+        <div>child #2</div>
+      </SpreadLayout>
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
+});
