commit 7ecd432fc186f6a43e2820d58f6e3a113b1a278d
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 25 21:47:26 2015 -0700

    Pull in additional context for organization details

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 8fec358510..769aeea5e7 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -1,14 +1,17 @@
 from __future__ import absolute_import
 
+import itertools
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
+from sentry import features
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
+from sentry.auth import access
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus
+    AuditLogEntry, AuditLogEntryEvent, Team, Organization, OrganizationStatus
 )
 from sentry.tasks.deletion import delete_organization
 
@@ -37,7 +40,42 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             {method} {path}
 
         """
+        team_list = Team.objects.get_for_user(
+            organization=organization,
+            user=request.user,
+            with_projects=True,
+        )
+        team_map = {
+            t[0].id: s
+            for t, s in zip(
+                team_list,
+                serialize([t for t, _ in team_list], request.user)
+            )
+        }
+
+        project_list = list(itertools.chain(*[p for _, p in team_list]))
+        project_map = {
+            p.id: s
+            for p, s in zip(
+                project_list,
+                serialize(project_list, request.user)
+            )
+        }
+
+        teams_context = []
+        for team, project_list in team_list:
+            team_data = team_map[team.id]
+            team_data['projects'] = [project_map[p.id] for p in project_list]
+            teams_context.append(team_data)
+
+        feature_list = []
+        if features.has('organizations:sso', organization, actor=request.user):
+            feature_list.append('organizations:sso')
+
         context = serialize(organization, request.user)
+        context['teams'] = teams_context
+        context['access'] = access.from_user(request.user, organization).scopes
+        context['features'] = feature_list
 
         return Response(context)
 
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index f3b6fe08ec..b852f3362a 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -15,7 +15,7 @@ class OrganizationDetailsTest(APITestCase):
             'organization_slug': org.slug,
         })
         response = self.client.get(url)
-        assert response.status_code == 200
+        assert response.status_code == 200, response.content
         assert response.data['id'] == str(org.id)
 
 
@@ -26,11 +26,11 @@ class OrganizationUpdateTest(APITestCase):
         url = reverse('sentry-api-0-organization-details', kwargs={
             'organization_slug': org.slug,
         })
-        resp = self.client.put(url, data={
+        response = self.client.put(url, data={
             'name': 'hello world',
             'slug': 'foobar',
         })
-        assert resp.status_code == 200, resp.content
+        assert response.status_code == 200, response.content
         org = Organization.objects.get(id=org.id)
         assert org.name == 'hello world'
         assert org.slug == 'foobar'
