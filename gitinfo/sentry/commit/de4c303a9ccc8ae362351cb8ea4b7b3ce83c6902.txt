commit de4c303a9ccc8ae362351cb8ea4b7b3ce83c6902
Author: Xavier Ordoquy <xordoquy@linovia.com>
Date:   Sat Jan 7 01:32:58 2012 +0100

    Refactored the site configuration for plugins.

diff --git a/sentry/plugins/sentry_bugzilla/models.py b/sentry/plugins/sentry_bugzilla/models.py
index f8a98cc3da..e5ffe51ef9 100644
--- a/sentry/plugins/sentry_bugzilla/models.py
+++ b/sentry/plugins/sentry_bugzilla/models.py
@@ -7,12 +7,8 @@ sentry.plugins.sentry_bugzilla.models
 """
 
 from django import forms
-from django.db import models
-from django.template.loader import render_to_string
-from django.template import RequestContext
 
 from sentry.plugins import Plugin
-from sentry.models import Option
 
 
 class BugzillaConfigurationForm(forms.Form):
@@ -29,44 +25,7 @@ class BugzillaSubmitForm(forms.Form):
 class CreateBugzillaIssue(Plugin):
     title = 'Create Bugzilla Issue'
     slug = 'create-bugzilla-issue'
-    site_config_title = 'Bugzilla'
 
-    @classmethod
-    def global_setting_view(cls, request, project=None):
-        """
-        Configure the plugin per project.
-
-        If the request was a POST and the data were processed here then we
-        return True to redirect.
-        Otherwise just return the view to display.
-        """
-
-        initials = {}
-        for field in BugzillaConfigurationForm.base_fields:
-            key = 'bugzilla:%s' % (field, )
-            value = Option.objects.get_value(key, None)
-            if value:
-                initials[field] = value
-
-        form = BugzillaConfigurationForm(
-            request.POST or None,
-            initial=initials,
-            prefix="bugzilla"
-        )
-        if form.is_valid():
-            for key, value in form.cleaned_data.iteritems():
-                option_key = 'bugzilla:%s' % key
-                Option.objects.set_value(option_key, value)
-
-            return True
-
-        return render_to_string(
-            'sentry/plugins/bugzilla/site_configuration.html', {
-            'form': form,
-        }, context_instance=RequestContext(request))
-
-    def project_setting_view(self):
-        """
-        Configure the plugin per project.
-        """
-        return None
+    site_conf_title = 'Bugzilla'
+    site_conf_form = BugzillaConfigurationForm
+    site_conf_template = 'sentry/plugins/bugzilla/site_configuration.html'
diff --git a/sentry/templates/sentry/status.html b/sentry/templates/sentry/status.html
index 0d3988efcc..c13692e6e2 100644
--- a/sentry/templates/sentry/status.html
+++ b/sentry/templates/sentry/status.html
@@ -14,7 +14,7 @@
             <li><a href="#packages">Packages</a></li>
             <li><a href="#workers">Workers</a></li>
             {% for conf in site_configs %}
-            <li><a href="#config_{{conf.slug}}">{{conf.site_config_title|default:conf.title}}</a></li>
+            <li><a href="#config_{{conf.slug}}">{{conf.site_conf_title|default:conf.title}}</a></li>
             {% endfor %}
         </ul>
         <div class="tab-content">
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index 17c1f32c7e..da3bdf5100 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -14,9 +14,12 @@ from django.db.models import Sum
 from django.http import HttpResponseRedirect, Http404, HttpResponseNotModified, \
   HttpResponse
 from djkombu.models import Queue
+from django.template.loader import render_to_string
+from django.template import RequestContext
 
 from sentry import environment
 from sentry.conf import settings
+from sentry.models import Option
 from sentry.plugins import Plugin
 from sentry.web.decorators import login_required
 from sentry.web.helpers import get_project_list, render_to_response, \
@@ -33,6 +36,39 @@ def dashboard(request):
     return render_to_response('sentry/dashboard.html', request=request)
 
 
+def _site_config(plugin, request):
+    """
+    Configure the plugin site wide.
+
+    returns a tuple composed of a redirection boolean and the content to
+    be displayed.
+    """
+
+    plugin_key = plugin.site_conf_title.lower()
+    initials = {}
+    for field in plugin.site_conf_form.base_fields:
+        key = '%s:%s' % (plugin_key, field)
+        value = Option.objects.get_value(key, None)
+        if value:
+            initials[field] = value
+
+    form = plugin.site_conf_form(
+        request.POST or None,
+        initial=initials,
+        prefix=plugin_key
+    )
+    if form.is_valid():
+        for key, value in form.cleaned_data.iteritems():
+            option_key = '%s:%s' % (plugin_key, key)
+            Option.objects.set_value(option_key, value)
+
+        return ('redirect', None)
+
+    return ('display', render_to_string(plugin.site_conf_template, {
+            'form': form,
+        }, context_instance=RequestContext(request)))
+
+
 @login_required
 def status(request):
     from sentry.views import View
@@ -41,13 +77,14 @@ def status(request):
     # Deal with the plugins
     site_configs = []
     for name, cls in Plugin.plugins.iteritems():
-        if hasattr(cls, 'global_setting_view'):
-            view = cls.global_setting_view(request, project=None)
-            if view is True:
+        if hasattr(cls, 'site_conf_form'):
+            action, view = _site_config(cls, request)
+            if action == 'redirect':
                 return redirect(request.path)
             item = {
                 'title': cls.title,
                 'slug': cls.slug,
+                'site_conf_title': cls.site_conf_title,
                 'view': view,
             }
             for prop in ('site_config_title',):
