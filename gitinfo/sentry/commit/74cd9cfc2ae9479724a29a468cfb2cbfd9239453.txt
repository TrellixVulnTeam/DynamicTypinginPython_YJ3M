commit 74cd9cfc2ae9479724a29a468cfb2cbfd9239453
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Sep 20 13:45:09 2016 -0700

    make issue plugin create/link/unlink actions overridable (#4163)
    
    * make issue plugin create/link/unlink actions overridable
    
    * pr feedback + don't load same plugin multiple times

diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 1337454b27..0865308923 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -10,6 +10,7 @@ from django.conf.urls import url
 from django.core.urlresolvers import reverse
 from django.utils.html import format_html
 
+from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.exceptions import PluginError
 from sentry.models import Activity, Event, GroupMeta
 from sentry.plugins import Plugin
@@ -334,6 +335,8 @@ class IssueTrackingPlugin2(Plugin):
                 'url': self.get_issue_url(group=group, issue_id=issue_id),
                 'label': self.get_issue_label(group=group, issue_id=issue_id),
             }
+
+        item.update(PluginSerializer(group.project).serialize(self, None, request.user))
         plugin_issues.append(item)
         return plugin_issues
 
diff --git a/src/sentry/static/sentry/app/components/bases/settingsBase.jsx b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/components/bases/settingsBase.jsx
rename to src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
index 7a7589a7f0..8a61b9b4a3 100644
--- a/src/sentry/static/sentry/app/components/bases/settingsBase.jsx
+++ b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
@@ -17,7 +17,7 @@ const callbackWithArgs = function(callback, ...args) {
 };
 
 
-class SettingsBase extends React.Component {
+class PluginComponentBase extends React.Component {
   constructor(props) {
     super(props);
 
@@ -115,4 +115,4 @@ class SettingsBase extends React.Component {
   }
 }
 
-export default SettingsBase;
+export default PluginComponentBase;
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
index 276816a4dc..61d40832a4 100644
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -1,338 +1,12 @@
 import React from 'react';
 import Modal from 'react-bootstrap/lib/Modal';
 import ApiMixin from '../../mixins/apiMixin';
-import {
-  Form,
-  FormState,
-  Select2Field,
-  Select2FieldAutocomplete,
-  TextareaField,
-  TextField
-} from '../../components/forms';
 import DropdownLink from '../../components/dropdownLink';
-import GroupActions from '../../actions/groupActions';
 import GroupState from '../../mixins/groupState';
-import LoadingError from '../../components/loadingError';
-import LoadingIndicator from '../../components/loadingIndicator';
 import MenuItem from '../../components/menuItem';
-import SettingsBase from '../../components/bases/settingsBase';
+import plugins from '../../plugins';
 import {t} from '../../locale';
-import {defined, toTitleCase} from '../../utils';
-
-class IssuePlugin extends SettingsBase {
-  constructor(props) {
-    super(props);
-
-    this.createIssue = this.onSave.bind(this, this.createIssue.bind(this));
-    this.linkIssue = this.onSave.bind(this, this.linkIssue.bind(this));
-    this.unlinkIssue = this.onSave.bind(this, this.unlinkIssue.bind(this));
-    this.onSuccess = this.onSaveSuccess.bind(this, this.onSuccess.bind(this));
-    this.errorHandler = this.onLoadError.bind(this, this.errorHandler.bind(this));
-
-    Object.assign(this.state, {
-      createFieldList: null,
-      linkFieldList: null,
-      loading: ['link', 'create'].includes(this.props.actionType),
-      state: (['link', 'create'].includes(this.props.actionType) ?
-              FormState.LOADING : FormState.READY),
-      error: null,
-      createFormData: {},
-      linkFormData: {}
-    });
-  }
-
-  getGroup() {
-    return this.props.group;
-  }
-
-  getProject() {
-    return this.props.project;
-  }
-
-  getOrganization() {
-    return this.props.organization;
-  }
-
-  componentDidMount() {
-    let plugin = this.props.plugin;
-    if (!plugin.issue && this.props.actionType !== 'unlink') {
-      this.fetchData();
-    }
-  }
-
-  getPluginCreateEndpoint() {
-    return ('/issues/' + this.getGroup().id +
-            '/plugins/' + this.props.plugin.slug + '/create/');
-  }
-
-  getPluginLinkEndpoint() {
-    return ('/issues/' + this.getGroup().id +
-            '/plugins/' + this.props.plugin.slug + '/link/');
-  }
-
-  getPluginUnlinkEndpoint() {
-    return ('/issues/' + this.getGroup().id +
-            '/plugins/' + this.props.plugin.slug + '/unlink/');
-  }
-
-  setError(error, defaultMessage) {
-    let errorBody;
-    if (error.status === 400 && error.responseJSON) {
-      errorBody = error.responseJSON;
-    } else {
-      errorBody = {message: defaultMessage};
-    }
-    this.setState({error: errorBody});
-  }
-
-  errorHandler(error) {
-    let state = {
-      loading: false
-    };
-    if (error.status === 400 && error.responseJSON) {
-      state.error = error.responseJSON;
-    } else {
-      state.error = {message: t('An unknown error occurred.')};
-    }
-    this.setState(state);
-  }
-
-  fetchData() {
-    if (this.props.actionType === 'create') {
-      this.api.request(this.getPluginCreateEndpoint(), {
-        success: (data) => {
-          let createFormData = {};
-          data.forEach((field) => {
-            createFormData[field.name] = field.default;
-          });
-          this.setState({
-            createFieldList: data,
-            error: null,
-            loading: false,
-            createFormData: createFormData
-          }, this.onLoadSuccess);
-        },
-        error: this.errorHandler
-      });
-    } else if (this.props.actionType === 'link') {
-      this.api.request(this.getPluginLinkEndpoint(), {
-        success: (data) => {
-          let linkFormData = {};
-          data.forEach((field) => {
-            linkFormData[field.name] = field.default;
-          });
-          this.setState({
-            linkFieldList: data,
-            error: null,
-            loading: false,
-            linkFormData: linkFormData
-          }, this.onLoadSuccess);
-        },
-        error: this.errorHandler
-      });
-    }
-  }
-
-  onSuccess() {
-    GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
-    this.props.onSuccess && this.props.onSuccess();
-  }
-
-  createIssue() {
-    this.api.request(this.getPluginCreateEndpoint(), {
-      data: this.state.createFormData,
-      success: this.onSuccess,
-      error: this.onSaveError.bind(this, error => {
-        this.setError(error, t('There was an error creating the issue.'));
-      }),
-      complete: this.onSaveComplete
-    });
-  }
-
-  linkIssue() {
-    this.api.request(this.getPluginLinkEndpoint(), {
-      data: this.state.linkFormData,
-      success: this.onSuccess,
-      error: this.onSaveError.bind(this, error => {
-        this.setError(error, t('There was an error linking the issue.'));
-      }),
-      complete: this.onSaveComplete
-    });
-  }
-
-  unlinkIssue() {
-    this.api.request(this.getPluginUnlinkEndpoint(), {
-      success: this.onSuccess,
-      error: this.onSaveError.bind(this, error => {
-        this.setError(error, t('There was an error unlinking the issue.'));
-      }),
-      complete: this.onSaveComplete
-    });
-  }
-
-  changeField(action, name, value) {
-    let key = action + 'FormData';
-    let formData = this.state[key];
-    formData[name] = value;
-    let state = {};
-    state[key] = formData;
-    this.setState(state);
-  }
-
-  renderField(action, field) {
-    let el;
-    let required = defined(field.required) ? field.required : true;
-    let props = {
-      value: this.state[action + 'FormData'][field.name],
-      onChange: this.changeField.bind(this, action, field.name),
-      label: field.label + (required ? '*' : ''),
-      name: field.name,
-      disabled: field.readonly,
-      help: <span dangerouslySetInnerHTML={{__html: field.help}}/>
-    };
-    switch (field.type) {
-      case 'text':
-        el = <TextField {...props} />;
-        break;
-      case 'textarea':
-        el = <TextareaField {...props} />;
-        break;
-      case 'select':
-        if (field.has_autocomplete) {
-          props.url = ('/api/0/issues/' + this.getGroup().id +
-                       '/plugins/' + this.props.plugin.slug + '/autocomplete');
-          el = <Select2FieldAutocomplete {...props} />;
-        } else {
-          props.choices = field.choices;
-          el = <Select2Field {...props} />;
-        }
-        break;
-      default:
-        el = null;
-    }
-    return el;
-  }
-
-  renderForm() {
-    let form;
-    switch (this.props.actionType) {
-      case 'create':
-        if (this.state.createFieldList) {
-          form = (
-            <Form onSubmit={this.createIssue} submitLabel={t('Create Issue')}
-                  footerClass="">
-              {this.state.createFieldList.map((field) => {
-                return <div key={field.name}>{this.renderField('create', field)}</div>;
-              })}
-            </Form>
-          );
-        }
-        break;
-      case 'link':
-        if (this.state.linkFieldList) {
-          form = (
-            <Form onSubmit={this.linkIssue} submitLabel={t('Link Issue')}
-                  footerClass="">
-              {this.state.linkFieldList.map((field) => {
-                return <div key={field.name}>{this.renderField('link', field)}</div>;
-              })}
-            </Form>
-          );
-        }
-        break;
-      case 'unlink':
-        form = (
-          <div>
-            <p>{t('Are you sure you want to unlink this issue?')}</p>
-            <button onClick={this.unlinkIssue}
-                    className="btn btn-danger">{t('Unlink Issue')}</button>
-          </div>
-        );
-        break;
-      default:
-        form = null;
-    }
-    return form;
-  }
-
-  getPluginConfigureUrl() {
-    let org = this.getOrganization();
-    let project = this.getProject();
-    let plugin = this.props.plugin;
-    return '/' + org.slug + '/' + project.slug + '/settings/plugins/' + plugin.slug;
-  }
-
-  renderError() {
-    let error = this.state.error;
-    if (!error) {
-      return null;
-    }
-    if (error.error_type === 'auth') {
-      return (
-        <div>
-          <div className="alert alert-warning m-b-1">
-            {'You need to associate an identity with ' + error.title +
-             ' before you can create issues with this service.'}
-          </div>
-          <a className="btn btn-primary" href={error.auth_url}>
-            Associate Identity
-          </a>
-        </div>
-      );
-    } else if (error.error_type === 'config') {
-      return (
-        <div className="alert alert-block">
-            {!error.has_auth_configured ?
-                <div>
-                  <p>{'Your server administrator will need to configure authentication with '}
-                  <strong>{error.auth_provider}</strong>{' before you can use this plugin.'}</p>
-                  <p>The following settings must be configured:</p>
-                  <ul>{error.required_auth_settings.map((setting) => {
-                    return <li><code>{setting}</code></li>;
-                  })}</ul>
-                </div>
-              :
-              <p>You still need to <a href={this.getPluginConfigureUrl()}>configure this plugin</a> before you can use it.</p>}
-        </div>
-      );
-    } else if (error.error_type === 'validation') {
-      let errors = [];
-      for (let name in error.errors) {
-        errors.push(<p key={name}>{error.errors[name]}</p>);
-      }
-      return (
-        <div className="alert alert-error alert-block">
-          {errors}
-        </div>
-      );
-    } else if (error.message) {
-      return (
-        <div className="alert alert-error alert-block">
-          <p>{error.message}</p>
-        </div>
-      );
-    }
-    return <LoadingError/>;
-  }
-
-  render() {
-    if (this.state.state === FormState.LOADING) {
-      return <LoadingIndicator />;
-    }
-    return (
-      <div>
-        {this.renderError()}
-        {this.renderForm()}
-      </div>
-    );
-  }
-}
-
-IssuePlugin.propTypes = {
-  plugin: React.PropTypes.object.isRequired,
-  actionType: React.PropTypes.oneOf(['unlink', 'link', 'create']).isRequired,
-  onSuccess: React.PropTypes.func
-};
+import {toTitleCase} from '../../utils';
 
 
 const IssuePluginActions = React.createClass({
@@ -348,16 +22,37 @@ const IssuePluginActions = React.createClass({
   getInitialState() {
     return {
       showModal: false,
-      actionType: null
+      actionType: null,
+      pluginLoading: false
     };
   },
 
+  componentWillMount() {
+    this.loadPlugin(this.props.plugin);
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.props.plugin.id !== nextProps.plugin.id) {
+      this.loadPlugin(nextProps.plugin);
+    }
+  },
+
   ACTION_LABELS: {
     create: t('Create New Issue'),
     link: t('Link with Existing Issue'),
     unlink: t('Unlink Issue')
   },
 
+  loadPlugin(data) {
+    this.setState({
+      pluginLoading: true,
+    }, () => {
+      plugins.load(data, () => {
+        this.setState({pluginLoading: false});
+      });
+    });
+  },
+
   openModal(action) {
     this.setState({
       showModal: true,
@@ -424,13 +119,16 @@ const IssuePluginActions = React.createClass({
             <Modal.Title>{plugin.title + ' Issue'}</Modal.Title>
           </Modal.Header>
           <Modal.Body>
-            {this.state.actionType &&
-              <IssuePlugin plugin={this.props.plugin}
-                           group={this.getGroup()}
-                           project={this.getProject()}
-                           organization={this.getOrganization()}
-                           actionType={this.state.actionType}
-                           onSuccess={this.closeModal}/>
+            {!this.state.pluginLoading &&
+                this.state.actionType &&
+                plugins.get(this.props.plugin).renderGroupActions({
+                    plugin: this.props.plugin,
+                    group: this.getGroup(),
+                    project: this.getProject(),
+                    organization: this.getOrganization(),
+                    actionType: this.state.actionType,
+                    onSuccess: this.closeModal
+                })
             }
           </Modal.Body>
         </Modal>
diff --git a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
new file mode 100644
index 0000000000..bc74e0a29a
--- /dev/null
+++ b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
@@ -0,0 +1,333 @@
+import React from 'react';
+
+import {
+  Form,
+  FormState,
+  Select2Field,
+  Select2FieldAutocomplete,
+  TextareaField,
+  TextField
+} from '../../components/forms';
+import GroupActions from '../../actions/groupActions';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import PluginComponentBase from '../../components/bases/pluginComponentBase';
+import {t} from '../../locale';
+import {defined} from '../../utils';
+
+class IssueActions extends PluginComponentBase {
+  constructor(props) {
+    super(props);
+
+    this.createIssue = this.onSave.bind(this, this.createIssue.bind(this));
+    this.linkIssue = this.onSave.bind(this, this.linkIssue.bind(this));
+    this.unlinkIssue = this.onSave.bind(this, this.unlinkIssue.bind(this));
+    this.onSuccess = this.onSaveSuccess.bind(this, this.onSuccess.bind(this));
+    this.errorHandler = this.onLoadError.bind(this, this.errorHandler.bind(this));
+
+    Object.assign(this.state, {
+      createFieldList: null,
+      linkFieldList: null,
+      loading: ['link', 'create'].includes(this.props.actionType),
+      state: (['link', 'create'].includes(this.props.actionType) ?
+              FormState.LOADING : FormState.READY),
+      error: null,
+      createFormData: {},
+      linkFormData: {}
+    });
+  }
+
+  getGroup() {
+    return this.props.group;
+  }
+
+  getProject() {
+    return this.props.project;
+  }
+
+  getOrganization() {
+    return this.props.organization;
+  }
+
+  componentDidMount() {
+    let plugin = this.props.plugin;
+    if (!plugin.issue && this.props.actionType !== 'unlink') {
+      this.fetchData();
+    }
+  }
+
+  getPluginCreateEndpoint() {
+    return ('/issues/' + this.getGroup().id +
+            '/plugins/' + this.props.plugin.slug + '/create/');
+  }
+
+  getPluginLinkEndpoint() {
+    return ('/issues/' + this.getGroup().id +
+            '/plugins/' + this.props.plugin.slug + '/link/');
+  }
+
+  getPluginUnlinkEndpoint() {
+    return ('/issues/' + this.getGroup().id +
+            '/plugins/' + this.props.plugin.slug + '/unlink/');
+  }
+
+  setError(error, defaultMessage) {
+    let errorBody;
+    if (error.status === 400 && error.responseJSON) {
+      errorBody = error.responseJSON;
+    } else {
+      errorBody = {message: defaultMessage};
+    }
+    this.setState({error: errorBody});
+  }
+
+  errorHandler(error) {
+    let state = {
+      loading: false
+    };
+    if (error.status === 400 && error.responseJSON) {
+      state.error = error.responseJSON;
+    } else {
+      state.error = {message: t('An unknown error occurred.')};
+    }
+    this.setState(state);
+  }
+
+  fetchData() {
+    if (this.props.actionType === 'create') {
+      this.api.request(this.getPluginCreateEndpoint(), {
+        success: (data) => {
+          let createFormData = {};
+          data.forEach((field) => {
+            createFormData[field.name] = field.default;
+          });
+          this.setState({
+            createFieldList: data,
+            error: null,
+            loading: false,
+            createFormData: createFormData
+          }, this.onLoadSuccess);
+        },
+        error: this.errorHandler
+      });
+    } else if (this.props.actionType === 'link') {
+      this.api.request(this.getPluginLinkEndpoint(), {
+        success: (data) => {
+          let linkFormData = {};
+          data.forEach((field) => {
+            linkFormData[field.name] = field.default;
+          });
+          this.setState({
+            linkFieldList: data,
+            error: null,
+            loading: false,
+            linkFormData: linkFormData
+          }, this.onLoadSuccess);
+        },
+        error: this.errorHandler
+      });
+    }
+  }
+
+  onSuccess() {
+    GroupActions.updateSuccess(null, [this.getGroup().id], {stale: true});
+    this.props.onSuccess && this.props.onSuccess();
+  }
+
+  createIssue() {
+    this.api.request(this.getPluginCreateEndpoint(), {
+      data: this.state.createFormData,
+      success: this.onSuccess,
+      error: this.onSaveError.bind(this, error => {
+        this.setError(error, t('There was an error creating the issue.'));
+      }),
+      complete: this.onSaveComplete
+    });
+  }
+
+  linkIssue() {
+    this.api.request(this.getPluginLinkEndpoint(), {
+      data: this.state.linkFormData,
+      success: this.onSuccess,
+      error: this.onSaveError.bind(this, error => {
+        this.setError(error, t('There was an error linking the issue.'));
+      }),
+      complete: this.onSaveComplete
+    });
+  }
+
+  unlinkIssue() {
+    this.api.request(this.getPluginUnlinkEndpoint(), {
+      success: this.onSuccess,
+      error: this.onSaveError.bind(this, error => {
+        this.setError(error, t('There was an error unlinking the issue.'));
+      }),
+      complete: this.onSaveComplete
+    });
+  }
+
+  changeField(action, name, value) {
+    let key = action + 'FormData';
+    let formData = this.state[key];
+    formData[name] = value;
+    let state = {};
+    state[key] = formData;
+    this.setState(state);
+  }
+
+  renderField(action, field) {
+    let el;
+    let required = defined(field.required) ? field.required : true;
+    let props = {
+      value: this.state[action + 'FormData'][field.name],
+      onChange: this.changeField.bind(this, action, field.name),
+      label: field.label + (required ? '*' : ''),
+      name: field.name,
+      disabled: field.readonly,
+      help: <span dangerouslySetInnerHTML={{__html: field.help}}/>
+    };
+    switch (field.type) {
+      case 'text':
+        el = <TextField {...props} />;
+        break;
+      case 'textarea':
+        el = <TextareaField {...props} />;
+        break;
+      case 'select':
+        if (field.has_autocomplete) {
+          props.url = ('/api/0/issues/' + this.getGroup().id +
+                       '/plugins/' + this.props.plugin.slug + '/autocomplete');
+          el = <Select2FieldAutocomplete {...props} />;
+        } else {
+          props.choices = field.choices;
+          el = <Select2Field {...props} />;
+        }
+        break;
+      default:
+        el = null;
+    }
+    return el;
+  }
+
+  renderForm() {
+    let form;
+    switch (this.props.actionType) {
+      case 'create':
+        if (this.state.createFieldList) {
+          form = (
+            <Form onSubmit={this.createIssue} submitLabel={t('Create Issue')}
+                  footerClass="">
+              {this.state.createFieldList.map((field) => {
+                return <div key={field.name}>{this.renderField('create', field)}</div>;
+              })}
+            </Form>
+          );
+        }
+        break;
+      case 'link':
+        if (this.state.linkFieldList) {
+          form = (
+            <Form onSubmit={this.linkIssue} submitLabel={t('Link Issue')}
+                  footerClass="">
+              {this.state.linkFieldList.map((field) => {
+                return <div key={field.name}>{this.renderField('link', field)}</div>;
+              })}
+            </Form>
+          );
+        }
+        break;
+      case 'unlink':
+        form = (
+          <div>
+            <p>{t('Are you sure you want to unlink this issue?')}</p>
+            <button onClick={this.unlinkIssue}
+                    className="btn btn-danger">{t('Unlink Issue')}</button>
+          </div>
+        );
+        break;
+      default:
+        form = null;
+    }
+    return form;
+  }
+
+  getPluginConfigureUrl() {
+    let org = this.getOrganization();
+    let project = this.getProject();
+    let plugin = this.props.plugin;
+    return '/' + org.slug + '/' + project.slug + '/settings/plugins/' + plugin.slug;
+  }
+
+  renderError() {
+    let error = this.state.error;
+    if (!error) {
+      return null;
+    }
+    if (error.error_type === 'auth') {
+      return (
+        <div>
+          <div className="alert alert-warning m-b-1">
+            {'You need to associate an identity with ' + error.title +
+             ' before you can create issues with this service.'}
+          </div>
+          <a className="btn btn-primary" href={error.auth_url}>
+            Associate Identity
+          </a>
+        </div>
+      );
+    } else if (error.error_type === 'config') {
+      return (
+        <div className="alert alert-block">
+            {!error.has_auth_configured ?
+                <div>
+                  <p>{'Your server administrator will need to configure authentication with '}
+                  <strong>{error.auth_provider}</strong>{' before you can use this plugin.'}</p>
+                  <p>The following settings must be configured:</p>
+                  <ul>{error.required_auth_settings.map((setting) => {
+                    return <li><code>{setting}</code></li>;
+                  })}</ul>
+                </div>
+              :
+              <p>You still need to <a href={this.getPluginConfigureUrl()}>configure this plugin</a> before you can use it.</p>}
+        </div>
+      );
+    } else if (error.error_type === 'validation') {
+      let errors = [];
+      for (let name in error.errors) {
+        errors.push(<p key={name}>{error.errors[name]}</p>);
+      }
+      return (
+        <div className="alert alert-error alert-block">
+          {errors}
+        </div>
+      );
+    } else if (error.message) {
+      return (
+        <div className="alert alert-error alert-block">
+          <p>{error.message}</p>
+        </div>
+      );
+    }
+    return <LoadingError/>;
+  }
+
+  render() {
+    if (this.state.state === FormState.LOADING) {
+      return <LoadingIndicator />;
+    }
+    return (
+      <div>
+        {this.renderError()}
+        {this.renderForm()}
+      </div>
+    );
+  }
+}
+
+IssueActions.propTypes = {
+  plugin: React.PropTypes.object.isRequired,
+  actionType: React.PropTypes.oneOf(['unlink', 'link', 'create']).isRequired,
+  onSuccess: React.PropTypes.func
+};
+
+export default IssueActions;
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index 563cc8374b..882e3c691d 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -5,11 +5,11 @@ import {
   Form,
   FormState
 } from '../../components/forms';
-import SettingsBase from '../../components/bases/settingsBase';
+import PluginComponentBase from '../../components/bases/pluginComponentBase';
 import LoadingIndicator from '../../components/loadingIndicator';
 
 
-class PluginSettings extends SettingsBase {
+class PluginSettings extends PluginComponentBase {
   constructor(props) {
     super(props);
 
diff --git a/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx b/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx
new file mode 100644
index 0000000000..805240682c
--- /dev/null
+++ b/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx
@@ -0,0 +1,13 @@
+import React from 'react';
+
+import BasePlugin from './basePlugin';
+import IssueActions from './components/issueActions';
+
+
+export class DefaultIssuePlugin extends BasePlugin {
+    renderGroupActions(props) {
+        return <IssueActions plugin={this} {...props} />;
+    }
+}
+
+export default DefaultIssuePlugin;
diff --git a/src/sentry/static/sentry/app/plugins/registry.jsx b/src/sentry/static/sentry/app/plugins/registry.jsx
index ea1677ccbb..6e9cb3d3b7 100644
--- a/src/sentry/static/sentry/app/plugins/registry.jsx
+++ b/src/sentry/static/sentry/app/plugins/registry.jsx
@@ -1,4 +1,5 @@
 import {DefaultPlugin} from './defaultPlugin';
+import {DefaultIssuePlugin} from './defaultIssuePlugin';
 import {defined} from '../utils';
 
 export default class Registry {
@@ -30,7 +31,11 @@ export default class Registry {
     let remainingAssets = data.assets.length;
     let finishLoad = function() {
       if (!defined(this.plugins[data.id])) {
-        this.plugins[data.id] = DefaultPlugin;
+        if (data.type === 'issue-tracking') {
+          this.plugins[data.id] = DefaultIssuePlugin;
+        } else {
+          this.plugins[data.id] = DefaultPlugin;
+        }
       }
       console.info('[plugins] Loaded ' + data.id + ' as {' + this.plugins[data.id].name + '}');
       callback(this.get(data));
