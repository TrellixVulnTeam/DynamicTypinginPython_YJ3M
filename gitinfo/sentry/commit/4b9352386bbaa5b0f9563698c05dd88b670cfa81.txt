commit 4b9352386bbaa5b0f9563698c05dd88b670cfa81
Author: Jess MacQueen <jess@getsentry.com>
Date:   Fri Sep 9 15:18:34 2016 -0700

    fix TypeError Cannot read property 'username' of null - JAVASCRIPT-DR

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index d7899aee72..8fc0c71ba4 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -86,7 +86,7 @@ const AssigneeSelector = React.createClass({
     if (nextState.loading !== this.state.loading) {
       return true;
     }
-    return valueIsEqual(nextState.assignedTo, this.state.assignedTo, true);
+    return !valueIsEqual(nextState.assignedTo, this.state.assignedTo, true);
   },
 
   componentDidUpdate(prevProps, prevState) {
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index f7c7f83bc1..d65a6879bb 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -49,6 +49,14 @@ const valueIsEqual = function(value, other, deep) {
 const objectMatchesSubset = function(obj, other, deep){
   let k;
 
+  if (obj === other) {
+    return true;
+  }
+
+  if (!obj || !other) {
+    return false;
+  }
+
   if (deep !== true) {
     for (k in other) {
       if (obj[k] != other[k]) {
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
new file mode 100644
index 0000000000..8efabf5819
--- /dev/null
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -0,0 +1,87 @@
+import {valueIsEqual} from 'app/utils';
+
+describe('utils.valueIsEqual', function() {
+
+  it('should return true when objects are deeply equal', function() {
+    let isEqual = valueIsEqual({
+      username: 'foo',
+      teams: ['bar', 'baz'],
+      avatar: {
+        avatarType: 'gravatar',
+        avatarUuid: null
+      }
+    }, {
+      username: 'foo',
+      teams: ['bar', 'baz'],
+      avatar: {
+        avatarType: 'gravatar',
+        avatarUuid: null
+      }
+    }, true);
+    expect(isEqual).to.be.true;
+  });
+
+  it('should return false when objects are not deeply equal', function() {
+    let isEqual = valueIsEqual({
+      username: 'foo',
+      teams: ['bar', 'baz'],
+      avatar: {
+        avatarType: 'gravatar',
+        avatarUuid: null
+      }
+  }, {
+      username: 'foo',
+      teams: ['bar', 'baz'],
+      avatar: {
+        avatarType: 'notGravatar',
+        avatarUuid: null
+      }
+    }, true);
+    expect(isEqual).to.be.false;
+  });
+
+  it('should return true when objects are shalowly equal', function() {
+    let isEqual = valueIsEqual({
+      username: 'foo',
+      team: 'bar',
+      avatar: 'gravatar'
+    }, {
+      username: 'foo',
+      team: 'bar',
+      avatar: 'gravatar'
+    }, false);
+    expect(isEqual).to.be.true;
+  });
+
+  it('should return false when objects are not shalowly equal', function() {
+    let isEqual = valueIsEqual({
+      username: 'foo',
+      team: 'bar',
+      avatar: 'gravatar'
+    }, {
+      username: 'foo',
+      team: 'bar',
+      avatar: 'notGravatar'
+    }, false);
+    expect(isEqual).to.be.false;
+  });
+
+  it('should not blow up when comparing null value to an object', function() {
+    let isEqual = valueIsEqual(null, {username: 'foo'}, true);
+    expect(isEqual).to.be.false;
+
+    isEqual = valueIsEqual({
+      username: 'foo',
+      teams: ['bar', 'baz'],
+      avatar: null
+    }, {
+      username: 'foo',
+      teams: ['bar', 'baz'],
+      avatar: {
+        avatarType: 'notGravatar',
+        avatarUuid: null
+      }
+    }, true);
+    expect(isEqual).to.be.false;
+  });
+});
