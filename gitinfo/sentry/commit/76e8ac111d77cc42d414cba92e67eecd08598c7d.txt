commit 76e8ac111d77cc42d414cba92e67eecd08598c7d
Author: Scott Cooper <scttcper@gmail.com>
Date:   Mon Jun 29 16:09:21 2020 -0700

    feat(ui): Disable Create alert button (#19617)

diff --git a/src/sentry/static/sentry/app/components/createAlertButton.tsx b/src/sentry/static/sentry/app/components/createAlertButton.tsx
index fb06ae6d15..8bb61b11c0 100644
--- a/src/sentry/static/sentry/app/components/createAlertButton.tsx
+++ b/src/sentry/static/sentry/app/components/createAlertButton.tsx
@@ -7,6 +7,7 @@ import {IconInfo, IconClose, IconSiren} from 'app/icons';
 import Button from 'app/components/button';
 import EventView from 'app/utils/discover/eventView';
 import Alert from 'app/components/alert';
+import Access from 'app/components/acl/access';
 import {explodeFieldString, AGGREGATIONS, Aggregation} from 'app/utils/discover/fields';
 import {
   errorFieldConfig,
@@ -229,15 +230,25 @@ function CreateAlertButton({
   };
 
   return (
-    <Button
-      type="button"
-      icon={<IconSiren />}
-      to={to}
-      onClick={handleClick}
-      {...buttonProps}
-    >
-      {t('Create alert')}
-    </Button>
+    <Access organization={organization} access={['project:write']}>
+      {({hasAccess}) => (
+        <Button
+          type="button"
+          disabled={!hasAccess}
+          title={
+            !hasAccess
+              ? t('Users with admin permission or higher can create alert rules.')
+              : undefined
+          }
+          icon={<IconSiren />}
+          to={to}
+          onClick={handleClick}
+          {...buttonProps}
+        >
+          {t('Create alert')}
+        </Button>
+      )}
+    </Access>
   );
 }
 
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 7c79a69918..29db08379a 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -101,7 +101,7 @@ class SummaryContent extends React.Component<Props, State> {
     const {eventView, organization, projects} = this.props;
 
     return (
-      <Feature features={['internal-catchall']}>
+      <Feature features={['organizations:incidents-performance']}>
         <CreateAlertButton
           eventView={eventView}
           organization={organization}
diff --git a/tests/js/spec/components/createAlertButton.spec.jsx b/tests/js/spec/components/createAlertButton.spec.jsx
index b1ef7de096..270d71d9ef 100644
--- a/tests/js/spec/components/createAlertButton.spec.jsx
+++ b/tests/js/spec/components/createAlertButton.spec.jsx
@@ -33,8 +33,8 @@ describe('CreateAlertButton', () => {
 
   it('renders', () => {
     const eventView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
-    const component = generateWrappedComponent(organization, eventView);
-    expect(component.text()).toBe('Create alert');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    expect(wrapper.text()).toBe('Create alert');
   });
 
   it('should warn when project is not selected', () => {
@@ -42,8 +42,8 @@ describe('CreateAlertButton', () => {
       ...DEFAULT_EVENT_VIEW,
       query: 'event.type:error',
     });
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
     const errorsAlert = mountWithTheme(
       onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
@@ -59,8 +59,8 @@ describe('CreateAlertButton', () => {
       query: 'event.type:error',
       projects: [-1],
     });
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
     const errorsAlert = mountWithTheme(
       onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
@@ -76,8 +76,8 @@ describe('CreateAlertButton', () => {
       query: '',
       projects: [2],
     });
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
     const errorsAlert = mountWithTheme(
       onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
@@ -95,8 +95,8 @@ describe('CreateAlertButton', () => {
       projects: [2],
     });
     expect(eventView.getYAxis()).toBe('count_unique(issue.id)');
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
     const errorsAlert = mountWithTheme(
       onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
@@ -115,8 +115,8 @@ describe('CreateAlertButton', () => {
       projects: [2],
     });
     expect(eventView.getYAxis()).toBe('apdex(300)');
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(0);
   });
 
@@ -127,8 +127,8 @@ describe('CreateAlertButton', () => {
       yAxis: 'count_unique(issue.id)',
       projects: [],
     });
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
     const errorsAlert = mountWithTheme(
       onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
@@ -142,8 +142,8 @@ describe('CreateAlertButton', () => {
       query: 'event.type:error',
       projects: [2],
     });
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(0);
     expect(onSuccessMock).toHaveBeenCalledTimes(1);
   });
@@ -152,8 +152,8 @@ describe('CreateAlertButton', () => {
     const eventView = EventView.fromSavedQuery({
       ...DEFAULT_EVENT_VIEW,
     });
-    const component = generateWrappedComponent(organization, eventView);
-    component.simulate('click');
+    const wrapper = generateWrappedComponent(organization, eventView);
+    wrapper.simulate('click');
     expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
     const errorsAlert = mountWithTheme(
       onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
@@ -164,4 +164,19 @@ describe('CreateAlertButton', () => {
       .simulate('click');
     expect(onCloseMock).toHaveBeenCalledTimes(1);
   });
+
+  it('disables the create alert button for members', async () => {
+    const eventView = EventView.fromSavedQuery({
+      ...DEFAULT_EVENT_VIEW,
+    });
+    const noAccessOrg = {
+      ...organization,
+      access: [],
+    };
+
+    const wrapper = generateWrappedComponent(noAccessOrg, eventView);
+
+    const button = wrapper.find('button[aria-label="Create alert"]');
+    expect(button.props()['aria-disabled']).toBe(true);
+  });
 });
