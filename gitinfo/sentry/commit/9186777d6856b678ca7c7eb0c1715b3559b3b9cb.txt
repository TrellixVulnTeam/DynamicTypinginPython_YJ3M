commit 9186777d6856b678ca7c7eb0c1715b3559b3b9cb
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Nov 15 02:23:43 2012 -0800

    Correct behavior with truncating values that shouldnt be removed and reimplement fade

diff --git a/setup.py b/setup.py
index d32bee6af6..76a7df65b2 100755
--- a/setup.py
+++ b/setup.py
@@ -60,7 +60,7 @@ install_requires = [
     'logan>=0.5.1',
     'pynliner>=0.4.0',
     'python-dateutil>=1.5.0,<2.0.0',
-    'raven>=2.0.7.1',
+    'raven>=2.0.10',
     'simplejson>=2.1.6',
     'South>=0.7.6',
     'httpagentparser>=1.0.5',
diff --git a/src/sentry/static/sentry/coffee/views.coffee b/src/sentry/static/sentry/coffee/views.coffee
index aa84a584f5..cedd4fc879 100644
--- a/src/sentry/static/sentry/coffee/views.coffee
+++ b/src/sentry/static/sentry/coffee/views.coffee
@@ -12,8 +12,8 @@ jQuery ->
             @$wrapper = $('#' + @id)
             @$parent = $('<ul></ul>')
             @$empty = $('<li class="empty"></li>')
-            @loaded = if data.members then true else false
-            if @loaded
+            loaded = if data.members then true else false
+            if loaded
                 @$empty.html(@emptyMessage)
             else
                 @$empty.html(@loadingMessage)
@@ -35,10 +35,13 @@ jQuery ->
             @collection.on('reset', @reSortMembers)
             @collection.sort()
 
+            # we set this last as it has side effects
+            @loaded = loaded
+
         load: (data) ->
-            @loaded = true
             @$empty.html(@emptyMessage)
             @extend(data) if data
+            @loaded = true
 
         setEmpty: ->
             @$parent.html(@$empty)
@@ -49,9 +52,14 @@ jQuery ->
 
         addMember: (member) ->
             if not @hasMember(member)
-                # make sure we limit the number shown
-                while @collection.models.length >= @config.maxItems
-                    @collection.pop()
+                if @collection.models.length >= @config.maxItems - 1
+                    # bail early if the score is too low
+                    if member.get('score') < @collection.last().get('score')
+                        return
+
+                    # make sure we limit the number shown
+                    while @collection.models.length >= @config.maxItems
+                        @collection.pop()
 
                 @collection.add(member)
             else
@@ -105,6 +113,10 @@ jQuery ->
                     enableTagOptions: true
                     height: $(el).height()
 
+            if @loaded
+                $el.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200)
+
+
 
         renderMember: (member) ->
             view = new GroupView
@@ -144,9 +156,6 @@ jQuery ->
 
             @addMember(@queue.pop())
 
-            # # shiny fx
-            # $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200)
-
         poll: ->
             if !@config.realtime
                 window.setTimeout(@poll, @config.pollTime)
diff --git a/src/sentry/static/sentry/scripts/site.js b/src/sentry/static/sentry/scripts/site.js
index e58b87c09c..3267336ad0 100644
--- a/src/sentry/static/sentry/scripts/site.js
+++ b/src/sentry/static/sentry/scripts/site.js
@@ -438,13 +438,13 @@
       OrderedElementsView.prototype.loadingMessage = $('<p>Loading...</p>');
 
       OrderedElementsView.prototype.initialize = function(data) {
-        var _ref;
+        var loaded, _ref;
         _.bindAll(this);
         this.$wrapper = $('#' + this.id);
         this.$parent = $('<ul></ul>');
         this.$empty = $('<li class="empty"></li>');
-        this.loaded = data.members ? true : false;
-        if (this.loaded) {
+        loaded = data.members ? true : false;
+        if (loaded) {
           this.$empty.html(this.emptyMessage);
         } else {
           this.$empty.html(this.loadingMessage);
@@ -462,15 +462,16 @@
         this.collection.on('add', this.renderMemberInContainer);
         this.collection.on('remove', this.unrenderMember);
         this.collection.on('reset', this.reSortMembers);
-        return this.collection.sort();
+        this.collection.sort();
+        return this.loaded = loaded;
       };
 
       OrderedElementsView.prototype.load = function(data) {
-        this.loaded = true;
         this.$empty.html(this.emptyMessage);
         if (data) {
-          return this.extend(data);
+          this.extend(data);
         }
+        return this.loaded = true;
       };
 
       OrderedElementsView.prototype.setEmpty = function() {
@@ -489,8 +490,13 @@
 
       OrderedElementsView.prototype.addMember = function(member) {
         if (!this.hasMember(member)) {
-          while (this.collection.models.length >= this.config.maxItems) {
-            this.collection.pop();
+          if (this.collection.models.length >= this.config.maxItems - 1) {
+            if (member.get('score') < this.collection.last().get('score')) {
+              return;
+            }
+            while (this.collection.models.length >= this.config.maxItems) {
+              this.collection.pop();
+            }
           }
           return this.collection.add(member);
         } else {
@@ -542,12 +548,17 @@
             $el.insertBefore($rel);
           }
         }
-        return $el.find('.sparkline').each(function(_, el) {
+        $el.find('.sparkline').each(function(_, el) {
           return $(el).sparkline('html', {
             enableTagOptions: true,
             height: $(el).height()
           });
         });
+        if (this.loaded) {
+          return $el.css('background-color', '#ddd').animate({
+            backgroundColor: '#fff'
+          }, 1200);
+        }
       };
 
       OrderedElementsView.prototype.renderMember = function(member) {
diff --git a/tests/js/spec/OrderedElementsViewSpec.js b/tests/js/spec/OrderedElementsViewSpec.js
index 90af55fb77..5fe4bbf4c5 100644
--- a/tests/js/spec/OrderedElementsViewSpec.js
+++ b/tests/js/spec/OrderedElementsViewSpec.js
@@ -173,6 +173,45 @@ describe("OrderedElementsView", function() {
       expect(view.collection.models[0].get('id')).toBe(2);
       expect(view.collection.models[1].get('id')).toBe(1);
     });
+
+    it("doesnt move members that didnt re-rank", function(){
+      view.addMember(make_group({id: 1, score: 1}));
+      view.addMember(make_group({id: 2, score: 10}));
+      view.addMember(make_group({id: 3, score: 100}));
+      // change the score, but keep it in the same rank
+      view.addMember(make_group({id: 2, score: 50}));
+
+      expect(view.collection.models[0].get('id')).toBe(3);
+      expect(view.collection.models[1].get('id')).toBe(2);
+      expect(view.collection.models[2].get('id')).toBe(1);
+    });
+
+    it("resorts members when they change", function(){
+      view.addMember(make_group({id: 1, score: 1}));
+      view.addMember(make_group({id: 2, score: 10}));
+      view.addMember(make_group({id: 3, score: 100}));
+      // change the score so it should be at the top
+      view.addMember(make_group({id: 1, score: 1000}));
+
+      expect(view.collection.models[0].get('id')).toBe(1);
+      expect(view.collection.models[1].get('id')).toBe(3);
+      expect(view.collection.models[2].get('id')).toBe(2);
+    });
+
+    it("correctly handles truncating lowest score values", function(){
+      view.addMember(make_group({id: 1, score: 1}));
+      view.addMember(make_group({id: 2, score: 10}));
+      view.addMember(make_group({id: 3, score: 100}));
+      view.addMember(make_group({id: 4, score: 52}));
+      view.addMember(make_group({id: 5, score: 51}));
+      view.addMember(make_group({id: 2, score: 50}));
+
+      expect(view.collection.length).toBe(3);
+      expect(view.collection.models[0].get('id')).toBe(3);
+      expect(view.collection.models[1].get('id')).toBe(4);
+      expect(view.collection.models[2].get('id')).toBe(5);
+    });
+
   });
 
   describe(".renderMemberInContainer", function() {
