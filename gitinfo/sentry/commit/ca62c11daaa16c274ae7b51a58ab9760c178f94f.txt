commit ca62c11daaa16c274ae7b51a58ab9760c178f94f
Author: Priscila Oliveira <priscila.oliveira@sentry.io>
Date:   Fri Mar 6 11:39:09 2020 +0100

    ref(ui): moved org security and privacy own tab (#17456)

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 1ea8288571..9b2ce03dbb 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -378,7 +378,7 @@ export default class AsyncComponent<
    *   ['stateKeyName', '/endpoint/', {optional: 'query params'}, {options}]
    * ]
    */
-  getEndpoints(): [string, string, any?, any?][] {
+  getEndpoints(): Array<[string, string, any?, any?]> {
     const endpoint = this.getEndpoint();
     if (!endpoint) {
       return [];
diff --git a/src/sentry/static/sentry/app/components/button.tsx b/src/sentry/static/sentry/app/components/button.tsx
index 41b7c30123..9a019388bb 100644
--- a/src/sentry/static/sentry/app/components/button.tsx
+++ b/src/sentry/static/sentry/app/components/button.tsx
@@ -33,6 +33,7 @@ type Props = {
   tooltipProps?: any;
   onClick?: (e: React.MouseEvent) => void;
   forwardRef?: React.Ref<ButtonElement>;
+  name?: string;
 };
 
 type ButtonProps = Omit<React.HTMLProps<ButtonElement>, keyof Props> & Props;
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx b/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx
index 431f868c55..47a90e9e12 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueForm.tsx
@@ -124,7 +124,9 @@ class ExternalIssueForm extends AsyncComponent<Props, State> {
   getOptions = (field: IssueConfigField, input: string) =>
     new Promise((resolve, reject) => {
       if (!input) {
-        const options = (field.choices || []).map(([value, label]) => ({value, label}));
+        const choices =
+          (field.choices as Array<[number | string, number | string]>) || [];
+        const options = choices.map(([value, label]) => ({value, label}));
         return resolve({options});
       }
       return this.debouncedOptionLoad(field, input, (err, result) => {
diff --git a/src/sentry/static/sentry/app/components/switch.tsx b/src/sentry/static/sentry/app/components/switch.tsx
index a44a0fb07e..110d5f7b2f 100644
--- a/src/sentry/static/sentry/app/components/switch.tsx
+++ b/src/sentry/static/sentry/app/components/switch.tsx
@@ -6,6 +6,7 @@ type Props = {
   forwardRef?: React.Ref<HTMLButtonElement>;
   className?: string;
   id?: string;
+  name?: string;
   size?: 'sm' | 'lg';
   isActive?: boolean;
   isLoading?: boolean;
@@ -21,11 +22,13 @@ const Switch = ({
   isDisabled,
   toggle,
   id,
+  name,
   className,
 }: Props) => (
   <SwitchButton
     ref={forwardRef}
     id={id}
+    name={name}
     type="button"
     className={className}
     onClick={isDisabled ? undefined : toggle}
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 5ff3cad389..b064bf1af0 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -1,12 +1,5 @@
-import React from 'react';
-
-import {extractMultilineFields} from 'app/utils';
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import slugify from 'app/utils/slugify';
-import {
-  STORE_CRASH_REPORTS_VALUES,
-  formatStoreCrashReports,
-} from 'app/utils/crashReports';
 
 // Export route to make these forms searchable by label/help
 export const route = '/settings/:orgId/';
@@ -72,213 +65,6 @@ const formGroups = [
       },
     ],
   },
-
-  {
-    title: t('Security & Privacy'),
-    fields: [
-      {
-        name: 'require2FA',
-        type: 'boolean',
-        label: t('Require Two-Factor Authentication'),
-        help: t('Require and enforce two-factor authentication for all members'),
-        confirm: {
-          true: t(
-            'This will remove all members without two-factor authentication' +
-              ' from your organization. It will also send them an email to setup 2FA' +
-              ' and reinstate their access and settings. Do you want to continue?'
-          ),
-          false: t(
-            'Are you sure you want to allow users to access your organization without having two-factor authentication enabled?'
-          ),
-        },
-      },
-      {
-        name: 'allowSharedIssues',
-        type: 'boolean',
-
-        label: t('Allow Shared Issues'),
-        help: t('Enable sharing of limited details on issues to anonymous users'),
-        confirm: {
-          true: t('Are you sure you want to allow sharing issues to anonymous users?'),
-        },
-      },
-      {
-        name: 'enhancedPrivacy',
-        type: 'boolean',
-
-        label: t('Enhanced Privacy'),
-        help: t(
-          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'
-        ),
-        confirm: {
-          false: t(
-            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
-          ),
-        },
-      },
-      {
-        name: 'dataScrubber',
-        type: 'boolean',
-        label: t('Require Data Scrubber'),
-        help: t('Require server-side data scrubbing be enabled for all projects'),
-        confirm: {
-          false: t(
-            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
-          ),
-        },
-      },
-      {
-        name: 'dataScrubberDefaults',
-        type: 'boolean',
-        label: t('Require Using Default Scrubbers'),
-        help: t(
-          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'
-        ),
-        confirm: {
-          false: t(
-            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
-          ),
-        },
-      },
-      {
-        name: 'sensitiveFields',
-        type: 'string',
-        multiline: true,
-        autosize: true,
-        maxRows: 10,
-        placeholder: 'e.g. email',
-        label: t('Global Sensitive Fields'),
-        help: t(
-          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
-        ),
-        extraHelp: t(
-          'Note: These fields will be used in addition to project specific fields.'
-        ),
-        getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
-      },
-      {
-        name: 'safeFields',
-        type: 'string',
-        multiline: true,
-        autosize: true,
-        maxRows: 10,
-        placeholder: t('e.g. business-email'),
-        label: t('Global Safe Fields'),
-        help: t(
-          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
-        ),
-        extraHelp: t(
-          'Note: These fields will be used in addition to project specific fields'
-        ),
-        getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
-      },
-      {
-        name: 'scrubIPAddresses',
-        type: 'boolean',
-        label: t('Prevent Storing of IP Addresses'),
-        help: t(
-          'Preventing IP addresses from being stored for new events on all projects'
-        ),
-        confirm: {
-          false: t(
-            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
-          ),
-        },
-      },
-      {
-        name: 'relayPiiConfig',
-        type: 'string',
-        label: t('Advanced datascrubber configuration'),
-        placeholder: t('Paste a JSON configuration here.'),
-        multiline: true,
-        autosize: true,
-        maxRows: 20,
-        help: tct(
-          'Advanced JSON-based configuration for datascrubbing. Applied in addition to the settings above. This list of rules can be extended on a per-project level, but never overridden. [learn_more:Learn more]',
-          {
-            learn_more: <a href="https://getsentry.github.io/relay/pii-config/" />,
-          }
-        ),
-        visible: ({features}) => features.has('datascrubbers-v2'),
-        validate: ({id, form}) => {
-          if (form[id] === '') {
-            return [];
-          }
-          try {
-            JSON.parse(form[id]);
-          } catch (e) {
-            return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
-          }
-          return [];
-        },
-      },
-      {
-        name: 'scrapeJavaScript',
-        type: 'boolean',
-        confirm: {
-          false: t(
-            "Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts."
-          ),
-        },
-        label: t('Allow JavaScript Source Fetching'),
-        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
-      },
-      {
-        name: 'storeCrashReports',
-        type: 'range',
-        label: t('Store Native Crash Reports'),
-        help: t(
-          'Store native crash reports such as Minidumps for improved processing and download in issue details'
-        ),
-        visible: ({features}) => features.has('event-attachments'),
-        formatLabel: formatStoreCrashReports,
-        allowedValues: STORE_CRASH_REPORTS_VALUES,
-      },
-      {
-        name: 'attachmentsRole',
-        type: 'array',
-        choices: ({initialData} = {}) =>
-          (initialData.availableRoles &&
-            initialData.availableRoles.map(r => [r.id, r.name])) ||
-          [],
-        label: t('Attachments Access'),
-        help: t(
-          'Permissions required to download event attachments, such as native crash reports or log files'
-        ),
-        visible: ({features}) => features.has('event-attachments'),
-      },
-      {
-        name: 'trustedRelays',
-        type: 'string',
-        multiline: true,
-        autosize: true,
-        maxRows: 10,
-        placeholder: t('Paste the relay public keys here'),
-        label: t('Trusted Relays'),
-        help: t(
-          'The list of relay public keys that should be trusted. Any relay in this list will be permitted to access org and project configs. Separate multiple entries with a newline.'
-        ),
-        getValue: val => extractMultilineFields(val),
-        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
-        visible: ({features}) => features.has('relay'),
-      },
-      {
-        name: 'allowJoinRequests',
-        type: 'boolean',
-
-        label: t('Allow Join Requests'),
-        help: t('Allow users to request to join your organization'),
-        confirm: {
-          true: t(
-            'Are you sure you want to allow users to request to join your organization?'
-          ),
-        },
-        visible: ({hasSsoEnabled}) => !hasSsoEnabled,
-      },
-    ],
-  },
 ];
 
 export default formGroups;
diff --git a/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
new file mode 100644
index 0000000000..074b3d436c
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/organizationSecurityAndPrivacy.tsx
@@ -0,0 +1,220 @@
+import React from 'react';
+
+import {extractMultilineFields} from 'app/utils';
+import {t, tct} from 'app/locale';
+import {
+  STORE_CRASH_REPORTS_VALUES,
+  formatStoreCrashReports,
+} from 'app/utils/crashReports';
+import {JsonFormObject} from 'app/views/settings/components/forms/type';
+
+const organizationSecurityAndPrivacy: Array<JsonFormObject> = [
+  {
+    title: t('Security & Privacy'),
+    fields: [
+      {
+        name: 'require2FA',
+        type: 'boolean',
+        label: t('Require Two-Factor Authentication'),
+        help: t('Require and enforce two-factor authentication for all members'),
+        confirm: {
+          true: t(
+            'This will remove all members without two-factor authentication' +
+              ' from your organization. It will also send them an email to setup 2FA' +
+              ' and reinstate their access and settings. Do you want to continue?'
+          ),
+          false: t(
+            'Are you sure you want to allow users to access your organization without having two-factor authentication enabled?'
+          ),
+        },
+      },
+      {
+        name: 'allowSharedIssues',
+        type: 'boolean',
+
+        label: t('Allow Shared Issues'),
+        help: t('Enable sharing of limited details on issues to anonymous users'),
+        confirm: {
+          true: t('Are you sure you want to allow sharing issues to anonymous users?'),
+        },
+      },
+      {
+        name: 'enhancedPrivacy',
+        type: 'boolean',
+
+        label: t('Enhanced Privacy'),
+        help: t(
+          'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications'
+        ),
+        confirm: {
+          false: t(
+            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
+          ),
+        },
+      },
+      {
+        name: 'dataScrubber',
+        type: 'boolean',
+        label: t('Require Data Scrubber'),
+        help: t('Require server-side data scrubbing be enabled for all projects'),
+        confirm: {
+          false: t(
+            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
+          ),
+        },
+      },
+      {
+        name: 'dataScrubberDefaults',
+        type: 'boolean',
+        label: t('Require Using Default Scrubbers'),
+        help: t(
+          'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects'
+        ),
+        confirm: {
+          false: t(
+            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
+          ),
+        },
+      },
+      {
+        name: 'sensitiveFields',
+        type: 'string',
+        multiline: true,
+        autosize: true,
+        maxRows: 10,
+        placeholder: 'e.g. email',
+        label: t('Global Sensitive Fields'),
+        help: t(
+          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
+        ),
+        extraHelp: t(
+          'Note: These fields will be used in addition to project specific fields.'
+        ),
+        getValue: val => extractMultilineFields(val),
+        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+      },
+      {
+        name: 'safeFields',
+        type: 'string',
+        multiline: true,
+        autosize: true,
+        maxRows: 10,
+        placeholder: t('e.g. business-email'),
+        label: t('Global Safe Fields'),
+        help: t(
+          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
+        ),
+        extraHelp: t(
+          'Note: These fields will be used in addition to project specific fields'
+        ),
+        getValue: val => extractMultilineFields(val),
+        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+      },
+      {
+        name: 'scrubIPAddresses',
+        type: 'boolean',
+        label: t('Prevent Storing of IP Addresses'),
+        help: t(
+          'Preventing IP addresses from being stored for new events on all projects'
+        ),
+        confirm: {
+          false: t(
+            'Disabling this can have privacy implications for ALL projects, are you sure you want to continue?'
+          ),
+        },
+      },
+      {
+        name: 'relayPiiConfig',
+        type: 'string',
+        label: t('Advanced datascrubber configuration'),
+        placeholder: t('Paste a JSON configuration here.'),
+        multiline: true,
+        autosize: true,
+        maxRows: 20,
+        help: tct(
+          'Advanced JSON-based configuration for datascrubbing. Applied in addition to the settings above. This list of rules can be extended on a per-project level, but never overridden. [learn_more:Learn more]',
+          {
+            learn_more: <a href="https://getsentry.github.io/relay/pii-config/" />,
+          }
+        ),
+        visible: ({features}) => features.has('datascrubbers-v2'),
+        validate: ({id, form}) => {
+          if (form[id] === '') {
+            return [];
+          }
+          try {
+            JSON.parse(form[id]);
+          } catch (e) {
+            return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
+          }
+          return [];
+        },
+      },
+      {
+        name: 'scrapeJavaScript',
+        type: 'boolean',
+        confirm: {
+          false: t(
+            "Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts."
+          ),
+        },
+        label: t('Allow JavaScript Source Fetching'),
+        help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
+      },
+      {
+        name: 'storeCrashReports',
+        type: 'range',
+        label: t('Store Native Crash Reports'),
+        help: t(
+          'Store native crash reports such as Minidumps for improved processing and download in issue details'
+        ),
+        visible: ({features}) => features.has('event-attachments'),
+        allowedValues: STORE_CRASH_REPORTS_VALUES,
+        formatLabel: formatStoreCrashReports,
+      },
+      {
+        name: 'attachmentsRole',
+        type: 'array',
+        choices: ({initialData = {}}) =>
+          (initialData.availableRoles &&
+            initialData.availableRoles.map(r => [r.id, r.name])) ||
+          [],
+        label: t('Attachments Access'),
+        help: t(
+          'Permissions required to download event attachments, such as native crash reports or log files'
+        ),
+        visible: ({features}) => features.has('event-attachments'),
+      },
+      {
+        name: 'trustedRelays',
+        type: 'string',
+        multiline: true,
+        autosize: true,
+        maxRows: 10,
+        placeholder: t('Paste the relay public keys here'),
+        label: t('Trusted Relays'),
+        help: t(
+          'The list of relay public keys that should be trusted. Any relay in this list will be permitted to access org and project configs. Separate multiple entries with a newline.'
+        ),
+        getValue: val => extractMultilineFields(val),
+        setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
+        visible: ({features}) => features.has('relay'),
+      },
+      {
+        name: 'allowJoinRequests',
+        type: 'boolean',
+
+        label: t('Allow Join Requests'),
+        help: t('Allow users to request to join your organization'),
+        confirm: {
+          true: t(
+            'Are you sure you want to allow users to request to join your organization?'
+          ),
+        },
+        visible: ({hasSsoEnabled}) => !hasSsoEnabled,
+      },
+    ],
+  },
+];
+
+export default organizationSecurityAndPrivacy;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 04d55b7c03..90ee092f66 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1,6 +1,7 @@
 import {Redirect, Route, IndexRoute, IndexRedirect} from 'react-router';
 import React from 'react';
 
+import {t} from 'app/locale';
 import {EXPERIMENTAL_SPA} from 'app/constants';
 import App from 'app/views/app';
 import AuthLayout from 'app/views/auth/layout';
@@ -723,6 +724,17 @@ function routes() {
         component={errorHandler(LazyLoad)}
       />
 
+      <Route
+        name={t('Security & Privacy')}
+        path="security-and-privacy/"
+        componentPromise={() =>
+          import(
+            /* webpackChunkName: "OrganizationSecurityAndPrivacy" */ 'app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy'
+          )
+        }
+        component={errorHandler(LazyLoad)}
+      />
+
       <Route name="Teams" path="teams/">
         <IndexRoute
           componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/utils/crashReports.tsx b/src/sentry/static/sentry/app/utils/crashReports.tsx
index 15d86b9fb7..c9b1e9ed6d 100644
--- a/src/sentry/static/sentry/app/utils/crashReports.tsx
+++ b/src/sentry/static/sentry/app/utils/crashReports.tsx
@@ -1,6 +1,6 @@
 import {t, tct} from 'app/locale';
 
-export function formatStoreCrashReports(value: number) {
+export function formatStoreCrashReports(value: number | ''): React.ReactNode {
   if (value === -1) {
     return t('Unlimited');
   } else if (value === 0) {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
index 0bb1cef765..41d7c2d3a8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
 import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
-import {Scope} from 'app/types';
+import {Scope, StringMap} from 'app/types';
 
 import {FieldObject, JsonFormObject} from './type';
 
@@ -20,7 +20,7 @@ type Props = {
 
   // TODO(ts): See if this is still in use
   access?: Scope[];
-  features?: string[];
+  features?: StringMap<any>;
 
   additionalFieldProps: {[key: string]: any};
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
index ee9dab37cb..84e30e2d7b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
@@ -9,7 +9,7 @@ export default class RangeField extends React.Component {
       (typeof props.formatLabel === 'function' && props.formatLabel(value)) || value,
   };
 
-  onChange = (onChange, onBlur, value, e) => {
+  onChange = (onChange, _onBlur, value, e) => {
     // We need to toggle current value because Switch is not an input
     onChange(value, e);
     // onBlur(value, e);
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index b37e78ce7e..d00235e826 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -23,6 +23,8 @@ export const FieldType = [
 
 export type FieldValue = any;
 
+type ConfirmKeyType = 'true' | 'false';
+
 type BaseField = {
   label?: React.ReactNode | (() => React.ReactNode);
   name?: string;
@@ -35,6 +37,12 @@ type BaseField = {
   disabledReason?: string;
   defaultValue?: FieldValue;
   updatesForm?: boolean;
+  confirm?: {[key in ConfirmKeyType]?: string};
+  autosize?: boolean;
+  maxRows?: number;
+  extraHelp?: string;
+  choices?: (props: {[key: string]: any}) => void;
+  formatLabel?: (value: number | '') => React.ReactNode;
 
   /**
    * Function to format the value displayed in the undo toast. May also be
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
index 2b8967287a..e4d1c511eb 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
@@ -20,6 +20,16 @@ const organizationNavigation: NavigationSection[] = [
         description: t("View and manage an organization's projects"),
         id: 'projects',
       },
+      {
+        path: `${pathPrefix}/security-and-privacy/`,
+        title: t('Security & Privacy'),
+        description: t(
+          'View and manage the security and privacy settings of an organization'
+        ),
+        id: 'security-and-privacy',
+        show: ({features}) => features!.has('datascrubbers-v2'),
+        badge: () => 'new',
+      },
       {
         path: `${pathPrefix}/teams/`,
         title: t('Teams'),
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
index c68d9b3db3..335da734c9 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
@@ -11,6 +11,12 @@ import PermissionAlert from 'app/views/settings/organization/permissionAlert';
 import SentryTypes from 'app/sentryTypes';
 import organizationSettingsFields from 'app/data/forms/organizationGeneralSettings';
 import withOrganization from 'app/utils/withOrganization';
+import Link from 'app/components/links/link';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
+import Feature from 'app/components/acl/feature';
+import {t} from 'app/locale';
+import {Panel, PanelHeader} from 'app/components/panels';
 
 class OrganizationSettingsForm extends AsyncComponent {
   static propTypes = {
@@ -31,9 +37,18 @@ class OrganizationSettingsForm extends AsyncComponent {
     const {initialData, organization, orgId, onSave, access} = this.props;
     const {authProvider} = this.state;
     const endpoint = `/organizations/${orgId}/`;
+
+    const jsonFormSettings = {
+      additionalFieldProps: {hasSsoEnabled: !!authProvider},
+      features: new Set(organization.features),
+      access,
+      location: this.props.location,
+      disabled: !access.has('org:write'),
+    };
+
     return (
       <Form
-        className="ref-organization-settings"
+        data-test-id="organization-settings"
         apiMethod="PUT"
         apiEndpoint={endpoint}
         saveOnBlur
@@ -48,14 +63,28 @@ class OrganizationSettingsForm extends AsyncComponent {
         onSubmitError={() => addErrorMessage('Unable to save change')}
       >
         <PermissionAlert />
-        <JsonForm
-          additionalFieldProps={{hasSsoEnabled: !!authProvider}}
-          features={new Set(organization.features)}
-          access={access}
-          location={this.props.location}
-          forms={organizationSettingsFields}
-          disabled={!access.has('org:write')}
-        />
+        <JsonForm {...jsonFormSettings} forms={organizationSettingsFields} />
+
+        <Feature features={['datascrubbers-v2']}>
+          {({hasFeature}) =>
+            hasFeature ? (
+              <Panel>
+                <PanelHeader>{t('Security & Privacy')}</PanelHeader>
+                <EmptyMessage
+                  title={t('Security & Privacy section now has its own tab')}
+                  description={
+                    <Link to={`/settings/${orgId}/security-and-privacy/`}>
+                      {t('Go to Security & Privacy')}
+                    </Link>
+                  }
+                />
+              </Panel>
+            ) : (
+              <JsonForm {...jsonFormSettings} forms={organizationSecurityAndPrivacy} />
+            )
+          }
+        </Feature>
+
         <AvatarChooser
           type="organization"
           allowGravatar={false}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy.tsx
new file mode 100644
index 0000000000..7a19ffeced
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy.tsx
@@ -0,0 +1,30 @@
+import React from 'react';
+
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+import {PanelAlert} from 'app/components/panels';
+import {t} from 'app/locale';
+import withOrganization from 'app/utils/withOrganization';
+
+import OrganizationSecurityAndPrivacyContent from './organizationSecurityAndPrivacyContent';
+
+const OrganizationSecurityAndPrivacy = ({
+  organization,
+  ...props
+}: OrganizationSecurityAndPrivacyContent['props']) => (
+  <Feature
+    features={['datascrubbers-v2']}
+    organization={organization}
+    renderDisabled={() => (
+      <FeatureDisabled
+        alert={PanelAlert}
+        features={organization.features}
+        featureName={t('Security & Privacy - new')}
+      />
+    )}
+  >
+    <OrganizationSecurityAndPrivacyContent {...props} organization={organization} />
+  </Feature>
+);
+
+export default withOrganization(OrganizationSecurityAndPrivacy);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
new file mode 100644
index 0000000000..b1f31e0708
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -0,0 +1,77 @@
+import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
+import PropTypes from 'prop-types';
+
+import {t} from 'app/locale';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import Form from 'app/views/settings/components/forms/form';
+import AsyncView from 'app/views/asyncView';
+import {Organization} from 'app/types';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {updateOrganization} from 'app/actionCreators/organizations';
+import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
+
+type Props = {
+  organization: Organization;
+  params: {
+    orgId: string;
+    projectId: string;
+  };
+} & RouteComponentProps<{}, {}>;
+
+class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
+  static contextTypes = {
+    organization: PropTypes.object,
+    // left router contextType to satisfy the compiler
+    router: PropTypes.object,
+  };
+
+  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
+    const {orgId} = this.props.params;
+    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];
+  }
+
+  handleSave = (data: Organization) => {
+    // This will update OrganizationStore (as well as OrganizationsStore
+    // which is slightly incorrect because it has summaries vs a detailed org)
+    updateOrganization(data);
+  };
+
+  renderBody() {
+    const {organization} = this.context;
+    const {orgId} = this.props.params;
+    const {authProvider} = this.state;
+    const initialData = this.props.organization;
+    const endpoint = `/organizations/${orgId}/`;
+    const access = new Set(organization.access);
+    const features = new Set(organization.features);
+
+    return (
+      <React.Fragment>
+        <SettingsPageHeader title={t('Security & Privacy')} />
+        <Form
+          data-test-id="organization-settings-security-and-privacy"
+          apiMethod="PUT"
+          apiEndpoint={endpoint}
+          initialData={initialData}
+          additionalFieldProps={{hasSsoEnabled: !!authProvider}}
+          onSubmitSuccess={(_resp, model) => {
+            this.handleSave(model.initialData as Organization);
+          }}
+          onSubmitError={() => addErrorMessage('Unable to save change')}
+          saveOnBlur
+          allowUndo
+        >
+          <JsonForm
+            features={features}
+            forms={organizationSecurityAndPrivacy}
+            disabled={!access.has('org:write')}
+          />
+        </Form>
+      </React.Fragment>
+    );
+  }
+}
+
+export default OrganizationSecurityAndPrivacyContent;
diff --git a/tests/acceptance/test_organization_security_privacy.py b/tests/acceptance/test_organization_security_privacy.py
new file mode 100644
index 0000000000..95ff78550e
--- /dev/null
+++ b/tests/acceptance/test_organization_security_privacy.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class OrganizationSecurityAndPrivacyTest(AcceptanceTestCase):
+    def load_organization_helper(self, snapshot_name=None):
+        self.browser.wait_until_not(".loading-indicator")
+        if snapshot_name is not None:
+            self.browser.snapshot("organization settings security and privacy -- " + snapshot_name)
+        assert self.browser.element_exists('[data-test-id="organization-settings-security-and-privacy"]')
+
+    def renders_2fa_setting(self):
+        return self.browser.element_exists("#require2FA")
+
+    def test_renders_2fa_setting_for_owner(self):
+        with self.feature("organizations:datascrubbers-v2"):
+            user_owner = self.create_user("owner@example.com")
+            organization = self.create_organization(name="Example", owner=user_owner)
+            self.login_as(user_owner)
+            path = "/settings/{}/security-and-privacy/".format(organization.slug)
+
+            self.browser.get(path)
+            self.load_organization_helper()
+            assert self.renders_2fa_setting()
+
+    def test_renders_2fa_setting_for_manager(self):
+        with self.feature("organizations:datascrubbers-v2"):
+            user_manager = self.create_user("manager@gexample.com")
+            organization = self.create_organization(
+                name="Example", owner=self.create_user("owner@example.com")
+            )
+            self.create_member(organization=organization, user=user_manager, role="manager")
+            self.login_as(user_manager)
+            path = "/settings/{}/security-and-privacy/".format(organization.slug)
+
+            self.browser.get(path)
+            self.load_organization_helper()
+            assert self.renders_2fa_setting()
+
+    def test_setting_2fa_without_2fa_enabled(self):
+        with self.feature("organizations:datascrubbers-v2"):
+            user_owner = self.create_user("owner@example.com")
+            organization = self.create_organization(name="Example", owner=user_owner)
+            self.login_as(user_owner)
+            path = "/settings/{}/security-and-privacy/".format(organization.slug)
+
+            self.browser.get(path)
+            self.browser.wait_until_not(".loading-indicator")
+            assert not self.browser.element_exists(
+                '[data-test-id="organization-settings-security-and-privacy"] .error'
+            )
+            self.browser.click("#require2FA")
+
+            self.browser.wait_until(".modal")
+            self.browser.click('.modal [data-test-id="confirm-button"]')
+            self.browser.wait_until_not(".modal")
+            self.browser.wait_until_test_id("toast-error")
+            self.load_organization_helper("setting 2fa without 2fa enabled")
diff --git a/tests/acceptance/test_organization_settings.py b/tests/acceptance/test_organization_settings.py
index 0db7a50879..9d36bd4bf9 100644
--- a/tests/acceptance/test_organization_settings.py
+++ b/tests/acceptance/test_organization_settings.py
@@ -18,7 +18,7 @@ class OrganizationSettingsTest(AcceptanceTestCase):
         self.browser.wait_until_not(".loading-indicator")
         if snapshot_name is not None:
             self.browser.snapshot("organization settings -- " + snapshot_name)
-        assert self.browser.element_exists(".ref-organization-settings")
+        assert self.browser.element_exists('[data-test-id="organization-settings"]')
 
     def renders_2fa_setting(self):
         return self.browser.element_exists("#require2FA")
@@ -54,7 +54,7 @@ class OrganizationSettingsTest(AcceptanceTestCase):
 
         self.browser.get(path)
         self.browser.wait_until_not(".loading-indicator")
-        assert not self.browser.element_exists(".ref-organization-settings .error")
+        assert not self.browser.element_exists('[data-test-id="organization-settings"] .error')
         self.browser.click("#require2FA")
 
         self.browser.wait_until(".modal")
diff --git a/tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx b/tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx
index dedb55ddc5..7c71159b1a 100644
--- a/tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationGeneralSettings/index.spec.jsx
@@ -156,134 +156,6 @@ describe('OrganizationGeneralSettings', function() {
     );
   });
 
-  it('shows require2fa switch', async function() {
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings
-        params={{orgId: organization.slug}}
-        organization={organization}
-      />,
-      routerContext
-    );
-
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
-  });
-
-  it('enables require2fa but cancels confirm modal', async function() {
-    const mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/',
-      method: 'PUT',
-    });
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings
-        params={{orgId: organization.slug}}
-        organization={organization}
-      />,
-      routerContext
-    );
-
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
-    wrapper.find('Switch[name="require2FA"]').simulate('click');
-    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
-
-    // Cancel
-    wrapper
-      .find('Field[name="require2FA"] ModalDialog .modal-footer Button')
-      .first()
-      .simulate('click');
-    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(0);
-    expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
-    expect(mock).not.toHaveBeenCalled();
-  });
-
-  it('enables require2fa with confirm modal', async function() {
-    const mock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/',
-      method: 'PUT',
-    });
-
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings
-        params={{orgId: organization.slug}}
-        organization={organization}
-      />,
-      routerContext
-    );
-
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
-    wrapper.find('Switch[name="require2FA"]').simulate('click');
-    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
-
-    // Confirm
-    wrapper
-      .find(
-        'Field[name="require2FA"] ModalDialog .modal-footer Button[priority="primary"]'
-      )
-      .simulate('click');
-    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(0);
-    expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(true);
-    expect(mock).toHaveBeenCalledWith(
-      '/organizations/org-slug/',
-      expect.objectContaining({
-        method: 'PUT',
-        data: {
-          require2FA: true,
-        },
-      })
-    );
-  });
-
-  it('returns to "off" if switch enable fails (e.g. API error)', async function() {
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/',
-      method: 'PUT',
-      statusCode: 500,
-    });
-
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings
-        params={{orgId: organization.slug}}
-        organization={organization}
-      />,
-      routerContext
-    );
-
-    await tick();
-    wrapper.update();
-    wrapper.find('Switch[name="require2FA"]').simulate('click');
-
-    // hide console.error for this test
-    jest.spyOn(console, 'error').mockImplementation(() => {});
-    // Confirm but has API failure
-    wrapper
-      .find(
-        'Field[name="require2FA"] ModalDialog .modal-footer Button[priority="primary"]'
-      )
-      .simulate('click');
-
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
-    // eslint-disable-next-line no-console
-    console.error.mockRestore();
-  });
-
-  it('renders join request switch', async function() {
-    const wrapper = mountWithTheme(
-      <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
-      TestStubs.routerContext([{organization}])
-    );
-
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(true);
-  });
-
   it('does not render join request switch with SSO enabled', async function() {
     MockApiClient.addMockResponse({
       url: `/organizations/${organization.slug}/auth-provider/`,
diff --git a/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx b/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
new file mode 100644
index 0000000000..b306526797
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
@@ -0,0 +1,146 @@
+import React from 'react';
+
+import {initializeOrg} from 'sentry-test/initializeOrg';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import OrganizationSecurityAndPrivacy from 'app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy';
+
+describe('OrganizationSecurityAndPrivacy', function() {
+  let organization;
+  let routerContext;
+
+  beforeEach(function() {
+    ({organization, routerContext} = initializeOrg());
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/auth-provider/`,
+      method: 'GET',
+    });
+    organization.features = ['datascrubbers-v2'];
+  });
+
+  it('shows require2fa switch', async function() {
+    const wrapper = mountWithTheme(
+      <OrganizationSecurityAndPrivacy
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
+    );
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
+  });
+
+  it('returns to "off" if switch enable fails (e.g. API error)', async function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'PUT',
+      statusCode: 500,
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationSecurityAndPrivacy
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+    wrapper.find('Switch[name="require2FA"]').simulate('click');
+
+    // hide console.error for this test
+    jest.spyOn(console, 'error').mockImplementation(() => {});
+    // Confirm but has API failure
+    wrapper
+      .find(
+        'Field[name="require2FA"] ModalDialog .modal-footer Button[priority="primary"]'
+      )
+      .simulate('click');
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
+    // eslint-disable-next-line no-console
+    console.error.mockRestore();
+  });
+
+  it('renders join request switch', async function() {
+    const wrapper = mountWithTheme(
+      <OrganizationSecurityAndPrivacy params={{orgId: organization.slug}} />,
+      TestStubs.routerContext([{organization}])
+    );
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(true);
+  });
+
+  it('enables require2fa but cancels confirm modal', async function() {
+    const mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'PUT',
+    });
+    const wrapper = mountWithTheme(
+      <OrganizationSecurityAndPrivacy
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
+    wrapper.find('Switch[name="require2FA"]').simulate('click');
+    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
+
+    // Cancel
+    wrapper
+      .find('Field[name="require2FA"] ModalDialog .modal-footer Button')
+      .first()
+      .simulate('click');
+    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(0);
+    expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
+    expect(mock).not.toHaveBeenCalled();
+  });
+
+  it('enables require2fa with confirm modal', async function() {
+    const mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'PUT',
+    });
+
+    const wrapper = mountWithTheme(
+      <OrganizationSecurityAndPrivacy
+        params={{orgId: organization.slug}}
+        organization={organization}
+      />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
+    wrapper.find('Switch[name="require2FA"]').simulate('click');
+    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
+
+    // Confirm
+    wrapper
+      .find(
+        'Field[name="require2FA"] ModalDialog .modal-footer Button[priority="primary"]'
+      )
+      .simulate('click');
+    expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(0);
+    expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(true);
+    expect(mock).toHaveBeenCalledWith(
+      '/organizations/org-slug/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          require2FA: true,
+        },
+      })
+    );
+  });
+});
