commit 263eb966f590b4741df8d291153c8b036999d06f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Aug 7 12:57:04 2019 -0700

    build(webpack): Change from multiple targets to multiple entriâ€¦ (#14229)
    
    This combines changes our webpack configuration from a multi-target
    config to a single target one. This change is being done so we can
    simplify adding `CleanWebpackPlugin`, otherwise the plugin will clean
    `dist` between target builds.

diff --git a/webpack.config.js b/webpack.config.js
index 8b4c83b313..e69481dee4 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -164,7 +164,12 @@ const localeRestrictionPlugins = [
 const cacheGroups = {
   vendors: {
     name: 'vendor',
-    test: /[\\/]node_modules[\\/]/,
+
+    /**
+     * Do not split platformicons into its own (css) bundle -- keep it in the `sentry` css bundle
+     * TODO: kill platformicons css completely
+     */
+    test: /[\\/]node_modules[\\/](!platformicons)[\\/]/,
     priority: -10,
     enforce: true,
     chunks: 'initial',
@@ -179,7 +184,24 @@ const babelOptions = {...babelConfig, cacheDirectory: true};
  */
 const appConfig = {
   mode: WEBPACK_MODE,
-  entry: {app: 'app'},
+  entry: {
+    /**
+     * Main Sentry SPA
+     */
+    app: 'app',
+
+    /**
+     * Legacy CSS Webpack appConfig for Django-powered views.
+     * This generates a single "sentry.css" file that imports ALL component styles
+     * for use on Django-powered pages.
+     */
+    sentry: 'less/sentry.less',
+
+    /**
+     * old plugins that use select2 when creating a new issue e.g. Trello, Teamwork*
+     */
+    select2: 'less/select2.less',
+  },
   context: staticPrefix,
   module: {
     rules: [
@@ -224,6 +246,11 @@ const appConfig = {
         test: /\.css/,
         use: ['style-loader', 'css-loader'],
       },
+      {
+        test: /\.less$/,
+        include: [staticPrefix],
+        use: [ExtractTextPlugin.loader, 'css-loader', 'less-loader'],
+      },
       {
         test: /\.(woff|woff2|ttf|eot|svg|png|gif|ico|jpg)($|\?)/,
         exclude: /app\/icons\/.*\.svg$/,
@@ -255,6 +282,7 @@ const appConfig = {
       shorthands: true,
       paths: true,
     }),
+
     /**
      * jQuery must be provided in the global scope specifically and only for
      * bootstrap, as it will not import jQuery itself.
@@ -262,16 +290,19 @@ const appConfig = {
      * We discourage the use of global jQuery through eslint rules
      */
     new webpack.ProvidePlugin({jQuery: 'jquery'}),
+
     /**
      * Extract CSS into separate files.
      */
     new ExtractTextPlugin(),
+
     /**
      * Generate a index.html file used for running the app in pure client mode.
      * This is currently used for PR deploy previews, where only the frontend
      * is deployed.
      */
     new CopyPlugin([{from: path.join(staticPrefix, 'app', 'index.html')}]),
+
     /**
      * Defines environemnt specific flags.
      */
@@ -283,21 +314,32 @@ const appConfig = {
         EXPERIMENTAL_SPA: JSON.stringify(SENTRY_EXPERIMENTAL_SPA),
       },
     }),
+
     /**
      * See above for locale chunks. These plugins help with that
      * funcationality.
      */
     new OptionalLocaleChunkPlugin(),
+
+    /**
+     * This removes empty js files for style only entries (e.g. sentry.less)
+     */
+    new FixStyleOnlyEntriesPlugin(),
+
     ...localeRestrictionPlugins,
   ],
   resolve: {
     alias: {
       app: path.join(staticPrefix, 'app'),
+
+      // Aliasing this for getsentry's build, otherwise `less/select2` will not be able
+      // to be resolved
+      less: path.join(staticPrefix, 'less'),
       'app-test': path.join(__dirname, 'tests', 'js'),
       'sentry-locale': path.join(__dirname, 'src', 'sentry', 'locale'),
     },
     modules: ['node_modules'],
-    extensions: ['.jsx', '.js', '.json', '.ts', '.tsx'],
+    extensions: ['.jsx', '.js', '.json', '.ts', '.tsx', '.less'],
   },
   output: {
     path: distPath,
@@ -326,51 +368,6 @@ if (IS_TEST || IS_STORYBOOK) {
   appConfig.resolve.alias['integration-docs-platforms'] = plugin.modulePath;
 }
 
-/**
- * Legacy CSS Webpack appConfig for Django-powered views.
- * This generates a single "sentry.css" file that imports ALL component styles
- * for use on Django-powered pages.
- */
-const legacyCssConfig = {
-  mode: WEBPACK_MODE,
-  entry: {
-    sentry: 'less/sentry.less',
-
-    // Below is for old plugins that use select2 when creating a new issue for a plugin
-    // e.g. Trello, Teamwork
-    select2: 'less/select2.less',
-  },
-  context: staticPrefix,
-  output: {
-    path: distPath,
-  },
-  plugins: [new FixStyleOnlyEntriesPlugin(), new ExtractTextPlugin()],
-  resolve: {
-    extensions: ['.less', '.js'],
-    modules: [staticPrefix, 'node_modules'],
-  },
-  module: {
-    rules: [
-      {
-        test: /\.less$/,
-        include: [staticPrefix],
-        use: [ExtractTextPlugin.loader, 'css-loader', 'less-loader'],
-      },
-      {
-        test: /\.(woff|woff2|ttf|eot|svg|png|gif|ico|jpg)($|\?)/,
-        use: [
-          {
-            loader: 'file-loader',
-            options: {
-              name: '[name].[ext]',
-            },
-          },
-        ],
-      },
-    ],
-  },
-};
-
 // Dev only! Hot module reloading
 if (USE_HOT_MODULE_RELOAD) {
   const backendAddress = `http://localhost:${SENTRY_BACKEND_PORT}/`;
@@ -441,8 +438,7 @@ if (IS_PRODUCTION) {
   // NOTE: can't do plugins.push(Array) because webpack/webpack#2217
   minificationPlugins.forEach(function(plugin) {
     appConfig.plugins.push(plugin);
-    legacyCssConfig.plugins.push(plugin);
   });
 }
 
-module.exports = [appConfig, legacyCssConfig];
+module.exports = appConfig;
