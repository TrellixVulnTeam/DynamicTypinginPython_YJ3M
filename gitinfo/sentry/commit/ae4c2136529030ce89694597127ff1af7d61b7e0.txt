commit ae4c2136529030ce89694597127ff1af7d61b7e0
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Mar 11 22:00:37 2020 +0100

    feat(sessions): Added duration to summaries and sorting (#17572)

diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
index e2e590b58e..771031303f 100644
--- a/src/sentry/api/endpoints/organization_releases.py
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -29,7 +29,13 @@ from sentry.utils.cache import cache
 from sentry.utils.compat import zip as izip
 
 
-ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
+SUMMARY_STATS_PERIOD = ("24h", "48h", "7d", "14d")
+HEALTH_STATS_PERIOD = ("", "24h", "14d")
+ERR_INVALID_STATS_PERIOD = "Invalid %s. Valid choices are %s"
+
+
+def get_stats_period_detail(key, choices):
+    return ERR_INVALID_STATS_PERIOD % (key, ", ".join("'%s'" % x for x in choices))
 
 
 @scenario("CreateNewOrganizationReleaseWithRef")
@@ -144,11 +150,16 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
         with_health = request.GET.get("health") == "1"
         flatten = request.GET.get("flatten") == "1"
         sort = request.GET.get("sort") or "date"
-        stats_period = request.GET.get("healthStatsPeriod")
-        if stats_period not in (None, "", "24h", "14d"):
-            raise ParseError(detail=ERR_INVALID_STATS_PERIOD)
-        if stats_period is None and with_health:
-            stats_period = "24h"
+        summary_stats_period = request.GET.get("summaryStatsPeriod") or "48h"
+        health_stats_period = request.GET.get("healthStatsPeriod") or ("24h" if with_health else "")
+        if summary_stats_period not in SUMMARY_STATS_PERIOD:
+            raise ParseError(
+                detail=get_stats_period_detail("summaryStatsPeriod", SUMMARY_STATS_PERIOD)
+            )
+        if health_stats_period not in HEALTH_STATS_PERIOD:
+            raise ParseError(
+                detail=get_stats_period_detail("healthStatsPeriod", HEALTH_STATS_PERIOD)
+            )
 
         paginator_cls = OffsetPaginator
         paginator_kwargs = {}
@@ -187,7 +198,7 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
 
         if sort == "date":
             sort_query = "COALESCE(sentry_release.date_released, sentry_release.date_added)"
-        elif sort in ("crash_free_sessions", "crash_free_users", "sessions_1h", "sessions_24h"):
+        elif sort in ("crash_free_sessions", "crash_free_users", "sessions", "users"):
             if not flatten:
                 return Response(
                     {"detail": "sorting by crash statistics requires flattening (flatten=1)"},
@@ -200,6 +211,7 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
                     environments=filter_params.get("environment"),
                     scope=sort,
                     offset=offset,
+                    stats_period=summary_stats_period,
                     limit=limit,
                 ),
                 apply_to_queryset=lambda queryset, rows: queryset.filter(
@@ -224,7 +236,11 @@ class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint, Environment
                 params=[filter_params["start"], filter_params["end"]],
             )
 
-        serializer = ReleaseSerializer(with_health_data=with_health, stats_period=stats_period)
+        serializer = ReleaseSerializer(
+            with_health_data=with_health,
+            health_stats_period=health_stats_period,
+            summary_stats_period=summary_stats_period,
+        )
         return self.paginate(
             request=request,
             queryset=queryset,
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 25818a55b6..f1f7e1bdea 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -74,7 +74,8 @@ def get_users_for_authors(organization_id, authors, user=None):
 class ReleaseSerializer(Serializer):
     def __init__(self, *args, **kwargs):
         self.with_health_data = kwargs.pop("with_health_data", False)
-        self.stats_period = kwargs.pop("stats_period", None)
+        self.health_stats_period = kwargs.pop("health_stats_period", None)
+        self.summary_stats_period = kwargs.pop("summary_stats_period", None)
         Serializer.__init__(self, *args, **kwargs)
 
     def _get_commit_metadata(self, item_list, user):
@@ -259,7 +260,8 @@ class ReleaseSerializer(Serializer):
         if self.with_health_data:
             health_data = get_release_health_data_overview(
                 [(pr["project__id"], pr["release__version"]) for pr in project_releases],
-                stats_period=self.stats_period,
+                health_stats_period=self.health_stats_period,
+                summary_stats_period=self.summary_stats_period,
             )
         else:
             health_data = None
diff --git a/src/sentry/snuba/sessions.py b/src/sentry/snuba/sessions.py
index d6105b31f5..176a0c2319 100644
--- a/src/sentry/snuba/sessions.py
+++ b/src/sentry/snuba/sessions.py
@@ -34,17 +34,23 @@ def get_changed_project_release_model_adoptions(project_ids):
     return rv
 
 
-def get_project_releases_by_stability(project_ids, offset, limit, scope, environments=None):
+def get_project_releases_by_stability(
+    project_ids, offset, limit, scope, stats_period=None, environments=None
+):
     """Given some project IDs returns adoption rates that should be updated
     on the postgres tables.
     """
-    orderby, delta = {
-        "crash_free_sessions": ([["divide", ["sessions_crashed", "sessions"]]], timedelta(days=1)),
-        "crash_free_users": ([["divide", ["users_crashed", "users"]]], timedelta(days=1)),
-        "sessions_1h": (["sessions"], timedelta(hours=1)),
-        "sessions_24h": (["sessions"], timedelta(days=1)),
+    if stats_period is None:
+        stats_period = "24h"
+
+    _, stats_start, _ = get_rollup_starts_and_buckets(stats_period)
+
+    orderby = {
+        "crash_free_sessions": [["divide", ["sessions_crashed", "sessions"]]],
+        "crash_free_users": [["divide", ["users_crashed", "users"]]],
+        "sessions": ["sessions"],
+        "users": ["users"],
     }[scope]
-    start = datetime.utcnow() - delta
 
     conditions = []
     if environments is not None:
@@ -57,7 +63,7 @@ def get_project_releases_by_stability(project_ids, offset, limit, scope, environ
         selected_columns=["project_id", "release"],
         groupby=["release", "project_id"],
         orderby=orderby,
-        start=start,
+        start=stats_start,
         offset=offset,
         limit=limit,
         conditions=conditions,
@@ -77,7 +83,29 @@ def _make_stats(start, rollup, buckets):
     return rv
 
 
-def get_release_health_data_overview(project_releases, environments=None, stats_period=None):
+STATS_PERIODS = {
+    "24h": (3600, 24),
+    "1d": (3600, 24),
+    "48h": (3600, 48),
+    "2d": (3600, 48),
+    "7d": (86400, 7),
+    "14d": (86400, 14),
+}
+
+
+def get_rollup_starts_and_buckets(period):
+    if period is None:
+        return None, None, None
+    if period not in STATS_PERIODS:
+        raise TypeError("Invalid stats period")
+    seconds, buckets = STATS_PERIODS[period]
+    start = datetime.now(pytz.utc) - timedelta(seconds=seconds * buckets)
+    return seconds, start, buckets
+
+
+def get_release_health_data_overview(
+    project_releases, environments=None, summary_stats_period=None, health_stats_period=None
+):
     """Checks quickly for which of the given project releases we have
     health data available.  The argument is a tuple of `(project_id, release_name)`
     tuples.  The return value is a set of all the project releases that have health
@@ -87,33 +115,21 @@ def get_release_health_data_overview(project_releases, environments=None, stats_
     def _nan_as_none(val):
         return None if val != val else val
 
-    yesterday = datetime.now(pytz.utc) - timedelta(days=1)
+    _, summary_start, _ = get_rollup_starts_and_buckets(summary_stats_period or "24h")
     conditions, filter_keys = _get_conditions_and_filter_keys(project_releases, environments)
 
-    if stats_period == "24h":
-        stats_rollup = 3600
-        stats_start = yesterday
-        stats_buckets = 24
-    elif stats_period == "14d":
-        stats_rollup = 86400
-        stats_start = datetime.now(pytz.utc) - timedelta(days=14)
-        stats_buckets = 14
-    elif not stats_period:
-        stats_rollup = None
-        stats_start = None
-    else:
-        raise TypeError("Invalid stats period")
+    stats_rollup, stats_start, stats_buckets = get_rollup_starts_and_buckets(health_stats_period)
 
-    total_users_24h = {}
+    total_users = {}
     for x in raw_query(
         dataset=Dataset.Sessions,
         selected_columns=["release", "users"],
         groupby=["release", "project_id"],
-        start=yesterday,
+        start=summary_start,
         conditions=conditions,
         filter_keys=filter_keys,
     )["data"]:
-        total_users_24h[x["project_id"]] = x["users"]
+        total_users[x["project_id"]] = x["users"]
 
     rv = {}
     for x in raw_query(
@@ -129,11 +145,11 @@ def get_release_health_data_overview(project_releases, environments=None, stats_
             "users_crashed",
         ],
         groupby=["release", "project_id"],
-        start=yesterday,
+        start=summary_start,
         conditions=conditions,
         filter_keys=filter_keys,
     )["data"]:
-        total_users = total_users_24h.get(x["project_id"])
+        x_total_users = total_users.get(x["project_id"])
         rp = {
             "duration_p50": _nan_as_none(x["duration_quantiles"][0]),
             "duration_p90": _nan_as_none(x["duration_quantiles"][1]),
@@ -147,13 +163,15 @@ def get_release_health_data_overview(project_releases, environments=None, stats_
             "total_sessions": x["sessions"],
             "sessions_crashed": x["sessions_crashed"],
             "sessions_errored": x["sessions_errored"],
-            "adoption": x["users"] / total_users * 100 if total_users and x["users"] else None,
+            "adoption": x["users"] / x_total_users * 100 if x_total_users and x["users"] else None,
         }
-        if stats_period:
-            rp["stats"] = {stats_period: _make_stats(stats_start, stats_rollup, stats_buckets)}
+        if health_stats_period:
+            rp["stats"] = {
+                health_stats_period: _make_stats(stats_start, stats_rollup, stats_buckets)
+            }
         rv[x["project_id"], x["release"]] = rp
 
-    if stats_period:
+    if health_stats_period:
         for x in raw_query(
             dataset=Dataset.Sessions,
             selected_columns=["release", "project_id", "bucketed_started", "sessions"],
@@ -167,6 +185,8 @@ def get_release_health_data_overview(project_releases, environments=None, stats_
                 (parse_snuba_datetime(x["bucketed_started"]) - stats_start).total_seconds()
                 / stats_rollup
             )
-            rv[x["project_id"], x["release"]]["stats"][stats_period][time_bucket][1] = x["sessions"]
+            rv[x["project_id"], x["release"]]["stats"][health_stats_period][time_bucket][1] = x[
+                "sessions"
+            ]
 
     return rv
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index 6a1fe06d0f..e6ce523bc0 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -23,9 +23,9 @@ import EmptyStateWarning from 'app/components/emptyStateWarning';
 import ReleaseCard from 'app/views/releasesV2/list/releaseCard';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import Projects from 'app/utils/projects';
-import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 
 import ReleaseListSortOptions from './releaseListSortOptions';
+import ReleaseListPeriod from './releaseListPeriod';
 
 type Props = {
   params: Params;
@@ -52,10 +52,12 @@ class ReleasesList extends AsyncView<Props, State> {
 
     const query = {
       ...pick(location.query, [
-        ...Object.values(URL_PARAM),
+        'project',
+        'environment',
         'cursor',
         'query',
         'sort',
+        'summaryStatsPeriod',
         'healthStatsPeriod',
       ]),
       per_page: 50,
@@ -75,7 +77,13 @@ class ReleasesList extends AsyncView<Props, State> {
   getSort() {
     const {sort} = this.props.location.query;
 
-    return typeof sort === 'string' ? sort : undefined;
+    return typeof sort === 'string' ? sort : 'date';
+  }
+
+  getPeriod() {
+    const {summaryStatsPeriod} = this.props.location.query;
+
+    return typeof summaryStatsPeriod === 'string' ? summaryStatsPeriod : '48h';
   }
 
   handleSearch = (query: string) => {
@@ -96,6 +104,15 @@ class ReleasesList extends AsyncView<Props, State> {
     });
   };
 
+  handlePeriod = (summaryStatsPeriod: string) => {
+    const {location, router} = this.props;
+
+    router.push({
+      ...location,
+      query: {...location.query, cursor: undefined, summaryStatsPeriod},
+    });
+  };
+
   renderLoading() {
     return this.renderBody();
   }
@@ -164,7 +181,7 @@ class ReleasesList extends AsyncView<Props, State> {
 
     return (
       <React.Fragment>
-        <GlobalSelectionHeader organization={organization} />
+        <GlobalSelectionHeader organization={organization} showDateSelector={false} />
 
         <NoProjectMessage organization={organization}>
           <PageContent>
@@ -173,6 +190,10 @@ class ReleasesList extends AsyncView<Props, State> {
                 {t('Releases v2')} <BetaTag />
               </PageHeading>
               <SortAndFilterWrapper>
+                <ReleaseListPeriod
+                  selected={this.getPeriod()}
+                  onSelect={this.handlePeriod}
+                />
                 <ReleaseListSortOptions
                   selected={this.getSort()}
                   onSelect={this.handleSort}
@@ -206,9 +227,15 @@ const StyledPageHeader = styled(PageHeader)`
 `;
 const SortAndFilterWrapper = styled('div')`
   display: grid;
-  grid-template-columns: auto 1fr;
-  grid-column-gap: ${space(2)};
+  grid-template-columns: auto auto 1fr;
+  grid-gap: ${space(2)};
   margin-bottom: ${space(2)};
+  /* TODO(releasesV2): this could use some responsive love, but not yet sure if we are keeping it */
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    width: 100%;
+    grid-template-columns: none;
+    grid-template-rows: 1fr 1fr 1fr;
+  }
 `;
 
 export default withOrganization(ReleasesList);
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListDropdown.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListDropdown.tsx
new file mode 100644
index 0000000000..7b19658032
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListDropdown.tsx
@@ -0,0 +1,47 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
+
+type Option = {
+  key: string;
+  label: string;
+};
+
+type Props = {
+  label: string;
+  options: Option[];
+  selected: string;
+  onSelect: (key: string) => void;
+};
+
+const ReleaseListDropdown = ({label, options, selected, onSelect}: Props) => {
+  const labelNode = (
+    <React.Fragment>
+      <LabelText>{label}: &nbsp; </LabelText>
+      {options.find(option => option.key === selected)?.label}
+    </React.Fragment>
+  );
+
+  return (
+    <DropdownControl label={labelNode}>
+      {options.map(option => (
+        <DropdownItem
+          key={option.key}
+          onSelect={onSelect}
+          eventKey={option.key}
+          isActive={selected === option.key}
+        >
+          {option.label}
+        </DropdownItem>
+      ))}
+    </DropdownControl>
+  );
+};
+
+const LabelText = styled('em')`
+  font-style: normal;
+  color: ${p => p.theme.gray2};
+`;
+
+export default ReleaseListDropdown;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListPeriod.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListPeriod.tsx
new file mode 100644
index 0000000000..ab823cbcb0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListPeriod.tsx
@@ -0,0 +1,42 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+
+import ReleaseListDropdown from './releaseListDropdown';
+
+type Props = {
+  selected: string;
+  onSelect: (key: string) => void;
+};
+
+const ReleaseListPeriod = ({selected, onSelect}: Props) => {
+  const options = [
+    {
+      key: '24h',
+      label: t('Last 24 hours'),
+    },
+    {
+      key: '48h',
+      label: t('Last 48 hours'),
+    },
+    {
+      key: '7d',
+      label: t('Last 7 days'),
+    },
+    {
+      key: '14d',
+      label: t('Last 14 days'),
+    },
+  ];
+
+  return (
+    <ReleaseListDropdown
+      label={t('Period')}
+      options={options}
+      selected={selected}
+      onSelect={onSelect}
+    />
+  );
+};
+
+export default ReleaseListPeriod;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
index 1d5bc9d029..9c4ee084c0 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/releaseListSortOptions.tsx
@@ -1,20 +1,24 @@
 import React from 'react';
-import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
-import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
+
+import ReleaseListDropdown from './releaseListDropdown';
 
 type Props = {
-  selected?: string;
+  selected: string;
   onSelect: (key: string) => void;
 };
 
-const ReleaseListSortOptions = ({selected = 'date', onSelect}: Props) => {
-  const filterOptions = [
+const ReleaseListSortOptions = ({selected, onSelect}: Props) => {
+  const options = [
     {
       key: 'date',
       label: t('Date Created'),
     },
+    {
+      key: 'sessions',
+      label: t('Total Sessions'),
+    },
     {
       key: 'crash_free_users',
       label: t('Crash Free Users'),
@@ -23,38 +27,16 @@ const ReleaseListSortOptions = ({selected = 'date', onSelect}: Props) => {
       key: 'crash_free_sessions',
       label: t('Crash Free Sessions'),
     },
-    {
-      key: 'sessions_24h',
-      label: t('Sessions in 24 Hours'),
-    },
   ];
 
-  const label = (
-    <React.Fragment>
-      <LabelText>{t('Sort by')}: &nbsp; </LabelText>
-      {filterOptions.find(filterItem => filterItem.key === selected)?.label}
-    </React.Fragment>
-  );
-
   return (
-    <DropdownControl label={label}>
-      {filterOptions.map(filterItem => (
-        <DropdownItem
-          key={filterItem.key}
-          onSelect={onSelect}
-          eventKey={filterItem.key}
-          isActive={selected === filterItem.key}
-        >
-          {filterItem.label}
-        </DropdownItem>
-      ))}
-    </DropdownControl>
+    <ReleaseListDropdown
+      label={t('Sort by')}
+      options={options}
+      selected={selected}
+      onSelect={onSelect}
+    />
   );
 };
 
-const LabelText = styled('em')`
-  font-style: normal;
-  color: ${p => p.theme.gray2};
-`;
-
 export default ReleaseListSortOptions;
