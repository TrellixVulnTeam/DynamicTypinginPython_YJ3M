commit 388907bd18240b24e91971920152f72e3115b11c
Author: Mark Story <mark@sentry.io>
Date:   Thu Nov 14 15:21:54 2019 -0500

    feat(discover) Enable searching saved queries (#15605)
    
    We want to enable users to seach through their saved queries. In order
    to do that we need to have filtering in the API endpoint. This reuses
    the filtering conventions we have in other API endpoints like
    organization_projects and organization_teams.

diff --git a/src/sentry/discover/endpoints/discover_saved_queries.py b/src/sentry/discover/endpoints/discover_saved_queries.py
index c630cae73f..7f42d6ffa7 100644
--- a/src/sentry/discover/endpoints/discover_saved_queries.py
+++ b/src/sentry/discover/endpoints/discover_saved_queries.py
@@ -1,13 +1,15 @@
 from __future__ import absolute_import
 
+import six
 from rest_framework.response import Response
 
+from sentry import features
 from sentry.api.serializers import serialize
 from sentry.api.bases import OrganizationEndpoint
 from sentry.discover.models import DiscoverSavedQuery
-from sentry import features
 from sentry.discover.endpoints.bases import DiscoverSavedQueryPermission
 from sentry.discover.endpoints.serializers import DiscoverSavedQuerySerializer
+from sentry.search.utils import tokenize_query
 
 
 class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
@@ -25,13 +27,22 @@ class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
         if not self.has_feature(organization, request):
             return self.respond(status=404)
 
-        saved_queries = list(
+        queryset = (
             DiscoverSavedQuery.objects.filter(organization=organization)
-            .all()
             .prefetch_related("projects")
             .order_by("name")
         )
+        query = request.query_params.get("query")
+        if query:
+            tokens = tokenize_query(query)
+            for key, value in six.iteritems(tokens):
+                if key == "name" or key == "query":
+                    value = " ".join(value)
+                    queryset = queryset.filter(name__icontains=value)
+                else:
+                    queryset = queryset.none()
 
+        saved_queries = list(queryset.all())
         return Response(serialize(saved_queries), status=200)
 
     def post(self, request, organization):
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index 38bad32a9f..206fc0917b 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -29,8 +29,8 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
     feature_name = "organizations:discover"
 
     def test_get(self):
+        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
         with self.feature(self.feature_name):
-            url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
             response = self.client.get(url)
 
         assert response.status_code == 200, response.content
@@ -41,6 +41,29 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
         assert response.data[0]["conditions"] == []
         assert response.data[0]["limit"] == 10
 
+    def test_get_name_filter(self):
+        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
+        with self.feature(self.feature_name):
+            response = self.client.get(url, format="json", data={"query": "Test"})
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["name"] == "Test query"
+
+        with self.feature(self.feature_name):
+            # Also available as the name: filter.
+            response = self.client.get(url, format="json", data={"query": "name:Test"})
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]["name"] == "Test query"
+
+        with self.feature(self.feature_name):
+            response = self.client.get(url, format="json", data={"query": "name:Nope"})
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
+
     def test_post(self):
         with self.feature(self.feature_name):
             url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
