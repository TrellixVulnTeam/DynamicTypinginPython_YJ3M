commit aca4a669860fb22f214ad31342ac136b4abec8ad
Author: mikellykels <kelly@sentry.io>
Date:   Wed Mar 21 18:13:43 2018 -0700

    feat(auditlog): Add audit logs for integrations (#7430)
    
    * feat(auditlog): Add audit logs for integrations
    
    Display which integration was enabled, edited, or disabled from a project.
    
    * add tests
    
    * add tests
    
    * add tests
    
    * update constant value to make room for others

diff --git a/src/sentry/api/endpoints/project_plugin_details.py b/src/sentry/api/endpoints/project_plugin_details.py
index 30deefb8f8..e9758bc1d9 100644
--- a/src/sentry/api/endpoints/project_plugin_details.py
+++ b/src/sentry/api/endpoints/project_plugin_details.py
@@ -17,6 +17,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.plugin import (
     PluginSerializer, PluginWithConfigSerializer, serialize_field
 )
+from sentry.models import AuditLogEntryEvent
 from sentry.signals import plugin_enabled
 
 ERR_ALWAYS_ENABLED = 'This plugin is always enabled.'
@@ -70,6 +71,15 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
             plugin = self._get_plugin(plugin_id)
             plugin.reset_options(project=project)
             context = serialize(plugin, request.user, PluginWithConfigSerializer(project))
+
+            self.create_audit_entry(
+                request=request,
+                organization=project.organization,
+                target_object=project.id,
+                event=AuditLogEntryEvent.INTEGRATION_EDIT,
+                data={'integration': plugin_id, 'project': project.slug}
+            )
+
             return Response(context, status=200)
 
         if not plugin.can_disable:
@@ -77,6 +87,14 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
 
         plugin.enable(project)
 
+        self.create_audit_entry(
+            request=request,
+            organization=project.organization,
+            target_object=project.id,
+            event=AuditLogEntryEvent.INTEGRATION_ADD,
+            data={'integration': plugin_id, 'project': project.slug}
+        )
+
         return Response(status=201)
 
     def delete(self, request, project, plugin_id):
@@ -90,6 +108,14 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
 
         plugin.disable(project)
 
+        self.create_audit_entry(
+            request=request,
+            organization=project.organization,
+            target_object=project.id,
+            event=AuditLogEntryEvent.INTEGRATION_REMOVE,
+            data={'integration': plugin_id, 'project': project.slug}
+        )
+
         return Response(status=204)
 
     def put(self, request, project, plugin_id):
@@ -160,4 +186,12 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
 
         plugin_enabled.send(plugin=plugin, project=project, user=request.user, sender=self)
 
+        self.create_audit_entry(
+            request=request,
+            organization=project.organization,
+            target_object=project.id,
+            event=AuditLogEntryEvent.INTEGRATION_EDIT,
+            data={'integration': plugin_id, 'project': project.slug}
+        )
+
         return Response(context)
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index ff34652afe..0d48a43967 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -71,6 +71,10 @@ class AuditLogEntryEvent(object):
     SERVICEHOOK_ENABLE = 103
     SERVICEHOOK_DISABLE = 104
 
+    INTEGRATION_ADD = 110
+    INTEGRATION_EDIT = 111
+    INTEGRATION_REMOVE = 112
+
 
 class AuditLogEntry(Model):
     __core__ = False
@@ -132,6 +136,9 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.SERVICEHOOK_REMOVE, 'serivcehook.remove'),
             (AuditLogEntryEvent.SERVICEHOOK_ENABLE, 'serivcehook.enable'),
             (AuditLogEntryEvent.SERVICEHOOK_DISABLE, 'serivcehook.disable'),
+            (AuditLogEntryEvent.INTEGRATION_ADD, 'integration.add'),
+            (AuditLogEntryEvent.INTEGRATION_EDIT, 'integration.edit'),
+            (AuditLogEntryEvent.INTEGRATION_REMOVE, 'integration.remove')
         )
     )
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
@@ -273,4 +280,14 @@ class AuditLogEntry(Model):
         elif self.event == AuditLogEntryEvent.SERVICEHOOK_DISABLE:
             return 'disabled the service hook for "%s"' % (truncatechars(self.data['url'], 64), )
 
+        elif self.event == AuditLogEntryEvent.INTEGRATION_ADD:
+            return 'enabled integration %s for project %s' % (
+                self.data['integration'], self.data['project'])
+        elif self.event == AuditLogEntryEvent.INTEGRATION_EDIT:
+            return 'edited integration %s for project %s' % (
+                self.data['integration'], self.data['project'])
+        elif self.event == AuditLogEntryEvent.INTEGRATION_REMOVE:
+            return 'disabled integration %s from project %s' % (
+                self.data['integration'], self.data['project'])
+
         return ''
diff --git a/tests/sentry/api/endpoints/test_project_plugin_details.py b/tests/sentry/api/endpoints/test_project_plugin_details.py
index e8c6acb883..a6ce2ab155 100644
--- a/tests/sentry/api/endpoints/test_project_plugin_details.py
+++ b/tests/sentry/api/endpoints/test_project_plugin_details.py
@@ -4,7 +4,7 @@ import mock
 from django.core.urlresolvers import reverse
 
 from sentry.plugins import plugins, NotificationPlugin
-from sentry.models import ProjectOption
+from sentry.models import ProjectOption, AuditLogEntry
 from sentry.testutils import APITestCase
 
 
@@ -55,11 +55,18 @@ class UpdateProjectPluginTest(APITestCase):
                 'plugin_id': 'webhooks',
             }
         )
+        audit = AuditLogEntry.objects.filter(target_object=project.id)
+
+        assert not audit
+
         response = self.client.put(
             url, data={
                 'urls': 'http://example.com/foo',
             }
         )
+        audit = AuditLogEntry.objects.get(target_object=project.id)
+
+        assert audit.event == 111
         assert response.status_code == 200, (response.status_code, response.content)
         assert ProjectOption.objects.get(
             key='webhooks:urls',
@@ -84,12 +91,20 @@ class EnableProjectPluginTest(APITestCase):
                 'plugin_id': 'webhooks',
             }
         )
+        audit = AuditLogEntry.objects.filter(target_object=project.id)
+
+        assert not audit
+
         response = self.client.post(url)
+        audit = AuditLogEntry.objects.get(target_object=project.id)
+
+        assert audit.event == 110
         assert response.status_code == 201, (response.status_code, response.content)
         assert ProjectOption.objects.get(
             key='webhooks:enabled',
             project=project,
         ).value is True
+        audit.delete()
 
         # Testing the Plugin
         response = self.client.post(url, {'test': True})
@@ -98,7 +113,9 @@ class EnableProjectPluginTest(APITestCase):
 
         # Reset the plugin
         response = self.client.post(url, {'reset': True})
+        audit = AuditLogEntry.objects.get(target_object=project.id)
         test_configuration.assert_called_once_with(project)
+        assert audit.event == 111
         assert response.status_code == 200, (response.status_code, response.content)
 
         configs = response.data.get('config')
@@ -123,7 +140,14 @@ class DisableProjectPluginTest(APITestCase):
                 'plugin_id': 'webhooks',
             }
         )
+        audit = AuditLogEntry.objects.filter(target_object=project.id)
+
+        assert not audit
+
         response = self.client.delete(url)
+        audit = AuditLogEntry.objects.get(target_object=project.id)
+
+        assert audit.event == 112
         assert response.status_code == 204, (response.status_code, response.content)
         assert ProjectOption.objects.get(
             key='webhooks:enabled',
diff --git a/tests/sentry/utils/audit/tests.py b/tests/sentry/utils/audit/tests.py
index 94a868c5a8..e09dcfe6b3 100644
--- a/tests/sentry/utils/audit/tests.py
+++ b/tests/sentry/utils/audit/tests.py
@@ -102,3 +102,46 @@ class CreateAuditEntryTest(TestCase):
         deleted_project = DeletedProject.objects.get(slug=self.project.slug)
         self.assert_valid_deleted_log(deleted_project, self.project)
         assert deleted_project.platform == self.project.platform
+
+    def test_audit_entry_integration_log(self):
+        project = self.create_project()
+        self.login_as(user=self.user)
+
+        entry = create_audit_entry(
+            request=self.req,
+            organization=self.project.organization,
+            target_object=self.project.id,
+            event=AuditLogEntryEvent.INTEGRATION_ADD,
+            data={'integration': 'webhooks', 'project': project.slug},
+        )
+
+        assert ('enabled') in entry.get_note()
+        assert entry.actor == self.user
+        assert entry.target_object == self.project.id
+        assert entry.event == AuditLogEntryEvent.INTEGRATION_ADD
+
+        entry2 = create_audit_entry(
+            request=self.req,
+            organization=self.project.organization,
+            target_object=self.project.id,
+            event=AuditLogEntryEvent.INTEGRATION_EDIT,
+            data={'integration': 'webhooks', 'project': project.slug},
+        )
+
+        assert ('edited') in entry2.get_note()
+        assert entry2.actor == self.user
+        assert entry2.target_object == self.project.id
+        assert entry2.event == AuditLogEntryEvent.INTEGRATION_EDIT
+
+        entry3 = create_audit_entry(
+            request=self.req,
+            organization=self.project.organization,
+            target_object=self.project.id,
+            event=AuditLogEntryEvent.INTEGRATION_REMOVE,
+            data={'integration': 'webhooks', 'project': project.slug},
+        )
+
+        assert ('disable') in entry3.get_note()
+        assert entry3.actor == self.user
+        assert entry3.target_object == self.project.id
+        assert entry3.event == AuditLogEntryEvent.INTEGRATION_REMOVE
