commit 9c8c4ca5304004d24f65abc0259ce9ddb2b0c2d7
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 17 10:34:00 2015 -0700

    Scrub values which contain special keys

diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index d08269c9e8..95e9f1e473 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -74,12 +74,12 @@ class SensitiveDataFilter(object):
         if isinstance(value, six.string_types) and self.VALUES_RE.search(value):
             return self.MASK
 
-        if not isinstance(key, basestring):
-            return value
-
-        key = key.lower()
+        if isinstance(key, basestring):
+            key = key.lower()
+        else:
+            key = ''
         for field in self.fields:
-            if field in key:
+            if field in key or field in value:
                 # store mask as a fixed length for security
                 return self.MASK
         return value
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index de25685c3a..f51e2eb0c5 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -149,3 +149,16 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         result = proc.sanitize('foo', "foo 4242424242424242")
         self.assertEquals(result, proc.MASK)
+
+    def test_sanitize_http_body(self):
+        data = {
+            'sentry.interfaces.Http': {
+                'data': '{"email":"zzzz@gmail.com","password":"zzzzz"}',
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        result = proc.apply(data)
+        self.assertTrue('sentry.interfaces.Http' in data)
+        http = data['sentry.interfaces.Http']
+        self.assertEquals(http['data'], proc.MASK)
