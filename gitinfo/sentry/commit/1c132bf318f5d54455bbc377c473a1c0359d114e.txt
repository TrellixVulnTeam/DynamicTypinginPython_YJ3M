commit 1c132bf318f5d54455bbc377c473a1c0359d114e
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Sep 10 16:36:30 2019 -0700

    ref(2fa): Clean up accept invite w/ 2fa flow (#14595)
    
    This includes a few changes in preparation to make the accept invite
    flow consistent between SSO and 2fa setup:
    
     * the memberId and token are no longer passed as hidden form properties
       back to enroll endpoint to handle invite acceptance. Instead we'll
       read directly from the pending-invite cookie to retrieve these
       values. Security is not a concern here as the same token MUST be
       present in the cookie.
    
     * The enroll endpoint is simplified:
    
       1. There is no need for the `else` in the try except block containing
          the enroll code (since we will return if we reach the except
          block)
    
       2. Invite acceptance is simplified.
    
     * The pending invite cookie creation / removal methods have been moved
       to module level helper methods on the invite_helper module.
    
     * A user may now be specified in accept_invite.
    
     * The fetchOrganizationDetails and fetchOrganizationByMember action
       creators have been converted to async methods, making it possible to
       access the response data from both.
    
     * a getPendingInvite helper utility has been added.
    
     * The accountSecurityEnroll view has had various cleanups applied:
    
       - authenticatorEndpoint and enrollEndpoint have been made getter
         methods on the component.
    
       - This component no longer parse the cookie for token and member ID,
         and instead retrieves the pending invite data using the
         getPendingInvite helper.
    
       - Various cases where the setState callback was used to make api
         requests after the `loading` state was set have been refactored to
         just asynchronously continue to the API request, there is no need
         to ensure the loading state is set before making and API request.
    
       - Promises converted to using async await
    
     * After invite acceptance the accountSecurityEnroll view will now
       redirect to the organizations default page.

diff --git a/src/sentry/api/endpoints/accept_organization_invite.py b/src/sentry/api/endpoints/accept_organization_invite.py
index 762f9f6f4b..afb8be0c36 100644
--- a/src/sentry/api/endpoints/accept_organization_invite.py
+++ b/src/sentry/api/endpoints/accept_organization_invite.py
@@ -7,7 +7,7 @@ from django.core.urlresolvers import reverse
 from sentry.utils import auth
 from sentry.api.base import Endpoint
 from sentry.models import OrganizationMember, AuthProvider
-from sentry.api.invite_helper import ApiInviteHelper
+from sentry.api.invite_helper import ApiInviteHelper, add_invite_cookie, remove_invite_cookie
 
 
 class AcceptOrganizationInvite(Endpoint):
@@ -51,9 +51,7 @@ class AcceptOrganizationInvite(Endpoint):
             "existingMember": helper.member_already_exists,
         }
 
-        if auth_provider is not None:
-            provider = auth_provider.get_provider()
-            data["ssoProvider"] = provider.name
+        response = Response(None)
 
         # Allow users to register an account when accepting an invite
         if not helper.user_authenticated:
@@ -61,10 +59,19 @@ class AcceptOrganizationInvite(Endpoint):
             auth.initiate_login(self.request, next_url=url)
             request.session["can_register"] = True
 
-        response = Response(data)
+        # If the org has SSO setup, we'll store the invite cookie to later
+        # associate the org member after authentication. We can avoid needing
+        # to come back to the accept invite page since 2FA will *not* be
+        # required if SSO is required.
+        if auth_provider is not None:
+            add_invite_cookie(request, response, member_id, token)
+            provider = auth_provider.get_provider()
+            data["ssoProvider"] = provider.name
 
         if helper.needs_2fa:
-            helper.add_invite_cookie(request, response, member_id, token)
+            add_invite_cookie(request, response, member_id, token)
+
+        response.data = data
 
         return response
 
@@ -88,6 +95,6 @@ class AcceptOrganizationInvite(Endpoint):
             response = Response(status=status.HTTP_204_NO_CONTENT)
 
         helper.accept_invite()
-        helper.remove_invite_cookie(response)
+        remove_invite_cookie(request, response)
 
         return response
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
index ed69893641..d08add8c3a 100644
--- a/src/sentry/api/endpoints/user_authenticator_enroll.py
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -12,7 +12,7 @@ from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
 from sentry.models import Authenticator, OrganizationMember
 from sentry.security import capture_security_activity
-from sentry.api.invite_helper import ApiInviteHelper
+from sentry.api.invite_helper import ApiInviteHelper, remove_invite_cookie, get_invite_cookie
 
 logger = logging.getLogger(__name__)
 
@@ -21,14 +21,7 @@ INVALID_OTP_ERR = ({"details": "Invalid OTP"},)
 SEND_SMS_ERR = {"details": "Error sending SMS"}
 
 
-class BaseRestSerializer(serializers.Serializer):
-    # Fields needed to accept an org invite
-    # pending 2FA enrollment
-    memberId = serializers.CharField(required=False, allow_null=True, allow_blank=True)
-    token = serializers.CharField(required=False, allow_null=True, allow_blank=True)
-
-
-class TotpRestSerializer(BaseRestSerializer):
+class TotpRestSerializer(serializers.Serializer):
     otp = serializers.CharField(
         label="Authenticator code",
         help_text="Code from authenticator",
@@ -37,7 +30,7 @@ class TotpRestSerializer(BaseRestSerializer):
     )
 
 
-class SmsRestSerializer(BaseRestSerializer):
+class SmsRestSerializer(serializers.Serializer):
     phone = serializers.CharField(
         label="Phone number",
         help_text="Phone number to send SMS code",
@@ -54,7 +47,7 @@ class SmsRestSerializer(BaseRestSerializer):
     )
 
 
-class U2fRestSerializer(BaseRestSerializer):
+class U2fRestSerializer(serializers.Serializer):
     deviceName = serializers.CharField(
         label="Device name",
         required=False,
@@ -67,8 +60,6 @@ class U2fRestSerializer(BaseRestSerializer):
     response = serializers.CharField(required=True)
 
 
-hidden_fields = ["memberId", "token"]
-
 serializer_map = {"totp": TotpRestSerializer, "sms": SmsRestSerializer, "u2f": U2fRestSerializer}
 
 
@@ -76,7 +67,7 @@ def get_serializer_field_metadata(serializer, fields=None):
     """Returns field metadata for serializer"""
     meta = []
     for field_name, field in serializer.fields.items():
-        if (fields is None or field_name in fields) and field_name not in hidden_fields:
+        if (fields is None or field_name in fields) and field_name:
             try:
                 default = field.get_default()
             except SkipField:
@@ -215,42 +206,41 @@ class UserAuthenticatorEnrollEndpoint(UserEndpoint):
             interface.enroll(request.user)
         except Authenticator.AlreadyEnrolled:
             return Response(ALREADY_ENROLLED_ERR, status=status.HTTP_400_BAD_REQUEST)
-        else:
-            context.update({"authenticator": interface.authenticator})
-            capture_security_activity(
-                account=request.user,
-                type="mfa-added",
-                actor=request.user,
-                ip_address=request.META["REMOTE_ADDR"],
-                context=context,
-                send_email=True,
-            )
-            request.user.clear_lost_passwords()
-            request.user.refresh_session_nonce(self.request)
-            request.user.save()
-            Authenticator.objects.auto_add_recovery_codes(request.user)
-
-            # Try to accept an org invite pending 2FA enrollment
-            member_id = serializer.data.get("memberId")
-            token = serializer.data.get("token")
-
-            if member_id and token:
-                try:
-                    helper = ApiInviteHelper(
-                        instance=self,
-                        request=request,
-                        member_id=member_id,
-                        token=token,
-                        logger=logger,
-                    )
-                except OrganizationMember.DoesNotExist:
-                    logger.error("Failed to accept pending org invite", exc_info=True)
-                else:
-                    if helper.valid_request:
-                        helper.accept_invite()
-
-                        response = Response(status=status.HTTP_204_NO_CONTENT)
-                        helper.remove_invite_cookie(response)
-                        return response
 
-            return Response(status=status.HTTP_204_NO_CONTENT)
+        context.update({"authenticator": interface.authenticator})
+        capture_security_activity(
+            account=request.user,
+            type="mfa-added",
+            actor=request.user,
+            ip_address=request.META["REMOTE_ADDR"],
+            context=context,
+            send_email=True,
+        )
+        request.user.clear_lost_passwords()
+        request.user.refresh_session_nonce(self.request)
+        request.user.save()
+        Authenticator.objects.auto_add_recovery_codes(request.user)
+
+        response = Response(status=status.HTTP_204_NO_CONTENT)
+
+        # If there is a pending organization invite accept after the
+        # authenticator has been configured.
+        org_invite = get_invite_cookie(request)
+
+        if org_invite:
+            try:
+                helper = ApiInviteHelper(
+                    instance=self,
+                    request=request,
+                    member_id=org_invite["memberId"],
+                    token=org_invite["token"],
+                    logger=logger,
+                )
+            except OrganizationMember.DoesNotExist:
+                logger.error("Failed to accept pending org invite", exc_info=True)
+            else:
+                if helper.valid_request:
+                    helper.accept_invite()
+                    remove_invite_cookie(request, response)
+
+        return response
diff --git a/src/sentry/api/invite_helper.py b/src/sentry/api/invite_helper.py
index 1af96de755..eae937fd89 100644
--- a/src/sentry/api/invite_helper.py
+++ b/src/sentry/api/invite_helper.py
@@ -1,16 +1,42 @@
 from __future__ import absolute_import
 
+from six.moves.urllib.parse import urlencode, parse_qsl
 from django.utils.crypto import constant_time_compare
 from django.core.urlresolvers import reverse
-from sentry.utils import metrics
 
+from sentry.utils import metrics
 from sentry.models import AuditLogEntryEvent, Authenticator, OrganizationMember
 from sentry.signals import member_joined
 
-PENDING_INVITE = "pending-invite"
+INVITE_COOKIE = "pending-invite"
 COOKIE_MAX_AGE = 60 * 60 * 24 * 7  # 7 days
 
 
+def add_invite_cookie(request, response, member_id, token):
+    url = reverse("sentry-accept-invite", args=[member_id, token])
+    response.set_cookie(
+        INVITE_COOKIE,
+        urlencode({"memberId": member_id, "token": token, "url": url}),
+        max_age=COOKIE_MAX_AGE,
+    )
+
+
+def remove_invite_cookie(request, response):
+    if INVITE_COOKIE in request.COOKIES:
+        response.delete_cookie(INVITE_COOKIE)
+
+
+def get_invite_cookie(request):
+    if INVITE_COOKIE not in request.COOKIES:
+        return None
+
+    # memberId should be coerced back to an integer
+    invite_data = dict(parse_qsl(request.COOKIES.get(INVITE_COOKIE)))
+    invite_data["memberId"] = int(invite_data["memberId"])
+
+    return invite_data
+
+
 class ApiInviteHelper(object):
     def __init__(self, instance, request, member_id, token, logger=None):
         self.request = request
@@ -18,7 +44,7 @@ class ApiInviteHelper(object):
         self.member_id = member_id
         self.token = token
         self.logger = logger
-        self.om = self.get_organization_member()
+        self.om = self.organization_member
 
     def handle_success(self):
         member_joined.send_robust(
@@ -32,7 +58,8 @@ class ApiInviteHelper(object):
                 extra={"organization_id": self.om.organization.id, "user_id": self.request.user.id},
             )
 
-    def get_organization_member(self):
+    @property
+    def organization_member(self):
         return OrganizationMember.objects.select_related("organization").get(pk=self.member_id)
 
     @property
@@ -41,6 +68,8 @@ class ApiInviteHelper(object):
 
     @property
     def valid_token(self):
+        if self.token is None:
+            return False
         if self.om.token_expired:
             return False
         return constant_time_compare(self.om.token or self.om.legacy_token, self.token)
@@ -73,33 +102,27 @@ class ApiInviteHelper(object):
             and not self.needs_2fa
         )
 
-    def accept_invite(self):
+    def accept_invite(self, user=None):
         om = self.om
 
+        if user is None:
+            user = self.request.user
+
         if self.member_already_exists:
             self.handle_member_already_exists()
             om.delete()
         else:
-            om.set_user(self.request.user)
+            om.set_user(user)
             om.save()
 
             self.instance.create_audit_entry(
                 self.request,
                 organization=om.organization,
                 target_object=om.id,
-                target_user=self.request.user,
+                target_user=user,
                 event=AuditLogEntryEvent.MEMBER_ACCEPT,
                 data=om.get_audit_log_data(),
             )
 
             self.handle_success()
             metrics.incr("organization.invite-accepted", sample_rate=1.0)
-
-    def add_invite_cookie(self, request, response, member_id, token):
-        url = reverse("sentry-accept-invite", args=[member_id, token])
-        response.set_cookie(PENDING_INVITE, url, max_age=COOKIE_MAX_AGE)
-
-    def remove_invite_cookie(self, response):
-        if PENDING_INVITE in self.request.COOKIES:
-            response.delete_cookie(PENDING_INVITE)
-        return response
diff --git a/src/sentry/static/sentry/app/actionCreators/organizations.jsx b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
index 130f6f1185..aa7ccb5f60 100644
--- a/src/sentry/static/sentry/app/actionCreators/organizations.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/organizations.jsx
@@ -70,44 +70,47 @@ export function updateOrganization(org) {
   OrganizationsActions.update(org);
 }
 
-export function fetchOrganizationByMember(memberId, {addOrg, fetchOrgDetails}) {
+export async function fetchOrganizationByMember(memberId, {addOrg, fetchOrgDetails}) {
   const api = new Client();
-  const request = api.requestPromise(`/organizations/?query=member_id:${memberId}`);
+  const data = await api.requestPromise(`/organizations/?query=member_id:${memberId}`);
 
-  request.then(data => {
-    if (data.length) {
-      if (addOrg) {
-        // add org to SwitchOrganization dropdown
-        OrganizationsStore.add(data[0]);
-      }
+  if (!data.length) {
+    return null;
+  }
 
-      if (fetchOrgDetails) {
-        // load SidebarDropdown with org details including `access`
-        fetchOrganizationDetails(data[0].slug, {setActive: true, loadProjects: true});
-      }
-    }
-  });
+  const org = data[0];
+
+  if (addOrg) {
+    // add org to SwitchOrganization dropdown
+    OrganizationsStore.add(org);
+  }
 
-  return request;
+  if (fetchOrgDetails) {
+    // load SidebarDropdown with org details including `access`
+    await fetchOrganizationDetails(org.slug, {setActive: true, loadProjects: true});
+  }
+
+  return org;
 }
 
-export function fetchOrganizationDetails(orgId, {setActive, loadProjects, loadTeam}) {
+export async function fetchOrganizationDetails(
+  orgId,
+  {setActive, loadProjects, loadTeam}
+) {
   const api = new Client();
-  const request = api.requestPromise(`/organizations/${orgId}/`);
+  const data = await api.requestPromise(`/organizations/${orgId}/`);
 
-  request.then(data => {
-    if (setActive) {
-      setActiveOrganization(data);
-    }
+  if (setActive) {
+    setActiveOrganization(data);
+  }
 
-    if (loadTeam) {
-      TeamStore.loadInitialData(data.teams);
-    }
+  if (loadTeam) {
+    TeamStore.loadInitialData(data.teams);
+  }
 
-    if (loadProjects) {
-      ProjectsStore.loadInitialData(data.projects || []);
-    }
-  });
+  if (loadProjects) {
+    ProjectsStore.loadInitialData(data.projects || []);
+  }
 
-  return request;
+  return data;
 }
diff --git a/src/sentry/static/sentry/app/utils/getPendingInvite.tsx b/src/sentry/static/sentry/app/utils/getPendingInvite.tsx
new file mode 100644
index 0000000000..cab6a0871d
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/getPendingInvite.tsx
@@ -0,0 +1,18 @@
+import Cookies from 'js-cookie';
+import queryString from 'query-string';
+
+type PendingInvite = {
+  memberId: number;
+  token: string;
+  url: string;
+};
+
+export default function getPendingInvite(): PendingInvite | null {
+  const data = Cookies.get('pending-invite');
+
+  if (!data) {
+    return null;
+  }
+
+  return queryString.parse(data) as any;
+}
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index 3f0bc9f823..ef29bb898a 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -1,34 +1,28 @@
-/**
- * Renders necessary forms in order to enroll user in 2fa
- */
 import {withRouter} from 'react-router';
 import React from 'react';
-import Cookies from 'js-cookie';
 
+import {PanelItem} from 'app/components/panels';
 import {
   addErrorMessage,
   addMessage,
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
 import {openRecoveryOptions} from 'app/actionCreators/modal';
 import {fetchOrganizationByMember} from 'app/actionCreators/organizations';
+import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
 import CircleIndicator from 'app/components/circleIndicator';
+import Field from 'app/views/settings/components/forms/field';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import Field from 'app/views/settings/components/forms/field';
-import {PanelItem} from 'app/components/panels';
 import Qrcode from 'app/components/qrcode';
 import RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
-import U2fsign from 'app/components/u2f/u2fsign';
 import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
-
-const ENDPOINT = '/users/me/authenticators/';
-const PENDING_INVITE = 'pending-invite';
+import U2fsign from 'app/components/u2f/u2fsign';
+import getPendingInvite from 'app/utils/getPendingInvite';
 
 /**
  * Retrieve additional form fields (or modify ones) based on 2fa method
@@ -120,65 +114,52 @@ const getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTa
   return null;
 };
 
+/**
+ * Renders necessary forms in order to enroll user in 2fa
+ */
 class AccountSecurityEnroll extends AsyncView {
-  constructor(...args) {
-    super(...args);
-    this._form = {};
-  }
+  _form = {};
 
   getTitle() {
     return t('Security');
   }
 
+  get authenticatorEndpoint() {
+    return `/users/me/authenticators/${this.props.params.authId}/`;
+  }
+
+  get enrollEndpoint() {
+    return `${this.authenticatorEndpoint}enroll/`;
+  }
+
   getEndpoints() {
-    return [
-      [
-        'authenticator',
-        `${ENDPOINT}${this.props.params.authId}/enroll/`,
-        {},
-        {
-          allowError: err => {
-            const alreadyEnrolled =
-              err &&
-              err.status === 400 &&
-              err.responseJSON &&
-              err.responseJSON.details === 'Already enrolled';
-
-            if (alreadyEnrolled) {
-              this.props.router.push('/settings/account/security/');
-              addErrorMessage(t('Already enrolled'));
-              return true;
-            }
-            return false;
-          },
-        },
-      ],
-    ];
+    const errorHandler = err => {
+      const alreadyEnrolled =
+        err &&
+        err.status === 400 &&
+        err.responseJSON &&
+        err.responseJSON.details === 'Already enrolled';
+
+      if (alreadyEnrolled) {
+        this.props.router.push('/settings/account/security/');
+        addErrorMessage(t('Already enrolled'));
+      }
+
+      // Allow the endpoint to fail if the user is already enrolled
+      return alreadyEnrolled;
+    };
+
+    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];
   }
 
-  componentWillMount() {
-    super.componentWillMount();
-    // If 2FA is required, a pending organization invite
-    // can be accepted once the user enrolls in 2FA
-    let invite = Cookies.get(PENDING_INVITE);
-
-    if (invite) {
-      invite = invite.split('/');
-      this.invite = {
-        memberId: invite[2],
-        token: invite[3],
-      };
-    }
+  componentDidMount() {
+    this.pendingInvitation = getPendingInvite();
   }
 
-  loadOrganizationContext = () => {
-    if (this.invite && this.invite.memberId) {
-      fetchOrganizationByMember(this.invite.memberId, {
-        addOrg: true,
-        fetchOrgDetails: true,
-      });
-    }
-  };
+  get authenticatorName() {
+    const {authenticator} = this.state;
+    return (authenticator && authenticator.name) || 'Authenticator';
+  }
 
   handleFieldChange = (name, value) => {
     // This should not be used for rendering, that's why it's not in state
@@ -186,17 +167,10 @@ class AccountSecurityEnroll extends AsyncView {
   };
 
   // This resets state so that user can re-enter their phone number again
-  handleSmsReset = () => {
-    this.setState(
-      {
-        hasSentCode: false,
-      },
-      this.remountComponent
-    );
-  };
+  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);
 
-  // Handles
-  handleSmsSubmit = dataModel => {
+  // Handles SMS authenticators
+  handleSmsSubmit = async () => {
     const {authenticator, hasSentCode} = this.state;
 
     // Don't submit if empty
@@ -210,152 +184,134 @@ class AccountSecurityEnroll extends AsyncView {
       // Otherwise API will think that we are on verification step (e.g. after submitting phone)
       otp: hasSentCode ? this._form.otp || '' : undefined,
       secret: authenticator.secret,
-      ...this.invite,
     };
 
     // Only show loading when submitting OTP
-    this.setState({
-      loading: hasSentCode,
-    });
+    this.setState({loading: hasSentCode});
 
     if (!hasSentCode) {
       addMessage(t('Sending code to %s...', data.phone));
     }
 
-    this.api
-      .requestPromise(`${ENDPOINT}${this.props.params.authId}/enroll/`, {
-        data,
-      })
-      .then(
-        () => {
-          if (!hasSentCode) {
-            // Just successfully finished sending OTP to user
-            this.setState({
-              hasSentCode: true,
-              loading: false,
-              // authenticator: data,
-            });
-            addMessage(t('Sent code to %s', data.phone));
-          } else {
-            // OTP was accepted and SMS was added as a 2fa method
-            this.loadOrganizationContext();
-            this.props.router.push('/settings/account/security/');
-            openRecoveryOptions({
-              authenticatorName: authenticator.name,
-            });
-          }
-        },
-        error => {
-          this._form = {};
-          const isSmsInterface = authenticator.id === 'sms';
-
-          this.setState({
-            hasSentCode: !isSmsInterface,
-          });
-
-          // Re-mount because we want to fetch a fresh secret
-          this.remountComponent();
-
-          const errorMessage = this.state.hasSentCode
-            ? t('Incorrect OTP')
-            : t('Error sending SMS');
-          addErrorMessage(errorMessage);
-        }
+    try {
+      await this.api.requestPromise(this.enrollEndpoint, {data});
+    } catch (error) {
+      this._form = {};
+      const isSmsInterface = authenticator.id === 'sms';
+
+      this.setState({
+        hasSentCode: !isSmsInterface,
+      });
+
+      // Re-mount because we want to fetch a fresh secret
+      this.remountComponent();
+
+      addErrorMessage(
+        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')
       );
+
+      return;
+    }
+
+    if (!hasSentCode) {
+      // Just successfully finished sending OTP to user
+      this.setState({hasSentCode: true, loading: false});
+      addMessage(t('Sent code to %s', data.phone));
+    } else {
+      // OTP was accepted and SMS was added as a 2fa method
+      this.handleEnrollSuccess();
+    }
   };
 
   // Handle u2f device tap
-  handleU2fTap = data => {
-    return this.api
-      .requestPromise(`${ENDPOINT}${this.props.params.authId}/enroll/`, {
-        data: {
-          ...data,
-          ...this._form,
-          ...this.invite,
-        },
-      })
-      .then(this.handleEnrollSuccess, this.handleEnrollError);
+  handleU2fTap = async tapData => {
+    const data = {...tapData, ...this._form};
+
+    this.setState({loading: true});
+
+    try {
+      await this.api.requestPromise(this.enrollEndpoint, {data});
+    } catch (err) {
+      this.handleEnrollError();
+      return;
+    }
+
+    this.handleEnrollSuccess();
   };
 
   // Currently only TOTP uses this
-  handleSubmit = dataModel => {
-    const {authenticator} = this.state;
-
+  handleTotpSubmit = async dataModel => {
     const data = {
       ...this._form,
       ...(dataModel || {}),
-      secret: authenticator.secret,
-      ...this.invite,
+      secret: this.state.authenticator.secret,
     };
 
-    this.setState({
-      loading: true,
-    });
-    this.api
-      .requestPromise(`${ENDPOINT}${this.props.params.authId}/enroll/`, {
-        method: 'POST',
-        data,
-      })
-      .then(this.handleEnrollSuccess, this.handleEnrollError);
+    this.setState({loading: true});
+
+    try {
+      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});
+    } catch (err) {
+      this.handleEnrollError();
+      return;
+    }
+
+    this.handleEnrollSuccess();
   };
 
   // Handler when we successfully add a 2fa device
-  handleEnrollSuccess = () => {
-    this.loadOrganizationContext();
-    const authenticatorName =
-      (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
-    this.props.router.push('/settings/account/security');
-    openRecoveryOptions({
-      authenticatorName,
-    });
-  };
+  async handleEnrollSuccess() {
+    // If we're pending approval of an invite, the user will have just joined
+    // the organization when completing 2fa enrollment. We should reload the
+    // organization context in that case to assign them to the org.
+    if (this.pendingInvitation) {
+      await fetchOrganizationByMember(this.pendingInvitation.memberId, {
+        addOrg: true,
+        fetchOrgDetails: true,
+      });
+    }
+
+    this.props.router.push('/settings/account/security/');
+    openRecoveryOptions({authenticatorName: this.authenticatorName});
+  }
 
   // Handler when we failed to add a 2fa device
-  handleEnrollError = () => {
-    const authenticatorName =
-      (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
+  handleEnrollError() {
     this.setState({loading: false});
-    addErrorMessage(t('Error adding %s authenticator', authenticatorName));
-  };
+    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));
+  }
 
   // Removes an authenticator
-  handleRemove = () => {
+  handleRemove = async () => {
     const {authenticator} = this.state;
 
     if (!authenticator || !authenticator.authId) {
       return;
     }
 
-    // `authenticator.authId` is NOT the same as `props.params.authId`
-    // This is for backwards compatbility with API endpoint
-    this.api
-      .requestPromise(`${ENDPOINT}${authenticator.authId}/`, {
-        method: 'DELETE',
-      })
-      .then(
-        () => {
-          this.props.router.push('/settings/account/security/');
-          addSuccessMessage(t('Authenticator has been removed'));
-        },
-        () => {
-          // Error deleting authenticator
-          addErrorMessage(t('Error removing authenticator'));
-        }
-      );
+    // `authenticator.authId` is NOT the same as `props.params.authId` This is
+    // for backwards compatbility with API endpoint
+    try {
+      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});
+    } catch (err) {
+      addErrorMessage(t('Error removing authenticator'));
+      return;
+    }
+
+    this.props.router.push('/settings/account/security/');
+    addSuccessMessage(t('Authenticator has been removed'));
   };
 
   renderBody() {
-    const {authenticator} = this.state;
+    const {authenticator, hasSentCode} = this.state;
 
     if (!authenticator) {
       return null;
     }
 
-    const endpoint = `${ENDPOINT}${this.props.params.authId}/`;
-
     const fields = getFields({
       authenticator,
-      hasSentCode: this.state.hasSentCode,
+      hasSentCode,
       onSmsReset: this.handleSmsReset,
       onSmsSubmit: this.handleSmsSubmit,
       onU2fTap: this.handleU2fTap,
@@ -373,7 +329,7 @@ class AccountSecurityEnroll extends AsyncView {
       : {};
 
     return (
-      <div>
+      <React.Fragment>
         <SettingsPageHeader
           title={
             <React.Fragment>
@@ -397,15 +353,15 @@ class AccountSecurityEnroll extends AsyncView {
           <Form
             apiMethod="POST"
             onFieldChange={this.handleFieldChange}
-            apiEndpoint={endpoint}
-            onSubmit={this.handleSubmit}
+            apiEndpoint={this.authenticatorEndpoint}
+            onSubmit={this.handleTotpSubmit}
             initialData={{...defaultValues, ...authenticator}}
             hideFooter
           >
             <JsonForm forms={[{title: 'Configuration', fields}]} />
           </Form>
         )}
-      </div>
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
index eb5c67ee10..05f6579a36 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
@@ -17,32 +17,24 @@ class AccountSecurityWrapper extends AsyncComponent {
       return;
     }
 
-    this.setState(
-      {
-        loading: true,
-      },
-      () =>
-        this.api
-          .requestPromise(`${ENDPOINT}${auth.authId}/`, {
-            method: 'DELETE',
-          })
-          .then(this.remountComponent, () => {
-            this.setState({loading: false});
-            addErrorMessage(t('Error disabling', auth.name));
-          })
-    );
+    this.setState({loading: true});
+
+    this.api
+      .requestPromise(`${ENDPOINT}${auth.authId}/`, {method: 'DELETE'})
+      .then(this.remountComponent, () => {
+        this.setState({loading: false});
+        addErrorMessage(t('Error disabling', auth.name));
+      });
   };
 
   handleRegenerateBackupCodes = () => {
-    this.setState({loading: true}, () =>
-      this.api
-        .requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {
-          method: 'PUT',
-        })
-        .then(this.remountComponent, () =>
-          this.addError(t('Error regenerating backup codes'))
-        )
-    );
+    this.setState({loading: true});
+
+    this.api
+      .requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {method: 'PUT'})
+      .then(this.remountComponent, () =>
+        this.addError(t('Error regenerating backup codes'))
+      );
   };
 
   renderBody() {
@@ -54,9 +46,9 @@ class AccountSecurityWrapper extends AsyncComponent {
     const orgsRequire2fa = organizations.filter(org => org.require2FA);
     const deleteDisabled = orgsRequire2fa.length > 0 && countEnrolled === 1;
 
-    // This happens when you switch between children views
-    // And the next child view is lazy loaded, it can potentially be `null`
-    // while the code split package is being fetched
+    // This happens when you switch between children views and the next child
+    // view is lazy loaded, it can potentially be `null` while the code split
+    // package is being fetched
     if (this.props.children === null) {
       return null;
     }
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx
index db73a05458..1fdc0ded7e 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx
@@ -5,24 +5,17 @@ import ConfirmHeader from 'app/views/settings/account/accountSecurity/components
 import Confirm from 'app/components/confirm';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 
-class RemoveConfirm extends React.Component {
-  render() {
-    return (
-      <Confirm
-        message={
-          <React.Fragment>
-            <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>
-            <TextBlock>
-              {t(
-                'Removing the last authentication method will disable two-factor authentication completely.'
-              )}
-            </TextBlock>
-          </React.Fragment>
-        }
-        {...this.props}
-      />
-    );
-  }
-}
+const message = (
+  <React.Fragment>
+    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>
+    <TextBlock>
+      {t(
+        'Removing the last authentication method will disable two-factor authentication completely.'
+      )}
+    </TextBlock>
+  </React.Fragment>
+);
+
+const RemoveConfirm = props => <Confirm {...props} message={message} />;
 
 export default RemoveConfirm;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
index e4654f03db..3359672d01 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
@@ -3,38 +3,22 @@ import styled from 'react-emotion';
 
 import {tct} from 'app/locale';
 import Alert from 'app/components/alert';
-import AsyncComponent from 'app/components/asyncComponent';
-import Cookies from 'js-cookie';
 import ExternalLink from 'app/components/links/externalLink';
 import space from 'app/styles/space';
-
-const PENDING_INVITE = 'pending-invite';
-
-class TwoFactorRequired extends AsyncComponent {
-  getEndpoints() {
-    return [];
-  }
-
-  renderBody() {
-    const pendingInvite = Cookies.get(PENDING_INVITE);
-
-    if (!pendingInvite) {
-      return null;
-    }
-
-    return (
-      <StyledAlert data-test-id="require-2fa" type="error" icon="icon-circle-exclamation">
-        {tct(
-          'You have been invited to an organization that requires [link:two-factor authentication].' +
-            ' Setup two-factor authentication below to join your organization.',
-          {
-            link: <ExternalLink href="https://docs.sentry.io/accounts/require-2fa/" />,
-          }
-        )}
-      </StyledAlert>
-    );
-  }
-}
+import getPendingInvite from 'app/utils/getPendingInvite';
+
+const TwoFactorRequired = () =>
+  !getPendingInvite() ? null : (
+    <StyledAlert data-test-id="require-2fa" type="error" icon="icon-circle-exclamation">
+      {tct(
+        'You have been invited to an organization that requires [link:two-factor authentication].' +
+          ' Setup two-factor authentication below to join your organization.',
+        {
+          link: <ExternalLink href="https://docs.sentry.io/accounts/require-2fa/" />,
+        }
+      )}
+    </StyledAlert>
+  );
 
 const StyledAlert = styled(Alert)`
   margin: ${space(3)} 0;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
index 00837453d4..b7eddeff5d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
@@ -1,6 +1,3 @@
-/**
- * Lists 2fa devices + password change form
- */
 import {Box, Flex} from 'grid-emotion';
 import React from 'react';
 import styled from 'react-emotion';
@@ -23,6 +20,9 @@ import RemoveConfirm from 'app/views/settings/account/accountSecurity/components
 import PasswordForm from 'app/views/settings/account/passwordForm';
 import recreateRoute from 'app/utils/recreateRoute';
 
+/**
+ * Lists 2fa devices + password change form
+ */
 class AccountSecurity extends AsyncView {
   static PropTypes = {
     authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,
@@ -162,9 +162,11 @@ class AccountSecurity extends AsyncView {
                             onConfirm={() => onDisable(auth)}
                             disabled={deleteDisabled}
                           >
-                            <Button css={{marginLeft: 6}} size="small">
-                              <span className="icon icon-trash" />
-                            </Button>
+                            <Button
+                              css={{marginLeft: 6}}
+                              size="small"
+                              icon="icon-trash"
+                            />
                           </RemoveConfirm>
                         </Tooltip>
                       )}
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
index d4680e10eb..0d284ef8ff 100644
--- a/tests/js/spec/views/accountSecurity.spec.jsx
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -59,7 +59,7 @@ describe('AccountSecurity', function() {
     ).toBe('Info');
 
     // Remove button
-    expect(wrapper.find('Button .icon-trash')).toHaveLength(1);
+    expect(wrapper.find('Button[icon="icon-trash"]')).toHaveLength(1);
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
 
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
@@ -92,7 +92,7 @@ describe('AccountSecurity', function() {
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
 
     // This will open confirm modal
-    wrapper.find('Button .icon-trash').simulate('click');
+    wrapper.find('Button[icon="icon-trash"]').simulate('click');
     // Confirm
     wrapper
       .find('Modal Button')
@@ -160,7 +160,7 @@ describe('AccountSecurity', function() {
 
     // This will open confirm modal
     wrapper
-      .find('Button .icon-trash')
+      .find('Button[icon="icon-trash"]')
       .first()
       .simulate('click');
 
@@ -206,7 +206,7 @@ describe('AccountSecurity', function() {
     expect(wrapper.find('Tooltip').prop('title')).toContain('test 1 and test 2');
 
     // This will open confirm modal
-    wrapper.find('Button .icon-trash').simulate('click');
+    wrapper.find('Button[icon="icon-trash"]').simulate('click');
     // Confirm
     expect(wrapper.find('Modal Button')).toHaveLength(0);
     expect(deleteMock).not.toHaveBeenCalled();
diff --git a/tests/js/spec/views/twoFactorRequired.spec.jsx b/tests/js/spec/views/twoFactorRequired.spec.jsx
index 459eeb2ae0..f10fcc99e1 100644
--- a/tests/js/spec/views/twoFactorRequired.spec.jsx
+++ b/tests/js/spec/views/twoFactorRequired.spec.jsx
@@ -7,7 +7,7 @@ import AccountSecurityWrapper from 'app/views/settings/account/accountSecurity/a
 
 const ENDPOINT = '/users/me/authenticators/';
 const ORG_ENDPOINT = '/organizations/';
-const PENDING_INVITE = 'pending-invite';
+const INVITE_COOKIE = 'pending-invite';
 
 describe('TwoFactorRequired', function() {
   beforeEach(function() {
@@ -67,7 +67,12 @@ describe('TwoFactorRequired', function() {
   });
 
   it('does not render when 2FA is enrolled and has pendingInvite cookie', function() {
-    Cookies.set(PENDING_INVITE, '/accept/5/abcde/');
+    const cookieData = {
+      memberId: 5,
+      token: 'abcde',
+      url: '/accept/5/abcde/',
+    };
+    Cookies.set(INVITE_COOKIE, cookieData);
     MockApiClient.addMockResponse({
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
@@ -85,11 +90,11 @@ describe('TwoFactorRequired', function() {
     );
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
     expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(0);
-    Cookies.remove(PENDING_INVITE);
+    Cookies.remove(INVITE_COOKIE);
   });
 
   it('renders when 2FA is disabled and has pendingInvite cookie', function() {
-    Cookies.set(PENDING_INVITE, '/accept/5/abcde/');
+    Cookies.set(INVITE_COOKIE, '/accept/5/abcde/');
     MockApiClient.addMockResponse({
       url: ORG_ENDPOINT,
       body: TestStubs.Organizations({require2FA: true}),
@@ -103,6 +108,6 @@ describe('TwoFactorRequired', function() {
     );
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
     expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(1);
-    Cookies.remove(PENDING_INVITE);
+    Cookies.remove(INVITE_COOKIE);
   });
 });
diff --git a/tests/sentry/api/endpoints/test_accept_organization_invite.py b/tests/sentry/api/endpoints/test_accept_organization_invite.py
index ee8d7cdc95..b17150a6e0 100644
--- a/tests/sentry/api/endpoints/test_accept_organization_invite.py
+++ b/tests/sentry/api/endpoints/test_accept_organization_invite.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from six.moves.urllib.parse import parse_qsl
 from django.core.urlresolvers import reverse
 from django.db.models import F
 from datetime import timedelta
@@ -26,11 +27,13 @@ class AcceptInviteTest(TestCase):
         self.organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         assert self.organization.flags.require_2fa.is_set
 
-    def _assert_2fa_cookie_set(self, response, om):
+    def _assert_pending_invite_cookie_set(self, response, om):
         invite_link = om.get_invite_link()
-        self.assertIn(response.client.cookies["pending-invite"].value, invite_link)
+        invite_data = dict(parse_qsl(response.client.cookies["pending-invite"].value))
 
-    def _assert_2fa_cookie_not_set(self, response):
+        self.assertIn(invite_data.get("url"), invite_link)
+
+    def _assert_pending_invite_cookie_not_set(self, response):
         self.assertNotIn("pending-invite", response.client.cookies)
 
     def _enroll_user_in_2fa(self):
@@ -86,7 +89,7 @@ class AcceptInviteTest(TestCase):
         assert resp.status_code == 200
         assert resp.data["needs2fa"]
 
-        self._assert_2fa_cookie_set(resp, om)
+        self._assert_pending_invite_cookie_set(resp, om)
 
     def test_user_has_2fa(self):
         self._require_2fa_for_organization()
@@ -103,7 +106,7 @@ class AcceptInviteTest(TestCase):
         assert resp.status_code == 200
         assert not resp.data["needs2fa"]
 
-        self._assert_2fa_cookie_not_set(resp)
+        self._assert_pending_invite_cookie_not_set(resp)
 
     def test_user_can_use_sso(self):
         AuthProvider.objects.create(organization=self.organization, provider="google")
@@ -203,7 +206,7 @@ class AcceptInviteTest(TestCase):
         )
         assert resp.status_code == 204
 
-        self._assert_2fa_cookie_not_set(resp)
+        self._assert_pending_invite_cookie_not_set(resp)
 
         om = OrganizationMember.objects.get(id=om.id)
         assert om.email is None
@@ -245,7 +248,7 @@ class AcceptInviteTest(TestCase):
             reverse("sentry-api-0-accept-organization-invite", args=[om.id, om.token])
         )
         assert resp.status_code == 200
-        self._assert_2fa_cookie_set(resp, om)
+        self._assert_pending_invite_cookie_set(resp, om)
 
         self._enroll_user_in_2fa()
         resp = self.client.post(
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
index d1c8c6fd84..2e9338f654 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import mock
 
+from six.moves.urllib.parse import parse_qsl
 from django.core.urlresolvers import reverse
 from django.conf import settings
 from django.db.models import F
@@ -173,9 +174,10 @@ class AcceptOrganizationInviteTest(APITestCase):
         self.organization.update(flags=F("flags").bitor(Organization.flags.require_2fa))
         self.assertTrue(self.organization.flags.require_2fa.is_set)
 
-    def assert_2fa_cookie_set(self, response, om):
+    def _assert_pending_invite_cookie_set(self, response, om):
         invite_link = om.get_invite_link()
-        self.assertIn(response.client.cookies["pending-invite"].value, invite_link)
+        invite_data = dict(parse_qsl(response.client.cookies["pending-invite"].value))
+        self.assertIn(invite_data.get("url"), invite_link)
 
     def create_existing_om(self):
         OrganizationMember.objects.create(
@@ -191,7 +193,7 @@ class AcceptOrganizationInviteTest(APITestCase):
             reverse("sentry-api-0-accept-organization-invite", args=[om.id, om.token])
         )
         assert resp.status_code == 200
-        self.assert_2fa_cookie_set(resp, om)
+        self._assert_pending_invite_cookie_set(resp, om)
 
         return om
 
@@ -210,7 +212,7 @@ class AcceptOrganizationInviteTest(APITestCase):
 
         self.assertFalse(response.client.cookies["pending-invite"].value)
 
-    def setup_u2f(self, om, member_id=None, token=None):
+    def setup_u2f(self):
         new_options = settings.SENTRY_OPTIONS.copy()
         new_options["system.url-prefix"] = "https://testserver"
         with self.settings(SENTRY_OPTIONS=new_options):
@@ -225,8 +227,6 @@ class AcceptOrganizationInviteTest(APITestCase):
                     "deviceName": "device name",
                     "challenge": "challenge",
                     "response": "response",
-                    "memberId": member_id or om.id,
-                    "token": token or om.token,
                 },
             )
             assert resp.status_code == 204
@@ -243,7 +243,7 @@ class AcceptOrganizationInviteTest(APITestCase):
     @mock.patch("sentry.models.U2fInterface.try_enroll", return_value=True)
     def test_accept_pending_invite__u2f_enroll(self, try_enroll):
         om = self.get_om_and_init_invite()
-        resp = self.setup_u2f(om)
+        resp = self.setup_u2f()
 
         self.assert_invite_accepted(resp, om.id)
 
@@ -311,7 +311,7 @@ class AcceptOrganizationInviteTest(APITestCase):
     def test_user_already_org_member(self, try_enroll, log):
         om = self.get_om_and_init_invite()
         self.create_existing_om()
-        self.setup_u2f(om)
+        self.setup_u2f()
 
         assert not OrganizationMember.objects.filter(id=om.id).exists()
 
@@ -324,7 +324,12 @@ class AcceptOrganizationInviteTest(APITestCase):
     @mock.patch("sentry.models.U2fInterface.try_enroll", return_value=True)
     def test_org_member_does_not_exist(self, try_enroll, log):
         om = self.get_om_and_init_invite()
-        self.setup_u2f(om, member_id=om.id + 20)
+
+        # Mutate the OrganizationMember, putting it out of sync with the
+        # pending member cookie.
+        om.update(id=om.id + 1)
+
+        self.setup_u2f()
 
         om = OrganizationMember.objects.get(id=om.id)
         assert om.user is None
@@ -337,7 +342,12 @@ class AcceptOrganizationInviteTest(APITestCase):
     @mock.patch("sentry.models.U2fInterface.try_enroll", return_value=True)
     def test_invalid_token(self, try_enroll, log):
         om = self.get_om_and_init_invite()
-        self.setup_u2f(om, token="123")
+
+        # Mutate the OrganizationMember, putting it out of sync with the
+        # pending member cookie.
+        om.update(token="123")
+
+        self.setup_u2f()
 
         om = OrganizationMember.objects.get(id=om.id)
         assert om.user is None
