commit c1acfcc1658c7c18e29984368e9214e4a208841d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Mar 12 08:57:12 2020 -0700

    ref(workflow): Refactor Alerts header (#17303)
    
    * ref(workflow): Refactor Alerts header
    
    Removes unused/old files, moves some files around, add different headers for alerts list, creating an alert, and editing an alert.
    
    Adds consistency between issue and metric alerts.
    
    * update name
    
    * add edit component
    
    * cleaned up state
    
    * simplify
    
    * ruleRowNew-->ruleRow
    
    * add header to alert settings and remove some redundant things
    
    * use <IconAdd>
    
    * fix sizes
    
    * re-add OnboardingHovercard to add new alert rule button
    
    * Update src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
    
    Co-Authored-By: Priscila Oliveira <priscila.oliveira@sentry.io>
    
    * review fixes
    
    * missing destructure
    
    * use func expression
    
    Co-authored-by: Priscila Oliveira <priscila.oliveira@sentry.io>

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 1523e25f86..bb0391e35c 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -299,7 +299,7 @@ function routes() {
             component={errorHandler(LazyLoad)}
             componentPromise={() =>
               import(
-                /* webpackChunkName: "ProjectAlertsIssueCreate" */ 'app/views/settings/projectAlerts/create'
+                /* webpackChunkName: "ProjectAlertsCreate" */ 'app/views/settings/projectAlerts/create'
               )
             }
           />
@@ -308,7 +308,7 @@ function routes() {
             name="Edit Alert Rule"
             componentPromise={() =>
               import(
-                /* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/issueEditor'
+                /* webpackChunkName: "ProjectAlertsEdit" */ 'app/views/settings/projectAlerts/edit'
               )
             }
             component={errorHandler(LazyLoad)}
@@ -322,17 +322,17 @@ function routes() {
             path="new/"
             componentPromise={() =>
               import(
-                /* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/projectAlerts/create'
+                /* webpackChunkName: "ProjectAlertsCreate" */ 'app/views/settings/projectAlerts/create'
               )
             }
             component={errorHandler(LazyLoad)}
           />
           <Route
             name="Edit Alert Rule"
-            path=":incidentRuleId/"
+            path=":ruleId/"
             componentPromise={() =>
               import(
-                /* webpackChunkName: "IncidentRulesDetails" */ 'app/views/settings/incidentRules/details'
+                /* webpackChunkName: "ProjectAlertsEdit" */ 'app/views/settings/projectAlerts/edit'
               )
             }
             component={errorHandler(LazyLoad)}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
index 662fa64106..dc843f7109 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -4,7 +4,6 @@ import React from 'react';
 import {Organization, Project} from 'app/types';
 import {createDefaultRule} from 'app/views/settings/incidentRules/constants';
 import recreateRoute from 'app/utils/recreateRoute';
-import withOrganization from 'app/utils/withOrganization';
 import withProject from 'app/utils/withProject';
 
 import RuleForm from './ruleForm';
@@ -12,7 +11,7 @@ import RuleForm from './ruleForm';
 type RouteParams = {
   orgId: string;
   projectId: string;
-  incidentRuleId: string; //TODO(ts): make optional
+  ruleId?: string;
 };
 
 type Props = {
@@ -43,4 +42,4 @@ class IncidentRulesCreate extends React.Component<Props> {
   }
 }
 
-export default withProject(withOrganization(IncidentRulesCreate));
+export default withProject(IncidentRulesCreate);
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index 48e8f52c20..495a5db7bf 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -6,12 +6,11 @@ import {Organization} from 'app/types';
 import AsyncView from 'app/views/asyncView';
 import RuleForm from 'app/views/settings/incidentRules/ruleForm';
 import recreateRoute from 'app/utils/recreateRoute';
-import withOrganization from 'app/utils/withOrganization';
 
 type RouteParams = {
   orgId: string;
   projectId: string;
-  incidentRuleId: string;
+  ruleId: string;
 };
 
 type Props = {
@@ -32,10 +31,10 @@ class IncidentRulesDetails extends AsyncView<Props, State> {
   }
 
   getEndpoints() {
-    const {orgId, projectId, incidentRuleId} = this.props.params;
+    const {orgId, projectId, ruleId} = this.props.params;
 
     return [
-      ['rule', `/projects/${orgId}/${projectId}/alert-rules/${incidentRuleId}/`] as [
+      ['rule', `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`] as [
         string,
         string
       ],
@@ -49,13 +48,13 @@ class IncidentRulesDetails extends AsyncView<Props, State> {
   };
 
   renderBody() {
-    const {incidentRuleId} = this.props.params;
+    const {ruleId} = this.props.params;
     const {rule} = this.state;
 
     return (
       <RuleForm
         {...this.props}
-        incidentRuleId={incidentRuleId}
+        ruleId={ruleId}
         rule={rule}
         onSubmitSuccess={this.handleSubmitSuccess}
       />
@@ -63,4 +62,4 @@ class IncidentRulesDetails extends AsyncView<Props, State> {
   }
 }
 
-export default withOrganization(IncidentRulesDetails);
+export default IncidentRulesDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index 9fb68f7692..fc4e874c7d 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -43,11 +43,8 @@ type Props = {
   project: Project;
   routes: PlainRoute[];
   rule: IncidentRule;
-  incidentRuleId?: string;
-} & RouteComponentProps<
-  {orgId: string; projectId: string; incidentRuleId: string},
-  {}
-> & {
+  ruleId?: string;
+} & RouteComponentProps<{orgId: string; projectId: string; ruleId?: string}, {}> & {
     onSubmitSuccess?: Form['props']['onSubmitSuccess'];
   } & AsyncComponent['props'];
 
@@ -298,17 +295,18 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     }
 
     const {organization, params, rule, onSubmitSuccess} = this.props;
+    const {ruleId} = this.props.params;
 
     // form model has all form state data, however we use local state to keep
     // track of the list of triggers (and actions within triggers)
     try {
-      addLoadingMessage(t('Saving alert'));
+      addLoadingMessage();
       const resp = await addOrUpdateRule(this.api, organization.slug, params.projectId, {
         ...rule,
         ...model.getTransformedData(),
         triggers: this.state.triggers.map(sanitizeTrigger),
       });
-      addSuccessMessage(t('Successfully saved alert'));
+      addSuccessMessage(ruleId ? t('Updated alert rule') : t('Created alert rule'));
       if (onSubmitSuccess) {
         onSubmitSuccess(resp, model);
       }
@@ -359,11 +357,11 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
 
   handleDeleteRule = async () => {
     const {params} = this.props;
-    const {orgId, projectId, incidentRuleId} = params;
+    const {orgId, projectId, ruleId} = params;
 
     try {
       await this.api.requestPromise(
-        `/projects/${orgId}/${projectId}/alert-rules/${incidentRuleId}/`,
+        `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`,
         {
           method: 'DELETE',
         }
@@ -383,23 +381,16 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
   }
 
   renderBody() {
-    const {
-      config,
-      organization,
-      incidentRuleId,
-      rule,
-      params,
-      onSubmitSuccess,
-    } = this.props;
+    const {config, organization, ruleId, rule, params, onSubmitSuccess} = this.props;
     const {query, aggregation, timeWindow, triggers} = this.state;
 
     return (
       <Access access={['project:write']}>
         {({hasAccess}) => (
           <Form
-            apiMethod={incidentRuleId ? 'PUT' : 'POST'}
+            apiMethod={ruleId ? 'PUT' : 'POST'}
             apiEndpoint={`/organizations/${organization.slug}/alert-rules/${
-              incidentRuleId ? `${incidentRuleId}/` : ''
+              ruleId ? `${ruleId}/` : ''
             }`}
             submitDisabled={!hasAccess}
             initialData={{
@@ -458,7 +449,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
               triggers={triggers}
               currentProject={params.projectId}
               organization={organization}
-              incidentRuleId={incidentRuleId}
+              ruleId={ruleId}
               availableActions={this.state.availableActions}
               onChange={this.handleChangeTriggers}
               onAdd={this.handleAddTrigger}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
index a09a21f0c4..1722e06367 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
@@ -40,7 +40,7 @@ const DeleteButton = ({triggerIndex, onDelete, disabled}: DeleteButtonProps) =>
 type Props = {
   organization: Organization;
   projects: Project[];
-  incidentRuleId?: string;
+  ruleId?: string;
   triggers: Trigger[];
   currentProject: string;
   availableActions: MetricActionTemplate[] | null;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
index ea3a2e2634..7ef5c210bf 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
@@ -1,50 +1,38 @@
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
+import {Organization} from 'app/types';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
 import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
+import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
 import PanelItem from 'app/components/panels/panelItem';
 import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';
-import routeTitleGen from 'app/utils/routeTitle';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 
 type RouteParams = {
   orgId: string;
   projectId: string;
-  incidentRuleId: string;
 };
 
 type Props = RouteComponentProps<RouteParams, {}> & {
+  organization: Organization;
   hasMetricAlerts: boolean;
 };
 
 type State = {
   alertType: string | null;
-} & AsyncView['state'];
-
-class Create extends AsyncView<Props, State> {
-  getDefaultState() {
-    const {pathname} = this.props.location;
-
-    return {
-      ...super.getDefaultState(),
-      alertType: pathname.includes('/alerts/rules/')
-        ? 'issue'
-        : pathname.includes('/alerts/metric-rules/')
-        ? 'metric'
-        : null,
-    };
-  }
-
-  getTitle() {
-    return routeTitleGen(t('New Alert'), this.props.params.projectId, false);
-  }
+};
 
-  getEndpoints(): [string, string][] {
-    return [];
-  }
+class Create extends React.Component<Props, State> {
+  state = {
+    alertType: this.props.location.pathname.includes('/alerts/rules/')
+      ? 'issue'
+      : this.props.location.pathname.includes('/alerts/metric-rules/')
+      ? 'metric'
+      : null,
+  };
 
   handleChangeAlertType = (alertType: string) => {
     // alertType should be `issue` or `metric`
@@ -53,18 +41,19 @@ class Create extends AsyncView<Props, State> {
     });
   };
 
-  renderLoading() {
-    return this.renderBody();
-  }
-
-  renderBody() {
+  render() {
     const {hasMetricAlerts} = this.props;
+    const {projectId} = this.props.params;
     const {alertType} = this.state;
 
     const shouldShowAlertTypeChooser = hasMetricAlerts;
+    const title = t('New Alert');
 
     return (
       <React.Fragment>
+        <SentryDocumentTitle title={title} objSlug={projectId} />
+        <SettingsPageHeader title={title} />
+
         {shouldShowAlertTypeChooser && (
           <Panel>
             <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>
@@ -72,7 +61,7 @@ class Create extends AsyncView<Props, State> {
               <PanelItem>
                 <RadioGroup
                   label={t('Select an Alert Type')}
-                  value={this.state.alertType}
+                  value={alertType}
                   choices={[
                     [
                       'metric',
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
new file mode 100644
index 0000000000..d560b5af59
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
@@ -0,0 +1,42 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {Organization} from 'app/types';
+import {t} from 'app/locale';
+import IncidentRulesDetails from 'app/views/settings/incidentRules/details';
+import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+  ruleId: string;
+};
+
+type Props = RouteComponentProps<RouteParams, {}> & {
+  organization: Organization;
+  hasMetricAlerts: boolean;
+};
+
+function ProjectAlertsEditor(props: Props) {
+  const {hasMetricAlerts, location, params} = props;
+  const {projectId} = params;
+  const alertType = location.pathname.includes('/alerts/metric-rules/')
+    ? 'metric'
+    : 'issue';
+  const title = t('Edit Alert');
+
+  return (
+    <React.Fragment>
+      <SentryDocumentTitle title={title} objSlug={projectId} />
+      <SettingsPageHeader title={title} />
+
+      {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...props} />}
+
+      {hasMetricAlerts && alertType === 'metric' && <IncidentRulesDetails {...props} />}
+    </React.Fragment>
+  );
+}
+
+export default ProjectAlertsEditor;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
index 95010d7254..30d20b14e5 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
@@ -5,32 +5,28 @@ import {Organization} from 'app/types';
 import Access from 'app/components/acl/access';
 import Feature from 'app/components/acl/feature';
 
-import ProjectAlertHeader from './projectAlertHeaderNew';
-
 type Props = {
   organization: Organization;
   children: React.ReactNode;
 } & RouteComponentProps<{organizationId: string; projectId: string}, {}>;
 
-function ProjectAlerts({children, organization, ...props}: Props) {
-  return (
-    <Access organization={organization} access={['project:write']}>
-      {({hasAccess}) => (
-        <Feature organization={organization} features={['incidents']}>
-          {({hasFeature}) => (
-            <React.Fragment>
-              <ProjectAlertHeader canEditRule={hasAccess} {...props} />
-
-              {React.isValidElement(children) &&
-                React.cloneElement(children, {
-                  hasMetricAlerts: hasFeature,
-                })}
-            </React.Fragment>
-          )}
-        </Feature>
-      )}
-    </Access>
-  );
-}
+const ProjectAlerts = ({children, organization}: Props) => (
+  <Access organization={organization} access={['project:write']}>
+    {({hasAccess}) => (
+      <Feature organization={organization} features={['incidents']}>
+        {({hasFeature}) => (
+          <React.Fragment>
+            {React.isValidElement(children) &&
+              React.cloneElement(children, {
+                organization,
+                canEditRule: hasAccess,
+                hasMetricAlerts: hasFeature,
+              })}
+          </React.Fragment>
+        )}
+      </Feature>
+    )}
+  </Access>
+);
 
 export default ProjectAlerts;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
index 7caa7262e7..43b3af0ec2 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/issueEditor/index.tsx
@@ -29,7 +29,6 @@ import PanelAlert from 'app/components/panels/panelAlert';
 import PanelItem from 'app/components/panels/panelItem';
 import PanelSubHeader from 'app/views/settings/incidentRules/triggers/panelSubHeader';
 import SelectField from 'app/views/settings/components/forms/selectField';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import TextField from 'app/views/settings/components/forms/textField';
 import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
@@ -132,7 +131,7 @@ class IssueRuleEditor extends AsyncView<Props, State> {
       delete rule.environment;
     }
 
-    addLoadingMessage(t('Saving...'));
+    addLoadingMessage();
 
     try {
       const resp = await this.api.requestPromise(endpoint, {
@@ -140,24 +139,26 @@ class IssueRuleEditor extends AsyncView<Props, State> {
         data: rule,
       });
       this.setState({detailedError: null, rule: resp});
+
+      // The onboarding task will be completed on the server side when the alert
+      // is created
+      updateOnboardingTask(null, organization, {
+        task: OnboardingTaskKey.ALERT_RULE,
+        status: 'complete',
+      });
+
+      addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
+
+      // When editing, there is an extra route to move back from
+      const stepBack = isNew ? -1 : -2;
+      browserHistory.replace(recreateRoute('', {...this.props, stepBack}));
     } catch (err) {
       this.setState({
         detailedError: err.responseJSON || {__all__: 'Unknown error'},
         loading: false,
       });
       addErrorMessage(t('An error occurred'));
-      return;
     }
-
-    // The onboarding task will be completed on the server side when the alert
-    // is created
-    updateOnboardingTask(null, organization, {
-      task: OnboardingTaskKey.ALERT_RULE,
-      status: 'complete',
-    });
-
-    addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));
-    browserHistory.replace(recreateRoute('', {...this.props, stepBack: -2}));
   };
 
   handleDeleteRule = async () => {
@@ -301,7 +302,6 @@ class IssueRuleEditor extends AsyncView<Props, State> {
   }
 
   renderBody() {
-    const {projectId, ruleId} = this.props.params;
     const {environments} = this.state;
     const environmentChoices = [
       [ALL_ENVIRONMENTS_KEY, t('All Environments')],
@@ -314,14 +314,11 @@ class IssueRuleEditor extends AsyncView<Props, State> {
     const environment =
       !rule || !rule.environment ? ALL_ENVIRONMENTS_KEY : rule.environment;
 
-    const title = ruleId ? t('Edit Alert') : t('New Alert');
-
     // Note `key` on `<Form>` below is so that on initial load, we show
     // the form with a loading mask on top of it, but force a re-render by using
     // a different key when we have fetched the rule so that form inputs are filled in
     return (
       <React.Fragment>
-        <SentryDocumentTitle title={title} objSlug={projectId} />
         <StyledForm
           key={isSavedAlertRule(rule) ? rule.id : undefined}
           onCancel={this.handleCancel}
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
index ed5724e96c..31c504b2ff 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/list.tsx
@@ -2,20 +2,27 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {IconAdd} from 'app/icons';
 import {IssueAlertRule} from 'app/types/alerts';
 import {Organization} from 'app/types';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
+import OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';
 import PermissionAlert from 'app/views/settings/project/permissionAlert';
-import RuleRow from 'app/views/settings/projectAlerts/ruleRowNew';
+import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import Tooltip from 'app/components/tooltip';
 import routeTitle from 'app/utils/routeTitle';
 import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
 
-type Props = {organization: Organization} & RouteComponentProps<
+type Props = {
+  canEditRule: boolean;
+  organization: Organization;
+} & RouteComponentProps<
   {
     orgId: string;
     projectId: string;
@@ -49,9 +56,8 @@ class ProjectAlertRules extends AsyncView<Props, State> {
   }
 
   renderResults() {
-    const {organization, params} = this.props;
+    const {canEditRule, params} = this.props;
     const {orgId, projectId} = params;
-    const canEditRule = organization.access.includes('project:write');
 
     return (
       <React.Fragment>
@@ -78,10 +84,40 @@ class ProjectAlertRules extends AsyncView<Props, State> {
   }
 
   renderBody() {
+    const {canEditRule, location, organization, params} = this.props;
+    const {orgId, projectId} = params;
     const {loading, rules} = this.state;
 
+    const basePath = `/settings/${orgId}/projects/${projectId}/alerts/`;
+
     return (
       <React.Fragment>
+        <SettingsPageHeader
+          title={t('Alerts')}
+          action={
+            <HeaderActions>
+              <Button to={`${basePath}settings/`} size="small" icon="icon-settings">
+                {t('Settings')}
+              </Button>
+              <OnboardingHovercard organization={organization} location={location}>
+                <Tooltip
+                  disabled={canEditRule}
+                  title={t('You do not have permission to edit alert rules.')}
+                >
+                  <Button
+                    to={`${basePath}new/`}
+                    disabled={!canEditRule}
+                    priority="primary"
+                    size="small"
+                    icon={<IconAdd size="xs" circle />}
+                  >
+                    {t('New Alert Rule')}
+                  </Button>
+                </Tooltip>
+              </OnboardingHovercard>
+            </HeaderActions>
+          }
+        />
         <PermissionAlert />
 
         <Panel>
@@ -107,7 +143,7 @@ class ProjectAlertRules extends AsyncView<Props, State> {
   }
 }
 
-export default withOrganization(ProjectAlertRules);
+export default ProjectAlertRules;
 
 const RuleHeader = styled(PanelHeader)`
   display: grid;
@@ -121,3 +157,9 @@ const TriggerAndActions = styled('div')`
   grid-template-columns: 1fr 1fr;
   grid-auto-flow: column;
 `;
+
+const HeaderActions = styled('div')`
+  display: grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeader.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeader.tsx
deleted file mode 100644
index 5a39c638f5..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeader.tsx
+++ /dev/null
@@ -1,49 +0,0 @@
-import React from 'react';
-
-import {t} from 'app/locale';
-import Button from 'app/components/button';
-import ListLink from 'app/components/links/listLink';
-import NavTabs from 'app/components/navTabs';
-import Tooltip from 'app/components/tooltip';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import withOrganization from 'app/utils/withOrganization';
-import {Organization} from 'app/types';
-import {IconAdd} from 'app/icons/iconAdd';
-
-type Props = {
-  organization: Organization;
-  projectId: string;
-};
-
-export default withOrganization(({organization, projectId}: Props) => {
-  const canEditRule = organization.access.includes('project:write');
-  const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts/`;
-
-  return (
-    <SettingsPageHeader
-      title={t('Alerts')}
-      action={
-        <Tooltip
-          disabled={canEditRule}
-          title={t('You do not have permission to edit alert rules.')}
-        >
-          <Button
-            to={`${basePath}rules/new/`}
-            disabled={!canEditRule}
-            priority="primary"
-            size="small"
-            icon={<IconAdd size="xs" circle />}
-          >
-            {t('New Alert Rule')}
-          </Button>
-        </Tooltip>
-      }
-      tabs={
-        <NavTabs underlined>
-          <ListLink to={`${basePath}rules/`}>{t('Rules')}</ListLink>
-          <ListLink to={`${basePath}settings/`}>{t('Settings')}</ListLink>
-        </NavTabs>
-      }
-    />
-  );
-});
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
deleted file mode 100644
index 1e123dee06..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import {RouteComponentProps} from 'react-router/lib/Router';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {Organization} from 'app/types';
-import {t} from 'app/locale';
-import Button from 'app/components/button';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import Tooltip from 'app/components/tooltip';
-import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
-import OnboardingHovercard from 'app/views/settings/projectAlerts/onboardingHovercard';
-import {IconAdd} from 'app/icons/iconAdd';
-
-type Props = {
-  organization: Organization;
-  canEditRule: boolean;
-} & RouteComponentProps<{projectId: string}, {}>;
-
-class ProjectAlertHeader extends React.Component<Props> {
-  render() {
-    const {canEditRule, params, organization, location} = this.props;
-    const {projectId} = params;
-
-    const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts/`;
-
-    return (
-      <SettingsPageHeader
-        title={t('Alerts')}
-        action={
-          <Actions>
-            <Button to={`${basePath}settings/`} size="small" icon="icon-settings">
-              {t('Settings')}
-            </Button>
-            <OnboardingHovercard organization={organization} location={location}>
-              <Tooltip
-                disabled={canEditRule}
-                title={t('You do not have permission to edit alert rules.')}
-              >
-                <Button
-                  to={`${basePath}new/`}
-                  disabled={!canEditRule}
-                  priority="primary"
-                  size="small"
-                  icon={<IconAdd size="xs" circle />}
-                >
-                  {t('New Alert Rule')}
-                </Button>
-              </Tooltip>
-            </OnboardingHovercard>
-          </Actions>
-        }
-      />
-    );
-  }
-}
-
-export default withOrganization(ProjectAlertHeader);
-
-const Actions = styled('div')`
-  display: grid;
-  grid-auto-flow: column;
-  grid-gap: ${space(1)};
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
deleted file mode 100644
index d93fe4b258..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleDetailsNew/index.tsx
+++ /dev/null
@@ -1,110 +0,0 @@
-import {RouteComponentProps} from 'react-router/lib/Router';
-import React from 'react';
-
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
-import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
-import PanelItem from 'app/components/panels/panelItem';
-import RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';
-import routeTitleGen from 'app/utils/routeTitle';
-
-type RouteParams = {
-  orgId: string;
-  projectId: string;
-  incidentRuleId: string;
-  ruleId: string; //TODO(ts): Make ruleId optional
-};
-
-type Props = RouteComponentProps<RouteParams, {}> & {
-  hasMetricAlerts: boolean;
-};
-
-type State = {
-  alertType: string | null;
-} & AsyncView['state'];
-
-class RuleDetails extends AsyncView<Props, State> {
-  getDefaultState() {
-    const {pathname} = this.props.location;
-
-    return {
-      ...super.getDefaultState(),
-      alertType: pathname.includes('/alerts/rules/')
-        ? 'issue'
-        : pathname.includes('/alerts/metric-rules/')
-        ? 'metric'
-        : null,
-    };
-  }
-
-  getTitle() {
-    return routeTitleGen(t('New Alert'), this.props.params.projectId, false);
-  }
-
-  getEndpoints(): [string, string][] {
-    return [];
-  }
-
-  handleChangeAlertType = (alertType: string) => {
-    // alertType should be `issue` or `metric`
-    this.setState({
-      alertType,
-    });
-  };
-
-  renderLoading() {
-    return this.renderBody();
-  }
-
-  renderBody() {
-    const {hasMetricAlerts} = this.props;
-    const {alertType} = this.state;
-
-    const shouldShowAlertTypeChooser = hasMetricAlerts;
-
-    return (
-      <React.Fragment>
-        {shouldShowAlertTypeChooser && (
-          <Panel>
-            <PanelHeader>{t('Choose an Alert Type')}</PanelHeader>
-            <PanelBody>
-              <PanelItem>
-                <RadioGroup
-                  label={t('Select an Alert Type')}
-                  value={this.state.alertType}
-                  choices={[
-                    [
-                      'metric',
-                      t('Metric Alert'),
-                      t(
-                        'Metric alerts allow you to filter and set thresholds on errors. They can be used for high-level monitoring of patterns, or fine-grained monitoring of individual events.'
-                      ),
-                    ],
-                    [
-                      'issue',
-                      t('Issue Alert'),
-                      t(
-                        'Issue alerts fire whenever any issue in the project matches your specified criteria, such as a resolved issue re-appearing or an issue affecting many users.'
-                      ),
-                    ],
-                  ]}
-                  onChange={this.handleChangeAlertType}
-                />
-              </PanelItem>
-            </PanelBody>
-          </Panel>
-        )}
-
-        {alertType === 'issue' ? (
-          <IssueEditor {...this.props} />
-        ) : alertType === 'metric' ? (
-          <IncidentRulesCreate {...this.props} />
-        ) : null}
-      </React.Fragment>
-    );
-  }
-}
-
-export default RuleDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
index 634c230e83..a3f936d8db 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -4,31 +4,21 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {Client} from 'app/api';
 import {IssueAlertRule} from 'app/types/alerts';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {
-  addSuccessMessage,
-  addErrorMessage,
-  addLoadingMessage,
-} from 'app/actionCreators/indicator';
+import {PanelItem} from 'app/components/panels';
+import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
 import {getDisplayName} from 'app/utils/environment';
 import {t, tct} from 'app/locale';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import Duration from 'app/components/duration';
-import Tooltip from 'app/components/tooltip';
 import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
 
-type Props = {
-  api: Client;
-  orgId: string;
-  projectId: string;
-  data: IssueAlertRule;
+function isIssueAlert(data: IssueAlertRule | SavedIncidentRule): data is IssueAlertRule {
+  return !data.hasOwnProperty('triggers');
+}
 
-  // Callback when deleting a rule
-  onDelete: () => void;
+type Props = {
+  data: IssueAlertRule | SavedIncidentRule;
+  type: 'issue' | 'metric';
 
   // Is the alert rule editable?
   canEdit?: boolean;
@@ -44,159 +34,170 @@ type State = {
 
 class RuleRow extends React.Component<Props, State> {
   static propTypes: any = {
-    api: PropTypes.object.isRequired,
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
-    onDelete: PropTypes.func.isRequired,
     canEdit: PropTypes.bool,
   };
 
   state = {loading: false, error: false};
 
-  onDelete = () => {
-    if (this.state.loading) {
-      return;
-    }
-
-    addLoadingMessage();
-    const {api, orgId, projectId, data} = this.props;
-    api.request(`/projects/${orgId}/${projectId}/rules/${data.id}/`, {
-      method: 'DELETE',
-      success: () => {
-        this.props.onDelete();
-        addSuccessMessage(tct('Successfully deleted "[alert]"', {alert: data.name}));
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        addErrorMessage(t('Unable to save changes. Please try again.'));
-      },
+  renderIssueRule(data: IssueAlertRule) {
+    const {params, routes, location, canEdit} = this.props;
+    const editLink = recreateRoute(`rules/${data.id}/`, {
+      params,
+      routes,
+      location,
     });
-  };
-
-  render() {
-    const {params, routes, location, data, canEdit} = this.props;
-    const editLink = recreateRoute(`${data.id}/`, {params, routes, location});
 
     const environmentName = data.environment
       ? getDisplayName({name: data.environment})
       : t('All Environments');
 
     return (
-      <Panel>
-        <PanelHeader hasButtons>
-          <TextColorLink to={editLink}>
-            {data.name} - {environmentName}
-          </TextColorLink>
+      <RuleItem>
+        <RuleType>{t('Issue')}</RuleType>
+        <div>
+          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
+          <RuleDescription>
+            {t('Environment')}: {environmentName}
+          </RuleDescription>
+        </div>
+
+        <TriggerAndActions>
+          <div>
+            <MatchTypeHeader>
+              {tct('[matchType] of the following:', {
+                matchType: data.actionMatch,
+              })}
+            </MatchTypeHeader>
+            {data.conditions.length !== 0 && (
+              <Conditions>
+                {data.conditions.map((condition, i) => (
+                  <div key={i}>{condition.name}</div>
+                ))}
+              </Conditions>
+            )}
+          </div>
 
           <Actions>
-            <Tooltip
-              disabled={canEdit}
-              title={t('You do not have permission to edit alert rules.')}
-            >
-              <Button
-                data-test-id="edit-rule"
-                disabled={!canEdit}
-                size="xsmall"
-                to={editLink}
-              >
-                {t('Edit Rule')}
-              </Button>
-            </Tooltip>
-
-            <Tooltip
-              disabled={canEdit}
-              title={t('You do not have permission to edit alert rules.')}
-            >
-              <Confirm
-                message={t('Are you sure you want to remove this rule?')}
-                onConfirm={this.onDelete}
-                disabled={!canEdit}
-              >
-                <Button size="xsmall" icon="icon-trash" />
-              </Confirm>
-            </Tooltip>
+            {data.actions.map((action, i) => (
+              <div key={i}>{action.name}</div>
+            ))}
           </Actions>
-        </PanelHeader>
-
-        <PanelBody>
-          <RuleDescriptionRow>
-            <RuleDescriptionColumn>
-              {data.conditions.length !== 0 && (
-                <Condition>
-                  <h6>
-                    When <strong>{data.actionMatch}</strong> of these conditions are met:
-                  </h6>
-                  <table className="conditions-list table">
-                    <tbody>
-                      {data.conditions.map((condition, i) => (
-                        <tr key={i}>
-                          <td>{condition.name}</td>
-                        </tr>
-                      ))}
-                    </tbody>
-                  </table>
-                </Condition>
-              )}
-            </RuleDescriptionColumn>
-            <RuleDescriptionColumn>
-              {data.actions.length !== 0 && (
-                <Condition>
-                  <h6>
-                    Take these actions at most{' '}
-                    <strong>
-                      once every <Duration seconds={data.frequency * 60} />
-                    </strong>{' '}
-                    for an issue:
-                  </h6>
-                  <table className="actions-list table">
-                    <tbody>
-                      {data.actions.map((action, i) => (
-                        <tr key={i}>
-                          <td>{action.name}</td>
-                        </tr>
-                      ))}
-                    </tbody>
-                  </table>
-                </Condition>
-              )}
-            </RuleDescriptionColumn>
-          </RuleDescriptionRow>
-        </PanelBody>
-      </Panel>
+        </TriggerAndActions>
+      </RuleItem>
     );
   }
+
+  renderMetricRule(data: SavedIncidentRule) {
+    const {params, routes, location, canEdit} = this.props;
+    const editLink = recreateRoute(`metric-rules/${data.id}/`, {
+      params,
+      routes,
+      location,
+    });
+
+    return (
+      <RuleItem>
+        <RuleType>{t('Metric')}</RuleType>
+        <div>
+          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
+          <RuleDescription />
+        </div>
+
+        <div>
+          {data.triggers.length !== 0 &&
+            data.triggers.map((trigger, i) => (
+              <TriggerAndActions key={i}>
+                <Trigger>
+                  <StatusBadge>{trigger.label}</StatusBadge>
+                  <div>
+                    {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
+                    {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
+                    {trigger.alertThreshold}/{data.timeWindow}
+                    {t('min')}
+                  </div>
+                </Trigger>
+                <Actions>
+                  {trigger.actions?.map((action, j) => (
+                    <div key={j}>{action.desc}</div>
+                  ))}
+                </Actions>
+              </TriggerAndActions>
+            ))}
+        </div>
+      </RuleItem>
+    );
+  }
+
+  render() {
+    const {data} = this.props;
+
+    return isIssueAlert(data) ? this.renderIssueRule(data) : this.renderMetricRule(data);
+  }
 }
 
 export default RuleRow;
 
-const TextColorLink = styled(Link)`
-  color: ${p => p.theme.gray3};
+const RuleItem = styled(PanelItem)`
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: 1fr 3fr 6fr;
+  grid-auto-flow: column;
 `;
 
-const RuleDescriptionRow = styled('div')`
-  display: flex;
+const RuleType = styled('div')`
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeSmall};
+  font-weight: bold;
+  text-transform: uppercase;
 `;
 
-const RuleDescriptionColumn = styled('div')`
-  flex: 1;
-  padding: ${p => p.theme.grid * 2}px;
-  height: 100%;
+const RuleName = styled(Link)`
+  font-weight: bold;
 `;
 
-const Condition = styled('div')`
+const Conditions = styled('div')`
   display: flex;
   flex-direction: column;
   justify-content: space-between;
   height: 100%;
 `;
 
-const Actions = styled('div')`
+// For tests
+const Actions = styled('div')``;
+
+const TriggerAndActions = styled('div')`
   display: grid;
+  grid-template-columns: 1fr 1fr;
   grid-auto-flow: column;
-  grid-gap: ${space(1)};
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-bottom: ${space(1)};
+`;
+
+const MatchTypeHeader = styled('div')`
+  font-weight: bold;
+  text-transform: uppercase;
+  color: ${p => p.theme.gray2};
+  margin-bottom: ${space(1)};
+`;
+
+const RuleDescription = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin: ${space(0.5)} 0;
+`;
+
+const Trigger = styled('div')`
+  display: flex;
   align-items: center;
 `;
+
+const StatusBadge = styled('div')`
+  background-color: ${p => p.theme.offWhite2};
+  color: ${p => p.theme.gray4};
+  text-transform: uppercase;
+  padding: ${space(0.25)} ${space(0.5)};
+  font-weight: 600;
+  margin-right: ${space(0.5)};
+  border-radius: ${p => p.theme.borderRadius};
+  font-size: ${p => p.theme.fontSizeRelativeSmall};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
deleted file mode 100644
index 399d20a41e..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRowNew.tsx
+++ /dev/null
@@ -1,201 +0,0 @@
-import {Link} from 'react-router';
-import {RouteComponentProps} from 'react-router/lib/Router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {IssueAlertRule} from 'app/types/alerts';
-import {PanelItem} from 'app/components/panels';
-import {SavedIncidentRule} from 'app/views/settings/incidentRules/types';
-import {getDisplayName} from 'app/utils/environment';
-import {t, tct} from 'app/locale';
-import recreateRoute from 'app/utils/recreateRoute';
-import space from 'app/styles/space';
-
-function isIssueAlert(data: IssueAlertRule | SavedIncidentRule): data is IssueAlertRule {
-  return !data.hasOwnProperty('triggers');
-}
-
-type Props = {
-  data: IssueAlertRule | SavedIncidentRule;
-  type: 'issue' | 'metric';
-
-  // Is the alert rule editable?
-  canEdit?: boolean;
-} & Pick<
-  RouteComponentProps<{orgId: string; projectId: string}, {}>,
-  'params' | 'routes' | 'location'
->;
-
-type State = {
-  loading: boolean;
-  error: boolean;
-};
-
-class RuleRow extends React.Component<Props, State> {
-  static propTypes: any = {
-    data: PropTypes.object.isRequired,
-    canEdit: PropTypes.bool,
-  };
-
-  state = {loading: false, error: false};
-
-  renderIssueRule(data: IssueAlertRule) {
-    const {params, routes, location, canEdit} = this.props;
-    const editLink = recreateRoute(`rules/${data.id}/`, {
-      params,
-      routes,
-      location,
-    });
-
-    const environmentName = data.environment
-      ? getDisplayName({name: data.environment})
-      : t('All Environments');
-
-    return (
-      <RuleItem>
-        <RuleType>{t('Issue')}</RuleType>
-        <div>
-          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
-          <RuleDescription>
-            {t('Environment')}: {environmentName}
-          </RuleDescription>
-        </div>
-
-        <TriggerAndActions>
-          <div>
-            <MatchTypeHeader>
-              {tct('[matchType] of the following:', {
-                matchType: data.actionMatch,
-              })}
-            </MatchTypeHeader>
-            {data.conditions.length !== 0 && (
-              <Conditions>
-                {data.conditions.map((condition, i) => (
-                  <div key={i}>{condition.name}</div>
-                ))}
-              </Conditions>
-            )}
-          </div>
-
-          <Actions>
-            {data.actions.map((action, i) => (
-              <div key={i}>{action.name}</div>
-            ))}
-          </Actions>
-        </TriggerAndActions>
-      </RuleItem>
-    );
-  }
-
-  renderMetricRule(data: SavedIncidentRule) {
-    const {params, routes, location, canEdit} = this.props;
-    const editLink = recreateRoute(`metric-rules/${data.id}/`, {
-      params,
-      routes,
-      location,
-    });
-
-    return (
-      <RuleItem>
-        <RuleType>{t('Metric')}</RuleType>
-        <div>
-          {canEdit ? <RuleName to={editLink}>{data.name}</RuleName> : data.name}
-          <RuleDescription />
-        </div>
-
-        <div>
-          {data.triggers.length !== 0 &&
-            data.triggers.map((trigger, i) => (
-              <TriggerAndActions key={i}>
-                <Trigger>
-                  <StatusBadge>{trigger.label}</StatusBadge>
-                  <div>
-                    {data.aggregations[0] === 0 ? t('Events') : t('Users')}{' '}
-                    {trigger.thresholdType === 0 ? t('above') : t('below')}{' '}
-                    {trigger.alertThreshold}/{data.timeWindow}min
-                  </div>
-                </Trigger>
-                <Actions>
-                  {trigger.actions &&
-                    trigger.actions.map((action, j) => <div key={j}>{action.desc}</div>)}
-                </Actions>
-              </TriggerAndActions>
-            ))}
-        </div>
-      </RuleItem>
-    );
-  }
-
-  render() {
-    const {data} = this.props;
-
-    return isIssueAlert(data) ? this.renderIssueRule(data) : this.renderMetricRule(data);
-  }
-}
-
-export default RuleRow;
-
-const RuleItem = styled(PanelItem)`
-  display: grid;
-  grid-gap: ${space(1)};
-  grid-template-columns: 1fr 3fr 6fr;
-  grid-auto-flow: column;
-`;
-
-const RuleType = styled('div')`
-  color: ${p => p.theme.gray3};
-  font-size: ${p => p.theme.fontSizeSmall};
-  font-weight: bold;
-  text-transform: uppercase;
-`;
-
-const RuleName = styled(Link)`
-  font-weight: bold;
-`;
-
-const Conditions = styled('div')`
-  display: flex;
-  flex-direction: column;
-  justify-content: space-between;
-  height: 100%;
-`;
-
-// For tests
-const Actions = styled('div')``;
-
-const TriggerAndActions = styled('div')`
-  display: grid;
-  grid-template-columns: 1fr 1fr;
-  grid-auto-flow: column;
-  font-size: ${p => p.theme.fontSizeSmall};
-  margin-bottom: ${space(1)};
-`;
-
-const MatchTypeHeader = styled('div')`
-  font-weight: bold;
-  text-transform: uppercase;
-  color: ${p => p.theme.gray2};
-  margin-bottom: ${space(1)};
-`;
-
-const RuleDescription = styled('div')`
-  font-size: ${p => p.theme.fontSizeSmall};
-  margin: ${space(0.5)} 0;
-`;
-
-const Trigger = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-
-const StatusBadge = styled('div')`
-  background-color: ${p => p.theme.offWhite2};
-  color: ${p => p.theme.gray4};
-  text-transform: uppercase;
-  padding: ${space(0.25)} ${space(0.5)};
-  font-weight: 600;
-  margin-right: ${space(0.5)};
-  border-radius: ${p => p.theme.borderRadius};
-  font-size: ${p => p.theme.fontSizeRelativeSmall};
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/settings.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/settings.jsx
index 84bf1099f0..a3a061753e 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/settings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/settings.jsx
@@ -1,18 +1,21 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 
+import {IconAdd} from 'app/icons';
 import {PanelAlert} from 'app/components/panels';
 import {fields} from 'app/data/forms/projectAlerts';
 import {t} from 'app/locale';
-import routeTitleGen from 'app/utils/routeTitle';
-import withOrganization from 'app/utils/withOrganization';
-import Access from 'app/components/acl/access';
 import AlertLink from 'app/components/alertLink';
 import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import PermissionAlert from 'app/views/settings/project/permissionAlert';
 import PluginList from 'app/components/pluginList';
 import SentryTypes from 'app/sentryTypes';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import Tooltip from 'app/components/tooltip';
+import routeTitleGen from 'app/utils/routeTitle';
 
 class ProjectAlertSettings extends AsyncView {
   static propTypes = {
@@ -22,6 +25,7 @@ class ProjectAlertSettings extends AsyncView {
     // rendered
     organization: SentryTypes.Organization,
     project: SentryTypes.Project,
+    canEditRule: PropTypes.bool.isRequired,
   };
 
   getEndpoints() {
@@ -69,72 +73,86 @@ class ProjectAlertSettings extends AsyncView {
 
   renderBody() {
     const {
+      canEditRule,
       organization,
       params: {orgId, projectId},
     } = this.props;
 
-    return (
-      <Access access={['project:write']}>
-        {({hasAccess}) => (
-          <React.Fragment>
-            <PermissionAlert />
-            <AlertLink to="/settings/account/notifications/" icon="icon-mail">
-              {t(
-                'Looking to fine-tune your personal notification preferences? Visit your Account Settings'
-              )}
-            </AlertLink>
+    const basePath = `/settings/${orgId}/projects/${projectId}/alerts/`;
 
-            <Form
-              saveOnBlur
-              allowUndo
-              initialData={{
-                subjectTemplate: this.state.project.subjectTemplate,
-                digestsMinDelay: this.state.project.digestsMinDelay,
-                digestsMaxDelay: this.state.project.digestsMaxDelay,
-              }}
-              apiMethod="PUT"
-              apiEndpoint={`/projects/${orgId}/${projectId}/`}
+    return (
+      <React.Fragment>
+        <SettingsPageHeader
+          title={t('Alerts Settings')}
+          action={
+            <Tooltip
+              disabled={canEditRule}
+              title={t('You do not have permission to edit alert rules.')}
             >
-              <JsonForm
-                disabled={!hasAccess}
-                title={t('Email Settings')}
-                fields={[fields.subjectTemplate]}
-              />
+              <Button
+                to={`${basePath}new/`}
+                disabled={!canEditRule}
+                priority="primary"
+                size="small"
+                icon={<IconAdd size="xs" circle />}
+              >
+                {t('New Alert Rule')}
+              </Button>
+            </Tooltip>
+          }
+        />
+        <PermissionAlert />
+        <AlertLink to="/settings/account/notifications/" icon="icon-mail">
+          {t(
+            'Looking to fine-tune your personal notification preferences? Visit your Account Settings'
+          )}
+        </AlertLink>
 
-              <JsonForm
-                title={t('Digests')}
-                disabled={!hasAccess}
-                fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}
-                renderHeader={() => (
-                  <PanelAlert type="info">
-                    {t(
-                      'Sentry will automatically digest alerts sent ' +
-                        'by some services to avoid flooding your inbox ' +
-                        'with individual issue notifications. To control ' +
-                        'how frequently notifications are delivered, use ' +
-                        'the sliders below.'
-                    )}
-                  </PanelAlert>
-                )}
-              />
-            </Form>
+        <Form
+          saveOnBlur
+          allowUndo
+          initialData={{
+            subjectTemplate: this.state.project.subjectTemplate,
+            digestsMinDelay: this.state.project.digestsMinDelay,
+            digestsMaxDelay: this.state.project.digestsMaxDelay,
+          }}
+          apiMethod="PUT"
+          apiEndpoint={`/projects/${orgId}/${projectId}/`}
+        >
+          <JsonForm
+            disabled={!canEditRule}
+            title={t('Email Settings')}
+            fields={[fields.subjectTemplate]}
+          />
 
-            {hasAccess && (
-              <PluginList
-                organization={organization}
-                project={this.state.project}
-                pluginList={this.state.pluginList.filter(
-                  p => p.type === 'notification' && p.hasConfiguration
+          <JsonForm
+            title={t('Digests')}
+            disabled={!canEditRule}
+            fields={[fields.digestsMinDelay, fields.digestsMaxDelay]}
+            renderHeader={() => (
+              <PanelAlert type="info">
+                {t(
+                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. To control how frequently notifications are delivered, use the sliders below.'
                 )}
-                onEnablePlugin={this.handleEnablePlugin}
-                onDisablePlugin={this.handleDisablePlugin}
-              />
+              </PanelAlert>
+            )}
+          />
+        </Form>
+
+        {canEditRule && (
+          <PluginList
+            organization={organization}
+            project={this.state.project}
+            pluginList={this.state.pluginList.filter(
+              p => p.type === 'notification' && p.hasConfiguration
             )}
-          </React.Fragment>
+            onEnablePlugin={this.handleEnablePlugin}
+            onDisablePlugin={this.handleDisablePlugin}
+          />
         )}
-      </Access>
+      </React.Fragment>
     );
   }
 }
 
-export default withOrganization(ProjectAlertSettings);
+export default ProjectAlertSettings;
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index d5dbebed10..a1d8a23de1 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -63,7 +63,7 @@ describe('Incident Rules Details', function() {
           params={{
             orgId: organization.slug,
             projectId: project.slug,
-            incidentRuleId: rule.id,
+            ruleId: rule.id,
           }}
           organization={organization}
         />
diff --git a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
index d7166963c5..479c003826 100644
--- a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
@@ -113,7 +113,7 @@ describe('Incident Rules Form', function() {
 
     it('edits metric', async function() {
       const wrapper = createWrapper({
-        incidentRuleId: rule.id,
+        ruleId: rule.id,
         rule,
       });
 
diff --git a/tests/js/spec/views/settings/projectAlerts/create.spec.jsx b/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
index b3dcfe60cf..7912e42036 100644
--- a/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
+++ b/tests/js/spec/views/settings/projectAlerts/create.spec.jsx
@@ -32,21 +32,32 @@ describe('ProjectAlertsCreate', function() {
       indexRoute: {name: 'General'},
     },
     {
-      name: 'Alert Rules',
+      name: 'Alerts',
       path: 'alerts/',
       indexRoute: {},
-    },
-    {
-      path: 'rules/',
-      name: 'Rules',
-      component: null,
-      indexRoute: {},
       childRoutes: [
-        {path: 'new/', name: 'New'},
-        {path: ':ruleId/', name: 'Edit'},
+        {path: 'settings/', name: 'Settings'},
+        {path: 'new/', name: 'New Alert Rule'},
+        {
+          path: 'rules/',
+          indexRoute: {to: '/settings/:orgId/projects/:projectId/alerts/'},
+          childRoutes: [
+            {path: 'new/', name: 'New Alert Rule'},
+            {path: ':ruleId/', name: 'Edit Alert Rule'},
+          ],
+        },
+        {
+          path: 'metric-rules/',
+          component: null,
+          indexRoute: {to: '/settings/:orgId/projects/:projectId/alerts/'},
+          childRoutes: [
+            {name: 'New Alert Rule', path: 'new/'},
+            {name: 'Edit Alert Rule', path: ':ruleId/'},
+          ],
+        },
       ],
     },
-    {path: ':ruleId/', name: 'Edit Alert Rule'},
+    {path: 'new/', name: 'New Alert Rule'},
   ];
 
   beforeEach(async function() {
diff --git a/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx b/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx
index 30742d90ec..54e6d55dce 100644
--- a/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx
+++ b/tests/js/spec/views/settings/projectAlerts/settings.spec.jsx
@@ -28,6 +28,7 @@ describe('ProjectAlertSettings', function() {
   it('renders', function() {
     const wrapper = mountWithTheme(
       <ProjectAlertSettings
+        canEditRule
         params={{orgId: organization.slug, projectId: project.slug}}
         organization={organization}
         routes={[]}
