commit 4b4ae5cde85097813c4329bafec2988dcff23813
Author: Yaniv Aknin <yaniv@aknin.name>
Date:   Thu May 3 15:43:30 2012 +0300

    Add JSON-array view for groups

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 6ca033eda3..a8018af4b0 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -158,3 +158,6 @@ USE_JS_CLIENT = False
 
 # The alias for the cache backend (MUST be a compatible backend string for < 1.3)
 CACHE_BACKEND = 'dummy://'
+
+# The maximum number of events which can be requested as JSON
+MAX_JSON_RESULTS=1000
diff --git a/sentry/models.py b/sentry/models.py
index d9d074ca63..b534a6f5d4 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -533,6 +533,19 @@ class Event(MessageBase):
         module = self.data['__sentry__'].get('module', 'ver')
         return module, self.data['__sentry__']['version']
 
+    def as_dict(self):
+        # We use a SortedDict to keep elements ordered for a potential JSON serializer
+        data = SortedDict()
+        data['id'] = self.event_id
+        data['checksum'] = self.checksum
+        data['project'] = self.project.slug
+        data['logger'] = self.logger
+        data['level'] = self.get_level_display()
+        data['culprit'] = self.culprit
+        for k, v in sorted(self.data.iteritems()):
+            data[k] = v
+        return data
+
 
 class GroupBookmark(Model):
     """
diff --git a/sentry/templates/sentry/groups/details.html b/sentry/templates/sentry/groups/details.html
index 1aae4a39da..326a216b63 100644
--- a/sentry/templates/sentry/groups/details.html
+++ b/sentry/templates/sentry/groups/details.html
@@ -99,6 +99,7 @@
                 <ul class="dropdown-menu">
                     <li><a href="{% url sentry-api-remove-group project_id=project.slug group_id=group.pk %}">{% trans "Remove Event" %}</a></li>
                     <li><a href="{% url sentry-group-json project_id=project.slug group_id=group.pk %}">{% trans "Raw JSON Data" %}</a></li>
+                    <li><a href="{% url sentry-group-json-multi project_id=project.slug group_id=group.pk how_many=10 %}">{% trans "Mutli-event JSON Data" %}</a></li>
                     {% for label, link, is_active in group|get_actions:request %}
                         {% if forloop.first %}
                             <li class="divider"></li>
@@ -139,4 +140,4 @@
         Sentry.charts.render("#chart", {{ group.project.id|safe }}, {{ group.id|safe }}, true);
     });
     </script>
-{% endblock %}
\ No newline at end of file
+{% endblock %}
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index ef053ff9ea..9deb9c206b 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -246,24 +246,28 @@ def group_json(request, project, group_id):
     group = get_object_or_404(Group, pk=group_id)
 
     if group.project and group.project != project:
-        return HttpResponse(status_code=404)
+        return HttpResponse(status=404)
 
     # It's possible that a message would not be created under certain
     # circumstances (such as a post_save signal failing)
     event = group.get_latest_event() or Event()
 
-    # We use a SortedDict to keep elements ordered for the JSON serializer
-    data = SortedDict()
-    data['id'] = event.event_id
-    data['checksum'] = event.checksum
-    data['project'] = event.project.slug
-    data['logger'] = event.logger
-    data['level'] = event.get_level_display()
-    data['culprit'] = event.culprit
-    for k, v in sorted(event.data.iteritems()):
-        data[k] = v
-
-    return HttpResponse(json.dumps(data), mimetype='application/json')
+    return HttpResponse(json.dumps(event.as_dict()), mimetype='application/json')
+
+@login_required
+@has_access
+def group_json_multi(request, project, group_id, how_many):
+    group = get_object_or_404(Group, pk=group_id)
+
+    if group.project and group.project != project:
+        return HttpResponse(status=404)
+    how_many = int(how_many)
+    if how_many > settings.MAX_JSON_RESULTS:
+        return HttpResponse("too many objects requested", mimetype='text/plain', status=400)
+
+    events = group.event_set.order_by('-id')[:how_many]
+
+    return HttpResponse(json.dumps(list(event.as_dict() for event in events)), mimetype='application/json')
 
 
 @login_required
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 3bc9d58a95..86b799c3e5 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -125,6 +125,7 @@ urlpatterns = patterns('',
 
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/$', groups.group, name='sentry-group'),
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/json/$', groups.group_json, name='sentry-group-json'),
+    url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/json/(?P<how_many>\d+)/$', groups.group_json_multi, name='sentry-group-json-multi'),
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/$', groups.group_event_list, name='sentry-group-events'),
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', groups.group_event_details, name='sentry-group-event'),
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action, name='sentry-group-plugin-action'),
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 374abece0c..3688ad1347 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -3,11 +3,13 @@
 from __future__ import absolute_import
 
 import logging
+import json
 
 from django.conf import settings as django_settings
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
+from sentry.conf import settings
 from sentry.models import Group, Project, TeamMember, \
   MEMBER_OWNER, MEMBER_USER, Team
 from sentry.web.helpers import get_login_url
@@ -94,12 +96,21 @@ class SentryViewsTest(TestCase):
         group = Group.objects.get(pk=2)
         self.assertEquals(resp.context['group'], group)
 
-    # TODO: improve upon these tests
     def test_group_json(self):
         self.client.login(username='admin', password='admin')
         resp = self.client.get(reverse('sentry-group-json', kwargs={'project_id': 1, 'group_id': 2}))
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/json')
+        self.assertEquals(json.loads(resp.content)['level'], 'error')
+
+    def test_group_json_multi(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-group-json-multi', kwargs={'project_id': 1, 'group_id': 2, 'how_many': 1}))
+        self.assertEquals(resp.status_code, 200)
+        self.assertEquals(resp['Content-Type'], 'application/json')
+        self.assertEquals(json.loads(resp.content)[0]['level'], 'error')
+        resp = self.client.get(reverse('sentry-group-json-multi', kwargs={'project_id': 1, 'group_id': 2, 'how_many': settings.MAX_JSON_RESULTS+1}))
+        self.assertEquals(resp.status_code, 400)
 
     def test_status_env(self):
         self.client.login(username='admin', password='admin')
