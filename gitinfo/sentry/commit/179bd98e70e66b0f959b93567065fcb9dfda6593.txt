commit 179bd98e70e66b0f959b93567065fcb9dfda6593
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Oct 18 21:56:09 2018 +0200

    ref: Swap Raven out for the new Python SDK (#9949)
    
    * ref: Swap Raven out for the new Python SDK
    
    * fix: Enable debug mode in SDK
    
    * build: bump sentry version again
    
    * fix: Fix integration test

diff --git a/requirements-base.txt b/requirements-base.txt
index e861b247e7..c254842fb6 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -48,13 +48,13 @@ python-u2flib-server>=4.0.1,<4.1.0
 PyYAML>=3.11,<3.12
 qrcode>=5.2.2,<6.0.0
 querystring_parser>=1.2.3,<2.0.0
-raven>=6.0.0,<=6.4.0
 rb>=1.7.0,<2.0.0
 redis-py-cluster==1.3.4
 redis>=2.10.3,<2.10.6
 requests[security]>=2.18.4,<2.19.0
 selenium==3.11.0
 semaphore>=0.2.0,<0.3.0
+sentry-sdk>=0.3.11,<0.4
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
 six>=1.10.0,<1.11.0
diff --git a/setup.py b/setup.py
index d4668ccc94..d3c7c3ad8e 100755
--- a/setup.py
+++ b/setup.py
@@ -11,8 +11,8 @@ Sentry is a Server
 ------------------
 
 The Sentry package, at its core, is just a simple server and web UI. It will
-handle authentication clients (such as `Raven
-<https://github.com/getsentry/raven-python>`_)
+handle authentication clients (such as `the Python one
+<https://github.com/getsentry/sentry-python>`_)
 and all of the logic behind storage and aggregation.
 
 That said, Sentry is not limited to Python. The primary implementation is in
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 1c89aae439..272e9554af 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -92,7 +92,7 @@ class Endpoint(APIView):
             import sys
             import traceback
             sys.stderr.write(traceback.format_exc())
-            event_id = raven.captureException(request=request)
+            event_id = raven.captureException()
             context = {
                 'detail': 'Internal Error',
                 'errorId': event_id,
@@ -172,13 +172,6 @@ class Endpoint(APIView):
 
             self.initial(request, *args, **kwargs)
 
-            if getattr(request, 'user', None) and request.user.is_authenticated():
-                raven.user_context({
-                    'id': request.user.id,
-                    'username': request.user.username,
-                    'email': request.user.email,
-                })
-
             # Get the appropriate handler method
             if request.method.lower() in self.http_method_names:
                 handler = getattr(self, request.method.lower(),
diff --git a/src/sentry/app.py b/src/sentry/app.py
index a39b40cf03..dec6248d2c 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -9,8 +9,6 @@ from __future__ import absolute_import
 
 from threading import local
 
-from raven.contrib.django.models import client
-
 from sentry.utils import redis
 from sentry.utils.locking.backends.redis import RedisLockBackend
 from sentry.utils.locking.manager import LockManager
@@ -32,6 +30,8 @@ from .nodestore import backend as nodestore  # NOQA
 from .quotas import backend as quotas  # NOQA
 from .ratelimits import backend as ratelimiter  # NOQA
 
-raven = client
+from sentry.utils.sdk import RavenShim
+
+raven = client = RavenShim()  # NOQA
 
 locks = LockManager(RedisLockBackend(redis.clusters.get('default')))
diff --git a/src/sentry/celery.py b/src/sentry/celery.py
index 8853a413fa..e79cc65aff 100644
--- a/src/sentry/celery.py
+++ b/src/sentry/celery.py
@@ -62,16 +62,6 @@ class SentryTask(Task):
 class SentryCelery(Celery):
     task_cls = SentryTask
 
-    def on_configure(self):
-        from raven.contrib.django.models import client
-        from raven.contrib.celery import register_signal, register_logger_signal
-
-        # register a custom filter to filter out duplicate logs
-        register_logger_signal(client)
-
-        # hook into the Celery error handler
-        register_signal(client)
-
 
 app = SentryCelery('sentry')
 app.config_from_object(settings)
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 022e545572..d92d8942b7 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -233,8 +233,6 @@ MIDDLEWARE_CLASSES = (
     # TODO(dcramer): kill this once we verify its safe
     # 'sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
-    # XXX: This will exhaust the request body stream and cache it
-    'raven.contrib.django.middleware.DjangoRestFrameworkCompatMiddleware',
     'sentry.debug.middleware.DebugMiddleware',
 )
 
@@ -261,7 +259,7 @@ INSTALLED_APPS = (
     'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes',
     'django.contrib.messages', 'django.contrib.sessions', 'django.contrib.sites',
     'django.contrib.staticfiles', 'crispy_forms', 'debug_toolbar',
-    'raven.contrib.django.raven_compat', 'rest_framework', 'sentry', 'sentry.analytics',
+    'rest_framework', 'sentry', 'sentry.analytics',
     'sentry.analytics.events', 'sentry.nodestore', 'sentry.search', 'sentry.lang.java',
     'sentry.lang.javascript', 'sentry.lang.native', 'sentry.plugins.sentry_interface_types',
     'sentry.plugins.sentry_mail', 'sentry.plugins.sentry_urls', 'sentry.plugins.sentry_useragents',
@@ -645,7 +643,7 @@ LOGGING = {
         'internal': {
             'level': 'ERROR',
             'filters': ['sentry:internal'],
-            'class': 'raven.contrib.django.handlers.SentryHandler',
+            'class': 'sentry_sdk.integrations.logging.SentryHandler',
         },
         'metrics': {
             'level': 'WARNING',
@@ -655,12 +653,12 @@ LOGGING = {
         'django_internal': {
             'level': 'WARNING',
             'filters': ['sentry:internal', 'important_django_request'],
-            'class': 'raven.contrib.django.handlers.SentryHandler',
+            'class': 'sentry_sdk.integrations.logging.SentryHandler',
         },
     },
     'filters': {
         'sentry:internal': {
-            '()': 'sentry.utils.raven.SentryInternalFilter',
+            '()': 'sentry.utils.sdk.SentryInternalFilter',
         },
         'important_django_request': {
             '()': 'sentry.logging.handlers.MessageContainsFilter',
@@ -690,6 +688,11 @@ LOGGING = {
             'handlers': ['console'],
             'propagate': False,
         },
+        'sentry_sdk.errors': {
+            'handlers': ['console'],
+            'level': "INFO",
+            'propagate': False,
+        },
         'sentry.rules': {
             'handlers': ['console'],
             'propagate': False,
@@ -761,9 +764,7 @@ DEBUG_TOOLBAR_PANELS = (
 
 DEBUG_TOOLBAR_PATCH_SETTINGS = False
 
-# Sentry and Raven configuration
-
-SENTRY_CLIENT = 'sentry.utils.raven.SentryInternalClient'
+# Sentry and internal client configuration
 
 SENTRY_FEATURES = {
     # Enables user registration.
@@ -1327,18 +1328,18 @@ SENTRY_INTERNAL_INTEGRATIONS = (
 )
 
 
-def get_raven_config():
+def get_sentry_sdk_config():
     return {
         'release': sentry.__build__,
-        'register_signals': True,
         'environment': ENVIRONMENT,
-        'include_paths': [
+        'in_app_include': [
             'sentry',
         ],
+        'debug': True
     }
 
 
-RAVEN_CONFIG = get_raven_config()
+SENTRY_SDK_CONFIG = get_sentry_sdk_config()
 
 # Config options that are explicitly disabled from Django
 DEAD = object()
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 2e3c0bc799..285c2812c5 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -110,6 +110,7 @@ class ClientContext(object):
 
 
 class ClientLogHelper(object):
+    # XXX(markus): Remove. This should all be doable via scopes
     def __init__(self, context):
         self.context = context
         self.logger = logging.getLogger('sentry.api')
diff --git a/src/sentry/integrations/vsts/webhooks.py b/src/sentry/integrations/vsts/webhooks.py
index a9b169ba8c..dea22a1a11 100644
--- a/src/sentry/integrations/vsts/webhooks.py
+++ b/src/sentry/integrations/vsts/webhooks.py
@@ -36,7 +36,7 @@ class WorkItemWebhook(Endpoint):
             try:
                 self.check_webhook_secret(request, integration)
             except AssertionError:
-                raven.captureException(request=request)
+                raven.captureException()
                 return self.respond(status=401)
             self.handle_updated_workitem(data, integration)
         return self.respond()
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 4987ece0a5..2e1b26b96b 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -14,6 +14,7 @@ import six
 from django.conf import settings
 
 from sentry.utils import warnings
+from sentry.utils.sdk import configure_sdk
 from sentry.utils.warnings import DeprecatedSettingWarning
 
 
@@ -318,6 +319,8 @@ def initialize_app(config, skip_service_validation=False):
 
     validate_options(settings)
 
+    configure_sdk()
+
     setup_services(validate=not skip_service_validation)
 
     from django.utils import timezone
diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
index dc49b60e5f..9eb25b6961 100644
--- a/src/sentry/tasks/base.py
+++ b/src/sentry/tasks/base.py
@@ -12,10 +12,10 @@ import resource
 from celery.task import current
 from contextlib import contextmanager
 from functools import wraps
-from raven.contrib.django.models import client as Raven
 
 from sentry.celery import app
 from sentry.utils import metrics
+from sentry.utils.sdk import push_scope, capture_exception
 
 
 def get_rss_usage():
@@ -44,16 +44,14 @@ def instrumented_task(name, stat_suffix=None, **kwargs):
                 instance = u'{}.{}'.format(name, stat_suffix(*args, **kwargs))
             else:
                 instance = name
-            Raven.tags_context({
-                'task_name': name,
-                'transaction_id': transaction_id,
-            })
-            with metrics.timer(key, instance=instance), \
-                    track_memory_usage('jobs.memory_change', instance=instance):
-                try:
+
+            with push_scope() as scope:
+                scope.set_tag('task_name', name)
+                scope.set_tag('transaction_id', transaction_id)
+
+                with metrics.timer(key, instance=instance), \
+                        track_memory_usage('jobs.memory_change', instance=instance):
                     result = func(*args, **kwargs)
-                finally:
-                    Raven.context.clear()
             return result
 
         return app.task(name=name, **kwargs)(_wrapped)
@@ -79,7 +77,7 @@ def retry(func=None, on=(Exception, ), exclude=()):
             except exclude:
                 raise
             except on as exc:
-                Raven.captureException()
+                capture_exception()
                 current.retry(exc=exc)
 
         return wrapped
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 452e5a1447..308f1907fd 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -12,9 +12,9 @@ import logging
 import time
 
 from django.conf import settings
-from raven.contrib.django.models import client as Raven
 
 from sentry import features
+from sentry.app import raven
 from sentry.utils.cache import cache
 from sentry.plugins import plugins
 from sentry.signals import event_processed
@@ -96,7 +96,7 @@ def post_process_group(event, is_new, is_regression, is_sample, is_new_group_env
     event.group_id = event.group.id
 
     project_id = event.group.project_id
-    Raven.tags_context({
+    raven.tags_context({
         'project': project_id,
     })
 
@@ -174,7 +174,7 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
     """
     Fires post processing hooks for a group.
     """
-    Raven.tags_context({
+    raven.tags_context({
         'project': event.project_id,
     })
     plugin = plugins.get(plugin_slug)
@@ -191,7 +191,7 @@ def index_event_tags(organization_id, project_id, event_id, tags,
                      group_id, environment_id, date_added=None, **kwargs):
     from sentry import tagstore
 
-    Raven.tags_context({
+    raven.tags_context({
         'project': project_id,
     })
 
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 9554bf5670..05a7023414 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -12,11 +12,11 @@ import logging
 from datetime import datetime
 import six
 
-from raven.contrib.django.models import client as Raven
 from time import time
 from django.utils import timezone
 
 from sentry import features, reprocessing
+from sentry.app import raven
 from sentry.attachments import attachment_cache
 from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
@@ -70,7 +70,7 @@ def _do_preprocess_event(cache_key, data, start_time, event_id, process_event):
 
     data = CanonicalKeyDict(data)
     project = data['project']
-    Raven.tags_context({
+    raven.tags_context({
         'project': project,
     })
 
@@ -124,7 +124,7 @@ def _do_process_event(cache_key, start_time, event_id, process_task):
 
     data = CanonicalKeyDict(data)
     project = data['project']
-    Raven.tags_context({
+    raven.tags_context({
         'project': project,
     })
     has_changed = False
@@ -368,7 +368,7 @@ def save_event(cache_key=None, data=None, start_time=None, event_id=None,
         metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'post'})
         return
 
-    Raven.tags_context({
+    raven.tags_context({
         'project': project_id,
     })
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index f1980e34f6..a0f0adc1a7 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -24,8 +24,9 @@ import six
 import types
 import logging
 
+from sentry_sdk import Hub
+
 from click.testing import CliRunner
-from contextlib import contextmanager
 from datetime import datetime
 from django.conf import settings
 from django.contrib.auth import login
@@ -39,7 +40,7 @@ from django.test import TestCase, TransactionTestCase
 from django.test.utils import CaptureQueriesContext
 from django.utils import timezone
 from django.utils.importlib import import_module
-from exam import before, fixture, Exam
+from exam import before, after, fixture, Exam
 from mock import patch
 from pkg_resources import iter_entry_points
 from rest_framework.test import APITestCase as BaseAPITestCase
@@ -77,6 +78,10 @@ class BaseTestCase(Fixtures, Exam):
         assert resp.status_code == 302
         assert resp['Location'].startswith('http://testserver' + reverse('sentry-login'))
 
+    @after
+    def teardown_internal_sdk(self):
+        Hub.main.bind_client(None)
+
     @before
     def setup_dummy_auth_provider(self):
         auth.register('dummy', DummyProvider)
@@ -320,19 +325,6 @@ class BaseTestCase(Fixtures, Exam):
         """
         return override_options(options)
 
-    @contextmanager
-    def dsn(self, dsn):
-        """
-        A context manager that temporarily sets the internal client's DSN
-        """
-        from raven.contrib.django.models import client
-
-        try:
-            client.set_dsn(dsn)
-            yield
-        finally:
-            client.set_dsn(None)
-
     _postWithSignature = _postWithHeader
     _postWithNewSignature = _postWithHeader
 
diff --git a/src/sentry/utils/raven.py b/src/sentry/utils/raven.py
deleted file mode 100644
index 2b4f72b88a..0000000000
--- a/src/sentry/utils/raven.py
+++ /dev/null
@@ -1,141 +0,0 @@
-from __future__ import absolute_import, print_function
-
-import copy
-import inspect
-import logging
-import raven
-import six
-
-from django.conf import settings
-from django.utils.functional import cached_property
-
-from raven.contrib.django.client import DjangoClient
-from raven.utils import get_auth_header
-from time import time
-
-from . import metrics
-
-UNSAFE_FILES = ('sentry/event_manager.py', 'sentry/tasks/process_buffer.py', )
-
-
-def is_current_event_safe():
-    """
-    Tests the current stack for unsafe locations that would likely cause
-    recursion if an attempt to send to Sentry was made.
-    """
-    for _, filename, _, _, _, _ in inspect.stack():
-        if filename.endswith(UNSAFE_FILES):
-            return False
-    return True
-
-
-class SentryInternalClient(DjangoClient):
-    request_factory = None
-
-    @cached_property
-    def project_key(self):
-        from sentry.models import ProjectKey
-
-        if not settings.SENTRY_PROJECT:
-            return None
-
-        key = None
-        try:
-            if settings.SENTRY_PROJECT_KEY is not None:
-                key = ProjectKey.objects.get(
-                    id=settings.SENTRY_PROJECT_KEY,
-                    project=settings.SENTRY_PROJECT,
-                )
-            else:
-                key = ProjectKey.get_default(settings.SENTRY_PROJECT)
-        except Exception as exc:
-            # if the relation fails to query or is missing completely, lets handle
-            # it gracefully
-            self.error_logger.warn('internal-error.unable-to-fetch-project', extra={
-                'project_id': settings.SENTRY_PROJECT,
-                'project_key': settings.SENTRY_PROJECT_KEY,
-                'error_message': six.text_type(exc),
-            })
-        if key is None:
-            self.error_logger.warn('internal-error.no-project-available', extra={
-                'project_id': settings.SENTRY_PROJECT,
-                'project_key': settings.SENTRY_PROJECT_KEY,
-            })
-        return key
-
-    def is_enabled(self):
-        if getattr(settings, 'DISABLE_RAVEN', False):
-            return False
-        return self.project_key is not None
-
-    def can_record_current_event(self):
-        return self.remote.is_active() or is_current_event_safe()
-
-    def capture(self, *args, **kwargs):
-        if not self.can_record_current_event():
-            metrics.incr('internal.uncaptured.events')
-            self.error_logger.warn('internal-error.unsafe-stacktrace')
-            return
-        return super(SentryInternalClient, self).capture(*args, **kwargs)
-
-    def send(self, **kwargs):
-        # These imports all need to be internal to this function as this class
-        # is set up by django while still parsing LOGGING settings and we
-        # cannot import this stuff until settings are finalized.
-        from sentry.web.api import StoreView
-        from django.test import RequestFactory
-
-        # Report the issue to an upstream Sentry if active
-        # NOTE: we don't want to check self.is_enabled() like normal, since
-        # is_enabled behavior is overridden in this class. We explicitly
-        # want to check if the remote is active.
-        if self.remote.is_active():
-            from sentry import options
-            # Append some extra tags that are useful for remote reporting
-            super_kwargs = copy.deepcopy(kwargs)
-            super_kwargs['tags']['install-id'] = options.get('sentry:install-id')
-            super(SentryInternalClient, self).send(**super_kwargs)
-
-        if not is_current_event_safe():
-            self.error_logger.warn('internal-error.unsafe-stacktrace')
-            return
-
-        key = self.project_key
-        if key is None:
-            return
-
-        client_string = 'raven-python/{}'.format(raven.VERSION)
-        headers = {
-            'HTTP_X_SENTRY_AUTH': get_auth_header(
-                protocol=self.protocol_version,
-                timestamp=time(),
-                client=client_string,
-                api_key=key.public_key,
-                api_secret=key.secret_key,
-            ),
-            'HTTP_CONTENT_ENCODING': self.get_content_encoding(),
-        }
-        self.request_factory = self.request_factory or RequestFactory()
-        request = self.request_factory.post(
-            '/api/{}/store/'.format(key.project_id),
-            data=self.encode(kwargs),
-            content_type='application/octet-stream',
-            **headers
-        )
-        resp = StoreView.as_view()(
-            request,
-            project_id=six.text_type(key.project_id),
-        )
-        if resp.status_code != 200:
-            self.error_logger.warn('internal-error.invalid-response', extra={
-                'project_id': settings.SENTRY_PROJECT,
-                'project_key': settings.SENTRY_PROJECT_KEY,
-                'status_code': resp.status_code,
-            })
-
-
-class SentryInternalFilter(logging.Filter):
-    def filter(self, record):
-        # TODO(mattrobenolt): handle an upstream Sentry
-        metrics.incr('internal.uncaptured.logs')
-        return is_current_event_safe()
diff --git a/src/sentry/utils/sdk.py b/src/sentry/utils/sdk.py
new file mode 100644
index 0000000000..df3f5e4d7c
--- /dev/null
+++ b/src/sentry/utils/sdk.py
@@ -0,0 +1,174 @@
+from __future__ import absolute_import, print_function
+
+import inspect
+import json
+import logging
+import six
+import zlib
+
+from django.conf import settings
+from django.utils.functional import cached_property
+
+import sentry_sdk
+
+from sentry_sdk.transport import Transport
+from sentry_sdk.consts import VERSION as SDK_VERSION
+from sentry_sdk.utils import Auth, capture_internal_exceptions
+from sentry_sdk.utils import logger as sdk_logger
+
+from . import metrics
+
+UNSAFE_FILES = ('sentry/event_manager.py', 'sentry/tasks/process_buffer.py', )
+
+# Reexport sentry_sdk just in case we ever have to write another shim like we
+# did for raven
+from sentry_sdk import configure_scope, push_scope, capture_message, capture_exception  # NOQA
+
+
+def is_current_event_safe():
+    """
+    Tests the current stack for unsafe locations that would likely cause
+    recursion if an attempt to send to Sentry was made.
+    """
+    for _, filename, _, _, _, _ in inspect.stack():
+        if filename.endswith(UNSAFE_FILES):
+            return False
+    return True
+
+
+def get_project_key():
+    from sentry.models import ProjectKey
+    if not settings.SENTRY_PROJECT:
+        return None
+
+    key = None
+    try:
+        if settings.SENTRY_PROJECT_KEY is not None:
+            key = ProjectKey.objects.get(
+                id=settings.SENTRY_PROJECT_KEY,
+                project=settings.SENTRY_PROJECT,
+            )
+        else:
+            key = ProjectKey.get_default(settings.SENTRY_PROJECT)
+    except Exception as exc:
+        # if the relation fails to query or is missing completely, lets handle
+        # it gracefully
+        sdk_logger.warn('internal-error.unable-to-fetch-project', extra={
+            'project_id': settings.SENTRY_PROJECT,
+            'project_key': settings.SENTRY_PROJECT_KEY,
+            'error_message': six.text_type(exc),
+        })
+    if key is None:
+        sdk_logger.warn('internal-error.no-project-available', extra={
+            'project_id': settings.SENTRY_PROJECT,
+            'project_key': settings.SENTRY_PROJECT_KEY,
+        })
+    return key
+
+
+class SentryInternalFilter(logging.Filter):
+    def filter(self, record):
+        # TODO(mattrobenolt): handle an upstream Sentry
+        metrics.incr('internal.uncaptured.logs')
+        return is_current_event_safe()
+
+
+def configure_sdk():
+    from sentry_sdk.integrations.django import DjangoIntegration
+    from sentry_sdk.integrations.celery import CeleryIntegration
+
+    assert sentry_sdk.Hub.main.client is None
+
+    sentry_sdk.init(
+        integrations=[DjangoIntegration(), CeleryIntegration()],
+        transport=InternalTransport(),
+        **settings.SENTRY_SDK_CONFIG
+    )
+
+
+class InternalTransport(Transport):
+    def __init__(self):
+        pass
+
+    @cached_property
+    def project_key(self):
+        return get_project_key()
+
+    @cached_property
+    def request_factory(self):
+        from django.test import RequestFactory
+        return RequestFactory()
+
+    def capture_event(self, event):
+        with capture_internal_exceptions():
+            key = self.project_key
+            if key is None:
+                return
+
+            if not is_current_event_safe():
+                metrics.incr('internal.uncaptured.events')
+                sdk_logger.warn('internal-error.unsafe-stacktrace')
+                return
+
+            auth = Auth(
+                scheme="https",
+                host="localhost",
+                project_id=key.project_id,
+                public_key=key.public_key,
+                secret_key=key.secret_key,
+                client="sentry-python/%s" % SDK_VERSION
+            )
+
+            headers = {
+                'HTTP_X_SENTRY_AUTH': auth.to_header(),
+                'HTTP_CONTENT_ENCODING': 'deflate'
+            }
+
+            request = self.request_factory.post(
+                '/api/{}/store/'.format(key.project_id),
+                data=zlib.compress(json.dumps(event).encode('utf8')),
+                content_type='application/octet-stream',
+                **headers
+            )
+
+            from sentry.web.api import StoreView
+            resp = StoreView.as_view()(
+                request,
+                project_id=six.text_type(key.project_id),
+            )
+
+            if resp.status_code != 200:
+                sdk_logger.warn('internal-error.invalid-response', extra={
+                    'project_id': settings.SENTRY_PROJECT,
+                    'project_key': settings.SENTRY_PROJECT_KEY,
+                    'status_code': resp.status_code,
+                })
+
+
+class RavenShim(object):
+    """Wrapper around sentry-sdk in case people are writing their own
+    integrations that rely on this being here."""
+
+    def captureException(self, exc_info=None, **kwargs):
+        with sentry_sdk.push_scope() as scope:
+            self._kwargs_into_scope(scope, **kwargs)
+            return capture_exception(exc_info)
+
+    def captureMessage(self, msg, **kwargs):
+        with sentry_sdk.push_scope() as scope:
+            self._kwargs_into_scope(scope, **kwargs)
+            return capture_message(msg)
+
+    def tags_context(self, tags):
+        with sentry_sdk.configure_scope() as scope:
+            for k, v in tags.items():
+                scope.set_tag(k, v)
+
+    def _kwargs_into_scope(self, scope, extra=None, tags=None,
+                           fingerprint=None, request=None):
+        for key, value in (extra.items() if extra else ()):
+            scope.set_extra(key, value)
+        for key, value in (tags.items() if tags else ()):
+            scope.set_tag(key, value)
+        if fingerprint is not None:
+            scope.fingerprint = fingerprint
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index c1fc8f8570..1fba568c4a 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -26,10 +26,10 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.generic.base import View as BaseView
 from functools import wraps
 from querystring_parser import parser
-from raven.contrib.django.models import client as Raven
 from symbolic import ProcessMinidumpError
 
 from sentry import features, quotas, tsdb, options
+from sentry.app import raven
 from sentry.attachments import CachedAttachment
 from sentry.coreapi import (
     APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, LazyData,
@@ -240,7 +240,7 @@ class APIView(BaseView):
         project = self._get_project_from_id(project_id)
         if project:
             helper.context.bind_project(project)
-            Raven.tags_context(helper.context.get_tags_context())
+            raven.tags_context(helper.context.get_tags_context())
 
         if origin is not None:
             # This check is specific for clients who need CORS support
@@ -267,7 +267,7 @@ class APIView(BaseView):
                 raise APIError('Two different projects were specified')
 
             helper.context.bind_auth(auth)
-            Raven.tags_context(helper.context.get_tags_context())
+            raven.tags_context(helper.context.get_tags_context())
 
             # Explicitly bind Organization so we don't implicitly query it later
             # this just allows us to comfortably assure that `project.organization` is safe.
@@ -564,7 +564,7 @@ class MinidumpView(StoreView):
 
         project = self._get_project_from_id(project_id)
         helper.context.bind_project(project)
-        Raven.tags_context(helper.context.get_tags_context())
+        raven.tags_context(helper.context.get_tags_context())
 
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
@@ -576,7 +576,7 @@ class MinidumpView(StoreView):
             raise APIError('Two different projects were specified')
 
         helper.context.bind_auth(auth)
-        Raven.tags_context(helper.context.get_tags_context())
+        raven.tags_context(helper.context.get_tags_context())
 
         return super(APIView, self).dispatch(
             request=request, project=project, auth=auth, helper=helper, key=key, **kwargs
@@ -738,7 +738,7 @@ class SecurityReportView(StoreView):
 
         project = self._get_project_from_id(project_id)
         helper.context.bind_project(project)
-        Raven.tags_context(helper.context.get_tags_context())
+        raven.tags_context(helper.context.get_tags_context())
 
         # This is yanking the auth from the querystring since it's not
         # in the POST body. This means we expect a `sentry_key` and
@@ -750,7 +750,7 @@ class SecurityReportView(StoreView):
             raise APIError('Two different projects were specified')
 
         helper.context.bind_auth(auth)
-        Raven.tags_context(helper.context.get_tags_context())
+        raven.tags_context(helper.context.get_tags_context())
 
         return super(APIView, self).dispatch(
             request=request, project=project, auth=auth, helper=helper, key=key, **kwargs
diff --git a/src/sentry/web/frontend/debug/debug_trigger_error.py b/src/sentry/web/frontend/debug/debug_trigger_error.py
index 735ba72f37..dfe4e5695c 100644
--- a/src/sentry/web/frontend/debug/debug_trigger_error.py
+++ b/src/sentry/web/frontend/debug/debug_trigger_error.py
@@ -1,8 +1,8 @@
 from __future__ import absolute_import
 
 from django.views.generic import View
-from raven.contrib.django.models import client
 
+from sentry.app import raven
 from sentry.web.frontend.error_500 import Error500View
 
 
@@ -11,6 +11,6 @@ class DebugTriggerErrorView(View):
         try:
             raise ValueError('An example error')
         except Exception:
-            client.captureException(request=request)
+            raven.captureException()
 
         return Error500View.as_view()(request)
diff --git a/src/sentry/wsgi.py b/src/sentry/wsgi.py
index 72811090e3..3a5e1d8608 100644
--- a/src/sentry/wsgi.py
+++ b/src/sentry/wsgi.py
@@ -50,5 +50,4 @@ class FileWrapperWSGIHandler(WSGIHandler):
 
 
 # Run WSGI handler for the application
-from raven.contrib.django.middleware.wsgi import Sentry
-application = Sentry(FileWrapperWSGIHandler())
+application = FileWrapperWSGIHandler()
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 79d075856e..1d0bf5da98 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -17,7 +17,7 @@ from django.test.utils import override_settings
 from django.utils import timezone
 from exam import fixture
 from gzip import GzipFile
-from raven import Client
+from sentry_sdk import Hub, Client
 from six import StringIO
 
 from sentry.models import (Group, Event)
@@ -93,11 +93,6 @@ def load_fixture(name):
         return fp.read()
 
 
-class AssertHandler(logging.Handler):
-    def emit(self, entry):
-        raise AssertionError(entry.msg)
-
-
 class RavenIntegrationTest(TransactionTestCase):
     """
     This mocks the test server and specifically tests behavior that would
@@ -112,43 +107,71 @@ class RavenIntegrationTest(TransactionTestCase):
         self.configure_sentry_errors()
 
     def configure_sentry_errors(self):
+        # delay raising of assertion errors to make sure they do not get
+        # swallowed again
+        failures = []
+
+        class AssertHandler(logging.Handler):
+            def emit(self, entry):
+                failures.append(entry)
+
         assert_handler = AssertHandler()
-        sentry_errors = logging.getLogger('sentry.errors')
-        sentry_errors.addHandler(assert_handler)
-        sentry_errors.setLevel(logging.DEBUG)
 
-        def remove_handler():
-            sentry_errors.handlers.pop(sentry_errors.handlers.index(assert_handler))
+        for name in 'sentry.errors', 'sentry_sdk.errors':
+            sentry_errors = logging.getLogger(name)
+            sentry_errors.addHandler(assert_handler)
+            sentry_errors.setLevel(logging.DEBUG)
 
-        self.addCleanup(remove_handler)
+            @self.addCleanup
+            def remove_handler(sentry_errors=sentry_errors):
+                sentry_errors.handlers.pop(sentry_errors.handlers.index(assert_handler))
 
-    def sendRemote(self, url, data, headers={}):
-        content_type = headers.pop('Content-Type', None)
-        headers = dict(
-            ('HTTP_' + k.replace('-', '_').upper(), v) for k, v in six.iteritems(headers)
-        )
-        if isinstance(data, six.text_type):
-            data = data.encode('utf-8')
-        resp = self.client.post(
-            reverse('sentry-api-store', args=[self.pk.project_id]),
-            data=data,
-            content_type=content_type,
-            **headers
-        )
-        assert resp.status_code == 200, resp.content
+        @self.addCleanup
+        def reraise_failures():
+            for entry in failures:
+                raise AssertionError(entry.message)
 
-    @mock.patch('raven.base.Client.send_remote')
-    def test_basic(self, send_remote):
-        send_remote.side_effect = self.sendRemote
-        client = Client(
-            dsn='http://%s:%s@localhost:8000/%s' %
-            (self.pk.public_key, self.pk.secret_key, self.pk.project_id)
-        )
+    def send_event(self, method, url, body, headers):
+        from sentry.app import buffer
 
         with self.tasks():
-            client.captureMessage(message='foo')
+            content_type = headers.pop('Content-Type', None)
+            headers = {'HTTP_' + k.replace('-', '_').upper(): v for k, v in six.iteritems(headers)}
+            resp = self.client.post(
+                reverse(
+                    'sentry-api-store',
+                    args=[self.pk.project_id],
+                ),
+                data=body,
+                content_type=content_type,
+                **headers
+            )
+            assert resp.status_code == 200
+
+            buffer.process_pending()
+
+    @mock.patch('urllib3.PoolManager.request')
+    def test_basic(self, request):
+        requests = []
+
+        def queue_event(method, url, body, headers):
+            requests.append((method, url, body, headers))
+
+        request.side_effect = queue_event
+
+        hub = Hub(Client(
+            'http://%s:%s@localhost:8000/%s' %
+            (self.pk.public_key, self.pk.secret_key, self.pk.project_id),
+            default_integrations=False
+        ))
+
+        hub.capture_message('foo')
+        hub.client.close()
+
+        for _request in requests:
+            self.send_event(*_request)
 
-        assert send_remote.call_count is 1
+        assert request.call_count is 1
         assert Group.objects.count() == 1
         group = Group.objects.get()
         assert group.event_set.count() == 1
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index 02c82ecde8..f53fb8c3e7 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -1208,7 +1208,7 @@ class RealResolvingIntegrationTest(TestCase):
             for _ in range(3):
                 resp = self._postWithHeader(event_data)
                 assert resp.status_code == 200
-                event = Event.objects.get()
+                event = Event.objects.get(project_id=self.project.id)
                 errors = event.data['errors']
                 assert len(errors) == 1
                 assert errors[0] == {
diff --git a/tests/sentry/utils/test_raven.py b/tests/sentry/utils/test_raven.py
deleted file mode 100644
index 23747b9d58..0000000000
--- a/tests/sentry/utils/test_raven.py
+++ /dev/null
@@ -1,69 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.conf import settings
-from mock import Mock, patch
-from raven.contrib.django.models import client
-from raven.base import Client
-
-from sentry.models import Event
-from sentry.testutils import TestCase
-from sentry.utils.raven import SentryInternalClient
-
-
-class SentryInternalClientTest(TestCase):
-    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))
-    @patch.object(Client, 'send')
-    def test_simple(self, send):
-        assert client.__class__ is SentryInternalClient
-
-        with self.tasks():
-            event_id = client.captureMessage('internal client test')
-
-        event = Event.objects.get()
-        assert event.project_id == settings.SENTRY_PROJECT
-        assert event.event_id == event_id
-        assert event.data['sentry.interfaces.Message']['message'] == \
-            'internal client test'
-        assert send.call_count == 0
-
-    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))
-    @patch.object(Client, 'send')
-    def test_upstream(self, send):
-        with self.dsn('http://foo:bar@example.com/1'):
-            with self.options({'sentry:install-id': 'abc123'}):
-                with self.tasks():
-                    event_id = client.captureMessage('internal client test')
-
-                event = Event.objects.get()
-                assert event.project_id == settings.SENTRY_PROJECT
-                assert event.event_id == event_id
-                assert event.data['sentry.interfaces.Message']['message'] == \
-                    'internal client test'
-
-                # Make sure that the event also got sent upstream
-                assert send.call_count == 1
-                _, kwargs = send.call_args
-                # and got tagged properly
-                assert kwargs['tags']['install-id'] == 'abc123'
-
-    @patch.object(SentryInternalClient, 'is_enabled', Mock(return_value=True))
-    def test_encoding(self):
-
-        class NotJSONSerializable():
-            pass
-
-        sic = SentryInternalClient()
-        with self.tasks():
-            sic.send(**{
-                'sentry.interfaces.Message': {
-                    'message': 'check the req',
-                },
-                'extra': {
-                    'request': NotJSONSerializable()
-                },
-            })
-
-        event = Event.objects.get()
-        assert event.project_id == settings.SENTRY_PROJECT
-        assert event.data['sentry.interfaces.Message']['message'] == 'check the req'
-        assert 'NotJSONSerializable' in event.data['extra']['request']
diff --git a/tests/sentry/utils/test_sdk.py b/tests/sentry/utils/test_sdk.py
new file mode 100644
index 0000000000..c186861554
--- /dev/null
+++ b/tests/sentry/utils/test_sdk.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import, print_function
+
+from sentry_sdk import Hub
+
+from django.conf import settings
+from sentry.utils.sdk import configure_sdk
+from sentry.app import raven
+
+from sentry.models import Event
+from sentry.testutils import TestCase
+
+
+class SentryInternalClientTest(TestCase):
+    def test_simple(self):
+        configure_sdk()
+        Hub.current.bind_client(Hub.main.client)
+
+        with self.tasks():
+            event_id = raven.captureMessage('internal client test')
+
+        event = Event.objects.get()
+        assert event.project_id == settings.SENTRY_PROJECT
+        assert event.event_id == event_id
+        assert event.data['sentry.interfaces.Message']['message'] == \
+            'internal client test'
+
+    def test_encoding(self):
+        configure_sdk()
+        Hub.current.bind_client(Hub.main.client)
+
+        class NotJSONSerializable():
+            pass
+
+        with self.tasks():
+            raven.captureMessage('check the req', extra={
+                'request': NotJSONSerializable()
+            })
+
+        event = Event.objects.get()
+        assert event.project_id == settings.SENTRY_PROJECT
+        assert event.data['sentry.interfaces.Message']['message'] == 'check the req'
+        assert 'NotJSONSerializable' in event.data['extra']['request']
