commit 3934dd2e090176fa53e909f29671ecaea6dd9021
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 18 12:17:51 2016 -0800

    Add age to search

diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 78a2e1190a..50c742104f 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -1,11 +1,18 @@
 from __future__ import absolute_import, division, print_function
 
 from collections import defaultdict
+from datetime import timedelta
+from django.utils import timezone
+
 from sentry.constants import STATUS_CHOICES
 from sentry.models import EventUser, User
 from sentry.utils.auth import find_users
 
 
+class InvalidQuery(Exception):
+    pass
+
+
 def get_user_tag(project, key, value):
     # TODO(dcramer): do something with case of multiple matches
     try:
@@ -20,6 +27,26 @@ def get_user_tag(project, key, value):
     return euser.tag_value
 
 
+def parse_simple_range(value):
+    try:
+        flag, count, interval = value[0], int(value[1:-1]), value[-1]
+    except (ValueError, TypeError):
+        # TODO(dcramer): propagate errors
+        raise InvalidQuery('{} is not a valid range query'.format(value))
+
+    if flag not in ('+', '-'):
+        raise InvalidQuery('{} is not a valid range query'.format(value))
+
+    if interval == 'h':
+        return flag, timedelta(hours=count)
+    elif interval == 'd':
+        return flag, timedelta(days=count)
+    elif interval == 'm':
+        return flag, timedelta(minutes=count)
+    else:
+        raise InvalidQuery('{} is not a valid range query'.format(value))
+
+
 def tokenize_query(query):
     """
     Tokenizes a standard Sentry search query.
@@ -118,6 +145,14 @@ def parse_query(project, query, user):
                     comp = 'id'
                 results['tags']['sentry:user'] = get_user_tag(
                     project, comp, value)
+            elif key == 'age':
+                flag, offset = parse_simple_range(value)
+                date_value = timezone.now() - offset
+                if flag == '+':
+                    results['date_to'] = date_value
+                elif flag == '-':
+                    results['date_from'] = date_value
+                results['date_filter'] = 'first_seen'
             elif key.startswith('user.'):
                 results['tags']['sentry:user'] = get_user_tag(
                     project, key.split('.', 1)[1], value)
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 706f9bbff4..5238fde022 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
+from django.utils import timezone
+
 from sentry.models import EventUser, GroupStatus
 from sentry.testutils import TestCase
 from sentry.search.utils import parse_query
@@ -118,3 +121,25 @@ class ParseQueryTest(TestCase):
     def test_is_assigned(self):
         result = self.parse_query('is:assigned')
         assert result == {'unassigned': False, 'tags': {}, 'query': ''}
+
+    def test_age_from(self):
+        result = self.parse_query('age:-24h')
+        assert result['date_filter'] == 'first_seen'
+        assert result['date_from'] > timezone.now() - timedelta(hours=25)
+        assert result['date_from'] < timezone.now() - timedelta(hours=23)
+        assert not result.get('date_to')
+
+    def test_age_to(self):
+        result = self.parse_query('age:+24h')
+        assert result['date_filter'] == 'first_seen'
+        assert result['date_to'] > timezone.now() - timedelta(hours=25)
+        assert result['date_to'] < timezone.now() - timedelta(hours=23)
+        assert not result.get('date_from')
+
+    def test_age_range(self):
+        result = self.parse_query('age:-24h age:+12h')
+        assert result['date_filter'] == 'first_seen'
+        assert result['date_from'] > timezone.now() - timedelta(hours=25)
+        assert result['date_from'] < timezone.now() - timedelta(hours=23)
+        assert result['date_to'] > timezone.now() - timedelta(hours=13)
+        assert result['date_to'] < timezone.now() - timedelta(hours=11)
