commit 8f221436cec7af02fb69e65e39bf16c67134d465
Author: Xavier Ordoquy <xordoquy@linovia.com>
Date:   Mon Jan 2 10:03:40 2012 +0100

    Initial work on processors.

diff --git a/docs/processors/index.rst b/docs/processors/index.rst
new file mode 100644
index 0000000000..cfcac19eb5
--- /dev/null
+++ b/docs/processors/index.rst
@@ -0,0 +1,10 @@
+Processors
+==========
+
+Bundled Processors
+------------------
+
+
+Writing a Processor
+-------------------
+
diff --git a/sentry/models.py b/sentry/models.py
index aefc2e551d..c694956fe9 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -23,6 +23,7 @@ from django.db.models import Sum
 from django.db.models.signals import post_syncdb
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
+from django.db.models.signals import post_save
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
@@ -31,6 +32,7 @@ from sentry.utils import cached_property, \
 from sentry.utils.models import Model, GzippedDictField
 from sentry.utils.manager import GroupManager, ProjectManager
 from sentry.templatetags.sentry_helpers import truncatechars
+import sentry.processors
 
 __all__ = ('Event', 'Group')
 
@@ -361,6 +363,8 @@ class Event(MessageBase):
         module = self.data['__sentry__'].get('module', 'ver')
         return module, self.data['__sentry__']['version']
 
+post_save.connect(sentry.processors.post_save_processors)
+
 
 class FilterValue(models.Model):
     """
diff --git a/sentry/processors/__init__.py b/sentry/processors/__init__.py
new file mode 100644
index 0000000000..739d6af6e0
--- /dev/null
+++ b/sentry/processors/__init__.py
@@ -0,0 +1,62 @@
+"""
+sentry.processors
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+import logging
+
+
+class BaseProcessor(object):
+    conditions = {}
+
+    def post_processing(self, event):
+        """
+        Called every time an event is created
+        """
+        return
+
+#
+# Connect to Events post_save
+#
+
+# from django.db.models.signals import pre_save
+# from django.dispatch import receiver
+
+
+PROCESSORS_CACHE = []
+
+
+#@receiver(pre_save, sender=Events)
+def post_save_processors(sender, **kwargs):
+    global PROCESSORS_CACHE
+
+    if PROCESSORS_CACHE:
+        for processor in PROCESSORS_CACHE:
+            processor.post_processing(sender)
+
+    from django.conf import settings
+
+    if not hasattr(settings, 'SENTRY_PROCESSORS'):
+        return
+
+    if PROCESSORS_CACHE is None:
+        processors = []
+        for processor_ in settings.SENTRY_PROCESSORS:
+            module_name, class_name = processor_.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                processor_ = getattr(module, class_name)
+            except Exception:
+                logger = logging.getLogger('sentry.errors')
+                logger.exception('Unable to import %s' % (processor_,))
+                continue
+            processors.append(processor_)
+        PROCESSORS_CACHE = processors
+
+    for processor in settings.SENTRY_PROCESSORS:
+        print 'Calling processor: %s' % processor
+        print '  Sender:', sender
diff --git a/sentry/processors/console.py b/sentry/processors/console.py
new file mode 100644
index 0000000000..28ce0afd17
--- /dev/null
+++ b/sentry/processors/console.py
@@ -0,0 +1,18 @@
+"""
+sentry.processors.console
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from sentry.processors import BaseProcessor
+
+
+class ConsoleProcessor(BaseProcessor):
+
+    def post_processing(self, event):
+        print 'Received an event:'
+        print '  ID:', event.event_id
+        print '  Project:', event.project.name
+        print '  Logger:', event.logger
diff --git a/tests/tests.py b/tests/tests.py
index 430ec6358f..2a1e9faea2 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -18,6 +18,7 @@ from sentry.models import Event, Group, MessageCountByMinute, \
   MessageFilterValue, Project, ProjectMember
 from sentry.web.helpers import get_login_url
 from sentry.utils import MockDjangoRequest
+from sentry import processors
 
 from tests.testcases import TestCase
 from tests.utils import Settings
@@ -590,3 +591,29 @@ class SentryManagerTest(TestCase):
         frame = stack['frames'][0]
         self.assertEquals(frame['filename'], 'foo.py')
         self.assertEquals(frame['function'], 'hello_world')
+
+
+class SentryProcessorsTest(TestCase):
+
+    def setup(self):
+        settings.SENTRY_PROCESSORS = (
+            'tests.processor',
+        )
+
+    def tearDown(self):
+        settings.SENTRY_PROCESSORS = ()
+        processors.PROCESSORS_CACHE = []
+
+    def create_event(self):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200)
+
+    def test_processors_cache(self):
+        self.assertEqual(processors.PROCESSORS_CACHE, [])
+        self.create_event()
+        self.assertEqual(len(processors.PROCESSORS_CACHE), 1)
+
+    def test_processors_called(self):
+        self.create_event()
+        self.assertTrue(False)
