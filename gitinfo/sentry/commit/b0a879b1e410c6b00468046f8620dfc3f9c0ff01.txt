commit b0a879b1e410c6b00468046f8620dfc3f9c0ff01
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Nov 20 16:01:47 2018 +0100

    ref: Remove unused get_traceback method (#10681)

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 91b36dbdf8..6f18ed2675 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -900,15 +900,6 @@ class Stacktrace(Interface):
 
         return '\n'.join(result)
 
-    def get_traceback(self, event, newest_first=None):
-        result = [
-            event.message,
-            '',
-            self.get_stacktrace(event, newest_first=newest_first),
-        ]
-
-        return '\n'.join(result)
-
     def get_culprit_string(self, platform=None):
         default = None
         for frame in reversed(self.frames):
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 6746b05043..991191231f 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -804,17 +804,6 @@ class StacktraceTest(TestCase):
         get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=10)
         self.assertEquals(result, get_stacktrace.return_value)
 
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
-    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
-    def test_get_traceback_response(self, get_stacktrace):
-        event = mock.Mock(spec=Event())
-        event.message = 'foo'
-        get_stacktrace.return_value = 'bar'
-        interface = Stacktrace.to_python(dict(frames=[{'lineno': 1, 'filename': 'foo.py'}]))
-        result = interface.get_traceback(event)
-        get_stacktrace.assert_called_once_with(event, newest_first=None)
-        self.assertEquals(result, 'foo\n\nbar')
-
     @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
     def test_get_stacktrace_with_only_filename(self):
         event = mock.Mock(spec=Event())
