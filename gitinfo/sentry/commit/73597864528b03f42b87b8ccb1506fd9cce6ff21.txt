commit 73597864528b03f42b87b8ccb1506fd9cce6ff21
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Oct 29 17:30:05 2019 -0700

    chore: Remove unused threshold_type, alert_threshold and resolve_threshold fields from AlertRule (SEN-1065)
    
    We moved these fields to AlertRuleTrigger a while back, just cleaning up the leftover code around
    this.
    
    Note that the migration runs no sql. It just updates the database state to reflect that the fields
    are gone. I will follow this up with a separate PR to actually delete the columns once this is
    deployed.

diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index c35cbe580b..7198a36d40 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -30,15 +30,18 @@ class AlertRuleSerializer(Serializer):
             "name": obj.name,
             "organizationId": six.text_type(obj.organization_id),
             "status": obj.status,
-            "thresholdType": obj.threshold_type,
+            # TODO: Remove when frontend isn't using
+            "thresholdType": 0,
             "dataset": obj.dataset,
             "query": obj.query,
             "aggregation": obj.aggregation,
             "aggregations": [obj.aggregation],
             "timeWindow": obj.time_window,
             "resolution": obj.resolution,
-            "alertThreshold": obj.alert_threshold,
-            "resolveThreshold": obj.resolve_threshold,
+            # TODO: Remove when frontend isn't using
+            "alertThreshold": 0,
+            # TODO: Remove when frontend isn't using
+            "resolveThreshold": 0,
             "thresholdPeriod": obj.threshold_period,
             "triggers": attrs.get("triggers", []),
             "includeAllProjects": obj.include_all_projects,
diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index e9ba327850..3d73976958 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -42,6 +42,9 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
     # individually. If we find this to be a problem then we can look into batching.
     projects = serializers.ListField(child=ProjectField(), required=False)
     excluded_projects = serializers.ListField(child=ProjectField(), required=False)
+    threshold_type = serializers.IntegerField(required=False)
+    alert_threshold = serializers.IntegerField(required=False)
+    resolve_threshold = serializers.IntegerField(required=False)
 
     class Meta:
         model = AlertRule
@@ -72,15 +75,6 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             "include_all_projects": {"default": False},
         }
 
-    def validate_threshold_type(self, threshold_type):
-        try:
-            return AlertRuleThresholdType(threshold_type)
-        except ValueError:
-            raise serializers.ValidationError(
-                "Invalid threshold type, valid values are %s"
-                % [item.value for item in AlertRuleThresholdType]
-            )
-
     def validate_aggregation(self, aggregation):
         try:
             return QueryAggregations(aggregation)
@@ -101,7 +95,7 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
             )
 
     def validate(self, attrs):
-        return self._handle_aggregations_transition(attrs)
+        return self._handle_old_fields_transition(attrs)
 
     def create(self, validated_data):
         try:
@@ -136,13 +130,17 @@ class AlertRuleSerializer(CamelSnakeModelSerializer):
                 validated_data.pop(field_name)
         return validated_data
 
-    def _handle_aggregations_transition(self, validated_data):
+    def _handle_old_fields_transition(self, validated_data):
         # Temporary methods for transitioning from multiple aggregations to a single
         # aggregate
         if "aggregations" in validated_data and "aggregation" not in validated_data:
             validated_data["aggregation"] = validated_data["aggregations"][0]
 
         validated_data.pop("aggregations", None)
+        # TODO: Remove after frontend stops using these fields
+        validated_data.pop("threshold_type", None)
+        validated_data.pop("alert_threshold", None)
+        validated_data.pop("resolve_threshold", None)
         return validated_data
 
     def update(self, instance, validated_data):
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 30b01a9e08..1bdbf987a8 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -582,12 +582,9 @@ def create_alert_rule(
     organization,
     projects,
     name,
-    threshold_type,
     query,
     aggregation,
     time_window,
-    alert_threshold,
-    resolve_threshold,
     threshold_period,
     include_all_projects=False,
     excluded_projects=None,
@@ -600,14 +597,9 @@ def create_alert_rule(
     if `include_all_projects` is True
     :param name: Name for the alert rule. This will be used as part of the
     incident name, and must be unique per project
-    :param threshold_type: An AlertRuleThresholdType
     :param query: An event search query to subscribe to and monitor for alerts
     :param aggregation: A QueryAggregation to fetch for this alert rule
     :param time_window: Time period to aggregate over, in minutes
-    :param alert_threshold: Value that the subscription needs to reach to
-    trigger the alert
-    :param resolve_threshold: Value that the subscription needs to reach to
-    resolve the alert
     :param threshold_period: How many update periods the value of the
     subscription needs to exceed the threshold before triggering
     :param include_all_projects: Whether to include all current and future projects
@@ -625,14 +617,11 @@ def create_alert_rule(
         alert_rule = AlertRule.objects.create(
             organization=organization,
             name=name,
-            threshold_type=threshold_type.value,
             dataset=dataset.value,
             query=query,
             aggregation=aggregation.value,
             time_window=time_window,
             resolution=resolution,
-            alert_threshold=alert_threshold,
-            resolve_threshold=resolve_threshold,
             threshold_period=threshold_period,
             include_all_projects=include_all_projects,
         )
@@ -655,12 +644,9 @@ def update_alert_rule(
     alert_rule,
     projects=None,
     name=None,
-    threshold_type=None,
     query=None,
     aggregation=None,
     time_window=None,
-    alert_threshold=None,
-    resolve_threshold=None,
     threshold_period=None,
     include_all_projects=None,
     excluded_projects=None,
@@ -673,14 +659,9 @@ def update_alert_rule(
     `include_all_projects` is True
     :param name: Name for the alert rule. This will be used as part of the
     incident name, and must be unique per project.
-    :param threshold_type: An AlertRuleThresholdType
     :param query: An event search query to subscribe to and monitor for alerts
     :param aggregation: An AlertRuleAggregation that we want to fetch for this alert rule
     :param time_window: Time period to aggregate over, in minutes.
-    :param alert_threshold: Value that the subscription needs to reach to
-    trigger the alert
-    :param resolve_threshold: Value that the subscription needs to reach to
-    resolve the alert
     :param threshold_period: How many update periods the value of the
     subscription needs to exceed the threshold before triggering
     :param include_all_projects: Whether to include all current and future projects
@@ -699,8 +680,6 @@ def update_alert_rule(
     updated_fields = {}
     if name:
         updated_fields["name"] = name
-    if threshold_type:
-        updated_fields["threshold_type"] = threshold_type.value
     if query is not None:
         validate_alert_rule_query(query)
         updated_fields["query"] = query
@@ -708,10 +687,6 @@ def update_alert_rule(
         updated_fields["aggregation"] = aggregation.value
     if time_window:
         updated_fields["time_window"] = time_window
-    if alert_threshold is not None:
-        updated_fields["alert_threshold"] = alert_threshold
-    if resolve_threshold is not None:
-        updated_fields["resolve_threshold"] = resolve_threshold
     if threshold_period:
         updated_fields["threshold_period"] = threshold_period
     if include_all_projects is not None:
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index b5156fe0b5..a019d1ceac 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -308,9 +308,6 @@ class AlertRule(Model):
     aggregation = models.IntegerField(default=QueryAggregations.TOTAL.value)
     time_window = models.IntegerField()
     resolution = models.IntegerField()
-    threshold_type = models.SmallIntegerField(null=True)
-    alert_threshold = models.IntegerField(null=True)
-    resolve_threshold = models.IntegerField(null=True)
     threshold_period = models.IntegerField()
     date_modified = models.DateTimeField(default=timezone.now)
     date_added = models.DateTimeField(default=timezone.now)
diff --git a/src/sentry/migrations/0008_auto_20191030_0016.py b/src/sentry/migrations/0008_auto_20191030_0016.py
new file mode 100644
index 0000000000..58f34604c0
--- /dev/null
+++ b/src/sentry/migrations/0008_auto_20191030_0016.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    dependencies = [("sentry", "0007_auto_20191029_0131")]
+
+    operations = [
+        migrations.SeparateDatabaseAndState(
+            database_operations=[],
+            state_operations=[
+                migrations.RemoveField(model_name="alertrule", name="alert_threshold"),
+                migrations.RemoveField(model_name="alertrule", name="resolve_threshold"),
+                migrations.RemoveField(model_name="alertrule", name="threshold_type"),
+            ],
+        )
+    ]
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index e9685bfdd5..b40c601c8a 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -24,7 +24,6 @@ from sentry.event_manager import EventManager
 from sentry.constants import SentryAppStatus
 from sentry.incidents.logic import create_alert_rule
 from sentry.incidents.models import (
-    AlertRuleThresholdType,
     Incident,
     IncidentGroup,
     IncidentProject,
@@ -941,12 +940,9 @@ class Factories(object):
         organization,
         projects,
         name=None,
-        threshold_type=AlertRuleThresholdType.ABOVE,
         query="level:error",
         aggregation=QueryAggregations.TOTAL,
         time_window=10,
-        alert_threshold=100,
-        resolve_threshold=10,
         threshold_period=1,
         include_all_projects=False,
         excluded_projects=None,
@@ -958,12 +954,9 @@ class Factories(object):
             organization,
             projects,
             name,
-            threshold_type,
             query,
             aggregation,
             time_window,
-            alert_threshold,
-            resolve_threshold,
             threshold_period,
             include_all_projects=include_all_projects,
             excluded_projects=excluded_projects,
diff --git a/tests/sentry/api/serializers/test_alert_rule.py b/tests/sentry/api/serializers/test_alert_rule.py
index 12ba24dffd..e138f1af84 100644
--- a/tests/sentry/api/serializers/test_alert_rule.py
+++ b/tests/sentry/api/serializers/test_alert_rule.py
@@ -17,14 +17,14 @@ class BaseAlertRuleSerializerTest(object):
         assert result["id"] == six.text_type(alert_rule.id)
         assert result["organizationId"] == six.text_type(alert_rule.organization_id)
         assert result["name"] == alert_rule.name
-        assert result["thresholdType"] == alert_rule.threshold_type
+        assert result["thresholdType"] == 0
         assert result["dataset"] == alert_rule.dataset
         assert result["query"] == alert_rule.query
         assert result["aggregation"] == alert_rule.aggregation
         assert result["timeWindow"] == alert_rule.time_window
         assert result["resolution"] == alert_rule.resolution
-        assert result["alertThreshold"] == alert_rule.alert_threshold
-        assert result["resolveThreshold"] == alert_rule.resolve_threshold
+        assert result["alertThreshold"] == 0
+        assert result["resolveThreshold"] == 0
         assert result["thresholdPeriod"] == alert_rule.threshold_period
         assert result["includeAllProjects"] == alert_rule.include_all_projects
         assert result["dateModified"] == alert_rule.date_modified
@@ -37,12 +37,9 @@ class AlertRuleSerializerTest(BaseAlertRuleSerializerTest, TestCase):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
         result = serialize(alert_rule)
diff --git a/tests/sentry/api/serializers/test_incident.py b/tests/sentry/api/serializers/test_incident.py
index 27693aafc0..b2602a121c 100644
--- a/tests/sentry/api/serializers/test_incident.py
+++ b/tests/sentry/api/serializers/test_incident.py
@@ -11,7 +11,7 @@ from freezegun import freeze_time
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.incident import DetailedIncidentSerializer
 from sentry.incidents.logic import create_alert_rule, subscribe_to_incident
-from sentry.incidents.models import AlertRuleThresholdType, IncidentGroup
+from sentry.incidents.models import IncidentGroup
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import TestCase
 
@@ -68,16 +68,7 @@ class DetailedIncidentSerializerTest(TestCase):
     def test_alert_rule(self):
         incident = self.create_incident()
         alert_rule = create_alert_rule(
-            self.organization,
-            [self.project],
-            "hi",
-            AlertRuleThresholdType.ABOVE,
-            "test query",
-            QueryAggregations.TOTAL,
-            10,
-            1000,
-            400,
-            1,
+            self.organization, [self.project], "hi", "test query", QueryAggregations.TOTAL, 10, 1
         )
         incident.update(alert_rule=alert_rule)
 
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
index b2898c5a48..754c9e7521 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_details.py
@@ -5,7 +5,7 @@ from exam import fixture
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.alert_rule import DetailedAlertRuleSerializer
 from sentry.incidents.logic import create_alert_rule
-from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.incidents.models import AlertRule
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import APITestCase
 
@@ -31,12 +31,9 @@ class AlertRuleDetailsBase(object):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py
index 15c0d745d4..7ce32b3153 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_index.py
@@ -5,7 +5,7 @@ from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
 from sentry.incidents.logic import create_alert_rule
-from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.incidents.models import AlertRule
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import APITestCase
 
@@ -31,12 +31,9 @@ class AlertRuleListEndpointTest(APITestCase):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
index 54227b8781..4edd8630c7 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
@@ -34,12 +34,9 @@ class AlertRuleTriggerActionDetailsBase(object):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py
index b8b6220951..0f5f73a0d3 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_details.py
@@ -31,12 +31,9 @@ class AlertRuleTriggerDetailsBase(object):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
@@ -111,10 +108,7 @@ class AlertRuleTriggerDetailsPutEndpointTest(AlertRuleTriggerDetailsBase, APITes
         self.login_as(self.user)
         with self.feature("organizations:incidents"):
             resp = self.get_valid_response(
-                self.organization.slug,
-                self.alert_rule.id,
-                self.trigger.id,
-                alert_threshold=self.alert_rule.alert_threshold,
+                self.organization.slug, self.alert_rule.id, self.trigger.id
             )
 
         # Alert rule should be exactly the same
diff --git a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
index 2b5d2c5a59..91e460f242 100644
--- a/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
+++ b/tests/sentry/incidents/endpoints/test_project_alert_rule_details.py
@@ -4,7 +4,7 @@ from exam import fixture
 
 from sentry.api.serializers import serialize
 from sentry.incidents.logic import create_alert_rule
-from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.incidents.models import AlertRule
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import APITestCase
 
@@ -30,12 +30,9 @@ class AlertRuleDetailsBase(object):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
diff --git a/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py b/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py
index 1c9514cd68..0aac7e51d8 100644
--- a/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py
+++ b/tests/sentry/incidents/endpoints/test_project_alert_rule_index.py
@@ -5,7 +5,7 @@ from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
 from sentry.incidents.logic import create_alert_rule
-from sentry.incidents.models import AlertRule, AlertRuleThresholdType
+from sentry.incidents.models import AlertRule
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import APITestCase
 
@@ -34,12 +34,9 @@ class AlertRuleListEndpointTest(APITestCase):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
@@ -79,23 +76,17 @@ class AlertRuleCreateEndpointTest(APITestCase):
         )
         self.login_as(self.user)
         name = "an alert"
-        threshold_type = 1
         query = "hi"
         aggregation = 0
         time_window = 10
-        alert_threshold = 1000
-        resolve_threshold = 300
         with self.feature("organizations:incidents"):
             resp = self.get_valid_response(
                 self.organization.slug,
                 self.project.slug,
                 name=name,
-                thresholdType=threshold_type,
                 query=query,
                 aggregation=aggregation,
                 timeWindow=time_window,
-                alertThreshold=alert_threshold,
-                resolveThreshold=resolve_threshold,
                 status_code=201,
             )
         assert "id" in resp.data
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index b2c0bae61e..45bea7404b 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -70,16 +70,6 @@ class TestAlertRuleSerializer(TestCase):
             {"timeWindow": 0}, {"timeWindow": ["Ensure this value is greater than or equal to 1."]}
         )
 
-    def test_threshold_type(self):
-        invalid_values = [
-            "Invalid threshold type, valid values are %s"
-            % [item.value for item in AlertRuleThresholdType]
-        ]
-        self.run_fail_validation_test(
-            {"thresholdType": "a"}, {"thresholdType": ["A valid integer is required."]}
-        )
-        self.run_fail_validation_test({"thresholdType": 50}, {"thresholdType": invalid_values})
-
     def test_aggregation(self):
         invalid_values = [
             "Invalid aggregation, valid values are %s" % [item.value for item in QueryAggregations]
@@ -103,21 +93,9 @@ class TestAlertRuleSerializer(TestCase):
         name = "hello"
         query = "level:error"
         aggregation = QueryAggregations.TOTAL
-        threshold_type = AlertRuleThresholdType.ABOVE
         time_window = 10
-        alert_threshold = 1000
-        resolve_threshold = 400
         alert_rule = create_alert_rule(
-            self.organization,
-            projects,
-            name,
-            threshold_type,
-            query,
-            aggregation,
-            time_window,
-            alert_threshold,
-            resolve_threshold,
-            1,
+            self.organization, projects, name, query, aggregation, time_window, 1
         )
 
         self._run_changed_fields_test(
@@ -125,12 +103,9 @@ class TestAlertRuleSerializer(TestCase):
             {
                 "projects": [p.slug for p in projects],
                 "name": name,
-                "threshold_type": threshold_type.value,
                 "query": query,
                 "aggregation": aggregation.value,
                 "time_window": time_window,
-                "alert_threshold": alert_threshold,
-                "resolve_threshold": resolve_threshold,
             },
             {},
         )
@@ -143,11 +118,6 @@ class TestAlertRuleSerializer(TestCase):
         self._run_changed_fields_test(alert_rule, {"name": name}, {})
         self._run_changed_fields_test(alert_rule, {"name": "a name"}, {"name": "a name"})
 
-        self._run_changed_fields_test(alert_rule, {"threshold_type": threshold_type.value}, {})
-        self._run_changed_fields_test(
-            alert_rule, {"threshold_type": 1}, {"threshold_type": AlertRuleThresholdType.BELOW}
-        )
-
         self._run_changed_fields_test(alert_rule, {"query": query}, {})
         self._run_changed_fields_test(
             alert_rule, {"query": "level:warning"}, {"query": "level:warning"}
@@ -161,16 +131,6 @@ class TestAlertRuleSerializer(TestCase):
         self._run_changed_fields_test(alert_rule, {"time_window": time_window}, {})
         self._run_changed_fields_test(alert_rule, {"time_window": 20}, {"time_window": 20})
 
-        self._run_changed_fields_test(alert_rule, {"alert_threshold": alert_threshold}, {})
-        self._run_changed_fields_test(
-            alert_rule, {"alert_threshold": 2000}, {"alert_threshold": 2000}
-        )
-
-        self._run_changed_fields_test(alert_rule, {"resolve_threshold": resolve_threshold}, {})
-        self._run_changed_fields_test(
-            alert_rule, {"resolve_threshold": 200}, {"resolve_threshold": 200}
-        )
-
     def test_remove_unchanged_fields_include_all(self):
         projects = [self.project]
         excluded = [self.create_project()]
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 4de43c24ca..29b2b74e9d 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -93,12 +93,9 @@ class CreateIncidentTest(TestCase):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
@@ -767,37 +764,28 @@ class BulkGetIncidentStatusTest(TestCase, BaseIncidentsTest):
 class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
     def test(self):
         name = "hello"
-        threshold_type = AlertRuleThresholdType.ABOVE
         query = "level:error"
         aggregation = QueryAggregations.TOTAL
         time_window = 10
-        alert_threshold = 1000
-        resolve_threshold = 400
         threshold_period = 1
         alert_rule = create_alert_rule(
             self.organization,
             [self.project],
             name,
-            threshold_type,
             query,
             aggregation,
             time_window,
-            alert_threshold,
-            resolve_threshold,
             threshold_period,
         )
         assert alert_rule.query_subscriptions.get().project == self.project
         assert alert_rule.name == name
         assert alert_rule.status == AlertRuleStatus.PENDING.value
         assert alert_rule.query_subscriptions.all().count() == 1
-        assert alert_rule.threshold_type == threshold_type.value
         assert alert_rule.dataset == QueryDatasets.EVENTS.value
         assert alert_rule.query == query
         assert alert_rule.aggregation == aggregation.value
         assert alert_rule.time_window == time_window
         assert alert_rule.resolution == DEFAULT_ALERT_RULE_RESOLUTION
-        assert alert_rule.alert_threshold == alert_threshold
-        assert alert_rule.resolve_threshold == resolve_threshold
         assert alert_rule.threshold_period == threshold_period
 
     def test_include_all_projects(self):
@@ -817,44 +805,23 @@ class CreateAlertRuleTest(TestCase, BaseIncidentsTest):
     def test_invalid_query(self):
         with self.assertRaises(InvalidSearchQuery):
             create_alert_rule(
-                self.organization,
-                [self.project],
-                "hi",
-                AlertRuleThresholdType.ABOVE,
-                "has:",
-                QueryAggregations.TOTAL,
-                1,
-                1,
-                1,
-                1,
+                self.organization, [self.project], "hi", "has:", QueryAggregations.TOTAL, 1, 1
             )
 
     def test_existing_name(self):
         name = "uh oh"
         create_alert_rule(
-            self.organization,
-            [self.project],
-            name,
-            AlertRuleThresholdType.ABOVE,
-            "level:error",
-            QueryAggregations.TOTAL,
-            1,
-            1,
-            1,
-            1,
+            self.organization, [self.project], name, "level:error", QueryAggregations.TOTAL, 1, 1
         )
         with self.assertRaises(AlertRuleNameAlreadyUsedError):
             create_alert_rule(
                 self.organization,
                 [self.project],
                 name,
-                AlertRuleThresholdType.ABOVE,
                 "level:error",
                 QueryAggregations.TOTAL,
                 1,
                 1,
-                1,
-                1,
             )
 
 
@@ -865,23 +832,17 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
     def test(self):
         name = "uh oh"
-        threshold_type = AlertRuleThresholdType.BELOW
         query = "level:warning"
         aggregation = QueryAggregations.UNIQUE_USERS
         time_window = 50
-        alert_threshold = 2000
-        resolve_threshold = 800
         threshold_period = 2
 
         updated_projects = [self.project, self.create_project(fire_project_created=True)]
@@ -890,12 +851,9 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             self.alert_rule,
             projects=updated_projects,
             name=name,
-            threshold_type=threshold_type,
             query=query,
             aggregation=aggregation,
             time_window=time_window,
-            alert_threshold=alert_threshold,
-            resolve_threshold=resolve_threshold,
             threshold_period=threshold_period,
         )
         assert self.alert_rule.name == name
@@ -905,12 +863,9 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             assert subscription.query == query
             assert subscription.aggregation == aggregation.value
             assert subscription.time_window == time_window
-        assert self.alert_rule.threshold_type == threshold_type.value
         assert self.alert_rule.query == query
         assert self.alert_rule.aggregation == aggregation.value
         assert self.alert_rule.time_window == time_window
-        assert self.alert_rule.alert_threshold == alert_threshold
-        assert self.alert_rule.resolve_threshold == resolve_threshold
         assert self.alert_rule.threshold_period == threshold_period
 
     def test_update_subscription(self):
@@ -928,12 +883,9 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             self.organization,
             [self.project],
             used_name,
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
         with self.assertRaises(AlertRuleNameAlreadyUsedError):
@@ -948,12 +900,9 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             self.organization,
             [self.project, self.create_project(fire_project_created=True)],
             "something",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
         update_alert_rule(alert_rule, [self.project])
@@ -964,12 +913,9 @@ class UpdateAlertRuleTest(TestCase, BaseIncidentsTest):
             self.organization,
             [self.project, self.create_project(fire_project_created=True)],
             "something",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
         query_update = "level:warning"
@@ -1048,12 +994,9 @@ class DeleteAlertRuleTest(TestCase, BaseIncidentsTest):
             self.organization,
             [self.project],
             "hello",
-            AlertRuleThresholdType.ABOVE,
             "level:error",
             QueryAggregations.TOTAL,
             10,
-            1000,
-            400,
             1,
         )
 
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index bb4797d441..2055931421 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -82,12 +82,9 @@ class ProcessUpdateTest(TestCase):
             self.organization,
             [self.project, self.other_project],
             "some rule",
-            AlertRuleThresholdType.ABOVE,
             query="",
             aggregation=QueryAggregations.TOTAL,
             time_window=1,
-            alert_threshold=100,
-            resolve_threshold=10,
             threshold_period=1,
         )
         # Make sure the trigger exists
diff --git a/tests/snuba/incidents/test_tasks.py b/tests/snuba/incidents/test_tasks.py
index a61993d721..a521e41d2b 100644
--- a/tests/snuba/incidents/test_tasks.py
+++ b/tests/snuba/incidents/test_tasks.py
@@ -55,12 +55,9 @@ class HandleSnubaQueryUpdateTest(TestCase):
             self.organization,
             [self.project],
             "some rule",
-            AlertRuleThresholdType.ABOVE,
             query="",
             aggregation=QueryAggregations.TOTAL,
             time_window=1,
-            alert_threshold=100,
-            resolve_threshold=10,
             threshold_period=1,
         )
         trigger = create_alert_rule_trigger(
