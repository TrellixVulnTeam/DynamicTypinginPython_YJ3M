commit 9e1ee424ffcaa78b38bbd4d08471f1af56d2c16a
Author: Dan Fuller <dfuller@sentry.io>
Date:   Mon Jan 14 15:36:20 2019 -0800

    feat(api): Implement OrganizationProcessingIssuesEndpoint (APP-966)
    
    Implements OrganizationProcessingIssuesEndpoint, which is the org level version of
    ProjectProcessingIssuesEndpoint. Refactored code to share the logic between the
    two and improved tests.

diff --git a/src/sentry/api/endpoints/organization_processingissues.py b/src/sentry/api/endpoints/organization_processingissues.py
new file mode 100644
index 0000000000..2dbe74d937
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_processingissues.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.helpers.processing_issues import get_processing_issues
+from sentry.api.serializers import serialize
+
+
+class OrganizationProcessingIssuesEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        """
+        For each Project in an Organization, list its processing issues. Can
+        be passed `project` to filter down to specific projects.
+
+        :pparam string organization_slug: the slug of the organization.
+        :qparam array[string] project: An optional list of project ids to filter
+        to within the organization
+        :auth: required
+
+        """
+        data = get_processing_issues(
+            request.user,
+            self.get_projects(request, organization),
+            request.GET.get('detailed') == '1',
+        )
+        return Response(serialize(data, request.user))
diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 97286289db..c438e42f44 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -3,10 +3,10 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.helpers.processing_issues import get_processing_issues
 from sentry.api.serializers import serialize
-from sentry.models import ProcessingIssue, ReprocessingReport
+from sentry.models import ProcessingIssue
 from sentry.reprocessing import trigger_reprocessing
-from sentry.utils.linksign import generate_signed_link
 from sentry.web.helpers import render_to_response
 from sentry.models import ApiToken
 from sentry.utils.http import absolute_uri
@@ -71,43 +71,11 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
         """
         List a project's processing issues.
         """
-        num_issues = ProcessingIssue.objects.filter(project=project).count()
-
-        last_seen = ProcessingIssue.objects.filter(project=project).order_by('-datetime').first()
-
-        resolveable_issues, has_more = ProcessingIssue.objects \
-            .find_resolved(project_id=project.id)
-
-        reprocessing_issues = ReprocessingReport.objects \
-            .filter(project_id=project.id).count()
-
-        signed_link = None
-        if num_issues > 0:
-            signed_link = generate_signed_link(
-                request.user,
-                'sentry-api-0-project-fix-processing-issues',
-                kwargs={
-                    'project_slug': project.slug,
-                    'organization_slug': project.organization.slug,
-                }
-            )
-
-        data = {
-            'hasIssues': num_issues > 0,
-            'numIssues': num_issues,
-            'lastSeen': last_seen and serialize(last_seen.datetime) or None,
-            'resolveableIssues': len(resolveable_issues),
-            'hasMoreResolveableIssues': has_more,
-            'issuesProcessing': reprocessing_issues,
-            'signedLink': signed_link
-        }
-
-        if request.GET.get('detailed') == '1':
-            q = ProcessingIssue.objects.with_num_events().filter(project=project).order_by(
-                'type', 'datetime'
-            )
-            data['issues'] = [serialize(x, request.user) for x in q]
-
+        data = get_processing_issues(
+            request.user,
+            [project],
+            include_detailed_issues=request.GET.get('detailed') == '1',
+        )[0]
         return Response(serialize(data, request.user))
 
     def delete(self, request, project):
diff --git a/src/sentry/api/helpers/processing_issues.py b/src/sentry/api/helpers/processing_issues.py
new file mode 100644
index 0000000000..e1c36e0e1d
--- /dev/null
+++ b/src/sentry/api/helpers/processing_issues.py
@@ -0,0 +1,101 @@
+from __future__ import absolute_import
+
+from collections import defaultdict
+
+from django.db.models import (
+    Count,
+    Max,
+)
+
+from sentry.api.serializers import serialize
+from sentry.models import (
+    ProcessingIssue,
+    ReprocessingReport,
+)
+from sentry.utils.linksign import generate_signed_link
+
+
+def get_processing_issues(user, projects, include_detailed_issues=False):
+    """
+    Given a list of projects, returns a list containing stats about processing
+    issues for those projects
+    :param include_detailed_issues: Include specific details on each processing
+    issue
+    :return: A list of dicts, with each dict containing keys:
+        - 'hasIssues': Whether the project has any processing issues
+        - 'numIssues': How many processing issues the project has
+        - 'lastSeen': The date a processing issue was last seen
+        - 'resolveableIssues': How many Raw Events have no remaining issues and
+        can be resolved automatically
+        - 'hasMoreResolveableIssues': Whether there are any Raw Events that
+        have no remaining issues and can be resolved automatically
+        'issuesProcessing': How many ReprocessingReports exist for this Project
+        'signedLink': Signed link that takes the user to the reprocessing page
+        for this project
+        'project': Slug for the project
+
+    """
+    project_agg_results = {
+        result['project']: result for result in ProcessingIssue.objects.filter(
+            project__in=projects,
+        ).values('project').annotate(
+            num_issues=Count('id'),
+            last_seen=Max('datetime'),
+        )
+    }
+    project_reprocessing_issues = {
+        result['project']: result['reprocessing_issues'] for result in ReprocessingReport.objects.filter(
+            project__in=projects,
+        ).values('project').annotate(reprocessing_issues=Count('id'))
+    }
+
+    resolved_qs = ProcessingIssue.objects.find_resolved_queryset([p.id for p in projects])
+    project_resolveable = {
+        result['project']: result['count']
+        for result in resolved_qs.values('project').annotate(count=Count('id'))
+    }
+
+    if include_detailed_issues:
+        project_issues = defaultdict(list)
+        for proc_issue in ProcessingIssue.objects.with_num_events().filter(
+            project__in=projects,
+        ).order_by('type', 'datetime'):
+            project_issues[proc_issue.project_id].append(proc_issue)
+
+    project_results = []
+    for project in projects:
+        agg_results = project_agg_results.get(project.id, {})
+        num_issues = agg_results.get('num_issues', 0)
+
+        signed_link = None
+        if num_issues > 0:
+            signed_link = generate_signed_link(
+                user,
+                'sentry-api-0-project-fix-processing-issues',
+                kwargs={
+                    'project_slug': project.slug,
+                    'organization_slug': project.organization.slug,
+                }
+            )
+
+        last_seen = agg_results.get('last_seen')
+        data = {
+            'hasIssues': num_issues > 0,
+            'numIssues': num_issues,
+            'lastSeen': last_seen and serialize(last_seen) or None,
+            'resolveableIssues': project_resolveable.get(project.id, 0),
+            # XXX: Due to a bug in `find_resolved`, this was always returning
+            # False. It's unused in our frontend, so just defaulting to False
+            # so that we don't break any other consumers that expect this value.
+            'hasMoreResolveableIssues': False,
+            'issuesProcessing': project_reprocessing_issues.get(project.id, 0),
+            'signedLink': signed_link,
+            'project': project.slug,
+        }
+        if include_detailed_issues:
+            issues = project_issues[project.id]
+            data['issues'] = [serialize(issue, user) for issue in issues]
+
+        project_results.append(data)
+
+    return project_results
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e834afd16c..d01f65984d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -79,8 +79,9 @@ from .endpoints.organization_member_unreleased_commits import OrganizationMember
 from .endpoints.organization_member_team_details import OrganizationMemberTeamDetailsEndpoint
 from .endpoints.organization_onboarding_tasks import OrganizationOnboardingTaskEndpoint
 from .endpoints.organization_index import OrganizationIndexEndpoint
-from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_plugins import OrganizationPluginsEndpoint
+from .endpoints.organization_processingissues import OrganizationProcessingIssuesEndpoint
+from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_releases import OrganizationReleasesEndpoint
 from .endpoints.organization_release_details import OrganizationReleaseDetailsEndpoint
 from .endpoints.organization_release_files import OrganizationReleaseFilesEndpoint
@@ -582,6 +583,11 @@ urlpatterns = patterns(
         OrganizationMemberTeamDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-member-team-details'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/processingissues/$',
+        OrganizationProcessingIssuesEndpoint.as_view(),
+        name='sentry-api-0-organization-processing-issues'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/projects/$',
         OrganizationProjectsEndpoint.as_view(),
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index fc8ade2dee..e7d8ec3712 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -59,6 +59,13 @@ class ProcessingIssueManager(BaseManager):
         ReprocessingReport.objects \
             .filter(project_id=project.id).delete()
 
+    def find_resolved_queryset(self, project_ids):
+        from sentry.models import RawEvent
+        return RawEvent.objects.filter(
+            project_id__in=project_ids,
+            eventprocessingissue__isnull=True,
+        )
+
     def find_resolved(self, project_id, limit=100):
         """Returns a list of raw events that generally match the given
         processing issue and no longer have any issues remaining.  Returns
@@ -66,11 +73,7 @@ class ProcessingIssueManager(BaseManager):
         if there are more.
         """
         from sentry.models import RawEvent
-        rv = list(
-            RawEvent.objects.filter(project_id=project_id)
-            .annotate(eventissue_count=Count('eventprocessingissue'))
-            .filter(eventissue_count=0)[:limit]
-        )
+        rv = list(self.find_resolved_queryset([project_id])[:limit])
         if len(rv) > limit:
             rv = rv[:limit]
             has_more = True
diff --git a/tests/sentry/api/endpoints/test_organization_processingissues.py b/tests/sentry/api/endpoints/test_organization_processingissues.py
new file mode 100644
index 0000000000..c2da788383
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_processingissues.py
@@ -0,0 +1,78 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.api.helpers.processing_issues import get_processing_issues
+from sentry.models import (
+    EventError,
+    EventProcessingIssue,
+    ProcessingIssue,
+    RawEvent,
+)
+from sentry.testutils import APITestCase
+
+
+class OrganizationProcessingIssuesTest(APITestCase):
+    endpoint = 'sentry-api-0-organization-processing-issues'
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def team(self):
+        team = self.create_team()
+        self.create_team_membership(team, user=self.user)
+        return team
+
+    @fixture
+    def project(self):
+        return self.create_project(teams=[self.team], name='foo')
+
+    @fixture
+    def other_project(self):
+        return self.create_project(teams=[self.team], name='other')
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        raw_event = RawEvent.objects.create(project_id=self.project.id, event_id='abc')
+
+        issue = ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='abc',
+            type=EventError.NATIVE_MISSING_DSYM,
+        )
+
+        EventProcessingIssue.objects.create(
+            raw_event=raw_event,
+            processing_issue=issue,
+        )
+
+        ProcessingIssue.objects.create(
+            project_id=self.other_project.id,
+            checksum='abc',
+            type=EventError.NATIVE_MISSING_DSYM,
+        )
+        ProcessingIssue.objects.create(
+            project_id=self.other_project.id,
+            checksum='def',
+            type=EventError.NATIVE_MISSING_SYMBOL,
+        )
+
+        expected = get_processing_issues(self.user, [self.project, self.other_project])
+        response = self.get_valid_response(
+            self.project.organization.slug,
+            project=[self.project.id],
+        )
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == expected[0]
+
+        response = self.get_valid_response(
+            self.project.organization.slug,
+            project=[self.project.id, self.other_project.id],
+        )
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert list(sorted(response.data, key=lambda item: item['project'])) == expected
diff --git a/tests/sentry/api/helpers/__init__.py b/tests/sentry/api/helpers/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/api/helpers/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/api/helpers/test_processing_issues.py b/tests/sentry/api/helpers/test_processing_issues.py
new file mode 100644
index 0000000000..ce662fd2e9
--- /dev/null
+++ b/tests/sentry/api/helpers/test_processing_issues.py
@@ -0,0 +1,141 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.api.helpers.processing_issues import get_processing_issues
+from sentry.models import (
+    EventError,
+    EventProcessingIssue,
+    ProcessingIssue,
+    RawEvent,
+    ReprocessingReport,
+)
+from sentry.testutils import TestCase
+
+
+class GetProcessingIssuesTest(TestCase):
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def project(self):
+        return self.create_project(name='foo')
+
+    def test_no_issues(self):
+        result = get_processing_issues(self.user, [self.project])[0]
+        assert not result['hasIssues']
+        assert not result['hasMoreResolveableIssues']
+        assert result['numIssues'] == 0
+        assert result['issuesProcessing'] == 0
+        assert result['resolveableIssues'] == 0
+
+    def test_simple(self):
+        raw_event = RawEvent.objects.create(project_id=self.project.id, event_id='abc')
+
+        issue, _ = ProcessingIssue.objects.get_or_create(
+            project_id=self.project.id,
+            checksum='abc',
+            type=EventError.NATIVE_MISSING_DSYM,
+        )
+
+        EventProcessingIssue.objects.get_or_create(
+            raw_event=raw_event,
+            processing_issue=issue,
+        )
+
+        result = get_processing_issues(self.user, [self.project])[0]
+        assert result['hasIssues']
+        assert not result['hasMoreResolveableIssues']
+        assert result['numIssues'] == 1
+        assert result['issuesProcessing'] == 0
+        assert result['resolveableIssues'] == 0
+
+    def test_full(self):
+        issue = ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='abc',
+            type=EventError.NATIVE_MISSING_DSYM,
+        )
+
+        raw_event = RawEvent.objects.create(project_id=self.project.id, event_id='abc')
+        EventProcessingIssue.objects.create(
+            raw_event=raw_event,
+            processing_issue=issue,
+        )
+        RawEvent.objects.create(project_id=self.project.id, event_id='jkl')
+        ReprocessingReport.objects.create(project=self.project, event_id='abc')
+        ReprocessingReport.objects.create(project=self.project, event_id='def')
+
+        ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='def',
+            type=EventError.NATIVE_INTERNAL_FAILURE,
+        )
+        ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='jkl',
+            type=EventError.NATIVE_MISSING_SYMBOL,
+        )
+
+        result = get_processing_issues(self.user, [self.project])[0]
+        assert result['hasIssues']
+        assert not result['hasMoreResolveableIssues']
+        assert result['numIssues'] == 3
+        assert result['issuesProcessing'] == 2
+        assert result['resolveableIssues'] == 1
+
+    def test_multi_project_full(self):
+        issue = ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='abc',
+            type=EventError.NATIVE_MISSING_DSYM,
+        )
+
+        raw_event = RawEvent.objects.create(project_id=self.project.id, event_id='abc')
+        EventProcessingIssue.objects.create(
+            raw_event=raw_event,
+            processing_issue=issue,
+        )
+        RawEvent.objects.create(project_id=self.project.id, event_id='jkl')
+        ReprocessingReport.objects.create(project=self.project, event_id='abc')
+        ReprocessingReport.objects.create(project=self.project, event_id='def')
+
+        ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='def',
+            type=EventError.NATIVE_INTERNAL_FAILURE,
+        )
+        ProcessingIssue.objects.create(
+            project_id=self.project.id,
+            checksum='jkl',
+            type=EventError.NATIVE_MISSING_SYMBOL,
+        )
+
+        other_project = self.create_project(name='other')
+        ProcessingIssue.objects.create(
+            project_id=other_project.id,
+            checksum='abc',
+            type=EventError.NATIVE_MISSING_DSYM,
+        )
+        ReprocessingReport.objects.create(project=other_project, event_id='abc')
+        RawEvent.objects.create(project_id=other_project.id, event_id='def')
+        RawEvent.objects.create(project_id=other_project.id, event_id='jkl')
+
+        results = get_processing_issues(self.user, [self.project, other_project])
+        assert results[0]['hasIssues']
+        assert not results[0]['hasMoreResolveableIssues']
+        assert results[0]['numIssues'] == 3
+        assert results[0]['issuesProcessing'] == 2
+        assert results[0]['resolveableIssues'] == 1
+        assert results[0]['project'] == self.project.slug
+
+        assert results[1]['hasIssues']
+        assert not results[1]['hasMoreResolveableIssues']
+        assert results[1]['numIssues'] == 1
+        assert results[1]['issuesProcessing'] == 1
+        assert results[1]['resolveableIssues'] == 2
+        assert results[1]['project'] == other_project.slug
