commit e667dc4ef47665426e6b390db5023cb0ed6f42b1
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue May 30 02:43:34 2017 -0700

    auth: don't enforce SSO to owners if no other owners have an identity linked

diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index ad8043f88f..bf4c21d3f5 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -6,6 +6,7 @@ import warnings
 
 from django.conf import settings
 
+from sentry import roles
 from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 
 
@@ -35,6 +36,18 @@ def _sso_params(member):
                 )
             except AuthIdentity.DoesNotExist:
                 sso_is_valid = False
+                # If an owner is trying to gain access,
+                # allow bypassing SSO if there are no other
+                # owners with SSO enabled.
+                if member.role == roles.get_top_dog().id:
+                    requires_sso = AuthIdentity.objects.filter(
+                        auth_provider=auth_provider,
+                        user__in=OrganizationMember.objects.filter(
+                            organization=member.organization_id,
+                            role=roles.get_top_dog().id,
+                            user__is_active=True,
+                        ).exclude(id=member.id).values_list('user_id')
+                    ).exists()
             else:
                 sso_is_valid = auth_identity.is_valid(member)
     return requires_sso, sso_is_valid
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index e507bb3f8f..55fb3c242e 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -4,7 +4,7 @@ from django.contrib.auth.models import AnonymousUser
 from mock import Mock
 
 from sentry.auth import access
-from sentry.models import AuthProvider, Organization
+from sentry.models import AuthProvider, AuthIdentity, Organization
 from sentry.testutils import TestCase
 
 
@@ -17,6 +17,7 @@ class FromUserTest(TestCase):
         result = access.from_user(user, organization)
         assert not result.is_active
         assert result.sso_is_valid
+        assert not result.requires_sso
         assert not result.scopes
         assert not result.has_team_access(team)
         assert not result.has_team_membership(team)
@@ -33,6 +34,7 @@ class FromUserTest(TestCase):
         result = access.from_user(user, organization)
         assert result.is_active
         assert result.sso_is_valid
+        assert not result.requires_sso
         assert result.scopes == member.get_scopes()
         assert result.has_team_access(team)
         assert result.has_team_membership(team)
@@ -52,6 +54,7 @@ class FromUserTest(TestCase):
         result = access.from_user(user, organization)
         assert result.is_active
         assert result.sso_is_valid
+        assert not result.requires_sso
         assert result.scopes == member.get_scopes()
         assert not result.has_team_access(team)
         assert not result.has_team_membership(team)
@@ -71,6 +74,7 @@ class FromUserTest(TestCase):
         result = access.from_user(user, organization)
         assert result.is_active
         assert result.sso_is_valid
+        assert not result.requires_sso
         assert result.scopes == member.get_scopes()
         assert result.has_team_access(team)
         assert not result.has_team_membership(team)
@@ -88,11 +92,29 @@ class FromUserTest(TestCase):
         result = access.from_user(user, organization)
         assert result.is_active
         assert result.sso_is_valid
+        assert not result.requires_sso
         assert result.scopes == member.get_scopes()
         assert result.has_team_access(team)
         assert result.has_team_membership(team)
 
     def test_unlinked_sso(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=user)
+        self.create_team(organization=organization)
+        ap = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        AuthIdentity.objects.create(
+            auth_provider=ap,
+            user=user,
+        )
+
+        result = access.from_user(user, organization)
+        assert not result.sso_is_valid
+        assert result.requires_sso
+
+    def test_unlinked_sso_with_no_owners(self):
         user = self.create_user()
         organization = self.create_organization(owner=user)
         self.create_team(organization=organization)
@@ -103,6 +125,7 @@ class FromUserTest(TestCase):
 
         result = access.from_user(user, organization)
         assert not result.sso_is_valid
+        assert not result.requires_sso
 
     def test_sso_without_link_requirement(self):
         user = self.create_user()
@@ -116,6 +139,7 @@ class FromUserTest(TestCase):
 
         result = access.from_user(user, organization)
         assert result.sso_is_valid
+        assert not result.requires_sso
 
     def test_anonymous_user(self):
         user = self.create_user()
