commit eb2c660d836a4f6ed9f75b0c4da36988472266e3
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jul 19 11:01:11 2018 -0700

    feat(discover): Add arrayjoin if a nested column is present (#9075)
    
    If an exception_stacks.* or exception_frames.* column is selected, add
    the corresponding arrayjoin property. Chooses the first match since we
    can only have one.

diff --git a/src/sentry/api/endpoints/organization_discover.py b/src/sentry/api/endpoints/organization_discover.py
index 7631bfe19f..051f18e23c 100644
--- a/src/sentry/api/endpoints/organization_discover.py
+++ b/src/sentry/api/endpoints/organization_discover.py
@@ -1,18 +1,15 @@
 from __future__ import absolute_import
 
+import re
 from rest_framework import serializers
 from rest_framework.response import Response
 from rest_framework.exceptions import PermissionDenied
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
-
 from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
-
-from sentry import roles
-
-
 from sentry.utils import snuba
+from sentry import roles
 
 
 class OrganizationDiscoverPermission(OrganizationPermission):
@@ -70,6 +67,25 @@ class DiscoverSerializer(serializers.Serializer):
 
         return attrs
 
+    def validate_fields(self, attrs, source):
+        # If we're including exception_stacks.* or exception_frames.* fields
+        # then add arrayjoin value so this gets returned as strings
+        pattern = r"^(exception_stacks|exception_frames)\..+"
+        match = next(
+            (
+                re.search(pattern, field).group(1)
+                for field
+                in attrs[source] or []
+                if re.match(pattern, field)
+            ),
+            None
+        )
+
+        if match:
+            attrs['arrayjoin'] = match
+
+        return attrs
+
     def has_projects_access(self, member, organization, requested_projects):
         has_global_access = roles.get(member.role).is_global
         if has_global_access:
@@ -127,6 +143,7 @@ class OrganizationDiscoverEndpoint(OrganizationEndpoint):
             aggregations=serialized.get('aggregations'),
             rollup=serialized.get('rollup'),
             filter_keys={'project_id': serialized.get('projects')},
+            arrayjoin=serialized.get('arrayjoin'),
         )
 
         return Response(results, status=200)
diff --git a/tests/snuba/test_organization_discover.py b/tests/snuba/test_organization_discover.py
index b163b08122..d92ad795b4 100644
--- a/tests/snuba/test_organization_discover.py
+++ b/tests/snuba/test_organization_discover.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from datetime import datetime, timedelta
 import time
+import uuid
 
 from sentry.testutils import APITestCase
 from django.core.urlresolvers import reverse
@@ -24,21 +25,44 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
         )
 
         events = [{
-            'event_id': 'x' * 32,
-            'primary_hash': '1' * 32,
+            'event_id': uuid.uuid4().hex,
+            'primary_hash': uuid.uuid4().hex,
             'project_id': self.project.id,
             'message': 'message!',
             'platform': 'python',
             'datetime': now.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
             'data': {
                 'received': time.mktime(now.timetuple()),
-            }
+                'exception': {
+                    'values': [
+                        {
+                            'type': 'ValidationError',
+                            'value': 'Bad request',
+                            'mechanism': {
+                                'type': '1',
+                                'value': '1',
+                            },
+                            'stacktrace': {
+                                'frames': [
+                                    {
+                                        'function': '?',
+                                        'filename': 'http://localhost:1337/error.js',
+                                        'lineno': 29,
+                                        'colno': 3,
+                                        'in_app': True
+                                    },
+                                ]
+                            },
+                        }
+                    ]
+                },
+            },
+
         }]
 
         self.snuba_insert(events)
 
     def test(self):
-
         url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
         response = self.client.post(url, {
             'projects': [self.project.id],
@@ -49,7 +73,19 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
         })
 
         assert response.status_code == 200, response.content
-
         assert len(response.data['data']) == 1
         assert response.data['data'][0]['message'] == 'message!'
         assert response.data['data'][0]['platform'] == 'python'
+
+    def test_array_join(self):
+        url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
+        response = self.client.post(url, {
+            'projects': [self.project.id],
+            'fields': ['message', 'exception_stacks.type'],
+            'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+            'end': datetime.now().strftime('%Y-%m-%dT%H:%M:%S'),
+            'orderby': '-timestamp',
+        })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert response.data['data'][0]['exception_stacks.type'] == 'ValidationError'
