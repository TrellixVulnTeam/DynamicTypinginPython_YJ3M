commit 0af1ce0d237a5d56e662d5ef26f693260b2a0e42
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 11 13:34:27 2014 +0900

    Various test fixes

diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 3d96472258..5623cf5805 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -28,15 +28,13 @@ def has_perm(object, user, project_key, access=MEMBER_USER):
 
     if type(object) == Project:
         if project_key:
+            print object == project_key.project, access == MEMBER_USER
             return object == project_key.project and access == MEMBER_USER
 
-        return any(
-            object == o
-            for o in Project.objects.get_for_user(
-                team=object.team,
-                user=user,
-                access=access,
-            )
+        return object in Project.objects.get_for_user(
+            team=object.team,
+            user=user,
+            access=access,
         )
 
     raise TypeError(type(object))
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index e98e99168e..5a7a1c48c0 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -89,12 +89,19 @@ class GroupManager(BaseManager):
 
 class ProjectManager(BaseManager):
     def get_for_user(self, team, user, access=None):
-        """
-        Returns a SortedDict of all projects a user has some level of access to.
-        """
+        from sentry.models import Team
+
         if not (user and user.is_authenticated()):
             return []
 
+        team_list = Team.objects.get_for_user(
+            organization=team.organization,
+            user=user,
+            access=access,
+        )
+        if team not in team_list:
+            return []
+
         base_qs = self.filter(team=team)
 
         project_list = []
diff --git a/tests/sentry/api/endpoints/test_team_details.py b/tests/sentry/api/endpoints/test_team_details.py
index 5f84caf5be..bb855dcffd 100644
--- a/tests/sentry/api/endpoints/test_team_details.py
+++ b/tests/sentry/api/endpoints/test_team_details.py
@@ -1,8 +1,7 @@
 from django.core.urlresolvers import reverse
 from mock import patch
 
-from sentry.constants import MEMBER_ADMIN
-from sentry.models import Team, TeamStatus
+from sentry.models import OrganizationMemberType, Team, TeamStatus
 from sentry.testutils import APITestCase
 
 
@@ -40,44 +39,23 @@ class TeamUpdateTest(APITestCase):
         })
         assert resp.status_code == 400, resp.content
 
-    def test_owner_can_change_owner(self):
-        user = self.create_user('owner@example.com', is_superuser=False)
-        new_user = self.create_user('new-owner@example.com')
-        team = self.create_team(owner=user)
-
-        url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
-
-        self.login_as(user=user)
-
-        resp = self.client.put(url, {
-            'name': 'Test Team',
-            'slug': 'test',
-            'owner': new_user.username,
-        })
-        assert resp.status_code == 200, resp.content
-
-        team = Team.objects.get(name='Test Team')
-        assert team.owner == new_user
-
-        member_set = list(team.member_set.all())
-
-        self.assertEquals(len(member_set), 2)
-        member_set.sort(key=lambda x: x.user_id)
-        member = member_set[0]
-        self.assertEquals(member.user, user)
-        self.assertEquals(member.type, MEMBER_ADMIN)
-        member = member_set[1]
-        self.assertEquals(member.user, new_user)
-        self.assertEquals(member.type, MEMBER_ADMIN)
-
 
 class TeamDeleteTest(APITestCase):
     @patch('sentry.api.endpoints.team_details.delete_team')
-    def test_simple(self, delete_team):
+    def test_as_admin(self, delete_team):
         team = self.create_team()
         project = self.create_project(team=team)  # NOQA
 
-        self.login_as(user=self.user)
+        user = self.create_user(email='foo@example.com', is_superuser=False)
+
+        team.organization.member_set.create_or_update(
+            user=user,
+            defaults={
+                'type': OrganizationMemberType.ADMIN,
+            }
+        )
+
+        self.login_as(user)
 
         url = reverse('sentry-api-0-team-details', kwargs={'team_id': team.id})
 
@@ -107,13 +85,18 @@ class TeamDeleteTest(APITestCase):
 
         assert response.status_code == 403
 
-    def test_as_non_owner(self):
+    def test_as_member(self):
         team = self.create_team(owner=self.user)
         project = self.create_project(team=team)  # NOQA
 
         user = self.create_user(email='foo@example.com', is_superuser=False)
 
-        team.member_set.create(user=user, type=MEMBER_ADMIN)
+        team.organization.member_set.create_or_update(
+            user=user,
+            defaults={
+                'type': OrganizationMemberType.MEMBER,
+            }
+        )
 
         self.login_as(user=user)
 
diff --git a/tests/sentry/api/test_permissions.py b/tests/sentry/api/test_permissions.py
index 0fee245314..f3b77b67ea 100644
--- a/tests/sentry/api/test_permissions.py
+++ b/tests/sentry/api/test_permissions.py
@@ -4,134 +4,81 @@ from __future__ import absolute_import
 
 from sentry.api.permissions import has_perm
 from sentry.constants import MEMBER_USER, MEMBER_ADMIN
+from sentry.models import OrganizationMemberType
 from sentry.testutils import TestCase
 
 
-class TeamPermissionTest(TestCase):
+class BasePermissionTest(TestCase):
+    def setUp(self):
+        super(BasePermissionTest, self).setUp()
+        self.nonmember = self.create_user(is_superuser=False, email='a@example.com')
+        self.admin = self.create_user(is_superuser=False, email='b@example.com')
+        self.member = self.create_user(is_superuser=False, email='c@example.com')
+        self.organization = self.create_organization(owner=self.admin)
+        self.team = self.create_team(organization=self.organization, name='a')
+
+        self.organization.member_set.get_or_create(
+            user=self.member, type=OrganizationMemberType.MEMBER)
+        self.organization.member_set.get_or_create(
+            user=self.admin, type=OrganizationMemberType.ADMIN)
+
+
+class TeamPermissionTest(BasePermissionTest):
     def test_basic_user(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        assert not has_perm(team, user, None, MEMBER_USER)
-        assert not has_perm(team, user, None, MEMBER_ADMIN)
-
-    def test_owner(self):
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        assert has_perm(team, owner, None, MEMBER_USER)
-        assert has_perm(team, owner, None, MEMBER_ADMIN)
-
-    def test_team_member(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        team.member_set.create(user=user, type=MEMBER_USER)
-        assert has_perm(team, user, None, MEMBER_USER)
-        assert not has_perm(team, user, None, MEMBER_ADMIN)
-
-    def test_team_admin(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        team.member_set.create(user=user, type=MEMBER_ADMIN)
-        assert has_perm(team, user, None, MEMBER_USER)
-        assert has_perm(team, user, None, MEMBER_ADMIN)
+        assert not has_perm(self.team, self.nonmember, None, MEMBER_USER)
+        assert not has_perm(self.team, self.nonmember, None, MEMBER_ADMIN)
+
+    def test_admin(self):
+        assert has_perm(self.team, self.admin, None, MEMBER_USER)
+        assert has_perm(self.team, self.admin, None, MEMBER_ADMIN)
+
+    def test_member(self):
+        assert has_perm(self.team, self.member, None, MEMBER_USER)
+        assert not has_perm(self.team, self.member, None, MEMBER_ADMIN)
 
-    def test_project_key(self):
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        key = self.create_project_key(project=project, user=owner)
-        assert has_perm(team, owner, key, MEMBER_USER)
-        assert not has_perm(team, owner, key, MEMBER_ADMIN)
 
+class ProjectPermissionTest(BasePermissionTest):
+    def setUp(self):
+        super(ProjectPermissionTest, self).setUp()
+        self.project = self.create_project(team=self.team, name='a')
+        self.key = self.create_project_key(project=self.project, user=self.member)
 
-class ProjectPermissionTest(TestCase):
     def test_basic_user(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        assert not has_perm(project, user, None, MEMBER_USER)
-        assert not has_perm(project, user, None, MEMBER_ADMIN)
-
-    def test_owner(self):
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        assert has_perm(project, owner, None, MEMBER_USER)
-        assert has_perm(project, owner, None, MEMBER_ADMIN)
-
-    def test_team_member(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        team.member_set.create(user=user, type=MEMBER_USER)
-        assert has_perm(project, user, None, MEMBER_USER)
-        assert not has_perm(project, user, None, MEMBER_ADMIN)
-
-    def test_team_admin(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        team.member_set.create(user=user, type=MEMBER_ADMIN)
-        assert has_perm(project, user, None, MEMBER_USER)
-        assert has_perm(project, user, None, MEMBER_ADMIN)
+        assert not has_perm(self.project, self.nonmember, None, MEMBER_USER)
+        assert not has_perm(self.project, self.nonmember, None, MEMBER_ADMIN)
+
+    def test_admin(self):
+        assert has_perm(self.project, self.admin, None, MEMBER_USER)
+        assert has_perm(self.project, self.admin, None, MEMBER_ADMIN)
+
+    def test_member(self):
+        assert has_perm(self.project, self.member, None, MEMBER_USER)
+        assert not has_perm(self.project, self.member, None, MEMBER_ADMIN)
 
     def test_project_key(self):
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        key = self.create_project_key(project=project, user=owner)
-        assert has_perm(project, owner, key, MEMBER_USER)
-        assert not has_perm(project, owner, key, MEMBER_ADMIN)
+        assert has_perm(self.project, self.member, self.key, MEMBER_USER)
+        assert not has_perm(self.project, self.member, self.key, MEMBER_ADMIN)
+
 
+class GroupPermissionTest(BasePermissionTest):
+    def setUp(self):
+        super(GroupPermissionTest, self).setUp()
+        self.project = self.create_project(team=self.team, name='a')
+        self.key = self.create_project_key(project=self.project, user=self.member)
+        self.group = self.create_group(project=self.project)
 
-class GroupPermissionTest(TestCase):
     def test_basic_user(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        group = self.create_group(project=project)
-        assert not has_perm(group, user, None, MEMBER_USER)
-        assert not has_perm(group, user, None, MEMBER_ADMIN)
-
-    def test_owner(self):
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        group = self.create_group(project=project)
-        assert has_perm(group, owner, None, MEMBER_USER)
-        assert has_perm(group, owner, None, MEMBER_ADMIN)
-
-    def test_team_member(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        team.member_set.create(user=user, type=MEMBER_USER)
-        group = self.create_group(project=project)
-        assert has_perm(group, user, None, MEMBER_USER)
-        assert not has_perm(group, user, None, MEMBER_ADMIN)
-
-    def test_team_admin(self):
-        user = self.create_user(is_superuser=False, email='bar@example.com')
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        team.member_set.create(user=user, type=MEMBER_ADMIN)
-        group = self.create_group(project=project)
-        assert has_perm(group, user, None, MEMBER_USER)
-        assert has_perm(group, user, None, MEMBER_ADMIN)
+        assert not has_perm(self.group, self.nonmember, None, MEMBER_USER)
+        assert not has_perm(self.group, self.nonmember, None, MEMBER_ADMIN)
+
+    def test_admin(self):
+        assert has_perm(self.group, self.admin, None, MEMBER_USER)
+        assert has_perm(self.group, self.admin, None, MEMBER_ADMIN)
+
+    def test_member(self):
+        assert has_perm(self.group, self.member, None, MEMBER_USER)
+        assert not has_perm(self.group, self.member, None, MEMBER_ADMIN)
 
     def test_project_key(self):
-        owner = self.create_user(email='foo@example.com')
-        team = self.create_team(owner=owner)
-        project = self.create_project(team=team)
-        key = self.create_project_key(project=project, user=owner)
-        group = self.create_group(project=project)
-        assert has_perm(group, owner, key, MEMBER_USER)
-        assert not has_perm(group, owner, key, MEMBER_ADMIN)
+        assert has_perm(self.group, self.nonmember, self.key, MEMBER_USER)
+        assert not has_perm(self.group, self.nonmember, self.key, MEMBER_ADMIN)
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 0dc3326350..13a40fcca6 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -19,7 +19,9 @@ class SentryManagerTest(TestCase):
     def test_add_tags(self):
         event = Group.objects.from_kwargs(1, message='rrr')
         group = event.group
-        Group.objects.add_tags(group, tags=(('foo', 'bar'), ('foo', 'baz'), ('biz', 'boz')))
+
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            Group.objects.add_tags(group, tags=(('foo', 'bar'), ('foo', 'baz'), ('biz', 'boz')))
 
         results = list(GroupTagValue.objects.filter(
             group=group, key='foo').order_by('id'))
diff --git a/tests/sentry/models/activity/tests.py b/tests/sentry/models/activity/tests.py
index a57ddb8039..26416ad8dd 100644
--- a/tests/sentry/models/activity/tests.py
+++ b/tests/sentry/models/activity/tests.py
@@ -21,7 +21,8 @@ class SendNotificationTest(TestCase):
 
         self.project.team.member_set.create(user=user_foo)
 
-        activity.send_notification()
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            activity.send_notification()
 
         assert len(mail.outbox) == 1
 
diff --git a/tests/sentry/smtp/tests.py b/tests/sentry/smtp/tests.py
index d23ee35669..6cb3e3735c 100644
--- a/tests/sentry/smtp/tests.py
+++ b/tests/sentry/smtp/tests.py
@@ -18,15 +18,19 @@ class SentrySMTPTest(TestCase):
         self.assertEqual(email_to_group_id(self.mailto), self.group.pk)
 
     def test_process_message(self):
-        self.assertEqual(self.server.process_message('', self.user.email, [self.mailto], fixture), STATUS[200])
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            self.assertEqual(self.server.process_message('', self.user.email, [self.mailto], fixture), STATUS[200])
         self.assertEqual(Activity.objects.filter(type=Activity.NOTE)[0].data, {'text': 'sup'})
 
     def test_process_message_no_recipients(self):
-        self.assertEqual(self.server.process_message('', self.user.email, [], fixture), STATUS[550])
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            self.assertEqual(self.server.process_message('', self.user.email, [], fixture), STATUS[550])
 
     def test_process_message_too_long(self):
-        self.assertEqual(self.server.process_message('', self.user.email, [self.mailto], fixture * 100), STATUS[552])
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            self.assertEqual(self.server.process_message('', self.user.email, [self.mailto], fixture * 100), STATUS[552])
         self.assertEqual(Activity.objects.count(), 0)
 
     def test_process_message_invalid_email(self):
-        self.assertEqual(self.server.process_message('', self.user.email, ['lol@localhost'], fixture), STATUS[550])
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            self.assertEqual(self.server.process_message('', self.user.email, ['lol@localhost'], fixture), STATUS[550])
