commit 8f079e299c3e9b6332bebc42ee9f93e94106f4b8
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Dec 18 15:31:36 2017 -0600

    feat(tags): Pass environment_id down to GroupSerializer to get properâ€¦ (#6752)
    
    * feat(tags): Pass environment_id down to GroupSerializer to get proper user counts

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 78f2de0405..a571ff7c78 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -12,7 +12,7 @@ from sentry import tsdb, tagstore
 from sentry.api import client
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases import GroupEndpoint
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, GroupSerializer
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import (
     Activity,
@@ -174,7 +174,14 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
         :auth: required
         """
         # TODO(dcramer): handle unauthenticated/public response
-        data = serialize(group, request.user)
+        data = serialize(
+            group,
+            request.user,
+            GroupSerializer(
+                environment_id_func=self._get_environment_id_func(
+                    request, group.project.organization_id)
+            )
+        )
 
         # TODO: these probably should be another endpoint
         activity = self._get_activity(request, group, num=100)
@@ -306,7 +313,16 @@ class GroupDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
         # for mutation.
         group = Group.objects.get(id=group.id)
 
-        return Response(serialize(group, request.user), status=response.status_code)
+        serialized = serialize(
+            group,
+            request.user,
+            GroupSerializer(
+                environment_id_func=self._get_environment_id_func(
+                    request, group.project.organization_id)
+            )
+        )
+
+        return Response(serialized, status=response.status_code)
 
     @attach_scenarios([delete_aggregate_scenario])
     def delete(self, request, group):
diff --git a/src/sentry/api/endpoints/issues_resolved_in_release.py b/src/sentry/api/endpoints/issues_resolved_in_release.py
index 90f8cb19c9..4e2d793199 100644
--- a/src/sentry/api/endpoints/issues_resolved_in_release.py
+++ b/src/sentry/api/endpoints/issues_resolved_in_release.py
@@ -2,11 +2,11 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry.api.base import DocSection
+from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.group import StreamGroupSerializer
+from sentry.api.serializers.models.group import GroupSerializer
 from sentry.models import (
     Group,
     GroupLink,
@@ -16,7 +16,7 @@ from sentry.models import (
 )
 
 
-class IssuesResolvedInReleaseEndpoint(ProjectEndpoint):
+class IssuesResolvedInReleaseEndpoint(ProjectEndpoint, EnvironmentMixin):
     doc_section = DocSection.RELEASES
     permission_classes = (ProjectPermission, )
 
@@ -61,5 +61,12 @@ class IssuesResolvedInReleaseEndpoint(ProjectEndpoint):
 
         groups = Group.objects.filter(project=project, id__in=group_ids)
 
-        context = serialize(list(groups), request.user, StreamGroupSerializer(stats_period=None))
+        context = serialize(
+            list(groups),
+            request.user,
+            GroupSerializer(
+                environment_id_func=self._get_environment_id_func(request, project.organization_id)
+            )
+        )
+
         return Response(context)
diff --git a/src/sentry/api/endpoints/organization_activity.py b/src/sentry/api/endpoints/organization_activity.py
index fc169e96b1..a05db491b7 100644
--- a/src/sentry/api/endpoints/organization_activity.py
+++ b/src/sentry/api/endpoints/organization_activity.py
@@ -1,12 +1,13 @@
 from __future__ import absolute_import
 
+from sentry.api.base import EnvironmentMixin
 from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.paginator import DateTimePaginator
 from sentry.api.serializers import serialize, OrganizationActivitySerializer
 from sentry.models import Activity, OrganizationMemberTeam, Project
 
 
-class OrganizationActivityEndpoint(OrganizationMemberEndpoint):
+class OrganizationActivityEndpoint(OrganizationMemberEndpoint, EnvironmentMixin):
     def get(self, request, organization, member):
         queryset = Activity.objects.filter(
             project__in=Project.objects.filter(
@@ -27,5 +28,8 @@ class OrganizationActivityEndpoint(OrganizationMemberEndpoint):
             queryset=queryset,
             paginator_cls=DateTimePaginator,
             order_by='-datetime',
-            on_results=lambda x: serialize(x, request.user, OrganizationActivitySerializer()),
+            on_results=lambda x: serialize(x, request.user, OrganizationActivitySerializer(
+                environment_id_func=self._get_environment_id_func(
+                    request, organization.id)
+            )),
         )
diff --git a/src/sentry/api/endpoints/organization_user_issues.py b/src/sentry/api/endpoints/organization_user_issues.py
index dcc083af98..ed901ba5f1 100644
--- a/src/sentry/api/endpoints/organization_user_issues.py
+++ b/src/sentry/api/endpoints/organization_user_issues.py
@@ -3,13 +3,14 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry import tagstore
+from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.group import TagBasedStreamGroupSerializer
 from sentry.models import (EventUser, Group, Project)
 
 
-class OrganizationUserIssuesEndpoint(OrganizationEndpoint):
+class OrganizationUserIssuesEndpoint(OrganizationEndpoint, EnvironmentMixin):
     def get(self, request, organization, user_id):
         limit = request.GET.get('limit', 100)
 
@@ -48,6 +49,7 @@ class OrganizationUserIssuesEndpoint(OrganizationEndpoint):
             groups, request.user, TagBasedStreamGroupSerializer(
                 stats_period=None,
                 tags=tags,
+                environment_id_func=self._get_environment_id_func(request, organization.id)
             )
         )
 
diff --git a/src/sentry/api/endpoints/organization_user_issues_search.py b/src/sentry/api/endpoints/organization_user_issues_search.py
index c78d2de747..b9514eea7e 100644
--- a/src/sentry/api/endpoints/organization_user_issues_search.py
+++ b/src/sentry/api/endpoints/organization_user_issues_search.py
@@ -3,13 +3,14 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry import tagstore
+from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.group import StreamGroupSerializer
+from sentry.api.serializers.models.group import GroupSerializer
 from sentry.models import (EventUser, Group, OrganizationMemberTeam, Project)
 
 
-class OrganizationUserIssuesSearchEndpoint(OrganizationEndpoint):
+class OrganizationUserIssuesSearchEndpoint(OrganizationEndpoint, EnvironmentMixin):
     def get(self, request, organization):
         email = request.GET.get('email')
 
@@ -42,6 +43,9 @@ class OrganizationUserIssuesSearchEndpoint(OrganizationEndpoint):
             id__in=group_ids,
         ).order_by('-last_seen')[:limit]
 
-        context = serialize(list(groups), request.user, StreamGroupSerializer(stats_period=None))
+        context = serialize(list(groups), request.user, GroupSerializer(
+            environment_id_func=self._get_environment_id_func(
+                request, organization.id)
+        ))
 
         return Response(context)
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 4639adb164..ee16a69199 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -6,7 +6,7 @@ from rest_framework import serializers
 from rest_framework.response import Response
 from uuid import uuid4
 
-from sentry.api.base import DocSection
+from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
@@ -36,7 +36,7 @@ class UserReportSerializer(serializers.ModelSerializer):
         fields = ('name', 'email', 'comments', 'event_id')
 
 
-class ProjectUserReportsEndpoint(ProjectEndpoint):
+class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
     doc_section = DocSection.PROJECTS
 
     def get(self, request, project):
@@ -67,7 +67,10 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
             request=request,
             queryset=queryset,
             order_by='-date_added',
-            on_results=lambda x: serialize(x, request.user, ProjectUserReportSerializer()),
+            on_results=lambda x: serialize(x, request.user, ProjectUserReportSerializer(
+                environment_id_func=self._get_environment_id_func(
+                    request, project.organization_id)
+            )),
             paginator_cls=DateTimePaginator,
         )
 
@@ -133,7 +136,10 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
 
         user_feedback_received.send(project=report.project, group=report.group, sender=self)
 
-        return Response(serialize(report, request.user, ProjectUserReportSerializer()))
+        return Response(serialize(report, request.user, ProjectUserReportSerializer(
+            environment_id_func=self._get_environment_id_func(
+                request, project.organization_id)
+        )))
 
     def find_event_user(self, report):
         try:
diff --git a/src/sentry/api/endpoints/shared_group_details.py b/src/sentry/api/endpoints/shared_group_details.py
index 538a8c9445..3e3720b5b0 100644
--- a/src/sentry/api/endpoints/shared_group_details.py
+++ b/src/sentry/api/endpoints/shared_group_details.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, print_function
 
 from rest_framework.response import Response
 
-from sentry.api.base import Endpoint
+from sentry.api.base import Endpoint, EnvironmentMixin
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import (
     serialize, SharedEventSerializer, SharedGroupSerializer, SharedProjectSerializer
@@ -10,7 +10,7 @@ from sentry.api.serializers import (
 from sentry.models import Group
 
 
-class SharedGroupDetailsEndpoint(Endpoint):
+class SharedGroupDetailsEndpoint(Endpoint, EnvironmentMixin):
     permission_classes = ()
 
     def get(self, request, share_id):
@@ -36,7 +36,14 @@ class SharedGroupDetailsEndpoint(Endpoint):
 
         event = group.get_latest_event()
 
-        context = serialize(group, request.user, SharedGroupSerializer())
+        context = serialize(
+            group,
+            request.user,
+            SharedGroupSerializer(
+                environment_id_func=self._get_environment_id_func(
+                    request, group.project.organization_id)
+            )
+        )
         # TODO(dcramer): move latestEvent/project into SharedGroupSerializer
         context['latestEvent'] = serialize(event, request.user, SharedEventSerializer())
         context['project'] = serialize(group.project, request.user, SharedProjectSerializer())
diff --git a/src/sentry/api/endpoints/team_groups_new.py b/src/sentry/api/endpoints/team_groups_new.py
index 52480c2c48..b2c68526c6 100644
--- a/src/sentry/api/endpoints/team_groups_new.py
+++ b/src/sentry/api/endpoints/team_groups_new.py
@@ -4,12 +4,13 @@ from datetime import timedelta
 from django.utils import timezone
 from rest_framework.response import Response
 
+from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.team import TeamEndpoint
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, GroupSerializer
 from sentry.models import Group, GroupStatus, Project
 
 
-class TeamGroupsNewEndpoint(TeamEndpoint):
+class TeamGroupsNewEndpoint(TeamEndpoint, EnvironmentMixin):
     def get(self, request, team):
         """
         Return a list of the newest groups for a given team.
@@ -41,4 +42,12 @@ class TeamGroupsNewEndpoint(TeamEndpoint):
         for group in group_list:
             group._project_cache = project_dict.get(group.project_id)
 
-        return Response(serialize(group_list, request.user))
+        return Response(
+            serialize(
+                group_list,
+                request.user,
+                GroupSerializer(
+                    environment_id_func=self._get_environment_id_func(request, team.organization_id)
+                )
+            )
+        )
diff --git a/src/sentry/api/endpoints/team_groups_trending.py b/src/sentry/api/endpoints/team_groups_trending.py
index aacef7dab5..efd180db7d 100644
--- a/src/sentry/api/endpoints/team_groups_trending.py
+++ b/src/sentry/api/endpoints/team_groups_trending.py
@@ -4,12 +4,13 @@ from datetime import timedelta
 from django.utils import timezone
 from rest_framework.response import Response
 
+from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.team import TeamEndpoint
-from sentry.api.serializers import serialize
+from sentry.api.serializers import serialize, GroupSerializer
 from sentry.models import Group, GroupStatus, Project
 
 
-class TeamGroupsTrendingEndpoint(TeamEndpoint):
+class TeamGroupsTrendingEndpoint(TeamEndpoint, EnvironmentMixin):
     def get(self, request, team):
         """
         Return a list of the trending groups for a given team.
@@ -41,4 +42,13 @@ class TeamGroupsTrendingEndpoint(TeamEndpoint):
         for group in group_list:
             group._project_cache = project_dict.get(group.project_id)
 
-        return Response(serialize(group_list, request.user))
+        return Response(
+            serialize(
+                group_list,
+                request.user,
+                GroupSerializer(
+                    environment_id_func=self._get_environment_id_func(
+                        request, team.organization_id)
+                )
+            )
+        )
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index 7385ca08a3..ce9583401f 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -10,6 +10,9 @@ from sentry.utils.functional import apply_values
 
 @register(Activity)
 class ActivitySerializer(Serializer):
+    def __init__(self, environment_id_func=None):
+        self.environment_id_func = environment_id_func
+
     def get_attrs(self, item_list, user):
         # TODO(dcramer); assert on relations
         users = {d['id']: d for d in serialize(set(i.user for i in item_list if i.user_id), user)}
@@ -82,6 +85,8 @@ class ActivitySerializer(Serializer):
 
 class OrganizationActivitySerializer(ActivitySerializer):
     def get_attrs(self, item_list, user):
+        from sentry.api.serializers import GroupSerializer
+
         # TODO(dcramer); assert on relations
         attrs = super(OrganizationActivitySerializer, self).get_attrs(
             item_list,
@@ -89,7 +94,11 @@ class OrganizationActivitySerializer(ActivitySerializer):
         )
 
         groups = {
-            d['id']: d for d in serialize(set(i.group for i in item_list if i.group_id), user)
+            d['id']: d for d in serialize(
+                set([i.group for i in item_list if i.group_id]),
+                user,
+                GroupSerializer(environment_id_func=self.environment_id_func)
+            )
         }
 
         projects = {d['id']: d for d in serialize(set(i.project for i in item_list), user)}
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index e4cdd01cf2..2b945ce403 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -144,9 +144,13 @@ class GroupSerializer(Serializer):
             ).select_related('user')
         )
 
-        # TODO(brett): support environment in this serializer
-        user_counts = tagstore.get_groups_user_counts(
-            item_list[0].project_id, [g.id for g in item_list], environment_id=None)
+        try:
+            environment_id = self.environment_id_func()
+        except Environment.DoesNotExist:
+            user_counts = {}
+        else:
+            user_counts = tagstore.get_groups_user_counts(
+                item_list[0].project_id, [g.id for g in item_list], environment_id=environment_id)
 
         ignore_items = {g.group_id: g for g in GroupSnooze.objects.filter(
             group__in=item_list,
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 94ad635f39..09ad4ce338 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -59,10 +59,18 @@ class UserReportSerializer(Serializer):
 
 
 class ProjectUserReportSerializer(UserReportSerializer):
+    def __init__(self, environment_id_func=None):
+        self.environment_id_func = environment_id_func
+
     def get_attrs(self, item_list, user):
+        from sentry.api.serializers import GroupSerializer
+
         # TODO(dcramer); assert on relations
         groups = {
-            d['id']: d for d in serialize(set(i.group for i in item_list if i.group_id), user)
+            d['id']: d for d in serialize(
+                set(i.group for i in item_list if i.group_id),
+                user,
+                GroupSerializer(environment_id_func=self.environment_id_func))
         }
 
         attrs = super(ProjectUserReportSerializer, self).get_attrs(item_list, user)
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index a023d70746..80464d2d43 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -352,22 +352,6 @@ class Group(Model):
                 self._oldest_event = None
         return self._oldest_event
 
-    def get_tags(self):
-        if not hasattr(self, '_tag_cache'):
-            group_tags = set(
-                [gtk.key for gtk in tagstore.get_group_tag_keys(self.project_id, self.id, environment_id=None)])
-
-            results = []
-            for key in group_tags:
-                results.append({
-                    'key': key,
-                    'label': tagstore.get_tag_key_label(key),
-                })
-
-            self._tag_cache = sorted(results, key=lambda x: x['label'])
-
-        return self._tag_cache
-
     def get_first_release(self):
         if self.first_release_id is None:
             return tagstore.get_first_release(self.project_id, self.id)
