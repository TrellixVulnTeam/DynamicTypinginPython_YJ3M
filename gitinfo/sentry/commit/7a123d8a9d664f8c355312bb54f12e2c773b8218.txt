commit 7a123d8a9d664f8c355312bb54f12e2c773b8218
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Wed Jun 15 11:36:32 2016 -0700

    Log mail.queued and mail.sent events with structlog.  (#3442)
    
    * Log mail.queued and mail.sent with structlog.
    
    * Refactor for human and machine format.
    
    * Comments V1
    
    * Hey look you can send mail to no one.
    
    * Comments V2
    
    * Update for using formal LoggingFormat.
    
    * Push the generic type further down.
    
    * comments v3

diff --git a/src/sentry/models/lostpasswordhash.py b/src/sentry/models/lostpasswordhash.py
index a23570f22e..5d7862b151 100644
--- a/src/sentry/models/lostpasswordhash.py
+++ b/src/sentry/models/lostpasswordhash.py
@@ -60,6 +60,7 @@ class LostPasswordHash(Model):
         msg = MessageBuilder(
             subject='%sPassword Recovery' % (options.get('mail.subject-prefix'),),
             template='sentry/emails/recover_account.txt',
+            type='user.password_recovery',
             context=context,
         )
         msg.send_async([self.user.email])
diff --git a/src/sentry/models/organizationaccessrequest.py b/src/sentry/models/organizationaccessrequest.py
index 359c808ae5..3f8efcaa2a 100644
--- a/src/sentry/models/organizationaccessrequest.py
+++ b/src/sentry/models/organizationaccessrequest.py
@@ -48,6 +48,7 @@ class OrganizationAccessRequest(Model):
             subject='Sentry Access Request',
             template='sentry/emails/request-team-access.txt',
             html_template='sentry/emails/request-team-access.html',
+            type='team.access.request',
             context=context,
         )
 
@@ -87,6 +88,7 @@ class OrganizationAccessRequest(Model):
             subject='Sentry Access Request',
             template='sentry/emails/access-approved.txt',
             html_template='sentry/emails/access-approved.html',
+            type='team.access.approved',
             context=context,
         )
 
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index d516cf1177..adb6c39f10 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -7,8 +7,6 @@ sentry.models.organizationmember
 """
 from __future__ import absolute_import, print_function
 
-import logging
-
 from bitfield import BitField
 from django.conf import settings
 from django.core.urlresolvers import reverse
@@ -16,6 +14,7 @@ from django.db import models, transaction
 from django.db.models import F
 from django.utils import timezone
 from hashlib import md5
+from structlog import get_logger
 
 from sentry import roles
 from sentry.db.models import (
@@ -151,13 +150,14 @@ class OrganizationMember(Model):
             subject='Join %s in using Sentry' % self.organization.name,
             template='sentry/emails/member-invite.txt',
             html_template='sentry/emails/member-invite.html',
+            type='organization.invite',
             context=context,
         )
 
         try:
             msg.send_async([self.get_email()])
         except Exception as e:
-            logger = logging.getLogger('sentry.mail.errors')
+            logger = get_logger(name='sentry.mail')
             logger.exception(e)
 
     def send_sso_link_email(self):
@@ -175,6 +175,7 @@ class OrganizationMember(Model):
             subject='Action Required for %s' % (self.organization.name,),
             template='sentry/emails/auth-link-identity.txt',
             html_template='sentry/emails/auth-link-identity.html',
+            type='organization.auth_link',
             context=context,
         )
         msg.send_async([self.get_email()])
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 401c5c3f0e..5938c8131b 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -54,8 +54,9 @@ class MailPlugin(NotificationPlugin):
             return self.subject_prefix
         return options.get('mail.subject-prefix')
 
-    def _build_message(self, project, subject, template=None, html_template=None, body=None,
-                   reference=None, reply_reference=None, headers=None, context=None, send_to=None):
+    def _build_message(self, project, subject, template=None, html_template=None,
+                   body=None, reference=None, reply_reference=None, headers=None,
+                   context=None, send_to=None, type=None):
         if send_to is None:
             send_to = self.get_send_to(project)
         if not send_to:
@@ -72,6 +73,7 @@ class MailPlugin(NotificationPlugin):
             html_template=html_template,
             body=body,
             headers=headers,
+            type=type,
             context=context,
             reference=reference,
             reply_reference=reply_reference,
@@ -195,6 +197,7 @@ class MailPlugin(NotificationPlugin):
                 project=project,
                 reference=group,
                 headers=headers,
+                type='notify.error',
                 context=context,
                 send_to=[user_id],
             )
@@ -232,6 +235,7 @@ class MailPlugin(NotificationPlugin):
                 template='sentry/emails/digests/body.txt',
                 html_template='sentry/emails/digests/body.html',
                 project=project,
+                type='notify.digest',
                 context=context,
                 send_to=[user_id],
             )
@@ -323,6 +327,7 @@ class MailPlugin(NotificationPlugin):
                 project=project,
                 send_to=[user_id],
                 subject=subject,
+                type='notify.activity.{}'.format(template_name),
                 context=context,
                 template='sentry/emails/activity/{}.txt'.format(template_name),
                 html_template='sentry/emails/activity/{}.html'.format(template_name),
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 4f6120fd8e..463fb77a2d 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -7,14 +7,15 @@ sentry.utils.email
 """
 from __future__ import absolute_import
 
-import logging
 import os
 import subprocess
 import tempfile
 import time
 from email.utils import parseaddr
+from functools import partial
 from operator import attrgetter
 from random import randrange
+from structlog import get_logger
 
 from django.conf import settings
 from django.core.mail import get_connection as _get_connection
@@ -27,6 +28,7 @@ from django.utils.encoding import force_bytes, force_str, force_text
 from toronado import from_string as inline_css
 
 from sentry import options
+from sentry.logging import LoggingFormat
 from sentry.models import (
     Activity, Event, Group, GroupEmailThread, Project, User, UserOption
 )
@@ -35,7 +37,10 @@ from sentry.utils.safe import safe_execute
 from sentry.utils.strings import is_valid_dot_atom
 from sentry.web.helpers import render_to_string
 
-logger = logging.getLogger(__name__)
+# The maximum amount of recipients to display in human format.
+MAX_RECIPIENTS = 5
+
+logger = get_logger(name=__name__)
 
 
 class _CaseInsensitiveSigner(Signer):
@@ -229,7 +234,7 @@ make_listid_from_instance = ListResolver(
 class MessageBuilder(object):
     def __init__(self, subject, context=None, template=None, html_template=None,
                  body=None, html_body=None, headers=None, reference=None,
-                 reply_reference=None, from_email=None):
+                 reply_reference=None, from_email=None, type=None):
         assert not (body and template)
         assert not (html_body and html_template)
         assert context or not (template or html_template)
@@ -248,6 +253,7 @@ class MessageBuilder(object):
         self.reply_reference = reply_reference  # The object this message is replying about
         self.from_email = from_email or options.get('mail.from')
         self._send_to = set()
+        self.type = type if type else 'generic'
 
         if reference is not None and 'List-Id' not in headers:
             try:
@@ -342,6 +348,13 @@ class MessageBuilder(object):
             logger.debug('Did not build any messages, no users to send to.')
         return results
 
+    def format_to(self, to):
+        if not to:
+            return ''
+        if len(to) > MAX_RECIPIENTS:
+            to = to[:MAX_RECIPIENTS] + ['and {} more.'.format(len(to[MAX_RECIPIENTS:]))]
+        return ', '.join(to)
+
     def send(self, to=None, bcc=None, fail_silently=False):
         return send_messages(
             self.get_built_messages(to, bcc=bcc),
@@ -350,16 +363,39 @@ class MessageBuilder(object):
 
     def send_async(self, to=None, bcc=None):
         from sentry.tasks.email import send_email
+        fmt = options.get('system.logging-format')
         messages = self.get_built_messages(to, bcc=bcc)
+        log_mail_queued = partial(
+            logger.info,
+            name='sentry.mail',
+            event='mail.queued',
+            type=self.type,
+        )
         for message in messages:
-            safe_execute(send_email.delay, message=message,
-                         _with_transaction=False)
+            safe_execute(
+                send_email.delay,
+                message=message,
+                _with_transaction=False,
+            )
+            logger.bind(message_id=message.extra_headers['Message-Id'])
+            if fmt == LoggingFormat.HUMAN:
+                log_mail_queued(to=self.format_to(to))
+            elif fmt == LoggingFormat.MACHINE:
+                for recipient in to:
+                    log_mail_queued(to=recipient)
 
 
 def send_messages(messages, fail_silently=False):
     connection = get_connection(fail_silently=fail_silently)
+    sent = connection.send_messages(messages)
     metrics.incr('email.sent', len(messages))
-    return connection.send_messages(messages)
+    for message in messages:
+        logger.info(
+            name='sentry.mail',
+            event='mail.sent',
+            message_id=message.extra_headers['Message-Id'],
+        )
+    return sent
 
 
 def get_mail_backend():
