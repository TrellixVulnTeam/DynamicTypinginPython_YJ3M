commit f22e2c0b1389dbed863eafd922c95f7f48f15c3e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Nov 6 09:55:43 2019 -0800

    feat(ui): Add Actions form to Trigger modal [SEN-1125] (#15238)
    
    This adds a panel to add and configure actions inside of a trigger.
    
    Closes SEN-1125

diff --git a/src/sentry/static/sentry/app/components/dropdownButton.jsx b/src/sentry/static/sentry/app/components/dropdownButton.jsx
index 915659c858..b5202f719a 100644
--- a/src/sentry/static/sentry/app/components/dropdownButton.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownButton.jsx
@@ -13,7 +13,7 @@ class DropdownButton extends React.Component {
   render() {
     const {isOpen, showChevron, children, ...otherProps} = this.props;
     return (
-      <StyledButton isOpen={isOpen} {...otherProps}>
+      <StyledButton type="button" isOpen={isOpen} {...otherProps}>
         {children}
         {showChevron && <StyledChevronDown />}
       </StyledButton>
diff --git a/src/sentry/static/sentry/app/components/forms/multiSelectControl.jsx b/src/sentry/static/sentry/app/components/forms/multiSelectControl.jsx
index 7c6d9dc0c0..2cd2c66c7b 100644
--- a/src/sentry/static/sentry/app/components/forms/multiSelectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/multiSelectControl.jsx
@@ -2,8 +2,6 @@ import React from 'react';
 
 import SelectControl from 'app/components/forms/selectControl';
 
-export default class MultiSelectControl extends React.Component {
-  render() {
-    return <SelectControl {...this.props} multiple />;
-  }
-}
+export default React.forwardRef(function MultiSelectControl(props, ref) {
+  return <SelectControl forwardedRef={ref} {...props} multiple />;
+});
diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index 4eab74f5fb..d13dac9a69 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -103,7 +103,7 @@ SelectPicker.propTypes = {
   forwardedRef: PropTypes.any,
 };
 
-const forwardRef = (props, ref) => <SelectPicker {...props} forwardedRef={ref} />;
+const forwardRef = (props, ref) => <SelectPicker forwardedRef={ref} {...props} />;
 forwardRef.displayName = 'SelectPicker';
 
 const StyledSelect = styled(React.forwardRef(forwardRef))`
diff --git a/src/sentry/static/sentry/app/components/selectMembers/index.tsx b/src/sentry/static/sentry/app/components/selectMembers/index.tsx
new file mode 100644
index 0000000000..8b94dd1f8e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/selectMembers/index.tsx
@@ -0,0 +1,359 @@
+import {debounce} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Client} from 'app/api';
+import {Member, Organization, Project, Team, User} from 'app/types';
+import {addTeamToProject} from 'app/actionCreators/projects';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import IdBadge from 'app/components/idBadge';
+import InlineSvg from 'app/components/inlineSvg';
+import MemberListStore from 'app/stores/memberListStore';
+import SelectControl from 'app/components/forms/selectControl';
+import ProjectsStore from 'app/stores/projectsStore';
+import SentryTypes from 'app/sentryTypes';
+import TeamStore from 'app/stores/teamStore';
+import Tooltip from 'app/components/tooltip';
+import withApi from 'app/utils/withApi';
+
+const getSearchKeyForUser = user =>
+  `${user.email && user.email.toLowerCase()} ${user.name && user.name.toLowerCase()}`;
+
+type Actor<T> = {
+  type: T;
+  id: string;
+  name: string;
+};
+
+type Mentionable<T> = {
+  value: string;
+  label: React.ReactElement;
+  searchKey: string;
+  actor: Actor<T>;
+};
+
+type Unmentionable = {
+  disabled: boolean;
+  label: React.ReactElement;
+};
+
+type MentionableTeam = Mentionable<'team'>;
+type UnmentionableTeam = MentionableTeam & Unmentionable;
+type MentionableUser = Mentionable<'user'>;
+type UnmentionableUser = MentionableUser & Unmentionable;
+
+type Props = {
+  api: Client;
+  project?: Project;
+  organization: Organization;
+  value: any;
+  showTeam: boolean;
+  onChange: (value: any) => any;
+  onInputChange?: (value: any) => any;
+  disabled?: boolean;
+  placeholder?: string;
+};
+
+/**
+ * A component that allows you to select either members and/or teams
+ */
+class SelectMembers extends React.Component<Props> {
+  static propTypes = {
+    project: SentryTypes.Project,
+    organization: SentryTypes.Organization,
+    value: PropTypes.string,
+    onChange: PropTypes.func.isRequired,
+    onInputChange: PropTypes.func,
+    disabled: PropTypes.bool,
+  };
+
+  state = {
+    loading: false,
+    inputValue: '',
+  };
+
+  componentWillUnmount() {
+    if (this.projectsStoreUnlisten) {
+      this.projectsStoreUnlisten();
+    }
+  }
+
+  selectRef = React.createRef<typeof SelectControl>();
+
+  // See comments in `handleAddTeamToProject` for why we close the menu this way
+  projectsStoreUnlisten = ProjectsStore.listen(() => {
+    this.closeSelectMenu();
+  });
+
+  renderUserBadge = (user: User) => {
+    return <IdBadge avatarSize={24} user={user} hideEmail useLink={false} />;
+  };
+
+  createMentionableUser = user => {
+    return {
+      value: user.id,
+      label: this.renderUserBadge(user),
+      searchKey: getSearchKeyForUser(user),
+      actor: {
+        type: 'user',
+        id: user.id,
+        name: user.name,
+      },
+    };
+  };
+
+  createUnmentionableUser = ({user}) => {
+    return {
+      ...this.createMentionableUser(user),
+      disabled: true,
+      label: (
+        <DisabledLabel>
+          <Tooltip
+            position="left"
+            title={t('%s is not a member of project', user.name || user.email)}
+          >
+            {this.renderUserBadge(user)}
+          </Tooltip>
+        </DisabledLabel>
+      ),
+    };
+  };
+
+  createMentionableTeam = (team: Team): MentionableTeam => {
+    return {
+      value: team.id,
+      label: <IdBadge team={team} />,
+      searchKey: `#${team.slug}`,
+      actor: {
+        type: 'team',
+        id: team.id,
+        name: team.slug,
+      },
+    };
+  };
+
+  createUnmentionableTeam = (team: Team): UnmentionableTeam => {
+    const {organization} = this.props;
+    const canAddTeam = organization.access.includes('project:write');
+
+    return {
+      ...this.createMentionableTeam(team),
+      disabled: true,
+      label: (
+        <UnmentionableTeam>
+          <DisabledLabel>
+            <Tooltip
+              position="left"
+              title={t('%s is not a member of project', `#${team.slug}`)}
+            >
+              <IdBadge team={team} />
+            </Tooltip>
+          </DisabledLabel>
+          <Tooltip
+            title={
+              canAddTeam
+                ? t('Add %s to project', `#${team.slug}`)
+                : t('You do not have permission to add team to project.')
+            }
+          >
+            <AddToProjectButton
+              size="zero"
+              borderless
+              disabled={!canAddTeam}
+              onClick={this.handleAddTeamToProject.bind(this, team)}
+            >
+              <InlineSvg src="icon-circle-add" />
+            </AddToProjectButton>
+          </Tooltip>
+        </UnmentionableTeam>
+      ),
+    };
+  };
+
+  getMentionableUsers() {
+    return MemberListStore.getAll().map(this.createMentionableUser);
+  }
+
+  getMentionableTeams(): MentionableTeam[] {
+    const {project} = this.props;
+    const projectData = project && ProjectsStore.getBySlug(project.slug);
+
+    if (!projectData) {
+      return [];
+    }
+
+    return projectData.teams.map(this.createMentionableTeam);
+  }
+
+  /**
+   * Get list of teams that are not in the current project, for use in `MultiSelectMenu`
+   *
+   * @param {Team[]} teamsInProject A list of teams that are in the current project
+   */
+  getTeamsNotInProject(teamsInProject: MentionableTeam[] = []): UnmentionableTeam[] {
+    const teams: Team[] = TeamStore.getAll() || [];
+    const excludedTeamIds = teamsInProject.map(({actor}) => actor.id);
+
+    return teams
+      .filter(team => excludedTeamIds.indexOf(team.id) === -1)
+      .map(this.createUnmentionableTeam);
+  }
+
+  /**
+   * Closes the select menu by blurring input if possible since that seems to be the only
+   * way to close it.
+   */
+  closeSelectMenu() {
+    if (!this.selectRef.current) {
+      return;
+    }
+
+    const select = this.selectRef.current.select;
+    const input: HTMLInputElement = select.input.input;
+    if (input) {
+      // I don't think there's another way to close `react-select`
+      input.blur();
+    }
+  }
+
+  async handleAddTeamToProject(team) {
+    const {api, organization, project, value} = this.props;
+
+    // Copy old value
+    const oldValue = [...value];
+
+    // Optimistic update
+    this.props.onChange(this.createMentionableTeam(team));
+
+    try {
+      // Try to add team to project
+      // Note: we can't close select menu here because we have to wait for ProjectsStore to update first
+      // The reason for this is because we have little control over `react-select`'s `AsyncSelect`
+      // We can't control when `handleLoadOptions` gets called, but it gets called when select closes, so
+      // wait for store to update before closing the menu. Otherwise, we'll have stale items in the select menu
+      if (project) {
+        await addTeamToProject(api, organization.slug, project.slug, team);
+      }
+    } catch (err) {
+      // Unable to add team to project, revert select menu value
+      this.props.onChange(oldValue);
+      this.closeSelectMenu();
+    }
+  }
+
+  handleChange = newValue => {
+    this.props.onChange(newValue);
+  };
+
+  handleInputChange = inputValue => {
+    this.setState({inputValue});
+
+    if (this.props.onInputChange) {
+      this.props.onInputChange(inputValue);
+    }
+  };
+
+  queryMembers = debounce((query, cb) => {
+    const {api, organization} = this.props;
+
+    // Because this function is debounced, the component can potentially be
+    // unmounted before this fires, in which case, `api` is null
+    if (!api) {
+      return null;
+    }
+
+    return api
+      .requestPromise(`/organizations/${organization.slug}/members/`, {
+        query: {query},
+      })
+      .then((data: Member[]) => cb(null, data), err => cb(err));
+  }, 250);
+
+  handleLoadOptions = (): Promise<{options: any[]}> => {
+    const usersInProject = this.getMentionableUsers();
+    const teamsInProject = this.getMentionableTeams();
+    const teamsNotInProject = this.getTeamsNotInProject(teamsInProject);
+    const usersInProjectById = usersInProject.map(({actor}) => actor.id);
+
+    if (this.props.showTeam) {
+      return Promise.resolve({
+        options: [...teamsInProject, ...teamsNotInProject],
+      });
+    }
+
+    // Return a promise for `react-select`
+    return new Promise((resolve, reject) => {
+      this.queryMembers(this.state.inputValue, (err, result) => {
+        if (err) {
+          reject(err);
+        } else {
+          resolve(result);
+        }
+      });
+    })
+      .then(members => {
+        // Be careful here as we actually want the `users` object, otherwise it means user
+        // has not registered for sentry yet, but has been invited
+        return (members
+          ? (members as Member[])
+              .filter(({user}) => user && usersInProjectById.indexOf(user.id) === -1)
+              .map(this.createUnmentionableUser)
+          : []) as UnmentionableUser[];
+      })
+      .then((members: UnmentionableUser[]) => {
+        return {
+          options: [...usersInProject, ...members],
+        };
+      });
+  };
+
+  render() {
+    const {placeholder} = this.props;
+
+    return (
+      <StyledSelectControl
+        innerRef={this.selectRef}
+        filterOptions={(options, filterText) =>
+          options.filter(({searchKey}) => searchKey.indexOf(filterText) > -1)
+        }
+        loadOptions={this.handleLoadOptions}
+        defaultOptions
+        async
+        disabled={this.props.disabled}
+        cache={false}
+        placeholder={placeholder}
+        onInputChange={this.handleInputChange}
+        onChange={this.handleChange}
+        value={this.props.value}
+      />
+    );
+  }
+}
+
+const DisabledLabel = styled('div')`
+  opacity: 0.5;
+  overflow: hidden; /* Needed so that "Add to team" button can fit */
+`;
+
+const AddToProjectButton = styled(Button)`
+  flex-shrink: 0;
+`;
+
+const UnmentionableTeam = styled('div')`
+  display: flex;
+  justify-content: space-between;
+`;
+
+const StyledSelectControl = styled(SelectControl)`
+  .Select-value {
+    display: flex;
+    align-items: center;
+  }
+  .Select-input {
+    margin-left: 32px;
+  }
+`;
+
+export default withApi(SelectMembers);
diff --git a/src/sentry/static/sentry/app/components/selectMembers/valueComponent.tsx b/src/sentry/static/sentry/app/components/selectMembers/valueComponent.tsx
new file mode 100644
index 0000000000..1cd61f94e6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/selectMembers/valueComponent.tsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+import ActorAvatar from 'app/components/avatar/actorAvatar';
+
+type Value = {
+  actor: {};
+};
+
+type Props = {
+  value: Value;
+  onRemove: (value: Value) => void;
+};
+
+export default class ValueComponent extends React.Component<Props> {
+  handleClick = () => {
+    this.props.onRemove(this.props.value);
+  };
+
+  render() {
+    return (
+      <a onClick={this.handleClick}>
+        <ActorAvatar actor={this.props.value.actor} size={28} />
+      </a>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx
new file mode 100644
index 0000000000..c095261d45
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/actionsPanel/index.tsx
@@ -0,0 +1,144 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {
+  IncidentRule,
+  Trigger,
+  Action,
+  ActionType,
+  TargetType,
+} from 'app/views/settings/incidentRules/types';
+import {Organization, Project} from 'app/types';
+import {Panel, PanelBody, PanelItem, PanelHeader} from 'app/components/panels';
+import {t} from 'app/locale';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import SelectControl from 'app/components/forms/selectControl';
+import SelectMembers from 'app/components/selectMembers';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = {
+  organization: Organization;
+  projects: Project[];
+  rule: IncidentRule;
+  loading: boolean;
+  error: boolean;
+
+  actions: Action[];
+  className?: string;
+  trigger?: Trigger;
+  onAdd: (type: Action['type']) => void;
+  onChange: (index: number, action: Action) => void;
+};
+
+const ActionLabel = {
+  [ActionType.EMAIL]: t('E-mail'),
+  [ActionType.SLACK]: t('Slack'),
+  [ActionType.PAGER_DUTY]: t('Pagerduty'),
+};
+
+const TargetLabel = {
+  [TargetType.USER]: t('Member'),
+  [TargetType.TEAM]: t('Team'),
+};
+
+class ActionsPanel extends React.Component<Props> {
+  handleAddAction = (value: {label: string; value: Action['type']}) => {
+    this.props.onAdd(value.value);
+  };
+
+  handleChangeTarget = (index: number, value) => {
+    const {actions} = this.props;
+    const newAction = {
+      ...actions[index],
+      targetType: Number(value.value),
+      targetIdentifier: '',
+    };
+
+    this.props.onChange(index, newAction);
+  };
+
+  handleChangeTargetIdentifier = (index, value) => {
+    const {actions} = this.props;
+    const newAction = {
+      ...actions[index],
+      targetIdentifier: value.value,
+    };
+
+    this.props.onChange(index, newAction);
+  };
+
+  render() {
+    const {actions, className, loading, organization, projects, rule} = this.props;
+
+    const items = Object.entries(ActionLabel).map(([value, label]) => ({value, label}));
+
+    return (
+      <Panel className={className}>
+        <PanelHeader hasButtons>
+          <div>{t('Actions')}</div>
+          <DropdownAutoComplete
+            blendCorner
+            hideInput
+            onSelect={this.handleAddAction}
+            items={items}
+          >
+            {() => <DropdownButton size="small">{t('Add Action')}</DropdownButton>}
+          </DropdownAutoComplete>
+        </PanelHeader>
+        <PanelBody>
+          {loading && <LoadingIndicator />}
+          {!loading && !actions.length && (
+            <EmptyMessage>{t('No Actions have been added')}</EmptyMessage>
+          )}
+          {actions.map((action: Action, i: number) => {
+            const isUser = action.targetType === TargetType.USER;
+            const isTeam = action.targetType === TargetType.TEAM;
+
+            return (
+              <PanelItemGrid key={i}>
+                {ActionLabel[action.type]}
+
+                <SelectControl
+                  value={action.targetType}
+                  options={Object.entries(TargetLabel).map(([value, label]) => ({
+                    value,
+                    label,
+                  }))}
+                  onChange={this.handleChangeTarget.bind(this, i)}
+                />
+
+                {(isUser || isTeam) && (
+                  <SelectMembers
+                    key={isTeam ? 'team' : 'member'}
+                    showTeam={isTeam}
+                    project={projects.find(({slug}) => slug === rule.projects[0])}
+                    organization={organization}
+                    value={action.targetIdentifier}
+                    onChange={this.handleChangeTargetIdentifier.bind(this, i)}
+                  />
+                )}
+              </PanelItemGrid>
+            );
+          })}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+const ActionsPanelWithSpace = styled(ActionsPanel)`
+  margin-top: ${space(4)};
+`;
+
+const PanelItemGrid = styled(PanelItem)`
+  display: grid;
+  grid-template-columns: 1fr 1fr 1fr;
+  align-items: center;
+  grid-gap: ${space(2)};
+`;
+
+export default withOrganization(ActionsPanelWithSpace);
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/constants.tsx
new file mode 100644
index 0000000000..1ecd44890d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/constants.tsx
@@ -0,0 +1,5 @@
+export enum Action {
+  EMAIL,
+  SLACK,
+  PAGER_DUTY,
+}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
index 3ae52125ed..bfb935f8fd 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/form.tsx
@@ -5,20 +5,25 @@ import React from 'react';
 import {Client} from 'app/api';
 import {Config, Organization, Project} from 'app/types';
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {fetchOrgMembers} from 'app/actionCreators/members';
+import {replaceAtArrayIndex} from 'app/utils/replaceAtArrayIndex';
 import {t} from 'app/locale';
+import ActionsPanel from 'app/views/settings/incidentRules/triggers/actionsPanel';
+import AsyncComponent from 'app/components/asyncComponent';
 import Form from 'app/views/settings/components/forms/form';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 
-import TriggersChart from './chart';
-
 import {
   AlertRuleThreshold,
   AlertRuleThresholdType,
   IncidentRule,
   Trigger,
+  Action,
+  TargetType,
 } from '../types';
+import TriggersChart from './chart';
 
 type AlertRuleThresholdKey = {
   [AlertRuleThreshold.INCIDENT]: 'alertThreshold';
@@ -200,101 +205,218 @@ class TriggerForm extends React.Component<Props, State> {
     const {alertThreshold, resolveThreshold, isInverted} = this.state;
 
     return (
-      <React.Fragment>
-        <JsonForm
-          renderHeader={() => (
-            <TriggersChart
-              api={api}
-              config={config}
-              organization={organization}
-              projects={projects}
-              rule={rule}
-              isInverted={isInverted}
-              alertThreshold={alertThreshold}
-              resolveThreshold={resolveThreshold}
-              timeWindow={rule.timeWindow}
-              onChangeIncidentThreshold={this.handleChangeIncidentThreshold}
-              onChangeResolutionThreshold={this.handleChangeResolutionThreshold}
-            />
-          )}
-          fields={[
-            {
-              name: 'label',
-              type: 'text',
-              label: t('Label'),
-              help: t('This will prefix alerts created by this trigger'),
-              placeholder: t('SEV-0'),
-              required: true,
-            },
-            {
-              name: 'alertThreshold',
-              type: 'range',
-              label: t('Incident Boundary'),
-              help: !isInverted
-                ? t('Anything trending above this limit will trigger an Incident')
-                : t('Anything trending below this limit will trigger an Incident'),
-              onChange: this.handleChangeIncidentThresholdInput,
-              showCustomInput: true,
-              required: true,
-              min: 1,
-            },
-            {
-              name: 'resolveThreshold',
-              type: 'range',
-              label: t('Resolution Boundary'),
-              help: !isInverted
-                ? t('Anything trending below this limit will resolve an Incident')
-                : t('Anything trending above this limit will resolve an Incident'),
-              onChange: this.handleChangeResolutionThresholdInput,
-              showCustomInput: true,
-              placeholder: resolveThreshold === null ? t('Off') : '',
-              min: 1,
-            },
-            {
-              name: 'thresholdType',
-              type: 'boolean',
-              label: t('Reverse the Boundaries'),
-              defaultValue: AlertRuleThresholdType.ABOVE,
-              help: t('This is a metric that needs to stay above a certain threshold'),
-              onChange: this.handleChangeThresholdType,
-            },
-          ]}
-        />
-      </React.Fragment>
+      <JsonForm
+        renderHeader={() => (
+          <TriggersChart
+            api={api}
+            config={config}
+            organization={organization}
+            projects={projects}
+            rule={rule}
+            isInverted={isInverted}
+            alertThreshold={alertThreshold}
+            resolveThreshold={resolveThreshold}
+            timeWindow={rule.timeWindow}
+            onChangeIncidentThreshold={this.handleChangeIncidentThreshold}
+            onChangeResolutionThreshold={this.handleChangeResolutionThreshold}
+          />
+        )}
+        fields={[
+          {
+            name: 'label',
+            type: 'text',
+            label: t('Label'),
+            help: t('This will prefix alerts created by this trigger'),
+            placeholder: t('SEV-0'),
+            required: true,
+          },
+          {
+            name: 'alertThreshold',
+            type: 'range',
+            label: t('Incident Boundary'),
+            help: !isInverted
+              ? t('Anything trending above this limit will trigger an Incident')
+              : t('Anything trending below this limit will trigger an Incident'),
+            onChange: this.handleChangeIncidentThresholdInput,
+            showCustomInput: true,
+            required: true,
+            min: 1,
+          },
+          {
+            name: 'resolveThreshold',
+            type: 'range',
+            label: t('Resolution Boundary'),
+            help: !isInverted
+              ? t('Anything trending below this limit will resolve an Incident')
+              : t('Anything trending above this limit will resolve an Incident'),
+            onChange: this.handleChangeResolutionThresholdInput,
+            showCustomInput: true,
+            placeholder: resolveThreshold === null ? t('Off') : '',
+            min: 1,
+          },
+          {
+            name: 'thresholdType',
+            type: 'boolean',
+            label: t('Reverse the Boundaries'),
+            defaultValue: AlertRuleThresholdType.ABOVE,
+            help: t('This is a metric that needs to stay above a certain threshold'),
+            onChange: this.handleChangeThresholdType,
+          },
+        ]}
+      />
     );
   }
 }
 
 type TriggerFormContainerProps = {
   orgId: string;
+  organization: Organization;
+  projects: Project[];
 } & React.ComponentProps<typeof TriggerForm> & {
     onSubmitSuccess?: Form['props']['onSubmitSuccess'];
   };
 
-function TriggerFormContainer({
-  orgId,
-  onSubmitSuccess,
-  rule,
-  trigger,
-  ...props
-}: TriggerFormContainerProps) {
-  return (
-    <Form
-      apiMethod={trigger ? 'PUT' : 'POST'}
-      apiEndpoint={`/organizations/${orgId}/alert-rules/${rule.id}/triggers/${
-        trigger ? `${trigger.id}/` : ''
-      }`}
-      initialData={{
-        thresholdType: AlertRuleThresholdType.ABOVE,
-        ...trigger,
-      }}
-      saveOnBlur={false}
-      onSubmitSuccess={onSubmitSuccess}
-      submitLabel={trigger ? t('Update Trigger') : t('Create Trigger')}
-    >
-      <TriggerForm rule={rule} trigger={trigger} {...props} />
-    </Form>
-  );
+type TriggerFormContainerState = {
+  actions: Action[];
+};
+
+class TriggerFormContainer extends AsyncComponent<
+  TriggerFormContainerProps & AsyncComponent['props'],
+  TriggerFormContainerState & AsyncComponent['state']
+> {
+  constructor(props, context) {
+    super(props, context);
+    this.state = {
+      ...this.state,
+      actions: [],
+    };
+  }
+
+  componentDidMount() {
+    const {orgId} = this.props;
+
+    fetchOrgMembers(this.api, orgId);
+  }
+
+  getEndpoints(): [string, string][] {
+    const {orgId, rule, trigger} = this.props;
+
+    if (!trigger) {
+      return [];
+    }
+
+    return [
+      [
+        'actions',
+        `/organizations/${orgId}/alert-rules/${rule.id}/triggers/${trigger.id}/actions/`,
+      ],
+    ];
+  }
+
+  handleAddAction = (value: Action['type']) => {
+    this.setState(state => ({
+      ...state,
+      actions: [
+        ...state.actions,
+        {
+          type: value,
+          targetType: TargetType.USER,
+          targetIdentifier: null,
+        },
+      ],
+    }));
+  };
+
+  handleChangeAction = (index: number, action: Action): void => {
+    const {api, orgId, rule, trigger} = this.props;
+    this.setState(state => {
+      addOrUpdateAction(api, orgId, rule, action, trigger);
+
+      return {
+        actions: replaceAtArrayIndex(state.actions, index, action),
+      };
+    });
+  };
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderBody() {
+    const {
+      orgId,
+      onSubmitSuccess,
+      rule,
+      trigger,
+      organization,
+      projects,
+      ...props
+    } = this.props;
+
+    return (
+      <Form
+        apiMethod={trigger ? 'PUT' : 'POST'}
+        apiEndpoint={`/organizations/${orgId}/alert-rules/${rule.id}/triggers/${
+          trigger ? `${trigger.id}/` : ''
+        }`}
+        initialData={{
+          thresholdType: AlertRuleThresholdType.ABOVE,
+          ...trigger,
+        }}
+        saveOnBlur={false}
+        onSubmitSuccess={onSubmitSuccess}
+        submitLabel={trigger ? t('Update Trigger') : t('Create Trigger')}
+      >
+        <TriggerForm
+          rule={rule}
+          trigger={trigger}
+          organization={organization}
+          projects={projects}
+          {...props}
+        />
+        <ActionsPanel
+          loading={this.state.loading}
+          error={this.state.error}
+          organization={organization}
+          projects={projects}
+          rule={rule}
+          trigger={trigger}
+          actions={this.state.actions}
+          onChange={this.handleChangeAction}
+          onAdd={this.handleAddAction}
+        />
+      </Form>
+    );
+  }
 }
 
 export default withConfig(withApi(TriggerFormContainer));
+
+function addOrUpdateAction(
+  api: Client,
+  orgId: string,
+  rule: IncidentRule,
+  action: Action,
+  trigger?: Trigger
+): Promise<any> {
+  // Don't do anything if we are not editing
+  if (!trigger) {
+    return Promise.resolve(null);
+  }
+
+  if (!action.targetIdentifier || typeof action.targetType === 'undefined') {
+    return Promise.resolve(null);
+  }
+
+  const method = action.id ? 'PUT' : 'POST';
+
+  return api.requestPromise(
+    `/organizations/${orgId}/alert-rules/${rule.id}/triggers/${trigger.id}/actions/${
+      action.id ? `${action.id}/` : ''
+    }`,
+    {
+      method,
+      data: action,
+    }
+  );
+}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index 9dd6b455f0..6cc343f32c 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -20,6 +20,7 @@ export type UnsavedTrigger = {
   alertThreshold: number;
   resolveThreshold: number;
   timeWindow: number;
+  actions: Action[];
 };
 
 export type SavedTrigger = UnsavedTrigger & {
@@ -59,3 +60,30 @@ export type ProjectSelectOption = {
   label: string;
   value: number;
 };
+
+export enum ActionType {
+  EMAIL = 0,
+  SLACK = 1,
+  PAGER_DUTY = 2,
+}
+
+export enum TargetType {
+  // The name can be customized for each integration. Email for email, channel for slack, service for Pagerduty). We probably won't support this for email at first, since we need to be careful not to enable spam
+  SPECIFIC = 0,
+
+  // Just works with email for now, grabs given user's email address
+  USER = 1,
+
+  // Just works with email for now, grabs the emails for all team members
+  TEAM = 2,
+}
+
+export type Action = {
+  id?: string;
+  type: ActionType;
+
+  targetType: TargetType;
+
+  // How to identify the target. Can be email, slack channel, pagerduty service, user_id, team_id, etc
+  targetIdentifier: string | null;
+};
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 6ed96e8210..1ed7f56e34 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -200,11 +200,13 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                         <StyledButton
                                           isOpen={false}
                                           size="xsmall"
+                                          type="button"
                                         >
                                           <ForwardRef
                                             className="css-a2adl3-StyledButton e1yghndz1"
                                             isOpen={false}
                                             size="xsmall"
+                                            type="button"
                                           >
                                             <Button
                                               align="center"
@@ -212,6 +214,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                               disabled={false}
                                               innerRef={null}
                                               size="xsmall"
+                                              type="button"
                                             >
                                               <StyledButton
                                                 aria-disabled={false}
@@ -221,6 +224,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                                 onClick={[Function]}
                                                 role="button"
                                                 size="xsmall"
+                                                type="button"
                                               >
                                                 <ForwardRef
                                                   aria-disabled={false}
@@ -229,6 +233,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                                   onClick={[Function]}
                                                   role="button"
                                                   size="xsmall"
+                                                  type="button"
                                                 >
                                                   <button
                                                     aria-disabled={false}
@@ -236,6 +241,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                                     onClick={[Function]}
                                                     role="button"
                                                     size="xsmall"
+                                                    type="button"
                                                   >
                                                     <ButtonLabel
                                                       align="center"
diff --git a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
index 2fb45cfba4..c5de976237 100644
--- a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
@@ -577,7 +577,7 @@ exports[`Project Ownership Input renders 1`] = `
                 }
                 value={Array []}
               >
-                <MultiSelectControl
+                <ForwardRef(MultiSelectControl)
                   async={true}
                   cache={false}
                   className="css-1domaf0"
@@ -598,6 +598,7 @@ exports[`Project Ownership Input renders 1`] = `
                     clearable={true}
                     defaultOptions={true}
                     filterOptions={[Function]}
+                    forwardedRef={[Function]}
                     height={36}
                     loadOptions={[Function]}
                     multiple={true}
@@ -617,6 +618,7 @@ exports[`Project Ownership Input renders 1`] = `
                       defaultOptions={true}
                       deleteRemoves={true}
                       filterOptions={[Function]}
+                      forwardedRef={[Function]}
                       height={36}
                       loadOptions={[Function]}
                       multi={true}
@@ -637,6 +639,7 @@ exports[`Project Ownership Input renders 1`] = `
                         defaultOptions={true}
                         deleteRemoves={true}
                         filterOptions={[Function]}
+                        forwardedRef={[Function]}
                         height={36}
                         loadOptions={[Function]}
                         multi={true}
@@ -657,7 +660,7 @@ exports[`Project Ownership Input renders 1`] = `
                           defaultOptions={true}
                           deleteRemoves={true}
                           filterOptions={[Function]}
-                          forwardedRef={null}
+                          forwardedRef={[Function]}
                           height={36}
                           loadOptions={[Function]}
                           multi={true}
@@ -852,7 +855,7 @@ exports[`Project Ownership Input renders 1`] = `
                       </ForwardRef(SelectPicker)>
                     </StyledSelect>
                   </SelectControl>
-                </MultiSelectControl>
+                </ForwardRef(MultiSelectControl)>
               </SelectOwners>
             </div>
           </Base>
diff --git a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
index 0dd5adf5da..948e5c64fd 100644
--- a/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ruleBuilder.spec.jsx.snap
@@ -558,7 +558,7 @@ exports[`RuleBuilder renders 1`] = `
               }
               value={Array []}
             >
-              <MultiSelectControl
+              <ForwardRef(MultiSelectControl)
                 async={true}
                 cache={false}
                 className="css-1domaf0"
@@ -579,6 +579,7 @@ exports[`RuleBuilder renders 1`] = `
                   clearable={true}
                   defaultOptions={true}
                   filterOptions={[Function]}
+                  forwardedRef={[Function]}
                   height={36}
                   loadOptions={[Function]}
                   multiple={true}
@@ -598,6 +599,7 @@ exports[`RuleBuilder renders 1`] = `
                     defaultOptions={true}
                     deleteRemoves={true}
                     filterOptions={[Function]}
+                    forwardedRef={[Function]}
                     height={36}
                     loadOptions={[Function]}
                     multi={true}
@@ -618,6 +620,7 @@ exports[`RuleBuilder renders 1`] = `
                       defaultOptions={true}
                       deleteRemoves={true}
                       filterOptions={[Function]}
+                      forwardedRef={[Function]}
                       height={36}
                       loadOptions={[Function]}
                       multi={true}
@@ -638,7 +641,7 @@ exports[`RuleBuilder renders 1`] = `
                         defaultOptions={true}
                         deleteRemoves={true}
                         filterOptions={[Function]}
-                        forwardedRef={null}
+                        forwardedRef={[Function]}
                         height={36}
                         loadOptions={[Function]}
                         multi={true}
@@ -963,7 +966,7 @@ exports[`RuleBuilder renders 1`] = `
                     </ForwardRef(SelectPicker)>
                   </StyledSelect>
                 </SelectControl>
-              </MultiSelectControl>
+              </ForwardRef(MultiSelectControl)>
             </SelectOwners>
           </div>
         </Base>
@@ -1851,7 +1854,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                 ]
               }
             >
-              <MultiSelectControl
+              <ForwardRef(MultiSelectControl)
                 async={true}
                 cache={false}
                 className="css-1domaf0"
@@ -1910,6 +1913,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                   clearable={true}
                   defaultOptions={true}
                   filterOptions={[Function]}
+                  forwardedRef={[Function]}
                   height={36}
                   loadOptions={[Function]}
                   multiple={true}
@@ -1967,6 +1971,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                     defaultOptions={true}
                     deleteRemoves={true}
                     filterOptions={[Function]}
+                    forwardedRef={[Function]}
                     height={36}
                     loadOptions={[Function]}
                     multi={true}
@@ -2025,6 +2030,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                       defaultOptions={true}
                       deleteRemoves={true}
                       filterOptions={[Function]}
+                      forwardedRef={[Function]}
                       height={36}
                       loadOptions={[Function]}
                       multi={true}
@@ -2083,7 +2089,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                         defaultOptions={true}
                         deleteRemoves={true}
                         filterOptions={[Function]}
-                        forwardedRef={null}
+                        forwardedRef={[Function]}
                         height={36}
                         loadOptions={[Function]}
                         multi={true}
@@ -2768,7 +2774,7 @@ exports[`RuleBuilder renders with suggestions 1`] = `
                     </ForwardRef(SelectPicker)>
                   </StyledSelect>
                 </SelectControl>
-              </MultiSelectControl>
+              </ForwardRef(MultiSelectControl)>
             </SelectOwners>
           </div>
         </Base>
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 8853738b16..5937b53bf3 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -567,6 +567,7 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                                 disabled={true}
                                                 isOpen={false}
                                                 size="xsmall"
+                                                type="button"
                                               >
                                                 <ForwardRef
                                                   aria-label="Add Team"
@@ -574,6 +575,7 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                                   disabled={true}
                                                   isOpen={false}
                                                   size="xsmall"
+                                                  type="button"
                                                 >
                                                   <Button
                                                     align="center"
@@ -582,6 +584,7 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                                     disabled={true}
                                                     innerRef={null}
                                                     size="xsmall"
+                                                    type="button"
                                                   >
                                                     <StyledButton
                                                       aria-disabled={true}
@@ -592,6 +595,7 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                                       onClick={[Function]}
                                                       role="button"
                                                       size="xsmall"
+                                                      type="button"
                                                     >
                                                       <ForwardRef
                                                         aria-disabled={true}
@@ -601,6 +605,7 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                                         onClick={[Function]}
                                                         role="button"
                                                         size="xsmall"
+                                                        type="button"
                                                       >
                                                         <button
                                                           aria-disabled={true}
@@ -609,6 +614,7 @@ exports[`InviteMember should render roles when available and allowed, and handle
                                                           onClick={[Function]}
                                                           role="button"
                                                           size="xsmall"
+                                                          type="button"
                                                         >
                                                           <ButtonLabel
                                                             align="center"
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index 2fdb73a33e..be37ded73f 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -7,6 +7,10 @@ import GlobalModal from 'app/components/globalModal';
 
 describe('Incident Rules Details', function() {
   beforeAll(function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/users/',
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
       body: [],
@@ -42,6 +46,13 @@ describe('Incident Rules Details', function() {
         }),
     });
 
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/alert-rules/${
+        rule.id
+      }/triggers/123/actions/`,
+      body: [],
+    });
+
     const wrapper = mountWithTheme(
       <React.Fragment>
         <GlobalModal />
diff --git a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
index 36271162fd..c4c57eb83f 100644
--- a/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/triggers/modal.spec.jsx
@@ -20,6 +20,10 @@ describe('Incident Rules -> Triggers Modal', function() {
     );
   beforeEach(function() {
     MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/users/',
+      body: [],
+    });
     statsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
     });
