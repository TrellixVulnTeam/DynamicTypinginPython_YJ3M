commit c933ae88d9e8d937c90678d23dd05830e5bc2aa9
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Feb 13 09:10:56 2020 -0800

    fix(plugin): test plugin functionality (#16955)

diff --git a/src/sentry/api/endpoints/project_plugin_details.py b/src/sentry/api/endpoints/project_plugin_details.py
index ad0f857e8d..8e974f79f6 100644
--- a/src/sentry/api/endpoints/project_plugin_details.py
+++ b/src/sentry/api/endpoints/project_plugin_details.py
@@ -1,13 +1,11 @@
 from __future__ import absolute_import
 
-import logging
 import six
 
 from django import forms
 from django.core.urlresolvers import reverse
 from rest_framework import serializers
 from rest_framework.response import Response
-from requests.exceptions import HTTPError
 
 from sentry.exceptions import InvalidIdentity, PluginError, PluginIdentityRequired
 from sentry.plugins.base import plugins
@@ -54,18 +52,7 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
         plugin = self._get_plugin(plugin_id)
 
         if request.data.get("test") and plugin.is_testable():
-            try:
-                test_results = plugin.test_configuration(project)
-            except Exception as exc:
-                if isinstance(exc, HTTPError):
-                    test_results = "%s\n%s" % (exc, exc.response.text[:256])
-                elif hasattr(exc, "read") and callable(exc.read):
-                    test_results = "%s\n%s" % (exc, exc.read()[:256])
-                else:
-                    logging.exception("Plugin(%s) raised an error during test", plugin_id)
-                    test_results = "There was an internal error with the Plugin"
-            if not test_results:
-                test_results = "No errors returned"
+            test_results = plugin.test_configuration_and_get_test_results(project)
             return Response({"detail": test_results}, status=200)
 
         if request.data.get("reset"):
diff --git a/src/sentry/plugins/base/configuration.py b/src/sentry/plugins/base/configuration.py
index bbabcdb4ae..2d7d4681aa 100644
--- a/src/sentry/plugins/base/configuration.py
+++ b/src/sentry/plugins/base/configuration.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import logging
 import six
 
 from django.utils.translation import ugettext as _
@@ -9,7 +8,6 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.contrib import messages
 from django.http import Http404
-from requests.exceptions import HTTPError
 
 from sentry import options
 from sentry.api import client
@@ -68,18 +66,7 @@ def default_plugin_config(plugin, project, request):
     )
     if form.is_valid():
         if "action_test" in request.POST and plugin.is_testable():
-            try:
-                test_results = plugin.test_configuration(project)
-            except Exception as exc:
-                if isinstance(exc, HTTPError):
-                    test_results = "%s\n%s" % (exc, exc.response.text[:256])
-                elif hasattr(exc, "read") and callable(exc.read):
-                    test_results = "%s\n%s" % (exc, exc.read()[:256])
-                else:
-                    logging.exception("Plugin(%s) raised an error during test", plugin_key)
-                    test_results = "There was an internal error with the Plugin"
-            if not test_results:
-                test_results = "No errors returned"
+            test_results = plugin.test_configuration_and_get_test_results(project)
         else:
             for field, value in six.iteritems(form.cleaned_data):
                 key = "%s:%s" % (plugin_key, field)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 2d6fcc036c..5952b31352 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -12,7 +12,7 @@ from sentry import digests, ratelimits
 from sentry.digests import get_option_key as get_digest_option_key
 from sentry.digests.notifications import event_to_record, unsplit_key
 from sentry.exceptions import PluginError
-from sentry.integrations.exceptions import ApiError
+from sentry_plugins.exceptions import ApiError
 from sentry.plugins.base import Notification, Plugin
 from sentry.plugins.base.configuration import react_plugin_config
 from sentry.models import ProjectOption
@@ -54,7 +54,13 @@ class NotificationPlugin(Plugin):
     def get_plugin_type(self):
         return "notification"
 
-    def notify(self, notification):
+    def notify(self, notification, raise_exception=False):
+        """
+        This calls the notify_users method of the plugin.
+        Normally this method eats the error and logs it but if we
+        set raise_exception=True like we do for the test plugin buttion,
+        the exception is raised
+        """
         event = notification.event
         try:
             return self.notify_users(
@@ -70,6 +76,8 @@ class NotificationPlugin(Plugin):
                     "organization_id": event.group.project.organization_id,
                 },
             )
+            if raise_exception:
+                raise err
             return False
 
     def rule_notify(self, event, futures):
@@ -161,7 +169,29 @@ class NotificationPlugin(Plugin):
 
         event = create_sample_event(project, platform="python")
         notification = Notification(event=event)
-        return self.notify(notification)
+        return self.notify(notification, raise_exception=True)
+
+    def test_configuration_and_get_test_results(self, project):
+        try:
+            test_results = self.test_configuration(project)
+        except Exception as exc:
+            if isinstance(exc, HTTPError) and hasattr(exc.response, "text"):
+                test_results = "%s\n%s" % (exc, exc.response.text[:256])
+            elif hasattr(exc, "read") and callable(exc.read):
+                test_results = "%s\n%s" % (exc, exc.read()[:256])
+            else:
+                logging.exception(
+                    "Plugin(%s) raised an error during test, %s", self.slug, six.text_type(exc)
+                )
+                if six.text_type(exc).lower().startswith("error communicating with"):
+                    test_results = six.text_type(exc)[:256]
+                else:
+                    test_results = (
+                        "There was an internal error with the Plugin, %s" % six.text_type(exc)[:256]
+                    )
+        if not test_results:
+            test_results = "No errors returned"
+        return test_results
 
     def get_notification_doc_html(self, **kwargs):
         return ""
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 54c3842ede..135e2a09fe 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -179,7 +179,7 @@ class MailPlugin(NotificationPlugin):
             kwargs={"project_id": project.id},
         )
 
-    def notify(self, notification):
+    def notify(self, notification, **kwargs):
         from sentry.models import Commit, Release
 
         event = notification.event
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index 7c7c3f9c1d..4d7a0b4da6 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -105,4 +105,5 @@ class WebHooksPlugin(notify.NotificationPlugin):
     def notify_users(self, group, event, triggering_rules, fail_silently=False, **kwargs):
         payload = self.get_group_data(group, event, triggering_rules)
         for url in self.get_webhook_urls(group.project):
+            # TODO: Use API client with raise_error
             safe_execute(self.send_webhook, url, payload, _with_transaction=False)
diff --git a/src/sentry_plugins/base.py b/src/sentry_plugins/base.py
index 3fafb30a90..6626794ff5 100644
--- a/src/sentry_plugins/base.py
+++ b/src/sentry_plugins/base.py
@@ -45,7 +45,7 @@ class CorePluginMixin(object):
             if exc.json:
                 msg = self.error_message_from_json(exc.json) or "unknown error"
             else:
-                msg = "unknown error"
+                msg = getattr(exc, "text", "unknown error")
             return "Error Communicating with %s (HTTP %s): %s" % (self.title, exc.code, msg)
         else:
             return ERR_INTERNAL
diff --git a/src/sentry_plugins/pushover/plugin.py b/src/sentry_plugins/pushover/plugin.py
index c71fb7ec0b..9f5f2240f7 100644
--- a/src/sentry_plugins/pushover/plugin.py
+++ b/src/sentry_plugins/pushover/plugin.py
@@ -84,7 +84,13 @@ class PushoverPlugin(CorePluginMixin, NotifyPlugin):
             apikey=self.get_option("apikey", project), userkey=self.get_option("userkey", project)
         )
 
-    def notify(self, notification):
+    def error_message_from_json(self, data):
+        errors = data.get("errors")
+        if errors:
+            return " ".join(errors)
+        return "unknown error"
+
+    def notify(self, notification, **kwargs):
         event = notification.event
         group = event.group
         project = group.project
@@ -102,15 +108,18 @@ class PushoverPlugin(CorePluginMixin, NotifyPlugin):
             message += "\n\nTags: %s" % (", ".join("%s=%s" % (k, v) for (k, v) in tags))
 
         client = self.get_client(project)
-        response = client.send_message(
-            {
-                "message": message[:1024],
-                "title": title[:250],
-                "url": link,
-                "url_title": "Issue Details",
-                "priority": priority,
-                "retry": retry,
-                "expire": expire,
-            }
-        )
+        try:
+            response = client.send_message(
+                {
+                    "message": message[:1024],
+                    "title": title[:250],
+                    "url": link,
+                    "url_title": "Issue Details",
+                    "priority": priority,
+                    "retry": retry,
+                    "expire": expire,
+                }
+            )
+        except Exception as e:
+            self.raise_error(e)
         assert response["status"]
diff --git a/src/sentry_plugins/slack/plugin.py b/src/sentry_plugins/slack/plugin.py
index 2e41635f8f..693aef1d56 100644
--- a/src/sentry_plugins/slack/plugin.py
+++ b/src/sentry_plugins/slack/plugin.py
@@ -138,7 +138,7 @@ class SlackPlugin(CorePluginMixin, notify.NotificationPlugin):
             return None
         return set(tag.strip().lower() for tag in option.split(","))
 
-    def notify(self, notification):
+    def notify(self, notification, raise_exception=False):
         event = notification.event
         group = event.group
         project = group.project
diff --git a/src/sentry_plugins/twilio/plugin.py b/src/sentry_plugins/twilio/plugin.py
index 76da656ca9..65162afe36 100644
--- a/src/sentry_plugins/twilio/plugin.py
+++ b/src/sentry_plugins/twilio/plugin.py
@@ -157,6 +157,7 @@ class TwilioPlugin(NotificationPlugin):
             if not phone:
                 continue
             try:
+                # TODO: Use API client with raise_error
                 phone = clean_phone(phone)
                 http.safe_urlopen(
                     endpoint,
diff --git a/src/sentry_plugins/victorops/plugin.py b/src/sentry_plugins/victorops/plugin.py
index 2c509a60a9..1ba6b70896 100644
--- a/src/sentry_plugins/victorops/plugin.py
+++ b/src/sentry_plugins/victorops/plugin.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.exceptions import PluginError
 from sentry.plugins.bases.notify import NotifyPlugin
 
 from sentry_plugins.base import CorePluginMixin
@@ -92,7 +91,6 @@ class VictorOpsPlugin(CorePluginMixin, NotifyPlugin):
                 project_id=group.project.id,
             )
         except ApiError as e:
-            message = "Could not communicate with victorops. Got %s" % e
-            raise PluginError(message)
+            self.raise_error(e)
 
         assert response["result"] == "success"
diff --git a/tests/sentry/plugins/bases/notify/tests.py b/tests/sentry/plugins/bases/notify/tests.py
index 86fbc9046d..d098df988e 100644
--- a/tests/sentry/plugins/bases/notify/tests.py
+++ b/tests/sentry/plugins/bases/notify/tests.py
@@ -1,7 +1,8 @@
 from __future__ import absolute_import
 
+from sentry_plugins.base import CorePluginMixin
 from sentry.exceptions import PluginError
-from sentry.integrations.exceptions import ApiError
+from sentry_plugins.exceptions import ApiError, ApiHostError, ApiUnauthorized
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.plugins.base.structs import Notification
 from sentry.testutils import TestCase
@@ -9,14 +10,14 @@ from requests.exceptions import HTTPError, SSLError
 from sentry.models import GroupStatus
 
 
-class DummyNotificationPlugin(NotificationPlugin):
+class DummyNotificationPlugin(CorePluginMixin, NotificationPlugin):
     def is_configured(self, project):
         return True
 
 
 class NotifyPlugin(TestCase):
     def test_add_notification_referrer_param(self):
-        n = NotificationPlugin()
+        n = DummyNotificationPlugin()
         n.slug = "slack"
         url = "https://sentry.io/"
         assert n.add_notification_referrer_param(url) == url + "?referrer=" + n.slug
@@ -42,7 +43,7 @@ class NotifyPlugin(TestCase):
             PluginError("A plugin is sad"),
         )
         for err in errors:
-            n = NotificationPlugin()
+            n = DummyNotificationPlugin()
             n.slug = "slack"
 
             def hook(*a, **kw):
@@ -54,6 +55,27 @@ class NotifyPlugin(TestCase):
             n.notify_users = hook
             assert n.notify(notification) is False
 
+    def test_test_configuration_and_get_test_results(self):
+        errors = (
+            ApiError("The server is sad"),
+            ApiHostError("host error"),
+            ApiUnauthorized("not used"),
+        )
+        for err in errors:
+            n = DummyNotificationPlugin()
+            n.slug = "slack"
+
+            def hook(*a, **kw):
+                n.raise_error(err)
+
+            n.notify_users = hook
+            if isinstance(err, ApiUnauthorized):
+                message = "your access token was invalid"
+            else:
+                message = err.text
+            assert message
+            assert message in n.test_configuration_and_get_test_results(self.project)
+
 
 class DummyNotificationPluginTest(TestCase):
     def setUp(self):
