commit bce7ce55fb0595306580acf3395208d871164d06
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Mar 4 10:56:59 2020 -0500

    fix(discover) Handle has:transaction.status queries (#17324)
    
    This query is fairly useless since every transaction always has a status, but it
    shouldn't cause an error when you do it.

diff --git a/docs-ui/components/button.stories.js b/docs-ui/components/button.stories.js
index dbea6adaaa..422547c3c4 100644
--- a/docs-ui/components/button.stories.js
+++ b/docs-ui/components/button.stories.js
@@ -4,7 +4,6 @@ import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import {action} from '@storybook/addon-actions';
 import {boolean, number} from '@storybook/addon-knobs';
-
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
 import DropdownButton from 'app/components/dropdownButton';
diff --git a/docs-ui/components/columnEditor.stories.js b/docs-ui/components/columnEditor.stories.js
index a74df56fb7..1225539ac8 100644
--- a/docs-ui/components/columnEditor.stories.js
+++ b/docs-ui/components/columnEditor.stories.js
@@ -3,7 +3,6 @@ import PropTypes from 'prop-types';
 import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import {action} from '@storybook/addon-actions';
-
 import {openModal} from 'app/actionCreators/modal';
 import Button from 'app/components/button';
 import GlobalModal from 'app/components/globalModal';
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 7db33abbe5..ad40c37960 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -702,6 +702,10 @@ def convert_search_filter_to_snuba_query(search_filter):
         operator = "LIKE" if search_filter.operator == "=" else "NOT LIKE"
         return [name, operator, like_value]
     elif name == "transaction.status":
+        # Handle "has" queries
+        if search_filter.value.raw_value == "":
+            return [["isNull", [name]], search_filter.operator, 1]
+
         internal_value = SPAN_STATUS_NAME_TO_CODE.get(search_filter.value.raw_value)
         if internal_value is None:
             raise InvalidSearchQuery(
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 830ae90261..b8dd23f18c 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1493,6 +1493,66 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert data[0]["count_unique_project_id"] == 2
             assert data[0]["count_unique_project"] == 2
 
+    def test_has_transaction_status(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        data = load_data("transaction")
+
+        data["transaction"] = "/transactionstatus/1"
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["event.type", "count(id)"],
+                    "query": "event.type:transaction has:transaction.status",
+                    "sort": "-count(id)",
+                    "statsPeriod": "24h",
+                },
+            )
+
+            assert response.status_code == 200, response.content
+            data = response.data["data"]
+            assert len(data) == 1
+            assert data[0]["count_id"] == 1
+
+    def test_not_has_transaction_status(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        data = load_data("transaction")
+
+        data["transaction"] = "/transactionstatus/1"
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["event.type", "count(id)"],
+                    "query": "event.type:transaction !has:transaction.status",
+                    "sort": "-count(id)",
+                    "statsPeriod": "24h",
+                },
+            )
+
+            assert response.status_code == 200, response.content
+            data = response.data["data"]
+            assert len(data) == 1
+            assert data[0]["count_id"] == 0
+
     def test_all_aggregates_in_columns(self):
         self.login_as(user=self.user)
 
