commit bcd3520918d4bae81204b53ee0a2359fec277d63
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 4 16:22:29 2015 -0800

    Transition to SelectedAggregateStore

diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index 2fc06c4594..40ca2d4d20 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -81,6 +81,10 @@ var AggregateListStore = Reflux.createStore({
     }
   },
 
+  getAllItemIds() {
+    return this.items.map((item) => item.id);
+  },
+
   getAllItems() {
     // regroup pending changes by their itemID
     var pendingById = {};
diff --git a/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx b/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
new file mode 100644
index 0000000000..ed7f277090
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/selectedAggregateStore.jsx
@@ -0,0 +1,75 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var AggregateListStore = require("./aggregateListStore");
+
+var SelectedAggregateStore = Reflux.createStore({
+  init() {
+    this.listenTo(AggregateListStore, this.onAggListChange);
+
+    this.allSelected = false;
+    this.anySelected = false;
+    this.multiSelected = false;
+
+    this.selected = new Set();
+  },
+
+  onAggListChange() {
+    var existingIds = new Set(AggregateListStore.getAllItemIds());
+    // prune ids that no longer exist
+    this.selected.forEach((itemId) => {
+      if (!existingIds.has(itemId)) {
+        this.selected.delete(itemId);
+      }
+    });
+    this.trigger();
+  },
+
+  refresh() {
+    var itemIds = this.getSelectedIds();
+
+    this.anySelected = itemIds.size > 0;
+    this.multiSelected = itemIds.size > 1;
+  },
+
+  getSelectedIds() {
+    if (this.allSelected) {
+      return new Set(AggregateListStore.getAllItemIds());
+    }
+    return this.selected;
+  },
+
+  isSelected(itemId) {
+    if (this.allSelected) {
+      return true;
+    }
+    return this.selected.has(itemId);
+  },
+
+  clearAll() {
+    this.selected.clear();
+    this.allSelected = false;
+    this.refresh();
+    this.trigger();
+  },
+
+  toggleSelect(itemId) {
+    if (this.selected.has(itemId)) {
+      this.selected.remove(itemId);
+    } else {
+      this.selected.add(itemId);
+    }
+    this.refresh();
+    this.trigger();
+  },
+
+  toggleSelectAll() {
+    this.allSelected = !this.allSelected;
+    this.refresh();
+    this.trigger();
+  },
+
+});
+
+module.exports = SelectedAggregateStore;
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index da2c1991ca..5a1f694956 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -141,55 +141,6 @@ var Stream = React.createClass({
 
     return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + querystring;
   },
-
-  handleSelect(aggId, event) {
-    var checked = $(event.target).is(':checked');
-    var aggList = this.state.aggList;
-    var aggNode = null;
-
-    var numSelected = 0,
-        numTotal = 0;
-
-    this.state.aggList.forEach((node) => {
-      if (aggId === node.id) {
-        aggNode = node;
-        aggNode.isSelected = checked;
-      }
-
-      if (node.isSelected) {
-        numSelected += 1;
-      }
-      numTotal += 1;
-    });
-
-    if (aggNode === null) {
-      throw new Error('Unable to find aggregate node for ID ' + aggId);
-    }
-
-    this.setState({
-      aggList: aggList,
-      selectAllActive: (numSelected === numTotal),
-      anySelected: numSelected !== 0,
-      multiSelected: numSelected > 1
-    });
-  },
-
-  handleSelectAll(event){
-    var checked = $(event.target).is(':checked');
-    var aggList = this.state.aggList;
-    var numSelected = checked ? aggList.length : 0;
-
-    aggList.forEach((node) => {
-      node.isSelected = checked;
-    });
-
-    this.setState({
-      aggList: aggList,
-      selectAllActive: checked,
-      anySelected: numSelected !== 0,
-      multiSelected: numSelected > 1
-    });
-  },
   handleRealtimeChange(event) {
     this.setState({
       realtimeActive: !this.state.realtimeActive
@@ -215,9 +166,7 @@ var Stream = React.createClass({
       return <StreamAggregate
           key={node.id}
           data={node}
-          isSelected={node.isSelected}
           memberList={this.props.memberList}
-          onSelect={this.handleSelect.bind(this, node.id)}
           statsPeriod={this.state.statsPeriod} />;
     });
 
@@ -228,7 +177,6 @@ var Stream = React.createClass({
           <div className="container">
             <div className="group-header">
               <StreamActions
-                onSelectAll={this.handleSelectAll}
                 onResolve={this.handleResolve}
                 onBookmark={this.handleBookmark}
                 onDelete={this.handleDelete}
@@ -238,10 +186,7 @@ var Stream = React.createClass({
                 onRealtimeChange={this.handleRealtimeChange}
                 realtimeActive={this.state.realtimeActive}
                 statsPeriod={this.state.statsPeriod}
-                aggList={this.state.aggList}
-                selectAllActive={this.state.selectAllActive}
-                anySelected={this.state.anySelected}
-                multiSelected={this.state.multiSelected} />
+                aggList={this.state.aggList} />
             </div>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 3362456c79..5dab39956d 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -1,13 +1,16 @@
 /*** @jsx React.DOM */
 var React = require("react");
+var Reflux = require("reflux");
 
 var utils = require("../../utils");
 
+var AggregateListStore = require("../../stores/aggregateListStore");
 var DateTimeField = require("../../modules/datepicker/DateTimeField");
 var DropdownLink = require("../../components/dropdownLink");
 var MenuItem = require("../../components/menuItem");
 var Modal = require("react-bootstrap/Modal");
 var OverlayMixin = require("react-bootstrap/OverlayMixin");
+var SelectedAggregateStore = require("../../stores/selectedAggregateStore");
 
 var ActionLink = React.createClass({
   mixins: [OverlayMixin],
@@ -83,11 +86,8 @@ var ActionLink = React.createClass({
       return <span/>;
     }
 
-    var selectedAggList = this.props.aggList.filter(
-      (node) => node.isSelected
-    );
-
-    if (selectedAggList.length === 0) {
+    var selectedItemIds = SelectedAggregateStore.getSelectedIds();
+    if (selectedItemIds.size === 0) {
       throw new Error('ActionModal rendered without any selected aggregates');
     }
 
@@ -109,7 +109,7 @@ var ActionLink = React.createClass({
 
     var confirmLabel = this.props.confirmLabel;
     var actionLabel = this.props.actionLabel || this.defaultActionLabel(confirmLabel);
-    var numEvents = selectedAggList.length;
+    var numEvents = selectedItemIds.size;
 
     actionLabel = actionLabel.replace('{count}', numEvents);
 
@@ -135,24 +135,24 @@ var ActionLink = React.createClass({
 });
 
 var StreamActions = React.createClass({
-  ALL: 'all',
-
-  SELECTED: 'selected',
+  mixins: [
+    Reflux.listenTo(SelectedAggregateStore, 'onSelectedAggregateChange')
+  ],
 
   propTypes: {
     aggList: React.PropTypes.instanceOf(Array).isRequired,
-    anySelected: React.PropTypes.bool.isRequired,
-    multiSelected: React.PropTypes.bool.isRequired,
     onRealtimeChange: React.PropTypes.func.isRequired,
-    onSelectAll: React.PropTypes.func.isRequired,
     onSelectStatsPeriod: React.PropTypes.func.isRequired,
     realtimeActive: React.PropTypes.bool.isRequired,
-    selectAllActive: React.PropTypes.bool.isRequired,
     statsPeriod: React.PropTypes.string.isRequired
   },
+
   getInitialState() {
     return {
-      datePickerActive: false
+      datePickerActive: false,
+      selectAllActive: false,
+      anySelected: false,
+      multiSelected: false,
     };
   },
   selectStatsPeriod(period) {
@@ -163,22 +163,18 @@ var StreamActions = React.createClass({
       datePickerActive: !this.state.datePickerActive
     });
   },
-  actionAggregates(action, aggList, data) {
+  actionSelectedAggregates(action, data) {
     var itemIds;
     var params = this.getParams();
     var selectedAggList;
 
-    if (aggList === AggregateListActions.SELECTED) {
-      itemIds = [];
-      selectedAggList = [];
-      this.state.aggList.forEach((node) => {
-        if (node.isSelected === true) {
-          itemIds.push(node.id);
-          selectedAggList.push(node);
-        }
-      });
-    } else if (aggList === StreamActions.ALL) {
+    if (SelectedAggregateStore.allSelected) {
       selectedAggList = this.state.aggList;
+    } else {
+      itemIds = new SelectedAggregateStore.getSelectedIds();
+      selectedAggList = this.state.aggList.filter(
+        (item) => itemIds.has(item.id)
+      );
     }
 
     action({
@@ -188,9 +184,10 @@ var StreamActions = React.createClass({
       data: data
     });
 
+    SelectedAggregateStore.clearAll();
+
     selectedAggList.forEach((node) => {
       node.version = new Date().getTime() + 10;
-      node.isSelected = false;
       for (var key in data) {
         node[key] = data[key];
       }
@@ -198,9 +195,6 @@ var StreamActions = React.createClass({
 
     this.setState({
       aggList: this.state.aggList,
-      selectAllActive: false,
-      anySelected: false,
-      multiSelected: false
     });
   },
   onResolve(aggList, event) {
@@ -220,6 +214,16 @@ var StreamActions = React.createClass({
   onMerge(aggList, event) {
     return this.actionAggregates(AggregateListActions.merge, {merge: 1});
   },
+  onSelectedAggregateChange() {
+    this.setState({
+      selectAllActive: SelectedAggregateStore.allSelected,
+      multiSelected: SelectedAggregateStore.multiSelected,
+      anySelected: SelectedAggregateStore.anySelected
+    });
+  },
+  onSelectAll() {
+    SelectedAggregateStore.toggleSelectAll();
+  },
   render() {
     var params = utils.getQueryParams();
     var sortBy = params.sort || 'date';
@@ -245,30 +249,30 @@ var StreamActions = React.createClass({
         <div className="stream-actions-left col-md-7">
           <div className="checkbox">
             <input type="checkbox" className="chk-select-all"
-                   onChange={this.props.onSelectAll}
-                   checked={this.props.selectAllActive} />
+                   onChange={this.onSelectAll}
+                   checked={this.state.selectAllActive} />
           </div>
           <div className="btn-group">
             <ActionLink
                className="btn btn-default btn-sm action-resolve"
-               disabled={!this.props.anySelected}
+               disabled={!this.state.anySelected}
                onAction={this.onResolve}
                confirmLabel="Resolve"
                canActionAll={true}
                onlyIfBulk={true}
-               selectAllActive={this.props.selectAllActive}
+               selectAllActive={this.state.selectAllActive}
                aggList={this.props.aggList}>
               <i aria-hidden="true" className="icon-checkmark"></i>
             </ActionLink>
             <ActionLink
                className="btn btn-default btn-sm action-bookmark"
-               disabled={!this.props.anySelected}
+               disabled={!this.state.anySelected}
                onAction={this.onBookmark}
                neverConfirm={true}
                confirmLabel="Bookmark"
                canActionAll={false}
                onlyIfBulk={true}
-               selectAllActive={this.props.selectAllActive}
+               selectAllActive={this.state.selectAllActive}
                aggList={this.props.aggList}>
               <i aria-hidden="true" className="icon-bookmark"></i>
             </ActionLink>
@@ -276,17 +280,17 @@ var StreamActions = React.createClass({
             <DropdownLink
               key="actions"
               caret={false}
-              disabled={!this.props.anySelected}
+              disabled={!this.state.anySelected}
               className="btn-sm btn-default hidden-xs action-more"
               title={<span className="icon-ellipsis"></span>}>
               <MenuItem noAnchor={true}>
                 <ActionLink
                    className="action-merge"
-                   disabled={!this.props.multiSelected}
+                   disabled={!this.state.multiSelected}
                    onAction={this.onMerge}
                    confirmLabel="Merge"
                    canActionAll={false}
-                   selectAllActive={this.props.selectAllActive}
+                   selectAllActive={this.state.selectAllActive}
                    aggList={this.props.aggList}>
                   Merge Events
                 </ActionLink>
@@ -294,13 +298,13 @@ var StreamActions = React.createClass({
               <MenuItem noAnchor={true}>
                 <ActionLink
                    className="action-remove-bookmark"
-                   disabled={!this.props.anySelected}
+                   disabled={!this.state.anySelected}
                    onAction={this.onRemoveBookmark}
                    neverConfirm={true}
                    actionLabel="remove these {count} events from your bookmarks"
                    onlyIfBulk={true}
                    canActionAll={false}
-                   selectAllActive={this.props.selectAllActive}
+                   selectAllActive={this.state.selectAllActive}
                    aggList={this.props.aggList}>
                   Remove from Bookmarks
                 </ActionLink>
@@ -309,11 +313,11 @@ var StreamActions = React.createClass({
               <MenuItem noAnchor={true}>
                 <ActionLink
                    className="action-delete"
-                   disabled={!this.props.anySelected}
+                   disabled={!this.state.anySelected}
                    onAction={this.onDelete}
                    confirmLabel="Delete"
                    canActionAll={false}
-                   selectAllActive={this.props.selectAllActive}
+                   selectAllActive={this.state.selectAllActive}
                    aggList={this.props.aggList}>
                   Delete Events
                 </ActionLink>
diff --git a/src/sentry/static/sentry/app/views/stream/aggregate.jsx b/src/sentry/static/sentry/app/views/stream/aggregate.jsx
index 4234d51b98..dfa2162b34 100644
--- a/src/sentry/static/sentry/app/views/stream/aggregate.jsx
+++ b/src/sentry/static/sentry/app/views/stream/aggregate.jsx
@@ -1,25 +1,47 @@
 /*** @jsx React.DOM */
 var React = require("react");
+var Reflux = require("reflux");
 var Router = require("react-router");
 
 var AssigneeSelector = require("../../components/assigneeSelector");
 var BarChart = require("../../components/barChart");
 var Count = require("../../components/count");
+var SelectedAggregateStore = require("../../stores/selectedAggregateStore");
 var TimeSince = require("../../components/timeSince");
 
 var StreamAggregate = React.createClass({
-  mixins: [Router.State],
+  mixins: [
+    Reflux.listenTo(SelectedAggregateStore, "onSelectedAggregateChange"),
+    Router.State
+  ],
 
   propTypes: {
     data: React.PropTypes.shape({
       id: React.PropTypes.string.isRequired
     }).isRequired,
     memberList: React.PropTypes.instanceOf(Array).isRequired,
-    onSelect: React.PropTypes.func.isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
-    isSelected: React.PropTypes.bool
   },
-  render: function() {
+
+  getInitialState() {
+    return {
+      isSelected: false,
+    };
+  },
+
+  onSelectedAggregateChange() {
+    var id = this.getParams().aggregateId;
+
+    this.setState({
+      isSelected: SelectedAggregateStore.isSelected(id),
+    });
+  },
+
+  onSelect() {
+    SelectedAggregateStore.toggleSelect(this.props.data.id);
+  },
+
+  render() {
     var data = this.props.data,
         userCount = 0;
 
@@ -49,8 +71,8 @@ var StreamAggregate = React.createClass({
         <div className="col-md-7 event-details">
           <div className="checkbox">
             <input type="checkbox" className="chk-select" value={data.id}
-                   checked={this.props.isSelected}
-                   onChange={this.props.onSelect} />
+                   checked={this.state.isSelected}
+                   onChange={this.onSelect} />
           </div>
           <h3>
             <Router.Link to="aggregateDetails"
