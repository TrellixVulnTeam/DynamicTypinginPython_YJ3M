commit b0495fb2af4cb8ba24a5eb66cf0e8879e4e066ff
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Nov 20 11:09:06 2019 -0800

    test: Use store_event instead of crete_event (#15661)
    
    We need to start using store_event everywhere since this is closer to
    how an event is actually processed, which will help with deprecating
    Event.

diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index aa5c7abd10..48e8432fd5 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -24,29 +24,37 @@ class EventSerializerTest(TestCase):
         assert result["eventID"] == event_id
 
     def test_eventerror(self):
-        event = self.create_event(
-            data={"errors": [{"type": EventError.INVALID_DATA, "name": u"端"}]}
+        event = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
+                "stacktrace": [u"端"],
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
         assert len(result["errors"]) == 1
         assert "data" in result["errors"][0]
         assert result["errors"][0]["type"] == EventError.INVALID_DATA
-        assert result["errors"][0]["data"] == {"name": u"端"}
+        assert result["errors"][0]["data"] == {
+            u"name": u"stacktrace",
+            u"reason": u"expected rawstacktrace",
+            u"value": [u"\xfc"],
+        }
         assert "startTimestamp" not in result
         assert "timestamp" not in result
 
     def test_hidden_eventerror(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
-                "errors": [
-                    {"type": EventError.INVALID_DATA, "name": u"breadcrumbs.values.42.data"},
-                    {
-                        "type": EventError.INVALID_DATA,
-                        "name": u"exception.values.0.stacktrace.frames.42.vars",
-                    },
-                ]
-            }
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
+                "breadcrumbs": [u"端"],
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
@@ -54,15 +62,19 @@ class EventSerializerTest(TestCase):
 
     def test_renamed_attributes(self):
         # Only includes meta for simple top-level attributes
-        event = self.create_event(
+        event = self.store_event(
             data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
                 "extra": {"extra": True},
                 "modules": {"modules": "foobar"},
                 "_meta": {
                     "extra": {"": {"err": ["extra error"]}},
                     "modules": {"": {"err": ["modules error"]}},
                 },
-            }
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
@@ -72,11 +84,15 @@ class EventSerializerTest(TestCase):
         assert result["_meta"]["packages"] == {"": {"err": ["modules error"]}}
 
     def test_message_interface(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
                 "logentry": {"formatted": "bar"},
                 "_meta": {"logentry": {"formatted": {"": {"err": ["some error"]}}}},
-            }
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
@@ -84,11 +100,15 @@ class EventSerializerTest(TestCase):
         assert result["_meta"]["message"] == {"": {"err": ["some error"]}}
 
     def test_message_formatted(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
-                "logentry": {"message": "bar", "formatted": "baz"},
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
+                "logentry": {"formatted": "baz"},
                 "_meta": {"logentry": {"formatted": {"": {"err": ["some error"]}}}},
-            }
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
@@ -96,15 +116,26 @@ class EventSerializerTest(TestCase):
         assert result["_meta"]["message"] == {"": {"err": ["some error"]}}
 
     def test_message_legacy(self):
-        event = self.create_event(data={"logentry": None})
+        event = self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
+                "logentry": {"formatted": None},
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
+        )
+
         event.message = "search message"
 
         result = serialize(event)
         assert result["message"] == "search message"
 
     def test_tags_tuples(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
                 "tags": [["foo", "foo"], ["bar", "bar"]],
                 "_meta": {
                     "tags": {
@@ -112,7 +143,9 @@ class EventSerializerTest(TestCase):
                         "1": {"1": {"": {"err": ["bar error"]}}},
                     }
                 },
-            }
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
@@ -122,9 +155,10 @@ class EventSerializerTest(TestCase):
         assert result["_meta"]["tags"]["1"]["value"] == {"": {"err": ["foo error"]}}
 
     def test_tags_dict(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
-                # Sentry normalizes this internally
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
                 "tags": {"foo": "foo", "bar": "bar"},
                 "_meta": {
                     "tags": {
@@ -132,7 +166,9 @@ class EventSerializerTest(TestCase):
                         "bar": {"": {"err": ["bar error"]}},
                     }
                 },
-            }
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
         )
 
         result = serialize(event)
@@ -142,8 +178,10 @@ class EventSerializerTest(TestCase):
         assert result["_meta"]["tags"]["1"]["value"] == {"": {"err": ["foo error"]}}
 
     def test_none_interfaces(self):
-        event = self.create_event(
+        event = self.store_event(
             data={
+                "event_id": "a" * 32,
+                "timestamp": iso_format(before_now(minutes=1)),
                 "breadcrumbs": None,
                 "exception": None,
                 "logentry": None,
@@ -152,7 +190,8 @@ class EventSerializerTest(TestCase):
                 "contexts": None,
                 "sdk": None,
                 "_meta": None,
-            }
+            },
+            project_id=self.project.id,
         )
 
         result = serialize(event)
@@ -187,11 +226,14 @@ class EventSerializerTest(TestCase):
 
 class SharedEventSerializerTest(TestCase):
     def test_simple(self):
-        event = self.create_event(event_id="a")
+        event = self.store_event(
+            data={"event_id": "a" * 32, "timestamp": iso_format(before_now(minutes=1))},
+            project_id=self.project.id,
+        )
 
         result = serialize(event, None, SharedEventSerializer())
-        assert result["id"] == six.text_type(event.event_id)
-        assert result["eventID"] == "a"
+        assert result["id"] == "a" * 32
+        assert result["eventID"] == "a" * 32
         assert result.get("context") is None
         assert result.get("contexts") is None
         assert result.get("user") is None
diff --git a/tests/snuba/models/test_event.py b/tests/snuba/models/test_event.py
index 9021d420c9..6f1b588ec2 100644
--- a/tests/snuba/models/test_event.py
+++ b/tests/snuba/models/test_event.py
@@ -1,12 +1,12 @@
 from __future__ import absolute_import
 
-import calendar
 from datetime import datetime, timedelta
 
 from sentry.api.serializers import serialize
 from sentry.models.event import Event, SnubaEvent
 from sentry.testutils import SnubaTestCase, TestCase
 from sentry import eventstore, nodestore
+from sentry.testutils.helpers.datetime import iso_format, before_now
 
 
 class SnubaEventTest(TestCase, SnubaTestCase):
@@ -17,19 +17,13 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         self.now = datetime.utcnow().replace(microsecond=0) - timedelta(seconds=10)
         self.proj1 = self.create_project()
         self.proj1env1 = self.create_environment(project=self.proj1, name="test")
-        self.proj1group1 = self.create_group(
-            self.proj1, first_seen=self.now, last_seen=self.now + timedelta(seconds=14400)
-        )
 
         # Raw event data
         self.data = {
             "event_id": self.event_id,
-            "primary_hash": "1" * 32,
-            "project_id": self.proj1.id,
             "message": "message 1",
             "platform": "python",
-            "timestamp": calendar.timegm(self.now.timetuple()),
-            "received": calendar.timegm(self.now.timetuple()),
+            "timestamp": iso_format(before_now(minutes=1)),
             "tags": {
                 "foo": "bar",
                 "baz": "quux",
@@ -40,26 +34,8 @@ class SnubaEventTest(TestCase, SnubaTestCase):
             "user": {"id": u"user1", "email": u"user1@sentry.io"},
         }
 
-        # Create a regular django Event from the data, which will save the.
-        # data in nodestore too. Once Postgres events are deprecated, we can
-        # turn this off and just put the payload in nodestore.
-        make_django_event = True
-        if make_django_event:
-            self.create_event(
-                event_id=self.data["event_id"],
-                datetime=self.now,
-                project=self.proj1,
-                group=self.proj1group1,
-                data=self.data,
-            )
-            nodestore_data = nodestore.get(
-                SnubaEvent.generate_node_id(self.proj1.id, self.event_id)
-            )
-            assert self.data["event_id"] == nodestore_data["event_id"]
-        else:
-            node_id = SnubaEvent.generate_node_id(self.proj1.id, self.event_id)
-            nodestore.set(node_id, self.data)
-            assert nodestore.get(node_id) == self.data
+        event1 = self.store_event(data=self.data, project_id=self.proj1.id)
+        self.proj1group1 = event1.group
 
     def test_fetch(self):
         event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
@@ -119,7 +95,9 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         # Check that the regular serializer still gives us back tags
         assert serialized["tags"] == [
             {"_meta": None, "key": "baz", "value": "quux"},
+            {"_meta": None, "key": "environment", "value": "prod"},
             {"_meta": None, "key": "foo", "value": "bar"},
+            {"_meta": None, "key": "level", "value": "error"},
             {"_meta": None, "key": "release", "value": "release1"},
             {"_meta": None, "key": "user", "query": "user.id:user1", "value": "id:user1"},
         ]
