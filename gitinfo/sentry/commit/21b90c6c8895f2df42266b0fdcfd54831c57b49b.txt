commit 21b90c6c8895f2df42266b0fdcfd54831c57b49b
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 28 10:40:58 2015 +0200

    Remove Alert subsystem (exc. model)
    
    The project-wide alerts feature doesn't work well enough in general use cases. This feature will be reimplemented in a more useful manner in the future.

diff --git a/CHANGES b/CHANGES
index 74caac5083..50a528ce8a 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,8 @@
+Version 7.6.0
+-------------
+
+- The project-wide Alert system has been removed (to be re-implemented in the future).
+
 Version 7.5.3
 
 - Fix another case where valid team membership was being excluded
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 91213a1f9e..a51c9f7b5c 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -366,17 +366,6 @@ class IPlugin(local, PluggableViewMixin):
         ``None``.
         """
 
-    def on_alert(self, alert, **kwargs):
-        """
-        Called when a new alert is generated.
-
-        :param alert: an instance of ``Alert``
-
-        >>> def on_alert(self, alert, **kwargs):
-        >>>     print 'New alert!', alert.message
-        >>>     print alert.get_absolute_url()
-        """
-
     def is_regression(self, group, event, **kwargs):
         """
         Called on new events when the group's status is resolved.
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
deleted file mode 100644
index 8bb23d607f..0000000000
--- a/src/sentry/tasks/check_alerts.py
+++ /dev/null
@@ -1,104 +0,0 @@
-"""
-sentry.tasks.check_alerts
-~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import, division
-
-import logging
-
-from datetime import datetime, timedelta
-from pytz import utc
-
-from sentry.tasks.base import instrumented_task
-from sentry.utils import math
-
-
-logger = logging.getLogger('alerts')
-
-
-def fsteps(start, stop, steps):
-    step = (stop - start) / steps
-    while start <= stop:
-        yield start
-        start += step
-
-
-@instrumented_task(name='sentry.tasks.check_alerts', queue='alerts')
-def check_alerts(**kwargs):
-    """
-    Iterates all current keys and fires additional tasks to check each individual
-    project's alert settings.
-    """
-    from sentry.models import Project
-
-    # TODO(dcramer): we'd rather limit this to projects which we know are 'active'
-    # this could be done using a similar strategy to our update buffer flushing
-    for project_id in Project.objects.values_list('id', flat=True):
-        check_project_alerts.apply_async(
-            kwargs={'project_id': project_id},
-            expires=120,
-        )
-
-
-@instrumented_task(name='sentry.tasks.check_alerts.check_project_alerts', queue='alerts')
-def check_project_alerts(project_id, **kwargs):
-    """
-    Given 'when' and 'count', which should signify recent times we compare it to
-    historical data for this project and if over a given threshold, create an
-    alert.
-    """
-    from sentry.app import tsdb
-    from sentry.constants import DEFAULT_ALERT_PROJECT_THRESHOLD
-    from sentry.models import ProjectOption, Alert
-
-    threshold, min_events = ProjectOption.objects.get_value(
-        project_id, 'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
-
-    if not threshold and min_events:
-        return
-
-    end = datetime.now().replace(tzinfo=utc) - timedelta(seconds=10)
-    start = end - timedelta(minutes=5)
-
-    results = [v for _, v in tsdb.get_range(
-        tsdb.models.project,
-        [project_id],
-        start=start,
-        end=end,
-        rollup=10,
-    )[project_id]]
-
-    half_intervals = int(len(results) / 2)
-    previous_data, current_data = results[:half_intervals], results[half_intervals:]
-
-    if not current_data:
-        return
-
-    current_avg = sum(current_data) / len(current_data)
-
-    # if there first few points within previous data are empty, assume that the
-    # project hasn't been active long enough for rates to be valid
-    if not any(previous_data[:3]):
-        return
-
-    if min_events > current_avg:
-        return
-
-    mean = math.mean(previous_data)
-    dev = math.mad(previous_data)
-    previous_avg = (mean + dev * 2)
-
-    pct_increase = (current_avg / previous_avg * 100) - 100
-
-    logger.info('Rate of events for project %d changed from %.2f to %2.f',
-        project_id, previous_avg, current_avg)
-
-    if pct_increase > threshold and current_avg > previous_avg:
-        Alert.maybe_alert(
-            project_id=project_id,
-            message='Rate of events increased from %.2f to %.2f' % (previous_avg, current_avg),
-        )
diff --git a/src/sentry/templates/sentry/alerts/details.html b/src/sentry/templates/sentry/alerts/details.html
deleted file mode 100644
index d69de2651c..0000000000
--- a/src/sentry/templates/sentry/alerts/details.html
+++ /dev/null
@@ -1,33 +0,0 @@
-{% extends "sentry/alerts/list.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{{ alert.datetime }} | {{ block.super }}{% endblock %}
-
-{% block bodyclass %} with-sidebar{% endblock %}
-
-{% block main %}
-    <section class="body">
-        <div class="page-header">
-            <h2>
-                {% blocktrans with alert.datetime as datetime %}Alert at {{ datetime }}{% endblocktrans %}
-                <small style="color: {% if alert.is_resolved %}green{% else %}red{% endif %};">{{ alert.get_status_display }}</small>
-            </h2>
-        </div>
-        {{ alert.message|linebreaks }}
-    </section>
-{% endblock %}
-
-{% block sidebar %}
-    {% if not alert.is_resolved %}
-        <a href="{% url 'sentry-resolve-alert' project.organization.slug project.slug alert.id %}" class="btn btn-primary" style="display: block">Resolve Alert</a>
-        <br>
-    {% endif %}
-    <h6>{% trans "Meta" %}</h6>
-    <dl>
-        <dt>{% trans "When:" %}</dt>
-        <dd><span class="pretty-date" title="{{ alert.datetime|date:"c" }}Z">{{ alert.datetime|timesince }}</span><br>
-            <small>{{ alert.datetime }} {{ alert.datetime.tzinfo }}</small></dd>
-    </dl>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/alerts/list.html b/src/sentry/templates/sentry/alerts/list.html
deleted file mode 100644
index f520c1b74d..0000000000
--- a/src/sentry/templates/sentry/alerts/list.html
+++ /dev/null
@@ -1,28 +0,0 @@
-{% extends "sentry/layout.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Alerts" %} | {{ project.name }} | {{ block.super }}{% endblock %}
-
-{% block bodyclass %}{% endblock %}
-
-{% block main %}
-    <section class="body">
-        <div class="page-header">
-            <h2>{% trans "Recent Alerts" %}</h2>
-        </div>
-        <ul>
-            {% for alert in alert_list %}
-                <li>
-                    <h4><a href="{% url 'sentry-alert-details' project.organization.slug project.slug alert.id %}">{{ alert.datetime }}</a>
-                        <small>
-                            &mdash; <span class="pretty-date" title="{{ alert.datetime|date:"c" }}Z">{{ alert.datetime|timesince }}</span>
-                        </small></h4>
-                    {{ alert.message|linebreaks }}
-                </li>
-            {% endfor %}
-        </ul>
-        <p>You can change your alert settings by visiting your <a href="{% url 'sentry-project-notifications' project.organization.slug project.slug %}">project's notification settings</a> page.</p>
-    </section>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/alerts/team.html b/src/sentry/templates/sentry/alerts/team.html
deleted file mode 100644
index 11c00f0e56..0000000000
--- a/src/sentry/templates/sentry/alerts/team.html
+++ /dev/null
@@ -1,32 +0,0 @@
-{% extends "sentry/teams/base.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Alerts" %} | {{ team.name }} | {{ block.super }}{% endblock %}
-
-{% block bodyclass %}{% endblock %}
-
-{% block main %}
-    <section class="body">
-        <div class="page-header">
-            <h2>{% trans "Recent Alerts" %}
-                <small>{{ team.name }}</small>
-            </h2>
-        </div>
-
-        <ul>
-            {% for alert in alert_list %}
-                <li>
-                    <h4><a href="{% url 'sentry-alert-details' organization.slug alert.project.slug alert.id %}">{{ alert.datetime }}</a>
-                        <small>
-                            &mdash; <a href="{% url 'sentry-alerts' organization.slug alert.project.slug %}">{{ alert.project.name }}</a>
-                            &mdash; <span class="pretty-date" title="{{ alert.datetime|date:"c" }}Z">{{ alert.datetime|timesince }}</span>
-                        </small></h4>
-                    {{ alert.message|linebreaks }}
-                </li>
-            {% endfor %}
-        </ul>
-        <p>You can change your alert settings by visiting an individual project's notification settings page.</p>
-    </section>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/alert.html b/src/sentry/templates/sentry/emails/alert.html
deleted file mode 100644
index a592d8a8bd..0000000000
--- a/src/sentry/templates/sentry/emails/alert.html
+++ /dev/null
@@ -1,28 +0,0 @@
-{% extends "sentry/emails/base.html" %}
-
-{% load i18n %}
-
-{% block header %}
-    <h1>Sentry <small>New Alert</small></h1>
-{% endblock %}
-
-{% block inner %}
-    <pre>{{ alert.message }}</pre>
-
-    <p><a href="{{ link }}">{{ link }}</a></p>
-
-    <table class="metadata">
-        <colgroup>
-            <col style="width:25%;">
-            <col style="width:25%;">
-            <col style="width:25%;">
-            <col style="width:25%;">
-        </colgroup>
-        <tr>
-            <th>{% trans "Datetime:" %}</th>
-            <td>{{ alert.datetime }}</td>
-            <th>{% trans "Project:" %}</th>
-            <td>{{ alert.project.name }}</td>
-        </tr>
-    </table>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index d7325f5cab..4bbd947dc8 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -126,19 +126,6 @@
         </form>
     </div>
 
-    {% recent_alerts from project as recent_alerts %}
-    {% if recent_alerts %}
-        <ul class="active-alerts">
-            {% for alert in recent_alerts %}
-                <li class="alert alert-error">
-                    <a class="close" data-dismiss="alert">×</a>
-                    <a href="{% url 'sentry-alert-details' project.organization.slug project.slug alert.id %}">{{ alert.message }}</a>
-                    <small>&mdash; {{ alert.datetime|timesince }}</small>
-                </li>
-            {% endfor %}
-        </ul>
-    {% endif %}
-
     <div id="event_list"></div>
 
     <div class="btn-toolbar" style="border-bottom: none">
diff --git a/src/sentry/templates/sentry/project-notifications.html b/src/sentry/templates/sentry/project-notifications.html
index 181d3ad7a4..abe6f76bdd 100644
--- a/src/sentry/templates/sentry/project-notifications.html
+++ b/src/sentry/templates/sentry/project-notifications.html
@@ -32,18 +32,6 @@
           {% endfor %}
         </fieldset>
 
-        <fieldset>
-          <legend>{% trans "Alerts" %}</legend>
-
-          <p>{% blocktrans %}Alerts are triggered when the rate of events for the entire project increase by a relative amount. Values represent a 60-second interval.{% endblocktrans %}</p>
-
-          {{ alert_form|as_crispy_errors }}
-
-          {% for field in alert_form %}
-              {{ field|as_crispy_field }}
-          {% endfor %}
-        </fieldset>
-
         <fieldset class="form-actions">
             <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
         </fieldset>
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index f7ba65b14d..9be311a209 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -430,16 +430,6 @@ def render_values(value, threshold=5, collapse_to=3):
     return context
 
 
-@tag(register, [Constant('from'), Variable('project'),
-                Constant('as'), Name('asvar')])
-def recent_alerts(context, project, asvar):
-    from sentry.models import Alert
-
-    context[asvar] = list(Alert.get_recent_for_project(project.id))
-
-    return ''
-
-
 @register.filter
 def urlquote(value, safe=''):
     return quote(value.encode('utf8'), safe)
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index a2057718c0..ab5d083082 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -12,16 +12,6 @@ from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import ProjectOption
-from sentry.web.forms.fields import RangeField
-
-
-class AlertSettingsForm(forms.Form):
-    pct_threshold = RangeField(
-        label=_('Threshold'), required=False, min_value=0, max_value=1000, step_value=100,
-        help_text=_('Notify when the rate of events increases by this percentage.'))
-    min_events = forms.IntegerField(
-        label=_('Minimum Events'), required=False, min_value=0,
-        help_text=_('Generate an alert only when an event is seen more than this many times during the interval.'),)
 
 
 class NotificationSettingsForm(forms.Form):
diff --git a/src/sentry/web/frontend/alerts.py b/src/sentry/web/frontend/alerts.py
deleted file mode 100644
index 7a6fcb4927..0000000000
--- a/src/sentry/web/frontend/alerts.py
+++ /dev/null
@@ -1,78 +0,0 @@
-"""
-sentry.web.frontend.alerts
-~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, division
-
-from datetime import timedelta
-
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils import timezone
-
-from sentry.models import Alert, AlertStatus
-from sentry.web.decorators import has_access, login_required
-from sentry.web.helpers import render_to_response
-
-
-@login_required
-@has_access
-def alert_list(request, organization, team=None, project=None):
-    alert_list = Alert.objects.filter(
-        group__isnull=True,
-        status=AlertStatus.UNRESOLVED,
-        datetime__gte=timezone.now() - timedelta(days=3),
-    ).order_by('-datetime')
-
-    if project:
-        alert_list = alert_list.filter(project=project)
-        template = 'sentry/alerts/list.html'
-    else:
-        alert_list = alert_list.filter(
-            project__team=team,
-        ).select_related('project')
-        template = 'sentry/alerts/team.html'
-
-    return render_to_response(template, {
-        'organization': project.organization,
-        'team': project.team,
-        'project': project,
-        'alert_list': list(alert_list[:20]),
-        'SECTION': 'alerts',
-    }, request)
-
-
-@login_required
-@has_access
-def alert_details(request, organization, project, alert_id):
-    try:
-        alert = Alert.objects.get(id=alert_id, project=project)
-    except Alert.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-alerts', args=[organization.slug, project.slug]))
-
-    related_group_list = list(alert.related_groups.order_by('-score', '-times_seen'))
-
-    return render_to_response('sentry/alerts/details.html', {
-        'organization': project.organization,
-        'team': project.team,
-        'project': project,
-        'alert': alert,
-        'related_group_list': related_group_list,
-        'SECTION': 'alerts',
-    }, request)
-
-
-@login_required
-@has_access
-def resolve_alert(request, organization, project, alert_id):
-    try:
-        alert = Alert.objects.get(id=alert_id, project=project)
-    except Alert.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-alerts', args=[organization.slug, project.slug]))
-
-    alert.update(status=AlertStatus.RESOLVED)
-
-    return HttpResponseRedirect(reverse('sentry-alert-details', args=[organization.slug, project.slug, alert.id]))
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index ab28b26208..d613b290a9 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -9,9 +9,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry import constants
 from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins, NotificationPlugin
-from sentry.web.forms.projects import (
-    AlertSettingsForm, NotificationSettingsForm
-)
+from sentry.web.forms.projects import NotificationSettingsForm
 from sentry.web.frontend.base import ProjectView
 from sentry.web.helpers import plugin_config
 
@@ -44,9 +42,6 @@ class ProjectNotificationsView(ProjectView):
         )
 
     def handle(self, request, organization, team, project):
-        threshold, min_events = project.get_option(
-            'alert:threshold', constants.DEFAULT_ALERT_PROJECT_THRESHOLD)
-
         op = request.POST.get('op')
         if op == 'enable':
             self._handle_enable_plugin(request, project)
@@ -64,17 +59,7 @@ class ProjectNotificationsView(ProjectView):
                         'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
                 },
             )
-            alert_form = AlertSettingsForm(
-                data=request.POST,
-                prefix='alert',
-                initial={
-                    'pct_threshold': threshold,
-                    'min_events': min_events,
-                }
-            )
-            if all(f.is_valid() for f in [general_form, alert_form]):
-                project.update_option('alert:threshold', (
-                    alert_form.cleaned_data['pct_threshold'], alert_form.cleaned_data['min_events']))
+            if general_form.is_valid():
                 project.update_option(
                     'mail:subject_prefix', general_form.cleaned_data['subject_prefix'])
                 messages.add_message(
@@ -89,13 +74,6 @@ class ProjectNotificationsView(ProjectView):
                         'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
                 },
             )
-            alert_form = AlertSettingsForm(
-                prefix='alert',
-                initial={
-                    'pct_threshold': threshold,
-                    'min_events': min_events,
-                }
-            )
 
         enabled_plugins = []
         other_plugins = []
@@ -123,7 +101,6 @@ class ProjectNotificationsView(ProjectView):
             'enabled_plugins': enabled_plugins,
             'other_plugins': other_plugins,
             'general_form': general_form,
-            'alert_form': alert_form
         }
 
         return self.respond('sentry/project-notifications.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 1efcc44683..7cae6d242c 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -17,7 +17,7 @@ from django.conf import settings
 
 from sentry.web import api
 from sentry.web.frontend import (
-    alerts, accounts, generic, groups, events,
+    accounts, generic, groups, events,
     admin, users, explore, explore_code,
 )
 
@@ -366,10 +366,6 @@ urlpatterns += patterns('',
     url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/wall/$', groups.wall_display,
         name='sentry-wall'),
 
-    # Team-wide alerts
-    url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/show/alerts/$', alerts.alert_list,
-        name='sentry-alerts'),
-
     # Explore - Users
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/$',
         users.user_list, name='sentry-users'),
@@ -410,12 +406,6 @@ urlpatterns += patterns('',
         name='sentry-group-tags'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/(?P<tag_name>[^/]+)/$', groups.group_tag_details,
         name='sentry-group-tag-details'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/$', alerts.alert_list,
-        name='sentry-alerts'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/(?P<alert_id>\d+)/$', alerts.alert_details,
-        name='sentry-alert-details'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/alerts/(?P<alert_id>\d+)/resolve/$', alerts.resolve_alert,
-        name='sentry-resolve-alert'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/stream/$', groups.group_list),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', groups.group_list,
         name='sentry-stream'),
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index fdbd30daf4..6b92709ff0 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -10,7 +10,7 @@ from exam import fixture
 from mock import Mock
 
 from sentry.interfaces.stacktrace import Stacktrace
-from sentry.models import AccessGroup, Alert, Event, Group, Rule
+from sentry.models import AccessGroup, Event, Group, Rule
 from sentry.plugins import Notification
 from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase
@@ -205,14 +205,3 @@ class MailPluginTest(TestCase):
                                   project=project, user=user4)
 
         assert user4.pk not in self.plugin.get_sendable_users(project)
-
-    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
-    def test_on_alert(self, _send_mail):
-        alert = Alert.objects.create(message='This is a test alert', project=self.project)
-
-        self.plugin.on_alert(alert=alert)
-
-        _send_mail.assert_called_once()
-        args, kwargs = _send_mail.call_args
-        assert kwargs.get('subject') == u"[{0} {1}] ALERT: {2}".format(
-            self.team.name, self.project.name, alert.message)
diff --git a/tests/sentry/tasks/check_alerts/__init__.py b/tests/sentry/tasks/check_alerts/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/tasks/check_alerts/tests.py b/tests/sentry/tasks/check_alerts/tests.py
deleted file mode 100644
index 3a8fac7b49..0000000000
--- a/tests/sentry/tasks/check_alerts/tests.py
+++ /dev/null
@@ -1,78 +0,0 @@
-import mock
-from datetime import timedelta
-from django.utils import timezone
-
-from sentry.app import tsdb
-from sentry.models import Alert
-from sentry.tasks.check_alerts import check_project_alerts, check_alerts
-from sentry.testutils import TestCase
-
-
-class BaseTestCase(TestCase):
-    def create_counts(self, project, when, amount, offset=0):
-        date = when - timedelta(seconds=offset)
-
-        tsdb.incr(tsdb.models.project, project.id, date, amount)
-
-
-class CheckAlertsTest(BaseTestCase):
-    @mock.patch('sentry.tasks.check_alerts.check_project_alerts')
-    def test_does_fire_jobs(self, check_project_alerts):
-        project = self.create_project()
-
-        check_alerts()
-
-        check_project_alerts.apply_async.assert_any_call(
-            kwargs=dict(project_id=project.id),
-            expires=120,
-        )
-
-
-class CheckProjectAlertsTest(BaseTestCase):
-    def test_it_works(self):
-        project = self.create_project()
-        now = timezone.now()
-
-        # create some data with gaps
-        for n in range(0, 50, 10):
-            self.create_counts(project, now, 2500, n)
-
-        for n in range(50, 300, 10):
-            self.create_counts(project, now, 100, n)
-
-        check_project_alerts(
-            project_id=project.id,
-        )
-        assert Alert.objects.filter(project=project).exists()
-
-    def test_without_false_positive(self):
-        project = self.create_project()
-        now = timezone.now()
-
-        # create some data with gaps
-        for n in range(0, 300, 10):
-            self.create_counts(project, now, 100, n)
-
-        check_project_alerts(
-            project_id=project.id,
-        )
-        assert not Alert.objects.filter(project=project).exists()
-
-    def test_mostly_empty(self):
-        project = self.create_project()
-        now = timezone.now()
-
-        # create some data with gaps
-        for n in range(0, 100, 10):
-            self.create_counts(project, now, 500, n)
-
-        for n in range(100, 280, 10):
-            self.create_counts(project, now, 0, n)
-
-        for n in range(280, 300, 10):
-            self.create_counts(project, now, 200, n)
-
-        check_project_alerts(
-            project_id=project.id,
-        )
-        assert Alert.objects.filter(project=project).exists()
