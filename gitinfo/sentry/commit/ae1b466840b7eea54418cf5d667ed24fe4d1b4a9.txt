commit ae1b466840b7eea54418cf5d667ed24fe4d1b4a9
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Mar 8 11:21:21 2019 -0800

    feat(events): Support direct hit on an event ID (#12330)
    
    If a query looks like an event ID, attempt to look for a direct hit
    first. This aligns the behavior of the event stream to the issue stream.
    
    Addresses SEN-234

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index d31ca40765..cd98112a68 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -13,7 +13,8 @@ from sentry.api.serializers.models.event import SnubaEvent
 from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.utils.dates import parse_stats_period
 from sentry.utils.snuba import raw_query
-
+from sentry.utils.validators import is_event_id
+from sentry.api.event_search import get_snuba_query_args
 
 SnubaTSResult = namedtuple('SnubaTSResult', ('data', 'start', 'end', 'rollup'))
 
@@ -21,6 +22,29 @@ SnubaTSResult = namedtuple('SnubaTSResult', ('data', 'start', 'end', 'rollup'))
 class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
 
     def get(self, request, organization):
+        # Check for a direct hit on event ID
+        query = request.GET.get('query', '').strip()
+        if is_event_id(query):
+            try:
+                snuba_args = get_snuba_query_args(
+                    query=u'id:{}'.format(query),
+                    params=self.get_filter_params(request, organization))
+
+                results = raw_query(
+                    selected_columns=SnubaEvent.selected_columns,
+                    referrer='api.organization-events',
+                    **snuba_args
+                )['data']
+
+                if len(results) == 1:
+                    response = Response(
+                        serialize([SnubaEvent(row) for row in results], request.user)
+                    )
+                    response['X-Sentry-Direct-Hit'] = '1'
+                    return response
+            except (OrganizationEventsError, NoProjects):
+                pass
+
         try:
             snuba_args = self.get_snuba_query_args(request, organization)
         except OrganizationEventsError as exc:
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 838b87aae6..3c5f1125f4 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,12 +1,12 @@
-import {addErrorMessage} from 'app/actionCreators/indicator';
-
 import * as Sentry from '@sentry/browser';
 import {Flex} from 'grid-emotion';
 import {isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import {browserHistory} from 'react-router';
 
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
@@ -80,13 +80,6 @@ class OrganizationEvents extends AsyncView {
     organization: SentryTypes.Organization,
   };
 
-  constructor(props) {
-    super(props);
-    this.projectsMap = new Map(
-      props.organization.projects.map(project => [project.id, project])
-    );
-  }
-
   shouldComponentUpdate(nextProps, nextState) {
     // Always update if state changes
     if (this.state !== nextState) {
@@ -129,6 +122,19 @@ class OrganizationEvents extends AsyncView {
     return `Events - ${this.props.organization.slug}`;
   }
 
+  onRequestSuccess({data, jqXHR}) {
+    const {organization} = this.props;
+
+    if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
+      const event = data[0];
+      const project = organization.projects.find(p => p.id === event.projectID);
+
+      browserHistory.replace(
+        `/organizations/${organization.slug}/projects/${project.slug}/events/${event.eventID}/`
+      );
+    }
+  }
+
   onRequestError(resp, args) {
     // Allow children to implement this
     if (resp && resp.responseJSON && resp.responseJSON.detail) {
@@ -144,6 +150,10 @@ class OrganizationEvents extends AsyncView {
 
   renderRowCounts() {
     const {events, eventsPageLinks} = this.state;
+    if (!eventsPageLinks) {
+      return null;
+    }
+
     return parseRowFromLinks(eventsPageLinks, events.length);
   }
 
@@ -158,7 +168,8 @@ class OrganizationEvents extends AsyncView {
   renderBody() {
     const {organization, location, router} = this.props;
     const {error, loading, reloading, events, eventsPageLinks} = this.state;
-    const parsedLinks = !loading && !error ? utils.parseLinkHeader(eventsPageLinks) : {};
+    const parsedLinks =
+      !loading && !error && eventsPageLinks ? utils.parseLinkHeader(eventsPageLinks) : {};
 
     return (
       <React.Fragment>
@@ -192,18 +203,19 @@ class OrganizationEvents extends AsyncView {
             <Flex align="center" justify="space-between">
               <RowDisplay>
                 {events.length ? t(`Results ${this.renderRowCounts()}`) : t('No Results')}
-                {!!events.length && (
-                  <Feature features={['internal-catchall']}>
-                    <TotalEventCount
-                      organization={organization}
-                      location={location}
-                      isAllResults={
-                        !parsedLinks.previous.results && !parsedLinks.next.results
-                      }
-                      numRows={events.length}
-                    />
-                  </Feature>
-                )}
+                {!!events.length &&
+                  eventsPageLinks && (
+                    <Feature features={['internal-catchall']}>
+                      <TotalEventCount
+                        organization={organization}
+                        location={location}
+                        isAllResults={
+                          !parsedLinks.previous.results && !parsedLinks.next.results
+                        }
+                        numRows={events.length}
+                      />
+                    </Feature>
+                  )}
               </RowDisplay>
               <Pagination pageLinks={eventsPageLinks} className="" />
             </Flex>
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 4bb57f1032..56f9ccc7a9 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -1,4 +1,4 @@
-import {withRouter} from 'react-router';
+import {withRouter, browserHistory} from 'react-router';
 import React from 'react';
 
 import OrganizationEvents, {parseRowFromLinks} from 'app/views/organizationEvents/events';
@@ -396,6 +396,29 @@ describe('OrganizationEventsContainer', function() {
       })
     );
   });
+
+  it('handles direct event hit', async function() {
+    const eventId = 'a'.repeat(32);
+
+    browserHistory.replace = jest.fn();
+    eventsMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events/',
+      body: (url, opts) => [
+        TestStubs.OrganizationEvent({...opts.query, eventID: eventId}),
+      ],
+      headers: {'X-Sentry-Direct-Hit': '1'},
+    });
+
+    wrapper = mount(
+      <OrganizationEvents organization={organization} location={{query: eventId}} />,
+      routerContext
+    );
+
+    expect(eventsMock).toHaveBeenCalled();
+    expect(browserHistory.replace).toHaveBeenCalledWith(
+      `/organizations/org-slug/projects/project-slug/events/${eventId}/`
+    );
+  });
 });
 
 describe('parseRowFromLinks', function() {
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index d1e156ccde..39b2abfe0f 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -513,6 +513,53 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 0
 
+    def test_event_id_direct_hit(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        group = self.create_group(project=project)
+        self.create_event('a' * 32, group=group, message="best event", datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        response = self.client.get(url, {'query': 'a' * 32}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response['X-Sentry-Direct-Hit'] == '1'
+
+    def test_event_id_direct_hit_miss(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        self.create_project(organization=org, teams=[team])
+
+        url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        response = self.client.get(url, {'query': 'a' * 32}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
+
 
 class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
     def test_simple(self):
