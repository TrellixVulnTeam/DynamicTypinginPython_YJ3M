commit 5be0a596b05ebb65734eb7e94fea725703f27bd8
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 15 14:04:10 2015 -0700

    Add Organization.merge_to helper

diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index ecceb56c02..b30da2bc50 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -125,3 +125,21 @@ class Organization(Model):
             'status': self.status,
             'flags': self.flags,
         }
+
+    def merge_to(from_org, to_org):
+        from sentry.models import (
+            AuditLogEntry, OrganizationMember, Project, Team
+        )
+
+        for member in OrganizationMember.objects.filter(organization=from_org):
+            member_qs = OrganizationMember.objects.filter(
+                organization=to_org,
+                user=member.user,
+            )
+            if not member_qs.exists():
+                member.update(organization=to_org)
+
+        for model in (Team, Project, AuditLogEntry):
+            model.objects.filter(
+                organization=from_org,
+            ).update(organization=to_org)
diff --git a/tests/sentry/models/test_organization.py b/tests/sentry/models/test_organization.py
new file mode 100644
index 0000000000..b7a97b2dd0
--- /dev/null
+++ b/tests/sentry/models/test_organization.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import
+
+from sentry.models import OrganizationMember, OrganizationMemberType, Team
+from sentry.testutils import TestCase
+
+
+class OrganizationTest(TestCase):
+    def test_merge_to(self):
+        from_owner = self.create_user('foo@example.com')
+        from_org = self.create_organization(owner=from_owner)
+        from_team = self.create_team(organization=from_org)
+
+        to_owner = self.create_user('bar@example.com')
+        to_org = self.create_organization(owner=to_owner)
+        to_team = self.create_team(organization=to_org)
+
+        from_org.merge_to(to_org)
+
+        assert OrganizationMember.objects.filter(
+            organization=to_org,
+            user=from_owner,
+            type=OrganizationMemberType.OWNER,
+            has_global_access=True,
+        ).exists()
+
+        team = Team.objects.get(id=from_team.id)
+        assert team.organization == to_org
