commit cb762db3c8e0af6a55fcbeeca327c32841123da7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 21 15:43:09 2016 -0700

    Improve signal support for weakrefs (#4191)
    
    This allows us to use functions which are not strongly ref'd (e.g. no __module__) as connectors.

diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index a3a0085ff7..c5227e7201 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-from functools import wraps
-
 from django.dispatch import Signal
 
 
@@ -20,7 +18,14 @@ class BetterSignal(Signal):
 
         if receiver is None:
             return wrapped
-        return wraps(receiver)(wrapped(receiver))
+
+        if hasattr(receiver, '__name__'):
+            wrapped.__name__ = receiver.__name__
+        if hasattr(receiver, '__module__'):
+            wrapped.__module__ = receiver.__module__
+        if hasattr(receiver, '__doc__'):
+            wrapped.__doc__ = receiver.__doc__
+        return wrapped(receiver)
 
 
 regression_signal = BetterSignal(providing_args=["instance"])
diff --git a/src/sentry/testutils/asserts.py b/src/sentry/testutils/asserts.py
index 59cf71db9a..bc0584fd61 100644
--- a/src/sentry/testutils/asserts.py
+++ b/src/sentry/testutils/asserts.py
@@ -11,3 +11,16 @@ from __future__ import absolute_import
 def assert_date_resembles(one, two):
     # this is mostly intended to handle discrepancies between mysql/postgres
     assert one.replace(microsecond=0) == two.replace(microsecond=0)
+
+
+def assert_mock_called_once_with_partial(mock, *args, **kwargs):
+    """
+    Similar to ``mock.assert_called_once_with()``, but we dont require all
+    args and kwargs to be specified.
+    """
+    assert len(mock.mock_calls) == 1
+    m_args, m_kwargs = mock.call_args
+    for i, arg in enumerate(args):
+        assert m_args[i] == arg
+    for kwarg in kwargs:
+        assert m_kwargs[kwarg] == kwargs[kwarg]
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 709a4a9f97..3f562f474c 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -14,8 +14,8 @@ from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.test.utils import override_settings
 from django.utils import timezone
-from gzip import GzipFile
 from exam import fixture
+from gzip import GzipFile
 from raven import Client
 from six import StringIO
 
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 8b237d6b55..e44a7bf456 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -6,9 +6,13 @@ import mock
 
 from django.core.urlresolvers import reverse
 from exam import fixture
+from mock import Mock
 
 from sentry.models import ProjectKey
-from sentry.testutils import TestCase
+from sentry.signals import event_accepted, event_dropped, event_filtered
+from sentry.testutils import (
+    assert_mock_called_once_with_partial, TestCase
+)
 from sentry.utils import json
 
 
@@ -297,6 +301,63 @@ class StoreViewTest(TestCase):
             'client_ip': '127.0.0.1',
         }
 
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())
+    def test_accepted_signal(self):
+        mock_event_accepted = Mock()
+
+        event_accepted.connect(mock_event_accepted)
+
+        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})
+
+        assert resp.status_code == 200, resp.content
+
+        assert_mock_called_once_with_partial(
+            mock_event_accepted,
+            ip='127.0.0.1',
+            project=self.project,
+            signal=event_accepted,
+        )
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())
+    @mock.patch('sentry.app.quotas.is_rate_limited')
+    def test_dropped_signal(self, mock_is_rate_limited):
+        mock_is_rate_limited.is_limited = True
+
+        mock_event_dropped = Mock()
+
+        event_dropped.connect(mock_event_dropped)
+
+        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})
+
+        assert resp.status_code == 429, resp.content
+
+        assert_mock_called_once_with_partial(
+            mock_event_dropped,
+            ip='127.0.0.1',
+            project=self.project,
+            signal=event_dropped,
+        )
+
+    @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())
+    @mock.patch('sentry.coreapi.ClientApiHelper.should_filter')
+    def test_filtered_signal(self, mock_should_filter):
+        mock_should_filter.return_value = True
+
+        mock_event_filtered = Mock()
+
+        event_filtered.connect(mock_event_filtered)
+
+        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})
+
+        assert resp.status_code == 403, resp.content
+
+        assert_mock_called_once_with_partial(
+            mock_event_filtered,
+            ip='127.0.0.1',
+            project=self.project,
+            signal=event_filtered,
+        )
+
 
 class CrossDomainXmlTest(TestCase):
     @fixture
