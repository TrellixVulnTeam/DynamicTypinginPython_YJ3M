commit 4252022efd126e238bc9db0ea275f877f9c80402
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 4 19:00:59 2014 -0700

    Various trigger improvements

diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 89fc202008..cc00eb293f 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -38,8 +38,8 @@ def check_alerts(**kwargs):
     # TODO(dcramer): we'd rather limit this to projects which we know are 'active'
     # this could be done using a similar strategy to our update buffer flushing
     for project_id in Project.objects.values_list('id', flat=True):
-        check_project_alerts.delay(
-            project_id=project_id,
+        check_project_alerts.apply_async(
+            kwargs={'project_id': project_id},
             expires=120,
         )
 
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 1be17308cb..5e53b84a3b 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -55,22 +55,23 @@ def post_process_group(group, event, is_new, is_regression, is_sample, **kwargs)
 
     project = Project.objects.get_from_cache(id=group.project_id)
 
-    child_kwargs = {
-        'event': event,
-        'is_new': is_new,
-        'is_regression': is_regression,
-        'is_sample': is_sample,
-    }
-
     if settings.SENTRY_ENABLE_EXPLORE_CODE:
-        record_affected_code.delay(group=group, event=event)
+        record_affected_code.delay(event=event)
 
     if settings.SENTRY_ENABLE_EXPLORE_USERS:
-        record_affected_user.delay(group=group, event=event)
+        record_affected_user.delay(event=event)
 
     for plugin in plugins.for_project(project):
-        plugin_post_process_group.delay(
-            plugin.slug, group=group, **child_kwargs)
+        plugin_post_process_group.apply_async(
+            kwargs={
+                'plugin_slug': plugin.slug,
+                'event': event,
+                'is_new': is_new,
+                'is_regresion': is_regression,
+                'is_sample': is_sample,
+            },
+            expires=120,
+        )
 
     for rule in get_rules(project):
         match = rule.data.get('action_match', 'all')
@@ -132,10 +133,13 @@ def post_process_group(group, event, is_new, is_regression, is_sample, **kwargs)
             ).update(status=STATUS_INACTIVE)
 
         if passed:
-            execute_rule.delay(
-                rule_id=rule.id,
-                event=event,
-                state=state,
+            execute_rule.apply_async(
+                kwargs={
+                    'rule_id': rule.id,
+                    'event': event,
+                    'state': state,
+                },
+                expires=120,
             )
 
 
@@ -165,17 +169,17 @@ def execute_rule(rule_id, event, state):
 @instrumented_task(
     name='sentry.tasks.post_process.plugin_post_process_group',
     stat_suffix=lambda plugin_slug, *a, **k: plugin_slug)
-def plugin_post_process_group(plugin_slug, group, **kwargs):
+def plugin_post_process_group(plugin_slug, event, **kwargs):
     """
     Fires post processing hooks for a group.
     """
     plugin = plugins.get(plugin_slug)
-    safe_execute(plugin.post_process, group=group, **kwargs)
+    safe_execute(plugin.post_process, event=event, group=event.group, **kwargs)
 
 
 @instrumented_task(
     name='sentry.tasks.post_process.record_affected_user')
-def record_affected_user(group, event, **kwargs):
+def record_affected_user(event, **kwargs):
     from sentry.models import Group
 
     if not settings.SENTRY_ENABLE_EXPLORE_USERS:
@@ -187,7 +191,7 @@ def record_affected_user(group, event, **kwargs):
 
     user_data = event.data.get('sentry.interfaces.User', {})
 
-    Group.objects.add_tags(group, [
+    Group.objects.add_tags(event.group, [
         ('sentry:user', user_ident, {
             'id': user_data.get('id'),
             'email': user_data.get('email'),
@@ -200,7 +204,7 @@ def record_affected_user(group, event, **kwargs):
 
 @instrumented_task(
     name='sentry.tasks.post_process.record_affected_code')
-def record_affected_code(group, event, **kwargs):
+def record_affected_code(event, **kwargs):
     from sentry.models import Group
 
     if not settings.SENTRY_ENABLE_EXPLORE_CODE:
@@ -241,4 +245,4 @@ def record_affected_code(group, event, **kwargs):
                 ))
 
     if tags:
-        Group.objects.add_tags(group, tags)
+        Group.objects.add_tags(event.group, tags)
diff --git a/tests/sentry/tasks/check_alerts/tests.py b/tests/sentry/tasks/check_alerts/tests.py
index 1a4f7661fc..3a8fac7b49 100644
--- a/tests/sentry/tasks/check_alerts/tests.py
+++ b/tests/sentry/tasks/check_alerts/tests.py
@@ -22,9 +22,9 @@ class CheckAlertsTest(BaseTestCase):
 
         check_alerts()
 
-        check_project_alerts.delay.assert_any_call(
-            project_id=project.id,
-            expires=120
+        check_project_alerts.apply_async.assert_any_call(
+            kwargs=dict(project_id=project.id),
+            expires=120,
         )
 
 
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index ccdf68f5d4..9b6eaf52f0 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -41,7 +41,6 @@ class PostProcessGroupTest(TestCase):
             )
 
         mock_record_affected_code.delay.assert_called_once_with(
-            group=group,
             event=event,
         )
 
@@ -72,7 +71,6 @@ class PostProcessGroupTest(TestCase):
             )
 
         mock_record_affected_user.delay.assert_called_once_with(
-            group=group,
             event=event,
         )
 
@@ -105,7 +103,7 @@ class PostProcessGroupTest(TestCase):
 
         mock_get_rules.assert_called_once_with(self.project)
 
-        assert not mock_execute_rule.delay.called
+        assert not mock_execute_rule.apply_async.called
 
         post_process_group(
             group=group,
@@ -115,7 +113,7 @@ class PostProcessGroupTest(TestCase):
             is_sample=False,
         )
 
-        assert len(mock_execute_rule.delay.mock_calls) == 1
+        assert len(mock_execute_rule.apply_async.mock_calls) == 1
 
         post_process_group(
             group=group,
@@ -125,7 +123,7 @@ class PostProcessGroupTest(TestCase):
             is_sample=False,
         )
 
-        assert len(mock_execute_rule.delay.mock_calls) == 2
+        assert len(mock_execute_rule.apply_async.mock_calls) == 2
 
 
 class ExecuteRuleTest(TestCase):
@@ -173,7 +171,7 @@ class RecordAffectedUserTest(TestCase):
         })
 
         with patch.object(Group.objects, 'add_tags') as add_tags:
-            record_affected_user(group=event.group, event=event)
+            record_affected_user(event=event)
 
             add_tags.assert_called_once(event.group, [
                 ('sentry:user', 'email:foo@example.com', {
@@ -204,7 +202,7 @@ class RecordAffectedCodeTest(TestCase):
         })
 
         with patch.object(Group.objects, 'add_tags') as add_tags:
-            record_affected_code(group=event.group, event=event)
+            record_affected_code(event=event)
 
             add_tags.assert_called_once_with(event.group, [
                 ('sentry:filename', '1effb24729ae4c43efa36b460511136a', {
