commit 7823ddb6476b31bf77892cd6427eceb9d8fec9e8
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Mon Jul 22 21:19:30 2019 +0200

    feat(typescript): Add TypeScript compatibility (#13786)
    
    Updates tsconfig with allowJs: false and noImplicityAny: false.
    This prevents the TypeScript engine from processing *.jsx files and makes it easier to import jsx files in TypeScript code. Once we have migrated more code to *.tsx we should look into turning `noImplicitAny` back to true.
    
    This migrates the following code to TypeScript
    - All Discover functionality
    - Some utility functions

diff --git a/package.json b/package.json
index 9e7f24ad42..5b65ef9e23 100644
--- a/package.json
+++ b/package.json
@@ -22,7 +22,14 @@
     "@sentry/integrations": "^5.4.2",
     "@sentry/typescript": "^5.3.0",
     "@types/lodash": "^4.14.134",
-    "@types/react-dom": "^16.8.4",
+    "@types/moment-timezone": "^0.5.12",
+    "@types/papaparse": "^4.5.11",
+    "@types/react": "^16.7.0",
+    "@types/react-bootstrap": "^0.32.19",
+    "@types/react-document-title": "^2.0.3",
+    "@types/react-dom": "^16.7.0",
+    "@types/react-router": "^3.0.20",
+    "@types/react-virtualized": "^9.20.1",
     "algoliasearch": "^3.32.0",
     "babel-core": "^7.0.0-bridge.0",
     "babel-loader": "^8.0.0",
diff --git a/src/sentry/static/sentry/app/constants/chartPalette.jsx b/src/sentry/static/sentry/app/constants/chartPalette.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/constants/chartPalette.jsx
rename to src/sentry/static/sentry/app/constants/chartPalette.tsx
diff --git a/src/sentry/static/sentry/app/styles/space.jsx b/src/sentry/static/sentry/app/styles/space.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/styles/space.jsx
rename to src/sentry/static/sentry/app/styles/space.tsx
index 5ef2c47f35..08d71bb5f4 100644
--- a/src/sentry/static/sentry/app/styles/space.jsx
+++ b/src/sentry/static/sentry/app/styles/space.tsx
@@ -1,4 +1,4 @@
-const space = size => {
+const space = (size: number): string => {
   switch (size) {
     //Our spacing scale is based on a base unit of 8
     //We use a case switch to prevent odd numbers, decimals, and big numbers.
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.tsx
similarity index 67%
rename from src/sentry/static/sentry/app/utils/theme.jsx
rename to src/sentry/static/sentry/app/utils/theme.tsx
index e20b677466..09ae3d64fc 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -1,8 +1,6 @@
 import CHART_PALETTE from 'app/constants/chartPalette';
 
-const theme = {
-  breakpoints: ['768px', '992px', '1200px'],
-
+const colors = {
   // Colors
   offWhite: '#FAF9FB',
   offWhite2: '#E7E1EC',
@@ -71,6 +69,107 @@ const theme = {
 
   background: '#fff',
   placeholderBackground: '#f5f5f5',
+};
+
+const warning = {
+  backgroundLight: colors.yellowLightest,
+  background: colors.yellowDarkest,
+  border: colors.yellowDark,
+  iconColor: colors.yellowDark,
+};
+
+const alert = {
+  muted: {
+    backgroundLight: colors.offWhite,
+    background: colors.gray1,
+    border: colors.gray6,
+  },
+  info: {
+    backgroundLight: colors.blueLightest,
+    border: colors.blueLight,
+    iconColor: colors.blue,
+    background: colors.blue,
+  },
+  warning,
+  //alias warn to warning
+  warn: warning,
+  success: {
+    backgroundLight: colors.greenLightest,
+    border: colors.green,
+    iconColor: colors.greenDark,
+    background: colors.green,
+  },
+  error: {
+    backgroundLight: colors.redLightest,
+    border: colors.redLight,
+    textLight: colors.redLight,
+    iconColor: colors.red,
+    background: colors.red,
+  },
+  beta: {
+    background: `linear-gradient(90deg, ${colors.pink}, ${colors.purple})`,
+  },
+};
+
+const aliases = {
+  textColor: colors.gray5,
+  success: colors.green,
+  error: colors.red,
+  disabled: colors.gray1,
+};
+
+const button = {
+  borderRadius: '3px',
+
+  default: {
+    color: '#2f2936',
+    colorActive: '#161319',
+    background: colors.white,
+    backgroundActive: colors.white,
+    border: '#d8d2de',
+    borderActive: '#c9c0d1',
+  },
+  primary: {
+    color: colors.white,
+    background: colors.purple,
+    backgroundActive: '#4e3fb4',
+    border: '#3d328e',
+    borderActive: '#352b7b',
+  },
+  success: {
+    color: colors.white,
+    background: '#3fa372',
+    backgroundActive: colors.green,
+    border: '#7ccca5',
+    borderActive: '#7ccca5',
+  },
+  danger: {
+    color: colors.white,
+    background: colors.red,
+    backgroundActive: '#bf2a1d',
+    border: '#bf2a1d',
+    borderActive: '#7d1c13',
+  },
+  link: {
+    color: colors.blue,
+    background: 'transparent',
+    // border: '#3d328e',
+    backgroundActive: 'transparent',
+    // borderActive: '#352b7b',
+  },
+  disabled: {
+    color: aliases.disabled,
+    border: '#e3e5e6',
+    borderActive: '#e3e5e6',
+    background: colors.white,
+    backgroundActive: colors.white,
+  },
+};
+
+const theme = {
+  breakpoints: ['768px', '992px', '1200px'],
+
+  ...colors,
 
   // Try to keep these ordered plz
   zIndex: {
@@ -142,123 +241,36 @@ const theme = {
     lineHeightHeading: '1.15',
     lineHeightBody: '1.4',
   },
-};
 
-// Aliases
-theme.textColor = theme.gray5;
-theme.success = theme.green;
-theme.error = theme.red;
-theme.disabled = theme.gray1;
+  // Aliases
+  ...aliases,
 
-theme.alert = {
-  muted: {
-    backgroundLight: theme.offWhite,
-    background: theme.gray1,
-    border: theme.gray6,
-  },
-  info: {
-    backgroundLight: theme.blueLightest,
-    border: theme.blueLight,
-    iconColor: theme.blue,
-    background: theme.blue,
-  },
-  warning: {
-    backgroundLight: theme.yellowLightest,
-    background: theme.yellowDarkest,
-    border: theme.yellowDark,
-    iconColor: theme.yellowDark,
-  },
-  success: {
-    backgroundLight: theme.greenLightest,
-    border: theme.green,
-    iconColor: theme.greenDark,
-    background: theme.green,
-  },
-  error: {
-    backgroundLight: theme.redLightest,
-    border: theme.redLight,
-    textLight: theme.redLight,
-    iconColor: theme.red,
-    background: theme.red,
-  },
-  beta: {
-    background: `linear-gradient(90deg, ${theme.pink}, ${theme.purple})`,
-  },
-};
+  alert,
+  button,
 
-//alias warn to warning
-theme.alert.warn = theme.alert.warning;
+  charts: {
+    colors: CHART_PALETTE[CHART_PALETTE.length - 1],
 
-theme.button = {
-  borderRadius: '3px',
+    // We have an array that maps `number + 1` --> list of `number` colors
+    getColorPalette: (length: number) =>
+      CHART_PALETTE[Math.min(CHART_PALETTE.length - 1, length + 1)],
 
-  default: {
-    color: '#2f2936',
-    colorActive: '#161319',
-    background: theme.white,
-    backgroundActive: theme.white,
-    border: '#d8d2de',
-    borderActive: '#c9c0d1',
+    previousPeriod: colors.gray1,
+    symbolSize: 6,
   },
-  primary: {
-    color: theme.white,
-    background: theme.purple,
-    backgroundActive: '#4e3fb4',
-    border: '#3d328e',
-    borderActive: '#352b7b',
-  },
-  success: {
-    color: theme.white,
-    background: '#3fa372',
-    backgroundActive: theme.green,
-    border: '#7ccca5',
-    borderActive: '#7ccca5',
-  },
-  danger: {
-    color: theme.white,
-    background: theme.red,
-    backgroundActive: '#bf2a1d',
-    border: '#bf2a1d',
-    borderActive: '#7d1c13',
-  },
-  link: {
-    color: theme.blue,
-    background: 'transparent',
-    // border: '#3d328e',
-    backgroundActive: 'transparent',
-    // borderActive: '#352b7b',
-  },
-  disabled: {
-    color: theme.disabled,
-    border: '#e3e5e6',
-    borderActive: '#e3e5e6',
-    background: theme.white,
-    backgroundActive: theme.white,
-  },
-};
-
-theme.charts = {
-  colors: CHART_PALETTE[CHART_PALETTE.length - 1],
 
-  // We have an array that maps `number + 1` --> list of `number` colors
-  getColorPalette: length =>
-    CHART_PALETTE[Math.min(CHART_PALETTE.length - 1, length + 1)],
-
-  previousPeriod: theme.gray1,
-  symbolSize: 6,
-};
-
-theme.diff = {
-  removedRow: '#fcefee',
-  addedRow: '#f5fbf8',
-  removed: '#f7ceca',
-  added: '#d8f0e4',
-};
+  diff: {
+    removedRow: '#fcefee',
+    addedRow: '#f5fbf8',
+    removed: '#f7ceca',
+    added: '#d8f0e4',
+  },
 
-// Similarity spectrum used in "Similar Issues" in group details
-theme.similarity = {
-  empty: '#e2dee6',
-  colors: ['#ec5e44', '#f38259', '#f9a66d', '#98b480', '#57be8c'],
+  // Similarity spectrum used in "Similar Issues" in group details
+  similarity: {
+    empty: '#e2dee6',
+    colors: ['#ec5e44', '#f38259', '#f9a66d', '#98b480', '#57be8c'],
+  },
 };
 
 export default theme;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.tsx
similarity index 75%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.tsx
index 9ff5f54c70..1fb73aa649 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.tsx
@@ -1,29 +1,37 @@
 import React from 'react';
 import {Value} from 'react-select';
-import PropTypes from 'prop-types';
 
-import SelectControl from 'app/components/forms/selectControl';
 import {t} from 'app/locale';
+import SelectControl from 'app/components/forms/selectControl';
 
 import {getInternal, getExternal} from './utils';
+import {Aggregation, DiscoverBaseProps, ReactSelectOption} from '../types';
 import {PlaceholderText} from '../styles';
 import {ARRAY_FIELD_PREFIXES} from '../data';
 
-export default class Aggregation extends React.Component {
-  static propTypes = {
-    value: PropTypes.array.isRequired,
-    onChange: PropTypes.func.isRequired,
-    columns: PropTypes.array.isRequired,
-    disabled: PropTypes.bool,
-  };
+type AggregationProps = DiscoverBaseProps & {
+  value: Aggregation;
+  onChange: (value: Aggregation) => void;
+};
 
-  constructor(props) {
-    super(props);
-    this.state = {
-      inputValue: '',
-      isOpen: false,
-    };
-  }
+type AggregationState = {
+  inputValue: string;
+  isOpen: boolean;
+};
+
+const initalState = {
+  inputValue: '',
+  isOpen: false,
+};
+
+export default class AggregationRow extends React.Component<
+  AggregationProps,
+  AggregationState
+> {
+  // This is the ref of the inner react-select component
+  private select: any;
+
+  state = initalState;
 
   getOptions() {
     const currentValue = getInternal(this.props.value);
@@ -34,7 +42,7 @@ export default class Aggregation extends React.Component {
   filterOptions = () => {
     const input = this.state.inputValue;
 
-    let optionList = [
+    let optionList: Array<ReactSelectOption> = [
       {value: 'count', label: 'count'},
       {value: 'uniq', label: 'uniq(...)'},
       {value: 'avg', label: 'avg(...)'},
@@ -65,7 +73,7 @@ export default class Aggregation extends React.Component {
     this.select.focus();
   }
 
-  handleChange = option => {
+  handleChange = (option: ReactSelectOption) => {
     if (option.value === 'uniq' || option.value === 'avg') {
       this.setState({inputValue: option.value}, this.focus);
     } else {
@@ -83,12 +91,14 @@ export default class Aggregation extends React.Component {
     }
   };
 
-  inputRenderer = props => {
-    const onChange = evt => {
-      if (evt.target.value === '') {
+  inputRenderer = (props: AggregationProps) => {
+    const onChange = (evt: any) => {
+      if (evt && evt.target && evt.target.value === '') {
         // React select won't trigger an onChange event when a value is completely
         // cleared, so we'll force this before calling onChange
-        this.setState({inputValue: evt.target.value}, props.onChange(evt));
+        this.setState({inputValue: evt.target.value}, () => {
+          props.onChange(evt);
+        });
       } else {
         props.onChange(evt);
       }
@@ -105,7 +115,7 @@ export default class Aggregation extends React.Component {
     );
   };
 
-  valueComponent = props => {
+  valueComponent = (props: AggregationProps) => {
     if (this.state.isOpen) {
       return null;
     }
@@ -113,7 +123,7 @@ export default class Aggregation extends React.Component {
     return <Value {...props} />;
   };
 
-  handleInputChange = value => {
+  handleInputChange = (value: string) => {
     this.setState({
       inputValue: value,
     });
@@ -123,7 +133,7 @@ export default class Aggregation extends React.Component {
     return (
       <div>
         <SelectControl
-          innerRef={ref => (this.select = ref)}
+          innerRef={(ref: any) => (this.select = ref)}
           value={getInternal(this.props.value)}
           placeholder={
             <PlaceholderText>{t('Add aggregation function...')}</PlaceholderText>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.tsx
similarity index 70%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.tsx
index 2a9051e29f..53d8a6445b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.tsx
@@ -1,32 +1,32 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 
-import Link from 'app/components/links/link';
-import InlineSvg from 'app/components/inlineSvg';
 import {t} from 'app/locale';
 
-import Aggregation from './aggregation';
+import InlineSvg from 'app/components/inlineSvg';
+import Link from 'app/components/links/link';
+
+import AggregationRow from './aggregation';
 import {PlaceholderText, SelectListItem, AddText, SidebarLabel} from '../styles';
+import {Aggregation, DiscoverBaseProps} from '../types';
 
-export default class Aggregations extends React.Component {
-  static propTypes = {
-    value: PropTypes.array.isRequired,
-    onChange: PropTypes.func.isRequired,
-    columns: PropTypes.array,
-    disabled: PropTypes.bool,
-  };
+type AggregationsProps = DiscoverBaseProps & {
+  value: Aggregation[];
+  onChange: (value: Aggregation[]) => void;
+};
 
+export default class Aggregations extends React.Component<AggregationsProps> {
   addRow() {
-    this.props.onChange([...this.props.value, [null, null, null]]);
+    const aggregations: any[] = [...this.props.value, [null, null, null]];
+    this.props.onChange(aggregations);
   }
 
-  removeRow(idx) {
+  removeRow(idx: number) {
     const aggregations = this.props.value.slice();
     aggregations.splice(idx, 1);
     this.props.onChange(aggregations);
   }
 
-  handleChange(val, idx) {
+  handleChange(val: Aggregation, idx: number) {
     const aggregations = this.props.value.slice();
 
     aggregations[idx] = val;
@@ -52,9 +52,9 @@ export default class Aggregations extends React.Component {
         )}
         {value.map((aggregation, idx) => (
           <SelectListItem key={`${idx}_${aggregation[2]}`}>
-            <Aggregation
+            <AggregationRow
               value={aggregation}
-              onChange={val => this.handleChange(val, idx)}
+              onChange={(val: Aggregation) => this.handleChange(val, idx)}
               columns={columns}
               disabled={disabled}
             />
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.tsx
similarity index 56%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.tsx
index 027efeefd2..bf3b34a919 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.tsx
@@ -1,13 +1,15 @@
+import {Column, Aggregation} from '../types';
+
 /**
  * Returns true if an aggregation is valid and false if not
  *
- * @param {Array} aggregation Aggregation in external Snuba format
- * @param {Object} cols List of column objects
- * @param {String} cols.name Column name
- * @param {String} cols.type Type of column
- * @returns {Boolean} True if valid aggregation, false if not
+ * @param aggregation Aggregation in external Snuba format
+ * @param cols List of column objects
+ * @param cols.name Column name
+ * @param cols.type Type of column
+ * @returns True if valid aggregation, false if not
  */
-export function isValidAggregation(aggregation, cols) {
+export function isValidAggregation(aggregation: Aggregation, cols: Column[]): boolean {
   const columns = new Set(cols.map(({name}) => name));
   const [func, col] = aggregation;
 
@@ -16,18 +18,18 @@ export function isValidAggregation(aggregation, cols) {
   }
 
   if (func === 'count()') {
-    return col === null;
+    return !col;
   }
 
   if (func === 'uniq') {
-    return columns.has(col);
+    return columns.has(col || '');
   }
 
   if (func === 'avg') {
     const validCols = new Set(
       cols.filter(({type}) => type === 'number').map(({name}) => name)
     );
-    return validCols.has(col);
+    return validCols.has(col || '');
   }
 
   return false;
@@ -36,13 +38,13 @@ export function isValidAggregation(aggregation, cols) {
 /**
  * Converts aggregation from external Snuba format to internal format for dropdown
  *
- * @param {Array} external Aggregation in external Snuba format
- * @return {String} Aggregation in internal format
- **/
-export function getInternal(external) {
+ * @param external Aggregation in external Snuba format
+ * @return Aggregation in internal format
+ */
+export function getInternal(external: Aggregation): string {
   const [func, col] = external;
 
-  if (func === null) {
+  if (!func) {
     return '';
   }
 
@@ -66,10 +68,10 @@ export function getInternal(external) {
  * or a string with an underscore instead of square brackets for tags. We'll also
  * replace the characters `.`, `:` and `-` from aliases.
  *
- * @param {String} columnName Name of column
- * @return {String} Alias
+ * @param columnName Name of column
+ * @return Alias
  */
-function getAlias(columnName) {
+function getAlias(columnName: string): string {
   const tagMatch = columnName.match(/^tags\[(.+)]$/);
   return tagMatch
     ? `tags_${tagMatch[1].replace(/[.:-]/, '_')}`
@@ -79,27 +81,24 @@ function getAlias(columnName) {
 /**
  * Converts aggregation internal string format to external Snuba representation
  *
- * @param {String} internal Aggregation in internal format
- * @return {Array} Aggregation in external Snuba format
+ * @param internal Aggregation in internal format
+ * @return Aggregation in external Snuba format
  */
-export function getExternal(internal) {
+export function getExternal(internal: string): Aggregation {
   const uniqRegex = /^uniq\((.+)\)$/;
   const avgRegex = /^avg\((.+)\)$/;
 
-  if (internal === 'count') {
-    return ['count()', null, 'count'];
-  }
-
-  if (internal.match(uniqRegex)) {
-    const column = internal.match(uniqRegex)[1];
-
+  let match = internal.match(uniqRegex);
+  if (match && match[1]) {
+    const column = match[1];
     return ['uniq', column, `uniq_${getAlias(column)}`];
   }
 
-  if (internal.match(avgRegex)) {
-    const column = internal.match(avgRegex)[1];
+  match = internal.match(avgRegex);
+  if (match && match[1]) {
+    const column = match[1];
     return ['avg', column, `avg_${getAlias(column)}`];
   }
 
-  return internal;
+  return ['count()', null, 'count'];
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/analytics.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/analytics.tsx
similarity index 61%
rename from src/sentry/static/sentry/app/views/organizationDiscover/analytics.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/analytics.tsx
index f4d782a6c9..4326372cf8 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/analytics.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/analytics.tsx
@@ -1,4 +1,5 @@
 import {analytics} from 'app/utils/analytics';
+import {Organization, Query} from './types';
 
 /**
  * Takes an organization and query and tracks in Redash as discover.query.
@@ -8,8 +9,8 @@ import {analytics} from 'app/utils/analytics';
  * @param {Object} query Query that is sent to Snuba
  * @returns {Void}
  */
-export function trackQuery(organization, query) {
-  const data = {
+export function trackQuery(organization: Organization, query: Query) {
+  const data: Query & {org_id: number} = {
     org_id: parseInt(organization.id, 10),
     projects: query.projects,
     fields: query.fields,
@@ -21,13 +22,15 @@ export function trackQuery(organization, query) {
     data.limit = query.limit;
   }
 
-  data.conditions = query.conditions.map(condition => {
-    return [
-      condition[0],
-      condition[1],
-      typeof condition[2] === 'string' ? '[REDACTED]' : condition[2],
-    ];
-  });
+  data.conditions =
+    query.conditions &&
+    query.conditions.map(condition => {
+      return [
+        condition[0],
+        condition[1],
+        typeof condition[2] === 'string' ? '[REDACTED]' : condition[2],
+      ];
+    });
 
   analytics('discover.query', data);
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.tsx
similarity index 78%
rename from src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.tsx
index 0aed806923..206688a38a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.tsx
@@ -1,38 +1,45 @@
 import React from 'react';
 import {Value} from 'react-select';
-import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 import {t} from 'app/locale';
-import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
 
+import SelectControl from 'app/components/forms/selectControl';
+
 import {getInternal, getExternal, isValidCondition, ignoreCase} from './utils';
 import {CONDITION_OPERATORS, ARRAY_FIELD_PREFIXES} from '../data';
 import {PlaceholderText} from '../styles';
+import {DiscoverBaseProps, Condition, ReactSelectOption} from '../types';
 
-export default class Condition extends React.Component {
-  static propTypes = {
-    value: PropTypes.array.isRequired,
-    onChange: PropTypes.func.isRequired,
-    columns: PropTypes.arrayOf(
-      PropTypes.shape({name: PropTypes.string, type: PropTypes.string})
-    ).isRequired,
-    disabled: PropTypes.bool,
-  };
+type ConditionProps = DiscoverBaseProps & {
+  value: Condition;
+  onChange: (value: Condition) => void;
+};
 
-  constructor(props) {
-    super(props);
-    this.state = {
-      inputValue: '',
-      isOpen: false,
-    };
-  }
+type ConditionState = {
+  inputValue: string;
+  isOpen: boolean;
+};
+
+const initalState = {
+  inputValue: '',
+  isOpen: false,
+};
+
+export default class ConditionRow extends React.Component<
+  ConditionProps,
+  ConditionState
+> {
+  // This is the ref of the inner react-select component
+  private select: any;
+
+  state = initalState;
 
   focus() {
     this.select.focus();
   }
 
-  handleChange = option => {
+  handleChange = (option: ReactSelectOption) => {
     const external = getExternal(option.value, this.props.columns);
 
     if (isValidCondition(external, this.props.columns)) {
@@ -41,7 +48,9 @@ export default class Condition extends React.Component {
           inputValue: '',
           isOpen: false,
         },
-        this.props.onChange(external)
+        () => {
+          this.props.onChange(external);
+        }
       );
 
       return;
@@ -70,7 +79,7 @@ export default class Condition extends React.Component {
     return shouldDisplayValue ? [{label: currentValue, value: currentValue}] : [];
   }
 
-  getConditionsForColumn(colName) {
+  getConditionsForColumn(colName: string) {
     const column = this.props.columns.find(({name}) => name === colName);
     const colType = column ? column.type : 'string';
     const numberOnlyOperators = new Set(['>', '<', '>=', '<=']);
@@ -91,7 +100,7 @@ export default class Condition extends React.Component {
     });
   }
 
-  filterOptions = options => {
+  filterOptions = (options: ReactSelectOption[]) => {
     const input = this.state.inputValue;
 
     let optionList = options;
@@ -113,7 +122,7 @@ export default class Condition extends React.Component {
     }
 
     if (hasSelectedColumn && !hasSelectedOperator) {
-      const selectedColumn = external[0];
+      const selectedColumn = `${external[0]}`;
       optionList = this.getConditionsForColumn(selectedColumn).map(op => {
         const value = `${selectedColumn} ${op}`;
         return {
@@ -126,17 +135,19 @@ export default class Condition extends React.Component {
     return optionList.filter(({label}) => label.includes(input));
   };
 
-  isValidNewOption = ({label}) => {
+  isValidNewOption = ({label}: ReactSelectOption) => {
     label = ignoreCase(label);
     return isValidCondition(getExternal(label, this.props.columns), this.props.columns);
   };
 
-  inputRenderer = props => {
-    const onChange = evt => {
+  inputRenderer = (props: ConditionProps) => {
+    const onChange = (evt: any) => {
       if (evt.target.value === '') {
         // React select won't trigger an onChange event when a value is completely
         // cleared, so we'll force this before calling onChange
-        this.setState({inputValue: evt.target.value}, props.onChange(evt));
+        this.setState({inputValue: evt.target.value}, () => {
+          props.onChange(evt);
+        });
       } else {
         props.onChange(evt);
       }
@@ -153,7 +164,7 @@ export default class Condition extends React.Component {
     );
   };
 
-  valueComponent = props => {
+  valueComponent = (props: ConditionProps) => {
     if (this.state.inputValue) {
       return null;
     }
@@ -161,12 +172,12 @@ export default class Condition extends React.Component {
     return <Value {...props} />;
   };
 
-  shouldKeyDownEventCreateNewOption = keyCode => {
+  shouldKeyDownEventCreateNewOption = (keyCode: number) => {
     const createKeyCodes = new Set([13, 9]); // ENTER, TAB
     return createKeyCodes.has(keyCode);
   };
 
-  handleInputChange = value => {
+  handleInputChange = (value: string) => {
     this.setState({
       inputValue: ignoreCase(value),
     });
@@ -174,7 +185,7 @@ export default class Condition extends React.Component {
     return value;
   };
 
-  handleBlur = evt => {
+  handleBlur = (evt: any) => {
     const external = getExternal(evt.target.value, this.props.columns);
     const isValid = isValidCondition(external, this.props.columns);
     if (isValid) {
@@ -182,12 +193,14 @@ export default class Condition extends React.Component {
         {
           inputValue: '',
         },
-        this.props.onChange(external)
+        () => {
+          this.props.onChange(external);
+        }
       );
     }
   };
 
-  newOptionCreator = ({label, labelKey, valueKey}) => {
+  newOptionCreator = ({label, labelKey, valueKey}: any) => {
     label = ignoreCase(label);
     return {
       [valueKey]: label,
@@ -199,7 +212,7 @@ export default class Condition extends React.Component {
     return (
       <Box>
         <SelectControl
-          innerRef={ref => (this.select = ref)}
+          innerRef={(ref: any) => (this.select = ref)}
           value={getInternal(this.props.value)}
           placeholder={<PlaceholderText>{t('Add condition...')}</PlaceholderText>}
           options={this.getOptions()}
@@ -218,7 +231,7 @@ export default class Condition extends React.Component {
           onInputChange={this.handleInputChange}
           onBlur={this.handleBlur}
           creatable={true}
-          promptTextCreator={text => text}
+          promptTextCreator={(text: string) => text}
           shouldKeyDownEventCreateNewOption={this.shouldKeyDownEventCreateNewOption}
           disabled={this.props.disabled}
           newOptionCreator={this.newOptionCreator}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.tsx
index 7ffd80c05b..f32d671199 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/index.tsx
@@ -1,32 +1,30 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 
-import Link from 'app/components/links/link';
 import InlineSvg from 'app/components/inlineSvg';
 import {t} from 'app/locale';
+import Link from 'app/components/links/link';
 
-import Condition from './condition';
+import ConditionRow from './condition';
 import {PlaceholderText, SelectListItem, AddText, SidebarLabel} from '../styles';
+import {Condition, DiscoverBaseProps} from '../types';
 
-export default class Conditions extends React.Component {
-  static propTypes = {
-    value: PropTypes.arrayOf(PropTypes.array).isRequired,
-    onChange: PropTypes.func.isRequired,
-    columns: PropTypes.array.isRequired,
-    disabled: PropTypes.bool,
-  };
+type ConditionsProps = DiscoverBaseProps & {
+  value: Condition[];
+  onChange: (value: [any, any, any][]) => void;
+};
 
+export default class Conditions extends React.Component<ConditionsProps> {
   addRow() {
     this.props.onChange([...this.props.value, [null, null, null]]);
   }
 
-  removeRow(idx) {
+  removeRow(idx: number) {
     const conditions = this.props.value.slice();
     conditions.splice(idx, 1);
     this.props.onChange(conditions);
   }
 
-  handleChange(val, idx) {
+  handleChange(val: Condition, idx: number) {
     const conditions = this.props.value.slice();
 
     conditions[idx] = val;
@@ -52,9 +50,9 @@ export default class Conditions extends React.Component {
         )}
         {value.map((condition, idx) => (
           <SelectListItem key={`${idx}_${condition[2]}`}>
-            <Condition
+            <ConditionRow
               value={condition}
-              onChange={val => this.handleChange(val, idx)}
+              onChange={(val: Condition) => this.handleChange(val, idx)}
               columns={columns}
               disabled={disabled}
             />
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.tsx
similarity index 64%
rename from src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.tsx
index 387b0e4fcf..fede2108e9 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/utils.tsx
@@ -1,5 +1,6 @@
 import moment from 'moment';
 
+import {Column, Condition} from '../types';
 import {CONDITION_OPERATORS} from '../data';
 
 const specialConditions = new Set(['IS NULL', 'IS NOT NULL']);
@@ -7,23 +8,24 @@ const specialConditions = new Set(['IS NULL', 'IS NOT NULL']);
 /**
  * Returns true if a condition is valid and false if not
  *
- * @param {Array} condition Condition in external Snuba format
- * @param {Object} cols List of column objects
- * @param {String} cols.name Column name
- * @param {String} cols.type Type of column
- * @returns {Boolean} True if valid condition, false if not
+ * @param condition Condition in external Snuba format
+ * @param cols List of column objects
+ * @param cols.name Column name
+ * @param cols.type Type of column
+ * @returns True if valid condition, false if not
  */
-export function isValidCondition(condition, cols) {
+export function isValidCondition(condition: [any, any, any], cols: Column[]): boolean {
   const allOperators = new Set(CONDITION_OPERATORS);
   const columns = new Set(cols.map(({name}) => name));
 
-  const isColValid = columns.has(condition[0]);
-  const isOperatorValid = allOperators.has(condition[1]);
+  const isColValid = columns.has(condition[0] || '');
+  const isOperatorValid = allOperators.has(`${condition[1]}`);
 
-  const colType = (cols.find(col => col.name === condition[0]) || {}).type;
+  const foundCol = cols.find(col => col.name === condition[0]);
+  const colType = (foundCol && foundCol.type) || {};
 
   const isValueValid =
-    specialConditions.has(condition[1]) ||
+    specialConditions.has(`${condition[1]}`) ||
     (colType === 'datetime' && condition[2] !== null) ||
     colType === typeof condition[2];
 
@@ -33,24 +35,21 @@ export function isValidCondition(condition, cols) {
 /***
  * Converts external Snuba format to internal format for dropdown
  *
- * @param {Array} condition Condition in external Snuba format
- * @param {Array} cols List of columns with name and type e.g. {name: 'message', type: 'string}
- * @returns {String}
+ * @param external Condition in external Snuba format
  */
-export function getInternal(external) {
+export function getInternal(external: Condition): string {
   return external.join(' ').trim();
 }
 
 /***
  * Converts internal dropdown format to external Snuba format
  *
- * @param {String} internal Condition in internal format
- * @param {Array} {Array} cols List of columns with name and type e.g. {name: 'message', type: 'string}
+ * @param internal Condition in internal format
+ * @param cols List of columns with name and type e.g. {name: 'message', type: 'string}
  * @returns {Array} condition Condition in external Snuba format
  */
-export function getExternal(internal, columns) {
-  internal = internal || '';
-  const external = [null, null, null];
+export function getExternal(internal: string = '', columns: Column[]): Condition {
+  const external: [any, any, any] = [null, null, null];
 
   // Validate column
   const colValue = internal.split(' ')[0];
@@ -60,7 +59,7 @@ export function getExternal(internal, columns) {
 
   // Validate operator
   const remaining = (external[0] !== null
-    ? internal.replace(external[0], '')
+    ? internal.replace(external[0]!, '')
     : internal
   ).trim();
 
@@ -76,17 +75,18 @@ export function getExternal(internal, columns) {
   }
 
   // Validate value and convert to correct type
-  if (external[0] && external[1] && !specialConditions.has(external[1])) {
+  if (external[0] && external[1] && !specialConditions.has(`${external[1]}`)) {
     const strStart = `${external[0]} ${external[1]} `;
 
     if (internal.startsWith(strStart)) {
       external[2] = internal.replace(strStart, '');
     }
 
-    const type = columns.find(({name}) => name === colValue).type;
+    const foundCol = columns.find(({name}) => name === colValue);
+    const type = foundCol && foundCol.type;
 
     if (type === 'number') {
-      const num = parseInt(external[2], 10);
+      const num = parseInt(`${external[2]}`, 10);
       external[2] = !isNaN(num) ? num : null;
     }
 
@@ -100,7 +100,7 @@ export function getExternal(internal, columns) {
     }
 
     if (type === 'datetime') {
-      const date = moment.utc(external[2]);
+      const date = moment.utc(`${external[2]}`);
       external[2] = date.isValid() ? date.format('YYYY-MM-DDTHH:mm:ss') : null;
     }
   }
@@ -112,11 +112,10 @@ export function getExternal(internal, columns) {
  * Transform casing of condition operators to uppercase. Applies to the operators
  * IS NULL, IS NOT NULL, LIKE and NOT LIKE
  *
- * @param {String} input Condition string as input by user
- * @returns {String}
+ * @param input Condition string as input by user
  */
 
-export function ignoreCase(input = '') {
+export function ignoreCase(input: string = '') {
   const colName = input.split(' ')[0];
 
   // Strip column name from the start
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.tsx
similarity index 98%
rename from src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/data.tsx
index 2a2253f4fb..78aa684308 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.tsx
@@ -26,10 +26,9 @@ export const PROMOTED_TAGS = [
 ];
 
 // All tags are assumed to be strings, except the following
-export const SPECIAL_TAGS = {
-  os_rooted: TYPES.BOOLEAN,
+export const SPECIAL_TAGS: any = {
+  os_rooted: TYPES.DATETIME,
 };
-
 // Hide the following tags if they are returned from Snuba since these are
 // already mapped to user and release attributes
 export const HIDDEN_TAGS = ['sentry:user', 'sentry:release'];
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx
index 775fac58c4..7e4fd0d247 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.tsx
@@ -1,5 +1,4 @@
 import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
 import React from 'react';
 import moment from 'moment';
 
@@ -8,7 +7,6 @@ import {getUtcDateString} from 'app/utils/dates';
 import {t, tct} from 'app/locale';
 import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import PageHeading from 'app/components/pageHeading';
-import SentryTypes from 'app/sentryTypes';
 
 import {
   DiscoverContainer,
@@ -39,26 +37,38 @@ import ResultLoading from './result/loading';
 import SavedQueryList from './sidebar/savedQueryList';
 import createResultManager from './resultManager';
 
-export default class OrganizationDiscover extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-    location: PropTypes.object.isRequired,
-    queryBuilder: PropTypes.object.isRequired,
-    // savedQuery and isEditingSavedQuery are provided if it's a saved query
-    savedQuery: SentryTypes.DiscoverSavedQuery,
-    isEditingSavedQuery: PropTypes.bool,
-    updateSavedQueryData: PropTypes.func.isRequired,
-    view: PropTypes.oneOf(['query', 'saved']),
-    toggleEditMode: PropTypes.func.isRequired,
-    isLoading: PropTypes.bool.isRequired,
-    utc: PropTypes.bool,
-  };
-
+import {Organization, SavedQuery} from './types';
+
+type Props = {
+  organization: Organization;
+  location: any;
+  params: any;
+  queryBuilder: any;
+  // savedQuery is not null if it's a saved query
+  savedQuery: SavedQuery | null;
+  isEditingSavedQuery: boolean;
+  updateSavedQueryData: (q: SavedQuery) => void;
+  view: string;
+  toggleEditMode: () => void;
+  isLoading: boolean;
+  utc: boolean;
+};
+
+type State = {
+  resultManager: any;
+  data: any;
+  isFetchingQuery: boolean;
+  isEditingSavedQuery: boolean;
+  savedQueryName: string | null;
+  view: string;
+};
+
+export default class OrganizationDiscover extends React.Component<Props, State> {
   static defaultProps = {
     utc: true,
   };
 
-  constructor(props) {
+  constructor(props: Props) {
     super(props);
     const resultManager = createResultManager(props.queryBuilder);
     this.state = {
@@ -71,7 +81,7 @@ export default class OrganizationDiscover extends React.Component {
     };
   }
 
-  componentWillReceiveProps(nextProps) {
+  componentWillReceiveProps(nextProps: Props) {
     const {
       queryBuilder,
       location: {search},
@@ -129,8 +139,8 @@ export default class OrganizationDiscover extends React.Component {
 
       // These props come from URL string, so will always be in UTC
       updateDateTime({
-        start: (start && new Date(moment.utc(start).local())) || null,
-        end: (end && new Date(moment.utc(end).local())) || null,
+        start: (start && new Date(moment.utc(start).local() as any)) || null,
+        end: (end && new Date(moment.utc(end).local() as any)) || null,
         period: range || null,
         utc: typeof utc !== 'undefined' ? utc : null,
       });
@@ -139,23 +149,33 @@ export default class OrganizationDiscover extends React.Component {
     }
   }
 
-  updateProjects = val => {
+  updateProjects = (val: number[]): void => {
     this.updateField('projects', val);
     updateProjects(val);
   };
 
-  getDateTimeFields = ({period, start, end, utc}) => ({
+  getDateTimeFields = ({
+    period,
+    start,
+    end,
+    utc,
+  }: {
+    period: string;
+    start: string;
+    end: string;
+    utc: boolean;
+  }) => ({
     range: period || null,
     utc: typeof utc !== 'undefined' ? utc : null,
     start: (start && getUtcDateString(start)) || null,
     end: (end && getUtcDateString(end)) || null,
   });
 
-  changeTime = datetime => {
+  changeTime = (datetime: any) => {
     this.updateFields(this.getDateTimeFields(datetime));
   };
 
-  updateDateTime = datetime => {
+  updateDateTime = (datetime: any) => {
     const {start, end, range, utc} = this.getDateTimeFields(datetime);
 
     updateDateTime({
@@ -168,23 +188,23 @@ export default class OrganizationDiscover extends React.Component {
   };
 
   // Called when global selection header changes dates
-  updateDateTimeAndRun = datetime => {
+  updateDateTimeAndRun = (datetime: any) => {
     this.updateDateTime(datetime);
     this.runQuery();
   };
 
-  updateField = (field, value) => {
+  updateField = (field: string, value: any) => {
     this.props.queryBuilder.updateField(field, value);
     this.forceUpdate();
   };
 
-  updateFields = query => {
+  updateFields = (query: any) => {
     Object.entries(query).forEach(([field, value]) => {
       this.updateField(field, value);
     });
   };
 
-  updateAndRunQuery = query => {
+  updateAndRunQuery = (query: any) => {
     this.updateFields(query);
     this.runQuery();
   };
@@ -198,11 +218,11 @@ export default class OrganizationDiscover extends React.Component {
 
     // Strip any invalid conditions and aggregations
     const {conditions, aggregations} = queryBuilder.getInternal();
-    const filteredConditions = conditions.filter(condition =>
+    const filteredConditions = conditions.filter((condition: [any, any, any]) =>
       isValidCondition(condition, queryBuilder.getColumns())
     );
 
-    const filteredAggregations = aggregations.filter(aggregation =>
+    const filteredAggregations = aggregations.filter((aggregation: [any, any, any]) =>
       isValidAggregation(aggregation, queryBuilder.getColumns())
     );
 
@@ -218,7 +238,7 @@ export default class OrganizationDiscover extends React.Component {
 
     resultManager
       .fetchAll()
-      .then(data => {
+      .then((data: any) => {
         const shouldRedirect = !this.props.params.savedQueryId;
 
         if (shouldRedirect) {
@@ -242,28 +262,28 @@ export default class OrganizationDiscover extends React.Component {
           isFetchingQuery: false,
         });
       })
-      .catch(err => {
+      .catch((err: any) => {
         const message = (err && err.message) || t('An error occurred');
         addErrorMessage(message);
         this.setState({isFetchingQuery: false});
       });
   };
 
-  onFetchPage = nextOrPrev => {
+  onFetchPage = (nextOrPrev: string) => {
     this.setState({isFetchingQuery: true});
     return this.state.resultManager
       .fetchPage(nextOrPrev)
-      .then(data => {
+      .then((data: any) => {
         this.setState({data, isFetchingQuery: false});
       })
-      .catch(err => {
+      .catch((err: any) => {
         const message = (err && err.message) || t('An error occurred');
         addErrorMessage(message);
         this.setState({isFetchingQuery: false});
       });
   };
 
-  toggleSidebar = view => {
+  toggleSidebar = (view: string) => {
     if (view !== this.state.view) {
       this.setState({view});
       browserHistory.replace({
@@ -298,11 +318,11 @@ export default class OrganizationDiscover extends React.Component {
     const {organization, savedQuery} = this.props;
     const {resultManager} = this.state;
 
-    deleteSavedQuery(organization, savedQuery.id)
+    deleteSavedQuery(organization, savedQuery!.id)
       .then(() => {
         addSuccessMessage(
           tct('Successfully deleted query [name]', {
-            name: savedQuery.name,
+            name: savedQuery!.name,
           })
         );
         resultManager.reset();
@@ -314,14 +334,14 @@ export default class OrganizationDiscover extends React.Component {
       });
   };
 
-  updateSavedQuery = name => {
+  updateSavedQuery = (name: string) => {
     const {queryBuilder, savedQuery, organization, toggleEditMode} = this.props;
     const query = queryBuilder.getInternal();
 
     const data = {...query, name};
 
-    updateSavedQuery(organization, savedQuery.id, data)
-      .then(resp => {
+    updateSavedQuery(organization, savedQuery!.id, data)
+      .then((resp: SavedQuery) => {
         addSuccessMessage(t('Updated query'));
         toggleEditMode(); // Return to read-only mode
         this.props.updateSavedQueryData(resp);
@@ -409,7 +429,6 @@ export default class OrganizationDiscover extends React.Component {
                 isFetchingQuery={isFetchingQuery}
                 onUpdateField={this.updateField}
                 onRunQuery={this.runQuery}
-                onReset={this.reset}
                 onDeleteQuery={this.deleteSavedQuery}
                 onSaveQuery={this.updateSavedQuery}
                 isLoading={isLoading}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/index.tsx
index 7defc6172a..c16db08020 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.tsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import {browserHistory} from 'react-router';
 import DocumentTitle from 'react-document-title';
 
@@ -7,9 +6,9 @@ import {getUserTimezone, getUtcToLocalDateObject} from 'app/utils/dates';
 import {t} from 'app/locale';
 import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
 import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
-import SentryTypes from 'app/sentryTypes';
 
 import Discover from './discover';
 import createQueryBuilder from './queryBuilder';
@@ -22,18 +21,28 @@ import {
 } from './utils';
 
 import {DiscoverWrapper} from './styles';
+import {GlobalSelection, Organization, SavedQuery} from './types';
 
-class OrganizationDiscoverContainer extends React.Component {
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-  };
+const AlertAsAny: any = Alert;
 
-  static propTypes = {
-    selection: PropTypes.object.isRequired,
-  };
+type Props = {
+  organization: Organization;
+  selection: GlobalSelection;
+  params: any;
+  location: any;
+};
+
+type State = {
+  isLoading: boolean;
+  savedQuery: SavedQuery | null;
+  view: string;
+};
+
+class OrganizationDiscoverContainer extends React.Component<Props, State> {
+  private queryBuilder: any;
 
-  constructor(props, context) {
-    super(props, context);
+  constructor(props: Props) {
+    super(props);
 
     this.state = {
       isLoading: true,
@@ -42,7 +51,7 @@ class OrganizationDiscoverContainer extends React.Component {
     };
 
     const {search} = props.location;
-    const {organization} = context;
+    const {organization} = props;
 
     const query = getQueryFromQueryString(search);
 
@@ -91,7 +100,7 @@ class OrganizationDiscoverContainer extends React.Component {
     }
   }
 
-  componentWillReceiveProps(nextProps) {
+  componentWillReceiveProps(nextProps: Props) {
     if (!nextProps.params.savedQueryId) {
       this.setState({savedQuery: null});
       // Reset querybuilder if we're switching from a saved query
@@ -125,11 +134,11 @@ class OrganizationDiscoverContainer extends React.Component {
     this.setState({isLoading: false});
   };
 
-  fetchSavedQuery = savedQueryId => {
-    const {organization} = this.context;
+  fetchSavedQuery = (savedQueryId: string) => {
+    const {organization} = this.props;
 
     return fetchSavedQuery(organization, savedQueryId)
-      .then(resp => {
+      .then((resp: any) => {
         if (this.queryBuilder) {
           this.queryBuilder.reset(parseSavedQuery(resp));
         } else {
@@ -147,12 +156,12 @@ class OrganizationDiscoverContainer extends React.Component {
       });
   };
 
-  updateSavedQuery = savedQuery => {
+  updateSavedQuery = (savedQuery: SavedQuery) => {
     this.setState({savedQuery});
   };
 
   toggleEditMode = () => {
-    const {organization} = this.context;
+    const {organization} = this.props;
     const {savedQuery} = this.state;
     const isEditingSavedQuery = this.props.location.query.editing === 'true';
 
@@ -164,21 +173,21 @@ class OrganizationDiscoverContainer extends React.Component {
     }
 
     browserHistory.push({
-      pathname: `/organizations/${organization.slug}/discover/saved/${savedQuery.id}/`,
+      pathname: `/organizations/${organization.slug}/discover/saved/${savedQuery!.id}/`,
       query: newQuery,
     });
   };
 
   renderNoAccess() {
-    return <Alert type="warning">{t("You don't have access to this feature")}</Alert>;
+    return (
+      <AlertAsAny type="warning">{t("You don't have access to this feature")}</AlertAsAny>
+    );
   }
 
   render() {
     const {isLoading, savedQuery, view} = this.state;
 
-    const {location, params, selection} = this.props;
-
-    const {organization} = this.context;
+    const {location, organization, params, selection} = this.props;
 
     return (
       <DocumentTitle title={`Discover - ${organization.slug} - Sentry`}>
@@ -209,5 +218,5 @@ class OrganizationDiscoverContainer extends React.Component {
   }
 }
 
-export default withGlobalSelection(OrganizationDiscoverContainer);
+export default withGlobalSelection(withOrganization(OrganizationDiscoverContainer));
 export {OrganizationDiscoverContainer};
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/intro.tsx
similarity index 90%
rename from src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/intro.tsx
index 5fc3aabddd..33019b8997 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/intro.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/intro.tsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 
 import {tct, t} from 'app/locale';
@@ -9,11 +8,11 @@ import Button from 'app/components/button';
 import {Panel} from 'app/components/panels';
 import space from 'app/styles/space';
 
-export default class Intro extends React.Component {
-  static propTypes = {
-    updateQuery: PropTypes.func.isRequired,
-  };
+type IntroProps = {
+  updateQuery: (query: any) => void;
+};
 
+export default class Intro extends React.Component<IntroProps> {
   getExampleQueries() {
     return [
       {
@@ -71,7 +70,12 @@ export default class Intro extends React.Component {
                   <ExampleQueryDescription>{description}</ExampleQueryDescription>
                 </div>
                 <div>
-                  <Button size="small" onClick={() => this.props.updateQuery(query)}>
+                  <Button
+                    size="small"
+                    onClick={() => {
+                      this.props.updateQuery(query);
+                    }}
+                  >
                     {t('Run')}
                   </Button>
                 </div>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.tsx
index d1778a5148..b221abb771 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.tsx
@@ -1,19 +1,20 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import Modal, {Header, Body, Footer} from 'react-bootstrap/lib/Modal';
 import Button from 'app/components/button';
-import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
+import {Organization} from './types';
 
-export default class MissingProjectWarningModal extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-    validProjects: PropTypes.arrayOf(PropTypes.number).isRequired,
-    invalidProjects: PropTypes.arrayOf(PropTypes.number).isRequired,
-    closeModal: PropTypes.func,
-  };
+type MissingProjectWarningModalProps = {
+  organization: Organization;
+  validProjects: number[];
+  invalidProjects: number[];
+  closeModal: () => void;
+};
 
-  renderProject(id) {
+export default class MissingProjectWarningModal extends React.Component<
+  MissingProjectWarningModalProps
+> {
+  renderProject(id: number) {
     const project = this.props.organization.projects.find(p => p.id === id.toString());
     return <li key={id}>{project ? project.slug : t(`Unknown project ${id}`)}</li>;
   }
@@ -29,7 +30,7 @@ export default class MissingProjectWarningModal extends React.Component {
            have access to.`);
 
     return (
-      <Modal show={true}>
+      <Modal show={true} onHide={() => {}}>
         <Header>{t('Project access')}</Header>
         <Body>
           <p>{text}</p>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx
index 540f47b22a..f982546fa2 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.tsx
@@ -12,6 +12,7 @@ import ConfigStore from 'app/stores/configStore';
 import MissingProjectWarningModal from './missingProjectWarningModal';
 import {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS, HIDDEN_TAGS} from './data';
 import {isValidAggregation} from './aggregations/utils';
+import {Aggregation, Column, Query, Project, Organization, SnubaResult} from './types';
 
 const API_LIMIT = 10000;
 
@@ -24,7 +25,7 @@ const DEFAULTS = {
   limit: 1000,
 };
 
-function applyDefaults(query) {
+function applyDefaults(query: any) {
   Object.entries(DEFAULTS).forEach(([key, value]) => {
     if (!(key in query)) {
       query[key] = value;
@@ -33,12 +34,28 @@ function applyDefaults(query) {
   return query;
 }
 
+export interface QueryBuilder {
+  load(): void;
+  getInternal: () => any;
+  getExternal: () => any;
+  updateField: (field: string, value: any) => void;
+  fetch: (data?: any, cursor?: string) => Promise<any>;
+  fetchWithoutLimit: (data?: any) => Promise<any>;
+  cancelRequests(): void;
+  getQueryByType(originalQuery: any, type: string): Query;
+  getColumns(): Column[];
+  reset(q: any): void;
+}
+
 /**
  * This function is responsible for storing and managing updates to query state,
  * It applies sensible defaults if query parameters are not provided on
  * initialization.
  */
-export default function createQueryBuilder(initial = {}, organization) {
+export default function createQueryBuilder(
+  initial = {},
+  organization: Organization
+): QueryBuilder {
   const api = new Client();
   let query = applyDefaults(initial);
 
@@ -58,7 +75,7 @@ export default function createQueryBuilder(initial = {}, organization) {
   );
 
   const columns = COLUMNS.map(col => ({...col, isTag: false}));
-  let tags = [];
+  let tags: Column[] = [];
 
   return {
     getInternal,
@@ -81,6 +98,10 @@ export default function createQueryBuilder(initial = {}, organization) {
    * @returns {Promise<Void>}
    */
   function load() {
+    type TagData = {
+      tags_key: string;
+    };
+
     return fetch({
       projects: projectsToFetchTags,
       fields: ['tags_key'],
@@ -89,16 +110,16 @@ export default function createQueryBuilder(initial = {}, organization) {
       range: '90d',
       turbo: true,
     })
-      .then(res => {
+      .then((res: SnubaResult) => {
         tags = res.data
-          .filter(tag => !HIDDEN_TAGS.includes(tag.tags_key))
-          .map(tag => {
-            const type = SPECIAL_TAGS[tags.tags_key] || 'string';
+          .filter((tag: TagData) => !HIDDEN_TAGS.includes(tag.tags_key))
+          .map((tag: TagData) => {
+            const type = SPECIAL_TAGS[tag.tags_key] || 'string';
             return {name: tag.tags_key, type, isTag: true};
           });
       })
-      .catch(err => {
-        tags = PROMOTED_TAGS.map(tag => {
+      .catch(() => {
+        tags = PROMOTED_TAGS.map((tag: string) => {
           const type = SPECIAL_TAGS[tag] || 'string';
           return {name: tag, type, isTag: true};
         });
@@ -160,11 +181,11 @@ export default function createQueryBuilder(initial = {}, organization) {
    * @param {*} value Value to update field to
    * @returns {Void}
    */
-  function updateField(field, value) {
+  function updateField(field: string, value: any) {
     query[field] = value;
 
     // Ignore non valid aggregations (e.g. user halfway inputting data)
-    const validAggregations = query.aggregations.filter(agg =>
+    const validAggregations = query.aggregations.filter((agg: Aggregation) =>
       isValidAggregation(agg, getColumns())
     );
 
@@ -173,7 +194,7 @@ export default function createQueryBuilder(initial = {}, organization) {
       getColumns().find(f => f.name === orderbyField) !== undefined;
     const hasOrderFieldInSelectedFields = query.fields.includes(orderbyField);
     const hasOrderFieldInAggregations = query.aggregations.some(
-      agg => orderbyField === agg[2]
+      (agg: Aggregation) => orderbyField === agg[2]
     );
 
     const hasInvalidOrderbyField = validAggregations.length
@@ -224,12 +245,12 @@ export default function createQueryBuilder(initial = {}, organization) {
     }
 
     return api
-      .requestPromise(endpoint, {includeAllArgs: true, method: 'POST', data})
+      .requestPromise(endpoint, {includeAllArgs: true, method: 'POST', data} as any)
       .then(([responseData, _, utils]) => {
         responseData.pageLinks = utils.getResponseHeader('Link');
         return responseData;
       })
-      .catch(err => {
+      .catch(() => {
         throw new Error(t('An error occurred'));
       });
   }
@@ -261,7 +282,7 @@ export default function createQueryBuilder(initial = {}, organization) {
       return Promise.reject(new Error('Start date cannot be after end date'));
     }
 
-    return api.requestPromise(endpoint, {method: 'POST', data}).catch(() => {
+    return api.requestPromise(endpoint, {method: 'POST', data} as any).catch(() => {
       throw new Error(t('Error with query'));
     });
   }
@@ -282,7 +303,7 @@ export default function createQueryBuilder(initial = {}, organization) {
    * @param {String} Type to fetch - currently either byDay or base
    * @returns {Object} Modified query to be run for that type
    */
-  function getQueryByType(originalQuery, type) {
+  function getQueryByType(originalQuery: any, type: string): Query {
     if (type === 'byDayQuery') {
       return {
         ...originalQuery,
@@ -296,7 +317,9 @@ export default function createQueryBuilder(initial = {}, organization) {
     // If id or issue.id is present in query fields, always fetch the project.id
     // so we can generate links
     if (type === 'baseQuery') {
-      return originalQuery.fields.some(field => field === 'id' || field === 'issue.id')
+      return (originalQuery.fields || []).some(
+        (field: string) => field === 'id' || field === 'issue.id'
+      )
         ? {
             ...originalQuery,
             fields: uniq([...originalQuery.fields, 'project.id']),
@@ -323,13 +346,13 @@ export default function createQueryBuilder(initial = {}, organization) {
    * @param {Object} [q] optional query to reset to
    * @returns {Void}
    */
-  function reset(q = {}) {
+  function reset(q: any) {
     const [validProjects, invalidProjects] = partition(q.projects || [], project =>
       defaultProjectIds.includes(project)
     );
 
     if (invalidProjects.length) {
-      openModal(deps => (
+      openModal((deps: any) => (
         <MissingProjectWarningModal
           organization={organization}
           validProjects={validProjects}
@@ -345,6 +368,6 @@ export default function createQueryBuilder(initial = {}, organization) {
   }
 }
 
-function getProjectIds(projects) {
+function getProjectIds(projects: Project[]) {
   return projects.map(project => parseInt(project.id, 10));
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/index.tsx
index eef1af4a53..8e247b1b8e 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.tsx
@@ -1,9 +1,7 @@
 import React from 'react';
 import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
 import {throttle} from 'lodash';
 
-import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
 import getDynamicText from 'app/utils/getDynamicText';
 import BarChart from 'app/components/charts/barChart';
@@ -37,18 +35,28 @@ import {
   getQueryFromQueryString,
   getQueryStringFromQuery,
 } from '../utils';
-
-class Result extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-    location: PropTypes.object.isRequired,
-    savedQuery: SentryTypes.DiscoverSavedQuery, // Provided if it's a saved search
-    onFetchPage: PropTypes.func.isRequired,
-    onToggleEdit: PropTypes.func,
-    utc: PropTypes.bool,
-  };
-
-  constructor(props) {
+import {SavedQuery} from '../types';
+
+type ResultProps = {
+  data: any;
+  location: any;
+  savedQuery: SavedQuery | null; // Provided if it's a saved search
+  onFetchPage: (nextOrPrev: string) => void;
+  onToggleEdit: () => void;
+  utc: boolean;
+};
+
+type ResultState = {
+  view: string;
+  height: number | null;
+  width: number | null;
+};
+
+class Result extends React.Component<ResultProps, ResultState> {
+  // This is the ref of the table container component
+  private container: any;
+
+  constructor(props: ResultProps) {
     super(props);
     this.state = {
       view: getVisualization(props.data, props.location.query.visualization),
@@ -61,7 +69,7 @@ class Result extends React.Component {
     window.addEventListener('resize', this.throttledUpdateDimensions);
   }
 
-  componentWillReceiveProps(nextProps) {
+  componentWillReceiveProps(nextProps: ResultProps) {
     const {data, location} = nextProps;
     const visualization = getVisualization(data, location.query.visualization);
 
@@ -82,7 +90,7 @@ class Result extends React.Component {
     window.removeEventListener('resize', this.throttledUpdateDimensions);
   }
 
-  setDimensions = ref => {
+  setDimensions = (ref: any) => {
     this.container = ref;
     if (ref && this.state.height === null) {
       this.updateDimensions();
@@ -102,7 +110,7 @@ class Result extends React.Component {
 
   throttledUpdateDimensions = throttle(this.updateDimensions, 200, {trailing: true});
 
-  handleToggleVisualizations = opt => {
+  handleToggleVisualizations = (opt: string) => {
     const {location} = this.props;
     this.setState({
       view: opt,
@@ -177,7 +185,7 @@ class Result extends React.Component {
     return (
       <React.Fragment>
         <PageHeading>
-          {getDynamicText({value: this.props.savedQuery.name, fixed: 'saved query'})}
+          {getDynamicText({value: this.props.savedQuery!.name, fixed: 'saved query'})}
         </PageHeading>
         <SavedQueryAction onClick={this.props.onToggleEdit}>
           <InlineSvg src="icon-edit" />
@@ -206,11 +214,11 @@ class Result extends React.Component {
       byDayQuery.data && getChartDataByDay(byDayQuery.data.data, byDayQuery.query);
 
     const legendData = byDayChartData
-      ? {data: byDayChartData.map(entry => entry.seriesName), truncate: 80}
+      ? {data: byDayChartData.map((entry: any) => entry.seriesName), truncate: 80}
       : null;
 
     const tooltipOptions = {
-      filter: value => value !== null,
+      filter: (value: any) => value !== null,
       truncate: 80,
     };
 
@@ -292,8 +300,12 @@ class Result extends React.Component {
               <Pagination
                 previous={baseQuery.previous}
                 next={baseQuery.next}
-                getNextPage={() => onFetchPage('next')}
-                getPreviousPage={() => onFetchPage('previous')}
+                getNextPage={() => {
+                  onFetchPage('next');
+                }}
+                getPreviousPage={() => {
+                  onFetchPage('previous');
+                }}
               />
             )}
           </ResultSummaryAndButtons>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/loading.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/loading.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/loading.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/loading.tsx
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.tsx
similarity index 72%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.tsx
index 32e475baab..5a709895e7 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/pagination.tsx
@@ -1,17 +1,16 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 
 import Button from 'app/components/button';
 
-export default class Pagination extends React.Component {
-  static propTypes = {
-    getNextPage: PropTypes.func.isRequired,
-    getPreviousPage: PropTypes.func.isRequired,
-    previous: PropTypes.string,
-    next: PropTypes.string,
-  };
+type PaginationProps = {
+  getNextPage: () => void;
+  getPreviousPage: () => void;
+  previous?: string | null;
+  next?: string | null;
+};
 
+export default class Pagination extends React.Component<PaginationProps> {
   render() {
     const {getPreviousPage, getNextPage, previous, next} = this.props;
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/table.tsx
index 578a8b2758..46ed391a93 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.tsx
@@ -1,9 +1,7 @@
 import React from 'react';
 import {MultiGrid, AutoSizer} from 'react-virtualized';
-import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 import {t} from 'app/locale';
-import SentryTypes from 'app/sentryTypes';
 import Link from 'app/components/links/link';
 import Tooltip from 'app/components/tooltip';
 import Panel from 'app/components/panels/panel';
@@ -11,6 +9,7 @@ import EmptyStateWarning from 'app/components/emptyStateWarning';
 import withOrganization from 'app/utils/withOrganization';
 
 import {getDisplayValue, getDisplayText} from './utils';
+import {Organization, Query, SnubaResult} from '../types';
 
 const TABLE_ROW_HEIGHT = 30;
 const TABLE_ROW_BORDER = 1;
@@ -22,20 +21,20 @@ const MIN_VISIBLE_ROWS = 6;
 const MAX_VISIBLE_ROWS = 30;
 const OTHER_ELEMENTS_HEIGHT = 70; // pagination buttons, query summary
 
+type Props = {
+  organization: Organization;
+  data: SnubaResult;
+  query: Query;
+  height?: number;
+  width?: number;
+};
+
 /**
  * Renders results in a table as well as a query summary (timing, rows returned)
  * from any Snuba result
  */
-class ResultTable extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-    data: PropTypes.object.isRequired,
-    query: PropTypes.object.isRequired,
-    height: PropTypes.number,
-    width: PropTypes.number,
-  };
-
-  componentDidUpdate(prevProps) {
+class ResultTable extends React.Component<Props> {
+  componentDidUpdate(prevProps: Props) {
     if (this.props.data.meta !== prevProps.data.meta) {
       this.grid.recomputeGridSize();
     }
@@ -45,7 +44,20 @@ class ResultTable extends React.Component {
     }
   }
 
-  getCellRenderer = cols => ({key, rowIndex, columnIndex, style}) => {
+  private grid: any;
+  private canvas: any;
+
+  getCellRenderer = (cols: any[]) => ({
+    key,
+    rowIndex,
+    columnIndex,
+    style,
+  }: {
+    key: string;
+    rowIndex: number;
+    columnIndex: number;
+    style: any;
+  }) => {
     const {
       data: {data, meta},
     } = this.props;
@@ -86,7 +98,7 @@ class ResultTable extends React.Component {
     );
   };
 
-  getEventLink = event => {
+  getEventLink = (event: {'project.id': string; id: string}) => {
     const {slug, projects} = this.props.organization;
     const projectSlug = projects.find(project => project.id === `${event['project.id']}`)
       .slug;
@@ -102,7 +114,7 @@ class ResultTable extends React.Component {
     );
   };
 
-  getIssueLink = event => {
+  getIssueLink = (event: any) => {
     const {slug} = this.props.organization;
     const basePath = `/organizations/${slug}/`;
 
@@ -120,13 +132,13 @@ class ResultTable extends React.Component {
   // rows of data. Since this might be expensive, we'll only do this if there\
   // are less than 20 columns of data to check in total.
   // Adds an empty column at the end with the remaining table width if any.
-  getColumnWidths = tableWidth => {
+  getColumnWidths = (tableWidth: number) => {
     const {
       data: {data},
     } = this.props;
     const cols = this.getColumnList();
 
-    const widths = [];
+    const widths: number[] = [];
 
     if (cols.length < 20) {
       cols.forEach(col => {
@@ -167,7 +179,7 @@ class ResultTable extends React.Component {
     return widths;
   };
 
-  getRowHeight = (rowIndex, columnsToCheck) => {
+  getRowHeight = (rowIndex: number, columnsToCheck: string[]) => {
     const {
       data: {data},
     } = this.props;
@@ -206,7 +218,7 @@ class ResultTable extends React.Component {
     return meta.filter(({name}) => fields.has(name));
   };
 
-  measureText = (text, isHeader) => {
+  measureText = (text: string, isHeader: boolean) => {
     // Create canvas once in order to measure column widths
     if (!this.canvas) {
       this.canvas = document.createElement('canvas');
@@ -220,7 +232,7 @@ class ResultTable extends React.Component {
     return Math.ceil(context.measureText(text).width) + 5;
   };
 
-  getMaxVisibleRows = elementHeight => {
+  getMaxVisibleRows = (elementHeight?: number) => {
     if (!elementHeight) {
       return MIN_VISIBLE_ROWS;
     }
@@ -259,12 +271,15 @@ class ResultTable extends React.Component {
               // Since calculating row height might be expensive, we'll only
               // perform the check against a subset of columns (where col width
               // has exceeded the max value)
-              const columnsToCheck = columnWidths.reduce((acc, colWidth, idx) => {
-                if (colWidth === MAX_COL_WIDTH) {
-                  acc.push(cols[idx].name);
-                }
-                return acc;
-              }, []);
+              const columnsToCheck: string[] = columnWidths.reduce(
+                (acc: string[], colWidth, idx) => {
+                  if (colWidth === MAX_COL_WIDTH) {
+                    acc.push(cols[idx].name);
+                  }
+                  return acc;
+                },
+                []
+              );
 
               return (
                 <MultiGrid
@@ -304,8 +319,8 @@ class ResultTable extends React.Component {
 export {ResultTable};
 export default withOrganization(ResultTable);
 
-const Grid = styled(({visibleRows, ...props}) => <div {...props} />)`
-  height: ${p =>
+const Grid = styled('div')`
+  height: ${(p: {visibleRows: number}) =>
     p.visibleRows * TABLE_ROW_HEIGHT_WITH_BORDER +
     2}px; /* cell height + cell border + top and bottom Panel border */
   overflow: hidden;
@@ -313,10 +328,10 @@ const Grid = styled(({visibleRows, ...props}) => <div {...props} />)`
   .ReactVirtualized__Grid {
     outline: none;
   }
-`;
+` as any;
 
 const Cell = styled('div')`
-  ${p => !p.isOddRow && `background-color: ${p.theme.whiteDark};`} ${p =>
+  ${(p: any) => !p.isOddRow && `background-color: ${p.theme.whiteDark};`} ${p =>
     `text-align: ${p.align};`} overflow: scroll;
   font-size: 14px;
   line-height: ${TABLE_ROW_HEIGHT}px;
@@ -332,7 +347,7 @@ const Cell = styled('div')`
   }
 
   -ms-overflow-style: -ms-autohiding-scrollbar;
-`;
+` as any;
 
 const TableHeader = styled(Cell)`
   background: ${p => p.theme.offWhite};
@@ -342,4 +357,4 @@ const TableHeader = styled(Cell)`
   &:first-of-type {
     border-top-left-radius: 3px;
   }
-`;
+` as any;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/utils.tsx
index 4392b26484..7b22a675df 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.tsx
@@ -3,6 +3,7 @@ import Papa from 'papaparse';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {Aggregation, Query, Result, SnubaResult} from '../types';
 import {NUMBER_OF_SERIES_BY_DAY} from '../data';
 
 const CHART_KEY = '__CHART_KEY__';
@@ -11,21 +12,21 @@ const CHART_KEY = '__CHART_KEY__';
  * Returns data formatted for basic line and bar charts, with each aggregation
  * representing a series.
  *
- * @param {Array} data Data returned from Snuba
- * @param {Object} query Query state corresponding to data
+ * @param data Data returned from Snuba
+ * @param query Query state corresponding to data
  * @returns {Array}
  */
-export function getChartData(data, query) {
+export function getChartData(data: any[], query: any) {
   const {fields} = query;
 
-  return query.aggregations.map(aggregation => {
+  return query.aggregations.map((aggregation: Aggregation) => {
     return {
       seriesName: aggregation[2],
       animation: false,
       data: data.map(res => {
         return {
           value: res[aggregation[2]],
-          name: fields.map(field => `${field} ${res[field]}`).join(' '),
+          name: fields.map((field: string) => `${field} ${res[field]}`).join(' '),
         };
       }),
     };
@@ -36,19 +37,26 @@ export function getChartData(data, query) {
  * Returns data formatted for widgets, with each aggregation representing a series.
  * Includes each aggregation's series relative percentage to total within that aggregation.
  *
- * @param {Array} data Data returned from Snuba
- * @param {Object} query Query state corresponding to data
- * @param {Object} options Options object
- * @param {Boolean} options.includePercentages Include percentages data
+ * @param data Data returned from Snuba
+ * @param query Query state corresponding to data
+ * @param options Options object
+ * @param options.includePercentages Include percentages data
  * @returns {Array}
  */
-export function getChartDataForWidget(data, query, options = {}) {
+type SeriesData = {
+  value: string;
+  name: string;
+  fieldValues: string[];
+  percentage?: number;
+};
+
+export function getChartDataForWidget(data: any[], query: Query, options: any = {}): any {
   const {fields} = query;
 
   const totalsBySeries = new Map();
 
   if (options.includePercentages) {
-    query.aggregations.forEach(aggregation => {
+    query.aggregations.forEach((aggregation: Aggregation) => {
       totalsBySeries.set(
         aggregation[2],
         data.reduce((acc, res) => {
@@ -59,15 +67,15 @@ export function getChartDataForWidget(data, query, options = {}) {
     });
   }
 
-  return query.aggregations.map(aggregation => {
+  return query.aggregations.map((aggregation: Aggregation) => {
     const total = options.includePercentages && totalsBySeries.get(aggregation[2]);
     return {
       seriesName: aggregation[2],
       data: data.map(res => {
-        const obj = {
+        const obj: SeriesData = {
           value: res[aggregation[2]],
-          name: fields.map(field => `${res[field]}`).join(', '),
-          fieldValues: fields.map(field => res[field]),
+          name: fields.map((field: string) => `${res[field]}`).join(', '),
+          fieldValues: fields.map((field: string) => res[field]),
         };
 
         if (options.includePercentages && total) {
@@ -91,7 +99,7 @@ export function getChartDataForWidget(data, query, options = {}) {
  * @param {Object} [options.fieldLabelMap] (default: false) Maps value from Snuba to a defined label
  * @returns {Array}
  */
-export function getChartDataByDay(rawData, query, options = {}) {
+export function getChartDataByDay(rawData: any[], query: Query, options: any = {}): any {
   // We only chart the first aggregation for now
   const aggregate = query.aggregations[0][2];
 
@@ -109,10 +117,10 @@ export function getChartDataByDay(rawData, query, options = {}) {
   const dates = [...new Set(rawData.map(entry => formatDate(entry.time)))].reverse();
 
   // Temporarily store series as object with series names as keys
-  const seriesHash = getEmptySeriesHash(top10Series, dates, options);
+  const seriesHash: any = getEmptySeriesHash(top10Series, dates);
 
   // Insert data into series if it's in a top 10 series
-  data.forEach(row => {
+  data.forEach((row: any) => {
     const key = row[CHART_KEY];
 
     const dateIdx = dates.indexOf(formatDate(row.time));
@@ -133,11 +141,10 @@ export function getChartDataByDay(rawData, query, options = {}) {
 
 /**
  * Given result data and the location query, return the correct visualization
- * @param {Object} data data object for result
- * @param {String} current visualization from querystring
- * @returns {String}
+ * @param data data object for result
+ * @param current visualization from querystring
  */
-export function getVisualization(data, current = 'table') {
+export function getVisualization(data: any, current = 'table'): string {
   const {baseQuery, byDayQuery} = data;
 
   if (!byDayQuery.data && ['line-by-day', 'bar-by-day'].includes(current)) {
@@ -158,7 +165,7 @@ export function getVisualization(data, current = 'table') {
  * @param {Object} baseQuery data
  * @returns {String}
  */
-export function getRowsPageRange(baseQuery) {
+export function getRowsPageRange(baseQuery: Result): string {
   const dataLength = baseQuery.data.data.length;
 
   if (!dataLength) {
@@ -173,17 +180,17 @@ export function getRowsPageRange(baseQuery) {
 
 // Return placeholder empty series object with all series and dates listed and
 // all values set to null
-function getEmptySeriesHash(seriesSet, dates, options = {}) {
-  const output = {};
+function getEmptySeriesHash(seriesSet: any, dates: number[]): any {
+  const output: any = {};
 
   [...seriesSet].forEach(series => {
-    output[series] = getEmptySeries(dates, options);
+    output[series] = getEmptySeries(dates);
   });
 
   return output;
 }
 
-function getEmptySeries(dates, options) {
+function getEmptySeries(dates: number[]) {
   return dates.map(date => {
     return {
       value: 0,
@@ -193,7 +200,11 @@ function getEmptySeries(dates, options) {
 }
 
 // Get the top series ranked by latest time / largest aggregate
-function getTopSeries(data, aggregate, limit = NUMBER_OF_SERIES_BY_DAY) {
+function getTopSeries(
+  data: any,
+  aggregate: string,
+  limit: number = NUMBER_OF_SERIES_BY_DAY
+): any {
   const allData = orderBy(data, ['time', aggregate], ['desc', 'desc']);
 
   const orderedData = [
@@ -208,7 +219,7 @@ function getTopSeries(data, aggregate, limit = NUMBER_OF_SERIES_BY_DAY) {
   return new Set(limit <= 0 ? orderedData : orderedData.slice(0, limit));
 }
 
-function getDataWithKeys(data, query, options = {}) {
+function getDataWithKeys(data: any[], query: Query, options = {}): any {
   const {aggregations, fields} = query;
   // We only chart the first aggregation for now
   const aggregate = aggregations[0][2];
@@ -231,14 +242,14 @@ function getDataWithKeys(data, query, options = {}) {
   });
 }
 
-function formatDate(datetime) {
+function formatDate(datetime: number): number {
   return datetime * 1000;
 }
 
 // Converts a value to a string for the chart label. This could
 // potentially cause incorrect grouping, e.g. if the value null and string
 // 'null' are both present in the same series they will be merged into 1 value
-function getLabel(value, options) {
+function getLabel(value: any, options: any): string {
   if (typeof value === 'object') {
     try {
       value = JSON.stringify(value);
@@ -260,11 +271,11 @@ function getLabel(value, options) {
  * the "discover" result table. Only expected to handle the 4 types that we
  * would expect to be present in Snuba data - string, number, null and array
  *
- * @param {*} val Value to display in table cell
- * @param {Number} idx Index if part of array
- * @returns {Object} Formatted cell contents
+ * @param val Value to display in table cell
+ * @param idx Index if part of array
+ * @returns Formatted cell contents
  */
-export function getDisplayValue(val, idx) {
+export function getDisplayValue(val: any, idx?: number): React.ReactElement {
   if (typeof val === 'string') {
     return <DarkGray key={idx}>{`"${val}"`}</DarkGray>;
   }
@@ -281,7 +292,7 @@ export function getDisplayValue(val, idx) {
     return (
       <span>
         [
-        {val.map(getDisplayValue).reduce((acc, curr, arrayIdx) => {
+        {val.map(getDisplayValue).reduce((acc: any, curr, arrayIdx) => {
           if (arrayIdx !== 0) {
             return [...acc, ',', curr];
           }
@@ -305,7 +316,7 @@ export function getDisplayValue(val, idx) {
  * @param {*} val Value to display in table cell
  * @returns {String} Cell contents as string
  */
-export function getDisplayText(val) {
+export function getDisplayText(val: any): string {
   if (typeof val === 'string') {
     return `"${val}"`;
   }
@@ -341,7 +352,7 @@ const DarkGray = styled('span')`
  * @param {String} result.meta Result metadata from Snuba
  * @returns {Void}
  */
-export function downloadAsCsv(result) {
+export function downloadAsCsv(result: SnubaResult) {
   const {meta, data} = result;
   const headings = meta.map(({name}) => name);
 
@@ -357,7 +368,7 @@ export function downloadAsCsv(result) {
   window.location.assign(encodedDataUrl);
 }
 
-function disableMacros(value) {
+function disableMacros(value: string | null | boolean | number) {
   const unsafeCharacterRegex = /^[\=\+\-\@]/;
 
   if (typeof value === 'string' && `${value}`.match(unsafeCharacterRegex)) {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.tsx
similarity index 72%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.tsx
index ee12851da9..21dd2cdb67 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.tsx
@@ -1,6 +1,4 @@
-import PropTypes from 'prop-types';
 import React from 'react';
-import classNames from 'classnames';
 import DropdownLink from 'app/components/dropdownLink';
 import MenuItem from 'app/components/menuItem';
 import {t} from 'app/locale';
@@ -12,20 +10,20 @@ import {
   DownloadCsvButton,
 } from '../styles';
 
-class VisualizationsToggle extends React.Component {
-  static propTypes = {
-    options: PropTypes.arrayOf(
-      PropTypes.shape({
-        id: PropTypes.string,
-        name: PropTypes.string,
-      })
-    ).isRequired,
-    handleChange: PropTypes.func.isRequired,
-    handleCsvDownload: PropTypes.func.isRequired,
-    visualization: PropTypes.string.isRequired,
-  };
+type Option = {
+  id: string;
+  name: string;
+};
+
+type Props = {
+  options: Option[];
+  handleChange: (id: string) => void;
+  handleCsvDownload: () => void;
+  visualization: string;
+};
 
-  getMenuItem = opt => {
+class VisualizationsToggle extends React.Component<Props> {
+  getMenuItem = (opt: Option) => {
     return (
       <MenuItem
         key={opt.id}
@@ -38,10 +36,10 @@ class VisualizationsToggle extends React.Component {
     );
   };
 
-  getButtonItems = opt => {
+  getButtonItems = (opt: Option) => {
     const active = opt.id === this.props.visualization;
     return (
-      <li key={opt.id} className={classNames({active})}>
+      <li key={opt.id} className={active ? 'active' : undefined}>
         <a onClick={() => this.props.handleChange(opt.id)}>{opt.name}</a>
       </li>
     );
@@ -58,7 +56,7 @@ class VisualizationsToggle extends React.Component {
 
   render() {
     const {options, visualization} = this.props;
-    const name = options.find(opt => opt.id === visualization).name;
+    const name = options.find(opt => opt.id === visualization)!.name;
     const dropdownTitle = t(`View: ${name}`);
 
     return (
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/resultManager.tsx
index c44363290c..41c841aef0 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.tsx
@@ -4,8 +4,8 @@
  */
 import parseLinkHeader from 'app/utils/parseLinkHeader';
 
-export default function createResultManager(queryBuilder) {
-  let data = getDefault();
+export default function createResultManager(queryBuilder: any): any {
+  let data: any = getDefault();
 
   return {
     getAll,
@@ -20,14 +20,14 @@ export default function createResultManager(queryBuilder) {
    * @param {String} pageToFetch
    * @returns {Promise<Object>}
    */
-  function fetchPage(pageToFetch) {
+  function fetchPage(pageToFetch: string): Promise<object> {
     const query = queryBuilder.getExternal();
     const baseQuery = queryBuilder.getQueryByType(query, 'baseQuery');
 
     const cursor = data.baseQuery[pageToFetch];
 
     if (cursor) {
-      return queryBuilder.fetch(baseQuery, cursor).then(resp => {
+      return queryBuilder.fetch(baseQuery, cursor).then((resp: any) => {
         data.baseQuery.current = cursor;
         data.baseQuery.query = query;
         data.baseQuery.data = resp;
@@ -93,11 +93,11 @@ export default function createResultManager(queryBuilder) {
    * @param {Object} pageLinks
    * @returns {Void}
    */
-  function updatePageLinks(pageLinks) {
+  function updatePageLinks(pageLinks: any): void {
     if (!pageLinks) {
       return;
     }
-    const links = parseLinkHeader(pageLinks);
+    const links: any = parseLinkHeader(pageLinks);
     data.baseQuery.next = links.next.results ? links.next.cursor : null;
     data.baseQuery.previous = links.previous.results ? links.previous.cursor : null;
   }
@@ -107,7 +107,7 @@ export default function createResultManager(queryBuilder) {
    *
    * @returns {Void}
    */
-  function reset() {
+  function reset(): void {
     data = getDefault();
   }
 
@@ -116,7 +116,7 @@ export default function createResultManager(queryBuilder) {
    *
    * @returns {Object}
    */
-  function getDefault() {
+  function getDefault(): any {
     return {
       baseQuery: {query: null, data: null, next: null, previous: null, current: null},
       byDayQuery: {query: null, data: null},
@@ -129,7 +129,7 @@ export default function createResultManager(queryBuilder) {
    *
    * @returns {Boolean}
    */
-  function shouldDisplayResult() {
+  function shouldDisplayResult(): boolean {
     return data.baseQuery.data !== null;
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.tsx
similarity index 78%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.tsx
index 6218b99caa..514d45d8bc 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/editSavedQuery.tsx
@@ -1,8 +1,6 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import {isEqual} from 'lodash';
 
-import SentryTypes from 'app/sentryTypes';
 import Button from 'app/components/button';
 import {t} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
@@ -15,27 +13,36 @@ import {
   QueryActionsGroup,
   SavedQueryAction,
 } from '../styles';
+import {QueryBuilder} from '../queryBuilder';
+import {SavedQuery} from '../types';
 
-export default class EditSavedQuery extends React.Component {
-  static propTypes = {
-    queryBuilder: PropTypes.object.isRequired,
-    onRunQuery: PropTypes.func.isRequired,
-    savedQuery: SentryTypes.DiscoverSavedQuery,
-    onUpdateField: PropTypes.func.isRequired,
-    onDeleteQuery: PropTypes.func.isRequired,
-    onSaveQuery: PropTypes.func.isRequired,
-    isFetchingQuery: PropTypes.bool.isRequired,
-    isLoading: PropTypes.bool.isRequired,
-  };
+type EditSavedQueryProps = {
+  queryBuilder: QueryBuilder;
+  onRunQuery: () => void;
+  savedQuery: SavedQuery;
+  onUpdateField: (field: string, value: any) => void;
+  onDeleteQuery: () => void;
+  onSaveQuery: (name: string) => void;
+  isFetchingQuery: boolean;
+  isLoading: boolean;
+};
 
-  constructor(props) {
+type EditSavedQueryState = {
+  savedQueryName: string;
+};
+
+export default class EditSavedQuery extends React.Component<
+  EditSavedQueryProps,
+  EditSavedQueryState
+> {
+  constructor(props: EditSavedQueryProps) {
     super(props);
     this.state = {
       savedQueryName: props.savedQuery.name,
     };
   }
 
-  handleUpdateName(savedQueryName) {
+  handleUpdateName(savedQueryName: string) {
     this.setState({savedQueryName});
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.tsx
similarity index 81%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.tsx
index 6f99b24023..4c55d9457c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/newQuery.tsx
@@ -1,11 +1,9 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
 
 import Button from 'app/components/button';
 import {t, tct} from 'app/locale';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
-import SentryTypes from 'app/sentryTypes';
 
 import QueryFields from './queryFields';
 import {createSavedQuery, generateQueryName} from '../utils';
@@ -15,25 +13,27 @@ import {
   QueryActionsGroup,
   QueryFieldsContainer,
 } from '../styles';
+import {Organization, SavedQuery} from '../types';
+import {QueryBuilder} from '../queryBuilder';
 
-export default class NewQuery extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization,
-    queryBuilder: PropTypes.object.isRequired,
-    onRunQuery: PropTypes.func.isRequired,
-    onReset: PropTypes.func.isRequired,
-    onUpdateField: PropTypes.func.isRequired,
-    isFetchingQuery: PropTypes.bool.isRequired,
-    isLoading: PropTypes.bool.isRequired,
-  };
+type NewQueryProps = {
+  organization: Organization;
+  queryBuilder: QueryBuilder;
+  onRunQuery: () => void;
+  onReset: () => void;
+  onUpdateField: (field: string, value: any) => void;
+  isFetchingQuery: boolean;
+  isLoading: boolean;
+};
 
+export default class NewQuery extends React.Component<NewQueryProps> {
   saveQuery() {
     const {organization, queryBuilder} = this.props;
     const savedQueryName = generateQueryName();
     const data = {...queryBuilder.getInternal(), name: savedQueryName};
 
     createSavedQuery(organization, data)
-      .then(savedQuery => {
+      .then((savedQuery: SavedQuery) => {
         addSuccessMessage(tct('Successfully saved query [name]', {name: savedQueryName}));
         browserHistory.push({
           pathname: `/organizations/${organization.slug}/discover/saved/${
@@ -42,7 +42,7 @@ export default class NewQuery extends React.Component {
           query: {editing: true},
         });
       })
-      .catch(err => {
+      .catch((err: any) => {
         const message = (err && err.detail) || t('Could not save query');
         addErrorMessage(message);
       });
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.tsx
similarity index 70%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.tsx
index 2fed5f8982..e08b5b157c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.tsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
@@ -6,46 +5,50 @@ import {t} from 'app/locale';
 import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
 import {SidebarLabel} from '../styles';
+import {ReactSelectOption} from '../types';
 
-export default class Orderby extends React.Component {
-  static propTypes = {
-    value: PropTypes.string.isRequired,
-    columns: PropTypes.array.isRequired,
-    onChange: PropTypes.func.isRequired,
-    disabled: PropTypes.bool,
-  };
+type OrderbyProps = {
+  columns: ReactSelectOption[];
+  disabled: boolean;
+  value: string;
+  onChange: (value: string) => void;
+};
 
-  updateField(field) {
+type OrderbyValue = {
+  direction: string;
+  field: string;
+};
+
+export default class Orderby extends React.Component<OrderbyProps> {
+  updateField(field: any) {
     const orderby = this.getInternal(this.props.value);
     orderby.field = field;
     this.props.onChange(this.getExternal(orderby));
   }
 
-  updateDirection(direction) {
+  updateDirection(direction: string) {
     const orderby = this.getInternal(this.props.value);
     orderby.direction = direction;
     this.props.onChange(this.getExternal(orderby));
   }
 
   /**
-   * @param {Object} value Object containing orderby information
-   * @returns {String}
+   * @param value Object containing orderby information
    */
-  getExternal(value) {
+  getExternal(value: OrderbyValue) {
     return `${value.direction === 'desc' ? '-' : ''}${value.field}`;
   }
 
   /**
-   * @param {String} value String containing orderby information
-   * @returns {Object}
+   * @param value String containing orderby information
    */
-  getInternal(value) {
+  getInternal(value: string) {
     const direction = value.startsWith('-') ? 'desc' : 'asc';
     const field = value.replace(/^-/, '');
     return {
       direction,
       field,
-    };
+    } as OrderbyValue;
   }
 
   render() {
@@ -62,7 +65,7 @@ export default class Orderby extends React.Component {
               name="orderbyField"
               options={columns}
               value={field}
-              onChange={val => this.updateField(val.value)}
+              onChange={(val: ReactSelectOption) => this.updateField(val.value)}
               disabled={disabled}
             />
           </OrderbyField>
@@ -71,7 +74,7 @@ export default class Orderby extends React.Component {
               name="orderbyDirection"
               options={[{value: 'asc', label: 'asc'}, {value: 'desc', label: 'desc'}]}
               value={direction}
-              onChange={val => this.updateDirection(val.value)}
+              onChange={(val: ReactSelectOption) => this.updateDirection(val.value)}
               disabled={disabled}
             />
           </OrderbyValue>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.tsx
index dd64a0ab76..8bb9af249d 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.tsx
@@ -1,8 +1,6 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
 import TextField from 'app/components/forms/textField';
 import NumberField from 'app/components/forms/numberField';
@@ -26,19 +24,21 @@ import {
 import Orderby from './orderby';
 import {NON_CONDITIONS_FIELDS} from '../data';
 import {getOrderbyFields} from '../utils';
+import {SavedQuery, ReactSelectOption} from '../types';
+import {QueryBuilder} from '../queryBuilder';
 
-export default class QueryFields extends React.Component {
-  static propTypes = {
-    queryBuilder: PropTypes.object.isRequired,
-    onUpdateField: PropTypes.func.isRequired,
-    actions: PropTypes.node.isRequired,
-    isLoading: PropTypes.bool.isRequired,
-    // savedQuery, savedQueryName, and onUpdateName are provided only when it's a saved search
-    savedQuery: SentryTypes.DiscoverSavedQuery,
-    savedQueryName: PropTypes.string,
-    onUpdateName: PropTypes.func,
-  };
+type QueryFieldsProps = {
+  queryBuilder: QueryBuilder;
+  onUpdateField: (filedType: string, value: any) => void;
+  actions: any;
+  isLoading: boolean;
+  // savedQuery, savedQueryName, and onUpdateName are provided only when it's a saved search
+  savedQuery?: SavedQuery;
+  savedQueryName?: string;
+  onUpdateName?: (name: string) => void;
+};
 
+export default class QueryFields extends React.Component<QueryFieldsProps> {
   getSummarizePlaceholder = () => {
     const {queryBuilder} = this.props;
     const query = queryBuilder.getInternal();
@@ -49,7 +49,7 @@ export default class QueryFields extends React.Component {
     return <PlaceholderText>{text}</PlaceholderText>;
   };
 
-  optionRenderer = ({label, isTag}) => {
+  optionRenderer = ({label, isTag}: ReactSelectOption) => {
     return (
       <Option>
         {label}
@@ -94,7 +94,7 @@ export default class QueryFields extends React.Component {
                 name="name"
                 value={getDynamicText({value: savedQueryName, fixed: 'query name'})}
                 placeholder={t('Saved search name')}
-                onChange={val => onUpdateName(val)}
+                onChange={(val: string) => onUpdateName && onUpdateName(val)}
               />
             </React.Fragment>
           </Fieldset>
@@ -110,7 +110,9 @@ export default class QueryFields extends React.Component {
             options={fieldOptions}
             optionRenderer={this.optionRenderer}
             value={currentQuery.fields}
-            onChange={val => onUpdateField('fields', val.map(({value}) => value))}
+            onChange={(val: ReactSelectOption[]) =>
+              onUpdateField('fields', val.map(({value}) => value))
+            }
             clearable={true}
             disabled={isLoading}
           />
@@ -145,7 +147,9 @@ export default class QueryFields extends React.Component {
             label={<SidebarLabel>{t('Limit')}</SidebarLabel>}
             placeholder="#"
             value={currentQuery.limit}
-            onChange={val => onUpdateField('limit', typeof val === 'number' ? val : null)}
+            onChange={(val: unknown) =>
+              onUpdateField('limit', typeof val === 'number' ? val : null)
+            }
             disabled={isLoading}
           />
         </Fieldset>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.tsx
similarity index 75%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.tsx
index 148030e4e3..05a2c6f7e4 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryPanel.tsx
@@ -1,16 +1,16 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 
 import InlineSvg from 'app/components/inlineSvg';
 import PageHeading from 'app/components/pageHeading';
 
 import {QueryPanelContainer, QueryPanelTitle, QueryPanelCloseLink} from '../styles';
 
-export default class QueryPanel extends React.Component {
-  static propTypes = {
-    title: PropTypes.node.isRequired,
-    onClose: PropTypes.func.isRequired,
-  };
+type QueryPanelProps = {
+  title: any;
+  onClose: () => void;
+};
+
+export default class QueryPanel extends React.Component<QueryPanelProps> {
   render() {
     const {title, onClose} = this.props;
     return (
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.tsx
index 4ea125585e..29fc268af9 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueryList.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import moment from 'moment';
 
-import SentryTypes from 'app/sentryTypes';
 import getDynamicText from 'app/utils/getDynamicText';
 
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -16,24 +15,37 @@ import {
   SavedQueryLink,
   SavedQueryUpdated,
 } from '../styles';
-
-export default class SavedQueries extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-    // provided if it's a saved query
-    savedQuery: SentryTypes.DiscoverSavedQuery,
-  };
-
-  constructor(props) {
+import {Organization, SavedQuery} from '../types';
+
+type SavedQueriesProps = {
+  organization: Organization;
+  savedQuery: SavedQuery | null;
+};
+
+type SavedQueriesState = {
+  isLoading: boolean;
+  data: SavedQuery[];
+  topSavedQuery: SavedQuery | null;
+};
+
+export default class SavedQueries extends React.Component<
+  SavedQueriesProps,
+  SavedQueriesState
+> {
+  constructor(props: SavedQueriesProps) {
     super(props);
-    this.state = {isLoading: true, data: [], topSavedQuery: props.savedQuery};
+    this.state = {
+      isLoading: true,
+      data: [],
+      topSavedQuery: props.savedQuery,
+    };
   }
 
   componentDidMount() {
     this.fetchAll();
   }
 
-  componentWillReceiveProps(nextProps) {
+  componentWillReceiveProps(nextProps: SavedQueriesProps) {
     // Refetch on deletion
     if (!nextProps.savedQuery && this.props.savedQuery !== nextProps.savedQuery) {
       this.fetchAll();
@@ -42,7 +54,7 @@ export default class SavedQueries extends React.Component {
     // Update query in the list with new data
     if (nextProps.savedQuery && nextProps.savedQuery !== this.props.savedQuery) {
       const data = this.state.data.map(savedQuery =>
-        savedQuery.id === nextProps.savedQuery.id ? nextProps.savedQuery : savedQuery
+        savedQuery.id === nextProps.savedQuery!.id ? nextProps.savedQuery! : savedQuery
       );
       this.setState({data});
     }
@@ -61,7 +73,7 @@ export default class SavedQueries extends React.Component {
 
   fetchAll() {
     fetchSavedQueries(this.props.organization)
-      .then(data => {
+      .then((data: SavedQuery[]) => {
         this.setState({isLoading: false, data});
       })
       .catch(() => {
@@ -83,7 +95,7 @@ export default class SavedQueries extends React.Component {
     return <Fieldset>{t('No saved queries')}</Fieldset>;
   }
 
-  renderListItem(query) {
+  renderListItem(query: SavedQuery) {
     const {savedQuery} = this.props;
 
     const {id, name, dateUpdated} = query;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.tsx
similarity index 96%
rename from src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/styles.tsx
index 1e3ea9a897..5d35cae51b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.tsx
@@ -158,7 +158,9 @@ export const LoadingContainer = styled('div')`
   height: 100%;
 `;
 
-export const SidebarTabs = styled(props => <NavTabs {...props} underlined={true} />)`
+export const SidebarTabs = styled((props: any) => (
+  <NavTabs {...props} underlined={true} />
+))`
   padding: ${space(3)} ${space(3)} 0;
   margin: 0;
 `;
@@ -276,12 +278,12 @@ export const SavedQueryList = styled(Panel)`
   overflow: hidden;
 `;
 
-export const SavedQueryListItem = styled(({isActive, ...props}) => (
+export const SavedQueryListItem = styled(({isActive, ...props}: any) => (
   <PanelItem {...props} />
 ))`
   flex-direction: column;
   padding: 0;
-  background-color: ${p => (p.isActive ? p.theme.whiteDark : p.theme.white)};
+  background-color: ${(p: any) => (p.isActive ? p.theme.whiteDark : p.theme.white)};
 `;
 
 export const SavedQueryLink = styled(Link)`
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/types.tsx b/src/sentry/static/sentry/app/views/organizationDiscover/types.tsx
new file mode 100644
index 0000000000..c4b285e45b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/types.tsx
@@ -0,0 +1,77 @@
+export type Aggregation = [string, string | null, string];
+
+export type Condition = [string, string | null, string | number | boolean | null];
+
+export type Query = {
+  projects: number[];
+  fields: string[];
+  aggregations: Aggregation[];
+  conditions?: Condition[];
+  orderby?: string;
+  limit?: number;
+  range?: string;
+  start?: string;
+  end?: string;
+};
+
+export type SavedQuery = Query & {
+  id: string;
+  name: string;
+  dateCreated: string;
+  dateUpdated: string;
+  createdBy?: string;
+};
+
+export type Result = {
+  data: SnubaResult;
+  query: Query;
+  current: string;
+  next?: string;
+  prev?: string;
+};
+
+export type SnubaResult = {
+  data: any[];
+  meta: {name: string; type: string}[];
+  timing: any;
+  error?: any;
+};
+
+export type Column = {
+  name: string;
+  type: string;
+  isTag?: boolean;
+};
+
+export type ReactSelectOption = {
+  label: string;
+  value: string;
+  isTag?: boolean;
+};
+
+export type DiscoverBaseProps = {
+  columns: Column[];
+  disabled: boolean;
+};
+
+export type Organization = {
+  id: string;
+  slug: string;
+  projects: any[];
+  access: string[];
+};
+
+export type Project = {
+  id: string;
+};
+
+export type GlobalSelection = {
+  projects: number[];
+  environments: string[];
+  datetime: {
+    start: string;
+    end: string;
+    period: string;
+    utc: boolean;
+  };
+};
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.tsx
similarity index 62%
rename from src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/utils.tsx
index f58f5f5a23..99f789a448 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.tsx
@@ -1,9 +1,11 @@
-import moment from 'moment';
 import {Client} from 'app/api';
 import {isEqual, pick} from 'lodash';
+import moment from 'moment';
 import qs from 'query-string';
+
 import {isValidAggregation} from './aggregations/utils';
 import {NON_SNUBA_FIELDS} from './data';
+import {Aggregation, Column, ReactSelectOption, SavedQuery} from './types';
 
 const VALID_QUERY_KEYS = [
   'projects',
@@ -17,12 +19,11 @@ const VALID_QUERY_KEYS = [
   'limit',
 ];
 
-export function getQueryFromQueryString(queryString) {
+export function getQueryFromQueryString(queryString: string): {[key: string]: any} {
   const queryKeys = new Set([...VALID_QUERY_KEYS, 'utc']);
-  const result = {};
-  let parsedQuery = queryString;
-  parsedQuery = parsedQuery.replace(/^\?|\/$/g, '').split('&');
-  parsedQuery.forEach(item => {
+  const result: {[key: string]: any} = {};
+  const parsedQuery = queryString.replace(/^\?|\/$/g, '').split('&');
+  parsedQuery.forEach((item: string) => {
     if (item.includes('=')) {
       const [key, value] = item.split('=');
       if (queryKeys.has(key)) {
@@ -30,14 +31,16 @@ export function getQueryFromQueryString(queryString) {
       }
     }
   });
-
   return result;
 }
 
-export function getQueryStringFromQuery(query, queryParams = {}) {
-  const queryProperties = Object.entries(query).map(([key, value]) => {
-    return key + '=' + encodeURIComponent(JSON.stringify(value));
-  });
+export function getQueryStringFromQuery(
+  query: {[key: string]: any},
+  queryParams: object = {}
+): string {
+  const queryProperties = Object.entries(query).map(
+    ([key, value]) => `${key}=${encodeURIComponent(JSON.stringify(value))}`
+  );
 
   Object.entries(queryParams).forEach(([key, value]) => {
     queryProperties.push(`${key}=${value}`);
@@ -46,12 +49,12 @@ export function getQueryStringFromQuery(query, queryParams = {}) {
   return `?${queryProperties.sort().join('&')}`;
 }
 
-export function getOrderbyFields(queryBuilder) {
+export function getOrderbyFields(queryBuilder: any): ReactSelectOption[] {
   const columns = queryBuilder.getColumns();
   const query = queryBuilder.getInternal();
 
   // If there are valid aggregations, only allow summarized fields and aggregations in orderby
-  const validAggregations = query.aggregations.filter(agg =>
+  const validAggregations = query.aggregations.filter((agg: Aggregation) =>
     isValidAggregation(agg, columns)
   );
 
@@ -59,7 +62,7 @@ export function getOrderbyFields(queryBuilder) {
 
   const hasFields = query.fields.length > 0;
 
-  const columnOptions = columns.reduce((acc, {name}) => {
+  const columnOptions = columns.reduce((acc: ReactSelectOption[], {name}: Column) => {
     if (hasAggregations) {
       const isInvalidField = hasFields && !query.fields.includes(name);
       if (!hasFields || isInvalidField) {
@@ -75,12 +78,12 @@ export function getOrderbyFields(queryBuilder) {
     return [...acc, {value: name, label: name}];
   }, []);
 
-  const aggregationOptions = [
-    // Ensure aggregations are unique (since users might input duplicates)
-    ...new Set(validAggregations.map(aggregation => aggregation[2])),
-  ].reduce((acc, agg) => {
-    return [...acc, {value: agg, label: agg}];
-  }, []);
+  const aggregationOptions = validAggregations
+    .map((aggregation: Aggregation) => aggregation[2])
+    .reduce(
+      (acc: Aggregation[], agg: Aggregation) => [...acc, {value: agg, label: agg}],
+      []
+    );
 
   return [...columnOptions, ...aggregationOptions];
 }
@@ -88,17 +91,14 @@ export function getOrderbyFields(queryBuilder) {
 /**
  * Takes the params object and the requested view querystring and returns the
  * correct view to be displayed
- *
- * @param {Object} params
- * @param {String} reqeustedView
- * @returns {String} View
  */
-export function getView(params, requestedView) {
+export function getView(params: any, requestedView: string): string {
+  let defaultRequestedView = requestedView;
   if (typeof params.savedQueryId !== 'undefined') {
-    requestedView = 'saved';
+    defaultRequestedView = 'saved';
   }
 
-  switch (requestedView) {
+  switch (defaultRequestedView) {
     case 'saved':
       return 'saved';
     default:
@@ -110,11 +110,10 @@ export function getView(params, requestedView) {
  * Returns true if the underlying discover query has changed based on the
  * querystring, otherwise false.
  *
- * @param {String} prev previous location.search string
- * @param {String} next next location.search string
- * @returns {Boolean}
+ * @param prev previous location.search string
+ * @param next next location.search string
  */
-export function queryHasChanged(prev, next) {
+export function queryHasChanged(prev: string, next: string): boolean {
   return !isEqual(
     pick(qs.parse(prev), VALID_QUERY_KEYS),
     pick(qs.parse(next), VALID_QUERY_KEYS)
@@ -124,68 +123,63 @@ export function queryHasChanged(prev, next) {
 /**
  * Takes a saved query and strips associated query metadata in order to match
  * our internal representation of queries.
- *
- * @param {Object} savedQuery
- * @returns {Object}
  */
-export function parseSavedQuery(savedQuery) {
+export function parseSavedQuery(savedQuery: any): SavedQuery {
   // eslint-disable-next-line no-unused-vars
   const {id, name, dateCreated, dateUpdated, createdBy, ...query} = savedQuery;
   return query;
 }
 
-export function fetchSavedQuery(organization, queryId) {
+export function fetchSavedQuery(organization: any, queryId: string): Promise<any> {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/${queryId}/`;
 
   return api.requestPromise(endpoint, {
     method: 'GET',
-  });
+  } as any); // TODO: Remove as any
 }
 
-export function fetchSavedQueries(organization) {
+export function fetchSavedQueries(organization: any): Promise<any> {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/`;
 
   return api.requestPromise(endpoint, {
     method: 'GET',
-  });
+  } as any); // TODO: Remove as any
 }
 
-export function createSavedQuery(organization, data) {
+export function createSavedQuery(organization: any, data: any): Promise<any> {
   const api = new Client();
 
   const endpoint = `/organizations/${organization.slug}/discover/saved/`;
   return api.requestPromise(endpoint, {
-    method: 'POST',
     data,
-  });
+    method: 'POST',
+  } as any); // TODO: Remove as any
 }
 
-export function updateSavedQuery(organization, id, data) {
+export function updateSavedQuery(organization: any, id: any, data: any): Promise<any> {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;
 
   return api.requestPromise(endpoint, {
-    method: 'PUT',
     data,
-  });
+    method: 'PUT',
+  } as any); // TODO: Remove as any
 }
 
-export function deleteSavedQuery(organization, id) {
+export function deleteSavedQuery(organization: any, id: any): Promise<any> {
   const api = new Client();
   const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;
 
   return api.requestPromise(endpoint, {
     method: 'DELETE',
-  });
+  } as any); // TODO: Remove as any
 }
 
 /**
  * Generate a saved query name based on the current timestamp
- *
- * @returns {String}
  */
-export function generateQueryName() {
+export function generateQueryName(): string {
   return `Result - ${moment.utc().format('MMM DD HH:mm:ss')}`;
 }
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx
index 3b4643c3a1..5a60e1b970 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/index.spec.jsx
@@ -17,7 +17,7 @@ describe('Aggregations', function() {
   describe('render()', function() {
     it('renders aggregations', function() {
       wrapper.setProps({value: aggregations});
-      expect(wrapper.find('Aggregation')).toHaveLength(2);
+      expect(wrapper.find('AggregationRow')).toHaveLength(2);
     });
 
     it('renders empty text if no conditions', function() {
diff --git a/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
index 16e2cd5c08..06fc81b3f8 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/index.spec.jsx
@@ -17,7 +17,7 @@ describe('Conditions', function() {
   describe('render()', function() {
     it('renders conditions', function() {
       wrapper.setProps({value: conditions});
-      expect(wrapper.find('Condition')).toHaveLength(2);
+      expect(wrapper.find('ConditionRow')).toHaveLength(2);
     });
 
     it('renders empty text if no conditions', function() {
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 2ca8ce323d..4ea6b37790 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -201,7 +201,7 @@ describe('Discover', function() {
       await tick();
       wrapper.update();
       wrapper
-        .find('PaginationButtons')
+        .find('Pagination')
         .find('Button')
         .at(1)
         .simulate('click');
@@ -215,13 +215,13 @@ describe('Discover', function() {
       wrapper.update();
       expect(
         wrapper
-          .find('PaginationButtons')
+          .find('Pagination')
           .find('Button')
           .at(0)
           .prop('disabled')
       ).toBe(true);
       wrapper
-        .find('PaginationButtons')
+        .find('Pagination')
         .find('Button')
         .at(0)
         .simulate('click');
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/organizationDiscover/index.spec.jsx
index 316fc0fe68..65a14012ba 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/index.spec.jsx
@@ -38,8 +38,9 @@ describe('OrganizationDiscoverContainer', function() {
           location={{query: {}, search: ''}}
           params={{}}
           selection={{projects: [], environments: [], datetime: {}}}
+          organization={organization}
         />,
-        TestStubs.routerContext([{organization}])
+        TestStubs.routerContext()
       );
       await tick();
     });
@@ -64,8 +65,9 @@ describe('OrganizationDiscoverContainer', function() {
         <OrganizationDiscoverContainerWithStore
           location={{query: {}, search: ''}}
           params={{}}
+          organization={organization}
         />,
-        TestStubs.routerContext([{organization}])
+        TestStubs.routerContext()
       );
       expect(wrapper.find('MultipleProjectSelector').text()).toBe('test-project');
     });
@@ -86,10 +88,11 @@ describe('OrganizationDiscoverContainer', function() {
         <Component
           location={{query: {}, search: ''}}
           params={{savedQueryId: 1}}
+          organization={organization}
           {...(withStore ? {} : {selection: {datetime: {}}})}
           {...props}
         />,
-        TestStubs.routerContext([{organization}])
+        TestStubs.routerContext()
       );
       await tick();
       wrap.update();
@@ -280,8 +283,9 @@ describe('OrganizationDiscoverContainer', function() {
           location={{query: {}, search: ''}}
           params={{}}
           selection={{datetime: {}}}
+          organization={organization}
         />,
-        TestStubs.routerContext([{organization}])
+        TestStubs.routerContext()
       );
       expect(wrapper.text()).toBe("You don't have access to this feature");
     });
diff --git a/tsconfig.json b/tsconfig.json
index 15577431fb..2a6372ecd7 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -6,7 +6,14 @@
     "strict": true,
     "declaration": false,
     "declarationMap": false,
-    "allowJs": true,
+    // Setting `allowJs` to be `false` prevents the TypeScript engine from processing
+    // `*.jsx` files and as well as inferring types of imported js code. This resolves
+    // cryptic proptype type issues for React components sourced in `*.jsx` files .
+    "allowJs": false,
+    // The implications of disabling `allowJs` (above) means that imported modules from
+    // `*.jsx` files are implied to have an `any` type. Hence, we need `noImplicitAny`
+    // to be `false`.
+    "noImplicitAny": false,
     "esModuleInterop": true,
     "module": "commonjs",
     "jsx": "react",
diff --git a/yarn.lock b/yarn.lock
index 2ae67f5dee..1253e41057 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1696,6 +1696,11 @@
   resolved "https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d"
   integrity sha512-OCutwjDZ4aFS6PB1UZ988C4YgwlBHJd6wCeQqaLdmadZ/7e+w79+hbMUFC1QXDNCmdyoRfAFdm0RypzwR+Qpag==
 
+"@types/history@^3":
+  version "3.2.3"
+  resolved "https://registry.yarnpkg.com/@types/history/-/history-3.2.3.tgz#2416fee5cac641da2d05a905de5af5cb50162f60"
+  integrity sha512-s4SNWd31cmFP52ilv3LKCh344ayIXmfmcfExsegGspgnk/pQh75Yo6v49uzSE1oFMXp+Sz4GVnesL7rgybX9tQ==
+
 "@types/invariant@^2.2.29":
   version "2.2.29"
   resolved "https://registry.yarnpkg.com/@types/invariant/-/invariant-2.2.29.tgz#aa845204cd0a289f65d47e0de63a6a815e30cc66"
@@ -1711,11 +1716,25 @@
   resolved "https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.134.tgz#9032b440122db3a2a56200e91191996161dde5b9"
   integrity sha512-2/O0khFUCFeDlbi7sZ7ZFRCcT812fAeOLm7Ev4KbwASkZ575TDrDcY7YyaoHdTOzKcNbfiwLYZqPmoC4wadrsw==
 
+"@types/moment-timezone@^0.5.12":
+  version "0.5.12"
+  resolved "https://registry.yarnpkg.com/@types/moment-timezone/-/moment-timezone-0.5.12.tgz#0fb680c03db194fe8ff4551eaeb1eec8d3d80e9f"
+  integrity sha512-hnHH2+Efg2vExr/dSz+IX860nSiyk9Sk4pJF2EmS11lRpMcNXeB4KBW5xcgw2QPsb9amTXdsVNEe5IoJXiT0uw==
+  dependencies:
+    moment ">=2.14.0"
+
 "@types/node@*", "@types/node@^10.0.5":
   version "10.14.7"
   resolved "https://registry.yarnpkg.com/@types/node/-/node-10.14.7.tgz#1854f0a9aa8d2cd6818d607b3d091346c6730362"
   integrity sha512-on4MmIDgHXiuJDELPk1NFaKVUxxCFr37tm8E9yN6rAiF5Pzp/9bBfBHkoexqRiY+hk/Z04EJU9kKEb59YqJ82A==
 
+"@types/papaparse@^4.5.11":
+  version "4.5.11"
+  resolved "https://registry.yarnpkg.com/@types/papaparse/-/papaparse-4.5.11.tgz#dcd4f64da55f768c2e2cf92ccac1973c67a73890"
+  integrity sha512-zOw6K7YyA/NuZ2yZ8lzZFe2U3fn+vFfcRfiQp4ZJHG6y8WYWy2SYFbq6mp4yUgpIruJHBjKZtgyE0vvCoWEq+A==
+  dependencies:
+    "@types/node" "*"
+
 "@types/prop-types@*":
   version "15.7.1"
   resolved "https://registry.yarnpkg.com/@types/prop-types/-/prop-types-15.7.1.tgz#f1a11e7babb0c3cad68100be381d1e064c68f1f6"
@@ -1726,13 +1745,43 @@
   resolved "https://registry.yarnpkg.com/@types/q/-/q-1.5.1.tgz#48fd98c1561fe718b61733daed46ff115b496e18"
   integrity sha512-eqz8c/0kwNi/OEHQfvIuJVLTst3in0e7uTKeuY+WL/zfKn0xVujOTp42bS/vUUokhK5P2BppLd9JXMOMHcgbjA==
 
-"@types/react-dom@^16.8.4":
+"@types/react-bootstrap@^0.32.19":
+  version "0.32.19"
+  resolved "https://registry.yarnpkg.com/@types/react-bootstrap/-/react-bootstrap-0.32.19.tgz#1bdf1536cabcc4e0be5a2011e33d6766685a7e2a"
+  integrity sha512-WT108qFXs462RALsnA51e/Q5UJMtCCwIubhgv1U/YtVh2Rh18ZLALkNfAJZO9iroj7fk5RHcfMg7cZxirZp47w==
+  dependencies:
+    "@types/react" "*"
+
+"@types/react-document-title@^2.0.3":
+  version "2.0.3"
+  resolved "https://registry.yarnpkg.com/@types/react-document-title/-/react-document-title-2.0.3.tgz#32d0b3d0d36a9041d13b01106c64309388a0153a"
+  integrity sha512-d37BZ9KzPQ7HJ9ILeAkSjJLB2EhiPxCbQduNSyS6BmwyZXcRstme2EwfmpzHwdkqoGfOwpbxMtSaO6MrIRQ0MQ==
+  dependencies:
+    "@types/react" "*"
+
+"@types/react-dom@^16.7.0":
   version "16.8.4"
   resolved "https://registry.yarnpkg.com/@types/react-dom/-/react-dom-16.8.4.tgz#7fb7ba368857c7aa0f4e4511c4710ca2c5a12a88"
   integrity sha512-eIRpEW73DCzPIMaNBDP5pPIpK1KXyZwNgfxiVagb5iGiz6da+9A5hslSX6GAQKdO7SayVCS/Fr2kjqprgAvkfA==
   dependencies:
     "@types/react" "*"
 
+"@types/react-router@^3.0.20":
+  version "3.0.20"
+  resolved "https://registry.yarnpkg.com/@types/react-router/-/react-router-3.0.20.tgz#a711682475ccef70ad9ad9e459859380221e6ee6"
+  integrity sha512-0sx2ThGYgblXPf8we/c+umFzP3RCbBp1bbFmd3pO1UaOYnTDno82iql3MQTVqB09rhopKORNfakDU/9xZ4QR6g==
+  dependencies:
+    "@types/history" "^3"
+    "@types/react" "*"
+
+"@types/react-virtualized@^9.20.1":
+  version "9.21.2"
+  resolved "https://registry.yarnpkg.com/@types/react-virtualized/-/react-virtualized-9.21.2.tgz#c5e4293409593814c35466913e83fb856e2053d0"
+  integrity sha512-Q6geJaDd8FlBw3ilD4ODferTyVtYAmDE3d7+GacfwN0jPt9rD9XkeuPjcHmyIwTrMXuLv1VIJmRxU9WQoQFBJw==
+  dependencies:
+    "@types/prop-types" "*"
+    "@types/react" "*"
+
 "@types/react@*":
   version "16.8.19"
   resolved "https://registry.yarnpkg.com/@types/react/-/react-16.8.19.tgz#629154ef05e2e1985cdde94477deefd823ad9be3"
@@ -1741,6 +1790,14 @@
     "@types/prop-types" "*"
     csstype "^2.2.0"
 
+"@types/react@^16.7.0":
+  version "16.8.22"
+  resolved "https://registry.yarnpkg.com/@types/react/-/react-16.8.22.tgz#7f18bf5ea0c1cad73c46b6b1c804a3ce0eec6d54"
+  integrity sha512-C3O1yVqk4sUXqWyx0wlys76eQfhrQhiDhDlHBrjER76lR2S2Agiid/KpOU9oCqj1dISStscz7xXz1Cg8+sCQeA==
+  dependencies:
+    "@types/prop-types" "*"
+    csstype "^2.2.0"
+
 "@types/unist@*", "@types/unist@^2.0.0":
   version "2.0.2"
   resolved "https://registry.yarnpkg.com/@types/unist/-/unist-2.0.2.tgz#5dc0a7f76809b7518c0df58689cd16a19bd751c6"
@@ -9202,6 +9259,11 @@ moment@2.23.0, "moment@>= 2.9.0":
   resolved "https://registry.yarnpkg.com/moment/-/moment-2.23.0.tgz#759ea491ac97d54bac5ad776996e2a58cc1bc225"
   integrity sha512-3IE39bHVqFbWWaPOMHZF98Q9c3LDKGTmypMiTM2QygGXXElkFWIH7GxfmlwmY2vwa+wmNsoYZmG2iusf1ZjJoA==
 
+moment@>=2.14.0:
+  version "2.24.0"
+  resolved "https://registry.yarnpkg.com/moment/-/moment-2.24.0.tgz#0d055d53f5052aa653c9f6eb68bb5d12bf5c2b5b"
+  integrity sha512-bV7f+6l2QigeBBZSM/6yTNq4P2fNpSWj/0e7jQcy87A8e7o2nAfP/34/2ky5Vw4B9S446EtIhodAzkFCcR4dQg==
+
 moo@^0.4.3:
   version "0.4.3"
   resolved "https://registry.yarnpkg.com/moo/-/moo-0.4.3.tgz#3f847a26f31cf625a956a87f2b10fbc013bfd10e"
