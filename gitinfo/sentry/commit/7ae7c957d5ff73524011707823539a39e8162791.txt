commit 7ae7c957d5ff73524011707823539a39e8162791
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Nov 2 15:28:25 2017 -0700

    ref: Don't use EventMapping for non-sampled projects

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 33010a6154..aca73c5009 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -20,7 +20,7 @@ from sentry.api.serializers.models.group import (
 from sentry.constants import DEFAULT_SORT_OPTION
 from sentry.db.models.query import create_or_update
 from sentry.models import (
-    Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash, GroupResolution,
+    Activity, Group, GroupAssignee, GroupBookmark, GroupHash, GroupResolution,
     GroupSeen, GroupShare, GroupSnooze, GroupStatus, GroupSubscription, GroupSubscriptionReason,
     GroupTombstone, Release, TOMBSTONE_FIELDS_FROM_GROUP, UserOption
 )
@@ -277,14 +277,10 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             if len(query) == 32:
                 # check to see if we've got an event ID
                 try:
-                    mapping = EventMapping.objects.get(
-                        project_id=project.id,
-                        event_id=query,
-                    )
-                except EventMapping.DoesNotExist:
+                    matching_group = Group.objects.from_event_id(project, query)
+                except Group.DoesNotExist:
                     pass
                 else:
-                    matching_group = Group.objects.get(id=mapping.group_id)
                     try:
                         matching_event = Event.objects.get(
                             event_id=query, project_id=project.id)
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 9fd5184b74..800651c677 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -10,7 +10,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import (Event, EventMapping, EventUser, Group, GroupStatus, UserReport)
+from sentry.models import (Event, EventUser, Group, GroupStatus, UserReport)
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -102,15 +102,9 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
             report.event_user_id = euser.id
 
         try:
-            mapping = EventMapping.objects.get(
-                event_id=report.event_id,
-                project_id=project.id,
-            )
-        except EventMapping.DoesNotExist:
-            # XXX(dcramer): the system should fill this in later
+            report.group = Group.objects.from_event_id(project, report.event_id)
+        except Group.DoesNotExist:
             pass
-        else:
-            report.group = Group.objects.get(id=mapping.group_id)
 
         try:
             with transaction.atomic():
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 4e55a273eb..46681f9184 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -608,21 +608,42 @@ class EventManager(object):
         # store a reference to the group id to guarantee validation of isolation
         event.data.bind_ref(event)
 
-        try:
-            with transaction.atomic(using=router.db_for_write(EventMapping)):
-                EventMapping.objects.create(project=project, group=group, event_id=event_id)
-        except IntegrityError:
-            self.logger.info(
-                'duplicate.found',
-                exc_info=True,
-                extra={
-                    'event_uuid': event_id,
-                    'project_id': project.id,
-                    'group_id': group.id,
-                    'model': EventMapping.__name__,
-                }
-            )
-            return event
+        # When sampling is enabled, the only canonical source of truth
+        # is the EventMapping table. Otherwise, without sampling enabled,
+        # the source of truth can be relied on the Event table itself.
+        # As a bonus, when sampling is not enabled, we can avoid writing
+        # an EventMapping row entirely since it's redundant to the Event table.
+        if features.has('projects:sample-events', project=project):
+            try:
+                with transaction.atomic(using=router.db_for_write(EventMapping)):
+                    EventMapping.objects.create(project=project, group=group, event_id=event_id)
+            except IntegrityError:
+                self.logger.info(
+                    'duplicate.found',
+                    exc_info=True,
+                    extra={
+                        'event_uuid': event_id,
+                        'project_id': project.id,
+                        'group_id': group.id,
+                        'model': EventMapping.__name__,
+                    }
+                )
+                return event
+        else:
+            if Event.objects.filter(
+                project_id=project.id,
+                event_id=event_id,
+            ).exists():
+                self.logger.info(
+                    'duplicate.found',
+                    exc_info=True,
+                    extra={
+                        'event_uuid': event_id,
+                        'project_id': project.id,
+                        'model': Event.__name__,
+                    }
+                )
+                return event
 
         environment = Environment.get_or_create(
             project=project,
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 497fde5e1f..6bb8d2020a 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -118,6 +118,31 @@ class GroupManager(BaseManager):
                 }
             )
 
+    def from_event_id(self, project, event_id):
+        """
+        Resolves the 32 character event_id string into
+        a Group for which it is found.
+        """
+        from sentry import features
+
+        if features.has('projects:sample-events', project=self):
+            from sentry.models import EventMapping as Model
+        else:
+            from sentry.models import Event as Model
+
+        try:
+            group_id = Model.objects.filter(
+                project_id=self.id,
+                event_id=event_id,
+            ).values_list('group_id', flat=True)[0]
+        except IndexError:
+            # Raise a Group.DoesNotExist here since it makes
+            # more logical sense since this is intending to resolve
+            # a group_id.
+            raise Group.DoesNotExist()
+
+        return Group.objects.get(id=group_id)
+
     def add_tags(self, group, tags):
         project_id = group.project_id
         date = group.last_seen
