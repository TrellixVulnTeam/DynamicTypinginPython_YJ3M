commit 30685b52c5b8472fcd3b872af7376ed49df507b5
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue May 21 15:46:52 2019 -0700

    feat(events-v2): Add function to transform events query for API (#13314)
    
    Converts the columns specified by a view into a list of fields to be
    requested.

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
index 4c19a89fb6..59241455ac 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
@@ -56,7 +56,10 @@ export default class OrganizationEventsV2 extends React.Component {
               </PageHeading>
             </PageHeader>
             {this.renderTabs()}
-            <Events view={getCurrentView(location.query.view)} />
+            <Events
+              organization={organization}
+              view={getCurrentView(location.query.view)}
+            />
           </PageContent>
         </React.Fragment>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
index 5a76375b17..d5aa69e2e3 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
@@ -29,6 +29,7 @@ class Table extends React.Component {
   fetchData = async () => {
     const {api, organization, view} = this.props;
     this.setState({isLoading: true, hasError: false});
+
     try {
       const events = await fetchOrganizationEvents(api, organization.slug, view);
       this.setState({
@@ -48,8 +49,8 @@ class Table extends React.Component {
       return <LoadingIndicator />;
     }
 
-    return events.map(event => (
-      <Row key={event.id} className={getGridStyle(fields.length)}>
+    return events.map((event, idx) => (
+      <Row key={idx} className={getGridStyle(fields.length)}>
         {fields.map(field => (
           <Cell key={field}>
             <Data>{event[field]}</Data>
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index cd4049ee43..6bd622b11b 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -1,6 +1,4 @@
-export function fetchOrganizationEvents(api, orgSlug, data) {
-  return api.requestPromise(`/organizations/${orgSlug}/events/`, data);
-}
+import {cloneDeep} from 'lodash';
 
 export const ALL_VIEWS = [
   {
@@ -54,6 +52,17 @@ export const ALL_VIEWS = [
   },
 ];
 
+/**
+ * "Special fields" do not map 1:1 to an single column in the event database,
+ * they are a UI concept that combines the results of multiple fields and
+ * displays with some custom formatting. This map lists the underlying data
+ * that we need to fetch in order to populate each of these special field.
+ */
+const SPECIAL_FIELDS = {
+  event: ['id', 'title'],
+  user: ['user.email', 'user.ip'],
+};
+
 /**
  * Given a view id, return the corresponding view object
  *
@@ -64,3 +73,37 @@ export const ALL_VIEWS = [
 export function getCurrentView(requestedView) {
   return ALL_VIEWS.find(view => view.id === requestedView) || ALL_VIEWS[0];
 }
+
+/**
+ * Fetch organization events given view object
+ *
+ * @param {Object} api
+ * @param {String} orgSlug
+ * @param {Object} view
+ * @returns {Promise<Object>}
+ */
+export function fetchOrganizationEvents(api, orgSlug, view) {
+  const query = getQuery(view);
+  return api.requestPromise(`/organizations/${orgSlug}/events/`, {
+    query,
+  });
+}
+
+/**
+ * Takes a view and converts it into the format required for the events API
+ *
+ * @param {Object} view
+ * @returns {Object}
+ */
+export function getQuery(view) {
+  const data = cloneDeep(view.data);
+  data.fields = data.fields.reduce((fields, field) => {
+    if (SPECIAL_FIELDS.hasOwnProperty(field)) {
+      fields.push(...SPECIAL_FIELDS[field]);
+    } else {
+      fields.push(field);
+    }
+    return fields;
+  }, []);
+  return data;
+}
diff --git a/tests/js/spec/views/organizationEventsV2/index.spec.jsx b/tests/js/spec/views/organizationEventsV2/index.spec.jsx
index 65f24a2d76..f83dacdcf7 100644
--- a/tests/js/spec/views/organizationEventsV2/index.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/index.spec.jsx
@@ -4,6 +4,13 @@ import {mount} from 'enzyme';
 import OrganizationEventsV2 from 'app/views/organizationEventsV2';
 
 describe('OrganizationEventsV2', function() {
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events/',
+      body: [{}],
+    });
+  });
+
   it('renders', function() {
     const wrapper = mount(
       <OrganizationEventsV2
diff --git a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
index f4f6376599..1ea14c55a1 100644
--- a/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/utils.spec.jsx
@@ -1,4 +1,4 @@
-import {ALL_VIEWS, getCurrentView} from 'app/views/organizationEventsV2/utils';
+import {ALL_VIEWS, getCurrentView, getQuery} from 'app/views/organizationEventsV2/utils';
 
 describe('getCurrentView()', function() {
   it('returns current view', function() {
@@ -12,3 +12,25 @@ describe('getCurrentView()', function() {
     expect(getCurrentView('blah')).toBe(ALL_VIEWS[0]);
   });
 });
+
+describe('getQuery()', function() {
+  it('expands special "event" and "user" fields', function() {
+    const view = {
+      id: 'test',
+      name: 'test view',
+      data: {
+        query: '',
+        fields: ['event', 'user', 'issue.id'],
+      },
+      tags: [],
+    };
+
+    expect(getQuery(view).fields).toEqual([
+      'id',
+      'title',
+      'user.email',
+      'user.ip',
+      'issue.id',
+    ]);
+  });
+});
