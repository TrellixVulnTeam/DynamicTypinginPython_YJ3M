commit 9f0f7ffab3328c320bcadebd88ad9c79a45f48ef
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Fri Jun 5 17:48:44 2020 -0400

    feat(perf): Use the same y-axis when showing only percentile graphs (#19193)
    
    Currently, the graphs independently set their own y-axis which makes it difficult to compare
    magnitudes when they are both percentile graphs. This change ensures that when displaying two
    percentile graphs, the y-axes are the same making them comparable.

diff --git a/src/sentry/static/sentry/app/views/performance/charts/chart.tsx b/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
index 05213d5c8e..584394706f 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
@@ -1,9 +1,12 @@
 import React from 'react';
 import * as ReactRouter from 'react-router';
+import max from 'lodash/max';
+import min from 'lodash/min';
 
 import {Series} from 'app/types/echarts';
 import AreaChart from 'app/components/charts/areaChart';
 import ChartZoom from 'app/components/charts/chartZoom';
+import {aggregateOutputType} from 'app/utils/discover/fields';
 import theme from 'app/utils/theme';
 
 type Props = {
@@ -16,6 +19,34 @@ type Props = {
   loading: boolean;
 };
 
+// adapted from https://stackoverflow.com/questions/11397239/rounding-up-for-a-graph-maximum
+function computeAxisMax(data) {
+  // assumes min is 0
+  const valuesDict = data.map(value => value.data.map(point => point.value));
+  const maxValue = max(valuesDict.map(max)) as number;
+
+  if (maxValue <= 1) {
+    return 1;
+  }
+
+  const power = Math.log10(maxValue);
+  const magnitude = min([max([10 ** (power - Math.floor(power)), 0]), 10]) as number;
+
+  let scale;
+  if (magnitude <= 2.5) {
+    scale = 0.2;
+  } else if (magnitude <= 5) {
+    scale = 0.5;
+  } else if (magnitude <= 7.5) {
+    scale = 1.0;
+  } else {
+    scale = 2.0;
+  }
+
+  const step = 10 ** Math.floor(power) * scale;
+  return Math.round(Math.ceil(maxValue / step) * step);
+}
+
 class Chart extends React.Component<Props> {
   render() {
     const {data, router, statsPeriod, utc, projects, environments, loading} = this.props;
@@ -25,6 +56,11 @@ class Chart extends React.Component<Props> {
     }
     const colors = theme.charts.getColorPalette(4);
 
+    const durationOnly = data.every(
+      value => aggregateOutputType(value.seriesName) === 'duration'
+    );
+    const dataMax = durationOnly ? computeAxisMax(data) : undefined;
+
     const areaChartProps = {
       seriesOptions: {
         showSymbol: false,
@@ -61,10 +97,12 @@ class Chart extends React.Component<Props> {
         {
           gridIndex: 0,
           scale: true,
+          max: dataMax,
         },
         {
           gridIndex: 1,
           scale: true,
+          max: dataMax,
         },
       ],
       utc,
