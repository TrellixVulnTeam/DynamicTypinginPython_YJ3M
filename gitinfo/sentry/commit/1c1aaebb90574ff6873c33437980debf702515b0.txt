commit 1c1aaebb90574ff6873c33437980debf702515b0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jul 16 11:06:02 2018 -0700

    ref(django): Remove old account settings django views (#9028)
    
    Related: https://github.com/getsentry/sentry/pull/9039

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c1bf2f578d..1cba71001e 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1,13 +1,6 @@
 import {Redirect, Route, IndexRoute, IndexRedirect} from 'react-router';
 import React from 'react';
 
-import AccountAuthorizations from 'app/views/accountAuthorizations';
-import AccountLayout from 'app/views/accountLayout';
-import ApiApplicationDetails from 'app/views/apiApplicationDetails';
-import ApiApplications from 'app/views/apiApplications';
-import ApiLayout from 'app/views/apiLayout';
-import ApiNewToken from 'app/views/apiNewToken';
-import ApiTokens from 'app/views/apiTokens';
 import App from 'app/views/app';
 import CreateProject from 'app/views/onboarding/createProject';
 import GroupDetails from 'app/views/groupDetails';
@@ -615,18 +608,6 @@ function routes() {
           import(/*webpackChunkName:"AcceptProjectTransfer"*/ 'app/views/acceptProjectTransfer')}
         component={errorHandler(LazyLoad)}
       />
-      <Route path="/account/" component={errorHandler(AccountLayout)}>
-        <Route path="authorizations/" component={errorHandler(AccountAuthorizations)} />
-      </Route>
-
-      <Route path="/api/" component={errorHandler(ApiLayout)}>
-        <IndexRoute component={errorHandler(ApiTokens)} />
-        <Route path="applications/" component={errorHandler(ApiApplications)} />
-        <Route
-          path="applications/:appId/"
-          component={errorHandler(ApiApplicationDetails)}
-        />
-      </Route>
 
       <Route newnew path="/settings/" name="Settings" component={SettingsWrapper}>
         <IndexRoute
@@ -677,8 +658,6 @@ function routes() {
         </Route>
       </Route>
 
-      <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
-
       <Route
         path="/manage/"
         componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
deleted file mode 100644
index 5fbbc364d5..0000000000
--- a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
+++ /dev/null
@@ -1,155 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import createReactClass from 'create-react-class';
-
-import AsyncView from 'app/views/asyncView';
-import ApiMixin from 'app/mixins/apiMixin';
-import IndicatorStore from 'app/stores/indicatorStore';
-import {t} from 'app/locale';
-
-const AuthorizationRow = createReactClass({
-  displayName: 'AuthorizationRow',
-
-  propTypes: {
-    authorization: PropTypes.object.isRequired,
-    onRevoke: PropTypes.func.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: false,
-    };
-  },
-
-  onRevoke() {
-    if (this.state.loading) return;
-
-    let {authorization} = this.props;
-
-    this.setState(
-      {
-        loading: true,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        this.api.request('/api-authorizations/', {
-          method: 'DELETE',
-          data: {authorization: authorization.id},
-          success: data => {
-            IndicatorStore.remove(loadingIndicator);
-            this.props.onRevoke();
-          },
-          error: () => {
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let authorization = this.props.authorization;
-
-    let btnClassName = 'btn btn-default';
-    if (this.state.loading) btnClassName += ' disabled';
-
-    return (
-      <tr>
-        <td>
-          <h5 style={{marginBottom: 5}}>{authorization.application.name}</h5>
-          {authorization.homepageUrl && (
-            <div style={{marginBottom: 5}}>
-              <small>
-                <a href={authorization.homepageUrl}>{authorization.homepageUrl}</a>
-              </small>
-            </div>
-          )}
-          <div>
-            <small style={{color: '#999'}}>{authorization.scopes.join(', ')}</small>
-          </div>
-        </td>
-        <td style={{width: 32}}>
-          <a
-            onClick={this.onRevoke.bind(this, authorization)}
-            className={btnClassName}
-            disabled={this.state.loading}
-          >
-            <span className="icon icon-trash" />
-          </a>
-        </td>
-      </tr>
-    );
-  },
-});
-
-class AccountAuthorizations extends AsyncView {
-  getEndpoint() {
-    return '/api-authorizations/';
-  }
-
-  getTitle() {
-    return 'Approved Applications';
-  }
-
-  onRevoke(authorization) {
-    this.setState({
-      data: this.state.data.filter(a => a.id !== authorization.id),
-    });
-  }
-
-  renderResults() {
-    let {data} = this.state;
-    if (data.length === 0) {
-      return (
-        <table className="table">
-          <tbody>
-            <tr colSpan="2">
-              <td className="blankslate well">
-                {t("You haven't approved any third party applications.")}
-              </td>
-            </tr>
-          </tbody>
-        </table>
-      );
-    }
-
-    return (
-      <div>
-        <h4>Approved Applications</h4>
-        <table className="table">
-          <tbody>
-            {data.map(authorization => {
-              return (
-                <AuthorizationRow
-                  key={authorization.id}
-                  authorization={authorization}
-                  onRevoke={this.onRevoke.bind(this, authorization)}
-                />
-              );
-            })}
-          </tbody>
-        </table>
-      </div>
-    );
-  }
-
-  renderBody() {
-    return (
-      <div>
-        {this.renderResults()}
-        <p>
-          <small>
-            You can manage your own applications via the <a href="/api/">API dashboard</a>
-            .
-          </small>
-        </p>
-      </div>
-    );
-  }
-}
-
-export default AccountAuthorizations;
diff --git a/src/sentry/static/sentry/app/views/accountLayout.jsx b/src/sentry/static/sentry/app/views/accountLayout.jsx
deleted file mode 100644
index 44cbe50fa7..0000000000
--- a/src/sentry/static/sentry/app/views/accountLayout.jsx
+++ /dev/null
@@ -1,61 +0,0 @@
-import React from 'react';
-
-import DropdownLink from 'app/components/dropdownLink';
-import MenuItem from 'app/components/menuItem';
-import NarrowLayout from 'app/components/narrowLayout';
-import {t} from 'app/locale';
-
-class AccountLayout extends React.Component {
-  render() {
-    let header = (
-      <div>
-        <div className="pull-right">
-          <a href="/account/logout/">{t('Sign out')}</a>
-        </div>
-        <a href="/">
-          <span className="icon-sentry-logo" />
-          <span className="back-to">{t('Back to organization')}</span>
-        </a>
-      </div>
-    );
-
-    return (
-      <NarrowLayout header={header}>
-        <h3>{t('My Settings')}</h3>
-        <DropdownLink anchorRight title={t('More')}>
-          <MenuItem to="/account/authorizations/">
-            {t('Authorized Applications')}
-          </MenuItem>
-          <MenuItem href="/account/settings/identities/">{t('Identities')}</MenuItem>
-          <MenuItem href="/account/remove/">{t('Close Account')}</MenuItem>
-        </DropdownLink>
-        <ul className="nav nav-tabs border-bottom">
-          <li>
-            <a href="/account/settings/">{t('Account')}</a>
-          </li>
-          <li>
-            <a href="/account/settings/avatar/">{t('Avatar')}</a>
-          </li>
-          <li>
-            <a href="/account/settings/appearance/">{t('Appearance')}</a>
-          </li>
-          <li>
-            <a href="/account/settings/notifications/">{t('Notifications')}</a>
-          </li>
-          <li>
-            <a href="/account/settings/emails/">{t('Emails')}</a>
-          </li>
-          <li>
-            <a href="/account/settings/security/">{t('Security')}</a>
-          </li>
-          <li>
-            <a href="/account/settings/subscriptions/">{t('Subscriptions')}</a>
-          </li>
-        </ul>
-        {this.props.children}
-      </NarrowLayout>
-    );
-  }
-}
-
-export default AccountLayout;
diff --git a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
deleted file mode 100644
index 16f74fa910..0000000000
--- a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
+++ /dev/null
@@ -1,273 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import DocumentTitle from 'react-document-title';
-
-import ApiMixin from 'app/mixins/apiMixin';
-import AutoSelectText from 'app/components/autoSelectText';
-import ConfigStore from 'app/stores/configStore';
-import {FormState, TextField, TextareaField} from 'app/components/forms';
-import IndicatorStore from 'app/stores/indicatorStore';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t} from 'app/locale';
-
-const ApiApplicationDetails = createReactClass({
-  displayName: 'ApiApplicationDetails',
-
-  contextTypes: {
-    router: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      app: null,
-      formData: null,
-      errors: {},
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  getFormData(app) {
-    return {
-      name: app.name,
-      homepageUrl: app.homepageUrl,
-      privacyUrl: app.privacyUrl,
-      termsUrl: app.termsUrl,
-      allowedOrigins: app.allowedOrigins.join('\n'),
-      redirectUris: app.redirectUris.join('\n'),
-    };
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-    });
-
-    this.api.request(`/api-applications/${this.props.params.appId}/`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          loading: false,
-          error: false,
-          app: data,
-          formData: {...this.getFormData(data)},
-          errors: {},
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
-    this.setState({
-      formData,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-
-    if (this.state.state == FormState.SAVING) {
-      return;
-    }
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let formData = this.state.formData;
-        this.api.request(`/api-applications/${this.props.params.appId}/`, {
-          method: 'PUT',
-          data: {
-            ...formData,
-            allowedOrigins: formData.allowedOrigins.split('\n').filter(v => v),
-            redirectUris: formData.redirectUris.split('\n').filter(v => v),
-          },
-          success: data => {
-            IndicatorStore.remove(loadingIndicator);
-            this.setState({
-              state: FormState.READY,
-              formData: {...this.getFormData(data)},
-              errors: {},
-            });
-            this.context.router.push('/api/applications/');
-          },
-          error: error => {
-            IndicatorStore.remove(loadingIndicator);
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON,
-            });
-          },
-        });
-      }
-    );
-  },
-
-  onRemoveApplication(app) {},
-
-  getTitle() {
-    return 'Application Details';
-  },
-
-  render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    let app = this.state.app;
-    let isSaving = this.state.state === FormState.SAVING;
-    let errors = this.state.errors;
-
-    let urlPrefix = ConfigStore.get('urlPrefix');
-
-    return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          <form onSubmit={this.onSubmit} className="form-stacked">
-            <h4>{t('Application Details')}</h4>
-            {this.state.state === FormState.ERROR && (
-              <div className="alert alert-error alert-block">
-                {t(
-                  'Unable to save your changes. Please ensure all fields are valid and try again.'
-                )}
-              </div>
-            )}
-            <fieldset>
-              <TextField
-                key="name"
-                name="name"
-                label={t('Name')}
-                placeholder={t('e.g. My Application')}
-                value={this.state.formData.name}
-                required={true}
-                error={errors.name}
-                onChange={this.onFieldChange.bind(this, 'name')}
-              />
-              <TextField
-                key="homepageUrl"
-                name="homepageUrl"
-                label={t('Homepage')}
-                placeholder={t('e.g. http://example.com')}
-                value={this.state.formData.homepageUrl}
-                help={t("An optional link to your website's homepage")}
-                required={false}
-                error={errors.homepageUrl}
-                onChange={this.onFieldChange.bind(this, 'homepageUrl')}
-              />
-              <TextField
-                key="privacyUrl"
-                name="privacyUrl"
-                label={t('Privacy Policy')}
-                placeholder={t('e.g. http://example.com/privacy')}
-                value={this.state.formData.privacyUrl}
-                help={t('An optional link to your Privacy Policy')}
-                required={false}
-                error={errors.privacyUrl}
-                onChange={this.onFieldChange.bind(this, 'privacyUrl')}
-              />
-              <TextField
-                key="termsUrl"
-                name="termsUrl"
-                label={t('Terms of Service')}
-                placeholder={t('e.g. http://example.com/terms')}
-                value={this.state.formData.termsUrl}
-                help={t('An optional link to your Terms of Service')}
-                required={false}
-                error={errors.termsUrl}
-                onChange={this.onFieldChange.bind(this, 'termsUrl')}
-              />
-            </fieldset>
-            <fieldset>
-              <legend>{t('Credentials')}</legend>
-              <div className="control-group">
-                <label htmlFor="api-key">Client ID</label>
-                <div className="form-control disabled">
-                  <AutoSelectText>{app.clientID}</AutoSelectText>
-                </div>
-              </div>
-              <div className="control-group">
-                <label htmlFor="api-key">Client Secret</label>
-                <div className="form-control disabled">
-                  {app.clientSecret ? (
-                    <AutoSelectText>{app.clientSecret}</AutoSelectText>
-                  ) : (
-                    <em>hidden</em>
-                  )}
-                </div>
-                <p className="help-block">
-                  {t(`Your secret is only available briefly after application creation. Make
-                  sure to save this value!`)}
-                </p>
-              </div>
-
-              <div className="control-group">
-                <label htmlFor="api-key">{t('Authorization URL')}</label>
-                <div className="form-control disabled">
-                  <AutoSelectText>{`${urlPrefix}/oauth/authorize/`}</AutoSelectText>
-                </div>
-              </div>
-
-              <div className="control-group">
-                <label htmlFor="api-key">{t('Token URL')}</label>
-                <div className="form-control disabled">
-                  <AutoSelectText>{`${urlPrefix}/oauth/token/`}</AutoSelectText>
-                </div>
-              </div>
-            </fieldset>
-            <fieldset>
-              <legend>{t('Security')}</legend>
-              <TextareaField
-                key="redirectUris"
-                name="redirectUris"
-                label={t('Authorized Redirect URIs')}
-                value={this.state.formData.redirectUris}
-                required={false}
-                help={t('Separate multiple entries with a newline.')}
-                placeholder={t('e.g. https://example.com/oauth/complete')}
-                error={errors.redirectUris}
-                onChange={this.onFieldChange.bind(this, 'redirectUris')}
-              />
-              <TextareaField
-                key="allowedOrigins"
-                name="allowedOrigins"
-                label={t('Authorized JavaScript Origins')}
-                value={this.state.formData.allowedOrigins}
-                required={false}
-                help={t('Separate multiple entries with a newline.')}
-                placeholder={t('e.g. example.com')}
-                error={errors.allowedOrigins}
-                onChange={this.onFieldChange.bind(this, 'allowedOrigins')}
-              />
-            </fieldset>
-            <fieldset className="form-actions">
-              <button type="submit" className="btn btn-primary" disabled={isSaving}>
-                {t('Save Changes')}
-              </button>
-            </fieldset>
-          </form>
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-
-export default ApiApplicationDetails;
diff --git a/src/sentry/static/sentry/app/views/apiApplications.jsx b/src/sentry/static/sentry/app/views/apiApplications.jsx
deleted file mode 100644
index bc5d204529..0000000000
--- a/src/sentry/static/sentry/app/views/apiApplications.jsx
+++ /dev/null
@@ -1,221 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import DocumentTitle from 'react-document-title';
-import {Link} from 'react-router';
-
-import ApiMixin from 'app/mixins/apiMixin';
-import IndicatorStore from 'app/stores/indicatorStore';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t} from 'app/locale';
-
-const ApiApplicationRow = createReactClass({
-  displayName: 'ApiApplicationRow',
-
-  propTypes: {
-    app: PropTypes.object.isRequired,
-    onRemove: PropTypes.func.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: false,
-    };
-  },
-
-  onRemove() {
-    if (this.state.loading) return;
-
-    let app = this.props.app;
-
-    this.setState(
-      {
-        loading: true,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        this.api.request(`/api-applications/${app.id}/`, {
-          method: 'DELETE',
-          success: data => {
-            IndicatorStore.remove(loadingIndicator);
-            this.props.onRemove();
-          },
-          error: () => {
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(
-              t('Unable to remove application. Please try again.'),
-              'error',
-              {
-                duration: 3000,
-              }
-            );
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let app = this.props.app;
-
-    let btnClassName = 'btn btn-default';
-    if (this.state.loading) btnClassName += ' disabled';
-
-    return (
-      <tr>
-        <td>
-          <h4 style={{marginBottom: 5}}>
-            <Link to={`/api/applications/${app.id}/`}>{app.name}</Link>
-          </h4>
-          <small style={{color: '#999'}}>{app.clientID}</small>
-        </td>
-        <td style={{width: 32}}>
-          <a
-            onClick={this.onRemove.bind(this, app)}
-            className={btnClassName}
-            disabled={this.state.loading}
-          >
-            <span className="icon icon-trash" />
-          </a>
-        </td>
-      </tr>
-    );
-  },
-});
-
-const ApiApplications = createReactClass({
-  displayName: 'ApiApplications',
-
-  contextTypes: {
-    router: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      appList: [],
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-    });
-
-    this.api.request('/api-applications/', {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          loading: false,
-          error: false,
-          appList: data,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  createApplication() {
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request('/api-applications/', {
-      method: 'POST',
-      success: app => {
-        IndicatorStore.remove(loadingIndicator);
-        this.context.router.push(`/api/applications/${app.id}/`);
-      },
-      error: error => {
-        IndicatorStore.remove(loadingIndicator);
-        IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error');
-      },
-    });
-  },
-
-  onRemoveApplication(app) {
-    this.setState({
-      appList: this.state.appList.filter(a => a.id !== app.id),
-    });
-  },
-
-  renderResults() {
-    if (this.state.appList.length === 0) {
-      return (
-        <tr colSpan="2">
-          <td className="blankslate well">
-            {t("You haven't created any applications yet.")}
-          </td>
-        </tr>
-      );
-    }
-
-    return this.state.appList.map(app => {
-      return (
-        <ApiApplicationRow
-          key={app.id}
-          app={app}
-          onRemove={this.onRemoveApplication.bind(this, app)}
-        />
-      );
-    });
-  },
-
-  getTitle() {
-    return 'API Applications';
-  },
-
-  render() {
-    return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          <table className="table">
-            <tbody>
-              {this.state.loading ? (
-                <tr>
-                  <td colSpan="2">
-                    <LoadingIndicator />
-                  </td>
-                </tr>
-              ) : this.state.error ? (
-                <tr>
-                  <td colSpan="2">
-                    <LoadingError onRetry={this.fetchData} />
-                  </td>
-                </tr>
-              ) : (
-                this.renderResults()
-              )}
-            </tbody>
-          </table>
-
-          <div className="form-actions" style={{textAlign: 'right'}}>
-            <a
-              className="btn btn-primary ref-create-application"
-              onClick={this.createApplication}
-            >
-              {t('Create New Application')}
-            </a>
-          </div>
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-
-export default ApiApplications;
diff --git a/src/sentry/static/sentry/app/views/apiLayout.jsx b/src/sentry/static/sentry/app/views/apiLayout.jsx
deleted file mode 100644
index e2d0140753..0000000000
--- a/src/sentry/static/sentry/app/views/apiLayout.jsx
+++ /dev/null
@@ -1,24 +0,0 @@
-import React from 'react';
-
-import ListLink from 'app/components/listLink';
-import NarrowLayout from 'app/components/narrowLayout';
-import {t} from 'app/locale';
-
-class ApiDashboard extends React.Component {
-  render() {
-    return (
-      <NarrowLayout>
-        <h3>{t('Sentry Web API')}</h3>
-        <ul className="nav nav-tabs border-bottom">
-          <ListLink to="/api/" index={true}>
-            {t('Auth Tokens')}
-          </ListLink>
-          <ListLink to="/api/applications/">{t('Applications')}</ListLink>
-        </ul>
-        {this.props.children}
-      </NarrowLayout>
-    );
-  }
-}
-
-export default ApiDashboard;
diff --git a/src/sentry/static/sentry/app/views/apiTokens.jsx b/src/sentry/static/sentry/app/views/apiTokens.jsx
deleted file mode 100644
index 2c1c37d33b..0000000000
--- a/src/sentry/static/sentry/app/views/apiTokens.jsx
+++ /dev/null
@@ -1,228 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import DocumentTitle from 'react-document-title';
-import {Link} from 'react-router';
-
-import ApiMixin from 'app/mixins/apiMixin';
-import AutoSelectText from 'app/components/autoSelectText';
-import DateTime from 'app/components/dateTime';
-import IndicatorStore from 'app/stores/indicatorStore';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t, tct} from 'app/locale';
-
-const ApiTokenRow = createReactClass({
-  displayName: 'ApiTokenRow',
-
-  propTypes: {
-    token: PropTypes.object.isRequired,
-    onRemove: PropTypes.func.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: false,
-    };
-  },
-
-  onRemove() {
-    if (this.state.loading) return;
-
-    let token = this.props.token;
-
-    this.setState(
-      {
-        loading: true,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        this.api.request('/api-tokens/', {
-          method: 'DELETE',
-          data: {token: token.token},
-          success: data => {
-            IndicatorStore.remove(loadingIndicator);
-            this.props.onRemove();
-          },
-          error: () => {
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(t('Unable to remove token. Please try again.'), 'error');
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    let token = this.props.token;
-
-    let btnClassName = 'btn btn-default';
-    if (this.state.loading) btnClassName += ' disabled';
-
-    return (
-      <tr>
-        <td>
-          <div style={{marginBottom: 5}}>
-            <small>
-              <AutoSelectText>{token.token}</AutoSelectText>
-            </small>
-          </div>
-          <div style={{marginBottom: 5}}>
-            <small>
-              Created <DateTime date={token.dateCreated} />
-            </small>
-          </div>
-          <div>
-            <small style={{color: '#999'}}>{token.scopes.join(', ')}</small>
-          </div>
-        </td>
-        <td style={{width: 32}}>
-          <a
-            onClick={this.onRemove.bind(this, token)}
-            className={btnClassName}
-            disabled={this.state.loading}
-          >
-            <span className="icon icon-trash" />
-          </a>
-        </td>
-      </tr>
-    );
-  },
-});
-
-const ApiTokens = createReactClass({
-  displayName: 'ApiTokens',
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      tokenList: [],
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-    });
-
-    this.api.request('/api-tokens/', {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          loading: false,
-          error: false,
-          tokenList: data,
-        });
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-      },
-    });
-  },
-
-  onRemoveToken(token) {
-    this.setState({
-      tokenList: this.state.tokenList.filter(tk => tk.token !== token.token),
-    });
-  },
-
-  renderResults() {
-    let {tokenList} = this.state;
-
-    if (tokenList.length === 0) {
-      return (
-        <table className="table">
-          <tbody>
-            <tr colSpan="2">
-              <td className="blankslate well">
-                {t("You haven't created any authentication tokens yet.")}
-              </td>
-            </tr>
-          </tbody>
-        </table>
-      );
-    }
-
-    return (
-      <div>
-        <table className="table">
-          <tbody>
-            {tokenList.map(token => {
-              return (
-                <ApiTokenRow
-                  key={token.token}
-                  token={token}
-                  onRemove={this.onRemoveToken.bind(this, token)}
-                />
-              );
-            })}
-          </tbody>
-        </table>
-      </div>
-    );
-  },
-
-  getTitle() {
-    return 'API Tokens';
-  },
-
-  render() {
-    return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          <p>
-            {t(
-              "Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They're the easiest way to get started using the API."
-            )}
-          </p>
-          <p>
-            {tct(
-              'For more information on how to use the web API, see our [link:documentation].',
-              {
-                link: <a href="https://docs.sentry.io/hosted/api/" />,
-              }
-            )}
-          </p>
-
-          <p>
-            <small>
-              psst. Looking for the <strong>DSN</strong> for an SDK? You'll find that
-              under <strong>[Project] » Settings » Client Keys</strong>
-              .
-            </small>
-          </p>
-
-          {this.state.loading ? (
-            <LoadingIndicator />
-          ) : this.state.error ? (
-            <LoadingError onRetry={this.fetchData} />
-          ) : (
-            this.renderResults()
-          )}
-
-          <div className="form-actions" style={{textAlign: 'right'}}>
-            <Link to="/api/new-token/" className="btn btn-primary ref-create-token">
-              {t('Create New Token')}
-            </Link>
-          </div>
-        </div>
-      </DocumentTitle>
-    );
-  },
-});
-
-export default ApiTokens;
diff --git a/src/sentry/templates/sentry/account/appearance.html b/src/sentry/templates/sentry/account/appearance.html
deleted file mode 100644
index fc03eb5820..0000000000
--- a/src/sentry/templates/sentry/account/appearance.html
+++ /dev/null
@@ -1,40 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Appearance" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <form class="form-stacked" action="" method="post" id="appearance_form">
-        {% csrf_token %}
-
-        {{ form|as_crispy_errors }}
-
-        <legend style="margin-top: 0">{% trans "Events" %}</legend>
-
-        {% with form.stacktrace_order as field %}
-            {{ field|as_crispy_field }}
-        {% endwith %}
-
-
-        <legend>{% trans "Localization" %}</legend>
-
-        {% with form.language as field %}
-            {{ field|as_crispy_field }}
-        {% endwith %}
-
-        {% with form.timezone as field %}
-            {{ field|as_crispy_field }}
-        {% endwith %}
-
-        {% with form.clock_24_hours as field %}
-            {{ field|as_crispy_field }}
-        {% endwith %}
-
-        <div class="form-actions">
-            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </div>
-    </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/avatar.html b/src/sentry/templates/sentry/account/avatar.html
deleted file mode 100644
index 82cea618e9..0000000000
--- a/src/sentry/templates/sentry/account/avatar.html
+++ /dev/null
@@ -1,18 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <div id="avatar-settings"></div>
-  <script>
-    $(function() {
-      ReactDOM.render(React.createFactory(SentryApp.AvatarSettings)({
-        userId: {{ request.user.id }}
-      }), document.getElementById('avatar-settings'))
-    });
-  </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/emails.html b/src/sentry/templates/sentry/account/emails.html
deleted file mode 100644
index 228d784445..0000000000
--- a/src/sentry/templates/sentry/account/emails.html
+++ /dev/null
@@ -1,87 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Email Settings" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  {% if request.user.has_unverified_emails %}
-    <div class="alert alert-warning alert-block">
-      {% trans "You have unverified emails. " %}
-      <form action="{% url 'sentry-account-confirm-email-send' %}" method="post" class="email-alert-button">
-        {% csrf_token %}
-        <button type="submit" class="btn-link">{% trans "Resend Verification Emails." %}</button>
-      </form>
-    </div>
-  {% endif %}
-
-  <div class="panel panel-default">
-    <div class="panel-heading">
-      <h3 class="panel-title">Emails</h3>
-    </div>
-    <table class="table">
-      <tbody>
-      <tr>
-        <td>
-          {{ primary_email.email }}
-          <span> (Primary)</span>
-          {% if not primary_email.is_verified %}
-          <span class="label verification label-warning">Unverified</span>
-          {% endif %}
-        </td>
-        <td>
-        </td>
-        <td>
-        </td>
-      </tr>
-      {% if alt_emails %}
-        {% for email in alt_emails %}
-        <tr>
-          <td>
-            {{ email.email }}
-            {% if not email.is_verified %}
-            <span class="label verification label-warning">Unverified</span>
-            {% endif %}
-          </td>
-          <td style="text-align: right">
-            {% if email != primary_email and email.is_verified %}
-            <form action="" method="post">
-              {% csrf_token %}
-              <input type='hidden' name='new_primary_email' value='{{ email.email }}'>
-              <button type='submit' name='primary' class='btn btn-default btn-sm'>Set as Primary Email</button>
-            </form>
-            {% endif %}
-          </td>
-          <td style="text-align:center">
-            {% if email != primary_email %}
-            <form action="" method="post">
-              {% csrf_token %}
-              <input type='hidden' name='email' value='{{ email.email }}'>
-              <button type='submit' name='remove' class='btn btn-danger btn-sm remove'><span class="icon-trash"></span></button>
-            </form>
-            {% endif %}
-          </td>
-        </tr>
-        {% endfor %}
-      {% endif %}
-      </tbody>
-    </table>
-  </div>
-  <p class='help-block'>To use an email for <a href="{% url "sentry-account-settings-notifications" %}">notifications</a> it must be verified</p>
-  <br>
-  <form action="" method="post" class="">
-    {% csrf_token %}
-    {{ email_form|as_crispy_errors }}
-    {{ email_form.alt_email|as_crispy_field }}
-
-    {% if email_form.password %}
-      {{ email_form.password|as_crispy_field }}
-    {% endif %}
-
-    <fieldset class="form-actions">
-      <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-    </fieldset>
-  </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/identities.html b/src/sentry/templates/sentry/account/identities.html
deleted file mode 100644
index 0c5fe00e2a..0000000000
--- a/src/sentry/templates/sentry/account/identities.html
+++ /dev/null
@@ -1,40 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_auth %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Identities" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <fieldset>
-        <legend>{% trans "Current Identities" %}</legend>
-    </fieldset>
-    {% if not identity_list %}
-        <div class="well">{% trans "There are no identities associated with this account." %}</div>
-    {% else %}
-        <table class="table simple-table">
-            <thead>
-                <tr>
-                    <th>{% trans "Identity" %}</th>
-                    <th style="width: 100px">&nbsp;</th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for identity in identity_list %}
-                    <tr>
-                        <td>{{ identity.provider|auth_provider_label }}</td>
-                        <td style="text-align: center;">
-                            <form method="post"
-                                  action="{% url 'sentry-account-disconnect-identity' identity.id %}">
-                                {% csrf_token %}
-                                <button type="submit" class="btn btn-default btn-sm">Disconnect</button>
-                            </form>
-                        </td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-    {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/notifications.html b/src/sentry/templates/sentry/account/notifications.html
deleted file mode 100644
index d948e7b3bf..0000000000
--- a/src/sentry/templates/sentry/account/notifications.html
+++ /dev/null
@@ -1,213 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Notification Settings" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <style type="text/css">
-    table label,
-    table input[type=checkbox] {
-        margin: 0;
-    }
-    table caption {
-        font-weight: normal;
-        text-align: left;
-        font-size: 16px;
-        padding-bottom: 10px;
-    }
-    td label small {
-        font-weight: normal;
-    }
-    table.notifications-fine-tuning {
-      margin-bottom: 20px;
-    }
-    table.notifications-fine-tuning > tbody > tr > td,
-    table.notifications-fine-tuning > thead > tr > th {
-      padding: 8px 10px;
-      font-size: 14px;
-    }
-    table.notifications-fine-tuning > tbody > tr > td.route {
-      padding: 0;
-    }
-    table.notifications-fine-tuning > tbody > tr > td.route .form-control {
-      padding: 8px 10px;
-      border: 1px solid #fff;
-      border-width: 0 1px;
-      box-shadow: none;
-      top: 0;
-      border-radius: 0;
-    }
-    table.notifications-fine-tuning > tbody > tr > td.route .form-control .select2-choice .select2-arrow {
-      right: -3px;
-    }
-    table.notifications-fine-tuning > tbody > tr > td.route .form-control .select2-choice > .select2-chosen {
-      margin-right: 20px;
-    }
-    table.notifications-fine-tuning > tbody > tr > td.route .form-control.select2-dropdown-open {
-      border-color: #c9c0d1;
-    }
-    td .form-group { margin-bottom: 0; }
-    </style>
-    <form action="" method="post" class="">
-        {% csrf_token %}
-
-        <h4>{% trans "Alerts" %}</h4>
-
-        <p>Alerts are generated based on a project's rules, defined in <strong>[Project] &raquo; Project Settings &raquo; Alerts &raquo; Rules</strong>.</p>
-
-        {{ settings_form.subscribe_by_default|as_crispy_field }}
-
-        <hr />
-
-        <h4>{% trans "Workflow" %}</h4>
-
-        <p>
-          {% blocktrans %}
-            Workflow notifications are separate from alerts and are generated
-            for issue updates, such as changes in issue assignment, changes to
-            resolution status (including regressions), and comments.
-          {% endblocktrans %}
-        </p>
-        <p>
-          {% blocktrans %}
-            When workflow notifications are enabled for a project, you'll
-            receive an email when your teammates perform any of these actions.
-            You'll be automatically added as a participant on an issue by
-            taking one of the actions listed above. You may subscribe (or
-            unsubscribe) from individual issues on their respective pages.
-          {% endblocktrans %}
-        </p>
-
-        {{ settings_form.workflow_notifications|as_crispy_field }}
-
-        {{ settings_form.self_assign_issue|as_crispy_field }}
-
-        {{ settings_form.self_notifications|as_crispy_field }}
-
-        <hr />
-
-        <h4>{% trans "Weekly Reports" %}</h4>
-
-        <p>{% blocktrans %}Reports contain a summary of what's happened within your organization over the last week.{% endblocktrans %}</p>
-
-        {{ reports_form.organizations|as_crispy_field }}
-
-        <hr />
-
-        {% if org_forms %}
-          <h4>{% trans "Deploys" %}</h4>
-
-          <p>{% blocktrans %}Deploy emails include release, environment and commit overviews. Choose to receive emails for:{% endblocktrans %}</p>
-
-          {% for org, form in org_forms %}
-              {{ form|as_crispy_errors }}
-          {% endfor %}
-
-          {% for org, form in org_forms %}
-            <div class="deploy-form">
-                <h5>{{org.name}}</h5>
-                {{ form.notifications|as_crispy_field }}
-            </div>
-          {% endfor %}
-
-          <hr />
-        {% endif %}
-
-        <h4>{% trans "Fine Tuning" %}</h4>
-
-        <p>Use the settings below to fine tune notification settings per-project. You may add or verify additional email addresses via the <a href="{% url "sentry-account-settings-emails" %}">Emails</a> settings.</p>
-
-        {% for project, form in project_forms %}
-            {{ form|as_crispy_errors }}
-        {% endfor %}
-
-        {% for project, form in project_forms %}
-            {% ifchanged project.organization %}
-                {% if not forloop.first %}
-                    </table>
-                {% endif %}
-
-                <table class="table notifications-fine-tuning">
-                    <thead>
-                        <tr>
-                            <th>{% trans "Project" %}</th>
-                            <th style="width:300px;overflow:hidden;text-align:right">
-                              {% trans "Email Address" %}
-                            </th>
-                            <th style="width:50px;text-align:center">
-                              <a data-toggle="alert">Alerts</a>
-                            </th>
-                            <th style="width:50px;text-align:center">
-                              {% trans "Workflow" %}
-                            </th>
-                        </tr>
-                    </thead>
-                    <tbody>
-            {% endifchanged %}
-            <tr>
-              <td>
-                <a href="{% absolute_uri '/{}/{}/settings/alerts/' project.organization.slug project.slug %}">{{ project.organization.slug}} / {{ project.slug }}</a>
-              </td>
-              <td style="text-align:right" class="route">
-              {% with form.email as field %}
-                {{ field|as_crispy_field }}
-              {% endwith %}
-              </td>
-              <td style="text-align:center">{{ form.alert }}</td>
-              <td style="text-align:center">{{ form.workflow }}</td>
-            </tr>
-        {% endfor %}
-        </tbody></table>
-
-        {% for form in ext_forms %}
-            <h4>{{ form.get_title }}</h4>
-            {% with form.get_description as description %}
-                {% if description %}
-                    {{ description|linebreaks }}
-                {% endif %}
-            {% endwith %}
-            {% include "sentry/partial/form_base.html" %}
-        {% endfor %}
-
-        {% block hosted_notifications %}
-        {% endblock %}
-
-        <fieldset class="form-actions">
-            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </fieldset>
-    </form>
-    <script>
-    $(function() {
-  function findCheckboxes(parent, match) {
-    return $(parent)
-      .parents('table')
-      .find('tbody input[type="checkbox"]')
-      .filter(function() {
-        return this.name.indexOf(match) !== -1;
-      });
-  }
-
-  function setupChecker(pattern) {
-    $('form a[data-toggle="' + pattern + '"]')
-      .click(function(e) {
-        var checked = $(this).data('checked');
-        findCheckboxes(this, pattern).prop('checked', !checked);
-        $(this).data('checked', !checked);
-      })
-      .each(function() {
-        var boxes = findCheckboxes(this, pattern);
-        var checkedBoxes = boxes.filter(function() {
-          return $(this).is(':checked');
-        });
-        var defaultChecked = boxes.length === checkedBoxes.length;
-        $(this).data('checked', defaultChecked);
-      });
-  }
-
-  setupChecker('alert');
-});
-</script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/security.html b/src/sentry/templates/sentry/account/security.html
deleted file mode 100644
index 12f860be2d..0000000000
--- a/src/sentry/templates/sentry/account/security.html
+++ /dev/null
@@ -1,22 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Account Security" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <legend>{% trans "Two-factor authenticaton"  %}</legend>
-  {% if has_2fa %}
-    <p class="well">
-      <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Manage" %}</a>
-      <span class="circle-indicator enabled"></span>{% blocktrans  %}Two-factor authentication is <strong>enabled</strong>.{% endblocktrans  %}
-    </p>
-  {% else %}
-    <p class="well">
-      <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Enable" %}</a>
-      <span class="circle-indicator disabled"></span>{% blocktrans  %}Two-factor authentication is currently <strong>disabled</strong>.{% endblocktrans  %}</p>
-    <p></p>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
deleted file mode 100644
index f2c48eade3..0000000000
--- a/src/sentry/templates/sentry/account/settings.html
+++ /dev/null
@@ -1,80 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_avatars %}
-{% load sentry_helpers %}
-{% load sentry_features %}
-
-{% block wrapperclass %}narrow account-settings{% endblock %}
-
-{% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    {% if not email.is_verified %}
-      <div class="alert alert-warning alert-block">
-        {% trans "Your email address has not been verified. " %}
-        <form action="{% url 'sentry-account-confirm-email-send' %}" method="post" class="email-alert-button">
-          {% csrf_token %}
-          <input type="hidden" name="email" value="{{ email.email }}">
-          <button type="submit" name="primary-email" class="btn-link">{% trans "Resend Verification Email." %}</button>
-        </form>
-      </div>
-    {% endif %}
-
-    <form action="" method="post">
-        {% csrf_token %}
-        {{ form|as_crispy_errors }}
-
-        <legend style="margin-top: 0;">Your details</legend>
-
-        <div class="account-settings-overview">
-          <div class="avatar-preview">
-            <label class="control-label">Avatar</label>
-            <div>
-              <a class="avatar-edit-link" href="{% url 'sentry-account-settings-avatar' %}">
-                <span class="avatar">
-                {% avatar request.user 118 %}
-                </span>
-                <span class="icon-settings"></span>
-              </a>
-            </div>
-          </div>
-          <div class="account-settings-body">
-            {% with form.name as field %}
-              {{ field|as_crispy_field }}
-            {% endwith %}
-            {% if form.username %}
-              {% with form.username as field %}
-                {{ field|as_crispy_field }}
-              {% endwith %}
-            {% endif %}
-            {% with form.email as field %}
-              {{ field|as_crispy_field }}
-            {% endwith %}
-            {% if form.new_password %}
-              <p class="help-block pull-right" style="margin-top: 0">({% trans "Optional" %})</p>
-              {% with form.new_password as field %}
-                {{ field|as_crispy_field }}
-              {% endwith %}
-              {% with form.verify_new_password as field %}
-                {{ field|as_crispy_field }}
-              {% endwith %}
-            {% endif %}
-          </div>
-        </div>
-
-        {% if form.password %}
-          <legend>{% trans "Verification"  %}</legend>
-          {% with form.password as field %}
-              {{ field|as_crispy_field }}
-          {% endwith %}
-        {% endif %}
-
-        {% if not form.is_readonly %}
-          <fieldset class="form-actions">
-              <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-          </fieldset>
-        {% endif %}
-    </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/subscriptions.html b/src/sentry/templates/sentry/account/subscriptions.html
deleted file mode 100644
index ba21104d30..0000000000
--- a/src/sentry/templates/sentry/account/subscriptions.html
+++ /dev/null
@@ -1,86 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_auth %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Subscriptions" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    {% if not email.is_verified %}
-      <div class="alert alert-warning alert-block">
-        {% trans "Your email address has not been verified. " %}
-        <form action="{% url 'sentry-account-confirm-email-send' %}" method="post" class="email-alert-button">
-          {% csrf_token %}
-          <input type="hidden" name="email" value="{{ email.email }}">
-          <button type="submit" name="primary-email" class="btn-link">{% trans "Resend Verification Email." %}</button>
-        </form>
-      </div>
-    {% endif %}
-
-    <legend class="m-t-0">Subscriptions</legend>
-
-    <p>
-      Sentry is committed to respecting your inbox. Our goal is to provide useful
-      content and resources that make fixing errors less painful. Enjoyable even.
-    </p>
-
-    <p>
-      As part of our compliance with the EU’s General Data Protection Regulation
-      (GDPR), starting on 25 May 2018, we’ll only email you according to the
-      marketing categories to which you’ve explicitly opted-in.
-    </p>
-
-    <table class="table">
-      <tbody>
-    {% for subscription in subscriptions.subscriptions %}
-        <tr>
-          <td>
-            <h5>{{ subscription.list_name }}</h5>
-            {% if subscription.list_description %}
-            <p class="help-block">
-              {{ subscription.list_description }}
-            </p>
-            {% endif %}
-          </td>
-          <td class="align-right">
-              <div data-list-id="{{ subscription.list_id }}" class="switch switch-lg{% if subscription.subscribed %} switch-on{% endif %}" role="checkbox">
-                  <span class="switch-toggle"></span>
-              </div>
-              <div>
-            {% if subscription.subscribed %}
-            <p class="help-block">
-              <small>
-                {% firstof subscription.email email.email %} on {{subscription.subscribed_date|date:'SHORT_DATE_FORMAT' }}
-              </small>
-            </p>
-            {% endif %}
-            </div>
-          </td>
-        </tr>
-    {% endfor %}
-      </tbody>
-    </table>
-
-    <p>
-      We’re applying GDPR consent and privacy policies to all Sentry contacts,
-      regardless of location. You’ll be able to manage your subscriptions here
-      and from an Unsubscribe link in the footer of all marketing emails.
-    </p>
-
-    <p>
-      Please contact {{ "learn@sentry.io"|urlize }} with any questions or suggestions.
-    </p>
-
-    <script>
-    $('div.switch').click(function(){
-        var $e = $(this);
-        $e.toggleClass('switch-on');
-        $.post('{% url 'sentry-account-settings-subscriptions' %}', {
-            'subscribed': $e.hasClass('switch-on') ? '1' : '0',
-            'listId': $e.data('list-id')
-        });
-    });
-    </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor.html b/src/sentry/templates/sentry/account/twofactor.html
deleted file mode 100644
index 054d87cbb3..0000000000
--- a/src/sentry/templates/sentry/account/twofactor.html
+++ /dev/null
@@ -1,58 +0,0 @@
-{% extends "sentry/bases/twofactor_settings.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Two-Factor Authentication" %} | {{ block.super }}{% endblock %}
-
-{% block twofactor_title %}{% trans "Two-factor Authentication" %}{% endblock %}
-{% block twofactor_body %}
-{% if has_2fa %}
-  <p class="well"><span class="circle-indicator enabled"></span>{% blocktrans  %}Two-factor authentication is <strong>enabled</strong>.{% endblocktrans  %}</p>
-{% else %}
-  <p class="well"><span class="circle-indicator disabled"></span>{% blocktrans  %}Two-factor authentication is currently <strong>disabled</strong>.{% endblocktrans  %}</p>
-{% endif %}
-  <p>
-    Two-factor authentication improves your security by requiring an authentication
-    code in addition to your password.
-  </p>
-  <div class="method-list">
-  {% for auth in interfaces %}
-    <div class="box box-collapse-margins {% if auth.is_enrolled %}enrolled{% else %}not-enrolled{% endif %}">
-      <div class="pull-right">
-      {% if auth.is_enrolled %}
-        {% if auth.configure_button %}
-          <a href="{{ auth.interface_id }}/" class="btn btn-default btn-sm">{{ auth.configure_button }}</a>
-        {% endif %}
-        {% if auth.remove_button %}
-          <form action="{{ auth.interface_id }}/" method="post" style="display: inline">
-            {% csrf_token %}
-            <button type="submit" name="remove"
-              class="btn btn-default btn-sm"><span class="icon-trash"></span></button>
-          </form>
-        {% endif %}
-      {% else %}
-        {% if not has_2fa and auth.is_backup_interface %}
-          <em><small>this can only be managed if 2FA is enabled</small></em>
-        {% else %}
-          <form action="{{ auth.interface_id }}/" method="post" style="display: inline">
-            {% csrf_token %}
-            <button type="submit" name="enroll"
-              class="btn btn-primary btn-sm">Add</button>
-          </form>
-        {% endif %}
-      {% endif %}
-      </div>
-      <h4>{{ auth.name }}</h4>
-      <p>{{ auth.description }}</p>
-    </div>
-  {% endfor %}
-  </div>
-
-  <form action="" method="post" class="form-stacked">
-    {% csrf_token %}
-    <fieldset class="form-actions">
-      <button type="submit" name="back" class="btn btn-default">{% trans "Back" %}</button>
-    </fieldset>
-  </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure.html b/src/sentry/templates/sentry/account/twofactor/configure.html
deleted file mode 100644
index 4935f4f3e0..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/configure.html
+++ /dev/null
@@ -1,43 +0,0 @@
-{% extends "sentry/bases/twofactor_settings.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_body %}
-  {% if auth.remove_button %}
-    {% if auth.is_enrolled %}
-      <p><strong>Method is enabled</strong></p>
-    {% else %}
-      <p><em>Method is currently not enabled</em></p>
-    {% endif %}
-  {% endif %}
-
-  {% block twofactor_info %}
-  <p>
-    {{ auth.description }}
-  </p>
-    {% if auth.is_enrolled %}
-    <dl>
-      <dt>Last used:
-      <dd>{% if auth.authenticator.last_used_at %}{{ auth.authenticator.last_used_at|date:"N j, Y, P e" }}{% else %}{% trans "never" %}{% endif %}</dd>
-      <dt>Created at:
-      <dd>{% if auth.authenticator.created_at %}{{ auth.authenticator.created_at|date:"N j, Y, P e" }}{% else %}{% trans "never" %}{% endif %}</dd>
-    </dl>
-    {% endif %}
-  {% endblock %}
-
-  <fieldset class="form-actions">
-    <form action="" method="post" id="twofactor-form" style="display: inline">
-      {% csrf_token %}
-      {% block twofactor_buttons %}
-        {% if not auth.is_enrolled %}
-          <button type="submit" name="enroll" class="btn btn-primary">{{ auth.enroll_button }}</button>
-        {% elif auth.remove_button %}
-          <button type="submit" name="remove"
-            class="btn btn-danger">{{ auth.remove_button }}</button>
-        {% endif %}
-      {% endblock %}
-    </form>
-    <a href="{% url 'sentry-account-settings-2fa' %}" class="btn btn-default">{% trans "Back" %}</a>
-  </fieldset>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure_recovery.html b/src/sentry/templates/sentry/account/twofactor/configure_recovery.html
deleted file mode 100644
index 38c6acb20e..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/configure_recovery.html
+++ /dev/null
@@ -1,20 +0,0 @@
-{% extends "sentry/account/twofactor/configure.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_info %}
-  {{ block.super }}
-
-  {% if auth.is_enrolled %}
-  <p><strong>Make sure to keep a copy of these codes to recover your
-    account if you lose your authenticator.</strong></p>
-  <h4>Unused Codes</h4>
-  <pre>{% for code in auth.get_unused_codes %}{{ code }}
-{% endfor %}</pre>
-  {% endif %}
-{% endblock %}
-{% block twofactor_buttons %}
-  <button type="submit" name="regenerate" class="btn btn-primary">Regenerate codes</button>
-  {{ block.super }}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure_sms.html b/src/sentry/templates/sentry/account/twofactor/configure_sms.html
deleted file mode 100644
index 42a29eea14..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/configure_sms.html
+++ /dev/null
@@ -1,12 +0,0 @@
-{% extends "sentry/account/twofactor/configure.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_info %}
-  {{ block.super }}
-
-  {% if auth.is_enrolled %}
-  <p>Confirmation codes are sent to the following phone: <strong>{{ auth.phone_number }}</strong></p>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure_u2f.html b/src/sentry/templates/sentry/account/twofactor/configure_u2f.html
deleted file mode 100644
index a2c29b9af5..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/configure_u2f.html
+++ /dev/null
@@ -1,35 +0,0 @@
-{% extends "sentry/account/twofactor/configure.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_info %}
-  {{ block.super }}
-
-  <input type=hidden name="key_handle_to_delete">
-
-  {% with auth.get_registered_devices as devices %}
-    {% if devices %}
-      <h3>Registered Devices</h3>
-      <ul class="registered-devices">
-        {% for device in devices %}
-          <li><strong>{{ device.name }}</strong>, added on {{ device.timestamp|date:"N j, Y, P e" }}
-            {% if devices|length > 1 %}
-            <form action="" method=post style="display: inline">
-              {% csrf_token %}
-              <input type=hidden name="key_handle" value="{{ device.key_handle }}">
-              <button type="submit" onclick="return confirm('Are you sure you want to remove this key?');" name="remove"
-                class="btn btn-danger btn-sm"><span class="icon-trash"></span></button>
-            </form>
-            {% endif %}
-        {% endfor %}
-      </ul>
-    {% endif %}
-  {% endwith %}
-{% endblock %}
-{% block twofactor_buttons %}
-  {{ block.super }}
-  {% if auth.is_enrolled %}
-    <button type="submit" name="enroll" class="btn btn-default">{% trans "Add Another Device" %}</button>
-  {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_sms.html b/src/sentry/templates/sentry/account/twofactor/enroll_sms.html
deleted file mode 100644
index bca52c5357..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/enroll_sms.html
+++ /dev/null
@@ -1,46 +0,0 @@
-{% extends "sentry/bases/twofactor_settings.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
-{% block twofactor_body %}
-  <p>
-    Enter your phone number and then provide the confirmation code we send you to active it.
-  </p>
-  <form action="" method="post">
-
-    {% if stage == 'initial' or stage == 'pick_number' %}
-      <input type="hidden" name="stage" value="pick_number">
-      {{ sms_form|as_crispy_errors }}
-      {% for field in sms_form %}
-        {{ field|as_crispy_field }}
-      {% endfor %}
-    {% elif stage == 'confirm' %}
-      <p>Sent confirmation code to <strong>{{ auth.phone_number }}</strong>:</p>
-      <input type="hidden" name="stage" value="confirm">
-      <input type="hidden" name="phone_number" value="{{ auth.phone_number }}">
-      {{ otp_form|as_crispy_errors }}
-      {% for field in otp_form %}
-        {{ field|as_crispy_field }}
-      {% endfor %}
-      <p><small>Wrong number? <a href=".">Start over</a>.
-    {% endif %}
-
-    <fieldset class="form-actions">
-      {% csrf_token %}
-
-      <input type="hidden" name="enroll">
-      <input type="hidden" name="totp_secret" value="{{ auth.secret }}">
-      <div>
-        <a href="{% url 'sentry-account-settings-2fa-sms' %}" class="btn btn-default">{% trans "Cancel" %}</a>
-        {% if not auth.phone_number %}
-        <button type="submit" class="btn btn-primary">{% trans "Send Confirmation Code" %}</button>
-        {% else %}
-        <button type="submit" class="btn btn-primary">{% trans "Confirm" %}</button>
-        {% endif %}
-      </div>
-    </fieldset>
-  </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_totp.html b/src/sentry/templates/sentry/account/twofactor/enroll_totp.html
deleted file mode 100644
index 03d4cdeeeb..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/enroll_totp.html
+++ /dev/null
@@ -1,46 +0,0 @@
-{% extends "sentry/bases/twofactor_settings.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
-{% block twofactor_body %}
-  <p>
-    To enroll use an application on your phone to get two-factor
-    authentication codes when prompted.  Scan the below QR code
-    and then enter a code to confirm the enrollment.
-  </p>
-  <div class="qrcode">
-    <table>
-      {% for row in provision_qrcode %}
-        <tr>
-          {% for cell in row %}
-            <td class="{% if cell %}black{% else %}white{% endif %}"></td>
-          {% endfor %}
-        </tr>
-      {% endfor %}
-    </table>
-  </div>
-  <fieldset class="form-actions">
-    <form action="" method="post">
-      {% csrf_token %}
-
-      {{ otp_form|as_crispy_errors }}
-      {% for field in otp_form %}
-        {{ field|as_crispy_field }}
-      {% endfor %}
-      {% if password_form.password %}
-        {{ password_form|as_crispy_errors }}
-        {{ password_form.password|as_crispy_field }}
-      {% endif %}
-
-      <input type="hidden" name="enroll">
-      <input type="hidden" name="totp_secret" value="{{ auth.secret }}">
-      <div>
-        <a href="{% url 'sentry-account-settings-2fa-totp' %}" class="btn btn-default">{% trans "Cancel" %}</a>
-        <button type="submit" class="btn btn-primary">{% trans "Confirm" %}</button>
-      </div>
-    </form>
-  </fieldset>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html b/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
deleted file mode 100644
index 4c8451986a..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
+++ /dev/null
@@ -1,27 +0,0 @@
-{% extends "sentry/bases/twofactor_settings.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
-{% block twofactor_body %}
-  <form action="" method="post">
-    {% for field in u2f_form %}
-      {{ field|as_crispy_field }}
-    {% endfor %}
-    <div id="u2f-enrollment"></div>
-    {% csrf_token %}
-    <fieldset class="form-actions">
-      <input type="hidden" name="enroll">
-      <div>
-        <a href="{% url 'sentry-account-settings-2fa-u2f' %}" class="btn btn-default">{% trans "Cancel" %}</a>
-      </div>
-    </fieldset>
-  </form>
-  <script>
-    ReactDOM.render(React.createElement(SentryApp.U2fEnrollment, {
-      enrollmentData: {{ enrollment_data|to_json|safe }}
-    }), document.getElementById('u2f-enrollment'));
-  </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/remove.html b/src/sentry/templates/sentry/account/twofactor/remove.html
deleted file mode 100644
index 0f0b1e3300..0000000000
--- a/src/sentry/templates/sentry/account/twofactor/remove.html
+++ /dev/null
@@ -1,35 +0,0 @@
-{% extends "sentry/bases/twofactor_settings.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block twofactor_title %}{% trans "Remove Method:" %} {{ auth.name }}{% endblock %}
-{% block twofactor_body %}
-  <p>
-    Do you want to remove the method?  You will no longer be able to
-    use it for two-factor authentication afterwards.  Removing the last
-    authenticator removes two-factor authentication.
-  </p>
-
-  {% if removes_backups %}
-  <p>
-    Removing this authentication method will also automatically remove
-    backup methods such as recovery codes and disable two-factor
-    authentication.
-  </p>
-  {% endif %}
-
-  <form action="" method="post" class="form-stacked">
-    {% csrf_token %}
-    {% if password_form.password %}
-      {{ password_form|as_crispy_errors }}
-      {{ password_form.password|as_crispy_field }}
-    {% endif %}
-    <input type="hidden" name="remove" value="1">
-    <fieldset class="form-actions">
-      <button type="submit" name="yes" class="btn btn-default btn-primary">{% trans "Yes" %}</button>
-      <button type="submit" name="no" class="btn btn-default">{% trans "No" %}</button>
-    </fieldset>
-  </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/account.html b/src/sentry/templates/sentry/bases/account.html
deleted file mode 100644
index dd60de9ca3..0000000000
--- a/src/sentry/templates/sentry/bases/account.html
+++ /dev/null
@@ -1,53 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-{% load sentry_features %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Settings" %} | {{ block.super }}{% endblock %}
-{% block global_sidebar %}{% endblock %}
-{% block footer %}{% endblock %}
-
-{% block content %}
-<div class="pattern-bg"></div>
-<div class="box box-modal">
-  <div class="box-header">
-    <div class="pull-right">
-      <a href="{% url 'sentry-logout' %}">{% trans "Sign out" %}</a>
-    </div>
-    <a href="/">
-      <span class="icon-sentry-logo"></span>
-      <span class="back-to">{% trans "Back to organization" %}</span>
-    </a>
-  </div>
-  <div class="box-content with-padding">
-    <h4 class="m-b-1">{% trans "My Settings" %}</h4>
-    {% block nav %}
-      <div class="dropdown pull-right anchor-right">
-        <a class="dropdown-toggle" data-toggle="dropdown">
-          {% trans "More" %} <i class="icon-arrow-down"></i>
-        </a>
-        <ul class="dropdown-menu dropdown-menu-right">
-          <li><a href="{% absolute_uri '/account/authorizations/' %}">{% trans "Authorized Applications" %}</a></li>
-          <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-identities' %}">{% trans "Identities" %}</a></li>
-          <li{% if page == 'remove_account' %} class="active"{% endif %}><a href="{% url 'sentry-remove-account' %}">{% trans "Close Account" %}</a></li>
-        </ul>
-      </div>
-      <ul class="nav nav-tabs border-bottom">
-        <li{% if page == 'settings' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings' %}">{% trans "Account" %}</a></li>
-        <li{% if page == 'avatar' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-avatar' %}">{% trans "Avatar" %}</a></li>
-        <li{% if page == 'appearance' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-appearance' %}">{% trans "Appearance" %}</a></li>
-        <li{% if page == 'notifications' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-notifications' %}">{% trans "Notifications" %}</a></li>
-        <li{% if page == 'emails' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-emails' %}">{% trans "Emails" %}</a></li>
-        <li{% if page == 'security' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-security' %}">{% trans "Security" %}</a></li>
-        {% if has_newsletters %}
-          <li{% if page == 'subscriptions' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-subscriptions' %}">{% trans "Subscriptions" %}</a></li>
-        {% endif %}
-      </ul>
-    {% endblock %}
-
-    {% block main %}
-    {% endblock %}
-  </div>
-</div>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/twofactor_settings.html b/src/sentry/templates/sentry/bases/twofactor_settings.html
deleted file mode 100644
index 35b054215e..0000000000
--- a/src/sentry/templates/sentry/bases/twofactor_settings.html
+++ /dev/null
@@ -1,15 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{{ auth.name }} | {{ block.super }}{% endblock %}
-
-{% block content %}
-  <div class="box">
-    <div class="box-content with-padding">
-      <legend style="margin-top: 0;">{% block twofactor_title %}{% trans "Method:" %} {{ auth.name }}{% endblock %}</legend>
-      {% block twofactor_body %}{% endblock %}
-    </div>
-  </div>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/post-remove-account.html b/src/sentry/templates/sentry/post-remove-account.html
deleted file mode 100644
index 3d9bbfd3ef..0000000000
--- a/src/sentry/templates/sentry/post-remove-account.html
+++ /dev/null
@@ -1,16 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-
-{% block title %}{% trans "Remove Account" %}{% endblock %}
-
-{% block main %}
-  <section class="body">
-    <div class="page-header">
-      <h2>{% trans "Scheduled for Removal" %}</h2>
-    </div>
-
-    <p>{% trans "Your account has been deactivated and scheduled for removal." %}</p>
-    <p>{% trans "Thanks for using Sentry! We hope to see you again soon!" %}</p>
-  </section>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/remove-account.html b/src/sentry/templates/sentry/remove-account.html
deleted file mode 100644
index de7eec6c9d..0000000000
--- a/src/sentry/templates/sentry/remove-account.html
+++ /dev/null
@@ -1,52 +0,0 @@
-{% extends "sentry/bases/account.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Close Account" %}{% endblock %}
-
-{% block main %}
-  <h3>Close Account</h3>
-
-  <form class="form-stacked" action="" method="post" onsubmit="return confirm('Are you REALLY sure you want to go through with this?')">
-    {% csrf_token %}
-
-    <p>{% trans "This will permanently remove all associated data for your user." %}</p>
-
-    <p><strong>{% trans "Closing your account is permanent and cannot be undone!" %}</strong></p>
-
-    {% if organization_results %}
-      <p>{% trans "If you continue, the following organizations will be removed:" %}</p>
-
-      <div class="control-group">
-        <ul class="inputs-list">
-          {% for result in organization_results %}
-            <li>
-              <label class="checkbox">
-                <input type="checkbox" value="{{ result.organization.slug }}"
-                  name="oID"
-                  {% if result.single_owner %} checked="checked" disabled="disabled"{% endif %}/>
-                {{ result.organization.name }} ({{ result.organization.slug }})
-              </label>
-            </li>
-          {% endfor %}
-        </ul>
-        <div class="help-block">
-          Ownership will remain with other members if an organization is not deleted.<br />
-          Disabled boxes mean that there is no other owner within the organization so no one else can take ownership.
-        </div>
-      </div>
-    {% endif %}
-
-    {{ form|as_crispy_errors }}
-
-    {% for field in form %}
-        {{ field|as_crispy_field }}
-    {% endfor %}
-
-    <fieldset class="form-actions">
-      <button type="submit" class="btn btn-danger">{% trans "Close Account" %}</button>
-      <a href="{% url 'sentry-account-settings' %}" class="btn btn-default">{% trans "Cancel" %}</a>
-    </fieldset>
-{% endblock %}
diff --git a/src/sentry/web/frontend/account_notification.py b/src/sentry/web/frontend/account_notification.py
deleted file mode 100644
index 7cffdbfae9..0000000000
--- a/src/sentry/web/frontend/account_notification.py
+++ /dev/null
@@ -1,114 +0,0 @@
-from __future__ import absolute_import
-
-import itertools
-
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.db import transaction
-from django.http import HttpResponseRedirect
-from django.views.decorators.cache import never_cache
-from django.utils.decorators import method_decorator
-
-from sudo.decorators import sudo_required
-
-from sentry.models import (Project, ProjectStatus, Organization, OrganizationStatus)
-from sentry.plugins import plugins
-from sentry.web.forms.accounts import (
-    ProjectEmailOptionsForm, NotificationSettingsForm, NotificationReportSettingsForm,
-    NotificationDeploySettingsForm
-)
-from sentry.web.decorators import login_required
-from sentry.web.frontend.base import BaseView
-from sentry.web.helpers import render_to_response
-from sentry.utils.auth import get_auth_providers
-from sentry.utils.safe import safe_execute
-
-
-class AccountNotificationView(BaseView):
-    notification_settings_form = NotificationSettingsForm
-
-    @method_decorator(never_cache)
-    @method_decorator(login_required)
-    @method_decorator(sudo_required)
-    @method_decorator(transaction.atomic)
-    def handle(self, request):
-        settings_form = self.notification_settings_form(request.user, request.POST or None)
-        reports_form = NotificationReportSettingsForm(
-            request.user, request.POST or None, prefix='reports'
-        )
-
-        org_list = list(
-            Organization.objects.filter(
-                status=OrganizationStatus.VISIBLE,
-                member_set__user=request.user,
-            ).distinct()
-        )
-
-        org_forms = [
-            (
-                org, NotificationDeploySettingsForm(
-                    request.user, org, request.POST or None, prefix='deploys-org-%s' % (org.id, )
-                )
-            ) for org in sorted(org_list, key=lambda o: o.name)
-        ]
-
-        project_list = list(
-            Project.objects.filter(
-                teams__organizationmemberteam__organizationmember__user=request.user,
-                teams__organizationmemberteam__is_active=True,
-                status=ProjectStatus.VISIBLE,
-            ).distinct()
-        )
-
-        project_forms = [
-            (
-                project, ProjectEmailOptionsForm(
-                    project,
-                    request.user,
-                    request.POST or None,
-                    prefix='project-%s' % (project.id, )
-                )
-            ) for project in sorted(project_list, key=lambda x: (x.organization.name, x.name))
-        ]
-
-        ext_forms = []
-        for plugin in plugins.all():
-            for form in safe_execute(plugin.get_notification_forms, _with_transaction=False) or ():
-                form = safe_execute(
-                    form,
-                    plugin,
-                    request.user,
-                    request.POST or None,
-                    prefix=plugin.slug,
-                    _with_transaction=False
-                )
-                if not form:
-                    continue
-                ext_forms.append(form)
-
-        if request.POST:
-            all_forms = list(
-                itertools.chain(
-                    [settings_form, reports_form], ext_forms, (f for _, f in project_forms),
-                    (f for _, f in org_forms)
-                )
-            )
-            if all(f.is_valid() for f in all_forms):
-                for form in all_forms:
-                    form.save()
-                messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
-                return HttpResponseRedirect(request.path)
-
-        context = csrf(request)
-        context.update(
-            {
-                'settings_form': settings_form,
-                'project_forms': project_forms,
-                'org_forms': org_forms,
-                'reports_form': reports_form,
-                'ext_forms': ext_forms,
-                'page': 'notifications',
-                'AUTH_PROVIDERS': get_auth_providers(),
-            }
-        )
-        return render_to_response('sentry/account/notifications.html', context, request)
diff --git a/src/sentry/web/frontend/account_security.py b/src/sentry/web/frontend/account_security.py
deleted file mode 100644
index 40045cdf00..0000000000
--- a/src/sentry/web/frontend/account_security.py
+++ /dev/null
@@ -1,18 +0,0 @@
-from __future__ import absolute_import
-
-from sentry import newsletter
-from sentry.models import Authenticator
-from sentry.utils.auth import get_auth_providers
-from sentry.web.frontend.base import BaseView
-
-
-class AccountSecurityView(BaseView):
-    def handle(self, request):
-        return self.respond(
-            'sentry/account/security.html', {
-                'page': 'security',
-                'has_2fa': Authenticator.objects.user_has_2fa(request.user),
-                'AUTH_PROVIDERS': get_auth_providers(),
-                'has_newsletters': newsletter.is_enabled(),
-            }
-        )
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 86babcf1dc..9b620e2d68 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -17,29 +17,24 @@ from django.contrib import messages
 from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
-from django.db import IntegrityError, transaction
-from django.db.models import Q
+from django.db import transaction
 from django.http import HttpResponseRedirect, Http404, HttpResponse
 from django.views.decorators.http import require_http_methods
 from django.views.decorators.cache import never_cache
 from django.views.decorators.csrf import csrf_protect
-from django.utils import timezone
 from django.utils.translation import ugettext as _
-from social_auth.backends import get_backend
-from social_auth.models import UserSocialAuth
-from sudo.decorators import sudo_required
 
-from sentry import newsletter
-from sentry.models import (User, UserEmail, LostPasswordHash, Project, UserOption, Authenticator)
+from sentry.models import (UserEmail, LostPasswordHash, Project, UserOption, Authenticator)
 from sentry.security import capture_security_activity
 from sentry.signals import email_verified
 from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import (
-    AccountSettingsForm, AppearanceSettingsForm, RecoverPasswordForm, ChangePasswordRecoverForm,
-    EmailForm
+    RecoverPasswordForm, ChangePasswordRecoverForm
 )
 from sentry.web.helpers import render_to_response
 from sentry.utils import auth
+from social_auth.backends import get_backend
+from social_auth.models import UserSocialAuth
 
 logger = logging.getLogger('sentry.accounts')
 
@@ -246,153 +241,6 @@ def confirm_email(request, user_id, hash):
     return HttpResponseRedirect(reverse('sentry-account-settings-emails'))
 
 
-@csrf_protect
-@never_cache
-@login_required
-@transaction.atomic
-def account_settings(request):
-    user = request.user
-
-    form = AccountSettingsForm(
-        user,
-        request,
-        request.POST or None,
-        initial={
-            'email': UserEmail.get_primary_email(user).email,
-            'username': user.username,
-            'name': user.name,
-        },
-    )
-
-    if form.is_valid():
-        old_email = user.email
-
-        form.save()
-
-        # update notification settings for those set to primary email with new primary email
-        alert_email = UserOption.objects.get_value(user=user, key='alert_email')
-
-        if alert_email == old_email:
-            UserOption.objects.set_value(user=user, key='alert_email', value=user.email)
-        options = UserOption.objects.filter(user=user, key='mail:email')
-        for option in options:
-            if option.value != old_email:
-                continue
-            option.value = user.email
-            option.save()
-
-        # TODO(dcramer): we should maintain validation here when we support
-        # multiple email addresses
-        if request.user.email != old_email:
-            try:
-                with transaction.atomic():
-                    user_email = UserEmail.objects.create(
-                        user=user,
-                        email=user.email,
-                    )
-            except IntegrityError:
-                pass
-            else:
-                user_email.set_hash()
-                user_email.save()
-                user.send_confirm_email_singular(user_email)
-                msg = _('A confirmation email has been sent to %s.') % user_email.email
-                messages.add_message(request, messages.SUCCESS, msg)
-
-        user.clear_lost_passwords()
-
-        messages.add_message(request, messages.SUCCESS, _('Your settings were saved.'))
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update(
-        {
-            'form': form,
-            'page': 'settings',
-            'has_2fa': Authenticator.objects.user_has_2fa(request.user),
-            'AUTH_PROVIDERS': auth.get_auth_providers(),
-            'email': UserEmail.get_primary_email(user),
-            'has_newsletters': newsletter.is_enabled,
-        }
-    )
-    return render_to_response('sentry/account/settings.html', context, request)
-
-
-@csrf_protect
-@never_cache
-@login_required
-@sudo_required
-@transaction.atomic
-def twofactor_settings(request):
-    interfaces = Authenticator.objects.all_interfaces_for_user(request.user, return_missing=True)
-
-    if request.method == 'POST' and 'back' in request.POST:
-        return HttpResponseRedirect(reverse('sentry-account-settings'))
-
-    context = csrf(request)
-    context.update(
-        {
-            'page': 'security',
-            'has_2fa': any(x.is_enrolled and not x.is_backup_interface for x in interfaces),
-            'interfaces': interfaces,
-            'has_newsletters': newsletter.is_enabled,
-        }
-    )
-    return render_to_response('sentry/account/twofactor.html', context, request)
-
-
-@csrf_protect
-@never_cache
-@login_required
-@transaction.atomic
-def avatar_settings(request):
-    context = csrf(request)
-    context.update(
-        {
-            'page': 'avatar',
-            'AUTH_PROVIDERS': auth.get_auth_providers(),
-            'has_newsletters': newsletter.is_enabled,
-        }
-    )
-    return render_to_response('sentry/account/avatar.html', context, request)
-
-
-@csrf_protect
-@never_cache
-@login_required
-@transaction.atomic
-def appearance_settings(request):
-    from django.conf import settings
-
-    options = UserOption.objects.get_all_values(user=request.user, project=None)
-
-    form = AppearanceSettingsForm(
-        request.user,
-        request.POST or None,
-        initial={
-            'language': options.get('language') or request.LANGUAGE_CODE,
-            'stacktrace_order': int(options.get('stacktrace_order', -1) or -1),
-            'timezone': options.get('timezone') or settings.SENTRY_DEFAULT_TIME_ZONE,
-            'clock_24_hours': options.get('clock_24_hours') or False,
-        }
-    )
-    if form.is_valid():
-        form.save()
-        messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update(
-        {
-            'form': form,
-            'page': 'appearance',
-            'AUTH_PROVIDERS': auth.get_auth_providers(),
-            'has_newsletters': newsletter.is_enabled,
-        }
-    )
-    return render_to_response('sentry/account/appearance.html', context, request)
-
-
 @csrf_protect
 @never_cache
 @signed_auth_required
@@ -421,26 +269,6 @@ def email_unsubscribe_project(request, project_id):
     return render_to_response('sentry/account/email_unsubscribe_project.html', context, request)
 
 
-@csrf_protect
-@never_cache
-@login_required
-def list_identities(request):
-    identity_list = list(UserSocialAuth.objects.filter(user=request.user))
-
-    AUTH_PROVIDERS = auth.get_auth_providers()
-
-    context = csrf(request)
-    context.update(
-        {
-            'identity_list': identity_list,
-            'page': 'identities',
-            'AUTH_PROVIDERS': AUTH_PROVIDERS,
-            'has_newsletters': newsletter.is_enabled,
-        }
-    )
-    return render_to_response('sentry/account/identities.html', context, request)
-
-
 @csrf_protect
 @never_cache
 @login_required
@@ -490,159 +318,3 @@ def disconnect_identity(request, identity_id):
         }
     )
     return HttpResponseRedirect(reverse('sentry-account-settings-identities'))
-
-
-@csrf_protect
-@never_cache
-@login_required
-def show_emails(request):
-    user = request.user
-    emails = user.emails.all()
-    email_form = EmailForm(user, request.POST or None)
-    primary_email = UserEmail.get_primary_email(user)
-    alt_emails = emails.exclude(email=primary_email.email)
-
-    if 'remove' in request.POST:
-        email = request.POST.get('email')
-        del_email = UserEmail.objects.filter(user=user, email=email)
-        del_email.delete()
-        logger.info(
-            'user.email.remove',
-            extra={
-                'user_id': user.id,
-                'ip_address': request.META['REMOTE_ADDR'],
-                'email': email,
-            }
-        )
-        user.clear_lost_passwords()
-        return HttpResponseRedirect(request.path)
-
-    if 'primary' in request.POST:
-        new_primary = request.POST['new_primary_email'].lower().strip()
-
-        if User.objects.filter(Q(email__iexact=new_primary) | Q(username__iexact=new_primary)
-                               ).exclude(id=user.id).exists():
-            messages.add_message(
-                request, messages.ERROR, _("That email is already in use for another user")
-            )
-
-        elif new_primary != user.email:
-            new_primary_email = UserEmail.objects.get(user=user, email__iexact=new_primary)
-            if not new_primary_email.is_verified:
-                messages.add_message(
-                    request, messages.ERROR, _(
-                        "Cannot make an unverified address your primary email")
-                )
-                return HttpResponseRedirect(request.path)
-            # update notification settings for those set to primary email with new primary email
-            alert_email = UserOption.objects.get_value(user=user, key='alert_email')
-
-            if alert_email == user.email:
-                UserOption.objects.set_value(user=user, key='alert_email', value=new_primary)
-            options = UserOption.objects.filter(user=user, key='mail:email')
-            for option in options:
-                if option.value != user.email:
-                    continue
-                option.value = new_primary
-                option.save()
-
-            has_new_username = user.email == user.username
-
-            user.email = new_primary
-
-            msg = _('Your settings were saved')
-            messages.add_message(request, messages.SUCCESS, msg)
-
-            if has_new_username and not User.objects.filter(username__iexact=new_primary).exists():
-                user.username = user.email
-            user.save()
-        user.clear_lost_passwords()
-        return HttpResponseRedirect(request.path)
-
-    if email_form.is_valid():
-
-        alternative_email = email_form.cleaned_data['alt_email'].lower().strip()
-
-        # check if this alternative email already exists for user
-        if alternative_email and not UserEmail.objects.filter(
-            user=user, email__iexact=alternative_email
-        ).exists():
-            # create alternative email for user
-            try:
-                with transaction.atomic():
-                    new_email = UserEmail.objects.create(user=user, email=alternative_email)
-            except IntegrityError:
-                pass
-            else:
-                new_email.set_hash()
-                new_email.save()
-                user.send_confirm_email_singular(new_email)
-
-                logger.info(
-                    'user.email.add',
-                    extra={
-                        'user_id': user.id,
-                        'ip_address': request.META['REMOTE_ADDR'],
-                        'email': new_email.email,
-                    }
-                )
-                msg = _('A confirmation email has been sent to %s.') % new_email.email
-                messages.add_message(request, messages.SUCCESS, msg)
-
-        user.clear_lost_passwords()
-
-        messages.add_message(request, messages.SUCCESS, _('Your settings were saved.'))
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update(
-        {
-            'email_form': email_form,
-            'primary_email': primary_email,
-            'alt_emails': alt_emails,
-            'page': 'emails',
-            'AUTH_PROVIDERS': auth.get_auth_providers(),
-            'has_newsletters': newsletter.is_enabled,
-        }
-    )
-    return render_to_response('sentry/account/emails.html', context, request)
-
-
-@csrf_protect
-@never_cache
-@login_required
-def manage_subscriptions(request):
-    user = request.user
-    email = UserEmail.get_primary_email(user)
-
-    if request.method == 'GET':
-        context = csrf(request)
-        context.update(
-            {
-                'page': 'subscriptions',
-                'email': email,
-                'AUTH_PROVIDERS': auth.get_auth_providers(),
-                'has_newsletters': newsletter.is_enabled,
-                'subscriptions': newsletter.get_subscriptions(user),
-            }
-        )
-        return render_to_response('sentry/account/subscriptions.html', context, request)
-
-    subscribed = request.POST.get('subscribed') == '1'
-    try:
-        list_id = int(request.POST.get('listId', ''))
-    except ValueError:
-        return HttpResponse('bad request', status=400)
-
-    kwargs = {
-        'list_id': list_id,
-        'subscribed': subscribed,
-        'verified': email.is_verified,
-    }
-    if not subscribed:
-        kwargs['unsubscribed_date'] = timezone.now()
-    else:
-        kwargs['subscribed_date'] = timezone.now()
-
-    newsletter.create_or_update_subscription(user, **kwargs)
-    return HttpResponse()
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
deleted file mode 100644
index f203ecbc8e..0000000000
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ /dev/null
@@ -1,322 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.db import transaction
-from django.http import HttpResponseRedirect, Http404
-from django.core.urlresolvers import reverse
-from django.views.decorators.cache import never_cache
-from django.utils.decorators import method_decorator
-from django.core.context_processors import csrf
-from django.utils.translation import ugettext_lazy as _
-
-import petname
-from sudo.decorators import sudo_required
-
-from sentry.models import Authenticator
-from sentry.security import capture_security_activity
-from sentry.web.frontend.base import BaseView
-from sentry.web.decorators import login_required
-from sentry.web.helpers import render_to_response
-from sentry.web.forms.accounts import TwoFactorForm, ConfirmPasswordForm
-from sentry.utils import json
-
-
-class SmsForm(forms.Form):
-    phone_number = forms.CharField(label=_('Phone number'), max_length=40)
-
-
-class U2fForm(forms.Form):
-    device_name = forms.CharField(
-        label=_('Device name'),
-        max_length=60,
-        required=False,
-        initial=lambda: petname.Generate(2, ' ', letters=10).title(),
-    )
-
-
-class TwoFactorSettingsView(BaseView):
-    interface_id = None
-
-    @method_decorator(never_cache)
-    @method_decorator(login_required)
-    @method_decorator(sudo_required)
-    @method_decorator(transaction.atomic)
-    def handle(self, request):
-        try:
-            interface = Authenticator.objects.get_interface(request.user, self.interface_id)
-        except LookupError:
-            raise Http404
-        request.user.clear_lost_passwords()
-        return self.configure(request, interface)
-
-    def make_context(self, request, interface):
-        context = csrf(request)
-        context['auth'] = interface
-        context['page'] = 'security'
-        return context
-
-    def delete_authenticator(self, request, interface):
-        if interface.authenticator is None:
-            return
-
-        with transaction.atomic():
-            user = interface.authenticator.user
-
-            capture_security_activity(
-                account=request.user,
-                type='mfa-removed',
-                actor=request.user,
-                ip_address=request.META['REMOTE_ADDR'],
-                context={
-                    'authenticator': interface.authenticator,
-                },
-                send_email=True,
-            )
-
-            interface.authenticator.delete()
-
-            # If this was an authenticator that was a backup interface we just
-            # deleted, then nothing happens.
-            if interface.is_backup_interface:
-                return
-
-            # If however if we delete an actual authenticator and all that
-            # remainds are backup interfaces, then we kill them in the
-            # process.
-            interfaces = Authenticator.objects.all_interfaces_for_user(user)
-            backup_interfaces = [x for x in interfaces if x.is_backup_interface]
-            if len(backup_interfaces) == len(interfaces):
-                for iface in backup_interfaces:
-                    iface.authenticator.delete()
-
-                    capture_security_activity(
-                        account=request.user,
-                        type='mfa-removed',
-                        actor=request.user,
-                        ip_address=request.META['REMOTE_ADDR'],
-                        context={
-                            'authenticator': iface.authenticator,
-                        },
-                        send_email=False,
-                    )
-
-    def remove(self, request, interface):
-        form = ConfirmPasswordForm(request.user)
-
-        if 'no' in request.POST or \
-           not interface.is_enrolled:
-            return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
-        elif 'yes' in request.POST:
-            form = ConfirmPasswordForm(request.user, request.POST)
-            if 'password' in form.fields:
-                if form.is_valid():
-                    self.delete_authenticator(request, interface)
-                    return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
-                else:
-                    form.errors['__all__'] = ['Invalid password.']
-            else:
-                self.delete_authenticator(request, interface)
-                return HttpResponseRedirect(reverse('sentry-account-settings-2fa'))
-
-        all_interfaces = Authenticator.objects.all_interfaces_for_user(request.user)
-        other_interfaces = [x for x in all_interfaces if x.interface_id != interface.interface_id]
-        backup_interfaces = [x for x in other_interfaces if x.is_backup_interface]
-        removes_backups = backup_interfaces and \
-            len(backup_interfaces) == len(other_interfaces)
-
-        context = self.make_context(request, interface)
-        context['password_form'] = form
-        context['removes_backups'] = removes_backups
-        return render_to_response('sentry/account/twofactor/remove.html', context, request)
-
-    def enroll(self, request, interface, insecure=False):
-        next = request.path
-        # Only enroll if it's either not an insecure enrollment or we are
-        # enrolling a backup interface when we already had a primary one.
-        if not insecure \
-           or (interface.is_backup_interface and
-               Authenticator.objects.user_has_2fa(request.user)):
-            try:
-                interface.enroll(request.user)
-            except Authenticator.AlreadyEnrolled:
-                # This can happen in some cases when races occur.  We have
-                # seen this when people press the submit button twice.  In
-                # that case just go to the overview page of 2fa
-                next = reverse('sentry-account-settings-2fa')
-            else:
-                capture_security_activity(
-                    account=request.user,
-                    type='mfa-added',
-                    actor=request.user,
-                    ip_address=request.META['REMOTE_ADDR'],
-                    context={
-                        'authenticator': interface.authenticator,
-                    },
-                    send_email=True,
-                )
-
-                request.user.refresh_session_nonce(self.request)
-                request.user.save()
-                if Authenticator.objects.auto_add_recovery_codes(request.user):
-                    next = reverse('sentry-account-settings-2fa-recovery')
-        return HttpResponseRedirect(next)
-
-    def configure(self, request, interface):
-        if 'remove' in request.POST:
-            return self.remove(request, interface)
-        if 'enroll' in request.POST or \
-           request.GET.get('enroll') == 'yes':
-            return self.enroll(request, interface, insecure='enroll' not in request.POST)
-        context = self.make_context(request, interface)
-        return render_to_response(
-            [
-                'sentry/account/twofactor/configure_%s.html' % self.interface_id,
-                'sentry/account/twofactor/configure.html'
-            ], context, request
-        )
-
-
-class RecoveryCodeSettingsView(TwoFactorSettingsView):
-    interface_id = 'recovery'
-
-    def configure(self, request, interface):
-        if 'regenerate' in request.POST:
-            interface.regenerate_codes()
-            capture_security_activity(
-                account=request.user,
-                type='recovery-codes-regenerated',
-                actor=request.user,
-                ip_address=request.META['REMOTE_ADDR'],
-                context={
-                    'authenticator': interface.authenticator,
-                },
-                send_email=True,
-            )
-            return HttpResponseRedirect(request.path)
-        return TwoFactorSettingsView.configure(self, request, interface)
-
-
-class TotpSettingsView(TwoFactorSettingsView):
-    interface_id = 'totp'
-
-    def enroll(self, request, interface, insecure=False):
-        totp_secret = request.POST.get('totp_secret')
-        if totp_secret is not None:
-            interface.secret = totp_secret
-
-        if 'otp' in request.POST:
-            form = TwoFactorForm(request.POST)
-            password_form = ConfirmPasswordForm(request.user, request.POST)
-            if 'password' in password_form.fields:
-                if password_form.is_valid():
-                    if form.is_valid() and interface.validate_otp(form.cleaned_data['otp']):
-                        return TwoFactorSettingsView.enroll(self, request, interface)
-                    else:
-                        form.errors['__all__'] = ['Invalid confirmation code.']
-                else:
-                    form.errors['__all__'] = ['Invalid password.']
-            else:
-                if form.is_valid() and interface.validate_otp(form.cleaned_data['otp']):
-                    return TwoFactorSettingsView.enroll(self, request, interface)
-                else:
-                    form.errors['__all__'] = ['Invalid confirmation code.']
-
-        else:
-            form = TwoFactorForm()
-            password_form = ConfirmPasswordForm(request.user)
-
-        context = self.make_context(request, interface)
-        context['otp_form'] = form
-        context['password_form'] = password_form
-        context['provision_qrcode'] = interface.get_provision_qrcode(request.user.email)
-        return render_to_response('sentry/account/twofactor/enroll_totp.html', context, request)
-
-
-class SmsSettingsView(TwoFactorSettingsView):
-    interface_id = 'sms'
-
-    def enroll(self, request, interface, insecure=False):
-        stage = request.POST.get('stage') or 'initial'
-
-        totp_secret = request.POST.get('totp_secret')
-        if totp_secret is not None:
-            interface.secret = totp_secret
-
-        phone_number = request.POST.get('phone_number')
-        if phone_number is not None:
-            interface.phone_number = phone_number
-
-        sms_form = SmsForm()
-        otp_form = TwoFactorForm()
-
-        if stage == 'pick_number':
-            sms_form = SmsForm(request.POST)
-            if sms_form.is_valid():
-                interface.send_text(for_enrollment=True, request=request)
-                stage = 'confirm'
-        elif stage == 'confirm':
-            otp_form = TwoFactorForm(request.POST)
-            if otp_form.is_valid() and interface.validate_otp(otp_form.cleaned_data['otp']):
-                return TwoFactorSettingsView.enroll(self, request, interface)
-            else:
-                otp_form.errors['__all__'] = ['Invalid confirmation code.']
-
-        context = self.make_context(request, interface)
-        context['sms_form'] = sms_form
-        context['otp_form'] = otp_form
-        context['stage'] = stage
-        return render_to_response('sentry/account/twofactor/enroll_sms.html', context, request)
-
-
-class U2fSettingsView(TwoFactorSettingsView):
-    interface_id = 'u2f'
-
-    def configure(self, request, interface):
-        # Try to remove a key handle.  If this returns `False` it means we
-        # are about to remove the last key handle.  In that case just
-        # bubble through to the configure page which will pick up the
-        # 'remove' in the form and bring up the remove screen for the
-        # entire authentication method.
-        key_handle = request.POST.get('key_handle')
-        if key_handle:
-            device_name = interface.get_device_name(key_handle)
-            if 'remove' in request.POST and interface.remove_u2f_device(key_handle):
-                interface.authenticator.save()
-
-                capture_security_activity(
-                    account=request.user,
-                    type='mfa-removed',
-                    actor=request.user,
-                    ip_address=request.META['REMOTE_ADDR'],
-                    context={
-                        'authenticator': interface.authenticator,
-                        'device_name': device_name
-                    },
-                    send_email=True,
-                )
-                return HttpResponseRedirect(request.path)
-
-        return TwoFactorSettingsView.configure(self, request, interface)
-
-    def enroll(self, request, interface, insecure=False):
-        u2f_form = U2fForm()
-
-        challenge = request.POST.get('challenge')
-        if challenge:
-            enrollment_data = json.loads(challenge)
-        else:
-            enrollment_data = interface.start_enrollment()
-
-        response = request.POST.get('response')
-        if response:
-            u2f_form = U2fForm(request.POST)
-            if u2f_form.is_valid():
-                interface.try_enroll(
-                    enrollment_data, json.loads(response), u2f_form.cleaned_data['device_name']
-                )
-                return TwoFactorSettingsView.enroll(self, request, interface)
-
-        context = self.make_context(request, interface)
-        context['enrollment_data'] = enrollment_data
-        context['u2f_form'] = u2f_form
-        return render_to_response('sentry/account/twofactor/enroll_u2f.html', context, request)
diff --git a/src/sentry/web/frontend/remove_account.py b/src/sentry/web/frontend/remove_account.py
deleted file mode 100644
index 18aa703829..0000000000
--- a/src/sentry/web/frontend/remove_account.py
+++ /dev/null
@@ -1,87 +0,0 @@
-from __future__ import absolute_import
-
-import logging
-
-from django import forms
-from django.contrib.auth import logout
-
-from sentry import roles
-from sentry.api import client
-from sentry.models import (Organization, OrganizationMember, OrganizationStatus, User)
-from sentry.web.frontend.base import BaseView
-
-delete_logger = logging.getLogger('sentry.deletions.ui')
-
-
-class RemoveAccountForm(forms.Form):
-    pass
-
-
-class RemoveAccountView(BaseView):
-    sudo_required = True
-
-    def get_form(self, request):
-        if request.method == 'POST':
-            return RemoveAccountForm(request.POST)
-        return RemoveAccountForm()
-
-    def handle(self, request):
-        org_list = Organization.objects.filter(
-            member_set__role=roles.get_top_dog().id,
-            member_set__user=request.user,
-            status=OrganizationStatus.VISIBLE,
-        )
-        org_results = []
-        for org in sorted(org_list, key=lambda x: x.name):
-            # O(N) query
-            org_results.append({
-                'organization': org,
-                'single_owner': org.has_single_owner(),
-            })
-
-        form = self.get_form(request)
-        if form.is_valid():
-            avail_org_slugs = set([o['organization'].slug for o in org_results])
-            orgs_to_remove = set(request.POST.getlist('oID')).intersection(avail_org_slugs)
-            for result in org_results:
-                if result['single_owner']:
-                    orgs_to_remove.add(result['organization'].slug)
-
-            delete_logger.info(
-                'user.deactivate',
-                extra={
-                    'actor_id': request.user.id,
-                    'ip_address': request.META['REMOTE_ADDR'],
-                }
-            )
-
-            for org_slug in orgs_to_remove:
-                client.delete('/organizations/{}/'.format(org_slug), request=request, is_sudo=True)
-
-            remaining_org_ids = [
-                o.id for o in org_list if o.slug in avail_org_slugs.difference(orgs_to_remove)
-            ]
-
-            if remaining_org_ids:
-                OrganizationMember.objects.filter(
-                    organization__in=remaining_org_ids,
-                    user=request.user,
-                ).delete()
-
-            User.objects.filter(
-                id=request.user.id,
-            ).update(
-                is_active=False,
-            )
-
-            logout(request)
-
-            return self.respond('sentry/post-remove-account.html')
-
-        context = {
-            'form': form,
-            'page': 'remove_account',
-            'organization_results': org_results,
-        }
-
-        return self.respond('sentry/remove-account.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7f27a55787..4fb4d2b2f0 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -44,7 +44,6 @@ from sentry.web.frontend.project_avatar import ProjectAvatarPhotoView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
 from sentry.web.frontend.reactivate_account import ReactivateAccountView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
-from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.restore_organization import RestoreOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.transfer_project import TransferProjectView
@@ -289,8 +288,9 @@ urlpatterns += patterns(
         UnsubscribeIssueNotificationsView.as_view(),
         name='sentry-account-email-unsubscribe-issue'
     ),
-    url(r'^account/remove/$', RemoveAccountView.as_view(),
-        name='sentry-remove-account'),
+    url(r'^account/remove/$',
+        RedirectView.as_view(pattern_name="sentry-remove-account", permanent=False),
+        ),
     url(r'^account/settings/social/', include('social_auth.urls')),
     url(r'^account/', generic_react_page_view),
     url(r'^onboarding/', generic_react_page_view),
@@ -342,6 +342,8 @@ urlpatterns += patterns(
     ),
     url(r'^api/applications/$',
         RedirectView.as_view(pattern_name="sentry-api-applications", permanent=False)),
+    url(r'^api/new-token/$',
+        RedirectView.as_view(pattern_name="sentry-api-new-auth-token", permanent=False)),
     url(r'^api/[^0]+/',
         RedirectView.as_view(pattern_name="sentry-api-details", permanent=False),
     ),
@@ -361,7 +363,9 @@ urlpatterns += patterns(
     url(r'^settings/account/emails/$', generic_react_page_view, name='sentry-account-settings-emails'),
     url(r'^settings/account/api/$', generic_react_page_view, name='sentry-api'),
     url(r'^settings/account/api/applications/$', generic_react_page_view, name='sentry-api-applications'),
+    url(r'^settings/account/api/auth-tokens/new-token/$', generic_react_page_view, name='sentry-api-new-auth-token'),
     url(r'^settings/account/api/[^0]+/$', generic_react_page_view, name='sentry-api-details'),
+    url(r'^settings/account/close-account/$', generic_react_page_view, name='sentry-remove-account'),
     url(r'^settings/account/', generic_react_page_view),
 
     url(r'^settings/', react_page_view),
