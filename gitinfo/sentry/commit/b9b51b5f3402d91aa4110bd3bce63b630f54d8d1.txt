commit b9b51b5f3402d91aa4110bd3bce63b630f54d8d1
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Jun 7 15:47:31 2018 -0700

    ref(integrations): Check installation has access to repo (#8648)
    
    * ref(integrations): Check installation has access to repo
    
    * use installation to raise error
    
    * fix tests
    
    * clearer naming

diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index 98913271e9..b61a64def7 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -39,6 +39,9 @@ class GitHubClientMixin(ApiClient):
             num
         ))
 
+    def get_commits(self, repo):
+        return self.get('/repos/{}/commits'.format(repo))
+
     def get_repo(self, repo):
         return self.get('/repos/{}'.format(repo))
 
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 35c5e3c3aa..536901101a 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -40,7 +40,9 @@ metadata = IntegrationMetadata(
 )
 
 API_ERRORS = {
-    404: 'GitHub returned a 404 Not Found error.',
+    404: 'GitHub returned a 404 Not Found error. If this repository exists, ensure'
+         ' that your installation has permission to access this repository'
+         ' (https://github.com/settings/installations).',
     401: ERR_UNAUTHORIZED,
 }
 
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 27dc74029f..43907f0e64 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -6,8 +6,6 @@ import six
 from sentry.models import Integration
 from sentry.plugins import providers
 
-from .client import GitHubAppsClient
-
 WEBHOOK_EVENTS = ['push', 'pull_request']
 
 
@@ -43,6 +41,20 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
             }
         ]
 
+    def _validate_repo(self, client, installation, repo):
+        try:
+            repo = client.get_repo(repo)
+        except Exception as e:
+            installation.raise_error(e)
+
+        try:
+            # make sure installation has access to this specific repo
+            client.get_commits(repo)
+        except Exception as e:
+            installation.raise_error(e)
+
+        return repo
+
     def validate_config(self, organization, config, actor=None):
         """
         ```
@@ -52,18 +64,14 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         ```
         """
         if config.get('name') and config.get('installation'):
-            # this doesn't work yet, need github client
             integration = Integration.objects.get(
                 id=config['installation'], organizations=organization)
             installation = integration.get_installation()
             client = installation.get_client()
-            try:
-                repo = client.get_repo(config['name'])
-            except Exception as e:
-                installation.raise_error(e)
-            else:
-                config['external_id'] = six.text_type(repo['id'])
-                config['integration_id'] = integration.id
+
+            repo = self._validate_repo(client, installation, config['name'])
+            config['external_id'] = six.text_type(repo['id'])
+            config['integration_id'] = integration.id
 
         return config
 
@@ -93,10 +101,9 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         integration_id = repo.integration_id
         if integration_id is None:
             raise NotImplementedError('GitHub apps requires an integration id to fetch commits')
-
-        client = GitHubAppsClient(
-            Integration.objects.get(id=integration_id).external_id,
-        )
+        integration = Integration.objects.get(id=integration_id)
+        installation = integration.get_installation()
+        client = installation.get_client()
 
         # use config name because that is kept in sync via webhooks
         name = repo.config['name']
@@ -104,14 +111,14 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
             try:
                 res = client.get_last_commits(name, end_sha)
             except Exception as e:
-                self.raise_error(e)
+                installation.raise_error(e)
             else:
                 return self._format_commits(repo, res[:10])
         else:
             try:
                 res = client.compare_commits(name, start_sha, end_sha)
             except Exception as e:
-                self.raise_error(e)
+                installation.raise_error(e)
             else:
                 return self._format_commits(repo, res['commits'])
 
@@ -120,16 +127,15 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
             integration_id = repo.integration_id
             if integration_id is None:
                 raise NotImplementedError('GitHub apps requires an integration id to fetch commits')
-
-            client = GitHubAppsClient(
-                Integration.objects.get(id=integration_id),
-            )
+            integration = Integration.objects.get(id=integration_id)
+            installation = integration.get_installation()
+            client = installation.get_client()
 
             # use config name because that is kept in sync via webhooks
             name = repo.config['name']
             try:
                 res = client.get_pr_commits(name, number)
             except Exception as e:
-                self.raise_error(e)
+                installation.raise_error(e)
             else:
                 return self._format_commits(repo, res)
diff --git a/tests/sentry/integrations/github/test_repository.py b/tests/sentry/integrations/github/test_repository.py
index a1288bc7ef..8ce9cf4e3c 100644
--- a/tests/sentry/integrations/github/test_repository.py
+++ b/tests/sentry/integrations/github/test_repository.py
@@ -50,7 +50,7 @@ class GitHubAppsProviderTest(PluginTestCase):
     def test_compare_commits_no_start(self, mock_get_last_commits):
         organization = self.create_organization()
         integration = Integration.objects.create(
-            provider='integrations:github',
+            provider='github',
             external_id='1',
         )
         repo = Repository.objects.create(
@@ -73,7 +73,7 @@ class GitHubAppsProviderTest(PluginTestCase):
     def test_compare_commits(self, mock_compare_commits):
         organization = self.create_organization()
         integration = Integration.objects.create(
-            provider='integrations:github',
+            provider='github',
             external_id='1',
         )
         repo = Repository.objects.create(
