commit a69cc3c4cae5e5bdac594a16a855ce9536153a6c
Author: Katie Byers <katie.byers@sentry.io>
Date:   Mon Aug 12 11:39:01 2019 -0700

    chore(API): Add error messages to user notification fine tuning endpoints errors (#14110)

diff --git a/src/sentry/api/endpoints/user_notification_fine_tuning.py b/src/sentry/api/endpoints/user_notification_fine_tuning.py
index 940ea18d0f..e28cb2e68b 100644
--- a/src/sentry/api/endpoints/user_notification_fine_tuning.py
+++ b/src/sentry/api/endpoints/user_notification_fine_tuning.py
@@ -43,7 +43,9 @@ KEY_MAP = {
 class UserNotificationFineTuningEndpoint(UserEndpoint):
     def get(self, request, user, notification_type):
         if notification_type not in KEY_MAP:
-            return Response(status=status.HTTP_404_NOT_FOUND)
+            return Response({
+                'detail': 'Unknown notification type: %s.' % notification_type
+            }, status=status.HTTP_404_NOT_FOUND)
 
         notifications = UserNotificationsSerializer()
 
@@ -79,7 +81,9 @@ class UserNotificationFineTuningEndpoint(UserEndpoint):
         """
 
         if notification_type not in KEY_MAP:
-            return Response(status=status.HTTP_404_NOT_FOUND)
+            return Response({
+                'detail': 'Unknown notification type: %s.' % notification_type
+            }, status=status.HTTP_404_NOT_FOUND)
 
         key = KEY_MAP[notification_type]
         filter_args = {
@@ -101,7 +105,10 @@ class UserNotificationFineTuningEndpoint(UserEndpoint):
 
                 # make sure user is in org
                 if org_id not in org_ids:
-                    return Response(status=status.HTTP_403_FORBIDDEN)
+                    return Response({
+                        'detail': 'User does not belong to at least one of the \
+                            requested orgs (org_id: %s).' % org_id
+                    }, status=status.HTTP_403_FORBIDDEN)
 
                 # list contains org ids that should have reports DISABLED
                 # so if enabled need to check if org_id exists in list (because by default
@@ -131,7 +138,12 @@ class UserNotificationFineTuningEndpoint(UserEndpoint):
         # make sure that the ids we are going to update are a subset of the user's
         # list of orgs or projects
         if not ids_to_update.issubset(parent_ids):
-            return Response(status=status.HTTP_403_FORBIDDEN)
+            bad_ids = ids_to_update - parent_ids
+            return Response({
+                'detail': 'At least one of the requested projects is not \
+                    available to this user, because the user does not belong \
+                    to the necessary teams. (ids of unavailable projects: %s)' % bad_ids
+            }, status=status.HTTP_403_FORBIDDEN)
 
         if notification_type == 'email':
             # make sure target emails exist and are verified
@@ -144,7 +156,10 @@ class UserNotificationFineTuningEndpoint(UserEndpoint):
 
             # Is there a better way to check this?
             if len(emails) != len(emails_to_check):
-                return Response(status=status.HTTP_400_BAD_REQUEST)
+                return Response({
+                    'detail': 'Invalid email value(s) provided. Email values \
+                        must be verified emails for the given user.'
+                }, status=status.HTTP_400_BAD_REQUEST)
 
         with transaction.atomic():
             for id in request.data:
