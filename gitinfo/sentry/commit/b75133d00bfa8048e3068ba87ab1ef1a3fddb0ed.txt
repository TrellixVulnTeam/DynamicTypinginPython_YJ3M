commit b75133d00bfa8048e3068ba87ab1ef1a3fddb0ed
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Jun 6 10:33:03 2018 -0700

    feat(integrations): Default Identity  (#8647)
    
    * got default identity stop gap to work.
    
    * Changed the pipeline to use the org integration model.
    
    * Changed the comment.
    
    * Changed the comment.

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index d36ee16202..8a0e2411a4 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -72,6 +72,10 @@ class IntegrationProvider(PipelineProvider):
     # can the integration be enabled specifically for projects?
     can_add_project = False
 
+    # if the integration has no application-style access token, associate
+    # the installer's identity to the organization integration
+    needs_default_identity = False
+
     # can be any number of IntegrationFeatures
     features = frozenset()
 
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index dc88239735..44c5fe326a 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -63,8 +63,6 @@ class IntegrationPipeline(Pipeline):
         else:
             integration = ensure_integration(self.provider.key, data)
 
-        org_integration = integration.add_organization(self.organization.id)
-
         # Does this integration provide a user identity for the user setting up
         # the integration?
         identity = data.get('user_identity')
@@ -88,7 +86,7 @@ class IntegrationPipeline(Pipeline):
             }
 
             try:
-                ident, created = Identity.objects.get_or_create(
+                identity_model, created = Identity.objects.get_or_create(
                     idp=idp,
                     user=self.request.user,
                     external_id=identity['external_id'],
@@ -96,7 +94,7 @@ class IntegrationPipeline(Pipeline):
                 )
 
                 if not created:
-                    ident.update(data=identity['data'], scopes=identity['scopes'])
+                    identity_model.update(data=identity['data'], scopes=identity['scopes'])
             except IntegrityError:
                 # If the external_id is already used for a different user or
                 # the user already has a different external_id remove those
@@ -104,13 +102,22 @@ class IntegrationPipeline(Pipeline):
                 lookup = Q(external_id=identity['external_id']) | Q(user=self.request.user)
                 Identity.objects.filter(lookup, idp=idp).delete()
 
-                Identity.objects.create(
+                identity_model = Identity.objects.create(
                     idp=idp,
                     user=self.request.user,
                     external_id=identity['external_id'],
                     **identity_data
                 )
 
+        org_integration_args = {}
+
+        if self.provider.needs_default_identity:
+            if not (identity and identity_model):
+                raise NotImplementedError('Integration requires an identity')
+            org_integration_args = {'default_auth_id': identity_model.id}
+
+        org_integration = integration.add_organization(self.organization.id, **org_integration_args)
+
         return self._dialog_response(serialize(org_integration, self.request.user), True)
 
     def _dialog_response(self, data, success):
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index ff52d61fe1..112db55b75 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -72,6 +72,7 @@ class VSTSIntegrationProvider(IntegrationProvider):
     metadata = metadata
     domain = '.visualstudio.com'
     api_version = '4.1'
+    needs_default_identity = True
 
     setup_dialog_config = {
         'width': 600,
diff --git a/tests/sentry/integrations/test_pipeline.py b/tests/sentry/integrations/test_pipeline.py
index b4f59d2ff7..7c98228ef2 100644
--- a/tests/sentry/integrations/test_pipeline.py
+++ b/tests/sentry/integrations/test_pipeline.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.models import Integration, OrganizationIntegration
+from sentry.models import Identity, Integration, OrganizationIntegration
 from sentry.testutils import IntegrationTestCase
 from sentry.integrations.example import ExampleIntegrationProvider
 
@@ -13,9 +13,11 @@ class FinishPipelineTestCase(IntegrationTestCase):
         self.original_build_integration = self.provider.build_integration
         self.provider.build_integration = lambda self, data: data
         self.external_id = 'dummy_id-123'
+        self.provider.needs_default_identity = False
 
     def tearDown(self):
         self.provider.build_integration = self.original_build_integration
+        self.provider.needs_default_identity = False
 
     def test_with_data(self):
         data = {
@@ -88,3 +90,84 @@ class FinishPipelineTestCase(IntegrationTestCase):
             organization_id=self.organization.id,
             integration_id=integration.id,
         ).exists()
+
+    def test_with_default_id(self):
+        self.provider.needs_default_identity = True
+        data = {
+            'external_id': self.external_id,
+            'name': 'Name',
+            'metadata': {'url': 'https://example.com'},
+            'user_identity': {
+                'type': 'plugin',
+                'external_id': 'AccountId',
+                'scopes': [],
+                'data': {
+                    'access_token': 'token12345',
+                    'expires_in': '123456789',
+                    'refresh_token': 'refresh12345',
+                    'token_type': 'typetype',
+                },
+            }
+        }
+        self.pipeline.state.data = data
+        resp = self.pipeline.finish_pipeline()
+
+        self.assertDialogSuccess(resp)
+
+        integration = Integration.objects.get(
+            provider=self.provider.key,
+            external_id=self.external_id,
+        )
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=self.organization.id,
+            integration_id=integration.id,
+        )
+        assert org_integration.default_auth_id is not None
+        assert Identity.objects.filter(id=org_integration.default_auth_id).exists()
+
+    def test_default_identity_does_not_update(self):
+        self.provider.needs_default_identity = True
+        old_identity_id = 234567
+        integration = Integration.objects.create(
+            provider=self.provider.key,
+            external_id=self.external_id,
+            metadata={
+                'url': 'https://example.com',
+            },
+        )
+        OrganizationIntegration.objects.create(
+            organization=self.organization,
+            integration=integration,
+            default_auth_id=old_identity_id,
+        )
+        self.pipeline.state.data = {
+            'external_id': self.external_id,
+            'name': 'Name',
+            'metadata': {'url': 'https://example.com'},
+            'user_identity': {
+                'type': 'plugin',
+                'external_id': 'AccountId',
+                'scopes': [],
+                'data': {
+                    'access_token': 'token12345',
+                    'expires_in': '123456789',
+                    'refresh_token': 'refresh12345',
+                    'token_type': 'typetype',
+                },
+            }
+        }
+
+        resp = self.pipeline.finish_pipeline()
+        self.assertDialogSuccess(resp)
+
+        integration = Integration.objects.get(
+            provider=self.provider.key,
+            external_id=self.external_id,
+        )
+
+        org_integration = OrganizationIntegration.objects.get(
+            organization_id=self.organization.id,
+            integration_id=integration.id,
+        )
+        assert org_integration.default_auth_id == old_identity_id
+        assert Identity.objects.filter(external_id='AccountId').exists()
