commit 2dfb17f8590ff61426d46931cf0c9693ae2514a3
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Mar 18 16:17:21 2019 +0100

    ref: Sample to_python calls 2 (#12375)
    
    * Revert "Revert "ref: Sample to_python calls (#12090)" (#12308)"
    
    This reverts commit d0dd8dbdff800a7b0fa544131ccc47141010c591.
    
    * ref: Use event-id for sampling
    
    * fix: Also run tests with new path enabled
    
    * fix: Fix wrong setdefault
    
    * fix: Fix UI side to deal with invalid values
    
    * fix: Allow failures in travis
    
    * fix: Revert unnecessary changes
    
    * fix: Safeguard for sample rate

diff --git a/.travis.yml b/.travis.yml
index f88511c3f8..22ca0cda4a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -89,6 +89,19 @@ matrix:
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
+    # XXX(markus): Remove after rust interfaces are done
+    - python: 2.7
+      env: TEST_SUITE=postgres DB=postgres SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
+      services:
+        - memcached
+        - redis-server
+        - postgresql
+      install:
+        - python setup.py install_egg_info
+        - pip install -e ".[dev,tests,optional]"
+      before_script:
+        - psql -c 'create database sentry;' -U postgres
+
     - python: 2.7
       env: TEST_SUITE=mysql DB=mysql
       services:
@@ -128,6 +141,31 @@ matrix:
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
+    # XXX(markus): Remove after rust interfaces are done
+    - python: 2.7
+      env: TEST_SUITE=acceptance SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
+      services:
+        - memcached
+        - redis-server
+        - postgresql
+      before_install:
+        - find "$NODE_DIR" -type d -empty -delete
+        - nvm install
+        - npm install -g "yarn@${YARN_VERSION}"
+        - docker run -d --network host --name clickhouse-server --ulimit nofile=262144:262144 yandex/clickhouse-server:18.14.9
+        - docker run -d --network host --name snuba --env SNUBA_SETTINGS=test --env CLICKHOUSE_SERVER=localhost:9000 getsentry/snuba
+        - docker ps -a
+      install:
+        - yarn install --pure-lockfile
+        - python setup.py install_egg_info
+        - pip install -e ".[dev,tests,optional]"
+        - wget -N "https://chromedriver.storage.googleapis.com/2.45/chromedriver_linux64.zip" -P ~/
+        - unzip ~/chromedriver_linux64.zip -d ~/
+        - rm ~/chromedriver_linux64.zip
+        - sudo install -m755 ~/chromedriver /usr/local/bin/
+      before_script:
+        - psql -c 'create database sentry;' -U postgres
+
     - python: 2.7
       env: TEST_SUITE=js
       before_install:
@@ -202,6 +240,27 @@ matrix:
       before_script:
         - psql -c 'create database sentry;' -U postgres
 
+    # XXX(markus): Remove after rust interfaces are done
+    - python: 2.7
+      env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
+      services:
+        - docker
+        - memcached
+        - redis-server
+        - postgresql
+      before_install:
+        - docker run -d --network host --name zookeeper -e ZOOKEEPER_CLIENT_PORT=2181 confluentinc/cp-zookeeper:4.1.0
+        - docker run -d --network host --name kafka -e KAFKA_ZOOKEEPER_CONNECT=localhost:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 confluentinc/cp-kafka:4.1.0
+        - docker run -d --network host --name clickhouse-server --ulimit nofile=262144:262144 yandex/clickhouse-server:18.14.9
+        - docker run -d --network host --name snuba --env SNUBA_SETTINGS=test --env CLICKHOUSE_SERVER=localhost:9000 getsentry/snuba
+        - docker ps -a
+      install:
+        - python setup.py install_egg_info
+        - pip install -e ".[dev,tests,optional]"
+        - pip install confluent-kafka
+      before_script:
+        - psql -c 'create database sentry;' -U postgres
+
     # Deploy 'storybook' (component & style guide) - allowed to fail
     - language: node_js
       env: STORYBOOK_BUILD=1
@@ -227,6 +286,9 @@ matrix:
     - language: node_js
       env: STORYBOOK_BUILD=1
 
+    # XXX(markus): Remove after rust interfaces are done
+    - env: TEST_SUITE=postgres DB=postgres SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
+
 notifications:
   webhooks:
     urls:
diff --git a/requirements-base.txt b/requirements-base.txt
index 9c035f9d4a..422d4e24b0 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.11.0
-semaphore>=0.4.18,<0.5.0
+semaphore>=0.4.19,<0.5.0
 sentry-sdk>=0.7.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index 87c1e63fe0..46309c06a2 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -49,6 +49,7 @@ class NodeData(collections.MutableMapping):
         data=None means, this is a node that needs to be fetched from nodestore.
         data={...} means, this is an object that should be saved to nodestore.
     """
+
     def __init__(self, field, id, data=None):
         self.field = field
         self.id = id
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index b7e5b09c29..ffd35352aa 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -343,7 +343,7 @@ class EventManager(object):
         auth=None,
         key=None,
         content_encoding=None,
-        for_store=True,
+        is_renormalize=False,
     ):
         self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
@@ -352,7 +352,7 @@ class EventManager(object):
         self._user_agent = user_agent
         self._auth = auth
         self._key = key
-        self._for_store = for_store
+        self._is_renormalize = is_renormalize
         self._normalized = False
 
     def process_csp_report(self):
@@ -442,6 +442,7 @@ class EventManager(object):
             max_secs_in_future=MAX_SECS_IN_FUTURE,
             max_secs_in_past=MAX_SECS_IN_PAST,
             enable_trimming=True,
+            is_renormalize=self._is_renormalize
         )
 
         self._data = CanonicalKeyDict(
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 308d459491..c1c3e2c279 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -1,13 +1,14 @@
 from __future__ import absolute_import
 
-from collections import Mapping, OrderedDict
+import os
+
+from collections import OrderedDict
 import logging
 import six
 
 from django.conf import settings
 from django.utils.translation import ugettext as _
 
-from sentry.models.eventerror import EventError
 from sentry.utils.canonical import get_canonical_name
 from sentry.utils.html import escape
 from sentry.utils.imports import import_string
@@ -18,6 +19,14 @@ from sentry.utils.decorators import classproperty
 logger = logging.getLogger("sentry.events")
 interface_logger = logging.getLogger("sentry.interfaces")
 
+# This flag is only effectively used for the testsuite. In production the
+# return value of `sentry.models.event._should_skip_to_python` is explicitly
+# passed to interfaces.
+RUST_RENORMALIZED_DEFAULT = os.environ.get(
+    "SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION",
+    "false"
+).lower() in ("true", "1")
+
 
 def get_interface(name):
     try:
@@ -34,7 +43,7 @@ def get_interface(name):
     return interface
 
 
-def get_interfaces(data):
+def get_interfaces(data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
     result = []
     for key, data in six.iteritems(data):
         # Skip invalid interfaces that were nulled out during normalization
@@ -46,7 +55,9 @@ def get_interfaces(data):
         except ValueError:
             continue
 
-        value = safe_execute(cls.to_python, data, _with_transaction=False)
+        value = safe_execute(cls.to_python, data,
+                             rust_renormalized=rust_renormalized,
+                             _with_transaction=False)
         if not value:
             continue
 
@@ -128,7 +139,7 @@ class Interface(object):
             self._data[name] = value
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
         """Creates a python interface object from the given raw data.
 
         This function can assume fully normalized and valid data. It can create
@@ -137,59 +148,6 @@ class Interface(object):
         """
         return cls(**data) if data is not None else None
 
-    @classmethod
-    def _normalize(cls, data, meta):
-        """Custom interface normalization. ``data`` is guaranteed to be a
-        non-empty mapping. Return ``None`` for invalid data.
-        """
-        return cls.to_python(data).to_json()
-
-    @classmethod
-    def normalize(cls, data, meta):
-        """Normalizes the given raw data removing or replacing all invalid
-        attributes. If the interface is unprocessable, ``None`` is returned
-        instead.
-
-        Errors are written to the ``meta`` container. Use ``Meta.enter(key)`` to
-        obtain an instance.
-
-        TEMPORARY: The transitional default behavior is to call to_python and
-        catch exceptions into meta data. To migrate, override ``_normalize``.
-        """
-
-        # Gracefully skip empty data. We treat ``None`` and empty objects the
-        # same as missing data. If there are meta errors attached already, they
-        # will remain in meta.
-        if not data:
-            return None
-
-        # Interface data is required to be a JSON object. Places where the
-        # protocol permits lists must be casted to a values wrapper first.
-        if not isinstance(data, Mapping):
-            meta.add_error(EventError.INVALID_DATA, data, {
-                'reason': 'expected %s' % (cls.__name__,),
-            })
-            return None
-
-        try:
-            data = cls._normalize(data, meta=meta)
-        except Exception as e:
-            # XXX: InterfaceValidationErrors can be thrown in the transitional
-            # phase while to_python is being used for normalization. All other
-            # exceptions indicate a programming error and need to be reported.
-            if not isinstance(e, InterfaceValidationError):
-                interface_logger.error('Discarded invalid value for interface: %s (%r)',
-                                       cls.path, data, exc_info=True)
-
-            meta.add_error(EventError.INVALID_DATA, data, {
-                'reason': six.text_type(e)
-            })
-            return None
-
-        # As with input data, empty interface data is coerced to None after
-        # normalization.
-        return data or None
-
     def get_api_context(self, is_public=False):
         return self.to_json()
 
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 3514d2bdad..69afe2a989 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -13,7 +13,7 @@ __all__ = ('Breadcrumbs', )
 import six
 
 from sentry.constants import LOG_LEVELS_MAP
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.utils.safe import get_path, trim
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
 
@@ -37,18 +37,19 @@ class Breadcrumbs(Interface):
     score = 800
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
         values = []
         for index, crumb in enumerate(get_path(data, 'values', filter=True, default=())):
             # TODO(ja): Handle already invalid and None breadcrumbs
 
             try:
-                values.append(cls.normalize_crumb(crumb))
+                values.append(cls.normalize_crumb(crumb, rust_renormalized=rust_renormalized))
             except Exception:
                 # TODO(dcramer): we dont want to discard the entirety of data
                 # when one breadcrumb errors, but it'd be nice if we could still
                 # record an error
-                pass
+                if rust_renormalized:
+                    raise
 
         return cls(values=values)
 
@@ -68,7 +69,27 @@ class Breadcrumbs(Interface):
         })
 
     @classmethod
-    def normalize_crumb(cls, crumb):
+    def normalize_crumb(cls, crumb, rust_renormalized):
+        if rust_renormalized:
+            crumb = dict(crumb)
+            ts = parse_timestamp(crumb.get('timestamp'))
+            if ts:
+                crumb['timestamp'] = to_timestamp(ts)
+            else:
+                crumb['timestamp'] = None
+
+            for key in (
+                'type',
+                'level',
+                'message',
+                'category',
+                'event_id',
+                'data',
+            ):
+                crumb.setdefault(key, None)
+
+            return crumb
+
         ty = crumb.get('type') or 'default'
         level = crumb.get('level')
         if not isinstance(level, six.string_types) or \
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 2b24d34135..e3b26afbdd 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -13,7 +13,7 @@ import string
 
 from django.utils.encoding import force_text
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.utils.contexts_normalization import normalize_os, normalize_runtime
 from sentry.utils.safe import get_path, trim
 
@@ -176,9 +176,11 @@ class Contexts(Interface):
     score = 800
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
         rv = {}
         for alias, value in six.iteritems(data):
+            # XXX(markus): The `None`-case should be handled in the UI and
+            # other consumers of this interface
             if value is not None:
                 rv[alias] = cls.normalize_context(alias, value)
         return cls(**rv)
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index ac83fd2cdc..c3716c24c6 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -5,7 +5,7 @@ import uuid
 
 __all__ = ('DebugMeta', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 
 from symbolic import parse_addr, normalize_debug_id
 
@@ -105,16 +105,20 @@ class DebugMeta(Interface):
     external_type = 'debugmeta'
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
         is_debug_build = data.get('is_debug_build', None)
-        if is_debug_build is not None and not isinstance(is_debug_build, bool):
-            raise InterfaceValidationError('Invalid value for "is_debug_build"')
-
-        images = []
-        for x in data.get('images', None) or ():
-            if x is None:
-                continue
-            images.append(cls.normalize_image(x))
+
+        if rust_renormalized:
+            images = data.get('images', None) or []
+        else:
+            if is_debug_build is not None and not isinstance(is_debug_build, bool):
+                raise InterfaceValidationError('Invalid value for "is_debug_build"')
+
+            images = []
+            for x in data.get('images', None) or ():
+                if x is None:
+                    continue
+                images.append(cls.normalize_image(x))
 
         return cls(
             images=images,
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index b6cac5574f..8421a00d2d 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -15,7 +15,7 @@ import six
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
 from sentry.utils import json
@@ -137,7 +137,21 @@ class Mechanism(Interface):
     """
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            for key in (
+                'type',
+                'synthetic',
+                'description',
+                'help_link',
+                'handled',
+                'data',
+                'meta',
+            ):
+                data.setdefault(key, None)
+
+            return cls(**data)
+
         data = upgrade_legacy_mechanism(data)
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
@@ -268,44 +282,50 @@ class SingleException(Interface):
     grouping_variants = ['system', 'app']
 
     @classmethod
-    def to_python(cls, data, slim_frames=True):
-        is_valid, errors = validate_and_default_interface(data, cls.path)
-        if not is_valid:
-            raise InterfaceValidationError("Invalid exception")
+    def to_python(cls, data, slim_frames=True, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if not rust_renormalized:
+            is_valid, errors = validate_and_default_interface(data, cls.path)
+            if not is_valid:
+                raise InterfaceValidationError("Invalid exception")
 
-        if not (data.get('type') or data.get('value')):
-            raise InterfaceValidationError("No 'type' or 'value' present")
+            if not (data.get('type') or data.get('value')):
+                raise InterfaceValidationError("No 'type' or 'value' present")
 
         if get_path(data, 'stacktrace', 'frames', filter=True):
             stacktrace = Stacktrace.to_python(
                 data['stacktrace'],
                 slim_frames=slim_frames,
+                rust_renormalized=rust_renormalized
             )
         else:
             stacktrace = None
 
         if get_path(data, 'raw_stacktrace', 'frames', filter=True):
             raw_stacktrace = Stacktrace.to_python(
-                data['raw_stacktrace'], slim_frames=slim_frames, raw=True
+                data['raw_stacktrace'], slim_frames=slim_frames, raw=True,
+                rust_renormalized=rust_renormalized
             )
         else:
             raw_stacktrace = None
 
         type = data.get('type')
         value = data.get('value')
-        if isinstance(value, six.string_types):
-            if type is None:
-                m = _type_value_re.match(value)
-                if m:
-                    type = m.group(1)
-                    value = m.group(2).strip()
-        elif value is not None:
-            value = json.dumps(value)
 
-        value = trim(value, 4096)
+        if not rust_renormalized:
+            if isinstance(value, six.string_types):
+                if type is None:
+                    m = _type_value_re.match(value)
+                    if m:
+                        type = m.group(1)
+                        value = m.group(2).strip()
+            elif value is not None:
+                value = json.dumps(value)
+
+            value = trim(value, 4096)
 
         if data.get('mechanism'):
-            mechanism = Mechanism.to_python(data['mechanism'])
+            mechanism = Mechanism.to_python(data['mechanism'],
+                                            rust_renormalized=rust_renormalized)
         else:
             mechanism = None
 
@@ -439,31 +459,41 @@ class Exception(Interface):
         return len(self.exceptions())
 
     @classmethod
-    def to_python(cls, data):
-        if data and 'values' not in data and 'exc_omitted' not in data:
-            data = {"values": [data]}
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if not rust_renormalized:
+            if data and 'values' not in data and 'exc_omitted' not in data:
+                data = {"values": [data]}
 
         values = get_path(data, 'values', default=[])
-        if not isinstance(values, list):
-            raise InterfaceValidationError("Invalid value for 'values'")
+
+        if not rust_renormalized:
+            if not isinstance(values, list):
+                raise InterfaceValidationError("Invalid value for 'values'")
 
         kwargs = {
             'values': [
-                v and SingleException.to_python(v, slim_frames=False)
+                v and SingleException.to_python(
+                    v, slim_frames=False, rust_renormalized=rust_renormalized)
                 for v in values
             ],
         }
 
-        if data.get('exc_omitted'):
-            if len(data['exc_omitted']) != 2:
-                raise InterfaceValidationError("Invalid value for 'exc_omitted'")
-            kwargs['exc_omitted'] = data['exc_omitted']
+        if not rust_renormalized:
+            if data.get('exc_omitted'):
+                if len(data['exc_omitted']) != 2:
+                    raise InterfaceValidationError("Invalid value for 'exc_omitted'")
+                kwargs['exc_omitted'] = data['exc_omitted']
+            else:
+                kwargs['exc_omitted'] = None
         else:
-            kwargs['exc_omitted'] = None
+            kwargs.setdefault('exc_omitted', None)
 
         instance = cls(**kwargs)
-        # we want to wait to slim things til we've reconciled in_app
-        slim_exception_data(instance)
+
+        if not rust_renormalized:
+            # we want to wait to slim things til we've reconciled in_app
+            slim_exception_data(instance)
+
         return instance
 
     # TODO(ja): Fix all following methods when to_python is refactored. All
diff --git a/src/sentry/interfaces/geo.py b/src/sentry/interfaces/geo.py
index a9a7c92922..b6a6ee49f3 100644
--- a/src/sentry/interfaces/geo.py
+++ b/src/sentry/interfaces/geo.py
@@ -4,7 +4,7 @@ __all__ = ('Geo', )
 
 import six
 
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, RUST_RENORMALIZED_DEFAULT
 from sentry.utils.geo import geo_by_addr
 
 
@@ -20,14 +20,14 @@ class Geo(Interface):
     """
 
     @classmethod
-    def to_python(cls, data):
-        kwargs = {
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        data = {
             'country_code': data.get('country_code'),
             'city': data.get('city'),
             'region': data.get('region'),
         }
 
-        return cls(**kwargs)
+        return cls(**data)
 
     @classmethod
     def from_ip_address(cls, ip_address):
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index c16dd672a0..2c3692d2c8 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -18,7 +18,7 @@ from django.utils.translation import ugettext as _
 from django.utils.http import urlencode
 from six.moves.urllib.parse import parse_qsl, urlsplit, urlunsplit
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.utils import json
 from sentry.utils.strings import to_unicode
@@ -124,7 +124,22 @@ class Http(Interface):
     FORM_TYPE = 'application/x-www-form-urlencoded'
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            data.setdefault('query_string', [])
+            for key in (
+                "method",
+                "url",
+                "fragment",
+                "cookies",
+                "headers",
+                "data",
+                "env",
+                "inferred_content_type",
+            ):
+                data.setdefault(key, None)
+            return cls(**data)
+
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid interface data")
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index e35e168ea5..cd794213e6 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -14,7 +14,7 @@ import six
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.utils import json
 from sentry.utils.safe import trim
 
@@ -48,7 +48,16 @@ class Message(Interface):
     external_type = 'message'
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            for key in (
+                'message',
+                'formatted',
+                'params',
+            ):
+                data.setdefault(key, None)
+            return cls(**data)
+
         formatted = stringify(data.get('formatted'))
         message = stringify(data.get('message'))
         if formatted is None and message is None:
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index b900918336..e9396b8fdb 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -5,7 +5,7 @@ __all__ = ('Sdk', )
 from distutils.version import LooseVersion
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.utils.safe import trim
 
 
@@ -50,7 +50,18 @@ class Sdk(Interface):
     """
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            for key in (
+                'name',
+                'version',
+                'integrations',
+                'packages',
+            ):
+                data.setdefault(key, None)
+
+            return cls(**data)
+
         name = data.get('name')
         version = data.get('version')
 
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index b7cb989f50..72d8990dc1 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -15,7 +15,7 @@ __all__ = ('Csp', 'Hpkp', 'ExpectCT', 'ExpectStaple')
 
 from six.moves.urllib.parse import urlsplit, urlunsplit
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.schemas import validate_and_default_interface, INPUT_SCHEMAS
 from sentry.utils import json
 from sentry.utils.cache import memoize
@@ -100,7 +100,8 @@ class SecurityReport(Interface):
         raise NotImplementedError
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        # TODO(markus): semaphore does not validate security interfaces yet
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid interface data")
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 31cf787954..6ff55dfa0b 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -19,7 +19,7 @@ from django.utils.translation import ugettext as _
 from six.moves.urllib.parse import urlparse
 
 from sentry.app import env
-from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.models import UserOption
 from sentry.utils.safe import trim, trim_dict
@@ -214,7 +214,33 @@ class Frame(Interface):
     grouping_variants = ['system', 'app']
 
     @classmethod
-    def to_python(cls, data, raw=False):
+    def to_python(cls, data, raw=False, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            for key in (
+                'abs_path',
+                'colno',
+                'context_line',
+                'data',
+                'errors',
+                'filename',
+                'function',
+                'image_addr',
+                'in_app',
+                'instruction_addr',
+                'lineno',
+                'module',
+                'package',
+                'platform',
+                'post_context',
+                'pre_context',
+                'symbol',
+                'symbol_addr',
+                'trust',
+                'vars',
+            ):
+                data.setdefault(key, None)
+            return cls(**data)
+
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid stack frame data.")
@@ -577,7 +603,24 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data, slim_frames=True, raw=False):
+    def to_python(cls, data, slim_frames=True, raw=False,
+                  rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            data = dict(data)
+            frame_list = []
+            for f in data.get('frames') or []:
+                # XXX(dcramer): handle PHP sending an empty array for a frame
+                frame_list.append(
+                    Frame.to_python(
+                        f or {},
+                        raw=raw,
+                        rust_renormalized=rust_renormalized))
+
+            data['frames'] = frame_list
+            data.setdefault('registers', None)
+            data.setdefault('frames_omitted', None)
+            return cls(**data)
+
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid stack frame data.")
@@ -595,7 +638,11 @@ class Stacktrace(Interface):
             if f is None:
                 continue
             # XXX(dcramer): handle PHP sending an empty array for a frame
-            frame_list.append(Frame.to_python(f or {}, raw=raw))
+            frame_list.append(
+                Frame.to_python(
+                    f or {},
+                    raw=raw,
+                    rust_renormalized=rust_renormalized))
 
         kwargs = {
             'frames': frame_list,
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 4b0a690453..00f8d37c48 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import
 
 __all__ = ('Template', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.interfaces.stacktrace import get_context
 from sentry.utils.safe import trim
@@ -42,7 +42,19 @@ class Template(Interface):
     score = 1100
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            for key in (
+                'abs_path',
+                'filename',
+                'context_line',
+                'lineno',
+                'pre_context',
+                'post_context',
+            ):
+                data.setdefault(key, None)
+            return cls(**data)
+
         is_valid, errors = validate_and_default_interface(data, cls.path)
         if not is_valid:
             raise InterfaceValidationError("Invalid template")
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index dc8c60b676..54d2810b15 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -1,13 +1,13 @@
 from __future__ import absolute_import
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
 
 __all__ = ('Threads', )
 
 
-def get_stacktrace(value, raw=False):
+def get_stacktrace(value, raw=False, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
     # Special case: if the thread has no frames we set the
     # stacktrace to none.  Otherwise this will fail really
     # badly.
@@ -20,16 +20,18 @@ class Threads(Interface):
     grouping_variants = ['system', 'app']
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
         threads = []
 
         for thread in data.get('values') or ():
             if thread is None:
+                # XXX(markus): We should handle this in the UI and other
+                # consumers of this interface
                 continue
             threads.append(
                 {
-                    'stacktrace': get_stacktrace(thread.get('stacktrace')),
-                    'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'), raw=True),
+                    'stacktrace': get_stacktrace(thread.get('stacktrace'), rust_renormalized=rust_renormalized),
+                    'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'), raw=True, rust_renormalized=rust_renormalized),
                     'id': trim(thread.get('id'), 40),
                     'crashed': bool(thread.get('crashed')),
                     'current': bool(thread.get('current')),
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index df3fdc2166..84b4d18ae2 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -11,7 +11,7 @@ __all__ = ('User', )
 
 import six
 
-from sentry.interfaces.base import Interface, prune_empty_keys
+from sentry.interfaces.base import Interface, prune_empty_keys, RUST_RENORMALIZED_DEFAULT
 from sentry.interfaces.geo import Geo
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
@@ -41,7 +41,23 @@ class User(Interface):
     display_score = 2020
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, rust_renormalized=RUST_RENORMALIZED_DEFAULT):
+        if rust_renormalized:
+            data = data.copy()
+            for key in (
+                'id',
+                'email',
+                'username',
+                'ip_address',
+                'name',
+                'geo',
+                'data',
+            ):
+                data.setdefault(key, None)
+            if data['geo'] is not None:
+                data['geo'] = Geo.to_python(data['geo'])
+            return cls(**data)
+
         data = data.copy()
 
         ident = data.pop('id', None)
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index b2126723c3..2872ac7a2a 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -17,7 +17,9 @@ from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 from hashlib import md5
 
-from sentry import eventtypes
+from semaphore.processing import StoreNormalizer
+
+from sentry import eventtypes, options
 from sentry.constants import EVENT_ORDERING_KEY
 from sentry.db.models import (
     BoundedBigIntegerField,
@@ -28,12 +30,37 @@ from sentry.db.models import (
 )
 from sentry.db.models.manager import EventManager
 from sentry.interfaces.base import get_interfaces
+from sentry.utils import metrics
 from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
 from sentry.utils.safe import get_path
 from sentry.utils.strings import truncatechars
 
 
+def _should_skip_to_python(event_data):
+    event_id = event_data.get("event_id")
+    if not event_id:
+        return False
+
+    sample_rate = options.get('store.empty-interface-sample-rate')
+    if sample_rate == 0:
+        return False
+
+    return int(md5(event_id).hexdigest(), 16) % (10 ** 8) <= (sample_rate * (10 ** 8))
+
+
+class EventDict(CanonicalKeyDict):
+    def __init__(self, data, **kwargs):
+        rust_renormalized = _should_skip_to_python(data)
+        if rust_renormalized:
+            normalizer = StoreNormalizer(is_renormalize=True)
+            data = normalizer.normalize_event(dict(data))
+
+        metrics.incr('rust.renormalized',
+                     tags={'value': rust_renormalized})
+        CanonicalKeyDict.__init__(self, data, **kwargs)
+
+
 class Event(Model):
     """
     An individual event.
@@ -52,7 +79,7 @@ class Event(Model):
         null=True,
         ref_func=lambda x: x.project_id or x.project.id,
         ref_version=2,
-        wrapper=CanonicalKeyDict,
+        wrapper=EventDict
     )
 
     objects = EventManager()
@@ -221,7 +248,9 @@ class Event(Model):
         return None
 
     def get_interfaces(self):
-        return CanonicalKeyView(get_interfaces(self.data))
+        was_renormalized = _should_skip_to_python(self.data)
+
+        return CanonicalKeyView(get_interfaces(self.data, rust_renormalized=was_renormalized))
 
     @memoize
     def interfaces(self):
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 72a3dca786..797a8f921f 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -434,8 +434,7 @@ class Factories(object):
             }
 
         if normalize:
-            manager = EventManager(CanonicalKeyDict(kwargs['data']),
-                                   for_store=False)
+            manager = EventManager(CanonicalKeyDict(kwargs['data']))
             manager.normalize()
             kwargs['data'] = manager.get_data()
             kwargs['data'].update(manager.materialize_metadata())
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 385a08829c..c147aefe15 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import pytest
 import mock
 import os
 
@@ -262,3 +263,11 @@ def pytest_runtest_teardown(item):
         model.objects.clear_local_cache()
 
     Hub.main.bind_client(None)
+
+
+@pytest.fixture(autouse=True)
+def _mock_skip_to_python(monkeypatch, request):
+    from sentry.interfaces.base import RUST_RENORMALIZED_DEFAULT
+    monkeypatch.setattr(
+        'sentry.models.event._should_skip_to_python',
+        lambda _: RUST_RENORMALIZED_DEFAULT)
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index bc00e2e571..7b8a34c099 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -198,7 +198,7 @@ class SentryRemoteTest(TestCase):
         assert instance.message == 'hello'
         assert instance.data['logentry'] == {'formatted': 'hello'}
         assert instance.title == instance.data['title'] == 'hello'
-        assert instance.location is instance.data['location'] is None
+        assert instance.location is instance.data.get('location', None) is None
 
         assert tagstore.get_tag_key(self.project.id, None, 'foo') is not None
         assert tagstore.get_tag_value(self.project.id, None, 'foo', 'bar') is not None
