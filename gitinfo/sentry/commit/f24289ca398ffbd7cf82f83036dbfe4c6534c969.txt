commit f24289ca398ffbd7cf82f83036dbfe4c6534c969
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Oct 24 11:07:40 2019 -0700

    fix(app-platform): external issue sentry app undefined (#15183)

diff --git a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx b/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
similarity index 78%
rename from src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
rename to src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
index 6e322c07ac..12a6bc4f28 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssuesList.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssuesList.tsx
@@ -1,7 +1,5 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 
-import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import AsyncComponent from 'app/components/asyncComponent';
 import ExternalIssueActions from 'app/components/group/externalIssueActions';
@@ -16,39 +14,62 @@ import SentryAppInstallationStore from 'app/stores/sentryAppInstallationsStore';
 import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
 import ExternalIssueStore from 'app/stores/externalIssueStore';
 import ErrorBoundary from 'app/components/errorBoundary';
+import {
+  Group,
+  Project,
+  Organization,
+  PlatformExternalIssue,
+  Event,
+  SentryAppComponent,
+  SentryAppInstallation,
+  GroupIntegration,
+} from 'app/types';
+
+type Props = AsyncComponent['props'] & {
+  group: Group;
+  project: Project;
+  organization: Organization;
+  event: Event;
+};
+
+type State = AsyncComponent['state'] & {
+  components: SentryAppComponent[];
+  sentryAppInstallations: SentryAppInstallation[];
+  externalIssues: PlatformExternalIssue[];
+  integrations: GroupIntegration[];
+};
+
+class ExternalIssueList extends AsyncComponent<Props, State> {
+  unsubscribables: any[] = [];
 
-class ExternalIssueList extends AsyncComponent {
   static propTypes = {
-    api: PropTypes.object.isRequired,
     group: SentryTypes.Group.isRequired,
     project: SentryTypes.Project.isRequired,
     organization: SentryTypes.Organization.isRequired,
     event: SentryTypes.Event,
-    orgId: PropTypes.string,
   };
 
-  getEndpoints() {
+  getEndpoints(): [string, string][] {
     const {group} = this.props;
     return [['integrations', `/groups/${group.id}/integrations/`]];
   }
 
-  constructor(props) {
-    super(props);
-    this.unsubscribables = [];
-    this.state = {
+  constructor(props: Props) {
+    super(props, {});
+    this.state = Object.assign({}, this.state, {
       components: [],
       sentryAppInstallations: [],
       externalIssues: [],
-    };
+    });
   }
 
   componentWillMount() {
     super.componentWillMount();
 
     this.unsubscribables = [
-      SentryAppInstallationStore.listen(this.onSentryAppInstallationChange),
-      ExternalIssueStore.listen(this.onExternalIssueChange),
-      SentryAppComponentsStore.listen(this.onSentryAppComponentsChange),
+      SentryAppInstallationStore.listen(this.onSentryAppInstallationChange, this),
+      ExternalIssueStore.listen(this.onExternalIssueChange, this),
+      SentryAppComponentsStore.listen(this.onSentryAppComponentsChange, this),
     ];
 
     this.fetchSentryAppData();
@@ -59,15 +80,15 @@ class ExternalIssueList extends AsyncComponent {
     this.unsubscribables.forEach(unsubscribe => unsubscribe());
   }
 
-  onSentryAppInstallationChange = sentryAppInstallations => {
+  onSentryAppInstallationChange = (sentryAppInstallations: SentryAppInstallation[]) => {
     this.setState({sentryAppInstallations});
   };
 
-  onExternalIssueChange = externalIssues => {
+  onExternalIssueChange = (externalIssues: PlatformExternalIssue[]) => {
     this.setState({externalIssues});
   };
 
-  onSentryAppComponentsChange = sentryAppComponents => {
+  onSentryAppComponentsChange = (sentryAppComponents: SentryAppComponent[]) => {
     const components = sentryAppComponents.filter(c => c.type === 'issue-link');
     this.setState({components});
   };
@@ -80,22 +101,22 @@ class ExternalIssueList extends AsyncComponent {
   // control over those services.
   //
   fetchSentryAppData() {
-    const {api, group, project, organization} = this.props;
+    const {group, project, organization} = this.props;
 
     if (project && project.id && organization) {
-      api
+      this.api
         .requestPromise(`/groups/${group.id}/external-issues/`)
         .then(data => {
           ExternalIssueStore.load(data);
           this.setState({externalIssues: data});
         })
-        .catch(error => {
+        .catch(_error => {
           return;
         });
     }
   }
 
-  renderIntegrationIssues(integrations = []) {
+  renderIntegrationIssues(integrations: GroupIntegration[] = []) {
     const {group} = this.props;
 
     const activeIntegrations = integrations.filter(
@@ -126,6 +147,10 @@ class ExternalIssueList extends AsyncComponent {
       const installation = sentryAppInstallations.find(
         i => i.app.uuid === sentryApp.uuid
       );
+      //should always find a match but TS complains if we don't handle this case
+      if (!installation) {
+        return null;
+      }
 
       const issue = (externalIssues || []).find(i => i.serviceType === sentryApp.slug);
 
@@ -186,7 +211,7 @@ class ExternalIssueList extends AsyncComponent {
             icon="icon-generic-box"
             priority="muted"
             size="small"
-            to={`/settings/${this.props.orgId}/integrations`}
+            to={`/settings/${this.props.organization.slug}/integrations`}
           >
             {t('Set up Issue Tracking')}
           </AlertLink>
@@ -208,4 +233,4 @@ class ExternalIssueList extends AsyncComponent {
   }
 }
 
-export default withOrganization(withApi(ExternalIssueList));
+export default withOrganization(ExternalIssueList);
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
rename to src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx
index 6334004734..91b5c67a0e 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx
@@ -1,8 +1,9 @@
-import React from 'react';
+import React, {ReactElement} from 'react';
 import PropTypes from 'prop-types';
 import Modal from 'react-bootstrap/lib/Modal';
 import styled from 'react-emotion';
 
+import {Client} from 'app/api';
 import withApi from 'app/utils/withApi';
 import InlineSvg from 'app/components/inlineSvg';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
@@ -15,18 +16,40 @@ import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import {deleteExternalIssue} from 'app/actionCreators/platformExternalIssues';
 import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
-
-class SentryAppExternalIssueActions extends React.Component {
-  static propTypes = {
+import {
+  Group,
+  PlatformExternalIssue,
+  Event,
+  SentryAppComponent,
+  SentryAppInstallation,
+} from 'app/types';
+
+type Props = {
+  api: Client;
+  group: Group;
+  sentryAppComponent: SentryAppComponent;
+  sentryAppInstallation: SentryAppInstallation;
+  externalIssue?: PlatformExternalIssue;
+  event: Event;
+};
+
+type State = {
+  action: 'create' | 'link';
+  externalIssue?: PlatformExternalIssue;
+  showModal: boolean;
+};
+
+class SentryAppExternalIssueActions extends React.Component<Props, State> {
+  static propTypes: any = {
     api: PropTypes.object.isRequired,
-    group: PropTypes.object.isRequired,
+    group: SentryTypes.Group.isRequired,
     sentryAppComponent: PropTypes.object.isRequired,
-    sentryAppInstallation: PropTypes.object,
+    sentryAppInstallation: PropTypes.object.isRequired,
     externalIssue: PropTypes.object,
     event: SentryTypes.Event,
   };
 
-  constructor(props) {
+  constructor(props: Props) {
     super(props);
 
     this.state = {
@@ -36,13 +59,13 @@ class SentryAppExternalIssueActions extends React.Component {
     };
   }
 
-  componentDidUpdate(prevProps) {
+  componentDidUpdate(prevProps: Props) {
     if (this.props.externalIssue !== prevProps.externalIssue) {
       this.updateExternalIssue(this.props.externalIssue);
     }
   }
 
-  updateExternalIssue(externalIssue) {
+  updateExternalIssue(externalIssue?: PlatformExternalIssue) {
     this.setState({externalIssue});
   }
 
@@ -78,14 +101,15 @@ class SentryAppExternalIssueActions extends React.Component {
     const {api, group} = this.props;
     const {externalIssue} = this.state;
 
-    deleteExternalIssue(api, group.id, externalIssue.id)
-      .then(_data => {
-        this.setState({externalIssue: null});
-        addSuccessMessage(t('Successfully unlinked issue.'));
-      })
-      .catch(_error => {
-        addErrorMessage(t('Unable to unlink issue.'));
-      });
+    externalIssue &&
+      deleteExternalIssue(api, group.id, externalIssue.id)
+        .then(_data => {
+          this.setState({externalIssue: undefined});
+          addSuccessMessage(t('Successfully unlinked issue.'));
+        })
+        .catch(_error => {
+          addErrorMessage(t('Unable to unlink issue.'));
+        });
   };
 
   onAddRemoveClick = () => {
@@ -98,7 +122,7 @@ class SentryAppExternalIssueActions extends React.Component {
     }
   };
 
-  onSubmitSuccess = externalIssue => {
+  onSubmitSuccess = (externalIssue: PlatformExternalIssue) => {
     this.setState({externalIssue});
     this.hideModal();
   };
@@ -109,7 +133,7 @@ class SentryAppExternalIssueActions extends React.Component {
     const name = sentryAppComponent.sentryApp.name;
 
     let url = '#';
-    let displayName = tct('Link [name] Issue', {name});
+    let displayName: ReactElement | string = tct('Link [name] Issue', {name});
 
     if (externalIssue) {
       url = externalIssue.webUrl;
@@ -155,6 +179,7 @@ class SentryAppExternalIssueActions extends React.Component {
           <SentryAppExternalIssueForm
             group={group}
             sentryAppInstallation={sentryAppInstallation}
+            appName={name}
             config={sentryAppComponent.schema}
             action={action}
             onSubmitSuccess={this.onSubmitSuccess}
@@ -197,7 +222,7 @@ const IssueLinkContainer = styled('div')`
   margin-bottom: 16px;
 `;
 
-const AddRemoveIcon = styled(InlineSvg)`
+const AddRemoveIcon = styled(InlineSvg)<{isLinked: boolean}>`
   height: ${space(1.5)};
   color: ${p => p.theme.gray4};
   transition: 0.2s transform;
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
similarity index 74%
rename from src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
rename to src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
index eafe230171..95892123ed 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
@@ -11,30 +11,46 @@ import {t} from 'app/locale';
 import ExternalIssueStore from 'app/stores/externalIssueStore';
 import getStacktraceBody from 'app/utils/getStacktraceBody';
 import withApi from 'app/utils/withApi';
-
-class SentryAppExternalIssueForm extends React.Component {
-  static propTypes = {
+import {Client} from 'app/api';
+import {Group, PlatformExternalIssue, Event, SentryAppInstallation} from 'app/types';
+import {Field} from 'app/views/settings/components/forms/type';
+
+type Props = {
+  api: Client;
+  group: Group;
+  sentryAppInstallation: SentryAppInstallation;
+  appName: string;
+  config: object;
+  action: 'create' | 'link';
+  event: Event;
+  onSubmitSuccess: (externalIssue: PlatformExternalIssue) => void;
+};
+
+//TODO(TS): Improve typings on Field so we can use the type in functions without errors
+
+export class SentryAppExternalIssueForm extends React.Component<Props> {
+  static propTypes: any = {
     api: PropTypes.object.isRequired,
     group: SentryTypes.Group.isRequired,
     sentryAppInstallation: PropTypes.object,
+    appName: PropTypes.string,
     config: PropTypes.object.isRequired,
     action: PropTypes.oneOf(['link', 'create']),
     event: SentryTypes.Event,
     onSubmitSuccess: PropTypes.func,
   };
 
-  onSubmitSuccess = issue => {
+  onSubmitSuccess = (issue: PlatformExternalIssue) => {
     ExternalIssueStore.add(issue);
     this.props.onSubmitSuccess(issue);
   };
 
   onSubmitError = () => {
-    const {action} = this.props;
-    const appName = this.props.sentryAppInstallation.sentryApp.name;
+    const {action, appName} = this.props;
     addErrorMessage(t('Unable to %s %s issue.', action, appName));
   };
 
-  getOptions = (field, input) => {
+  getOptions = (field: Field, input: string) => {
     return new Promise(resolve => {
       this.debouncedOptionLoad(field, input, resolve);
     });
@@ -67,7 +83,7 @@ class SentryAppExternalIssueForm extends React.Component {
   fieldProps = field => {
     return field.uri
       ? {
-          loadOptions: input => this.getOptions(field, input),
+          loadOptions: (input: string) => this.getOptions(field, input),
           async: true,
           cache: false,
           onSelectResetsInput: false,
@@ -90,7 +106,7 @@ class SentryAppExternalIssueForm extends React.Component {
   }
 
   getFieldDefault(field) {
-    const {group} = this.props;
+    const {group, appName} = this.props;
     if (field.type === 'textarea') {
       field.maxRows = 10;
       field.autosize = true;
@@ -100,7 +116,7 @@ class SentryAppExternalIssueForm extends React.Component {
         return group.title;
       case 'issue.description':
         const stacktrace = this.getStacktrace();
-        const queryParams = {referrer: this.props.sentryAppInstallation.sentryApp.name};
+        const queryParams = {referrer: appName};
         const url = addQueryParamsToExistingUrl(group.permalink, queryParams);
         const shortId = group.shortId;
         return t('Sentry Issue: [%s](%s)%s', shortId, url, stacktrace);
@@ -110,28 +126,25 @@ class SentryAppExternalIssueForm extends React.Component {
   }
 
   render() {
-    const {sentryAppInstallation} = this.props;
-    const config = this.props.config[this.props.action];
+    const {sentryAppInstallation, action} = this.props;
+    const config = this.props.config[action];
 
     const requiredFields = config.required_fields || [];
     const optionalFields = config.optional_fields || [];
-    const metaFields = [
+    const metaFields: Field[] = [
       {
         type: 'hidden',
         name: 'action',
-        value: this.props.action,
-        defaultValue: this.props.action,
+        defaultValue: action,
       },
       {
         type: 'hidden',
         name: 'groupId',
-        value: this.props.group.id,
         defaultValue: this.props.group.id,
       },
       {
         type: 'hidden',
         name: 'uri',
-        value: config.uri,
         defaultValue: config.uri,
       },
     ];
@@ -142,7 +155,7 @@ class SentryAppExternalIssueForm extends React.Component {
 
     return (
       <Form
-        key={this.props.action}
+        key={action}
         apiEndpoint={`/sentry-app-installations/${
           sentryAppInstallation.uuid
         }/external-issues/`}
@@ -155,7 +168,13 @@ class SentryAppExternalIssueForm extends React.Component {
         })}
 
         {requiredFields.map(field => {
-          field.choices = field.choices || [];
+          field = Object.assign({}, field, {
+            choices: field.choices || [],
+            inline: false,
+            stacked: true,
+            flexibleControlStateSize: true,
+            required: true,
+          });
 
           if (['text', 'textarea'].includes(field.type) && field.default) {
             field.defaultValue = this.getFieldDefault(field);
@@ -165,17 +184,18 @@ class SentryAppExternalIssueForm extends React.Component {
             <FieldFromConfig
               key={`${field.name}`}
               field={field}
-              inline={false}
-              stacked
-              flexibleControlStateSize
-              required
               {...this.fieldProps(field)}
             />
           );
         })}
 
         {optionalFields.map(field => {
-          field.choices = field.choices || [];
+          field = Object.assign({}, field, {
+            choices: field.choices || [],
+            inline: false,
+            stacked: true,
+            flexibleControlStateSize: true,
+          });
 
           if (['text', 'textarea'].includes(field.type) && field.default) {
             field.defaultValue = this.getFieldDefault(field);
@@ -185,9 +205,6 @@ class SentryAppExternalIssueForm extends React.Component {
             <FieldFromConfig
               key={`${field.name}`}
               field={field}
-              inline={false}
-              stacked
-              flexibleControlStateSize
               {...this.fieldProps(field)}
             />
           );
@@ -197,5 +214,4 @@ class SentryAppExternalIssueForm extends React.Component {
   }
 }
 
-export {SentryAppExternalIssueForm};
 export default withApi(SentryAppExternalIssueForm);
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 9f99c5c447..4a13477fb9 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -245,7 +245,6 @@ class GroupSidebar extends React.Component {
             event={this.props.event}
             group={this.props.group}
             project={project}
-            orgId={organization.slug}
           />
         </ErrorBoundary>
 
diff --git a/src/sentry/static/sentry/app/stores/sentryAppInstallationsStore.jsx b/src/sentry/static/sentry/app/stores/sentryAppInstallationsStore.jsx
deleted file mode 100644
index 910dd3fbba..0000000000
--- a/src/sentry/static/sentry/app/stores/sentryAppInstallationsStore.jsx
+++ /dev/null
@@ -1,26 +0,0 @@
-import Reflux from 'reflux';
-
-const SentryAppInstallationStore = Reflux.createStore({
-  init() {
-    this.items = [];
-  },
-
-  getInitialState() {
-    return this.items;
-  },
-
-  load(items) {
-    this.items = items;
-    this.trigger(items);
-  },
-
-  get(uuid) {
-    return this.items.find(item => item.uuid === uuid);
-  },
-
-  getAll() {
-    return this.items;
-  },
-});
-
-export default SentryAppInstallationStore;
diff --git a/src/sentry/static/sentry/app/stores/sentryAppInstallationsStore.tsx b/src/sentry/static/sentry/app/stores/sentryAppInstallationsStore.tsx
new file mode 100644
index 0000000000..fa33938526
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/sentryAppInstallationsStore.tsx
@@ -0,0 +1,33 @@
+import Reflux from 'reflux';
+
+import {SentryAppInstallation} from 'app/types';
+
+const SentryAppInstallationStore = Reflux.createStore({
+  init() {
+    this.items = [];
+  },
+
+  getInitialState(): SentryAppInstallation[] {
+    return this.items;
+  },
+
+  load(items: SentryAppInstallation[]) {
+    this.items = items;
+    this.trigger(items);
+  },
+
+  get(uuid: string) {
+    const items: SentryAppInstallation[] = this.items;
+    return items.find(item => item.uuid === uuid);
+  },
+
+  getAll(): SentryAppInstallation[] {
+    return this.items;
+  },
+});
+
+type SentryAppInstallationStoreType = Reflux.Store & {
+  load: (items: SentryAppInstallation[]) => void;
+};
+
+export default SentryAppInstallationStore as SentryAppInstallationStoreType;
diff --git a/src/sentry/static/sentry/app/stores/sentryAppStore.jsx b/src/sentry/static/sentry/app/stores/sentryAppStore.jsx
deleted file mode 100644
index 21791498f8..0000000000
--- a/src/sentry/static/sentry/app/stores/sentryAppStore.jsx
+++ /dev/null
@@ -1,38 +0,0 @@
-import Reflux from 'reflux';
-import {uniqBy} from 'lodash';
-
-const SentryAppStore = Reflux.createStore({
-  init() {
-    this.items = [];
-  },
-
-  getInitialState() {
-    return this.items;
-  },
-
-  load(items) {
-    this.items = items;
-    this.deDup();
-    this.trigger(this.items);
-  },
-
-  add(...apps) {
-    apps.forEach(app => this.items.push(app));
-    this.deDup();
-    this.trigger(this.items);
-  },
-
-  get(slug) {
-    return this.items.find(item => item.slug === slug);
-  },
-
-  getAll() {
-    return this.items;
-  },
-
-  deDup() {
-    this.items = uniqBy(this.items, i => i.uuid);
-  },
-});
-
-export default SentryAppStore;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 624e9d90ff..4cdec71c7d 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1,6 +1,8 @@
 import {SpanEntry} from 'app/components/events/interfaces/spans/types';
 import {API_SCOPES} from 'app/constants';
 import {Field} from 'app/views/settings/components/forms/type';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
 
 export type ObjectStatus =
   | 'active'
@@ -201,7 +203,10 @@ export type CommitAuthor = {
 };
 
 // TODO(ts): This type is incomplete
-export type Environment = {};
+export type Environment = {
+  name: string;
+  id: string;
+};
 
 // TODO(ts): This type is incomplete
 export type SavedSearch = {};
@@ -451,6 +456,14 @@ export type GroupIntegration = Integration & {
   externalIssues: IntegrationExternalIssue[];
 };
 
+export type PlatformExternalIssue = {
+  id: string;
+  groupId: string;
+  serviceType: string;
+  displayName: string;
+  webUrl: string;
+};
+
 export type SentryAppInstallation = {
   app: {
     uuid: string;
@@ -535,3 +548,19 @@ export type MemberRole = {
   desc: string;
   allowed?: boolean;
 };
+
+export type SentryAppComponent = {
+  uuid: string;
+  type: 'issue-link' | 'alert-rule-action' | 'issue-media' | 'stacktrace-link';
+  schema: object;
+  sentryApp: {
+    uuid: string;
+    slug: string;
+    name: string;
+  };
+};
+
+export type RouterProps = {
+  params: Params;
+  location: Location;
+};
diff --git a/src/sentry/static/sentry/app/utils/fetchSentryAppInstallations.jsx b/src/sentry/static/sentry/app/utils/fetchSentryAppInstallations.jsx
deleted file mode 100644
index 966698c235..0000000000
--- a/src/sentry/static/sentry/app/utils/fetchSentryAppInstallations.jsx
+++ /dev/null
@@ -1,40 +0,0 @@
-import SentryAppInstallationStore from 'app/stores/sentryAppInstallationsStore';
-import SentryAppStore from 'app/stores/sentryAppStore';
-
-const fetchSentryAppInstallations = (api, orgSlug) => {
-  const sentryAppsUri = '/sentry-apps/';
-  const ownedSentryAppsUri = `/organizations/${orgSlug}/sentry-apps/`;
-  const installsUri = `/organizations/${orgSlug}/sentry-app-installations/`;
-
-  function updateSentryAppStore(sentryApps) {
-    SentryAppStore.load(sentryApps);
-  }
-
-  function fetchOwnedSentryApps() {
-    api.requestPromise(ownedSentryAppsUri).then(apps => SentryAppStore.add(...apps));
-  }
-
-  function fetchInstalls() {
-    api
-      .requestPromise(installsUri)
-      .then(installs => installs.map(setSentryApp))
-      .then(updateInstallStore);
-  }
-
-  function setSentryApp(install) {
-    install.sentryApp = SentryAppStore.get(install.app.slug);
-    return install;
-  }
-
-  function updateInstallStore(installs) {
-    SentryAppInstallationStore.load(installs);
-  }
-
-  api
-    .requestPromise(sentryAppsUri)
-    .then(updateSentryAppStore)
-    .then(fetchOwnedSentryApps)
-    .then(fetchInstalls);
-};
-
-export default fetchSentryAppInstallations;
diff --git a/src/sentry/static/sentry/app/utils/fetchSentryAppInstallations.tsx b/src/sentry/static/sentry/app/utils/fetchSentryAppInstallations.tsx
new file mode 100644
index 0000000000..49a115fdb2
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/fetchSentryAppInstallations.tsx
@@ -0,0 +1,12 @@
+import SentryAppInstallationStore from 'app/stores/sentryAppInstallationsStore';
+import {Client} from 'app/api';
+import {SentryAppInstallation} from 'app/types';
+
+const fetchSentryAppInstallations = async (api: Client, orgSlug: string) => {
+  const installsUri = `/organizations/${orgSlug}/sentry-app-installations/`;
+
+  const installs: SentryAppInstallation[] = await api.requestPromise(installsUri);
+  SentryAppInstallationStore.load(installs);
+};
+
+export default fetchSentryAppInstallations;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.tsx
similarity index 92%
rename from src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.jsx
rename to src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.tsx
index eeba599ea6..10a943d6ad 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.tsx
@@ -3,6 +3,7 @@ import {isEqual} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {Client} from 'app/api';
 import {fetchSentryAppComponents} from 'app/actionCreators/sentryAppComponents';
 import {withMeta} from 'app/components/events/meta/metaProxy';
 import EventEntries from 'app/components/events/eventEntries';
@@ -14,11 +15,28 @@ import MutedBox from 'app/components/mutedBox';
 import ResolutionBox from 'app/components/resolutionBox';
 import SentryTypes from 'app/sentryTypes';
 import fetchSentryAppInstallations from 'app/utils/fetchSentryAppInstallations';
+import {Group, Project, Organization, Environment, RouterProps, Event} from 'app/types';
 
 import {fetchGroupEventAndMarkSeen, getEventEnvironment} from '../utils';
 import GroupEventToolbar from '../eventToolbar';
 
-class GroupEventDetails extends React.Component {
+type Props = RouterProps & {
+  api: Client;
+  group: Group;
+  project: Project;
+  organization: Organization;
+  environments: Environment[];
+};
+
+type State = {
+  loading: boolean;
+  error: boolean;
+  event: Event | null;
+  eventNavLinks: string;
+  releasesCompletion: any;
+};
+
+class GroupEventDetails extends React.Component<Props, State> {
   static propTypes = {
     api: PropTypes.object.isRequired,
     group: SentryTypes.Group.isRequired,
@@ -27,7 +45,7 @@ class GroupEventDetails extends React.Component {
     environments: PropTypes.arrayOf(SentryTypes.Environment).isRequired,
   };
 
-  constructor(props) {
+  constructor(props: Props) {
     super(props);
     this.state = {
       loading: true,
@@ -42,7 +60,7 @@ class GroupEventDetails extends React.Component {
     this.fetchData();
   }
 
-  componentDidUpdate(prevProps, prevState) {
+  componentDidUpdate(prevProps: Props, prevState: State) {
     const {environments, params, location} = this.props;
 
     const eventHasChanged = prevProps.params.eventId !== params.eventId;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx
index 791f3c18ad..a1ca065551 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx
@@ -7,15 +7,24 @@ import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
 import {Client} from 'app/api';
-import {GlobalSelection, Organization, Environment} from 'app/types';
+import {
+  GlobalSelection,
+  Organization,
+  Environment,
+  RouterProps,
+  Project,
+  Group,
+} from 'app/types';
 import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 
-type Props = {
+type Props = RouterProps & {
   api: Client;
   organization: Organization;
   selection: GlobalSelection;
+  project: Project;
+  group: Group;
 };
 
 type State = {
@@ -58,7 +67,7 @@ export class GroupEventDetailsContainer extends React.Component<Props, State> {
       return <LoadingIndicator />;
     }
     const {selection, ...otherProps} = this.props;
-    const environments = this.state.environments.filter(env =>
+    const environments: Environment[] = this.state.environments.filter(env =>
       selection.environments.includes(env.name)
     );
     return <GroupEventDetails {...otherProps} environments={environments} />;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
index 889711aa78..a841ed16d8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
@@ -23,7 +23,7 @@ type Props = {
   disabled?: boolean;
 
   // TODO(ts): Investigate further
-  access: any;
+  access?: any;
 };
 
 export default class FieldFromConfig extends React.Component<Props> {
diff --git a/tests/js/sentry-test/fixtures/platformExternalIssue.js b/tests/js/sentry-test/fixtures/platformExternalIssue.js
index d9c3659ae7..d101ef5254 100644
--- a/tests/js/sentry-test/fixtures/platformExternalIssue.js
+++ b/tests/js/sentry-test/fixtures/platformExternalIssue.js
@@ -1,6 +1,7 @@
 export function PlatformExternalIssue(params = {}) {
   return {
-    groupId: 1,
+    id: '1',
+    groupId: '1',
     serviceType: 'foo',
     displayName: 'project#1',
     webUrl: 'https://example.com/1',
diff --git a/tests/js/spec/components/group/sentryAppExternalIssueActions.spec.jsx b/tests/js/spec/components/group/sentryAppExternalIssueActions.spec.jsx
index 5aabd0e32c..89724bb52c 100644
--- a/tests/js/spec/components/group/sentryAppExternalIssueActions.spec.jsx
+++ b/tests/js/spec/components/group/sentryAppExternalIssueActions.spec.jsx
@@ -14,13 +14,24 @@ describe('SentryAppExternalIssueActions', () => {
 
   beforeEach(() => {
     group = TestStubs.Group();
-    component = TestStubs.SentryAppComponent();
     sentryApp = TestStubs.SentryApp();
+    component = TestStubs.SentryAppComponent({
+      sentryApp: {
+        uuid: sentryApp.uuid,
+        slug: sentryApp.slug,
+        name: sentryApp.name,
+      },
+    });
     install = TestStubs.SentryAppInstallation({sentryApp});
     externalIssue = TestStubs.PlatformExternalIssue({
       groupId: group.id,
       serviceType: component.sentryApp.slug,
     });
+
+    MockApiClient.addMockResponse({
+      url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+      method: 'POST',
+    });
   });
 
   describe('without an external issue linked', () => {
diff --git a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
index 1dfef47711..6cf7222ac0 100644
--- a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
@@ -29,6 +29,7 @@ describe('SentryAppExternalIssueForm', () => {
         <SentryAppExternalIssueForm
           group={group}
           sentryAppInstallation={sentryAppInstallation}
+          appName={sentryApp.name}
           config={component.schema}
           action="create"
           api={new Client()}
@@ -38,15 +39,19 @@ describe('SentryAppExternalIssueForm', () => {
     });
 
     it('specifies the action', () => {
-      expect(wrapper.find('HiddenField[name="action"]').prop('value')).toEqual('create');
+      expect(wrapper.find('HiddenField[name="action"]').prop('defaultValue')).toEqual(
+        'create'
+      );
     });
 
     it('specifies the group', () => {
-      expect(wrapper.find('HiddenField[name="groupId"]').prop('value')).toEqual(group.id);
+      expect(wrapper.find('HiddenField[name="groupId"]').prop('defaultValue')).toEqual(
+        group.id
+      );
     });
 
     it('specifies the uri', () => {
-      expect(wrapper.find('HiddenField[name="uri"]').prop('value')).toEqual(
+      expect(wrapper.find('HiddenField[name="uri"]').prop('defaultValue')).toEqual(
         component.schema.create.uri
       );
     });
@@ -87,6 +92,7 @@ describe('SentryAppExternalIssueForm', () => {
         <SentryAppExternalIssueForm
           group={group}
           sentryAppInstallation={sentryAppInstallation}
+          appName={sentryApp.name}
           config={component.schema}
           action="link"
           api={new Client()}
@@ -96,15 +102,19 @@ describe('SentryAppExternalIssueForm', () => {
     });
 
     it('specifies the action', () => {
-      expect(wrapper.find('HiddenField[name="action"]').prop('value')).toEqual('link');
+      expect(wrapper.find('HiddenField[name="action"]').prop('defaultValue')).toEqual(
+        'link'
+      );
     });
 
     it('specifies the group', () => {
-      expect(wrapper.find('HiddenField[name="groupId"]').prop('value')).toEqual(group.id);
+      expect(wrapper.find('HiddenField[name="groupId"]').prop('defaultValue')).toEqual(
+        group.id
+      );
     });
 
     it('specifies the uri', () => {
-      expect(wrapper.find('HiddenField[name="uri"]').prop('value')).toEqual(
+      expect(wrapper.find('HiddenField[name="uri"]').prop('defaultValue')).toEqual(
         component.schema.link.uri
       );
     });
@@ -192,6 +202,7 @@ describe('SentryAppExternalIssueForm Async Field', () => {
         <SentryAppExternalIssueForm
           group={group}
           sentryAppInstallation={sentryAppInstallation}
+          appName={sentryApp.name}
           config={component.schema}
           action="create"
           api={new Client()}
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
index 554bd3dc87..dd21bb60ad 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
@@ -59,6 +59,10 @@ describe('groupEventDetails', () => {
       body: [],
     });
 
+    MockApiClient.addMockResponse({
+      url: `/groups/${group.id}/external-issues/`,
+    });
+
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
       body: [],
@@ -327,8 +331,6 @@ describe('groupEventDetails', () => {
 
   describe('Platform Integrations', () => {
     let wrapper; // eslint-disable-line
-    let integrationsRequest;
-    let orgIntegrationsRequest;
     let componentsRequest;
 
     const mountWithThemeWrapper = () => {
@@ -347,7 +349,6 @@ describe('groupEventDetails', () => {
     };
 
     beforeEach(() => {
-      const integration = TestStubs.SentryApp();
       const unpublishedIntegration = TestStubs.SentryApp({status: 'unpublished'});
       const internalIntegration = TestStubs.SentryApp({status: 'internal'});
 
@@ -381,32 +382,14 @@ describe('groupEventDetails', () => {
         body: [component],
       });
 
-      integrationsRequest = MockApiClient.addMockResponse({
-        url: '/sentry-apps/',
-        body: [integration],
-      });
-
       MockApiClient.addMockResponse({
         url: `/organizations/${org.slug}/sentry-app-installations/`,
         body: [unpublishedInstall, internalInstall],
       });
 
-      orgIntegrationsRequest = MockApiClient.addMockResponse({
-        url: `/organizations/${org.slug}/sentry-apps/`,
-        body: [unpublishedIntegration, internalIntegration],
-      });
-
       wrapper = mountWithThemeWrapper();
     });
 
-    it('loads Integrations', () => {
-      expect(integrationsRequest).toHaveBeenCalled();
-    });
-
-    it('loads unpublished and internal Integrations', () => {
-      expect(orgIntegrationsRequest).toHaveBeenCalled();
-    });
-
     it('loads Integration UI components', () => {
       expect(componentsRequest).toHaveBeenCalled();
     });
