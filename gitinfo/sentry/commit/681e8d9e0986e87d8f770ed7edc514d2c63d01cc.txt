commit 681e8d9e0986e87d8f770ed7edc514d2c63d01cc
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Mar 17 17:15:02 2016 -0700

    Toggle bookmark status from projectDetails

diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 97d5dd6f93..eb3e657ad1 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -4,6 +4,9 @@ import {Link} from 'react-router';
 import jQuery from 'jquery';
 
 import ConfigStore from '../../stores/configStore';
+import {update as projectUpdate} from '../../actionCreators/projects';
+import ApiMixin from '../../mixins/apiMixin';
+
 import ProjectLabel from '../../components/projectLabel';
 import DropdownLink from '../dropdownLink';
 import MenuItem from '../menuItem';
@@ -12,6 +15,8 @@ import {t} from '../../locale';
 
 const ProjectSelector = React.createClass({
   propTypes: {
+    // Accepts a project id (slug) and not a project *object* because ProjectSelector
+    // is created from Django templates, and only organization is serialized
     projectId: React.PropTypes.string,
     organization: React.PropTypes.object.isRequired
   },
@@ -20,9 +25,11 @@ const ProjectSelector = React.createClass({
     location: React.PropTypes.object
   },
 
+  mixins: [ApiMixin],
+
   getDefaultProps() {
     return {
-      projectId: null
+      project: null
     };
   },
 
@@ -76,6 +83,16 @@ const ProjectSelector = React.createClass({
     this.refs.dropdownLink && this.refs.dropdownLink.close();
   },
 
+  handleBookmarkClick(project) {
+    projectUpdate(this.api, {
+      orgId: this.props.organization.slug,
+      projectId: project.slug,
+      data: {
+        isBookmarked: !project.isBookmarked
+      }
+    });
+  },
+
   getProjectNode(team, project, highlightText, hasSingleTeam) {
     let projectId = project.slug;
     let label = this.getProjectLabel(team, project, hasSingleTeam,
@@ -163,11 +180,15 @@ const ProjectSelector = React.createClass({
     let orgId = org.slug;
     let projectId = project.slug;
 
+    let className = 'bookmark ' + project.isBookmarked ? 'icon-star-solid' : 'icon-star-outline';
+
     return (
-      <Link to={`/${orgId}/${projectId}/`}>
-        <span className="bookmark icon-star-solid"></span>
-        {label}
-      </Link>
+      <span>
+        <a className={className} onClick={this.handleBookmarkClick.bind(this, project)}></a>
+        <Link to={`/${orgId}/${projectId}/`}>
+          {label}
+        </Link>
+      </span>
     );
   },
 
@@ -195,8 +216,8 @@ const ProjectSelector = React.createClass({
       }
       team.projects.forEach((project) => {
         if (project.slug == this.props.projectId) {
-          activeTeam = team;
           activeProject = project;
+          activeTeam = team;
         }
         let fullName = [team.name, project.name, team.slug, project.slug].join(' ').toLowerCase();
         if (filter && fullName.indexOf(filter) === -1) {
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 8833dc5ad7..aec80228b8 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -47,7 +47,8 @@ const TeamStore = Reflux.createStore({
 
       // TODO: make copy of project? right now just assigning reference
       // to project form project store
-      team.project = ProjectStore.getById(projectId);
+      let project = ProjectStore.getById(projectId);
+      team.project = project;
       teamsChanged.add(team.id);
     });
     this.trigger(teamsChanged);
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 0684ad2aa8..9d04a916bf 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
 import Reflux from 'reflux';
+import update from 'react-addons-update';
+
 import ApiMixin from '../mixins/apiMixin';
 import DocumentTitle from 'react-document-title';
 import MemberListStore from '../stores/memberListStore';
@@ -10,6 +12,7 @@ import ProjectHeader from '../components/projectHeader';
 import OrganizationState from '../mixins/organizationState';
 import PropTypes from '../proptypes';
 import TeamStore from '../stores/teamStore';
+import ProjectStore from '../stores/projectStore';
 import {t} from '../locale';
 
 const ERROR_TYPES = {
@@ -27,6 +30,7 @@ const ProjectDetails = React.createClass({
     ApiMixin,
     Reflux.connect(MemberListStore, 'memberList'),
     Reflux.listenTo(TeamStore, 'onTeamChange'),
+    Reflux.listenTo(ProjectStore, 'onProjectChange'),
     OrganizationState
   ],
 
@@ -60,14 +64,30 @@ const ProjectDetails = React.createClass({
     }
   },
 
+  componentWillUpdate(nextProps, nextState) {
+    if (nextState.team.id !== this.state.team.id) {
+      this.fetchData();
+    }
+  },
+
   remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
+    this.setState(this.getInitialState());
   },
 
   onTeamChange(itemIds) {
     if (!this.state.team) return;
     if (!itemIds.has(this.state.team.id)) return;
-    this.fetchData();
+
+    this.setState({
+      team: {...TeamStore.getById(this.state.team.id)}
+    });
+  },
+
+  onProjectChange(projectIds) {
+    if (!projectIds.has(this.state.project.id)) return;
+    this.setState({
+      project: {...ProjectStore.getById(this.state.project.id)}
+    });
   },
 
   identifyProject() {
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index e8e8724ce2..23cf617b45 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -54,6 +54,7 @@ const Stream = React.createClass({
     let searchId = this.props.params.searchId || null;
     return {
       groupIds: [],
+      isDefaultSearch: null,
       searchId: searchId,
       // if we have no query then we can go ahead and fetch data
       loading: (searchId || !this.hasQuery() ? true : false),
@@ -99,8 +100,10 @@ const Stream = React.createClass({
       return;
     }
 
-    if (nextProps.params.searchId !== this.state.searchId
-          || nextProps.location.search !== this.props.location.search) {
+    let searchIdChanged = this.state.isDefaultSearch ?
+      nextProps.params.searchId : nextProps.params.searchId !== this.state.searchId;
+
+    if (searchIdChanged || nextProps.location.search !== this.props.location.search) {
       // TODO(dcramer): handle 404 from popState on searchId
       this.setState(this.getQueryState(nextProps), this.fetchData);
     }
@@ -135,6 +138,7 @@ const Stream = React.createClass({
     this.api.request(`/projects/${orgId}/${projectId}/searches/`, {
       success: (data) => {
         let newState = {
+          isDefaultSearch: false,
           savedSearchLoading: false,
           savedSearchList: data,
           loading: false,
@@ -152,6 +156,7 @@ const Stream = React.createClass({
               savedSearchLoading: false,
               savedSearchList: data,
               searchId: null,
+              isDefaultSearch: true,
             }, this.transitionTo);
           }
         } else if (!this.hasQuery()) {
@@ -166,6 +171,7 @@ const Stream = React.createClass({
           if (defaultResults.length) {
             newState.searchId = defaultResults[0].id;
             newState.query = defaultResults[0].query;
+            newState.isDefaultSearch = true;
           }
         }
         this.setState(newState, needsData ? this.fetchData : null);
@@ -175,10 +181,11 @@ const Stream = React.createClass({
         logAjaxError(error);
         this.setState({
           loading: false,
+          isDefaultSearch: null,
           searchId: null,
           savedSearchList: [],
           savedSearchLoading: false,
-          query: '',
+          query: ''
         });
       }
     });
@@ -248,6 +255,7 @@ const Stream = React.createClass({
       statsPeriod: statsPeriod,
       query: hasQuery ? currentQuery.query : '',
       searchId: searchId,
+      isDefaultSearch: false
     };
 
     // state is not yet defined
@@ -268,6 +276,7 @@ const Stream = React.createClass({
         return search.isDefault;
       });
       if (defaultResult.length) {
+        newState.isDefaultSearch = true;
         newState.searchId = defaultResult[0].id;
         newState.query = defaultResult[0].query;
       } else {
