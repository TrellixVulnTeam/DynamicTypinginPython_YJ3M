commit ec8817879d5816257c7e4adeb1e3bf074e4ddcfd
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Mon Jun 4 11:08:06 2018 -0700

    fix: Query for NULL environment when passed default env (#8642)

diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 4243a3182d..458770e8d8 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -74,7 +74,10 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
         if col in snuba_map:
             keys = [snuba_map[col][k] for k in keys if k in snuba_map[col]]
         if keys:
-            conditions.append((col, 'IN', keys))
+            if len(keys) == 1 and keys[0] is None:
+                conditions.append((col, 'IS NULL', None))
+            else:
+                conditions.append((col, 'IN', keys))
 
     if 'project_id' in filter_keys:
         # If we are given a set of project ids, use those directly.
@@ -196,12 +199,13 @@ def get_snuba_map(column, ids):
     equivalent ones in snuba.
     """
     mappings = {
-        'environment': (Environment, 'name'),
-        'tags[sentry:release]': (Release, 'version'),
+        'environment': (Environment, 'name', lambda name: None if name == '' else name),
+        'tags[sentry:release]': (Release, 'version', lambda name: name),
     }
     if column in mappings and ids:
-        model, field = mappings[column]
-        return dict(model.objects.filter(id__in=ids).values_list('id', field))
+        model, field, transform = mappings[column]
+        objects = model.objects.filter(id__in=ids).values_list('id', field)
+        return {k: transform(v) for k, v in objects}
     return None
 
 
diff --git a/tests/snuba/tsdb/test_tsdb_backend.py b/tests/snuba/tsdb/test_tsdb_backend.py
index cd898280fb..a223ae737f 100644
--- a/tests/snuba/tsdb/test_tsdb_backend.py
+++ b/tests/snuba/tsdb/test_tsdb_backend.py
@@ -67,6 +67,7 @@ class SnubaTSDBTest(TestCase):
         self.proj1 = self.create_project()
         self.proj1env1 = self.create_environment(project=self.proj1, name='test')
         self.proj1env2 = self.create_environment(project=self.proj1, name='dev')
+        self.proj1defaultenv = self.create_environment(project=self.proj1, name='')
 
         self.proj1group1 = self.create_group(self.proj1)
         self.proj1group2 = self.create_group(self.proj1)
@@ -91,7 +92,7 @@ class SnubaTSDBTest(TestCase):
 
         data = json.dumps([{
             'event_id': (six.text_type(r) * 32)[:32],
-            'primary_hash': [hash1, hash2][(r // 600) % 2],
+            'primary_hash': [hash1, hash2][(r // 600) % 2],  # Switch every 10 mins
             'project_id': self.proj1.id,
             'message': 'message 1',
             'platform': 'python',
@@ -101,7 +102,8 @@ class SnubaTSDBTest(TestCase):
                 'tags': {
                     'foo': 'bar',
                     'baz': 'quux',
-                    'environment': self.proj1env1.name,
+                    # Switch every 2 hours
+                    'environment': [self.proj1env1.name, None][(r // 7200) % 2],
                     'sentry:user': 'id:user{}'.format(r // 3300),
                     'sentry:release': six.text_type(r // 3600) * 10,  # 1 per hour
                 },
@@ -184,6 +186,8 @@ class SnubaTSDBTest(TestCase):
             ]
         }
 
+    def test_range_environment_filter(self):
+        dts = [self.now + timedelta(hours=i) for i in range(4)]
         assert self.db.get_range(
             TSDBModel.project,
             [self.proj1.id],
@@ -194,8 +198,8 @@ class SnubaTSDBTest(TestCase):
             self.proj1.id: [
                 (timestamp(dts[0]), 6),
                 (timestamp(dts[1]), 6),
-                (timestamp(dts[2]), 6),
-                (timestamp(dts[3]), 6),
+                (timestamp(dts[2]), 0),
+                (timestamp(dts[3]), 0),
             ]
         }
 
@@ -215,6 +219,22 @@ class SnubaTSDBTest(TestCase):
             ]
         }
 
+        # Events submitted with no environment should match default environment
+        assert self.db.get_range(
+            TSDBModel.project,
+            [self.proj1.id],
+            dts[0], dts[-1],
+            rollup=3600,
+            environment_id=self.proj1defaultenv.id
+        ) == {
+            self.proj1.id: [
+                (timestamp(dts[0]), 0),
+                (timestamp(dts[1]), 0),
+                (timestamp(dts[2]), 6),
+                (timestamp(dts[3]), 6),
+            ]
+        }
+
     def test_range_rollups(self):
         # Daily
         daystart = self.now.replace(hour=0)  # day buckets start on day boundaries
