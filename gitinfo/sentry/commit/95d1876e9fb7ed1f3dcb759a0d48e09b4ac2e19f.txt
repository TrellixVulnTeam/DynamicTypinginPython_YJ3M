commit 95d1876e9fb7ed1f3dcb759a0d48e09b4ac2e19f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 2 18:53:21 2010 -0700

    Refactor sentry into client/server package. sentry.client can be used standalone as the remote client, or integrated with sentry itself (which is the server).

diff --git a/.gitignore b/.gitignore
index 1c25409289..94b90e1804 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,4 +3,5 @@
 /*.egg-info
 *.pyc
 *.log
-pip-log.txt
\ No newline at end of file
+pip-log.txt
+.DS_Store
\ No newline at end of file
diff --git a/README.rst b/README.rst
index 16f4ce7b2d..bc5d317430 100644
--- a/README.rst
+++ b/README.rst
@@ -54,9 +54,10 @@ Once installed, update your settings.py and add ``sentry``, ``indexer``, and ``p
 	    'django.contrib.contenttypes',
 	    'django.contrib.sessions',
 
-	    'sentry',
 	    'indexer',
 	    'paging',
+	    'sentry.client',
+	    'sentry',
 	    ...
 	)
 
@@ -103,7 +104,7 @@ You should also enable the ``SentryRouter`` to avoid things like extraneous tabl
 SENTRY_LOGGING
 ##############
 
-Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``sentry``. Use this in conjuction with ``sentry.handlers.SentryHandler`` or your own handler to tweak how logging is dealt with.
+Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``sentry``. Use this in conjuction with ``sentry.client.handlers.SentryHandler`` or your own handler to tweak how logging is dealt with.
 
 A good example use case for this, is if you want to write to something like a syslog ahead of time, and later process that into the database with another tool.
 
@@ -111,17 +112,17 @@ A good example use case for this, is if you want to write to something like a sy
 Integration with ``logging``
 ############################
 
-django-db-log supports the ability to directly tie into the ``logging`` module. To use it simply add ``SentryHandler`` to your logger::
+django-sentry supports the ability to directly tie into the ``logging`` module. To use it simply add ``SentryHandler`` to your logger::
 
 	import logging
-	from sentry.handlers import SentryHandler
+	from sentry.client.handlers import SentryHandler
 	
 	logging.getLogger().addHandler(SentryHandler())
 
 	# Add StreamHandler to sentry's default so you can catch missed exceptions
 	logging.getLogger('sentry').addHandler(logging.StreamHandler())
 
-You can also use the ``exc_info`` and ``extra=dict(url=foo)`` arguments on your ``log`` methods. This will store the appropriate information and allow django-db-log to render it based on that information:
+You can also use the ``exc_info`` and ``extra=dict(url=foo)`` arguments on your ``log`` methods. This will store the appropriate information and allow django-sentry to render it based on that information:
 
 	logging.error('There was some crazy error', exc_info=sys.exc_info(), extra={'url': request.build_absolute_uri()})
 
@@ -150,19 +151,19 @@ If you wish to access these within your own views and models, you may do so via
 
 You can also record errors outside of handler if you want::
 
-	from sentry.models import Message
+	from sentry.client import SentryClient
 	
 	try:
 		...
 	except Exception, exc:
-		Message.objects.create_from_exception(exc, [url=None, view=None])
+		SentryClient.create_from_exception(exc, [url=None, view=None])
 
 If you wish to log normal messages (useful for non-``logging`` integration)::
 
-	from sentry.models import Message
+	from sentry.client import SentryClient
 	import logging
 	
-	Message.objects.create_from_text('Message Message'[, level=logging.WARNING, url=None])
+	SentryClient.create_from_text('Message Message'[, level=logging.WARNING, url=None])
 
 Both the ``url`` and ``level`` parameters are optional. ``level`` should be one of the following:
 
@@ -180,6 +181,6 @@ the error.
 Notes
 =====
 
-* django-db-log will automatically integrate with django-idmapper.
-* django-db-log supports South migrations.
+* sentry-client will automatically integrate with django-idmapper.
+* sentry-client supports South migrations.
 * The fact that the admin shows large quantities of results, even if there aren't, is not a bug. This is an efficiency hack on top of Django.
diff --git a/example_project/settings.py b/example_project/settings.py
index 503c2e557a..4a1d48da9d 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -97,6 +97,7 @@ INSTALLED_APPS = (
     'django.contrib.sites',
     'django.contrib.messages',
     'sentry',
+    'sentry.client',
     'paging',
     'south',
     'indexer',
diff --git a/runtests.py b/runtests.py
index 5a99dedc52..01d4d65591 100644
--- a/runtests.py
+++ b/runtests.py
@@ -8,6 +8,9 @@ from django.conf import settings
 if not settings.configured:
     settings.configure(
         DATABASE_ENGINE='sqlite3',
+        # HACK: this fixes our threaded runserver remote tests
+        # DATABASE_NAME='test_sentry',
+        # TEST_DATABASE_NAME='test_sentry',
         INSTALLED_APPS=[
             'django.contrib.auth',
             'django.contrib.admin',
@@ -17,6 +20,7 @@ if not settings.configured:
             'django.contrib.contenttypes',
 
             'sentry',
+            'sentry.client',
             'paging',
             'indexer',
 
diff --git a/sentry/client/__init__.py b/sentry/client/__init__.py
new file mode 100644
index 0000000000..aae3956108
--- /dev/null
+++ b/sentry/client/__init__.py
@@ -0,0 +1,146 @@
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
+import logging
+import socket
+import sys
+import traceback as traceback_mod
+import urllib
+import urllib2
+import warnings
+
+from django.core.cache import cache
+from django.template import TemplateSyntaxError
+from django.utils.encoding import smart_unicode
+from django.views.debug import ExceptionReporter
+
+from sentry import settings
+from sentry.helpers import construct_checksum, varmap, transform
+
+logger = logging.getLogger('sentry')
+
+class SentryClient(object):
+    def process(self, **kwargs):
+        from sentry.helpers import get_filters
+
+        for filter_ in get_filters():
+            kwargs = filter_(None).process(kwargs) or kwargs
+
+        kwargs.setdefault('level', logging.ERROR)
+        kwargs.setdefault('server_name', socket.gethostname())
+
+        checksum = construct_checksum(**kwargs)
+
+        if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
+            cache_key = 'sentry:%s:%s' % (kwargs.get('class_name'), checksum)
+            added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
+            if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
+                return
+
+        if settings.REMOTE_URL:
+            data = {
+                'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
+                'key': settings.KEY,
+            }
+            req = urllib2.Request(settings.REMOTE_URL, urllib.urlencode(data))
+
+            try:
+                response = urllib2.urlopen(req).read()
+            except urllib2.HTTPError, e:
+                logger.exception('Unable to reach Sentry log server', extra={'body': e.read()})
+        else:
+            from sentry.models import GroupedMessage
+            
+            return GroupedMessage.objects.from_kwargs(**kwargs)
+
+    def create_from_record(self, record, **kwargs):
+        """
+        Creates an error log for a `logging` module `record` instance.
+        """
+        for k in ('url', 'view', 'data'):
+            if k not in kwargs:
+                kwargs[k] = record.__dict__.get(k)
+        kwargs.update({
+            'logger': record.name,
+            'level': record.levelno,
+            'message': record.getMessage(),
+        })
+        if record.exc_info:
+            return self.create_from_exception(*record.exc_info[1:2], **kwargs)
+
+        return self.process(
+            traceback=record.exc_text,
+            **kwargs
+        )
+
+    def create_from_text(self, message, **kwargs):
+        """
+        Creates an error log for from ``type`` and ``message``.
+        """
+        return self.process(
+            message=message,
+            **kwargs
+        )
+
+    def create_from_exception(self, exception=None, traceback=None, **kwargs):
+        """
+        Creates an error log from an exception.
+        """
+        if not exception:
+            exc_type, exc_value, traceback = sys.exc_info()
+        elif not traceback:
+            warnings.warn('Using just the ``exception`` argument is deprecated, send ``traceback`` in addition.', DeprecationWarning)
+            exc_type, exc_value, traceback = sys.exc_info()
+        else:
+            exc_type = exception.__class__
+            exc_value = exception
+
+        def to_unicode(f):
+            if isinstance(f, dict):
+                nf = dict()
+                for k, v in f.iteritems():
+                    nf[str(k)] = to_unicode(v)
+                f = nf
+            elif isinstance(f, (list, tuple)):
+                f = [to_unicode(f) for f in f]
+            else:
+                try:
+                    f = smart_unicode(f)
+                except (UnicodeEncodeError, UnicodeDecodeError):
+                    f = '(Error decoding value)'
+            return f
+
+        def shorten(var):
+            if not isinstance(var, basestring):
+                var = to_unicode(var)
+            if len(var) > 500:
+                var = var[:500] + '...'
+            return var
+
+        reporter = ExceptionReporter(None, exc_type, exc_value, traceback)
+        frames = varmap(shorten, reporter.get_traceback_frames())
+
+        data = kwargs.pop('data', {}) or {}
+        data['__sentry__'] = {
+            'exc': map(to_unicode, [exc_type.__class__.__module__, exc_value.args, frames]),
+        }
+
+        if isinstance(exc_value, TemplateSyntaxError) and hasattr(exc_value, 'source'):
+            origin, (start, end) = exc_value.source
+            data['__sentry__'].update({
+                'template': (origin.reload(), start, end, origin.name),
+            })
+        
+        tb_message = '\n'.join(traceback_mod.format_exception(exc_type, exc_value, traceback))
+
+        kwargs.setdefault('message', to_unicode(exc_value))
+
+        return self.process(
+            class_name=exc_type.__name__,
+            traceback=tb_message,
+            data=data,
+            **kwargs
+        )
+SentryClient = SentryClient()
\ No newline at end of file
diff --git a/sentry/client/handlers.py b/sentry/client/handlers.py
new file mode 100644
index 0000000000..55b58fb6d6
--- /dev/null
+++ b/sentry/client/handlers.py
@@ -0,0 +1,7 @@
+import logging
+
+class SentryHandler(logging.Handler):
+    def emit(self, record):
+        from sentry.client import SentryClient
+
+        SentryClient.create_from_record(record)
\ No newline at end of file
diff --git a/sentry/filters/__init__.py b/sentry/filters/__init__.py
index 10b0122e08..b3136d1d65 100644
--- a/sentry/filters/__init__.py
+++ b/sentry/filters/__init__.py
@@ -2,9 +2,6 @@
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
-from indexer.models import Index
-
-from sentry.models import GroupedMessage, Message
 from sentry.settings import LOG_LEVELS
 
 class Widget(object):
@@ -76,9 +73,11 @@ class SentryFilter(object):
         return '?' + query_dict.urlencode()
     
     def get_choices(self):
+        from sentry.models import GroupedMessage
         return SortedDict((l, l) for l in GroupedMessage.objects.values_list(self.column, flat=True).distinct())
     
     def get_query_set(self, queryset):
+        from indexer.models import Index
         kwargs = {self.column: self.get_value()}
         if self.column.startswith('data__'):
             return Index.objects.get_for_queryset(queryset, **kwargs)
@@ -101,6 +100,7 @@ class ServerNameFilter(SentryFilter):
     column = 'server_name'
 
     def get_choices(self):
+        from sentry.models import Message
         return SortedDict((l, l) for l in Message.objects.values_list(self.column, flat=True).distinct())
 
     def get_query_set(self, queryset):
diff --git a/sentry/handlers.py b/sentry/handlers.py
deleted file mode 100644
index 78712f4f8e..0000000000
--- a/sentry/handlers.py
+++ /dev/null
@@ -1,7 +0,0 @@
-import logging
-
-class SentryHandler(logging.Handler):
-    def emit(self, record):
-        from sentry.models import Message
-
-        Message.objects.create_from_record(record)
\ No newline at end of file
diff --git a/sentry/helpers.py b/sentry/helpers.py
index 1b54650402..cd7a172062 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -1,112 +1,7 @@
-from django.conf import settings
-from django.template import (Template, Context, TemplateDoesNotExist,
-    TemplateSyntaxError)
-from django.utils.encoding import smart_unicode
-from django.utils.hashcompat import md5_constructor
-from django.utils.html import escape
-from django.views.debug import ExceptionReporter, linebreak_iter
-
-from indexer.models import Index
-
 import logging
 
-class ImprovedExceptionReporter(ExceptionReporter):
-    def __init__(self, request, exc_type, exc_value, frames, template_info=None):
-        ExceptionReporter.__init__(self, request, exc_type, exc_value, None)
-        self.frames = frames
-        self._template = template_info
-
-    def get_traceback_frames(self):
-        return self.frames
-
-    def get_template_exception_info(self):
-        template_source, start, end, name = self._template
-        context_lines = 10
-        line = 0
-        upto = 0
-        source_lines = []
-        before = during = after = ""
-        for num, next in enumerate(linebreak_iter(template_source)):
-            if start >= upto and end <= next:
-                line = num
-                before = escape(template_source[upto:start])
-                during = escape(template_source[start:end])
-                after = escape(template_source[end:next])
-            source_lines.append( (num, escape(template_source[upto:next])) )
-            upto = next
-        total = len(source_lines)
-
-        top = max(1, line - context_lines)
-        bottom = min(total, line + 1 + context_lines)
-
-        self.template_info = {
-            'message': self.exc_value.args[0],
-            'source_lines': source_lines[top:bottom],
-            'before': before,
-            'during': during,
-            'after': after,
-            'top': top,
-            'bottom': bottom,
-            'total': total,
-            'line': line,
-            'name': name,
-        }
-
-    def get_traceback_html(self):
-        "Return HTML code for traceback."
-
-        if issubclass(self.exc_type, TemplateDoesNotExist):
-            self.template_does_not_exist = True
-        if self._template:
-            self.get_template_exception_info()
-
-        frames = self.get_traceback_frames()
-
-        unicode_hint = ''
-        if issubclass(self.exc_type, UnicodeError):
-            start = getattr(self.exc_value, 'start', None)
-            end = getattr(self.exc_value, 'end', None)
-            if start is not None and end is not None:
-                unicode_str = self.exc_value.args[1]
-                unicode_hint = smart_unicode(unicode_str[max(start-5, 0):min(end+5, len(unicode_str))], 'ascii', errors='replace')
-        t = Template(TECHNICAL_500_TEMPLATE, name='Technical 500 template')
-        c = Context({
-            'exception_type': self.exc_type.__name__,
-            'exception_value': smart_unicode(self.exc_value, errors='replace'),
-            'unicode_hint': unicode_hint,
-            'frames': frames,
-            'lastframe': frames[-1],
-            'request': self.request,
-            'template_info': self.template_info,
-            'template_does_not_exist': self.template_does_not_exist,
-        })
-        return t.render(c)
-
-def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
-    checksum = md5_constructor(str(level))
-    checksum.update(class_name or '')
-    message = traceback or message
-    if isinstance(message, unicode):
-        message = message.encode('utf-8', 'replace')
-    checksum.update(message)
-    return checksum.hexdigest()
-
-def get_installed_apps():
-    """
-    Generate a list of modules in settings.INSTALLED_APPS.
-    """
-    out = set()
-    for app in settings.INSTALLED_APPS:
-        out.add(app.split('.')[0])
-    return out
-
-def varmap(func, var):
-    if isinstance(var, dict):
-        return dict((k, varmap(func, v)) for k, v in var.iteritems())
-    elif isinstance(var, (list, tuple)):
-        return [varmap(func, f) for f in var]
-    else:
-        return func(var)
+from django.conf import settings
+from django.utils.hashcompat import md5_constructor
 
 _FILTER_CACHE = None
 def get_filters():
@@ -114,7 +9,6 @@ def get_filters():
     
     if _FILTER_CACHE is None:
         from sentry import settings
-        from sentry.models import Message
         
         filters = []
         for filter_ in settings.FILTERS:
@@ -125,233 +19,42 @@ def get_filters():
             except Exception, exc:
                 logging.exception('Unable to import %s' % (filter_,))
                 continue
-            if filter_.column.startswith('data__'):
-                Index.objects.register_model(Message, filter_.column, index_to='group')
             filters.append(filter_)
         _FILTER_CACHE = filters
     for f in _FILTER_CACHE:
         yield f
 
-UNDEFINED = object()
-
-class FakeRequest(object):
-    def build_absolute_uri(self): return self.url
-
-TECHNICAL_500_TEMPLATE = """
-<div id="summary">
-  <h1>{{ exception_type }}{% if request.path_info %} at {{ request.path_info|escape }}{% endif %}</h1>
-  <pre class="exception_value">{{ exception_value|escape }}</pre>
-  <table class="meta">
-    <tr>
-      <th>Request Method:</th>
-      <td>{{ request.META.REQUEST_METHOD }}</td>
-    </tr>
-    <tr>
-      <th>Request URL:</th>
-      <td>{{ request.build_absolute_uri|escape }}</td>
-    </tr>
-    <tr>
-      <th>Exception Type:</th>
-      <td>{{ exception_type }}</td>
-    </tr>
-    <tr>
-      <th>Exception Value:</th>
-      <td><pre>{{ exception_value|escape }}</pre></td>
-    </tr>
-    <tr>
-      <th>Exception Location:</th>
-      <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>
-    </tr>
-  </table>
-</div>
-{% if unicode_hint %}
-<div id="unicode-hint">
-    <h2>Unicode error hint</h2>
-    <p>The string that could not be encoded/decoded was: <strong>{{ unicode_hint|escape }}</strong></p>
-</div>
-{% endif %}
-{% if template_info %}
-<div id="template">
-   <h2>Template error</h2>
-   <p>In template <code>{{ template_info.name }}</code>, error at line <strong>{{ template_info.line }}</strong></p>
-   <h3>{{ template_info.message }}</h3>
-   <table class="source{% if template_info.top %} cut-top{% endif %}{% ifnotequal template_info.bottom template_info.total %} cut-bottom{% endifnotequal %}">
-   {% for source_line in template_info.source_lines %}
-   {% ifequal source_line.0 template_info.line %}
-       <tr class="error"><th>{{ source_line.0 }}</th>
-       <td>{{ template_info.before }}<span class="specific">{{ template_info.during }}</span>{{ template_info.after }}</td></tr>
-   {% else %}
-      <tr><th>{{ source_line.0 }}</th>
-      <td>{{ source_line.1 }}</td></tr>
-   {% endifequal %}
-   {% endfor %}
-   </table>
-</div>
-{% endif %}
-<div id="traceback">
-  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">Switch to copy-and-paste view</a></span></h2>
-  {% autoescape off %}
-  <div id="browserTraceback">
-    <ul class="traceback">
-      {% for frame in frames %}
-        <li class="frame">
-          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>
-
-          {% if frame.context_line %}
-            <div class="context" id="c{{ frame.id }}">
-              {% if frame.pre_context %}
-                <ol start="{{ frame.pre_context_lineno }}" class="pre-context" id="pre{{ frame.id }}">{% for line in frame.pre_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
-              {% endif %}
-              <ol start="{{ frame.lineno }}" class="context-line"><li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ frame.context_line|escape }} <span>...</span></li></ol>
-              {% if frame.post_context %}
-                <ol start='{{ frame.lineno|add:"1" }}' class="post-context" id="post{{ frame.id }}">{% for line in frame.post_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
-              {% endif %}
-            </div>
-          {% endif %}
-
-          {% if frame.vars %}
-            <div class="commands">
-                <a href="#" onclick="return varToggle(this, '{{ frame.id }}')"><span>&#x25b6;</span> Local vars</a>
-            </div>
-            <table class="vars" id="v{{ frame.id }}">
-              <thead>
-                <tr>
-                  <th>Variable</th>
-                  <th>Value</th>
-                </tr>
-              </thead>
-              <tbody>
-              {% for var in frame.vars|dictsort:"0" %}
-                <tr>
-                  <td>{{ var.0|escape }}</td>
-                  <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
-                </tr>
-              {% endfor %}
-              </tbody>
-            </table>
-          {% endif %}
-        </li>
-      {% endfor %}
-    </ul>
-  </div>
-  {% endautoescape %}
-  <div id="pastebinTraceback" class="pastebin">
-    <textarea id="traceback_area" cols="140" rows="25">
-Environment:
-
-{% if request.META %}Request Method: {{ request.META.REQUEST_METHOD }}{% endif %}
-Request URL: {{ request.build_absolute_uri|escape }}
-Python Version: {{ sys_version_info }}
-
-{% if template_does_not_exist %}Template Loader Error: (Unavailable in db-log)
-{% endif %}{% if template_info %}
-Template error:
-In template {{ template_info.name }}, error at line {{ template_info.line }}
-   {{ template_info.message }}{% for source_line in template_info.source_lines %}{% ifequal source_line.0 template_info.line %}
-   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}
-{% else %}
-   {{ source_line.0 }} : {{ source_line.1 }}
-{% endifequal %}{% endfor %}{% endif %}
-Traceback:
-{% for frame in frames %}File "{{ frame.filename|escape }}" in {{ frame.function|escape }}
-{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}
-{% endfor %}
-Exception Type: {{ exception_type|escape }} at {{ request.path_info|escape }}
-Exception Value: {{ exception_value|escape }}
-</textarea>
-  </div>
-</div>
-{% if request %}
-<div id="requestinfo">
-  <h2>Request information</h2>
-
-  <h3 id="get-info">GET</h3>
-  {% if request.GET %}
-    <table class="req">
-      <thead>
-        <tr>
-          <th>Variable</th>
-          <th>Value</th>
-        </tr>
-      </thead>
-      <tbody>
-        {% for var in request.GET.items %}
-          <tr>
-            <td>{{ var.0 }}</td>
-            <td class="code"><div>{{ var.1|pprint }}</div></td>
-          </tr>
-        {% endfor %}
-      </tbody>
-    </table>
-  {% else %}
-    <p>No GET data</p>
-  {% endif %}
+def construct_checksum(level=logging.ERROR, class_name='', traceback='', message='', **kwargs):
+    checksum = md5_constructor(str(level))
+    checksum.update(class_name or '')
+    message = traceback or message
+    if isinstance(message, unicode):
+        message = message.encode('utf-8', 'replace')
+    checksum.update(message)
+    return checksum.hexdigest()
 
-  <h3 id="post-info">POST</h3>
-  {% if request.POST %}
-    <table class="req">
-      <thead>
-        <tr>
-          <th>Variable</th>
-          <th>Value</th>
-        </tr>
-      </thead>
-      <tbody>
-        {% for var in request.POST.items %}
-          <tr>
-            <td>{{ var.0 }}</td>
-            <td class="code"><div>{{ var.1|pprint }}</div></td>
-          </tr>
-        {% endfor %}
-      </tbody>
-    </table>
-  {% else %}
-    <p>No POST data</p>
-  {% endif %}
+def varmap(func, var):
+    if isinstance(var, dict):
+        return dict((k, varmap(func, v)) for k, v in var.iteritems())
+    elif isinstance(var, (list, tuple)):
+        return [varmap(func, f) for f in var]
+    else:
+        return func(var)
 
-  <h3 id="cookie-info">COOKIES</h3>
-  {% if request.COOKIES %}
-    <table class="req">
-      <thead>
-        <tr>
-          <th>Variable</th>
-          <th>Value</th>
-        </tr>
-      </thead>
-      <tbody>
-        {% for var in request.COOKIES.items %}
-          <tr>
-            <td>{{ var.0 }}</td>
-            <td class="code"><div>{{ var.1|pprint }}</div></td>
-          </tr>
-        {% endfor %}
-      </tbody>
-    </table>
-  {% else %}
-    <p>No cookie data</p>
-  {% endif %}
+def transform(value):
+    if isinstance(value, (tuple, list)):
+        return [transform(o) for o in value]
+    elif isinstance(value, dict):
+        return dict((k, transform(v)) for k, v in value.iteritems())
+    elif not isinstance(value, (int, bool, basestring)) and value is not None:
+        return unicode(value)
+    return value
 
-  <h3 id="meta-info">META</h3>
-  {% if request.META %}
-  <table class="req">
-    <thead>
-      <tr>
-        <th>Variable</th>
-        <th>Value</th>
-      </tr>
-    </thead>
-    <tbody>
-      {% for var in request.META.items|dictsort:"0" %}
-        <tr>
-          <td>{{ var.0 }}</td>
-          <td class="code"><div>{{ var.1|pprint }}</div></td>
-        </tr>
-      {% endfor %}
-    </tbody>
-  </table>
-  {% else %}
-    <p>No META data</p>
-  {% endif %}
-</div>
-{% endif %}
-"""
\ No newline at end of file
+def get_installed_apps():
+    """
+    Generate a list of modules in settings.INSTALLED_APPS.
+    """
+    out = set()
+    for app in settings.INSTALLED_APPS:
+        out.add(app.split('.')[0])
+    return out
\ No newline at end of file
diff --git a/sentry/management/commands/cleanup_dblog.py b/sentry/management/commands/cleanup_sentry.py
similarity index 100%
rename from sentry/management/commands/cleanup_dblog.py
rename to sentry/management/commands/cleanup_sentry.py
diff --git a/sentry/manager.py b/sentry/manager.py
index 7a307899f8..5ddc4181ac 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -1,28 +1,15 @@
-import base64
-try:
-    import cPickle as pickle
-except ImportError:
-    import pickle
 import datetime
 import django
 import logging
-import socket
-import sys
-import traceback as traceback_mod
-import urllib
-import urllib2
 import warnings
 
-from django.core.cache import cache
 from django.db import models
 from django.db.models import signals
 from django.template import TemplateSyntaxError
-from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
 from sentry import settings
-from sentry.helpers import construct_checksum, varmap
-from sentry.utils import transform
+from sentry.helpers import construct_checksum, transform, varmap
 
 assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
@@ -37,37 +24,7 @@ class SentryManager(models.Manager):
             qs = qs.using(settings.DATABASE_USING)
         return qs
 
-    def process(self, **kwargs):
-        from sentry.helpers import get_filters
-        
-        for filter_ in get_filters():
-            kwargs = filter_(None).process(kwargs) or kwargs
-        
-        kwargs.setdefault('level', logging.ERROR)
-        kwargs.setdefault('server_name', socket.gethostname())
-        
-        checksum = construct_checksum(**kwargs)
-        
-        if settings.THRASHING_TIMEOUT and settings.THRASHING_LIMIT:
-            cache_key = 'sentry:%s:%s' % (kwargs.get('class_name'), checksum)
-            added = cache.add(cache_key, 1, settings.THRASHING_TIMEOUT)
-            if not added and cache.incr(cache_key) > settings.THRASHING_LIMIT:
-                return
-
-        if settings.REMOTE_URL:
-            data = {
-                'data': base64.b64encode(pickle.dumps(transform(kwargs))).encode('zlib'),
-                'key': settings.KEY,
-            }
-            req = urllib2.Request(settings.REMOTE_URL, urllib.urlencode(data))
-
-            try:
-                response = urllib2.urlopen(req).read()
-            except urllib2.HTTPError, e:
-                logger.exception('Unable to reach Sentry log server')
-        return self._create(**kwargs)
-
-    def _create(self, **kwargs):
+    def from_kwargs(self, **kwargs):
         from sentry.models import Message, GroupedMessage
         
         URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
@@ -121,95 +78,6 @@ class SentryManager(models.Manager):
                 warnings.warn(u'Unable to process log entry: %s' % (exc,))
         else:
             return instance
-    
-    def create_from_record(self, record, **kwargs):
-        """
-        Creates an error log for a `logging` module `record` instance.
-        """
-        for k in ('url', 'view', 'data'):
-            if k not in kwargs:
-                kwargs[k] = record.__dict__.get(k)
-        kwargs.update({
-            'logger': record.name,
-            'level': record.levelno,
-            'message': record.getMessage(),
-        })
-        if record.exc_info:
-            return self.create_from_exception(*record.exc_info[1:2], **kwargs)
-
-        return self.process(
-            traceback=record.exc_text,
-            **kwargs
-        )
-
-    def create_from_text(self, message, **kwargs):
-        """
-        Creates an error log for from ``type`` and ``message``.
-        """
-        return self.process(
-            message=message,
-            **kwargs
-        )
-
-    def create_from_exception(self, exception=None, traceback=None, **kwargs):
-        """
-        Creates an error log from an exception.
-        """
-        if not exception:
-            exc_type, exc_value, traceback = sys.exc_info()
-        elif not traceback:
-            warnings.warn('Using just the ``exception`` argument is deprecated, send ``traceback`` in addition.', DeprecationWarning)
-            exc_type, exc_value, traceback = sys.exc_info()
-        else:
-            exc_type = exception.__class__
-            exc_value = exception
-
-        def to_unicode(f):
-            if isinstance(f, dict):
-                nf = dict()
-                for k, v in f.iteritems():
-                    nf[str(k)] = to_unicode(v)
-                f = nf
-            elif isinstance(f, (list, tuple)):
-                f = [to_unicode(f) for f in f]
-            else:
-                try:
-                    f = smart_unicode(f)
-                except (UnicodeEncodeError, UnicodeDecodeError):
-                    f = '(Error decoding value)'
-            return f
-
-        def shorten(var):
-            if not isinstance(var, basestring):
-                var = to_unicode(var)
-            if len(var) > 500:
-                var = var[:500] + '...'
-            return var
-
-        reporter = ExceptionReporter(None, exc_type, exc_value, traceback)
-        frames = varmap(shorten, reporter.get_traceback_frames())
-
-        data = kwargs.pop('data', {}) or {}
-        data['__sentry__'] = {
-            'exc': map(to_unicode, [exc_type.__class__.__module__, exc_value.args, frames]),
-        }
-
-        if isinstance(exc_value, TemplateSyntaxError) and hasattr(exc_value, 'source'):
-            origin, (start, end) = exc_value.source
-            data['__sentry__'].update({
-                'template': (origin.reload(), start, end, origin.name),
-            })
-        
-        tb_message = '\n'.join(traceback_mod.format_exception(exc_type, exc_value, traceback))
-
-        kwargs.setdefault('message', to_unicode(exc_value))
-
-        return self.process(
-            class_name=exc_type.__name__,
-            traceback=tb_message,
-            data=data,
-            **kwargs
-        )
 
 class GroupedMessageManager(SentryManager):
     def get_by_natural_key(self, logger, view, checksum):
diff --git a/sentry/models.py b/sentry/models.py
index 0cef33ab91..825e12a5a6 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -1,3 +1,14 @@
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
+import datetime
+import logging
+import sys
+import traceback
+import warnings
+
 from django.conf import settings as dj_settings
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models, transaction
@@ -7,15 +18,9 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import settings
-from sentry.helpers import construct_checksum, get_installed_apps
+from sentry.client import SentryClient
+from sentry.helpers import construct_checksum, get_installed_apps, transform
 from sentry.manager import SentryManager, GroupedMessageManager
-from sentry.utils import GzippedDictField
-
-import datetime
-import logging
-import sys
-import traceback
-import warnings
 
 _reqs = ('paging', 'indexer')
 for r in _reqs:
@@ -37,6 +42,35 @@ STATUS_LEVELS = (
     (1, _('resolved')),
 )
 
+class GzippedDictField(models.TextField):
+    """
+    Slightly different from a JSONField in the sense that the default
+    value is a dictionary.
+    """
+    __metaclass__ = models.SubfieldBase
+ 
+    def to_python(self, value):
+        if isinstance(value, basestring) and value:
+            value = pickle.loads(base64.b64decode(value).decode('zlib'))
+        elif not value:
+            return {}
+        return value
+
+    def get_prep_value(self, value):
+        if value is None: return
+        return base64.b64encode(pickle.dumps(transform(value)).encode('zlib'))
+ 
+    def value_to_string(self, obj):
+        value = self._get_val_from_obj(obj)
+        return self.get_db_prep_value(value)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
+
 class MessageBase(Model):
     logger          = models.CharField(max_length=64, blank=True, default='root', db_index=True)
     class_name      = models.CharField(_('type'), max_length=128, blank=True, null=True, db_index=True)
@@ -87,6 +121,7 @@ class GroupedMessage(MessageBase):
         permissions = (
             ("can_view", "Can view"),
         )
+        db_table = 'sentry_groupedmessage'
 
     def __unicode__(self):
         return "(%s) %s: %s" % (self.times_seen, self.class_name, self.error())
@@ -149,7 +184,7 @@ class GroupedMessage(MessageBase):
             if settings.USE_LOGGING:
                 logging.getLogger('sentry').critical(exc_value, exc_info=sys.exc_info(), extra=extra)
             else:
-                Message.objects.create_from_exception(**extra)
+                SentryClient.create_from_exception(**extra)
         except Exception, exc:
             try:
                 logger.exception(u'Unable to process log entry: %s' % (exc,))
@@ -174,6 +209,7 @@ class Message(MessageBase):
     class Meta:
         verbose_name = _('message')
         verbose_name_plural = _('messages')
+        db_table = 'sentry_message'
 
     def __unicode__(self):
         return "%s: %s" % (self.class_name, smart_unicode(self.message))
diff --git a/sentry/reporter.py b/sentry/reporter.py
new file mode 100644
index 0000000000..0de51527a8
--- /dev/null
+++ b/sentry/reporter.py
@@ -0,0 +1,309 @@
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
+import logging
+
+from django.conf import settings
+from django.template import (Template, Context, TemplateDoesNotExist,
+    TemplateSyntaxError)
+from django.utils.encoding import smart_unicode
+from django.utils.html import escape
+from django.views.debug import ExceptionReporter, linebreak_iter
+
+from indexer.models import Index
+
+class ImprovedExceptionReporter(ExceptionReporter):
+    def __init__(self, request, exc_type, exc_value, frames, template_info=None):
+        ExceptionReporter.__init__(self, request, exc_type, exc_value, None)
+        self.frames = frames
+        self._template = template_info
+
+    def get_traceback_frames(self):
+        return self.frames
+
+    def get_template_exception_info(self):
+        template_source, start, end, name = self._template
+        context_lines = 10
+        line = 0
+        upto = 0
+        source_lines = []
+        before = during = after = ""
+        for num, next in enumerate(linebreak_iter(template_source)):
+            if start >= upto and end <= next:
+                line = num
+                before = escape(template_source[upto:start])
+                during = escape(template_source[start:end])
+                after = escape(template_source[end:next])
+            source_lines.append( (num, escape(template_source[upto:next])) )
+            upto = next
+        total = len(source_lines)
+
+        top = max(1, line - context_lines)
+        bottom = min(total, line + 1 + context_lines)
+
+        self.template_info = {
+            'message': self.exc_value.args[0],
+            'source_lines': source_lines[top:bottom],
+            'before': before,
+            'during': during,
+            'after': after,
+            'top': top,
+            'bottom': bottom,
+            'total': total,
+            'line': line,
+            'name': name,
+        }
+
+    def get_traceback_html(self):
+        "Return HTML code for traceback."
+
+        if issubclass(self.exc_type, TemplateDoesNotExist):
+            self.template_does_not_exist = True
+        if self._template:
+            self.get_template_exception_info()
+
+        frames = self.get_traceback_frames()
+
+        unicode_hint = ''
+        if issubclass(self.exc_type, UnicodeError):
+            start = getattr(self.exc_value, 'start', None)
+            end = getattr(self.exc_value, 'end', None)
+            if start is not None and end is not None:
+                unicode_str = self.exc_value.args[1]
+                unicode_hint = smart_unicode(unicode_str[max(start-5, 0):min(end+5, len(unicode_str))], 'ascii', errors='replace')
+        t = Template(TECHNICAL_500_TEMPLATE, name='Technical 500 template')
+        c = Context({
+            'exception_type': self.exc_type.__name__,
+            'exception_value': smart_unicode(self.exc_value, errors='replace'),
+            'unicode_hint': unicode_hint,
+            'frames': frames,
+            'lastframe': frames[-1],
+            'request': self.request,
+            'template_info': self.template_info,
+            'template_does_not_exist': self.template_does_not_exist,
+        })
+        return t.render(c)
+
+class FakeRequest(object):
+    def build_absolute_uri(self): return self.url
+
+TECHNICAL_500_TEMPLATE = """
+<div id="summary">
+  <h1>{{ exception_type }}{% if request.path_info %} at {{ request.path_info|escape }}{% endif %}</h1>
+  <pre class="exception_value">{{ exception_value|escape }}</pre>
+  <table class="meta">
+    <tr>
+      <th>Request Method:</th>
+      <td>{{ request.META.REQUEST_METHOD }}</td>
+    </tr>
+    <tr>
+      <th>Request URL:</th>
+      <td>{{ request.build_absolute_uri|escape }}</td>
+    </tr>
+    <tr>
+      <th>Exception Type:</th>
+      <td>{{ exception_type }}</td>
+    </tr>
+    <tr>
+      <th>Exception Value:</th>
+      <td><pre>{{ exception_value|escape }}</pre></td>
+    </tr>
+    <tr>
+      <th>Exception Location:</th>
+      <td>{{ lastframe.filename|escape }} in {{ lastframe.function|escape }}, line {{ lastframe.lineno }}</td>
+    </tr>
+  </table>
+</div>
+{% if unicode_hint %}
+<div id="unicode-hint">
+    <h2>Unicode error hint</h2>
+    <p>The string that could not be encoded/decoded was: <strong>{{ unicode_hint|escape }}</strong></p>
+</div>
+{% endif %}
+{% if template_info %}
+<div id="template">
+   <h2>Template error</h2>
+   <p>In template <code>{{ template_info.name }}</code>, error at line <strong>{{ template_info.line }}</strong></p>
+   <h3>{{ template_info.message }}</h3>
+   <table class="source{% if template_info.top %} cut-top{% endif %}{% ifnotequal template_info.bottom template_info.total %} cut-bottom{% endifnotequal %}">
+   {% for source_line in template_info.source_lines %}
+   {% ifequal source_line.0 template_info.line %}
+       <tr class="error"><th>{{ source_line.0 }}</th>
+       <td>{{ template_info.before }}<span class="specific">{{ template_info.during }}</span>{{ template_info.after }}</td></tr>
+   {% else %}
+      <tr><th>{{ source_line.0 }}</th>
+      <td>{{ source_line.1 }}</td></tr>
+   {% endifequal %}
+   {% endfor %}
+   </table>
+</div>
+{% endif %}
+<div id="traceback">
+  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">Switch to copy-and-paste view</a></span></h2>
+  {% autoescape off %}
+  <div id="browserTraceback">
+    <ul class="traceback">
+      {% for frame in frames %}
+        <li class="frame">
+          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>
+
+          {% if frame.context_line %}
+            <div class="context" id="c{{ frame.id }}">
+              {% if frame.pre_context %}
+                <ol start="{{ frame.pre_context_lineno }}" class="pre-context" id="pre{{ frame.id }}">{% for line in frame.pre_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
+              {% endif %}
+              <ol start="{{ frame.lineno }}" class="context-line"><li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ frame.context_line|escape }} <span>...</span></li></ol>
+              {% if frame.post_context %}
+                <ol start='{{ frame.lineno|add:"1" }}' class="post-context" id="post{{ frame.id }}">{% for line in frame.post_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
+              {% endif %}
+            </div>
+          {% endif %}
+
+          {% if frame.vars %}
+            <div class="commands">
+                <a href="#" onclick="return varToggle(this, '{{ frame.id }}')"><span>&#x25b6;</span> Local vars</a>
+            </div>
+            <table class="vars" id="v{{ frame.id }}">
+              <thead>
+                <tr>
+                  <th>Variable</th>
+                  <th>Value</th>
+                </tr>
+              </thead>
+              <tbody>
+              {% for var in frame.vars|dictsort:"0" %}
+                <tr>
+                  <td>{{ var.0|escape }}</td>
+                  <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
+                </tr>
+              {% endfor %}
+              </tbody>
+            </table>
+          {% endif %}
+        </li>
+      {% endfor %}
+    </ul>
+  </div>
+  {% endautoescape %}
+  <div id="pastebinTraceback" class="pastebin">
+    <textarea id="traceback_area" cols="140" rows="25">
+Environment:
+
+{% if request.META %}Request Method: {{ request.META.REQUEST_METHOD }}{% endif %}
+Request URL: {{ request.build_absolute_uri|escape }}
+Python Version: {{ sys_version_info }}
+
+{% if template_does_not_exist %}Template Loader Error: (Unavailable in db-log)
+{% endif %}{% if template_info %}
+Template error:
+In template {{ template_info.name }}, error at line {{ template_info.line }}
+   {{ template_info.message }}{% for source_line in template_info.source_lines %}{% ifequal source_line.0 template_info.line %}
+   {{ source_line.0 }} : {{ template_info.before }} {{ template_info.during }} {{ template_info.after }}
+{% else %}
+   {{ source_line.0 }} : {{ source_line.1 }}
+{% endifequal %}{% endfor %}{% endif %}
+Traceback:
+{% for frame in frames %}File "{{ frame.filename|escape }}" in {{ frame.function|escape }}
+{% if frame.context_line %}  {{ frame.lineno }}. {{ frame.context_line|escape }}{% endif %}
+{% endfor %}
+Exception Type: {{ exception_type|escape }} at {{ request.path_info|escape }}
+Exception Value: {{ exception_value|escape }}
+</textarea>
+  </div>
+</div>
+{% if request %}
+<div id="requestinfo">
+  <h2>Request information</h2>
+
+  <h3 id="get-info">GET</h3>
+  {% if request.GET %}
+    <table class="req">
+      <thead>
+        <tr>
+          <th>Variable</th>
+          <th>Value</th>
+        </tr>
+      </thead>
+      <tbody>
+        {% for var in request.GET.items %}
+          <tr>
+            <td>{{ var.0 }}</td>
+            <td class="code"><div>{{ var.1|pprint }}</div></td>
+          </tr>
+        {% endfor %}
+      </tbody>
+    </table>
+  {% else %}
+    <p>No GET data</p>
+  {% endif %}
+
+  <h3 id="post-info">POST</h3>
+  {% if request.POST %}
+    <table class="req">
+      <thead>
+        <tr>
+          <th>Variable</th>
+          <th>Value</th>
+        </tr>
+      </thead>
+      <tbody>
+        {% for var in request.POST.items %}
+          <tr>
+            <td>{{ var.0 }}</td>
+            <td class="code"><div>{{ var.1|pprint }}</div></td>
+          </tr>
+        {% endfor %}
+      </tbody>
+    </table>
+  {% else %}
+    <p>No POST data</p>
+  {% endif %}
+
+  <h3 id="cookie-info">COOKIES</h3>
+  {% if request.COOKIES %}
+    <table class="req">
+      <thead>
+        <tr>
+          <th>Variable</th>
+          <th>Value</th>
+        </tr>
+      </thead>
+      <tbody>
+        {% for var in request.COOKIES.items %}
+          <tr>
+            <td>{{ var.0 }}</td>
+            <td class="code"><div>{{ var.1|pprint }}</div></td>
+          </tr>
+        {% endfor %}
+      </tbody>
+    </table>
+  {% else %}
+    <p>No cookie data</p>
+  {% endif %}
+
+  <h3 id="meta-info">META</h3>
+  {% if request.META %}
+  <table class="req">
+    <thead>
+      <tr>
+        <th>Variable</th>
+        <th>Value</th>
+      </tr>
+    </thead>
+    <tbody>
+      {% for var in request.META.items|dictsort:"0" %}
+        <tr>
+          <td>{{ var.0 }}</td>
+          <td class="code"><div>{{ var.1|pprint }}</div></td>
+        </tr>
+      {% endfor %}
+    </tbody>
+  </table>
+  {% else %}
+    <p>No META data</p>
+  {% endif %}
+</div>
+{% endif %}
+"""
\ No newline at end of file
diff --git a/sentry/tests/models.py b/sentry/tests/models.py
index 9eafd16efa..770f97cf29 100644
--- a/sentry/tests/models.py
+++ b/sentry/tests/models.py
@@ -1,5 +1,5 @@
 from django.db import models
-from sentry.utils import GzippedDictField
+from sentry.models import GzippedDictField
 
 class TestModel(models.Model):
     data = GzippedDictField(blank=True, null=True)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index e51127a3aa..40de6359dc 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -1,5 +1,14 @@
 # -*- coding: utf-8 -*-
 
+import base64
+try:
+    import cPickle as pickle
+except ImportError:
+    import pickle
+import logging
+import sys
+import threading
+
 from django.core.handlers.wsgi import WSGIRequest, WSGIHandler
 from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
@@ -9,12 +18,11 @@ from django.test import TestCase
 from django.utils.encoding import smart_unicode
 
 from sentry import settings
+from sentry.helpers import transform
 from sentry.models import Message, GroupedMessage
-from sentry.tests.models import TestModel, DuplicateKeyModel
+from sentry.client import SentryClient
 
-import logging
-import sys
-import threading
+from models import TestModel, DuplicateKeyModel
 
 class TestServerThread(threading.Thread):
     """Thread for running a http server while tests are running."""
@@ -106,7 +114,7 @@ class SentryTestCase(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from sentry.handlers import SentryHandler
+        from sentry.client.handlers import SentryHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -214,14 +222,14 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
-            Message.objects.create_from_exception(exc)
+            SentryClient.create_from_exception(exc)
         else:
             self.fail('Unable to create `Message` entry.')
 
         try:
             Message.objects.get(id=999999989)
         except Message.DoesNotExist, exc:
-            error = Message.objects.create_from_exception()
+            error = SentryClient.create_from_exception()
             self.assertTrue(error.data.get('__sentry__', {}).get('exc'))
         else:
             self.fail('Unable to create `Message` entry.')
@@ -235,7 +243,7 @@ class SentryTestCase(TestCase):
         self.assertEquals(last.level, logging.ERROR)
         self.assertEquals(last.message, smart_unicode(exc))
         
-        Message.objects.create_from_text('This is an error', level=logging.DEBUG)
+        SentryClient.create_from_text('This is an error', level=logging.DEBUG)
         
         cur = (Message.objects.count(), GroupedMessage.objects.count())
         self.assertEquals(cur, (3, 3), 'Assumed logs failed to save. %s' % (cur,))
@@ -250,7 +258,7 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999979)
         except Message.DoesNotExist, exc:
-            Message.objects.create_from_exception(exc)
+            SentryClient.create_from_exception(exc)
         else:
             self.fail('Unable to create `Message` entry.')
             
@@ -270,7 +278,7 @@ class SentryTestCase(TestCase):
         cnt = Message.objects.count()
         value = 'רונית מגן'
 
-        error = Message.objects.create_from_text(value)
+        error = SentryClient.create_from_text(value)
         self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
@@ -296,7 +304,7 @@ class SentryTestCase(TestCase):
         cnt = Message.objects.count()
         value = 'רונית מגן'.decode('utf-8')
 
-        error = Message.objects.create_from_text(value)
+        error = SentryClient.create_from_text(value)
         self.assertEquals(Message.objects.count(), cnt+1)
         self.assertEquals(error.message, value)
 
@@ -318,7 +326,7 @@ class SentryTestCase(TestCase):
     
     def testLongURLs(self):
         # Fix: #6 solves URLs > 200 characters
-        error = Message.objects.create_from_text('hello world', url='a'*210)
+        error = SentryClient.create_from_text('hello world', url='a'*210)
         self.assertEquals(error.url, 'a'*200)
         self.assertEquals(error.data['url'], 'a'*210)
     
@@ -370,7 +378,7 @@ class SentryTestCase(TestCase):
         GroupedMessage.objects.all().delete()
         
         for i in range(0, 50):
-            Message.objects.create_from_text('hi')
+            SentryClient.create_from_text('hi')
         
         self.assertEquals(Message.objects.count(), settings.THRASHING_LIMIT)
     
@@ -418,7 +426,7 @@ class SentryTestCase(TestCase):
         GroupedMessage.objects.all().delete()
         
         for i in range(0, 50):
-            Message.objects.create_from_text('hi')
+            SentryClient.create_from_text('hi')
         
         self.assertEquals(Message.objects.count(), 50)
 
@@ -474,7 +482,7 @@ class SentryViewsTest(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from sentry.handlers import SentryHandler
+        from sentry.client.handlers import SentryHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -529,6 +537,10 @@ class RemoteSentryTest(TestCase):
     def setUp(self):
         self.server_thread = None
         settings.REMOTE_URL = 'http://localhost:8000%s' % reverse('sentry-store')
+        logger = logging.getLogger('sentry')
+        for h in logger.handlers:
+            logger.removeHandler(h)
+        logger.addHandler(logging.StreamHandler())
 
     def tearDown(self):
         self.stop_test_server()
@@ -537,34 +549,60 @@ class RemoteSentryTest(TestCase):
     def testNoKey(self):
         resp = self.client.post(reverse('sentry-store'))
         self.assertEquals(resp.status_code, 403)
+        self.assertEquals(resp.content, 'Invalid credentials')
 
     def testNoData(self):
         resp = self.client.post(reverse('sentry-store'), {
             'key': settings.KEY,
         })
         self.assertEquals(resp.status_code, 403)
+        self.assertEquals(resp.content, 'Missing data')
+
+    def testBadData(self):
+        resp = self.client.post(reverse('sentry-store'), {
+            'key': settings.KEY,
+            'data': 'hello world',
+        })
+        self.assertEquals(resp.status_code, 403)
+        self.assertEquals(resp.content, 'Bad data')
 
     def testBadData(self):
         resp = self.client.post(reverse('sentry-store'), {
             'key': settings.KEY,
-            'data': 'hell world',
+            'data': 'hello world',
         })
         self.assertEquals(resp.status_code, 403)
+        self.assertEquals(resp.content, 'Bad data')
 
-    def testProcess(self):
-        self.start_test_server()
-        GroupedMessage.objects.process(message='hello')
+    def testCorrectData(self):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40}
+        data = {
+            
+        }
+        resp = self.client.post(reverse('sentry-store'), {
+            'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
+            'key': settings.KEY,
+        })
+        self.assertEquals(resp.status_code, 200)
         instance = Message.objects.get()
         self.assertEquals(instance.message, 'hello')
-    
-    def testExternal(self):
-        self.start_test_server()
-        self.assertRaises(Exception, self.client.get, '/?test')
-        instance = Message.objects.get()
-        self.assertEquals(instance.message, 'view exception')
-        self.assertEquals(instance.url, 'http://testserver/?test')
-        
-        
+        self.assertEquals(instance.server_name, 'not_dcramer.local')
+        self.assertEquals(instance.level, 40)
+
+    # def testProcess(self):
+    #     self.start_test_server()
+    #     SentryClient.process(message='hello')
+    #     instance = Message.objects.all().order_by('-id')[0]
+    #     self.assertEquals(instance.message, 'hello')
+    #     self.stop_test_server()
+    # 
+    # def testExternal(self):
+    #     self.start_test_server()
+    #     self.assertRaises(Exception, self.client.get, '/?test')
+    #     instance = Message.objects.all().order_by('-id')[0]
+    #     self.assertEquals(instance.message, 'view exception')
+    #     self.assertEquals(instance.url, 'http://testserver/?test')
+    #     self.stop_test_server()
 class SentryFeedsTest(TestCase):
     fixtures = ['sentry/tests/fixtures/feeds.json']
     urls = 'sentry.tests.urls'
diff --git a/sentry/urls.py b/sentry/urls.py
index a61c217164..9748814e36 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -4,8 +4,8 @@ from django.conf import settings
 from django.conf.urls.defaults import *
 
 from sentry.settings import KEY
-from sentry.feeds import MessageFeed, SummaryFeed
 from sentry import views
+from sentry.feeds import MessageFeed, SummaryFeed
 
 SENTRY_ROOT = os.path.dirname(__file__) 
 
diff --git a/sentry/utils.py b/sentry/utils.py
deleted file mode 100644
index ad501a2488..0000000000
--- a/sentry/utils.py
+++ /dev/null
@@ -1,45 +0,0 @@
-from django.db import models
-
-import base64
-try:
-    import cPickle as pickle
-except ImportError:
-    import pickle
-
-def transform(value):
-    if isinstance(value, (tuple, list)):
-        return [transform(o) for o in value]
-    elif isinstance(value, dict):
-        return dict((k, transform(v)) for k, v in value.iteritems())
-    elif not isinstance(value, (int, bool, basestring)) and value is not None:
-        return unicode(value)
-    return value
-
-class GzippedDictField(models.TextField):
-    """
-    Slightly different from a JSONField in the sense that the default
-    value is a dictionary.
-    """
-    __metaclass__ = models.SubfieldBase
- 
-    def to_python(self, value):
-        if isinstance(value, basestring) and value:
-            value = pickle.loads(base64.b64decode(value).decode('zlib'))
-        elif not value:
-            return {}
-        return value
-
-    def get_prep_value(self, value):
-        if value is None: return
-        return base64.b64encode(pickle.dumps(transform(value)).encode('zlib'))
- 
-    def value_to_string(self, obj):
-        value = self._get_val_from_obj(obj)
-        return self.get_db_prep_value(value)
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.TextField"
-        args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
\ No newline at end of file
diff --git a/sentry/views.py b/sentry/views.py
index c462b81d5f..867f099303 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -5,6 +5,7 @@ except ImportError:
     import pickle
 import datetime
 from math import log
+import logging
 
 try:
     from pygooglechart import SimpleLineChart
@@ -20,12 +21,37 @@ from django.template.loader import render_to_string
 from django.utils import simplejson
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
-from django.views.decorators.csrf import csrf_protect
+from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import settings
-from sentry.helpers import FakeRequest, ImprovedExceptionReporter, get_filters
 from sentry.models import GroupedMessage, Message
 from sentry.templatetags.sentry_helpers import with_priority
+from sentry.reporter import ImprovedExceptionReporter, FakeRequest
+
+from indexer.models import Index
+
+_FILTER_CACHE = None
+def get_filters():
+    global _FILTER_CACHE
+    
+    if _FILTER_CACHE is None:
+        from sentry import settings
+        
+        filters = []
+        for filter_ in settings.FILTERS:
+            module_name, class_name = filter_.rsplit('.', 1)
+            try:
+                module = __import__(module_name, {}, {}, class_name)
+                filter_ = getattr(module, class_name)
+            except Exception, exc:
+                logging.exception('Unable to import %s' % (filter_,))
+                continue
+            if filter_.column.startswith('data__'):
+                Index.objects.register_model(Message, filter_.column, index_to='group')
+            filters.append(filter_)
+        _FILTER_CACHE = filters
+    for f in _FILTER_CACHE:
+        yield f
 
 def login_required(func):
     def wrapped(request, *args, **kwargs):
@@ -231,6 +257,7 @@ def group(request, group_id):
     
     return render_to_response('sentry/group.html', locals())
 
+@csrf_exempt
 def store(request):
     key = request.POST.get('key')
     if key != settings.KEY:
@@ -241,10 +268,10 @@ def store(request):
         return HttpResponseForbidden('Missing data')
     
     try:
-        data = base64.b64decode(pickle.loads(data.decode('zlib')))
-    except:
+        data = pickle.loads(base64.b64decode(data).decode('zlib'))
+    except Exception, e:
         return HttpResponseForbidden('Bad data')
 
-    GroupedMessage.objects._create(**data)
+    GroupedMessage.objects.from_kwargs(**data)
     
     return HttpResponse()
\ No newline at end of file
