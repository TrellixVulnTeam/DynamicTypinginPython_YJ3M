commit 1cb38b21f647f5537d8f90dfa85ef0c1deb0ddf2
Author: Ben Vinegar <ben.vinegar@gmail.com>
Date:   Mon May 1 09:51:51 2017 -0700

    Improve perf of JS tests, fix proptype warnings (#5319)

diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index dccefdd0e9..ba858b6316 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
+import {mount} from 'enzyme';
 import AssigneeSelector from 'app/components/assigneeSelector';
 
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -75,7 +75,7 @@ describe('AssigneeSelector', function() {
         expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_2, USER_1]);
       });
 
-      it('should return the same member list if the session user isn\'t present', function() {
+      it("should return the same member list if the session user isn't present", function() {
         this.sandbox.stub(ConfigStore, 'get').withArgs('user').returns({
           id: 555,
           name: 'Here Comes a New Challenger',
@@ -89,96 +89,86 @@ describe('AssigneeSelector', function() {
 
   describe('onFilterKeyDown()', function() {
     beforeEach(function() {
-      let assigneeSelector = (this.assigneeSelector = TestUtils.renderIntoDocument(
+      let assigneeSelector = (this.assigneeSelector = mount(
         <AssigneeSelector id="1337" />
       ));
 
-      this.sandbox.stub(assigneeSelector, 'assignTo');
+      this.assignTo = this.sandbox.stub(assigneeSelector.instance(), 'assignTo');
     });
 
     it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function() {
       let assigneeSelector = this.assigneeSelector;
-      assigneeSelector.state.filter = 'Jane';
+      assigneeSelector.setState({filter: 'Jane'});
 
-      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter, {
-        key: 'Enter',
-        keyCode: 13,
-        which: 13
-      });
-      expect(assigneeSelector.assignTo.calledOnce).toBeTruthy;
-      expect(assigneeSelector.assignTo.lastCall.args[0]).toHaveProperty(
-        'name',
-        'Jane Doe'
-      );
+      assigneeSelector
+        .ref('filter')
+        .simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
+
+      expect(this.assignTo.calledOnce).toBeTruthy;
+      expect(this.assignTo.lastCall.args[0]).toHaveProperty('name', 'Jane Doe');
     });
 
     it('should do nothing when the Enter key is pressed, but filter is the empty string', function() {
       let assigneeSelector = this.assigneeSelector;
-      assigneeSelector.state.filter = '';
+      assigneeSelector.setState({filter: ''});
 
-      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter, {
-        key: 'Enter',
-        keyCode: 13,
-        which: 13
-      });
-      expect(assigneeSelector.assignTo.notCalled).toBeTruthy;
+      assigneeSelector
+        .ref('filter')
+        .simulate('keyDown', {key: 'Enter', keyCode: 13, which: 13});
+
+      expect(this.assignTo.notCalled).toBeTruthy;
     });
 
     it('should do nothing if a non-Enter key is pressed', function() {
       let assigneeSelector = this.assigneeSelector;
-      assigneeSelector.state.filter = 'Jane';
+      assigneeSelector.setState({filter: 'Jane'});
 
-      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter, {
-        key: 'h',
-        keyCode: 72,
-        which: 72
-      });
-      expect(assigneeSelector.assignTo.notCalled).toBeTruthy;
+      assigneeSelector
+        .ref('filter')
+        .simulate('keyDown', {key: 'h', keyCode: 72, which: 72});
+      expect(this.assignTo.notCalled).toBeTruthy;
     });
   });
 
   describe('onFilterKeyUp()', function() {
     beforeEach(function() {
-      this.assigneeSelector = TestUtils.renderIntoDocument(
-        <AssigneeSelector id="1337" />
-      );
+      this.assigneeSelector = mount(<AssigneeSelector id="1337" />);
     });
 
     it('should close the dropdown when keyup is triggered with the Escape key', function() {
       let assigneeSelector = this.assigneeSelector;
-      this.sandbox.stub(assigneeSelector.refs.dropdown, 'close');
+      let closeStub = this.sandbox.stub(
+        assigneeSelector.instance().refs.dropdown,
+        'close'
+      );
 
-      TestUtils.Simulate.keyUp(assigneeSelector.refs.filter, {key: 'Escape'});
+      assigneeSelector.ref('filter').simulate('keyUp', {key: 'Escape'});
 
-      expect(assigneeSelector.refs.dropdown.close.calledOnce).toBeTruthy;
+      expect(closeStub.calledOnce).toBeTruthy;
     });
 
     it('should update the local filter state if any other key is pressed', function() {
       let assigneeSelector = this.assigneeSelector;
 
-      TestUtils.Simulate.keyUp(assigneeSelector.refs.filter, {target: {value: 'foo'}});
-      expect(assigneeSelector.state.filter).toEqual('foo');
+      assigneeSelector.ref('filter').simulate('keyUp', {target: {value: 'foo'}});
+      expect(assigneeSelector.state('filter')).toEqual('foo');
     });
   });
 
   describe('componentDidUpdate()', function() {
     beforeEach(function() {
-      this.assigneeSelector = TestUtils.renderIntoDocument(
-        <AssigneeSelector id="1337" />
-      );
+      this.assigneeSelector = mount(<AssigneeSelector id="1337" />);
     });
 
-    it('should destroy old assignee tooltip and create a new assignee tooltip', function(
-      done
-    ) {
-      this.sandbox.spy(this.assigneeSelector, 'attachTooltips');
-      this.sandbox.spy(this.assigneeSelector, 'removeTooltips');
+    it('should destroy old assignee tooltip and create a new assignee tooltip', function() {
+      let instance = this.assigneeSelector.instance();
+      this.sandbox.spy(instance, 'attachTooltips');
+      this.sandbox.spy(instance, 'removeTooltips');
 
-      this.assigneeSelector.setState({assignedTo: USER_1}, () => {
-        expect(this.assigneeSelector.attachTooltips.calledOnce).toBeTruthy;
-        expect(this.assigneeSelector.removeTooltips.calledOnce).toBeTruthy;
-        done();
-      });
+      this.assigneeSelector.setState({assignedTo: USER_1});
+
+      expect(instance.attachTooltips.calledOnce).toBeTruthy;
+      expect(instance.removeTooltips.calledOnce).toBeTruthy;
     });
   });
 });
diff --git a/tests/js/spec/components/contextData.spec.jsx b/tests/js/spec/components/contextData.spec.jsx
index d51ce9515f..201381b64d 100644
--- a/tests/js/spec/components/contextData.spec.jsx
+++ b/tests/js/spec/components/contextData.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import {mount} from 'enzyme';
+import {shallow} from 'enzyme';
 
 import ContextData from 'app/components/contextData';
 
@@ -8,7 +8,7 @@ describe('ContextData', function() {
     describe('strings', function() {
       it('should render urls w/ an additional <a> link', function() {
         const URL = 'https://example.org/foo/bar/';
-        let wrapper = mount(<ContextData data={URL} />);
+        let wrapper = shallow(<ContextData data={URL} />);
 
         expect(wrapper.find('span').at(0).text()).toEqual(URL);
         expect(wrapper.find('a').at(0).prop('href')).toEqual(URL);
diff --git a/tests/js/spec/components/letterAvatar.spec.jsx b/tests/js/spec/components/letterAvatar.spec.jsx
index 70c2df2d8c..55f8f43405 100644
--- a/tests/js/spec/components/letterAvatar.spec.jsx
+++ b/tests/js/spec/components/letterAvatar.spec.jsx
@@ -16,7 +16,7 @@ describe('LetterAvatar', function() {
     displayName: 'foo@example.com'
   };
   const USER_4 = {
-    identifier: 2,
+    identifier: '2',
     displayName: ''
   };
   const USER_5 = {
diff --git a/tests/js/spec/components/barChart.spec.jsx b/tests/js/spec/components/stackedBarChart.spec.jsx
similarity index 74%
rename from tests/js/spec/components/barChart.spec.jsx
rename to tests/js/spec/components/stackedBarChart.spec.jsx
index 67a5baeb9c..d1506107b4 100644
--- a/tests/js/spec/components/barChart.spec.jsx
+++ b/tests/js/spec/components/stackedBarChart.spec.jsx
@@ -1,18 +1,18 @@
 import React from 'react';
-import {mount} from 'enzyme';
+import {shallow} from 'enzyme';
 
-import BarChart from 'app/components/barChart';
+import StackedBarChart from 'app/components/stackedBarChart';
 
-describe('BarChart', function() {
+describe('StackedBarChart', function() {
   describe('render()', function() {
     it('renders with points data', function() {
       let points = [
-        {x: 1439766000, y: 10},
-        {x: 1439769600, y: 20},
-        {x: 1439773200, y: 30}
+        {x: 1439766000, y: [10]},
+        {x: 1439769600, y: [20]},
+        {x: 1439773200, y: [30]}
       ];
 
-      let wrapper = mount(<BarChart points={points} />);
+      let wrapper = shallow(<StackedBarChart points={points} />);
       let columns = wrapper.find('.chart-column');
 
       expect(columns).toHaveProperty('length', 3);
@@ -23,16 +23,16 @@ describe('BarChart', function() {
 
     it('renders with points and markers', function() {
       let points = [
-        {x: 1439769600, y: 10},
-        {x: 1439773200, y: 20},
-        {x: 1439776800, y: 30}
+        {x: 1439769600, y: [10]},
+        {x: 1439773200, y: [20]},
+        {x: 1439776800, y: [30]}
       ];
       let markers = [
         {x: 1439769600, className: 'first-seen', label: 'first seen'}, // matches first point
         {x: 1439776800, className: 'last-seen', label: 'last seen'} // matches last point
       ];
 
-      let wrapper = mount(<BarChart points={points} markers={markers} />);
+      let wrapper = shallow(<StackedBarChart points={points} markers={markers} />);
       let columns = wrapper.find('a');
 
       expect(columns).toHaveProperty('length', 5);
@@ -46,13 +46,13 @@ describe('BarChart', function() {
     });
 
     it('renders with points and markers, when first and last seen are same data point', function() {
-      let points = [{x: 1439776800, y: 30}];
+      let points = [{x: 1439776800, y: [30]}];
       let markers = [
         {x: 1439776800, className: 'first-seen', label: 'first seen'},
         {x: 1439776800, className: 'last-seen', label: 'last seen'}
       ];
 
-      let wrapper = mount(<BarChart points={points} markers={markers} />);
+      let wrapper = shallow(<StackedBarChart points={points} markers={markers} />);
       let columns = wrapper.find('a');
 
       expect(columns).toHaveProperty('length', 3);
diff --git a/tests/js/spec/components/userLetterAvatar.spec.jsx b/tests/js/spec/components/userLetterAvatar.spec.jsx
index 7fc0c5423e..3205f83c42 100644
--- a/tests/js/spec/components/userLetterAvatar.spec.jsx
+++ b/tests/js/spec/components/userLetterAvatar.spec.jsx
@@ -4,20 +4,20 @@ import UserLetterAvatar from 'app/components/userLetterAvatar';
 
 describe('LetterAvatar', function() {
   const USER_1 = {
-    id: 1,
+    id: '1',
     name: 'Jane Doe',
     email: 'janedoe@example.com'
   };
   const USER_2 = {
-    id: 2,
+    id: '2',
     email: 'johnsmith@example.com'
   };
   const USER_3 = {
-    id: 2,
+    id: '2',
     username: 'foo@example.com'
   };
   const USER_4 = {
-    id: 2
+    id: '2'
   };
   const USER_5 = {
     ip_address: '127.0.0.1'
@@ -72,7 +72,7 @@ describe('LetterAvatar', function() {
       this.letterAvatar = TestUtils.renderIntoDocument(
         <UserLetterAvatar user={USER_4} />
       );
-      expect(this.letterAvatar.getIdentifier()).toEqual(2);
+      expect(this.letterAvatar.getIdentifier()).toEqual('2');
     });
 
     it('should use ip address', function() {
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index e2eb71497e..24c52f543a 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
+import {shallow} from 'enzyme';
 
 import {browserHistory} from 'react-router';
 import stubReactComponents from '../../helpers/stubReactComponent';
@@ -22,9 +22,7 @@ describe('ProjectReleases', function() {
       params: {orgId: '123', projectId: '456'},
       location: {query: {per_page: 0, query: 'derp'}}
     };
-    this.projectReleases = TestUtils.renderIntoDocument(
-      <ProjectReleases {...this.props} />
-    );
+    this.projectReleases = shallow(<ProjectReleases {...this.props} />);
   });
 
   afterEach(function() {
@@ -41,7 +39,7 @@ describe('ProjectReleases', function() {
 
   describe('getInitialState()', function() {
     it('should take query state from query string', function() {
-      expect(this.projectReleases.state.query).toEqual('derp');
+      expect(this.projectReleases.state('query')).toEqual('derp');
     });
   });
 
@@ -49,7 +47,7 @@ describe('ProjectReleases', function() {
     it('should change query string with new search parameter', function() {
       let projectReleases = this.projectReleases;
 
-      projectReleases.onSearch('searchquery');
+      projectReleases.instance().onSearch('searchquery');
 
       expect(browserHistory.pushState.calledOnce).toBeTruthy;
       expect(browserHistory.pushState.args[0]).toEqual([
@@ -64,7 +62,7 @@ describe('ProjectReleases', function() {
 
   describe('componentWillReceiveProps()', function() {
     it('should update state with latest query pulled from query string', function() {
-      let projectReleases = this.projectReleases;
+      let projectReleases = this.projectReleases.instance();
 
       let setState = this.sandbox.stub(projectReleases, 'setState');
 
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 265d5f3ed0..0b55647454 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -89,7 +89,7 @@ describe('Stream', function() {
         expect(CursorPoller.prototype.setEndpoint.notCalled).toBeTruthy();
       });
 
-      it('should not enable the poller if the \'previous\' link has results', function() {
+      it("should not enable the poller if the 'previous' link has results", function() {
         let stream = this.wrapper.instance();
         stream.state.pageLinks =
           '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
@@ -149,7 +149,7 @@ describe('Stream', function() {
     it('displays an error when component has errored', function() {
       let wrapper = this.wrapper;
       wrapper.setState({
-        error: true,
+        error: 'Something bad happened',
         loading: false,
         dataLoading: false
       });
