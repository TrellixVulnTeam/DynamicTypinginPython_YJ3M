commit 98a78dd07eea5c60b6c31884397e9b3f0bf2b9d9
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 28 10:34:49 2014 -0700

    Remove sentry.filters

diff --git a/src/sentry/filters/__init__.py b/src/sentry/filters/__init__.py
deleted file mode 100644
index d545653e21..0000000000
--- a/src/sentry/filters/__init__.py
+++ /dev/null
@@ -1,13 +0,0 @@
-"""
-sentry.filters
-~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from sentry.filters.base import *  # NOQA
-from sentry.filters.widgets import *  # NOQA
-
-# Backwards compatibility
-SentryFilter = Filter
diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
deleted file mode 100644
index 98f187c5af..0000000000
--- a/src/sentry/filters/base.py
+++ /dev/null
@@ -1,84 +0,0 @@
-"""
-sentry.filters.base
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-# Widget api is pretty ugly
-from __future__ import absolute_import
-
-__all__ = ('Filter',)
-
-import hashlib
-
-from django.utils.datastructures import SortedDict
-
-from sentry.models import TagValue
-from sentry.utils.cache import cache
-from .widgets import ChoiceWidget
-
-
-class Filter(object):
-    label = ''
-    column = ''
-    widget = ChoiceWidget
-    # This must be a string
-    default = ''
-    show_label = True
-    max_choices = 50
-
-    def __init__(self, request, project, label=None, column=None):
-        self.request = request
-        self.project = project
-        if label is not None:
-            self.label = label
-        if column is not None:
-            self.column = column
-
-    def is_set(self):
-        return bool(self.get_value())
-
-    def get_label(self):
-        return self.label
-
-    def get_column(self):
-        return self.column
-
-    def get_value(self):
-        return self.request.GET.get(self.get_query_param(), self.default) or ''
-
-    def get_query_param(self):
-        return getattr(self, 'query_param', self.get_column())
-
-    def get_widget(self):
-        return self.widget(self, self.request)
-
-    def get_query_string(self):
-        column = self.get_column()
-        query_dict = self.request.GET.copy()
-        if 'p' in query_dict:
-            del query_dict['p']
-        if column in query_dict:
-            del query_dict[column]
-        return '?' + query_dict.urlencode()
-
-    def get_choices(self):
-        key = 'filters:%s:%s' % (self.project.id, hashlib.md5(self.column.encode('utf8')).hexdigest())
-        result = cache.get(key)
-        if result is None:
-            result = list(TagValue.objects.filter(
-                project=self.project,
-                key=self.column,
-            ).values_list('value', flat=True).order_by('value')[:self.max_choices])
-            cache.set(key, result, 60)
-        return SortedDict((l, l) for l in result)
-
-    def process(self, data):
-        """``self.request`` is not available within this method"""
-        return data
-
-    def render(self):
-        widget = self.get_widget()
-        return widget.render(self.get_value())
diff --git a/src/sentry/filters/widgets.py b/src/sentry/filters/widgets.py
deleted file mode 100644
index 61245e81d7..0000000000
--- a/src/sentry/filters/widgets.py
+++ /dev/null
@@ -1,73 +0,0 @@
-"""
-sentry.filters.base
-~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-__all__ = ('Widget', 'TextWidget', 'ChoiceWidget')
-
-from django.utils.safestring import mark_safe
-from django.utils.html import escape
-
-import six
-
-
-class Widget(object):
-    def __init__(self, filter, request):
-        self.filter = filter
-        self.request = request
-
-    def get_query_string(self):
-        return self.filter.get_query_string()
-
-
-class TextWidget(Widget):
-    def render(self, value, placeholder='', **kwargs):
-        return mark_safe(u'''
-            <div class="filter-text">
-                <input type="text" name="%(name)s" value="%(value)s" data-allowClear="true" data-placeholder="Search for a %(label)s"/>
-            </div>''' % dict(
-            name=self.filter.get_query_param(),
-            value=escape(value),
-            label=self.filter.label.lower(),
-            placeholder=escape(placeholder or 'enter %s' % self.filter.label.lower()),
-        ))
-
-
-class ChoiceWidget(TextWidget):
-    allow_any = True
-
-    def render(self, value, **kwargs):
-        choices = self.filter.get_choices()
-        if len(choices) == self.filter.max_choices:
-            return super(ChoiceWidget, self).render(value, placeholder='e.g. %s' % choices.keys()[0], **kwargs)
-
-        query_string = self.get_query_string()
-        column = self.filter.get_query_param()
-        choices = choices.items()
-
-        output = [u'<select name="%(column)s" class="filter-list" rel="%(column)s" data-allowClear="true" data-placeholder="Select a %(label)s">' % dict(
-            column=column,
-            label=self.filter.label.lower(),
-        )]
-        if self.allow_any:
-            output.append(u'<option></option>' % dict(
-                active=not value and ' selected="selected"' or '',
-                query_string=query_string,
-                label=self.filter.label,
-                column=column,
-            ))
-        for key, val in choices:
-            key = six.text_type(key)
-            output.append(u'<option%(active)s value="%(key)s">%(value)s</option>' % dict(
-                active=value == key and ' selected="selected"' or '',
-                column=column,
-                key=key,
-                value=val,
-                query_string=query_string,
-            ))
-        output.append(u'</select>')
-        return mark_safe(u'\n'.join(output))
