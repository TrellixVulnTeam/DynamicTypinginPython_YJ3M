commit 3febec83e884c53b97f8e4cfab81ca1cd5ed4302
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 14 11:01:28 2015 -0800

    Add setting to scrub IP addresses

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 303d91dafd..25214d2bfc 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -391,6 +391,15 @@ def validate_data(project, data, client=None):
     return data
 
 
+def ensure_does_not_have_ip(data):
+    if 'sentry.interfaces.Http' in data:
+        if 'env' in data['sentry.interfaces.Http']:
+            data['sentry.interfaces.Http']['env'].pop('REMOTE_ADDR', None)
+
+    if 'sentry.interfaces.User' in data:
+        data['sentry.interfaces.User'].pop('ip_address', None)
+
+
 def ensure_has_ip(data, ip_address):
     if data.get('sentry.interfaces.Http', {}).get('env', {}).get('REMOTE_ADDR'):
         return
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 227ffdeac8..3546e4a97c 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -32,6 +32,7 @@
                 <div><legend>{% trans "Event Settings" %}</legend></div>
                 {{ form.resolve_age|as_crispy_field }}
                 {{ form.scrub_data|as_crispy_field }}
+                {{ form.scrub_ip_address|as_crispy_field }}
                 {% if form.public %}
                     {{ form.public|as_crispy_field }}
                 {% endif %}
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 06426e17a7..047aa29e6d 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -38,7 +38,7 @@ from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
     APIForbidden, APIRateLimited, extract_auth_vars, ensure_has_ip,
-    decompress_deflate, decompress_gzip)
+    decompress_deflate, decompress_gzip, ensure_does_not_have_ip)
 from sentry.exceptions import InvalidData, InvalidOrigin, InvalidRequest
 from sentry.event_manager import EventManager
 from sentry.models import (
@@ -357,8 +357,10 @@ class StoreView(APIView):
         manager = EventManager(data, version=auth.version)
         data = manager.normalize()
 
+        scrub_ip_address = project.get_option('sentry:scrub_ip_address', False)
+
         # insert IP address if not available
-        if auth.is_public:
+        if auth.is_public and not scrub_ip_address:
             ensure_has_ip(data, request.META['REMOTE_ADDR'])
 
         event_id = data['event_id']
@@ -376,6 +378,10 @@ class StoreView(APIView):
             inst = SensitiveDataFilter()
             inst.apply(data)
 
+        if scrub_ip_address:
+            # We filter data immediately before it ever gets into the queue
+            ensure_does_not_have_ip(data)
+
         # mutates data (strips a lot of context if not queued)
         insert_data_to_database(data)
 
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index ea6dd681e1..16bb9e6c18 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -79,6 +79,11 @@ class EditProjectForm(forms.ModelForm):
         help_text=_('Apply server-side data scrubbing to prevent things like passwords and credit cards from being stored.'),
         required=False
     )
+    scrub_ip_address = forms.BooleanField(
+        label=_('Don\'t store IP Addresses'),
+        help_text=_('Prevent IP addresses from being stored for new events.'),
+        required=False
+    )
 
     class Meta:
         fields = ('name', 'platform', 'public', 'team', 'slug')
@@ -174,6 +179,7 @@ class ProjectSettingsView(ProjectView):
             'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
             'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
             'scrub_data': bool(project.get_option('sentry:scrub_data', True)),
+            'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
         })
 
     def handle(self, request, organization, team, project):
@@ -181,7 +187,7 @@ class ProjectSettingsView(ProjectView):
 
         if form.is_valid():
             project = form.save()
-            for opt in ('origins', 'resolve_age', 'scrub_data'):
+            for opt in ('origins', 'resolve_age', 'scrub_data', 'scrub_ip_address'):
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     project.delete_option('sentry:%s' % (opt,))
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 6f5aa2cdbf..913e16dcab 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -67,6 +67,26 @@ class StoreViewTest(TestCase):
         self.assertIn('Access-Control-Allow-Origin', resp)
         self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
 
+    @mock.patch('sentry.web.api.insert_data_to_database')
+    def test_scrubs_ip_address(self, mock_insert_data_to_database):
+        self.project.update_option('sentry:scrub_ip_address', True)
+        body = {
+            "message": "foo bar",
+            "sentry.interfaces.User": {"ip_address": "127.0.0.1"},
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {"REMOTE_ADDR": "127.0.0.1"}
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 200
+
+        call_data = mock_insert_data_to_database.call_args[0][0]
+        print call_data
+        assert not call_data['sentry.interfaces.User'].get('ip_address')
+        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')
+
 
 class CrossDomainXmlTest(TestCase):
     @fixture
