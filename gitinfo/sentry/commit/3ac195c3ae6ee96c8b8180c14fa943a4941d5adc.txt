commit 3ac195c3ae6ee96c8b8180c14fa943a4941d5adc
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 20 11:47:42 2014 +0200

    Convert edit team member view

diff --git a/src/sentry/web/forms/teams.py b/src/sentry/web/forms/teams.py
index 7333646c1d..99c88bdd93 100644
--- a/src/sentry/web/forms/teams.py
+++ b/src/sentry/web/forms/teams.py
@@ -11,23 +11,10 @@ from django import forms
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import MEMBER_TYPES
-from sentry.models import TeamMember, AccessGroup, Project
+from sentry.models import AccessGroup, Project
 from sentry.web.forms.fields import UserField
 
 
-class BaseTeamMemberForm(forms.ModelForm):
-    class Meta:
-        fields = ('type',)
-        model = TeamMember
-
-    def __init__(self, team, *args, **kwargs):
-        self.team = team
-        super(BaseTeamMemberForm, self).__init__(*args, **kwargs)
-
-
-EditTeamMemberForm = BaseTeamMemberForm
-
-
 class AcceptInviteForm(forms.Form):
     pass
 
diff --git a/src/sentry/web/frontend/team_member_settings.py b/src/sentry/web/frontend/team_member_settings.py
new file mode 100644
index 0000000000..f388398b4e
--- /dev/null
+++ b/src/sentry/web/frontend/team_member_settings.py
@@ -0,0 +1,94 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import TeamMemberType, TeamMember
+from sentry.permissions import can_edit_team_member
+from sentry.web.forms.fields import UserField
+from sentry.web.frontend.base import TeamView
+
+
+class EditTeamMemberForm(forms.ModelForm):
+    user = UserField()
+
+    class Meta:
+        fields = ('type', 'user')
+        model = TeamMember
+
+    def __init__(self, team, *args, **kwargs):
+        self.team = team
+        super(EditTeamMemberForm, self).__init__(*args, **kwargs)
+
+    def clean_user(self):
+        value = self.cleaned_data['user']
+        if not value:
+            return None
+
+        if self.team.member_set.filter(user=value).exists():
+            raise forms.ValidationError(_('User is already a member of this team'))
+
+        return value
+
+
+class TeamMemberSettingsView(TeamView):
+    required_access = TeamMemberType.ADMIN
+
+    def get_form(self, request, team):
+        initial = {
+            'type': TeamMemberType.MEMBER,
+        }
+
+        return EditTeamMemberForm(team, request.POST or None, initial=initial)
+
+    def get(self, request, organization, team, member_id):
+        try:
+            member = team.member_set.get(pk=member_id)
+        except TeamMember.DoesNotExist:
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+        if member.user == team.owner:
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+        if not can_edit_team_member(request.user, member):
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+        form = self.get_form(request, team)
+
+        context = {
+            'member': member,
+            'form': form,
+        }
+
+        return self.respond('sentry/teams/members/edit.html', context)
+
+    def post(self, request, organization, team, member_id):
+        try:
+            member = team.member_set.get(pk=member_id)
+        except TeamMember.DoesNotExist:
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+        if member.user == team.owner:
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+        if not can_edit_team_member(request.user, member):
+            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+        form = self.get_form(request, team)
+        if form.is_valid():
+            member = form.save()
+
+            messages.add_message(request, messages.SUCCESS,
+                _('Changes to your team member were saved.'))
+
+            return HttpResponseRedirect(request.path)
+
+        context = {
+            'member': member,
+            'form': form,
+        }
+
+        return self.respond('sentry/teams/members/edit.html', context)
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 81836fb22d..b0f59f8462 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -16,15 +16,13 @@ from django.utils.translation import ugettext as _
 
 from sentry.constants import MEMBER_OWNER
 from sentry.models import PendingTeamMember, TeamMember, AccessGroup, User
-from sentry.permissions import (
-    can_edit_team_member, can_remove_team_member,
-)
+from sentry.permissions import can_remove_team_member
 from sentry.plugins import plugins
 from sentry.web.decorators import has_access
 from sentry.web.forms.teams import (
-    EditTeamMemberForm, AcceptInviteForm,
-    EditAccessGroupForm, NewAccessGroupMemberForm, NewAccessGroupProjectForm,
-    RemoveAccessGroupForm)
+    AcceptInviteForm, EditAccessGroupForm, NewAccessGroupMemberForm,
+    NewAccessGroupProjectForm, RemoveAccessGroupForm
+)
 from sentry.web.helpers import render_to_response
 
 
@@ -93,40 +91,6 @@ def accept_invite(request, member_id, token):
     return render_to_response('sentry/teams/members/accept_invite.html', context, request)
 
 
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def edit_team_member(request, team, member_id):
-    try:
-        member = team.member_set.get(pk=member_id)
-    except TeamMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    if member.user == team.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    if not can_edit_team_member(request.user, member):
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    form = EditTeamMemberForm(team, request.POST or None, instance=member)
-    if form.is_valid():
-        member = form.save(commit=True)
-
-        messages.add_message(request, messages.SUCCESS,
-            _('Changes to your team member were saved.'))
-
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update({
-        'page': 'members',
-        'member': member,
-        'form': form,
-        'SUBSECTION': 'members',
-    })
-
-    return render_with_team_context(team, 'sentry/teams/members/edit.html', context, request)
-
-
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def remove_team_member(request, team, member_id):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 047dc01d87..b4c5a2af03 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -46,6 +46,7 @@ from sentry.web.frontend.create_team_member import CreateTeamMemberView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.team_access_groups import TeamAccessGroupsView
 from sentry.web.frontend.team_members import TeamMembersView
+from sentry.web.frontend.team_member_settings import TeamMemberSettingsView
 from sentry.web.frontend.team_projects import TeamProjectsView
 from sentry.web.frontend.team_settings import TeamSettingsView
 
@@ -152,7 +153,7 @@ urlpatterns += patterns('',
         name='sentry-manage-team-members'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/new/$', CreateTeamMemberView.as_view(),
         name='sentry-new-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/edit/$', teams.edit_team_member,
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/edit/$', TeamMemberSettingsView.as_view(),
         name='sentry-edit-team-member'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/remove/$', teams.remove_team_member,
         name='sentry-remove-team-member'),
