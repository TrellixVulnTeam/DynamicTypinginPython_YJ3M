commit e36b0daa6ef28b72c581101c4070db84f407f1f5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 26 16:35:47 2012 -0800

    Tests for various project key views

diff --git a/src/sentry/web/frontend/docs.py b/src/sentry/web/frontend/docs.py
index be02aaee30..eb28225537 100644
--- a/src/sentry/web/frontend/docs.py
+++ b/src/sentry/web/frontend/docs.py
@@ -8,7 +8,7 @@ sentry.web.frontend.projects
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 
-from sentry.models import ProjectKey, MEMBER_SYSTEM 
+from sentry.models import ProjectKey, MEMBER_SYSTEM, MEMBER_OWNER
 from sentry.web.decorators import has_access
 from sentry.web.helpers import render_to_response, render_to_string
 
@@ -28,11 +28,22 @@ PLATFORM_LIST = (
 )
 
 
+def can_see_global_keys(user, project):
+    if user.is_superuser:
+        return True
+    if not project.team:
+        return False
+    if not project.team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+    return True
+
+
 def get_key_context(user, project):
     try:
         key = ProjectKey.objects.get(user=user, project=project)
     except ProjectKey.DoesNotExist:
-        key_list = list(ProjectKey.objects.filter(project=project, user__isnull=True)[0:2])
+        if can_see_global_keys(user, project):
+            key_list = list(ProjectKey.objects.filter(project=project, user__isnull=True)[0:2])
         if len(key_list) == 1:
             key = key_list[0]
         else:
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index f31b819b3e..3985ea4200 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -12,7 +12,7 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 from django.views.decorators.http import require_http_methods
 
-from sentry.constants import MEMBER_OWNER, MEMBER_USER
+from sentry.constants import MEMBER_OWNER
 from sentry.models import TeamMember, ProjectKey, Team, FilterKey
 from sentry.permissions import can_create_projects, can_remove_project, can_create_teams, \
   can_add_team_member, can_add_project_key, can_remove_project_key
@@ -252,9 +252,9 @@ def new_project_key(request, project):
     return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.slug]))
 
 
+@require_http_methods(['POST'])
 @has_access(MEMBER_OWNER)
 @csrf_protect
-@require_http_methods(['POST'])
 def remove_project_key(request, project, key_id):
     try:
         key = ProjectKey.objects.get(id=key_id)
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 7b95779f15..e8ad424e31 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -2,13 +2,14 @@
 
 from __future__ import absolute_import
 
+import mock
 import logging
 
 from django.core.urlresolvers import reverse
 
 from sentry.constants import MEMBER_OWNER
-from sentry.models import Project
-from sentry.testutils import TestCase, fixture
+from sentry.models import Project, ProjectKey
+from sentry.testutils import TestCase, fixture, before
 
 logger = logging.getLogger(__name__)
 
@@ -77,3 +78,71 @@ class ManageProjectTeamTest(TestCase):
         self.assertIn('pending_member_list', resp.context)
         self.assertIn('member_list', resp.context)
         self.assertIn('can_add_member', resp.context)
+
+
+class ManageProjectKeysTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project-keys', args=[self.project.id])
+
+    def test_unauthenticated_does_redirect(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 302
+
+    def test_renders_with_required_context(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/projects/keys.html')
+        assert 'key_list' in resp.context
+        assert 'can_add_key' in resp.context
+
+
+class NewProjectKeyTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-new-project-key', args=[self.project.id])
+
+    @mock.patch('sentry.models.ProjectKey.objects.create')
+    def test_unauthenticated_does_redirect(self, create):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 302
+        assert not create.called
+
+    @mock.patch('sentry.models.ProjectKey.objects.create')
+    def test_generates_new_key_and_redirects(self, create):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 302
+        create.assert_called_once_with(
+            project=self.project, user_added=self.user
+        )
+
+
+class RemoveProjectKeyTest(TestCase):
+    @before
+    def create_key(self):
+        self.key = ProjectKey.objects.create(project=self.project)
+
+    @fixture
+    def path(self):
+        return reverse('sentry-remove-project-key', args=[self.project.id, self.key.id])
+
+    def test_does_not_respond_to_get(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 405
+
+    @mock.patch('sentry.models.ProjectKey.delete')
+    def test_unauthenticated_does_redirect(self, delete):
+        resp = self.client.post(self.path)
+        assert resp.status_code == 302
+        assert not delete.called
+
+    def test_removes_key_and_redirects(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path)
+        assert resp.status_code == 302
+        assert not ProjectKey.objects.filter(id=self.key.id).exists()
