commit 3f96f156852c7d01f116ffc11826393b0cd96cf7
Author: Mark Story <mark@mark-story.com>
Date:   Wed Jan 30 13:47:33 2019 -0500

    ref(issues) Consolidate ProcessingIssue code (#11771)
    
    Join the 2 different processing issues implementations into a shared
    component.

diff --git a/src/sentry/static/sentry/app/views/stream/processingIssueHint.jsx b/src/sentry/static/sentry/app/components/stream/processingIssueHint.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/stream/processingIssueHint.jsx
rename to src/sentry/static/sentry/app/components/stream/processingIssueHint.jsx
diff --git a/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx b/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
new file mode 100644
index 0000000000..28b8d07f5d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/stream/processingIssueList.jsx
@@ -0,0 +1,87 @@
+import React from 'react';
+import {isEqual} from 'lodash';
+import PropTypes from 'prop-types';
+
+import {Client} from 'app/api';
+import {logAjaxError} from 'app/utils/logging';
+import {fetchProcessingIssues} from 'app/actionCreators/processingIssues';
+import ProcessingIssueHint from 'app/components/stream/processingIssueHint';
+import SentryTypes from 'app/sentryTypes';
+
+class ProcessingIssueList extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    projectIds: PropTypes.array,
+    showProject: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    showProject: false,
+  };
+
+  constructor(props) {
+    super(props);
+    this.api = new Client();
+    this.state = {
+      loading: true,
+      issues: [],
+    };
+  }
+
+  componentDidMount() {
+    this.fetchIssues();
+  }
+
+  componentDidUpdate(prevProps, prevState) {
+    if (!isEqual(prevProps.projectIds, this.props.projectIds)) {
+      this.fetchIssues();
+    }
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  fetchIssues() {
+    let {organization, projectIds} = this.props;
+
+    fetchProcessingIssues(this.api, organization.slug, projectIds).then(
+      data => {
+        let hasIssues = data.some(
+          p => p.hasIssues || p.resolveableIssues > 0 || p.issuesProcessing > 0
+        );
+
+        if (hasIssues) {
+          this.setState({issues: data});
+        }
+      },
+      error => {
+        // this is okay. it's just a ui hint
+        logAjaxError(error);
+      }
+    );
+  }
+
+  render() {
+    let {issues} = this.state;
+    let {organization, showProject} = this.props;
+
+    return (
+      <React.Fragment>
+        {issues.map((p, idx) => {
+          return (
+            <ProcessingIssueHint
+              key={idx}
+              issue={p}
+              projectId={p.project}
+              orgId={organization.slug}
+              showProject={showProject}
+            />
+          );
+        })}
+      </React.Fragment>
+    );
+  }
+}
+
+export default ProcessingIssueList;
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 132cfda1ca..1fde050939 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -20,7 +20,6 @@ import StreamGroup from 'app/components/stream/group';
 import {fetchTags} from 'app/actionCreators/tags';
 import {fetchOrgMembers} from 'app/actionCreators/members';
 import {fetchSavedSearches} from 'app/actionCreators/savedSearches';
-import {fetchProcessingIssues} from 'app/actionCreators/processingIssues';
 import ConfigStore from 'app/stores/configStore';
 import GroupStore from 'app/stores/groupStore';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
@@ -30,7 +29,7 @@ import SentryTypes from 'app/sentryTypes';
 import StreamActions from 'app/views/stream/actions';
 import StreamFilters from 'app/views/stream/filters';
 import StreamSidebar from 'app/views/stream/sidebar';
-import ProcessingIssueHint from 'app/views/stream/processingIssueHint';
+import ProcessingIssueList from 'app/components/stream/processingIssueList';
 import {analytics} from 'app/utils/analytics';
 import {getUtcDateString} from 'app/utils/dates';
 import {logAjaxError} from 'app/utils/logging';
@@ -78,7 +77,6 @@ const OrganizationStream = createReactClass({
       savedSearchLoading: true,
       savedSearch: null,
       savedSearchList: [],
-      processingIssues: null,
       issuesLoading: true,
       tagsLoading: true,
       memberList: {},
@@ -113,7 +111,6 @@ const OrganizationStream = createReactClass({
 
     // Start by getting searches first so if the user is on a saved search
     // we load the correct data the first time.
-    this.fetchProcessingIssues();
     this.fetchSavedSearches();
 
     // If we don't have a searchId there won't be more chained requests
@@ -133,11 +130,6 @@ const OrganizationStream = createReactClass({
       }
     }
 
-    // If project selections have changed we need to get new processing issues.
-    if (!isEqual(prevProps.selection.projects, this.props.selection.projects)) {
-      this.fetchProcessingIssues();
-    }
-
     let prevQuery = prevProps.location.query;
     let newQuery = this.props.location.query;
 
@@ -316,28 +308,6 @@ const OrganizationStream = createReactClass({
     });
   },
 
-  fetchProcessingIssues() {
-    let {orgId} = this.props.params;
-    let projects = this.props.selection.projects;
-    fetchProcessingIssues(this.api, orgId, projects).then(
-      data => {
-        let haveIssues = data.filter(
-          p => p.hasIssues || p.resolveableIssues > 0 || p.issuesProcessing > 0
-        );
-
-        if (haveIssues.length > 0) {
-          this.setState({
-            processingIssues: data,
-          });
-        }
-      },
-      error => {
-        // this is okay. it's just a ui hint
-        logAjaxError(error);
-      }
-    );
-  },
-
   showingProcessingIssues() {
     return this.state.query && this.state.query.trim() == 'is:unprocessed';
   },
@@ -582,25 +552,6 @@ const OrganizationStream = createReactClass({
     this.setState({savedSearch: data}, this.transitionTo);
   },
 
-  renderProcessingIssuesHints() {
-    let pi = this.state.processingIssues;
-    if (!pi || this.showingProcessingIssues()) {
-      return null;
-    }
-    let {orgId} = this.props.params;
-    return pi.map((p, idx) => {
-      return (
-        <ProcessingIssueHint
-          key={idx}
-          issue={p}
-          projectId={p.project}
-          orgId={orgId}
-          showProject
-        />
-      );
-    });
-  },
-
   renderAwaitingEvents(projects) {
     let {organization} = this.props;
     let project = projects.length > 0 ? projects[0] : null;
@@ -690,7 +641,11 @@ const OrganizationStream = createReactClass({
               allResultsVisible={this.allResultsVisible()}
             />
             <PanelBody>
-              {this.renderProcessingIssuesHints()}
+              <ProcessingIssueList
+                organization={this.props.organization}
+                projectIds={this.props.selection.projects}
+                showProject={true}
+              />
               {this.renderStreamBody()}
             </PanelBody>
           </Panel>
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 960421ade3..11f0d3f5b1 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -25,7 +25,7 @@ import GroupStore from 'app/stores/groupStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import Pagination from 'app/components/pagination';
-import ProcessingIssueHint from 'app/views/stream/processingIssueHint';
+import ProcessingIssueList from 'app/components/stream/processingIssueList';
 import ProjectState from 'app/mixins/projectState';
 import SentryTypes from 'app/sentryTypes';
 import StreamActions from 'app/views/stream/actions';
@@ -91,7 +91,6 @@ const Stream = createReactClass({
       query: hasQuery ? currentQuery.query : '',
       sort,
       isSidebarVisible: false,
-      processingIssues: null,
       environment: this.props.environment,
     };
   },
@@ -103,7 +102,6 @@ const Stream = createReactClass({
     });
 
     this.fetchSavedSearches();
-    this.fetchProcessingIssues();
     if (!this.state.loading) {
       this.fetchData();
     }
@@ -230,23 +228,6 @@ const Stream = createReactClass({
     );
   },
 
-  fetchProcessingIssues() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
-      success: data => {
-        if (data.hasIssues || data.resolveableIssues > 0 || data.issuesProcessing > 0) {
-          this.setState({
-            processingIssues: data,
-          });
-        }
-      },
-      error: error => {
-        logAjaxError(error);
-        // this is okay. it's just a ui hint
-      },
-    });
-  },
-
   showingProcessingIssues() {
     return this.state.query && this.state.query.trim() == 'is:unprocessed';
   },
@@ -581,15 +562,6 @@ const Stream = createReactClass({
     });
   },
 
-  renderProcessingIssuesHint() {
-    let pi = this.state.processingIssues;
-    if (!pi || this.showingProcessingIssues()) {
-      return null;
-    }
-    let {orgId, projectId} = this.props.params;
-    return <ProcessingIssueHint issue={pi} projectId={projectId} orgId={orgId} />;
-  },
-
   renderGroupNodes(ids, statsPeriod) {
     // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue
     let userDateJoined = new Date(ConfigStore.get('user').dateJoined);
@@ -679,9 +651,13 @@ const Stream = createReactClass({
     let classes = ['stream-row'];
     if (this.state.isSidebarVisible) classes.push('show-sidebar');
     let {orgId, projectId} = this.props.params;
+    let {organization} = this.context;
+
     let searchId = this.state.searchId;
     let access = this.getAccess();
     let projectFeatures = this.getProjectFeatures();
+    let project = this.getProject();
+
     return (
       <div className={classNames(classes)}>
         <div className="stream-content">
@@ -719,7 +695,10 @@ const Stream = createReactClass({
               allResultsVisible={this.allResultsVisible()}
             />
             <PanelBody>
-              {this.renderProcessingIssuesHint()}
+              <ProcessingIssueList
+                organization={organization}
+                projectIds={[project.id]}
+              />
               {this.renderStreamBody()}
             </PanelBody>
           </Panel>
diff --git a/tests/js/spec/views/stream/processingIssueHint.spec.jsx b/tests/js/spec/components/stream/processingIssueHint.spec.jsx
similarity index 97%
rename from tests/js/spec/views/stream/processingIssueHint.spec.jsx
rename to tests/js/spec/components/stream/processingIssueHint.spec.jsx
index b1d6533a1f..9c8aed8b86 100644
--- a/tests/js/spec/views/stream/processingIssueHint.spec.jsx
+++ b/tests/js/spec/components/stream/processingIssueHint.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import ProcessingIssueHint from 'app/views/stream/processingIssueHint';
+import ProcessingIssueHint from 'app/components/stream/processingIssueHint';
 
 describe('ProcessingIssueHint', function() {
   let issue, wrapper;
diff --git a/tests/js/spec/components/stream/processingIssueList.spec.jsx b/tests/js/spec/components/stream/processingIssueList.spec.jsx
new file mode 100644
index 0000000000..8b0ef81400
--- /dev/null
+++ b/tests/js/spec/components/stream/processingIssueList.spec.jsx
@@ -0,0 +1,70 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import ProcessingIssueList from 'app/components/stream/processingIssueList';
+
+describe('ProcessingIssueList', function() {
+  let wrapper, projects, organization, fetchIssueRequest;
+
+  beforeEach(function() {
+    fetchIssueRequest = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/processingissues/',
+      method: 'GET',
+      body: [
+        {
+          project: 'test-project',
+          numIssues: 1,
+          hasIssues: true,
+          lastSeen: '2019-01-16T15:39:11.081Z',
+        },
+        {
+          project: 'other-project',
+          numIssues: 1,
+          hasIssues: true,
+          lastSeen: '2019-01-16T15:39:11.081Z',
+        },
+      ],
+    });
+    organization = TestStubs.Organization();
+    projects = [1, 2];
+  });
+
+  describe('componentDidMount', function() {
+    let instance;
+    beforeEach(async function() {
+      wrapper = shallow(
+        <ProcessingIssueList organization={organization} projects={projects} />
+      );
+      instance = wrapper.instance();
+      await instance.componentDidMount();
+    });
+
+    it('fetches issues', function() {
+      expect(instance.state.issues).toBeTruthy();
+      expect(fetchIssueRequest).toHaveBeenCalled();
+    });
+  });
+
+  describe('render', function() {
+    beforeEach(async function() {
+      wrapper = shallow(
+        <ProcessingIssueList
+          organization={organization}
+          projects={projects}
+          showProject={true}
+        />
+      );
+      await wrapper.instance().componentDidMount();
+      await wrapper.update();
+    });
+
+    it('renders multiple issues', function() {
+      expect(wrapper.find('ProcessingIssueHint')).toHaveLength(2);
+    });
+
+    it('forwards the showProject prop', function() {
+      let hint = wrapper.find('ProcessingIssueHint').first();
+      expect(hint.props().showProject).toBeTruthy();
+    });
+  });
+});
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 05283aa0a9..25d5b9715c 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -230,7 +230,7 @@ describe('OrganizationStream', function() {
         loading: false,
       });
 
-      let issues = wrapper.find('ProcessingIssueHint');
+      let issues = wrapper.find('ProcessingIssueList');
       expect(issues).toHaveLength(1);
     });
   });
diff --git a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
index 6a6d15c2d0..b3b45a1aef 100644
--- a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
+++ b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
@@ -68,6 +68,41 @@ exports[`Stream render() displays the group list 1`] = `
         disablePadding={true}
         flex={false}
       >
+        <ProcessingIssueList
+          organization={
+            Object {
+              "access": Array [
+                "org:read",
+                "org:write",
+                "org:admin",
+                "project:read",
+                "project:write",
+                "project:admin",
+                "team:read",
+                "team:write",
+                "team:admin",
+              ],
+              "features": Array [],
+              "id": "1337",
+              "name": "Organization Name",
+              "onboardingTasks": Array [],
+              "projects": Array [],
+              "scrapeJavaScript": true,
+              "slug": "org-slug",
+              "status": Object {
+                "id": "active",
+                "name": "active",
+              },
+              "teams": Array [],
+            }
+          }
+          projectIds={
+            Array [
+              "3559",
+            ]
+          }
+          showProject={false}
+        />
         <PanelBody
           className="ref-group-list"
           direction="column"
@@ -242,6 +277,41 @@ exports[`Stream toggles environment select all environments 1`] = `
         disablePadding={true}
         flex={false}
       >
+        <ProcessingIssueList
+          organization={
+            Object {
+              "access": Array [
+                "org:read",
+                "org:write",
+                "org:admin",
+                "project:read",
+                "project:write",
+                "project:admin",
+                "team:read",
+                "team:write",
+                "team:admin",
+              ],
+              "features": Array [],
+              "id": "1337",
+              "name": "Organization Name",
+              "onboardingTasks": Array [],
+              "projects": Array [],
+              "scrapeJavaScript": true,
+              "slug": "org-slug",
+              "status": Object {
+                "id": "active",
+                "name": "active",
+              },
+              "teams": Array [],
+            }
+          }
+          projectIds={
+            Array [
+              "3559",
+            ]
+          }
+          showProject={false}
+        />
         <PanelBody
           className="ref-group-list"
           direction="column"
