commit f13ea74bf66f3c5f47c4d9c37f20dae59c8ac7e9
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Thu Jan 5 13:40:55 2017 -0800

    Add logging statements to UI controlled email mutations. (#4725)
    
    * Add logging to email CRUD.
    
    * Add identity disconnect logging statement because why not.

diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 34ea39187e..308e4df7fb 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -7,6 +7,8 @@ sentry.web.frontend.accounts
 """
 from __future__ import absolute_import
 
+import logging
+
 import six
 
 from django.conf import settings
@@ -38,6 +40,8 @@ from sentry.web.forms.accounts import (
 from sentry.web.helpers import render_to_response
 from sentry.utils import auth
 
+logger = logging.getLogger('sentry.accounts')
+
 
 def send_password_recovery_mail(user):
     password_hash, created = LostPasswordHash.objects.get_or_create(
@@ -166,6 +170,12 @@ def start_confirm_email(request):
         request.user.send_confirm_emails()
         unverified_emails = [e.email for e in request.user.get_unverified_emails()]
         msg = _('A verification email has been sent to %s.') % (', ').join(unverified_emails)
+        for email in unverified_emails:
+            logger.info('user.email.start_confirm', extra={
+                'user_id': request.user.id,
+                'ip_address': request.META['REMOTE_ADDR'],
+                'email': email,
+            })
     else:
         msg = _('Your email (%s) has already been verified.') % request.user.email
     messages.add_message(request, messages.SUCCESS, msg)
@@ -189,6 +199,11 @@ def confirm_email(request, user_id, hash):
         email.validation_hash = ''
         email.save()
         email_verified.send(email=email.email, sender=email)
+        logger.info('user.email.confirm', extra={
+            'user_id': user_id,
+            'ip_address': request.META['REMOTE_ADDR'],
+            'email': email.email,
+        })
     messages.add_message(request, level, msg)
     return HttpResponseRedirect(reverse('sentry-account-settings-emails'))
 
@@ -398,6 +413,11 @@ def disconnect_identity(request, identity_id):
             settings.AUTH_PROVIDER_LABELS.get(backend_name, backend_name),
         )
     )
+    logger.info('user.identity.disconnect', extra={
+        'user_id': request.user.id,
+        'ip_address': request.META['REMOTE_ADDR'],
+        'usersocialauth_id': identity_id,
+    })
     return HttpResponseRedirect(reverse('sentry-account-settings-identities'))
 
 
@@ -419,6 +439,12 @@ def show_emails(request):
         email = request.POST.get('email')
         del_email = UserEmail.objects.filter(user=user, email=email)
         del_email.delete()
+        logger.info('user.email.remove', extra={
+            'user_id': user.id,
+            'ip_address': request.META['REMOTE_ADDR'],
+            'email': email,
+        })
+
         return HttpResponseRedirect(request.path)
 
     if email_form.is_valid():
@@ -444,6 +470,11 @@ def show_emails(request):
                 user_email.set_hash()
                 user_email.save()
                 user.send_confirm_email_singular(user_email)
+                logger.info('user.email.add', extra={
+                    'user_id': user.id,
+                    'ip_address': request.META['REMOTE_ADDR'],
+                    'email': user_email.email,
+                })
                 msg = _('A confirmation email has been sent to %s.') % user_email.email
                 messages.add_message(
                     request,
@@ -466,6 +497,11 @@ def show_emails(request):
                 new_email.save()
             # send confirmation emails to any non verified emails
             user.send_confirm_email_singular(new_email)
+            logger.info('user.email.add', extra={
+                'user_id': user.id,
+                'ip_address': request.META['REMOTE_ADDR'],
+                'email': new_email.email,
+            })
             msg = _('A confirmation email has been sent to %s.') % new_email.email
             messages.add_message(
                 request,
