commit f97a97de6b3a78b93e0ed61bb234bea961d32ec5
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Dec 7 10:45:02 2016 +0100

    Introduce error types for better reporting in the UI

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index bcedd2fc4b..436f2e0b41 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import os
 import re
+import sys
 import six
 import time
 import logging
@@ -360,12 +361,16 @@ def resolve_frame_symbols(data):
     frame = None
     idx = -1
 
-    def report_error(e):
-        errors.append({
-            'type': EventError.NATIVE_INTERNAL_FAILURE,
-            'frame': frame,
-            'error': u'frame #%d: %s' % (idx, e)
-        })
+    def report_error(exc_type, exc_value, tb):
+        if exc_value.is_user_fixable or exc_value.is_sdk_failure:
+            errors.append({
+                'type': EventError.NATIVE_INTERNAL_FAILURE,
+                'frame': frame,
+                'error': u'frame #%d: %s' % (idx, exc_value)
+            })
+        if not exc_value.is_user_fixable:
+            logger.error('Failed to symbolicate',
+                         exc_info=(exc_type, exc_value, tb))
 
     with sym:
         for stacktrace, container in stacktraces:
@@ -385,9 +390,10 @@ def resolve_frame_symbols(data):
                             'instruction_addr': frame['instruction_addr'],
                             'symbol_addr': frame['symbol_addr'],
                         }, sdk_info)
-                    except SymbolicationFailed as e:
-                        report_error(e)
+                    except SymbolicationFailed:
+                        report_error(sys.exc_info())
                         continue
+
                     new_frame = dict(frame)
                     # XXX: log here if symbol could not be found?
                     symbol = sfrm.get('symbol_name') or \
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 2501812119..dbe1945247 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -18,6 +18,7 @@ APP_BUNDLE_PATHS = (
     '/var/containers/Bundle/Application/',
     '/private/var/containers/Bundle/Application/',
 )
+_sim_platform_re = re.compile(r'/\w+?Simulator\.platform/')
 _swift_framework_re = re.compile(r'/Frameworks/libswift([a-zA-Z0-9]+)\.dylib$')
 SIM_PATH = '/Developer/CoreSimulator/Devices/'
 SIM_APP_PATH = '/Containers/Bundle/Application/'
@@ -28,16 +29,22 @@ class SymbolicationFailed(Exception):
     message = None
 
     def __init__(self, message=None, type=None, image_uuid=None,
-                 image_path=None, is_fixable=False):
+                 image_path=None):
         Exception.__init__(self)
         self.message = six.text_type(message)
         self.type = type
-        if is_fixable and image_uuid is None:
-            raise RuntimeError('Fixable symbolication failures require '
-                               'an image UUID')
         self.image_uuid = image_uuid
         self.image_path = image_path
-        self.is_fixable = is_fixable
+
+    @property
+    def is_user_fixable(self):
+        """These are errors that a user can fix themselves."""
+        return self.type in ('missing-dsym', 'bad-dsym')
+
+    @property
+    def is_sdk_failure(self):
+        """An error that most likely happened because of a bad SDK."""
+        return self.type == 'unknown-image'
 
     def __str__(self):
         rv = []
@@ -147,6 +154,12 @@ class Symbolizer(object):
             return False
         return True
 
+    def is_simulator_frame(self, frame):
+        fn = self._get_real_package(frame)
+        if fn is None:
+            return False
+        return _sim_platform_re.search(fn) is not None
+
     def symbolize_app_frame(self, frame, img):
         if frame['object_addr'] not in self.symsynd_symbolizer.images:
             raise SymbolicationFailed(
@@ -155,8 +168,7 @@ class Symbolizer(object):
                     'Frame references a missing dSYM file'
                 ),
                 image_uuid=img['uuid'],
-                image_path=self._get_real_package(frame),
-                is_fixable=True
+                image_path=self._get_real_package(frame)
             )
 
         try:
@@ -167,8 +179,7 @@ class Symbolizer(object):
                 type='bad-dsym',
                 message='Symbolication failed due to bad dsym: %s' % e,
                 image_uuid=img['uuid'],
-                image_path=self._get_real_package(frame),
-                is_fixable=True
+                image_path=self._get_real_package(frame)
             )
 
         if new_frame is None:
@@ -187,13 +198,20 @@ class Symbolizer(object):
         """Symbolizes a frame with system symbols only."""
         symbol = find_system_symbol(img, frame['instruction_addr'], sdk_info)
         if symbol is None:
-            raise SymbolicationFailed(
-                type='missing-system-dsym',
-                message=(
+            # Simulator frames cannot be symbolicated
+            if self.is_simulator_frame(frame):
+                type = 'simulator-frame'
+                message = 'Cannot symbolicate simulator system frames'
+            else:
+                type = 'misisng-system-dsym'
+                message = (
                     'Attempted to look up system in the system symbols but '
                     'no symbol could be found.  This might happen with beta '
                     'releases of SDKs'
-                ),
+                )
+            raise SymbolicationFailed(
+                type=type,
+                message=message,
                 image_uuid=img['uuid'],
                 image_path=self._get_real_package(frame)
             )
