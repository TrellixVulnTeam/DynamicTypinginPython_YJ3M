commit a88cf7074a770e3b5e49ca9d5cfe45986ed781cb
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Feb 11 11:30:40 2020 -0500

    fix(discover2): Validate and generate a yAxis value for the graph API payload (#16941)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 33b5937d51..9d0641e583 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -25,6 +25,12 @@ export const AGGREGATE_ALIASES = [
   'latest_event',
 ] as const;
 
+// default list of yAxis options
+export const CHART_AXIS_OPTIONS = [
+  {label: 'count(id)', value: 'count(id)'},
+  {label: 'count_unique(users)', value: 'count_unique(user)'},
+];
+
 export const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {
   id: undefined,
   name: t('All Events'),
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 844cc1143b..e33cbc63f0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -4,14 +4,15 @@ import cloneDeep from 'lodash/cloneDeep';
 import pick from 'lodash/pick';
 import isEqual from 'lodash/isEqual';
 import omit from 'lodash/omit';
+import uniqBy from 'lodash/uniqBy';
 import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
-import {SavedQuery, NewQuery} from 'app/types';
+import {SavedQuery, NewQuery, SelectValue} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 
-import {SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
+import {SPECIAL_FIELDS, FIELD_FORMATTERS, CHART_AXIS_OPTIONS} from './data';
 import {
   MetaType,
   EventQuery,
@@ -911,6 +912,45 @@ class EventView {
 
     return newEventView;
   }
+
+  getYAxisOptions(): SelectValue<string>[] {
+    // Make option set and add the default options in.
+    return uniqBy(
+      this.getAggregateFields()
+        // Exclude last_seen and latest_event as they don't produce useful graphs.
+        .filter(
+          (field: Field) => ['last_seen', 'latest_event'].includes(field.field) === false
+        )
+        .map((field: Field) => {
+          return {label: field.field, value: field.field};
+        })
+        .concat(CHART_AXIS_OPTIONS),
+      'value'
+    );
+  }
+
+  getYAxis(): string {
+    const yAxisOptions = this.getYAxisOptions();
+
+    const yAxis = this.yAxis;
+
+    const defaultOption = yAxisOptions[0].value;
+
+    if (!yAxis) {
+      return defaultOption;
+    }
+
+    // ensure current selected yAxis is one of the items in yAxisOptions
+    const result = yAxisOptions.findIndex((option: SelectValue<string>) => {
+      return option.value === yAxis;
+    });
+
+    if (result >= 0) {
+      return yAxis;
+    }
+
+    return defaultOption;
+  }
 }
 
 export const isAPIPayloadSimilar = (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index d09ea46333..320570f2aa 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -2,16 +2,15 @@ import React from 'react';
 import styled from '@emotion/styled';
 import * as ReactRouter from 'react-router';
 import {Location} from 'history';
-import uniqBy from 'lodash/uniqBy';
 
-import {Organization, SelectValue} from 'app/types';
+import {Organization} from 'app/types';
 
 import {Panel} from 'app/components/panels';
 import getDynamicText from 'app/utils/getDynamicText';
 import EventsChart from 'app/views/events/eventsChart';
 
 import ChartFooter, {TooltipData} from './chartFooter';
-import EventView, {Field} from './eventView';
+import EventView from './eventView';
 
 const defaultTooltip: TooltipData = {
   values: [],
@@ -32,11 +31,6 @@ type State = {
   tooltipData: TooltipData;
 };
 
-const CHART_AXIS_OPTIONS = [
-  {label: 'count(id)', value: 'count(id)'},
-  {label: 'count_unique(users)', value: 'count_unique(user)'},
-];
-
 export default class ResultsChart extends React.Component<Props, State> {
   state = {
     tooltipData: defaultTooltip,
@@ -49,21 +43,7 @@ export default class ResultsChart extends React.Component<Props, State> {
   render() {
     const {eventView, location, organization, router, total, onAxisChange} = this.props;
 
-    // Make option set and add the default options in.
-    const yAxisOptions: SelectValue<string>[] = uniqBy(
-      eventView
-        .getAggregateFields()
-        // Exclude last_seen and latest_event as they don't produce useful graphs.
-        .filter(
-          (field: Field) => ['last_seen', 'latest_event'].includes(field.field) === false
-        )
-        .map((field: Field) => {
-          return {label: field.field, value: field.field};
-        })
-        .concat(CHART_AXIS_OPTIONS),
-      'value'
-    );
-    const yAxisValue = eventView.yAxis || yAxisOptions[0].value;
+    const yAxisValue = eventView.getYAxis();
 
     return (
       <StyledPanel onMouseLeave={() => this.handleTooltipUpdate(defaultTooltip)}>
@@ -86,7 +66,7 @@ export default class ResultsChart extends React.Component<Props, State> {
           hoverState={this.state.tooltipData}
           total={total}
           yAxisValue={yAxisValue}
-          yAxisOptions={yAxisOptions}
+          yAxisOptions={eventView.getYAxisOptions()}
           onChange={onAxisChange}
         />
       </StyledPanel>
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index 43bf4ca723..14ec050d0b 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -3,6 +3,7 @@ import EventView, {
   pickRelevantLocationQueryStrings,
 } from 'app/views/eventsV2/eventView';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
+import {CHART_AXIS_OPTIONS} from 'app/views/eventsV2/data';
 
 const generateFields = fields => {
   return fields.map(field => {
@@ -1854,6 +1855,167 @@ describe('EventView.getResultsViewUrlTarget()', function() {
   });
 });
 
+describe('EventView.getGlobalSelection', function() {
+  it('return default global selection', function() {
+    const eventView = new EventView({});
+
+    expect(eventView.getGlobalSelection()).toMatchObject({
+      project: [],
+      start: undefined,
+      end: undefined,
+      statsPeriod: undefined,
+      environment: [],
+    });
+  });
+
+  it('returns global selection', function() {
+    const state2 = {
+      project: [42],
+      start: 'start',
+      end: 'end',
+      statsPeriod: '42d',
+      environment: ['prod'],
+    };
+
+    const eventView = new EventView(state2);
+
+    expect(eventView.getGlobalSelection()).toMatchObject(state2);
+  });
+});
+
+describe('EventView.generateBlankQueryStringObject', function() {
+  it('should return blank values', function() {
+    const eventView = new EventView({});
+
+    expect(eventView.generateBlankQueryStringObject()).toEqual({
+      id: undefined,
+      name: undefined,
+      fields: undefined,
+      sorts: undefined,
+      query: undefined,
+      project: undefined,
+      start: undefined,
+      end: undefined,
+      statsPeriod: undefined,
+      environment: undefined,
+      yAxis: undefined,
+      cursor: undefined,
+    });
+  });
+});
+
+describe('EventView.getYAxisOptions', function() {
+  const state = {
+    fields: [],
+    sorts: [],
+    query: '',
+    project: [],
+    statsPeriod: '42d',
+    environment: [],
+  };
+
+  function generateYaxis(value) {
+    return {
+      value,
+      label: value,
+    };
+  }
+
+  it('should return default options', function() {
+    const thisEventView = new EventView(state);
+
+    expect(thisEventView.getYAxisOptions()).toEqual(CHART_AXIS_OPTIONS);
+  });
+
+  it('should add aggregate fields as options', function() {
+    let thisEventView = new EventView({
+      ...state,
+      fields: generateFields(['ignored-field', 'count(user)']),
+    });
+
+    expect(thisEventView.getYAxisOptions()).toEqual([
+      generateYaxis('count(user)'),
+      ...CHART_AXIS_OPTIONS,
+    ]);
+
+    // should de-duplicate entries
+    thisEventView = new EventView({
+      ...state,
+      fields: generateFields(['ignored-field', 'count(id)']),
+    });
+
+    expect(thisEventView.getYAxisOptions()).toEqual([...CHART_AXIS_OPTIONS]);
+  });
+
+  it('should exclude yAxis options that are not useful', function() {
+    const thisEventView = new EventView({
+      ...state,
+      fields: generateFields([
+        'ignored-field',
+        'count(user)',
+        'last_seen',
+        'latest_event',
+      ]),
+    });
+
+    expect(thisEventView.getYAxisOptions()).toEqual([
+      generateYaxis('count(user)'),
+      ...CHART_AXIS_OPTIONS,
+    ]);
+  });
+});
+
+describe('EventView.getYAxis', function() {
+  const state = {
+    fields: [],
+    sorts: [],
+    query: '',
+    project: [],
+    statsPeriod: '42d',
+    environment: [],
+  };
+
+  it('should return first default yAxis', function() {
+    const thisEventView = new EventView(state);
+
+    expect(thisEventView.getYAxis()).toEqual('count(id)');
+  });
+
+  it('should return valid yAxis', function() {
+    const thisEventView = new EventView({
+      ...state,
+      fields: generateFields([
+        'ignored-field',
+        'count(user)',
+        'last_seen',
+        'latest_event',
+      ]),
+      yAxis: 'count(user)',
+    });
+
+    expect(thisEventView.getYAxis()).toEqual('count(user)');
+  });
+
+  it('should ignore invalid yAxis', function() {
+    const invalid = [
+      'last_seen',
+      'latest_event',
+      'count(user)', // this is not one of the selected fields
+    ];
+
+    for (const option of invalid) {
+      const thisEventView = new EventView({
+        ...state,
+        fields: generateFields(['ignored-field', 'last_seen', 'latest_event']),
+        yAxis: option,
+      });
+
+      // yAxis defaults to the first entry of the default yAxis options
+      expect(thisEventView.getYAxis()).toEqual('count(id)');
+    }
+  });
+});
+
 describe('isAPIPayloadSimilar', function() {
   const state = {
     id: '1234',
@@ -2103,55 +2265,6 @@ describe('isAPIPayloadSimilar', function() {
       expect(results).toBe(true);
     });
   });
-
-  describe('getGlobalSelection', function() {
-    it('return default global selection', function() {
-      const eventView = new EventView({});
-
-      expect(eventView.getGlobalSelection()).toMatchObject({
-        project: [],
-        start: undefined,
-        end: undefined,
-        statsPeriod: undefined,
-        environment: [],
-      });
-    });
-
-    it('returns global selection', function() {
-      const state2 = {
-        project: [42],
-        start: 'start',
-        end: 'end',
-        statsPeriod: '42d',
-        environment: ['prod'],
-      };
-
-      const eventView = new EventView(state2);
-
-      expect(eventView.getGlobalSelection()).toMatchObject(state2);
-    });
-  });
-
-  describe('generateBlankQueryStringObject', function() {
-    it('should return blank values', function() {
-      const eventView = new EventView({});
-
-      expect(eventView.generateBlankQueryStringObject()).toEqual({
-        id: undefined,
-        name: undefined,
-        fields: undefined,
-        sorts: undefined,
-        query: undefined,
-        project: undefined,
-        start: undefined,
-        end: undefined,
-        statsPeriod: undefined,
-        environment: undefined,
-        yAxis: undefined,
-        cursor: undefined,
-      });
-    });
-  });
 });
 
 describe('pickRelevantLocationQueryStrings', function() {
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index 07ef0950b4..7dd67dd97c 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -15,6 +15,9 @@ const FIELDS = [
   {
     field: 'user',
   },
+  {
+    field: 'count(user)',
+  },
 ];
 
 const generateFields = () => {
@@ -200,7 +203,7 @@ describe('EventsV2 > Results', function() {
     const initialData = initializeOrg({
       organization,
       router: {
-        location: {query: {...generateFields(), yAxis: 'count_id'}},
+        location: {query: {...generateFields(), yAxis: 'count(user)'}},
       },
     });
 
@@ -226,6 +229,6 @@ describe('EventsV2 > Results', function() {
     wrapper.update();
 
     const eventsRequest = wrapper.find('EventsChart');
-    expect(eventsRequest.props().yAxis).toEqual('count_id');
+    expect(eventsRequest.props().yAxis).toEqual('count(user)');
   });
 });
