commit 943a9a7c31d36589daeb509c837badf6f7ffe7f1
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Fri Oct 18 13:17:20 2019 -0700

    feat(app-platform): Add SentryAppInteractionEndpoint to collect metrics about Sentry Apps usage (#14945)
    
    * feat(app-platform): Add SentryAppInteractionEndpoint to store metrics about how users interact with Sentry Apps
    
    * Change TSDB key for component interactions to appslug:componenttype
    
    * Track stacktrace-link interactions & sentry app views
    
    * Track issue-link interactions
    
    * Add interactions charts to dashboard, Enable dashboard for internal/unpublished integrations
    
    * Clean up sentry_app_interaction endpoint
    
    * more descriptive error messages for /interaction endpoint
    
    * add better types to SentryApplicationDashboard endpoints
    
    * Record sentry app views for external installs page
    
    * Fix test
    
    * UI chart changes
    
    * Add test for SentryAppInteraction endpoint
    
    * add info message for integration views graph

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index 92be40e0d4..91af2e5368 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -345,7 +345,12 @@ class SentryInternalAppTokenPermission(SentryPermission):
 
 
 class SentryAppStatsPermission(SentryPermission):
-    scope_map = {"GET": ("org:read", "org:integrations", "org:write", "org:admin")}
+    scope_map = {
+        "GET": ("org:read", "org:integrations", "org:write", "org:admin"),
+        # Anyone logged in can increment the stats, so leave the scopes empty
+        # Note: this only works for session-based auth so you cannot increment stats through API
+        "POST": (),
+    }
 
     def has_object_permission(self, request, view, sentry_app):
         if not hasattr(request, "user") or not request.user:
diff --git a/src/sentry/api/endpoints/sentry_app_interaction.py b/src/sentry/api/endpoints/sentry_app_interaction.py
new file mode 100644
index 0000000000..793def689b
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_interaction.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+import logging
+
+from sentry import tsdb
+from sentry.api.base import StatsMixin
+from sentry.api.bases import SentryAppBaseEndpoint, SentryAppStatsPermission
+
+logger = logging.getLogger(__name__)
+
+TSDB_MODELS = [tsdb.models.sentry_app_viewed, tsdb.models.sentry_app_component_interacted]
+COMPONENT_TYPES = ["stacktrace-link", "issue-link"]
+
+
+def get_component_interaction_key(sentry_app, component_type):
+    return "%s:%s" % (sentry_app.slug, component_type)
+
+
+class SentryAppInteractionEndpoint(SentryAppBaseEndpoint, StatsMixin):
+    permission_classes = (SentryAppStatsPermission,)
+
+    def get(self, request, sentry_app):
+        """
+        :qparam float since
+        :qparam float until
+        :qparam resolution - optional
+        """
+
+        views = tsdb.get_range(
+            model=tsdb.models.sentry_app_viewed, keys=[sentry_app.id], **self._parse_args(request)
+        )[sentry_app.id]
+
+        component_interactions = tsdb.get_range(
+            model=tsdb.models.sentry_app_component_interacted,
+            keys=[
+                get_component_interaction_key(sentry_app, component.type)
+                for component in sentry_app.components.all()
+            ],
+            **self._parse_args(request)
+        )
+
+        return Response(
+            {
+                "views": views,
+                "component_interactions": {
+                    k.split(":")[1]: v for k, v in component_interactions.items()
+                },
+            }
+        )
+
+    def post(self, request, sentry_app):
+        """
+        Increment a TSDB metric relating to Sentry App interactions
+
+        :param string tsdbField         the name of the TSDB model to increment
+        :param string componentType     required for 'sentry_app_component_interacted' metric
+        """
+        # Request should have identifier field stored in TSDBModel
+        tsdb_field = request.data.get("tsdbField", "")
+
+        model = getattr(tsdb.models, tsdb_field, None)
+        if model is None or model not in TSDB_MODELS:
+            return Response(
+                {
+                    "detail": "The tsdbField must be one of: sentry_app_viewed, sentry_app_component_interacted"
+                },
+                status=400,
+            )
+
+        if model == tsdb.models.sentry_app_component_interacted:
+            component_type = request.data.get("componentType", None)
+            if component_type is None or component_type not in COMPONENT_TYPES:
+                return Response(
+                    {
+                        "detail": "The field componentType is required and must be one of %s"
+                        % (COMPONENT_TYPES)
+                    },
+                    status=400,
+                )
+
+            key = get_component_interaction_key(sentry_app, request.data["componentType"])
+        elif model == tsdb.models.sentry_app_viewed:
+            key = sentry_app.id
+
+        # Timestamp is automatically created
+        tsdb.incr(model, key)
+
+        return Response({}, status=201)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 4502106116..dfe0941d78 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -248,6 +248,7 @@ from .endpoints.sentry_apps import SentryAppsEndpoint
 from .endpoints.sentry_apps_stats import SentryAppsStatsEndpoint
 from .endpoints.sentry_app_stats import SentryAppStatsEndpoint
 from .endpoints.sentry_app_errors import SentryAppErrorsEndpoint
+from .endpoints.sentry_app_interaction import SentryAppInteractionEndpoint
 from .endpoints.setup_wizard import SetupWizard
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
@@ -1483,6 +1484,11 @@ urlpatterns = patterns(
         SentryAppErrorsEndpoint.as_view(),
         name="sentry-api-0-sentry-app-errors",
     ),
+    url(
+        r"^sentry-apps/(?P<sentry_app_slug>[^\/]+)/interaction/$",
+        SentryAppInteractionEndpoint.as_view(),
+        name="sentry-api-0-sentry-app-interaction",
+    ),
     url(
         r"^organizations/(?P<organization_slug>[^\/]+)/sentry-app-components/$",
         OrganizationSentryAppComponentsEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx
index a7937f63e0..63511fe6f7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/openInContextLine.jsx
@@ -5,6 +5,7 @@ import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import styled from 'react-emotion';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
+import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 
 class OpenInContextLine extends React.Component {
   static propTypes = {
@@ -34,11 +35,19 @@ class OpenInContextLine extends React.Component {
   renderOpenInLink = component => {
     const url = this.getUrl(component);
     const {slug} = component.sentryApp;
+
+    const recordStacktraceLinkInteraction = () => {
+      recordInteraction(slug, 'sentry_app_component_interacted', {
+        componentType: 'stacktrace-link',
+      });
+    };
+
     return (
       <OpenInLink
         key={component.uuid}
         data-test-id={`stacktrace-link-${slug}`}
         href={url}
+        onClick={recordStacktraceLinkInteraction}
       >
         <OpenInIcon slug={slug} />
         <OpenInName>{t(`${component.sentryApp.name}`)}</OpenInName>
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
index 8dae70f40e..6334004734 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.jsx
@@ -14,6 +14,7 @@ import {t, tct} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import {deleteExternalIssue} from 'app/actionCreators/platformExternalIssues';
+import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 
 class SentryAppExternalIssueActions extends React.Component {
   static propTypes = {
@@ -47,7 +48,18 @@ class SentryAppExternalIssueActions extends React.Component {
 
   showModal = () => {
     // Only show the modal when we don't have a linked issue
-    !this.state.externalIssue && this.setState({showModal: true});
+    if (!this.state.externalIssue) {
+      const {sentryAppComponent} = this.props;
+
+      recordInteraction(
+        sentryAppComponent.sentryApp.slug,
+        'sentry_app_component_interacted',
+        {
+          componentType: 'issue-link',
+        }
+      );
+      this.setState({showModal: true});
+    }
   };
 
   hideModal = () => {
@@ -67,11 +79,11 @@ class SentryAppExternalIssueActions extends React.Component {
     const {externalIssue} = this.state;
 
     deleteExternalIssue(api, group.id, externalIssue.id)
-      .then(data => {
+      .then(_data => {
         this.setState({externalIssue: null});
         addSuccessMessage(t('Successfully unlinked issue.'));
       })
-      .catch(error => {
+      .catch(_error => {
         addErrorMessage(t('Unable to unlink issue.'));
       });
   };
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 1076cdc1cc..624e9d90ff 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -464,6 +464,29 @@ export type SentryAppInstallation = {
   code?: string;
 };
 
+export type SentryAppWebhookError = {
+  webhookUrl: string;
+  app: {
+    uuid: string;
+    slug: string;
+    name: string;
+  };
+  request: {
+    body: object;
+    headers: object;
+  };
+  eventType: string;
+  date: string;
+  organization: {
+    slug: string;
+    name: string;
+  };
+  response: {
+    body: string;
+    statusCode: number;
+  };
+};
+
 export type PermissionValue = 'no-access' | 'read' | 'write' | 'admin';
 
 export type Permissions = {
diff --git a/src/sentry/static/sentry/app/utils/recordSentryAppInteraction.tsx b/src/sentry/static/sentry/app/utils/recordSentryAppInteraction.tsx
new file mode 100644
index 0000000000..8f3282377e
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/recordSentryAppInteraction.tsx
@@ -0,0 +1,20 @@
+import {Client} from 'app/api';
+
+type TSDBField = 'sentry_app_viewed' | 'sentry_app_component_interacted';
+
+export const recordInteraction = async (
+  sentryAppSlug: string,
+  field: TSDBField,
+  data?: object
+): Promise<void> => {
+  const api = new Client();
+  const endpoint = `/sentry-apps/${sentryAppSlug}/interaction/`;
+
+  return await api.requestPromise(endpoint, {
+    method: 'POST',
+    data: {
+      tsdbField: field,
+      ...data,
+    },
+  });
+};
diff --git a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.jsx b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.jsx
index e25675cbfb..23e9605281 100644
--- a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.jsx
+++ b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.jsx
@@ -13,8 +13,13 @@ import Avatar from 'app/components/avatar';
 import SentryAppDetailsModal from 'app/components/modals/sentryAppDetailsModal';
 import {installSentryApp} from 'app/actionCreators/sentryAppInstallations';
 import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
+import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 
 export default class SentryAppExternalInstallation extends AsyncView {
+  componentDidMount() {
+    recordInteraction(this.sentryAppSlug, 'sentry_app_viewed');
+  }
+
   state = {
     selectedOrgSlug: null,
     organization: null,
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
index 2d7bb3f8fa..25f5321f3d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.tsx
@@ -3,34 +3,44 @@ import styled from 'react-emotion';
 
 import AsyncView from 'app/views/asyncView';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import LineChart from 'app/components/charts/lineChart';
+
+import {
+  Panel,
+  PanelBody,
+  PanelHeader,
+  PanelFooter,
+  PanelItem,
+} from 'app/components/panels';
 import BarChart from 'app/components/charts/barChart';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import DateTime from 'app/components/dateTime';
-import LoadingError from 'app/components/loadingError';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import Link from 'app/components/links/link';
 
 import space from 'app/styles/space';
+import {SentryApp, SentryAppWebhookError} from 'app/types';
 import {t} from 'app/locale';
-import {SentryApp} from 'app/types';
 
 type Props = AsyncView['props'];
 
 type State = AsyncView['state'] & {
-  stats: any;
-  errors: any;
+  stats: {
+    total_uninstalls: number;
+    total_installs: number;
+    install_stats: [number, number][];
+    uninstall_stats: [number, number][];
+  };
+  errors: SentryAppWebhookError[];
+  interactions: {
+    component_interactions: {
+      [key: string]: [number, number][];
+    };
+    views: [number, number][];
+  };
   app: SentryApp | null;
 };
 
 export default class SentryApplicationDashboard extends AsyncView<Props, State> {
-  getDefaultState(): State {
-    return {
-      ...super.getDefaultState(),
-      stats: {},
-      errors: [],
-      app: null,
-    };
-  }
-
   getEndpoints(): Array<[string, string, any] | [string, string]> {
     const {appSlug} = this.props.params;
     // Default time range for now: 90 days ago to now
@@ -43,6 +53,11 @@ export default class SentryApplicationDashboard extends AsyncView<Props, State>
         {query: {since: now - ninety_days_ago, until: now}},
       ],
       ['errors', `/sentry-apps/${appSlug}/errors/`],
+      [
+        'interactions',
+        `/sentry-apps/${appSlug}/interaction/`,
+        {query: {since: now - ninety_days_ago, until: now}},
+      ],
       ['app', `/sentry-apps/${appSlug}/`],
     ];
   }
@@ -160,22 +175,103 @@ export default class SentryApplicationDashboard extends AsyncView<Props, State>
     );
   }
 
+  renderIntegrationViews() {
+    const {views} = this.state.interactions;
+    const {appSlug, orgId} = this.props.params;
+
+    return (
+      <Panel>
+        <PanelHeader>{t('Integration Views')}</PanelHeader>
+        <PanelBody>
+          <InteractionsChart data={{Views: views}} />
+        </PanelBody>
+
+        <PanelFooter>
+          <StyledFooter>
+            {t('Integration views are measured through views on the ')}
+            <Link to={`/sentry-apps/${appSlug}/external-install/`}>
+              {t('external installation page')}
+            </Link>
+            {t(' and views on the Learn More/Install modal on the ')}
+            <Link to={`/settings/${orgId}/integrations/`}>{t('integrations page')}</Link>
+          </StyledFooter>
+        </PanelFooter>
+      </Panel>
+    );
+  }
+
+  renderComponentInteractions() {
+    const {component_interactions} = this.state.interactions;
+
+    return (
+      <Panel>
+        <PanelHeader>{t('Component Interactions')}</PanelHeader>
+
+        <PanelBody>
+          <InteractionsChart data={component_interactions} />
+        </PanelBody>
+
+        <PanelFooter>
+          <StyledFooter>
+            <strong>{t('stacktrace-link:')}</strong>{' '}
+            {t('Each click on the link counts as one interaction')}
+            <br />
+            <strong>{t('issue-link:')}</strong>{' '}
+            {t('Each open of the issue link modal counts as one interaction')}
+          </StyledFooter>
+        </PanelFooter>
+      </Panel>
+    );
+  }
+
   renderBody() {
-    const {app, loading} = this.state;
-    if (!loading && app && app.status !== 'published') {
-      return <LoadingError />;
-    }
+    const {app} = this.state;
 
     return (
       <div>
         {app && <SettingsPageHeader title={app.name} />}
-        {this.renderInstallData()}
+        {app && app.status === 'published' && this.renderInstallData()}
         {this.renderErrorLog()}
+        {app && app.status === 'published' && this.renderIntegrationViews()}
+        {app && app.schema.elements && this.renderComponentInteractions()}
       </div>
     );
   }
 }
 
+type InteractionsChartProps = {
+  data: {
+    [key: string]: [number, number][];
+  };
+};
+const InteractionsChart = ({data}: InteractionsChartProps) => {
+  const elementInteractionsSeries = Object.keys(data).map((key: string) => {
+    const seriesData = data[key].map(point => ({
+      value: point[1],
+      name: point[0] * 1000,
+    }));
+    return {
+      seriesName: key,
+      data: seriesData,
+    };
+  });
+
+  return (
+    <ChartWrapper>
+      <LineChart
+        isGroupedByDate
+        series={elementInteractionsSeries}
+        grid={{left: space(4), right: space(4)}}
+        legend={{
+          show: true,
+          orient: 'horizontal',
+          data: Object.keys(data),
+        }}
+      />
+    </ChartWrapper>
+  );
+};
+
 const Row = styled('div')`
   display: flex;
 `;
@@ -202,6 +298,10 @@ const OverflowBox = styled('div')`
   word-break: break-word;
 `;
 
+const StyledFooter = styled('div')`
+  padding: ${space(1.5)};
+`;
+
 const ChartWrapper = styled('div')`
   padding-top: ${space(3)};
 `;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx
index 385ab36d86..43bb39ca64 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow.tsx
@@ -18,6 +18,7 @@ import PluginIcon from 'app/plugins/components/pluginIcon';
 import {openSentryAppDetailsModal, openModal} from 'app/actionCreators/modal';
 import SentryAppPublishRequestModal from 'app/components/modals/sentryAppPublishRequestModal';
 import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
+import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 import theme from 'app/utils/theme';
 
 const INSTALLED = 'Installed';
@@ -211,6 +212,8 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
     const {app, onInstall, organization} = this.props;
     const isInstalled = !!this.isInstalled;
 
+    recordInteraction(app.slug, 'sentry_app_viewed');
+
     onInstall &&
       openSentryAppDetailsModal({
         sentryApp: app,
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index f055096263..f1dad0ed66 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -92,6 +92,11 @@ class TSDBModel(Enum):
 
     servicehook_fired = 700
 
+    # the number of views that a Sentry App receives
+    sentry_app_viewed = 800
+    # the number of interactions a Sentry App UI Component receives
+    sentry_app_component_interacted = 801
+
 
 class BaseTSDB(Service):
     __read_methods__ = frozenset(
diff --git a/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx b/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx
index 0ff583cc03..a7fba7b424 100644
--- a/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx
+++ b/tests/js/spec/views/sentryAppExternalInstallation.spec.jsx
@@ -46,6 +46,13 @@ describe('SentryAppExternalInstallation', () => {
       body: [],
     });
 
+    MockApiClient.addMockResponse({
+      url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+      method: 'POST',
+      statusCode: 200,
+      body: {},
+    });
+
     getMountedComponent = () =>
       mountWithTheme(
         <SentryAppExternalInstallation params={{sentryAppSlug: sentryApp.slug}} />,
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
index 178d4d340c..6598f86bca 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDashboard.spec.jsx
@@ -22,10 +22,13 @@ describe('Sentry Application Dashboard', function() {
     orgId = org.slug;
   });
 
-  describe('Viewing the Sentry App Dashboard for a published app', () => {
+  describe('Viewing the Sentry App Dashboard for a published integration', () => {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp({
         status: 'published',
+        schema: {
+          elements: [{type: 'stacktrace-link', uri: '/test'}, {type: 'issue-link'}],
+        },
       });
       error = TestStubs.SentryAppWebhookError();
 
@@ -44,6 +47,17 @@ describe('Sentry Application Dashboard', function() {
         body: [error],
       });
 
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+        body: {
+          component_interactions: {
+            'stacktrace-link': [[1569783600, 1]],
+            'issue-link': [[1569783600, 1]],
+          },
+          views: [[1569783600, 1]],
+        },
+      });
+
       Client.addMockResponse({
         url: `/sentry-apps/${sentryApp.slug}/`,
         body: sentryApp,
@@ -117,21 +131,56 @@ describe('Sentry Application Dashboard', function() {
         expect.stringContaining('No errors found.')
       );
     });
+
+    it('shows the integration views in a line chart', () => {
+      const chart = wrapper
+        .find('Panel')
+        .filterWhere(h => h.text().includes('Integration Views'))
+        .find('LineChart');
+      const chartData = chart.props().series[0].data;
+
+      expect(chart.exists()).toBeTruthy();
+      expect(chartData).toHaveLength(1);
+      expect(chartData).toContainEqual({name: 1569783600 * 1000, value: 1});
+    });
+
+    it('shows the component interactions in a line chart', () => {
+      const chart = wrapper
+        .find('Panel')
+        .filterWhere(h => h.text().includes('Component Interactions'))
+        .find('LineChart');
+      const chartSeries = chart.props().series;
+
+      expect(chart.exists()).toBeTruthy();
+      expect(chartSeries).toHaveLength(2);
+      expect(chartSeries).toContainEqual({
+        data: [{name: 1569783600 * 1000, value: 1}],
+        seriesName: 'stacktrace-link',
+      });
+      expect(chartSeries).toContainEqual({
+        data: [{name: 1569783600 * 1000, value: 1}],
+        seriesName: 'issue-link',
+      });
+    });
   });
 
-  describe('Cannot view dashboard for unpublished app', () => {
+  describe('Viewing the Sentry App Dashboard for an internal integration', () => {
     beforeEach(() => {
       sentryApp = TestStubs.SentryApp({
-        status: 'unpublished',
+        status: 'internal',
+        schema: {
+          elements: [{type: 'stacktrace-link', uri: '/test'}],
+        },
       });
+      error = TestStubs.SentryAppWebhookError();
 
       Client.addMockResponse({
         url: `/sentry-apps/${sentryApp.slug}/stats/`,
         body: {
-          total_installs: NUM_INSTALLS,
-          total_uninstalls: NUM_UNINSTALLS,
-          install_stats: [[1569783600, NUM_INSTALLS]],
-          uninstall_stats: [[1569783600, NUM_UNINSTALLS]],
+          total_installs: 1,
+          total_uninstalls: 0,
+          install_stats: [[1569783600, 1]],
+          uninstall_stats: [[1569783600, 0]],
         },
       });
 
@@ -140,6 +189,16 @@ describe('Sentry Application Dashboard', function() {
         body: [error],
       });
 
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+        body: {
+          component_interactions: {
+            'stacktrace-link': [[1569783600, 1]],
+          },
+          views: [[1569783600, 1]],
+        },
+      });
+
       Client.addMockResponse({
         url: `/sentry-apps/${sentryApp.slug}/`,
         body: sentryApp,
@@ -151,13 +210,61 @@ describe('Sentry Application Dashboard', function() {
       );
     });
 
-    it('Shows a permission error message', () => {
-      expect(wrapper.exists('LoadingError')).toBeTruthy();
+    it('does not show the installation stats or graph', () => {
+      expect(wrapper.exists('StatsSection')).toBeFalsy();
+      expect(wrapper.exists('BarChart')).toBeFalsy();
+    });
+
+    it('shows the error log', () => {
+      const errorLog = wrapper.find('PanelBody');
+      const errorLogText = errorLog.find('PanelItem').text();
+      // The mock response has 1 error
+      expect(errorLog.find('PanelItem')).toHaveLength(1);
+      // Make sure that all the info is displayed
+      expect(errorLogText).toEqual(
+        expect.stringContaining('https://example.com/webhook')
+      );
+      expect(errorLogText).toEqual(expect.stringContaining('This is an error'));
+      expect(errorLogText).toEqual(expect.stringContaining('400'));
+      expect(errorLogText).toEqual(expect.stringContaining('issue.assigned'));
+      expect(errorLogText).toEqual(expect.stringContaining('Test Org'));
+    });
+
+    it('shows an empty message if there are no errors', () => {
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/errors/`,
+        body: [],
+      });
+
+      wrapper = mount(
+        <SentryApplicationDashboard params={{appSlug: sentryApp.slug, orgId}} />,
+        TestStubs.routerContext()
+      );
+
+      expect(wrapper.find('PanelBody').exists('PanelItem')).toBeFalsy();
+      expect(wrapper.find('EmptyMessage').text()).toEqual(
+        expect.stringContaining('No errors found.')
+      );
+    });
+
+    it('does not show the integration views', () => {
+      const chart = wrapper.findWhere(h => h.text().includes('Integration Views'));
+      expect(chart.exists()).toBeFalsy();
     });
 
-    it('Does not show the installs chart or error log', () => {
-      expect(wrapper.exists('StackedBarChart')).toBeFalsy();
-      expect(wrapper.findWhere(h => h.text() === 'Error Log').exists()).toBeFalsy();
+    it('shows the component interactions in a line chart', () => {
+      const chart = wrapper
+        .find('Panel')
+        .filterWhere(h => h.text().includes('Component Interactions'))
+        .find('LineChart');
+      const chartSeries = chart.props().series;
+
+      expect(chart.exists()).toBeTruthy();
+      expect(chartSeries).toHaveLength(1);
+      expect(chartSeries).toContainEqual({
+        data: [{name: 1569783600 * 1000, value: 1}],
+        seriesName: 'stacktrace-link',
+      });
     });
   });
 });
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 9eca8966ab..6a5fe47110 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -214,6 +214,13 @@ describe('OrganizationIntegrations', () => {
           body: [sentryApp],
         });
 
+        const sentryAppInteractionRequest = Client.addMockResponse({
+          url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+          method: 'POST',
+          statusCode: 200,
+          body: {},
+        });
+
         wrapper = mountWithTheme(
           <OrganizationIntegrations organization={org} params={params} />,
           routerContext
@@ -227,6 +234,16 @@ describe('OrganizationIntegrations', () => {
           onInstall: expect.any(Function),
           organization: org,
         });
+
+        expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
+          `/sentry-apps/${sentryApp.slug}/interaction/`,
+          expect.objectContaining({
+            method: 'POST',
+            data: {
+              tsdbField: 'sentry_app_viewed',
+            },
+          })
+        );
       });
 
       it('Opens the integration dialog on install', function() {
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
index 847ca78926..f001901f87 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
@@ -41,12 +41,21 @@ describe('Sentry App Installations', function() {
   });
 
   describe('when installing', () => {
+    let sentryAppInteractionRequest;
+
     beforeEach(() => {
       Client.addMockResponse({
         url: `/organizations/${org.slug}/sentry-app-installations/`,
         method: 'POST',
         body: install,
       });
+
+      sentryAppInteractionRequest = Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/interaction/`,
+        method: 'POST',
+        statusCode: 200,
+        body: {},
+      });
     });
 
     it('disallows installation when already installed', () => {
@@ -68,6 +77,16 @@ describe('Sentry App Installations', function() {
           isInstalled: false,
         })
       );
+
+      expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
+        `/sentry-apps/${sentryApp.slug}/interaction/`,
+        expect.objectContaining({
+          method: 'POST',
+          data: {
+            tsdbField: 'sentry_app_viewed',
+          },
+        })
+      );
     });
 
     it('sentry app is shown as installed', async () => {
@@ -95,6 +114,15 @@ describe('Sentry App Installations', function() {
           isInstalled: false,
         })
       );
+      expect(sentryAppInteractionRequest).toHaveBeenCalledWith(
+        `/sentry-apps/${sentryApp.slug}/interaction/`,
+        expect.objectContaining({
+          method: 'POST',
+          data: {
+            tsdbField: 'sentry_app_viewed',
+          },
+        })
+      );
       wrapper.instance().handleInstall(sentryApp);
       await tick();
       expect(window.location.assign).toHaveBeenCalledWith(
diff --git a/tests/sentry/api/endpoints/test_sentry_app_interaction.py b/tests/sentry/api/endpoints/test_sentry_app_interaction.py
new file mode 100644
index 0000000000..dd7b4cc53b
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_interaction.py
@@ -0,0 +1,150 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class SentryAppInteractionTest(APITestCase):
+    def setUp(self):
+        self.superuser = self.create_user(email="superuser@example.com", is_superuser=True)
+        self.user = self.create_user(email="user@example.com")
+        self.org = self.create_organization(owner=self.user)
+
+        self.published_app = self.create_sentry_app(
+            name="Published App",
+            organization=self.org,
+            published=True,
+            schema={"elements": [self.create_issue_link_schema()]},
+        )
+        self.unowned_published_app = self.create_sentry_app(
+            name="Unowned Published App", organization=self.create_organization(), published=True
+        )
+        self.owned_url = reverse(
+            "sentry-api-0-sentry-app-interaction", args=[self.published_app.slug]
+        )
+        self.unowned_url = reverse(
+            "sentry-api-0-sentry-app-interaction", args=[self.unowned_published_app.slug]
+        )
+
+
+class GetSentryAppInteractionTest(SentryAppInteractionTest):
+    def test_superuser_sees_unowned_interactions(self):
+        self.login_as(user=self.superuser, superuser=True)
+
+        response = self.client.get(self.unowned_url, format="json")
+        assert response.status_code == 200
+        assert len(response.data["views"]) > 0
+        assert response.data["component_interactions"] == {}
+
+    def test_user_sees_owned_interactions(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.owned_url, format="json")
+        assert response.status_code == 200
+        assert len(response.data["views"]) > 0
+        assert "issue-link" in response.data["component_interactions"]
+
+    def test_user_does_not_see_unowned_interactions(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.unowned_url, format="json")
+        assert response.status_code == 403
+        assert response.data["detail"] == "You do not have permission to perform this action."
+
+    def test_invalid_startend_throws_error(self):
+        self.login_as(self.user)
+
+        url = "%s?since=1569523068&until=1566931068" % self.owned_url
+        response = self.client.get(url, format="json")
+        assert response.status_code == 500
+
+
+class PostSentryAppInteractionTest(SentryAppInteractionTest):
+    def test_not_logged_in_not_allowed(self):
+        body = {"tsdbField": "sentry_app_viewed"}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 401
+        assert response.data["detail"] == "Authentication credentials were not provided."
+
+    def test_missing_tsdb_field(self):
+        self.login_as(self.user)
+        body = {}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 400
+        assert (
+            response.data["detail"]
+            == "The tsdbField must be one of: sentry_app_viewed, sentry_app_component_interacted"
+        )
+
+    def test_incorrect_tsdb_field(self):
+        self.login_as(self.user)
+        body = {"tsdbField": "wrong"}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 400
+        assert (
+            response.data["detail"]
+            == "The tsdbField must be one of: sentry_app_viewed, sentry_app_component_interacted"
+        )
+
+    def test_missing_component_type(self):
+        self.login_as(self.user)
+        body = {"tsdbField": "sentry_app_component_interacted"}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 400
+        assert response.data[
+            "detail"
+        ] == "The field componentType is required and must be one of %s" % [
+            "stacktrace-link",
+            "issue-link",
+        ]
+
+    def test_incorrect_component_type(self):
+        self.login_as(self.user)
+        body = {"tsdbField": "sentry_app_component_interacted", "componentType": "wrong"}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 400
+        assert response.data[
+            "detail"
+        ] == "The field componentType is required and must be one of %s" % [
+            "stacktrace-link",
+            "issue-link",
+        ]
+
+    def test_allows_logged_in_user_who_doesnt_own_app(self):
+        self.login_as(self.user)
+        body = {"tsdbField": "sentry_app_component_interacted", "componentType": "issue-link"}
+        response = self.client.post(
+            self.unowned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 201
+
+        body = {"tsdbField": "sentry_app_viewed"}
+        response = self.client.post(
+            self.unowned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 201
+
+    def test_allows_logged_in_user_who_does_own_app(self):
+        self.login_as(self.user)
+        body = {"tsdbField": "sentry_app_component_interacted", "componentType": "issue-link"}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 201
+
+        body = {"tsdbField": "sentry_app_viewed"}
+        response = self.client.post(
+            self.owned_url, body, headers={"Content-Type": "application/json"}
+        )
+        assert response.status_code == 201
