commit 3888beadc216747960c95c7a494f471d5ef6343a
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jul 5 15:36:00 2018 -0700

    Ref(jra): Use 'Jira' not 'JIRA' (#8919)

diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 47a39c2d86..eb89b3dee0 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -42,7 +42,7 @@ class IssueBasicMixin(object):
         >>>{'title': 'TypeError: Object [object Object] has no method "updateFrom"''}
 
         to `create_issue`, which handles creation of the issue
-        in JIRA, VSTS, Github, etc
+        in Jira, VSTS, GitHub, etc
         """
         event = group.get_latest_event()
         if event is not None:
diff --git a/src/sentry/integrations/jira/configure.py b/src/sentry/integrations/jira/configure.py
index b5e9677934..69aab5c995 100644
--- a/src/sentry/integrations/jira/configure.py
+++ b/src/sentry/integrations/jira/configure.py
@@ -11,7 +11,7 @@ from sentry.models import OrganizationIntegration, ProjectIntegration
 class JiraConfigForm(forms.Form):
     organizations = forms.TypedMultipleChoiceField(
         label='Enabled Sentry Organizations',
-        help_text="Select which Sentry organizations the JIRA Integration is enabled for. Note, removing the integration from an organization will clear it's settings.",
+        help_text="Select which Sentry organizations the Jira Integration is enabled for. Note, removing the integration from an organization will clear it's settings.",
         coerce=int,
         choices=tuple(),
         required=False,
@@ -56,7 +56,7 @@ class JiraConfigureView(BaseView):
         enabled_orgs = form.cleaned_data['organizations']
         disabled_orgs = list(set(o.id for o in organizations) - set(enabled_orgs))
 
-        # Remove organization and project JIRA integrations not in the set of
+        # Remove organization and project Jira integrations not in the set of
         # enabled organizations
         OrganizationIntegration.objects.filter(
             integration__provider='jira',
diff --git a/src/sentry/integrations/jira/installed.py b/src/sentry/integrations/jira/installed.py
index 290ffecd82..eeca075336 100644
--- a/src/sentry/integrations/jira/installed.py
+++ b/src/sentry/integrations/jira/installed.py
@@ -23,8 +23,8 @@ class JiraInstalledEndpoint(Endpoint):
         data = JiraIntegrationProvider().build_integration(state)
         integration = ensure_integration('jira', data)
 
-        # Sync integration metadata from JIRA. This msut be executed *after*
-        # the integration has been isntalled on JIRA as the access tokens will
+        # Sync integration metadata from Jira. This msut be executed *after*
+        # the integration has been isntalled on Jira as the access tokens will
         # not work until then.
         sync_metadata.apply_async([integration.get_installation()], countdown=10)
 
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index eab463fc32..788a9c0b3a 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -28,14 +28,14 @@ metadata = IntegrationMetadata(
     description='Sync Sentry and JIRA issues.',
     author='The Sentry Team',
     noun=_('Instance'),
-    issue_url='https://github.com/getsentry/sentry/issues/new?title=JIRA%20Integration:%20&labels=Component%3A%20Integrations',
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=Jira%20Integration:%20&labels=Component%3A%20Integrations',
     source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/jira',
     aspects={
         'alert_link': alert_link,
     },
 )
 
-# A list of common builtin custom field types for JIRA for easy reference.
+# A list of common builtin custom field types for Jira for easy reference.
 JIRA_CUSTOM_FIELD_TYPES = {
     'select': 'com.atlassian.jira.plugin.system.customfieldtypes:select',
     'textarea': 'com.atlassian.jira.plugin.system.customfieldtypes:textarea',
@@ -51,17 +51,17 @@ class JiraIntegration(Integration, IssueSyncMixin):
                 'name': 'resolve_status',
                 'type': 'choice',
                 'allowEmpty': True,
-                'label': _('JIRA Resolved Status'),
+                'label': _('Jira Resolved Status'),
                 'placeholder': _('Select a Status'),
-                'help': _('Declares what the linked JIRA ticket workflow status should be transitioned to when the Sentry issue is resolved.'),
+                'help': _('Declares what the linked Jira ticket workflow status should be transitioned to when the Sentry issue is resolved.'),
             },
             {
                 'name': 'unresolve_status',
                 'type': 'choice',
                 'allowEmpty': True,
-                'label': _('JIRA Un-Resolved Status'),
+                'label': _('Jira Un-Resolved Status'),
                 'placeholder': _('Select a Status'),
-                'help': _('Declares what the linked JIRA ticket workflow status should be transitioned to when the Sentry issue is unresolved.'),
+                'help': _('Declares what the linked Jira ticket workflow status should be transitioned to when the Sentry issue is unresolved.'),
             },
             {
                 'name': 'resolve_when',
@@ -69,7 +69,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
                 'allowEmpty': True,
                 'label': _('Resolve in Sentry When'),
                 'placeholder': _('Select a Status'),
-                'help': _('When a JIRA ticket is transitioned to this status, trigger resolution of the Sentry issue.'),
+                'help': _('When a Jira ticket is transitioned to this status, trigger resolution of the Sentry issue.'),
             },
             {
                 'name': 'unresolve_when',
@@ -77,25 +77,25 @@ class JiraIntegration(Integration, IssueSyncMixin):
                 'allowEmpty': True,
                 'label': _('Un-Resolve in Sentry When'),
                 'placeholder': _('Select a Status'),
-                'help': _('When a JIRA ticket is transitioned to this status, mark the Sentry issue as unresolved.'),
+                'help': _('When a Jira ticket is transitioned to this status, mark the Sentry issue as unresolved.'),
             },
             {
                 'name': 'sync_comments',
                 'type': 'boolean',
-                'label': _('Post Comments to JIRA'),
-                'help': _('Synchronize comments from Sentry issues to linked JIRA tickets.'),
+                'label': _('Post Comments to Jira'),
+                'help': _('Synchronize comments from Sentry issues to linked Jira tickets.'),
             },
             {
                 'name': 'sync_forward_assignment',
                 'type': 'boolean',
-                'label': _('Synchronize Assignment to JIRA'),
-                'help': _('When assigning something in Sentry, the linked JIRA ticket will have the associated JIRA user assigned.'),
+                'label': _('Synchronize Assignment to Jira'),
+                'help': _('When assigning something in Sentry, the linked Jira ticket will have the associated Jira user assigned.'),
             },
             {
                 'name': 'sync_reverse_assignment',
                 'type': 'boolean',
                 'label': _('Synchronize Assignment to Sentry'),
-                'help': _('When assigning a user to a Linked JIRA ticket, the associated Sentry user will be assigned to the Sentry issue.'),
+                'help': _('When assigning a user to a Linked Jira ticket, the associated Sentry user will be assigned to the Sentry issue.'),
             },
         ]
 
@@ -129,7 +129,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
         self.model.name = server_info['serverTitle']
 
-        # There is no JIRA instance icon (there is a favicon, but it doesn't seem
+        # There is no Jira instance icon (there is a favicon, but it doesn't seem
         # possible to query that with the API). So instead we just use the first
         # project Icon.
         if len(projects) > 0:
@@ -200,7 +200,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
     def build_dynamic_field(self, group, field_meta):
         """
-        Builds a field based on JIRA's meta field information
+        Builds a field based on Jira's meta field information
         """
         schema = field_meta['schema']
 
@@ -273,7 +273,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
             resp = client.get_create_meta(params.get('project'))
         except ApiUnauthorized:
             raise IntegrationError(
-                'JIRA returned: Unauthorized. '
+                'Jira returned: Unauthorized. '
                 'Please check your configuration settings.'
             )
 
@@ -281,7 +281,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
             meta = resp['projects'][0]
         except IndexError:
             raise IntegrationError(
-                'Error in JIRA configuration, no projects found.'
+                'Error in Jira configuration, no projects found.'
             )
 
         # check if the issuetype was passed as a parameter
@@ -319,14 +319,14 @@ class JiraIntegration(Integration, IssueSyncMixin):
             }
         ]
 
-        # title is renamed to summary before sending to JIRA
+        # title is renamed to summary before sending to Jira
         standard_fields = [f['name'] for f in fields] + ['summary']
 
         # TODO(jess): are we going to allow ignored fields?
         # ignored_fields = (self.get_option('ignored_fields', group.project) or '').split(',')
         ignored_fields = set()
 
-        # apply ordering to fields based on some known built-in JIRA fields.
+        # apply ordering to fields based on some known built-in Jira fields.
         # otherwise weird ordering occurs.
         anti_gravity = {"priority": -150, "fixVersions": -125, "components": -100, "security": -50}
 
@@ -365,7 +365,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
         jira_project = data.get('project')
         if not jira_project:
-            raise IntegrationError('JIRA project is required.')
+            raise IntegrationError('Jira project is required.')
 
         meta = client.get_create_meta_for_project(jira_project)
 
@@ -420,7 +420,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
                 cleaned_data[field] = v
 
         if not (isinstance(cleaned_data['issuetype'], dict) and 'id' in cleaned_data['issuetype']):
-            # something fishy is going on with this field, working on some JIRA
+            # something fishy is going on with this field, working on some Jira
             # instances, and some not.
             # testing against 5.1.5 and 5.1.4 does not convert (perhaps is no longer included
             # in the projectmeta API call, and would normally be converted in the
@@ -494,7 +494,7 @@ class JiraIntegration(Integration, IssueSyncMixin):
 
 class JiraIntegrationProvider(IntegrationProvider):
     key = 'jira'
-    name = 'JIRA'
+    name = 'Jira'
     metadata = metadata
     integration_cls = JiraIntegration
 
diff --git a/src/sentry/integrations/jira/search.py b/src/sentry/integrations/jira/search.py
index 3eacf8ad4e..22ac855738 100644
--- a/src/sentry/integrations/jira/search.py
+++ b/src/sentry/integrations/jira/search.py
@@ -68,7 +68,7 @@ class JiraSearchEndpoint(OrganizationEndpoint):
                 jira_query['username'] = query.encode('utf8')
                 jira_query.pop(
                     'issueKey', False
-                )  # some reason JIRA complains if this key is in the URL.
+                )  # some reason Jira complains if this key is in the URL.
                 jira_query['project'] = request.GET.get('project', '').encode('utf8')
             elif is_user_picker:
                 is_xml = False
@@ -114,7 +114,7 @@ class JiraSearchEndpoint(OrganizationEndpoint):
                         if user.get('name'):
                             users.append(self._get_formatted_user(user))
 
-            # if JIRA user doesn't have proper permission for user api,
+            # if Jira user doesn't have proper permission for user api,
             # try the assignee api instead
             if not users and is_user_api:
                 try:
@@ -123,7 +123,7 @@ class JiraSearchEndpoint(OrganizationEndpoint):
                         jira_query.get('username'),
                     )
                 except (ApiUnauthorized, ApiError):
-                    return Response({'detail': 'Unable to fetch users from JIRA'}, status=400)
+                    return Response({'detail': 'Unable to fetch users from Jira'}, status=400)
 
                 for user in autocomplete_response:
                     if user.get('name'):
diff --git a/src/sentry/templates/sentry/integrations/jira-config.html b/src/sentry/templates/sentry/integrations/jira-config.html
index aff3a4fe68..1e7df66625 100644
--- a/src/sentry/templates/sentry/integrations/jira-config.html
+++ b/src/sentry/templates/sentry/integrations/jira-config.html
@@ -34,8 +34,8 @@
       <strong>Saved!</strong>
     </p>
     <p>
-      The Sentry JIRA integration is now enabled for the selected
-      organizations. Return to your sentry organization to configure the JIRA
+      The Sentry Jira integration is now enabled for the selected
+      organizations. Return to your sentry organization to configure the Jira
       integration for your organization.
     </p>
   </div>
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 9087cd3bc3..8bbe671e2a 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -316,7 +316,7 @@ class JiraIntegrationTest(APITestCase):
 
         integration = Integration.objects.create(
             provider='jira',
-            name='Example JIRA',
+            name='Example Jira',
         )
         integration.add_organization(org.id)
 
@@ -363,7 +363,7 @@ class JiraIntegrationTest(APITestCase):
 
         integration = Integration.objects.create(
             provider='jira',
-            name='Example JIRA',
+            name='Example Jira',
         )
         integration.add_organization(org.id)
 
@@ -387,7 +387,7 @@ class JiraIntegrationTest(APITestCase):
 
         integration = Integration.objects.create(
             provider='jira',
-            name='Example JIRA',
+            name='Example Jira',
         )
         integration.add_organization(org.id)
 
diff --git a/tests/sentry/integrations/jira/test_search_endpoint.py b/tests/sentry/integrations/jira/test_search_endpoint.py
index ddc198eec5..a2dbd4aa82 100644
--- a/tests/sentry/integrations/jira/test_search_endpoint.py
+++ b/tests/sentry/integrations/jira/test_search_endpoint.py
@@ -44,7 +44,7 @@ class JiraSearchEndpointTest(APITestCase):
 
         integration = Integration.objects.create(
             provider='jira',
-            name='Example JIRA',
+            name='Example Jira',
         )
         integration.add_organization(org.id)
 
diff --git a/tests/sentry/integrations/jira/test_webhooks.py b/tests/sentry/integrations/jira/test_webhooks.py
index 1145905d96..c08db43075 100644
--- a/tests/sentry/integrations/jira/test_webhooks.py
+++ b/tests/sentry/integrations/jira/test_webhooks.py
@@ -66,7 +66,7 @@ class JiraSearchEndpointTest(APITestCase):
 
         integration = Integration.objects.create(
             provider='jira',
-            name='Example JIRA',
+            name='Example Jira',
         )
         integration.add_organization(org.id)
 
@@ -89,7 +89,7 @@ class JiraSearchEndpointTest(APITestCase):
 
         integration = Integration.objects.create(
             provider='jira',
-            name='Example JIRA',
+            name='Example Jira',
         )
         integration.add_organization(org.id)
 
