commit 91ed57040c21be3f3c1507a4158216220f7979d3
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Sep 1 16:39:53 2015 -0700

    Should create a GroupEmailThread on first email always
    
    Not just on reply emails

diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index d776b30f81..29c554d043 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -174,19 +174,21 @@ class MessageBuilder(object):
         subject = self.subject
 
         if self.reply_reference is not None:
-            # Only send emails that reference Group objects for now
-            assert isinstance(self.reply_reference, Group)
+            reference = self.reply_reference
+            subject = 'Re: %s' % subject
+        else:
+            reference = self.reference
+
+        if isinstance(reference, Group):
             thread, created = GroupEmailThread.objects.get_or_create(
                 email=to,
-                group=self.reply_reference,
+                group=reference,
                 defaults={
-                    'project': self.reply_reference.project,
+                    'project': reference.project,
                     'msgid': message_id,
-                }
+                },
             )
-
             if not created:
-                subject = 'Re: %s' % subject
                 headers.setdefault('In-Reply-To', thread.msgid)
                 headers.setdefault('References', thread.msgid)
 
diff --git a/tests/sentry/models/activity/tests.py b/tests/sentry/models/activity/tests.py
index a9e8fa5e93..32c98a12ab 100644
--- a/tests/sentry/models/activity/tests.py
+++ b/tests/sentry/models/activity/tests.py
@@ -30,7 +30,7 @@ class SendNotificationTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject == '[Sentry] [foo Bar] ERROR: Foo bar'
+        assert msg.subject == 'Re: [Sentry] [foo Bar] ERROR: Foo bar'
         assert msg.to == [self.user.email]
 
     def test_release(self):
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index ffebcbae7b..822e4fb368 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -112,6 +112,40 @@ class MessageBuilderTest(TestCase):
             'text/html',
         )
 
+    @patch('sentry.utils.email.make_msgid')
+    def test_add_groupemailthread(self, make_msgid):
+        make_msgid.return_value = 'abc123'
+
+        msg = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+            reference=self.group,
+        )
+        msg.send(['foo@example.com'])
+
+        assert len(mail.outbox) == 1
+
+        out = mail.outbox[0]
+        assert out.to == ['foo@example.com']
+        assert out.subject == 'Test', 'First message should not have Re: prefix'
+        assert out.extra_headers['Message-Id'] == 'abc123'
+        assert 'In-Reply-To' not in out.extra_headers
+        assert 'References' not in out.extra_headers
+        assert out.body == 'hello world'
+        assert len(out.alternatives) == 1
+        assert out.alternatives[0] == (
+            '<html><body><b>hello world</b></body></html>',
+            'text/html',
+        )
+
+        # Our new EmailThread row was added
+        assert GroupEmailThread.objects.count() == 1
+        thread = GroupEmailThread.objects.all()[0]
+        assert thread.msgid == 'abc123'
+        assert thread.email == 'foo@example.com'
+        assert thread.group == self.group
+
     @patch('sentry.utils.email.make_msgid')
     def test_reply_reference(self, make_msgid):
         make_msgid.return_value = 'abc123'
@@ -129,7 +163,7 @@ class MessageBuilderTest(TestCase):
 
         out = mail.outbox[0]
         assert out.to == ['foo@example.com']
-        assert out.subject == 'Test', 'First message should not have Re: prefix'
+        assert out.subject == 'Re: Test'
         assert out.extra_headers['Message-Id'] == 'abc123'
         assert 'In-Reply-To' not in out.extra_headers
         assert 'References' not in out.extra_headers
