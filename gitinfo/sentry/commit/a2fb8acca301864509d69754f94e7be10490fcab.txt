commit a2fb8acca301864509d69754f94e7be10490fcab
Author: Mark Story <mark@sentry.io>
Date:   Thu Oct 10 10:09:09 2019 -0400

    fix(discover2) Persist the current sort to saved queries (#15015)
    
    The current sort order should be saved when a query is created or
    updated.
    
    Refs SEN-1133

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index a53cc79893..9eaa837541 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -47,23 +47,31 @@ const decodeFields = (location: Location): Array<Field> => {
   return parsed;
 };
 
-const fromSorts = (sorts: Array<string>): Array<Sort> => {
-  return sorts.reduce((acc: Array<Sort>, sort: string) => {
-    sort = sort.trim();
+const parseSort = (sort: string): Sort => {
+  sort = sort.trim();
 
-    if (sort.startsWith('-')) {
-      acc.push({
-        kind: 'desc',
-        field: sort.substring(1),
-      });
-      return acc;
-    }
+  if (sort.startsWith('-')) {
+    return {
+      kind: 'desc',
+      field: sort.substring(1),
+    };
+  }
 
-    acc.push({
-      kind: 'asc',
-      field: sort,
-    });
+  return {
+    kind: 'asc',
+    field: sort,
+  };
+};
+
+const fromSorts = (sorts: string | string[] | undefined): Array<Sort> => {
+  if (sorts === undefined) {
+    return [];
+  }
+
+  sorts = isString(sorts) ? [sorts] : sorts;
 
+  return sorts.reduce((acc: Array<Sort>, sort: string) => {
+    acc.push(parseSort(sort));
     return acc;
   }, []);
 };
@@ -89,7 +97,7 @@ const encodeSort = (sort: Sort): string => {
       return String(sort.field);
     }
     default: {
-      throw new Error('unexpected sort type');
+      throw new Error('Unexpected sort type');
     }
   }
 };
@@ -280,12 +288,13 @@ class EventView {
       start: saved.start,
       end: saved.end,
       range: saved.range,
-      sorts: [],
+      sorts: fromSorts(saved.orderby),
       tags: [],
     });
   }
 
   toNewQuery(): NewQuery {
+    const orderby = this.sorts ? encodeSorts(this.sorts)[0] : undefined;
     return {
       id: this.id,
       version: 2,
@@ -297,6 +306,7 @@ class EventView {
       range: this.range,
       fields: this.fields.map(item => item.field),
       fieldnames: this.fields.map(item => item.title),
+      orderby,
     };
   }
 
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index ef4e2abd4c..cc98ae4080 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -9,6 +9,7 @@ describe('EventView.fromSavedQuery()', function() {
       range: '14d',
       start: '',
       end: '',
+      orderby: '-timestamp',
     };
     const eventView = EventView.fromSavedQuery(saved);
     expect(eventView.fields).toEqual([
@@ -19,6 +20,7 @@ describe('EventView.fromSavedQuery()', function() {
     expect(eventView.range).toEqual('14d');
     expect(eventView.start).toEqual('');
     expect(eventView.end).toEqual('');
+    expect(eventView.sorts).toEqual([{field: 'timestamp', kind: 'desc'}]);
   });
 
   it('maps equality conditions', function() {
@@ -145,3 +147,30 @@ describe('EventView.getEventsAPIPayload()', function() {
     expect(eventView.getEventsAPIPayload(location).query).toEqual('event.type:csp');
   });
 });
+
+describe('EventView.toNewQuery()', function() {
+  it('outputs the right fields', function() {
+    const eventView = new EventView({
+      id: '2',
+      name: 'best query',
+      fields: [
+        {field: 'count()', title: 'count'},
+        {field: 'project.id', title: 'project'},
+      ],
+      query: 'event.type:error',
+      range: '14d',
+      start: '',
+      end: '',
+      sorts: [{field: 'timestamp', kind: 'desc'}],
+    });
+    const output = eventView.toNewQuery();
+    expect(output.fields).toEqual(['count()', 'project.id']);
+    expect(output.fieldnames).toEqual(['count', 'project']);
+    expect(output.name).toEqual(eventView.name);
+    expect(output.range).toEqual('14d');
+    expect(output.start).toEqual('');
+    expect(output.end).toEqual('');
+    expect(output.orderby).toEqual('-timestamp');
+    expect(output.id).toEqual('2');
+  });
+});
