commit 3363089711203bd997c3b2e9e9d69a59547f7242
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jul 25 12:34:30 2016 -0700

    Harden/correct IP blacklist checks (#3787)
    
    It's possible to use an octal formatted IP address to hit, I think a bug
    in Python, that causes a 127.0.0.1 bound IP to resolve to 177.0.0.1
    instead when checking with socket.gethostbyname.
    
    Also changes this to check all IP addresses for a single lookup to make
    sure there isn't a mix of bad and good IPs on the A records.

diff --git a/src/sentry/http.py b/src/sentry/http.py
index 0bd13a03f7..6d958762b3 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -59,18 +59,40 @@ def is_valid_url(url):
     if parsed.hostname == server_hostname:
         return True
 
+    # NOTE: The use of `socket.gethostbyname` is slightly flawed.
+    # `gethostbyname` doesn't handle octal IP addresses correctly, nor
+    # does it fetch all of the IP addresses for the record.
+    # `getaddrinfo` does the correct thing with octals here, and also returns all
+    # ip addresses for the hostname.
+    #
+    # WARNING: This behavior is only correct on Linux. On OSX, `getaddrinfo` also
+    # returns the wrong IP.
+    #
+    # The following should all technically resolve to `127.0.0.1`:
+    # Python 2.7.11 Linux
+    # >>> socket.gethostbyname('0177.0000.0000.0001')
+    # '177.0.0.1'
+    # >>> socket.getaddrinfo('0177.0000.0000.0001', 0)[0]
+    # (2, 1, 6, '', ('127.0.0.1', 0))
+    # Python 2.7.11 macOS
+    # >>> socket.gethostbyname('0177.0000.0000.0001')
+    # '177.0.0.1'
+    # >>> socket.getaddrinfo('0177.0000.0000.0001', None)[0]
+    # (2, 2, 17, '', ('177.0.0.1', 0))
     try:
-        ip_address = socket.gethostbyname(parsed.hostname)
+        ip_addresses = set(addr for _, _, _, _, addr in socket.getaddrinfo(parsed.hostname, 0))
     except socket.gaierror:
         return False
 
-    if ip_address == server_hostname:
-        return True
+    for addr in ip_addresses:
+        ip_address = addr[0]
+        if ip_address == server_hostname:
+            return True
 
-    ip_network = IPNetwork(ip_address)
-    for addr in DISALLOWED_IPS:
-        if ip_network in addr:
-            return False
+        ip_network = IPNetwork(ip_address)
+        for addr in DISALLOWED_IPS:
+            if ip_network in addr:
+                return False
 
     return True
 
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index 2e61f214c1..84be150909 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import platform
 import responses
 import pytest
 
@@ -13,9 +14,9 @@ from sentry.testutils import TestCase
 
 class HttpTest(TestCase):
     @responses.activate
-    @patch('socket.gethostbyname')
-    def test_simple(self, mock_gethostbyname):
-        mock_gethostbyname.return_value = '81.0.0.1'
+    @patch('socket.getaddrinfo')
+    def test_simple(self, mock_getaddrinfo):
+        mock_getaddrinfo.return_value = [(2, 1, 6, '', ('81.0.0.1', 0))]
         responses.add(responses.GET, 'http://example.com', body='foo bar')
 
         resp = http.safe_urlopen('http://example.com')
@@ -29,6 +30,22 @@ class HttpTest(TestCase):
     # XXX(dcramer): we can't use responses here as it hooks Session.send
     # @responses.activate
     def test_ip_blacklist(self):
-        http.DISALLOWED_IPS = set([IPNetwork('127.0.0.1')])
+        http.DISALLOWED_IPS = set([IPNetwork('127.0.0.1'), IPNetwork('::1'), IPNetwork('10.0.0.0/8')])
         with pytest.raises(SuspiciousOperation):
             http.safe_urlopen('http://127.0.0.1')
+        with pytest.raises(SuspiciousOperation):
+            http.safe_urlopen('http://10.0.0.10')
+        with pytest.raises(SuspiciousOperation):
+            # '2130706433' is dword for '127.0.0.1'
+            http.safe_urlopen('http://2130706433')
+        with pytest.raises(SuspiciousOperation):
+            # ipv6
+            http.safe_urlopen('http://[::1]')
+
+    @pytest.mark.skipif(platform.system() == 'Darwin',
+                        reason='macOS is always broken, see comment in sentry/http.py')
+    def test_garbage_ip(self):
+        http.DISALLOWED_IPS = set([IPNetwork('127.0.0.1')])
+        with pytest.raises(SuspiciousOperation):
+            # '0177.0000.0000.0001' is an octal for '127.0.0.1'
+            http.safe_urlopen('http://0177.0000.0000.0001')
