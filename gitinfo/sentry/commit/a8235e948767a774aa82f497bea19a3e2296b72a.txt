commit a8235e948767a774aa82f497bea19a3e2296b72a
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Apr 22 10:27:51 2020 -0400

    feat(apm): Indicate errors in-line in the span view (#18025)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
index 79a04d8335..ffef5db126 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
@@ -1,28 +1,38 @@
 import React from 'react';
 import styled from '@emotion/styled';
 import PropTypes from 'prop-types';
+import * as ReactRouter from 'react-router';
 
-import {t} from 'app/locale';
+import {SentryTransactionEvent, Organization} from 'app/types';
+import {t, tn} from 'app/locale';
 import SearchBar from 'app/components/searchBar';
 import SentryTypes from 'app/sentryTypes';
 import {Panel} from 'app/components/panels';
 import space from 'app/styles/space';
 import EventView from 'app/utils/discover/eventView';
+import DiscoverQuery from 'app/utils/discover/discoverQuery';
+import {stringifyQueryObject, QueryResults} from 'app/utils/tokenizeSearch';
+import AlertMessage from 'app/components/alertMessage';
+import {TableData} from 'app/views/eventsV2/table/types';
+import withOrganization from 'app/utils/withOrganization';
 
-import {SentryTransactionEvent} from './types';
+import {ParsedTraceType} from './types';
+import {parseTrace, getTraceDateTimeRange} from './utils';
 import TraceView from './traceView';
 
-type PropType = {
+type Props = {
   orgId: string;
   event: SentryTransactionEvent;
   eventView: EventView;
-};
+  organization: Organization;
+} & ReactRouter.WithRouterProps;
 
 type State = {
+  parsedTrace: ParsedTraceType;
   searchQuery: string | undefined;
 };
 
-class SpansInterface extends React.Component<PropType, State> {
+class SpansInterface extends React.Component<Props, State> {
   static propTypes = {
     event: SentryTypes.Event.isRequired,
     orgId: PropTypes.string.isRequired,
@@ -30,33 +40,140 @@ class SpansInterface extends React.Component<PropType, State> {
 
   state: State = {
     searchQuery: undefined,
+    parsedTrace: parseTrace(this.props.event),
   };
 
+  static getDerivedStateFromProps(props: Props, state: State): State {
+    return {
+      ...state,
+      parsedTrace: parseTrace(props.event),
+    };
+  }
+
   handleSpanFilter = (searchQuery: string) => {
     this.setState({
       searchQuery: searchQuery || undefined,
     });
   };
 
+  renderTraceErrorsAlert({
+    isLoading,
+    numOfErrors,
+  }: {
+    isLoading: boolean;
+    numOfErrors: number;
+  }) {
+    if (isLoading) {
+      return null;
+    }
+
+    if (numOfErrors === 0) {
+      return null;
+    }
+
+    const label = tn(
+      'There is an error event associated with this transaction event.',
+      `There are %d error events associated with this transaction event.`,
+      numOfErrors
+    );
+
+    return (
+      <AlertMessageContainer>
+        <AlertMessage
+          alert={{
+            id: 'transaction-alert',
+            message: <span>{label}</span>,
+            type: 'error',
+          }}
+          system={false}
+          hideCloseButton
+        />
+      </AlertMessageContainer>
+    );
+  }
+
   render() {
-    const {event, orgId, eventView} = this.props;
+    const {event, orgId, eventView, location, organization} = this.props;
+    const {parsedTrace} = this.state;
+
+    // construct discover query to fetch error events associated with this transaction
+
+    const {start, end} = getTraceDateTimeRange({
+      start: parsedTrace.traceStartTimestamp,
+      end: parsedTrace.traceEndTimestamp,
+    });
+
+    const conditions: QueryResults = {
+      query: [],
+      'event.type': ['error'],
+      trace: [parsedTrace.traceID],
+    };
+
+    if (typeof event.title === 'string') {
+      conditions.transaction = [event.title];
+    }
+
+    const orgFeatures = new Set(organization.features);
+
+    const traceErrorsEventView = EventView.fromSavedQuery({
+      id: undefined,
+      name: `Errors related to transaction ${parsedTrace.rootSpanID}`,
+      fields: [
+        'title',
+        'project',
+        'timestamp',
+        'trace',
+        'trace.span',
+        'trace.parent_span',
+      ],
+      orderby: '-timestamp',
+      query: stringifyQueryObject(conditions),
+      // if an org has no global-views, we make an assumption that errors are collected in the same
+      // project as the current transaction event where spans are collected into
+      projects: orgFeatures.has('global-views') ? [] : [Number(event.projectID)],
+      version: 2,
+      start,
+      end,
+    });
 
     return (
       <div>
-        <StyledSearchBar
-          defaultQuery=""
-          query={this.state.searchQuery || ''}
-          placeholder={t('Search for spans')}
-          onSearch={this.handleSpanFilter}
-        />
-        <Panel>
-          <TraceView
-            event={event}
-            searchQuery={this.state.searchQuery}
-            orgId={orgId}
-            eventView={eventView}
-          />
-        </Panel>
+        <DiscoverQuery
+          location={location}
+          eventView={traceErrorsEventView}
+          orgSlug={orgId}
+        >
+          {({isLoading, tableData}) => {
+            const spansWithErrors = filterSpansWithErrors(parsedTrace, tableData);
+
+            const numOfErrors = spansWithErrors?.data.length || 0;
+
+            return (
+              <React.Fragment>
+                {this.renderTraceErrorsAlert({
+                  isLoading,
+                  numOfErrors,
+                })}
+                <StyledSearchBar
+                  defaultQuery=""
+                  query={this.state.searchQuery || ''}
+                  placeholder={t('Search for spans')}
+                  onSearch={this.handleSpanFilter}
+                />
+                <Panel>
+                  <TraceView
+                    event={event}
+                    searchQuery={this.state.searchQuery}
+                    orgId={orgId}
+                    eventView={eventView}
+                    parsedTrace={parsedTrace}
+                    spansWithErrors={spansWithErrors}
+                  />
+                </Panel>
+              </React.Fragment>
+            );
+          }}
+        </DiscoverQuery>
       </div>
     );
   }
@@ -66,4 +183,43 @@ const StyledSearchBar = styled(SearchBar)`
   margin-bottom: ${space(1)};
 `;
 
-export default SpansInterface;
+const AlertMessageContainer = styled('div')`
+  margin-bottom: ${space(1)};
+`;
+
+function filterSpansWithErrors(
+  parsedTrace: ParsedTraceType,
+  tableData: TableData | null | undefined
+): TableData | null | undefined {
+  if (!tableData) {
+    return undefined;
+  }
+
+  const data = tableData?.data ?? [];
+
+  const filtered = data.filter(row => {
+    const spanId = row['trace.span'] || '';
+
+    if (!spanId) {
+      return false;
+    }
+
+    if (spanId === parsedTrace.rootSpanID) {
+      return true;
+    }
+
+    const hasSpan =
+      parsedTrace.spans.findIndex(span => {
+        return spanId === span.span_id;
+      }) >= 0;
+
+    return hasSpan;
+  });
+
+  return {
+    ...tableData,
+    data: filtered,
+  };
+}
+
+export default ReactRouter.withRouter(withOrganization(SpansInterface));
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index ee367b4c81..235d1b0d5c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -9,6 +9,7 @@ import Count from 'app/components/count';
 import Tooltip from 'app/components/tooltip';
 import InlineSvg from 'app/components/inlineSvg';
 import EventView from 'app/utils/discover/eventView';
+import {TableDataRow} from 'app/views/eventsV2/table/types';
 
 import {
   toPercent,
@@ -182,6 +183,8 @@ type SpanBarProps = {
   toggleSpanTree: () => void;
   isCurrentSpanFilteredOut: boolean;
   eventView: EventView;
+  totalNumberOfErrors: number;
+  spanErrors: TableDataRow[];
 };
 
 type SpanBarState = {
@@ -221,7 +224,15 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
       return null;
     }
 
-    const {span, orgId, isRoot, eventView, trace} = this.props;
+    const {
+      span,
+      orgId,
+      isRoot,
+      eventView,
+      trace,
+      totalNumberOfErrors,
+      spanErrors,
+    } = this.props;
 
     return (
       <SpanDetail
@@ -230,6 +241,8 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
         isRoot={!!isRoot}
         eventView={eventView}
         trace={trace}
+        totalNumberOfErrors={totalNumberOfErrors}
+        spanErrors={spanErrors}
       />
     );
   };
@@ -374,10 +387,13 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   };
 
   renderTitle = () => {
-    const {span, treeDepth} = this.props;
+    const {span, treeDepth, spanErrors} = this.props;
 
-    const op = getSpanOperation(span) ? (
-      <strong>{`${getSpanOperation(span)} \u2014 `}</strong>
+    const operationName = getSpanOperation(span) ? (
+      <strong>
+        <OperationName spanErrors={spanErrors}>{getSpanOperation(span)}</OperationName>
+        {` \u2014 `}
+      </strong>
     ) : (
       ''
     );
@@ -395,7 +411,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
           }}
         >
           <span>
-            {op}
+            {operationName}
             {description}
           </span>
         </SpanBarTitle>
@@ -1017,4 +1033,8 @@ const Chevron = styled(InlineSvg)`
   margin-left: ${space(0.25)};
 `;
 
+const OperationName = styled('span')<{spanErrors: TableDataRow[]}>`
+  color: ${p => (p.spanErrors.length ? p.theme.error : 'inherit')};
+`;
+
 export default SpanBar;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index c6e1401d53..7761e8d05a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -2,7 +2,7 @@ import React from 'react';
 import styled from '@emotion/styled';
 import map from 'lodash/map';
 
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import DateTime from 'app/components/dateTime';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -16,6 +16,9 @@ import {generateEventSlug, eventDetailsRoute} from 'app/utils/discover/urls';
 import EventView from 'app/utils/discover/eventView';
 import getDynamicText from 'app/utils/getDynamicText';
 import {assert} from 'app/types/utils';
+import AlertMessage from 'app/components/alertMessage';
+import {TableDataRow} from 'app/views/eventsV2/table/types';
+import Link from 'app/components/links/link';
 
 import {ProcessedSpanType, RawSpanType, ParsedTraceType} from './types';
 import {isGapSpan, getTraceDateTimeRange} from './utils';
@@ -33,6 +36,8 @@ type Props = {
   isRoot: boolean;
   eventView: EventView;
   trace: Readonly<ParsedTraceType>;
+  totalNumberOfErrors: number;
+  spanErrors: TableDataRow[];
 };
 
 type State = {
@@ -204,6 +209,86 @@ class SpanDetail extends React.Component<Props, State> {
     );
   }
 
+  renderSpanErrorMessage() {
+    const {orgId, spanErrors, totalNumberOfErrors, span, trace, eventView} = this.props;
+
+    if (spanErrors.length === 0 || totalNumberOfErrors === 0 || isGapSpan(span)) {
+      return null;
+    }
+
+    // invariant: spanErrors.length <= totalNumberOfErrors
+
+    const eventSlug = generateEventSlug(spanErrors[0]);
+
+    const {start, end} = getTraceDateTimeRange({
+      start: trace.traceStartTimestamp,
+      end: trace.traceEndTimestamp,
+    });
+
+    const errorsEventView = EventView.fromSavedQuery({
+      id: undefined,
+      name: `Error events associated with span ${span.span_id}`,
+      fields: ['title', 'project', 'issue', 'timestamp'],
+      orderby: '-timestamp',
+      query: `event.type:error trace:${span.trace_id} trace.span:${span.span_id}`,
+      projects: eventView.project,
+      version: 2,
+      start,
+      end,
+    });
+
+    const target =
+      spanErrors.length === 1
+        ? {
+            pathname: eventDetailsRoute({
+              orgSlug: orgId,
+              eventSlug,
+            }),
+          }
+        : errorsEventView.getResultsViewUrlTarget(orgId);
+
+    const message =
+      totalNumberOfErrors === 1 ? (
+        <Link to={target}>
+          <span>{t('An error event occurred in this span.')}</span>
+        </Link>
+      ) : spanErrors.length === totalNumberOfErrors ? (
+        <div>
+          {tct('[link] occurred in this span.', {
+            link: (
+              <Link to={target}>
+                <span>{t('%d error events', totalNumberOfErrors)}</span>
+              </Link>
+            ),
+          })}
+        </div>
+      ) : (
+        <div>
+          {tct('[link] occurred in this span.', {
+            link: (
+              <Link to={target}>
+                <span>
+                  {t('%d out of %d error events', spanErrors.length, totalNumberOfErrors)}
+                </span>
+              </Link>
+            ),
+          })}
+        </div>
+      );
+
+    return (
+      <AlertMessage
+        alert={{
+          id: `span-error-${span.span_id}`,
+          message,
+          type: 'error',
+        }}
+        system
+        hideCloseButton
+      />
+    );
+  }
+
   render() {
     const {span} = this.props;
 
@@ -225,51 +310,54 @@ class SpanDetail extends React.Component<Props, State> {
           event.stopPropagation();
         }}
       >
-        <table className="table key-value">
-          <tbody>
-            <Row title="Span ID" extra={this.renderTraversalButton()}>
-              {span.span_id}
-            </Row>
-            <Row title="Trace ID" extra={this.renderTraceButton()}>
-              {span.trace_id}
-            </Row>
-            <Row title="Parent Span ID">{span.parent_span_id || ''}</Row>
-            <Row title="Description">{span?.description ?? ''}</Row>
-            <Row title="Start Date">
-              {getDynamicText({
-                fixed: 'Mar 16, 2020 9:10:12 AM UTC',
-                value: (
-                  <React.Fragment>
-                    <DateTime date={startTimestamp * 1000} />
-                    {` (${startTimestamp})`}
-                  </React.Fragment>
-                ),
-              })}
-            </Row>
-            <Row title="End Date">
-              {getDynamicText({
-                fixed: 'Mar 16, 2020 9:10:13 AM UTC',
-                value: (
-                  <React.Fragment>
-                    <DateTime date={endTimestamp * 1000} />
-                    {` (${endTimestamp})`}
-                  </React.Fragment>
-                ),
-              })}
-            </Row>
-            <Row title="Duration">{durationString}</Row>
-            <Row title="Operation">{span.op || ''}</Row>
-            <Row title="Same Process as Parent">
-              {String(!!span.same_process_as_parent)}
-            </Row>
-            <Tags span={span} />
-            {map(span?.data ?? {}, (value, key) => (
-              <Row title={key} key={key}>
-                {JSON.stringify(value, null, 4) || ''}
+        {this.renderSpanErrorMessage()}
+        <SpanDetails>
+          <table className="table key-value">
+            <tbody>
+              <Row title="Span ID" extra={this.renderTraversalButton()}>
+                {span.span_id}
               </Row>
-            ))}
-          </tbody>
-        </table>
+              <Row title="Trace ID" extra={this.renderTraceButton()}>
+                {span.trace_id}
+              </Row>
+              <Row title="Parent Span ID">{span.parent_span_id || ''}</Row>
+              <Row title="Description">{span?.description ?? ''}</Row>
+              <Row title="Start Date">
+                {getDynamicText({
+                  fixed: 'Mar 16, 2020 9:10:12 AM UTC',
+                  value: (
+                    <React.Fragment>
+                      <DateTime date={startTimestamp * 1000} />
+                      {` (${startTimestamp})`}
+                    </React.Fragment>
+                  ),
+                })}
+              </Row>
+              <Row title="End Date">
+                {getDynamicText({
+                  fixed: 'Mar 16, 2020 9:10:13 AM UTC',
+                  value: (
+                    <React.Fragment>
+                      <DateTime date={endTimestamp * 1000} />
+                      {` (${endTimestamp})`}
+                    </React.Fragment>
+                  ),
+                })}
+              </Row>
+              <Row title="Duration">{durationString}</Row>
+              <Row title="Operation">{span.op || ''}</Row>
+              <Row title="Same Process as Parent">
+                {String(!!span.same_process_as_parent)}
+              </Row>
+              <Tags span={span} />
+              {map(span?.data ?? {}, (value, key) => (
+                <Row title={key} key={key}>
+                  {JSON.stringify(value, null, 4) || ''}
+                </Row>
+              ))}
+            </tbody>
+          </table>
+        </SpanDetails>
       </SpanDetailContainer>
     );
   }
@@ -283,10 +371,13 @@ const StyledButton = styled(Button)`
 
 const SpanDetailContainer = styled('div')`
   border-bottom: 1px solid ${p => p.theme.gray1};
-  padding: ${space(2)};
   cursor: auto;
 `;
 
+const SpanDetails = styled('div')`
+  padding: ${space(2)};
+`;
+
 const ValueTd = styled('td')`
   position: relative;
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
index 576fc8af71..767146b468 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
@@ -1,8 +1,9 @@
 import React from 'react';
 
 import EventView from 'app/utils/discover/eventView';
+import {TableData, TableDataRow} from 'app/views/eventsV2/table/types';
 
-import {SpanBoundsType, SpanGeneratedBoundsType} from './utils';
+import {SpanBoundsType, SpanGeneratedBoundsType, isGapSpan, getSpanID} from './utils';
 import {ProcessedSpanType, ParsedTraceType} from './types';
 import SpanBar from './spanBar';
 
@@ -22,6 +23,7 @@ type PropType = {
   isLast: boolean;
   isRoot?: boolean;
   isCurrentSpanFilteredOut: boolean;
+  spansWithErrors: TableData | null | undefined;
 };
 
 type State = {
@@ -47,6 +49,32 @@ class SpanGroup extends React.Component<PropType, State> {
     return this.props.renderedSpanChildren;
   };
 
+  getSpanErrors(): TableDataRow[] {
+    const {span, spansWithErrors} = this.props;
+
+    const spanID = getSpanID(span);
+
+    if (isGapSpan(span) || !spansWithErrors?.data || !spanID) {
+      return [];
+    }
+
+    return spansWithErrors.data.filter(row => {
+      return row['trace.span'] === spanID;
+    });
+  }
+
+  getTotalNumberOfErrors(): number {
+    const {spansWithErrors} = this.props;
+
+    const data = spansWithErrors?.data;
+
+    if (Array.isArray(data)) {
+      return data.length;
+    }
+
+    return 0;
+  }
+
   render() {
     const {
       spanBarColour,
@@ -84,6 +112,8 @@ class SpanGroup extends React.Component<PropType, State> {
           isLast={isLast}
           isRoot={isRoot}
           isCurrentSpanFilteredOut={isCurrentSpanFilteredOut}
+          totalNumberOfErrors={this.getTotalNumberOfErrors()}
+          spanErrors={this.getSpanErrors()}
         />
         {this.renderSpanChildren()}
       </React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index 66b64669ab..e2f9465ed7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -1,8 +1,10 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {SentryTransactionEvent} from 'app/types';
 import {t} from 'app/locale';
 import EventView from 'app/utils/discover/eventView';
+import {TableData} from 'app/views/eventsV2/table/types';
 
 import {
   ProcessedSpanType,
@@ -10,7 +12,6 @@ import {
   SpanChildrenLookupType,
   ParsedTraceType,
   GapSpanType,
-  SentryTransactionEvent,
 } from './types';
 import {
   boundsGenerator,
@@ -43,6 +44,7 @@ type PropType = {
   dragProps: DragManagerChildrenProps;
   filterSpans: FilterSpans | undefined;
   event: SentryTransactionEvent;
+  spansWithErrors: TableData | null | undefined;
 };
 
 class SpanTree extends React.Component<PropType> {
@@ -136,7 +138,7 @@ class SpanTree extends React.Component<PropType> {
     generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
     previousSiblingEndTimestamp: undefined | number;
   }): RenderedSpanTree => {
-    const {orgId, eventView, event} = this.props;
+    const {orgId, eventView, event, spansWithErrors} = this.props;
 
     const spanBarColour: string = pickSpanBarColour(getSpanOperation(span));
     const spanChildren: Array<RawSpanType> = childSpans?.[getSpanID(span)] ?? [];
@@ -249,6 +251,7 @@ class SpanTree extends React.Component<PropType> {
           numOfSpanChildren={0}
           renderedSpanChildren={[]}
           isCurrentSpanFilteredOut={isCurrentSpanFilteredOut}
+          spansWithErrors={spansWithErrors}
           spanBarHatch
         />
       ) : null;
@@ -277,6 +280,7 @@ class SpanTree extends React.Component<PropType> {
             spanBarColour={spanBarColour}
             isCurrentSpanFilteredOut={isCurrentSpanFilteredOut}
             spanBarHatch={false}
+            spansWithErrors={spansWithErrors}
           />
         </React.Fragment>
       ),
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index b08c1bc824..8021b6a09b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -1,28 +1,20 @@
 import React from 'react';
-import set from 'lodash/set';
 import pick from 'lodash/pick';
-import isNumber from 'lodash/isNumber';
 
 import {t} from 'app/locale';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
 import EventView from 'app/utils/discover/eventView';
+import {TableData} from 'app/views/eventsV2/table/types';
+import {SentryTransactionEvent} from 'app/types';
 
 import DragManager, {DragManagerChildrenProps} from './dragManager';
 import SpanTree from './spanTree';
-import {RawSpanType, SpanEntry, SentryTransactionEvent, ParsedTraceType} from './types';
-import {isValidSpanID, generateRootSpan, getSpanID, getSpanParentSpanID} from './utils';
+import {RawSpanType, ParsedTraceType} from './types';
+import {generateRootSpan, getSpanID, getTraceContext} from './utils';
 import TraceViewHeader from './header';
 import * as CursorGuideHandler from './cursorGuideHandler';
 
-export type TraceContextType = {
-  op?: string;
-  type?: 'trace';
-  span_id?: string;
-  trace_id?: string;
-  parent_span_id?: string;
-};
-
 type IndexedFusedSpan = {
   span: RawSpanType;
   indexed: string[];
@@ -45,12 +37,13 @@ export type FilterSpans = {
 type Props = {
   orgId: string;
   event: Readonly<SentryTransactionEvent>;
+  parsedTrace: ParsedTraceType;
   searchQuery: string | undefined;
   eventView: EventView;
+  spansWithErrors: TableData | null | undefined;
 };
 
 type State = {
-  parsedTrace: ParsedTraceType;
   filterSpans: FilterSpans | undefined;
 };
 
@@ -61,20 +54,12 @@ class TraceView extends React.PureComponent<Props, State> {
     super(props);
 
     this.state = {
-      parsedTrace: parseTrace(props.event),
       filterSpans: undefined,
     };
 
     this.filterOnSpans(props.searchQuery);
   }
 
-  static getDerivedStateFromProps(props: Props, state: State): State {
-    return {
-      ...state,
-      parsedTrace: parseTrace(props.event),
-    };
-  }
-
   componentDidUpdate(prevProps) {
     if (prevProps.searchQuery !== this.props.searchQuery) {
       this.filterOnSpans(this.props.searchQuery);
@@ -92,7 +77,7 @@ class TraceView extends React.PureComponent<Props, State> {
       return;
     }
 
-    const {parsedTrace} = this.state;
+    const {parsedTrace} = this.props;
 
     const {spans} = parsedTrace;
 
@@ -189,7 +174,7 @@ class TraceView extends React.PureComponent<Props, State> {
   );
 
   render() {
-    const {event} = this.props;
+    const {event, parsedTrace} = this.props;
 
     if (!getTraceContext(event)) {
       return (
@@ -199,8 +184,7 @@ class TraceView extends React.PureComponent<Props, State> {
       );
     }
 
-    const parsedTrace = this.state.parsedTrace;
-    const {orgId, eventView} = this.props;
+    const {orgId, eventView, spansWithErrors} = this.props;
 
     return (
       <DragManager interactiveLayerRef={this.minimapInteractiveRef}>
@@ -218,6 +202,7 @@ class TraceView extends React.PureComponent<Props, State> {
               dragProps={dragProps}
               filterSpans={this.state.filterSpans}
               orgId={orgId}
+              spansWithErrors={spansWithErrors}
             />
           </CursorGuideHandler.Provider>
         )}
@@ -226,113 +211,4 @@ class TraceView extends React.PureComponent<Props, State> {
   }
 }
 
-function getTraceContext(
-  event: Readonly<SentryTransactionEvent>
-): TraceContextType | undefined {
-  const traceContext: TraceContextType | undefined = event?.contexts?.trace;
-
-  return traceContext;
-}
-
-function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTraceType {
-  const spanEntry: SpanEntry | undefined = event.entries.find(
-    (entry: {type: string}) => entry.type === 'spans'
-  );
-
-  const spans: Array<RawSpanType> = spanEntry?.data ?? [];
-
-  const traceContext = getTraceContext(event);
-  const traceID = (traceContext && traceContext.trace_id) || '';
-  const rootSpanID = (traceContext && traceContext.span_id) || '';
-  const rootSpanOpName = (traceContext && traceContext.op) || 'transaction';
-  const parentSpanID = traceContext && traceContext.parent_span_id;
-
-  if (!spanEntry || spans.length <= 0) {
-    return {
-      op: rootSpanOpName,
-      childSpans: {},
-      traceStartTimestamp: event.startTimestamp,
-      traceEndTimestamp: event.endTimestamp,
-      traceID,
-      rootSpanID,
-      parentSpanID,
-      numOfSpans: 0,
-      spans: [],
-    };
-  }
-
-  // we reduce spans to become an object mapping span ids to their children
-
-  const init: ParsedTraceType = {
-    op: rootSpanOpName,
-    childSpans: {},
-    traceStartTimestamp: event.startTimestamp,
-    traceEndTimestamp: event.endTimestamp,
-    traceID,
-    rootSpanID,
-    parentSpanID,
-    numOfSpans: spans.length,
-    spans,
-  };
-
-  const reduced: ParsedTraceType = spans.reduce((acc, span) => {
-    if (!isValidSpanID(getSpanParentSpanID(span))) {
-      return acc;
-    }
-
-    const spanChildren: Array<RawSpanType> = acc.childSpans?.[span.parent_span_id!] ?? [];
-
-    spanChildren.push(span);
-
-    set(acc.childSpans, span.parent_span_id!, spanChildren);
-
-    if (!acc.traceStartTimestamp || span.start_timestamp < acc.traceStartTimestamp) {
-      acc.traceStartTimestamp = span.start_timestamp;
-    }
-
-    // establish trace end timestamp
-
-    const hasEndTimestamp = isNumber(span.timestamp);
-
-    if (!acc.traceEndTimestamp) {
-      if (hasEndTimestamp) {
-        acc.traceEndTimestamp = span.timestamp;
-        return acc;
-      }
-
-      acc.traceEndTimestamp = span.start_timestamp;
-      return acc;
-    }
-
-    if (hasEndTimestamp && span.timestamp! > acc.traceEndTimestamp) {
-      acc.traceEndTimestamp = span.timestamp;
-      return acc;
-    }
-
-    if (span.start_timestamp > acc.traceEndTimestamp) {
-      acc.traceEndTimestamp = span.start_timestamp;
-    }
-
-    return acc;
-  }, init);
-
-  // sort span children by their start timestamps in ascending order
-
-  Object.values(reduced.childSpans).forEach(spanChildren => {
-    spanChildren.sort((firstSpan, secondSpan) => {
-      if (firstSpan.start_timestamp < secondSpan.start_timestamp) {
-        return -1;
-      }
-
-      if (firstSpan.start_timestamp === secondSpan.start_timestamp) {
-        return 0;
-      }
-
-      return 1;
-    });
-  });
-
-  return reduced;
-}
-
 export default TraceView;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
index 410f7716ef..822369b877 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
@@ -25,21 +25,6 @@ export type SpanEntry = {
   data: Array<RawSpanType>;
 };
 
-export type SentryTransactionEvent = {
-  entries: Array<SpanEntry>;
-  startTimestamp: number;
-  endTimestamp: number;
-  sdk?: {
-    name?: string;
-  };
-
-  // TODO(alberto):
-  // TODO(ts): type this
-  contexts?: {
-    trace?: any;
-  };
-};
-
 export type SpanChildrenLookupType = {[span_id: string]: Array<RawSpanType>};
 
 export type ParsedTraceType = {
@@ -59,3 +44,11 @@ export enum TickAlignment {
   Right,
   Center,
 }
+
+export type TraceContextType = {
+  op?: string;
+  type?: 'trace';
+  span_id?: string;
+  trace_id?: string;
+  parent_span_id?: string;
+};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index 6880946ac6..4bacbb758b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -1,9 +1,19 @@
 import isString from 'lodash/isString';
 import moment from 'moment';
+import set from 'lodash/set';
+import isNumber from 'lodash/isNumber';
 
+import {SentryTransactionEvent} from 'app/types';
 import CHART_PALETTE from 'app/constants/chartPalette';
 
-import {ParsedTraceType, ProcessedSpanType, GapSpanType, RawSpanType} from './types';
+import {
+  ParsedTraceType,
+  ProcessedSpanType,
+  GapSpanType,
+  RawSpanType,
+  SpanEntry,
+  TraceContextType,
+} from './types';
 
 type Rect = {
   // x and y are left/top coords respectively
@@ -368,3 +378,110 @@ export function getSpanParentSpanID(span: ProcessedSpanType): string | undefined
 
   return span.parent_span_id;
 }
+
+export function getTraceContext(
+  event: Readonly<SentryTransactionEvent>
+): TraceContextType | undefined {
+  return event?.contexts?.trace;
+}
+
+export function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTraceType {
+  const spanEntry: SpanEntry | undefined = event.entries.find(
+    (entry: {type: string}) => entry.type === 'spans'
+  );
+
+  const spans: Array<RawSpanType> = spanEntry?.data ?? [];
+
+  const traceContext = getTraceContext(event);
+  const traceID = (traceContext && traceContext.trace_id) || '';
+  const rootSpanID = (traceContext && traceContext.span_id) || '';
+  const rootSpanOpName = (traceContext && traceContext.op) || 'transaction';
+  const parentSpanID = traceContext && traceContext.parent_span_id;
+
+  if (!spanEntry || spans.length <= 0) {
+    return {
+      op: rootSpanOpName,
+      childSpans: {},
+      traceStartTimestamp: event.startTimestamp,
+      traceEndTimestamp: event.endTimestamp,
+      traceID,
+      rootSpanID,
+      parentSpanID,
+      numOfSpans: 0,
+      spans: [],
+    };
+  }
+
+  // we reduce spans to become an object mapping span ids to their children
+
+  const init: ParsedTraceType = {
+    op: rootSpanOpName,
+    childSpans: {},
+    traceStartTimestamp: event.startTimestamp,
+    traceEndTimestamp: event.endTimestamp,
+    traceID,
+    rootSpanID,
+    parentSpanID,
+    numOfSpans: spans.length,
+    spans,
+  };
+
+  const reduced: ParsedTraceType = spans.reduce((acc, span) => {
+    if (!isValidSpanID(getSpanParentSpanID(span))) {
+      return acc;
+    }
+
+    const spanChildren: Array<RawSpanType> = acc.childSpans?.[span.parent_span_id!] ?? [];
+
+    spanChildren.push(span);
+
+    set(acc.childSpans, span.parent_span_id!, spanChildren);
+
+    if (!acc.traceStartTimestamp || span.start_timestamp < acc.traceStartTimestamp) {
+      acc.traceStartTimestamp = span.start_timestamp;
+    }
+
+    // establish trace end timestamp
+
+    const hasEndTimestamp = isNumber(span.timestamp);
+
+    if (!acc.traceEndTimestamp) {
+      if (hasEndTimestamp) {
+        acc.traceEndTimestamp = span.timestamp;
+        return acc;
+      }
+
+      acc.traceEndTimestamp = span.start_timestamp;
+      return acc;
+    }
+
+    if (hasEndTimestamp && span.timestamp! > acc.traceEndTimestamp) {
+      acc.traceEndTimestamp = span.timestamp;
+      return acc;
+    }
+
+    if (span.start_timestamp > acc.traceEndTimestamp) {
+      acc.traceEndTimestamp = span.start_timestamp;
+    }
+
+    return acc;
+  }, init);
+
+  // sort span children by their start timestamps in ascending order
+
+  Object.values(reduced.childSpans).forEach(spanChildren => {
+    spanChildren.sort((firstSpan, secondSpan) => {
+      if (firstSpan.start_timestamp < secondSpan.start_timestamp) {
+        return -1;
+      }
+
+      if (firstSpan.start_timestamp === secondSpan.start_timestamp) {
+        return 0;
+      }
+
+      return 1;
+    });
+  });
+
+  return reduced;
+}
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 9cbfe2493b..8137f5f8a0 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1,4 +1,4 @@
-import {SpanEntry} from 'app/components/events/interfaces/spans/types';
+import {SpanEntry, TraceContextType} from 'app/components/events/interfaces/spans/types';
 import {API_ACCESS_SCOPES} from 'app/constants';
 import {Field} from 'app/views/settings/components/forms/type';
 import {PlatformKey} from 'app/data/platformCategories';
@@ -286,15 +286,22 @@ type SentryEventBase = {
   latestEventID: string | null;
 };
 
+export type SentryTransactionEvent = {
+  type: 'transaction';
+  title?: string;
+  entries: SpanEntry[];
+  startTimestamp: number;
+  endTimestamp: number;
+  sdk?: {
+    name?: string;
+  };
+  contexts?: {
+    trace?: TraceContextType;
+  };
+} & SentryEventBase;
+
 // This type is incomplete
-export type Event =
-  | ({type: string} & SentryEventBase)
-  | ({
-      type: 'transaction';
-      entries: SpanEntry[];
-      startTimestamp: number;
-      endTimestamp: number;
-    } & SentryEventBase);
+export type Event = ({type: string} & SentryEventBase) | SentryTransactionEvent;
 
 export type EventsStatsData = [number, {count: number}[]][];
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
index 436a9090e3..c55de519b0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/opsBreakdown.tsx
@@ -2,15 +2,14 @@ import React from 'react';
 import styled from '@emotion/styled';
 import isFinite from 'lodash/isFinite';
 
-import {Event} from 'app/types';
+import {Event, SentryTransactionEvent} from 'app/types';
 import {
-  SentryTransactionEvent,
   SpanEntry,
   RawSpanType,
+  TraceContextType,
 } from 'app/components/events/interfaces/spans/types';
 import {SectionHeading} from 'app/components/charts/styles';
 import {pickSpanBarColour} from 'app/components/events/interfaces/spans/utils';
-import {TraceContextType} from 'app/components/events/interfaces/spans/traceView';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 
