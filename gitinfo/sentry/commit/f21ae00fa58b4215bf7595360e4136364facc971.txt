commit f21ae00fa58b4215bf7595360e4136364facc971
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Nov 25 22:50:26 2015 +0100

    Implemented fancy gettext formatting that supports react

diff --git a/package.json b/package.json
index abfa2cbe57..54781a2348 100644
--- a/package.json
+++ b/package.json
@@ -55,7 +55,6 @@
     "babel-core": "5.8.33",
     "babel-gettext-extractor": "^1.0.0",
     "babel-loader": "5.3.3",
-    "po-catalog-loader": "^1.0.0",
     "chai": "3.4.1",
     "js-cookie": "2.0.4",
     "karma": "0.13.15",
@@ -66,7 +65,9 @@
     "karma-sourcemap-loader": "0.3.6",
     "karma-webpack": "1.7.0",
     "platformicons": "0.0.7",
+    "po-catalog-loader": "^1.0.0",
     "sinon": "1.17.2",
-    "sinon-chai": "2.8.0"
+    "sinon-chai": "2.8.0",
+    "sprintf-js": "^1.0.3"
   }
 }
diff --git a/src/sentry/static/sentry/app/locale.jsx b/src/sentry/static/sentry/app/locale.jsx
index f852117edd..67b90f5ea7 100644
--- a/src/sentry/static/sentry/app/locale.jsx
+++ b/src/sentry/static/sentry/app/locale.jsx
@@ -1,6 +1,8 @@
 import Jed from 'jed';
+import React from 'react';
 import ConfigStore from './stores/configStore';
 import { getTranslations } from './translations';
+import { sprintf } from 'sprintf-js';
 
 export function getCurrentTranslations() {
   let user = ConfigStore.get('user');
@@ -22,8 +24,76 @@ const i18n = new Jed({
   }
 });
 
-export const gettext = i18n.gettext.bind(i18n);
-export const ngettext = i18n.ngettext.bind(i18n);
-export const t = i18n.gettext.bind(i18n);
-export const tn = i18n.ngettext.bind(i18n);
-export default i18n;
+function formatForReact(formatString, args) {
+  var rv = [];
+  var cursor = 0;
+
+  // always re-parse, do not cache, because we change the match
+  sprintf.parse(formatString).forEach((match, idx) => {
+    if (typeof match === 'string') {
+      rv.push(match);
+    } else {
+      let arg = null;
+      if (match[2]) {
+        arg = args[0][match[2][0]];
+      } else if (match[1]) {
+        arg = args[parseInt(match[1], 10) - 1];
+      } else {
+        arg = args[cursor++];
+      }
+
+      // this points to a react element!
+      if (React.isValidElement(arg)) {
+        rv.push(arg);
+      // not a react element, fuck around with it so that sprintf.format
+      // can format it for us.  We make sure match[2] is null so that we
+      // do not go down the object path, and we set match[1] to the first
+      // index and then pass an array with two items in.
+      } else {
+        match[2] = null;
+        match[1] = 1;
+        rv.push(sprintf.format([match], [null, arg]));
+      }
+    }
+  });
+  return rv;
+}
+
+function argsInvolveReact(args) {
+  if (args.some(React.isValidElement)) {
+    return true;
+  }
+  if (args.length == 1 && typeof args[0] === 'object') {
+    return Object.keys(args[0]).some((key) => {
+      return React.isValidElement(args[0][key]);
+    });
+  }
+  return false;
+}
+
+export function format(formatString, args) {
+  if (argsInvolveReact(args)) {
+    return formatForReact(formatString, args);
+  } else {
+    return sprintf(formatString, ...args);
+  }
+}
+
+export function gettext(string, ...args) {
+  let rv = i18n.gettext(string);
+  if (args.length > 0) {
+    rv = format(rv, args);
+  }
+  return rv;
+}
+
+export function ngettext(singular, plural, num, ...args) {
+  let rv = i18n.ngettext(singular, plural, num);
+  if (args.length > 0) {
+    rv = format(rv, args);
+  }
+  return rv;
+}
+
+export const t = gettext;
+export const tn = ngettext;
