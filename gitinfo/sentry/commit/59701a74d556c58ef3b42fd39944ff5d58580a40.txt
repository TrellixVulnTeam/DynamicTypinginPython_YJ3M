commit 59701a74d556c58ef3b42fd39944ff5d58580a40
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 19 10:22:53 2010 -0700

    Better documentation for use of error handling middleware

diff --git a/README.rst b/README.rst
index 1d7b02caa2..3fabb8619a 100644
--- a/README.rst
+++ b/README.rst
@@ -66,6 +66,36 @@ Finally, run ``python manage.py syncdb`` to create the database tables.
 
 (If you use South, you'll need to use ``python manage.py migrate sentry``)
 
+=========================
+Error Handling Middleware
+=========================
+
+If you already have middleware in place that handles ``process_exception`` you will need to take extra care when using Sentry.
+
+For example, the following middleware would suppress Sentry logging due to it returning a response::
+
+	class MyMiddleware(object):
+	    def process_exception(self, request, exception):
+	        return HttpResponse('foo')
+
+To work around this, you can either disable your error handling middleware, or add something like the following::
+
+	from django.core.signals import got_request_exception
+	class MyMiddleware(object):
+	    def process_exception(self, request, exception):
+	        # Make sure the exception signal is fired for Sentry
+	        got_request_exception.send(sender=self, request=request)
+	        return HttpResponse('foo')
+
+Or, alternatively, you can just enable Sentry responses::
+
+	from sentry.client.models import sentry_exception_handler
+	class MyMiddleware(object):
+	    def process_exception(self, request, exception):
+	        # Make sure the exception signal is fired for Sentry
+	        sentry_exception_handler(request=request)
+	        return HttpResponse('foo')
+
 ==========================
 Multi-server configuration
 ==========================
diff --git a/sentry/client/models.py b/sentry/client/models.py
index 341aabd61d..886c679cf2 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -20,7 +20,7 @@ def get_client():
 client = get_client()
 
 @transaction.commit_on_success
-def sentry_exception_handler(sender, request=None, **kwargs):
+def sentry_exception_handler(request=None, **kwargs):
     try:
         exc_type, exc_value, exc_traceback = sys.exc_info()
 
