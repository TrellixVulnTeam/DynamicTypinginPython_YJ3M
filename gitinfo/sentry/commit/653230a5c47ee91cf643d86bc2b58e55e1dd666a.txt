commit 653230a5c47ee91cf643d86bc2b58e55e1dd666a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 19 13:55:10 2019 -0800

    fix(discover): Format numbers as floats

diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index fd9cb2f4f6..99b7a96e3a 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -8,6 +8,7 @@ import Tooltip from 'app/components/tooltip';
 import Count from 'app/components/count';
 import ConfigStore from 'app/stores/configStore';
 import theme from 'app/utils/theme';
+import floatFormat from 'app/utils/floatFormat';
 
 class StackedBarChart extends React.Component {
   static propTypes = {
@@ -100,7 +101,7 @@ class StackedBarChart extends React.Component {
     }
   }
 
-  shouldComponentUpdate(nextProps, nextState) {
+  shouldComponentUpdate(nextProps, _nextState) {
     return !isEqual(this.props, nextProps);
   }
 
@@ -113,7 +114,7 @@ class StackedBarChart extends React.Component {
 
   pointsToSeries = points => {
     const series = [];
-    points.forEach((p, pIdx) => {
+    points.forEach((p, _pIdx) => {
       p.y.forEach((y, yIdx) => {
         if (!series[yIdx]) {
           series[yIdx] = {data: []};
@@ -143,11 +144,6 @@ class StackedBarChart extends React.Component {
     return options.clock24Hours;
   }
 
-  floatFormat(number, places) {
-    const multi = Math.pow(10, places);
-    return parseInt(number * multi, 10) / multi;
-  }
-
   timeLabelAsHour(point) {
     const timeMoment = moment(point.x * 1000);
     const nextMoment = timeMoment.clone().add(59, 'minute');
@@ -251,7 +247,7 @@ class StackedBarChart extends React.Component {
     );
   }
 
-  renderTooltip = (point, pointIdx) => {
+  renderTooltip = (point, _pointIdx) => {
     const timeLabel = this.getTimeLabel(point);
     const totalY = point.y.reduce((a, b) => a + b);
     return (
@@ -280,14 +276,14 @@ class StackedBarChart extends React.Component {
     );
   };
 
-  getMinHeight(index, pointLength) {
+  getMinHeight(index, _pointLength) {
     const {minHeights} = this.props;
     return minHeights && (minHeights[index] || minHeights[index] === 0)
       ? this.props.minHeights[index]
       : 1;
   }
 
-  renderChartColumn(point, maxval, pointWidth, index, totalPoints) {
+  renderChartColumn(point, maxval, pointWidth, index, _totalPoints) {
     const totalY = point.y.reduce((a, b) => a + b);
     const totalPct = totalY / maxval;
     // we leave a little extra space for bars with min-heights.
@@ -296,7 +292,7 @@ class StackedBarChart extends React.Component {
     let prevPct = 0;
     const pts = point.y.map((y, i) => {
       const pct = Math.max(
-        totalY && this.floatFormat((y / totalY) * totalPct * maxPercentage, 2),
+        totalY && floatFormat((y / totalY) * totalPct * maxPercentage, 2),
         this.getMinHeight(i, point.y.length)
       );
 
@@ -345,10 +341,7 @@ class StackedBarChart extends React.Component {
     const totalPoints = Math.max(...series.map(s => s.data.length));
     // we expand the graph just a hair beyond 100% prevent a subtle white line on the edge
     const nudge = 0.1;
-    const pointWidth = this.floatFormat(
-      (100.0 + this.props.gap + nudge) / totalPoints,
-      2
-    );
+    const pointWidth = floatFormat((100.0 + this.props.gap + nudge) / totalPoints, 2);
 
     const maxval = this.maxPointValue();
     const markers = this.props.markers.slice();
diff --git a/src/sentry/static/sentry/app/utils/floatFormat.tsx b/src/sentry/static/sentry/app/utils/floatFormat.tsx
new file mode 100644
index 0000000000..f9acdcee42
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/floatFormat.tsx
@@ -0,0 +1,4 @@
+export default function floatFormat(number: number, places: number) {
+  const multi = Math.pow(10, places);
+  return parseInt((number * multi).toString(), 10) / multi;
+}
diff --git a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
index ea12a07ed7..92a3f40d26 100644
--- a/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
+++ b/src/sentry/static/sentry/app/utils/formatAbbreviatedNumber.jsx
@@ -1,9 +1,6 @@
-const numberFormats = [[1000000000, 'b'], [1000000, 'm'], [1000, 'k']];
+import floatFormat from './floatFormat';
 
-function floatFormat(number, places) {
-  const multi = Math.pow(10, places);
-  return parseInt(number * multi, 10) / multi;
-}
+const numberFormats = [[1000000000, 'b'], [1000000, 'm'], [1000, 'k']];
 
 export default function formatNumber(number) {
   let b, x, y, o, p;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index 2562e3647b..925b911d09 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -13,6 +13,7 @@ import overflowEllipsis from 'app/styles/overflowEllipsis';
 import pinIcon from 'app/../images/location-pin.png';
 import {Organization, NewQuery} from 'app/types';
 import Duration from 'app/components/duration';
+import floatFormat from 'app/utils/floatFormat';
 
 import {QueryLink} from './styles';
 import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
@@ -195,7 +196,7 @@ export const FIELD_FORMATTERS: FieldFormatters = {
     sortField: true,
     renderFunc: (field, data) => (
       <NumberContainer>
-        {typeof data[field] === 'number' ? <Count value={data[field]} /> : emptyValue}
+        {typeof data[field] === 'number' ? floatFormat(data[field], 5) : emptyValue}
       </NumberContainer>
     ),
   },
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
index e4b3f179c3..cc7e534995 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
@@ -1,6 +1,7 @@
 export type ColumnValueType =
   | '*' // Matches to everything
   | 'string'
+  | 'integer'
   | 'number'
   | 'duration'
   | 'timestamp'
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 8150b4416d..343890de3a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -234,7 +234,7 @@ class TableView extends React.Component<TableViewProps> {
     const field = column.eventViewField;
 
     // establish alignment based on the type
-    const alignedTypes: ColumnValueType[] = ['number', 'duration'];
+    const alignedTypes: ColumnValueType[] = ['number', 'duration', 'integer'];
     let align: 'right' | 'left' = alignedTypes.includes(column.type) ? 'right' : 'left';
 
     if (column.type === 'never' || column.type === '*') {
diff --git a/tests/js/spec/utils/floatFormat.spec.jsx b/tests/js/spec/utils/floatFormat.spec.jsx
new file mode 100644
index 0000000000..6b7b45ab56
--- /dev/null
+++ b/tests/js/spec/utils/floatFormat.spec.jsx
@@ -0,0 +1,12 @@
+import floatFormat from 'app/utils/floatFormat';
+
+describe('floatFormat()', function() {
+  it('should format decimals', function() {
+    expect(floatFormat(0, 0)).toBe(0);
+    expect(floatFormat(10.513434, 1)).toBe(10.5);
+    expect(floatFormat(10.513494, 3)).toBe(10.513);
+  });
+  it('should not round', function() {
+    expect(floatFormat(10.513494, 4)).toBe(10.5134);
+  });
+});
