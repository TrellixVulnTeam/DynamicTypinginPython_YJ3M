commit 757060af7e4ba49ed13535268ab21947cfe755c4
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 18 13:58:40 2012 -0700

    Add invite member flow

diff --git a/sentry/migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py b/sentry/migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py
new file mode 100644
index 0000000000..15c33be354
--- /dev/null
+++ b/sentry/migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py
@@ -0,0 +1,239 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'PendingProjectMember'
+        db.create_table('sentry_pendingprojectmember', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(related_name='pending_member_set', to=orm['sentry.Project'])),
+            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
+            ('type', self.gf('django.db.models.fields.IntegerField')(default=0)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['PendingProjectMember'])
+
+        # Adding unique constraint on 'PendingProjectMember', fields ['project', 'email']
+        db.create_unique('sentry_pendingprojectmember', ['project_id', 'email'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'PendingProjectMember', fields ['project', 'email']
+        db.delete_unique('sentry_pendingprojectmember', ['project_id', 'email'])
+
+        # Deleting model 'PendingProjectMember'
+        db.delete_table('sentry_pendingprojectmember')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingprojectmember': {
+            'Meta': {'unique_together': "(('project', 'email'),)", 'object_name': 'PendingProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index 9048abec2b..2656dfb45f 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -14,6 +14,7 @@ import time
 import uuid
 import urlparse
 from datetime import datetime
+from hashlib import md5
 from indexer.models import BaseIndex
 from picklefield.fields import PickledObjectField
 
@@ -179,6 +180,50 @@ class ProjectOption(Model):
         return u'project=%s, key=%s, value=%s' % (self.project_id, self.key, self.value)
 
 
+class PendingProjectMember(Model):
+    """
+    Identifies relationships between projects and pending invites.
+    """
+    project = models.ForeignKey(Project, related_name="pending_member_set")
+    email = models.EmailField()
+    type = models.IntegerField(choices=MEMBER_TYPES, default=globals().get(settings.DEFAULT_PROJECT_ACCESS))
+    date_added = models.DateTimeField(default=datetime.now)
+
+    class Meta:
+        unique_together = (('project', 'email'),)
+
+    def __unicode__(self):
+        return u'project=%s, email=%s, type=%s' % (self.project_id, self.email, self.get_type_display())
+
+    @property
+    def token(self):
+        checksum = md5()
+        for x in (str(self.project_id), self.email, settings.KEY):
+            checksum.update(x)
+        return checksum.hexdigest()
+
+    def send_invite_email(self):
+        from django.core.mail import send_mail
+        from sentry.web.helpers import render_to_string
+
+        context = {
+            'email': self.email,
+            'project': self.project,
+            'url': '%s%s' % (settings.URL_PREFIX, reverse('sentry-accept-invite', kwargs={
+                'member_id': self.id,
+                'token': self.token,
+            })),
+        }
+        body = render_to_string('sentry/emails/member_invite.txt', context)
+
+        try:
+            send_mail('%s Invite to join project: %s' % (settings.EMAIL_SUBJECT_PREFIX, self.project.name),
+                body, settings.SERVER_EMAIL, [self.email],
+                fail_silently=False)
+        except Exception, e:
+            logger = logging.getLogger('sentry.mail.errors')
+            logger.exception(e)
+
 class ProjectMember(Model):
     """
     Identifies relationships between projects and users, including
diff --git a/sentry/templates/sentry/emails/member_invite.txt b/sentry/templates/sentry/emails/member_invite.txt
new file mode 100644
index 0000000000..5f812879ae
--- /dev/null
+++ b/sentry/templates/sentry/emails/member_invite.txt
@@ -0,0 +1,7 @@
+You have been invited to join the {{ project.name }} project on Sentry.
+
+{{ project.name }} is using Sentry to capture exceptions in real-time.
+
+To accept this invitation, proceed to the following url:
+
+    {{ url }}
diff --git a/sentry/templates/sentry/layout.html b/sentry/templates/sentry/layout.html
index aaa7c73bb0..2d5d6c9c04 100644
--- a/sentry/templates/sentry/layout.html
+++ b/sentry/templates/sentry/layout.html
@@ -107,6 +107,7 @@
                 keep_text: true
             });
             $('.tip').tooltip();
+            $('.nav-tabs .active a').tab('show')
         });
         </script>
     </body>
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index 10c74d7546..9f645d815e 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -53,54 +53,97 @@
             </form>
             <div class="page-header">
                 {% if can_add_member %}
-                    <a href="{% url sentry-new-project-member project.pk %}" class="btn pull-right btn-small btn-primary">{% trans "New Member" %}</a>
+                    <a href="{% url sentry-new-project-member project.pk %}" class="btn pull-right btn-primary">{% trans "New Member" %}</a>
                 {% endif %}
                 <h2>{% trans "Members" %}</h2>
             </div>
-            <table class="table table-bordered table-striped">
-                <colgroup>
-                    <col/>
-                    <col width="100px"/>
-                    <col width="90px"/>
-                    <col width="90px"/>
-                </colgroup>
-                <thead>
-                    <tr>
-                        <th>{% trans "User" %}</th>
-                        <th style="text-align:center">{% trans "Access" %}</th>
-                        <th colspan="2" style="text-align:center">{% trans "Actions" %}</th>
-                    </tr>
-                </thead>
-                <tbody>
-                    {% for member, user in member_list %}
-                        <tr>
-                            <td>
-                                <a href="{% url sentry-edit-project-member project.pk member.pk %}">{{ user.username }}</a><br>
-                                {{ user.email }}
-                            </td>
-                            <td style="text-align:center;">
-                                {{ member.get_type_display }}
-                            </td>
-                            {% if user == project.owner %}
-                                <td style="text-align:center;" colspan="2">
-                                    <em>{% trans "unavailable for owner" %}</em>
-                                </td>
-                            {% else %}
-                                <td style="text-align:center;">
-                                    <a href="{% url sentry-remove-project-member project.pk member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
-                                </td>
-                                <td style="text-align:center;">
-                                    {% if member.is_active %}
-                                        <a href="{% url sentry-suspend-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
+            <ul class="nav nav-tabs">
+                <li class="active"><a href="#members" data-toggle="tab">Members</a></li>
+                <li><a href="#pending-members" data-toggle="tab">Pending ({{ pending_member_list|length }})</a></li>
+            </ul>
+            <div class="tab-content">
+                <div class="tab-pane active" id="members">
+                    <table class="table table-bordered table-striped">
+                        <colgroup>
+                            <col/>
+                            <col width="100px"/>
+                            <col width="90px"/>
+                            <col width="90px"/>
+                        </colgroup>
+                        <thead>
+                            <tr>
+                                <th>{% trans "User" %}</th>
+                                <th style="text-align:center">{% trans "Access" %}</th>
+                                <th colspan="2" style="text-align:center">{% trans "Actions" %}</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for member, user in member_list %}
+                                <tr>
+                                    <td>
+                                        <a href="{% url sentry-edit-project-member project.pk member.pk %}">{{ user.username }}</a><br>
+                                        {{ user.email }}
+                                    </td>
+                                    <td style="text-align:center;">
+                                        {{ member.get_type_display }}
+                                    </td>
+                                    {% if user == project.owner %}
+                                        <td style="text-align:center;" colspan="2">
+                                            <em>{% trans "unavailable for owner" %}</em>
+                                        </td>
                                     {% else %}
-                                        <a href="{% url sentry-restore-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Restore" %}</a>
+                                        <td style="text-align:center;">
+                                            <a href="{% url sentry-remove-project-member project.pk member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
+                                        </td>
+                                        <td style="text-align:center;">
+                                            {% if member.is_active %}
+                                                <a href="{% url sentry-suspend-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
+                                            {% else %}
+                                                <a href="{% url sentry-restore-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Restore" %}</a>
+                                            {% endif %}
+                                        </td>
                                     {% endif %}
-                                </td>
-                            {% endif %}
-                        </tr>
-                    {% endfor %}
-                </tbody>
-            </table>
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                </div>
+                <div class="tab-pane" id="pending-members">
+                    <table class="table table-bordered table-striped">
+                        <colgroup>
+                            <col/>
+                            <col width="100px"/>
+                            <col width="90px"/>
+                            <col width="90px"/>
+                        </colgroup>
+                        <thead>
+                            <tr>
+                                <th>{% trans "User" %}</th>
+                                <th style="text-align:center">{% trans "Access" %}</th>
+                                <th style="text-align:center" colspan="2">{% trans "Actions" %}</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for member, email in pending_member_list %}
+                                <tr>
+                                    <td>
+                                        {{ email }}
+                                    </td>
+                                    <td style="text-align:center;">
+                                        {{ member.get_type_display }}
+                                    </td>
+                                    <td style="text-align:center;">
+                                        <a href="{% url sentry-remove-pending-project-member project.pk member.pk %}" class="btn btn-small btn-danger">{% trans "Remove" %}</a>
+                                    </td>
+                                    <td style="text-align:center;">
+                                        <a href="{% url sentry-reinvite-pending-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Resend" %}</a>
+                                    </td>
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                </div>
+            </div>
         {% endblock %}
     </section>
 {% endblock %}
diff --git a/sentry/templates/sentry/projects/members/new.html b/sentry/templates/sentry/projects/members/new.html
index f386d07c4c..c4905a2756 100644
--- a/sentry/templates/sentry/projects/members/new.html
+++ b/sentry/templates/sentry/projects/members/new.html
@@ -12,6 +12,24 @@
 
 {% block main %}
     <section class="body">
-        {% include "sentry/partial/_form.html" %}
+        <ul class="nav nav-tabs">
+            <li class="active"><a href="#invite" data-toggle="tab">Invite a new user</a></li>
+            <li><a href="#add" data-toggle="tab">Add an existing user</a></li>
+        </ul>
+        <div class="tab-content">
+            <div class="tab-pane active" id="invite">
+                <p>Invite a member to join this project via their email address. If they do not already have an
+                    account they will first be asked to create one.</p>
+                {% with invite_form as form %}
+                    {% include "sentry/partial/_form.html" %}
+                {% endwith %}
+            </div>
+            <div class="tab-pane" id="add">
+                <p>You may add a user by their username if they already have an account.</p>
+                {% with add_form as form %}
+                    {% include "sentry/partial/_form.html" %}
+                {% endwith %}
+            </div>
+        </div>
     </section>
 {% endblock %}
diff --git a/sentry/web/forms.py b/sentry/web/forms.py
index 12dcbf0234..494a3e0851 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms.py
@@ -12,7 +12,7 @@ from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
-from sentry.models import Project, ProjectMember
+from sentry.models import Project, ProjectMember, PendingProjectMember
 from sentry.interfaces import Http
 from sentry.permissions import can_set_public_projects
 
@@ -117,11 +117,30 @@ class BaseProjectMemberForm(forms.ModelForm):
 EditProjectMemberForm = BaseProjectMemberForm
 
 
+class InviteProjectMemberForm(BaseProjectMemberForm):
+    class Meta:
+        fields = ('type', 'email')
+        model = PendingProjectMember
+
+    def clean_email(self):
+        value = self.cleaned_data['email']
+        if not value:
+            return None
+
+        if self.project.member_set.filter(user__email__iexact=value).exists():
+            raise forms.ValidationError(_('There is already a member with this email address'))
+
+        if self.project.pending_member_set.filter(email__iexact=value).exists():
+            raise forms.ValidationError(_('There is already a pending invite for this user'))
+
+        return value
+
+
 class NewProjectMemberForm(BaseProjectMemberForm):
     user = UserField()
 
     class Meta:
-        fields = ('user', 'type')
+        fields = ('type', 'user')
         model = ProjectMember
 
     def clean_user(self):
diff --git a/sentry/web/frontend/admin.py b/sentry/web/frontend/admin.py
index 5311c082a9..ba410d7a09 100644
--- a/sentry/web/frontend/admin.py
+++ b/sentry/web/frontend/admin.py
@@ -156,9 +156,13 @@ def create_new_user(request):
                 })
             body = render_to_string('sentry/emails/welcome_mail.txt', context, request)
 
-            send_mail('%s Welcome to Sentry' % (settings.EMAIL_SUBJECT_PREFIX,),
-                body, settings.SERVER_EMAIL, [user.email],
-                fail_silently=True)
+            try:
+                send_mail('%s Welcome to Sentry' % (settings.EMAIL_SUBJECT_PREFIX,),
+                    body, settings.SERVER_EMAIL, [user.email],
+                    fail_silently=False)
+            except Exception, e:
+                logger = logging.getLogger('sentry.mail.errors')
+                logger.exception(e)
 
         return HttpResponseRedirect(reverse('sentry-admin-users'))
 
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 4f3b0f2b52..d0aaba942b 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -11,13 +11,14 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
-from sentry.models import ProjectMember, MEMBER_USER, MEMBER_OWNER
+from sentry.models import ProjectMember, MEMBER_USER, MEMBER_OWNER, \
+  PendingProjectMember
 from sentry.permissions import can_create_projects
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
   EditProjectMemberForm, NewProjectMemberForm, RemoveProjectForm, \
-  NewProjectAdminForm
+  NewProjectAdminForm, InviteProjectMemberForm
 from sentry.web.helpers import render_to_response, get_project_list, \
   plugin_config
 
@@ -135,6 +136,7 @@ def manage_project(request, project):
         return HttpResponseRedirect(request.path + '?success=1')
 
     member_list = [(pm, pm.user) for pm in project.member_set.select_related('user')]
+    pending_member_list = [(pm, pm.email) for pm in project.pending_member_set.all()]
 
     context = csrf(request)
     context.update({
@@ -143,7 +145,8 @@ def manage_project(request, project):
         'page': 'details',
         'form': form,
         'project': project,
-        'member_list': member_list
+        'member_list': member_list,
+        'pending_member_list': pending_member_list,
     })
 
     return render_to_response('sentry/projects/manage.html', context, request)
@@ -156,29 +159,78 @@ def new_project_member(request, project):
     if not can_add_member:
         return HttpResponseRedirect(reverse('sentry'))
 
-    form = NewProjectMemberForm(project, request.POST or None, initial={
+    initial = {
         'type': MEMBER_USER,
-    })
-    if form.is_valid():
-        pm = form.save(commit=False)
+    }
+
+    invite_form = InviteProjectMemberForm(project, request.POST or None, initial=initial, prefix='invite')
+    add_form = NewProjectMemberForm(project, request.POST or None, initial=initial, prefix='add')
+
+    if add_form.is_valid():
+        pm = add_form.save(commit=False)
+        pm.project = project
+        pm.save()
+
+        return HttpResponseRedirect(reverse('sentry-edit-project-member', args=[project.pk, pm.id]) + '?success=1')
+
+    elif invite_form.is_valid():
+        pm = invite_form.save(commit=False)
         pm.project = project
         pm.save()
 
-        return HttpResponseRedirect(reverse('sentry-edit-project-member', args=[project.pk, pm.id]))
+        pm.send_invite_email()
+
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
 
     context = csrf(request)
     context.update({
         'project': project,
-        'form': form,
+        'add_form': add_form,
+        'invite_form': invite_form,
     })
 
     return render_to_response('sentry/projects/members/new.html', context, request)
 
 
+def accept_invite(request, member_id, token):
+    try:
+        pending_member = PendingProjectMember.objects.get(pk=member_id)
+    except PendingProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    if pending_member.token != token:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    project = pending_member.project
+
+    if not request.user.is_authenticated():
+        # Show login or register form
+        context = {
+            'project': project,
+        }
+        return render_to_response('sentry/projects/members/accept_invite.html', context, request)
+
+    if project.member_set.filter(
+            user=request.user,
+            type=pending_member.type,
+        ):
+        project.member_set.create(
+            user=request.user,
+            type=pending_member.type,
+        )
+
+    pending_member.delete()
+
+    return HttpResponseRedirect(reverse('sentry', args=[project.pk]))
+
+
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def edit_project_member(request, project, member_id):
-    member = project.member_set.get(pk=member_id)
+    try:
+        member = project.member_set.get(pk=member_id)
+    except ProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
     result = plugins.first('has_perm', request.user, 'edit_project_member', member)
     if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
@@ -204,9 +256,13 @@ def edit_project_member(request, project, member_id):
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def remove_project_member(request, project, member_id):
-    member = project.member_set.get(pk=member_id)
+    try:
+        member = project.member_set.get(pk=member_id)
+    except ProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
     if member.user == project.owner:
-        return HttpResponseRedirect(reverse('sentry-project-list'))
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
     result = plugins.first('has_perm', request.user, 'remove_project_member', member)
     if result is False and not request.user.has_perm('sentry.can_remove_projectmember'):
@@ -229,33 +285,75 @@ def remove_project_member(request, project, member_id):
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def suspend_project_member(request, project, member_id):
-    member = project.member_set.get(pk=member_id)
+    try:
+        member = project.member_set.get(pk=member_id)
+    except ProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
     if member.user == project.owner:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
     result = plugins.first('has_perm', request.user, 'suspend_project_member', member)
     if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+        return HttpResponseRedirect(reverse('sentry'))
 
     member.update(is_active=False)
 
-    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
 
 
 @csrf_protect
 @has_access(MEMBER_OWNER)
 def restore_project_member(request, project, member_id):
-    member = project.member_set.get(pk=member_id)
+    try:
+        member = project.member_set.get(pk=member_id)
+    except ProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
     if member.user == project.owner:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
 
     result = plugins.first('has_perm', request.user, 'restore_project_member', member)
     if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+        return HttpResponseRedirect(reverse('sentry'))
 
     member.update(is_active=True)
 
-    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
+
+
+@csrf_protect
+@has_access(MEMBER_OWNER)
+def remove_pending_project_member(request, project, member_id):
+    try:
+        member = project.pending_member_set.get(pk=member_id)
+    except PendingProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    result = plugins.first('has_perm', request.user, 'remove_project_member', member)
+    if result is False and not request.user.has_perm('sentry.can_remove_projectmember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    member.delete()
+
+    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
+
+
+@csrf_protect
+@has_access(MEMBER_OWNER)
+def reinvite_pending_project_member(request, project, member_id):
+    try:
+        member = project.pending_member_set.get(pk=member_id)
+    except PendingProjectMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    result = plugins.first('has_perm', request.user, 'add_project_member', member)
+    if result is False and not request.user.has_perm('sentry.can_add_projectmember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    member.send_invite_email()
+
+    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
 
 
 @login_required
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 24329784e8..9b874c8b1c 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -47,14 +47,28 @@ urlpatterns = patterns('',
 
     url(r'^projects/$', projects.project_list, name='sentry-project-list'),
     url(r'^projects/new/$', projects.new_project, name='sentry-new-project'),
-    url(r'^projects/(?P<project_id>\d+)/edit/$', projects.manage_project, name='sentry-manage-project'),
-    url(r'^projects/(?P<project_id>\d+)/plugins/(?P<slug>[\w_-]+)/$', projects.configure_project_plugin, name='sentry-configure-project-plugin'),
-    url(r'^projects/(?P<project_id>\d+)/remove/$', projects.remove_project, name='sentry-remove-project'),
-    url(r'^projects/(?P<project_id>\d+)/members/new/$', projects.new_project_member, name='sentry-new-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit/$', projects.edit_project_member, name='sentry-edit-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove/$', projects.remove_project_member, name='sentry-remove-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/suspend/$', projects.suspend_project_member, name='sentry-suspend-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/restore/$', projects.restore_project_member, name='sentry-restore-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/edit/$', projects.manage_project,
+        name='sentry-manage-project'),
+    url(r'^projects/(?P<project_id>\d+)/plugins/(?P<slug>[\w_-]+)/$', projects.configure_project_plugin,
+        name='sentry-configure-project-plugin'),
+    url(r'^projects/(?P<project_id>\d+)/remove/$', projects.remove_project,
+        name='sentry-remove-project'),
+    url(r'^projects/(?P<project_id>\d+)/members/new/$', projects.new_project_member,
+        name='sentry-new-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit/$', projects.edit_project_member,
+        name='sentry-edit-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove/$', projects.remove_project_member,
+        name='sentry-remove-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/suspend/$', projects.suspend_project_member,
+        name='sentry-suspend-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/restore/$', projects.restore_project_member,
+        name='sentry-restore-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/pending/(?P<member_id>\d+)/remove/$', projects.remove_pending_project_member,
+        name='sentry-remove-pending-project-member'),
+    url(r'^projects/(?P<project_id>\d+)/members/pending/(?P<member_id>\d+)/reinvite/$', projects.reinvite_pending_project_member,
+        name='sentry-reinvite-pending-project-member'),
+    url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', projects.accept_invite,
+        name='sentry-accept-invite'),
 
     # Global
 
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 9fdf8c5197..d5526dd202 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -1,8 +1,9 @@
 from __future__ import absolute_import
 
 
+from django.core import mail
 from sentry.models import Project, ProjectMember, Group, Event, \
-  MessageFilterValue, MessageCountByMinute, FilterValue
+  MessageFilterValue, MessageCountByMinute, FilterValue, PendingProjectMember
 
 from tests.base import TestCase
 
@@ -48,3 +49,23 @@ class ProjectMemberTest(TestCase):
         member = ProjectMember(project_id=1, public_key='public', secret_key='secret')
         with self.Settings(SENTRY_URL_PREFIX='http://example.com:81'):
             self.assertEquals(member.get_dsn(), 'http://public:secret@example.com:81/1')
+
+
+class PendingProjectMemberTest(TestCase):
+    fixtures = ['tests/fixtures/views.json']
+
+    def test_token_generation(self):
+        member = PendingProjectMember(project_id=1, email='foo@example.com')
+        with self.Settings(SENTRY_KEY='a'):
+            self.assertEquals(member.token, 'a')
+
+    def test_send_invite_email(self):
+        member = PendingProjectMember(project_id=1, email='foo@example.com')
+        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+            member.send_invite_email()
+
+            self.assertEquals(len(mail.outbox), 1)
+
+            msg = mail.outbox[0]
+
+            self.assertEquals(msg.to, ['foo@example.com'])
