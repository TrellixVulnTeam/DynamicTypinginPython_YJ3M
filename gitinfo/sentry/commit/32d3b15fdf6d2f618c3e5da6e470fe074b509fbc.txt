commit 32d3b15fdf6d2f618c3e5da6e470fe074b509fbc
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 20 00:06:23 2012 -0800

    Switch to phantom-jasmine runner

diff --git a/Makefile b/Makefile
index bb6985a879..b43e61d833 100644
--- a/Makefile
+++ b/Makefile
@@ -65,7 +65,7 @@ bootstrap-tests:
 test: test-js test-python
 
 test-js:
-	phantomjs runtests.js tests/js/index.html
+	phantomjs runtests.coffee tests/js/index.html
 
 test-python:
 	cd src && flake8 --exclude=migrations --ignore=E501,E225,E121,E123,E124,E125,E127,E128 --exit-zero sentry || exit 1
diff --git a/runtests.coffee b/runtests.coffee
new file mode 100644
index 0000000000..c34b490f37
--- /dev/null
+++ b/runtests.coffee
@@ -0,0 +1,46 @@
+#!/usr/local/bin/phantomjs
+
+# Runs a Jasmine Suite from an html page
+# @page is a PhantomJs page object
+# @exit_func is the function to call in order to exit the script
+
+class PhantomJasmineRunner
+  constructor: (@page, @exit_func = phantom.exit) ->
+    @tries = 0
+    @max_tries = 10
+
+  get_status: -> @page.evaluate(-> console_reporter.status)
+
+  terminate: ->
+    switch @get_status()
+      when "success" then @exit_func 0
+      when "fail"    then @exit_func 1
+      else                @exit_func 2
+
+# Script Begin
+if phantom.args.length == 0
+  console.log "Need a url as the argument"
+  phantom.exit 1
+
+page = new WebPage()
+
+runner = new PhantomJasmineRunner(page)
+
+# Don't supress console output
+page.onConsoleMessage = (msg) ->
+  console.log msg
+
+  # Terminate when the reporter singals that testing is over.
+  # We cannot use a callback function for this (because page.evaluate is sandboxed),
+  # so we have to *observe* the website.
+  if msg == "ConsoleReporter finished"
+    runner.terminate()
+
+address = phantom.args[0]
+
+page.open address, (status) ->
+  if status != "success"
+    console.log "can't load the address!"
+    phantom.exit 1
+
+  # Now we wait until onConsoleMessage reads the termination signal from the log.
\ No newline at end of file
diff --git a/runtests.js b/runtests.js
deleted file mode 100644
index 0c1bc952c6..0000000000
--- a/runtests.js
+++ /dev/null
@@ -1,90 +0,0 @@
-var system = require('system');
-
-/**
- * Wait until the test condition is true or a timeout occurs. Useful for waiting
- * on a server response or for a ui change (fadeIn, etc.) to occur.
- *
- * @param testFx javascript condition that evaluates to a boolean,
- * it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
- * as a callback function.
- * @param onReady what to do when testFx condition is fulfilled,
- * it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
- * as a callback function.
- * @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.
- */
-function waitFor(testFx, onReady, timeOutMillis) {
-    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3001, //< Default Max Timeout is 3s
-        start = new Date().getTime(),
-        condition = false,
-        interval = setInterval(function() {
-            if ( (new Date().getTime() - start < maxtimeOutMillis) && !condition ) {
-                // If not time-out yet and condition not yet fulfilled
-                condition = (typeof(testFx) === "string" ? eval(testFx) : testFx()); //< defensive code
-            } else {
-                if(!condition) {
-                    // If condition still not fulfilled (timeout but condition is 'false')
-                    console.log("'waitFor()' timeout");
-                    phantom.exit(1);
-                } else {
-                    // Condition fulfilled (timeout and/or condition is 'true')
-                    console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
-                    if (typeof(onReady) === "string") {
-                      eval(onReady);
-                    } else {
-                      onReady();
-                    }
-                    clearInterval(interval); //< Stop this interval
-                }
-            }
-        }, 100); //< repeat check every 100ms
-}
-
-
-if (system.args.length !== 2) {
-    console.log('Usage: runtests.js URL');
-    phantom.exit(1);
-}
-
-var page = require('webpage').create();
-
-// Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
-page.onConsoleMessage = function(msg) {
-    console.log(msg);
-};
-
-page.open(system.args[1], function(status){
-    if (status !== "success") {
-        console.log("Unable to access network");
-        phantom.exit();
-    } else {
-        waitFor(function(){
-            return page.evaluate(function(){
-                return document.body.querySelector('.symbolSummary .pending') === null;
-            });
-        }, function(){
-            var exitCode = page.evaluate(function(){
-                console.log('');
-                console.log(document.body.querySelector('.description').innerText);
-                var list = document.body.querySelectorAll('.results > #details > .specDetail.failed');
-                if (list && list.length > 0) {
-                  console.log('');
-                  console.log(list.length + ' test(s) FAILED:');
-                  for (i = 0; i < list.length; ++i) {
-                      var el = list[i],
-                          desc = el.querySelector('.description'),
-                          msg = el.querySelector('.resultMessage.fail');
-                      console.log('');
-                      console.log(desc.innerText);
-                      console.log(msg.innerText);
-                      console.log('');
-                  }
-                  return 1;
-                } else {
-                  console.log(document.body.querySelector('.alert > .passingAlert.bar').innerText);
-                  return 0;
-                }
-            });
-            phantom.exit(exitCode);
-        });
-    }
-});
\ No newline at end of file
diff --git a/tests/js/index.html b/tests/js/index.html
index 339f46b861..66eb62465e 100644
--- a/tests/js/index.html
+++ b/tests/js/index.html
@@ -9,6 +9,7 @@
   <script type="text/javascript" src="lib/jasmine-1.2.0/jasmine.js"></script>
   <script type="text/javascript" src="lib/jasmine-1.2.0/jasmine-html.js"></script>
   <script type="text/javascript" src="lib/sinon-1.5.0.js"></script>
+  <script type="text/javascript" src="lib/console-runner.js"></script>
 
   <!-- include source files here... -->
   <script type="text/javascript" src="../../src/sentry/static/sentry/scripts/jquery.js"></script>
@@ -29,38 +30,18 @@
   <script type="text/javascript" src="spec/floatFormat.js"></script>
   <script type="text/javascript" src="spec/formatNumber.js"></script>
 
-  <script type="text/javascript">
-    $(function() {
-      var jasmineEnv = jasmine.getEnv();
-      jasmineEnv.updateInterval = 1000;
-
-      var htmlReporter = new jasmine.HtmlReporter();
-
-      jasmineEnv.addReporter(htmlReporter);
-
-      jasmineEnv.specFilter = function(spec) {
-        return htmlReporter.specFilter(spec);
-      };
-
-      var currentWindowOnload = window.onload;
-
-      window.onload = function() {
-        if (currentWindowOnload) {
-          currentWindowOnload();
-        }
-        execJasmine();
-      };
-
-      function execJasmine() {
-        jasmineEnv.execute();
-      }
-
-    });
-  </script>
-
 </head>
 
 <body>
   <div id="dummy" style="display:none"></div>
+
+  <script type="text/javascript">
+  var console_reporter = new jasmine.ConsoleReporter()
+  $(function(){
+    jasmine.getEnv().addReporter(new jasmine.TrivialReporter());
+    jasmine.getEnv().addReporter(console_reporter);
+    jasmine.getEnv().execute();
+  });
+  </script>
 </body>
 </html>
diff --git a/tests/js/lib/console-runner.js b/tests/js/lib/console-runner.js
new file mode 100644
index 0000000000..4a215505bb
--- /dev/null
+++ b/tests/js/lib/console-runner.js
@@ -0,0 +1,103 @@
+/**
+ Jasmine Reporter that outputs test results to the browser console. 
+ Useful for running in a headless environment such as PhantomJs, ZombieJs etc.
+
+ Usage:
+ // From your html file that loads jasmine:  
+ jasmine.getEnv().addReporter(new jasmine.ConsoleReporter());
+ jasmine.getEnv().execute();
+*/
+
+(function(jasmine, console) {
+  if (!jasmine) {
+    throw "jasmine library isn't loaded!";
+  }
+
+  var ANSI = {}
+  ANSI.color_map = {
+      "green" : 32,
+      "red"   : 31
+  }
+
+  ANSI.colorize_text = function(text, color) {
+    var color_code = this.color_map[color];
+    return "\033[" + color_code + "m" + text + "\033[0m";
+  }
+  
+  var ConsoleReporter = function() {
+    if (!console || !console.log) { throw "console isn't present!"; }
+    this.status = this.statuses.stopped;
+  };
+
+  var proto = ConsoleReporter.prototype;
+  proto.statuses = {
+    stopped : "stopped",
+    running : "running",
+    fail    : "fail",
+    success : "success"
+  };
+
+  proto.reportRunnerStarting = function(runner) {
+    this.status = this.statuses.running;
+    this.start_time = (new Date()).getTime();
+    this.executed_specs = 0;
+    this.passed_specs = 0;
+    this.log("Starting...");
+  };
+
+  proto.reportRunnerResults = function(runner) {
+    var failed = this.executed_specs - this.passed_specs;
+    var spec_str = this.executed_specs + (this.executed_specs === 1 ? " spec, " : " specs, ");
+    var fail_str = failed + (failed === 1 ? " failure in " : " failures in ");
+    var color = (failed > 0)? "red" : "green";
+    var dur = (new Date()).getTime() - this.start_time;
+
+    this.log("");
+    this.log("Finished");
+    this.log("-----------------");
+    this.log(spec_str + fail_str + (dur/1000) + "s.", color);
+
+    this.status = (failed > 0)? this.statuses.fail : this.statuses.success;
+
+    /* Print something that signals that testing is over so that headless browsers
+       like PhantomJs know when to terminate. */
+    this.log("");
+    this.log("ConsoleReporter finished");
+  };
+
+
+  proto.reportSpecStarting = function(spec) {
+    this.executed_specs++;
+  };
+
+  proto.reportSpecResults = function(spec) {
+    if (spec.results().passed()) {
+      this.passed_specs++;
+      return;
+    }
+
+    var resultText = spec.suite.description + " : " + spec.description;
+    this.log(resultText, "red");
+
+    var items = spec.results().getItems()
+    for (var i = 0; i < items.length; i++) {
+      var trace = items[i].trace.stack || items[i].trace;
+      this.log(trace, "red");
+    }
+  };
+
+  proto.reportSuiteResults = function(suite) {
+    if (!suite.parentSuite) { return; }
+    var results = suite.results();
+    var failed = results.totalCount - results.passedCount;
+    var color = (failed > 0)? "red" : "green";
+    this.log(suite.description + ": " + results.passedCount + " of " + results.totalCount + " passed.", color);
+  };
+
+  proto.log = function(str, color) {
+    var text = (color != undefined)? ANSI.colorize_text(str, color) : str;
+    console.log(text)
+  };
+
+  jasmine.ConsoleReporter = ConsoleReporter;
+})(jasmine, console);
