commit b57b14da26cbc9d416f5ffcec0a72aca60129bcf
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Sep 27 16:43:07 2014 -0700

    Add quotation support to queries + tests

diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index d3f55f98aa..c9902beb3e 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -9,12 +9,25 @@ def parse_query(query, user):
     tokens = query.split(' ')
 
     results = {'tags': {}, 'query': []}
-    for token in tokens:
+
+    tokens_iter = iter(tokens)
+    for token in tokens_iter:
         if ':' not in token:
             results['query'].append(token)
             continue
 
         key, value = token.split(':', 1)
+        if value[0] == '"':
+            nvalue = value
+            while nvalue[-1] != '"':
+                try:
+                    nvalue = tokens_iter.next()
+                except StopIteration:
+                    break
+                value = '%s %s' % (value, nvalue)
+
+            if value.endswith('"'):
+                value = value[1:-1]
 
         if key == 'is':
             try:
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
new file mode 100644
index 0000000000..425b9c7190
--- /dev/null
+++ b/tests/sentry/search/test_utils.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from sentry.constants import STATUS_RESOLVED
+from sentry.testutils import TestCase
+from sentry.search.utils import parse_query
+
+
+class ParseQueryTest(TestCase):
+    def test_simple(self):
+        result = parse_query('foo bar', self.user)
+        assert result == {'tags': {}, 'query': 'foo bar'}
+
+    def test_mix_tag_and_query(self):
+        result = parse_query('foo bar key:value', self.user)
+        assert result == {'tags': {'key': 'value'}, 'query': 'foo bar'}
+
+    def test_single_tag(self):
+        result = parse_query('key:value', self.user)
+        assert result == {'tags': {'key': 'value'}, 'query': ''}
+
+    def test_multiple_tags(self):
+        result = parse_query('foo:bar key:value', self.user)
+        assert result == {'tags': {'key': 'value', 'foo': 'bar'}, 'query': ''}
+
+    def test_single_tag_with_quotes(self):
+        result = parse_query('foo:"bar"', self.user)
+        assert result == {'tags': {'foo': 'bar'}, 'query': ''}
+
+    def test_tag_with_quotes_and_query(self):
+        result = parse_query('key:"a value" hello', self.user)
+        assert result == {'tags': {'key': 'a value'}, 'query': 'hello'}
+
+    def test_is_resolved(self):
+        result = parse_query('is:resolved', self.user)
+        assert result == {'status': STATUS_RESOLVED, 'tags': {}, 'query': ''}
+
+    def test_assigned_me(self):
+        result = parse_query('assigned:me', self.user)
+        assert result == {'assigned_to': self.user, 'tags': {}, 'query': ''}
