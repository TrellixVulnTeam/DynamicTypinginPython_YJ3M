commit 7e2aa954fa5096ab4d467d44073e575842be0b34
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 2 17:23:11 2015 -0800

    Add stacktrace entry

diff --git a/src/sentry/static/sentry/app/views/groupDetails/event.jsx b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
index cd3cce4bcd..d1db4be4ba 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/event.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
@@ -34,10 +34,11 @@ var GroupEvent = React.createClass({
     event: PropTypes.Event.isRequired
   },
 
-  // TODO(dcramer): figure out how we make this extensible
+  // TODO(dcramer): make this extensible
   interfaces: {
     exception: require("./interfaces/exception"),
-    request: require("./interfaces/request")
+    request: require("./interfaces/request"),
+    stacktrace: require("./interfaces/stacktrace")
   },
 
   render(){
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
index 7ced8c40f2..593825f98e 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/exception.jsx
@@ -5,91 +5,7 @@ var classSet = require("react/lib/cx");
 
 var GroupEventDataSection = require("../eventDataSection");
 var PropTypes = require("../../../proptypes");
-
-var Frame = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired
-  },
-
-  isDefined(item) {
-    return typeof item !== "undefined" && item !== null;
-  },
-
-  isUrl(filename) {
-    if (!filename) {
-      return false;
-    }
-    return filename.indexOf('http:') !== -1 || filename.indexOf('https:') !== -1;
-  },
-
-  render() {
-    var data = this.props.data;
-
-    var className = classSet({
-      "frame": true,
-      "system-frame": !data.in_app,
-      "frame-errors": data.errors,
-    });
-
-    var title = [];
-
-    if (this.isDefined(data.filename || data.module)) {
-      title.push(<code>{data.filename || data.module}</code>);
-      if (this.isUrl(data.abs_path)) {
-        title.push(<a href={data.abs_path} className="icon-share" />);
-      }
-      if (this.isDefined(data.function)) {
-        title.push(<span> in </span>);
-      }
-    }
-
-    if (this.isDefined(data.function)) {
-        title.push(<code>{data.function}</code>);
-    }
-
-    if (this.isDefined(data.lineno)) {
-      title.push(<span> at line </span>);
-      if (this.isDefined(data.colno)) {
-        title.push(<code>{data.lineno}:{data.colno}</code>);
-      } else {
-        title.push(<code>{data.lineno}</code>);
-      }
-    }
-
-    var context = '';
-    if (this.isDefined(data.context)) {
-      context = (
-        <ol start={data.start_lineno} className="context">
-        {this.isDefined(data.errors) &&
-          <li className="expandable error"
-              key="errors">{data.errors.join(", ")}</li>
-        }
-        {data.pre_context.map((lineNo, line) => {
-          return <li className="expandable" key={lineNo}>{line}</li>;
-        })}
-        <li className="active expandable" key="active">{data.context_line}</li>
-        {data.post_context.map((lineNo, line) => {
-          return <li className="expandable" key={lineNo}>{line}</li>;
-        })}
-        </ol>
-      );
-    } else if (this.isDefined(data.context_line)) {
-      context = (
-        <ol start={data.lineno} className="context">
-          <li className="active">{data.context_line}</li>
-        </ol>
-      );
-    }
-    // TODO(dcramer): implement popover annotations
-    // TODO(dcramer): implement local vars
-    return (
-      <li className={className}>
-        <p>{title}</p>
-        {context}
-      </li>
-    );
-  }
-});
+var StacktraceContent = require("./stacktraceContent");
 
 var ExceptionInterface = React.createClass({
   propTypes: {
@@ -105,40 +21,15 @@ var ExceptionInterface = React.createClass({
 
     // TODO(dcramer): implement exceptions omitted
     var children = data.values.map((exc, excIdx) => {
-      var frames = [];
-
-      var firstFrameOmitted, lastFrameOmitted;
-      if (exc.stacktrace.frames_omitted) {
-        firstFrameOmitted = exc.stacktrace.frames_omitted[0];
-        lastFrameOmitted = exc.stacktrace.frames_omitted[1];
-      } else {
-        firstFrameOmitted = null;
-        lastFrameOmitted = null;
-      }
-
-      exc.stacktrace.frames.forEach((frame, frameIdx) => {
-        frames.push(<Frame key={frameIdx} data={frame} />);
-        if (frameIdx === firstFrameOmitted) {
-          frames.push((
-            <li className="frames-omitted" key="omitted">
-              Frames {firstFrameOmitted} until {lastFrameOmitted} were omitted and not available.
-            </li>
-          ));
-        }
-
-      });
-
       return (
-        <div className="traceback" key={excIdx}>
+        <div key={excIdx}>
           <h3>
             <span>{exc.type}</span>
           </h3>
           {exc.value &&
             <pre>{exc.value}</pre>
           }
-          <ul>
-            {frames}
-          </ul>
+          <StacktraceContent data={exc.stacktrace} />
         </div>
       );
     });
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx
new file mode 100644
index 0000000000..a33009a2a8
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktrace.jsx
@@ -0,0 +1,34 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var classSet = require("react/lib/cx");
+
+var GroupEventDataSection = require("../eventDataSection");
+var PropTypes = require("../../../proptypes");
+var StacktraceContent = require("./stacktraceContent");
+
+var StacktraceInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    data: React.PropTypes.object.isRequired
+  },
+
+  render() {
+    var group = this.props.group;
+    var evt = this.props.event;
+    var data = this.props.data;
+
+    return (
+      <GroupEventDataSection
+          group={group}
+          event={evt}
+          type="stacktrace"
+          title="Stacktrace">
+        <StacktraceContent data={data} />
+      </GroupEventDataSection>
+    );
+  }
+});
+
+module.exports = StacktraceInterface;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx
new file mode 100644
index 0000000000..286bce13a3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/interfaces/stacktraceContent.jsx
@@ -0,0 +1,134 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var classSet = require("react/lib/cx");
+
+var GroupEventDataSection = require("../eventDataSection");
+var PropTypes = require("../../../proptypes");
+
+var Frame = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  isDefined(item) {
+    return typeof item !== "undefined" && item !== null;
+  },
+
+  isUrl(filename) {
+    if (!filename) {
+      return false;
+    }
+    return filename.indexOf('http:') !== -1 || filename.indexOf('https:') !== -1;
+  },
+
+  render() {
+    var data = this.props.data;
+
+    var className = classSet({
+      "frame": true,
+      "system-frame": !data.in_app,
+      "frame-errors": data.errors,
+    });
+
+    var title = [];
+
+    if (this.isDefined(data.filename || data.module)) {
+      title.push(<code>{data.filename || data.module}</code>);
+      if (this.isUrl(data.abs_path)) {
+        title.push(<a href={data.abs_path} className="icon-share" />);
+      }
+      if (this.isDefined(data.function)) {
+        title.push(<span> in </span>);
+      }
+    }
+
+    if (this.isDefined(data.function)) {
+        title.push(<code>{data.function}</code>);
+    }
+
+    if (this.isDefined(data.lineno)) {
+      title.push(<span> at line </span>);
+      if (this.isDefined(data.colno)) {
+        title.push(<code>{data.lineno}:{data.colno}</code>);
+      } else {
+        title.push(<code>{data.lineno}</code>);
+      }
+    }
+
+    var context = '';
+    if (this.isDefined(data.context)) {
+      context = (
+        <ol start={data.start_lineno} className="context">
+        {this.isDefined(data.errors) &&
+          <li className="expandable error"
+              key="errors">{data.errors.join(", ")}</li>
+        }
+        {data.pre_context.map((lineNo, line) => {
+          return <li className="expandable" key={lineNo}>{line}</li>;
+        })}
+        <li className="active expandable" key="active">{data.context_line}</li>
+        {data.post_context.map((lineNo, line) => {
+          return <li className="expandable" key={lineNo}>{line}</li>;
+        })}
+        </ol>
+      );
+    } else if (this.isDefined(data.context_line)) {
+      context = (
+        <ol start={data.lineno} className="context">
+          <li className="active">{data.context_line}</li>
+        </ol>
+      );
+    }
+    // TODO(dcramer): implement popover annotations
+    // TODO(dcramer): implement local vars
+    return (
+      <li className={className}>
+        <p>{title}</p>
+        {context}
+      </li>
+    );
+  }
+});
+
+var StacktraceContent = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  render() {
+    var data = this.props.data;
+    var frames = [];
+    var firstFrameOmitted, lastFrameOmitted;
+
+    if (data.frames_omitted) {
+      firstFrameOmitted = data.frames_omitted[0];
+      lastFrameOmitted = data.frames_omitted[1];
+    } else {
+      firstFrameOmitted = null;
+      lastFrameOmitted = null;
+    }
+
+    data.frames.forEach((frame, frameIdx) => {
+      frames.push(<Frame key={frameIdx} data={frame} />);
+      if (frameIdx === firstFrameOmitted) {
+        frames.push((
+          <li className="frames-omitted" key="omitted">
+            Frames {firstFrameOmitted} until {lastFrameOmitted} were omitted and not available.
+          </li>
+        ));
+      }
+
+    });
+
+    return (
+      <div className="traceback">
+        <ul>
+          {frames}
+        </ul>
+      </div>
+    );
+  }
+});
+
+module.exports = StacktraceContent;
