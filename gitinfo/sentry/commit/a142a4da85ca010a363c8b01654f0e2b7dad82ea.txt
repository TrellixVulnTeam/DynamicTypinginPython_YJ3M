commit a142a4da85ca010a363c8b01654f0e2b7dad82ea
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Jun 22 11:51:38 2018 -0700

    feat(integrations): Move integrations to the org-level (#8768)
    
    * feat(integrations): Move integrations to the org-level
    
    Moves integration management and configuration to the organization level.
    
    This breaks out integrations which have configuration into a separate
    configuration page, where org-specific configurations for the
    integration can be made, as well as adding the integration specifically
    to projects for project level configurations.
    
     * Moves shared views into `app/views/organizationIntegrations` module,
       which indicates that the views are currently shared between the
       org-level integrations settings page, and the project-level
       integrations page.
    
     * The Organization > Integrations settings page currently renders the
       organizationIntegrations index view, which is currently also used as
       a component in the project integrations settings.
    
     * Settings are no longer a expanded pane from an integration, and now
       instead live in a new organization integration configuration page,
       which currently supports integrations with the following features:
    
       - Integrations with the `can_add_project` flag expose a panel to
         enable the integration for that project.
    
         **NOTE**: In the near future this will also be able to be done
         through the integrations settings page, which will allow enabled
         integrations to be turned on for that project directly within the
         project settings.
    
       - Repository management. Integrations with the `commits` feature
         can have repositories added directly from the integrations
         configuration page.
    
     * Project integration configurations are _mostly_ unchanged, however
       the configure popout panel (which was only used for jira at this
       time) is now missing as the configure button takes the user directly
       to the organization settings now

diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index ce674448ff..876810e7f4 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -20,6 +20,9 @@ class IntegrationSerializer(Serializer):
             'provider': {
                 'key': provider.key,
                 'name': provider.name,
+                'canAdd': provider.can_add,
+                'canAddProject': provider.can_add_project,
+                'features': [f.value for f in provider.features],
             },
         }
 
@@ -62,13 +65,13 @@ class OrganizationIntegrationSerializer(Serializer):
                 project__organization_id__in=[i.organization_id for i in item_list],
             )
 
-        project_integrations_by_org = defaultdict(dict)
+        projects_by_integrations = defaultdict(list)
         for pi in project_integrations:
-            project_integrations_by_org[pi.project.organization_id][pi.project.slug] = pi.config
+            projects_by_integrations[pi.integration_id].append(pi.project.slug)
 
         return {
             i: {
-                'project_configs': project_integrations_by_org.get(i.organization_id, {})
+                'projects': projects_by_integrations.get(i.integration_id, [])
             } for i in item_list
         }
 
@@ -84,7 +87,7 @@ class OrganizationIntegrationSerializer(Serializer):
         )
         integration.update({
             'configData': obj.config,
-            'configDataProjects': attrs['project_configs'],
+            'projects': attrs['projects'],
         })
 
         return integration
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 6590d36cd7..53fe89f889 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1185,6 +1185,7 @@ SENTRY_ROLES = (
                 'project:write',
                 'project:admin',
                 'project:releases',
+                'project:integrations',
                 'event:read',
                 'event:write',
                 'event:admin',
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index ac38587281..dabe9ec247 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -5,7 +5,7 @@ from django.utils.translation import ugettext_lazy as _
 from sentry import http, options
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.github import get_user_info
-from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
+from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError
 from sentry.integrations.constants import ERR_INTERNAL, ERR_UNAUTHORIZED
 from sentry.integrations.repositories import RepositoryMixin
@@ -24,20 +24,13 @@ Define a relationship between Sentry and GitHub.
  * Create or link existing GitHub issues. (coming soon)
 """
 
-alert_link = {
-    'text': 'Looking to add one of your repositories to sync commit data? Add a **Repo** for your organization.',
-    'link': '/settings/{orgId}/repos/'
-}
-
 metadata = IntegrationMetadata(
     description=DESCRIPTION.strip(),
     author='The Sentry Team',
     noun=_('Installation'),
     issue_url='https://github.com/getsentry/sentry/issues/new?title=GitHub%20Integration:%20&labels=Component%3A%20Integrations',
     source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/github',
-    aspects={
-        'alert_link': alert_link,
-    }
+    aspects={},
 )
 
 API_ERRORS = {
@@ -77,6 +70,11 @@ class GitHubIntegrationProvider(IntegrationProvider):
     metadata = metadata
     integration_cls = GitHubIntegration
 
+    features = frozenset([
+        IntegrationFeatures.COMMITS,
+        IntegrationFeatures.ISSUE_SYNC,
+    ])
+
     setup_dialog_config = {
         'width': 1030,
         'height': 1000,
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 657eb59fb9..d011e864bf 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -19,8 +19,8 @@ Define a relationship between Sentry and your Slack workspace(s).
 """
 
 alert_link = {
-    'text': 'Looking to send Sentry alerts to Slack? Add an **Alert Rule** for this project.',
-    'link': '/settings/{orgId}/{projectId}/alerts/rules/'
+    'text': 'Looking to send Sentry alerts to Slack? Add an **Alert Rule** to a project.',
+    'link': '/settings/:orgId/:projectId/alerts/rules/'
 }
 
 metadata = IntegrationMetadata(
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 18567ceebd..1bfc484051 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -406,7 +406,14 @@ const projectSettingsRoutes = (
       path="integrations/:providerKey/"
       name="Integration Configuration"
       componentPromise={() =>
-        import(/* webpackChunkName: "OrganizationIntegration" */ './views/organizationIntegration')}
+        import(/* webpackChunkName: "Integration" */ './views/settings/organizationIntegrations/integration')}
+      component={errorHandler(LazyLoad)}
+    />
+    <Route
+      path="integrations/:providerKey/:integrationId/"
+      name="Integration Configuration"
+      componentPromise={() =>
+        import(/* webpackChunkName: "ProjectIntegration" */ './views/settings/project/projectIntegration')}
       component={errorHandler(LazyLoad)}
     />
     <Route
@@ -576,6 +583,28 @@ function routes() {
           />
         </Route>
       </Route>
+
+      <Route name="Integrations" path="integrations/">
+        <IndexRoute
+          componentPromise={() =>
+            import(/*webpackChunkName: OrganizationIntegrations*/ './views/organizationIntegrations')}
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          name="Integration"
+          path=":providerKey/"
+          componentPromise={() =>
+            import(/*webpackChunkName: Integration*/ './views/settings/organizationIntegrations/integration')}
+          component={errorHandler(LazyLoad)}
+        />
+        <Route
+          name="Configure Integration"
+          path=":providerKey/:integrationId/"
+          componentPromise={() =>
+            import(/*webpackChunkName: ConfigureIntegration*/ './views/settings/organizationIntegrations/configureIntegration')}
+          component={errorHandler(LazyLoad)}
+        />
+      </Route>
     </React.Fragment>
   );
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegration/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegration/index.jsx
deleted file mode 100644
index 1563cc1d7b..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegration/index.jsx
+++ /dev/null
@@ -1,335 +0,0 @@
-import {Box} from 'grid-emotion';
-import {keyBy} from 'lodash';
-import React from 'react';
-
-import {sortArray} from 'app/utils';
-import {t} from 'app/locale';
-import AlertLink from 'app/components/alertLink';
-import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/buttons/button';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import IndicatorStore from 'app/stores/indicatorStore';
-import LoadingError from 'app/components/loadingError';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import Tooltip from 'app/components/tooltip';
-import marked from 'app/utils/marked';
-
-import IntegrationDetails from './integrationDetails';
-import InstalledIntegration from './installedIntegration';
-
-const alertLinkMarkedRenderer = new marked.Renderer();
-alertLinkMarkedRenderer.paragraph = s => s;
-
-function computeCenteredWindow(width, height) {
-  const screenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
-  const screenTop = window.screenTop != undefined ? window.screenTop : screen.top;
-  const innerWidth = window.innerWidth
-    ? window.innerWidth
-    : document.documentElement.clientWidth
-      ? document.documentElement.clientWidth
-      : screen.width;
-
-  const innerHeight = window.innerHeight
-    ? window.innerHeight
-    : document.documentElement.clientHeight
-      ? document.documentElement.clientHeight
-      : screen.height;
-
-  const left = innerWidth / 2 - width / 2 + screenLeft;
-  const top = innerHeight / 2 - height / 2 + screenTop;
-
-  return {left, top};
-}
-
-export default class OrganizationIntegration extends AsyncView {
-  componentDidMount() {
-    this.dialog = null;
-    window.addEventListener('message', this.receiveMessage, false);
-  }
-
-  componentWillUnmount() {
-    super.componentWillUnmount();
-    window.removeEventListener('message', this.receiveMessage);
-
-    if (this.dialog !== null) {
-      this.dialog.close();
-    }
-  }
-
-  getProvider() {
-    const {config} = this.state;
-
-    if (config !== null) {
-      return config.providers.find(p => p.key == this.props.params.providerKey) || null;
-    }
-
-    return null;
-  }
-
-  getTitle() {
-    const provider = this.getProvider();
-
-    if (provider === null) {
-      return 'Global Integrations';
-    }
-
-    return `${provider.name} Integration`;
-  }
-
-  getEndpoints() {
-    const {orgId, providerKey} = this.props.params;
-
-    return [
-      ['config', `/organizations/${orgId}/config/integrations/`],
-      [
-        'integrations',
-        `/organizations/${orgId}/integrations/?provider_key=${providerKey}`,
-      ],
-    ];
-  }
-
-  mergeIntegration(integration) {
-    // Merge the new integration into the list. If we're updating an
-    // integration overwrite the old integration.
-    const keyedItems = keyBy(this.state.integrations, i => i.id);
-    const integrations = sortArray(
-      Object.values({...keyedItems, [integration.id]: integration}),
-      i => i.name
-    );
-    this.setState({integrations});
-  }
-
-  handleAddIntegration = provider => {
-    const name = 'sentryAddIntegration';
-
-    const {url, width, height} = provider.setupDialog;
-    const {left, top} = computeCenteredWindow(width, height);
-
-    this.dialog = window.open(
-      url,
-      name,
-      `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`
-    );
-
-    this.dialog.focus();
-  };
-
-  handleDisableIntegration = integration => {
-    const name = 'sentryDisableIntegration';
-
-    const width = 800;
-    const height = 600;
-    const {left, top} = computeCenteredWindow(width, height);
-
-    this.dialog = window.open(
-      'https://github.com/settings/installations',
-      name,
-      `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`
-    );
-
-    this.dialog.focus();
-  };
-
-  receiveMessage = message => {
-    if (message.origin !== document.origin) {
-      return;
-    }
-
-    if (message.source !== this.dialog) {
-      return;
-    }
-
-    this.dialog = null;
-
-    const {success, data} = message.data;
-
-    if (!success) {
-      IndicatorStore.addError(t('Unable to add Integration'));
-      return;
-    }
-
-    this.mergeIntegration(data);
-    IndicatorStore.addSuccess(t('Integration Added'));
-  };
-
-  handleDeleteIntegration = integration => {
-    const {orgId} = this.props.params;
-    const saveIndicator = IndicatorStore.add(t('Removing Integration'));
-
-    const options = {
-      method: 'DELETE',
-      success: () => {
-        this.setState({
-          integrations: this.state.integrations.filter(
-            item => item.id !== integration.id
-          ),
-        });
-        IndicatorStore.addSuccess(t('Integration removed'));
-      },
-      error: () => IndicatorStore.addError(t('Failed to remove Integration')),
-      complete: () => IndicatorStore.remove(saveIndicator),
-    };
-
-    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
-  };
-
-  handleRemoveProjectIntegration = integration => {
-    const {orgId, projectId} = this.props.params;
-    const saveIndicator = IndicatorStore.add(t('Disabling integration for project'));
-
-    const options = {
-      method: 'DELETE',
-      success: () => {
-        delete integration.configDataProjects[projectId];
-        this.mergeIntegration(integration);
-
-        IndicatorStore.addSuccess(t('Integration disabled for project'));
-      },
-      error: () =>
-        IndicatorStore.addError(t('Failed to disable integration for project')),
-      complete: () => IndicatorStore.remove(saveIndicator),
-    };
-
-    this.api.request(
-      `/projects/${orgId}/${projectId}/integrations/${integration.id}/`,
-      options
-    );
-  };
-
-  handleEnableProjectIntegration = integration => {
-    const {orgId, projectId} = this.props.params;
-    const saveIndicator = IndicatorStore.add(t('Enabling integration for project'));
-
-    const options = {
-      method: 'PUT',
-      success: () => {
-        // XXX(epurkhiser): Right now we just add the project to the
-        // configDataProjects list within the integration object. Later this
-        // may have been populated and we actually need to reload the
-        // integration. Probably when the integration has an enabled field and
-        // PUTing enables or disables the ProjectIntegration.
-        integration.configDataProjects[projectId] = {};
-        this.mergeIntegration(integration);
-
-        IndicatorStore.addSuccess(t('Integration enabled for project'));
-      },
-      error: () => IndicatorStore.addError(t('Failed to enable integration for project')),
-      complete: () => IndicatorStore.remove(saveIndicator),
-    };
-
-    this.api.request(
-      `/projects/${orgId}/${projectId}/integrations/${integration.id}/`,
-      options
-    );
-  };
-
-  handleToggleProjectIntegration = (integration, enabled) => {
-    if (enabled) {
-      this.handleEnableProjectIntegration(integration);
-    } else {
-      this.handleRemoveProjectIntegration(integration);
-    }
-  };
-
-  renderAlertLink(provider) {
-    const config = provider.metadata.aspects.alert_link;
-
-    if (config === undefined) {
-      return undefined;
-    }
-
-    const linkHtml = marked(config.text, {renderer: alertLinkMarkedRenderer});
-    let link = config.link;
-
-    for (const key in this.props.params) {
-      link = link.replace(`{${key}}`, this.props.params[key]);
-    }
-
-    let props = link.startsWith('http') ? {href: link} : {to: link};
-
-    return (
-      <AlertLink {...props}>
-        <span dangerouslySetInnerHTML={{__html: linkHtml}} />
-      </AlertLink>
-    );
-  }
-
-  renderBody() {
-    const integrations = this.state.integrations;
-    const provider = this.getProvider();
-
-    if (provider === null) {
-      return <LoadingError message={t('Invalid integration provider')} />;
-    }
-
-    const titleIcon = <PluginIcon size={28} pluginId={provider.key} />;
-
-    const header = (
-      <PanelHeader disablePadding hasButtons>
-        <Box px={2}>{provider.metadata.noun}</Box>
-        <Tooltip
-          disabled={provider.canAdd}
-          tooltipOptions={{placement: 'left'}}
-          title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}
-        >
-          <Box mr={1}>
-            <Button
-              disabled={!provider.canAdd}
-              size="xsmall"
-              onClick={() => this.handleAddIntegration(provider)}
-            >
-              <span className="icon icon-add" /> {t('Add') + ' ' + provider.metadata.noun}
-            </Button>
-          </Box>
-        </Tooltip>
-      </PanelHeader>
-    );
-
-    const {orgId, projectId} = this.props.params;
-
-    const integrationList =
-      integrations.length === 0 ? (
-        <EmptyMessage>{t('No %s integrations configured.', provider.name)}</EmptyMessage>
-      ) : (
-        integrations.map(integration => (
-          <InstalledIntegration
-            key={integration.id}
-            orgId={orgId}
-            projectId={projectId}
-            provider={provider}
-            integration={integration}
-            onToggleEnabled={e => this.handleToggleProjectIntegration(integration, e)}
-            onRemove={() => this.handleDeleteIntegration(integration)}
-            onDisable={() => this.handleDisableIntegration(integration)}
-          />
-        ))
-      );
-
-    return (
-      <React.Fragment>
-        <SettingsPageHeader title={provider.name} icon={titleIcon} />
-
-        <Panel>
-          {header}
-          <PanelBody>{integrationList}</PanelBody>
-        </Panel>
-
-        {this.renderAlertLink(provider)}
-
-        <hr />
-
-        <h5>{t('%s Integration', provider.name)}</h5>
-        <IntegrationDetails
-          markdownDescription={provider.metadata.description}
-          author={provider.metadata.author}
-          links={[
-            {href: provider.metadata.issue_url, title: t('Report an Issue')},
-            {href: provider.metadata.source_url, title: t('View Source')},
-          ]}
-        />
-      </React.Fragment>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx
deleted file mode 100644
index 3f944520d6..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx
+++ /dev/null
@@ -1,213 +0,0 @@
-import {Box, Flex} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {PanelItem, PanelAlert} from 'app/components/panels';
-import {t} from 'app/locale';
-import Button from 'app/components/buttons/button';
-import Confirm from 'app/components/confirm';
-import Switch from 'app/components/switch';
-import Tooltip from 'app/components/tooltip';
-import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
-import Form from 'app/views/settings/components/forms/form';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-
-const IntegrationIcon = styled.img`
-  height: 32px;
-  width: 32px;
-  border-radius: 2px;
-  display: block;
-`;
-
-const IntegrationName = styled.div`
-  font-size: 1.6rem;
-  margin-bottom: 3px;
-`;
-
-const DomainName = styled.div`
-  color: ${p => p.theme.gray3};
-  font-size: 1.4rem;
-`;
-
-export default class InstalledIntegration extends React.Component {
-  static propTypes = {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    provider: PropTypes.object.isRequired,
-    integration: PropTypes.object.isRequired,
-    onRemove: PropTypes.func.isRequired,
-    onToggleEnabled: PropTypes.func.isRequired,
-    onDisable: PropTypes.func.isRequired,
-  };
-
-  constructor() {
-    super();
-    this.state = {configuring: false};
-  }
-
-  onConfigure = () => this.setState({configuring: !this.state.configuring});
-
-  renderConfiguration() {
-    const {integration, orgId, projectId} = this.props;
-    const {configProject, configOrganization} = integration;
-
-    // Since integrations currently live under project settings, we have the
-    // context needed to display both organizatoon-level integration
-    // configuration, as well as project-level integration configuration. We
-    // make the seperation clear with an alert for now.
-
-    const formProps = {
-      hideFooter: true,
-      saveOnBlur: true,
-      allowUndo: true,
-      apiMethod: 'POST',
-      dataTransformer: data => ({config: data}),
-    };
-
-    return (
-      <React.Fragment>
-        {configProject.length > 0 && (
-          <Form
-            {...formProps}
-            initialData={integration.configDataProjects[projectId]}
-            apiEndpoint={`/projects/${orgId}/${projectId}/integrations/${integration.id}/`}
-          >
-            {configProject.map(field => (
-              <FieldFromConfig key={field.name} field={field} />
-            ))}
-          </Form>
-        )}
-        {configOrganization.length > 0 && (
-          <React.Fragment>
-            <PanelAlert type="info">
-              {t(
-                'The following configurations are organization-scoped. Changing these will change the settings globally.'
-              )}
-            </PanelAlert>
-            <Form
-              {...formProps}
-              initialData={integration.configData}
-              apiEndpoint={`/organizations/${this.props
-                .orgId}/integrations/${integration.id}/`}
-            >
-              {configOrganization.map(field => (
-                <FieldFromConfig key={field.name} field={field} />
-              ))}
-            </Form>
-          </React.Fragment>
-        )}
-      </React.Fragment>
-    );
-  }
-
-  isEnabledForProject() {
-    return this.props.integration.configDataProjects[this.props.projectId] !== undefined;
-  }
-
-  hasConfiguration() {
-    return (
-      this.props.integration.configProject.length > 0 ||
-      this.props.integration.configOrganization.length > 0
-    );
-  }
-
-  disableIntegration(integration) {
-    const message = `You must uninstall this integration
-      from ${integration.provider.key} in order to delete this integration
-      in Sentry.`;
-    return (
-      <Box mr={1} pr={2}>
-        <Confirm
-          disabled={false}
-          confirmText={t('Go to GitHub')}
-          message={t(message)}
-          onConfirm={() => this.props.onDisable(integration)}
-        >
-          <Button size="small">
-            <span className="icon icon-trash" style={{margin: 0}} />
-          </Button>
-        </Confirm>
-      </Box>
-    );
-  }
-
-  removeIntegration(integration) {
-    const message = `Removing this integration will disable
-      the integration for all projects and any
-      repositories from this integration.
-      Are you sure you want to remove this integration?`;
-    return (
-      <Box mr={1} pr={2}>
-        <Confirm
-          disabled={integration.status === 'disabled'}
-          message={t(message)}
-          onConfirm={() => this.props.onRemove()}
-        >
-          <Button size="small">
-            <span className="icon icon-trash" style={{margin: 0}} />
-          </Button>
-        </Confirm>
-      </Box>
-    );
-  }
-
-  render() {
-    const {integration, provider} = this.props;
-    const enabled = this.isEnabledForProject();
-    const style =
-      integration.status === 'disabled' ? {filter: 'grayscale(1)', opacity: '0.4'} : {};
-
-    return (
-      <React.Fragment>
-        <PanelItem p={0} py={2} key={integration.id} align="center">
-          <Box style={style} pl={2}>
-            {integration.icon ? (
-              <IntegrationIcon src={integration.icon} />
-            ) : (
-              <PluginIcon size={32} pluginId={provider.key} />
-            )}
-          </Box>
-          <Box style={style} px={2} flex={1}>
-            <IntegrationName>{integration.name}</IntegrationName>
-            <DomainName>{integration.domainName}</DomainName>
-          </Box>
-          {provider.canAddProject && (
-            <Flex mr={1}>
-              <Tooltip title={t('Enable for this Project')}>
-                <Switch
-                  size="lg"
-                  isActive={enabled}
-                  toggle={() => this.props.onToggleEnabled(!enabled)}
-                />
-              </Tooltip>
-            </Flex>
-          )}
-          {this.hasConfiguration() && (
-            <Box mr={1}>
-              <Button
-                size="small"
-                disabled={!this.isEnabledForProject()}
-                priority={this.state.configuring ? 'primary' : undefined}
-                onClick={this.onConfigure}
-              >
-                Configure
-              </Button>
-            </Box>
-          )}
-          {integration.status === 'active' && integration.provider.key === 'github'
-            ? this.disableIntegration(integration)
-            : this.removeIntegration(integration)}
-        </PanelItem>
-        <div
-          style={{
-            display:
-              this.state.configuring && this.isEnabledForProject() ? 'block' : 'none',
-          }}
-        >
-          {this.renderConfiguration()}
-        </div>
-      </React.Fragment>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
new file mode 100644
index 0000000000..dc0dd27573
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
@@ -0,0 +1,108 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from 'app/locale';
+import Button from 'app/components/buttons/button';
+import IndicatorStore from 'app/stores/indicatorStore';
+import Tooltip from 'app/components/tooltip';
+
+function computeCenteredWindow(width, height) {
+  const screenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
+  const screenTop = window.screenTop != undefined ? window.screenTop : screen.top;
+  const innerWidth = window.innerWidth
+    ? window.innerWidth
+    : document.documentElement.clientWidth
+      ? document.documentElement.clientWidth
+      : screen.width;
+
+  const innerHeight = window.innerHeight
+    ? window.innerHeight
+    : document.documentElement.clientHeight
+      ? document.documentElement.clientHeight
+      : screen.height;
+
+  const left = innerWidth / 2 - width / 2 + screenLeft;
+  const top = innerHeight / 2 - height / 2 + screenTop;
+
+  return {left, top};
+}
+
+export default class AddIntegrationButton extends React.Component {
+  static propTypes = {
+    provider: PropTypes.object.isRequired,
+    onAddIntegration: PropTypes.func.isRequired,
+  };
+
+  componentDidMount() {
+    this.dialog = null;
+    window.addEventListener('message', this.receiveMessage, false);
+  }
+
+  componentWillUnmount() {
+    window.removeEventListener('message', this.receiveMessage);
+
+    if (this.dialog !== null) {
+      this.dialog.close();
+    }
+  }
+
+  handleAddIntegration = provider => {
+    const name = 'sentryAddIntegration';
+
+    const {url, width, height} = provider.setupDialog;
+    const {left, top} = computeCenteredWindow(width, height);
+
+    this.dialog = window.open(
+      url,
+      name,
+      `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`
+    );
+
+    this.dialog.focus();
+  };
+
+  receiveMessage = message => {
+    if (message.origin !== document.origin) {
+      return;
+    }
+
+    if (message.source !== this.dialog) {
+      return;
+    }
+
+    this.dialog = null;
+
+    const {success, data} = message.data;
+
+    if (!success) {
+      IndicatorStore.addError(t('Unable to add Integration'));
+      return;
+    }
+
+    this.props.onAddIntegration(data);
+    IndicatorStore.addSuccess(t('Integration Added'));
+  };
+
+  render() {
+    // eslint-disable-next-line no-unused-vars
+    const {provider, onAddIntegration, ...buttonProps} = this.props;
+
+    return (
+      <Tooltip
+        disabled={provider.canAdd}
+        tooltipOptions={{placement: 'left'}}
+        title={`Integration cannot be added on Sentry. Enable this integration via the ${provider.name} instance.`}
+      >
+        <span>
+          <Button
+            {...buttonProps}
+            disabled={!provider.canAdd}
+            onClick={() => this.handleAddIntegration(provider)}
+          >
+            <span className="icon icon-add" /> {t('Add') + ' ' + provider.metadata.noun}
+          </Button>
+        </span>
+      </Tooltip>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
similarity index 64%
rename from src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
index e847fa3ba4..63ab32346d 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/organizationIntegrations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
@@ -4,11 +4,12 @@ import React from 'react';
 import styled from 'react-emotion';
 
 import {t} from 'app/locale';
+import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import AsyncComponent from 'app/components/asyncComponent';
-import Link from 'app/components/link';
 import Button from 'app/components/buttons/button';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import Link from 'app/components/link';
 import PluginIcon from 'app/plugins/components/pluginIcon';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import theme from 'app/utils/theme';
 
 const ProviderName = styled.div`
@@ -17,19 +18,19 @@ const ProviderName = styled.div`
   margin-bottom: 3px;
 `;
 
-const TeamName = styled.div`
+const AuthorName = styled.div`
   color: ${p => p.theme.gray2};
   font-size: 14px;
 `;
 
 export default class OrganizationIntegrations extends AsyncComponent {
   static propTypes = {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
+    linkPrefix: PropTypes.string,
+    hideHeader: PropTypes.bool,
   };
 
   getEndpoints() {
-    let {orgId} = this.props;
+    let {orgId} = this.props.params;
     return [
       ['config', `/organizations/${orgId}/config/integrations/`],
       ['organization', `/organizations/${orgId}/`],
@@ -37,10 +38,12 @@ export default class OrganizationIntegrations extends AsyncComponent {
   }
 
   renderBody() {
-    let {orgId, projectId} = this.props;
+    let {location} = this.props;
     let orgFeatures = new Set(this.state.organization.features);
     let internalIntegrations = new Set(['jira']);
 
+    const linkPrefix = this.props.linkPrefix ? this.props.linkPrefix : location.pathname;
+
     const integrations = this.state.config.providers
       .filter(provider => {
         return (
@@ -54,35 +57,32 @@ export default class OrganizationIntegrations extends AsyncComponent {
           </Box>
           <Box px={2} flex={1}>
             <ProviderName>
-              <Link
-                to={`/settings/${orgId}/${projectId}/integrations/${provider.key}/`}
-                css={{color: theme.gray5}}
-              >
+              <Link to={`${linkPrefix}${provider.key}/`} css={{color: theme.gray5}}>
                 {provider.name}
               </Link>
             </ProviderName>
-            <TeamName>{provider.metadata.author}</TeamName>
+            <AuthorName>{provider.metadata.author}</AuthorName>
           </Box>
           <Box>
-            <Button
-              size="small"
-              to={`/settings/${orgId}/${projectId}/integrations/${provider.key}/`}
-            >
-              {t('Configure')}
+            <Button size="small" to={`${linkPrefix}${provider.key}/`}>
+              {t('Manage')}
             </Button>
           </Box>
         </PanelItem>
       ));
 
     return (
-      <Panel>
-        <PanelHeader disablePadding={true}>
-          <Box px={2} flex="1">
-            {t('Global Integrations')}
-          </Box>
-        </PanelHeader>
-        <PanelBody>{integrations}</PanelBody>
-      </Panel>
+      <React.Fragment>
+        {!this.props.hideHeader && <SettingsPageHeader title={t('Integrations')} />}
+        <Panel>
+          <PanelHeader disablePadding>
+            <Box px={2} flex="1">
+              {t('Integrations')}
+            </Box>
+          </PanelHeader>
+          <PanelBody>{integrations}</PanelBody>
+        </Panel>
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
new file mode 100644
index 0000000000..8e5dc4353a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.jsx
@@ -0,0 +1,99 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {PanelItem} from 'app/components/panels';
+import {t} from 'app/locale';
+import Button from 'app/components/buttons/button';
+import Confirm from 'app/components/confirm';
+import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
+
+const CONFIGURABLE_FEATURES = ['commits'];
+
+export default class InstalledIntegration extends React.Component {
+  static propTypes = {
+    orgId: PropTypes.string.isRequired,
+    provider: PropTypes.object.isRequired,
+    integration: PropTypes.object.isRequired,
+    onRemove: PropTypes.func.isRequired,
+    onDisable: PropTypes.func.isRequired,
+  };
+
+  /**
+   * Integrations have additional configuration when any of the conditions are
+   * met:
+   *
+   * - The Integration has organization-specific configuration options.
+   * - The Integration can be enabled for projects.
+   * - The Integration has configurable features
+   */
+  hasConfiguration() {
+    const {integration, provider} = this.props;
+
+    return (
+      integration.configProject.length > 0 ||
+      provider.canAddProject ||
+      provider.features.filter(f => CONFIGURABLE_FEATURES.includes(f)).length > 0
+    );
+  }
+
+  renderDisableIntegration(integration) {
+    const message = `You must uninstall this integration from
+      %s in order to delete this integration in Sentry.`;
+    return (
+      <Confirm
+        confirmText={t('Remove on GitHub')}
+        message={t(message, integration.provider.key)}
+        onConfirm={() => this.props.onDisable(integration)}
+      >
+        <Button size="small" icon="icon-trash" />
+      </Confirm>
+    );
+  }
+
+  renderRemoveIntegration(integration) {
+    const message = `Removing this integration will disable the integration for
+      all projects and any repositories from this integration.  Are you sure
+      you want to remove this integration?`;
+    return (
+      <Confirm
+        disabled={integration.status === 'disabled'}
+        message={t(message)}
+        onConfirm={() => this.props.onRemove()}
+      >
+        <Button size="small" icon="icon-trash" />
+      </Confirm>
+    );
+  }
+
+  render() {
+    const {integration, provider, orgId} = this.props;
+    const style =
+      integration.status === 'disabled' ? {filter: 'grayscale(1)', opacity: '0.4'} : {};
+
+    return (
+      <React.Fragment>
+        <PanelItem p={0} py={2} key={integration.id} align="center">
+          <Box px={2} flex={1} style={style}>
+            <IntegrationItem integration={integration} />
+          </Box>
+          {this.hasConfiguration() && (
+            <Box mr={1}>
+              <Button
+                size="small"
+                to={`/settings/${orgId}/integrations/${provider.key}/${integration.id}/`}
+              >
+                {t('Configure')}
+              </Button>
+            </Box>
+          )}
+          <Box mr={1} pr={2}>
+            {integration.status === 'active' && integration.provider.key === 'github'
+              ? this.renderDisableIntegration(integration)
+              : this.renderRemoveIntegration(integration)}
+          </Box>
+        </PanelItem>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegration/integrationDetails.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetails.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationIntegration/integrationDetails.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetails.jsx
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.jsx
new file mode 100644
index 0000000000..4d93c0a79e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.jsx
@@ -0,0 +1,25 @@
+import React from 'react';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+
+import PluginIcon from 'app/plugins/components/pluginIcon';
+
+const Icon = styled.img`
+  height: 32px;
+  width: 32px;
+  border-radius: 2px;
+  display: block;
+`;
+
+const IntegrationIcon = ({integration}) =>
+  integration.icon ? (
+    <Icon src={integration.icon} />
+  ) : (
+    <PluginIcon size={32} pluginId={integration.provider.key} />
+  );
+
+IntegrationIcon.propTypes = {
+  integration: PropTypes.object.isRequired,
+};
+
+export default IntegrationIcon;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
new file mode 100644
index 0000000000..51e22f356e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
@@ -0,0 +1,37 @@
+import {Box, Flex} from 'grid-emotion';
+import React from 'react';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+
+import IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';
+
+const IntegrationName = styled.div`
+  font-size: 1.6rem;
+  margin-bottom: 3px;
+`;
+
+const DomainName = styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 1.4rem;
+`;
+
+export default class IntegrationItem extends React.Component {
+  static propTypes = {
+    integration: PropTypes.object.isRequired,
+  };
+
+  render() {
+    const {integration} = this.props;
+    return (
+      <Flex>
+        <Box>
+          <IntegrationIcon integration={integration} />
+        </Box>
+        <Box pl={2}>
+          <IntegrationName>{integration.name}</IntegrationName>
+          <DomainName>{integration.domainName}</DomainName>
+        </Box>
+      </Flex>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx
new file mode 100644
index 0000000000..ce073a6b61
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx
@@ -0,0 +1,205 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {
+  Panel,
+  PanelAlert,
+  PanelBody,
+  PanelHeader,
+  PanelItem,
+} from 'app/components/panels';
+import {t} from 'app/locale';
+import AsyncComponent from 'app/components/asyncComponent';
+import Button from 'app/components/buttons/button';
+import Confirm from 'app/components/confirm';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import IndicatorStore from 'app/stores/indicatorStore';
+import ProjectBadge from 'app/components/idBadge/projectBadge';
+import withProjects from 'app/utils/withProjects';
+
+class IntegrationProjects extends AsyncComponent {
+  static propTypes = {
+    integrationId: PropTypes.string.isRequired,
+  };
+
+  static contextTypes = {
+    organization: PropTypes.object.isRequired,
+  };
+
+  constructor(props, context) {
+    super(props, context);
+    this.state = {adding: false};
+  }
+
+  getEndpoints() {
+    const orgId = this.context.organization.slug;
+    const {integrationId} = this.props;
+
+    return [['integration', `/organizations/${orgId}/integrations/${integrationId}/`]];
+  }
+
+  removeProject = project => {
+    const orgId = this.context.organization.slug;
+    const {integration} = this.state;
+    const saveIndicator = IndicatorStore.add(t('Removing integration from %s', project));
+
+    const options = {
+      method: 'DELETE',
+      success: () => {
+        this.setState({
+          integration: {
+            ...integration,
+            projects: integration.projects.filter(p => p !== project),
+          },
+        });
+        IndicatorStore.addSuccess(t('Removed integration from %s', project));
+      },
+      error: () =>
+        IndicatorStore.addError(t('Failed to remove integration from %s', project)),
+      complete: () => IndicatorStore.remove(saveIndicator),
+    };
+
+    this.api.request(
+      `/projects/${orgId}/${project}/integrations/${integration.id}/`,
+      options
+    );
+  };
+
+  addProject = ({value}) => {
+    const project = value;
+    const orgId = this.context.organization.slug;
+    const {integration} = this.state;
+    const saveIndicator = IndicatorStore.add(t('Adding integration to %s', project));
+    this.setState({adding: true});
+
+    const options = {
+      method: 'PUT',
+      success: () => {
+        this.setState({
+          integration: {
+            ...integration,
+            projects: [...integration.projects, project],
+          },
+        });
+        IndicatorStore.addSuccess(t('Added integration to %s', project));
+      },
+      error: () => IndicatorStore.addError(t('Failed to add integration to %s', project)),
+      complete: () => {
+        IndicatorStore.remove(saveIndicator);
+        this.setState({adding: false});
+      },
+    };
+
+    this.api.request(
+      `/projects/${orgId}/${project}/integrations/${integration.id}/`,
+      options
+    );
+  };
+
+  renderDropdown() {
+    const enabled = new Set(this.context.organization.access).has('project:integrations');
+    const items = this.props.projects
+      .filter(p => !this.state.integration.projects.includes(p.slug))
+      .map(p => ({
+        searchKey: p.slug,
+        value: p.slug,
+        label: <ProjectBadge project={p} avatarSize={16} />,
+      }));
+
+    return (
+      <DropdownAutoComplete
+        items={items}
+        onSelect={this.addProject}
+        emptyMessage={t('Enabled for all projects')}
+      >
+        {({isOpen}) => (
+          <DropdownButton
+            size="xsmall"
+            isOpen={isOpen}
+            disabled={!enabled}
+            busy={this.state.adding}
+          >
+            {t('Enable for Project')}
+          </DropdownButton>
+        )}
+      </DropdownAutoComplete>
+    );
+  }
+
+  renderBody() {
+    const {integration} = this.state;
+    const orgId = this.context.organization.slug;
+    const projects = this.state.integration.projects.map(p => {
+      return this.props.projects.find(pp => pp.slug === p);
+    });
+
+    return (
+      <Panel>
+        <PanelHeader disablePadding hasButtons>
+          <Box pl={2}>{t('Projects')}</Box>
+          <Box pr={1} style={{textTransform: 'none'}}>
+            {this.renderDropdown()}
+          </Box>
+        </PanelHeader>
+        <PanelAlert type="info">
+          {t(
+            'Adding the integration to a project will enable project specific ' +
+              'integration functionality and configuration.'
+          )}
+        </PanelAlert>
+        <PanelBody>
+          {projects.length === 0 && (
+            <EmptyMessage size="large">
+              {t('Integration is not enabled for any Projects')}
+            </EmptyMessage>
+          )}
+          {projects.map(project => (
+            <PanelItem key={project.slug} align="center">
+              <Box flex="1">
+                <ProjectBadge project={project} avatarSize={16} />
+              </Box>
+              <Box pr={1}>
+                <Button
+                  to={`/settings/${orgId}/${project.slug}/integrations/${integration
+                    .provider.key}/${integration.id}/`}
+                  size="xsmall"
+                >
+                  {t('Configure')}
+                </Button>
+              </Box>
+              <Box>
+                <Confirm
+                  onConfirm={() => this.removeProject(project.slug)}
+                  message={
+                    <React.Fragment>
+                      <p>
+                        <strong>
+                          {t(
+                            'Are you sure you want to remove the integration from %s?',
+                            project.slug
+                          )}}
+                        </strong>
+                      </p>
+                      <p>
+                        {t(
+                          'Removing the this integration from the project will clear any project specific configurations and functionality for this project'
+                        )}
+                      </p>
+                    </React.Fragment>
+                  }
+                >
+                  <Button size="xsmall" icon="icon-circle-close" />
+                </Confirm>
+              </Box>
+            </PanelItem>
+          ))}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default withProjects(IntegrationProjects);
diff --git a/src/sentry/static/sentry/app/views/organizationIntegration/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
similarity index 56%
rename from src/sentry/static/sentry/app/views/organizationIntegration/integrationRepos.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index 4ee88f4017..5d2b857abd 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegration/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -3,7 +3,6 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/buttons/button';
 import Confirm from 'app/components/confirm';
@@ -19,7 +18,6 @@ import {t, tct} from 'app/locale';
 
 export default class IntegrationRepos extends AsyncComponent {
   static propTypes = {
-    orgId: PropTypes.string.isRequired,
     integration: PropTypes.object.isRequired,
   };
   static contextTypes = {
@@ -28,27 +26,17 @@ export default class IntegrationRepos extends AsyncComponent {
 
   constructor(props, context) {
     super(props, context);
-    Object.assign(this.state, {
-      ...this.getDefaultState(),
-      loading: true,
-    });
-  }
-
-  getDefaultState() {
-    return {
-      error: false,
-      itemList: null,
-      errors: {},
-    };
+    this.state = {error: false, adding: false, itemList: [], errors: {}};
   }
 
   getEndpoints() {
+    let orgId = this.context.organization.slug;
+
     return [
-      ['itemList', `/organizations/${this.props.orgId}/repos/`, {query: {status: ''}}],
+      ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],
       [
         'integrationRepos',
-        `/organizations/${this.props.orgId}/integrations/${this.props.integration
-          .id}/repos/`,
+        `/organizations/${orgId}/integrations/${this.props.integration.id}/repos/`,
       ],
     ];
   }
@@ -74,9 +62,12 @@ export default class IntegrationRepos extends AsyncComponent {
   }
 
   addRepo(selection) {
-    let {integration, orgId} = this.props;
+    let {integration} = this.props;
+    let orgId = this.context.organization.slug;
     let {itemList} = this.state;
-    this.setState({loading: true});
+    let saveIndicator = IndicatorStore.add(t('Adding repository...'));
+    this.setState({adding: true});
+
     this.api.request(`/organizations/${orgId}/repos/`, {
       data: {
         installation: integration.id,
@@ -85,23 +76,25 @@ export default class IntegrationRepos extends AsyncComponent {
       },
       method: 'POST',
       success: repo => {
-        this.setState({loading: false, itemList: itemList.concat(repo)});
-        addSuccessMessage(
+        this.setState({itemList: itemList.concat(repo)});
+        IndicatorStore.addSuccess(
           tct('[repo] has been successfully added.', {
             repo: repo.name,
           })
         );
       },
-      error: data => {
-        this.setState({loading: false});
-        addErrorMessage(t('Unable to add repository.'));
+      error: () => IndicatorStore.addError(t('Unable to add repository.')),
+      complete: () => {
+        IndicatorStore.remove(saveIndicator);
+        this.setState({adding: false});
       },
     });
   }
 
   deleteRepo = repo => {
+    let orgId = this.context.organization.slug;
     let indicator = IndicatorStore.add(t('Saving changes..'));
-    this.api.request(`/organizations/${this.props.orgId}/repos/${repo.id}/`, {
+    this.api.request(`/organizations/${orgId}/repos/${repo.id}/`, {
       method: 'DELETE',
       success: data => {
         let itemList = this.state.itemList;
@@ -112,18 +105,15 @@ export default class IntegrationRepos extends AsyncComponent {
         });
         this.setState({itemList});
       },
-      error: () => {
-        addErrorMessage(t('Unable to delete repository.'));
-      },
-      complete: () => {
-        IndicatorStore.remove(indicator);
-      },
+      error: () => IndicatorStore.addError(t('Unable to delete repository.')),
+      complete: () => IndicatorStore.remove(indicator),
     });
   };
 
   cancelDelete = repo => {
-    let {orgId} = this.props;
+    let orgId = this.context.organization.slug;
     let indicator = IndicatorStore.add(t('Saving changes..'));
+
     this.api.request(`/organizations/${orgId}/repos/${repo.id}/`, {
       method: 'PUT',
       data: {status: 'visible'},
@@ -136,12 +126,8 @@ export default class IntegrationRepos extends AsyncComponent {
         });
         this.setState({itemList});
       },
-      error: () => {
-        addErrorMessage(t('An error occurred.'));
-      },
-      complete: () => {
-        IndicatorStore.remove(indicator);
-      },
+      error: () => IndicatorStore.addError(t('An error occurred.')),
+      complete: () => IndicatorStore.remove(indicator),
     });
   };
 
@@ -151,11 +137,11 @@ export default class IntegrationRepos extends AsyncComponent {
       return (
         <DropdownButton
           disabled={true}
-          title={t('You do not have permission to add repos')}
+          title={t('You do not have permission to add repositories')}
           isOpen={false}
           size="xsmall"
         >
-          {t('Add Repo')}
+          {t('Add Repository')}
         </DropdownButton>
       );
     }
@@ -182,8 +168,8 @@ export default class IntegrationRepos extends AsyncComponent {
         emptyMessage={t('No repositories available')}
       >
         {({isOpen}) => (
-          <DropdownButton isOpen={isOpen} size="xsmall">
-            {t('Add Repo')}
+          <DropdownButton isOpen={isOpen} size="xsmall" busy={this.state.adding}>
+            {t('Add Repository')}
           </DropdownButton>
         )}
       </DropdownAutoComplete>
@@ -193,9 +179,13 @@ export default class IntegrationRepos extends AsyncComponent {
   renderBody() {
     const itemList = this.getIntegrationRepos() || [];
     const header = (
-      <PanelHeader hasButtons>
-        <div>{t('Repositories')}</div>
-        <div style={{textTransform: 'none'}}>{this.renderDropdown()}</div>
+      <PanelHeader disablePadding hasButtons>
+        <Box flex={1} pl={2}>
+          {t('Repositories')}
+        </Box>
+        <Box pr={1} style={{textTransform: 'none'}}>
+          {this.renderDropdown()}
+        </Box>
       </PanelHeader>
     );
 
@@ -204,64 +194,46 @@ export default class IntegrationRepos extends AsyncComponent {
         {header}
         <PanelBody>
           {itemList.length === 0 && (
-            <Box>
-              <EmptyMessage size="large">{t('No Repositories Added')}</EmptyMessage>
-            </Box>
+            <EmptyMessage size="large">{t('No Repositories Added')}</EmptyMessage>
           )}
-          {itemList.length > 0 && (
-            <Box>
-              {itemList.map(repo => {
-                let repoIsVisible = repo.status === 'active';
-                let style =
-                  repo.status === 'disabled'
-                    ? {filter: 'grayscale(1)', opacity: '0.4'}
-                    : {};
-                return (
-                  <RepoOption key={repo.id}>
-                    <Box style={style} p={2} flex="1">
-                      <Flex direction="column">
-                        <Box pb={1}>
-                          <strong>{repo.name}</strong>
-                          {!repoIsVisible && (
-                            <small> — {this.getStatusLabel(repo)}</small>
-                          )}
-                          {repo.status === 'pending_deletion' && (
-                            <small>
-                              {' '}
-                              (
-                              <a onClick={() => this.cancelDelete(repo)}>{t('Cancel')}</a>
-                              )
-                            </small>
-                          )}
-                        </Box>
-                        <Box style={style}>
-                          <small>{repo.provider.name}</small>
-                          {repo.url && (
-                            <small>
-                              {' '}
-                              — <a href={repo.url}>{repo.url}</a>
-                            </small>
-                          )}
-                        </Box>
-                      </Flex>
+          {itemList.map(repo => {
+            let repoIsActive = repo.status === 'active';
+            return (
+              <RepoOption key={repo.id} disabled={repo.status === 'disabled'}>
+                <Box p={2} flex="1">
+                  <Flex direction="column">
+                    <Box pb={1}>
+                      <strong>{repo.name}</strong>
+                      {!repoIsActive && <small> — {this.getStatusLabel(repo)}</small>}
+                      {repo.status === 'pending_deletion' && (
+                        <small>
+                          {' '}
+                          (
+                          <a onClick={() => this.cancelDelete(repo)}>{t('Cancel')}</a>
+                          )
+                        </small>
+                      )}
                     </Box>
-
-                    <Box p={2}>
-                      <Confirm
-                        disabled={!repoIsVisible && repo.status !== 'disabled'}
-                        onConfirm={() => this.deleteRepo(repo)}
-                        message={t('Are you sure you want to remove this repository?')}
-                      >
-                        <Button size="xsmall">
-                          <span className="icon icon-trash" />
-                        </Button>
-                      </Confirm>
+                    <Box>
+                      <small>
+                        <a href={repo.url}>{repo.url.replace('https://', '')}</a>
+                      </small>
                     </Box>
-                  </RepoOption>
-                );
-              })}
-            </Box>
-          )}
+                  </Flex>
+                </Box>
+
+                <Box p={2}>
+                  <Confirm
+                    disabled={!repoIsActive && repo.status !== 'disabled'}
+                    onConfirm={() => this.deleteRepo(repo)}
+                    message={t('Are you sure you want to remove this repository?')}
+                  >
+                    <Button size="xsmall" icon="icon-trash" />
+                  </Confirm>
+                </Box>
+              </RepoOption>
+            );
+          })}
         </PanelBody>
       </Panel>
     );
@@ -294,4 +266,11 @@ const RepoOption = styled(SpreadLayout)`
   &:last-child {
     border-bottom: none;
   }
+
+  ${p =>
+    p.disabled &&
+    `
+    filter: grayscale(1);
+    opacity: 0.4;
+  `};
 `;
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
index 69d3d94a8e..60284689cd 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -4,7 +4,7 @@ import {t} from 'app/locale';
 import {fetchPlugins, enablePlugin, disablePlugin} from 'app/actionCreators/plugins';
 import withPlugins from 'app/utils/withPlugins';
 import ProjectPlugins from 'app/views/projectPlugins/projectPlugins';
-import OrganizationIntegrations from 'app/views/projectPlugins/organizationIntegrations';
+import OrganizationIntegrations from 'app/views/organizationIntegrations';
 import SentryTypes from 'app/proptypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 
@@ -29,14 +29,16 @@ class ProjectPluginsContainer extends React.Component {
 
   render() {
     let {loading, error, plugins} = this.props.plugins || {};
+    let {projectId, orgId} = this.props.params;
 
     return (
       <React.Fragment>
         <SettingsPageHeader title={t('Integrations')} />
 
         <OrganizationIntegrations
-          orgId={this.props.params.orgId}
-          projectId={this.props.params.projectId}
+          {...this.props}
+          hideHeader={true}
+          linkPrefix={`/settings/${orgId}/${projectId}/integrations/`}
         />
 
         <ProjectPlugins
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 5f2f6e5571..d1f49e6560 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -65,6 +65,12 @@ const organizationNavigation = [
         show: ({access}) => access.has('org:write'),
         description: t('Manage repositories connected to the organization'),
       },
+      {
+        path: `${pathPrefix}/integrations/`,
+        title: t('Integrations'),
+        show: ({access}) => access.has('org:integrations'),
+        description: t('Manage integrations for an organization'),
+      },
     ],
   },
 ];
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.jsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.jsx
new file mode 100644
index 0000000000..cc53e7829b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.jsx
@@ -0,0 +1,65 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import BreadcrumbTitle from 'app/views/settings/components/settingsBreadcrumb/breadcrumbTitle';
+import Form from 'app/views/settings/components/forms/form';
+import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
+import IntegrationProjects from 'app/views/organizationIntegrations/integrationProjects';
+import IntegrationRepos from 'app/views/organizationIntegrations/integrationRepos';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+export default class ConfigureIntegration extends AsyncView {
+  getEndpoints() {
+    const {orgId, integrationId} = this.props.params;
+
+    return [
+      ['config', `/organizations/${orgId}/config/integrations/`],
+      ['integration', `/organizations/${orgId}/integrations/${integrationId}/`],
+    ];
+  }
+
+  getTitle() {
+    return this.state.integration ? this.state.integration.name : 'Configure Integration';
+  }
+
+  renderBody() {
+    const {orgId} = this.props.params;
+    const {integration} = this.state;
+    const provider = this.state.config.providers.find(
+      p => p.key === integration.provider.key
+    );
+
+    const title = <IntegrationItem integration={integration} withProvider={true} />;
+
+    return (
+      <React.Fragment>
+        <BreadcrumbTitle routes={this.props.routes} title={integration.name} />
+        <SettingsPageHeader noTitleStyles title={title} />
+
+        {integration.configOrganization.length > 0 && (
+          <Form
+            hideFooter={true}
+            saveOnBlur={true}
+            allowUndo={true}
+            apiMethod="POST"
+            initialData={integration.configData}
+            apiEndpoint={`/organizations/${orgId}/integrations/${integration.id}/`}
+          >
+            <JsonForm
+              fields={integration.configOrganization}
+              title={t('Organization Integration Settings')}
+            />
+          </Form>
+        )}
+
+        {provider.canAddProject && <IntegrationProjects integrationId={integration.id} />}
+
+        {provider.features.includes('commits') && (
+          <IntegrationRepos integration={integration} />
+        )}
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
new file mode 100644
index 0000000000..99cf9cca12
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/integration.jsx
@@ -0,0 +1,179 @@
+import {Box} from 'grid-emotion';
+import {keyBy} from 'lodash';
+import React from 'react';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {navigateTo} from 'app/actionCreators/navigation';
+import {sortArray} from 'app/utils';
+import {t} from 'app/locale';
+import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
+import AlertLink from 'app/components/alertLink';
+import AsyncView from 'app/views/asyncView';
+import BreadcrumbTitle from 'app/views/settings/components/settingsBreadcrumb/breadcrumbTitle';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import IndicatorStore from 'app/stores/indicatorStore';
+import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
+import IntegrationDetails from 'app/views/organizationIntegrations/integrationDetails';
+import LoadingError from 'app/components/loadingError';
+import PluginIcon from 'app/plugins/components/pluginIcon';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import marked from 'app/utils/marked';
+
+const alertLinkMarkedRenderer = new marked.Renderer();
+alertLinkMarkedRenderer.paragraph = s => s;
+
+export default class Integration extends AsyncView {
+  getProvider() {
+    const {config} = this.state;
+
+    return config !== null
+      ? config.providers.find(p => p.key == this.props.params.providerKey) || null
+      : null;
+  }
+
+  getTitle() {
+    const provider = this.getProvider();
+
+    return provider === null ? 'Integration' : `${provider.name} Integration`;
+  }
+
+  getEndpoints() {
+    const {orgId, providerKey} = this.props.params;
+
+    return [
+      ['config', `/organizations/${orgId}/config/integrations/`],
+      [
+        'integrations',
+        `/organizations/${orgId}/integrations/?provider_key=${providerKey}`,
+      ],
+    ];
+  }
+
+  mergeIntegration = integration => {
+    // Merge the new integration into the list. If we're updating an
+    // integration overwrite the old integration.
+    const keyedItems = keyBy(this.state.integrations, i => i.id);
+    const integrations = sortArray(
+      Object.values({...keyedItems, [integration.id]: integration}),
+      i => i.name
+    );
+    this.setState({integrations});
+  };
+
+  handleDeleteIntegration = integration => {
+    const {orgId} = this.props.params;
+    const saveIndicator = IndicatorStore.add(t('Removing Integration'));
+
+    const options = {
+      method: 'DELETE',
+      success: () => {
+        this.setState({
+          integrations: this.state.integrations.filter(
+            item => item.id !== integration.id
+          ),
+        });
+        IndicatorStore.addSuccess(t('Integration removed'));
+      },
+      error: () => IndicatorStore.addError(t('Failed to remove Integration')),
+      complete: () => IndicatorStore.remove(saveIndicator),
+    };
+
+    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
+  };
+
+  handleDisableIntegration = () => {
+    window.open('https://github.com/settings/installations', '_blank');
+  };
+
+  renderAlertLink(provider) {
+    const config = provider.metadata.aspects.alert_link;
+
+    if (config === undefined) {
+      return undefined;
+    }
+
+    const linkHtml = marked(config.text, {renderer: alertLinkMarkedRenderer});
+    let link = config.link;
+
+    for (const key in this.props.params) {
+      link = link.replace(`:${key}`, this.props.params[key]);
+    }
+
+    let props = {};
+    if (link.startsWith('http')) {
+      props.href = link;
+    } else {
+      props.onClick = () => navigateTo(link, this.props.router);
+    }
+
+    return (
+      <AlertLink {...props}>
+        <span dangerouslySetInnerHTML={{__html: linkHtml}} />
+      </AlertLink>
+    );
+  }
+
+  renderBody() {
+    const integrations = this.state.integrations;
+    const provider = this.getProvider();
+
+    if (provider === null) {
+      return <LoadingError message={t('Invalid integration provider')} />;
+    }
+
+    const {orgId} = this.props.params;
+    const titleIcon = <PluginIcon size={28} pluginId={provider.key} />;
+
+    const integrationList =
+      integrations.length === 0 ? (
+        <EmptyMessage>{t('No %s integrations configured.', provider.name)}</EmptyMessage>
+      ) : (
+        integrations.map(integration => (
+          <InstalledIntegration
+            key={integration.id}
+            orgId={orgId}
+            provider={provider}
+            integration={integration}
+            onToggleEnabled={e => this.handleToggleProjectIntegration(integration, e)}
+            onRemove={() => this.handleDeleteIntegration(integration)}
+            onDisable={() => this.handleDisableIntegration()}
+          />
+        ))
+      );
+
+    return (
+      <React.Fragment>
+        <BreadcrumbTitle routes={this.props.routes} title={provider.name} />
+        <SettingsPageHeader title={provider.name} icon={titleIcon} />
+
+        <Panel>
+          <PanelHeader disablePadding hasButtons>
+            <Box px={2}>{provider.metadata.noun}</Box>
+            <Box mr={1}>
+              <AddIntegrationButton
+                size="xsmall"
+                provider={provider}
+                onAddIntegration={this.mergeIntegration}
+              />
+            </Box>
+          </PanelHeader>
+          <PanelBody>{integrationList}</PanelBody>
+        </Panel>
+
+        {this.renderAlertLink(provider)}
+
+        <hr />
+
+        <h5>{t('%s Integration', provider.name)}</h5>
+        <IntegrationDetails
+          markdownDescription={provider.metadata.description}
+          author={provider.metadata.author}
+          links={[
+            {href: provider.metadata.issue_url, title: t('Report an Issue')},
+            {href: provider.metadata.source_url, title: t('View Source')},
+          ]}
+        />
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectIntegration.jsx b/src/sentry/static/sentry/app/views/settings/project/projectIntegration.jsx
new file mode 100644
index 0000000000..63213c3f72
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectIntegration.jsx
@@ -0,0 +1,57 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import BreadcrumbTitle from 'app/views/settings/components/settingsBreadcrumb/breadcrumbTitle';
+import Form from 'app/views/settings/components/forms/form';
+import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+class ProjectIntegration extends AsyncView {
+  getEndpoints() {
+    const {orgId, projectId, integrationId} = this.props.params;
+
+    return [
+      ['integration', `/projects/${orgId}/${projectId}/integrations/${integrationId}/`],
+    ];
+  }
+
+  getTitle() {
+    return this.state.integration ? this.state.integration.name : 'Configure Integration';
+  }
+
+  renderBody() {
+    const {orgId, projectId} = this.props.params;
+    const {integration} = this.state;
+
+    const title = <IntegrationItem integration={integration} withProvider={true} />;
+
+    return (
+      <React.Fragment>
+        <BreadcrumbTitle routes={this.props.routes} title={integration.name} />
+        <SettingsPageHeader noTitleStyles title={title} />
+
+        {integration.configProject.length > 0 && (
+          <Form
+            hideFooter={true}
+            saveOnBlur={true}
+            allowUndo={true}
+            apiMethod="POST"
+            initialData={integration.configData}
+            apiEndpoint={`/projects/${orgId}/${projectId}/integrations/${
+              integration.id
+            }/`}
+          >
+            <JsonForm
+              fields={integration.configProject}
+              title={t('Integration Project Settings')}
+            />
+          </Form>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export default ProjectIntegration;
diff --git a/tests/js/setup.js b/tests/js/setup.js
index bfc08e910b..026d7e249d 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -487,6 +487,7 @@ window.TestStubs = {
       canAdd: true,
       canAddProject: false,
       config: [],
+      features: [],
       setupDialog: {
         url: '/github-integration-setup-uri/',
         width: 100,
@@ -518,6 +519,9 @@ window.TestStubs = {
       provider: {
         name: 'GitHub',
         key: 'github',
+        canAdd: true,
+        canAddProject: false,
+        features: [],
       },
       configOrganization: [],
       configProject: [],
diff --git a/tests/js/spec/views/organizationIntegration/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
similarity index 66%
rename from tests/js/spec/views/organizationIntegration/__snapshots__/index.spec.jsx.snap
rename to tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index 0b3a7aad8a..27a5a469cb 100644
--- a/tests/js/spec/views/organizationIntegration/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -1,10 +1,13 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`OrganizationIntegration render() with one integration renders 1`] = `
+exports[`Integration render() with one integration renders 1`] = `
 <SideEffect(DocumentTitle)
   title="GitHub Integration - Sentry"
 >
   <React.Fragment>
+    <BreadcrumbTitle
+      title="GitHub"
+    />
     <SettingsPageHeading
       icon={
         <PluginIcon
@@ -24,31 +27,42 @@ exports[`OrganizationIntegration render() with one integration renders 1`] = `
         >
           Installation
         </Box>
-        <Tooltip
-          disabled={true}
-          title="Integration cannot be added on Sentry. Enable this integration via the GitHub instance."
-          tooltipOptions={
-            Object {
-              "placement": "left",
-            }
-          }
+        <Box
+          mr={1}
         >
-          <Box
-            mr={1}
-          >
-            <Button
-              disabled={false}
-              onClick={[Function]}
-              size="xsmall"
-            >
-              <span
-                className="icon icon-add"
-              />
-               
-              Add Installation
-            </Button>
-          </Box>
-        </Tooltip>
+          <AddIntegrationButton
+            onAddIntegration={[Function]}
+            provider={
+              Object {
+                "canAdd": true,
+                "canAddProject": false,
+                "config": Array [],
+                "features": Array [],
+                "key": "github",
+                "metadata": Object {
+                  "aspects": Object {
+                    "alert_link": Object {
+                      "link": "/url/with/params/{orgId}/",
+                      "text": "This is a *alert link* with markdown formatting",
+                    },
+                  },
+                  "author": "Morty",
+                  "description": "*markdown* formatted _description_",
+                  "issue_url": "http://example.com/integration_issue_url",
+                  "noun": "Installation",
+                  "source_url": "http://example.com/integration_source_url",
+                },
+                "name": "GitHub",
+                "setupDialog": Object {
+                  "height": 100,
+                  "url": "/github-integration-setup-uri/",
+                  "width": 100,
+                },
+              }
+            }
+            size="xsmall"
+          />
+        </Box>
       </PanelHeader>
       <PanelBody
         direction="column"
@@ -67,6 +81,9 @@ exports[`OrganizationIntegration render() with one integration renders 1`] = `
               "id": "1",
               "name": "Test Integration",
               "provider": Object {
+                "canAdd": true,
+                "canAddProject": false,
+                "features": Array [],
                 "key": "github",
                 "name": "GitHub",
               },
@@ -77,12 +94,12 @@ exports[`OrganizationIntegration render() with one integration renders 1`] = `
           onRemove={[Function]}
           onToggleEnabled={[Function]}
           orgId="org-slug"
-          projectId="project-slug"
           provider={
             Object {
               "canAdd": true,
               "canAddProject": false,
               "config": Array [],
+              "features": Array [],
               "key": "github",
               "metadata": Object {
                 "aspects": Object {
@@ -109,7 +126,7 @@ exports[`OrganizationIntegration render() with one integration renders 1`] = `
       </PanelBody>
     </Panel>
     <AlertLink
-      to="/url/with/params/org-slug/"
+      onClick={[Function]}
     >
       <span
         dangerouslySetInnerHTML={
@@ -143,9 +160,9 @@ exports[`OrganizationIntegration render() with one integration renders 1`] = `
 </SideEffect(DocumentTitle)>
 `;
 
-exports[`OrganizationIntegration render() without any integrations Displays an error for an invalid provider key 1`] = `
+exports[`Integration render() without any integrations Displays an error for an invalid provider key 1`] = `
 <SideEffect(DocumentTitle)
-  title="Global Integrations - Sentry"
+  title="Integration - Sentry"
 >
   <LoadingError
     message="Invalid integration provider"
diff --git a/tests/js/spec/views/organizationIntegration/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
similarity index 71%
rename from tests/js/spec/views/organizationIntegration/index.spec.jsx
rename to tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 201542fcff..226ce2e3a6 100644
--- a/tests/js/spec/views/organizationIntegration/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -2,10 +2,10 @@
 import React from 'react';
 import {mount, shallow} from 'enzyme';
 
-import OrganizationIntegration from 'app/views/organizationIntegration';
+import Integration from 'app/views/settings/organizationIntegrations/integration';
 import {Client} from 'app/api';
 
-describe('OrganizationIntegration', function() {
+describe('Integration', function() {
   beforeEach(function() {
     Client.clearMockResponses();
   });
@@ -35,10 +35,7 @@ describe('OrganizationIntegration', function() {
       });
 
       it('Displays an empty list', function() {
-        const wrapper = shallow(
-          <OrganizationIntegration params={params} />,
-          routerContext
-        );
+        const wrapper = shallow(<Integration params={params} />, routerContext);
         expect(wrapper.find('PanelBody EmptyMessage').exists()).toBe(true);
       });
 
@@ -48,10 +45,7 @@ describe('OrganizationIntegration', function() {
           body: [],
         });
         const invalidKeyParams = {...params, providerKey: 'bad-key'};
-        const wrapper = shallow(
-          <OrganizationIntegration params={invalidKeyParams} />,
-          routerContext
-        );
+        const wrapper = shallow(<Integration params={invalidKeyParams} />, routerContext);
         expect(wrapper).toMatchSnapshot();
       });
     });
@@ -69,15 +63,12 @@ describe('OrganizationIntegration', function() {
       });
 
       it('renders', function() {
-        const wrapper = shallow(
-          <OrganizationIntegration params={params} />,
-          routerContext
-        );
+        const wrapper = shallow(<Integration params={params} />, routerContext);
         expect(wrapper).toMatchSnapshot();
       });
 
       it('opens a dialog on integration add', function() {
-        const wrapper = mount(<OrganizationIntegration params={params} />, routerContext);
+        const wrapper = mount(<Integration params={params} />, routerContext);
 
         const focus = jest.fn();
         const open = jest.fn().mockReturnValue({focus});
@@ -92,27 +83,30 @@ describe('OrganizationIntegration', function() {
       });
 
       it('Adds an integration on dialog completion', function() {
-        const wrapper = mount(<OrganizationIntegration params={params} />, routerContext);
-
-        wrapper.instance().receiveMessage({
-          source: null,
-          origin: 'null',
-          data: {
-            success: true,
-            data: Object.assign({}, integration, {
-              id: '2',
-              domain_name: 'new-integration.github.com',
-              icon: 'http://example.com/new-integration-icon.png',
-              name: 'New Integration',
-            }),
-          },
-        });
+        const wrapper = mount(<Integration params={params} />, routerContext);
+
+        wrapper
+          .find('AddIntegrationButton')
+          .instance()
+          .receiveMessage({
+            source: null,
+            origin: 'null',
+            data: {
+              success: true,
+              data: Object.assign({}, integration, {
+                id: '2',
+                domain_name: 'new-integration.github.com',
+                icon: 'http://example.com/new-integration-icon.png',
+                name: 'New Integration',
+              }),
+            },
+          });
 
         expect(wrapper.instance().state.integrations).toHaveLength(2);
       });
 
       it('Merges existing integrations', function() {
-        const wrapper = mount(<OrganizationIntegration params={params} />, routerContext);
+        const wrapper = mount(<Integration params={params} />, routerContext);
 
         const updatedIntegration = Object.assign({}, integration, {
           id: '1',
@@ -121,21 +115,24 @@ describe('OrganizationIntegration', function() {
           name: 'Updated Integration',
         });
 
-        wrapper.instance().receiveMessage({
-          source: null,
-          origin: 'null',
-          data: {
-            success: true,
-            data: updatedIntegration,
-          },
-        });
+        wrapper
+          .find('AddIntegrationButton')
+          .instance()
+          .receiveMessage({
+            source: null,
+            origin: 'null',
+            data: {
+              success: true,
+              data: updatedIntegration,
+            },
+          });
 
         expect(wrapper.instance().state.integrations).toHaveLength(1);
         expect(wrapper.instance().state.integrations[0]).toBe(updatedIntegration);
       });
 
       it('Deletes an integration', function() {
-        const wrapper = mount(<OrganizationIntegration params={params} />, routerContext);
+        const wrapper = mount(<Integration params={params} />, routerContext);
 
         Client.addMockResponse({
           url: `/organizations/${org.slug}/integrations/${integration.id}/`,
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 58cfd88b06..41e6fc8f1c 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -21,6 +21,7 @@ class GroupIntegrationDetailsTest(APITestCase):
         path = '/api/0/issues/{}/integrations/{}/?action=link'.format(group.id, integration.id)
 
         response = self.client.get(path)
+        provider = integration.get_provider()
 
         assert response.data == {
             'id': six.text_type(integration.id),
@@ -29,8 +30,11 @@ class GroupIntegrationDetailsTest(APITestCase):
             'domainName': integration.metadata.get('domain_name'),
             'status': integration.get_status_display(),
             'provider': {
-                'key': integration.get_provider().key,
-                'name': integration.get_provider().name,
+                'key': provider.key,
+                'name': provider.name,
+                'canAdd': provider.can_add,
+                'canAddProject': provider.can_add_project,
+                'features': [f.value for f in provider.features],
             },
             'linkIssueConfig': [{
                 'default': '',
@@ -54,6 +58,7 @@ class GroupIntegrationDetailsTest(APITestCase):
         path = '/api/0/issues/{}/integrations/{}/?action=create'.format(group.id, integration.id)
 
         response = self.client.get(path)
+        provider = integration.get_provider()
 
         assert response.data == {
             'id': six.text_type(integration.id),
@@ -62,8 +67,11 @@ class GroupIntegrationDetailsTest(APITestCase):
             'domainName': integration.metadata.get('domain_name'),
             'status': integration.get_status_display(),
             'provider': {
-                'key': integration.get_provider().key,
-                'name': integration.get_provider().name,
+                'key': provider.key,
+                'name': provider.name,
+                'canAdd': provider.can_add,
+                'canAddProject': provider.can_add_project,
+                'features': [f.value for f in provider.features],
             },
             'createIssueConfig': [
                 {
@@ -138,8 +146,8 @@ class GroupIntegrationDetailsTest(APITestCase):
             integration_id=integration.id,
             organization_id=org.id,
         )
-        assert external_issue.description == 'This is a test external issue description'
-        assert external_issue.title == 'This is a test external issue title'
+        assert external_issue.description == u'This is a test external issue description'
+        assert external_issue.title == u'This is a test external issue title'
 
         assert GroupLink.objects.filter(
             linked_type=GroupLink.LinkedType.issue,
diff --git a/tests/sentry/api/endpoints/test_group_integrations.py b/tests/sentry/api/endpoints/test_group_integrations.py
index 66264d62ee..32358df24c 100644
--- a/tests/sentry/api/endpoints/test_group_integrations.py
+++ b/tests/sentry/api/endpoints/test_group_integrations.py
@@ -34,6 +34,7 @@ class GroupIntegrationsTest(APITestCase):
         path = '/api/0/issues/{}/integrations/'.format(group.id)
 
         response = self.client.get(path)
+        provider = integration.get_provider()
 
         assert response.data[0] == {
             'id': six.text_type(integration.id),
@@ -42,8 +43,11 @@ class GroupIntegrationsTest(APITestCase):
             'domainName': integration.metadata.get('domain_name'),
             'status': integration.get_status_display(),
             'provider': {
-                'key': integration.get_provider().key,
-                'name': integration.get_provider().name,
+                'key': provider.key,
+                'name': provider.name,
+                'canAdd': provider.can_add,
+                'canAddProject': provider.can_add_project,
+                'features': [f.value for f in provider.features],
             },
             'externalIssues': [{
                 'description': 'this is an example description',
