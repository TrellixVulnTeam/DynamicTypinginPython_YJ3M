commit dafe4a41dc548e21ab40e5b9dddd8eaadba9c383
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Nov 15 12:51:03 2016 -0800

    add asana to social auth (#4452)
    
    * (WIP) add support for asana to social auth
    
    * override refresh_token in asana backend
    
    * add asana to social auth backends
    
    * remove unecessary asana listing in auth backends
    
    * require asana identity to edit configuration settings
    
    * add notes to changes
    
    * matt pr feedback (raise_for_status)
    
    * fix associate identity screen, add translation

diff --git a/CHANGES b/CHANGES
index 7d8095a52c..26cbdb7908 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,5 +1,6 @@
 Version 8.11 (Unreleased)
 -------------------------
+- add Asana to supported auth backends in social auth (for plugins)
 
 - Ignore a ``null`` ``Origin`` header for authentication.
 - Added the ability to search for issues that you are subscribed to from the stream view.
diff --git a/src/sentry/api/endpoints/project_plugin_details.py b/src/sentry/api/endpoints/project_plugin_details.py
index a0d65f1d15..08e9273ad6 100644
--- a/src/sentry/api/endpoints/project_plugin_details.py
+++ b/src/sentry/api/endpoints/project_plugin_details.py
@@ -3,15 +3,18 @@ from __future__ import absolute_import
 import six
 
 from django import forms
+from django.core.urlresolvers import reverse
 from rest_framework import serializers
 from rest_framework.response import Response
 
-from sentry.exceptions import PluginError
+from sentry.exceptions import PluginError, PluginIdentityRequired
 from sentry.plugins import plugins
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.plugin import PluginWithConfigSerializer, serialize_field
+from sentry.api.serializers.models.plugin import (
+    PluginSerializer, PluginWithConfigSerializer, serialize_field
+)
 
 ERR_ALWAYS_ENABLED = 'This plugin is always enabled.'
 ERR_FIELD_REQUIRED = 'This field is required.'
@@ -29,8 +32,13 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
     def get(self, request, project, plugin_id):
         plugin = self._get_plugin(plugin_id)
 
-        context = serialize(
-            plugin, request.user, PluginWithConfigSerializer(project))
+        try:
+            context = serialize(
+                plugin, request.user, PluginWithConfigSerializer(project))
+        except PluginIdentityRequired as e:
+            context = serialize(plugin, request.user, PluginSerializer(project))
+            context['config_error'] = e.message
+            context['auth_url'] = reverse('socialauth_associate', args=[plugin.slug])
 
         return Response(context)
 
@@ -67,6 +75,7 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
             serialize_field(project, plugin, c)
             for c in plugin.get_config(
                 project=project,
+                user=request.user,
             )
         ]
 
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 3603eb16b5..214ad29efe 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -41,6 +41,7 @@ class PluginWithConfigSerializer(PluginSerializer):
             serialize_field(self.project, obj, c)
             for c in obj.get_config(
                 project=self.project,
+                user=user
             )
         ]
         return d
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 0359729864..f3614cd4cf 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -297,10 +297,11 @@ else:
 
 AUTHENTICATION_BACKENDS = (
     'sentry.utils.auth.EmailAuthBackend',
-    # TODO(dcramer): remove social auth backends in 8.11
+    # TODO(dcramer): we can't remove these until we rewrite more of social auth
     'social_auth.backends.github.GithubBackend',
     'social_auth.backends.bitbucket.BitbucketBackend',
     'social_auth.backends.trello.TrelloBackend',
+    'social_auth.backends.asana.AsanaBackend',
 )
 
 AUTH_PASSWORD_VALIDATORS = [
@@ -318,6 +319,7 @@ SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
     'social_auth.backends.github.GithubBackend',
     'social_auth.backends.bitbucket.BitbucketBackend',
     'social_auth.backends.trello.TrelloBackend',
+    'social_auth.backends.asana.AsanaBackend',
 )
 
 SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
@@ -357,12 +359,14 @@ AUTH_PROVIDERS = {
     'github': ('GITHUB_APP_ID', 'GITHUB_API_SECRET'),
     'trello': ('TRELLO_API_KEY', 'TRELLO_API_SECRET'),
     'bitbucket': ('BITBUCKET_CONSUMER_KEY', 'BITBUCKET_CONSUMER_SECRET'),
+    'asana': ('ASANA_CLIENT_ID', 'ASANA_CLIENT_SECRET'),
 }
 
 AUTH_PROVIDER_LABELS = {
     'github': 'GitHub',
     'trello': 'Trello',
-    'bitbucket': 'Bitbucket'
+    'bitbucket': 'Bitbucket',
+    'asana': 'Asana'
 }
 
 import random
diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index 3ed9f9f253..6577c524e4 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -43,5 +43,9 @@ class PluginError(Exception):
     pass
 
 
+class PluginIdentityRequired(PluginError):
+    pass
+
+
 class InvalidIdentity(Exception):
     pass
diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
index 3b27b3063b..e97b7c869f 100644
--- a/src/sentry/plugins/config.py
+++ b/src/sentry/plugins/config.py
@@ -41,7 +41,7 @@ class PluginConfigMixin(object):
         return value
         ```
         """
-        for config in self.get_config(project=project):
+        for config in self.get_config(project=project, user=actor):
             if config['name'] != name:
                 continue
 
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index cd3b607e71..77672305bf 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -85,8 +85,6 @@ const PluginConfig = React.createClass({
   render() {
     let data = this.props.data;
 
-            // <button className="btn btn-sm btn-default pull-right"
-            //         onClick={this.disablePlugin.bind(this, data)}>{t('Disable')}</button>}
     return (
       <div className={`box ref-plugin-config-${data.id}`}>
         <div className="box-header">
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index bb1cc117f4..a309001663 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -7,7 +7,7 @@ import {
 } from '../../components/forms';
 import PluginComponentBase from '../../components/bases/pluginComponentBase';
 import LoadingIndicator from '../../components/loadingIndicator';
-import {tct} from '../../locale';
+import {t, tct} from '../../locale';
 
 
 class PluginSettings extends PluginComponentBase {
@@ -19,6 +19,7 @@ class PluginSettings extends PluginComponentBase {
       initialData: null,
       formData: null,
       errors: {},
+      rawData: {},
       // override default FormState.READY if api requests are
       // necessary to even load the form
       state: FormState.LOADING
@@ -75,6 +76,12 @@ class PluginSettings extends PluginComponentBase {
   fetchData() {
     this.api.request(this.getPluginEndpoint(), {
       success: data => {
+        if (!data.config) {
+          this.setState({
+            rawData: data
+          }, this.onLoadSuccess);
+          return;
+        }
         let formData = {};
         let initialData = {};
         data.config.forEach((field) => {
@@ -99,6 +106,27 @@ class PluginSettings extends PluginComponentBase {
     }
     let isSaving = this.state.state === FormState.SAVING;
     let hasChanges = !underscore.isEqual(this.state.initialData, this.state.formData);
+
+    let data = this.state.rawData;
+    if (data.config_error) {
+      let authUrl = data.auth_url;
+      if (authUrl.indexOf('?') === -1) {
+        authUrl += '?next=' + encodeURIComponent(document.location.pathname);
+      } else {
+        authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+      }
+      return (
+        <div className="m-b-1">
+          <div className="alert alert-warning m-b-1">
+            {data.config_error}
+          </div>
+          <a className="btn btn-primary" href={authUrl}>
+            {t('Associate Identity')}
+          </a>
+        </div>
+      );
+    }
+
     if (this.state.state === FormState.ERROR && !this.state.fieldList) {
       return (
         <div className="alert alert-error m-b-1">
diff --git a/src/social_auth/backends/asana.py b/src/social_auth/backends/asana.py
new file mode 100644
index 0000000000..4507149306
--- /dev/null
+++ b/src/social_auth/backends/asana.py
@@ -0,0 +1,93 @@
+"""
+Obtain
+ASANA_CLIENT_ID & ASANA_CLIENT_SECRET
+and put into sentry.conf.py
+"""
+from __future__ import absolute_import
+
+import requests
+
+from social_auth.backends import BaseOAuth2, OAuthBackend
+from social_auth.exceptions import AuthCanceled, AuthUnknownError
+
+ASANA_TOKEN_EXCHANGE_URL = 'https://app.asana.com/-/oauth_token'
+ASANA_AUTHORIZATION_URL = 'https://app.asana.com/-/oauth_authorize'
+ASANA_USER_DETAILS_URL = 'https://app.asana.com/api/1.0/users/me'
+
+
+class AsanaBackend(OAuthBackend):
+    """Asana OAuth authentication backend"""
+    name = 'asana'
+    EXTRA_DATA = [
+        ('email', 'email'),
+        ('name', 'full_name'),
+        ('id', 'id'),
+        ('refresh_token', 'refresh_token')
+    ]
+
+    def get_user_details(self, response):
+        """Return user details from Asana account"""
+
+        return {
+            'email': response.get('email'),
+            'id': response.get('id'),
+            'full_name': response.get('name')
+        }
+
+
+class AsanaAuth(BaseOAuth2):
+    """Asana OAuth authentication mechanism"""
+    AUTHORIZATION_URL = ASANA_AUTHORIZATION_URL
+    ACCESS_TOKEN_URL = ASANA_TOKEN_EXCHANGE_URL
+    AUTH_BACKEND = AsanaBackend
+    SETTINGS_KEY_NAME = 'ASANA_CLIENT_ID'
+    SETTINGS_SECRET_NAME = 'ASANA_CLIENT_SECRET'
+    REDIRECT_STATE = False
+
+    def user_data(self, access_token, *args, **kwargs):
+        """Loads user data from service"""
+        headers = {'Authorization': 'Bearer %s' % access_token}
+        try:
+            resp = requests.get(ASANA_USER_DETAILS_URL,
+                                headers=headers)
+            resp.raise_for_status()
+            return resp.json()['data']
+        except ValueError:
+            return None
+
+    def auth_complete(self, *args, **kwargs):
+        """Completes loging process, must return user instance"""
+        self.process_error(self.data)
+        params = self.auth_complete_params(self.validate_state())
+        try:
+            response = requests.post(self.ACCESS_TOKEN_URL, data=params,
+                              headers=self.auth_headers())
+            response.raise_for_status()
+        except requests.exceptions.HTTPError as e:
+            if e.code == 400:
+                raise AuthCanceled(self)
+            else:
+                raise
+        else:
+            try:
+                response = response.json()
+            except (ValueError, KeyError):
+                raise AuthUnknownError(self)
+
+        response.pop('data')
+        self.process_error(response)
+        return self.do_auth(response['access_token'], response=response,
+                            *args, **kwargs)
+
+    @classmethod
+    def refresh_token(cls, token):
+        params = cls.refresh_token_params(token)
+        response = requests.post(cls.ACCESS_TOKEN_URL, data=params,
+                                 headers=cls.auth_headers())
+        response.raise_for_status()
+        return response.json()
+
+# Backend definition
+BACKENDS = {
+    'asana': AsanaAuth,
+}
