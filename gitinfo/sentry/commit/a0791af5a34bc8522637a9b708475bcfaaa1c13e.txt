commit a0791af5a34bc8522637a9b708475bcfaaa1c13e
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Tue Oct 3 13:00:35 2017 -0500

    ref: Extract TagValue interactions out to TagStorage abstraction (#6225)

diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
index 8be6bbf604..e4921ed994 100644
--- a/src/sentry/api/endpoints/project_tagkey_values.py
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -6,7 +6,6 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import DateTimePaginator
 from sentry.api.serializers import serialize
-from sentry.models import TagValue
 
 
 class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
@@ -33,14 +32,7 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
         except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
-        queryset = TagValue.objects.filter(
-            project_id=project.id,
-            key=tagkey.key,
-        )
-
-        query = request.GET.get('query')
-        if query:
-            queryset = queryset.filter(value__contains=query)
+        queryset = tagstore.get_tag_value_qs(project.id, tagkey.key, query=request.GET.get('query'))
 
         return self.paginate(
             request=request,
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 9410ed736a..9fa8d56d4b 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -6,10 +6,11 @@ from collections import defaultdict
 from django.db.models import Sum
 from itertools import izip
 
+from sentry import tagstore
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.db.models.query import in_iexact
 from sentry.models import (
-    Commit, CommitAuthor, Deploy, Release, ReleaseProject, TagValue, User, UserEmail
+    Commit, CommitAuthor, Deploy, Release, ReleaseProject, User, UserEmail
 )
 
 
@@ -170,16 +171,13 @@ class ReleaseSerializer(Serializer):
             ).distinct())
 
         tags = {}
-        tks = TagValue.objects.filter(
-            project_id__in=project_ids,
-            key='sentry:release',
-            value__in=[o.version for o in item_list],
-        )
-        for tk in tks:
-            val = tags.get(tk.value)
-            tags[tk.value] = {
-                'first_seen': min(tk.first_seen, val['first_seen']) if val else tk.first_seen,
-                'last_seen': max(tk.last_seen, val['last_seen']) if val else tk.last_seen
+        tvs = tagstore.get_tag_values(project_ids, 'sentry:release',
+                                      [o.version for o in item_list])
+        for tv in tvs:
+            val = tags.get(tv.value)
+            tags[tv.value] = {
+                'first_seen': min(tv.first_seen, val['first_seen']) if val else tv.first_seen,
+                'last_seen': max(tv.last_seen, val['last_seen']) if val else tv.last_seen
             }
         owners = {
             d['id']: d for d in serialize(set(i.owner for i in item_list if i.owner_id), user)
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 8c14521224..d5fc778145 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -39,7 +39,7 @@ from sentry.db.models import BoundedIntegerField
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.csp import Csp
 from sentry.event_manager import EventManager
-from sentry.models import EventError, ProjectKey, TagValue
+from sentry.models import EventError, ProjectKey
 from sentry.tasks.store import preprocess_event, \
     preprocess_event_from_reprocessing
 from sentry.utils import json
@@ -613,7 +613,7 @@ class ClientApiHelper(object):
                     )
                     continue
 
-                if not TagValue.is_valid_value(v):
+                if not tagstore.is_valid_value(v):
                     self.log.debug('Discard invalid tag value: %s', v)
                     data['errors'].append(
                         {
@@ -940,7 +940,7 @@ class CspApiHelper(ClientApiHelper):
                     }
                 )
                 continue
-            if not TagValue.is_valid_value(v):
+            if not tagstore.is_valid_value(v):
                 self.log.debug('Discard invalid tag value: %s', v)
                 data['errors'].append(
                     {
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 4583d4281f..a630e51d77 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -120,7 +120,7 @@ class GroupManager(BaseManager):
             )
 
     def add_tags(self, group, tags):
-        from sentry.models import TagValue, GroupTagValue
+        from sentry.models import GroupTagValue
 
         project_id = group.project_id
         date = group.last_seen
@@ -131,18 +131,10 @@ class GroupManager(BaseManager):
             else:
                 key, value, data = tag_item
 
-            buffer.incr(
-                TagValue, {
-                    'times_seen': 1,
-                }, {
-                    'project_id': project_id,
-                    'key': key,
-                    'value': value,
-                }, {
-                    'last_seen': date,
-                    'data': data,
-                }
-            )
+            tagstore.incr_times_seen(project_id, key, value, {
+                'last_seen': date,
+                'data': data,
+            })
 
             buffer.incr(
                 GroupTagValue, {
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index dbd97b9433..e3b381d4cb 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -18,6 +18,7 @@ from django.db.models import F
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
+from sentry import tagstore
 from sentry.app import locks
 from sentry.constants import ObjectStatus
 from sentry.db.models import (
@@ -129,7 +130,7 @@ class Project(Model):
         return absolute_uri('/{}/{}/'.format(self.organization.slug, self.slug))
 
     def merge_to(self, project):
-        from sentry.models import (Group, GroupTagValue, Event, TagValue)
+        from sentry.models import (Group, GroupTagValue, Event)
 
         if not isinstance(project, Project):
             project = Project.objects.get_from_cache(pk=project)
@@ -161,8 +162,8 @@ class Project(Model):
                     if not created:
                         obj2.update(times_seen=F('times_seen') + obj.times_seen)
 
-        for fv in TagValue.objects.filter(project_id=self.id):
-            TagValue.objects.get_or_create(project_id=project.id, key=fv.key, value=fv.value)
+        for fv in tagstore.get_tag_values(self.id):
+            tagstore.get_or_create_tag_value(project_id=project.id, key=fv.key, value=fv.value)
             fv.delete()
         self.delete()
 
diff --git a/src/sentry/models/tagvalue.py b/src/sentry/models/tagvalue.py
index add71dda30..c8be07528b 100644
--- a/src/sentry/models/tagvalue.py
+++ b/src/sentry/models/tagvalue.py
@@ -42,10 +42,6 @@ class TagValue(Model):
 
     __repr__ = sane_repr('project_id', 'key', 'value')
 
-    @classmethod
-    def is_valid_value(cls, value):
-        return '\n' not in value
-
     def get_label(self):
         # HACK(dcramer): quick and dirty way to hack in better display states
         if self.key == 'sentry:release':
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index d98fa84a4c..7aa1949ad3 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -30,14 +30,19 @@ class TagKeyStatus(object):
 
 class TagStorage(Service):
     __all__ = (
-        'is_valid_key', 'is_reserved_key', 'prefix_reserved_key', 'get_standardized_key',
-        'create_tag_key', 'get_or_create_tag_key', 'get_tag_key', 'get_tag_keys',
-        'delete_tag_key', 'incr_values_seen', 'get_group_event_ids'
+        'is_valid_key', 'is_valid_value', 'is_reserved_key', 'prefix_reserved_key',
+        'get_standardized_key', 'create_tag_key', 'get_or_create_tag_key',
+        'create_tag_value', 'get_or_create_tag_value', 'get_tag_key', 'get_tag_keys',
+        'get_tag_value', 'get_tag_values', 'delete_tag_key', 'incr_values_seen',
+        'incr_times_seen', 'get_group_event_ids', 'get_tag_value_qs'
     )
 
     def is_valid_key(self, key):
         return bool(TAG_KEY_RE.match(key))
 
+    def is_valid_value(self, value):
+        return '\n' not in value
+
     def is_reserved_key(self, key):
         return key in INTERNAL_TAG_KEYS
 
@@ -53,18 +58,30 @@ class TagStorage(Service):
             return key.split('sentry:', 1)[-1]
         return key
 
-    def create_tag_key(self, project_id, key):
+    def create_tag_key(self, project_id, key, **kwargs):
         """
         >>> create_tag_key(1, "key1")
         """
         raise NotImplementedError
 
-    def get_or_create_tag_key(self, project_id, key):
+    def get_or_create_tag_key(self, project_id, key, **kwargs):
         """
         >>> get_or_create_tag_key(1, "key1")
         """
         raise NotImplementedError
 
+    def create_tag_value(self, project_id, key, value, **kwargs):
+        """
+        >>> create_tag_key(1, "key1", "value1")
+        """
+        raise NotImplementedError
+
+    def get_or_create_tag_value(self, project_id, key, value, **kwargs):
+        """
+        >>> get_or_create_tag_key(1, "key1", "value1")
+        """
+        raise NotImplementedError
+
     def get_tag_key(self, project_id, key, status=TagKeyStatus.VISIBLE):
         """
         >>> get_tag_key(1, "key1")
@@ -77,6 +94,18 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
+    def get_tag_value(self, project_id, key, value):
+        """
+        >>> get_tag_value(1, "key1", "value1")
+        """
+        raise NotImplementedError
+
+    def get_tag_values(self, project_ids, key, values=None):
+        """
+        >>> get_tag_values([1, 2], "key1", ["value1, "value2"])
+        """
+        raise NotImplementedError
+
     def delete_tag_key(self, project_id, key):
         """
         >>> delete_tag_key(1, "key1")
@@ -89,8 +118,20 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
+    def incr_times_seen(self, project_id, key, value, extra=None, count=1):
+        """
+        >>> incr_times_seen(1, "key1", "value1")
+        """
+        raise NotImplementedError
+
     def get_group_event_ids(self, project_id, group_id, tags):
         """
         >>> get_group_event_ids(1, 2, {'key1': 'value1', 'key2': 'value2'})
         """
         raise NotImplementedError
+
+    def get_tag_value_qs(self, project_id, key, query=None):
+        """
+        >>> get_tag_value_qs(1, 'environment', query='prod')
+        """
+        raise NotImplementedError
diff --git a/src/sentry/tagstore/exceptions.py b/src/sentry/tagstore/exceptions.py
index ea2b407815..4b6d835d8f 100644
--- a/src/sentry/tagstore/exceptions.py
+++ b/src/sentry/tagstore/exceptions.py
@@ -11,3 +11,7 @@ from __future__ import absolute_import
 
 class TagKeyNotFound(Exception):
     pass
+
+
+class TagValueNotFound(Exception):
+    pass
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 85878de2ff..8996439a9a 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -23,11 +23,18 @@ from sentry.tasks.deletion import delete_tag_key
 
 
 class LegacyTagStorage(TagStorage):
-    def create_tag_key(self, project_id, key):
-        return TagKey.objects.create(project_id=project_id, key=key)
+    def create_tag_key(self, project_id, key, **kwargs):
+        return TagKey.objects.create(project_id=project_id, key=key, **kwargs)
 
-    def get_or_create_tag_key(self, project_id, key):
-        return TagKey.objects.get_or_create(project_id=project_id, key=key)
+    def get_or_create_tag_key(self, project_id, key, **kwargs):
+        return TagKey.objects.get_or_create(project_id=project_id, key=key, defaults=kwargs)
+
+    def create_tag_value(self, project_id, key, value, **kwargs):
+        return TagValue.objects.create(project_id=project_id, key=key, value=value, **kwargs)
+
+    def get_or_create_tag_value(self, project_id, key, value, **kwargs):
+        return TagValue.objects.get_or_create(
+            project_id=project_id, key=key, value=value, defaults=kwargs)
 
     def get_tag_key(self, project_id, key, status=TagKeyStatus.VISIBLE):
         from sentry.tagstore.exceptions import TagKeyNotFound
@@ -73,6 +80,36 @@ class LegacyTagStorage(TagStorage):
 
         return list(qs)
 
+    def get_tag_value(self, project_id, key, value):
+        from sentry.tagstore.exceptions import TagValueNotFound
+
+        try:
+            return TagValue.objects.get(
+                project_id=project_id,
+                key=key,
+                value=value
+            )
+        except TagValue.DoesNotExist:
+            raise TagValueNotFound
+
+    def get_tag_values(self, project_ids, key, values=None):
+        qs = TagValue.objects.filter(key=key)
+
+        if isinstance(project_ids, list):
+            qs = qs.filter(project_id__in=project_ids)
+        else:
+            qs = qs.filter(project_id=project_ids)
+
+        qs = TagValue.objects.filter(
+            project_id__in=project_ids,
+            key=key
+        )
+
+        if values is not None:
+            qs = qs.filter(value__in=values)
+
+        return list(qs)
+
     def delete_tag_key(self, project_id, key):
         tagkey = self.get_tag_key(project_id, key, status=None)
 
@@ -94,6 +131,15 @@ class LegacyTagStorage(TagStorage):
             'key': key,
         })
 
+    def incr_times_seen(self, project_id, key, value, extra=None, count=1):
+        buffer.incr(TagValue, {
+            'times_seen': count,
+        }, {
+            'project_id': project_id,
+            'key': key,
+            'value': value,
+        }, extra)
+
     def get_group_event_ids(self, project_id, group_id, tags):
         tagkeys = dict(
             TagKey.objects.filter(
@@ -149,3 +195,14 @@ class LegacyTagStorage(TagStorage):
                 return []
 
         return matches
+
+    def get_tag_value_qs(self, project_id, key, query=None):
+        queryset = TagValue.objects.filter(
+            project_id=project_id,
+            key=key,
+        )
+
+        if query:
+            queryset = queryset.filter(value__contains=query)
+
+        return queryset
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index ad234d8413..405eb75ebe 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -139,7 +139,7 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
 )
 def index_event_tags(organization_id, project_id, event_id, tags, group_id=None, **kwargs):
     from sentry import tagstore
-    from sentry.models import EventTag, TagValue
+    from sentry.models import EventTag
 
     Raven.tags_context({
         'project': project_id,
@@ -147,12 +147,7 @@ def index_event_tags(organization_id, project_id, event_id, tags, group_id=None,
 
     for key, value in tags:
         tagkey, _ = tagstore.get_or_create_tag_key(project_id, key)
-
-        tagvalue, _ = TagValue.objects.get_or_create(
-            project_id=project_id,
-            key=key,
-            value=value,
-        )
+        tagvalue, _ = tagstore.get_or_create_tag_value(project_id, key, value)
 
         try:
             # handle replaying of this task
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index ad7435bae0..fcd37b9ab8 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -20,7 +20,7 @@ from gzip import GzipFile
 from raven import Client
 from six import StringIO
 
-from sentry.models import (Group, GroupTagKey, GroupTagValue, Event, TagValue)
+from sentry.models import (Group, GroupTagKey, GroupTagValue, Event)
 from sentry.testutils import TestCase, TransactionTestCase
 from sentry.testutils.helpers import get_auth_header
 from sentry.utils.settings import (validate_settings, ConfigurationError, import_string)
@@ -177,11 +177,11 @@ class SentryRemoteTest(TestCase):
             key='foo',
             project_id=self.project.id,
         ) is not None
-        assert TagValue.objects.filter(
+        assert tagstore.get_tag_value(
             key='foo',
             value='bar',
             project_id=self.project.id,
-        ).exists()
+        ) is not None
         assert GroupTagKey.objects.filter(
             key='foo',
             group_id=instance.group_id,
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index ef19cbaecb..4575d617d8 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import six
 
 from sentry import tagstore
-from sentry.models import EventTag, TagValue
+from sentry.models import EventTag
 from sentry.testutils import APITestCase
 
 
@@ -36,9 +36,9 @@ class GroupEventsTest(APITestCase):
 
         tagkey_1 = tagstore.create_tag_key(project_id=group.project_id, key='foo')
         tagkey_2 = tagstore.create_tag_key(project_id=group.project_id, key='bar')
-        tagvalue_1 = TagValue.objects.create(project_id=group.project_id, key='foo', value='baz')
-        tagvalue_2 = TagValue.objects.create(project_id=group.project_id, key='bar', value='biz')
-        tagvalue_3 = TagValue.objects.create(project_id=group.project_id, key='bar', value='buz')
+        tagvalue_1 = tagstore.create_tag_value(project_id=group.project_id, key='foo', value='baz')
+        tagvalue_2 = tagstore.create_tag_value(project_id=group.project_id, key='bar', value='biz')
+        tagvalue_3 = tagstore.create_tag_value(project_id=group.project_id, key='bar', value='buz')
 
         EventTag.objects.create(
             project_id=group.project_id,
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_details.py b/tests/sentry/api/endpoints/test_group_tagkey_details.py
index 75ed892e1d..453567155a 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_details.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import six
 
 from sentry import tagstore
-from sentry.models import GroupTagKey, GroupTagValue, TagValue
+from sentry.models import GroupTagKey, GroupTagValue
 from sentry.testutils import APITestCase
 
 
@@ -14,18 +14,18 @@ class GroupTagDetailsTest(APITestCase):
         group.save()
 
         key, value = group.data['tags'][0]
-
         tagkey = tagstore.create_tag_key(
             project_id=group.project_id,
             key=key,
+            values_seen=2
         )
-        tagstore.incr_values_seen(group.project_id, key, count=2)
-        TagValue.objects.create(
+        tagstore.create_tag_value(
             project_id=group.project_id,
             key=key,
             value=value,
-            times_seen=4,
+            times_seen=4
         )
+
         GroupTagKey.objects.create(
             project_id=group.project_id,
             group_id=group.id,
diff --git a/tests/sentry/api/endpoints/test_group_tagkey_values.py b/tests/sentry/api/endpoints/test_group_tagkey_values.py
index e727ae6067..2508a83cbf 100644
--- a/tests/sentry/api/endpoints/test_group_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_group_tagkey_values.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry import tagstore
-from sentry.models import EventUser, GroupTagValue, TagValue
+from sentry.models import EventUser, GroupTagValue
 from sentry.testutils import APITestCase
 
 
@@ -12,7 +12,7 @@ class GroupTagKeyValuesTest(APITestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         tagstore.create_tag_key(project_id=project.id, key=key)
-        TagValue.objects.create(
+        tagstore.create_tag_value(
             project_id=project.id,
             key=key,
             value=value,
@@ -49,7 +49,7 @@ class GroupTagKeyValuesTest(APITestCase):
             project_id=project.id,
             key='sentry:user',
         )
-        TagValue.objects.create(
+        tagstore.create_tag_value(
             project_id=project.id,
             key='sentry:user',
             value=euser.tag_value,
diff --git a/tests/sentry/api/endpoints/test_group_tags.py b/tests/sentry/api/endpoints/test_group_tags.py
index 062fb5d5cc..3c6a9bd1e6 100644
--- a/tests/sentry/api/endpoints/test_group_tags.py
+++ b/tests/sentry/api/endpoints/test_group_tags.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry import tagstore
-from sentry.models import GroupTagKey, GroupTagValue, TagValue
+from sentry.models import GroupTagKey, GroupTagValue
 from sentry.testutils import APITestCase
 
 
@@ -16,7 +16,7 @@ class GroupTagsTest(APITestCase):
                 project_id=group.project_id,
                 key=key,
             )
-            TagValue.objects.create(
+            tagstore.create_tag_value(
                 project_id=group.project_id,
                 key=key,
                 value=value,
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_details.py b/tests/sentry/api/endpoints/test_project_tagkey_details.py
index bba53874c9..aefacec67e 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_details.py
@@ -16,8 +16,8 @@ class ProjectTagKeyDetailsTest(APITestCase):
         tagkey = tagstore.create_tag_key(
             project_id=project.id,
             key='foo',
+            values_seen=16
         )
-        tagstore.incr_values_seen(project.id, 'foo', count=16)
 
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_values.py b/tests/sentry/api/endpoints/test_project_tagkey_values.py
index 228e40f9e9..152ffd9a22 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_values.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry import tagstore
-from sentry.models import TagValue
 from sentry.testutils import APITestCase
 
 
@@ -11,7 +10,7 @@ class ProjectTagKeyValuesTest(APITestCase):
     def test_simple(self):
         project = self.create_project()
         tagkey = tagstore.create_tag_key(project_id=project.id, key='foo')
-        TagValue.objects.create(project_id=project.id, key='foo', value='bar')
+        tagstore.create_tag_value(project_id=project.id, key='foo', value='bar')
 
         self.login_as(user=self.user)
 
@@ -34,7 +33,7 @@ class ProjectTagKeyValuesTest(APITestCase):
     def test_query(self):
         project = self.create_project()
         tagkey = tagstore.create_tag_key(project_id=project.id, key='foo')
-        TagValue.objects.create(project_id=project.id, key='foo', value='bar')
+        tagstore.create_tag_value(project_id=project.id, key='foo', value='bar')
 
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/serializers/test_grouptagvalue.py b/tests/sentry/api/serializers/test_grouptagvalue.py
index ecd409c57e..3f3576af9b 100644
--- a/tests/sentry/api/serializers/test_grouptagvalue.py
+++ b/tests/sentry/api/serializers/test_grouptagvalue.py
@@ -4,8 +4,9 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import serialize
-from sentry.models import EventUser, GroupTagValue, TagValue
+from sentry.models import EventUser, GroupTagValue
 from sentry.testutils import TestCase
 
 
@@ -17,7 +18,7 @@ class GroupTagValueSerializerTest(TestCase):
             project_id=project.id,
             email='foo@example.com',
         )
-        tagvalue = TagValue.objects.create(
+        tagvalue = tagstore.create_tag_value(
             project_id=project.id,
             key='sentry:user',
             value=euser.tag_value,
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index 744c0b11da..3243c0c023 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -8,6 +8,7 @@ import six
 from django.utils import timezone
 from uuid import uuid4
 
+from sentry import tagstore
 from sentry.api.endpoints.organization_releases import ReleaseSerializerWithProjects
 from sentry.api.serializers import serialize
 from sentry.models import (
@@ -18,7 +19,6 @@ from sentry.models import (
     Release,
     ReleaseCommit,
     ReleaseProject,
-    TagValue,
     User,
     UserEmail,
 )
@@ -37,18 +37,20 @@ class ReleaseSerializerTest(TestCase):
         release.add_project(project2)
         ReleaseProject.objects.filter(release=release, project=project).update(new_groups=1)
         ReleaseProject.objects.filter(release=release, project=project2).update(new_groups=1)
-        tag1 = TagValue.objects.create(
+        key = 'sentry:release'
+        value = release.version
+        tagstore.create_tag_value(
             project_id=project.id,
-            key='sentry:release',
-            value=release.version,
+            key=key,
+            value=value,
             first_seen=timezone.now(),
             last_seen=timezone.now(),
             times_seen=5,
         )
-        tag2 = TagValue.objects.create(
+        tagstore.create_tag_value(
             project_id=project2.id,
-            key='sentry:release',
-            value=release.version,
+            key=key,
+            value=value,
             first_seen=timezone.now() - datetime.timedelta(days=2),
             last_seen=timezone.now() - datetime.timedelta(days=1),
             times_seen=5,
@@ -84,8 +86,10 @@ class ReleaseSerializerTest(TestCase):
         # should be sum of all projects
         assert result['newGroups'] == 2
         # should be tags from all projects
-        assert result['firstEvent'] == TagValue.objects.get(id=tag2.id).first_seen
-        assert result['lastEvent'] == TagValue.objects.get(id=tag1.id).last_seen
+        tagvalue1 = tagstore.get_tag_value(project.id, key, value)
+        tagvalue2 = tagstore.get_tag_value(project2.id, key, value)
+        assert result['firstEvent'] == tagvalue2.first_seen
+        assert result['lastEvent'] == tagvalue1.last_seen
         assert result['commitCount'] == 1
         assert result['authors'] == [{'name': 'stebe', 'email': 'stebe@sentry.io'}]
 
@@ -93,8 +97,8 @@ class ReleaseSerializerTest(TestCase):
         # should be groups from one project
         assert result['newGroups'] == 1
         # should be tags from one project
-        assert result['firstEvent'] == TagValue.objects.get(id=tag1.id).first_seen
-        assert result['lastEvent'] == TagValue.objects.get(id=tag1.id).last_seen
+        assert result['firstEvent'] == tagvalue1.first_seen
+        assert result['lastEvent'] == tagvalue1.last_seen
 
         # Make sure a sha1 value gets truncated
         release.version = '0' * 40
diff --git a/tests/sentry/api/serializers/test_tagvalue.py b/tests/sentry/api/serializers/test_tagvalue.py
index ce2e18c42f..c19b52c9ec 100644
--- a/tests/sentry/api/serializers/test_tagvalue.py
+++ b/tests/sentry/api/serializers/test_tagvalue.py
@@ -4,8 +4,9 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import tagstore
 from sentry.api.serializers import serialize
-from sentry.models import EventUser, TagValue
+from sentry.models import EventUser
 from sentry.testutils import TestCase
 
 
@@ -17,7 +18,7 @@ class TagValueSerializerTest(TestCase):
             project_id=project.id,
             email='foo@example.com',
         )
-        tagvalue = TagValue.objects.create(
+        tagvalue = tagstore.create_tag_value(
             project_id=project.id,
             key='sentry:user',
             value=euser.tag_value,
@@ -32,7 +33,7 @@ class TagValueSerializerTest(TestCase):
     def test_basic(self):
         user = self.create_user()
         project = self.create_project()
-        tagvalue = TagValue.objects.create(
+        tagvalue = tagstore.create_tag_value(
             project_id=project.id,
             key='sentry:user',
             value='email:foo@example.com',
@@ -47,7 +48,7 @@ class TagValueSerializerTest(TestCase):
     def test_release(self):
         user = self.create_user()
         project = self.create_project()
-        tagvalue = TagValue.objects.create(
+        tagvalue = tagstore.create_tag_value(
             project_id=project.id,
             key='sentry:release',
             value='df84bccbb23ca15f2868be1f2a5f7c7a6464fadd',
diff --git a/tests/sentry/deletions/test_tagkey.py b/tests/sentry/deletions/test_tagkey.py
index 873e3ac70a..8e46f9b11a 100644
--- a/tests/sentry/deletions/test_tagkey.py
+++ b/tests/sentry/deletions/test_tagkey.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry import tagstore
 from sentry.models import (
-    EventTag, GroupTagKey, GroupTagValue, ScheduledDeletion, TagValue
+    EventTag, GroupTagKey, GroupTagValue, ScheduledDeletion
 )
 from sentry.tasks.deletion import run_deletion
 from sentry.testutils import TestCase
@@ -13,11 +13,13 @@ class DeleteTagKeyTest(TestCase):
         team = self.create_team(name='test', slug='test')
         project = self.create_project(team=team, name='test1', slug='test1')
         group = self.create_group(project=project)
-        tk = tagstore.create_tag_key(key='foo', project_id=project.id)
-        TagValue.objects.create(key='foo', value='bar', project_id=project.id)
-        GroupTagKey.objects.create(key='foo', group_id=group.id, project_id=project.id)
+        key = 'foo'
+        value = 'bar'
+        tk = tagstore.create_tag_key(key=key, project_id=project.id)
+        tagstore.create_tag_value(key=key, value=value, project_id=project.id)
+        GroupTagKey.objects.create(key=key, group_id=group.id, project_id=project.id)
         GroupTagValue.objects.create(
-            key='foo', value='bar', group_id=group.id, project_id=project.id
+            key=key, value=value, group_id=group.id, project_id=project.id
         )
         EventTag.objects.create(
             key_id=tk.id,
@@ -29,10 +31,10 @@ class DeleteTagKeyTest(TestCase):
 
         project2 = self.create_project(team=team, name='test2')
         group2 = self.create_group(project=project2)
-        tk2 = tagstore.create_tag_key(key='foo', project_id=project2.id)
-        gtk2 = GroupTagKey.objects.create(key='foo', group_id=group2.id, project_id=project2.id)
+        tk2 = tagstore.create_tag_key(key=key, project_id=project2.id)
+        gtk2 = GroupTagKey.objects.create(key=key, group_id=group2.id, project_id=project2.id)
         gtv2 = GroupTagValue.objects.create(
-            key='foo', value='bar', group_id=group2.id, project_id=project2.id
+            key=key, value=value, group_id=group2.id, project_id=project2.id
         )
         EventTag.objects.create(
             key_id=tk2.id,
@@ -50,15 +52,19 @@ class DeleteTagKeyTest(TestCase):
 
         assert not GroupTagValue.objects.filter(key=tk.key, project_id=project.id).exists()
         assert not GroupTagKey.objects.filter(key=tk.key, project_id=project.id).exists()
-        assert not TagValue.objects.filter(key=tk.key, project_id=project.id).exists()
         try:
-            tagstore.get_tag_key(key='foo', project_id=project.id)
+            tagstore.get_tag_value(project.id, key, value)
+            assert False  # verify exception thrown
+        except tagstore.TagValueNotFound:
+            pass
+        try:
+            tagstore.get_tag_key(project.id, key)
             assert False  # verify exception thrown
         except tagstore.TagKeyNotFound:
             pass
         assert not EventTag.objects.filter(key_id=tk.id).exists()
 
-        assert tagstore.get_tag_key(key='foo', project_id=project2.id) is not None
+        assert tagstore.get_tag_key(key=key, project_id=project2.id) is not None
         assert GroupTagKey.objects.filter(id=gtk2.id).exists()
         assert GroupTagValue.objects.filter(id=gtv2.id).exists()
         assert EventTag.objects.filter(key_id=tk2.id).exists()
diff --git a/tests/sentry/receivers/test_releases.py b/tests/sentry/receivers/test_releases.py
index 4ef85cb24a..667a26fb25 100644
--- a/tests/sentry/receivers/test_releases.py
+++ b/tests/sentry/receivers/test_releases.py
@@ -5,22 +5,23 @@ from hashlib import sha1
 from mock import patch
 from uuid import uuid4
 
+from sentry import tagstore
 from sentry.models import (
     Activity, Commit, CommitAuthor, GroupAssignee, GroupCommitResolution, OrganizationMember,
-    Release, Repository, TagValue, UserEmail
+    Release, Repository, UserEmail
 )
 from sentry.testutils import TestCase
 
 
 class EnsureReleaseExistsTest(TestCase):
     def test_simple(self):
-        tv = TagValue.objects.create(
+        tv = tagstore.create_tag_value(
             project_id=self.project.id,
             key='sentry:release',
             value='1.0',
         )
 
-        tv = TagValue.objects.get(id=tv.id)
+        tv = tagstore.get_tag_value(self.project.id, 'sentry:release', '1.0')
         assert tv.data['release_id']
 
         release = Release.objects.get(id=tv.data['release_id'])
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index beaf5af604..9d7f8a0947 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -7,7 +7,7 @@ from django.utils import timezone
 from mock import Mock, patch
 
 from sentry import tagstore
-from sentry.models import EventTag, Group, GroupSnooze, GroupStatus, TagValue
+from sentry.models import EventTag, Group, GroupSnooze, GroupStatus
 from sentry.testutils import TestCase
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import index_event_tags, post_process_group
@@ -133,7 +133,7 @@ class IndexEventTagsTest(TestCase):
             key='foo',
             project_id=self.project.id,
         )
-        tagvalue = TagValue.objects.get(
+        tagvalue = tagstore.get_tag_value(
             key='foo',
             value='bar',
             project_id=self.project.id,
@@ -144,7 +144,7 @@ class IndexEventTagsTest(TestCase):
             key='biz',
             project_id=self.project.id,
         )
-        tagvalue = TagValue.objects.get(
+        tagvalue = tagstore.get_tag_value(
             key='biz',
             value='baz',
             project_id=self.project.id,
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 21d55431a8..6d10976465 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -14,7 +14,7 @@ from sentry.models import (
     EnvironmentProject, Event, EventMapping, EventTag, Group, GroupAssignee, GroupHash, GroupMeta,
     GroupRedirect, GroupResolution, GroupStatus, GroupTagKey, GroupTagValue, Organization,
     OrganizationStatus, Project, ProjectStatus, Release, ReleaseCommit, ReleaseEnvironment,
-    Repository, TagValue, Team, TeamStatus
+    Repository, Team, TeamStatus
 )
 from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
 from sentry.tasks.deletion import (
@@ -188,11 +188,13 @@ class DeleteTagKeyTest(TestCase):
         team = self.create_team(name='test', slug='test')
         project = self.create_project(team=team, name='test1', slug='test1')
         group = self.create_group(project=project)
-        tk = tagstore.create_tag_key(key='foo', project_id=project.id)
-        TagValue.objects.create(key='foo', value='bar', project_id=project.id)
-        GroupTagKey.objects.create(key='foo', group_id=group.id, project_id=project.id)
+        key = 'foo'
+        value = 'bar'
+        tk = tagstore.create_tag_key(key=key, project_id=project.id)
+        tagstore.create_tag_value(key=key, value=value, project_id=project.id)
+        GroupTagKey.objects.create(key=key, group_id=group.id, project_id=project.id)
         GroupTagValue.objects.create(
-            key='foo', value='bar', group_id=group.id, project_id=project.id
+            key=key, value=value, group_id=group.id, project_id=project.id
         )
         EventTag.objects.create(
             key_id=tk.id,
@@ -204,10 +206,10 @@ class DeleteTagKeyTest(TestCase):
 
         project2 = self.create_project(team=team, name='test2')
         group2 = self.create_group(project=project2)
-        tk2 = tagstore.create_tag_key(key='foo', project_id=project2.id)
-        gtk2 = GroupTagKey.objects.create(key='foo', group_id=group2.id, project_id=project2.id)
+        tk2 = tagstore.create_tag_key(key=key, project_id=project2.id)
+        gtk2 = GroupTagKey.objects.create(key=key, group_id=group2.id, project_id=project2.id)
         gtv2 = GroupTagValue.objects.create(
-            key='foo', value='bar', group_id=group2.id, project_id=project2.id
+            key=key, value=value, group_id=group2.id, project_id=project2.id
         )
         EventTag.objects.create(
             key_id=tk2.id,
@@ -222,15 +224,19 @@ class DeleteTagKeyTest(TestCase):
 
             assert not GroupTagValue.objects.filter(key=tk.key, project_id=project.id).exists()
             assert not GroupTagKey.objects.filter(key=tk.key, project_id=project.id).exists()
-            assert not TagValue.objects.filter(key=tk.key, project_id=project.id).exists()
+            try:
+                tagstore.get_tag_value(project.id, key, value)
+                assert False  # verify exception thrown
+            except tagstore.TagValueNotFound:
+                pass
             assert not EventTag.objects.filter(key_id=tk.id).exists()
             try:
-                tagstore.get_tag_key(key='foo', project_id=project.id)
+                tagstore.get_tag_key(project.id, key)
                 assert False  # verify exception thrown
             except tagstore.TagKeyNotFound:
                 pass
 
-        assert tagstore.get_tag_key(key='foo', project_id=project2.id) is not None
+        assert tagstore.get_tag_key(key=key, project_id=project2.id) is not None
         assert GroupTagKey.objects.filter(id=gtk2.id).exists()
         assert GroupTagValue.objects.filter(id=gtv2.id).exists()
         assert EventTag.objects.filter(key_id=tk2.id).exists()
diff --git a/tests/sentry/web/frontend/test_group_tag_export.py b/tests/sentry/web/frontend/test_group_tag_export.py
index 4c8c31c1e2..a20aa1918e 100644
--- a/tests/sentry/web/frontend/test_group_tag_export.py
+++ b/tests/sentry/web/frontend/test_group_tag_export.py
@@ -4,7 +4,7 @@ from datetime import timedelta
 from django.utils import timezone
 
 from sentry import tagstore
-from sentry.models import GroupTagValue, TagValue
+from sentry.models import GroupTagValue
 from sentry.testutils import TestCase
 
 
@@ -18,7 +18,7 @@ class GroupTagExportTest(TestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         tagstore.create_tag_key(project_id=project.id, key=key)
-        TagValue.objects.create(
+        tagstore.create_tag_value(
             project_id=project.id,
             key=key,
             value=value,
