commit b3d97f93994ae2f1d829f1b3739e20f03f002029
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 1 13:47:56 2012 -0800

    Add origins validation logic to EditProjectForm (fixes GH-665)

diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 6ef4e4fc67..e2fabd5952 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -6,7 +6,8 @@ sentry.web.forms.teams
 :license: BSD, see LICENSE for more details.
 """
 from django.contrib.auth.models import User
-from django.forms.widgets import RadioFieldRenderer, TextInput
+from django.core.validators import URLValidator
+from django.forms.widgets import RadioFieldRenderer, TextInput, Textarea
 from django.forms import CharField, ValidationError
 from django.utils.encoding import force_unicode
 from django.utils.safestring import mark_safe
@@ -43,3 +44,37 @@ class UserField(CharField):
             return User.objects.get(username=value)
         except User.DoesNotExist:
             raise ValidationError(_('Invalid username'))
+
+
+class OriginsField(CharField):
+    _url_validator = URLValidator(verify_exists=False)
+    widget = Textarea(attrs={'placeholder': 'e.g. http://example.com\n*.example.com', 'class': 'span8'})
+
+    def clean(self, value):
+        if not value:
+            return []
+        values = filter(bool, (v.strip() for v in value.split('\n')))
+        for value in values:
+            if not self.is_valid_origin(value):
+                raise ValidationError('%r is not an acceptable origin' % value)
+        return values
+
+    def is_valid_origin(self, value):
+        if value == '*':
+            return True
+
+        if '://' in value:
+            # URLValidator will raise a forms.ValidationError itself
+            self._url_validator(value)
+            return True
+
+        # ports are not supported on matching expressions (yet)
+        if ':' in value:
+            return False
+
+        # no .com's
+        parts = filter(bool, value.split('.'))
+        if len(parts) < 2:
+            return False
+
+        return True
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 3594924388..3efce76586 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -9,11 +9,10 @@ import itertools
 from django import forms
 from django.contrib.auth import authenticate
 from django.contrib.auth.models import User
-from django.core.validators import URLValidator
 from django.utils.translation import ugettext_lazy as _
 from sentry.models import Project, ProjectOption
 from sentry.permissions import can_set_public_projects
-from sentry.web.forms.fields import RadioFieldRenderer, UserField
+from sentry.web.forms.fields import RadioFieldRenderer, UserField, OriginsField
 
 
 class ProjectTagsForm(forms.Form):
@@ -97,10 +96,7 @@ class RemoveProjectForm(forms.Form):
 class EditProjectForm(forms.ModelForm):
     public = forms.BooleanField(required=False, help_text=_('Allow anyone (even anonymous users) to view this project'))
     team = forms.ChoiceField(choices=())
-    origins = forms.CharField(widget=forms.Textarea(attrs={'placeholder': 'e.g. http://example.com', 'class': 'span8'}),
-        required=False)
-
-    _url_validator = URLValidator(verify_exists=False)
+    origins = OriginsField(required=False)
 
     class Meta:
         fields = ('name', 'public', 'team')
@@ -129,15 +125,6 @@ class EditProjectForm(forms.ModelForm):
 
         return self.team_list[int(value)]
 
-    def clean_origins(self):
-        value = self.cleaned_data.get('origins')
-        if not value:
-            return value
-        values = filter(bool, (v.strip() for v in value.split('\n')))
-        for value in values:
-            self._url_validator(value)
-        return values
-
 
 class EditProjectAdminForm(EditProjectForm):
     team = forms.ChoiceField(choices=(), required=False)
diff --git a/tests/sentry/web/forms/__init__.py b/tests/sentry/web/forms/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/forms/fields/__init__.py b/tests/sentry/web/forms/fields/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/forms/fields/tests.py b/tests/sentry/web/forms/fields/tests.py
new file mode 100644
index 0000000000..3998296cc8
--- /dev/null
+++ b/tests/sentry/web/forms/fields/tests.py
@@ -0,0 +1,39 @@
+from django import forms
+from sentry.web.forms.fields import OriginsField
+from sentry.testutils import TestCase, fixture
+
+
+class OriginsFieldTest(TestCase):
+    @fixture
+    def field(self):
+        return OriginsField()
+
+    def test_supports_wildcards(self):
+        value = '*'
+        result = self.field.clean(value)
+        self.assertEquals(result, ['*'])
+
+    def test_supports_wildcard_domains(self):
+        value = '*.example.com'
+        result = self.field.clean(value)
+        self.assertEquals(result, ['*.example.com'])
+
+    def test_supports_base_domains(self):
+        value = 'example.com'
+        result = self.field.clean(value)
+        self.assertEquals(result, ['example.com'])
+
+    def test_supports_full_base_uri(self):
+        value = 'http://example.com:80'
+        result = self.field.clean(value)
+        self.assertEquals(result, ['http://example.com:80'])
+
+    def test_doesnt_support_domain_with_port(self):
+        value = 'example.com:80'
+        with self.assertRaises(forms.ValidationError):
+            self.field.clean(value)
+
+    def test_doesnt_support_wildcard_domain_with_port(self):
+        value = '*.example.com:80'
+        with self.assertRaises(forms.ValidationError):
+            self.field.clean(value)
diff --git a/tests/sentry/web/forms/projects/__init__.py b/tests/sentry/web/forms/projects/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/forms/projects/tests.py b/tests/sentry/web/forms/projects/tests.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/forms/tests.py b/tests/sentry/web/forms/tests.py
new file mode 100644
index 0000000000..e69de29bb2
