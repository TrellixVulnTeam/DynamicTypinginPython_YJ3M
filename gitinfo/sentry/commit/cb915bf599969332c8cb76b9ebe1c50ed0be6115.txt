commit cb915bf599969332c8cb76b9ebe1c50ed0be6115
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Apr 6 16:12:19 2012 -0700

    Plugins are expected to provide a models.py, which is where things should get initialized

diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index 5eb7f1f41f..31c6868acf 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -1,155 +1,7 @@
 """
 sentry.plugins.sentry_mail
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import sentry
-
-from django import forms
-from django.core.mail import EmailMultiAlternatives
-from django.core.validators import email_re, ValidationError
-from django.template.loader import render_to_string
-from django.utils.translation import ugettext_lazy as _
-from sentry.conf import settings
-from sentry.plugins import register
-from sentry.plugins.bases.notify import NotifyPlugin, NotifyConfigurationForm
-import re
-
-from pynliner import Pynliner
-
-NOTSET = object()
-split_re = re.compile(r'\s*,\s*|\s+')
-
-
-class UnicodeSafePynliner(Pynliner):
-    def _get_output(self):
-        """
-        Generate Unicode string of `self.soup` and set it to `self.output`
-
-        Returns self.output
-        """
-        self.output = unicode(self.soup)
-        return self.output
-
-
-class MailConfigurationForm(NotifyConfigurationForm):
-    send_to = forms.CharField(label=_('Send to'), required=False,
-        help_text=_('Enter one or more emails separated by commas or lines.'),
-        widget=forms.Textarea(attrs={
-            'placeholder': 'you@example.com\nother@example.com'}))
-
-    def clean_send_to(self):
-        value = self.cleaned_data['send_to']
-        emails = filter(bool, split_re.split(value))
-        for email in emails:
-            if not email_re.match(email):
-                raise ValidationError('%s is not a valid e-mail address.' % email)
-        return ','.join(emails)
-
-
-class MailProcessor(NotifyPlugin):
-    title = _('Mail')
-    conf_key = 'mail'
-    slug = 'mail'
-    version = sentry.VERSION
-    author = "Sentry Team"
-    author_url = "https://github.com/dcramer/sentry"
-
-    project_conf_form = MailConfigurationForm
-
-    def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
-                 send_to=None, send_to_members=NOTSET, send_to_admins=NOTSET, *args, **kwargs):
-
-        super(MailProcessor, self).__init__(*args, **kwargs)
-
-        if min_level is NOTSET:
-            min_level = settings.MAIL_LEVEL
-        if include_loggers is NOTSET:
-            include_loggers = settings.MAIL_INCLUDE_LOGGERS
-        if exclude_loggers is NOTSET:
-            exclude_loggers = settings.MAIL_EXCLUDE_LOGGERS
-        if send_to_members is NOTSET:
-            send_to_members = True
-        if send_to_admins is NOTSET:
-            send_to_admins = False
-
-        self.min_level = min_level
-        self.include_loggers = include_loggers
-        self.exclude_loggers = exclude_loggers
-        self.send_to = send_to
-        self.send_to_members = send_to_members
-        self.send_to_admins = send_to_admins
-        self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
-
-    def _send_mail(self, subject, body, html_body=None, project=None, fail_silently=False):
-        send_to = self.get_send_to(project)
-        subject_prefix = self.get_option('subject_prefix', project) or self.subject_prefix
-
-        msg = EmailMultiAlternatives('%s%s' % (subject_prefix, subject), body, settings.SERVER_EMAIL, send_to)
-        if html_body:
-            msg.attach_alternative(html_body, "text/html")
-        msg.send(fail_silently=fail_silently)
-
-    def send_test_mail(self, project=None):
-        self._send_mail(
-            subject='Test Email',
-            body='This email was requested as a test of Sentry\'s outgoing email',
-            project=project,
-            fail_silently=False,
-        )
-
-    def get_send_to(self, project=None):
-        send_to_list = self.get_option('send_to', project) or []
-
-        if isinstance(send_to_list, basestring):
-            send_to_list = [s.strip() for s in send_to_list.split(',')]
-
-        send_to_list.extend(super(MailProcessor, self).get_send_to(project))
-
-        return filter(bool, set(send_to_list))
-
-    def notify_users(self, group, event, fail_silently=False):
-        project = group.project
-
-        interface_list = []
-        for interface in event.interfaces.itervalues():
-            body = interface.to_string(event)
-            if not body:
-                continue
-            interface_list.append((interface.get_title(), body))
-
-        subject = '[%s] %s: %s' % (project.name.encode('utf-8'), event.get_level_display().upper(), event.error().encode('utf-8').split('\n')[0])
-
-        link = '%s/%d/group/%d/' % (settings.URL_PREFIX, group.project_id, group.id)
-
-        body = render_to_string('sentry/emails/error.txt', {
-            'group': group,
-            'event': event,
-            'link': link,
-            'interfaces': interface_list,
-        })
-        html_body = UnicodeSafePynliner().from_string(render_to_string('sentry/emails/error.html', {
-            'group': group,
-            'event': event,
-            'link': link,
-            'interfaces': interface_list,
-        })).run()
-
-        self._send_mail(
-            subject=subject,
-            body=body,
-            html_body=html_body,
-            project=project,
-            fail_silently=fail_silently,
-        )
-
-    def get_option(self, key, project=None):
-        value = super(MailProcessor, self).get_option(key, project)
-        if value is None and key in ('min_level', 'include_loggers', 'exclude_loggers',
-                                     'send_to_members', 'send_to_admins', 'send_to',
-                                     'subject_prefix'):
-            value = getattr(self, key)
-        return value
-register(MailProcessor)
diff --git a/sentry/plugins/sentry_mail/models.py b/sentry/plugins/sentry_mail/models.py
new file mode 100644
index 0000000000..db3c380044
--- /dev/null
+++ b/sentry/plugins/sentry_mail/models.py
@@ -0,0 +1,155 @@
+"""
+sentry.plugins.sentry_mail.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import sentry
+
+from django import forms
+from django.core.mail import EmailMultiAlternatives
+from django.core.validators import email_re, ValidationError
+from django.template.loader import render_to_string
+from django.utils.translation import ugettext_lazy as _
+from sentry.conf import settings
+from sentry.plugins import register
+from sentry.plugins.bases.notify import NotifyPlugin, NotifyConfigurationForm
+import re
+
+from pynliner import Pynliner
+
+NOTSET = object()
+split_re = re.compile(r'\s*,\s*|\s+')
+
+
+class UnicodeSafePynliner(Pynliner):
+    def _get_output(self):
+        """
+        Generate Unicode string of `self.soup` and set it to `self.output`
+
+        Returns self.output
+        """
+        self.output = unicode(self.soup)
+        return self.output
+
+
+class MailConfigurationForm(NotifyConfigurationForm):
+    send_to = forms.CharField(label=_('Send to'), required=False,
+        help_text=_('Enter one or more emails separated by commas or lines.'),
+        widget=forms.Textarea(attrs={
+            'placeholder': 'you@example.com\nother@example.com'}))
+
+    def clean_send_to(self):
+        value = self.cleaned_data['send_to']
+        emails = filter(bool, split_re.split(value))
+        for email in emails:
+            if not email_re.match(email):
+                raise ValidationError('%s is not a valid e-mail address.' % email)
+        return ','.join(emails)
+
+
+class MailProcessor(NotifyPlugin):
+    title = _('Mail')
+    conf_key = 'mail'
+    slug = 'mail'
+    version = sentry.VERSION
+    author = "Sentry Team"
+    author_url = "https://github.com/dcramer/sentry"
+
+    project_conf_form = MailConfigurationForm
+
+    def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
+                 send_to=None, send_to_members=NOTSET, send_to_admins=NOTSET, *args, **kwargs):
+
+        super(MailProcessor, self).__init__(*args, **kwargs)
+
+        if min_level is NOTSET:
+            min_level = settings.MAIL_LEVEL
+        if include_loggers is NOTSET:
+            include_loggers = settings.MAIL_INCLUDE_LOGGERS
+        if exclude_loggers is NOTSET:
+            exclude_loggers = settings.MAIL_EXCLUDE_LOGGERS
+        if send_to_members is NOTSET:
+            send_to_members = True
+        if send_to_admins is NOTSET:
+            send_to_admins = False
+
+        self.min_level = min_level
+        self.include_loggers = include_loggers
+        self.exclude_loggers = exclude_loggers
+        self.send_to = send_to
+        self.send_to_members = send_to_members
+        self.send_to_admins = send_to_admins
+        self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
+
+    def _send_mail(self, subject, body, html_body=None, project=None, fail_silently=False):
+        send_to = self.get_send_to(project)
+        subject_prefix = self.get_option('subject_prefix', project) or self.subject_prefix
+
+        msg = EmailMultiAlternatives('%s%s' % (subject_prefix, subject), body, settings.SERVER_EMAIL, send_to)
+        if html_body:
+            msg.attach_alternative(html_body, "text/html")
+        msg.send(fail_silently=fail_silently)
+
+    def send_test_mail(self, project=None):
+        self._send_mail(
+            subject='Test Email',
+            body='This email was requested as a test of Sentry\'s outgoing email',
+            project=project,
+            fail_silently=False,
+        )
+
+    def get_send_to(self, project=None):
+        send_to_list = self.get_option('send_to', project) or []
+
+        if isinstance(send_to_list, basestring):
+            send_to_list = [s.strip() for s in send_to_list.split(',')]
+
+        send_to_list.extend(super(MailProcessor, self).get_send_to(project))
+
+        return filter(bool, set(send_to_list))
+
+    def notify_users(self, group, event, fail_silently=False):
+        project = group.project
+
+        interface_list = []
+        for interface in event.interfaces.itervalues():
+            body = interface.to_string(event)
+            if not body:
+                continue
+            interface_list.append((interface.get_title(), body))
+
+        subject = '[%s] %s: %s' % (project.name.encode('utf-8'), event.get_level_display().upper(), event.error().encode('utf-8').split('\n')[0])
+
+        link = '%s/%d/group/%d/' % (settings.URL_PREFIX, group.project_id, group.id)
+
+        body = render_to_string('sentry/emails/error.txt', {
+            'group': group,
+            'event': event,
+            'link': link,
+            'interfaces': interface_list,
+        })
+        html_body = UnicodeSafePynliner().from_string(render_to_string('sentry/emails/error.html', {
+            'group': group,
+            'event': event,
+            'link': link,
+            'interfaces': interface_list,
+        })).run()
+
+        self._send_mail(
+            subject=subject,
+            body=body,
+            html_body=html_body,
+            project=project,
+            fail_silently=fail_silently,
+        )
+
+    def get_option(self, key, project=None):
+        value = super(MailProcessor, self).get_option(key, project)
+        if value is None and key in ('min_level', 'include_loggers', 'exclude_loggers',
+                                     'send_to_members', 'send_to_admins', 'send_to',
+                                     'subject_prefix'):
+            value = getattr(self, key)
+        return value
+register(MailProcessor)
diff --git a/sentry/plugins/sentry_urls/__init__.py b/sentry/plugins/sentry_urls/__init__.py
index 12b9c3a54b..1c4db2a4b8 100644
--- a/sentry/plugins/sentry_urls/__init__.py
+++ b/sentry/plugins/sentry_urls/__init__.py
@@ -1,51 +1,7 @@
 """
 sentry.plugins.sentry_urls
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 :copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-import sentry
-
-from django.db.models import Sum
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.plugins import Plugin, register
-
-
-class UrlsPlugin(Plugin):
-    """
-    Adds additional support for showing information about urls including:
-
-    * A panel which shows all urls a message was seen on.
-    * A sidebar module which shows the urls most actively seen on.
-    """
-    slug = 'urls'
-    title = _('URLs')
-    version = sentry.VERSION
-    author = "Sentry Team"
-    author_url = "https://github.com/dcramer/sentry"
-
-    def get_unique_urls(self, group):
-        return group.messagefiltervalue_set.filter(key='url')\
-                    .values_list('value')\
-                    .annotate(times_seen=Sum('times_seen'))\
-                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
-                    .order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_urls/index.html', {
-            'group': group,
-            'unique_urls': self.get_unique_urls(group),
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render('sentry/plugins/sentry_urls/widget.html', {
-            'group': group,
-            'unique_urls': list(self.get_unique_urls(group)[:10]),
-        })
-register(UrlsPlugin)
diff --git a/sentry/plugins/sentry_urls/models.py b/sentry/plugins/sentry_urls/models.py
new file mode 100644
index 0000000000..341772b066
--- /dev/null
+++ b/sentry/plugins/sentry_urls/models.py
@@ -0,0 +1,51 @@
+"""
+sentry.plugins.sentry_urls.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import sentry
+
+from django.db.models import Sum
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.plugins import Plugin, register
+
+
+class UrlsPlugin(Plugin):
+    """
+    Adds additional support for showing information about urls including:
+
+    * A panel which shows all urls a message was seen on.
+    * A sidebar module which shows the urls most actively seen on.
+    """
+    slug = 'urls'
+    title = _('URLs')
+    version = sentry.VERSION
+    author = "Sentry Team"
+    author_url = "https://github.com/dcramer/sentry"
+
+    def get_unique_urls(self, group):
+        return group.messagefiltervalue_set.filter(key='url')\
+                    .values_list('value')\
+                    .annotate(times_seen=Sum('times_seen'))\
+                    .values_list('value', 'times_seen', 'first_seen', 'last_seen')\
+                    .order_by('-times_seen')
+
+    def panels(self, request, group, panel_list, **kwargs):
+        panel_list.append((self.get_title(), self.get_url(group)))
+        return panel_list
+
+    def view(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_urls/index.html', {
+            'group': group,
+            'unique_urls': self.get_unique_urls(group),
+        })
+
+    def widget(self, request, group, **kwargs):
+        return self.render('sentry/plugins/sentry_urls/widget.html', {
+            'group': group,
+            'unique_urls': list(self.get_unique_urls(group)[:10]),
+        })
+register(UrlsPlugin)
