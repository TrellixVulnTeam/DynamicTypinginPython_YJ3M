commit 6b3df7f94bdf8262d49ccfff772f88d7d8307c9b
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Jun 19 12:24:05 2018 -0700

    ref(integrations): Moved Vsts default_project to the config form (#8698)
    
    * Added get_organization_config.
    
    * Added default project to vsts org config settings and fixed org config as well
    
    * Reverted changes to org config ui.
    
    * Moved project config to config interface and removed the django form during config.
    
    * changed tests to work.
    
    * Added ugettext instead of ugettext_lazy. Populated the default_project with the id.
    
    * Added try-catch block to project client thing. need to know what to do about it.
    
    * Adding tests found an error I'm going to follow up on.
    
    * Added tests
    
    * Added try-catch to default_project.

diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index 7a3bd0f615..2b1f12cb4d 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -24,6 +24,9 @@ class IntegrationSerializer(Serializer):
 
 
 class IntegrationConfigSerializer(IntegrationSerializer):
+    def __init__(self, organization_id=None):
+        self.organization_id = organization_id
+
     def serialize(self, obj, attrs, user):
         data = super(IntegrationConfigSerializer, self).serialize(obj, attrs, user)
 
@@ -33,7 +36,7 @@ class IntegrationConfigSerializer(IntegrationSerializer):
         })
 
         try:
-            install = obj.get_installation()
+            install = obj.get_installation(self.organization_id)
         except NotImplementedError:
             # The integration may not implement a Installed Integration object
             # representation.
@@ -73,7 +76,11 @@ class OrganizationIntegrationSerializer(Serializer):
         # we're using the IntegrationConfigSerializer which pulls in the
         # integration installation config object which very well may be making
         # API request for config options.
-        integration = serialize(obj.integration, user, IntegrationConfigSerializer())
+        integration = serialize(
+            objects=obj.integration,
+            user=user,
+            serializer=IntegrationConfigSerializer(obj.organization.id),
+        )
         integration.update({
             'configData': obj.config,
             'configDataProjects': attrs['project_configs'],
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 9c30d9da22..c7aaafb134 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -1,13 +1,11 @@
 from __future__ import absolute_import
-from sentry import http
 from time import time
-from django import forms
 
-from django.utils.translation import ugettext_lazy as _
-from sentry.web.helpers import render_to_response
+from django.utils.translation import ugettext as _
 from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
+from sentry.integrations.exceptions import ApiError
 from .client import VstsApiClient
-from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.utils.http import absolute_uri
@@ -27,48 +25,6 @@ metadata = IntegrationMetadata(
 )
 
 
-class ProjectConfigView(PipelineView):
-    def dispatch(self, request, pipeline):
-        if 'project' in request.POST:
-            project_id = request.POST.get('project')
-            projects = pipeline.fetch_state(key='projects')
-            project = self.get_project_from_id(project_id, projects)
-            if project is not None:
-                pipeline.bind_state('project', project)
-                return pipeline.next_step()
-
-        identity_data = pipeline.fetch_state(key='identity')
-        instance = identity_data['instance']
-        access_token = identity_data['data']['access_token']
-        projects = get_projects(instance, access_token)['value']
-        pipeline.bind_state('projects', projects)
-        project_form = ProjectForm(projects)
-
-        return render_to_response(
-            template='sentry/integrations/vsts-config.html',
-            context={
-                'form': project_form,
-            },
-            request=request,
-        )
-
-    def get_project_from_id(self, project_id, projects):
-        for project in projects:
-            if project['id'] == project_id:
-                return project
-        return None
-
-
-class ProjectForm(forms.Form):
-    def __init__(self, projects, *args, **kwargs):
-        super(ProjectForm, self).__init__(*args, **kwargs)
-        self.fields['project'] = forms.ChoiceField(
-            choices=[(project['id'], project['name']) for project in projects],
-            label='Project',
-            help_text='Enter the Visual Studio Team Services project name that you wish to use as a default for new work items'
-        )
-
-
 class VstsIntegration(Integration):
     def __init__(self, *args, **kwargs):
         super(VstsIntegration, self).__init__(*args, **kwargs)
@@ -83,6 +39,50 @@ class VstsIntegration(Integration):
             raise ValueError('Identity missing access token')
         return VstsApiClient(access_token)
 
+    def get_project_config(self):
+        client = self.get_client()
+        disabled = False
+        try:
+            projects = client.get_projects(self.model.metadata['domain_name'])
+        except ApiError:
+            # TODO(LB): Disable for now. Need to decide what to do with this in the future
+            # should a message be shown to the user?
+            # Should we try refreshing the token? For VSTS that often clears up the problem
+            project_choices = []
+            disabled = True
+        else:
+            project_choices = [(project['id'], project['name']) for project in projects['value']]
+
+        try:
+            # TODO(LB): Will not work in the UI until the serliazer sends a `project_id` to get_installation()
+            # serializers and UI are being refactored and it's not worth trying to fix
+            # the old system. Revisit
+            default_project = self.project_integration.config.get('default_project')
+        except Exception:
+            default_project = None
+
+        initial_project = ('', '')
+        if default_project is not None:
+            for project_id, project_name in project_choices:
+                if default_project == project_id:
+                    initial_project = (project_id, project_name)
+                    break
+
+        return [
+            {
+                'name': 'default_project',
+                'type': 'choice',
+                'allowEmpty': True,
+                'disabled': disabled,
+                'required': True,
+                'choices': project_choices,
+                'initial': initial_project,
+                'label': _('Default Project Name'),
+                'placeholder': _('MyProject'),
+                'help': _('Enter the Visual Studio Team Services project name that you wish to use as a default for new work items'),
+            },
+        ]
+
 
 class VstsIntegrationProvider(IntegrationProvider):
     key = 'vsts'
@@ -92,6 +92,7 @@ class VstsIntegrationProvider(IntegrationProvider):
     api_version = '4.1'
     needs_default_identity = True
     integration_cls = VstsIntegration
+    can_add_project = True
 
     setup_dialog_config = {
         'width': 600,
@@ -112,30 +113,28 @@ class VstsIntegrationProvider(IntegrationProvider):
 
         return [
             identity_pipeline_view,
-            ProjectConfigView(),
         ]
 
     def build_integration(self, state):
         data = state['identity']['data']
         account = state['identity']['account']
         instance = state['identity']['instance']
-        project = state['project']
 
         scopes = sorted(VSTSIdentityProvider.oauth_scopes)
         return {
-            'name': project['name'],
-            'external_id': project['id'],
+            'name': account['AccountName'],
+            'external_id': account['AccountId'],
             'metadata': {
                 'domain_name': instance,
                 'scopes': scopes,
-                # icon doesn't appear to be possible
             },
+            # TODO(LB): Change this to a Microsoft account as opposed to a VSTS workspace
             'user_identity': {
                 'type': 'vsts',
                 'external_id': account['AccountId'],
                 'scopes': [],
                 'data': self.get_oauth_data(data),
-            }
+            },
         }
 
     def get_oauth_data(self, payload):
@@ -157,17 +156,3 @@ class VstsIntegrationProvider(IntegrationProvider):
             VstsRepositoryProvider,
             id='integrations:vsts',
         )
-
-
-def get_projects(instance, access_token):
-    session = http.build_session()
-    url = 'https://%s/DefaultCollection/_apis/projects' % instance
-    response = session.get(
-        url,
-        headers={
-            'Content-Type': 'application/json',
-            'Authorization': 'Bearer %s' % access_token,
-        }
-    )
-    response.raise_for_status()
-    return response.json()
diff --git a/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx
index 51cd835763..97a15ad0d2 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegration/installedIntegration.jsx
@@ -144,7 +144,7 @@ export default class InstalledIntegration extends React.Component {
             <Box mr={1}>
               <Button
                 size="small"
-                disabled={!this.isEnabledForProject() && provider.canAddProject}
+                disabled={!this.isEnabledForProject()}
                 priority={this.state.configuring ? 'primary' : undefined}
                 onClick={this.onConfigure}
               >
@@ -168,10 +168,7 @@ export default class InstalledIntegration extends React.Component {
         <div
           style={{
             display:
-              this.state.configuring &&
-              (this.isEnabledForProject() || !provider.canAddProject)
-                ? 'block'
-                : 'none',
+              this.state.configuring && this.isEnabledForProject() ? 'block' : 'none',
           }}
         >
           {this.renderConfiguration()}
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index a911c7e58f..941383ddca 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -1,71 +1,13 @@
 from __future__ import absolute_import
 
 import responses
-
-from mock import Mock
-from django.http import HttpRequest
-
-from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider, ProjectConfigView, ProjectForm, get_projects
+from sentry.integrations.vsts import VstsIntegration, VstsIntegrationProvider
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.models import Integration, Identity, IdentityProvider
-from sentry.testutils import TestCase
+from sentry.testutils import APITestCase, TestCase
 
 
-class ProjectConfigViewTest(TestCase):
-    def setUp(self):
-        self.instance = 'example.visualstudio.com'
-        self.projects = [
-            {
-                'id': 'first-project-id',
-                'name': 'First Project',
-                        'url': 'https://myfirstproject.visualstudio.com/DefaultCollection/_apis/projects/xxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx',
-                        'description': 'My First Project!',
-            },
-            {
-                'id': 'second-project-id',
-                'name': 'Second Project',
-                        'url': 'https://mysecondproject.visualstudio.com/DefaultCollection/_apis/projects/xxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxz',
-                        'description': 'Not My First Project!',
-            }
-        ]
-        responses.add(
-            responses.GET,
-            'https://{}/DefaultCollection/_apis/projects'.format(self.instance),
-            json={
-                'value': self.projects,
-                'count': 2,
-            },
-        )
-
-    @responses.activate
-    def test_get_projects(self):
-        result = get_projects(self.instance, 'access-token')
-        assert result['count'] == 2
-        assert result['value'][0]['name'] == 'First Project'
-        assert result['value'][1]['name'] == 'Second Project'
-
-    def test_project_form(self):
-        project_form = ProjectForm(self.projects)
-        assert project_form.fields['project'].choices == [
-            ('first-project-id', 'First Project'), ('second-project-id', 'Second Project')]
-
-    def test_dispatch(self):
-        view = ProjectConfigView()
-        request = HttpRequest()
-        request.POST = {'project': 'first-project-id'}
-
-        pipeline = Mock()
-        pipeline.state = {'projects': self.projects}
-        pipeline.fetch_state = lambda key: pipeline.state[key]
-        pipeline.bind_state = lambda name, value: pipeline.state.update({name: value})
-
-        view.dispatch(request, pipeline)
-
-        assert pipeline.fetch_state(key='project') == self.projects[0]
-        assert pipeline.next_step.call_count == 1
-
-
-class VSTSIntegrationTest(TestCase):
+class VstsIntegrationProviderTest(TestCase):
     def setUp(self):
         self.integration = VstsIntegrationProvider()
 
@@ -81,11 +23,10 @@ class VSTSIntegrationTest(TestCase):
                 'account': {'AccountName': 'sentry', 'AccountId': '123435'},
                 'instance': 'sentry.visualstudio.com',
             },
-            'project': {'name': 'My Project', 'id': 'my-project-id'},
         }
         integration_dict = self.integration.build_integration(state)
-        assert integration_dict['name'] == 'My Project'
-        assert integration_dict['external_id'] == 'my-project-id'
+        assert integration_dict['name'] == 'sentry'
+        assert integration_dict['external_id'] == '123435'
         assert integration_dict['metadata']['scopes'] == list(VSTSIdentityProvider.oauth_scopes)
         assert integration_dict['metadata']['domain_name'] == 'sentry.visualstudio.com'
 
@@ -99,15 +40,19 @@ class VSTSIntegrationTest(TestCase):
         assert integration_dict['user_identity']['data']['token_type'] == 'jwt-bearer'
 
 
-class VstsIntegrationTest(TestCase):
-    def test_get_client(self):
+class VstsIntegrationTest(APITestCase):
+    def setUp(self):
         user = self.create_user()
         organization = self.create_organization()
-        access_token = '1234567890'
+        project = self.create_project(organization=organization)
+        self.access_token = '1234567890'
         model = Integration.objects.create(
             provider='integrations:vsts',
             external_id='vsts_external_id',
             name='vsts_name',
+            metadata={
+                 'domain_name': 'instance.visualstudio.com'
+            }
         )
 
         identity = Identity.objects.create(
@@ -118,11 +63,66 @@ class VstsIntegrationTest(TestCase):
             user=user,
             external_id='vsts_id',
             data={
-                'access_token': access_token
+                'access_token': self.access_token,
             }
         )
-        model.add_organization(organization.id, identity.id)
-        integration = VstsIntegration(model, organization.id)
-        client = integration.get_client()
+        self.org_integration = model.add_organization(organization.id, identity.id)
+        self.project_integration = model.add_project(project.id)
+        self.integration = VstsIntegration(model, organization.id, project.id)
+        self.projects = [
+            ('eb6e4656-77fc-42a1-9181-4c6d8e9da5d1', 'ProjectB'),
+            ('6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c', 'ProjectA')
+        ]
+
+        responses.add(
+            responses.GET,
+            'https://instance.visualstudio.com/DefaultCollection/_apis/projects',
+            json={
+                'value': [
+                    {
+                        'id': self.projects[0][0],
+                        'name': self.projects[0][1],
+
+                    },
+                    {
+                        'id': self.projects[1][0],
+                        'name': self.projects[1][1],
+
+                    }
+                ],
+                'count': 2
+            },
+        )
 
-        assert client.access_token == access_token
+    def test_get_client(self):
+        client = self.integration.get_client()
+        assert client.access_token == self.access_token
+
+    @responses.activate
+    def test_get_project_config(self):
+        fields = self.integration.get_project_config()
+        assert len(fields) == 1
+        project_field = fields[0]
+        assert project_field['name'] == 'default_project'
+        assert project_field['disabled'] is False
+        assert project_field['choices'] == self.projects
+        assert project_field['initial'] == ('', '')
+
+    @responses.activate
+    def test_get_project_config_initial(self):
+        self.integration.project_integration.config = {'default_project': self.projects[1][0]}
+        self.integration.project_integration.save()
+        fields = self.integration.get_project_config()
+        assert len(fields) == 1
+        project_field = fields[0]
+        assert project_field['name'] == 'default_project'
+        assert project_field['disabled'] is False
+        assert project_field['choices'] == self.projects
+        assert project_field['initial'] == self.projects[1]
+
+    def test_get_project_config_failed_api_call(self):
+        fields = self.integration.get_project_config()
+        assert len(fields) == 1
+        project_field = fields[0]
+        assert project_field['name'] == 'default_project'
+        assert project_field['disabled'] is True
