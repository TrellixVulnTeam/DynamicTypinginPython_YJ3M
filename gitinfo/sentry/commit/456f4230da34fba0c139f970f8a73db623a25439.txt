commit 456f4230da34fba0c139f970f8a73db623a25439
Author: maxbittker <maxbittker@gmail.com>
Date:   Fri Sep 23 14:58:39 2016 -0700

    rough ui version

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 23ff379783..679d581096 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -28,6 +28,7 @@ const Frame = React.createClass({
     isExpanded: React.PropTypes.bool,
     emptySourceNotation: React.PropTypes.bool,
     isOnlyFrame: React.PropTypes.bool,
+    timesRepeated: React.PropTypes.number,
   },
 
   mixins: [
@@ -256,23 +257,27 @@ const Frame = React.createClass({
     return !this.props.data.inApp && this.props.nextFrameInApp;
   },
 
-  renderLeadHint() {
+  renderLeadHint(nRepeats) {
     if (this.leadsToApp() && !this.state.isExpanded) {
       return (
         <span className="leads-to-app-hint">
           {'Called from: '}
         </span>
       );
-    } else {
-      return null;
-    }
+    } else if (nRepeats > 0) {
+      return (
+      <span className="repeated-frames">
+        â†»  {nRepeats} &nbsp;&nbsp;&nbsp;
+      </span>
+      );
+    } else return null;
   },
 
-  renderDefaultLine() {
+  renderDefaultLine(nRepeats) {
     return (
       <StrictClick onClick={this.isExpandable() ? this.toggleContext : null}>
         <div className="title">
-          {this.renderLeadHint()}
+          {this.renderLeadHint(nRepeats)}
           {this.renderDefaultTitle()}
         </div>
       </StrictClick>
@@ -311,13 +316,13 @@ const Frame = React.createClass({
     );
   },
 
-  renderLine() {
+  renderLine(nRepeats) {
     switch (this.getPlatform()) {
       case 'objc':
       case 'cocoa':
         return this.renderCocoaLine();
       default:
-        return this.renderDefaultLine();
+        return this.renderDefaultLine(nRepeats);
     }
   },
 
@@ -338,7 +343,7 @@ const Frame = React.createClass({
 
     return (
       <li {...props}>
-        {this.renderLine()}
+        {this.renderLine(this.props.timesRepeated)}
         {context}
       </li>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index b906592c9d..7fa1a3f3f2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -66,9 +66,16 @@ const StacktraceContent = React.createClass({
 
     let expandFirstFrame = this.props.expandFirstFrame;
     let frames = [];
+    let nRepeats = 0;
     data.frames.forEach((frame, frameIdx) => {
       let nextFrame = data.frames[frameIdx + 1];
-      if (this.frameIsVisible(frame, nextFrame)) {
+      let repeatedFrame = nextFrame && frame.lineNo == nextFrame.lineNo && frame.function == nextFrame.function;
+      if(repeatedFrame){
+        nRepeats++;
+      }
+      debugger
+      if (this.frameIsVisible(frame, nextFrame)
+          && !repeatedFrame ){
         frames.push(
           <Frame
             key={frameIdx}
@@ -77,9 +84,13 @@ const StacktraceContent = React.createClass({
             emptySourceNotation={lastFrameIdx === frameIdx && frameIdx === 0}
             isOnlyFrame={this.props.data.frames.length === 1}
             nextFrameInApp={nextFrame && nextFrame.inApp}
-            platform={this.props.platform} />
+            platform={this.props.platform}
+            timesRepeated={nRepeats}/>
         );
       }
+      if(!repeatedFrame){
+        nRepeats = 0;
+      }
       if (frameIdx === firstFrameOmitted) {
         frames.push(this.renderOmittedFrames(
           firstFrameOmitted, lastFrameOmitted));
