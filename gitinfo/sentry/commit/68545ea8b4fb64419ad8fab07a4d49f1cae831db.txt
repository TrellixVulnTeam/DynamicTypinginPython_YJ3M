commit 68545ea8b4fb64419ad8fab07a4d49f1cae831db
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon May 23 12:53:56 2016 -0700

    Show flash message when session expires

diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 2462d2c038..164b322326 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import $ from 'jquery';
+import Cookies from 'js-cookie';
 
 import ApiMixin from '../mixins/apiMixin';
 import Alerts from '../components/alerts';
@@ -77,6 +78,7 @@ const App = React.createClass({
 
     $(document).ajaxError(function (evt, jqXHR) {
       if (jqXHR && jqXHR.status === 401) {
+        Cookies.set('session_expired', 1);
         // User has become unauthenticated; reload URL, and let Django
         // redirect to login page
         // NOTE: This presumes that React application is ONLY for
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index e4a05fbec8..35f3c35859 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -4,7 +4,9 @@ from __future__ import absolute_import, print_function
 from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.db import transaction
+from django.utils.translation import ugettext as _
 from django.views.decorators.cache import never_cache
+from django.contrib import messages
 
 from sentry import features
 from sentry.auth.helper import AuthHelper
@@ -13,6 +15,8 @@ from sentry.utils import auth
 from sentry.web.forms.accounts import AuthenticationForm, RegistrationForm
 from sentry.web.frontend.base import BaseView
 
+ERR_EXPIRED = _('Your session has expired.')
+
 
 class AuthOrganizationLoginView(BaseView):
     auth_required = False
@@ -136,6 +140,13 @@ class AuthOrganizationLoginView(BaseView):
         except AuthProvider.DoesNotExist:
             auth_provider = None
 
+        if request.COOKIES.get('session_expired'):
+            messages.add_message(request, messages.WARNING, ERR_EXPIRED)
+
         if not auth_provider:
-            return self.handle_basic_auth(request, organization)
-        return self.handle_sso(request, organization, auth_provider)
+            response = self.handle_basic_auth(request, organization)
+        else:
+            response = self.handle_sso(request, organization, auth_provider)
+
+        response.delete_cookie('session_expired')
+        return response
