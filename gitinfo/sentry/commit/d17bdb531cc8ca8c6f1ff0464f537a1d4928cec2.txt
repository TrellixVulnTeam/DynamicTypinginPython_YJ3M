commit d17bdb531cc8ca8c6f1ff0464f537a1d4928cec2
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Apr 17 12:12:22 2020 -0400

    fix(dates): Improve statsPeriod coercion on parsePeriodToHours() and getParams() (#18325)

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
index 9dac404c7e..c7d5201ada 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
@@ -3,29 +3,63 @@ import moment from 'moment';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {defined} from 'app/utils';
 
-const STATS_PERIOD_PATTERN = '^\\d+[hdmsw]?$';
+const STATS_PERIOD_PATTERN = '^(\\d+)([hdmsw])?$';
 
-function validStatsPeriod(input: string) {
-  return !!input.match(STATS_PERIOD_PATTERN);
+export function parseStatsPeriod(input: string) {
+  const result = input.match(STATS_PERIOD_PATTERN);
+
+  if (!result) {
+    return undefined;
+  }
+
+  const period = result[1];
+
+  let periodLength = result[2];
+  if (!periodLength) {
+    // default to seconds.
+    // this behaviour is based on src/sentry/utils/dates.py
+    periodLength = 's';
+  }
+
+  return {
+    period,
+    periodLength,
+  };
 }
 
-const getStatsPeriodValue = (
+function coerceStatsPeriod(input: string) {
+  const result = parseStatsPeriod(input);
+
+  if (!result) {
+    return undefined;
+  }
+
+  const {period, periodLength} = result;
+
+  return `${period}${periodLength}`;
+}
+
+function getStatsPeriodValue(
   maybe: string | string[] | undefined | null
-): string | undefined => {
+): string | undefined {
   if (Array.isArray(maybe)) {
     if (maybe.length <= 0) {
       return undefined;
     }
 
-    return maybe.find(validStatsPeriod);
+    const result = maybe.find(coerceStatsPeriod);
+    if (!result) {
+      return undefined;
+    }
+    return coerceStatsPeriod(result);
   }
 
-  if (typeof maybe === 'string' && validStatsPeriod(maybe)) {
-    return maybe;
+  if (typeof maybe === 'string') {
+    return coerceStatsPeriod(maybe);
   }
 
   return undefined;
-};
+}
 
 // We normalize potential datetime strings into the form that would be valid
 // if it were to be parsed by datetime.strptime using the format %Y-%m-%dT%H:%M:%S.%f
diff --git a/src/sentry/static/sentry/app/utils/dates.tsx b/src/sentry/static/sentry/app/utils/dates.tsx
index 16a8e8e856..ad8e40029b 100644
--- a/src/sentry/static/sentry/app/utils/dates.tsx
+++ b/src/sentry/static/sentry/app/utils/dates.tsx
@@ -1,6 +1,7 @@
 import moment from 'moment';
 
 import ConfigStore from 'app/stores/configStore';
+import {parseStatsPeriod} from 'app/components/organizations/globalSelectionHeader/getParams';
 
 // TODO(billy): Move to TimeRangeSelector specific utils
 export const DEFAULT_DAY_START_TIME = '00:00:00';
@@ -186,7 +187,14 @@ export function intervalToMilliseconds(interval: string): number {
  * and converts it into hours
  */
 export function parsePeriodToHours(str: string): number {
-  const [, period, periodLength] = str.match(/([0-9]+)([smhdw])/);
+  const result = parseStatsPeriod(str);
+
+  if (!result) {
+    return -1;
+  }
+
+  const {period, periodLength} = result;
+
   const periodNumber = parseInt(period, 10);
 
   switch (periodLength) {
diff --git a/tests/js/spec/components/organizations/getParams.spec.jsx b/tests/js/spec/components/organizations/getParams.spec.jsx
index 1dc0f2c3c7..3cc83576b9 100644
--- a/tests/js/spec/components/organizations/getParams.spec.jsx
+++ b/tests/js/spec/components/organizations/getParams.spec.jsx
@@ -1,4 +1,7 @@
-import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
+import {
+  getParams,
+  parseStatsPeriod,
+} from 'app/components/organizations/globalSelectionHeader/getParams';
 
 describe('getParams', function() {
   it('should return default statsPeriod if it is not provided or is invalid', function() {
@@ -7,6 +10,7 @@ describe('getParams', function() {
     expect(getParams({statsPeriod: null})).toEqual({statsPeriod: '14d'});
     expect(getParams({statsPeriod: undefined})).toEqual({statsPeriod: '14d'});
     expect(getParams({statsPeriod: '24f'})).toEqual({statsPeriod: '14d'});
+    expect(getParams({statsPeriod: '24'})).toEqual({statsPeriod: '24s'});
   });
 
   it('should parse statsPeriod', function() {
@@ -111,3 +115,20 @@ describe('getParams', function() {
     expect(getParams({utc: undefined})).toEqual({statsPeriod: '14d'});
   });
 });
+
+describe('parseStatsPeriod', function() {
+  it('should parse statsPeriod', function() {
+    expect(parseStatsPeriod('5s')).toEqual({period: '5', periodLength: 's'});
+    expect(parseStatsPeriod('11h')).toEqual({period: '11', periodLength: 'h'});
+    expect(parseStatsPeriod('14d')).toEqual({period: '14', periodLength: 'd'});
+    expect(parseStatsPeriod('24w')).toEqual({period: '24', periodLength: 'w'});
+    expect(parseStatsPeriod('42m')).toEqual({period: '42', periodLength: 'm'});
+  });
+
+  it('should return default statsPeriod if it is not provided or is invalid', function() {
+    expect(parseStatsPeriod('invalid')).toEqual(undefined);
+    expect(parseStatsPeriod('24f')).toEqual(undefined);
+    expect(parseStatsPeriod('')).toEqual(undefined);
+    expect(parseStatsPeriod('24')).toEqual({period: '24', periodLength: 's'});
+  });
+});
diff --git a/tests/js/spec/utils/dates.spec.jsx b/tests/js/spec/utils/dates.spec.jsx
index 7aa2a296d7..6f231405e0 100644
--- a/tests/js/spec/utils/dates.spec.jsx
+++ b/tests/js/spec/utils/dates.spec.jsx
@@ -45,5 +45,11 @@ describe('utils.dates', function() {
       expect(parsePeriodToHours('1d')).toBe(24);
       expect(parsePeriodToHours('2w')).toBe(336);
     });
+
+    it('handle invalid statsPeriod', function() {
+      expect(parsePeriodToHours('24')).toBe(24 / 3600);
+      expect(parsePeriodToHours('')).toBe(-1);
+      expect(parsePeriodToHours('24x')).toBe(-1);
+    });
   });
 });
