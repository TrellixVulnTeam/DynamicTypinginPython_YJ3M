commit 384a2ddb10da39c32d0532666aded52132421afe
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 6 11:29:32 2017 -0700

    cli: correct managed test in merge_users
    
    Fixes SENTRY-3VB

diff --git a/src/sentry/management/commands/merge_users.py b/src/sentry/management/commands/merge_users.py
index 856125fc33..0029889c90 100644
--- a/src/sentry/management/commands/merge_users.py
+++ b/src/sentry/management/commands/merge_users.py
@@ -55,16 +55,19 @@ class Command(BaseCommand):
         noinput = options.get('noinput', False)
 
         if options.get('organization'):
-            organization = Organization.objects.get_from_cache(slug=options['organization'])
+            organization = Organization.objects.get_from_cache(
+                slug=options['organization'])
         else:
             organization = None
 
-        assert not (usernames and organization), 'Must specify either username(s) or organization'
+        assert not (
+            usernames and organization), 'Must specify either username(s) or organization'
 
         unique_users = []
         if usernames:
             unique_users.append(list(User.objects.filter(
-                reduce(operator.or_, [Q(username__iexact=u) | Q(email__iexact=u) for u in usernames]),
+                reduce(operator.or_, [Q(username__iexact=u) | Q(
+                    email__iexact=u) for u in usernames]),
             )))
         elif organization:
             unique_users = self._get_organization_user_sets(organization)
@@ -74,7 +77,8 @@ class Command(BaseCommand):
         unique_users = [u for u in unique_users if len(u) > 1]
 
         if not unique_users:
-            sys.stdout.write("No users with duplicate accounts found for merging.\n")
+            sys.stdout.write(
+                "No users with duplicate accounts found for merging.\n")
             return
 
         sys.stdout.write(
@@ -82,7 +86,8 @@ class Command(BaseCommand):
                 len(unique_users)))
 
         for user_list in unique_users:
-            user_list.sort(key=lambda x: (x.is_superuser, not x.managed, x.date_joined))
+            user_list.sort(key=lambda x: (
+                x.is_superuser, not x.is_managed, x.date_joined))
 
             primary_user = user_list[0]
             if not noinput and not self._confirm_merge(primary_user, user_list[1:]):
