commit a765b441c65e63a2b93e3d5e1758ad7d71fac809
Author: Ayesha Omarali <ayesha.omarali@gmail.com>
Date:   Mon Dec 10 12:15:05 2018 -0800

    feat(discover): Split Up Orderby Inputs (#10903)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.jsx
new file mode 100644
index 0000000000..95c10af0e6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/orderby.jsx
@@ -0,0 +1,92 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+import {Flex} from 'grid-emotion';
+
+import {t} from 'app/locale';
+import SelectControl from 'app/components/forms/selectControl';
+import space from 'app/styles/space';
+import {SidebarLabel} from '../styles';
+
+export default class Orderby extends React.Component {
+  static propTypes = {
+    value: PropTypes.string.isRequired,
+    columns: PropTypes.array.isRequired,
+    onChange: PropTypes.func.isRequired,
+    disabled: PropTypes.bool,
+  };
+
+  updateField(field) {
+    const orderby = this.getInternal(this.props.value);
+    orderby.field = field;
+    this.props.onChange(this.getExternal(orderby));
+  }
+
+  updateDirection(direction) {
+    const orderby = this.getInternal(this.props.value);
+    orderby.direction = direction;
+    this.props.onChange(this.getExternal(orderby));
+  }
+
+  /**
+   * @param {Object} value Object containing orderby information
+   * @returns {String}
+   */
+  getExternal(value) {
+    return `${value.direction === 'desc' ? '-' : ''}${value.field}`;
+  }
+
+  /**
+   * @param {String} value String containing orderby information
+   * @returns {Object}
+   */
+  getInternal(value) {
+    const direction = value.startsWith('-') ? 'desc' : 'asc';
+    const field = value.replace(/^-/, '');
+    return {
+      direction,
+      field,
+    };
+  }
+
+  render() {
+    const {disabled, columns, value} = this.props;
+
+    const {direction, field} = this.getInternal(value);
+
+    return (
+      <React.Fragment>
+        <SidebarLabel className="control-label">{t('Order by')}</SidebarLabel>
+        <Flex>
+          <OrderbyField>
+            <SelectControl
+              name="orderbyField"
+              options={columns}
+              value={field}
+              onChange={val => this.updateField(val.value)}
+              disabled={disabled}
+            />
+          </OrderbyField>
+          <OrderbyValue>
+            <SelectControl
+              name="orderbyDirection"
+              options={[{value: 'asc', label: 'asc'}, {value: 'desc', label: 'desc'}]}
+              value={direction}
+              onChange={val => this.updateDirection(val.value)}
+              disabled={disabled}
+            />
+          </OrderbyValue>
+        </Flex>
+      </React.Fragment>
+    );
+  }
+}
+
+const OrderbyField = styled('div')`
+  width: calc(100% / 3 * 2);
+  padding-right: ${space(1)};
+`;
+
+const OrderbyValue = styled('div')`
+  width: calc(100% / 3);
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
index afe1ef77f5..f70216446b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
@@ -11,9 +11,10 @@ import Badge from 'app/components/badge';
 
 import Aggregations from '../aggregations';
 import Conditions from '../conditions';
-import {getOrderByOptions} from '../utils';
+import Orderby from './orderby';
 import {Fieldset, PlaceholderText, SidebarLabel} from '../styles';
 import {NON_CONDITIONS_FIELDS} from '../data';
+import {getOrderbyFields} from '../utils';
 
 export default class QueryFields extends React.Component {
   static propTypes = {
@@ -120,16 +121,10 @@ export default class QueryFields extends React.Component {
           />
         </Fieldset>
         <Fieldset>
-          <SidebarLabel htmlFor="orderby" className="control-label">
-            {t('Order by')}
-          </SidebarLabel>
-          <SelectControl
-            name="orderby"
-            label={t('Order By')}
-            placeholder={<PlaceholderText>{t('Order by...')}</PlaceholderText>}
-            options={getOrderByOptions(queryBuilder)}
+          <Orderby
             value={currentQuery.orderby}
-            onChange={val => onUpdateField('orderby', val.value)}
+            columns={getOrderbyFields(queryBuilder)}
+            onChange={val => onUpdateField('orderby', val)}
             disabled={isLoading}
           />
         </Fieldset>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 588cc33eb4..a9099e2ec3 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -39,7 +39,7 @@ export function getQueryStringFromQuery(query) {
   return `?${queryProperties.join('&')}`;
 }
 
-export function getOrderByOptions(queryBuilder) {
+export function getOrderbyFields(queryBuilder) {
   const columns = queryBuilder.getColumns();
   const query = queryBuilder.getInternal();
 
@@ -65,22 +65,14 @@ export function getOrderByOptions(queryBuilder) {
       return acc;
     }
 
-    return [
-      ...acc,
-      {value: name, label: `${name} asc`},
-      {value: `-${name}`, label: `${name} desc`},
-    ];
+    return [...acc, {value: name, label: name}];
   }, []);
 
   const aggregationOptions = [
     // Ensure aggregations are unique (since users might input duplicates)
     ...new Set(validAggregations.map(aggregation => aggregation[2])),
   ].reduce((acc, agg) => {
-    return [
-      ...acc,
-      {value: agg, label: `${agg} asc`},
-      {value: `-${agg}`, label: `${agg} desc`},
-    ];
+    return [...acc, {value: agg, label: agg}];
   }, []);
 
   return [...columnOptions, ...aggregationOptions];
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 131940405e..9e7dc6fe5d 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -302,7 +302,6 @@ describe('Discover', function() {
         wrapper.instance().updateField('fields', ['message']);
         wrapper.instance().updateField('orderby', 'id');
         wrapper.instance().updateField('limit', 5);
-
         wrapper.instance().runQuery();
         wrapper.update();
       });
@@ -326,11 +325,15 @@ describe('Discover', function() {
       });
 
       it('resets "orderby"', function() {
-        expect(wrapper.find('SelectControl[name="orderby"]').text()).toBe('id asc');
+        expect(wrapper.find('SelectControl[name="orderbyDirection"]').text()).toBe('asc');
+        expect(wrapper.find('SelectControl[name="orderbyField"]').text()).toBe('id');
         wrapper.instance().reset();
         wrapper.update();
-        expect(wrapper.find('SelectControl[name="orderby"]').text()).toBe(
-          'timestamp desc'
+        expect(wrapper.find('SelectControl[name="orderbyDirection"]').text()).toBe(
+          'desc'
+        );
+        expect(wrapper.find('SelectControl[name="orderbyField"]').text()).toBe(
+          'timestamp'
         );
       });
 
diff --git a/tests/js/spec/views/organizationDiscover/sidebar/orderBy.spec.jsx b/tests/js/spec/views/organizationDiscover/sidebar/orderBy.spec.jsx
new file mode 100644
index 0000000000..ea12481e89
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/sidebar/orderBy.spec.jsx
@@ -0,0 +1,69 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import Orderby from 'app/views/organizationDiscover/sidebar/orderby';
+
+describe('orderBy', function() {
+  let organization, project, wrapper, onChangeMock, columns;
+  beforeEach(function() {
+    project = TestStubs.Project();
+    organization = TestStubs.Organization({projects: [project]});
+    onChangeMock = jest.fn();
+    columns = [{value: 'timestamp', label: 'timestamp'}, {value: 'id', label: 'id'}];
+
+    wrapper = mount(
+      <Orderby value={'-timestamp'} columns={columns} onChange={onChangeMock} />,
+      TestStubs.routerContext([{organization}])
+    );
+  });
+
+  it('Renders correct initial value options', function() {
+    expect(
+      wrapper
+        .find('StyledSelect')
+        .at(0)
+        .prop('options')
+    ).toEqual([{value: 'timestamp', label: 'timestamp'}, {value: 'id', label: 'id'}]);
+
+    expect(
+      wrapper
+        .find('StyledSelect')
+        .at(1)
+        .prop('options')
+    ).toEqual([{value: 'asc', label: 'asc'}, {value: 'desc', label: 'desc'}]);
+
+    expect(
+      wrapper
+        .find('StyledSelect')
+        .at(0)
+        .props().value
+    ).toEqual('timestamp');
+
+    expect(
+      wrapper
+        .find('StyledSelect')
+        .at(1)
+        .props().value
+    ).toEqual('desc');
+  });
+
+  it('Changes field, preserves direction', function() {
+    wrapper
+      .find('input')
+      .at(1)
+      .simulate('change', {target: {value: 'id'}})
+      .simulate('keyDown', {key: 'Enter', keyCode: 13});
+
+    expect(onChangeMock).toHaveBeenCalledWith('-id');
+  });
+
+  it('Changes direction, preserves field', function() {
+    wrapper
+      .find('input')
+      .at(3)
+      .simulate('change', {target: {value: 'asc'}})
+      .simulate('keyDown', {key: 'Enter', keyCode: 13});
+
+    expect(onChangeMock).toHaveBeenCalledWith('timestamp');
+  });
+});
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index 81e93c0a7e..1595e59302 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -1,7 +1,7 @@
 import {
   getQueryFromQueryString,
   getQueryStringFromQuery,
-  getOrderByOptions,
+  getOrderbyFields,
   parseSavedQuery,
   generateQueryName,
 } from 'app/views/organizationDiscover/utils';
@@ -46,37 +46,32 @@ describe('getQueryStringFromQuery()', function() {
   });
 });
 
-describe('getOrderByOptions()', function() {
+describe('getOrderbyFields()', function() {
   const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
   const queryBuilder = createQueryBuilder({}, organization);
 
   it('allows ordering by all fields when no aggregations except project.name and issue.id', function() {
-    expect(getOrderByOptions(queryBuilder)).toHaveLength((COLUMNS.length - 2) * 2);
+    expect(getOrderbyFields(queryBuilder)).toHaveLength(COLUMNS.length - 2);
   });
 
   it('allows ordering by aggregations with aggregations and no fields', function() {
     queryBuilder.updateField('fields', []);
     queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
 
-    const options = getOrderByOptions(queryBuilder);
-    expect(options).toHaveLength(2);
-    expect(options).toEqual([
-      {label: 'count asc', value: 'count'},
-      {label: 'count desc', value: '-count'},
-    ]);
+    const options = getOrderbyFields(queryBuilder);
+    expect(options).toHaveLength(1);
+    expect(options).toEqual([{label: 'count', value: 'count'}]);
   });
 
   it('allows ordering by aggregations and fields', function() {
     queryBuilder.updateField('fields', ['message']);
     queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
 
-    const options = getOrderByOptions(queryBuilder);
-    expect(options).toHaveLength(4);
+    const options = getOrderbyFields(queryBuilder);
+    expect(options).toHaveLength(2);
     expect(options).toEqual([
-      {label: 'message asc', value: 'message'},
-      {label: 'message desc', value: '-message'},
-      {label: 'count asc', value: 'count'},
-      {label: 'count desc', value: '-count'},
+      {label: 'message', value: 'message'},
+      {label: 'count', value: 'count'},
     ]);
   });
 });
