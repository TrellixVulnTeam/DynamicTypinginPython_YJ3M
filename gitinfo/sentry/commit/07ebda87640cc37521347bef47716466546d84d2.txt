commit 07ebda87640cc37521347bef47716466546d84d2
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 31 18:17:12 2010 -0700

    Real time effects are now implemented. Fixed ordering and spacing on URLs/Servers on details.

diff --git a/example_project/settings.py b/example_project/settings.py
index 3a17a9b133..c4cd312dc7 100644
--- a/example_project/settings.py
+++ b/example_project/settings.py
@@ -2,7 +2,7 @@ import os.path
 
 # Django settings for example_project project.
 
-DEBUG = True
+DEBUG = False
 TEMPLATE_DEBUG = True
 
 ADMINS = (
@@ -102,4 +102,6 @@ INSTALLED_APPS = (
 )
 
 import logging
-logging.basicConfig(level=logging.DEBUG)
\ No newline at end of file
+logging.basicConfig(level=logging.DEBUG)
+
+SENTRY_THRASHING_TIMEOUT = 0
\ No newline at end of file
diff --git a/sentry/helpers.py b/sentry/helpers.py
index d0c5cbd374..07700de7f2 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -96,6 +96,13 @@ def get_installed_apps():
         out.add(app.split('.')[0])
     return out
 
+def varmap(func, var):
+    if isinstance(var, dict):
+        return dict((k, varmap(func, v)) for k, v in var.iteritems())
+    elif isinstance(var, (list, tuple)):
+        return [varmap(func, f) for f in var]
+    else:
+        return func(var)
 
 UNDEFINED = object()
 
@@ -186,12 +193,12 @@ TECHNICAL_500_TEMPLATE = """
                 </tr>
               </thead>
               <tbody>
-                {% for var in frame.vars|dictsort:"0" %}
-                  <tr>
-                    <td>{{ var.0|escape }}</td>
-                    <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
-                  </tr>
-                {% endfor %}
+              {% for var in frame.vars|dictsort:"0" %}
+                <tr>
+                  <td>{{ var.0|escape }}</td>
+                  <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
+                </tr>
+              {% endfor %}
               </tbody>
             </table>
           {% endif %}
diff --git a/sentry/manager.py b/sentry/manager.py
index a024b68cca..cf01337f0a 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -16,7 +16,7 @@ from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
 from sentry import settings
-from sentry.helpers import construct_checksum
+from sentry.helpers import construct_checksum, varmap
 
 assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
@@ -45,13 +45,12 @@ class DBLogManager(models.Manager):
             data['url'] = url
             url = url[:URL_MAX_LENGTH]
 
-        defaults['server_name'] = socket.gethostname()
-
         instance = Message(
             view=view,
             logger=logger_name,
             data=data,
             url=url,
+            server_name=socket.gethostname(),
             **defaults
         )
         instance.checksum = construct_checksum(instance)
@@ -70,7 +69,7 @@ class DBLogManager(models.Manager):
                 defaults=defaults
             )
             if not created:
-                GroupedMessage.objects.filter(pk=batch.pk).update(
+                GroupedMessage.objects.filter(pk=group.pk).update(
                     times_seen=models.F('times_seen') + 1,
                     status=0,
                     last_seen=datetime.datetime.now(),
@@ -142,8 +141,14 @@ class DBLogManager(models.Manager):
                     f = '(Error decoding value)'
             return f
 
+        def shorten(var):
+            var = to_unicode(var)
+            if len(var) > 500:
+                var = var[:500] + '...'
+            return var
+
         reporter = ExceptionReporter(None, exc_type, exc_value, traceback)
-        frames = reporter.get_traceback_frames()
+        frames = varmap(shorten, reporter.get_traceback_frames)
 
         data = kwargs.pop('data', {}) or {}
         data['__sentry__'] = {
diff --git a/sentry/media/scripts/global.js b/sentry/media/scripts/global.js
index 9520aad0da..838da0131f 100644
--- a/sentry/media/scripts/global.js
+++ b/sentry/media/scripts/global.js
@@ -55,5 +55,42 @@ $.fn.setAllToMaxHeight = function(){
 }
 
 $(document).ready(function(){
-	$("div.column").setAllToMaxHeight();
-});
\ No newline at end of file
+	//$("div.column").setAllToMaxHeight();
+	setTimeout('sentryRefresh()', 3000);
+});
+
+function sentryRefresh(){
+    $.ajax({
+      url: './',
+      dataType: 'json',
+      data: {
+          logger: '{{ logger }}',
+          server_name: '{{ server_name }}',
+          level: '{{ level }}'
+      },
+      success: function(groups){
+          // $('#message_list').each(function(){
+          //               $(this).removeClass('fresh');
+          //           })
+          for (var i=groups.length-1, el, row; (el=groups[i]); i--) {
+              var id = el[0];
+              var data = el[1];
+              if (row = $('#group_' + id)) {
+                  row.remove();
+                  $('#message_list').prepend(data.html);
+                  if (row.attr('data-sentry-count') != data.count) {
+                      $('#group_' + el[0]).addClass('fresh');
+                  }
+              } else {
+                  $('#message_list').prepend(data.html);
+                  $('#group_' + el[0]).addClass('fresh')
+              }
+          }
+          $('#message_list .fresh').css('background-color', '#ccc').animate({backgroundColor: '#fff'}, 1200, function() { 
+                $(this).removeClass('fresh');
+          });
+           
+      }
+    });
+    setTimeout('sentryRefresh()', 3000);
+}
\ No newline at end of file
diff --git a/sentry/media/styles/global.css b/sentry/media/styles/global.css
index 7b132176a2..721ca2dc35 100644
--- a/sentry/media/styles/global.css
+++ b/sentry/media/styles/global.css
@@ -139,6 +139,7 @@ pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; ma
 
 /* message details */
 .server-list, .url-list, .logger-list, .level-list { list-style: none; margin-left: 5px; }
+.server-list li, .url-list li, .logger-list li, .level-list li { padding-bottom: 5px; }
 .filter-list { margin-left: 0; text-transform: lowercase; }
 .filter-list li a { 
     display: block; padding: 10px; text-decoration: none; 
diff --git a/sentry/templates/sentry/group.html b/sentry/templates/sentry/group.html
index 51a4565da0..8a6ca96677 100644
--- a/sentry/templates/sentry/group.html
+++ b/sentry/templates/sentry/group.html
@@ -11,6 +11,7 @@
 			<h2>Message Details</h2>
 		</div>
 	</div> 
+	
 	<div id="content">
 		<div class="container">
 			<div id="sidebar">
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index fa32c404b8..7e164d5839 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -8,15 +8,13 @@
 		<meta name="robots" content="NONE,NOARCHIVE">
 		<title>{% block title %}Django Sentry{% endblock %}</title> 
 		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
-		<script type="text/javascript" src="{% url sentry-media "scripts/global.js" %}"></script>
-		<style>
-		@import '{% url sentry-media "styles/global.css" %}';
-		</style>
+		<script type="text/javascript" src="{% url sentry-media "scripts/jquery.animate-colors-min.js" %}"></script>		
+		<script type="text/javascript" src="{% url sentry-media "scripts/global.js" %}"></script>		
+		<style type="text/css">@import '{% url sentry-media "styles/global.css" %}';</style>
 	</head> 
 	
 	<body> 
-		{% block body %}
-		
+		{% block body %}		
 		<div id="header"> 
 			<div class="container">
 				<h1><a href="{% url sentry %}"><span class="sentry-logo" title="Django Sentry">Django Sentry</span></a></h1>
@@ -59,10 +57,10 @@
 				</div>
 
 				<div id="body" class="with-sidebar column">
-					{% paginate message_list from request as message_list per_page 25 %}
+					{% paginate message_list from request as message_list per_page 15 %}
 					{% if message_list.objects %}
 						{{ message_list.paging }}
-						<ul class="messages">
+						<ul class="messages" id="message_list">
 							{% for group, priority in message_list.objects|with_priority %}
 								{% include "sentry/partial/_group.html" %}
 							{% endfor %}
diff --git a/sentry/templates/sentry/partial/_group.html b/sentry/templates/sentry/partial/_group.html
index 8df55fa061..6056d7d609 100644
--- a/sentry/templates/sentry/partial/_group.html
+++ b/sentry/templates/sentry/partial/_group.html
@@ -1,4 +1,4 @@
-<li class="{% cycle 'row1' 'row2' %} level-{{ group.level }}{% if priority %} priority-{{ priority }}{% endif %}" onclick="window.location.href='{% url sentry-group group.pk %}'" id="group_{{ group.pk }}">
+<li class="{% cycle 'row1' 'row2' %} level-{{ group.level }}{% if priority %} priority-{{ priority }}{% endif %}" onclick="window.location.href='{% url sentry-group group.pk %}'" id="group_{{ group.pk }}" data-sentry-count="{{ group.times_seen }}">
 	<span class="count">{{ group.times_seen }}</span>
 	<h3><a href="{% url sentry-group group.pk %}">{% if group.view %}{{ group.view }}{% else %}{{ group.message }}{% endif %}</a></h3>
 	<span class="last_seen">{{ group.last_seen|timesince }} ago</span>
diff --git a/sentry/views.py b/sentry/views.py
index 4c5717bf72..78d9812d13 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -1,11 +1,15 @@
 # TODO: login
 from django.db.models import Count
+from django.http import HttpResponse
 from django.shortcuts import render_to_response
+from django.template.loader import render_to_string
+from django.utils import simplejson
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
 from sentry.helpers import FakeRequest, ImprovedExceptionReporter
 from sentry.models import GroupedMessage, Message, LOG_LEVELS
+from sentry.templatetags.sentry_helpers import with_priority
 
 from math import log
 from pygooglechart import SimpleLineChart, Axis
@@ -59,6 +63,18 @@ def index(request):
         message_list = message_list.filter(message_set__server_name=server_name).distinct()
         chart_qs = chart_qs.filter(server_name=server_name)
 
+    if request.is_ajax():
+        # Returns the first page's worth of groups
+        data = simplejson.dumps([
+            (m.pk, {
+                'html': render_to_string('sentry/partial/_group.html', {'group': m, 'priority': p}),
+                'count': m.times_seen,
+                'priority': p,
+            }) for m, p in with_priority(message_list[0:15])])
+        response = HttpResponse(data)
+        response['Content-Type'] = 'application/json'
+        return response
+
     rows = dict(chart_qs)
     if rows:
         max_y = max(rows.values())
@@ -86,7 +102,6 @@ def group(request, group_id):
     if '__sentry__' in obj.data:
         module, args, frames = obj.data['__sentry__']['exc']
         obj.class_name = str(obj.class_name)
-        
         # We fake the exception class due to many issues with imports/builtins/etc
         exc_type = type(obj.class_name, (Exception,), {})
         exc_value = exc_type(obj.message)
@@ -110,9 +125,9 @@ def group(request, group_id):
     else:
         traceback = mark_safe('<pre>%s</pre>' % (group.traceback,))
     
-    unique_urls = message_list.filter(url__isnull=False).values_list('url', 'logger', 'view', 'checksum').annotate(times_seen=Count('url')).values('url', 'times_seen')
+    unique_urls = message_list.filter(url__isnull=False).values_list('url', 'logger', 'view', 'checksum').annotate(times_seen=Count('url')).values('url', 'times_seen').order_by('-times_seen')
     
-    unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen')
+    unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen').order_by('-times_seen')
     
     today = datetime.datetime.now()
 
