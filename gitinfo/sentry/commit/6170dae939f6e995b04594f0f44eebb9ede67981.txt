commit 6170dae939f6e995b04594f0f44eebb9ede67981
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Fri Oct 26 14:19:42 2018 -0700

    feat(ui): Add ability to render 400 error messages to AsyncComponent

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index fc948bbb14..26d2d654d6 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -50,6 +50,9 @@ export default class AsyncComponent extends React.Component {
   // eslint-disable-next-line react/sort-comp
   shouldReloadOnVisible = false;
 
+  // should `renderError` render the `detail` attribute of a 400 error
+  shouldRenderBadRequests = false;
+
   constructor(props, context) {
     super(props, context);
 
@@ -165,7 +168,6 @@ export default class AsyncComponent extends React.Component {
           if (options.allowError && options.allowError(error)) {
             error = null;
           }
-
           this.handleError(error, [stateKey, endpoint, params, options]);
         },
       });
@@ -301,6 +303,19 @@ export default class AsyncComponent extends React.Component {
       return <PermissionDenied />;
     }
 
+    if (this.shouldRenderBadRequests) {
+      let badRequests = Object.values(this.state.errors)
+        .filter(
+          resp =>
+            resp && resp.status === 400 && resp.responseJSON && resp.responseJSON.detail
+        )
+        .map(resp => resp.responseJSON.detail);
+
+      if (badRequests.length) {
+        return <LoadingError message={badRequests.join('\n')} />;
+      }
+    }
+
     return (
       <RouteError
         error={error}
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index f3dff66c08..90b1ce642c 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -36,6 +36,8 @@ class ExternalIssueForm extends AsyncComponent {
     onSubmitSuccess: PropTypes.func.isRequired,
   };
 
+  shouldRenderBadRequests = true;
+
   getEndpoints() {
     let {action, group, integration} = this.props;
     return [
diff --git a/tests/js/setup.js b/tests/js/setup.js
index e68814efb3..8fc00d9d97 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -101,6 +101,8 @@ jest.mock('echarts-for-react/lib/core', () => {
 });
 
 jest.mock('app/utils/sdk', () => ({
+  captureBreadcrumb: jest.fn(),
+  addBreadcrumb: jest.fn(),
   captureMessage: jest.fn(),
   captureException: jest.fn(),
   showReportDialog: jest.fn(),
diff --git a/tests/js/spec/components/asyncComponent.spec.jsx b/tests/js/spec/components/asyncComponent.spec.jsx
new file mode 100644
index 0000000000..4b0ae9d9a8
--- /dev/null
+++ b/tests/js/spec/components/asyncComponent.spec.jsx
@@ -0,0 +1,58 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+import {Client} from 'app/api';
+
+import AsyncComponent from 'app/components/asyncComponent';
+
+describe('AsyncComponent', function() {
+  class TestAsyncComponent extends AsyncComponent {
+    shouldRenderBadRequests = true;
+
+    constructor(props) {
+      super(props);
+      this.state = {};
+    }
+
+    getEndpoints() {
+      return [['data', '/some/path/to/something/']];
+    }
+
+    renderBody() {
+      return <div>{this.state.data.message}</div>;
+    }
+  }
+
+  it('renders on successful request', function() {
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/some/path/to/something/',
+      method: 'GET',
+      body: {
+        message: 'hi',
+      },
+    });
+    let wrapper = shallow(<TestAsyncComponent />);
+    expect(wrapper.find('div')).toHaveLength(1);
+    expect(wrapper.find('div').text()).toEqual('hi');
+  });
+
+  it('renders error message', function() {
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/some/path/to/something/',
+      method: 'GET',
+      body: {
+        detail: 'oops there was a problem',
+      },
+      statusCode: 400,
+    });
+    let wrapper = mount(<TestAsyncComponent />);
+    expect(wrapper.find('LoadingError')).toHaveLength(1);
+    expect(
+      wrapper
+        .find('LoadingError')
+        .find('p')
+        .text()
+    ).toEqual('oops there was a problem');
+  });
+});
