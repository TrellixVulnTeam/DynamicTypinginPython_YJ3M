commit b6d781df4d9e866a833d3363ab34290592addf78
Author: Danny Lee <dlee@sentry.io>
Date:   Thu Jun 11 10:18:18 2020 -0700

    feat(perf): Reduces calls from VersionHoverCard (#19131)

diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.tsx b/src/sentry/static/sentry/app/components/versionHoverCard.tsx
index f33c3ec591..29b2b74e4c 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.tsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.tsx
@@ -12,84 +12,39 @@ import RepoLabel from 'app/components/repoLabel';
 import TimeSince from 'app/components/timeSince';
 import space from 'app/styles/space';
 import withApi from 'app/utils/withApi';
+import withRelease from 'app/utils/withRelease';
+import withRepositories from 'app/utils/withRepositories';
 import Clipboard from 'app/components/clipboard';
 import {IconCopy} from 'app/icons';
 import Version from 'app/components/version';
 import {Client} from 'app/api';
-import {Release, Deploy} from 'app/types';
+import {Deploy, Release, Repository} from 'app/types';
 
 type Props = {
   api: Client;
   orgSlug: string;
   projectSlug: string;
   releaseVersion: string;
+
+  release?: Release;
+  releaseLoading?: boolean;
+  releaseError?: Error;
+  deploys?: Array<Deploy>;
+  deploysLoading?: boolean;
+  deploysError?: Error;
+  repositories?: Array<Repository>;
+  repositoriesLoading?: boolean;
+  repositoriesError?: Error;
 };
 type State = {
-  loading: boolean;
-  error: boolean;
-  data: {};
   visible: boolean;
-  hasRepos: boolean;
-  deploys: Deploy[];
-  release: Release | null;
 };
 
 class VersionHoverCard extends React.Component<Props, State> {
   state: State = {
-    loading: true,
-    error: false,
-    data: {},
     visible: false,
-    hasRepos: false,
-    deploys: [],
-    release: null,
   };
 
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  async fetchData() {
-    const {api, orgSlug, projectSlug, releaseVersion} = this.props;
-
-    // releases
-    const releasePath = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(
-      releaseVersion
-    )}/`;
-    const releaseRequest = api.requestPromise(releasePath, {
-      method: 'GET',
-    });
-
-    // repos
-    const repoRequest = api.requestPromise(`/organizations/${orgSlug}/repos/`, {
-      method: 'GET',
-    });
-
-    //deploys
-    const deployPath = `/organizations/${orgSlug}/releases/${encodeURIComponent(
-      releaseVersion
-    )}/deploys/`;
-    const deployRequest = api.requestPromise(deployPath, {
-      method: 'GET',
-    });
-
-    try {
-      const [release, repos, deploys] = await Promise.all([
-        releaseRequest,
-        repoRequest,
-        deployRequest,
-      ]);
-      this.setState({
-        release,
-        deploys,
-        hasRepos: repos.length > 0,
-        loading: false,
-      });
-    } catch (e) {
-      this.setState({error: true});
-    }
-  }
-
   toggleHovercard() {
     this.setState({
       visible: true,
@@ -117,9 +72,8 @@ class VersionHoverCard extends React.Component<Props, State> {
   }
 
   getBody() {
-    const {releaseVersion} = this.props;
-    const {release, deploys} = this.state;
-    if (!release) {
+    const {releaseVersion, release, deploys} = this.props;
+    if (release === undefined || deploys === undefined) {
       return {header: null, body: null};
     }
 
@@ -200,10 +154,23 @@ class VersionHoverCard extends React.Component<Props, State> {
   }
 
   render() {
-    const {loading, error, hasRepos, release} = this.state;
+    const {
+      deploysLoading,
+      deploysError,
+      release,
+      releaseLoading,
+      releaseError,
+      repositories,
+      repositoriesLoading,
+      repositoriesError,
+    } = this.props;
     let header: React.ReactNode = null;
     let body: React.ReactNode = null;
 
+    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);
+    const error = deploysError ?? releaseError ?? repositoriesError;
+    const hasRepos = repositories && repositories.length > 0;
+
     if (loading) {
       body = <LoadingIndicator mini />;
     } else if (error) {
@@ -224,8 +191,7 @@ class VersionHoverCard extends React.Component<Props, State> {
 }
 
 export {VersionHoverCard};
-
-export default withApi(VersionHoverCard);
+export default withApi(withRelease(withRepositories(VersionHoverCard)));
 
 const ConnectRepo = styled('div')`
   padding: ${space(2)};
diff --git a/src/sentry/static/sentry/app/utils/withRelease.tsx b/src/sentry/static/sentry/app/utils/withRelease.tsx
index f49ff21971..ec7a932d1c 100644
--- a/src/sentry/static/sentry/app/utils/withRelease.tsx
+++ b/src/sentry/static/sentry/app/utils/withRelease.tsx
@@ -24,7 +24,9 @@ type InjectedProps = {
   deploysError?: Error;
 };
 
-const withRelease = <P extends InjectedProps>(WrappedComponent: React.ComponentType<P>) =>
+const withRelease = <P extends DependentProps>(
+  WrappedComponent: React.ComponentType<P>
+) =>
   createReactClass<
     Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,
     InjectedProps
diff --git a/src/sentry/static/sentry/app/utils/withRepositories.tsx b/src/sentry/static/sentry/app/utils/withRepositories.tsx
index f757e025bc..7981c6d1e8 100644
--- a/src/sentry/static/sentry/app/utils/withRepositories.tsx
+++ b/src/sentry/static/sentry/app/utils/withRepositories.tsx
@@ -19,7 +19,7 @@ type InjectedProps = {
   repositoriesError: Error | undefined;
 };
 
-const withRepositories = <P extends InjectedProps>(
+const withRepositories = <P extends DependentProps>(
   WrappedComponent: React.ComponentType<P>
 ) =>
   createReactClass<
