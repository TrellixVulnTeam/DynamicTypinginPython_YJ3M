commit 19eb0b906cad24de61352dc9edfbd3b4d2ab1c6d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 8 12:41:31 2018 -0800

    feat(org-events): Add styled multi environment selector (#10445)

diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
index 4bb155548b..1a058b7f8f 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -1,121 +1,210 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from 'react-emotion';
+import styled, {css} from 'react-emotion';
 
 import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
 import {t} from 'app/locale';
-import space from 'app/styles/space';
-import Button from 'app/components/button';
-import DropdownMenu from 'app/components/dropdownMenu';
+import CheckboxFancy from 'app/components/checkboxFancy';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import HeaderItem from 'app/components/organizations/headerItem';
+import Highlight from 'app/components/highlight';
+import InlineSvg from 'app/components/inlineSvg';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import MultiSelectField from 'app/components/forms/multiSelectField';
 import SentryTypes from 'app/sentryTypes';
+import theme from 'app/utils/theme';
 import withApi from 'app/utils/withApi';
 
-import HeaderItem from 'app/components/organizations/headerItem';
-import InlineSvg from 'app/components/inlineSvg';
+const rootClassName = css`
+  position: relative;
+  display: flex;
+  left: -1px;
+`;
 
 /**
  * Environment Selector
+ *
+ * Note we only fetch environments when this component is mounted
  */
 class MultipleEnvironmentSelector extends React.PureComponent {
   static propTypes = {
-    onChange: PropTypes.func,
-    onUpdate: PropTypes.func,
+    // Handler whenever selector values are changed
+    onChange: PropTypes.func.isRequired,
+
     organization: SentryTypes.Organization,
 
     // This component must be controlled using a value array
     value: PropTypes.array,
+
+    // When menu is closed
+    onUpdate: PropTypes.func,
   };
 
-  constructor() {
-    super();
+  constructor(props) {
+    super(props);
     this.state = {
       isOpen: false,
+      selectedEnvs: new Set(props.value),
     };
   }
 
-  handleUpdate = actions => {
-    let {value, onUpdate} = this.props;
+  /**
+   * If value in state is different than value from props, propagate changes
+   */
+  doChange = (value, e) => {
+    const {onChange} = this.props;
+
+    onChange(value, e);
+  };
+
+  /**
+   * Checks if "onUpdate" is callable. Only calls if there are changes
+   */
+  doUpdate = () => {
+    const {onUpdate} = this.props;
+
+    if (onUpdate) {
+      onUpdate();
+    }
+  };
+
+  handleOpenMenu = () => {
+    this.setState({isOpen: true});
+  };
+
+  handleCloseMenu = () => {
+    this.handleUpdate();
+  };
+
+  /**
+   * Calls "onUpdate" callback and closes the dropdown menu
+   */
+  handleUpdate = () => {
     this.setState(
       {
         isOpen: false,
       },
-      () => {
-        if (typeof onUpdate === 'function') {
-          onUpdate(value);
-        }
-      }
+      this.doUpdate
     );
   };
 
+  /**
+   * Toggle selected state of an environment
+   */
+  toggleSelected(env, e) {
+    this.setState(state => {
+      const selectedEnvs = new Set(state.selectedEnvs);
+
+      if (selectedEnvs.has(env.name)) {
+        selectedEnvs.delete(env.name);
+      } else {
+        selectedEnvs.add(env.name);
+      }
+
+      this.doChange(Array.from(selectedEnvs.values()), e);
+
+      return {
+        selectedEnvs,
+      };
+    });
+  }
+
+  /**
+   * Clears all selected environments and updates
+   */
   handleClear = () => {
-    let {onChange, onUpdate} = this.props;
     this.setState(
       {
-        isOpen: false,
+        selectedEnvs: new Set(),
       },
       () => {
-        onChange([]);
-        if (typeof onUpdate === 'function') {
-          onUpdate([]);
-        }
+        this.doChange([]);
+        this.handleCloseMenu();
       }
     );
   };
 
+  /**
+   * Selects an environment, should close menu and initiate an update
+   */
+  handleSelect = ({value: env}, e) => {
+    this.setState(state => {
+      this.doChange([env.name], e);
+
+      return {
+        selectedEnvs: new Set([env.name]),
+      };
+    }, this.handleCloseMenu);
+  };
+
+  /**
+   * Handler for when an environment is selected by the multiple select component
+   * Does not initiate an "update"
+   */
+  handleMultiSelect = (env, e) => {
+    this.toggleSelected(env, e);
+  };
+
   render() {
-    const {value, onChange, organization} = this.props;
+    const {value, organization} = this.props;
     const summary = value && value.length ? `${value.join(', ')}` : t('All Environments');
 
     return (
-      <DropdownMenu
-        isOpen={this.state.isOpen}
-        onOpen={() => this.setState({isOpen: true})}
-        onClose={() => this.setState({isOpen: false})}
-        keepMenuOpen={true}
-      >
-        {({isOpen, getRootProps, getActorProps, getMenuProps, actions}) => (
-          <div {...getRootProps()} style={{position: 'relative'}}>
-            <StyledHeaderItem
-              icon={<StyledInlineSvg src="icon-window" />}
-              isOpen={isOpen}
-              hasSelected={value && !!value.length}
-              onClear={this.handleClear}
-              {...getActorProps({isStyled: true})}
-            >
-              {summary}
-            </StyledHeaderItem>
-            {isOpen && (
-              <Menu {...getMenuProps({isStyled: true})}>
-                <FetchOrganizationEnvironments organization={organization}>
-                  {({environments}) => (
-                    <React.Fragment>
-                      {environments === null && <LoadingIndicator />}
-                      {!!environments && (
-                        <React.Fragment>
-                          <MultiSelectField
-                            name="environments"
-                            value={value}
-                            choices={environments.map(env => [env.name, env.name])}
-                            onChange={onChange}
-                          />
-                        </React.Fragment>
-                      )}
-                      <Button
-                        data-test-id="update-envs"
-                        onClick={() => this.handleUpdate(actions)}
-                      >
-                        {t('Update')}
-                      </Button>
-                    </React.Fragment>
-                  )}
-                </FetchOrganizationEnvironments>
-              </Menu>
+      <FetchOrganizationEnvironments organization={organization}>
+        {({environments}) => (
+          <StyledDropdownAutoComplete
+            isOpen={this.state.isOpen}
+            alignMenu="left"
+            closeOnSelect={true}
+            blendCorner={false}
+            searchPlaceholder={t('Filter environments')}
+            onSelect={this.handleSelect}
+            onClose={this.handleCloseMenu}
+            maxHeight={500}
+            rootClassName={rootClassName}
+            zIndex={theme.zIndex.dropdown}
+            inputProps={{style: {padding: 8, paddingLeft: 14}}}
+            emptyMessage={
+              environments === null ? <LoadingIndicator /> : t('You have no environments')
+            }
+            noResultsMessage={t('No environments found')}
+            virtualizedHeight={40}
+            emptyHidesInput
+            menuProps={{style: {position: 'relative'}}}
+            items={
+              environments
+                ? environments.map(env => ({
+                    value: env,
+                    searchKey: env.name,
+                    label: ({inputValue}) => (
+                      <EnvironmentSelectorItem
+                        environment={env}
+                        multi={true}
+                        inputValue={inputValue}
+                        isChecked={this.state.selectedEnvs.has(env.name)}
+                        onMultiSelect={this.handleMultiSelect}
+                      />
+                    ),
+                  }))
+                : []
+            }
+          >
+            {({isOpen, getActorProps}) => (
+              <StyledHeaderItem
+                icon={<StyledInlineSvg src="icon-window" />}
+                isOpen={isOpen}
+                hasSelected={value && !!value.length}
+                onClear={this.handleClear}
+                {...getActorProps({
+                  isStyled: true,
+                  onClick: this.handleOpenMenu,
+                })}
+              >
+                {summary}
+              </StyledHeaderItem>
             )}
-          </div>
+          </StyledDropdownAutoComplete>
         )}
-      </DropdownMenu>
+      </FetchOrganizationEnvironments>
     );
   }
 }
@@ -161,15 +250,70 @@ const StyledInlineSvg = styled(InlineSvg)`
   width: 17px;
 `;
 
-const Menu = styled('div')`
+const StyledDropdownAutoComplete = styled(DropdownAutoComplete)`
   background: #fff;
   border: 1px solid ${p => p.theme.borderLight};
   position: absolute;
   top: 100%;
-  left: -1px;
-  min-width: 120%;
-  z-index: ${p => p.theme.zIndex.dropdown};
   box-shadow: ${p => p.theme.dropShadowLight};
-  padding: ${space(2)};
-  border-radius: 0 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius};
+  border-radius: 0;
+  margin-top: 0;
+  min-width: 120%;
+`;
+
+class EnvironmentSelectorItem extends React.PureComponent {
+  static propTypes = {
+    onMultiSelect: PropTypes.func.isRequired,
+    environment: SentryTypes.Environment,
+    inputValue: PropTypes.string,
+    isChecked: PropTypes.bool,
+  };
+
+  handleMultiSelect = e => {
+    const {environment, onMultiSelect} = this.props;
+    onMultiSelect(environment, e);
+  };
+
+  handleClick = e => {
+    e.stopPropagation();
+    this.handleMultiSelect(e);
+  };
+
+  render() {
+    const {environment, inputValue, isChecked} = this.props;
+    return (
+      <EnvironmentRow>
+        <div>
+          <Highlight text={inputValue}>{environment.name}</Highlight>
+        </div>
+
+        <MultiSelectWrapper onClick={this.handleClick}>
+          <MultiSelect checked={isChecked} />
+        </MultiSelectWrapper>
+      </EnvironmentRow>
+    );
+  }
+}
+const FlexY = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+`;
+
+const EnvironmentRow = styled(FlexY)`
+  font-size: 14px;
+  font-weight: 400;
+
+  /* thanks bootstrap? */
+  input[type='checkbox'] {
+    margin: 0;
+  }
+`;
+const MultiSelectWrapper = styled('div')`
+  margin: -8px;
+  padding: 8px;
+`;
+
+const MultiSelect = styled(CheckboxFancy)`
+  flex-shrink: 0;
 `;
diff --git a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
index d857203731..417439c0b8 100644
--- a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
@@ -4,8 +4,6 @@ import {mount} from 'enzyme';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
 
-import {selectByLabel} from '../../../helpers/select';
-
 describe('MultipleEnvironmentSelector', function() {
   let getMock;
   let wrapper;
@@ -26,7 +24,9 @@ describe('MultipleEnvironmentSelector', function() {
     });
     setActiveOrganization(organization);
     await tick();
+  });
 
+  beforeEach(function() {
     wrapper = mount(
       <MultipleEnvironmentSelector
         organization={organization}
@@ -37,37 +37,43 @@ describe('MultipleEnvironmentSelector', function() {
     );
   });
 
-  it('fetches environments only when dropdown opened', async function() {
-    expect(getMock).not.toHaveBeenCalled();
-    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+  it('fetches environments when mounting', async function() {
     expect(getMock).toHaveBeenCalled();
-    await tick();
+    await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     wrapper.update();
     expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(1);
 
     // Close
     wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(0);
+    expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(1);
+
+    wrapper.unmount();
+    expect(getMock).toHaveBeenCalledTimes(1);
   });
 
   it('can select and change environments', async function() {
     wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    await tick();
-    wrapper.update();
 
     // Select all envs
-    envs.forEach(({name}) => {
-      selectByLabel(wrapper, name, {control: true});
+    envs.forEach((env, i) => {
+      wrapper
+        .find('EnvironmentSelectorItem')
+        .at(i)
+        .find('MultiSelect')
+        .simulate('click', {});
     });
     expect(onChange).toHaveBeenCalledTimes(2);
-    expect(onChange).toHaveBeenLastCalledWith(envs.map(({name}) => name));
+    expect(onChange).toHaveBeenLastCalledWith(
+      envs.map(({name}) => name),
+      expect.anything()
+    );
 
     wrapper.setProps({value: envs.map(({name}) => name)});
     wrapper.update();
-    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
-    await tick();
-    wrapper.update();
-
-    expect(onUpdate).toHaveBeenCalledWith(['production', 'staging']);
+    wrapper
+      .find('MultipleEnvironmentSelector')
+      .instance()
+      .doUpdate();
+    expect(onUpdate).toHaveBeenCalledWith();
   });
 });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 70e94c74aa..46c648d7f5 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -4,8 +4,6 @@ import {OrganizationEventsContainer} from 'app/views/organizationEvents';
 import {mount} from 'enzyme';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 
-import {clearValue, selectByLabel} from '../../../helpers/select';
-
 describe('OrganizationEvents', function() {
   let wrapper;
   let router;
@@ -56,12 +54,13 @@ describe('OrganizationEvents', function() {
     await tick();
     wrapper.update();
 
-    selectByLabel(wrapper, 'production', {control: true, name: 'environments'});
+    wrapper
+      .find('EnvironmentSelectorItem')
+      .at(0)
+      .simulate('click');
     // This should update state, but not route or context
     expect(wrapper.state('environment')).toEqual(['production']);
 
-    // Click "Update"
-    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
     expect(router.push).toHaveBeenCalledWith({
       pathname: '/organizations/org-slug/events/',
       query: {
@@ -74,14 +73,23 @@ describe('OrganizationEvents', function() {
     );
 
     // Select a second environment, "staging"
-    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    await tick();
+    await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     wrapper.update();
-    selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
+    wrapper
+      .find('EnvironmentSelectorItem')
+      .at(1)
+      .find('MultiSelect')
+      .simulate('click');
+    // selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
     expect(wrapper.state('environment')).toEqual(['production', 'staging']);
 
-    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
-    expect(router.push).toHaveBeenCalledWith({
+    // close dropdown
+    await wrapper
+      .find('MultipleEnvironmentSelector')
+      .instance()
+      .doUpdate();
+    wrapper.update();
+    expect(router.push).toHaveBeenLastCalledWith({
       pathname: '/organizations/org-slug/events/',
       query: {
         environment: ['production', 'staging'],
@@ -96,9 +104,9 @@ describe('OrganizationEvents', function() {
     wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     await tick();
     wrapper.update();
-    clearValue(wrapper);
+    wrapper.find('MultipleEnvironmentSelector HeaderItem StyledClose').simulate('click');
     expect(wrapper.state('environment')).toEqual([]);
-    wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
+
     expect(wrapper.state('queryValues')).toEqual(
       expect.objectContaining({environment: []})
     );
diff --git a/tests/js/spec/views/organizationHealth/index.spec.jsx b/tests/js/spec/views/organizationHealth/index.spec.jsx
index 5ee29c3626..bcc7696093 100644
--- a/tests/js/spec/views/organizationHealth/index.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/index.spec.jsx
@@ -4,8 +4,6 @@ import {OrganizationHealth} from 'app/views/organizationHealth';
 import {mount} from 'enzyme';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 
-import {selectByLabel} from '../../../helpers/select';
-
 describe('OrganizationHealth', function() {
   let wrapper;
   const router = TestStubs.router({
@@ -45,27 +43,6 @@ describe('OrganizationHealth', function() {
     expect(wrapper.find('HealthWrapper')).toHaveLength(1);
   });
 
-  it('updates router when changing environments', async function() {
-    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
-    await tick();
-    wrapper.update();
-
-    selectByLabel(wrapper, 'production', {control: true, name: 'environments'});
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/health/',
-      query: {
-        environments: ['production'],
-      },
-    });
-    selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
-    expect(router.push).toHaveBeenCalledWith({
-      pathname: '/organizations/org-slug/health/',
-      query: {
-        environments: ['production', 'staging'],
-      },
-    });
-  });
-
   it('updates component state when router is updated', async function() {
     wrapper = mount(
       <OrganizationHealth router={router} organization={organization}>
