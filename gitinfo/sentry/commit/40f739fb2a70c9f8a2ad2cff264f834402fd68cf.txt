commit 40f739fb2a70c9f8a2ad2cff264f834402fd68cf
Author: Mark Story <mark@mark-story.com>
Date:   Fri Mar 22 10:08:04 2019 -0400

    chore(style) Enable curly:all rule in eslint (#12503)
    
    Apply the curly:all fixer. Going forward we'll enforce curlies with
    eslint/prettier

diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 36246cb0d3..3f47a12852 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -54,7 +54,9 @@ class Client {
 
   wrapCallback(id, error) {
     return (...args) => {
-      if (this.hasProjectBeenRenamed(...args)) return;
+      if (this.hasProjectBeenRenamed(...args)) {
+        return;
+      }
       respond(Client.mockAsync, error, ...args);
     };
   }
diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index c23ad5e1ff..fde6abd417 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -8,7 +8,9 @@ export function setActiveEnvironment(environment) {
 export function setActiveEnvironmentName(name) {
   const environment = EnvironmentStore.getByName(name);
 
-  if (!environment) return;
+  if (!environment) {
+    return;
+  }
   setActiveEnvironment(environment);
 }
 
diff --git a/src/sentry/static/sentry/app/actionCreators/formSearch.jsx b/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
index 1bd7f41891..0feb7cf28d 100644
--- a/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/formSearch.jsx
@@ -41,9 +41,13 @@ export function loadSearchMap() {
         const mod = context(key);
 
         // Since we're dynamically importing an entire directly, there could be malformed modules defined?
-        if (!mod) return null;
+        if (!mod) {
+          return null;
+        }
         // Only look for module that have `route` exported
-        if (!mod.route) return null;
+        if (!mod.route) {
+          return null;
+        }
 
         return createSearchMap({
           // `formGroups` can be a default export or a named export :<
diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
index 8397cc5adc..cca5b5f4f3 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
@@ -82,11 +82,15 @@ const prettyFormString = (val, model, fieldName) => {
  */
 
 export function saveOnBlurUndoMessage(change, model, fieldName) {
-  if (!model) return;
+  if (!model) {
+    return;
+  }
 
   const label = model.getDescriptor(fieldName, 'label');
 
-  if (!label) return;
+  if (!label) {
+    return;
+  }
 
   const prettifyValue = val => prettyFormString(val, model, fieldName);
 
@@ -110,14 +114,20 @@ export function saveOnBlurUndoMessage(change, model, fieldName) {
       model,
       id: fieldName,
       undo: () => {
-        if (!model || !fieldName) return;
+        if (!model || !fieldName) {
+          return;
+        }
 
         const oldValue = model.getValue(fieldName);
         const didUndo = model.undo();
         const newValue = model.getValue(fieldName);
 
-        if (!didUndo) return;
-        if (!label) return;
+        if (!didUndo) {
+          return;
+        }
+        if (!label) {
+          return;
+        }
 
         // `saveField` can return null if it can't save
         const saveResult = model.saveField(fieldName, newValue);
diff --git a/src/sentry/static/sentry/app/actionCreators/plugins.jsx b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
index 4f8eb567f1..fe19e0071d 100644
--- a/src/sentry/static/sentry/app/actionCreators/plugins.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
@@ -46,7 +46,9 @@ export function fetchPlugins({orgId, projectId}, options) {
   const path = `/projects/${orgId}/${projectId}/plugins/`;
 
   // Make sure we throttle fetches
-  if (activeFetch[path]) return activeFetch[path];
+  if (activeFetch[path]) {
+    return activeFetch[path];
+  }
 
   PluginActions.fetchAll(options);
   const request = api.requestPromise(path, {
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 3b6fe8b8d6..50ce46a906 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -76,7 +76,9 @@ export class Client {
 
     // XXX(billy): This actually will never happen because we can't intercept the 302
     // jQuery ajax will follow the redirect by default...
-    if (code !== PROJECT_MOVED) return false;
+    if (code !== PROJECT_MOVED) {
+      return false;
+    }
 
     const slug = response?.responseJSON?.detail?.extra?.slug;
 
@@ -98,7 +100,9 @@ export class Client {
       if (req && req.alive) {
         // Check if API response is a 302 -- means project slug was renamed and user
         // needs to be redirected
-        if (this.hasProjectBeenRenamed(...args)) return;
+        if (this.hasProjectBeenRenamed(...args)) {
+          return;
+        }
 
         // Call success callback
         return func.apply(req, args);
@@ -126,17 +130,23 @@ export class Client {
         retryRequest: () => {
           return this.requestPromise(path, requestOptions)
             .then((...args) => {
-              if (typeof requestOptions.success !== 'function') return;
+              if (typeof requestOptions.success !== 'function') {
+                return;
+              }
 
               requestOptions.success(...args);
             })
             .catch((...args) => {
-              if (typeof requestOptions.error !== 'function') return;
+              if (typeof requestOptions.error !== 'function') {
+                return;
+              }
               requestOptions.error(...args);
             });
         },
         onClose: () => {
-          if (typeof requestOptions.error !== 'function') return;
+          if (typeof requestOptions.error !== 'function') {
+            return;
+          }
           // If modal was closed, then forward the original response
           requestOptions.error(response);
         },
@@ -146,7 +156,9 @@ export class Client {
 
     // Call normal error callback
     const errorCb = this.wrapCallback(id, requestOptions.error);
-    if (typeof errorCb !== 'function') return;
+    if (typeof errorCb !== 'function') {
+      return;
+    }
     errorCb(response, ...responseArgs);
   }
 
diff --git a/src/sentry/static/sentry/app/components/activity/feed.jsx b/src/sentry/static/sentry/app/components/activity/feed.jsx
index b7f7d4bf9f..d0fbc818b7 100644
--- a/src/sentry/static/sentry/app/components/activity/feed.jsx
+++ b/src/sentry/static/sentry/app/components/activity/feed.jsx
@@ -86,9 +86,11 @@ class ActivityFeed extends React.Component {
   renderResults() {
     let body;
 
-    if (this.state.loading) body = this.renderLoading();
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.itemList.length > 0) {
+    if (this.state.loading) {
+      body = this.renderLoading();
+    } else if (this.state.error) {
+      body = <LoadingError onRetry={this.fetchData} />;
+    } else if (this.state.itemList.length > 0) {
       body = (
         <div className="activity-container">
           <ul className="activity">
@@ -113,7 +115,9 @@ class ActivityFeed extends React.Component {
           </ul>
         </div>
       );
-    } else body = this.renderEmpty();
+    } else {
+      body = this.renderEmpty();
+    }
 
     return body;
   }
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index a2a975084b..e584fa52a2 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -83,10 +83,14 @@ const NoteInput = createReactClass({
 
     // We can't support this when editing an existing Note since it'll
     // clobber the other storages
-    if (this.state.updating) return;
+    if (this.state.updating) {
+      return;
+    }
 
     // Nothing changed
-    if (this.state.value === nextState.value) return;
+    if (this.state.value === nextState.value) {
+      return;
+    }
 
     try {
       localStorage.setItem(
diff --git a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
index 3b57614959..9160c91c8d 100644
--- a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
@@ -80,7 +80,9 @@ function ToastIndicator({indicator, onDismiss, className, ...props}) {
   const {undo, disableDismiss} = options || {};
   const showUndo = typeof undo === 'function';
   const handleClick = e => {
-    if (disableDismiss) return;
+    if (disableDismiss) {
+      return;
+    }
     if (typeof onDismiss === 'function') {
       onDismiss(indicator, e);
     }
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 26fd18a255..800217a0af 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -48,14 +48,18 @@ const AssigneeSelectorComponent = createReactClass({
   statics: {
     putSessionUserFirst(members) {
       // If session user is in the filtered list of members, put them at the top
-      if (!members) return [];
+      if (!members) {
+        return [];
+      }
 
       const sessionUser = ConfigStore.get('user');
       const sessionUserIndex = members.findIndex(
         member => sessionUser && member.id === sessionUser.id
       );
 
-      if (sessionUserIndex === -1) return members;
+      if (sessionUserIndex === -1) {
+        return members;
+      }
 
       return [members[sessionUserIndex]]
         .concat(members.slice(0, sessionUserIndex))
@@ -253,7 +257,9 @@ const AssigneeSelectorComponent = createReactClass({
             zIndex={2}
             onOpen={e => {
               // This can be called multiple times and does not always have `event`
-              if (!e) return;
+              if (!e) {
+                return;
+              }
               e.stopPropagation();
             }}
             busy={memberList === null}
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 54e1ea2d7c..db591ceb9d 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -276,7 +276,9 @@ export default class AsyncComponent extends React.Component {
    */
   getEndpoints() {
     const endpoint = this.getEndpoint();
-    if (!endpoint) return [];
+    if (!endpoint) {
+      return [];
+    }
     return [['data', endpoint, this.getEndpointParams()]];
   }
 
diff --git a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
index 6712d495e5..d2abc6d58f 100644
--- a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
@@ -83,7 +83,9 @@ class AsyncComponentSearchInput extends React.Component {
       });
     }
 
-    if (typeof onSearchSubmit !== 'function') return;
+    if (typeof onSearchSubmit !== 'function') {
+      return;
+    }
     onSearchSubmit(this.state.query, evt);
   };
 
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 24ec220e4d..59813f6091 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -187,7 +187,9 @@ class AutoComplete extends React.Component {
   };
 
   handleItemClick = ({onClick, item, index} = {}, e) => {
-    if (this.blurTimer) clearTimeout(this.blurTimer);
+    if (this.blurTimer) {
+      clearTimeout(this.blurTimer);
+    }
     this.setState({highlightedIndex: index});
     this.handleSelect(item, e);
     callIfFunction(onClick, item, e);
@@ -240,7 +242,9 @@ class AutoComplete extends React.Component {
 
     callIfFunction(onOpen, ...args);
 
-    if (disabled || this.isControlled()) return;
+    if (disabled || this.isControlled()) {
+      return;
+    }
 
     this.resetHighlightState();
     this.setState({
@@ -258,7 +262,9 @@ class AutoComplete extends React.Component {
 
     callIfFunction(onClose, ...args);
 
-    if (this.isControlled()) return;
+    if (this.isControlled()) {
+      return;
+    }
 
     this.setState(state => {
       return {
diff --git a/src/sentry/static/sentry/app/components/autoSelectText.jsx b/src/sentry/static/sentry/app/components/autoSelectText.jsx
index e3f9a6b9dd..6f1334af4d 100644
--- a/src/sentry/static/sentry/app/components/autoSelectText.jsx
+++ b/src/sentry/static/sentry/app/components/autoSelectText.jsx
@@ -18,7 +18,9 @@ class AutoSelectText extends React.Component {
   };
 
   selectText = () => {
-    if (!this.el) return;
+    if (!this.el) {
+      return;
+    }
 
     selectText(this.el);
   };
diff --git a/src/sentry/static/sentry/app/components/avatar/gravatar.jsx b/src/sentry/static/sentry/app/components/avatar/gravatar.jsx
index a461bf2173..7c85fdec06 100644
--- a/src/sentry/static/sentry/app/components/avatar/gravatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/gravatar.jsx
@@ -33,7 +33,9 @@ class Gravatar extends React.Component {
     import(/* webpackChunkName: "MD5" */ 'crypto-js/md5')
       .then(mod => mod.default)
       .then(MD5 => {
-        if (!this._isMounted) return;
+        if (!this._isMounted) {
+          return;
+        }
         this.setState({MD5});
       });
   }
diff --git a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
index 6dd7e8eb50..53186b8c67 100644
--- a/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/organizationAvatar.jsx
@@ -12,7 +12,9 @@ class OrganizationAvatar extends React.Component {
 
   render() {
     const {organization, ...props} = this.props;
-    if (!organization) return null;
+    if (!organization) {
+      return null;
+    }
     const slug = (organization && organization.slug) || '';
     const title = explodeSlug(slug);
 
diff --git a/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx
index 255f872776..cfb8c1e4e8 100644
--- a/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/sentryAppAvatar.jsx
@@ -11,7 +11,9 @@ class SentryAppAvatar extends React.Component {
 
   render() {
     const {sentryApp, ...props} = this.props;
-    if (!sentryApp) return null;
+    if (!sentryApp) {
+      return null;
+    }
 
     return (
       <BaseAvatar
diff --git a/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
index 02fee50d96..b887507e44 100644
--- a/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/teamAvatar.jsx
@@ -12,7 +12,9 @@ class TeamAvatar extends React.Component {
 
   render() {
     const {team, ...props} = this.props;
-    if (!team) return null;
+    if (!team) {
+      return null;
+    }
     const slug = (team && team.slug) || '';
     const title = explodeSlug(slug);
     const tooltip = `#${title}`;
diff --git a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
index a21a095252..ae47d0e399 100644
--- a/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar/userAvatar.jsx
@@ -35,7 +35,9 @@ class UserAvatar extends React.Component {
   render() {
     const {user, gravatar, renderTooltip, ...props} = this.props;
 
-    if (!user) return null;
+    if (!user) {
+      return null;
+    }
 
     const type = this.getType(user, gravatar);
 
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.jsx b/src/sentry/static/sentry/app/components/avatarCropper.jsx
index 32e4e3cd20..8273ed5a4f 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.jsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.jsx
@@ -41,10 +41,13 @@ class AvatarCropper extends React.Component {
     /*eslint consistent-return:0*/
     const file = ev.target.files[0];
 
-    if (!file) return; // No file selected (e.g. user clicked "cancel")
+    if (!file) {
+      return;
+    } // No file selected (e.g. user clicked "cancel")
 
-    if (!/^image\//.test(file.type))
+    if (!/^image\//.test(file.type)) {
       return void this.handleError('That is not a supported file type.');
+    }
 
     this.revokeObjectUrl();
     this.setState(
@@ -63,7 +66,9 @@ class AvatarCropper extends React.Component {
   };
 
   updateDimensions = ev => {
-    if (!this.cropContainer) return;
+    if (!this.cropContainer) {
+      return;
+    }
 
     const $container = $(this.cropContainer);
     const resizeDimensions = this.state.resizeDimensions;
@@ -141,7 +146,9 @@ class AvatarCropper extends React.Component {
   };
 
   updateSize = ev => {
-    if (!this.cropContainer) return;
+    if (!this.cropContainer) {
+      return;
+    }
 
     const yDiff = ev.pageY - this.state.mousePosition.pageY;
     const xDiff = ev.pageX - this.state.mousePosition.pageX;
@@ -241,7 +248,9 @@ class AvatarCropper extends React.Component {
 
   validateImage = () => {
     const img = this.image;
-    if (!img) return;
+    if (!img) {
+      return;
+    }
     if (img.naturalWidth < this.MIN_DIMENSION || img.naturalHeight < this.MIN_DIMENSION) {
       return (
         'Please upload an image larger than ' +
@@ -270,7 +279,9 @@ class AvatarCropper extends React.Component {
       this.handleError(error);
       return;
     }
-    if (!this.image) return;
+    if (!this.image) {
+      return;
+    }
 
     const $img = $(this.image);
     const dimension = Math.min($img.height(), $img.width());
@@ -284,8 +295,12 @@ class AvatarCropper extends React.Component {
 
   drawToCanvas = () => {
     const canvas = this.canvas;
-    if (!canvas) return;
-    if (!this.image) return;
+    if (!canvas) {
+      return;
+    }
+    if (!this.image) {
+      return;
+    }
     const resizeDimensions = this.state.resizeDimensions;
     const img = this.image;
     // Calculate difference between natural dimensions and rendered dimensions
@@ -311,7 +326,9 @@ class AvatarCropper extends React.Component {
 
   finishCrop = () => {
     const canvas = this.canvas;
-    if (!canvas) return;
+    if (!canvas) {
+      return;
+    }
     this.props.updateDataUrlState({dataUrl: canvas.toDataURL()});
   };
 
@@ -363,7 +380,9 @@ class AvatarCropper extends React.Component {
 
   uploadClick = ev => {
     ev.preventDefault();
-    if (!this.file) return;
+    if (!this.file) {
+      return;
+    }
     this.file.click();
   };
 
diff --git a/src/sentry/static/sentry/app/components/button/index.jsx b/src/sentry/static/sentry/app/components/button/index.jsx
index 823d468ef6..ef66e4b800 100644
--- a/src/sentry/static/sentry/app/components/button/index.jsx
+++ b/src/sentry/static/sentry/app/components/button/index.jsx
@@ -56,16 +56,22 @@ class Button extends React.Component {
     const {disabled, busy, onClick} = this.props;
 
     // Don't allow clicks when disabled or busy
-    if (disabled || busy) return;
+    if (disabled || busy) {
+      return;
+    }
 
-    if (typeof onClick !== 'function') return;
+    if (typeof onClick !== 'function') {
+      return;
+    }
 
     onClick(...args);
   };
 
   getUrl = prop => {
     const {disabled} = this.props;
-    if (disabled) return null;
+    if (disabled) {
+      return null;
+    }
     return prop;
   };
 
diff --git a/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx b/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
index 4422bfa71c..aa21933588 100644
--- a/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
+++ b/src/sentry/static/sentry/app/components/charts/components/dataZoom.jsx
@@ -8,7 +8,9 @@ const DEFAULT = {
 
 export default function DataZoom(props) {
   // `props` can be boolean, if so return default
-  if (!props || !Array.isArray(props)) return [DEFAULT];
+  if (!props || !Array.isArray(props)) {
+    return [DEFAULT];
+  }
 
   return props;
 }
diff --git a/src/sentry/static/sentry/app/components/charts/pieChart.jsx b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
index 386b2d6fba..73a3851ce3 100644
--- a/src/sentry/static/sentry/app/components/charts/pieChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
@@ -26,7 +26,9 @@ class PieChart extends React.Component {
   componentDidMount() {
     const {selectOnRender} = this.props;
 
-    if (!selectOnRender) return;
+    if (!selectOnRender) {
+      return;
+    }
 
     // Timeout is because we need to wait for rendering animation to complete
     // And I haven't found a callback for this
@@ -48,7 +50,9 @@ class PieChart extends React.Component {
   // Select a series to highlight (e.g. shows details of series)
   // This is the same event as when you hover over a series in the chart
   highlight = dataIndex => {
-    if (!this.chart.current) return;
+    if (!this.chart.current) {
+      return;
+    }
 
     this.chart.current.getEchartsInstance().dispatchAction({
       type: 'highlight',
@@ -59,7 +63,9 @@ class PieChart extends React.Component {
 
   // Opposite of `highlight`
   downplay = dataIndex => {
-    if (!this.chart.current) return;
+    if (!this.chart.current) {
+      return;
+    }
 
     this.chart.current.getEchartsInstance().dispatchAction({
       type: 'downplay',
@@ -84,7 +90,9 @@ class PieChart extends React.Component {
 
   render() {
     const {series, ...props} = this.props;
-    if (!series || !series.length) return null;
+    if (!series || !series.length) {
+      return null;
+    }
     if (series.length > 1) {
       // eslint-disable-next-line no-console
       console.warn('PieChart only uses the first series!');
@@ -109,8 +117,9 @@ class PieChart extends React.Component {
             !this.isInitialSelected ||
             !name ||
             firstSeries.data[this.selected].name === name
-          )
+          ) {
             return;
+          }
 
           // Unhighlight if not initial "highlight" event and
           // if name exists (i.e. not dispatched from cDM) and
@@ -119,8 +128,12 @@ class PieChart extends React.Component {
           this.isInitialSelected = false;
         }}
         onMouseOver={({dataIndex}) => {
-          if (!this.isInitialSelected) return;
-          if (dataIndex === this.selected) return;
+          if (!this.isInitialSelected) {
+            return;
+          }
+          if (dataIndex === this.selected) {
+            return;
+          }
           this.downplay(this.selected);
           this.isInitialSelected = false;
         }}
diff --git a/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx b/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
index 7537082409..57dae7519f 100644
--- a/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
+++ b/src/sentry/static/sentry/app/components/charts/tableChart/index.jsx
@@ -219,7 +219,9 @@ export const TableChart = styled(
 
     // TODO(billy): memoize?
     getTotals(rows) {
-      if (!rows) return [];
+      if (!rows) {
+        return [];
+      }
 
       const {getValue, dataStartIndex} = this.props;
 
@@ -257,7 +259,9 @@ export const TableChart = styled(
         columnTotalLabel,
       } = this.props;
 
-      if (!data) return [];
+      if (!data) {
+        return [];
+      }
 
       const totalRow = showColumnTotal
         ? [
diff --git a/src/sentry/static/sentry/app/components/circleIndicator.jsx b/src/sentry/static/sentry/app/components/circleIndicator.jsx
index bcf8149a29..7703282891 100644
--- a/src/sentry/static/sentry/app/components/circleIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/circleIndicator.jsx
@@ -3,7 +3,9 @@ import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 
 const getBackgroundColor = p => {
-  if (p.color) return `background: ${p.color};`;
+  if (p.color) {
+    return `background: ${p.color};`;
+  }
 
   return `background: ${p.enabled ? p.theme.success : p.theme.error};`;
 };
diff --git a/src/sentry/static/sentry/app/components/clipboard.jsx b/src/sentry/static/sentry/app/components/clipboard.jsx
index 884403628c..4fa057a864 100644
--- a/src/sentry/static/sentry/app/components/clipboard.jsx
+++ b/src/sentry/static/sentry/app/components/clipboard.jsx
@@ -33,7 +33,9 @@ class Clipboard extends React.Component {
   }
 
   handleMount = ref => {
-    if (!ref) return;
+    if (!ref) {
+      return;
+    }
 
     const {hideMessages, successMessage, errorMessage, onSuccess, onError} = this.props;
     const hasSuccessCb = typeof onSuccess === 'function';
@@ -44,7 +46,9 @@ class Clipboard extends React.Component {
       text: () => this.props.value,
     });
 
-    if (!bindEventHandlers) return;
+    if (!bindEventHandlers) {
+      return;
+    }
 
     this.clipboard
       .on('success', () => {
diff --git a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
index 8ab5e60ac5..7e9804dd7d 100644
--- a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
+++ b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
@@ -77,9 +77,13 @@ class CommitAuthorStats extends React.Component {
   }
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
 
-    if (this.state.error) return <LoadingError />;
+    if (this.state.error) {
+      return <LoadingError />;
+    }
 
     const {commitList} = this.state;
 
diff --git a/src/sentry/static/sentry/app/components/commitLink.jsx b/src/sentry/static/sentry/app/components/commitLink.jsx
index 54f1fb48a1..aac871f514 100644
--- a/src/sentry/static/sentry/app/components/commitLink.jsx
+++ b/src/sentry/static/sentry/app/components/commitLink.jsx
@@ -40,7 +40,9 @@ function CommitLink({inline, commitId, repository}) {
   const shortId = getShortVersion(commitId);
 
   const providerData = SUPPORTED_PROVIDERS.find(provider => {
-    if (!repository.provider) return false;
+    if (!repository.provider) {
+      return false;
+    }
     return provider.providerIds.includes(repository.provider.id);
   });
 
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index ec2f2fdb22..9a859cd131 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -167,7 +167,9 @@ const CompactIssue = createReactClass({
       status: 'ignored',
     };
 
-    if (duration) data.ignoreDuration = duration;
+    if (duration) {
+      data.ignoreDuration = duration;
+    }
 
     this.onUpdate(data);
   },
diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index 16269a83ea..8fc0fb5f65 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -101,7 +101,9 @@ class Confirm extends React.PureComponent {
 
   handleToggle = e => {
     const {disabled, bypass} = this.props;
-    if (disabled) return;
+    if (disabled) {
+      return;
+    }
 
     if (bypass) {
       this.props.onConfirm();
diff --git a/src/sentry/static/sentry/app/components/contextPickerModal.jsx b/src/sentry/static/sentry/app/components/contextPickerModal.jsx
index 0cf2399e16..9a96c2cd83 100644
--- a/src/sentry/static/sentry/app/components/contextPickerModal.jsx
+++ b/src/sentry/static/sentry/app/components/contextPickerModal.jsx
@@ -173,7 +173,9 @@ class ContextPickerModal extends React.Component {
   };
 
   focusProjectSelector = () => {
-    if (!this.projectSelect || this.state.loading) return;
+    if (!this.projectSelect || this.state.loading) {
+      return;
+    }
 
     ReactDOM.findDOMNode(this.projectSelect)
       .querySelector('input')
@@ -181,7 +183,9 @@ class ContextPickerModal extends React.Component {
   };
 
   focusOrganizationSelector = () => {
-    if (!this.orgSelect || this.state.loading) return;
+    if (!this.orgSelect || this.state.loading) {
+      return;
+    }
 
     ReactDOM.findDOMNode(this.orgSelect)
       .querySelector('input')
@@ -190,7 +194,9 @@ class ContextPickerModal extends React.Component {
 
   handleSelectOrganization = ({value}) => {
     // Don't do anything if org value doesn't actually change
-    if (this.state.selectedOrganization === value) return;
+    if (this.state.selectedOrganization === value) {
+      return;
+    }
 
     // If we do not need to select a project, we can early return after selecting an org
     // No need to fetch org details
@@ -211,7 +217,9 @@ class ContextPickerModal extends React.Component {
   handleSelectProject = ({value}) => {
     const {latestContext} = this.props;
 
-    if (!value || !latestContext.organization) return;
+    if (!value || !latestContext.organization) {
+      return;
+    }
 
     this.navigateIfFinish([latestContext.organization], [{slug: value}]);
   };
@@ -224,7 +232,9 @@ class ContextPickerModal extends React.Component {
 
     const projects = latestContext.organization && latestContext.organization.projects;
 
-    if (!shouldShowPicker) return null;
+    if (!shouldShowPicker) {
+      return null;
+    }
 
     const shouldShowProjectSelector =
       latestContext.organization && needProject && projects;
@@ -244,7 +254,9 @@ class ContextPickerModal extends React.Component {
               <StyledSelectControl
                 innerRef={ref => {
                   this.orgSelect = ref;
-                  if (shouldShowProjectSelector) return;
+                  if (shouldShowProjectSelector) {
+                    return;
+                  }
                   this.focusOrganizationSelector();
                 }}
                 placeholder="Select an Organization"
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index a7848de66e..49017f966e 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -33,7 +33,9 @@ export default createReactClass({
       o = Math.floor(number / x);
       p = number % x;
       if (o > 0) {
-        if (o / 10 > 1 || !p) return '' + o + y;
+        if (o / 10 > 1 || !p) {
+          return '' + o + y;
+        }
         return '' + this.floatFormat(number / x, 1) + y;
       }
     }
diff --git a/src/sentry/static/sentry/app/components/createSampleEvent.jsx b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
index c8dd9bbc48..1758141b02 100644
--- a/src/sentry/static/sentry/app/components/createSampleEvent.jsx
+++ b/src/sentry/static/sentry/app/components/createSampleEvent.jsx
@@ -27,7 +27,9 @@ class CreateSampleEvent extends React.Component {
     const {organization} = this.context;
     const project = organization.projects.find(proj => proj.slug === projectId);
 
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     const data = {
       org_id: parseInt(organization.id, 10),
diff --git a/src/sentry/static/sentry/app/components/deviceName.jsx b/src/sentry/static/sentry/app/components/deviceName.jsx
index 7336528a15..3712ae0db6 100644
--- a/src/sentry/static/sentry/app/components/deviceName.jsx
+++ b/src/sentry/static/sentry/app/components/deviceName.jsx
@@ -67,10 +67,14 @@ export default class DeviceName extends React.Component {
     const {iOSDeviceList} = this.state;
 
     // Children can be undefined, need to return null or else react throws
-    if (!children) return null;
+    if (!children) {
+      return null;
+    }
 
     // If library has not loaded yet, then just render the raw model string, better than empty
-    if (!iOSDeviceList) return children;
+    if (!iOSDeviceList) {
+      return children;
+    }
 
     return (
       <span data-test-id="loaded-device-name">
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index 3824c14cd8..a40c2776b1 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -191,7 +191,9 @@ class DropdownAutoCompleteMenu extends React.Component {
   autoCompleteFilter = (items, inputValue) => {
     let itemCount = 0;
 
-    if (!items) return [];
+    if (!items) {
+      return [];
+    }
 
     if (items[0] && items[0].items) {
       //if the first item has children, we assume it is a group
@@ -462,7 +464,9 @@ const getMenuBorderRadius = ({blendCorner, alignMenu, theme}) => {
 };
 
 const getMenuArrow = ({menuWithArrow, alignMenu}) => {
-  if (!menuWithArrow) return '';
+  if (!menuWithArrow) {
+    return '';
+  }
   const alignRight = alignMenu === 'right';
 
   return css`
@@ -538,8 +542,12 @@ const StyledInput = styled(Input)`
 `;
 
 const getItemPaddingForSize = size => {
-  if (size === 'small') return `${space(0.5)} ${space(1)}`;
-  if (size === 'zero') return '0';
+  if (size === 'small') {
+    return `${space(0.5)} ${space(1)}`;
+  }
+  if (size === 'zero') {
+    return '0';
+  }
 
   return space(1);
 };
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.jsx b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
index e802ec2f7a..9355cc3c38 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
@@ -72,9 +72,13 @@ class DropdownMenu extends React.Component {
   checkClickOutside = e => {
     const {onClickOutside, shouldIgnoreClickOutside} = this.props;
 
-    if (!this.dropdownMenu) return;
+    if (!this.dropdownMenu) {
+      return;
+    }
     // Dropdown menu itself
-    if (this.dropdownMenu.contains(e.target)) return;
+    if (this.dropdownMenu.contains(e.target)) {
+      return;
+    }
 
     if (!this.dropdownActor) {
       // Log an error, should be lower priority
@@ -85,10 +89,13 @@ class DropdownMenu extends React.Component {
     }
 
     // Button that controls visibility of dropdown menu
-    if (this.dropdownActor && this.dropdownActor.contains(e.target)) return;
+    if (this.dropdownActor && this.dropdownActor.contains(e.target)) {
+      return;
+    }
 
-    if (typeof shouldIgnoreClickOutside === 'function' && shouldIgnoreClickOutside(e))
+    if (typeof shouldIgnoreClickOutside === 'function' && shouldIgnoreClickOutside(e)) {
       return;
+    }
 
     if (typeof onClickOutside === 'function') {
       onClickOutside(e);
@@ -100,7 +107,9 @@ class DropdownMenu extends React.Component {
   // Callback function from <DropdownMenu> to see if we should close menu
   shouldIgnoreClickOutside = e => {
     const {shouldIgnoreClickOutside} = this.props;
-    if (this.dropdownActor.contains(e.target)) return true;
+    if (this.dropdownActor.contains(e.target)) {
+      return true;
+    }
     if (typeof shouldIgnoreClickOutside === 'function') {
       return shouldIgnoreClickOutside(e);
     }
@@ -137,7 +146,9 @@ class DropdownMenu extends React.Component {
   // Only for nested dropdowns
   handleMouseLeave = e => {
     const {isNestedDropdown} = this.props;
-    if (!isNestedDropdown) return;
+    if (!isNestedDropdown) {
+      return;
+    }
 
     const toElement = e.toElement || e.relatedTarget;
 
@@ -181,14 +192,18 @@ class DropdownMenu extends React.Component {
   // bind a click handler to `document` to listen for clicks outside of
   // this component and close menu if so
   handleMenuMount = ref => {
-    if (ref && !(ref instanceof HTMLElement)) return;
+    if (ref && !(ref instanceof HTMLElement)) {
+      return;
+    }
     const {alwaysRenderMenu} = this.props;
 
     this.dropdownMenu = ref;
 
     // Don't add document event listeners here if we are always rendering menu
     // Instead add when menu is opened
-    if (alwaysRenderMenu) return;
+    if (alwaysRenderMenu) {
+      return;
+    }
 
     if (this.dropdownMenu) {
       // 3rd arg = useCapture = so event capturing vs event bubbling
@@ -199,7 +214,9 @@ class DropdownMenu extends React.Component {
   };
 
   handleActorMount = ref => {
-    if (ref && !(ref instanceof HTMLElement)) return;
+    if (ref && !(ref instanceof HTMLElement)) {
+      return;
+    }
     this.dropdownActor = ref;
   };
 
@@ -213,7 +230,9 @@ class DropdownMenu extends React.Component {
 
   // Control whether we should hide dropdown menu when it is clicked
   handleDropdownMenuClick = e => {
-    if (this.props.keepMenuOpen) return;
+    if (this.props.keepMenuOpen) {
+      return;
+    }
 
     this.handleClose(e);
   };
@@ -254,9 +273,13 @@ class DropdownMenu extends React.Component {
         }
 
         // Only handle mouse enter for nested dropdowns
-        if (!isNestedDropdown) return;
+        if (!isNestedDropdown) {
+          return;
+        }
 
-        if (this.mouseLeaveId) window.clearTimeout(this.mouseLeaveId);
+        if (this.mouseLeaveId) {
+          window.clearTimeout(this.mouseLeaveId);
+        }
 
         this.mouseEnterId = window.setTimeout(() => {
           this.handleOpen(...args);
@@ -268,7 +291,9 @@ class DropdownMenu extends React.Component {
           onMouseLeave(...args);
         }
 
-        if (this.mouseEnterId) window.clearTimeout(this.mouseEnterId);
+        if (this.mouseEnterId) {
+          window.clearTimeout(this.mouseEnterId);
+        }
         this.handleMouseLeave(...args);
       },
       onClick: (...args) => {
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary.jsx b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
index 7f9dc5cc0c..e7ca996f4f 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary.jsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
@@ -254,9 +254,13 @@ class EventContextSummary extends React.Component {
     // Add defined contexts in the declared order, until we reach the limit
     // defined by MAX_CONTEXTS.
     let contexts = KNOWN_CONTEXTS.map(({key, Component, ...props}) => {
-      if (contextCount >= MAX_CONTEXTS) return null;
+      if (contextCount >= MAX_CONTEXTS) {
+        return null;
+      }
       const data = evt.contexts[key] || evt[key];
-      if (objectIsEmpty(data)) return null;
+      if (objectIsEmpty(data)) {
+        return null;
+      }
       contextCount += 1;
       return <Component key={key} data={data} {...props} />;
     });
@@ -270,8 +274,12 @@ class EventContextSummary extends React.Component {
       // Add contents in the declared order until we have at least MIN_CONTEXTS
       // contexts in our list.
       contexts = KNOWN_CONTEXTS.map(({key, Component, ...props}, index) => {
-        if (contexts[index]) return contexts[index];
-        if (contextCount >= MIN_CONTEXTS) return null;
+        if (contexts[index]) {
+          return contexts[index];
+        }
+        if (contextCount >= MIN_CONTEXTS) {
+          return null;
+        }
         contextCount += 1;
         return <Component key={key} data={{}} {...props} />;
       });
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
index 5089b05f1a..644923e5ea 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
@@ -23,8 +23,9 @@ class DeviceContextType extends React.Component {
     }
 
     let memory = `Total: ${formatBytes(memory_size)} / Free: ${formatBytes(free_memory)}`;
-    if (Number.isInteger(usable_memory) && usable_memory > 0)
+    if (Number.isInteger(usable_memory) && usable_memory > 0) {
       memory += ` / Usable: ${formatBytes(usable_memory)}`;
+    }
 
     return memory;
   };
@@ -35,21 +36,25 @@ class DeviceContextType extends React.Component {
     external_storage_size,
     external_free_storage
   ) => {
-    if (!Number.isInteger(storage_size) || storage_size <= 0) return null;
+    if (!Number.isInteger(storage_size) || storage_size <= 0) {
+      return null;
+    }
 
     let storage = `Total: ${formatBytes(storage_size)}`;
-    if (Number.isInteger(free_storage) && free_storage > 0)
+    if (Number.isInteger(free_storage) && free_storage > 0) {
       storage += ` / Free: ${formatBytes(free_storage)}`;
+    }
 
     if (
       Number.isInteger(external_storage_size) &&
       external_storage_size > 0 &&
       Number.isInteger(external_free_storage) &&
       external_free_storage > 0
-    )
+    ) {
       storage += ` (External Total: ${formatBytes(
         external_storage_size
       )} / Free: ${formatBytes(external_free_storage)})`;
+    }
 
     return storage;
   };
diff --git a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
index 97f19111a4..5d1adee2d5 100644
--- a/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventAttachments.jsx
@@ -43,7 +43,9 @@ export default createReactClass({
 
   fetchData(event) {
     // TODO(dcramer): this API request happens twice, and we need a store for it
-    if (!event) return;
+    if (!event) {
+      return;
+    }
     this.api.request(
       `/projects/${this.props.orgId}/${this.props
         .projectId}/events/${event.id}/attachments/`,
diff --git a/src/sentry/static/sentry/app/components/events/eventCause.jsx b/src/sentry/static/sentry/app/components/events/eventCause.jsx
index 367caf2f86..b27dfb046f 100644
--- a/src/sentry/static/sentry/app/components/events/eventCause.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCause.jsx
@@ -52,7 +52,9 @@ export default createReactClass({
 
   fetchData(event) {
     // TODO(dcramer): this API request happens twice, and we need a store for it
-    if (!event) return;
+    if (!event) {
+      return;
+    }
     this.api.request(
       `/projects/${this.props.orgId}/${this.props
         .projectId}/events/${event.id}/committers/`,
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index e1432d5d4f..069fb6a3ca 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -67,7 +67,9 @@ class EventEntries extends React.Component {
   componentDidMount() {
     const {event} = this.props;
 
-    if (!event || !event.errors || !(event.errors.length > 0)) return;
+    if (!event || !event.errors || !(event.errors.length > 0)) {
+      return;
+    }
     const errors = event.errors;
     const errorTypes = errors.map(errorEntries => errorEntries.type);
     const errorMessages = errors.map(errorEntries => errorEntries.message);
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
index 792a771b69..625e5b819d 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -27,7 +27,9 @@ class EventTags extends React.Component {
   render() {
     const tags = this.props.event.tags;
 
-    if (_.isEmpty(tags)) return null;
+    if (_.isEmpty(tags)) {
+      return null;
+    }
 
     const {event, group, organization, orgId, projectId} = this.props;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 058984cae4..60bb4acbdc 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -95,8 +95,11 @@ const Frame = createReactClass({
       <strong>${sourceMapText}</strong><br/>`;
 
     // mapUrl not always present; e.g. uploaded source maps
-    if (data.mapUrl) out += `${_.escape(data.mapUrl)}<br/>`;
-    else out += `${_.escape(data.map)}<br/>`;
+    if (data.mapUrl) {
+      out += `${_.escape(data.mapUrl)}<br/>`;
+    } else {
+      out += `${_.escape(data.map)}<br/>`;
+    }
 
     out += '</div>';
 
@@ -348,7 +351,9 @@ const Frame = createReactClass({
   renderLeadHint() {
     if (this.leadsToApp() && !this.state.isExpanded) {
       return <span className="leads-to-app-hint">{'Called from: '}</span>;
-    } else return null;
+    } else {
+      return null;
+    }
   },
 
   renderRepeats() {
@@ -364,7 +369,9 @@ const Frame = createReactClass({
           </RepeatedContent>
         </RepeatedFrames>
       );
-    } else return null;
+    } else {
+      return null;
+    }
   },
 
   renderDefaultLine() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
index c09368f7ac..faf11db119 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters.jsx
@@ -28,7 +28,9 @@ export class RegisterValue extends React.Component {
   formatValue = value => {
     try {
       const parsed = typeof value === 'string' ? parseInt(value, 16) : value;
-      if (isNaN(parsed)) return value;
+      if (isNaN(parsed)) {
+        return value;
+      }
 
       switch (this.state.view) {
         case 1:
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index 918b577312..5b1fc0fdd2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -83,9 +83,11 @@ class RawExceptionContent extends React.Component {
           exc
         );
       if (this.isNative()) {
-        if (this.state.loading) content = <LoadingIndicator />;
-        else if (this.state.error) content = <LoadingError onRetry={this.fetchData} />;
-        else if (!this.state.loading && this.state.crashReport != '') {
+        if (this.state.loading) {
+          content = <LoadingIndicator />;
+        } else if (this.state.error) {
+          content = <LoadingError onRetry={this.fetchData} />;
+        } else if (!this.state.loading && this.state.crashReport != '') {
           content = <ClippedBox clipHeight={250}>{this.state.crashReport}</ClippedBox>;
           downloadButton = (
             <a
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 6c1499f186..9cc9a181b8 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -61,7 +61,9 @@ const StacktraceContent = createReactClass({
 
     let lastFrameIdx = null;
     data.frames.forEach((frame, frameIdx) => {
-      if (frame.inApp) lastFrameIdx = frameIdx;
+      if (frame.inApp) {
+        lastFrameIdx = frameIdx;
+      }
     });
     if (lastFrameIdx === null) {
       lastFrameIdx = data.frames.length - 1;
diff --git a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
index bf8b237c00..82c387622a 100644
--- a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
@@ -4,7 +4,9 @@ const GET_META = Symbol('GET_META');
 const IS_PROXY = Symbol('IS_PROXY');
 
 function isAnnotated(meta) {
-  if (_.isEmpty(meta)) return false;
+  if (_.isEmpty(meta)) {
+    return false;
+  }
   return !_.isEmpty(meta.rem) || !_.isEmpty(meta.err);
 }
 
diff --git a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
index b47489b966..11a221b392 100644
--- a/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
+++ b/src/sentry/static/sentry/app/components/eventsTable/eventsTableRow.jsx
@@ -25,8 +25,9 @@ class EventsTableRow extends React.Component {
     // all events will have this and most of this logic could go
     switch (event.type) {
       case 'error':
-        if (event.metadata.type && event.metadata.value)
+        if (event.metadata.type && event.metadata.value) {
           return `${event.metadata.type}: ${event.metadata.value}`;
+        }
         return event.metadata.type || event.metadata.value || event.metadata.title;
       case 'csp':
         return event.metadata.message;
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index 4994a34fed..1c26cbdf1f 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -73,8 +73,11 @@ class Form extends React.Component {
     let newData = {};
     if (data) {
       Object.keys(curData).forEach(k => {
-        if (data.hasOwnProperty(k)) newData[k] = data[k];
-        else newData[k] = curData[k];
+        if (data.hasOwnProperty(k)) {
+          newData[k] = data[k];
+        } else {
+          newData[k] = curData[k];
+        }
       });
     } else {
       newData = curData;
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index 822c71ee31..62de045bde 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -133,8 +133,12 @@ export default class FormField extends React.PureComponent {
 
   renderDisabledReason() {
     const {disabled, disabledReason} = this.props;
-    if (!disabled) return null;
-    if (!disabledReason) return null;
+    if (!disabled) {
+      return null;
+    }
+    if (!disabledReason) {
+      return null;
+    }
     return (
       <span className="disabled-indicator tip" title={disabledReason}>
         <StyledInlineSvg src="icon-circle-question" size="18px" />
diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index 4945c23069..23f06a2248 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -62,7 +62,9 @@ export default class GenericField extends React.Component {
       case 'string':
       case 'text':
       case 'url':
-        if (props.choices) return <SelectCreatableField {...props} />;
+        if (props.choices) {
+          return <SelectCreatableField {...props} />;
+        }
         return <TextField {...props} />;
       case 'number':
         return <NumberField {...props} />;
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
index dfd25fc3d2..9c56948852 100644
--- a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
@@ -47,7 +47,9 @@ class SelectAsyncControl extends React.Component {
   }
 
   componentWillUnmount() {
-    if (!this.api) return;
+    if (!this.api) {
+      return;
+    }
     this.api.clear();
     this.api = null;
   }
@@ -56,7 +58,9 @@ class SelectAsyncControl extends React.Component {
     const {url, onQuery} = this.props;
     const {query} = this.state;
 
-    if (!this.api) return null;
+    if (!this.api) {
+      return null;
+    }
 
     return this.api
       .requestPromise(url, {
diff --git a/src/sentry/static/sentry/app/components/forms/selectField.jsx b/src/sentry/static/sentry/app/components/forms/selectField.jsx
index 869ad064cc..4343246708 100644
--- a/src/sentry/static/sentry/app/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectField.jsx
@@ -72,7 +72,9 @@ export default class SelectField extends FormField {
   // This is also needed to get `multi` select working since we need the {label, value} object
   // for react-select (but forms expect just the value to be propagated)
   coerceValue(value) {
-    if (!value) return '';
+    if (!value) {
+      return '';
+    }
 
     if (this.isMultiple()) {
       return value.map(v => v.value);
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index ecd59591dc..522465c150 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -199,7 +199,7 @@ export class SentryAppExternalIssueActions extends React.Component {
 
     let url = '#';
     let icon = 'icon-generic-box';
-    let displayName = tct(`Link [name] Issue`, {name: sentryAppComponent.sentryApp.name});
+    let displayName = tct('Link [name] Issue', {name: sentryAppComponent.sentryApp.name});
 
     if (externalIssue) {
       url = externalIssue.webUrl;
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index b02428942d..06d50615f4 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -95,14 +95,18 @@ const GroupReleaseChart = createReactClass({
 
     const group = this.props.group;
     const stats = group.stats[this.props.statsPeriod];
-    if (!stats || !stats.length) return null;
+    if (!stats || !stats.length) {
+      return null;
+    }
 
     const {releasePoints, envPoints} = this.state;
 
     const points = stats.map(point => {
       const rData = releasePoints[point[0]] || 0;
       let eData = (envPoints[point[0]] || 0) - rData;
-      if (eData < 0) eData = 0;
+      if (eData < 0) {
+        eData = 0;
+      }
       const remaining = point[1] - rData - eData;
       return {
         x: point[0],
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 9787546722..40bd25196d 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -49,7 +49,9 @@ const SuggestedOwners = createReactClass({
   },
 
   fetchData(event) {
-    if (!event) return;
+    if (!event) {
+      return;
+    }
     const org = this.getOrganization();
     const project = this.props.project;
 
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index 491a21e229..3a5126bb77 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -162,9 +162,13 @@ const TagDistributionMeter = createReactClass({
   },
 
   renderBody() {
-    if (this.state.loading || this.state.error) return null;
+    if (this.state.loading || this.state.error) {
+      return null;
+    }
 
-    if (!this.props.totalValues) return <p>{t('No recent data.')}</p>;
+    if (!this.props.totalValues) {
+      return <p>{t('No recent data.')}</p>;
+    }
 
     return this.renderSegments();
   },
diff --git a/src/sentry/static/sentry/app/components/hook.jsx b/src/sentry/static/sentry/app/components/hook.jsx
index 91a55442f2..719cbee31e 100644
--- a/src/sentry/static/sentry/app/components/hook.jsx
+++ b/src/sentry/static/sentry/app/components/hook.jsx
@@ -37,7 +37,9 @@ const Hook = createReactClass({
     const {name, ...props} = this.props;
 
     // Make sure that the incoming hook update matches this component's hook name
-    if (hookName !== name) return;
+    if (hookName !== name) {
+      return;
+    }
 
     this.setState(state => ({
       hooks: hooks.map(cb => cb(props)),
@@ -47,7 +49,9 @@ const Hook = createReactClass({
   render() {
     const {children} = this.props;
 
-    if (!this.state.hooks || !this.state.hooks.length) return null;
+    if (!this.state.hooks || !this.state.hooks.length) {
+      return null;
+    }
 
     if (typeof children === 'function') {
       return children({hooks: this.state.hooks});
diff --git a/src/sentry/static/sentry/app/components/hookOrDefault.jsx b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
index 38162190a8..8e37db3584 100644
--- a/src/sentry/static/sentry/app/components/hookOrDefault.jsx
+++ b/src/sentry/static/sentry/app/components/hookOrDefault.jsx
@@ -37,7 +37,9 @@ function HookOrDefault({hookName, defaultComponent, params}) {
 
     handleHooks(hookNameFromStore, hooks) {
       // Make sure that the incoming hook update matches this component's hook name
-      if (hookName !== hookNameFromStore) return;
+      if (hookName !== hookNameFromStore) {
+        return;
+      }
 
       this.setState(state => ({
         hooks,
diff --git a/src/sentry/static/sentry/app/components/hovercard.jsx b/src/sentry/static/sentry/app/components/hovercard.jsx
index 4d6b6b58c8..affd063634 100644
--- a/src/sentry/static/sentry/app/components/hovercard.jsx
+++ b/src/sentry/static/sentry/app/components/hovercard.jsx
@@ -42,7 +42,9 @@ class Hovercard extends React.Component {
     const {header, body} = this.props;
 
     // Don't toggle hovercard if both of these are null
-    if (!header && !body) return;
+    if (!header && !body) {
+      return;
+    }
 
     if (this.hoverWait !== null) {
       clearTimeout(this.hoverWait);
@@ -65,7 +67,9 @@ class Hovercard extends React.Component {
   };
 
   positionCard() {
-    if (!this.cardElement.current || this.state.visible) return;
+    if (!this.cardElement.current || this.state.visible) {
+      return;
+    }
     const rect = this.cardElement.current.getBoundingClientRect();
 
     // Computes the offset that the hovercard should be from the anchor point
diff --git a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
index a5ec9d96bd..eaa7f8ea23 100644
--- a/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/organizationBadge.jsx
@@ -57,8 +57,12 @@ const OrganizationBadgeContainer = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (this.state.organization === nextProps.organization) return;
-    if (isEqual(this.state.organization, nextProps.organization)) return;
+    if (this.state.organization === nextProps.organization) {
+      return;
+    }
+    if (isEqual(this.state.organization, nextProps.organization)) {
+      return;
+    }
 
     this.setState({
       organization: nextProps.organization,
@@ -67,7 +71,9 @@ const OrganizationBadgeContainer = createReactClass({
 
   onOrganizationStoreUpdate() {
     const org = OrganizationStore.get(this.state.organization.slug);
-    if (isEqual(org.avatar, this.state.organization.avatar)) return;
+    if (isEqual(org.avatar, this.state.organization.avatar)) {
+      return;
+    }
 
     this.setState({
       organization: OrganizationStore.get(this.state.organization.slug),
diff --git a/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
index f91c30a3a7..095fb15490 100644
--- a/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/teamBadge.jsx
@@ -55,8 +55,12 @@ const TeamBadgeContainer = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (this.state.team === nextProps.team) return;
-    if (isEqual(this.state.team, nextProps.team)) return;
+    if (this.state.team === nextProps.team) {
+      return;
+    }
+    if (isEqual(this.state.team, nextProps.team)) {
+      return;
+    }
 
     this.setState({
       team: nextProps.team,
@@ -64,10 +68,14 @@ const TeamBadgeContainer = createReactClass({
   },
 
   onTeamStoreUpdate(updatedTeam) {
-    if (!updatedTeam.has(this.state.team.id)) return;
+    if (!updatedTeam.has(this.state.team.id)) {
+      return;
+    }
 
     const team = TeamStore.getById(this.state.team.id);
-    if (isEqual(team.avatar, this.state.team.avatar)) return;
+    if (isEqual(team.avatar, this.state.team.avatar)) {
+      return;
+    }
 
     this.setState({
       team: TeamStore.getById(this.state.team.id),
diff --git a/src/sentry/static/sentry/app/components/inactivePlugins.jsx b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
index 2d64482bdb..7f6ca3e588 100644
--- a/src/sentry/static/sentry/app/components/inactivePlugins.jsx
+++ b/src/sentry/static/sentry/app/components/inactivePlugins.jsx
@@ -38,7 +38,9 @@ class InactivePlugins extends React.Component {
 
   render() {
     const plugins = this.props.plugins;
-    if (plugins.length === 0) return null;
+    if (plugins.length === 0) {
+      return null;
+    }
     return (
       <Panel>
         <PanelHeader>{t('Inactive Integrations')}</PanelHeader>
diff --git a/src/sentry/static/sentry/app/components/internalStatChart.jsx b/src/sentry/static/sentry/app/components/internalStatChart.jsx
index 0484b772ad..ad141d1987 100644
--- a/src/sentry/static/sentry/app/components/internalStatChart.jsx
+++ b/src/sentry/static/sentry/app/components/internalStatChart.jsx
@@ -86,8 +86,11 @@ export default createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     return (
       <BarChart
diff --git a/src/sentry/static/sentry/app/components/issueDiff.jsx b/src/sentry/static/sentry/app/components/issueDiff.jsx
index 263bbac878..ceae389d9c 100644
--- a/src/sentry/static/sentry/app/components/issueDiff.jsx
+++ b/src/sentry/static/sentry/app/components/issueDiff.jsx
@@ -59,7 +59,9 @@ class IssueDiff extends React.Component {
   }
 
   getException(event) {
-    if (!event || !event.entries) return [];
+    if (!event || !event.entries) {
+      return [];
+    }
 
     // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to
     // diff multiple exceptions
@@ -70,12 +72,16 @@ class IssueDiff extends React.Component {
     if (!exc) {
       // Look for a message if not an exception
       const msg = event.entries.find(({type}) => type === 'message');
-      if (!msg) return [];
+      if (!msg) {
+        return [];
+      }
 
       return msg.data && msg.data.message && [msg.data.message];
     }
 
-    if (!exc.data) return [];
+    if (!exc.data) {
+      return [];
+    }
 
     return exc.data.values
       .filter(value => !!value.stacktrace)
diff --git a/src/sentry/static/sentry/app/components/issueLink.jsx b/src/sentry/static/sentry/app/components/issueLink.jsx
index f2d9a69c85..e24412896a 100644
--- a/src/sentry/static/sentry/app/components/issueLink.jsx
+++ b/src/sentry/static/sentry/app/components/issueLink.jsx
@@ -108,7 +108,9 @@ export default class IssueLink extends React.Component {
 
   render() {
     const {card, issue, to} = this.props;
-    if (!card) return <Link to={to}>{this.props.children}</Link>;
+    if (!card) {
+      return <Link to={to}>{this.props.children}</Link>;
+    }
 
     return (
       <Hovercard body={this.renderBody()} header={issue.shortId}>
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index 36e2173691..34501014ea 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -55,7 +55,9 @@ const IssueList = createReactClass({
   componentWillReceiveProps(nextProps) {
     const location = this.props.location;
     const nextLocation = nextProps.location;
-    if (!location) return;
+    if (!location) {
+      return;
+    }
 
     if (
       location.pathname != nextLocation.pathname ||
@@ -100,11 +102,15 @@ const IssueList = createReactClass({
     let body;
     const {noBorder, noMargin} = this.props;
 
-    if (this.state.loading) body = this.renderLoading();
-    else if (this.state.error) body = this.renderError();
-    else if (this.state.issueIds.length > 0) {
+    if (this.state.loading) {
+      body = this.renderLoading();
+    } else if (this.state.error) {
+      body = this.renderError();
+    } else if (this.state.issueIds.length > 0) {
       const panelStyle = noBorder ? {border: 0, borderRadius: 0} : {};
-      if (noMargin) panelStyle.marginBottom = 0;
+      if (noMargin) {
+        panelStyle.marginBottom = 0;
+      }
 
       body = (
         <Panel style={panelStyle}>
@@ -123,7 +129,9 @@ const IssueList = createReactClass({
           </PanelBody>
         </Panel>
       );
-    } else body = (this.props.renderEmpty || this.renderEmpty)();
+    } else {
+      body = (this.props.renderEmpty || this.renderEmpty)();
+    }
 
     return body;
   },
@@ -148,7 +156,9 @@ const IssueList = createReactClass({
     const {emptyText} = this.props;
     const {noBorder, noMargin} = this.props;
     const panelStyle = noBorder ? {border: 0, borderRadius: 0} : {};
-    if (noMargin) panelStyle.marginBottom = 0;
+    if (noMargin) {
+      panelStyle.marginBottom = 0;
+    }
 
     return (
       <Panel style={panelStyle}>
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index bb9dbdc2cc..3ce0cfd8cf 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -41,7 +41,9 @@ class LazyLoad extends React.Component {
 
   componentWillReceiveProps(nextProps, nextState) {
     // No need to refetch when component does not change
-    if (nextProps.component && nextProps.component === this.props.component) return;
+    if (nextProps.component && nextProps.component === this.props.component) {
+      return;
+    }
 
     // This is to handle the following case:
     // <Route path="a/">
@@ -51,7 +53,9 @@ class LazyLoad extends React.Component {
     //
     // `LazyLoad` will get not fully remount when we switch between `b` and `c`,
     // instead will just re-render.  Refetch if route paths are different
-    if (nextProps.route && nextProps.route === this.props.route) return;
+    if (nextProps.route && nextProps.route === this.props.route) {
+      return;
+    }
 
     // If `this.fetchComponent` is not in callback,
     // then there's no guarantee that new Component will be rendered
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index b25748ecf7..15e133076d 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -39,9 +39,13 @@ class ListLink extends React.Component {
   getClassName = () => {
     const _classNames = {};
 
-    if (this.props.className) _classNames[this.props.className] = true;
+    if (this.props.className) {
+      _classNames[this.props.className] = true;
+    }
 
-    if (this.isActive()) _classNames[this.props.activeClassName] = true;
+    if (this.isActive()) {
+      _classNames[this.props.activeClassName] = true;
+    }
 
     return classNames(_classNames);
   };
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
index 1106292009..df8c28d5bf 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
@@ -105,7 +105,7 @@ class GlobalSelectionHeader extends React.Component {
 
     const hasSentry10 = new Set(this.props.organization.features).has('sentry10');
 
-    if (hasSentry10)
+    if (hasSentry10) {
       AlertActions.addAlert({
         message:
           'Hi! You are seeing some new changes to Sentry which we are rolling out. Click to read more.',
@@ -116,6 +116,7 @@ class GlobalSelectionHeader extends React.Component {
         noDuplicates: true,
         id: 'visibility-changes-alert-message',
       });
+    }
 
     const hasMultipleProjectFeature = this.hasMultipleProjectSelection();
 
diff --git a/src/sentry/static/sentry/app/components/organizations/headerItem.jsx b/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
index 8bd5726a32..8577fa137b 100644
--- a/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
@@ -100,7 +100,9 @@ class HeaderItem extends React.Component {
 }
 
 const getColor = p => {
-  if (p.locked) return p.theme.gray2;
+  if (p.locked) {
+    return p.theme.gray2;
+  }
   return p.isOpen || p.hasSelected ? p.theme.gray4 : p.theme.gray2;
 };
 
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
index 7f7aec8e52..236899f90f 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -133,7 +133,9 @@ class MultipleEnvironmentSelector extends React.PureComponent {
 
   handleClose = () => {
     // Only update if there are changes
-    if (!this.state.hasChanges) return;
+    if (!this.state.hasChanges) {
+      return;
+    }
 
     analytics('environmentselector.update', {
       count: this.state.selectedEnvs.size,
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index 23b55962b3..f4479f6c0a 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -79,7 +79,9 @@ export default class MultipleProjectSelector extends React.PureComponent {
    */
   handleClose = props => {
     // Only update if there are changes
-    if (!this.state.hasChanges) return;
+    if (!this.state.hasChanges) {
+      return;
+    }
 
     const {value, multi} = this.props;
     analytics('projectselector.update', {
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectSelector.jsx
index fabea26cb1..210398ed9e 100644
--- a/src/sentry/static/sentry/app/components/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectSelector.jsx
@@ -89,7 +89,9 @@ class ProjectSelector extends React.Component {
     const {onMultiSelect} = this.props;
     const {slug} = project;
     // Don't update state if this is a controlled component
-    if (this.isControlled()) return;
+    if (this.isControlled()) {
+      return;
+    }
 
     this.setState(state => {
       const selectedProjects = new Map(state.selectedProjects.entries());
@@ -200,7 +202,9 @@ class ProjectSelector extends React.Component {
             typeof menuFooter === 'function' ? menuFooter(renderProps) : menuFooter;
           const showCreateProjectButton = !hasProjects && hasProjectWrite;
 
-          if (!renderedFooter && !showCreateProjectButton) return null;
+          if (!renderedFooter && !showCreateProjectButton) {
+            return null;
+          }
 
           return (
             <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
index 318b2dbca9..748ff45969 100644
--- a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
+++ b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
@@ -111,8 +111,12 @@ class ReleaseProjectStatSparkline extends React.Component {
   render() {
     const {organization, orgId, project, version} = this.props;
 
-    if (this.state.loading) return <LoadingIndicator />;
-    if (this.state.error) return <LoadingError />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
+    if (this.state.error) {
+      return <LoadingError />;
+    }
 
     const {Sparklines, SparklinesLine, stats} = this.state;
     const values = stats.map(tuple => tuple[1]);
diff --git a/src/sentry/static/sentry/app/components/repositoryRow.jsx b/src/sentry/static/sentry/app/components/repositoryRow.jsx
index 61f17b60d6..bb087bfc66 100644
--- a/src/sentry/static/sentry/app/components/repositoryRow.jsx
+++ b/src/sentry/static/sentry/app/components/repositoryRow.jsx
@@ -44,7 +44,9 @@ class RepositoryRow extends React.Component {
     const {api, orgId, repository, onRepositoryChange} = this.props;
     cancelDeleteRepository(api, orgId, repository.id).then(
       data => {
-        if (onRepositoryChange) onRepositoryChange(data);
+        if (onRepositoryChange) {
+          onRepositoryChange(data);
+        }
       },
       () => {}
     );
@@ -54,7 +56,9 @@ class RepositoryRow extends React.Component {
     const {api, orgId, repository, onRepositoryChange} = this.props;
     deleteRepository(api, orgId, repository.id).then(
       data => {
-        if (onRepositoryChange) onRepositoryChange(data);
+        if (onRepositoryChange) {
+          onRepositoryChange(data);
+        }
       },
       () => {}
     );
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
index 33df55b660..14a5a1c928 100644
--- a/src/sentry/static/sentry/app/components/resultGrid.jsx
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -22,7 +22,9 @@ class Filter extends React.Component {
     const selected = this.props.options.filter(item => {
       return item[0] === (this.props.value || '');
     })[0];
-    if (selected) return this.props.name + ': ' + selected[1];
+    if (selected) {
+      return this.props.name + ': ' + selected[1];
+    }
     return this.props.name + ': ' + 'Any';
   };
 
@@ -119,7 +121,9 @@ class SortBy extends React.Component {
   };
 
   render() {
-    if (this.props.options.length === 0) return null;
+    if (this.props.options.length === 0) {
+      return null;
+    }
 
     return (
       <div className="sort-options">
diff --git a/src/sentry/static/sentry/app/components/search/index.jsx b/src/sentry/static/sentry/app/components/search/index.jsx
index e1207cc9b1..e92d273e2c 100644
--- a/src/sentry/static/sentry/app/components/search/index.jsx
+++ b/src/sentry/static/sentry/app/components/search/index.jsx
@@ -78,7 +78,9 @@ class Search extends React.Component {
   }
 
   handleSelect = (item, state) => {
-    if (!item) return;
+    if (!item) {
+      return;
+    }
 
     analytics(`${this.props.entryPoint}.select`, {query: state && state.inputValue});
 
@@ -91,7 +93,9 @@ class Search extends React.Component {
       return;
     }
 
-    if (!to) return;
+    if (!to) {
+      return;
+    }
 
     if (to.startsWith('http')) {
       const open = window.open();
@@ -114,7 +118,9 @@ class Search extends React.Component {
   };
 
   saveQueryMetrics = debounce(query => {
-    if (!query) return;
+    if (!query) {
+      return;
+    }
     analytics(`${this.props.entryPoint}.query`, {query});
   }, 200);
 
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index 03a68fb8ab..5907c411b7 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -124,7 +124,9 @@ async function createIntegrationResults(integrationsPromise, orgId) {
 
 async function createShortIdLookupResult(shortIdLookupPromise) {
   const shortIdLookup = await shortIdLookupPromise;
-  if (!shortIdLookup) return null;
+  if (!shortIdLookup) {
+    return null;
+  }
 
   const issue = shortIdLookup && shortIdLookup.group;
   return {
@@ -142,7 +144,9 @@ async function createShortIdLookupResult(shortIdLookupPromise) {
 
 async function createEventIdLookupResult(eventIdLookupPromise) {
   const eventIdLookup = await eventIdLookupPromise;
-  if (!eventIdLookup) return null;
+  if (!eventIdLookup) {
+    return null;
+  }
 
   const event = eventIdLookup && eventIdLookup.event;
   return {
@@ -192,7 +196,9 @@ class ApiSource extends React.Component {
 
     this.api = new Client();
 
-    if (typeof props.query !== 'undefined') this.doSearch(props.query);
+    if (typeof props.query !== 'undefined') {
+      this.doSearch(props.query);
+    }
   }
 
   componentWillReceiveProps(nextProps) {
@@ -252,13 +258,17 @@ class ApiSource extends React.Component {
     );
 
     const directRequests = directUrls.map(url => {
-      if (!url) return Promise.resolve(null);
+      if (!url) {
+        return Promise.resolve(null);
+      }
 
       return this.api.requestPromise(url).then(
         resp => resp,
         err => {
           // No need to log 404 errors
-          if (err && err.status === 404) return null;
+          if (err && err.status === 404) {
+            return null;
+          }
           this.handleRequestError(err, {orgId, url});
           return null;
         }
@@ -355,7 +365,9 @@ class ApiSource extends React.Component {
       createEventIdLookupResult(eventIdLookup),
     ])).filter(result => !!result);
 
-    if (!directResults.length) return [];
+    if (!directResults.length) {
+      return [];
+    }
 
     return directResults;
   }
diff --git a/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx b/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
index d40bb849d6..07d32ee5fc 100644
--- a/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
@@ -63,8 +63,9 @@ class RouteSource extends React.Component {
     if (
       prevProps.project === this.props.project &&
       prevProps.organization === this.props.organization
-    )
+    ) {
       return;
+    }
 
     this.createSearch();
   }
diff --git a/src/sentry/static/sentry/app/components/shareIssue.jsx b/src/sentry/static/sentry/app/components/shareIssue.jsx
index 40959d65dd..42bb327c59 100644
--- a/src/sentry/static/sentry/app/components/shareIssue.jsx
+++ b/src/sentry/static/sentry/app/components/shareIssue.jsx
@@ -30,7 +30,9 @@ class ShareUrlContainer extends React.Component {
 
   // Select URL when its container is clicked
   handleCopyClick = () => {
-    if (!this.urlRef) return;
+    if (!this.urlRef) {
+      return;
+    }
     selectText(ReactDOM.findDOMNode(this.urlRef));
   };
 
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index ec7a6db6b0..04fc4a023c 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -103,7 +103,9 @@ class Broadcasts extends React.Component {
 
   markSeen = () => {
     const unseenBroadcastIds = this.unseenIds;
-    if (unseenBroadcastIds.length === 0) return;
+    if (unseenBroadcastIds.length === 0) {
+      return;
+    }
 
     markBroadcastsAsSeen(this.props.api, unseenBroadcastIds).then(data => {
       this.setState(state => ({
diff --git a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
index 167105ced1..4aabf8cc6e 100644
--- a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
@@ -50,12 +50,16 @@ const Incidents = createReactClass({
     } = this.props;
 
     const {status} = this.state;
-    if (!status) return null;
+    if (!status) {
+      return null;
+    }
 
     const active = currentPanel === 'statusupdate';
     const isEmpty = !status.incidents || status.incidents.length === 0;
 
-    if (isEmpty) return null;
+    if (isEmpty) {
+      return null;
+    }
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 572679f451..99ef6d7480 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -46,7 +46,9 @@ class Sidebar extends React.Component {
       showPanel: false,
     };
 
-    if (!window.matchMedia) return;
+    if (!window.matchMedia) {
+      return;
+    }
     // TODO(billy): We should consider moving this into a component
     this.mq = window.matchMedia(`(max-width: ${theme.breakpoints[0]})`);
     this.mq.addListener(this.handleMediaQueryChange);
@@ -83,7 +85,9 @@ class Sidebar extends React.Component {
       this.hidePanel();
     }
 
-    if (collapsed === nextProps.collapsed) return;
+    if (collapsed === nextProps.collapsed) {
+      return;
+    }
 
     this.doCollapse(nextProps.collapsed);
   }
@@ -150,7 +154,9 @@ class Sidebar extends React.Component {
 
   // Hide slideout panel
   hidePanel = () => {
-    if (!this.state.sidePanel && this.state.currentPanel === '') return;
+    if (!this.state.sidePanel && this.state.currentPanel === '') {
+      return;
+    }
 
     this.setState({
       showPanel: false,
@@ -195,8 +201,11 @@ class Sidebar extends React.Component {
   };
 
   togglePanel = (panel, e) => {
-    if (this.state.currentPanel === panel) this.hidePanel();
-    else this.showPanel(panel);
+    if (this.state.currentPanel === panel) {
+      this.hidePanel();
+    } else {
+      this.showPanel(panel);
+    }
   };
 
   documentClickHandler = evt => {
@@ -508,7 +517,9 @@ const SidebarContainer = withRouter(
     },
 
     onPreferenceChange(store) {
-      if (store.collapsed === this.state.collapsed) return;
+      if (store.collapsed === this.state.collapsed) {
+        return;
+      }
 
       this.setState({
         collapsed: store.collapsed,
diff --git a/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx b/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx
index d5bc3ce0f6..20d1e684ee 100644
--- a/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/onboardingStatus.jsx
@@ -35,8 +35,12 @@ class OnboardingStatus extends React.Component {
 
   render() {
     const {collapsed, org, currentPanel, hidePanel, showPanel, onShowPanel} = this.props;
-    if (typeof org.features === 'undefined' || org.features.indexOf('onboarding') === -1)
+    if (
+      typeof org.features === 'undefined' ||
+      org.features.indexOf('onboarding') === -1
+    ) {
       return null;
+    }
 
     const doneTasks = (org.onboardingTasks || []).filter(
       task => task.status === 'complete' || task.status === 'skipped'
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
index 50cdcc6bf2..396eb5b7e2 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.jsx
@@ -50,7 +50,9 @@ class SidebarItem extends React.Component {
   handleClick = e => {
     const {id, onClick} = this.props;
 
-    if (typeof onClick !== 'function') return;
+    if (typeof onClick !== 'function') {
+      return;
+    }
 
     onClick(id, e);
   };
@@ -116,7 +118,9 @@ class SidebarItem extends React.Component {
 export default withRouter(SidebarItem);
 
 const getActiveStyle = ({active, theme}) => {
-  if (!active) return '';
+  if (!active) {
+    return '';
+  }
   return css`
     color: ${theme.white};
 
@@ -209,7 +213,9 @@ const SidebarItemLabel = styled('span')`
 `;
 
 const getCollapsedBadgeStyle = ({collapsed, theme}) => {
-  if (!collapsed) return '';
+  if (!collapsed) {
+    return '';
+  }
 
   return css`
     text-indent: -99999em;
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar.jsx b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
index 86ad8fb7a3..9875b5d9f6 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar.jsx
@@ -355,7 +355,9 @@ class SmartSearchBar extends React.Component {
 
       const tag = supportedTags[tagName];
 
-      if (!tag) return undefined;
+      if (!tag) {
+        return undefined;
+      }
 
       // Ignore the environment tag if the feature is active and excludeEnvironment = true
       if (this.props.excludeEnvironment && tagName === 'environment') {
@@ -422,7 +424,9 @@ class SmartSearchBar extends React.Component {
     const state = this.state;
     const searchItems = state.searchItems;
 
-    if (!searchItems.length) return;
+    if (!searchItems.length) {
+      return;
+    }
 
     if (evt.key === 'ArrowDown' || evt.key === 'ArrowUp') {
       evt.preventDefault();
diff --git a/src/sentry/static/sentry/app/components/splitDiff.jsx b/src/sentry/static/sentry/app/components/splitDiff.jsx
index 75ab1c60c8..20d7a707e1 100644
--- a/src/sentry/static/sentry/app/components/splitDiff.jsx
+++ b/src/sentry/static/sentry/app/components/splitDiff.jsx
@@ -24,7 +24,9 @@ class SplitDiff extends React.Component {
     const {className, type, base, target} = this.props;
     const diffFn = diffFnMap[type];
 
-    if (typeof diffFn !== 'function') return null;
+    if (typeof diffFn !== 'function') {
+      return null;
+    }
 
     const baseLines = base.split('\n');
     const targetLines = target.split('\n');
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 1b529fc4a8..e1ad9aa122 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -77,9 +77,15 @@ const StreamGroup = createReactClass({
   },
 
   toggleSelect(evt) {
-    if (evt.target.tagName === 'A') return;
-    if (evt.target.tagName === 'INPUT') return;
-    if ($(evt.target).parents('a').length !== 0) return;
+    if (evt.target.tagName === 'A') {
+      return;
+    }
+    if (evt.target.tagName === 'INPUT') {
+      return;
+    }
+    if ($(evt.target).parents('a').length !== 0) {
+      return;
+    }
 
     SelectedGroupStore.toggleSelect(this.state.data.id);
   },
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 2448749fa7..2dcf88dd01 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -27,7 +27,9 @@ class GroupChart extends React.Component {
     const stats = this.props.statsPeriod
       ? this.props.data.stats[this.props.statsPeriod]
       : null;
-    if (!stats || !stats.length) return null;
+    if (!stats || !stats.length) {
+      return null;
+    }
 
     const chartData = stats.map(point => {
       return {x: point[0], y: point[1]};
diff --git a/src/sentry/static/sentry/app/components/strictClick.jsx b/src/sentry/static/sentry/app/components/strictClick.jsx
index 96d626b87e..f8ad59c288 100644
--- a/src/sentry/static/sentry/app/components/strictClick.jsx
+++ b/src/sentry/static/sentry/app/components/strictClick.jsx
@@ -51,7 +51,9 @@ class StrictClick extends React.PureComponent {
 
   render() {
     // Bail out early if there is no onClick handler
-    if (!this.props.onClick) return this.props.children;
+    if (!this.props.onClick) {
+      return this.props.children;
+    }
 
     return React.cloneElement(this.props.children, {
       onMouseDown: this.handleMouseDown,
diff --git a/src/sentry/static/sentry/app/components/truncate.jsx b/src/sentry/static/sentry/app/components/truncate.jsx
index 1da5b18eee..f0297ade3a 100644
--- a/src/sentry/static/sentry/app/components/truncate.jsx
+++ b/src/sentry/static/sentry/app/components/truncate.jsx
@@ -22,12 +22,16 @@ class Truncate extends React.Component {
 
   onFocus = e => {
     const {value, maxLength} = this.props;
-    if (value.length <= maxLength) return;
+    if (value.length <= maxLength) {
+      return;
+    }
     this.setState({isExpanded: true});
   };
 
   onBlur = e => {
-    if (this.state.isExpanded) this.setState({isExpanded: false});
+    if (this.state.isExpanded) {
+      this.setState({isExpanded: false});
+    }
   };
 
   render() {
@@ -49,7 +53,9 @@ class Truncate extends React.Component {
 
     let className = this.props.className || '';
     className += ' truncated';
-    if (this.state.isExpanded) className += ' expanded';
+    if (this.state.isExpanded) {
+      className += ' expanded';
+    }
 
     return (
       <span
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index ac55716826..ef31dec182 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -13,7 +13,9 @@ const AlertStore = Reflux.createStore({
 
   onAddAlert(alert) {
     const alertAlreadyExists = this.alerts.some(a => a.id == alert.id);
-    if (alertAlreadyExists && alert.noDuplicates) return;
+    if (alertAlreadyExists && alert.noDuplicates) {
+      return;
+    }
 
     if (defined(alert.id)) {
       let expirations = localStorage.getItem('alerts:muted');
diff --git a/src/sentry/static/sentry/app/stores/formSearchStore.jsx b/src/sentry/static/sentry/app/stores/formSearchStore.jsx
index c24f44ac26..33d899846e 100644
--- a/src/sentry/static/sentry/app/stores/formSearchStore.jsx
+++ b/src/sentry/static/sentry/app/stores/formSearchStore.jsx
@@ -26,7 +26,9 @@ const FormSearchStore = Reflux.createStore({
    */
   onLoadSearchMap(searchMap) {
     // Only load once
-    if (this.searchMap !== null) return;
+    if (this.searchMap !== null) {
+      return;
+    }
 
     this.searchMap = searchMap;
     this.trigger(this.searchMap);
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 817869a31f..b4261e98d1 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -102,7 +102,9 @@ const GroupStore = Reflux.createStore({
 
   indexOfActivity(group_id, id) {
     const group = this.get(group_id);
-    if (!group) return -1;
+    if (!group) {
+      return -1;
+    }
 
     for (let i = 0; i < group.activity.length; i++) {
       if (group.activity[i].id === id) {
@@ -114,7 +116,9 @@ const GroupStore = Reflux.createStore({
 
   addActivity(id, data, index = -1) {
     const group = this.get(id);
-    if (!group) return;
+    if (!group) {
+      return;
+    }
 
     // insert into beginning by default
     if (index === -1) {
@@ -122,17 +126,23 @@ const GroupStore = Reflux.createStore({
     } else {
       group.activity.splice(index, 0, data);
     }
-    if (data.type === 'note') group.numComments++;
+    if (data.type === 'note') {
+      group.numComments++;
+    }
 
     this.trigger(new Set([id]));
   },
 
   updateActivity(group_id, id, data) {
     const group = this.get(group_id);
-    if (!group) return;
+    if (!group) {
+      return;
+    }
 
     const index = this.indexOfActivity(group_id, id);
-    if (index === -1) return;
+    if (index === -1) {
+      return;
+    }
 
     // Here, we want to merge the new `data` being passed in
     // into the existing `data` object. This effectively
@@ -143,14 +153,20 @@ const GroupStore = Reflux.createStore({
 
   removeActivity(group_id, id) {
     const group = this.get(group_id);
-    if (!group) return -1;
+    if (!group) {
+      return -1;
+    }
 
     const index = this.indexOfActivity(group.id, id);
-    if (index === -1) return -1;
+    if (index === -1) {
+      return -1;
+    }
 
     const activity = group.activity.splice(index, 1);
 
-    if (activity[0].type === 'note') group.numComments--;
+    if (activity[0].type === 'note') {
+      group.numComments--;
+    }
 
     this.trigger(new Set([group.id]));
     return index;
@@ -246,7 +262,9 @@ const GroupStore = Reflux.createStore({
   onDeleteError(changeId, itemIds, response) {
     showAlert(t('Unable to delete events. Please try again.'), 'error');
 
-    if (!itemIds) return;
+    if (!itemIds) {
+      return;
+    }
 
     itemIds.forEach(itemId => {
       this.clearStatus(itemId, 'delete');
diff --git a/src/sentry/static/sentry/app/stores/groupingStore.jsx b/src/sentry/static/sentry/app/stores/groupingStore.jsx
index c9c259bbc6..ff583799ff 100644
--- a/src/sentry/static/sentry/app/stores/groupingStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupingStore.jsx
@@ -181,7 +181,9 @@ const GroupingStore = Reflux.createStore({
 
     // Don't do anything if item is busy
     const state = this.mergeState.has(id) && this.mergeState.get(id);
-    if (state && state.busy === true) return;
+    if (state && state.busy === true) {
+      return;
+    }
 
     if (this.mergeList.has(id)) {
       this.mergeList.delete(id);
@@ -205,7 +207,9 @@ const GroupingStore = Reflux.createStore({
     // Uncheck an item to unmerge
     const state = this.unmergeState.get(fingerprint);
 
-    if (state && state.busy === true) return;
+    if (state && state.busy === true) {
+      return;
+    }
 
     if (this.unmergeList.has(fingerprint)) {
       this.unmergeList.delete(fingerprint);
diff --git a/src/sentry/static/sentry/app/stores/guideStore.jsx b/src/sentry/static/sentry/app/stores/guideStore.jsx
index 5066db13d8..2224e835ae 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.jsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.jsx
@@ -118,7 +118,9 @@ const GuideStore = Reflux.createStore({
   },
 
   updatePrevGuide(bestGuide) {
-    if (!bestGuide) return;
+    if (!bestGuide) {
+      return;
+    }
 
     if (!this.state.prevGuide || this.state.prevGuide.id !== bestGuide.id) {
       this.recordCue(bestGuide.id, bestGuide.cue);
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index 44e7f8f5f5..9764fe7728 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -81,7 +81,9 @@ const IndicatorStore = Reflux.createStore({
 
   // Remove a single indicator
   remove(indicator) {
-    if (!indicator) return;
+    if (!indicator) {
+      return;
+    }
 
     this.items = this.items.filter(item => {
       return item !== indicator;
diff --git a/src/sentry/static/sentry/app/stores/latestContextStore.jsx b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
index 4e98c6ed74..e77804646c 100644
--- a/src/sentry/static/sentry/app/stores/latestContextStore.jsx
+++ b/src/sentry/static/sentry/app/stores/latestContextStore.jsx
@@ -49,10 +49,16 @@ const LatestContextStore = Reflux.createStore({
 
   onUpdateOrganization(org) {
     // Don't do anything if base/target orgs are falsey
-    if (!this.state.organization) return;
-    if (!org) return;
+    if (!this.state.organization) {
+      return;
+    }
+    if (!org) {
+      return;
+    }
     // Check to make sure current active org is what has been updated
-    if (org.slug !== this.state.organization.slug) return;
+    if (org.slug !== this.state.organization.slug) {
+      return;
+    }
 
     this.state = {
       ...this.state,
diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index ade04d194b..3bb0cba18d 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -16,7 +16,9 @@ const MemberListStore = Reflux.createStore({
   },
 
   getById(id) {
-    if (!this.items) return null;
+    if (!this.items) {
+      return null;
+    }
 
     id = '' + id;
     for (let i = 0; i < this.items.length; i++) {
@@ -28,7 +30,9 @@ const MemberListStore = Reflux.createStore({
   },
 
   getByEmail(email) {
-    if (!this.items) return null;
+    if (!this.items) {
+      return null;
+    }
 
     email = email.toLowerCase();
     for (let i = 0; i < this.items.length; i++) {
diff --git a/src/sentry/static/sentry/app/stores/organizationsStore.jsx b/src/sentry/static/sentry/app/stores/organizationsStore.jsx
index 005aa23d4e..b55a4a6ae9 100644
--- a/src/sentry/static/sentry/app/stores/organizationsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationsStore.jsx
@@ -20,7 +20,9 @@ const OrganizationsStore = Reflux.createStore({
   },
 
   onChangeSlug(prev, next) {
-    if (prev.slug === next.slug) return;
+    if (prev.slug === next.slug) {
+      return;
+    }
 
     this.remove(prev.slug);
     this.add(next);
diff --git a/src/sentry/static/sentry/app/stores/pluginsStore.jsx b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
index db298eba3f..8254ad3b10 100644
--- a/src/sentry/static/sentry/app/stores/pluginsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
@@ -71,7 +71,9 @@ const PluginsStore = Reflux.createStore({
   },
 
   onUpdate(id, updateObj) {
-    if (!this.plugins) return;
+    if (!this.plugins) {
+      return;
+    }
 
     const plugin = this.plugins.get(id);
     const newPlugin = {
@@ -90,7 +92,9 @@ const PluginsStore = Reflux.createStore({
 
   onUpdateError(id, updateObj, err) {
     const origPlugin = this.updating.get(id);
-    if (!origPlugin) return;
+    if (!origPlugin) {
+      return;
+    }
 
     this.plugins.set(id, origPlugin);
     this.updating.delete(id);
diff --git a/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
index 4bfecb8524..c40c355800 100644
--- a/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStatsStore.jsx
@@ -39,7 +39,9 @@ const ProjectsStatsStore = Reflux.createStore({
   onUpdate(projectSlug, data) {
     const project = this.getBySlug(projectSlug);
     this.updatingItems.set(projectSlug, project);
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     const newProject = {
       ...project,
@@ -65,7 +67,9 @@ const ProjectsStatsStore = Reflux.createStore({
    */
   onUpdateError(err, projectSlug) {
     const project = this.updatingItems.get(projectSlug);
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     this.updatingItems.delete(projectSlug);
     // Restore old project
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index b5d1784bd0..ac42beb265 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -33,7 +33,9 @@ const ProjectsStore = Reflux.createStore({
     const prevProject = this.getBySlug(prevSlug);
 
     // This shouldn't happen
-    if (!prevProject) return;
+    if (!prevProject) {
+      return;
+    }
 
     const newProject = {
       ...prevProject,
@@ -103,7 +105,9 @@ const ProjectsStore = Reflux.createStore({
 
   onRemoveTeam(teamSlug, projectSlug) {
     const project = this.getBySlug(projectSlug);
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     this.removeTeamFromProject(teamSlug, project);
     this.trigger(new Set([project.id]));
@@ -113,7 +117,9 @@ const ProjectsStore = Reflux.createStore({
     const project = this.getBySlug(projectSlug);
 
     // Don't do anything if we can't find a project
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     this.itemsById = {
       ...this.itemsById,
@@ -150,8 +156,12 @@ const ProjectsStore = Reflux.createStore({
 
   getAll() {
     return Object.values(this.itemsById).sort((a, b) => {
-      if (a.slug > b.slug) return 1;
-      if (a.slug < b.slug) return -1;
+      if (a.slug > b.slug) {
+        return 1;
+      }
+      if (a.slug < b.slug) {
+        return -1;
+      }
       return 0;
     });
   },
diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index 6dc9117de1..5781a1e8d5 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -76,7 +76,9 @@ const SelectedGroupStore = Reflux.createStore({
   },
 
   toggleSelect(itemId) {
-    if (!this.records.hasOwnProperty(itemId)) return;
+    if (!this.records.hasOwnProperty(itemId)) {
+      return;
+    }
     this.records[itemId] = !this.records[itemId];
     this.trigger();
   },
diff --git a/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx b/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
index 3729a7e35f..a720e7eed0 100644
--- a/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
+++ b/src/sentry/static/sentry/app/stores/settingsBreadcrumbStore.jsx
@@ -26,7 +26,9 @@ const SettingsBreadcrumbStore = Reflux.createStore({
   onTrimMappings(routes) {
     const routePath = getRouteStringFromRoutes(routes);
     for (const fullPath in this.pathMap) {
-      if (!routePath.startsWith(fullPath)) delete this.pathMap[fullPath];
+      if (!routePath.startsWith(fullPath)) {
+        delete this.pathMap[fullPath];
+      }
     }
     this.trigger(this.pathMap);
   },
diff --git a/src/sentry/static/sentry/app/stores/tagStore.jsx b/src/sentry/static/sentry/app/stores/tagStore.jsx
index cac0e09235..1733be6243 100644
--- a/src/sentry/static/sentry/app/stores/tagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/tagStore.jsx
@@ -126,7 +126,9 @@ const TagStore = Reflux.createStore({
           const old = this.tags[tag.key];
 
           // Don't override predefined filters (e.g. "is")
-          if (!old || !old.predefined) obj[tag.key] = tag;
+          if (!old || !old.predefined) {
+            obj[tag.key] = tag;
+          }
 
           return obj;
         },
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 5c57202b83..a1245d6ad8 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -23,7 +23,9 @@ const TeamStore = Reflux.createStore({
   },
 
   onUpdateSuccess(itemId, response) {
-    if (!response) return;
+    if (!response) {
+      return;
+    }
 
     const item = this.getBySlug(itemId);
 
diff --git a/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx b/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx
index 2976a40012..b931ace947 100644
--- a/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx
+++ b/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx
@@ -1,6 +1,8 @@
 // Converts arg from a `select2` choices array to a `react-select` `options` array
 const convertFromSelect2Choices = choices => {
-  if (!Array.isArray(choices)) return null;
+  if (!Array.isArray(choices)) {
+    return null;
+  }
 
   // Accepts an array of strings or an array of tuples
   return choices.map(
diff --git a/src/sentry/static/sentry/app/utils/getPeriod.jsx b/src/sentry/static/sentry/app/utils/getPeriod.jsx
index 35029697b2..d02096102b 100644
--- a/src/sentry/static/sentry/app/utils/getPeriod.jsx
+++ b/src/sentry/static/sentry/app/utils/getPeriod.jsx
@@ -23,7 +23,9 @@ export const getPeriod = ({period, start, end}, {shouldDoublePeriod} = {}) => {
   // you can not specify both relative and absolute periods
   // relative period takes precendence
   if (period) {
-    if (!shouldDoublePeriod) return {statsPeriod: period};
+    if (!shouldDoublePeriod) {
+      return {statsPeriod: period};
+    }
     const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/);
 
     return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};
diff --git a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
index cb7e7a6347..0943c948dd 100644
--- a/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
+++ b/src/sentry/static/sentry/app/utils/getRouteStringFromRoutes.jsx
@@ -7,7 +7,9 @@
  * @return String Returns a route path
  */
 export default function getRouteStringFromRoutes(routes) {
-  if (!Array.isArray(routes)) return '';
+  if (!Array.isArray(routes)) {
+    return '';
+  }
 
   // Strip the first route (path: '/') since the subsequent children routes
   // are all absolute paths
diff --git a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
index c5f2089fdc..7ff596a952 100644
--- a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
+++ b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
@@ -2,8 +2,12 @@ import * as Sentry from '@sentry/browser';
 
 export default function handleXhrErrorResponse(message) {
   return resp => {
-    if (!resp) return;
-    if (!resp.responseJSON) return;
+    if (!resp) {
+      return;
+    }
+    if (!resp.responseJSON) {
+      return;
+    }
 
     const {responseJSON} = resp;
 
@@ -18,7 +22,9 @@ export default function handleXhrErrorResponse(message) {
     }
 
     // Ignore sudo-required errors
-    if (responseJSON.detail.code === 'sudo-required') return;
+    if (responseJSON.detail.code === 'sudo-required') {
+      return;
+    }
 
     if (typeof responseJSON.detail.message === 'string') {
       Sentry.withScope(scope => {
diff --git a/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx b/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
index 5b10fcb100..a752c5d995 100644
--- a/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
+++ b/src/sentry/static/sentry/app/utils/highlightFuseMatches.jsx
@@ -67,7 +67,9 @@ const getFuseMatches = ({value, indices}) => {
  */
 const highlightFuseMatches = (matchObj, Marker = 'mark') => {
   return getFuseMatches(matchObj).map(({highlight, text}, index) => {
-    if (!text) return null;
+    if (!text) {
+      return null;
+    }
     if (highlight) {
       return <Marker key={index}>{text}</Marker>;
     }
diff --git a/src/sentry/static/sentry/app/utils/marked.jsx b/src/sentry/static/sentry/app/utils/marked.jsx
index a2a31fe756..f6a90334da 100644
--- a/src/sentry/static/sentry/app/utils/marked.jsx
+++ b/src/sentry/static/sentry/app/utils/marked.jsx
@@ -23,7 +23,9 @@ const safeLinkPattern = /^(https?:|mailto:)/i;
 
 Renderer.prototype.link = function(href, title, text) {
   // For a bad link, just return the plain text href
-  if (this.options.sanitize && !isSafeHref(href, safeLinkPattern)) return href;
+  if (this.options.sanitize && !isSafeHref(href, safeLinkPattern)) {
+    return href;
+  }
 
   let out = '<a href="' + href + '"';
   if (title) {
@@ -38,7 +40,9 @@ const safeImagePattern = /^https?:\/\/./i;
 
 Renderer.prototype.image = function(href, title, text) {
   // For a bad image, return an empty string
-  if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) return '';
+  if (this.options.sanitize && !isSafeHref(href, safeImagePattern)) {
+    return '';
+  }
 
   let out = '<img src="' + href + '" alt="' + text + '"';
   if (title) {
diff --git a/src/sentry/static/sentry/app/utils/parseApiError.jsx b/src/sentry/static/sentry/app/utils/parseApiError.jsx
index 3a6add4850..5c23174888 100644
--- a/src/sentry/static/sentry/app/utils/parseApiError.jsx
+++ b/src/sentry/static/sentry/app/utils/parseApiError.jsx
@@ -2,9 +2,13 @@ export default function parseApiError(resp) {
   const {detail} = (resp && resp.responseJSON) || {};
 
   // return immediately if string
-  if (typeof detail === 'string') return detail;
+  if (typeof detail === 'string') {
+    return detail;
+  }
 
-  if (detail && detail.message) return detail.message;
+  if (detail && detail.message) {
+    return detail.message;
+  }
 
   return 'Unknown API Error';
 }
diff --git a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx b/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
index 784f7ccd69..5973c25007 100644
--- a/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
+++ b/src/sentry/static/sentry/app/utils/replaceRouterParams.jsx
@@ -9,7 +9,9 @@ export default function replaceRouterParams(route, params) {
   // replace with current params
   matches.forEach(param => {
     const paramName = param.slice(1);
-    if (typeof params[paramName] === 'undefined') return;
+    if (typeof params[paramName] === 'undefined') {
+      return;
+    }
 
     route = route.replace(param, params[paramName]);
   });
diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
index cdd93d815b..9ffd8814a8 100644
--- a/src/sentry/static/sentry/app/utils/stream.jsx
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -51,12 +51,16 @@ export function objToQuery(queryObj) {
   const tags = _.omit(queryObj, '__text');
 
   const parts = _.map(tags, (value, tagKey) => {
-    if (value.indexOf(' ') > -1) value = `"${value}"`;
+    if (value.indexOf(' ') > -1) {
+      value = `"${value}"`;
+    }
 
     return `${tagKey}:${value}`;
   });
 
-  if (queryObj.__text) parts.push(queryObj.__text);
+  if (queryObj.__text) {
+    parts.push(queryObj.__text);
+  }
 
   return parts.join(' ');
 }
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index 391b3ce7b6..93b98b56d6 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -22,7 +22,9 @@ class StreamManager {
 
   push(items = []) {
     items = [].concat(items);
-    if (items.length === 0) return this;
+    if (items.length === 0) {
+      return this;
+    }
 
     items = items.filter(item => item.hasOwnProperty('id'));
 
@@ -46,7 +48,9 @@ class StreamManager {
 
   unshift(items = []) {
     items = [].concat(items);
-    if (items.length === 0) return this;
+    if (items.length === 0) {
+      return this;
+    }
 
     items.forEach(item => removeFromList(item.id, this.idList));
     const ids = items.map(item => item.id);
diff --git a/src/sentry/static/sentry/app/utils/tracing.jsx b/src/sentry/static/sentry/app/utils/tracing.jsx
index 11c4cf57f8..fc13991f74 100644
--- a/src/sentry/static/sentry/app/utils/tracing.jsx
+++ b/src/sentry/static/sentry/app/utils/tracing.jsx
@@ -26,11 +26,15 @@ export function getRoute() {
 }
 
 export function getTransactionId() {
-  if (!transactionId) startTransaction();
+  if (!transactionId) {
+    startTransaction();
+  }
   return transactionId;
 }
 
 export function getSpanId() {
-  if (!spanId) startTransaction();
+  if (!spanId) {
+    startTransaction();
+  }
   return spanId;
 }
diff --git a/src/sentry/static/sentry/app/utils/withPlugins.jsx b/src/sentry/static/sentry/app/utils/withPlugins.jsx
index f72cacfd2f..4e7160ef28 100644
--- a/src/sentry/static/sentry/app/utils/withPlugins.jsx
+++ b/src/sentry/static/sentry/app/utils/withPlugins.jsx
@@ -40,13 +40,17 @@ const withPlugins = WrappedComponent =>
       //
       // This is for the unusual case where component is mounted and receives a new org/project prop
       // e.g. when switching projects via breadcrumbs in settings.
-      if (!defined(prevProject) || !defined(prevOrg)) return;
+      if (!defined(prevProject) || !defined(prevOrg)) {
+        return;
+      }
 
       const isOrgSame = prevOrg.slug === organization.slug;
       const isProjectSame = prevProject.slug === project.slug;
 
       // Don't do anything if org and project are the same
-      if (isOrgSame && isProjectSame) return;
+      if (isOrgSame && isProjectSame) {
+        return;
+      }
 
       this.fetchPlugins();
     },
@@ -55,7 +59,9 @@ const withPlugins = WrappedComponent =>
       const organization = this.props.organization || this.getOrganization();
       const project = this.props.project || this.getProject();
 
-      if (!project || !organization) return;
+      if (!project || !organization) {
+        return;
+      }
 
       fetchPlugins({projectId: project.slug, orgId: organization.slug});
     },
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
index 5e6c479c12..bdc30c0c86 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/apiChart.jsx
@@ -118,8 +118,11 @@ export default createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
     return (
       <StackedBarChart
         series={this.getChartSeries()}
diff --git a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
index bb5085b166..34174e3a09 100644
--- a/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/admin/adminOverview/eventChart.jsx
@@ -142,8 +142,11 @@ export default createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
     return (
       <StackedBarChart
         series={this.getChartSeries()}
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index ce1af0e8aa..7ee9f5a13d 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -112,14 +112,18 @@ const App = createReactClass({
       const pageAllowsAnon = /^\/share\//.test(window.location.pathname);
 
       // Ignore error unless it is a 401
-      if (!jqXHR || jqXHR.status !== 401 || pageAllowsAnon) return;
+      if (!jqXHR || jqXHR.status !== 401 || pageAllowsAnon) {
+        return;
+      }
 
       const code = jqXHR?.responseJSON?.detail?.code;
       const extra = jqXHR?.responseJSON?.detail?.extra;
 
       // 401s can also mean sudo is required or it's a request that is allowed to fail
       // Ignore if these are the cases
-      if (code === 'sudo-required' || code === 'ignore') return;
+      if (code === 'sudo-required' || code === 'ignore') {
+        return;
+      }
 
       // If user must login via SSO, redirect to org login page
       if (code === 'sso-required') {
@@ -162,9 +166,15 @@ const App = createReactClass({
 
   onConfigStoreChange(config) {
     const newState = {};
-    if (config.needsUpgrade !== undefined) newState.needsUpgrade = config.needsUpgrade;
-    if (config.user !== undefined) newState.user = config.user;
-    if (Object.keys(newState).length > 0) this.setState(newState);
+    if (config.needsUpgrade !== undefined) {
+      newState.needsUpgrade = config.needsUpgrade;
+    }
+    if (config.user !== undefined) {
+      newState.user = config.user;
+    }
+    if (Object.keys(newState).length > 0) {
+      this.setState(newState);
+    }
   },
 
   @keydown('meta+shift+p', 'meta+k')
@@ -186,8 +196,12 @@ const App = createReactClass({
   },
 
   handleGlobalModalClose() {
-    if (!this.mainContainerRef) return;
-    if (typeof this.mainContainerRef.focus !== 'function') return;
+    if (!this.mainContainerRef) {
+      return;
+    }
+    if (typeof this.mainContainerRef.focus !== 'function') {
+      return;
+    }
 
     // Focus the main container to get hotkeys to keep working after modal closes
     this.mainContainerRef.focus();
diff --git a/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
index 337fe20c7f..9ba7ce1351 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/organization/groupEvents.jsx
@@ -131,13 +131,17 @@ const GroupEvents = createReactClass({
   renderBody() {
     let body;
 
-    if (this.state.loading) body = <LoadingIndicator />;
-    else if (this.state.error)
+    if (this.state.loading) {
+      body = <LoadingIndicator />;
+    } else if (this.state.error) {
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
-    else if (this.state.eventList.length > 0) body = this.renderResults();
-    else if (this.state.query && this.state.query !== '')
+    } else if (this.state.eventList.length > 0) {
+      body = this.renderResults();
+    } else if (this.state.query && this.state.query !== '') {
       body = this.renderNoQueryResults();
-    else body = this.renderEmpty();
+    } else {
+      body = this.renderEmpty();
+    }
 
     return body;
   },
diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
index 2181b448e8..fbb45e395b 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupEvents.jsx
@@ -192,13 +192,17 @@ const GroupEvents = createReactClass({
   renderBody() {
     let body;
 
-    if (this.state.loading) body = <LoadingIndicator />;
-    else if (this.state.error)
+    if (this.state.loading) {
+      body = <LoadingIndicator />;
+    } else if (this.state.error) {
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
-    else if (this.state.eventList.length > 0) body = this.renderResults();
-    else if (this.state.query && this.state.query !== '')
+    } else if (this.state.eventList.length > 0) {
+      body = this.renderResults();
+    } else if (this.state.query && this.state.query !== '') {
       body = this.renderNoQueryResults();
-    else body = this.renderEmpty();
+    } else {
+      body = this.renderEmpty();
+    }
 
     return body;
   },
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx
index 7502a3841b..dc44679e45 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/actions.jsx
@@ -121,7 +121,9 @@ const GroupDetailsActions = createReactClass({
   },
 
   getShareUrl(shareId, absolute) {
-    if (!shareId) return '';
+    if (!shareId) {
+      return '';
+    }
 
     const path = `/share/issue/${shareId}/`;
     if (!absolute) {
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
index 952da66581..01a11d63f0 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupDetails.jsx
@@ -178,12 +178,15 @@ const GroupDetails = createReactClass({
   getTitle() {
     const group = this.state.group;
 
-    if (!group) return 'Sentry';
+    if (!group) {
+      return 'Sentry';
+    }
 
     switch (group.type) {
       case 'error':
-        if (group.metadata.type && group.metadata.value)
+        if (group.metadata.type && group.metadata.value) {
           return `${group.metadata.type}: ${group.metadata.value}`;
+        }
         return group.metadata.type || group.metadata.value;
       case 'csp':
         return group.metadata.message;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx
index b315242875..129a77c6f8 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedItem.jsx
@@ -37,14 +37,20 @@ const MergedItem = createReactClass({
   },
 
   onGroupingChange({unmergeState}) {
-    if (!unmergeState) return;
+    if (!unmergeState) {
+      return;
+    }
 
     const {fingerprint} = this.props;
     const stateForId = unmergeState.has(fingerprint) && unmergeState.get(fingerprint);
-    if (!stateForId) return;
+    if (!stateForId) {
+      return;
+    }
 
     Object.keys(stateForId).forEach(key => {
-      if (stateForId[key] === this.state[key]) return;
+      if (stateForId[key] === this.state[key]) {
+        return;
+      }
 
       this.setState({
         [key]: stateForId[key],
@@ -65,7 +71,9 @@ const MergedItem = createReactClass({
   handleToggle(e) {
     const {disabled, fingerprint, event} = this.props;
 
-    if (disabled || this.state.busy) return;
+    if (disabled || this.state.busy) {
+      return;
+    }
 
     // clicking anywhere in the row will toggle the checkbox
     GroupingActions.toggleUnmerge([fingerprint, event.id]);
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx
index 25e20e7344..5163e76699 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupMerged/mergedToolbar.jsx
@@ -57,7 +57,9 @@ const MergedToolbar = createReactClass({
     const entries = this.state.unmergeList.entries();
 
     // `unmergeList` should only have 2 items in map
-    if (this.state.unmergeList.size !== 2) return;
+    if (this.state.unmergeList.size !== 2) {
+      return;
+    }
 
     // only need eventId, not fingerprint
     const [baseEventId, targetEventId] = Array.from(entries).map(
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
index 49b3ec8d65..e628dc3fe6 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -90,7 +90,9 @@ const CreateProject = createReactClass({
     const {projectName, platform, team, inFlight} = this.state;
 
     //prevent double-trigger
-    if (inFlight) return;
+    if (inFlight) {
+      return;
+    }
     this.setState({inFlight: true});
 
     if (!projectName) {
diff --git a/src/sentry/static/sentry/app/views/onboarding/progress.jsx b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
index ad9081a27b..7ecc37dc82 100644
--- a/src/sentry/static/sentry/app/views/onboarding/progress.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
@@ -64,8 +64,12 @@ const ProgressNodes = createReactClass({
     const {params} = this.props;
     const steps = this.getAsset('steps');
 
-    if (!params.projectId) return steps.project;
-    if (params.projectId && pathname.indexOf('/configure/') === -1) return steps.survey;
+    if (!params.projectId) {
+      return steps.project;
+    }
+    if (params.projectId && pathname.indexOf('/configure/') === -1) {
+      return steps.survey;
+    }
 
     return steps.configure;
   },
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 28e31bcbcd..56c7ed5af3 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -169,12 +169,16 @@ const OrganizationContext = createReactClass({
   },
 
   getTitle() {
-    if (this.state.organization) return this.state.organization.name;
+    if (this.state.organization) {
+      return this.state.organization.name;
+    }
     return 'Sentry';
   },
 
   renderSidebar() {
-    if (!this.props.includeSidebar) return null;
+    if (!this.props.includeSidebar) {
+      return null;
+    }
 
     return <Sidebar {...this.props} organization={this.state.organization} />;
   },
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx
index 004e05c51c..548a553f66 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx
@@ -155,7 +155,7 @@ const QueryName = styled('span')`
 `;
 
 const Chevron = styled(InlineSvg)`
-  ${p => (p.isOpen ? `transform: rotate(90deg);` : '')};
+  ${p => (p.isOpen ? 'transform: rotate(90deg);' : '')};
   margin-left: ${p => (p.isOpen ? space(0.5) : 0)};
   transition: all 0.25s;
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index c7e048e71d..9d0bb54c96 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -52,7 +52,9 @@ class DeletionPending extends Component {
   }
 
   onRestore = () => {
-    if (this.state.submitInProgress) return;
+    if (this.state.submitInProgress) {
+      return;
+    }
     this.setState({submitInProgress: true});
     this.api.request(`/organizations/${this.props.organization.slug}/`, {
       method: 'PUT',
@@ -127,12 +129,13 @@ class OrganizationDetailsBody extends Component {
   render() {
     const {organization} = this.context;
 
-    if (organization && organization.status)
+    if (organization && organization.status) {
       if (organization.status.id === 'pending_deletion') {
         return <DeletionPending organization={organization} />;
       } else if (organization.status.id === 'deletion_in_progress') {
         return <DeletionInProgress organization={organization} />;
       }
+    }
     return (
       <React.Fragment>
         {organization && <InstallPromptBanner organization={organization} />}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index 84342e9dfd..789f93e1b4 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -93,7 +93,9 @@ class Result extends React.Component {
   };
 
   updateDimensions = () => {
-    if (!this.container) return;
+    if (!this.container) {
+      return;
+    }
 
     this.setState({
       height: this.container.clientHeight,
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
index 19a0047942..754ee7a8eb 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
@@ -96,7 +96,9 @@ export default function createResultManager(queryBuilder) {
    * @returns {Void}
    */
   function updatePageLinks(pageLinks) {
-    if (!pageLinks) return;
+    if (!pageLinks) {
+      return;
+    }
     const links = parseLinkHeader(pageLinks);
     data.baseQuery.next = links.next.results ? links.next.cursor : null;
     data.baseQuery.previous = links.previous.results ? links.previous.cursor : null;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
index 2cf9f65c91..d423ef2716 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
@@ -146,7 +146,9 @@ class EventsRequest extends React.PureComponent {
       timeseriesData = null;
     }
 
-    if (this.unmounting) return;
+    if (this.unmounting) {
+      return;
+    }
 
     this.setState({
       reloading: false,
@@ -194,7 +196,9 @@ class EventsRequest extends React.PureComponent {
   transformPreviousPeriodData = (current, previous) => {
     // Need the current period data array so we can take the timestamp
     // so we can be sure the data lines up
-    if (!previous) return null;
+    if (!previous) {
+      return null;
+    }
 
     return {
       seriesName: 'Previous Period',
@@ -209,7 +213,9 @@ class EventsRequest extends React.PureComponent {
    * Aggregate all counts for each time stamp
    */
   transformAggregatedTimeseries = (data, seriesName) => {
-    if (!data) return null;
+    if (!data) {
+      return null;
+    }
 
     return {
       seriesName,
@@ -233,7 +239,9 @@ class EventsRequest extends React.PureComponent {
   };
 
   transformData = data => {
-    if (!data) return null;
+    if (!data) {
+      return null;
+    }
 
     return this.transformTimeseriesData(data);
   };
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
index 871171ad87..c22809ee2c 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
@@ -81,7 +81,9 @@ export default class AddIntegration extends React.Component {
       return;
     }
 
-    if (!data) return;
+    if (!data) {
+      return;
+    }
 
     this.props.onInstall(data);
     IndicatorStore.addSuccess(t(`${this.props.provider.name} added`));
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/checkInIcon.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/checkInIcon.jsx
index 0e959ba9a6..a4f4a60e09 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/checkInIcon.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/checkInIcon.jsx
@@ -1,7 +1,9 @@
 import styled from 'react-emotion';
 
 const getBackgroundColor = p => {
-  if (p.color) return `background: ${p.color};`;
+  if (p.color) {
+    return `background: ${p.color};`;
+  }
 
   return `background: ${p.status === 'error'
     ? p.theme.error
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/details.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/details.jsx
index 1b858a2667..3134b2e048 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/details.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/details.jsx
@@ -24,8 +24,9 @@ class OrganizationMonitorDetails extends AsyncView {
   }
 
   getTitle() {
-    if (this.state.monitor)
+    if (this.state.monitor) {
       return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;
+    }
     return `Monitors - ${this.props.params.orgId}`;
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/edit.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/edit.jsx
index 1578b69bd1..27d7fe480f 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/edit.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/edit.jsx
@@ -25,8 +25,9 @@ export default class EditMonitor extends AsyncView {
   };
 
   getTitle() {
-    if (this.state.monitor)
+    if (this.state.monitor) {
       return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;
+    }
     return `Monitors - ${this.props.params.orgId}`;
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/monitorIcon.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/monitorIcon.jsx
index 0e959ba9a6..a4f4a60e09 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/monitorIcon.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/monitorIcon.jsx
@@ -1,7 +1,9 @@
 import styled from 'react-emotion';
 
 const getBackgroundColor = p => {
-  if (p.color) return `background: ${p.color};`;
+  if (p.color) {
+    return `background: ${p.color};`;
+  }
 
   return `background: ${p.status === 'error'
     ? p.theme.error
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx
index f6b24726bf..0710243133 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/monitorModel.jsx
@@ -4,7 +4,9 @@ export default class MonitorModel extends FormModel {
   getTransformedData() {
     return Object.entries(this.fields.toJSON()).reduce((data, [k, v]) => {
       if (k.indexOf('config.') === 0) {
-        if (!data.config) data.config = {};
+        if (!data.config) {
+          data.config = {};
+        }
         if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {
           if (!Array.isArray(data.config.schedule)) {
             data.config.schedule = [null, null];
@@ -26,7 +28,9 @@ export default class MonitorModel extends FormModel {
   }
 
   getTransformedValue(id) {
-    if (id.indexOf('config') === 0) return this.getValue(id);
+    if (id.indexOf('config') === 0) {
+      return this.getValue(id);
+    }
     return super.getTransformedValue(id);
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationMonitors/monitorStats.jsx b/src/sentry/static/sentry/app/views/organizationMonitors/monitorStats.jsx
index c263f6f30d..84edf681e1 100644
--- a/src/sentry/static/sentry/app/views/organizationMonitors/monitorStats.jsx
+++ b/src/sentry/static/sentry/app/views/organizationMonitors/monitorStats.jsx
@@ -57,7 +57,9 @@ export default class MonitorStats extends AsyncComponent {
   renderBody() {
     let emptyStats = true;
     const stats = this.state.stats.map(p => {
-      if (p.ok || p.error) emptyStats = false;
+      if (p.ok || p.error) {
+        emptyStats = false;
+      }
       return {
         x: p.ts,
         y: [p.error, p.ok],
diff --git a/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectCard.jsx b/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectCard.jsx
index 88e70e7e58..de1efb3add 100644
--- a/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectCard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectCard.jsx
@@ -127,8 +127,12 @@ const ProjectCardContainer = createReactClass({
     const {project} = this.props;
 
     // Don't update state if we already have stats
-    if (!itemsBySlug[project.slug]) return;
-    if (itemsBySlug[project.slug] === this.state.projectDetails) return;
+    if (!itemsBySlug[project.slug]) {
+      return;
+    }
+    if (itemsBySlug[project.slug] === this.state.projectDetails) {
+      return;
+    }
 
     this.setState({
       projectDetails: itemsBySlug[project.slug],
diff --git a/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectNav.jsx b/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectNav.jsx
index 1b32aa7818..ce184da116 100644
--- a/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectNav.jsx
+++ b/src/sentry/static/sentry/app/views/organizationProjectsDashboard/projectNav.jsx
@@ -39,7 +39,9 @@ const ProjectNav = createReactClass({
           openCreateTeamModal({
             organization: org,
             onClose: data => {
-              if (!data) return;
+              if (!data) {
+                return;
+              }
 
               browserHistory.push(`/settings/${org.slug}/teams/${data.slug}/members/`);
             },
diff --git a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
index e60cd86f99..3aa1d84bf3 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
@@ -30,7 +30,9 @@ const ProjectTable = ({projectMap, projectTotals, orgTotal, organization}) => {
   return projectTotals.sort((a, b) => b.received - a.received).map((item, index) => {
     const project = projectMap[item.id];
 
-    if (!project) return null;
+    if (!project) {
+      return null;
+    }
 
     const projectLink = hasSentry10
       ? `/settings/${organization.slug}/projects/${project.slug}/`
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index e1d48b69fc..7e0c74eadd 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -324,7 +324,9 @@ const OrganizationStream = createReactClass({
   },
 
   resumePolling() {
-    if (!this.state.pageLinks) return;
+    if (!this.state.pageLinks) {
+      return;
+    }
 
     // Only resume polling if we're on the first page of results
     const links = parseLinkHeader(this.state.pageLinks);
@@ -435,7 +437,9 @@ const OrganizationStream = createReactClass({
    * Returns true if all results in the current query are visible/on this page
    */
   allResultsVisible() {
-    if (!this.state.pageLinks) return false;
+    if (!this.state.pageLinks) {
+      return false;
+    }
 
     const links = parseLinkHeader(this.state.pageLinks);
     return links && !links.previous.results && !links.next.results;
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index 716d214a7b..2c521253a3 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -46,7 +46,9 @@ const ProjectDetailsLayout = createReactClass({
   },
 
   render() {
-    if (!this.context.project) return null;
+    if (!this.context.project) {
+      return null;
+    }
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/projectEnvironments.jsx b/src/sentry/static/sentry/app/views/projectEnvironments.jsx
index fe9e221584..1fe3873595 100644
--- a/src/sentry/static/sentry/app/views/projectEnvironments.jsx
+++ b/src/sentry/static/sentry/app/views/projectEnvironments.jsx
@@ -215,7 +215,9 @@ const ProjectEnvironments = createReactClass({
    */
   renderSystemRows() {
     // Not available in "Hidden" tab
-    if (this.state.isHidden) return null;
+    if (this.state.isHidden) {
+      return null;
+    }
     const {project} = this.state;
 
     const isAllEnvironmentsDefault = project && project.defaultEnvironment === null;
@@ -239,7 +241,9 @@ const ProjectEnvironments = createReactClass({
   // Renders current default environment IF it is not a valid environment
   renderInvalidDefaultEnvironment() {
     // Not available in "Hidden" tab
-    if (this.state.isHidden) return null;
+    if (this.state.isHidden) {
+      return null;
+    }
     const {environments, project} = this.state;
     // Default environment that is not a valid environment
     const isAllEnvironmentsDefault = project && project.defaultEnvironment === null;
@@ -250,7 +254,9 @@ const ProjectEnvironments = createReactClass({
       !isAllEnvironmentsDefault &&
       !environments.find(({name}) => name === project.defaultEnvironment);
 
-    if (!hasOtherDefaultEnvironment) return null;
+    if (!hasOtherDefaultEnvironment) {
+      return null;
+    }
 
     return (
       <EnvironmentRow
diff --git a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
index 6da7df988c..547479a3a5 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
@@ -43,8 +43,11 @@ const ProjectDocsContext = createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     const data = this.state.data;
     return React.cloneElement(this.props.children, {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
index 362b4dbff7..6dfce8f2b6 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
@@ -29,7 +29,9 @@ const NewProject = createReactClass({
             <DocumentTitle title={'Sentry'} />
             <CreateProject
               getDocsUrl={({slug, projectSlug, platform}) => {
-                if (platform === 'other') platform = '';
+                if (platform === 'other') {
+                  platform = '';
+                }
                 return `/${slug}/${projectSlug}/getting-started/${platform}`;
               }}
             />
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 7e9c737f27..c25bc189f3 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -79,8 +79,11 @@ const ProjectSettings = createReactClass({
 
   render() {
     // TODO(dcramer): move sidebar into component
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     const access = this.getAccess();
     const {orgId, projectId} = this.props.params;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
index fac70e336b..a9f1d514e0 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
@@ -17,10 +17,14 @@ const PluginNavigation = createReactClass({
   render() {
     const {urlRoot, plugins} = this.props;
 
-    if (!plugins || !plugins.plugins) return null;
+    if (!plugins || !plugins.plugins) {
+      return null;
+    }
     const enabledPlugins = plugins.plugins.filter(p => p.enabled && p.hasConfiguration);
 
-    if (!enabledPlugins.length) return null;
+    if (!enabledPlugins.length) {
+      return null;
+    }
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 0de21246c0..9e70135ccb 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -79,7 +79,9 @@ const ProjectContext = createReactClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.projectId === this.props.projectId) return;
+    if (nextProps.projectId === this.props.projectId) {
+      return;
+    }
 
     if (!nextProps.skipReload) {
       this.remountComponent();
@@ -104,9 +106,13 @@ const ProjectContext = createReactClass({
       prevState.project !== this.state.project ||
       prevState.organization !== this.state.organization
     ) {
-      if (!this.docTitle) return;
+      if (!this.docTitle) {
+        return;
+      }
       const docTitle = this.docTitleRef.docTitle;
-      if (docTitle) docTitle.forceUpdate();
+      if (docTitle) {
+        docTitle.forceUpdate();
+      }
     }
   },
 
@@ -115,13 +121,19 @@ const ProjectContext = createReactClass({
   },
 
   getTitle() {
-    if (this.state.project) return this.state.project.slug;
+    if (this.state.project) {
+      return this.state.project.slug;
+    }
     return 'Sentry';
   },
 
   onProjectChange(projectIds) {
-    if (!this.state.project) return;
-    if (!projectIds.has(this.state.project.id)) return;
+    if (!this.state.project) {
+      return;
+    }
+    if (!projectIds.has(this.state.project.id)) {
+      return;
+    }
 
     this.setState({
       project: {...ProjectsStore.getById(this.state.project.id)},
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
index 8202a32416..56128f6b5f 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
@@ -76,8 +76,12 @@ class OrganizationReleaseDetails extends AsyncView {
 
     const query = pick(location.query, Object.values(URL_PARAM));
 
-    if (this.state.loading) return <LoadingIndicator />;
-    if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
+    if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     return (
       <PageContent>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
index 1fbae9775c..c8d28dee22 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/index.jsx
@@ -109,8 +109,11 @@ const ProjectReleaseDetails = createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     const release = this.state.release;
     const {orgId, projectId} = this.props.params;
diff --git a/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
index ede61fa5ff..e1949f46cf 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/project/releaseOverview.jsx
@@ -167,9 +167,13 @@ const ReleaseOverview = createReactClass({
     const {release} = this.context;
     const lastCommit = release.lastCommit;
 
-    if (this.state.loading) return <LoadingIndicator />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
 
-    if (this.state.error) return <LoadingError />;
+    if (this.state.error) {
+      return <LoadingError />;
+    }
 
     const {fileList, projects, hasRepos} = this.state;
 
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
index fa66ed1bcf..d02a0a94b8 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseArtifacts.jsx
@@ -104,9 +104,11 @@ class ReleaseArtifacts extends React.Component {
   }
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.fileList.length === 0)
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    } else if (this.state.fileList.length === 0) {
       return (
         <Panel>
           <EmptyStateWarning>
@@ -114,6 +116,7 @@ class ReleaseArtifacts extends React.Component {
           </EmptyStateWarning>
         </Panel>
       );
+    }
 
     const access = new Set(this.props.organization.access);
 
diff --git a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx
index 8a9bd6f61c..bdab6de4c0 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/shared/releaseCommits.jsx
@@ -106,13 +106,19 @@ const ReleaseCommits = createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    }
 
-    if (this.state.error) return <LoadingError />;
+    if (this.state.error) {
+      return <LoadingError />;
+    }
 
     const {commitList, activeRepo} = this.state;
 
-    if (!commitList.length) return <this.emptyState />;
+    if (!commitList.length) {
+      return <this.emptyState />;
+    }
     const commitsByRepository = this.getCommitsByRepository();
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
index 1e15ea2e05..b0455007b6 100644
--- a/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/organizationReleases/index.jsx
@@ -75,7 +75,9 @@ class OrganizationReleases extends AsyncView {
 
   onSearch = query => {
     const targetQueryParams = {};
-    if (query !== '') targetQueryParams.query = query;
+    if (query !== '') {
+      targetQueryParams.query = query;
+    }
 
     const {orgId} = this.props.params;
     browserHistory.push({
diff --git a/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx
index 8551191cf3..1760c6de09 100644
--- a/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/projectReleases/index.jsx
@@ -98,7 +98,9 @@ const ProjectReleases = createReactClass({
 
   onSearch(query) {
     const targetQueryParams = {};
-    if (query !== '') targetQueryParams.query = query;
+    if (query !== '') {
+      targetQueryParams.query = query;
+    }
 
     const {orgId, projectId} = this.props.params;
     browserHistory.push({
@@ -152,9 +154,11 @@ const ProjectReleases = createReactClass({
     let body;
     const {params} = this.props;
 
-    if (this.state.loading) body = this.renderLoading();
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.releaseList.length > 0)
+    if (this.state.loading) {
+      body = this.renderLoading();
+    } else if (this.state.error) {
+      body = <LoadingError onRetry={this.fetchData} />;
+    } else if (this.state.releaseList.length > 0) {
       body = (
         <div>
           <ReleaseProgress project={this.context.project} />
@@ -165,9 +169,11 @@ const ProjectReleases = createReactClass({
           />
         </div>
       );
-    else if (this.state.query && this.state.query !== DEFAULT_QUERY)
+    } else if (this.state.query && this.state.query !== DEFAULT_QUERY) {
       body = this.renderNoQueryResults();
-    else body = this.renderEmpty();
+    } else {
+      body = this.renderEmpty();
+    }
 
     return body;
   },
diff --git a/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx b/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx
index 0c5368de52..ce6a4a30e1 100644
--- a/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx
+++ b/src/sentry/static/sentry/app/views/releases/list/shared/releaseLanding.jsx
@@ -85,7 +85,9 @@ const ReleaseLanding = withApi(
       const {organization, project} = this.context;
 
       const title = cards[stepId].title;
-      if (stepId >= cards.length - 1) return;
+      if (stepId >= cards.length - 1) {
+        return;
+      }
       this.setState(state => ({
         stepId: state.stepId + 1,
       }));
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 8797447c9c..b9a5fc0067 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -27,8 +27,12 @@ class RouteError extends React.Component {
     const {disableLogSentry, disableReport, routes} = this.props;
     const {organization, project} = this.context;
 
-    if (disableLogSentry) return;
-    if (!error) return;
+    if (disableLogSentry) {
+      return;
+    }
+    if (!error) {
+      return;
+    }
 
     const route = getRouteStringFromRoutes(routes);
     if (route) {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
index d8dbcfeb0e..333910da1f 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountClose.jsx
@@ -71,7 +71,9 @@ class AccountClose extends AsyncView {
     const checked = event.target.checked;
 
     // Can't unselect an org where you are the single owner
-    if (isSingle) return;
+    if (isSingle) {
+      return;
+    }
 
     this.setState(state => {
       const set = state.orgsToRemove || new Set(this.getSingleOwners());
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
index 4a94f3a7ef..18e056d9dd 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotificationFineTuning.jsx
@@ -228,7 +228,9 @@ export default class AccountNotificationFineTuning extends AsyncView {
   // Return a sorted list of user's verified emails
   getEmailChoices() {
     const {emails} = this.state;
-    if (!emails) return [];
+    if (!emails) {
+      return [];
+    }
 
     return emails.filter(({isVerified}) => isVerified).sort((a, b) => {
       // Sort by primary -> email
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
index 3ba723c4bc..fcc833e9a9 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
@@ -83,7 +83,9 @@ class AccountSecurityDetails extends AsyncView {
   handleRemove = device => {
     const {authenticator} = this.state;
 
-    if (!authenticator || !authenticator.authId) return;
+    if (!authenticator || !authenticator.authId) {
+      return;
+    }
     const isRemovingU2fDevice = !!device;
     const deviceId = isRemovingU2fDevice ? `${device.key_handle}/` : '';
 
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
index caf4faab76..18e49a6585 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -41,7 +41,9 @@ const PENDING_INVITE = 'pending-invite';
 const getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTap}) => {
   const {form, qrcode, challenge, id} = authenticator || {};
 
-  if (!form) return null;
+  if (!form) {
+    return null;
+  }
 
   if (qrcode) {
     return [
@@ -191,7 +193,9 @@ class AccountSecurityEnroll extends AsyncView {
     const {authenticator, hasSentCode} = this.state;
 
     // Don't submit if empty
-    if (!this._form.phone) return;
+    if (!this._form.phone) {
+      return;
+    }
 
     const data = {
       phone: this._form.phone,
@@ -311,7 +315,9 @@ class AccountSecurityEnroll extends AsyncView {
   handleRemove = () => {
     const {authenticator} = this.state;
 
-    if (!authenticator || !authenticator.authId) return;
+    if (!authenticator || !authenticator.authId) {
+      return;
+    }
 
     // `authenticator.authId` is NOT the same as `props.params.authId`
     // This is for backwards compatbility with API endpoint
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
index 0a78391a21..eb5c67ee10 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityWrapper.jsx
@@ -13,7 +13,9 @@ class AccountSecurityWrapper extends AsyncComponent {
   }
 
   handleDisable = auth => {
-    if (!auth || !auth.authId) return;
+    if (!auth || !auth.authId) {
+      return;
+    }
 
     this.setState(
       {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
index 6e4653f9d6..0ff18040d4 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
@@ -38,7 +38,9 @@ class RecoveryCodes extends React.Component {
   render() {
     const {isEnrolled, codes} = this.props;
 
-    if (!isEnrolled || !codes) return null;
+    if (!isEnrolled || !codes) {
+      return null;
+    }
 
     const formattedCodes = codes.join(' \n');
 
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
index a8a225cfc6..7ce5adc78e 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
@@ -31,7 +31,9 @@ class U2fEnrolledDetails extends React.Component {
   render() {
     const {isEnrolled, devices, id, onRemoveU2fDevice} = this.props;
 
-    if (id !== 'u2f' || !isEnrolled) return null;
+    if (id !== 'u2f' || !isEnrolled) {
+      return null;
+    }
 
     const hasDevices = devices && devices.length;
     // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
index 314f7b0604..13919a02f2 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
@@ -23,7 +23,9 @@ class AccountSettingsLayout extends React.Component {
 
   componentDidUpdate(prevProps) {
     const {organization} = this.props;
-    if (prevProps.organization === organization) return;
+    if (prevProps.organization === organization) {
+      return;
+    }
 
     // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`
     // (which queries the org index endpoint instead of org details)
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
index 1ac8e2a462..0ca29b08e6 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
@@ -39,7 +39,9 @@ const ApiApplicationRow = createReactClass({
   },
 
   handleRemove() {
-    if (this.state.loading) return;
+    if (this.state.loading) {
+      return;
+    }
 
     const app = this.props.app;
 
@@ -74,7 +76,9 @@ const ApiApplicationRow = createReactClass({
     const app = this.props.app;
 
     let btnClassName = 'btn btn-default';
-    if (this.state.loading) btnClassName += ' disabled';
+    if (this.state.loading) {
+      btnClassName += ' disabled';
+    }
 
     return (
       <PanelItem justify="space-between" px={2} py={2}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
index 6ae95b3651..f2e3807e39 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
@@ -108,7 +108,9 @@ export default class ChoiceMapper extends React.Component {
         .map(o => Object.values(o).find(v => v === null))
         .includes(null);
 
-      if (allowEmpty || validValues) onBlur();
+      if (allowEmpty || validValues) {
+        onBlur();
+      }
     };
 
     const addRow = data => {
@@ -158,7 +160,9 @@ export default class ChoiceMapper extends React.Component {
 
     // The field will be set to inline when there is no value set for the
     // field, just show the dropdown.
-    if (!valueIsEmpty) return <Box>{dropdown}</Box>;
+    if (!valueIsEmpty) {
+      return <Box>{dropdown}</Box>;
+    }
 
     return (
       <React.Fragment>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
index ae0bbec179..4c32af965e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/multipleCheckbox.jsx
@@ -35,7 +35,9 @@ export default class MultipleCheckbox extends React.Component {
     const {value, onChange} = this.props;
     let newValue;
 
-    if (typeof onChange !== 'function') return;
+    if (typeof onChange !== 'function') {
+      return;
+    }
 
     if (e.target.checked) {
       newValue = value ? [...value, selectedValue] : [value];
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
index 79b7ef390d..d5066a013d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/controls/rangeSlider.jsx
@@ -107,7 +107,9 @@ class RangeSlider extends React.Component {
 
   handleBlur = e => {
     const {onBlur} = this.props;
-    if (typeof onBlur !== 'function') return;
+    if (typeof onBlur !== 'function') {
+      return;
+    }
 
     onBlur(e);
   };
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index d1c60a2c85..c4bf179ca9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -138,7 +138,9 @@ class ControlState extends React.Component {
           {() => {
             const error = model.getError(name);
 
-            if (!error) return null;
+            if (!error) {
+              return null;
+            }
 
             return (
               <ControlStateWrapper>
@@ -271,9 +273,13 @@ class FormField extends React.Component {
     if (ref && !this.input) {
       const hash = this.context.location && this.context.location.hash;
 
-      if (!hash) return;
+      if (!hash) {
+        return;
+      }
 
-      if (hash !== `#${this.props.name}`) return;
+      if (hash !== `#${this.props.name}`) {
+        return;
+      }
 
       // Not all form fields have this (e.g. Select fields)
       if (typeof ref.focus === 'function') {
@@ -391,7 +397,9 @@ class FormField extends React.Component {
                   {() => {
                     const error = this.getError();
                     const shouldShowErrorMessage = error && !hideErrorMessage;
-                    if (!shouldShowErrorMessage) return null;
+                    if (!shouldShowErrorMessage) {
+                      return null;
+                    }
                     return <FormFieldErrorReason>{error}</FormFieldErrorReason>;
                   }}
                 </Observer>
@@ -433,7 +441,9 @@ class FormField extends React.Component {
             {() => {
               const showFieldSave = model.getFieldState(name, 'showSave');
 
-              if (!showFieldSave) return null;
+              if (!showFieldSave) {
+                return null;
+              }
 
               return (
                 <PanelAlert type={saveMessageAlertType}>
@@ -466,7 +476,9 @@ class FormField extends React.Component {
 
     // This field has no properties that require observation to compute their
     // value, this field is static and will not be re-rendered.
-    if (observedProps.length === 0) return makeField();
+    if (observedProps.length === 0) {
+      return makeField();
+    }
 
     const reducer = (a, [prop, fn]) => ({...a, [prop]: fn()});
     const observedPropsFn = () => makeField(observedProps.reduce(reducer, {}));
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index eaa1c70563..016d9dc996 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -81,7 +81,9 @@ class JsonForm extends React.Component {
   scrollToHash(toHash) {
     const hash = toHash || this.getLocation(this.props).hash;
 
-    if (!hash) return;
+    if (!hash) {
+      return;
+    }
 
     // Push onto callback queue so it runs after the DOM is updated,
     // this is required when navigating from a different page so that
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 43ac9f100b..8196a8a745 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -112,7 +112,9 @@ class FormModel {
     this.fields.replace(initialData || {});
     this.initialData = this.fields.toJSON() || {};
 
-    if (noResetSnapshots) return;
+    if (noResetSnapshots) {
+      return;
+    }
 
     this.snapshots = [new Map(this.fields)];
   }
@@ -300,8 +302,12 @@ class FormModel {
     // Update field state to "show save" if save on blur is disabled for this field
     // (only if contents of field differs from initial value)
     const saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
-    if (typeof saveOnBlurFieldOverride === 'undefined' || saveOnBlurFieldOverride) return;
-    if (this.getFieldState(id, 'showSave') === isValueChanged) return;
+    if (typeof saveOnBlurFieldOverride === 'undefined' || saveOnBlurFieldOverride) {
+      return;
+    }
+    if (this.getFieldState(id, 'showSave') === isValueChanged) {
+      return;
+    }
 
     this.setFieldState(id, 'showSave', isValueChanged);
   }
@@ -311,9 +317,13 @@ class FormModel {
     const isValueChanged = value !== this.initialData[id];
     const shouldShowReturnButton = this.getDescriptor(id, 'showReturnButton');
 
-    if (!shouldShowReturnButton) return;
+    if (!shouldShowReturnButton) {
+      return;
+    }
     // Only update state if state has changed
-    if (this.getFieldState(id, 'showReturnButton') === isValueChanged) return;
+    if (this.getFieldState(id, 'showReturnButton') === isValueChanged) {
+      return;
+    }
 
     this.setFieldState(id, 'showReturnButton', isValueChanged);
   }
@@ -324,7 +334,9 @@ class FormModel {
   @action
   undo() {
     // Always have initial data snapshot
-    if (this.snapshots.length < 2) return null;
+    if (this.snapshots.length < 2) {
+      return null;
+    }
 
     this.snapshots.shift();
     this.fields.replace(this.snapshots[0]);
@@ -338,7 +350,9 @@ class FormModel {
   @action
   saveForm() {
     this.validateForm();
-    if (this.isError) return null;
+    if (this.isError) {
+      return null;
+    }
     let saveSnapshot = this.createSnapshot();
 
     const request = this.doApiRequest({
@@ -383,7 +397,9 @@ class FormModel {
     const oldValue = this.initialData[id];
     const savePromise = this.saveFieldRequest(id, currentValue);
 
-    if (!savePromise) return null;
+    if (!savePromise) {
+      return null;
+    }
 
     return savePromise
       .then(resp => {
@@ -424,12 +440,18 @@ class FormModel {
 
     // Don't save if field hasn't changed
     // Don't need to check for error state since initialData wouldn't have updated since last error
-    if (currentValue === initialValue || (currentValue === '' && !defined(initialValue)))
+    if (
+      currentValue === initialValue ||
+      (currentValue === '' && !defined(initialValue))
+    ) {
       return null;
+    }
 
     // Check for error first
     this.validateField(id);
-    if (!this.isValidField(id)) return null;
+    if (!this.isValidField(id)) {
+      return null;
+    }
 
     // shallow clone fields
     let saveSnapshot = this.createSnapshot();
@@ -514,7 +536,9 @@ class FormModel {
   @action
   handleBlurField(id, currentValue) {
     // Nothing to do if `saveOnBlur` is not on
-    if (!this.options.saveOnBlur) return null;
+    if (!this.options.saveOnBlur) {
+      return null;
+    }
 
     // Fields can individually set `saveOnBlur` to `false` (note this is ignored when `undefined`)
     const saveOnBlurFieldOverride = this.getDescriptor(id, 'saveOnBlur');
@@ -532,7 +556,9 @@ class FormModel {
   handleSaveField(id, currentValue) {
     const savePromise = this.saveField(id, currentValue);
 
-    if (!savePromise) return null;
+    if (!savePromise) {
+      return null;
+    }
 
     return savePromise.then(() => {
       this.setFieldState(id, 'showSave', false);
@@ -594,7 +620,9 @@ class FormModel {
 
   @action
   handleErrorResponse({responseJSON: resp} = {}) {
-    if (!resp) return;
+    if (!resp) {
+      return;
+    }
 
     // Show resp msg from API endpoint if possible
     Object.keys(resp).forEach(id => {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
index be34de509d..e4b6d1efc9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textCopyInput.jsx
@@ -61,7 +61,9 @@ class TextCopyInput extends React.Component {
 
   // Select text when copy button is clicked
   handleCopyClick = e => {
-    if (!this.textRef.current) return;
+    if (!this.textRef.current) {
+      return;
+    }
 
     const {onCopy} = this.props;
 
@@ -73,7 +75,9 @@ class TextCopyInput extends React.Component {
   };
 
   handleSelectText = () => {
-    if (!this.textRef.current) return;
+    if (!this.textRef.current) {
+      return;
+    }
 
     // We use findDOMNode here because `this.textRef` is not a dom node,
     // it's a ref to AutoSelectText
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
index d01c57f1e9..a19ae02e68 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
@@ -31,7 +31,9 @@ class Divider extends React.Component {
   };
   render() {
     const {isHover, isLast} = this.props;
-    if (isLast) return null;
+    if (isLast) {
+      return null;
+    }
 
     return (
       <StyledDivider isHover={isHover}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
index 2731bc792b..c820dcf012 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
@@ -39,7 +39,9 @@ class SettingsBreadcrumb extends React.Component {
   };
 
   componentDidUpdate(prevProps) {
-    if (this.props.routes === prevProps.routes) return;
+    if (this.props.routes === prevProps.routes) {
+      return;
+    }
     SettingsBreadcrumbActions.trimMappings(this.props.routes);
   }
 
@@ -49,7 +51,9 @@ class SettingsBreadcrumb extends React.Component {
     return (
       <Breadcrumbs>
         {routes.map((route, i) => {
-          if (!route.name) return null;
+          if (!route.name) {
+            return null;
+          }
           const pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];
           const isLast = i === lastRouteIndex;
           const createMenu = MENUS[route.name];
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
index 335c51bef8..fd399a4bf3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
@@ -22,7 +22,9 @@ class OrganizationCrumb extends React.Component {
   render() {
     const {organizations, organization, params, routes, route, ...props} = this.props;
 
-    if (!organization) return null;
+    if (!organization) {
+      return null;
+    }
 
     const hasMenu = organizations.length > 1;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
index 18b1575f63..cda21ce751 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
@@ -51,8 +51,12 @@ class ProjectCrumb extends React.Component {
       ...props
     } = this.props;
 
-    if (!latestOrganization) return null;
-    if (!projects) return null;
+    if (!latestOrganization) {
+      return null;
+    }
+    if (!projects) {
+      return null;
+    }
 
     const hasMenu = projects && projects.length > 1;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
index cd42486e66..c880a63c73 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
@@ -22,7 +22,9 @@ class TeamCrumb extends React.Component {
     const team = teams.find(({slug}) => slug === params.teamId);
     const hasMenu = teams.length > 1;
 
-    if (!team) return null;
+    if (!team) {
+      return null;
+    }
 
     return (
       <BreadcrumbDropdown
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
index 89992789cc..7b440cc93c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavigationGroup.jsx
@@ -42,8 +42,12 @@ export default class NavigationGroup extends React.Component {
       <NavSection data-test-id={name}>
         <SettingsHeading>{name}</SettingsHeading>
         {items.map(({path, title, index, show, badge, id}) => {
-          if (typeof show === 'function' && !show(this.props)) return null;
-          if (typeof show !== 'undefined' && !show) return null;
+          if (typeof show === 'function' && !show(this.props)) {
+            return null;
+          }
+          if (typeof show !== 'undefined' && !show) {
+            return null;
+          }
           const badgeResult = typeof badge === 'function' ? badge(this.props) : null;
           const to = replaceRouterParams(path, {
             orgId: organization && organization.slug,
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx
index f6cfd3d9b2..a6177f5088 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx
@@ -12,8 +12,12 @@ const MAX_RESULTS = 10;
 class SettingsSearch extends React.Component {
   @keydown('/')
   handleFocusSearch(e) {
-    if (!this.searchInput) return;
-    if (e.target === this.searchInput) return;
+    if (!this.searchInput) {
+      return;
+    }
+    if (e.target === this.searchInput) {
+      return;
+    }
 
     e.preventDefault();
     this.searchInput.focus();
diff --git a/src/sentry/static/sentry/app/views/settings/components/tag.jsx b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
index 1fb0eb8f93..fdc85c32b3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/tag.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
@@ -6,7 +6,9 @@ import styled from 'react-emotion';
 import InlineSvg from 'app/components/inlineSvg';
 
 const getMarginLeft = p => {
-  if (!p.inline) return '';
+  if (!p.inline) {
+    return '';
+  }
   return `margin-left: ${p.size == 'small' ? '0.25em' : '0.5em'};`;
 };
 
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index d7d1fb0078..4dbe977b62 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -30,8 +30,12 @@ const organizationNavigation = [
         title: t('Members'),
         // eslint-disable-next-line no-shadow
         badge: ({organization, access, features}) => {
-          if (!access.has('org:write')) return null;
-          if (organization.pendingAccessRequests <= 0) return null;
+          if (!access.has('org:write')) {
+            return null;
+          }
+          if (organization.pendingAccessRequests <= 0) {
+            return null;
+          }
 
           return `${organization.pendingAccessRequests}`;
         },
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
index 1c9ebd11e4..16afcf8e24 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
@@ -35,7 +35,9 @@ const OrganizationSettingsNavigation = createReactClass({
 
   handleHooks(name, hooks) {
     const org = this.getOrganization();
-    if (name !== 'settings:organization-navigation-config') return;
+    if (name !== 'settings:organization-navigation-config') {
+      return;
+    }
     this.setState(state => ({
       hookConfigs: hooks.map(cb => cb(org)),
     }));
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
index fa133d679a..ee206437ae 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/index.jsx
@@ -65,7 +65,9 @@ const OrganizationGeneralSettings = createReactClass({
 
   handleRemoveOrganization() {
     const {data} = this.state || {};
-    if (!data) return;
+    if (!data) {
+      return;
+    }
 
     addLoadingMessage();
     removeAndRedirectToRemainingOrganization(this.api, {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
index 58aeb83be7..61b6e4b942 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/index.jsx
@@ -251,12 +251,13 @@ class OrganizationMembersView extends AsyncView {
       </Button>
     );
 
-    if (canAddMembers)
+    if (canAddMembers) {
       action = (
         <GuideAnchor target="member_add" type="invisible">
           {action}
         </GuideAnchor>
       );
+    }
 
     return (
       <div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index bae6aa3fe5..d11dbe596e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -179,7 +179,9 @@ const InviteMember = createReactClass({
   submit() {
     const {email} = this.state;
     const emails = this.splitEmails(email);
-    if (!emails.length) return;
+    if (!emails.length) {
+      return;
+    }
     this.setState({busy: true});
     Promise.all(emails.map(this.inviteUser))
       .then(() => this.redirectToMemberPage())
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
index 049b299110..8870c25cb1 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
@@ -38,7 +38,9 @@ class OrganizationAccessRequests extends React.Component {
   render() {
     const {accessRequestBusy, requestList} = this.props;
 
-    if (!requestList || !requestList.length) return null;
+    if (!requestList || !requestList.length) {
+      return null;
+    }
 
     return (
       <Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
index 6fe925ca49..510bebd437 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberDetail.jsx
@@ -156,7 +156,9 @@ class OrganizationMemberDetail extends AsyncView {
     const {require2FA} = this.getOrganization();
     const {user} = member;
 
-    if (!user || !user.authenticators || require2FA) return false;
+    if (!user || !user.authenticators || require2FA) {
+      return false;
+    }
     const hasAuth = user.authenticators.length >= 1;
     return hasAuth && user.canReset2fa;
   };
@@ -166,12 +168,22 @@ class OrganizationMemberDetail extends AsyncView {
     const {require2FA} = this.getOrganization();
     const {user} = member;
 
-    if (!user) return '';
+    if (!user) {
+      return '';
+    }
 
-    if (!user.authenticators) return NO_PERMISSION;
-    if (!user.authenticators.length) return NOT_ENROLLED;
-    if (!user.canReset2fa) return MULTIPLE_ORGS;
-    if (require2FA) return TWO_FACTOR_REQUIRED;
+    if (!user.authenticators) {
+      return NO_PERMISSION;
+    }
+    if (!user.authenticators.length) {
+      return NOT_ENROLLED;
+    }
+    if (!user.canReset2fa) {
+      return MULTIPLE_ORGS;
+    }
+    if (require2FA) {
+      return TWO_FACTOR_REQUIRED;
+    }
 
     return '';
   };
@@ -181,7 +193,9 @@ class OrganizationMemberDetail extends AsyncView {
     const organization = this.getOrganization();
     const access = organization.access;
 
-    if (!member) return <NotFound />;
+    if (!member) {
+      return <NotFound />;
+    }
 
     const inviteLink = member.invite_link;
     const canEdit = access.includes('org:write');
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx
index 0a5e87db08..c1d9c6ad2e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMemberRow.jsx
@@ -51,7 +51,9 @@ export default class OrganizationMemberRow extends React.PureComponent {
   handleRemove = e => {
     const {onRemove} = this.props;
 
-    if (typeof onRemove !== 'function') return;
+    if (typeof onRemove !== 'function') {
+      return;
+    }
 
     this.setState({busy: true});
     onRemove(this.props.member, e);
@@ -60,7 +62,9 @@ export default class OrganizationMemberRow extends React.PureComponent {
   handleLeave = e => {
     const {onLeave} = this.props;
 
-    if (typeof onLeave !== 'function') return;
+    if (typeof onLeave !== 'function') {
+      return;
+    }
 
     this.setState({busy: true});
     onLeave(this.props.member, e);
@@ -69,7 +73,9 @@ export default class OrganizationMemberRow extends React.PureComponent {
   handleSendInvite = e => {
     const {onSendInvite} = this.props;
 
-    if (typeof onSendInvite !== 'function') return;
+    if (typeof onSendInvite !== 'function') {
+      return;
+    }
 
     onSendInvite(this.props.member, e);
   };
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationRateLimits/index.jsx
index 78f93aebd9..e0102633d2 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRateLimits/index.jsx
@@ -14,7 +14,9 @@ const OrganizationRateLimitsContainer = createReactClass({
   mixins: [OrganizationState],
 
   render() {
-    if (!this.context.organization) return null;
+    if (!this.context.organization) {
+      return null;
+    }
 
     return (
       <OrganizationRateLimits {...this.props} organization={this.context.organization} />
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
index 7e838f10d3..2f695ee6fd 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
@@ -128,7 +128,9 @@ class AddRepositoryLink extends PluginComponentBase {
     const provider = this.props.provider;
     let hasIntegration = true;
     provider.config.forEach(field => {
-      if (field.initial == '') hasIntegration = false;
+      if (field.initial == '') {
+        hasIntegration = false;
+      }
     });
     return (
       <form onSubmit={this.formSubmit}>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
index e490a77086..dc8cd8b958 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/allTeamsList.jsx
@@ -23,7 +23,9 @@ class AllTeamsList extends React.Component {
   handleCreateTeam = e => {
     const {useCreateModal, organization} = this.props;
 
-    if (!useCreateModal) return;
+    if (!useCreateModal) {
+      return;
+    }
 
     e.preventDefault();
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx
index 24cc54e0d0..1eb7f5f716 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/index.jsx
@@ -73,7 +73,9 @@ const OrganizationTeamsContainer = createReactClass({
   },
 
   render() {
-    if (!this.context.organization) return null;
+    if (!this.context.organization) {
+      return null;
+    }
 
     const access = this.getAccess();
     const features = this.getFeatures();
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
index 80abc38877..34ad0e89f4 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/organizationTeams.jsx
@@ -35,7 +35,9 @@ class OrganizationTeams extends React.Component {
     } = this.props;
     const org = organization;
 
-    if (!organization) return null;
+    if (!organization) {
+      return null;
+    }
 
     const canCreateTeams = getOrganizationState(organization)
       .getAccess()
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
index ecbd7f96bc..c6e2eee3ef 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamDetails.jsx
@@ -84,8 +84,11 @@ const TeamDetails = createReactClass({
     const {params, routes, children} = this.props;
     const team = this.state.team;
 
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (!team || this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (!team || this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     const routePrefix = recreateRoute('', {routes, params, stepBack: -1}); //`/organizations/${orgId}/teams/${teamId}`;
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
index dc34bb3847..390245a100 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
@@ -267,8 +267,11 @@ const TeamMembers = createReactClass({
   },
 
   render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     const {params} = this.props;
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index e374acef8a..04cab9a898 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -58,7 +58,9 @@ export default function getConfiguration({project}) {
           title: t('Processing Issues'),
           // eslint-disable-next-line no-shadow
           badge: ({project}) => {
-            if (project.processingIssues <= 0) return null;
+            if (project.processingIssues <= 0) {
+              return null;
+            }
             return project.processingIssues > 99 ? '99+' : project.processingIssues;
           },
         },
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
index db7aac4db8..dcf58af85c 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
@@ -20,7 +20,9 @@ class ProjectFilters extends React.Component {
   render() {
     const {project} = this.context;
     const {orgId, projectId, filterType} = this.props.params;
-    if (!project) return null;
+    if (!project) {
+      return null;
+    }
 
     const features = new Set(project.features);
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
index 75d5537406..8433304304 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -222,7 +222,9 @@ class ProjectFiltersSettings extends AsyncComponent {
     const {orgId, projectId} = params;
     const {project} = this.state;
 
-    if (!project) return null;
+    if (!project) {
+      return null;
+    }
     const projectEndpoint = `/projects/${orgId}/${projectId}/`;
     const filtersEndpoint = `${projectEndpoint}filters/`;
 
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
index eaf2ca8a6d..2d89883b1d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
@@ -51,7 +51,9 @@ const KeyRow = createReactClass({
   },
 
   handleRemove() {
-    if (this.state.loading) return;
+    if (this.state.loading) {
+      return;
+    }
 
     const loadingIndicator = addLoadingMessage(t('Saving changes..'));
     const {orgId, projectId, data} = this.props;
@@ -74,7 +76,9 @@ const KeyRow = createReactClass({
   },
 
   handleUpdate(params, cb) {
-    if (this.state.loading) return;
+    if (this.state.loading) {
+      return;
+    }
     const loadingIndicator = addLoadingMessage(t('Saving changes..'));
     const {orgId, projectId, data} = this.props;
     this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index 0a8747ef31..a4b2a7235b 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -88,7 +88,9 @@ const KeyStats = createReactClass({
       success: data => {
         let emptyStats = true;
         const stats = data.map(p => {
-          if (p.total) emptyStats = false;
+          if (p.total) {
+            emptyStats = false;
+          }
           return {
             x: p.ts,
             y: [p.accepted, p.dropped],
@@ -128,13 +130,15 @@ const KeyStats = createReactClass({
   },
 
   render() {
-    if (this.state.loading)
+    if (this.state.loading) {
       return (
         <div className="box">
           <LoadingIndicator />
         </div>
       );
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
 
     return (
       <Panel>
@@ -303,7 +307,9 @@ const KeySettings = createReactClass({
   },
 
   handleRemove(e) {
-    if (this.state.loading) return;
+    if (this.state.loading) {
+      return;
+    }
 
     const loadingIndicator = addLoadingMessage(t('Saving changes..'));
     const {keyId, orgId, projectId} = this.props.params;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
index 574ef4b817..a27fa9eba0 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/selectOwners.jsx
@@ -252,7 +252,9 @@ export default class SelectOwners extends React.Component {
 
     // Because this function is debounced, the component can potentially be
     // unmounted before this fires, in which case, `this.api` is null
-    if (!this.api) return null;
+    if (!this.api) {
+      return null;
+    }
 
     return this.api
       .requestPromise(`/organizations/${organization.slug}/members/`, {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
index 3b3a68f656..045c4ec059 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectProcessingIssues.jsx
@@ -193,15 +193,19 @@ const ProjectProcessingIssues = createReactClass({
 
   renderDebugTable() {
     let body;
-    if (this.state.loading) body = this.renderLoading();
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else if (
+    if (this.state.loading) {
+      body = this.renderLoading();
+    } else if (this.state.error) {
+      body = <LoadingError onRetry={this.fetchData} />;
+    } else if (
       this.state.processingIssues.hasIssues ||
       this.state.processingIssues.resolveableIssues ||
       this.state.processingIssues.issuesProcessing
-    )
+    ) {
       body = this.renderResults();
-    else body = this.renderEmpty();
+    } else {
+      body = this.renderEmpty();
+    }
 
     return body;
   },
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
index 768c615ee1..3996b87ca4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
@@ -54,7 +54,9 @@ class HookStats extends AsyncComponent {
   renderBody() {
     let emptyStats = true;
     const stats = this.state.stats.map(p => {
-      if (p.total) emptyStats = false;
+      if (p.total) {
+        emptyStats = false;
+      }
       return {
         x: p.ts,
         y: [p.total],
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
index 3d79717a91..1a3e045991 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
@@ -144,8 +144,11 @@ export default class ProjectServiceHooks extends AsyncView {
 
   renderBody() {
     let body;
-    if (this.state.hookList.length > 0) body = this.renderResults();
-    else body = this.renderEmpty();
+    if (this.state.hookList.length > 0) {
+      body = this.renderResults();
+    } else {
+      body = this.renderEmpty();
+    }
 
     const {orgId, projectId} = this.props.params;
     const access = new Set(this.context.organization.access);
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
index 40fb23f6bf..8f35e6a6ea 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
@@ -65,7 +65,9 @@ const RuleRow = withApi(
     }
 
     onDelete = () => {
-      if (this.state.loading) return;
+      if (this.state.loading) {
+        return;
+      }
 
       const loadingIndicator = addLoadingMessage();
       const {api, orgId, projectId, data} = this.props;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
index 3d75c9ce76..0ceaf5ab6b 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
@@ -41,7 +41,9 @@ export default class ProjectAlertSettings extends AsyncView {
   handleEnablePlugin = plugin => {
     this.setState({
       pluginList: this.state.pluginList.map(p => {
-        if (p.id !== plugin.id) return p;
+        if (p.id !== plugin.id) {
+          return p;
+        }
         return {
           ...plugin,
           enabled: true,
@@ -53,7 +55,9 @@ export default class ProjectAlertSettings extends AsyncView {
   handleDisablePlugin = plugin => {
     this.setState({
       pluginList: this.state.pluginList.map(p => {
-        if (p.id !== plugin.id) return p;
+        if (p.id !== plugin.id) {
+          return p;
+        }
         return {
           ...plugin,
           enabled: false,
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
index d1cd84ec8d..82165a59b3 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
@@ -140,7 +140,9 @@ const RuleEditor = createReactClass({
 
   hasError(field) {
     const {error} = this.state;
-    if (!error) return false;
+    if (!error) {
+      return false;
+    }
     return !!error[field];
   },
 
@@ -200,7 +202,9 @@ const RuleEditor = createReactClass({
       ...activeEnvs.map(env => [env.name, env.displayName]),
     ];
 
-    if (!this.state.rule) return <LoadingIndicator />;
+    if (!this.state.rule) {
+      return <LoadingIndicator />;
+    }
 
     const {rule, loading, error} = this.state;
     const {actionMatch, actions, conditions, frequency, name} = rule;
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index 4589c6dc45..ce3863881f 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -51,7 +51,7 @@ class ProjectGeneralSettings extends AsyncView {
     const {orgId, projectId} = this.props.params;
     return [
       ['data', `/projects/${orgId}/${projectId}/`],
-      ['groupingConfigs', `/grouping-configs/`],
+      ['groupingConfigs', '/grouping-configs/'],
     ];
   }
 
@@ -62,7 +62,9 @@ class ProjectGeneralSettings extends AsyncView {
   handleRemoveProject = () => {
     const {orgId} = this.props.params;
     const project = this.state.data;
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     removeProject(this.api, orgId, project).then(() => {
       // Need to hard reload because lots of components do not listen to Projects Store
@@ -73,8 +75,12 @@ class ProjectGeneralSettings extends AsyncView {
   handleTransferProject = () => {
     const {orgId} = this.props.params;
     const project = this.state.data;
-    if (!project) return;
-    if (!this._form.email) return;
+    if (!project) {
+      return;
+    }
+    if (!this._form.email) {
+      return;
+    }
 
     transferProject(this.api, orgId, project, this._form.email).then(() => {
       // Need to hard reload because lots of components do not listen to Projects Store
@@ -356,10 +362,14 @@ class ProjectGeneralSettings extends AsyncView {
 const ProjectGeneralSettingsContainer = createReactClass({
   mixins: [Reflux.listenTo(ProjectsStore, 'onProjectsUpdate')],
   onProjectsUpdate(projects) {
-    if (!this.changedSlug) return;
+    if (!this.changedSlug) {
+      return;
+    }
     const project = ProjectsStore.getBySlug(this.changedSlug);
 
-    if (!project) return;
+    if (!project) {
+      return;
+    }
 
     browserHistory.replace(
       recreateRoute('', {
diff --git a/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx b/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
index 32ba5dbd5f..cbe5bbfc8b 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsIndex.jsx
@@ -47,7 +47,9 @@ class SettingsIndex extends React.Component {
 
   componentDidUpdate(prevProps) {
     const {organization} = this.props;
-    if (prevProps.organization === organization) return;
+    if (prevProps.organization === organization) {
+      return;
+    }
 
     // if there is no org in context, SidebarDropdown uses an org from `withLatestContext`
     // (which queries the org index endpoint instead of org details)
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index 2a10fbf716..101cc3f0c8 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -45,7 +45,9 @@ const SharedGroupDetails = createReactClass({
   },
 
   getTitle() {
-    if (this.state.group) return this.state.group.title;
+    if (this.state.group) {
+      return this.state.group.title;
+    }
     return 'Sentry';
   },
 
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 7784f5a9d3..b0a24fbf37 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -98,7 +98,9 @@ const getLabel = (numIssues, allInQuerySelected) => {
 };
 
 const ExtraDescription = ({all, query, queryCount}) => {
-  if (!all) return null;
+  if (!all) {
+    return null;
+  }
 
   if (query) {
     return (
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index 397ec02498..a178a4cbd8 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -23,12 +23,16 @@ class SearchDropdown extends React.PureComponent {
 
   renderDescription = item => {
     const searchSubstring = this.props.searchSubstring;
-    if (!searchSubstring) return item.desc;
+    if (!searchSubstring) {
+      return item.desc;
+    }
 
     const text = item.desc;
     const idx = text.toLowerCase().indexOf(searchSubstring.toLowerCase());
 
-    if (idx === -1) return item.desc;
+    if (idx === -1) {
+      return item.desc;
+    }
 
     return (
       <span>
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 595ecfaa6b..54c8a6d57d 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -54,8 +54,11 @@ const StreamSidebar = createReactClass({
 
   onSelectTag(tag, value) {
     const newQuery = {...this.state.queryObj};
-    if (value) newQuery[tag.key] = value;
-    else delete newQuery[tag.key];
+    if (value) {
+      newQuery[tag.key] = value;
+    } else {
+      delete newQuery[tag.key];
+    }
 
     this.setState(
       {
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 437fa4db3b..8dc005d6d0 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -426,7 +426,9 @@ const Stream = createReactClass({
   },
 
   resumePolling() {
-    if (!this.state.pageLinks) return;
+    if (!this.state.pageLinks) {
+      return;
+    }
 
     // Only resume polling if we're on the first page of results
     const links = parseLinkHeader(this.state.pageLinks);
@@ -539,7 +541,9 @@ const Stream = createReactClass({
    * Returns true if all results in the current query are visible/on this page
    */
   allResultsVisible() {
-    if (!this.state.pageLinks) return false;
+    if (!this.state.pageLinks) {
+      return false;
+    }
 
     const links = parseLinkHeader(this.state.pageLinks);
     return links && !links.previous.results && !links.next.results;
@@ -668,7 +672,9 @@ const Stream = createReactClass({
     }
     const params = this.props.params;
     const classes = ['stream-row'];
-    if (this.state.isSidebarVisible) classes.push('show-sidebar');
+    if (this.state.isSidebarVisible) {
+      classes.push('show-sidebar');
+    }
     const {orgId, projectId} = this.props.params;
     const {organization} = this.context;
 
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index e336d0bb16..4b7a1bd9b5 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -48,7 +48,9 @@ class StreamTagFilter extends React.Component {
   }
 
   componentWillUnmount() {
-    if (!this.api) return;
+    if (!this.api) {
+      return;
+    }
     this.api.clear();
   }
 
@@ -98,7 +100,9 @@ class StreamTagFilter extends React.Component {
   }, 150);
 
   handleOpenMenu = () => {
-    if (this.props.tag.predefined) return;
+    if (this.props.tag.predefined) {
+      return;
+    }
 
     this.setState(
       {
