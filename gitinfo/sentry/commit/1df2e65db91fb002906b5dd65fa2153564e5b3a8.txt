commit 1df2e65db91fb002906b5dd65fa2153564e5b3a8
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed May 25 12:06:15 2016 +0200

    Add tests for {{auto}} IPs

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index f50d6c2c7e..6a243a6880 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -614,21 +614,22 @@ class ClientApiHelper(object):
         if 'sentry.interfaces.User' in data:
             data['sentry.interfaces.User'].pop('ip_address', None)
 
-    def ensure_has_ip(self, data, ip_address, is_public=False):
+    def ensure_has_ip(self, data, ip_address, set_if_missing=True):
+        got_ip = False
         ip = data.get('sentry.interfaces.Http', {}) \
             .get('env', {}).get('REMOTE_ADDR')
         if ip:
             if ip == '{{auto}}':
                 data['sentry.interfaces.Http']['env']['REMOTE_ADDR'] = ip_address
-            return
+            got_ip = True
 
         ip = data.get('sentry.interfaces.User', {}).get('ip_address')
         if ip:
             if ip == '{{auto}}':
                 data['sentry.interfaces.User']['ip_address'] = ip_address
-            return
+            got_ip = True
 
-        if is_public or data.get('platform') in ('javascript', 'cocoa', 'objc'):
+        if not got_ip and set_if_missing:
             data.setdefault('sentry.interfaces.User', {})['ip_address'] = ip_address
 
     def insert_data_to_database(self, data):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 708ec9d33b..8af32d178e 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -357,7 +357,9 @@ class StoreView(APIView):
 
         # insert IP address if not available and wanted
         if not scrub_ip_address:
-            helper.ensure_has_ip(data, remote_addr, from_public=auth.is_public)
+            helper.ensure_has_ip(
+                data, remote_addr, set_if_missing=auth.is_public or
+                data.get('platform') in ('javascript', 'cocoa', 'objc'))
 
         event_id = data['event_id']
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 84379b93e8..882c6f36c4 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -408,6 +408,15 @@ class EnsureHasIpTest(BaseAPITest):
         self.helper.ensure_has_ip(out, '127.0.0.1')
         assert inp == out
 
+    def test_with_user_auto_ip(self):
+        out = {
+            'sentry.interfaces.User': {
+                'ip_address': '{{auto}}',
+            },
+        }
+        self.helper.ensure_has_ip(out, '127.0.0.1')
+        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+
     def test_without_ip_values(self):
         out = {
             'sentry.interfaces.User': {
@@ -424,6 +433,32 @@ class EnsureHasIpTest(BaseAPITest):
         self.helper.ensure_has_ip(out, '127.0.0.1')
         assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
 
+    def test_with_http_auto_ip(self):
+        out = {
+            'sentry.interfaces.Http': {
+                'env': {
+                    'REMOTE_ADDR': '{{auto}}',
+                },
+            },
+        }
+        self.helper.ensure_has_ip(out, '127.0.0.1')
+        assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
+
+    def test_with_all_auto_ip(self):
+        out = {
+            'sentry.interfaces.User': {
+                'ip_address': '{{auto}}',
+            },
+            'sentry.interfaces.Http': {
+                'env': {
+                    'REMOTE_ADDR': '{{auto}}',
+                },
+            },
+        }
+        self.helper.ensure_has_ip(out, '127.0.0.1')
+        assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
+        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+
 
 class CspApiHelperTest(BaseAPITest):
     helper_cls = CspApiHelper
