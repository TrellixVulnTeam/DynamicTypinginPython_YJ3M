commit 06d1fba10568d3bc70e8eacf38b53c54f994e588
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jun 7 13:05:33 2019 -0700

    feat(events-v2): Add API validations (#13589)
    
    Return a validation error if:
    - an invalid groupby value is provided
    - no field or grouping is provided

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index cee038effe..97aa2e3bda 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -25,6 +25,8 @@ SPECIAL_FIELDS = {
     },
 }
 
+ALLOWED_GROUPINGS = frozenset(('issue.id', 'project.id'))
+
 
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
 
@@ -75,6 +77,12 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
         aggregations = []
         groupby = request.GET.getlist('groupby')
 
+        if not fields and not groupby:
+            raise OrganizationEventsError('No fields or groupings provided')
+
+        if any(field for field in groupby if field not in ALLOWED_GROUPINGS):
+            raise OrganizationEventsError('Invalid groupby value requested')
+
         if fields:
             # If project.name is requested, get the project.id from Snuba so we
             # can use this to look up the name in Sentry
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 3759f3b704..019327b343 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -161,45 +161,47 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         self.store_event(
             data={
                 'event_id': 'a' * 32,
-                'environment': 'staging',
                 'timestamp': self.min_ago,
+                'fingerprint': ['group_1'],
             },
             project_id=project.id,
         )
         self.store_event(
             data={
                 'event_id': 'b' * 32,
-                'environment': 'staging',
                 'timestamp': self.min_ago,
+                'fingerprint': ['group_1'],
             },
             project_id=project.id,
         )
         self.store_event(
             data={
                 'event_id': 'c' * 32,
-                'environment': 'production',
                 'timestamp': self.min_ago,
+                'fingerprint': ['group_2'],
             },
             project_id=project.id,
         )
 
+        groups = Group.objects.all()
+
         with self.feature('organizations:events-v2'):
             response = self.client.get(
                 self.url,
                 format='json',
                 data={
-                    'field': ['project.id', 'environment'],
-                    'groupby': ['project.id', 'environment'],
-                    'orderby': 'environment',
+                    'field': ['project.id', 'issue.id'],
+                    'groupby': ['project.id', 'issue.id'],
+                    'orderby': 'issue.id',
                 },
             )
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
         assert response.data[0]['project.id'] == project.id
-        assert response.data[0]['environment'] == 'production'
+        assert response.data[0]['issue.id'] == groups[0].id
         assert response.data[1]['project.id'] == project.id
-        assert response.data[1]['environment'] == 'staging'
+        assert response.data[1]['issue.id'] == groups[1].id
 
     def test_special_fields(self):
         self.login_as(user=self.user)
@@ -491,3 +493,51 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert len(response.data) == 1
         assert response.data[0]['issue.id'] == groups[1].id
         assert response.data[0]['event_count'] == 2
+
+    def test_invalid_groupby(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'how to make fast',
+                'timestamp': self.min_ago,
+            },
+            project_id=project.id
+        )
+
+        with self.feature('organizations:events-v2'):
+            response = self.client.get(
+                self.url,
+                format='json',
+                data={
+                    'groupby': ['id'],
+                },
+            )
+        assert response.status_code == 400, response.content
+        assert response.data['detail'] == 'Invalid groupby value requested'
+
+    def test_no_requested_fields_or_grouping(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'how to make fast',
+                'timestamp': self.min_ago,
+            },
+            project_id=project.id
+        )
+
+        with self.feature('organizations:events-v2'):
+            response = self.client.get(
+                self.url,
+                format='json',
+                data={
+                    'query': 'test'
+                },
+            )
+        assert response.status_code == 400, response.content
+        assert response.data['detail'] == 'No fields or groupings provided'
