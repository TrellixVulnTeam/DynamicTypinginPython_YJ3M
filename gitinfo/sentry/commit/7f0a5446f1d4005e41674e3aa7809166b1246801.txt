commit 7f0a5446f1d4005e41674e3aa7809166b1246801
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Jun 10 15:22:03 2020 -0400

    fix(perf) Change error_rate to failure_rate (#19093)
    
    Changing error_rate to failure_rate because error_rate can be confused with
    actual error events instead of failed transactions. Rename this now before too
    many people start using it.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 45582f6f95..1fce6ea225 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -260,7 +260,7 @@ class SearchVisitor(NodeVisitor):
             "p75",
             "p95",
             "p99",
-            "error_rate",
+            "failure_rate",
             "user_misery",
         ]
     )
@@ -1177,8 +1177,8 @@ FUNCTIONS = {
         "transform": u"uniqIf(user, duration > {tolerated:g})",
         "result_type": "number",
     },
-    "error_rate": {
-        "name": "error_rate",
+    "failure_rate": {
+        "name": "failure_rate",
         "args": [],
         "transform": "divide(countIf(and(notEquals(transaction_status, 0), notEquals(transaction_status, 2))), count())",
         "result_type": "percentage",
diff --git a/src/sentry/static/sentry/app/utils/discover/fields.tsx b/src/sentry/static/sentry/app/utils/discover/fields.tsx
index d3437debbb..ead13f991d 100644
--- a/src/sentry/static/sentry/app/utils/discover/fields.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fields.tsx
@@ -182,7 +182,7 @@ export const AGGREGATIONS = {
     isSortable: true,
     multiPlotType: 'line',
   },
-  error_rate: {
+  failure_rate: {
     parameters: [],
     outputType: 'percentage',
     isSortable: true,
@@ -351,7 +351,7 @@ export const TRACING_FIELDS = [
   'p99',
   'p100',
   'percentile',
-  'error_rate',
+  'failure_rate',
   'apdex',
   'impact',
   'user_misery',
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 85132d3735..0c1b2a0a76 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -177,7 +177,7 @@ const TRANSFORM_AGGREGATES = {
   apdex: '',
   impact: '',
   user_misery: '',
-  error_rate: '',
+  failure_rate: '',
 } as const;
 
 function transformAggregate(fieldName: string): string {
diff --git a/src/sentry/static/sentry/app/views/performance/constants.tsx b/src/sentry/static/sentry/app/views/performance/constants.tsx
index cf3c9649a5..ddd052c584 100644
--- a/src/sentry/static/sentry/app/views/performance/constants.tsx
+++ b/src/sentry/static/sentry/app/views/performance/constants.tsx
@@ -6,8 +6,8 @@ export const PERFORMANCE_TERMS: Record<string, string> = {
     'Apdex is the ratio of both satisfactory and tolerable response times to all response times.'
   ),
   tpm: t('TPM is the number of recorded transaction events per minute.'),
-  errorRate: t(
-    'Error rate is the percentage of recorded transactions that had a known and unsuccessful status.'
+  failureRate: t(
+    'Failure rate is the percentage of recorded transactions that had a known and unsuccessful status.'
   ),
   p50: t('p50 indicates the duration that 50% of transactions are faster than.'),
   p95: t('p95 indicates the duration that 95% of transactions are faster than.'),
@@ -50,9 +50,9 @@ export const AXIS_OPTIONS: TooltipOption[] = [
     label: t('Transactions Per Minute'),
   },
   {
-    tooltip: PERFORMANCE_TERMS.errorRate,
-    value: 'error_rate()',
-    label: t('Error Rate'),
+    tooltip: PERFORMANCE_TERMS.failureRate,
+    value: 'failure_rate()',
+    label: t('Failure Rate'),
   },
   {
     tooltip: PERFORMANCE_TERMS.p50,
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index a0ba241170..4adce3f11a 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -14,7 +14,7 @@ export const COLUMN_TITLES = [
   'tpm',
   'p50',
   'p95',
-  'error rate',
+  'failure rate',
   'apdex(300)',
   'users',
   'user misery',
@@ -35,7 +35,7 @@ export function generatePerformanceEventView(location: Location): EventView {
       'epm()',
       'p50()',
       'p95()',
-      'error_rate()',
+      'failure_rate()',
       'apdex(300)',
       'count_unique(user)',
       'user_misery(300)',
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
index 9f199d1397..257cf50a28 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/sidebarCharts.tsx
@@ -106,7 +106,7 @@ function SidebarCharts({api, eventView, organization, router}: Props) {
         ...axisLineConfig,
       },
       {
-        // error rate
+        // failure rate
         gridIndex: 2,
         axisLabel: {
           formatter: (value: number) => formatPercentage(value, 2),
@@ -125,7 +125,7 @@ function SidebarCharts({api, eventView, organization, router}: Props) {
         if (seriesName.includes('apdex')) {
           return formatFloat(value, 2);
         }
-        if (seriesName.includes('error_rate')) {
+        if (seriesName.includes('failure_rate')) {
           return formatPercentage(value, 2);
         }
         if (typeof value === 'number') {
@@ -159,9 +159,9 @@ function SidebarCharts({api, eventView, organization, router}: Props) {
         <QuestionTooltip position="top" title={PERFORMANCE_TERMS.tpm} size="sm" />
       </ChartTitle>
 
-      <ChartTitle top="410px" key="error-rate">
-        {t('Error Rate')}
-        <QuestionTooltip position="top" title={PERFORMANCE_TERMS.errorRate} size="sm" />
+      <ChartTitle top="410px" key="failure-rate">
+        {t('Failure Rate')}
+        <QuestionTooltip position="top" title={PERFORMANCE_TERMS.failureRate} size="sm" />
       </ChartTitle>
 
       <ChartZoom
@@ -184,7 +184,7 @@ function SidebarCharts({api, eventView, organization, router}: Props) {
             showLoading={false}
             query={eventView.query}
             includePrevious={false}
-            yAxis={['apdex(300)', 'epm()', 'error_rate()']}
+            yAxis={['apdex(300)', 'epm()', 'failure_rate()']}
           >
             {({results, errored, loading, reloading}) => {
               if (errored) {
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx
index d5abb554ef..3acb977f8a 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx
@@ -42,7 +42,7 @@ const transactionFieldConfig: OptionConfig = {
   aggregations: [
     'avg',
     'percentile',
-    'error_rate',
+    'failure_rate',
     'apdex',
     'count',
     'p50',
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/presets.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/presets.tsx
index 381973951b..329cd5b92a 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/presets.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/presets.tsx
@@ -114,9 +114,9 @@ export const PRESET_AGGREGATES: Preset[] = [
   },
   {
     name: t('Failure rate'),
-    match: /^error_rate\(\)/,
+    match: /^failure_rate\(\)/,
     validDataset: [Dataset.TRANSACTIONS],
-    default: 'error_rate()',
+    default: 'failure_rate()',
     /**
      * See makeFailureRateCta
      */
diff --git a/tests/js/spec/utils/discover/fields.spec.jsx b/tests/js/spec/utils/discover/fields.spec.jsx
index 8e9bb41672..bb92cf4c17 100644
--- a/tests/js/spec/utils/discover/fields.spec.jsx
+++ b/tests/js/spec/utils/discover/fields.spec.jsx
@@ -111,7 +111,7 @@ describe('aggregateOutputType', function() {
   });
 
   it('handles percentage functions', function() {
-    expect(aggregateOutputType('error_rate()')).toEqual('percentage');
+    expect(aggregateOutputType('failure_rate()')).toEqual('percentage');
     expect(aggregateOutputType('apdex()')).toEqual('percentage');
     expect(aggregateOutputType('apdex(500)')).toEqual('percentage');
   });
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
index 316cdde6ff..c6ca149720 100644
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
+++ b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.js
@@ -251,14 +251,14 @@ describe('EventsV2 -> ColumnEditModal', function() {
     });
 
     it('clears all unused parameters', function() {
-      // Choose percentile, then error_rate which has no parameters.
+      // Choose percentile, then failure_rate which has no parameters.
       selectByLabel(wrapper, 'percentile(\u2026)', {name: 'field', at: 0, control: true});
-      selectByLabel(wrapper, 'error_rate()', {name: 'field', at: 0, control: true});
+      selectByLabel(wrapper, 'failure_rate()', {name: 'field', at: 0, control: true});
 
       // Apply the changes so we can see the new columns.
       wrapper.find('Button[priority="primary"]').simulate('click');
       expect(onApply).toHaveBeenCalledWith([
-        {kind: 'function', function: ['error_rate', '', undefined]},
+        {kind: 'function', function: ['failure_rate', '', undefined]},
       ]);
     });
   });
diff --git a/tests/js/spec/views/performance/landing.spec.jsx b/tests/js/spec/views/performance/landing.spec.jsx
index db9b178d87..01594af5e0 100644
--- a/tests/js/spec/views/performance/landing.spec.jsx
+++ b/tests/js/spec/views/performance/landing.spec.jsx
@@ -61,7 +61,7 @@ describe('Performance > Landing', function() {
           epm: 'number',
           p50: 'number',
           p95: 'number',
-          error_rate: 'number',
+          failure_rate: 'number',
           apdex_300: 'number',
           count_unique_user: 'number',
           user_misery_300: 'number',
@@ -74,7 +74,7 @@ describe('Performance > Landing', function() {
             epm: 30,
             p50: 100,
             p95: 500,
-            error_rate: 0.1,
+            failure_rate: 0.1,
             apdex_300: 0.6,
             count_unique_user: 1000,
             user_misery_300: 122,
diff --git a/tests/js/spec/views/settings/incidentRules/metricField.spec.jsx b/tests/js/spec/views/settings/incidentRules/metricField.spec.jsx
index 971359815d..83b645cbda 100644
--- a/tests/js/spec/views/settings/incidentRules/metricField.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/metricField.spec.jsx
@@ -72,7 +72,7 @@ describe('MetricField', function() {
         <MetricField name="metric" organization={organization} />
       </Form>
     );
-    selectByLabel(wrapper, 'error_rate()', {selector: 'QueryField'});
+    selectByLabel(wrapper, 'failure_rate()', {selector: 'QueryField'});
 
     expect(wrapper.find('FieldHelp Button[isSelected=true]').text()).toEqual(
       'Failure rate'
@@ -93,7 +93,7 @@ describe('MetricField', function() {
     wrapper.find('FieldHelp button[aria-label="Failure rate"]').simulate('click');
 
     expect(wrapper.find('QueryField SingleValue SingleValue').text()).toEqual(
-      'error_rate()'
+      'failure_rate()'
     );
   });
 });
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index c0ed7e8ae5..ba09aace56 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -49,7 +49,7 @@ def test_get_json_meta_type():
     assert get_json_meta_type("p99", "number") == "duration"
     assert get_json_meta_type("p100", "number") == "duration"
     assert get_json_meta_type("apdex_transaction_duration_300", "number") == "number"
-    assert get_json_meta_type("error_rate", "number") == "percentage"
+    assert get_json_meta_type("failure_rate", "number") == "percentage"
     assert get_json_meta_type("impact_300", "number") == "number"
     assert get_json_meta_type("user_misery_300", "number") == "number"
     assert get_json_meta_type("percentile_transaction_duration_0_95", "number") == "duration"
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index d4d5a81ac4..e8b56935b5 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -598,13 +598,13 @@ class QueryTransformTest(TestCase):
         )
 
     @patch("sentry.snuba.discover.raw_query")
-    def test_selected_columns_error_rate_alias(self, mock_query):
+    def test_selected_columns_failure_rate_alias(self, mock_query):
         mock_query.return_value = {
-            "meta": [{"name": "transaction"}, {"name": "error_rate"}],
-            "data": [{"transaction": "api.do_things", "error_rate": 0.314159}],
+            "meta": [{"name": "transaction"}, {"name": "failure_rate"}],
+            "data": [{"transaction": "api.do_things", "failure_rate": 0.314159}],
         }
         discover.query(
-            selected_columns=["transaction", "error_rate()"],
+            selected_columns=["transaction", "failure_rate()"],
             query="",
             params={"project_id": [self.project.id]},
             auto_fields=True,
@@ -615,7 +615,7 @@ class QueryTransformTest(TestCase):
                 [
                     "divide(countIf(and(notEquals(transaction_status, 0), notEquals(transaction_status, 2))), count())",
                     None,
-                    "error_rate",
+                    "failure_rate",
                 ],
                 ["argMax", ["event_id", "timestamp"], "latest_event"],
                 ["argMax", ["project_id", "timestamp"], "projectid"],
@@ -1700,9 +1700,9 @@ class TimeseriesQueryTest(SnubaTestCase, TestCase):
         )
         assert len(result.data["data"]) == 3
 
-    def test_error_rate_field_alias(self):
+    def test_failure_rate_field_alias(self):
         result = discover.timeseries_query(
-            selected_columns=["error_rate()"],
+            selected_columns=["failure_rate()"],
             query="event.type:transaction transaction:api.issue.delete",
             params={
                 "start": self.day_ago,
diff --git a/tests/snuba/api/endpoints/test_discover_key_transactions.py b/tests/snuba/api/endpoints/test_discover_key_transactions.py
index 853638a7ca..25046b0cbc 100644
--- a/tests/snuba/api/endpoints/test_discover_key_transactions.py
+++ b/tests/snuba/api/endpoints/test_discover_key_transactions.py
@@ -193,7 +193,7 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
                         "transaction_status",
                         "project",
                         "epm()",
-                        "error_rate()",
+                        "failure_rate()",
                         "percentile(transaction.duration, 0.95)",
                     ],
                 },
@@ -276,7 +276,7 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
                         "transaction_status",
                         "project",
                         "epm()",
-                        "error_rate()",
+                        "failure_rate()",
                         "percentile(transaction.duration, 0.95)",
                     ],
                 },
@@ -326,7 +326,7 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
                         "transaction_status",
                         "project",
                         "epm()",
-                        "error_rate()",
+                        "failure_rate()",
                         "percentile(transaction.duration, 0.95)",
                     ],
                 },
@@ -371,7 +371,7 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
                         "transaction_status",
                         "project",
                         "epm()",
-                        "error_rate()",
+                        "failure_rate()",
                         "percentile(transaction.duration, 0.95)",
                     ],
                 },
@@ -416,7 +416,7 @@ class KeyTransactionTest(APITestCase, SnubaTestCase):
                         "transaction_status",
                         "project",
                         "epm()",
-                        "error_rate()",
+                        "failure_rate()",
                         "percentile(transaction.duration, 0.95)",
                     ],
                 },
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 88c08c865e..0b54f54889 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -812,17 +812,17 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert data[1]["count_id"] == 2
         assert data[1]["count_unique_user_email"] == 2
 
-    def test_error_rate_alias_field(self):
+    def test_failure_rate_alias_field(self):
         self.login_as(user=self.user)
         project = self.create_project()
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/success"
+        data["transaction"] = "/failure_rate/success"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         self.store_event(data, project_id=project.id)
 
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/unknown"
+        data["transaction"] = "/failure_rate/unknown"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         data["contexts"]["trace"]["status"] = "unknown_error"
@@ -830,7 +830,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
 
         for i in range(6):
             data = load_data("transaction")
-            data["transaction"] = "/error_rate/{}".format(i)
+            data["transaction"] = "/failure_rate/{}".format(i)
             data["timestamp"] = iso_format(before_now(minutes=1))
             data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
             data["contexts"]["trace"]["status"] = "unauthenticated"
@@ -840,13 +840,13 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             response = self.client.get(
                 self.url,
                 format="json",
-                data={"field": ["error_rate()"], "query": "event.type:transaction"},
+                data={"field": ["failure_rate()"], "query": "event.type:transaction"},
             )
 
         assert response.status_code == 200, response.content
         assert len(response.data["data"]) == 1
         data = response.data["data"]
-        assert data[0]["error_rate"] == 0.75
+        assert data[0]["failure_rate"] == 0.75
 
     def test_user_misery_alias_field(self):
         self.login_as(user=self.user)
@@ -1876,13 +1876,13 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/1"
+        data["transaction"] = "/failure_rate/1"
         data["timestamp"] = iso_format(before_now(minutes=2))
         data["start_timestamp"] = iso_format(before_now(minutes=2, seconds=5))
         self.store_event(data, project_id=project.id)
 
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/1"
+        data["transaction"] = "/failure_rate/1"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         data["contexts"]["trace"]["status"] = "unauthenticated"
@@ -1906,7 +1906,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                         "apdex(300)",
                         "impact(300)",
                         "user_misery(300)",
-                        "error_rate()",
+                        "failure_rate()",
                     ],
                     "query": "event.type:transaction",
                 },
@@ -1921,7 +1921,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert meta["p100"] == "duration"
             assert meta["percentile_transaction_duration_0_99"] == "duration"
             assert meta["apdex_300"] == "number"
-            assert meta["error_rate"] == "percentage"
+            assert meta["failure_rate"] == "percentage"
             assert meta["impact_300"] == "number"
             assert meta["user_misery_300"] == "number"
 
@@ -1936,7 +1936,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert data[0]["apdex_300"] == 0.0
             assert data[0]["impact_300"] == 1.0
             assert data[0]["user_misery_300"] == 1
-            assert data[0]["error_rate"] == 0.5
+            assert data[0]["failure_rate"] == 0.5
 
         with self.feature(
             {"organizations:discover-basic": True, "organizations:global-views": True}
@@ -1994,13 +1994,13 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         project = self.create_project()
         data = load_data("transaction")
 
-        data["transaction"] = "/error_rate/1"
+        data["transaction"] = "/failure_rate/1"
         data["timestamp"] = iso_format(before_now(minutes=2))
         data["start_timestamp"] = iso_format(before_now(minutes=2, seconds=5))
         self.store_event(data, project_id=project.id)
 
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/2"
+        data["transaction"] = "/failure_rate/2"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         data["contexts"]["trace"]["status"] = "unauthenticated"
@@ -2041,8 +2041,8 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 self.url,
                 format="json",
                 data={
-                    "field": ["event.type", "apdex()", "impact()", "error_rate()"],
-                    "query": "event.type:transaction apdex:>-1.0 impact():>0.5 error_rate():>0.25",
+                    "field": ["event.type", "apdex()", "impact()", "failure_rate()"],
+                    "query": "event.type:transaction apdex:>-1.0 impact():>0.5 failure_rate():>0.25",
                 },
             )
 
@@ -2051,7 +2051,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert len(data) == 1
             assert data[0]["apdex"] == 0.0
             assert data[0]["impact"] == 1.0
-            assert data[0]["error_rate"] == 0.5
+            assert data[0]["failure_rate"] == 0.5
 
         with self.feature(
             {"organizations:discover-basic": True, "organizations:global-views": True}
@@ -2137,13 +2137,13 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         project = self.create_project()
         data = load_data("transaction")
 
-        data["transaction"] = "/error_rate/1"
+        data["transaction"] = "/failure_rate/1"
         data["timestamp"] = iso_format(before_now(minutes=2))
         data["start_timestamp"] = iso_format(before_now(minutes=2, seconds=5))
         self.store_event(data, project_id=project.id)
 
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/2"
+        data["transaction"] = "/failure_rate/2"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         data["contexts"]["trace"]["status"] = "unauthenticated"
@@ -2371,7 +2371,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         data["spans"] = transaction_data["spans"]
         data["contexts"]["trace"] = transaction_data["contexts"]["trace"]
         data["type"] = "transaction"
-        data["transaction"] = "/error_rate/1"
+        data["transaction"] = "/failure_rate/1"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         data["user"]["geo"] = {"country_code": "US", "region": "CA", "city": "San Francisco"}
@@ -2436,7 +2436,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         data["spans"] = transaction_data["spans"]
         data["contexts"]["trace"] = transaction_data["contexts"]["trace"]
         data["type"] = "error"
-        data["transaction"] = "/error_rate/1"
+        data["transaction"] = "/failure_rate/1"
         data["timestamp"] = iso_format(before_now(minutes=1))
         data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
         data["user"]["geo"] = {"country_code": "US", "region": "CA", "city": "San Francisco"}
@@ -2511,7 +2511,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 milliseconds = random.randint(bucket[0], bucket[1])
                 values.append(milliseconds)
                 data = load_data("transaction")
-                data["transaction"] = "/error_rate/{}".format(milliseconds)
+                data["transaction"] = "/failure_rate/{}".format(milliseconds)
                 data["timestamp"] = iso_format(start)
                 data["start_timestamp"] = (start - timedelta(milliseconds=milliseconds)).isoformat()
                 self.store_event(data, project_id=project.id)
@@ -2566,7 +2566,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 milliseconds = random.randint(bucket[0], bucket[1])
                 values.append(milliseconds)
                 data = load_data("transaction")
-                data["transaction"] = "/error_rate/sleepy_gary/{}".format(milliseconds)
+                data["transaction"] = "/failure_rate/sleepy_gary/{}".format(milliseconds)
                 data["timestamp"] = iso_format(start)
                 data["start_timestamp"] = (start - timedelta(milliseconds=milliseconds)).isoformat()
                 self.store_event(data, project_id=project.id)
@@ -2574,7 +2574,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         # Add a transaction that totally throws off the buckets
         milliseconds = random.randint(bucket[0], bucket[1])
         data = load_data("transaction")
-        data["transaction"] = "/error_rate/hamurai"
+        data["transaction"] = "/failure_rate/hamurai"
         data["timestamp"] = iso_format(start)
         data["start_timestamp"] = iso_format(start - timedelta(milliseconds=1000000))
         self.store_event(data, project_id=project.id)
@@ -2587,7 +2587,7 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
                 format="json",
                 data={
                     "field": ["histogram(transaction.duration, 10)", "count()"],
-                    "query": "event.type:transaction transaction:/error_rate/sleepy_gary*",
+                    "query": "event.type:transaction transaction:/failure_rate/sleepy_gary*",
                     "sort": "histogram_transaction_duration_10",
                 },
             )
