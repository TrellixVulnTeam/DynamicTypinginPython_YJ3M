commit 814b95634d5d6aa5b2add4fbe59e8c9308778371
Author: Mark Story <mark@sentry.io>
Date:   Fri Apr 24 12:17:40 2020 -0400

    feat(perf-views) Update transaction summary table (#18444)
    
    Remove noisy column (transaction name) and add more useful columns
    (event.id, user). This also replaces avg() with p50() as we have p50 now
    and medians are generally better to compare against p95() vs an avg().
    
    I've also refactored the performance tables to use PanelTable as that
    exists now and using it lets us shave out a bunch of code.
    
    Based on style insertion order the panel tables with padding off could
    be rendered incorrectly. By not emitting a `padding:0` property we
    side-step the specificity war.

diff --git a/src/sentry/static/sentry/app/components/panels/panelTable.tsx b/src/sentry/static/sentry/app/components/panels/panelTable.tsx
index 481c5b08ef..d684223b69 100644
--- a/src/sentry/static/sentry/app/components/panels/panelTable.tsx
+++ b/src/sentry/static/sentry/app/components/panels/panelTable.tsx
@@ -127,7 +127,7 @@ const Wrapper = styled(Panel, {
   grid-template-columns: repeat(${p => p.columns}, auto);
 
   > * {
-    padding: ${p => (p.disablePadding ? 0 : space(2))};
+    ${p => (p.disablePadding ? '' : `padding: ${space(2)};`)}
 
     &:nth-last-child(n + ${p => (p.hasRows ? p.columns + 1 : 0)}) {
       border-bottom: 1px solid ${p => p.theme.borderDark};
diff --git a/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx b/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx
index 787b18d134..79a7f2dbee 100644
--- a/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx
@@ -9,7 +9,7 @@ import {TableData} from 'app/views/eventsV2/table/types';
 type ChildrenProps = {
   isLoading: boolean;
   error: null | string;
-  tableData: TableData | null | undefined;
+  tableData: TableData | null;
   pageLinks: null | string;
 };
 
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index f31564d52e..7c6244ecbc 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -17,9 +17,9 @@ export const PERFORMANCE_EVENT_VIEW: Readonly<NewQuery> = {
     'transaction',
     'project',
     'rpm()',
-    'error_rate()',
+    'p50()',
     'p95()',
-    'avg(transaction.duration)',
+    'error_rate()',
     'apdex()',
     'impact()',
   ],
diff --git a/src/sentry/static/sentry/app/views/performance/styles.tsx b/src/sentry/static/sentry/app/views/performance/styles.tsx
index 70ebc90605..21320a62df 100644
--- a/src/sentry/static/sentry/app/views/performance/styles.tsx
+++ b/src/sentry/static/sentry/app/views/performance/styles.tsx
@@ -4,59 +4,18 @@ import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import {IconQuestion} from 'app/icons';
 
-export const TableGrid = styled('table')`
-  margin: 0;
-  width: 100%;
-`;
-
-export const GridHead = styled('thead')`
-  color: ${p => p.theme.gray3};
-  text-transform: uppercase;
-  font-size: 12px;
-  line-height: 1;
-`;
-
-export const GridHeadCell = styled('th')`
-  padding: ${space(2)};
-  background: ${p => p.theme.offWhite};
-  ${overflowEllipsis};
-
-  &:first-child {
-    border-top-left-radius: ${p => p.theme.borderRadius};
-  }
-
-  &:last-child {
-    border-top-right-radius: ${p => p.theme.borderRadius};
-  }
-`;
-
-export const GridBody = styled('tbody')`
+export const GridBodyCell = styled('div')`
   font-size: 14px;
-`;
-
-export const GridBodyCell = styled('td')`
-  border-top: 1px solid ${p => p.theme.borderDark};
   padding: ${space(1)} ${space(2)};
   ${overflowEllipsis};
 `;
 
-export const GridBodyCellNumber = styled(GridBodyCell)`
-  text-align: right;
+export const GridHeadCell = styled('div')`
+  padding: ${space(2)};
 `;
 
-export const GridRow = styled('tr')<{numOfColumns: number}>`
-  display: grid;
-  grid-template-columns: ${props => {
-    const {numOfColumns} = props;
-
-    const numOfExtraColumns = numOfColumns - 2;
-
-    if (numOfExtraColumns > 0) {
-      return `auto 120px repeat(${numOfExtraColumns}, minmax(70px, 100px))`;
-    }
-
-    return 'auto 120px';
-  }};
+export const GridBodyCellNumber = styled(GridBodyCell)`
+  text-align: right;
 `;
 
 export const SummaryGridRow = styled('tr')`
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index 8f190964ca..5d500c88bd 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -7,15 +7,12 @@ import {browserHistory} from 'react-router';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import {Organization, Project} from 'app/types';
-import {assert} from 'app/types/utils';
-import {Panel} from 'app/components/panels';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
+import PanelTable from 'app/components/panels/panelTable';
 import Pagination from 'app/components/pagination';
 import Link from 'app/components/links/link';
 import EventView, {MetaType, EventData} from 'app/utils/discover/eventView';
 import SortLink from 'app/views/eventsV2/sortLink';
-import {TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
+import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
 import {decodeScalar} from 'app/views/eventsV2/utils';
 import withProjects from 'app/utils/withProjects';
@@ -26,15 +23,7 @@ import {getAggregateAlias} from 'app/utils/discover/fields';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 
 import {transactionSummaryRouteWithEventView} from './transactionSummary/utils';
-import {
-  TableGrid,
-  GridHead,
-  GridRow,
-  GridBody,
-  GridHeadCell,
-  GridBodyCell,
-  GridBodyCellNumber,
-} from './styles';
+import {GridBodyCell, GridBodyCellNumber, GridHeadCell} from './styles';
 
 export function getProjectID(
   eventData: EventData,
@@ -67,49 +56,29 @@ type Props = {
 };
 
 class Table extends React.Component<Props> {
-  renderResults({isLoading, tableData}) {
+  renderResults(isLoading: boolean, tableData: TableData | null) {
+    let cells: React.ReactNode[] = [];
     if (isLoading) {
-      return (
-        <tr>
-          <td colSpan={8}>
-            <LoadingIndicator />
-          </td>
-        </tr>
-      );
+      return cells;
     }
-
-    const hasResults =
-      tableData && tableData.data && tableData.meta && tableData.data.length > 0;
-
-    if (!hasResults) {
-      return (
-        <tr>
-          <td colSpan={8}>
-            <EmptyStateWarning>
-              <p>{t('No transactions found')}</p>
-            </EmptyStateWarning>
-          </td>
-        </tr>
-      );
+    if (!tableData || !tableData.meta) {
+      return cells;
     }
-
-    assert(tableData);
-
     const columnOrder = this.props.eventView.getColumns();
 
-    return tableData.data.map((row, index) => {
-      assert(tableData.meta);
-
-      return (
-        <GridRow key={index} numOfColumns={columnOrder.length}>
-          {this.renderRowItem(row, columnOrder, tableData.meta)}
-        </GridRow>
-      );
+    tableData.data.forEach((row, index: number) => {
+      // check again to appease tsc
+      if (!tableData.meta) {
+        return;
+      }
+      cells = cells.concat(this.renderRow(row, index, columnOrder, tableData.meta));
     });
+    return cells;
   }
 
-  renderRowItem(
+  renderRow(
     row: TableDataRow,
+    rowIndex: number,
     columnOrder: TableColumn<React.ReactText>[],
     tableMeta: MetaType
   ) {
@@ -127,9 +96,7 @@ class Table extends React.Component<Props> {
       const isFirstCell = index === 0;
 
       if (isFirstCell) {
-        // the first column of the row should link to the transaction details view
-        // on Discover
-
+        // the first column of the row should link to the transaction summary view
         const projectID = getProjectID(row, projects);
 
         const target = transactionSummaryRouteWithEventView({
@@ -145,16 +112,17 @@ class Table extends React.Component<Props> {
         );
       }
 
+      const key = `${rowIndex}:${column.key}:${index}`;
       const isNumeric = ['integer', 'number', 'duration'].includes(fieldType);
       if (isNumeric) {
-        return <GridBodyCellNumber key={column.key}>{rendered}</GridBodyCellNumber>;
+        return <GridBodyCellNumber key={key}>{rendered}</GridBodyCellNumber>;
       }
 
-      return <GridBodyCell key={column.key}>{rendered}</GridBodyCell>;
+      return <GridBodyCell key={key}>{rendered}</GridBodyCell>;
     });
   }
 
-  renderHeader({tableData}) {
+  renderHeader(tableData: TableData | null) {
     const {location, eventView, organization} = this.props;
 
     const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
@@ -242,7 +210,6 @@ class Table extends React.Component<Props> {
 
   render() {
     const {eventView, organization, location, keyTransactions} = this.props;
-    const columnOrder = eventView.getColumns();
 
     return (
       <DiscoverQuery
@@ -258,16 +225,15 @@ class Table extends React.Component<Props> {
               placeholder={t('Filter Transactions')}
               onSearch={this.handleTransactionSearchQuery}
             />
-            <Panel>
-              <TableGrid>
-                <GridHead>
-                  <GridRow numOfColumns={columnOrder.length}>
-                    {this.renderHeader({tableData})}
-                  </GridRow>
-                </GridHead>
-                <GridBody>{this.renderResults({isLoading, tableData})}</GridBody>
-              </TableGrid>
-            </Panel>
+            <PanelTable
+              headers={this.renderHeader(tableData)}
+              isLoading={isLoading}
+              isEmpty={!tableData || tableData.data.length === 0}
+              emptyMessage={t('No transactions found')}
+              disablePadding
+            >
+              {this.renderResults(isLoading, tableData)}
+            </PanelTable>
             <Pagination pageLinks={pageLinks} />
           </div>
         )}
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index 192c3372f1..67d29e063c 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -179,7 +179,7 @@ function generateSummaryEventView(
       id: undefined,
       version: 2,
       name: transactionName,
-      fields: ['transaction', 'transaction.duration', 'timestamp'],
+      fields: ['id', 'user', 'transaction.duration', 'timestamp'],
       orderby: '-transaction.duration',
       query: stringifyQueryObject(conditions),
       projects: [],
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
index 3c3ec81e87..511b480b1c 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
@@ -4,16 +4,14 @@ import styled from '@emotion/styled';
 
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
-import {assert} from 'app/types/utils';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import {Panel} from 'app/components/panels';
-import LoadingIndicator from 'app/components/loadingIndicator';
+import {SectionHeading} from 'app/components/charts/styles';
+import PanelTable from 'app/components/panels/panelTable';
 import Link from 'app/components/links/link';
 import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
 import SortLink from 'app/views/eventsV2/sortLink';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
 import EventView, {MetaType} from 'app/utils/discover/eventView';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import {getAggregateAlias} from 'app/utils/discover/fields';
@@ -21,15 +19,7 @@ import {generateEventSlug, eventDetailsRouteWithEventView} from 'app/utils/disco
 import {tokenizeSearch} from 'app/utils/tokenizeSearch';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 
-import {
-  TableGrid,
-  GridHead,
-  GridBody,
-  GridHeadCell,
-  GridBodyCell,
-  GridBodyCellNumber,
-  SummaryGridRow,
-} from '../styles';
+import {GridBodyCell, GridBodyCellNumber, GridHeadCell} from '../styles';
 
 type Props = {
   eventView: EventView;
@@ -89,49 +79,30 @@ class SummaryContentTable extends React.Component<Props> {
 
   renderResults() {
     const {isLoading, tableData} = this.props;
+    let cells: React.ReactNode[] = [];
 
     if (isLoading) {
-      return (
-        <tr>
-          <td colSpan={8}>
-            <LoadingIndicator />
-          </td>
-        </tr>
-      );
+      return cells;
     }
-
-    const hasResults =
-      tableData && tableData.data && tableData.meta && tableData.data.length > 0;
-
-    if (!hasResults) {
-      return (
-        <tr>
-          <td colSpan={8}>
-            <EmptyStateWarning>
-              <p>{t('No transactions found')}</p>
-            </EmptyStateWarning>
-          </td>
-        </tr>
-      );
+    if (!tableData || !tableData.meta || !tableData.data) {
+      return cells;
     }
 
-    assert(tableData);
-
     const columnOrder = this.props.eventView.getColumns();
 
-    return tableData.data.map((row, index) => {
-      assert(tableData.meta);
-
-      return (
-        <SummaryGridRow key={index}>
-          {this.renderRowItem(row, columnOrder, tableData.meta)}
-        </SummaryGridRow>
-      );
+    tableData.data.forEach((row, i: number) => {
+      // Another check to appease tsc
+      if (!tableData.meta) {
+        return;
+      }
+      cells = cells.concat(this.renderRow(row, i, columnOrder, tableData.meta));
     });
+    return cells;
   }
 
-  renderRowItem(
+  renderRow(
     row: TableDataRow,
+    rowIndex: number,
     columnOrder: TableColumn<React.ReactText>[],
     tableMeta: MetaType
   ) {
@@ -151,7 +122,6 @@ class SummaryContentTable extends React.Component<Props> {
       if (isFirstCell) {
         // the first column of the row should link to the transaction details view
         // on Discover
-
         const eventSlug = generateEventSlug(row);
 
         const target = eventDetailsRouteWithEventView({
@@ -168,27 +138,30 @@ class SummaryContentTable extends React.Component<Props> {
       }
 
       const isNumeric = ['integer', 'number', 'duration'].includes(fieldType);
+      const key = `${rowIndex}:${column.key}:${index}`;
       if (isNumeric) {
-        return <GridBodyCellNumber key={column.key}>{rendered}</GridBodyCellNumber>;
+        return <GridBodyCellNumber key={key}>{rendered}</GridBodyCellNumber>;
       }
 
-      return <GridBodyCell key={column.key}>{rendered}</GridBodyCell>;
+      return <GridBodyCell key={key}>{rendered}</GridBodyCell>;
     });
   }
 
   render() {
-    const {eventView, organization} = this.props;
+    const {eventView, organization, isLoading, tableData} = this.props;
 
     let title = t('Slowest Requests');
     const parsed = tokenizeSearch(eventView.query);
     if (parsed['transaction.duration']) {
       title = t('Requests %s and %s in duration', ...parsed['transaction.duration']);
     }
+    const hasResults =
+      tableData && tableData.data && tableData.meta && tableData.data.length > 0;
 
     return (
       <React.Fragment>
         <Header>
-          <HeaderTitle>{title}</HeaderTitle>
+          <SectionHeading>{title}</SectionHeading>
           <HeaderButtonContainer>
             <Button
               onClick={this.handleDiscoverViewClick}
@@ -199,25 +172,20 @@ class SummaryContentTable extends React.Component<Props> {
             </Button>
           </HeaderButtonContainer>
         </Header>
-        <Panel>
-          <TableGrid>
-            <GridHead>
-              <SummaryGridRow>{this.renderHeader()}</SummaryGridRow>
-            </GridHead>
-            <GridBody>{this.renderResults()}</GridBody>
-          </TableGrid>
-        </Panel>
+        <PanelTable
+          isEmpty={!hasResults}
+          emptyMessage={t('No transactions found')}
+          headers={this.renderHeader()}
+          isLoading={isLoading}
+          disablePadding
+        >
+          {this.renderResults()}
+        </PanelTable>
       </React.Fragment>
     );
   }
 }
 
-export const HeaderTitle = styled('h4')`
-  margin: 0;
-  font-size: ${p => p.theme.fontSizeMedium};
-  color: ${p => p.theme.gray3};
-`;
-
 export const Header = styled('div')`
   display: flex;
   justify-content: space-between;
