commit 7ec520b10d5006b8b487367bb3d34edd763685c8
Author: Bruno Garcia <github@brunogarcia.com>
Date:   Fri Nov 16 17:31:50 2018 +0100

    feat: unreal engine 4 support (#10624)
    
    * feat: unreal engine 4 support
    
    * ref: use symbolic 5.7.0 or later

diff --git a/requirements-base.txt b/requirements-base.txt
index c1ecc748f1..267cabe71a 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -62,7 +62,7 @@ sqlparse>=0.1.16,<0.2.0
 statsd>=3.1.0,<3.2.0
 strict-rfc3339>=0.7
 structlog==16.1.0
-symbolic>=5.5.6,<6.0.0
+symbolic>=5.7.0,<6.0.0
 toronado>=0.0.11,<0.1.0
 ua-parser>=0.6.1,<0.8.0
 # for bitbucket client
diff --git a/src/sentry/lang/native/minidump.py b/src/sentry/lang/native/minidump.py
index 5580f1901b..d36ec4c106 100644
--- a/src/sentry/lang/native/minidump.py
+++ b/src/sentry/lang/native/minidump.py
@@ -32,9 +32,7 @@ def process_minidump(minidump, cfi=None):
         return ProcessState.from_minidump_buffer(minidump, cfi)
 
 
-def merge_minidump_event(data, minidump, cfi=None):
-    state = process_minidump(minidump, cfi=cfi)
-
+def merge_process_state_event(data, state, cfi=None):
     data['platform'] = 'native'
     data['level'] = 'fatal' if state.crashed else 'info'
 
diff --git a/src/sentry/lang/native/unreal.py b/src/sentry/lang/native/unreal.py
new file mode 100644
index 0000000000..bb4ba54f35
--- /dev/null
+++ b/src/sentry/lang/native/unreal.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+from symbolic import Unreal4Crash
+from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE
+
+
+def process_unreal_crash(data):
+    """Processes the raw bytes of the unreal crash"""
+    return Unreal4Crash.from_bytes(data)
+
+
+def unreal_attachment_type(unreal_file):
+    """Returns the `attachment_type` for the
+    unreal file type or None if not recognized"""
+    if unreal_file.type == "minidump":
+        return MINIDUMP_ATTACHMENT_TYPE
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 75489cc1c1..42e3d701b3 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -26,17 +26,18 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.generic.base import View as BaseView
 from functools import wraps
 from querystring_parser import parser
-from symbolic import ProcessMinidumpError
+from symbolic import ProcessMinidumpError, Unreal4Error
 
 from sentry import features, quotas, tsdb, options
 from sentry.attachments import CachedAttachment
 from sentry.coreapi import (
-    APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, MinidumpApiHelper, safely_load_json_string, logger as api_logger
+    Auth, APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, MinidumpApiHelper, safely_load_json_string, logger as api_logger
 )
 from sentry.event_manager import EventManager
 from sentry.interfaces import schemas
 from sentry.interfaces.base import get_interface
-from sentry.lang.native.minidump import merge_minidump_event, MINIDUMP_ATTACHMENT_TYPE
+from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type
+from sentry.lang.native.minidump import merge_process_state_event, process_minidump, MINIDUMP_ATTACHMENT_TYPE
 from sentry.models import Project, OrganizationOption, Organization
 from sentry.signals import (
     event_accepted, event_dropped, event_filtered, event_received)
@@ -684,7 +685,8 @@ class MinidumpView(StoreView):
                     attachments.append(CachedAttachment.from_upload(file))
 
         try:
-            merge_minidump_event(data, minidump)
+            state = process_minidump(minidump)
+            merge_process_state_event(data, state)
         except ProcessMinidumpError as e:
             logger.exception(e)
             raise APIError(e.message.split('\n', 1)[0])
@@ -708,6 +710,85 @@ class MinidumpView(StoreView):
         )
 
 
+# Endpoint used by the Unreal Engine 4 (UE4) Crash Reporter.
+class UnrealView(StoreView):
+    content_types = ('application/octet-stream', )
+
+    def _dispatch(self, request, helper, sentry_key, project_id=None, origin=None, *args, **kwargs):
+        if request.method != 'POST':
+            return HttpResponseNotAllowed(['POST'])
+
+        content_type = request.META.get('CONTENT_TYPE')
+        if content_type is None or not content_type.startswith(self.content_types):
+            raise APIError('Invalid Content-Type')
+
+        request.user = AnonymousUser()
+
+        project = self._get_project_from_id(project_id)
+        helper.context.bind_project(project)
+
+        auth = Auth({'sentry_key': sentry_key}, is_public=False)
+        auth.client = 'sentry.unreal_engine'
+
+        key = helper.project_key_from_auth(auth)
+        if key.project_id != project.id:
+            raise APIError('Two different projects were specified')
+
+        helper.context.bind_auth(auth)
+        return super(APIView, self).dispatch(
+            request=request, project=project, auth=auth, helper=helper, key=key, **kwargs
+        )
+
+    def post(self, request, project, **kwargs):
+        attachments_enabled = features.has('organizations:event-attachments',
+                                           project.organization, actor=request.user)
+
+        data = {}
+        event_id = uuid.uuid4().hex
+        data['event_id'] = event_id
+
+        attachments = []
+        try:
+            unreal = process_unreal_crash(request.body)
+            process_state = unreal.process_minidump()
+        except (ProcessMinidumpError, Unreal4Error) as e:
+            logger.exception(e)
+            raise APIError(e.message.split('\n', 1)[0])
+
+        if process_state:
+            merge_process_state_event(data, process_state)
+        else:
+            raise APIError("missing minidump in unreal crash report")
+
+        for file in unreal.files():
+            # Always store the minidump in attachments so we can access it during
+            # processing, regardless of the event-attachments feature. This will
+            # allow us to stack walk again with CFI once symbols are loaded.
+            if file.type == "minidump" or attachments_enabled:
+                attachments.append(CachedAttachment(
+                    name=file.name,
+                    data=file.open_stream().read(),
+                    type=unreal_attachment_type(file),
+                ))
+
+        response_or_event_id = self.process(
+            request,
+            attachments=attachments,
+            data=data,
+            project=project,
+            **kwargs)
+
+        # The return here is only useful for consistency
+        # because the UE4 crash reporter doesn't care about it.
+        if isinstance(response_or_event_id, HttpResponse):
+            return response_or_event_id
+
+        return HttpResponse(
+            six.text_type(uuid.UUID(response_or_event_id)),
+            content_type='text/plain'
+        )
+
+
 class StoreSchemaView(BaseView):
     def get(self, request, **kwargs):
         return HttpResponse(json.dumps(schemas.EVENT_SCHEMA), content_type='application/json')
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index a4346a0df2..fe6de42ec4 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -107,6 +107,11 @@ urlpatterns += patterns(
         api.MinidumpView.as_view(),
         name='sentry-api-minidump'
     ),
+    url(
+        r'^api/(?P<project_id>[\w_-]+)/unreal/(?P<sentry_key>\w+)/$',
+        api.UnrealView.as_view(),
+        name='sentry-api-unreal'
+    ),
     url(
         r'^api/(?P<project_id>\d+)/security/$',
         api.SecurityReportView.as_view(),
diff --git a/tests/sentry/lang/native/fixtures/unreal_crash b/tests/sentry/lang/native/fixtures/unreal_crash
new file mode 100644
index 0000000000..9f24e6af35
Binary files /dev/null and b/tests/sentry/lang/native/fixtures/unreal_crash differ
diff --git a/tests/sentry/lang/native/test_minidump.py b/tests/sentry/lang/native/test_minidump.py
index 4ef1eaf463..68947f8b99 100644
--- a/tests/sentry/lang/native/test_minidump.py
+++ b/tests/sentry/lang/native/test_minidump.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 import os
 
-from sentry.lang.native.minidump import merge_minidump_event, is_minidump_event
+from sentry.lang.native.minidump import process_minidump, merge_process_state_event, is_minidump_event
 
 
 def test_is_minidump():
@@ -58,7 +58,8 @@ def test_minidump_linux():
     event = {'release': 'test-1.0.0'}
     minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'linux.dmp')
     with open(minidump, 'rb') as f:
-        merge_minidump_event(event, f.read())
+        state = process_minidump(f.read())
+        merge_process_state_event(event, state)
 
     assert event == {
         'contexts': {
@@ -289,7 +290,8 @@ def test_minidump_macos():
     event = {'release': 'test-1.0.0'}
     minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'macos.dmp')
     with open(minidump, 'rb') as f:
-        merge_minidump_event(event, f.read())
+        state = process_minidump(f.read())
+        merge_process_state_event(event, state)
 
     assert event == {
         'contexts': {
@@ -681,7 +683,8 @@ def test_minidump_windows():
     event = {'release': 'test-1.0.0'}
     minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'windows.dmp')
     with open(minidump, 'rb') as f:
-        merge_minidump_event(event, f.read())
+        state = process_minidump(f.read())
+        merge_process_state_event(event, state)
 
     assert event == {
         'contexts': {
diff --git a/tests/sentry/lang/native/test_unreal.py b/tests/sentry/lang/native/test_unreal.py
new file mode 100644
index 0000000000..2c3f03590e
--- /dev/null
+++ b/tests/sentry/lang/native/test_unreal.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+import os
+
+from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE
+from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type
+
+
+def test_process_minidump():
+    minidump = os.path.join(os.path.dirname(__file__), 'fixtures', 'unreal_crash')
+    with open(minidump, 'rb') as f:
+        minidump = process_unreal_crash(f.read())
+        process_state = minidump.process_minidump()
+        assert 128 == process_state.module_count
+        assert 59 == process_state.thread_count
+
+
+def test_unreal_attachment_type_minidump():
+    file = MockFile("minidump")
+    assert unreal_attachment_type(file) == MINIDUMP_ATTACHMENT_TYPE
+
+
+def test_unreal_attachment_type_unknown():
+    file = MockFile("something unknown")
+    assert unreal_attachment_type(file) is None
+
+
+class MockFile():
+    def __init__(self, type):
+        self.type = type
