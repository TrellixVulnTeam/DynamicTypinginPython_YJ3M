commit 3cbd2f09858c49f9efefc2a993a5e5ab56f5ab38
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Jul 1 10:00:47 2016 -0700

    Fix tests running against the correct databases (#3483)
    
    * Fix tests running against the correct databases
    
    * Fix flakey test
    
    * Fix remaining MySQL issues
    
    * Fix acceptance tests

diff --git a/Makefile b/Makefile
index 274cd2f3ac..857be000d9 100644
--- a/Makefile
+++ b/Makefile
@@ -169,7 +169,7 @@ travis-install-postgres: travis-install-python dev-postgres
 travis-install-mysql: travis-install-python
 	pip install mysqlclient
 	echo 'create database sentry;' | mysql -uroot
-travis-install-acceptance: install-npm travis-install-python
+travis-install-acceptance: install-npm travis-install-postgres
 travis-install-js: install-npm
 travis-install-cli: travis-install-python
 travis-install-dist: travis-noop
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 760d782ca5..0682b95d19 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -31,6 +31,8 @@ class DjangoSearchBackend(SearchBackend):
               cursor=None, limit=100):
         from sentry.models import Event, Group, GroupStatus
 
+        engine = get_db_engine('default')
+
         queryset = Group.objects.filter(project=project)
         if query:
             # TODO(dcramer): if we want to continue to support search on SQL
@@ -130,14 +132,14 @@ class DjangoSearchBackend(SearchBackend):
             # implicit subquery by coercing to a list
             base = router.db_for_read(Group)
             using = router.db_for_read(Event)
-            if base != using:
+            # MySQL also cannot do a LIMIT inside of a subquery
+            if base != using or engine.startswith('mysql'):
                 group_ids = list(group_ids)
 
             queryset = queryset.filter(
                 id__in=group_ids,
             )
 
-        engine = get_db_engine('default')
         if engine.startswith('sqlite'):
             score_clause = SQLITE_SORT_CLAUSES[sort_by]
         elif engine.startswith('mysql'):
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 92f008ac30..674420ed41 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -117,8 +117,6 @@ def pytest_configure(config):
     os.environ.setdefault('RECAPTCHA_TESTING', 'True')
     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sentry.conf.server')
 
-    settings.SOUTH_TESTS_MIGRATE = os.environ.get('SENTRY_SOUTH_TESTS_MIGRATE', '1') == '1'
-
     if not settings.configured:
         # only configure the db if its not already done
         test_db = os.environ.get('DB', 'postgres')
@@ -127,6 +125,7 @@ def pytest_configure(config):
                 'ENGINE': 'django.db.backends.mysql',
                 'NAME': 'sentry',
                 'USER': 'root',
+                'HOST': '127.0.0.1',
             })
             # mysql requires running full migration all the time
             settings.SOUTH_TESTS_MIGRATE = True
@@ -145,6 +144,9 @@ def pytest_configure(config):
                 'ENGINE': 'django.db.backends.sqlite3',
                 'NAME': ':memory:',
             })
+            settings.SOUTH_TESTS_MIGRATE = os.environ.get('SENTRY_SOUTH_TESTS_MIGRATE', '1') == '1'
+        else:
+            raise RuntimeError('oops, wrong database: %r' % test_db)
 
     settings.TEMPLATE_DEBUG = True
 
diff --git a/tests/sentry/api/endpoints/test_organization_auditlogs.py b/tests/sentry/api/endpoints/test_organization_auditlogs.py
index 54e5a0ef49..c04585f9f6 100644
--- a/tests/sentry/api/endpoints/test_organization_auditlogs.py
+++ b/tests/sentry/api/endpoints/test_organization_auditlogs.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
+
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 
 from sentry.models import AuditLogEntry, AuditLogEntryEvent
 from sentry.testutils import APITestCase
@@ -8,6 +11,8 @@ from sentry.testutils import APITestCase
 
 class OrganizationAuditLogsTest(APITestCase):
     def test_simple(self):
+        now = timezone.now()
+
         self.login_as(user=self.user)
 
         org = self.create_organization(owner=self.user, name='baz')
@@ -17,16 +22,19 @@ class OrganizationAuditLogsTest(APITestCase):
             organization=org,
             event=AuditLogEntryEvent.ORG_EDIT,
             actor=self.user,
+            datetime=now,
         )
         entry2 = AuditLogEntry.objects.create(
             organization=org,
             event=AuditLogEntryEvent.ORG_EDIT,
             actor=self.user,
+            datetime=now + timedelta(seconds=1),
         )
         AuditLogEntry.objects.create(
             organization=org2,
             event=AuditLogEntryEvent.ORG_EDIT,
             actor=self.user,
+            datetime=now,
         )
 
         url = reverse('sentry-api-0-organization-audit-logs', args=[org.slug])
diff --git a/tests/sentry/api/endpoints/test_organization_issues_new.py b/tests/sentry/api/endpoints/test_organization_issues_new.py
index a033e02b78..3d583bdfc4 100644
--- a/tests/sentry/api/endpoints/test_organization_issues_new.py
+++ b/tests/sentry/api/endpoints/test_organization_issues_new.py
@@ -1,17 +1,22 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
+
+from django.utils import timezone
+
 from sentry.models import OrganizationMember, OrganizationMemberTeam
 from sentry.testutils import APITestCase
 
 
 class OrganizationIssuesNewTest(APITestCase):
     def test_simple(self):
+        now = timezone.now()
         user = self.create_user('foo@example.com')
         org = self.create_organization(owner=user)
         project1 = self.create_project(organization=org, name='foo')
         project2 = self.create_project(organization=org, name='bar')
-        group1 = self.create_group(checksum='a' * 32, project=project1, score=10)
-        group2 = self.create_group(checksum='b' * 32, project=project2, score=5)
+        group1 = self.create_group(checksum='a' * 32, project=project1, score=10, first_seen=now)
+        group2 = self.create_group(checksum='b' * 32, project=project2, score=5, first_seen=now + timedelta(seconds=1))
         member = OrganizationMember.objects.get(
             user=user,
             organization=org,
diff --git a/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py b/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
index 7077022fe2..30afde8a0b 100644
--- a/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
+++ b/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+from datetime import timedelta
+
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 
 from sentry.models import GroupAssignee, ProjectStatus
 from sentry.testutils import APITestCase
@@ -8,6 +11,7 @@ from sentry.testutils import APITestCase
 
 class OrganizationMemberIssuesAssignedTest(APITestCase):
     def test_simple(self):
+        now = timezone.now()
         user = self.create_user('foo@example.com')
         org = self.create_organization(name='foo')
         team = self.create_team(name='foo', organization=org)
@@ -27,17 +31,20 @@ class OrganizationMemberIssuesAssignedTest(APITestCase):
             group=group1,
             project=project1,
             user=user,
+            date_added=now,
         )
         GroupAssignee.objects.create(
             group=group2,
             project=project1,
             user=user,
+            date_added=now + timedelta(seconds=1),
         )
         # should not show up as project is pending removal
         GroupAssignee.objects.create(
             group=group3,
             project=project2,
             user=user,
+            date_added=now + timedelta(seconds=2),
         )
 
         path = reverse('sentry-api-0-organization-member-issues-assigned', args=[org.slug, 'me'])
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 06962293be..dc86e723be 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -448,9 +448,16 @@ class GroupUpdateTest(APITestCase):
         assert response.status_code == 200
 
         snooze = GroupSnooze.objects.get(group=group)
+        snooze.until = snooze.until.replace(microsecond=0)
 
-        assert snooze.until > timezone.now() + timedelta(minutes=29)
-        assert snooze.until < timezone.now() + timedelta(minutes=31)
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+
+        assert snooze.until > now + timedelta(minutes=29)
+        assert snooze.until < now + timedelta(minutes=31)
+
+        # Drop microsecond value for MySQL
+        response.data['statusDetails']['snoozeUntil'] = response.data['statusDetails']['snoozeUntil'].replace(microsecond=0)
 
         assert response.data == {
             'status': 'muted',
@@ -650,10 +657,10 @@ class GroupUpdateTest(APITestCase):
         }, format='json')
         assert response.status_code == 200
         assert response.data['merge']['parent'] == str(group2.id)
-        assert sorted(response.data['merge']['children']) == [
+        assert sorted(response.data['merge']['children']) == sorted([
             str(group1.id),
             str(group3.id),
-        ]
+        ])
 
         assert len(merge_group.mock_calls) == 2
         merge_group.delay.assert_any_call(from_object_id=group1.id, to_object_id=group2.id)
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index f17fdb3f8f..d75eb192d9 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -16,13 +16,15 @@ from sentry.testutils import TestCase
 
 class GroupSerializerTest(TestCase):
     def test_is_muted_with_expired_snooze(self):
+        now = timezone.now().replace(microsecond=0)
+
         user = self.create_user()
         group = self.create_group(
             status=GroupStatus.MUTED,
         )
         GroupSnooze.objects.create(
             group=group,
-            until=timezone.now() - timedelta(minutes=1),
+            until=now - timedelta(minutes=1),
         )
 
         result = serialize(group, user)
@@ -30,13 +32,15 @@ class GroupSerializerTest(TestCase):
         assert result['statusDetails'] == {}
 
     def test_is_muted_with_valid_snooze(self):
+        now = timezone.now().replace(microsecond=0)
+
         user = self.create_user()
         group = self.create_group(
             status=GroupStatus.MUTED,
         )
         snooze = GroupSnooze.objects.create(
             group=group,
-            until=timezone.now() + timedelta(minutes=1),
+            until=now + timedelta(minutes=1),
         )
 
         result = serialize(group, user)
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 782dbd40ca..5c69612438 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -21,7 +21,9 @@ from sentry.testutils import TestCase
 
 class OrganizationOnboardingTaskTest(TestCase):
     def test_no_existing_task(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
         first_event_received.send(project=project, group=self.group, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
@@ -33,7 +35,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task.date_completed == project.first_event
 
     def test_existing_pending_task(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
 
         first_event_pending.send(project=project, user=self.user, sender=type(project))
 
@@ -57,7 +61,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task.date_completed == project.first_event
 
     def test_existing_complete_task(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
         task = OrganizationOnboardingTask.objects.create(
             organization=project.organization,
             task=OnboardingTask.FIRST_PROJECT,
@@ -72,7 +78,9 @@ class OrganizationOnboardingTaskTest(TestCase):
 
     # Tests on the receivers
     def test_event_processed(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
         event = self.create_full_event()
         event_processed.send(project=project, group=self.group, event=event, sender=type(project))
 
@@ -98,7 +106,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task is not None
 
     def test_project_created(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
         project_created.send(project=project, user=self.user, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
@@ -109,7 +119,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task is not None
 
     def test_first_event_pending(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
         first_event_pending.send(project=project, user=self.user, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
@@ -120,7 +132,9 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task is not None
 
     def test_first_event_received(self):
-        project = self.create_project(first_event=timezone.now())
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+        project = self.create_project(first_event=now)
         project_created.send(project=project, user=self.user, sender=type(project))
         group = self.create_group(project=project, platform='javascript', message='javascript error message')
         first_event_received.send(project=project, group=group, sender=type(project))
@@ -134,7 +148,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert 'platform' in task.data
         assert task.data['platform'] == 'javascript'
 
-        second_project = self.create_project(first_event=timezone.now())
+        second_project = self.create_project(first_event=now)
         project_created.send(project=second_project, user=self.user, sender=type(second_project))
         second_task = OrganizationOnboardingTask.objects.get(
             organization=second_project.organization,
@@ -217,9 +231,11 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task is not None
 
     def test_onboarding_complete(self):
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
         user = self.create_user(email='test@example.org')
-        project = self.create_project(first_event=timezone.now())
-        second_project = self.create_project(first_event=timezone.now())
+        project = self.create_project(first_event=now)
+        second_project = self.create_project(first_event=now)
         second_group = self.create_group(project=second_project, platform='python', message='python error message')
         event = self.create_full_event()
         member = self.create_member(organization=self.organization, teams=[self.team], user=user)
diff --git a/tests/sentry/web/frontend/test_group_tag_export.py b/tests/sentry/web/frontend/test_group_tag_export.py
index 84e54877fb..48cc46634a 100644
--- a/tests/sentry/web/frontend/test_group_tag_export.py
+++ b/tests/sentry/web/frontend/test_group_tag_export.py
@@ -11,6 +11,9 @@ class GroupTagExportTest(TestCase):
     def test_simple(self):
         key, value = 'foo', 'bar'
 
+        # Drop microsecond value for MySQL
+        now = timezone.now().replace(microsecond=0)
+
         project = self.create_project()
         group = self.create_group(project=project)
         TagKey.objects.create(project=project, key=key)
@@ -25,8 +28,8 @@ class GroupTagExportTest(TestCase):
             key=key,
             value=value,
             times_seen=1,
-            first_seen=timezone.now() - timedelta(hours=1),
-            last_seen=timezone.now(),
+            first_seen=now - timedelta(hours=1),
+            last_seen=now,
         )
 
         self.login_as(user=self.user)
