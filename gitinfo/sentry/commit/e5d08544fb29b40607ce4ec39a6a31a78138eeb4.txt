commit e5d08544fb29b40607ce4ec39a6a31a78138eeb4
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 4 21:05:21 2014 -0700

    Remove group from post_process_group

diff --git a/src/sentry/processors/base.py b/src/sentry/processors/base.py
index a0c6cbe132..1277b26b36 100644
--- a/src/sentry/processors/base.py
+++ b/src/sentry/processors/base.py
@@ -13,4 +13,4 @@ __all__ = ('send_group_processors',)
 
 
 def send_group_processors(group, event, **kwargs):
-    post_process_group.delay(group=group, event=event, **kwargs)
+    post_process_group.delay(event=event, **kwargs)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 5e53b84a3b..53833a5d6f 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -47,13 +47,13 @@ def get_rules(project):
 
 @instrumented_task(
     name='sentry.tasks.post_process.post_process_group')
-def post_process_group(group, event, is_new, is_regression, is_sample, **kwargs):
+def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
     """
     Fires post processing hooks for a group.
     """
     from sentry.models import GroupRuleStatus, Project
 
-    project = Project.objects.get_from_cache(id=group.project_id)
+    project = Project.objects.get_from_cache(id=event.group.project_id)
 
     if settings.SENTRY_ENABLE_EXPLORE_CODE:
         record_affected_code.delay(event=event)
@@ -85,9 +85,9 @@ def post_process_group(group, event, is_new, is_regression, is_sample, **kwargs)
         # TODO(dcramer): this isnt the most efficient query pattern for this
         rule_status, _ = GroupRuleStatus.objects.get_or_create(
             rule=rule,
-            group=group,
+            group=event.group,
             defaults={
-                'project': group.project,
+                'project': project,
                 'status': STATUS_INACTIVE,
             },
         )
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 9b6eaf52f0..9d98c35abc 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -22,7 +22,6 @@ class PostProcessGroupTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_EXPLORE_CODE=False):
             post_process_group(
-                group=group,
                 event=event,
                 is_new=True,
                 is_regression=False,
@@ -33,7 +32,6 @@ class PostProcessGroupTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_EXPLORE_CODE=True):
             post_process_group(
-                group=group,
                 event=event,
                 is_new=True,
                 is_regression=False,
@@ -52,7 +50,6 @@ class PostProcessGroupTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_EXPLORE_USERS=False):
             post_process_group(
-                group=group,
                 event=event,
                 is_new=True,
                 is_regression=False,
@@ -63,7 +60,6 @@ class PostProcessGroupTest(TestCase):
 
         with self.settings(SENTRY_ENABLE_EXPLORE_USERS=True):
             post_process_group(
-                group=group,
                 event=event,
                 is_new=True,
                 is_regression=False,
@@ -94,7 +90,6 @@ class PostProcessGroupTest(TestCase):
         ]
 
         post_process_group(
-            group=group,
             event=event,
             is_new=False,
             is_regression=False,
@@ -106,7 +101,6 @@ class PostProcessGroupTest(TestCase):
         assert not mock_execute_rule.apply_async.called
 
         post_process_group(
-            group=group,
             event=event,
             is_new=True,
             is_regression=False,
@@ -116,7 +110,6 @@ class PostProcessGroupTest(TestCase):
         assert len(mock_execute_rule.apply_async.mock_calls) == 1
 
         post_process_group(
-            group=group,
             event=event,
             is_new=True,
             is_regression=False,
