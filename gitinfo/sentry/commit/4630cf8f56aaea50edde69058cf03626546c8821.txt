commit 4630cf8f56aaea50edde69058cf03626546c8821
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Feb 14 10:47:05 2020 -0800

    Api 726/integrations detailed view (#17038)

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 023b18e30f..f2c8de83ac 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -833,7 +833,7 @@ function routes() {
       <Route name="Integrations" path="plugins/">
         <Route
           name="Integration Details"
-          path=":pluginSlug/"
+          path=":integrationSlug/"
           componentPromise={() =>
             import(
               /* webpackChunkName: "ConfigureIntegration" */ 'app/views/organizationIntegrations/pluginDetailedView'
@@ -847,7 +847,7 @@ function routes() {
       <Route name="Integrations" path="sentry-apps/">
         <Route
           name="Details"
-          path=":appSlug"
+          path=":integrationSlug"
           componentPromise={() =>
             import(
               /* webpackChunkName: "ConfigureIntegration" */ 'app/views/organizationIntegrations/sentryAppDetailedView'
@@ -868,7 +868,7 @@ function routes() {
         />
         <Route
           name="Integration Details"
-          path=":providerKey"
+          path=":integrationSlug"
           componentPromise={() =>
             import(
               /* webpackChunkName: "ConfigureIntegration" */ 'app/views/organizationIntegrations/integrationDetailedView'
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index a081d8a580..3c32971c63 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1,6 +1,16 @@
 import {SpanEntry} from 'app/components/events/interfaces/spans/types';
 import {API_ACCESS_SCOPES} from 'app/constants';
 import {Field} from 'app/views/settings/components/forms/type';
+import {
+  INSTALLED,
+  NOT_INSTALLED,
+  PENDING,
+} from 'app/views/organizationIntegrations/constants';
+
+export type IntegrationInstallationStatus =
+  | typeof INSTALLED
+  | typeof NOT_INSTALLED
+  | typeof PENDING;
 
 export type ObjectStatus =
   | 'active'
@@ -308,10 +318,7 @@ export type PluginNoProject = {
   description?: string;
   resourceLinks?: Array<{title: string; url: string}>;
   features: string[];
-  featureDescriptions: Array<{
-    description: string;
-    featureGate: string;
-  }>;
+  featureDescriptions: IntegrationFeature[];
 };
 
 export type Plugin = PluginNoProject & {
@@ -514,7 +521,7 @@ export type IntegrationProvider = BaseIntegrationProvider & {
 };
 
 export type IntegrationFeature = {
-  description: React.ReactNode;
+  description: React.ReactNode | string;
   featureGate: string;
 };
 
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 421df796ee..9b530d4f5f 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -1,6 +1,11 @@
 import {uniqueId} from 'app/utils/guid';
+import capitalize from 'lodash/capitalize';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
-import {Organization} from 'app/types';
+import {
+  Organization,
+  SentryAppInstallation,
+  IntegrationInstallationStatus,
+} from 'app/types';
 import {Hooks} from 'app/types/hooks';
 import HookStore from 'app/stores/hookStore';
 import React from 'react';
@@ -163,3 +168,10 @@ export const getIntegrationFeatureGate = () => {
   const featureHook = HookStore.get('integrations:feature-gates')[0] || defaultHook;
   return featureHook();
 };
+
+export const getSentryAppInstallStatus = (install: SentryAppInstallation | undefined) => {
+  if (install) {
+    return capitalize(install.status) as IntegrationInstallationStatus;
+  }
+  return 'Not Installed';
+};
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
new file mode 100644
index 0000000000..e1023d6ebe
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -0,0 +1,334 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {RouteComponentProps} from 'react-router/lib/Router';
+
+import {Organization, IntegrationFeature, IntegrationInstallationStatus} from 'app/types';
+import {t} from 'app/locale';
+import AsyncComponent from 'app/components/asyncComponent';
+import space from 'app/styles/space';
+import Tag from 'app/views/settings/components/tag';
+import PluginIcon from 'app/plugins/components/pluginIcon';
+import InlineSvg from 'app/components/inlineSvg';
+import Access from 'app/components/acl/access';
+import Tooltip from 'app/components/tooltip';
+import {getIntegrationFeatureGate} from 'app/utils/integrationUtil';
+import Alert, {Props as AlertProps} from 'app/components/alert';
+import ExternalLink from 'app/components/links/externalLink';
+import marked, {singleLineRenderer} from 'app/utils/marked';
+import IntegrationStatus from './integrationStatus';
+
+type Tab = 'information' | 'configurations';
+
+type AlertType = AlertProps & {
+  text: string;
+};
+
+type State = {
+  tab: Tab;
+} & AsyncComponent['state'];
+
+type Props = {
+  organization: Organization;
+} & RouteComponentProps<{orgId: string; integrationSlug: string}, {}> &
+  AsyncComponent['props'];
+
+class AbstractIntegrationDetailedView<
+  P extends Props = Props,
+  S extends State = State
+> extends AsyncComponent<P, S> {
+  tabs: Tab[] = ['information', 'configurations'];
+
+  componentDidMount() {
+    const {location} = this.props;
+    const value =
+      location.query.tab === 'configurations' ? 'configurations' : 'information';
+
+    // eslint-disable-next-line react/no-did-mount-set-state
+    this.setState({tab: value});
+  }
+
+  /***
+   * Abstract methods defined below
+   */
+
+  get description(): string {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  get author(): string | undefined {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  get alerts(): AlertType[] {
+    //default is no alerts
+    return [];
+  }
+
+  //Returns a list of the resources displayed at the bottom of the information card
+  get resourceLinks(): Array<{title: string; url: string}> {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  get installationStatus(): IntegrationInstallationStatus {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  get integrationName(): string {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  //Returns an array of IntegrationFeatures which is used in feature gating and displaying what the integraiton does
+  get featureData(): IntegrationFeature[] {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  onTabChange = (value: Tab) => {
+    this.setState({tab: value});
+  };
+
+  //Returns the string that is shown as the title of a tab
+  getTabDiplay(tab: Tab): string {
+    //default is return the tab
+    return tab;
+  }
+
+  //Render the button at the top which is usually just an installation button
+  renderTopButton(
+    _disabledFromFeatures: boolean, //from the feature gate
+    _userHasAccess: boolean //from user permissions
+  ): React.ReactElement {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  //Returns the permission descriptions, only use by Sentry Apps
+  renderPermissions(): React.ReactElement | null {
+    //default is don't render permissions
+    return null;
+  }
+
+  //Returns the list of configurations for the integration
+  renderConfigurations() {
+    // Allow children to implement this
+    throw new Error('Not implemented');
+  }
+
+  /***
+   * Actually implmeented methods below*
+   */
+
+  //Returns the props as needed by the hooks integrations:feature-gates
+  get featureProps() {
+    const {organization} = this.props;
+    const featureData = this.featureData;
+
+    // Prepare the features list
+    const features = featureData.map(f => ({
+      featureGate: f.featureGate,
+      description: (
+        <FeatureListItem
+          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}
+        />
+      ),
+    }));
+
+    return {organization, features};
+  }
+
+  //Returns the content shown in the top section of the integration detail
+  renderTopSection() {
+    const {integrationSlug} = this.props.params;
+    const {organization} = this.props;
+
+    const {IntegrationFeatures} = getIntegrationFeatureGate();
+    return (
+      <Flex>
+        <PluginIcon pluginId={integrationSlug} size={50} />
+        <NameContainer>
+          <Flex>
+            <Name>{this.integrationName}</Name>
+            <StatusWrapper>
+              <IntegrationStatus status={this.installationStatus} />
+            </StatusWrapper>
+          </Flex>
+          <Flex>
+            {this.featureData.map(({featureGate}) => {
+              //modify the strings so it looks better
+              const feature = featureGate.replace(/integrations/g, '').replace(/-/g, ' ');
+              return <StyledTag key={feature}>{feature}</StyledTag>;
+            })}
+          </Flex>
+        </NameContainer>
+        <IntegrationFeatures {...this.featureProps}>
+          {({disabled, disabledReason}) => (
+            <DisableWrapper>
+              {disabled && <DisabledNotice reason={disabledReason} />}
+
+              <Access organization={organization} access={['org:integrations']}>
+                {({hasAccess}) => (
+                  <Tooltip
+                    title={t(
+                      'You must be an organization owner, manager or admin to install this.'
+                    )}
+                    disabled={hasAccess}
+                  >
+                    {this.renderTopButton(disabled, hasAccess)}
+                  </Tooltip>
+                )}
+              </Access>
+            </DisableWrapper>
+          )}
+        </IntegrationFeatures>
+      </Flex>
+    );
+  }
+
+  //Returns the tabs divider with the clickable tabs
+  renderTabs() {
+    //TODO: Convert to styled component
+    return (
+      <ul className="nav nav-tabs border-bottom" style={{paddingTop: '30px'}}>
+        {this.tabs.map(tabName => (
+          <li
+            key={tabName}
+            className={this.state.tab === tabName ? 'active' : ''}
+            onClick={() => this.onTabChange(tabName)}
+          >
+            <a style={{textTransform: 'capitalize'}}>{t(this.getTabDiplay(tabName))}</a>
+          </li>
+        ))}
+      </ul>
+    );
+  }
+
+  //Returns the information about the integration description and features
+  renderInformationCard() {
+    const {FeatureList} = getIntegrationFeatureGate();
+
+    return (
+      <React.Fragment>
+        <Description dangerouslySetInnerHTML={{__html: marked(this.description)}} />
+        <FeatureList
+          {...this.featureProps}
+          provider={{key: this.props.params.integrationSlug}}
+        />
+        {this.renderPermissions()}
+        <Metadata>
+          {!!this.author && <AuthorName>{t('By %s', this.author)}</AuthorName>}
+          <div>
+            {this.resourceLinks.map(({title, url}) => (
+              <ExternalLink key={url} href={url}>
+                {t(title)}
+              </ExternalLink>
+            ))}
+          </div>
+        </Metadata>
+
+        {this.alerts.map((alert, i) => (
+          <Alert key={i} type={alert.type} icon={alert.icon}>
+            <span dangerouslySetInnerHTML={{__html: singleLineRenderer(alert.text)}} />
+          </Alert>
+        ))}
+      </React.Fragment>
+    );
+  }
+
+  renderBody() {
+    return (
+      <React.Fragment>
+        {this.renderTopSection()}
+        {this.renderTabs()}
+        {this.state.tab === 'information'
+          ? this.renderInformationCard()
+          : this.renderConfigurations()}
+      </React.Fragment>
+    );
+  }
+}
+
+const Flex = styled('div')`
+  display: flex;
+`;
+
+const StyledTag = styled(Tag)`
+  &:not(:first-child) {
+    margin-left: ${space(0.5)};
+  }
+`;
+
+const NameContainer = styled('div')`
+  display: flex;
+  align-items: flex-start;
+  flex-direction: column;
+  justify-content: center;
+  padding-left: ${space(2)};
+`;
+
+const Name = styled('div')`
+  font-weight: bold;
+  font-size: 1.4em;
+  margin-bottom: ${space(1)};
+`;
+
+const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
+  <div
+    style={{
+      flex: 1,
+      alignItems: 'center',
+    }}
+    {...p}
+  >
+    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
+    <div style={{marginLeft: `${space(1)}`}}>{reason}</div>
+  </div>
+))`
+  color: ${p => p.theme.red};
+  font-size: 0.9em;
+`;
+
+const FeatureListItem = styled('span')`
+  line-height: 24px;
+`;
+
+const Description = styled('div')`
+  font-size: 1.5rem;
+  line-height: 2.1rem;
+  margin-bottom: ${space(2)};
+
+  li {
+    margin-bottom: 6px;
+  }
+`;
+
+const Metadata = styled(Flex)`
+  font-size: 0.9em;
+  margin-bottom: ${space(2)};
+
+  a {
+    margin-left: ${space(1)};
+  }
+`;
+
+const AuthorName = styled('div')`
+  color: ${p => p.theme.gray2};
+  flex: 1;
+`;
+
+const StatusWrapper = styled('div')`
+  margin-bottom: ${space(1)};
+  padding-left: ${space(2)};
+  line-height: 1.5em;
+`;
+
+const DisableWrapper = styled('div')`
+  margin-left: auto;
+  align-self: center;
+`;
+
+export default AbstractIntegrationDetailedView;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
index 7063a638f1..fe3b8aa04f 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/constants.tsx
@@ -1,6 +1,6 @@
-export const INSTALLED = 'Installed';
-export const NOT_INSTALLED = 'Not Installed';
-export const PENDING = 'Pending';
+export const INSTALLED = 'Installed' as const;
+export const NOT_INSTALLED = 'Not Installed' as const;
+export const PENDING = 'Pending' as const;
 
 export const colors = {
   [INSTALLED]: 'success',
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
index 604c0b1abe..9316bc7263 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
@@ -1,94 +1,98 @@
 import React from 'react';
 import styled from '@emotion/styled';
 import keyBy from 'lodash/keyBy';
-import {RouteComponentProps} from 'react-router/lib/Router';
 
-import {Organization, Integration, IntegrationProvider} from 'app/types';
+import {Integration, IntegrationProvider} from 'app/types';
 import {RequestOptions} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
-import {
-  trackIntegrationEvent,
-  getIntegrationFeatureGate,
-} from 'app/utils/integrationUtil';
-import AsyncComponent from 'app/components/asyncComponent';
-import PluginIcon from 'app/plugins/components/pluginIcon';
+import {trackIntegrationEvent} from 'app/utils/integrationUtil';
 import space from 'app/styles/space';
 import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
-import Access from 'app/components/acl/access';
-import Tag from 'app/views/settings/components/tag';
 import Button from 'app/components/button';
-import Alert, {Props as AlertProps} from 'app/components/alert';
-import Tooltip from 'app/components/tooltip';
-import InlineSvg from 'app/components/inlineSvg';
-import ExternalLink from 'app/components/links/externalLink';
-import InstalledIntegration, {
-  Props as InstalledIntegrationProps,
-} from 'app/views/organizationIntegrations/installedIntegration';
-import marked, {singleLineRenderer} from 'app/utils/marked';
+import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
 import withOrganization from 'app/utils/withOrganization';
-import {growDown, highlight} from 'app/styles/animations';
 import {sortArray} from 'app/utils';
-import IntegrationStatus from './integrationStatus';
+import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 
 type State = {
   configurations: Integration[];
   information: {providers: IntegrationProvider[]};
-  tab: string;
-  newlyInstalledIntegrationId: string;
 };
 
-type Props = {
-  organization: Organization;
-} & RouteComponentProps<{orgId: string; providerKey: string}, {}>;
-
-const tabs = ['information', 'configurations'];
-
-class IntegrationDetailedView extends AsyncComponent<
-  Props & AsyncComponent['props'],
-  State & AsyncComponent['state']
+class IntegrationDetailedView extends AbstractIntegrationDetailedView<
+  AbstractIntegrationDetailedView['props'],
+  State & AbstractIntegrationDetailedView['state']
 > {
-  componentDidMount() {
-    const {location} = this.props;
-    const value =
-      typeof location.query.tab === 'string' ? location.query.tab : 'information';
+  getEndpoints(): ([string, string, any] | [string, string])[] {
+    const {orgId, integrationSlug} = this.props.params;
+    const baseEndpoints: ([string, string, any] | [string, string])[] = [
+      [
+        'information',
+        `/organizations/${orgId}/config/integrations/?provider_key=${integrationSlug}`,
+      ],
+      [
+        'configurations',
+        `/organizations/${orgId}/integrations/?provider_key=${integrationSlug}`,
+      ],
+    ];
 
-    // eslint-disable-next-line react/no-did-mount-set-state
-    this.setState({tab: value});
+    return baseEndpoints;
   }
 
-  getInformation() {
+  get provider() {
     return this.state.information.providers[0];
   }
 
+  get description() {
+    return this.metadata.description;
+  }
+
+  get author() {
+    return this.metadata.author;
+  }
+
+  get alerts() {
+    const provider = this.provider;
+    const metadata = this.metadata;
+    const alerts = metadata.aspects.alerts || [];
+
+    if (!provider.canAdd && metadata.aspects.externalInstall) {
+      alerts.push({
+        type: 'warning',
+        icon: 'icon-exit',
+        text: metadata.aspects.externalInstall.noticeText,
+      });
+    }
+    return alerts;
+  }
+
+  get resourceLinks() {
+    const metadata = this.metadata;
+    return [
+      {url: metadata.source_url, title: 'View Source'},
+      {url: metadata.issue_url, title: 'Report Issue'},
+    ];
+  }
+
+  get metadata() {
+    return this.provider.metadata;
+  }
+
   get isEnabled() {
     return this.state.configurations.length > 0;
   }
 
-  get status() {
+  get installationStatus() {
     return this.isEnabled ? 'Installed' : 'Not Installed';
   }
 
-  getEndpoints(): ([string, string, any] | [string, string])[] {
-    const {orgId, providerKey} = this.props.params;
-    const baseEndpoints: ([string, string, any] | [string, string])[] = [
-      [
-        'information',
-        `/organizations/${orgId}/config/integrations/?provider_key=${providerKey}`,
-      ],
-      [
-        'configurations',
-        `/organizations/${orgId}/integrations/?provider_key=${providerKey}`,
-      ],
-    ];
-
-    return baseEndpoints;
+  get integrationName() {
+    return this.provider.name;
   }
 
-  featureTags(features: string[]) {
-    return features.map(feature => (
-      <StyledTag key={feature}>{feature.replace(/-/g, ' ')}</StyledTag>
-    ));
+  get featureData() {
+    return this.metadata.features;
   }
 
   onInstall = (integration: Integration) => {
@@ -96,12 +100,6 @@ class IntegrationDetailedView extends AsyncComponent<
     // integration overwrite the old integration.
     const keyedItems = keyBy(this.state.configurations, i => i.id);
 
-    // Mark this integration as newlyAdded if it didn't already exist, allowing
-    // us to animate the element in.
-    if (!keyedItems.hasOwnProperty(integration.id)) {
-      this.setState({newlyInstalledIntegrationId: integration.id});
-    }
-
     const configurations = sortArray(
       Object.values({...keyedItems, [integration.id]: integration}),
       i => i.name
@@ -143,291 +141,88 @@ class IntegrationDetailedView extends AsyncComponent<
 
   handleExternalInstall = () => {
     const {organization} = this.props;
-    const information = this.getInformation();
+    const provider = this.provider;
     trackIntegrationEvent(
       {
         eventKey: 'integrations.installation_start',
         eventName: 'Integrations: Installation Start',
-        integration: information.key,
+        integration: provider.key,
         integration_type: 'first_party',
       },
       organization
     );
   };
 
-  onTabChange = value => {
-    this.setState({tab: value});
-  };
-
-  renderBody() {
-    const {configurations, tab} = this.state;
-    const information = this.getInformation();
+  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
     const {organization} = this.props;
+    const provider = this.provider;
+    const {metadata} = provider;
 
-    const {metadata} = information;
-    const alerts = metadata.aspects.alerts || [];
-
-    if (!information.canAdd && metadata.aspects.externalInstall) {
-      alerts.push({
-        type: 'warning',
-        icon: 'icon-exit',
-        text: metadata.aspects.externalInstall.noticeText,
-      });
-    }
+    const size = 'small' as const;
+    const priority = 'primary' as const;
 
     const buttonProps = {
       style: {marginLeft: space(1)},
-      size: 'small',
-      priority: 'primary',
+      size,
+      priority,
+      'data-test-id': 'add-button',
+      disabled: disabledFromFeatures || !userHasAccess,
+      organization,
     };
 
-    const AddButton = p =>
-      (information.canAdd && (
+    if (provider.canAdd) {
+      return (
         <AddIntegrationButton
-          provider={information}
+          provider={provider}
           onAddIntegration={this.onInstall}
           {...buttonProps}
-          {...p}
         />
-      )) ||
-      (!information.canAdd && metadata.aspects.externalInstall && (
+      );
+    }
+    if (metadata.aspects.externalInstall) {
+      return (
         <Button
           icon="icon-exit"
           href={metadata.aspects.externalInstall.url}
           onClick={this.handleExternalInstall}
           external
           {...buttonProps}
-          {...p}
         >
           {metadata.aspects.externalInstall.buttonText}
         </Button>
-      ));
-
-    // Prepare the features list
-    const features = metadata.features.map(f => ({
-      featureGate: f.featureGate,
-      description: (
-        <FeatureListItem
-          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}
-        />
-      ),
-    }));
+      );
+    }
+    //should never happen but we can't return undefined without some refactoring
+    return <span />;
+  }
 
-    const {FeatureList, IntegrationFeatures} = getIntegrationFeatureGate();
-    const featureProps = {organization, features};
+  renderConfigurations() {
+    const {configurations} = this.state;
+    const {organization} = this.props;
+    const provider = this.provider;
     return (
-      <React.Fragment>
-        <Flex>
-          <PluginIcon size={60} pluginId={information.key} />
-          <TitleContainer>
-            <Flex>
-              <Title>{information.name}</Title>
-              <Status status={this.status} />
-            </Flex>
-            <Flex>
-              {information.features.length && this.featureTags(information.features)}
-            </Flex>
-          </TitleContainer>
-
-          <IntegrationFeatures {...featureProps}>
-            {({disabled, disabledReason}) => (
-              <div
-                style={{
-                  marginLeft: 'auto',
-                  alignSelf: 'center',
-                }}
-              >
-                {disabled && <DisabledNotice reason={disabledReason} />}
-                <Access organization={organization} access={['org:integrations']}>
-                  {({hasAccess}) => (
-                    <Tooltip
-                      title={t(
-                        'You must be an organization owner, manager or admin to install this.'
-                      )}
-                      disabled={hasAccess}
-                    >
-                      <AddButton
-                        data-test-id="add-button"
-                        disabled={disabled || !hasAccess}
-                        organization={organization}
-                      />
-                    </Tooltip>
-                  )}
-                </Access>
-              </div>
-            )}
-          </IntegrationFeatures>
-        </Flex>
-        <ul className="nav nav-tabs border-bottom" style={{paddingTop: '30px'}}>
-          {tabs.map(tabName => (
-            <li
-              key={tabName}
-              className={tab === tabName ? 'active' : ''}
-              onClick={() => this.onTabChange(tabName)}
-            >
-              <a style={{textTransform: 'capitalize'}}>{tabName}</a>
-            </li>
-          ))}
-        </ul>
-        {tab === 'information' ? (
-          <InformationCard alerts={alerts} information={information}>
-            <FeatureList {...featureProps} provider={information} />
-          </InformationCard>
-        ) : (
-          <div>
-            {configurations.map(integration => (
-              <StyledInstalledIntegration
-                key={integration.id}
-                organization={organization}
-                provider={information}
-                integration={integration}
-                onRemove={this.onRemove}
-                onDisable={this.onDisable}
-                onReinstallIntegration={this.onInstall}
-                data-test-id={integration.id}
-                newlyAdded={integration.id === this.state.newlyInstalledIntegrationId}
-              />
-            ))}
-          </div>
-        )}
-      </React.Fragment>
+      <div>
+        {configurations.map(integration => (
+          <InstallWrapper key={integration.id}>
+            <InstalledIntegration
+              organization={organization}
+              provider={provider}
+              integration={integration}
+              onRemove={this.onRemove}
+              onDisable={this.onDisable}
+              onReinstallIntegration={this.onInstall}
+              data-test-id={integration.id}
+            />
+          </InstallWrapper>
+        ))}
+      </div>
     );
   }
 }
 
-const Flex = styled('div')`
-  display: flex;
-`;
-
-const Title = styled('div')`
-  font-weight: bold;
-  font-size: 1.4em;
-  margin-bottom: ${space(1)};
-`;
-
-const TitleContainer = styled('div')`
-  display: flex;
-  align-items: flex-start;
-  flex-direction: column;
-  justify-content: center;
-  padding-left: ${space(2)};
-`;
-
-const StyledTag = styled(Tag)`
-  &:not(:first-child) {
-    margin-left: ${space(0.5)};
-  }
-`;
-
-const Description = styled('div')`
-  font-size: 1.5rem;
-  line-height: 2.1rem;
-  margin-bottom: ${space(2)};
-
-  li {
-    margin-bottom: 6px;
-  }
-`;
-
-const Metadata = styled(Flex)`
-  font-size: 0.9em;
-  margin-bottom: ${space(2)};
-
-  a {
-    margin-left: ${space(1)};
-  }
-`;
-
-const AuthorName = styled('div')`
-  color: ${p => p.theme.gray2};
-  flex: 1;
-`;
-
-const FeatureListItem = styled('span')`
-  line-height: 24px;
-`;
-
-const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
-  <div
-    style={{
-      flex: 1,
-      alignItems: 'center',
-    }}
-    {...p}
-  >
-    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
-    <div style={{marginLeft: `${space(1)}`}}>{reason}</div>
-  </div>
-))`
-  color: ${p => p.theme.red};
-  font-size: 0.9em;
-`;
-
-const NewInstallation = styled('div')`
-  overflow: hidden;
-  transform-origin: 0 auto;
-  animation: ${growDown('59px')} 160ms 500ms ease-in-out forwards,
-    ${p => highlight(p.theme.yellowLightest)} 1000ms 500ms ease-in-out forwards;
-`;
-
-const StyledInstalledIntegration = styled(
-  (p: InstalledIntegrationProps & {newlyAdded: boolean}) =>
-    p.newlyAdded ? (
-      <NewInstallation>
-        <InstalledIntegration {...p} />
-      </NewInstallation>
-    ) : (
-      <InstalledIntegration {...p} />
-    )
-)`
+const InstallWrapper = styled('div')`
   padding: ${space(2)};
   border: 1px solid ${p => p.theme.borderLight};
 `;
 
-const StatusWrapper = styled('div')`
-  margin-bottom: ${space(1)};
-  padding-left: ${space(2)};
-  line-height: 1.5em;
-`;
-
-const Status = p => (
-  <StatusWrapper>
-    <IntegrationStatus {...p} />
-  </StatusWrapper>
-);
-
-const InformationCard = ({children, alerts, information}: InformationCardProps) => {
-  const {metadata} = information;
-  const description = marked(metadata.description);
-  return (
-    <React.Fragment>
-      <Description dangerouslySetInnerHTML={{__html: description}} />
-      {children}
-      <Metadata>
-        <AuthorName>{t('By %s', information.metadata.author)}</AuthorName>
-        <div>
-          <ExternalLink href={metadata.source_url}>{t('View Source')}</ExternalLink>
-          <ExternalLink href={metadata.issue_url}>{t('Report Issue')}</ExternalLink>
-        </div>
-      </Metadata>
-
-      {alerts.map((alert, i) => (
-        <Alert key={i} type={alert.type} icon={alert.icon}>
-          <span dangerouslySetInnerHTML={{__html: singleLineRenderer(alert.text)}} />
-        </Alert>
-      ))}
-    </React.Fragment>
-  );
-};
-
-type InformationCardProps = {
-  children: React.ReactNode;
-  alerts: any | AlertType[];
-  information: IntegrationProvider;
-};
-
-type AlertType = AlertProps & {
-  text: string;
-};
-
 export default withOrganization(IntegrationDetailedView);
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 3898b6e056..5ec1cf2b84 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -3,7 +3,6 @@ import keyBy from 'lodash/keyBy';
 import React from 'react';
 import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
-import capitalize from 'lodash/capitalize';
 
 import {
   Organization,
@@ -16,7 +15,10 @@ import {
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {RequestOptions} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
-import {trackIntegrationEvent} from 'app/utils/integrationUtil';
+import {
+  trackIntegrationEvent,
+  getSentryAppInstallStatus,
+} from 'app/utils/integrationUtil';
 import {removeSentryApp} from 'app/actionCreators/sentryApps';
 import {sortArray} from 'app/utils';
 import {t} from 'app/locale';
@@ -243,13 +245,6 @@ class OrganizationIntegrations extends AsyncComponent<
     return this.state.appInstalls.find(i => i.app.slug === app.slug);
   };
 
-  getAppInstallStatus = (install: SentryAppInstallation | undefined) => {
-    if (install) {
-      return capitalize(install.status) as 'Installed' | 'Pending';
-    }
-    return 'Not Installed';
-  };
-
   //Returns 0 if uninstalled, 1 if pending, and 2 if installed
   getInstallValue(integration: AppOrProviderOrPlugin) {
     const {integrations} = this.state;
@@ -360,7 +355,7 @@ class OrganizationIntegrations extends AsyncComponent<
   //render either an internal or non-internal app
   renderSentryApp = (app: SentryApp) => {
     const {organization} = this.props;
-    const status = this.getAppInstallStatus(this.getAppInstall(app));
+    const status = getSentryAppInstallStatus(this.getAppInstall(app));
 
     return (
       <IntegrationRow
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
index fa70ede970..12f360a77a 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
@@ -5,7 +5,7 @@ import Link from 'app/components/links/link';
 import {PanelItem} from 'app/components/panels';
 import PluginIcon from 'app/plugins/components/pluginIcon';
 import space from 'app/styles/space';
-import {Organization, SentryApp} from 'app/types';
+import {Organization, SentryApp, IntegrationInstallationStatus} from 'app/types';
 import {t} from 'app/locale';
 
 import IntegrationStatus from './integrationStatus';
@@ -15,7 +15,7 @@ type Props = {
   type: 'plugin' | 'firstParty' | 'sentryApp';
   slug: string;
   displayName: string;
-  status: 'Installed' | 'Not Installed' | 'Pending';
+  status: IntegrationInstallationStatus;
   publishStatus: 'unpublished' | 'published' | 'internal';
   configurations: number;
 };
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx
index f817468dff..aa76dede1c 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationStatus.tsx
@@ -4,11 +4,12 @@ import CircleIndicator from 'app/components/circleIndicator';
 import theme from 'app/utils/theme';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
+import {IntegrationInstallationStatus} from 'app/types';
 
 import {colors} from './constants';
 
 type StatusProps = {
-  status: 'Installed' | 'Not Installed' | 'Pending';
+  status: IntegrationInstallationStatus;
 };
 
 const StatusWrapper = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
index 899c8a7528..fbd3d8803b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
@@ -1,71 +1,59 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import {RouteComponentProps} from 'react-router/lib/Router';
 
-import {
-  Organization,
-  PluginWithProjectList,
-  PluginNoProject,
-  PluginProjectItem,
-} from 'app/types';
+import {PluginWithProjectList, PluginProjectItem} from 'app/types';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
-import AsyncComponent from 'app/components/asyncComponent';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import Tag from 'app/views/settings/components/tag';
-import Access from 'app/components/acl/access';
-import Tooltip from 'app/components/tooltip';
 import Button from 'app/components/button';
-import InlineSvg from 'app/components/inlineSvg';
-import ExternalLink from 'app/components/links/externalLink';
 import InstalledPlugin from 'app/views/organizationIntegrations/installedPlugin';
 import {openModal} from 'app/actionCreators/modal';
 import ContextPickerModal from 'app/components/contextPickerModal';
-import {getIntegrationFeatureGate} from 'app/utils/integrationUtil';
 import {t} from 'app/locale';
-import IntegrationStatus from './integrationStatus';
-
-type Tab = 'information' | 'configurations';
-const tabs: Tab[] = ['information', 'configurations'];
+import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 
 type State = {
   plugins: PluginWithProjectList[];
-  tab: Tab;
 };
 
-type Props = {
-  organization: Organization;
-} & RouteComponentProps<{orgId: string; pluginSlug: string}, {}>;
+type Tab = AbstractIntegrationDetailedView['state']['tab'];
 
-class PluginDetailedView extends AsyncComponent<
-  Props & AsyncComponent['props'],
-  State & AsyncComponent['state']
+class PluginDetailedView extends AbstractIntegrationDetailedView<
+  AbstractIntegrationDetailedView['props'],
+  State & AbstractIntegrationDetailedView['state']
 > {
-  componentDidMount() {
-    const {location} = this.props;
-    const value =
-      location.query.tab === 'configurations' ? 'configurations' : 'information';
-
-    // eslint-disable-next-line react/no-did-mount-set-state
-    this.setState({tab: value});
-  }
-
   getEndpoints(): ([string, string, any] | [string, string])[] {
-    const {orgId, pluginSlug} = this.props.params;
+    const {orgId, integrationSlug} = this.props.params;
     return [
-      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${pluginSlug}`],
+      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${integrationSlug}`],
     ];
   }
+
   get plugin() {
     return this.state.plugins[0];
   }
 
-  get isEnabled() {
-    return this.state.plugins[0].projectList.length > 0;
+  get description() {
+    return this.plugin.description || '';
+  }
+
+  get author() {
+    return this.plugin.author?.name;
   }
 
-  get status() {
-    return this.isEnabled ? 'Installed' : 'Not Installed';
+  get resourceLinks() {
+    return this.plugin.resourceLinks || [];
+  }
+
+  get installationStatus() {
+    return this.plugin.projectList.length > 0 ? 'Installed' : 'Not Installed';
+  }
+
+  get integrationName() {
+    return this.plugin.name;
+  }
+
+  get featureData() {
+    return this.plugin.featureDescriptions;
   }
 
   handleResetConfiguration = (projectId: string) => {
@@ -128,23 +116,6 @@ class PluginDetailedView extends AsyncComponent<
     );
   };
 
-  onTabChange = (value: Tab) => {
-    this.setState({tab: value});
-  };
-
-  featureTags() {
-    return this.plugin.features.map(feature => (
-      <StyledTag key={feature}>{feature.replace(/-/g, ' ')}</StyledTag>
-    ));
-  }
-
-  mapPluginToProvider() {
-    const plugin = this.plugin;
-    return {
-      key: plugin.slug,
-    };
-  }
-
   getTabDiplay(tab: Tab) {
     //we want to show project configurations to make it more clear
     if (tab === 'configurations') {
@@ -153,206 +124,42 @@ class PluginDetailedView extends AsyncComponent<
     return tab;
   }
 
-  renderBody() {
+  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
+    return (
+      <AddButton
+        data-test-id="add-button"
+        disabled={disabledFromFeatures || !userHasAccess}
+        onClick={this.handleAddToProject}
+        size="small"
+        priority="primary"
+      >
+        {t('Add to Project')}
+      </AddButton>
+    );
+  }
+
+  renderConfigurations() {
     const plugin = this.plugin;
-    const {tab} = this.state;
     const {organization} = this.props;
-
-    // Prepare the features list
-    const features = plugin.featureDescriptions.map(f => ({
-      featureGate: f.featureGate,
-      description: <FeatureListItem>{f.description}</FeatureListItem>,
-    }));
-
-    const {FeatureList, IntegrationFeatures} = getIntegrationFeatureGate();
-    const featureProps = {organization, features};
-
     return (
-      <React.Fragment>
-        <Flex>
-          <PluginIcon size={60} pluginId={plugin.slug} />
-          <TitleContainer>
-            <Flex>
-              <Title>{plugin.name}</Title>
-              <Status status={this.status} />
-            </Flex>
-            <Flex>{this.featureTags()}</Flex>
-          </TitleContainer>
-          <IntegrationFeatures {...featureProps}>
-            {({disabled, disabledReason}) => (
-              <div
-                style={{
-                  marginLeft: 'auto',
-                  alignSelf: 'center',
-                }}
-              >
-                {disabled && <DisabledNotice reason={disabledReason} />}
-                <Access organization={organization} access={['org:integrations']}>
-                  {({hasAccess}) => (
-                    <Tooltip
-                      title={t(
-                        'You must be an organization owner, manager or admin to install this.'
-                      )}
-                      disabled={hasAccess}
-                    >
-                      <AddButton
-                        data-test-id="add-button"
-                        disabled={disabled || !hasAccess}
-                        onClick={this.handleAddToProject}
-                        size="small"
-                        priority="primary"
-                      >
-                        {t('Add to Project')}
-                      </AddButton>
-                    </Tooltip>
-                  )}
-                </Access>
-              </div>
-            )}
-          </IntegrationFeatures>
-        </Flex>
-        <ul className="nav nav-tabs border-bottom" style={{paddingTop: '30px'}}>
-          {tabs.map(tabName => (
-            <li
-              key={tabName}
-              className={tab === tabName ? 'active' : ''}
-              onClick={() => this.onTabChange(tabName)}
-            >
-              <a style={{textTransform: 'capitalize'}}>{t(this.getTabDiplay(tabName))}</a>
-            </li>
-          ))}
-        </ul>
-        {tab === 'information' ? (
-          <InformationCard plugin={plugin}>
-            <FeatureList {...featureProps} provider={this.mapPluginToProvider()} />
-          </InformationCard>
-        ) : (
-          <div>
-            {plugin.projectList.map((projectItem: PluginProjectItem) => (
-              <InstalledPlugin
-                key={projectItem.projectId}
-                organization={organization}
-                plugin={plugin}
-                projectItem={projectItem}
-                onResetConfiguration={this.handleResetConfiguration}
-                onEnablePlugin={this.handleEnablePlugin}
-              />
-            ))}
-          </div>
-        )}
-      </React.Fragment>
+      <div>
+        {plugin.projectList.map((projectItem: PluginProjectItem) => (
+          <InstalledPlugin
+            key={projectItem.projectId}
+            organization={organization}
+            plugin={plugin}
+            projectItem={projectItem}
+            onResetConfiguration={this.handleResetConfiguration}
+            onEnablePlugin={this.handleEnablePlugin}
+          />
+        ))}
+      </div>
     );
   }
 }
 
-const Flex = styled('div')`
-  display: flex;
-`;
-
-const Title = styled('div')`
-  font-weight: bold;
-  font-size: 1.4em;
-  margin-bottom: ${space(1)};
-`;
-
-const TitleContainer = styled('div')`
-  display: flex;
-  align-items: flex-start;
-  flex-direction: column;
-  justify-content: center;
-  padding-left: ${space(2)};
-`;
-
-const StyledTag = styled(Tag)`
-  &:not(:first-child) {
-    margin-left: ${space(0.5)};
-  }
-`;
-
-const Description = styled('div')`
-  font-size: 1.5rem;
-  line-height: 2.1rem;
-  margin-bottom: ${space(2)};
-
-  li {
-    margin-bottom: 6px;
-  }
-`;
-
-const Metadata = styled(Flex)`
-  font-size: 0.9em;
-  margin-bottom: ${space(2)};
-
-  a {
-    margin-left: ${space(1)};
-  }
-`;
-
-const AuthorName = styled('div')`
-  color: ${p => p.theme.gray2};
-  flex: 1;
-`;
-
-const FeatureListItem = styled('span')`
-  line-height: 24px;
-`;
-
 const AddButton = styled(Button)`
   margin-left: ${space(1)};
 `;
 
-const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
-  <div
-    style={{
-      flex: 1,
-      alignItems: 'center',
-    }}
-    {...p}
-  >
-    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
-    <div style={{marginLeft: `${space(1)}`}}>{reason}</div>
-  </div>
-))`
-  color: ${p => p.theme.red};
-  font-size: 0.9em;
-`;
-
-const StatusWrapper = styled('div')`
-  margin-bottom: ${space(1)};
-  padding-left: ${space(2)};
-  line-height: 1.5em;
-`;
-
-const Status = p => (
-  <StatusWrapper>
-    <IntegrationStatus {...p} />
-  </StatusWrapper>
-);
-
-type InformationCardProps = {
-  children: React.ReactNode;
-  plugin: PluginNoProject;
-};
-
-const InformationCard = ({children, plugin}: InformationCardProps) => {
-  return (
-    <React.Fragment>
-      <Description>{plugin.description}</Description>
-      {children}
-      <Metadata>
-        {plugin.author && <AuthorName>{t('By %s', plugin.author.name)}</AuthorName>}
-        <div>
-          {/** TODO: May want to make resource links have same title as global integrations */}
-          {plugin.resourceLinks &&
-            plugin.resourceLinks.map(({title, url}) => (
-              <ExternalLink key={url} href={url}>
-                {title}
-              </ExternalLink>
-            ))}
-        </div>
-      </Metadata>
-    </React.Fragment>
-  );
-};
-
 export default withOrganization(PluginDetailedView);
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
index 9d2600223b..118fef981b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
@@ -1,12 +1,8 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import {RouteComponentProps} from 'react-router/lib/Router';
-import capitalize from 'lodash/capitalize';
 
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import Access from 'app/components/acl/access';
 import Button from 'app/components/button';
-import PluginIcon from 'app/plugins/components/pluginIcon';
 import space from 'app/styles/space';
 import {t, tct} from 'app/locale';
 import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
@@ -14,47 +10,37 @@ import {
   installSentryApp,
   uninstallSentryApp,
 } from 'app/actionCreators/sentryAppInstallations';
-import AsyncComponent from 'app/components/asyncComponent';
-import marked, {singleLineRenderer} from 'app/utils/marked';
-import InlineSvg from 'app/components/inlineSvg';
-import Tag from 'app/views/settings/components/tag';
 import {toPermissions} from 'app/utils/consolidatedScopes';
 import CircleIndicator from 'app/components/circleIndicator';
-import {
-  IntegrationFeature,
-  SentryApp,
-  Organization,
-  SentryAppInstallation,
-} from 'app/types';
+import {IntegrationFeature, SentryApp, SentryAppInstallation} from 'app/types';
 import withOrganization from 'app/utils/withOrganization';
-import {getIntegrationFeatureGate} from 'app/utils/integrationUtil';
 import SplitInstallationIdModal from 'app/views/organizationIntegrations/SplitInstallationIdModal';
 import {openModal} from 'app/actionCreators/modal';
+import {getSentryAppInstallStatus} from 'app/utils/integrationUtil';
 import {UninstallButton} from '../settings/organizationDeveloperSettings/sentryApplicationRow/installButtons';
-import IntegrationStatus from './integrationStatus';
-import {NOT_INSTALLED} from './constants';
+import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 
 type State = {
   sentryApp: SentryApp;
   featureData: IntegrationFeature[];
+  appInstalls: SentryAppInstallation[];
 };
 
-type Props = {
-  organization: Organization;
-} & RouteComponentProps<{appSlug: string}, {}>;
+type Tab = AbstractIntegrationDetailedView['state']['tab'];
 
-class SentryAppDetailedView extends AsyncComponent<
-  Props & AsyncComponent['props'],
-  State & AsyncComponent['state']
+class SentryAppDetailedView extends AbstractIntegrationDetailedView<
+  AbstractIntegrationDetailedView['props'],
+  State & AbstractIntegrationDetailedView['state']
 > {
+  tabs: Tab[] = ['information'];
   getEndpoints(): ([string, string, any] | [string, string])[] {
     const {
       organization,
-      params: {appSlug},
+      params: {integrationSlug},
     } = this.props;
     const baseEndpoints: ([string, string, any] | [string, string])[] = [
-      ['sentryApp', `/sentry-apps/${appSlug}/`],
-      ['featureData', `/sentry-apps/${appSlug}/features/`],
+      ['sentryApp', `/sentry-apps/${integrationSlug}/`],
+      ['featureData', `/sentry-apps/${integrationSlug}/features/`],
       ['appInstalls', `/organizations/${organization.slug}/sentry-app-installations/`],
     ];
 
@@ -64,35 +50,52 @@ class SentryAppDetailedView extends AsyncComponent<
   onLoadAllEndpointsSuccess() {
     const {
       organization,
-      params: {appSlug},
+      params: {integrationSlug},
       router,
     } = this.props;
 
     return (
-      this.state.sentryApp.status === 'internal' &&
-      router.push(`/settings/${organization.slug}/developer-settings/${appSlug}/`)
+      this.sentryApp.status === 'internal' &&
+      router.push(`/settings/${organization.slug}/developer-settings/${integrationSlug}/`)
     );
   }
 
-  featureTags(features: IntegrationFeature[]) {
-    return features.map(feature => {
-      const feat = feature.featureGate.replace(/integrations/g, '');
-      return <StyledTag key={feat}>{feat.replace(/-/g, ' ')}</StyledTag>;
-    });
+  get sentryApp() {
+    return this.state.sentryApp;
+  }
+
+  get description() {
+    return this.state.sentryApp.overview || '';
+  }
+
+  get author() {
+    return this.sentryApp.author;
+  }
+
+  get resourceLinks() {
+    //sentry apps don't have resources (yet)
+    return [];
   }
 
   get permissions() {
-    return toPermissions(this.state.sentryApp.scopes);
+    return toPermissions(this.sentryApp.scopes);
   }
 
   get installationStatus() {
-    const install = this.isInstalled();
-    return (install && capitalize(install.status)) || NOT_INSTALLED;
+    return getSentryAppInstallStatus(this.install);
   }
 
-  isInstalled = () => {
-    return this.state.appInstalls.find(i => i.app.slug === this.state.sentryApp.slug);
-  };
+  get integrationName() {
+    return this.sentryApp.name;
+  }
+
+  get featureData() {
+    return this.state.featureData;
+  }
+
+  get install() {
+    return this.state.appInstalls.find(i => i.app.slug === this.sentryApp.slug);
+  }
 
   redirectUser = (install: SentryAppInstallation) => {
     const {organization} = this.props;
@@ -137,11 +140,11 @@ class SentryAppDetailedView extends AsyncComponent<
     try {
       await uninstallSentryApp(this.api, install);
       const appInstalls = this.state.appInstalls.filter(
-        i => i.app.slug !== this.state.sentryApp.slug
+        i => i.app.slug !== this.sentryApp.slug
       );
       return this.setState({appInstalls});
     } catch (error) {
-      return addErrorMessage(t(`Unable to uninstall ${this.state.sentryApp.name}`));
+      return addErrorMessage(t(`Unable to uninstall ${this.sentryApp.name}`));
     }
   };
 
@@ -152,7 +155,7 @@ class SentryAppDetailedView extends AsyncComponent<
     }
 
     return (
-      <React.Fragment>
+      <PermissionWrapper>
         <Title>Permissions</Title>
         {permissions.read.length > 0 && (
           <Permission>
@@ -188,148 +191,38 @@ class SentryAppDetailedView extends AsyncComponent<
             </Text>
           </Permission>
         )}
-      </React.Fragment>
+      </PermissionWrapper>
     );
   }
 
-  renderBody() {
-    const {organization} = this.props;
-    const {featureData, sentryApp} = this.state;
-
-    // Prepare the features list
-    const features = (featureData || []).map(f => ({
-      featureGate: f.featureGate,
-      description: (
-        <span dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}} />
-      ),
-    }));
-
-    const {FeatureList, IntegrationFeatures} = getIntegrationFeatureGate();
-
-    const overview = sentryApp.overview || '';
-    const featureProps = {organization, features};
-
-    return (
-      <React.Fragment>
-        <Flex style={{flexDirection: 'column'}}>
-          <Flex>
-            <PluginIcon pluginId={sentryApp.slug} size={50} />
-            <NameContainer>
-              <Flex>
-                <Name>{sentryApp.name}</Name>
-                <Status status={this.installationStatus} />
-              </Flex>
-              <Flex>{features.length && this.featureTags(features)}</Flex>
-            </NameContainer>
-            <IntegrationFeatures {...featureProps}>
-              {({disabled, disabledReason}) => (
-                <div
-                  style={{
-                    marginLeft: 'auto',
-                    alignSelf: 'center',
-                  }}
-                >
-                  {disabled && <DisabledNotice reason={disabledReason} />}
-
-                  <Access organization={organization} access={['org:integrations']}>
-                    {({hasAccess}) => {
-                      return !this.isInstalled() ? (
-                        <Button
-                          size="small"
-                          priority="primary"
-                          disabled={!hasAccess || disabled}
-                          onClick={() => this.handleInstall()}
-                          style={{marginLeft: space(1)}}
-                          data-test-id="install"
-                        >
-                          {t('Accept & Install')}
-                        </Button>
-                      ) : (
-                        <UninstallButton
-                          install={this.isInstalled()}
-                          app={this.state.sentryApp}
-                          onClickUninstall={this.handleUninstall}
-                          onUninstallModalOpen={() => {}} //TODO: Implement tracking analytics
-                          disabled={!hasAccess}
-                        />
-                      );
-                    }}
-                  </Access>
-                </div>
-              )}
-            </IntegrationFeatures>
-          </Flex>
-          <ul className="nav nav-tabs border-bottom" style={{paddingTop: '30px'}}>
-            <li className="active">
-              <a>Information</a>
-            </li>
-          </ul>
-          <Description dangerouslySetInnerHTML={{__html: marked(overview)}} />
-          <FeatureList {...featureProps} provider={{...sentryApp, key: sentryApp.slug}} />
-
-          {this.renderPermissions()}
-          <Footer>
-            <Author>{t('Authored By %s', sentryApp.author)}</Author>
-          </Footer>
-        </Flex>
-      </React.Fragment>
+  renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
+    return !this.install ? (
+      <InstallButton
+        size="small"
+        priority="primary"
+        disabled={disabledFromFeatures || !userHasAccess}
+        onClick={() => this.handleInstall()}
+        style={{marginLeft: space(1)}}
+        data-test-id="install"
+      >
+        {t('Accept & Install')}
+      </InstallButton>
+    ) : (
+      <UninstallButton
+        install={this.install}
+        app={this.sentryApp}
+        onClickUninstall={this.handleUninstall}
+        onUninstallModalOpen={() => {}} //TODO: Implement tracking analytics
+        disabled={!userHasAccess}
+      />
     );
   }
-}
 
-const Flex = styled('div')`
-  display: flex;
-`;
-
-const NameContainer = styled('div')`
-  display: flex;
-  align-items: flex-start;
-  flex-direction: column;
-  justify-content: center;
-  padding-left: ${space(2)};
-`;
-
-const Name = styled('div')`
-  font-weight: bold;
-  font-size: 1.4em;
-  margin-bottom: ${space(1)};
-`;
-
-const Description = styled('div')`
-  font-size: 1.5rem;
-  line-height: 2.1rem;
-  margin-bottom: ${space(2)};
-
-  li {
-    margin-bottom: 6px;
+  //no configuraitons for sentry apps
+  renderConfigurations() {
+    return null;
   }
-`;
-
-const Author = styled('div')`
-  color: ${p => p.theme.gray2};
-`;
-
-const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
-  <div
-    style={{
-      flex: 1,
-      alignItems: 'center',
-    }}
-    {...p}
-  >
-    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
-    <div style={{marginLeft: `${space(1)}`}}>{reason}</div>
-  </div>
-))`
-  color: ${p => p.theme.red};
-  font-size: 0.9em;
-`;
-
-const StyledTag = styled(Tag)`
-  &:not(:first-child) {
-    margin-left: ${space(0.5)};
-  }
-`;
+}
 
 const Text = styled('p')`
   margin: 0px 6px;
@@ -339,12 +232,8 @@ const Permission = styled('div')`
   display: flex;
 `;
 
-const Footer = styled('div')`
-  display: flex;
-  padding: 20px 30px;
-  border-top: 1px solid #e2dee6;
-  margin: 20px -30px -30px;
-  justify-content: space-between;
+const PermissionWrapper = styled('div')`
+  padding-bottom: ${space(2)};
 `;
 
 const Title = styled('p')`
@@ -357,16 +246,8 @@ const Indicator = styled(p => <CircleIndicator size={7} {...p} />)`
   color: ${p => p.theme.success};
 `;
 
-const StatusWrapper = styled('div')`
-  margin-bottom: ${space(1)};
-  padding-left: ${space(2)};
-  line-height: 1.5em;
+const InstallButton = styled(Button)`
+  margin-left: ${space(1)};
 `;
 
-const Status = p => (
-  <StatusWrapper>
-    <IntegrationStatus {...p} />
-  </StatusWrapper>
-);
-
 export default withOrganization(SentryAppDetailedView);
