commit 2f1be64021bf783bc5d24790102e798632a0ace4
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri May 3 10:13:57 2019 -0700

    feat(incidents): Update incidents UI to match API implementation (#13047)
    
    The API implementation does `title` instead of `name`, status as integers
    and `identifier` instead of `id`

diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 449b7356a8..e6aa08e2c2 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -397,8 +397,9 @@ export const SavedSearch = PropTypes.shape({
 
 export const Incident = PropTypes.shape({
   id: PropTypes.string.isRequired,
-  name: PropTypes.string.isRequired,
-  status: PropTypes.string.isRequired,
+  identifier: PropTypes.string.isRequired,
+  title: PropTypes.string.isRequired,
+  status: PropTypes.number.isRequired,
   query: PropTypes.string,
   projects: PropTypes.array.isRequired,
   eventCount: PropTypes.number.isRequired,
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
index 5a760e356b..7a8faf1cf1 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
@@ -30,7 +30,7 @@ export default class IncidentHeader extends React.Component {
               <Chevron src="icon-chevron-right" size={space(2)} />
               {params.incidentId}
             </Title>
-            <div>{incident && incident.name}</div>
+            <div>{incident && incident.title}</div>
           </PageHeading>
         </HeaderItem>
         {incident && (
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
index 05a109b943..b55a7f3531 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
@@ -14,6 +14,7 @@ import {PageContent, PageHeader} from 'app/styles/organization';
 import PageHeading from 'app/components/pageHeading';
 import BetaTag from 'app/components/betaTag';
 import space from 'app/styles/space';
+import {getStatus} from '../utils';
 
 const DEFAULT_QUERY_STATUS = 'unresolved';
 
@@ -37,10 +38,10 @@ class OrganizationIncidentsBody extends AsyncComponent {
     return (
       <PanelItem key={incident.id}>
         <TableLayout>
-          <Link to={`/organizations/${orgId}/incidents/${incident.id}/`}>
-            {incident.name}
+          <Link to={`/organizations/${orgId}/incidents/${incident.identifier}/`}>
+            {incident.title}
           </Link>
-          <div>{incident.status}</div>
+          <div>{getStatus(incident.status)}</div>
           <div>{incident.duration}</div>
           <div>{incident.usersAffected}</div>
           <div>{incident.eventCount}</div>
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
index 0e020cc60d..b3b926110e 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
@@ -1,3 +1,15 @@
 export function fetchIncident(api, orgId, incidentId) {
   return api.requestPromise(`/organizations/${orgId}/incidents/${incidentId}/`);
 }
+
+export function getStatus(status) {
+  switch (status) {
+    case 1:
+      return 'created';
+    case 2:
+      return 'closed';
+    case 0:
+    default:
+      return 'detected';
+  }
+}
diff --git a/tests/js/fixtures/incident.js b/tests/js/fixtures/incident.js
new file mode 100644
index 0000000000..6b658b57ef
--- /dev/null
+++ b/tests/js/fixtures/incident.js
@@ -0,0 +1,13 @@
+export function Incident(params) {
+  return {
+    id: '123',
+    identifier: '123',
+    title: 'Too many Chrome errors',
+    status: 0,
+    projects: [],
+    suspects: [],
+    eventCount: 100,
+    usersAffected: 20,
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
index d60e27e9a6..5f3ae04874 100644
--- a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
@@ -4,16 +4,7 @@ import {mount} from 'enzyme';
 import IncidentDetails from 'app/views/organizationIncidents/details';
 
 describe('IncidentDetails', function() {
-  const mockIncident = {
-    id: '123',
-    name: 'Too many Chrome errors',
-    status: 'resolved',
-    projects: [],
-    suspects: [],
-    eventCount: 100,
-    usersAffected: 20,
-  };
-
+  const mockIncident = TestStubs.Incident();
   beforeAll(function() {
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/123/',
diff --git a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
index f3fe4237dc..52d8223ad8 100644
--- a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
@@ -12,7 +12,10 @@ describe('OrganizationIncidentsList', function() {
   beforeEach(function() {
     mock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/',
-      body: [{id: '1', name: 'First incident'}, {id: '2', name: 'Second incident'}],
+      body: [
+        TestStubs.Incident({id: '1', identifier: '1', title: 'First incident'}),
+        TestStubs.Incident({id: '2', identifier: '1', title: 'Second incident'}),
+      ],
     });
   });
 
@@ -29,8 +32,8 @@ describe('OrganizationIncidentsList', function() {
     const items = wrapper.find('PanelItem');
 
     expect(items).toHaveLength(2);
-    expect(items.at(0).text()).toBe('First incident');
-    expect(items.at(1).text()).toBe('Second incident');
+    expect(items.at(0).text()).toContain('First incident');
+    expect(items.at(1).text()).toContain('Second incident');
   });
 
   it('displays empty state', function() {
