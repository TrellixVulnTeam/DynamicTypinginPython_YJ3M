commit b3543c405635b922a3eb80fb7527d13113cb47ff
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon May 7 18:22:26 2018 -0700

    feat(jira): Post new sentry comments to JIRA

diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 7f3a075c23..0f4a3922cf 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -5,6 +5,7 @@ from django.utils import timezone
 from rest_framework import status
 from rest_framework.response import Response
 
+from sentry import features
 from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
@@ -12,7 +13,10 @@ from sentry.api.serializers.rest_framework.group_notes import NoteSerializer, se
 
 from sentry.api.fields.actor import Actor
 
-from sentry.models import Activity, GroupSubscription, GroupSubscriptionReason, User
+from sentry.models import (
+    Activity, GroupLink, GroupSubscription, GroupSubscriptionReason,
+    ExternalIssue, Integration, User
+)
 from sentry.utils.functional import extract_lazy_object
 
 
@@ -97,5 +101,28 @@ class GroupNotesEndpoint(GroupEndpoint):
             data=data,
         )
 
+        # sync Sentry comments to external issues
+        if features.has('organizations:internal-catchall', group.organization, actor=request.user):
+            external_issues = list(
+                ExternalIssue.objects.filter(
+                    id__in=GroupLink.objects.filter(
+                        project_id=group.project_id,
+                        group_id=group.id,
+                        linked_type=GroupLink.LinkedType.issue,
+                    ).values_list('linked_id', flat=True)
+                )
+            )
+
+            if external_issues:
+                integrations = {
+                    i.id: i for i in Integration.objects.filter(
+                        id__in=[external_issue.integration_id for external_issue in external_issues]
+                    )
+                }
+
+                for external_issue in external_issues:
+                    integration = integrations[external_issue.integration_id]
+                    integration.get_installation().create_comment(external_issue.key, data['text'])
+
         activity.send_notification()
         return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index a7a577a7d2..d78ae3cff4 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -13,6 +13,7 @@ JIRA_KEY = '%s.jira' % (urlparse(absolute_uri()).hostname, )
 
 
 class JiraApiClient(object):
+    COMMENT_URL = '/rest/api/2/issue/%s/comment'
     ISSUE_URL = '/rest/api/2/issue/%s'
 
     def __init__(self, base_url, shared_secret):
@@ -46,3 +47,6 @@ class JiraApiClient(object):
 
     def get_issue(self, issue_id):
         return self.request('GET', self.ISSUE_URL % (issue_id,))
+
+    def create_comment(self, issue_key, comment):
+        return self.request('POST', self.COMMENT_URL % issue_key, data={'body': comment})
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index e5b1555155..c1792a15f0 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -42,6 +42,9 @@ class JiraIntegration(Integration):
             'description': issue['fields']['description'],
         }
 
+    def create_comment(self, issue_id, comment):
+        return self.get_client().create_comment(issue_id, comment)
+
 
 class JiraIntegrationProvider(IntegrationProvider):
     key = 'jira'
