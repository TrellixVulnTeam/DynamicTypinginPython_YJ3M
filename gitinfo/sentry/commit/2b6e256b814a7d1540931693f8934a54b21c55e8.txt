commit 2b6e256b814a7d1540931693f8934a54b21c55e8
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat Mar 5 20:27:39 2016 +0100

    Updated project settings and api for callsign changes

diff --git a/src/sentry/api/endpoints/organization_shortids.py b/src/sentry/api/endpoints/organization_shortids.py
index eec263a2d5..95c8ee1481 100644
--- a/src/sentry/api/endpoints/organization_shortids.py
+++ b/src/sentry/api/endpoints/organization_shortids.py
@@ -2,7 +2,11 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from django.db import transaction
+
 from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.models import Project
+from sentry.utils.strings import validate_callsign
 
 
 class ShortIdsUpdateEndpoint(OrganizationEndpoint):
@@ -16,20 +20,54 @@ class ShortIdsUpdateEndpoint(OrganizationEndpoint):
 
         :pparam string organization_slug: the slug of the organization the
                                           short ID should be looked up in.
-        :param projects: a dictionary of project IDs to their intended
-                         short IDs.
+        :param callsigns: a dictionary of project IDs to their intended
+                          callsigns.
         :auth: required
         """
-        projects = dict((str(p.id), p) for p in organization.project_set.all())
+        callsigns = request.DATA.get('callsigns', {})
+        for project_id, callsign in callsigns.iteritems():
+            callsign = validate_callsign(callsign)
+            if callsign is None:
+                return Response({'detail': 'invalid callsign "%s"' % callsign},
+                                status=400)
+            callsigns[project_id] = callsign
+
+        if len(callsigns) != len(callsigns.values()):
+            return Response({'detail': 'Duplicate callsigns'}, status=400)
+
+        project_q = organization.project_set.filter(
+            pk__in=[int(x) for x in callsigns if x.isdigit()]
+        )
+
         rv = {}
 
-        for project_id, callsign in request.DATA.get('projects', {}).iteritems():
-            project = projects.get(project_id)
-            if project is None:
-                continue
-            project.callsign = callsign
-            project.update_option('sentry:reviewed-callsign', True)
-            rv[project.id] = callsign
+        with transaction.atomic():
+            projects = {}
+
+            # Clear out all call-signs first so that we can move them
+            # around through the uniqueness
+            for project in project_q:
+                projects[str(project.id)] = project
+                project.callsign = None
+                project.save()
+
+            # Set new ones
+            for project_id, callsign in callsigns.iteritems():
+                project = projects.get(project_id)
+                if project is None:
+                    continue
+                other = Project.objects.filter(
+                    callsign=callsign,
+                    organization=organization
+                ).exclude(id=project.id).first()
+                if other is not None:
+                    if len(callsigns) != len(callsigns.values()):
+                        return Response({'detail': 'Duplicate callsign %s'
+                                         % callsign}, status=400)
+                project.callsign = callsign
+                project.update_option('sentry:reviewed-callsign', True)
+                project.save()
+                rv[project_id] = callsign
 
         return Response({
             'updated_short_ids': rv
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 27aefc7a3b..cced6b48f3 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -16,6 +16,9 @@ from django.utils.encoding import smart_unicode, force_unicode
 import six
 
 
+_callsign_re = re.compile(r'^[A-Z]{2,6}$')
+
+
 def truncatechars(value, arg):
     """
     Truncates a string after a certain number of chars.
@@ -88,3 +91,12 @@ def to_unicode(value):
         except Exception:
             value = '(Error decoding value)'
     return value
+
+
+def validate_callsign(value):
+    if not value:
+        return None
+    callsign = value.strip().upper()
+    if _callsign_re.match(callsign) is None:
+        return None
+    return callsign
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index ece666c4b0..b54bedd4e9 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import re
-
 from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
@@ -17,14 +15,12 @@ from sentry.web.forms.fields import (
     CustomTypedChoiceField, RangeField, OriginsField, IPNetworksField,
 )
 from sentry.web.frontend.base import ProjectView
+from sentry.utils.strings import validate_callsign
 
 
 BLANK_CHOICE = [("", "")]
 
 
-_callsign_re = re.compile(r'^[A-Z]{2,6}$')
-
-
 class EditProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Project Name'), max_length=200,
         widget=forms.TextInput(attrs={'placeholder': _('Production')}))
@@ -165,16 +161,17 @@ class EditProjectForm(forms.ModelForm):
         return slug
 
     def clean_callsign(self):
-        callsign = self.cleaned_data.get('callsign').strip().upper()
-        if _callsign_re.match(callsign) is None:
-            raise forms.ValidationError('Callsign must be between 2 and 6 letters')
+        callsign = validate_callsign(self.cleaned_data.get('callsign'))
+        if callsign is None:
+            raise forms.ValidationError(_('Callsign must be between 2 '
+                                          'and 6 letters'))
         other = Project.objects.filter(
             callsign=callsign,
             organization=self.organization
         ).exclude(id=self.instance.id).first()
         if other is not None:
-            raise forms.ValidationError('Another project (%s) is already '
-                                        'using that callsign' % other.name)
+            raise forms.ValidationError(_('Another project (%s) is already '
+                                          'using that callsign') % other.name)
         return callsign
 
 
