commit 9582cdbf5cf1ace23f3407c42230aef83f551823
Author: Radu Woinaroski <5281987+RaduW@users.noreply.github.com>
Date:   Mon May 4 19:02:46 2020 +0200

    feat(ingest): Expose information about internal relays (#18545)
    
    Return information about the internal relays in order to let Relays
    serve project configurations downstream.

diff --git a/src/sentry/api/endpoints/relay_publickeys.py b/src/sentry/api/endpoints/relay_publickeys.py
index 95fdd523af..ea556a4452 100644
--- a/src/sentry/api/endpoints/relay_publickeys.py
+++ b/src/sentry/api/endpoints/relay_publickeys.py
@@ -13,12 +13,23 @@ class RelayPublicKeysEndpoint(Endpoint):
     permission_classes = (RelayPermission,)
 
     def post(self, request):
+        calling_relay = request.relay
+
         relay_ids = request.relay_request_data.get("relay_ids") or ()
-        rv = dict.fromkeys(relay_ids)
+        legacy_public_keys = dict.fromkeys(relay_ids)
+        public_keys = dict.fromkeys(relay_ids)
 
         if relay_ids:
             relays = Relay.objects.filter(relay_id__in=relay_ids)
             for relay in relays:
-                rv[relay.relay_id] = relay.public_key
+                pk = relay.public_key
+                relay_id = relay.relay_id
+
+                legacy_public_keys[relay_id] = pk
+                public_keys[relay_id] = {
+                    "publicKey": pk,
+                    # only expose internal information to internal relays
+                    "internal": relay.is_internal and calling_relay.is_internal,
+                }
 
-        return Response({"public_keys": rv}, status=200)
+        return Response({"public_keys": legacy_public_keys, "relays": public_keys}, status=200)
diff --git a/tests/sentry/api/endpoints/test_relay_publickeys.py b/tests/sentry/api/endpoints/test_relay_publickeys.py
index b6b0de7aab..3acaade0de 100644
--- a/tests/sentry/api/endpoints/test_relay_publickeys.py
+++ b/tests/sentry/api/endpoints/test_relay_publickeys.py
@@ -21,10 +21,19 @@ class RelayPublicKeysConfigTest(APITestCase):
 
         self.public_key = self.key_pair[1]
         self.private_key = self.key_pair[0]
-        self.relay_id = six.text_type(uuid4())
 
-        self.relay = Relay.objects.create(
-            relay_id=self.relay_id, public_key=six.binary_type(self.public_key), is_internal=True
+        self.non_existing_key = six.text_type(uuid4())
+
+        self.internal_relay = Relay.objects.create(
+            relay_id=six.text_type(uuid4()),
+            public_key=six.binary_type(self.public_key),
+            is_internal=True,
+        )
+
+        self.external_relay = Relay.objects.create(
+            relay_id=six.text_type(uuid4()),
+            public_key=six.binary_type(self.public_key),
+            is_internal=False,
         )
         self.relay_a = Relay.objects.create(
             relay_id=six.text_type(uuid4()),
@@ -34,20 +43,62 @@ class RelayPublicKeysConfigTest(APITestCase):
         self.relay_b = Relay.objects.create(
             relay_id=six.text_type(uuid4()),
             public_key=six.binary_type(self.public_key),
-            is_internal=False,
+            is_internal=True,
         )
 
         self.project = self.create_project()
         self.path = reverse("sentry-api-0-relay-publickeys")
 
-    def test_get_project_config(self):
-        non_existing = six.text_type(uuid4())
+    def test_get_project_config_internal(self):
+        result = self._call_endpoint(self.internal_relay)
+        legacy_keys = result["public_keys"]
+        keys = result["relays"]
+
+        # check legacy
+        assert legacy_keys[self.relay_a.relay_id] == self.relay_a.public_key
+        assert legacy_keys[self.relay_b.relay_id] == self.relay_b.public_key
+        assert legacy_keys[self.non_existing_key] is None
+
+        # check new results
+        relay_a_info = keys[self.relay_a.relay_id]
+        assert relay_a_info["publicKey"] == self.relay_a.public_key
+        assert not relay_a_info["internal"]
+
+        relay_b_info = keys[self.relay_b.relay_id]
+        assert relay_b_info["publicKey"] == self.relay_b.public_key
+        assert relay_b_info["internal"]
+
+        assert keys[self.non_existing_key] is None
+
+    def test_get_project_config_external(self):
+        result = self._call_endpoint(self.external_relay)
+        legacy_keys = result["public_keys"]
+        keys = result["relays"]
+
+        # check legacy
+        assert legacy_keys[self.relay_a.relay_id] == self.relay_a.public_key
+        assert legacy_keys[self.relay_b.relay_id] == self.relay_b.public_key
+        assert legacy_keys[self.non_existing_key] is None
+
+        # check new results
+        relay_a_info = keys[self.relay_a.relay_id]
+        assert relay_a_info["publicKey"] == self.relay_a.public_key
+        assert not relay_a_info["internal"]
+
+        relay_b_info = keys[self.relay_b.relay_id]
+        assert relay_b_info["publicKey"] == self.relay_b.public_key
+        assert not relay_b_info["internal"]
+
+        assert keys[self.non_existing_key] is None
+
+    def _call_endpoint(self, calling_relay):
+
         raw_json, signature = self.private_key.pack(
             {
                 "relay_ids": [
                     six.text_type(self.relay_a.relay_id),
                     six.text_type(self.relay_b.relay_id),
-                    non_existing,
+                    self.non_existing_key,
                 ]
             }
         )
@@ -56,13 +107,9 @@ class RelayPublicKeysConfigTest(APITestCase):
             self.path,
             data=raw_json,
             content_type="application/json",
-            HTTP_X_SENTRY_RELAY_ID=self.relay_id,
+            HTTP_X_SENTRY_RELAY_ID=calling_relay.relay_id,
             HTTP_X_SENTRY_RELAY_SIGNATURE=signature,
         )
 
         result = json.loads(resp.content)
-        keys = result["public_keys"]
-
-        assert keys[self.relay_a.relay_id] == self.relay_a.public_key
-        assert keys[self.relay_b.relay_id] == self.relay_b.public_key
-        assert keys[non_existing] is None
+        return result
