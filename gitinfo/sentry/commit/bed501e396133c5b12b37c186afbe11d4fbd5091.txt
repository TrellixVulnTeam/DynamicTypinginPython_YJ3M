commit bed501e396133c5b12b37c186afbe11d4fbd5091
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Oct 15 09:39:19 2019 +0200

    feat(store): Add sampled call to Rust data scrubber (#15084)

diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 4866689a33..eb348360ee 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -27,6 +27,7 @@ from django.views.generic.base import View as BaseView
 from functools import wraps
 from querystring_parser import parser
 from symbolic import ProcessMinidumpError, Unreal4Crash, Unreal4Error
+import semaphore
 
 from sentry import features, options, quotas
 from sentry.attachments import CachedAttachment
@@ -285,21 +286,32 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
 
     scrub_data = datascrubbing_settings.get("scrubData")
 
-    if scrub_data:
-        # We filter data immediately before it ever gets into the queue
-        sensitive_fields = datascrubbing_settings.get("sensitiveFields")
-
-        exclude_fields = datascrubbing_settings.get("excludeFields")
-
-        scrub_defaults = datascrubbing_settings.get("scrubDefaults")
-
-        SensitiveDataFilter(
-            fields=sensitive_fields, include_defaults=scrub_defaults, exclude_fields=exclude_fields
-        ).apply(data)
-
-    if scrub_ip_address:
-        # We filter data immediately before it ever gets into the queue
-        helper.ensure_does_not_have_ip(data)
+    if random.random() < options.get("store.sample-rust-data-scrubber", 0.0):
+        rust_scrubbed_data = safe_execute(
+            semaphore.scrub_event, datascrubbing_settings, data, _with_transaction=False
+        )
+    else:
+        rust_scrubbed_data = None
+
+    if rust_scrubbed_data and options.get("store.use-rust-data-scrubber", False):
+        data = rust_scrubbed_data
+        data["_rust_data_scrubbed"] = True  # TODO: Remove after sampling
+    else:
+        if scrub_data:
+            # We filter data immediately before it ever gets into the queue
+            sensitive_fields = datascrubbing_settings.get("sensitiveFields")
+            exclude_fields = datascrubbing_settings.get("excludeFields")
+            scrub_defaults = datascrubbing_settings.get("scrubDefaults")
+
+            SensitiveDataFilter(
+                fields=sensitive_fields,
+                include_defaults=scrub_defaults,
+                exclude_fields=exclude_fields,
+            ).apply(data)
+
+        if scrub_ip_address:
+            # We filter data immediately before it ever gets into the queue
+            helper.ensure_does_not_have_ip(data)
 
     # mutates data (strips a lot of context if not queued)
     helper.insert_data_to_database(data, start_time=start_time, attachments=attachments)
