commit f93aacb1c191d4ac3d4367fb8b8e6f3ea7439fea
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 6 16:52:43 2013 -0700

    Basic tests and small improvements for trim

diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 26ba626462..9602a8c600 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -50,15 +50,17 @@ def trim(value, max_size=MAX_VARIABLE_SIZE, max_depth=3, _depth=0, _size=0, **kw
 
     elif isinstance(value, dict):
         result = {}
+        _size += 2
         for k, v in value.iteritems():
             trim_v = trim(v, _size=_size, **options)
             result[k] = trim_v
-            _size += len(unicode(trim_v))
+            _size += len(unicode(trim_v)) + 1
             if _size >= max_size:
                 break
 
     elif isinstance(value, (list, tuple)):
         result = []
+        _size += 2
         for v in value:
             trim_v = trim(v, _size=_size, **options)
             result.append(trim_v)
diff --git a/tests/sentry/utils/safe/__init__.py b/tests/sentry/utils/safe/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/utils/safe/tests.py b/tests/sentry/utils/safe/tests.py
new file mode 100644
index 0000000000..df693d53a6
--- /dev/null
+++ b/tests/sentry/utils/safe/tests.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+from sentry.utils.safe import trim
+
+a_very_long_string = 'a' * 512
+
+
+class TrimTest(TestCase):
+    def test_simple_string(self):
+        assert trim(a_very_long_string) == a_very_long_string[:253] + '...'
+
+    def test_list_of_strings(self):
+        assert trim([a_very_long_string, a_very_long_string]) == [
+            a_very_long_string[:251] + '...',
+        ]
