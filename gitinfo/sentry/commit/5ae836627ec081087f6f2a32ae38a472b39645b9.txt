commit 5ae836627ec081087f6f2a32ae38a472b39645b9
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Feb 29 18:38:59 2016 -0800

    Move email connection information into optionsstore

diff --git a/api-docs/sentry.conf.py b/api-docs/sentry.conf.py
index fba0460861..93884b1103 100644
--- a/api-docs/sentry.conf.py
+++ b/api-docs/sentry.conf.py
@@ -49,16 +49,6 @@ SENTRY_WEB_OPTIONS = {
     'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
 }
 
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-
-EMAIL_HOST = 'localhost'
-EMAIL_HOST_PASSWORD = ''
-EMAIL_HOST_USER = ''
-EMAIL_PORT = 25
-EMAIL_USE_TLS = False
-
-SERVER_EMAIL = 'sentry@getsentry.com'
-
 SECRET_KEY = 'super secret secret key'
 
 SENTRY_OPTIONS.update({
@@ -69,4 +59,11 @@ SENTRY_OPTIONS.update({
     },
     'system.admin-email': 'admin@getsentry.com',
     'system.url-prefix': SENTRY_URL_PREFIX,
+    'mail.backend': 'django.core.mail.backends.smtp.EmailBackend',
+    'mail.host': 'localhost',
+    'mail.password': '',
+    'mail.username': '',
+    'mail.port': 25,
+    'mail.use-tls': False,
+    'mail.from': 'sentry@getsentry.com',
 })
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 648fe89393..9fb65085c0 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -25,6 +25,9 @@ import sentry
 
 gettext_noop = lambda s: s
 
+# A marker for indicating builtin Django settings that are to not be used
+DEAD = object()
+
 socket.setdefaulttimeout(5)
 
 DEBUG = False
@@ -84,8 +87,6 @@ if 'DATABASE_URL' in os.environ:
     if url.scheme == 'mysql':
         DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'
 
-EMAIL_SUBJECT_PREFIX = '[Sentry] '
-
 # This should always be UTC.
 TIME_ZONE = 'UTC'
 
@@ -686,6 +687,9 @@ SENTRY_SMTP_HOSTNAME = 'localhost'
 SENTRY_SMTP_HOST = 'localhost'
 SENTRY_SMTP_PORT = 1025
 
+SERVER_EMAIL = DEAD
+DEFAULT_FROM_EMAIL = DEAD
+
 SENTRY_INTERFACES = {
     'exception': 'sentry.interfaces.exception.Exception',
     'logentry': 'sentry.interfaces.message.Message',
diff --git a/src/sentry/models/lostpasswordhash.py b/src/sentry/models/lostpasswordhash.py
index 3569850bec..a23570f22e 100644
--- a/src/sentry/models/lostpasswordhash.py
+++ b/src/sentry/models/lostpasswordhash.py
@@ -45,6 +45,7 @@ class LostPasswordHash(Model):
         return self.date_added > timezone.now() - timedelta(hours=48)
 
     def send_recover_mail(self):
+        from sentry import options
         from sentry.http import get_server_hostname
         from sentry.utils.email import MessageBuilder
 
@@ -57,7 +58,7 @@ class LostPasswordHash(Model):
             )),
         }
         msg = MessageBuilder(
-            subject='%sPassword Recovery' % (settings.EMAIL_SUBJECT_PREFIX,),
+            subject='%sPassword Recovery' % (options.get('mail.subject-prefix'),),
             template='sentry/emails/recover_account.txt',
             context=context,
         )
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 982e901be3..37f0edf94a 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -12,13 +12,22 @@ from sentry.options import (
 )
 from sentry.utils.types import Dict, String
 
+
+# Cache
 register('cache.backend', flags=FLAG_NOSTORE)
 register('cache.options', type=Dict, flags=FLAG_NOSTORE)
+
+# System
 register('system.admin-email', flags=FLAG_REQUIRED)
 register('system.databases', type=Dict, flags=FLAG_NOSTORE)
 register('system.debug', default=False, flags=FLAG_NOSTORE)
 register('system.rate-limit', default=0, flags=FLAG_PRIORITIZE_DISK)
 register('system.secret-key', flags=FLAG_NOSTORE)
+# Absolute URL to the sentry root directory. Should not include a trailing slash.
+register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
+register('system.root-api-key', flags=FLAG_PRIORITIZE_DISK)
+
+# Redis
 register(
     'redis.clusters',
     type=Dict,
@@ -36,10 +45,17 @@ register(
 )
 register('redis.options', type=Dict, flags=FLAG_NOSTORE)
 
-# Absolute URL to the sentry root directory. Should not include a trailing slash.
-register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
-register('system.root-api-key', type=String)
-
 # symbolizer specifics
 register('dsym.llvm-symbolizer-path', type=String)
 register('dsym.cache-path', type=String, default='/tmp/sentry-dsym-cache')
+
+# Mail
+register('mail.backend', default='django.core.mail.backends.smtp.EmailBackend', flags=FLAG_NOSTORE)
+register('mail.host', default='localhost', flags=FLAG_PRIORITIZE_DISK)
+register('mail.port', default=25, flags=FLAG_PRIORITIZE_DISK)
+register('mail.username', flags=FLAG_PRIORITIZE_DISK)
+register('mail.password', flags=FLAG_PRIORITIZE_DISK)
+register('mail.use-tls', default=False, flags=FLAG_PRIORITIZE_DISK)
+register('mail.subject-prefix', default='[Sentry] ', flags=FLAG_PRIORITIZE_DISK)
+register('mail.from', default='root@localhost', flags=FLAG_PRIORITIZE_DISK)
+register('mail.enable-replies', default=False, flags=FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 8888c3935e..40983d8585 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -12,12 +12,12 @@ import logging
 
 import sentry
 
-from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.template.loader import render_to_string
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
+from sentry import options
 from sentry.digests.utilities import get_digest_metadata
 from sentry.models import (
     Activity,
@@ -46,7 +46,12 @@ class MailPlugin(NotificationPlugin):
     author_url = "https://github.com/getsentry/sentry"
     project_default_enabled = True
     project_conf_form = None
-    subject_prefix = settings.EMAIL_SUBJECT_PREFIX
+    subject_prefix = None
+
+    def _subject_prefix(self):
+        if self.subject_prefix is not None:
+            return self.subject_prefix
+        return options.get('mail.subject-prefix')
 
     def _build_message(self, project, subject, template=None, html_template=None, body=None,
                    group=None, headers=None, context=None):
@@ -55,7 +60,7 @@ class MailPlugin(NotificationPlugin):
             logger.debug('Skipping message rendering, no users to send to.')
             return
 
-        subject_prefix = self.get_option('subject_prefix', project) or self.subject_prefix
+        subject_prefix = self.get_option('subject_prefix', project) or self._subject_prefix()
         subject_prefix = force_text(subject_prefix)
         subject = force_text(subject)
 
@@ -211,7 +216,7 @@ class MailPlugin(NotificationPlugin):
         }
 
         # TODO: Everything below should instead use `_send_mail` for consistency.
-        subject_prefix = project.get_option('subject_prefix', settings.EMAIL_SUBJECT_PREFIX)
+        subject_prefix = project.get_option('subject_prefix', options.get('mail.subject-prefix'))
         if subject_prefix:
             subject_prefix = subject_prefix.rstrip() + ' '
 
@@ -301,7 +306,7 @@ class MailPlugin(NotificationPlugin):
         template_name = activity.get_type_display()
 
         # TODO: Everything below should instead use `_send_mail` for consistency.
-        subject_prefix = project.get_option('subject_prefix', settings.EMAIL_SUBJECT_PREFIX)
+        subject_prefix = project.get_option('subject_prefix', options.get('mail.subject-prefix'))
         if subject_prefix:
             subject_prefix = subject_prefix.rstrip() + ' '
 
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index b4d8a4695b..9816a45c87 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -71,6 +71,14 @@ options_mapper = {
     'system.databases': 'DATABASES',
     'system.debug': 'DEBUG',
     'system.secret-key': 'SECRET_KEY',
+    'mail.backend': 'EMAIL_BACKEND',
+    'mail.host': 'EMAIL_HOST',
+    'mail.port': 'EMAIL_PORT',
+    'mail.username': 'EMAIL_HOST_USER',
+    'mail.password': 'EMAIL_HOST_PASSWORD',
+    'mail.use-tls': 'EMAIL_USE_TLS',
+    'mail.from': 'SERVER_EMAIL',
+    'mail.subject-prefix': 'EMAIL_SUBJECT_PREFIX',
 }
 
 
@@ -82,6 +90,7 @@ def bootstrap_options(settings, config):
     """
     if config is None:
         return
+    from sentry.conf.server import DEAD
     from sentry.utils.yaml import safe_load
     from yaml.parser import ParserError
     from yaml.scanner import ScannerError
@@ -103,7 +112,7 @@ def bootstrap_options(settings, config):
         raise ConfigurationError('Malformed config.yml file')
     # First move options from settings into options
     for k, v in options_mapper.iteritems():
-        if hasattr(settings, v):
+        if hasattr(settings, v) and k not in options and getattr(settings, v) is not DEAD:
             options[k] = getattr(settings, v)
     for k, v in options.iteritems():
         # Stuff everything else into SENTRY_OPTIONS
@@ -223,6 +232,8 @@ def show_big_error(message):
 
 
 def apply_legacy_settings(settings):
+    from sentry.conf.server import DEAD
+
     # SENTRY_USE_QUEUE used to determine if Celery was eager or not
     if hasattr(settings, 'SENTRY_USE_QUEUE'):
         warnings.warn(
@@ -234,17 +245,23 @@ def apply_legacy_settings(settings):
         )
         settings.CELERY_ALWAYS_EAGER = (not settings.SENTRY_USE_QUEUE)
 
-    if not settings.SENTRY_OPTIONS.get('system.admin-email') and hasattr(settings, 'SENTRY_ADMIN_EMAIL'):
-        warnings.warn(DeprecatedSettingWarning('SENTRY_ADMIN_EMAIL', 'SENTRY_OPTIONS["system.admin-email"]'))
-        settings.SENTRY_OPTIONS['system.admin-email'] = settings.SENTRY_ADMIN_EMAIL
-
-    if not settings.SENTRY_OPTIONS.get('system.url-prefix') and hasattr(settings, 'SENTRY_URL_PREFIX'):
-        warnings.warn(DeprecatedSettingWarning('SENTRY_URL_PREFIX', 'SENTRY_OPTIONS["system.url-prefix"]'))
-        settings.SENTRY_OPTIONS['system.url-prefix'] = settings.SENTRY_URL_PREFIX
-
-    if not settings.SENTRY_OPTIONS.get('system.rate-limit') and hasattr(settings, 'SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE'):
-        warnings.warn(DeprecatedSettingWarning('SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE', 'SENTRY_OPTIONS["system.rate-limit"]'))
-        settings.SENTRY_OPTIONS['system.rate-limit'] = settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE
+    for old, new in (
+        ('SENTRY_ADMIN_EMAIL', 'system.admin-email'),
+        ('SENTRY_URL_PREFIX', 'system.url-prefix'),
+        ('SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE', 'system.rate-limit'),
+        ('EMAIL_BACKEND', 'mail.backend'),
+        ('EMAIL_HOST', 'mail.host'),
+        ('EMAIL_HOST_PASSWORD', 'mail.password'),
+        ('EMAIL_HOST_USER', 'mail.username'),
+        ('EMAIL_PORT', 'mail.port'),
+        ('EMAIL_USE_TLS', 'mail.use-tls'),
+        ('SERVER_EMAIL', 'mail.from'),
+        ('EMAIL_SUBJECT_PREFIX', 'mail.subject-prefix'),
+    ):
+        if not settings.SENTRY_OPTIONS.get(new) and getattr(settings, old, DEAD) is not DEAD:
+            warnings.warn(
+                DeprecatedSettingWarning(old, "SENTRY_OPTIONS['%s']" % new))
+            settings.SENTRY_OPTIONS[new] = getattr(settings, old)
 
     if hasattr(settings, 'SENTRY_REDIS_OPTIONS'):
         if 'redis.clusters' in settings.SENTRY_OPTIONS:
@@ -290,6 +307,8 @@ def apply_legacy_settings(settings):
         warnings.warn(DeprecatedSettingWarning('SENTRY_ALLOW_REGISTRATION', 'SENTRY_FEATURES["auth:register"]'))
         settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
 
+    settings.DEFAULT_FROM_EMAIL = options.get('mail.from', silent=True)
+
 
 def skip_migration_if_applied(settings, app_name, table_name,
                               name='0001_initial'):
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index 3db46a55ca..5688c872c6 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -163,20 +163,6 @@ SENTRY_WEB_OPTIONS = {
 # Mail Server #
 ###############
 
-# For more information check Django's documentation:
-# https://docs.djangoproject.com/en/1.6/topics/email/
-
-EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
-
-EMAIL_HOST = 'localhost'
-EMAIL_HOST_PASSWORD = ''
-EMAIL_HOST_USER = ''
-EMAIL_PORT = 25
-EMAIL_USE_TLS = False
-
-# The email address to send on behalf of
-SERVER_EMAIL = 'root@localhost'
-
 # If you're using mailgun for inbound mail, set your API key and configure a
 # route to forward to /api/hooks/mailgun/inbound/
 MAILGUN_API_KEY = ''
@@ -187,6 +173,18 @@ YAML_CONFIG_TEMPLATE = u"""\
 # to enforce defaults or to ensure they cannot be changed via the UI. For more
 # information see the Sentry documentation.
 
+###############
+# Mail Server #
+###############
+
+mail.host: 'localhost'
+mail.port: 25
+mail.username: ''
+mail.password: ''
+mail.use-tls: false
+# The email address to send on behalf of
+mail.from: 'root@localhost'
+
 # If this file ever becomes compromised, it's important to regenerate your SECRET_KEY
 # Changing this value will result in all current sessions being invalidated
 system.secret-key: '%(secret_key)s'
diff --git a/src/sentry/templates/sentry/admin/status/mail.html b/src/sentry/templates/sentry/admin/status/mail.html
index 7c2e2657bc..e6334d2cac 100644
--- a/src/sentry/templates/sentry/admin/status/mail.html
+++ b/src/sentry/templates/sentry/admin/status/mail.html
@@ -14,27 +14,27 @@
     <dl class="vars">
         <dt>{% trans "From Address" %}</dt>
         <dd>
-<pre class="val">{{ SERVER_EMAIL }}</pre>
+<pre class="val">{{ mail_from }}</pre>
         </dd>
 
         <dt>{% trans "Host" %}</dt>
         <dd>
-<pre class="vall">{{ EMAIL_HOST }}:{{ EMAIL_PORT }}</pre>
+<pre class="vall">{{ mail_host }}:{{ mail_port }}</pre>
         </dd>
 
         <dt>{% trans "Username" %}</dt>
         <dd>
-<pre class="val">{% if EMAIL_HOST_USER %}{{ EMAIL_HOST_USER }}{% else %}<em>{% trans "not set" %}</em>{% endif %}</pre>
+<pre class="val">{% if mail_username %}{{ mail_username }}{% else %}<em>{% trans "not set" %}</em>{% endif %}</pre>
         </dd>
 
         <dt>{% trans "Password" %}</dt>
         <dd>
-<pre class="val">{% if EMAIL_HOST_PASSWORD %}********{% else %}<em>{% trans "not set" %}</em>{% endif %}</pre>
+<pre class="val">{% if mail_password %}********{% else %}<em>{% trans "not set" %}</em>{% endif %}</pre>
         </dd>
 
         <dt>{% trans "TLS?" %}</dt>
         <dd>
-<pre class="val">{% if EMAIL_USE_TLS %}{% trans "Yes" %}{% else %}{% trans "No" %}{% endif %}</pre>
+<pre class="val">{% if mail_use_tls %}{% trans "Yes" %}{% else %}{% trans "No" %}{% endif %}</pre>
         </dd>
     </dl>
 
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 9d7fbb0837..4bd071a7ab 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -14,12 +14,17 @@ from email.utils import parseaddr
 from random import randrange
 
 from django.conf import settings
-from django.core.mail import EmailMultiAlternatives, get_connection
+from django.core.mail import (
+    get_connection as _get_connection,
+    send_mail as _send_mail,
+    EmailMultiAlternatives,
+)
 from django.core.signing import BadSignature, Signer
 from django.utils.crypto import constant_time_compare
 from django.utils.encoding import force_bytes, force_str, force_text
 from toronado import from_string as inline_css
 
+from sentry import options
 from sentry.models import Group, GroupEmailThread, User, UserOption
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
@@ -107,7 +112,17 @@ def make_msgid(domain):
     return msgid
 
 
-FROM_EMAIL_DOMAIN = domain_from_email(settings.DEFAULT_FROM_EMAIL)
+# cache the domain_from_email calculation
+# This is just a tuple of (email, email-domain)
+_from_email_domain_cache = (None, None)
+
+
+def get_from_email_domain():
+    global _from_email_domain_cache
+    from_ = options.get('mail.from')
+    if not _from_email_domain_cache[0] == from_:
+        _from_email_domain_cache = (from_, domain_from_email(from_))
+    return _from_email_domain_cache[1]
 
 
 def get_email_addresses(user_ids, project=None):
@@ -163,7 +178,7 @@ class MessageBuilder(object):
         self.headers = headers
         self.reference = reference  # The object that generated this message
         self.reply_reference = reply_reference  # The object this message is replying about
-        self.from_email = from_email or settings.SERVER_EMAIL
+        self.from_email = from_email or options.get('mail.from')
         self._send_to = set()
 
     def __render_html_body(self):
@@ -203,7 +218,7 @@ class MessageBuilder(object):
             headers.setdefault('Reply-To', reply_to)
 
         # Every message sent needs a unique message id
-        message_id = make_msgid(FROM_EMAIL_DOMAIN)
+        message_id = make_msgid(get_from_email_domain())
         headers.setdefault('Message-Id', message_id)
 
         subject = self.subject
@@ -268,3 +283,28 @@ def send_messages(messages, fail_silently=False):
     connection = get_connection(fail_silently=fail_silently)
     metrics.incr('email.sent', len(messages))
     return connection.send_messages(messages)
+
+
+def get_connection(fail_silently=False):
+    """
+    Gets an SMTP connection using our OptionsStore
+    """
+    return _get_connection(
+        backend=options.get('mail.backend'),
+        host=options.get('mail.host'),
+        port=options.get('mail.port'),
+        username=options.get('mail.username'),
+        password=options.get('mail.password'),
+        use_tls=options.get('mail.use-tls'),
+        fail_silently=fail_silently,
+    )
+
+
+def send_mail(subject, message, from_email, recipient_list, fail_silently=False):
+    """
+    Wrapper that forces sending mail through our connection.
+    """
+    return _send_mail(
+        subject, message, from_email, recipient_list,
+        connection=get_connection(fail_silently=fail_silently),
+    )
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 75b1135080..0f05957958 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -95,15 +95,18 @@ def pytest_configure(config):
     if not hasattr(settings, 'SENTRY_OPTIONS'):
         settings.SENTRY_OPTIONS = {}
 
-    settings.SENTRY_OPTIONS['redis.clusters'] = {
-        'default': {
-            'hosts': {
-                0: {
-                    'db': 9,
+    settings.SENTRY_OPTIONS.update({
+        'redis.clusters': {
+            'default': {
+                'hosts': {
+                    0: {
+                        'db': 9,
+                    },
                 },
             },
-        }
-    }
+        },
+        'mail.backend': 'django.core.mail.backends.locmem.EmailBackend',
+    })
 
     # django mail uses socket.getfqdn which doesn't play nice if our
     # networking isn't stable
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index e9bc924ca8..ecb9c72f98 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -16,16 +16,17 @@ import pkg_resources
 import six
 from django.conf import settings
 from django.core.context_processors import csrf
-from django.core.mail import send_mail
 from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.db.models import Count
 from django.http import HttpResponse, HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
+from sentry import options
 from sentry.app import env
 from sentry.models import Project, Team, User
 from sentry.plugins import plugins
+from sentry.utils.email import send_mail
 from sentry.utils.http import absolute_uri
 from sentry.utils.warnings import DeprecatedSettingWarning, seen_warnings
 from sentry.web.decorators import requires_admin
@@ -141,8 +142,8 @@ def create_new_user(request):
 
             try:
                 send_mail(
-                    '%s Welcome to Sentry' % (settings.EMAIL_SUBJECT_PREFIX,),
-                    body, settings.SERVER_EMAIL, [user.email],
+                    '%s Welcome to Sentry' % (options.get('mail.subject-prefix'),),
+                    body, options.get('mail.from'), [user.email],
                     fail_silently=False
                 )
             except Exception as e:
@@ -347,8 +348,8 @@ def status_mail(request):
         body = """This email was sent as a request to test the Sentry outbound email configuration."""
         try:
             send_mail(
-                '%s Test Email' % (settings.EMAIL_SUBJECT_PREFIX,),
-                body, settings.SERVER_EMAIL, [request.user.email],
+                '%s Test Email' % (options.get('mail.subject-prefix'),),
+                body, options.get('mail.from'), [request.user.email],
                 fail_silently=False
             )
         except Exception as e:
@@ -356,10 +357,10 @@ def status_mail(request):
 
     return render_to_response('sentry/admin/status/mail.html', {
         'form': form,
-        'EMAIL_HOST': settings.EMAIL_HOST,
-        'EMAIL_HOST_PASSWORD': bool(settings.EMAIL_HOST_PASSWORD),
-        'EMAIL_HOST_USER': settings.EMAIL_HOST_USER,
-        'EMAIL_PORT': settings.EMAIL_PORT,
-        'EMAIL_USE_TLS': settings.EMAIL_USE_TLS,
-        'SERVER_EMAIL': settings.SERVER_EMAIL,
+        'mail_host': options.get('mail.host'),
+        'mail_password': bool(options.get('mail.password')),
+        'mail_username': options.get('mail.username'),
+        'mail_port': options.get('mail.port'),
+        'mail_use_tls': options.get('mail.use-tls'),
+        'mail_from': options.get('mail.from'),
     }, request)
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index 3fb1e4543a..7d1d905a8b 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -1,12 +1,12 @@
 from __future__ import absolute_import
 
-from django.conf import settings
 from django.contrib import messages
 from django.http import HttpResponseRedirect, HttpResponse
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry import constants
+from sentry import options
 from sentry.app import digests
 from sentry.digests import get_option_key as get_digest_option_key
 from sentry.plugins import plugins, NotificationPlugin
@@ -78,7 +78,7 @@ class ProjectNotificationsView(ProjectView):
                 prefix='general',
                 initial={
                     'subject_prefix': project.get_option(
-                        'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
+                        'mail:subject_prefix', options.get('mail.subject-prefix')),
                 },
             )
             if general_form.is_valid() and (digests_form.is_valid() if digests_form is not None else True):
@@ -118,7 +118,7 @@ class ProjectNotificationsView(ProjectView):
                 prefix='general',
                 initial={
                     'subject_prefix': project.get_option(
-                        'mail:subject_prefix', settings.EMAIL_SUBJECT_PREFIX),
+                        'mail:subject_prefix', options.get('mail.subject-prefix')),
                 },
             )
 
