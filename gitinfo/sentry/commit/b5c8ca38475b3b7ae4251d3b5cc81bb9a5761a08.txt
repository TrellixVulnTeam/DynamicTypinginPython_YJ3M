commit b5c8ca38475b3b7ae4251d3b5cc81bb9a5761a08
Author: Dora <dora.l.chan@gmail.com>
Date:   Tue Dec 10 16:38:21 2019 -0800

    cleaning up lines (#16041)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index b4b0f077b1..f24e253d46 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -136,10 +136,10 @@ const INTERSECTION_THRESHOLDS: Array<number> = [
   1.0,
 ];
 
-const TOGGLE_BUTTON_MARGIN_RIGHT = 8;
-const TOGGLE_BUTTON_MAX_WIDTH = 40;
+const TOGGLE_BUTTON_MARGIN_RIGHT = 16;
+const TOGGLE_BUTTON_MAX_WIDTH = 30;
 const TOGGLE_BORDER_BOX = TOGGLE_BUTTON_MAX_WIDTH + TOGGLE_BUTTON_MARGIN_RIGHT;
-const MARGIN_LEFT = 8;
+const MARGIN_LEFT = 0;
 
 type DurationDisplay = 'left' | 'right' | 'inset';
 
@@ -296,7 +296,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
       if (hasToggler) {
         return (
           <ConnectorBar
-            style={{right: '11px', height: '10px', bottom: '-5px', top: 'auto'}}
+            style={{right: '16px', height: '10px', bottom: '-5px', top: 'auto'}}
             key={`${span.span_id}-last`}
           />
         );
@@ -313,7 +313,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     if (hasToggler) {
       connectorBars.push(
         <ConnectorBar
-          style={{right: '15px', height: '10px', bottom: '0', top: 'auto'}}
+          style={{right: '16px', height: '10px', bottom: '0', top: 'auto'}}
           key={`${span.span_id}-last`}
         />
       );
@@ -343,7 +343,6 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     const chevronElement = !isRoot ? (
       <div
         style={{
-          marginRight: '2px',
           width: '5px',
           textAlign: 'right',
         }}
@@ -368,7 +367,7 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
             this.props.toggleSpanTree();
           }}
         >
-          <span style={{marginRight: '2px', textAlign: 'center'}}>
+          <span style={{textAlign: 'center'}}>
             <Count value={numOfSpanChildren} />
           </span>
           {chevronElement}
@@ -858,52 +857,34 @@ type TogglerTypes = OmitHtmlDivProps<{
 const SpanTreeTogglerContainer = styled('div')<TogglerTypes>`
   position: relative;
   height: 16px;
-  width: ${p => (p.hasToggler ? '40px' : '16px')};
-  min-width: ${p => (p.hasToggler ? '40px' : '16px')}; /* annoying flex thing */
-  margin-right: ${space(1)};
+  width: ${p => (p.hasToggler ? '40px' : '12px')};
+  min-width: ${p => (p.hasToggler ? '40px' : '12px')};
+  margin-right: ${p => (p.hasToggler ? space(0.75) : space(1.5))};
   z-index: ${zIndex.spanTreeToggler};
   display: flex;
   justify-content: flex-end;
 `;
 
-// one-off to get the perfect hierarchy
-const spanTreeColor = '#D5CEDB';
-
 const SpanTreeConnector = styled('div')<TogglerTypes>`
-  height: ${p => (p.isLast ? '85%' : '175%')};
+  height: ${p => (p.isLast ? '75%' : '160%')};
   width: 100%;
-  border-left: 1px solid ${spanTreeColor};
+  border-left: 1px solid ${p => p.theme.gray1};
   position: absolute;
-  left: 4px;
   top: -5px;
 
   &:before {
     content: '';
-    width: ${p => (p.hasToggler ? '2px' : '8px')};
-    position: absolute;
     height: 1px;
-    top: ${p => (p.isLast ? '100%' : '50%')};
-    transform: translateY(-50%);
-    background: ${spanTreeColor};
-  }
-
-  &:after {
-    content: '';
-    width: 2px;
-    height: 2px;
-    border-radius: 50%;
-    /* border radius stops working at 3px */
-    transform: scale(0.5) translateY(-100%);
-    left: ${p => (p.hasToggler ? '1px' : '6px')};
-    top: ${p => (p.isLast ? '100%' : '50%')};
+    background-color: ${p => p.theme.gray1};
+    width: 100%;
     position: absolute;
-    background: ${spanTreeColor};
+    bottom: ${p => (p.isLast ? '0' : '50%')};
   }
 `;
 
 const ConnectorBar = styled('div')`
   height: 250%;
-  border-left: 1px solid ${spanTreeColor};
+  border-left: 1px solid ${p => p.theme.gray1};
   top: -5px;
   position: absolute;
 `;
@@ -922,16 +903,15 @@ const getTogglerTheme = ({
   if (disabled) {
     return `
     background: ${buttonTheme.background};
-    border: 1px solid ${buttonTheme.border};
+    border: 1px solid ${theme.gray1};
     color: ${buttonTheme.color};
-
     cursor: default;
   `;
   }
 
   return `
     background: ${buttonTheme.background};
-    border: 1px solid ${buttonTheme.border};
+    border: 1px solid ${theme.gray1};
     color: ${buttonTheme.color};
   `;
 };
@@ -944,13 +924,12 @@ type SpanTreeTogglerAndDivProps = OmitHtmlDivProps<{
 const SpanTreeToggler = styled('div')<SpanTreeTogglerAndDivProps>`
   white-space: nowrap;
   min-width: 32px;
-  padding: 0 4px;
   display: flex;
   align-items: center;
   justify-content: center;
   border-radius: 99px;
   transition: all 0.15s ease-in-out;
-  font-size: ${p => p.theme.fontSizeExtraSmall};
+  font-size: 10px;
   line-height: 0;
   z-index: 1;
 
@@ -973,7 +952,6 @@ const getDurationPillAlignment = ({durationDisplay}) => {
 
 const DurationPill = styled('div')<{durationDisplay: DurationDisplay}>`
   position: absolute;
-
   color: ${p => p.theme.gray2};
   font-size: ${p => p.theme.fontSizeExtraSmall};
   white-space: nowrap;
@@ -1006,6 +984,7 @@ const WarningIcon = styled(InlineSvg)`
 
 const Chevron = styled(InlineSvg)`
   width: 7px;
+  margin-left: ${space(0.25)};
 `;
 
 export default SpanBar;
