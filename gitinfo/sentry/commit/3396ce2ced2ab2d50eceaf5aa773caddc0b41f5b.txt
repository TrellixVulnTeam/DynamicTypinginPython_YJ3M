commit 3396ce2ced2ab2d50eceaf5aa773caddc0b41f5b
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 19 16:10:04 2018 -0800

    ref: Convert project alert rules to a React component
    
    Do not use a Django view to render the rule editor component.
    
    Adds an API endpoint to return configuration information relating to alert rules
    
    We should also rewrite the RuleEditor component

diff --git a/src/sentry/api/endpoints/project_rules_configuration.py b/src/sentry/api/endpoints/project_rules_configuration.py
new file mode 100644
index 0000000000..49fc8325fd
--- /dev/null
+++ b/src/sentry/api/endpoints/project_rules_configuration.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+
+from sentry.api.bases.project import ProjectEndpoint, StrictProjectPermission
+from sentry.rules import rules
+from rest_framework.response import Response
+
+
+class ProjectRulesConfigurationEndpoint(ProjectEndpoint):
+    permission_classes = (StrictProjectPermission, )
+
+    def get(self, request, project):
+        """
+        Retrieve the list of configuration options for a given project.
+        """
+
+        action_list = []
+        condition_list = []
+
+        # TODO: conditions need to be based on actions
+        for rule_type, rule_cls in rules:
+            node = rule_cls(project)
+            context = {
+                'id': node.id,
+                'label': node.label,
+                'html': node.render_form(),
+            }
+
+            if not node.is_enabled():
+                continue
+
+            if rule_type.startswith('condition/'):
+                condition_list.append(context)
+            elif rule_type.startswith('action/'):
+                action_list.append(context)
+
+        context = {
+            'actions': action_list,
+            'conditions': condition_list
+        }
+
+        return Response(context)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index c838ecef29..c0a43d305f 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -96,6 +96,7 @@ from .endpoints.project_release_commits import ProjectReleaseCommitsEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_releases_token import ProjectReleasesTokenEndpoint
 from .endpoints.project_rules import ProjectRulesEndpoint
+from .endpoints.project_rules_configuration import ProjectRulesConfigurationEndpoint
 from .endpoints.project_rule_details import ProjectRuleDetailsEndpoint
 from .endpoints.project_searches import ProjectSearchesEndpoint
 from .endpoints.project_search_details import ProjectSearchDetailsEndpoint
@@ -617,6 +618,11 @@ urlpatterns = patterns(
         ProjectRulesEndpoint.as_view(),
         name='sentry-api-0-project-rules'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/rules/configuration/$',
+        ProjectRulesConfigurationEndpoint.as_view(),
+        name='sentry-api-0-project-rules-configuration'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/rules/(?P<rule_id>[^\/]+)/$',
         ProjectRuleDetailsEndpoint.as_view(),
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 98899fb484..1dccc5c76d 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -154,7 +154,8 @@ class MailPlugin(NotificationPlugin):
 
         rules = []
         for rule in notification.rules:
-            rule_link = reverse('sentry-edit-project-rule', args=[org.slug, project.slug, rule.id])
+            rule_link = '/%s/%s/settings/alerts/rules/%s/' % (org.slug, project.slug, rule.id)
+
             rules.append((rule.label, rule_link))
 
         enhanced_privacy = org.flags.enhanced_privacy
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 8ad55e34bf..abbbab1827 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -150,7 +150,6 @@ export default {
     PluginConfig: require('./components/pluginConfig').default,
     ProjectIssueTracking: require('./views/projectIssueTracking').default,
     ProjectSelector: require('./components/projectHeader/projectSelector').default,
-    RuleEditor: require('./views/ruleEditor').default,
     Sidebar: require('./components/sidebar').default,
     StackedBarChart: require('./components/stackedBarChart').default,
     TimeSince: require('./components/timeSince').default,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index e4d01b11d8..c668f7fd7e 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -58,6 +58,7 @@ import OrganizationGeneralSettingsView from './views/settings/organization/gener
 import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import ProjectAlertRules from './views/projectAlertRules';
+import ProjectAlertRuleDetails from './views/projectAlertRuleDetails';
 import ProjectAlertSettings from './views/projectAlertSettings';
 import ProjectTags from './views/projectTags';
 import ProjectChooser from './views/projectChooser';
@@ -240,6 +241,18 @@ const projectSettingsRoutes = [
     name="Alert Rules"
     component={errorHandler(ProjectAlertRules)}
   />,
+  <Route
+    key="alerts/rules/new/"
+    path="alerts/rules/new/"
+    name="New Alert Rule"
+    component={errorHandler(ProjectAlertRuleDetails)}
+  />,
+  <Route
+    key="alerts/rules/rule/edit"
+    path="alerts/rules/:ruleId/"
+    name="Edit Alert Rule"
+    component={errorHandler(ProjectAlertRuleDetails)}
+  />,
   <Route
     key="issue-tracking/"
     path="issue-tracking/"
diff --git a/src/sentry/static/sentry/app/views/projectAlertRuleDetails.jsx b/src/sentry/static/sentry/app/views/projectAlertRuleDetails.jsx
new file mode 100644
index 0000000000..ca220612ac
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectAlertRuleDetails.jsx
@@ -0,0 +1,35 @@
+import React from 'react';
+
+import SentryTypes from '../proptypes';
+import AsyncView from './asyncView';
+import RuleEditor from './ruleEditor';
+
+class ProjectAlertRuleDetails extends AsyncView {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+
+    return [['configs', `/projects/${orgId}/${projectId}/rules/configuration/`]];
+  }
+
+  renderBody() {
+    let {organization, project} = this.context;
+    let {actions, conditions} = this.state.configs;
+
+    return (
+      <RuleEditor
+        organization={organization}
+        project={project}
+        actions={actions}
+        conditions={conditions}
+        params={this.props.params}
+      />
+    );
+  }
+}
+
+export default ProjectAlertRuleDetails;
diff --git a/src/sentry/static/sentry/app/views/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
index c4b72811aa..e1a91baf53 100644
--- a/src/sentry/static/sentry/app/views/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import {Link} from 'react-router';
 import createReactClass from 'create-react-class';
 
 import {t} from '../locale';
@@ -61,7 +62,7 @@ const RuleRow = createReactClass({
       <div className="box">
         <div className="box-header">
           <div className="pull-right">
-            <Button style={{marginRight: 5}} size="small" href={editLink}>
+            <Button style={{marginRight: 5}} size="small" to={editLink}>
               {t('Edit Rule')}
             </Button>
 
@@ -75,7 +76,7 @@ const RuleRow = createReactClass({
             </Confirm>
           </div>
           <h3>
-            <a href={editLink}>{data.name}</a>
+            <Link to={editLink}>{data.name}</Link>
           </h3>
         </div>
         <div className="box-content with-padding">
@@ -227,7 +228,7 @@ const ProjectAlertRules = createReactClass({
           title={t('Alerts')}
           action={
             <Button
-              href={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
+              to={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
               priority="primary"
               size="small"
               className="pull-right"
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index 05bcc08d6b..65c666c732 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -187,7 +187,7 @@ export default class ProjectAlertSettings extends AsyncView {
           title={t('Alerts')}
           action={
             <Button
-              href={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
+              to={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
               priority="primary"
               size="small"
               className="pull-right"
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 826afe406e..05bcf95f7d 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -2,12 +2,13 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import ReactDOM from 'react-dom';
+import {browserHistory} from 'react-router';
 import $ from 'jquery';
 import ApiMixin from '../../mixins/apiMixin';
 import IndicatorStore from '../../stores/indicatorStore';
 import SelectInput from '../../components/selectInput';
 import {t, tct} from '../../locale';
-
+import LoadingIndicator from '../../components/loadingIndicator';
 import RuleNodeList from './ruleNodeList';
 
 const RuleEditor = createReactClass({
@@ -16,7 +17,6 @@ const RuleEditor = createReactClass({
   propTypes: {
     actions: PropTypes.array.isRequired,
     conditions: PropTypes.array.isRequired,
-    rule: PropTypes.object.isRequired,
     project: PropTypes.object.isRequired,
     organization: PropTypes.object.isRequired,
   },
@@ -25,17 +25,47 @@ const RuleEditor = createReactClass({
 
   getInitialState() {
     return {
+      rule: null,
       loading: false,
       error: null,
     };
   },
 
+  componentDidMount() {
+    this.fetchRule();
+  },
+
   componentDidUpdate() {
     if (this.state.error) {
       $(document.body).scrollTop($(ReactDOM.findDOMNode(this.refs.form)).offset().top);
     }
   },
 
+  fetchRule() {
+    let {ruleId, projectId, orgId} = this.props.params;
+
+    if (ruleId) {
+      let endpoint = `/projects/${orgId}/${projectId}/rules/${ruleId}/`;
+      this.api.request(endpoint, {
+        success: rule => {
+          this.setState({
+            rule,
+          });
+        },
+      });
+    } else {
+      let defaultRule = {
+        actionMatch: 'all',
+        actions: [],
+        conditions: [],
+        name: '',
+        frequency: 30,
+      };
+
+      this.setState({rule: defaultRule});
+    }
+  },
+
   serializeNode(node) {
     let result = {};
     $(node)
@@ -69,7 +99,7 @@ const RuleEditor = createReactClass({
       frequency,
       name,
     };
-    let rule = this.props.rule;
+    let rule = this.state.rule;
     let project = this.props.project;
     let org = this.props.organization;
     let endpoint = `/projects/${org.slug}/${project.slug}/rules/`;
@@ -78,11 +108,16 @@ const RuleEditor = createReactClass({
     }
 
     let loadingIndicator = IndicatorStore.add('Saving...');
+
     this.api.request(endpoint, {
       method: rule.id ? 'PUT' : 'POST',
       data,
-      success: () => {
-        window.location.href = '../';
+      success: resp => {
+        this.setState({error: null, loading: false, rule: resp});
+
+        browserHistory.replace(
+          `/${org.slug}/${project.slug}/settings/alerts/rules/${resp.id}/`
+        );
       },
       error: response => {
         this.setState({
@@ -103,7 +138,9 @@ const RuleEditor = createReactClass({
   },
 
   render() {
-    let rule = this.props.rule;
+    if (!this.state.rule) return <LoadingIndicator />;
+
+    let rule = this.state.rule;
     let {loading, error} = this.state;
     let {actionMatch, actions, conditions, frequency, name} = rule;
 
diff --git a/src/sentry/templates/sentry/projects/rules/new.html b/src/sentry/templates/sentry/projects/rules/new.html
deleted file mode 100644
index fb5307cc7b..0000000000
--- a/src/sentry/templates/sentry/projects/rules/new.html
+++ /dev/null
@@ -1,22 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block selectize %}{% endblock %}
-
-{% block main %}
-  <div id="blk_rule_editor"></div>
-  <script>
-  $(function(){
-    ReactDOM.render(React.createFactory(Sentry.RuleEditor)({
-      rule: {% serialize rule %},
-      actions: {{ action_list|safe }},
-      conditions: {{ condition_list|safe }},
-      project: {% serialize project %},
-      organization: {% serialize organization %}
-    }), document.getElementById('blk_rule_editor'));
-  });
-  </script>
-{% endblock %}
diff --git a/src/sentry/web/frontend/project_rule_edit.py b/src/sentry/web/frontend/project_rule_edit.py
deleted file mode 100644
index 135da05d53..0000000000
--- a/src/sentry/web/frontend/project_rule_edit.py
+++ /dev/null
@@ -1,54 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.rules import rules
-from sentry.models import Rule, RuleStatus
-from sentry.web.frontend.base import ProjectView
-from sentry.utils import json
-from sentry.utils.http import absolute_uri
-
-
-class ProjectRuleEditView(ProjectView):
-    required_scope = 'project:write'
-
-    def get(self, request, organization, project, rule_id=None):
-        if rule_id:
-            try:
-                rule = Rule.objects.get(
-                    project=project,
-                    id=rule_id,
-                    status__in=[RuleStatus.ACTIVE, RuleStatus.INACTIVE],
-                )
-            except Rule.DoesNotExist:
-                path = '/{}/{}/settings/alerts/rules/'.format(organization.slug, project.slug)
-                return self.redirect(absolute_uri(path))
-        else:
-            rule = Rule(project=project)
-
-        action_list = []
-        condition_list = []
-
-        # TODO: conditions need to be based on actions
-        for rule_type, rule_cls in rules:
-            node = rule_cls(project)
-            context = {
-                'id': node.id,
-                'label': node.label,
-                'html': node.render_form(),
-            }
-
-            if not node.is_enabled():
-                continue
-
-            if rule_type.startswith('condition/'):
-                condition_list.append(context)
-            elif rule_type.startswith('action/'):
-                action_list.append(context)
-
-        context = {
-            'rule': rule,
-            'page': 'rules',
-            'action_list': json.dumps(action_list),
-            'condition_list': json.dumps(condition_list),
-        }
-
-        return self.respond('sentry/projects/rules/new.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 2d2350693f..22b2b23906 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -41,7 +41,6 @@ from sentry.web.frontend.organization_auth_settings import \
 from sentry.web.frontend.organization_integration_setup import \
     OrganizationIntegrationSetupView
 from sentry.web.frontend.out import OutView
-from sentry.web.frontend.project_rule_edit import ProjectRuleEditView
 from sentry.web.frontend.react_page import GenericReactPageView, ReactPageView
 from sentry.web.frontend.reactivate_account import ReactivateAccountView
 from sentry.web.frontend.release_webhook import ReleaseWebhookView
@@ -438,16 +437,6 @@ urlpatterns += patterns(
         TransferProjectView.as_view(),
         name='sentry-transfer-project'
     ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/alerts/rules/new/$',
-        ProjectRuleEditView.as_view(),
-        name='sentry-new-project-rule'
-    ),
-    url(
-        r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/alerts/rules/(?P<rule_id>\d+)/$',
-        ProjectRuleEditView.as_view(),
-        name='sentry-edit-project-rule'
-    ),
     url(
         r'^avatar/(?P<avatar_id>[^\/]+)/$',
         UserAvatarPhotoView.as_view(),
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 3696544fda..ad40491c41 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -10,9 +10,9 @@ exports[`ProjectAlertSettings render() renders 1`] = `
         <Button
           className="pull-right"
           disabled={false}
-          href="/org-slug/project-slug/settings/alerts/rules/new/"
           priority="primary"
           size="small"
+          to="/org-slug/project-slug/settings/alerts/rules/new/"
         >
           <span
             className="icon-plus"
