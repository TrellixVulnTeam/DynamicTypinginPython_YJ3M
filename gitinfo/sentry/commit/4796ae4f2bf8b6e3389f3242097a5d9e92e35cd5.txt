commit 4796ae4f2bf8b6e3389f3242097a5d9e92e35cd5
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Aug 8 13:07:16 2019 -0700

    feat(ui): Add/implement UI for Incident Rules (#14252)
    
    This allows you to list, create, and edit Incident Rules.
    
    Co-Authored-By: Mark Story <mark@sentry.io>

diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
index 0dbbe772ac..69ab751f7b 100644
--- a/src/sentry/static/sentry/app/components/charts/baseChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -61,6 +61,8 @@ class BaseChart extends React.Component {
 
     toolBox: SentryTypes.EChartsToolBox,
 
+    graphic: SentryTypes.EchartsGraphic,
+
     // ECharts Grid options
     grid: SentryTypes.EChartsGrid,
 
@@ -193,6 +195,7 @@ class BaseChart extends React.Component {
       xAxis,
       dataZoom,
       toolBox,
+      graphic,
 
       isGroupedByDate,
       shouldXAxisRenderTimeOnly,
@@ -277,6 +280,7 @@ class BaseChart extends React.Component {
               ],
           dataZoom,
           toolbox: toolBox,
+          graphic,
         }}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
new file mode 100644
index 0000000000..c3746922fe
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
@@ -0,0 +1,141 @@
+import {ECharts} from 'echarts';
+import {debounce, maxBy} from 'lodash';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {ReactEchartsRef} from 'app/types/echarts';
+import {Panel} from 'app/components/panels';
+import Graphic from 'app/components/charts/components/graphic';
+import LineChart from 'app/components/charts/lineChart';
+import space from 'app/styles/space';
+
+type DataArray = Array<[number, number]>;
+
+type Props = {
+  data: Array<{
+    seriesName: string;
+    dataArray: DataArray;
+  }>;
+  onChangeUpperBound: Function;
+  upperBound: number;
+};
+type State = {
+  width: number;
+  yAxisMax: number | null;
+};
+
+export default class IncidentRulesChart extends React.Component<Props, State> {
+  static defaultProps = {
+    data: [],
+  };
+
+  state = {
+    width: -1,
+    yAxisMax: null,
+  };
+
+  componentDidUpdate(prevProps: Props) {
+    const {data, upperBound} = this.props;
+    if (
+      upperBound !== prevProps.upperBound &&
+      this.chartRef &&
+      data.length &&
+      data[0].dataArray
+    ) {
+      this.updateChartAxis(upperBound, data[0].dataArray);
+    }
+  }
+
+  chartRef: null | ECharts = null;
+
+  updateChartAxis = debounce((upperBound, dataArray: DataArray) => {
+    const max = maxBy(dataArray, ([_ts, number]) => number);
+    if (typeof max !== 'undefined' && upperBound > max) {
+      // We need to force update after we set a new yAxis max because `convertToPixel` will
+      // can return a negitive position (probably because yAxisMax is not synced with chart yet)
+      this.setState({yAxisMax: Math.round(upperBound * 1.1)}, this.forceUpdate);
+    } else {
+      this.setState({yAxisMax: null});
+    }
+  }, 150);
+
+  setUpperBound = (pos: [number, number]) => {
+    if (!this.chartRef) {
+      return;
+    }
+
+    const upperBound = this.chartRef.convertFromPixel({gridIndex: 0}, pos)[1];
+    this.props.onChangeUpperBound(upperBound);
+  };
+
+  handleRef = (ref: ReactEchartsRef): void => {
+    // When chart initially renders, we want to update state with its width, as well as initialize starting
+    // locations (on y axis) for the draggable lines
+    if (ref && typeof ref.getEchartsInstance === 'function' && !this.chartRef) {
+      this.chartRef = ref.getEchartsInstance();
+      const width = this.chartRef.getWidth();
+      if (width !== this.state.width) {
+        this.setState({
+          width,
+        });
+      }
+    }
+
+    if (!ref) {
+      this.chartRef = null;
+    }
+  };
+
+  handleUpperBoundDrag = _e => {};
+
+  handleLowerBoundDrag = () => {};
+
+  render() {
+    const {width} = this.state;
+
+    const upperBoundPosition =
+      this.chartRef &&
+      this.chartRef.convertToPixel({yAxisIndex: 0}, `${this.props.upperBound}`);
+
+    return (
+      <ChartPanel>
+        <LineChart
+          isGroupedByDate
+          forwardedRef={this.handleRef}
+          yAxis={{
+            max: this.state.yAxisMax,
+          }}
+          graphic={Graphic({
+            elements: [
+              {
+                type: 'line',
+                invisible: false,
+                draggable: true,
+                position: [0, upperBoundPosition],
+                shape: {y1: 1, y2: 1, x1: -width, x2: width * 2},
+                ondragend: e => {
+                  this.setUpperBound(e.target.position);
+                },
+                z: 100,
+              },
+              {
+                type: 'line',
+                draggable: false,
+                position: [0, upperBoundPosition],
+                shape: {y1: 1, y2: 1, x1: 0, x2: width},
+                ondrag: () => {},
+              },
+            ],
+          })}
+          series={this.props.data}
+        />
+      </ChartPanel>
+    );
+  }
+}
+
+const ChartPanel = styled(Panel)`
+  background-color: white;
+  margin-bottom: ${space(1)};
+  padding: 0 ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/constants.ts b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/constants.ts
new file mode 100644
index 0000000000..0cddb96afc
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/constants.ts
@@ -0,0 +1,9 @@
+export enum AlertRuleThresholdType {
+  ABOVE,
+  BELOW,
+}
+
+export enum AlertRuleAggregations {
+  TOTAL,
+  UNIQUE_USERS,
+}
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.jsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.jsx
deleted file mode 100644
index 7fcec04c07..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.jsx
+++ /dev/null
@@ -1,97 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {t} from 'app/locale';
-import Form from 'app/views/settings/components/forms/form';
-import Graphic from 'app/components/charts/components/graphic';
-import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import LineChart from 'app/components/charts/lineChart';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-
-class IncidentRulesCreate extends React.Component {
-  static propTypes = {
-    data: PropTypes.array,
-  };
-
-  static defaultProps = {
-    data: [],
-  };
-
-  state = {
-    width: null,
-  };
-
-  render() {
-    const {orgId} = this.props.params;
-
-    return (
-      <div>
-        <SettingsPageHeader title={t('New Incident Rule')} />
-        <LineChart
-          isGroupedByDate
-          forwardedRef={e => {
-            if (e && typeof e.getEchartsInstance === 'function') {
-              const width = e.getEchartsInstance().getWidth();
-              if (width !== this.state.width) {
-                this.setState({width});
-              }
-            }
-          }}
-          graphic={Graphic({
-            elements: [
-              {
-                type: 'line',
-                draggable: true,
-                shape: {y1: 1, y2: 1, x1: 0, x2: this.state.width},
-                ondrag: () => {},
-              },
-            ],
-          })}
-          series={this.props.data}
-        />
-        <Form
-          apiMethod="POST"
-          apiEndpoint={`/organizations/${orgId}/incident-rules/`}
-          initialData={{}}
-          saveOnBlur={false}
-        >
-          <JsonForm
-            forms={[
-              {
-                title: t('Metric'),
-                fields: [
-                  {
-                    label: t('Metric'),
-                    name: 'metric',
-                    type: 'select',
-                    help: t('Choose which metric to display on the Y-axis'),
-                    choices: [['users', 'Users Affected']],
-                  },
-                  {
-                    label: t('Upper Bound'),
-                    name: 'upper',
-                    type: 'range',
-                    help: t(
-                      'Anything trending above this limit will trigger an incident'
-                    ),
-                  },
-                  {
-                    label: t('Lower Bound'),
-                    name: 'lower',
-                    type: 'range',
-                    help: t(
-                      'Anything trending below this limit will trigger an incident'
-                    ),
-                  },
-                ],
-                required: true,
-              },
-            ]}
-          />
-        </Form>
-      </div>
-    );
-  }
-}
-
-export default IncidentRulesCreate;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.tsx
new file mode 100644
index 0000000000..dba1612f17
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/create.tsx
@@ -0,0 +1,35 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {t} from 'app/locale';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+import RuleForm from './ruleForm';
+
+type RouteParams = {orgId: string; projectId: string};
+
+class IncidentRulesCreate extends React.Component<RouteComponentProps<RouteParams, {}>> {
+  handleSubmitSuccess = data => {
+    const {orgId, projectId} = this.props.params;
+    this.props.router.push(
+      `/settings/${orgId}/projects/${projectId}/incident-rules/${data.id}/`
+    );
+  };
+
+  render() {
+    const {orgId, projectId} = this.props.params;
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('New Incident Rule')} />
+        <RuleForm
+          orgId={orgId}
+          projectId={projectId}
+          onSubmitSuccess={this.handleSubmitSuccess}
+        />
+      </div>
+    );
+  }
+}
+
+export default IncidentRulesCreate;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.jsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.jsx
deleted file mode 100644
index 6d1d171c56..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.jsx
+++ /dev/null
@@ -1,34 +0,0 @@
-import React from 'react';
-
-import AsyncView from 'app/views/asyncView';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import SentryTypes from 'app/sentryTypes';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import {t} from 'app/locale';
-
-class IncidentRulesDetails extends AsyncView {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-  };
-
-  getEndpoints() {
-    return [];
-    // const {orgId, incidentRuleId} = this.props.params;
-
-    // return [['rule', `/organizations/${orgId}/incident-rules/${ incidentRuleId }/`]];
-  }
-
-  renderBody() {
-    return (
-      <div>
-        <SettingsPageHeader title={t('Incident Rule')} />
-        <Panel>
-          <PanelHeader>{t('Rule')}</PanelHeader>
-          <PanelBody>TODO</PanelBody>
-        </Panel>
-      </div>
-    );
-  }
-}
-
-export default IncidentRulesDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
new file mode 100644
index 0000000000..27f0ef37b1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/details.tsx
@@ -0,0 +1,58 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import AsyncView, {AsyncViewState} from 'app/views/asyncView';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+import RuleForm from './ruleForm';
+
+type IncidentRule = {};
+
+type State = {
+  rule: IncidentRule;
+} & AsyncViewState;
+
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+  incidentRuleId: string;
+};
+type Props = RouteComponentProps<RouteParams, {}>;
+
+class IncidentRulesDetails extends AsyncView<Props, State> {
+  getEndpoints() {
+    const {orgId, projectId, incidentRuleId} = this.props.params;
+
+    return [
+      ['rule', `/projects/${orgId}/${projectId}/alert-rules/${incidentRuleId}/`] as [
+        string,
+        string
+      ],
+    ];
+  }
+
+  handleSubmitSuccess = () => {
+    addSuccessMessage(t('Successfully saved Incident Rule'));
+  };
+
+  renderBody() {
+    const {orgId, projectId, incidentRuleId} = this.props.params;
+    return (
+      <div>
+        <SettingsPageHeader title={t('Edit Incident Rule')} />
+
+        <RuleForm
+          orgId={orgId}
+          projectId={projectId}
+          incidentRuleId={incidentRuleId}
+          onSubmitSuccess={this.handleSubmitSuccess}
+          initialData={this.state.rule}
+        />
+      </div>
+    );
+  }
+}
+
+export default IncidentRulesDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx
index 86e3afe134..aa414bb418 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/list.jsx
@@ -1,39 +1,64 @@
+import {Link} from 'react-router';
 import React from 'react';
+import styled from 'react-emotion';
 
+import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
+import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import SentryTypes from 'app/sentryTypes';
+import LoadingIndicator from 'app/components/loadingIndicator';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import {t} from 'app/locale';
+import space from 'app/styles/space';
 
 class IncidentRulesList extends AsyncView {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-  };
-
   getEndpoints() {
-    return [];
-    // const {orgId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
-    // return [['rules', `/organizations/${orgId}/incident-rules/`]];
+    return [['rules', `/projects/${orgId}/${projectId}/alert-rules/`]];
+  }
+
+  handleRemoveRule = async (rule, e) => {
+    e.stopPropagation();
+
+    // Optimistic update
+    const oldRules = this.state.rules.slice(0);
+    const newRules = this.state.rules.filter(({id}) => id === rule.id);
+
+    try {
+      this.setState({
+        rules: newRules,
+      });
+
+      // TODO: Delete rule
+    } catch (_err) {
+      this.setState({
+        rules: oldRules,
+      });
+    }
+  };
+
+  renderLoading() {
+    return this.renderBody();
   }
 
   renderBody() {
-    const {orgId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
     const action = (
       <Button
         priority="primary"
         size="small"
-        to={`/settings/${orgId}/incident-rules/new/`}
+        to={`/settings/${orgId}/projects/${projectId}/incident-rules/new/`}
         icon="icon-circle-add"
       >
         {t('Create New Rule')}
       </Button>
     );
 
-    const isEmpty = true;
+    const isLoading = this.state.loading;
+
+    const isEmpty = !isLoading && !this.state.rules.length;
 
     return (
       <div>
@@ -41,7 +66,33 @@ class IncidentRulesList extends AsyncView {
         <Panel>
           <PanelHeader>{t('Rules')}</PanelHeader>
           <PanelBody>
-            {!isEmpty ? null : (
+            {isLoading && <LoadingIndicator />}
+
+            {!isLoading &&
+              !isEmpty &&
+              this.state.rules.map(rule => (
+                <RuleRow key={rule.id}>
+                  <RuleLink
+                    to={`/settings/${orgId}/projects/${projectId}/incident-rules/${
+                      rule.id
+                    }/`}
+                  >
+                    {rule.name}
+                  </RuleLink>
+                  <Confirm
+                    onConfirm={e => this.handleRemoveRule(rule, e)}
+                    message={t('Are you sure you want to remove this rule?')}
+                  >
+                    <RemoveButton
+                      size="small"
+                      icon="icon-trash"
+                      label={t('Remove Rule')}
+                    />
+                  </Confirm>
+                </RuleRow>
+              ))}
+
+            {!isLoading && isEmpty && (
               <EmptyMessage>{t('No Incident rules have been created yet.')}</EmptyMessage>
             )}
           </PanelBody>
@@ -52,3 +103,18 @@ class IncidentRulesList extends AsyncView {
 }
 
 export default IncidentRulesList;
+
+const RuleRow = styled(PanelItem)`
+  padding: 0;
+  align-items: center;
+  justify-content: space-between;
+`;
+
+const RuleLink = styled(Link)`
+  flex: 1;
+  padding: ${space(2)};
+`;
+
+const RemoveButton = styled(Button)`
+  margin: ${space(2)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
new file mode 100644
index 0000000000..3bebcd2b04
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
@@ -0,0 +1,193 @@
+import {debounce} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {EventsStatsData} from 'app/types';
+import {PanelAlert} from 'app/components/panels';
+import {t} from 'app/locale';
+import Form from 'app/views/settings/components/forms/form';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+
+import IncidentRulesChart from './chart';
+import {AlertRuleAggregations, AlertRuleThresholdType} from './constants';
+
+type Props = {
+  data: EventsStatsData;
+};
+
+type State = {
+  width?: number;
+  upperBound: number;
+};
+
+const START_POSITION = 20;
+
+class RuleForm extends React.Component<Props, State> {
+  static contextTypes = {
+    form: PropTypes.any,
+  };
+
+  static defaultProps = {
+    data: [],
+  };
+
+  state = {
+    upperBound: START_POSITION,
+  };
+
+  handleChangeUpperBoundInput = debounce(upperBound => {
+    this.setState({upperBound});
+  }, 50);
+
+  handleChangeUpperBound = upperBound => {
+    this.setState({upperBound});
+    this.context.form.setValue('alertThreshold', Math.round(upperBound));
+  };
+
+  render() {
+    return (
+      <React.Fragment>
+        <IncidentRulesChart
+          onChangeUpperBound={this.handleChangeUpperBound}
+          upperBound={this.state.upperBound}
+          data={[
+            {
+              seriesName: 'Test',
+              dataArray: this.props.data.map(([ts, val]) => {
+                return [
+                  ts * 1000,
+                  val.length
+                    ? val.reduce((acc, {count} = {count: 0}) => acc + (count || 0), 0)
+                    : 0,
+                ];
+              }),
+            },
+          ]}
+        />
+        <JsonForm
+          renderHeader={() => {
+            return (
+              <PanelAlert type="warning">
+                {t(
+                  'Sentry will automatically digest alerts sent by some services to avoid flooding your inbox with individual issue notifications. Use the sliders to control frequency.'
+                )}
+              </PanelAlert>
+            );
+          }}
+          forms={[
+            {
+              title: t('Metric'),
+              fields: [
+                {
+                  label: t('Metric'),
+                  name: 'aggregations',
+                  type: 'select',
+                  help: t('Choose which metric to display on the Y-axis'),
+                  choices: [
+                    [AlertRuleAggregations.UNIQUE_USERS, 'Users Affected'],
+                    [AlertRuleAggregations.TOTAL, 'Events'],
+                  ],
+                  required: true,
+                  setValue: value => (value && value.length ? value[0] : value),
+                  getValue: value => [value],
+                },
+                {
+                  label: t('Time Window'),
+                  name: 'timeWindow',
+                  type: 'number',
+                  min: 1,
+                  max: 86400,
+                  placeholder: '60',
+                  help: t(
+                    'The time window to use when evaluating the Metric (in number of seconds)'
+                  ),
+                  required: true,
+                },
+                {
+                  label: t('Filter'),
+                  name: 'query',
+                  defaultValue: '',
+                  type: 'text',
+                  placeholder: 'error.type:TypeError',
+                  help: t(
+                    'You can apply standard Sentry filter syntax to filter by status, user, etc.'
+                  ),
+                },
+                {
+                  label: t('Incident Boundary'),
+                  name: 'alertThreshold',
+                  type: 'range',
+                  help: t('Anything trending above this limit will trigger an Incident'),
+                  onChange: this.handleChangeUpperBoundInput,
+                  showCustomInput: true,
+                  required: true,
+                },
+                {
+                  label: t('Resolution Boundary'),
+                  name: 'resolveThreshold',
+                  type: 'range',
+                  help: t('Anything trending below this limit will resolve an Incident'),
+                  showCustomInput: true,
+                  required: true,
+                },
+                {
+                  label: t('Use an inverted incident threshold'),
+                  name: 'thresholdType',
+                  type: 'boolean',
+                  defaultValue: AlertRuleThresholdType.ABOVE,
+                  help: t(
+                    'Alert me when the limit is trending below the incident boundary'
+                  ),
+                },
+                {
+                  label: t('Name'),
+                  name: 'name',
+                  type: 'text',
+                  help: t('Give your Incident Rule a name so it is easy to manage later'),
+                  placeholder: t('My Incident Rule Name'),
+                  required: true,
+                },
+              ],
+            },
+          ]}
+        />
+      </React.Fragment>
+    );
+  }
+}
+
+type RuleFormContainerProps = {
+  orgId: string;
+  projectId: string;
+  incidentRuleId?: string;
+  initialData?: {[key: string]: string | number | boolean};
+  onSubmitSuccess?: Function;
+};
+function RuleFormContainer({
+  orgId,
+  projectId,
+  incidentRuleId,
+  initialData,
+  onSubmitSuccess,
+  ...props
+}: RuleFormContainerProps) {
+  return (
+    <Form
+      apiMethod={incidentRuleId ? 'PUT' : 'POST'}
+      apiEndpoint={`/projects/${orgId}/${projectId}/alert-rules/${
+        incidentRuleId ? `${incidentRuleId}/` : ''
+      }`}
+      initialData={{
+        query: '',
+        thresholdType: AlertRuleThresholdType.ABOVE,
+        ...initialData,
+      }}
+      saveOnBlur={false}
+      onSubmitSuccess={onSubmitSuccess}
+    >
+      <RuleForm {...props} />
+    </Form>
+  );
+}
+
+export default RuleFormContainer;
diff --git a/tests/js/fixtures/incidentRule.js b/tests/js/fixtures/incidentRule.js
new file mode 100644
index 0000000000..f21112dec0
--- /dev/null
+++ b/tests/js/fixtures/incidentRule.js
@@ -0,0 +1,20 @@
+export function IncidentRule(params) {
+  return {
+    status: 0,
+    dateAdded: '2019-07-31T23:02:02.731Z',
+    alertThreshold: 24,
+    dataset: 'events',
+    thresholdType: 0,
+    query: '',
+    id: '4',
+    thresholdPeriod: 1,
+    name: 'My Incident Rule',
+    timeWindow: 60,
+    aggregations: [0],
+    resolveThreshold: 13,
+    projectId: '1',
+    resolution: 1,
+    dateModified: '2019-07-31T23:02:02.731Z',
+    ...params,
+  };
+}
diff --git a/tests/js/spec/views/settings/organizationIncidentRules/details.spec.jsx b/tests/js/spec/views/settings/organizationIncidentRules/details.spec.jsx
deleted file mode 100644
index 12aff56dab..0000000000
--- a/tests/js/spec/views/settings/organizationIncidentRules/details.spec.jsx
+++ /dev/null
@@ -1,18 +0,0 @@
-import {mount} from 'enzyme';
-import React from 'react';
-
-import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import IncidentRulesDetails from 'app/views/settings/projectIncidentRules/details';
-
-describe('Incident Rules Details', function() {
-  it('renders', function() {
-    const {organization, routerContext} = initializeOrg();
-    mount(
-      <IncidentRulesDetails
-        params={{orgId: organization.slug}}
-        organization={organization}
-      />,
-      routerContext
-    );
-  });
-});
diff --git a/tests/js/spec/views/settings/organizationIncidentRules/list.spec.jsx b/tests/js/spec/views/settings/organizationIncidentRules/list.spec.jsx
deleted file mode 100644
index 26f9c7c409..0000000000
--- a/tests/js/spec/views/settings/organizationIncidentRules/list.spec.jsx
+++ /dev/null
@@ -1,18 +0,0 @@
-import {mount} from 'enzyme';
-import React from 'react';
-
-import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import IncidentRulesList from 'app/views/settings/projectIncidentRules/list';
-
-describe('Incident Rules List', function() {
-  it('renders', function() {
-    const {organization, routerContext} = initializeOrg();
-    mount(
-      <IncidentRulesList
-        params={{orgId: organization.slug}}
-        organization={organization}
-      />,
-      routerContext
-    );
-  });
-});
diff --git a/tests/js/spec/views/settings/organizationIncidentRules/create.spec.jsx b/tests/js/spec/views/settings/projectIncidentRules/create.spec.jsx
similarity index 100%
rename from tests/js/spec/views/settings/organizationIncidentRules/create.spec.jsx
rename to tests/js/spec/views/settings/projectIncidentRules/create.spec.jsx
diff --git a/tests/js/spec/views/settings/projectIncidentRules/details.spec.jsx b/tests/js/spec/views/settings/projectIncidentRules/details.spec.jsx
new file mode 100644
index 0000000000..3e344aa833
--- /dev/null
+++ b/tests/js/spec/views/settings/projectIncidentRules/details.spec.jsx
@@ -0,0 +1,29 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import IncidentRulesDetails from 'app/views/settings/projectIncidentRules/details';
+
+describe('Incident Rules Details', function() {
+  it('renders', function() {
+    const {organization, project, routerContext} = initializeOrg();
+    const rule = TestStubs.IncidentRule();
+    const req = MockApiClient.addMockResponse({
+      url: `/projects/${organization.slug}/${project.slug}/alert-rules/${rule.id}/`,
+      body: rule,
+    });
+    mount(
+      <IncidentRulesDetails
+        params={{
+          orgId: organization.slug,
+          projectId: project.slug,
+          incidentRuleId: rule.id,
+        }}
+        organization={organization}
+      />,
+      routerContext
+    );
+
+    expect(req).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/settings/projectIncidentRules/list.spec.jsx b/tests/js/spec/views/settings/projectIncidentRules/list.spec.jsx
new file mode 100644
index 0000000000..6f345a9540
--- /dev/null
+++ b/tests/js/spec/views/settings/projectIncidentRules/list.spec.jsx
@@ -0,0 +1,26 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import IncidentRulesList from 'app/views/settings/projectIncidentRules/list';
+
+describe('Incident Rules List', function() {
+  it('renders', function() {
+    const {organization, project, routerContext} = initializeOrg();
+    const rule = TestStubs.IncidentRule();
+    const req = MockApiClient.addMockResponse({
+      url: `/projects/${organization.slug}/${project.slug}/alert-rules/`,
+      body: [rule],
+    });
+    const wrapper = mount(
+      <IncidentRulesList
+        params={{orgId: organization.slug, projectId: project.slug}}
+        organization={organization}
+      />,
+      routerContext
+    );
+
+    expect(req).toHaveBeenCalled();
+    expect(wrapper.find('RuleLink').text()).toEqual('My Incident Rule');
+  });
+});
