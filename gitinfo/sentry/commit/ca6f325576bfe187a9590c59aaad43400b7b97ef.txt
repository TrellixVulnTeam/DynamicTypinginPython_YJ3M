commit ca6f325576bfe187a9590c59aaad43400b7b97ef
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Mar 29 10:29:53 2017 +0200

    Map dsym files on events with version dsym file
    
    Add more app context

diff --git a/src/sentry/lang/native/dsymcache.py b/src/sentry/lang/native/dsymcache.py
index 463fb94fb3..4f6ed4a20c 100644
--- a/src/sentry/lang/native/dsymcache.py
+++ b/src/sentry/lang/native/dsymcache.py
@@ -27,11 +27,12 @@ class DSymCache(object):
     def get_global_path(self):
         return os.path.join(self.dsym_cache_path, 'global')
 
-    def fetch_dsyms(self, project, uuids):
+    def fetch_dsyms(self, project, uuids, on_dsym_file_referenced=None):
         bases = set()
         loaded = set()
         for image_uuid in uuids:
-            base = self.fetch_dsym(project, image_uuid)
+            base = self.fetch_dsym(project, image_uuid,
+                on_dsym_file_referenced=on_dsym_file_referenced)
             if base is not None:
                 loaded.add(image_uuid)
                 bases.add(base)
@@ -43,7 +44,7 @@ class DSymCache(object):
             os.utime(path, (now, now))
         return path
 
-    def fetch_dsym(self, project, image_uuid):
+    def fetch_dsym(self, project, image_uuid, on_dsym_file_referenced=None):
         image_uuid = image_uuid.lower()
         for path in self.get_project_path(project), self.get_global_path():
             base = self.get_project_path(project)
@@ -63,6 +64,8 @@ class DSymCache(object):
         if dsf.is_global:
             base = self.get_global_path()
         else:
+            if on_dsym_file_referenced is not None:
+                on_dsym_file_referenced(dsf)
             base = self.get_project_path(project)
         dsym = os.path.join(base, image_uuid)
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 5a98112c8a..7d2c8569f0 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -12,14 +12,15 @@ from symsynd.heuristics import find_best_instruction
 from symsynd.utils import parse_addr
 
 from sentry import options
-from sentry.models import Project, EventError
+from sentry.models import Project, EventError, VersionDSymFile, DSymPlatform, \
+    DSymApp
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed, \
     ImageLookup
 from sentry.lang.native.utils import \
     find_apple_crash_report_referenced_images, get_sdk_from_event, \
     get_sdk_from_apple_system_info, cpu_name_from_data, APPLE_SDK_MAPPING, \
-    rebase_addr
+    rebase_addr, version_build_from_data
 from sentry.lang.native.systemsymbols import lookup_system_symbols
 from sentry.stacktraces import StacktraceProcessor
 from sentry.reprocessing import report_processing_issue
@@ -442,9 +443,27 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             for pf in processing_task.iter_processable_frames(self)
             if pf.cache_value is None and pf.data['image_uuid'] is not None)
 
+        def on_referenced(dsym_file):
+            app_info = version_build_from_data(self.data)
+            if app_info is not None:
+                dsym_app = DSymApp.objects.create_or_update_app(
+                    sync_id=None,
+                    app_id=app_info.id,
+                    project=self.project,
+                    data={'name': app_info.name},
+                    platform=DSymPlatform.APPLE,
+                )
+                version_dsym_file, created = VersionDSymFile.objects.get_or_create(
+                    dsym_file=dsym_file,
+                    dsym_app=dsym_app,
+                    version=app_info.version,
+                    build=app_info.build,
+                )
+
         self.sym = Symbolizer(self.project, self.image_lookup,
                               cpu_name=self.cpu_name,
-                              referenced_images=referenced_images)
+                              referenced_images=referenced_images,
+                              on_dsym_file_referenced=on_referenced)
 
         # The symbolizer gets a reference to the debug meta's images so
         # when it resolves the missing vmaddrs it changes them in the data
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 1dd4b52c90..f8698f8883 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -116,7 +116,8 @@ def find_system_symbol(img, instruction_addr, sdk_info=None, cpu_name=None):
     )
 
 
-def make_symbolizer(project, image_lookup, referenced_images=None):
+def make_symbolizer(project, image_lookup, referenced_images=None,
+        on_dsym_file_referenced=None):
     """Creates a symbolizer for the given project and binary images.  If a
     list of referenced images is referenced (UUIDs) then only images
     needed by those frames are loaded.
@@ -127,7 +128,8 @@ def make_symbolizer(project, image_lookup, referenced_images=None):
     if to_load is None:
         to_load = image_lookup.get_uuids()
 
-    dsym_paths, loaded = dsymcache.fetch_dsyms(project, to_load)
+    dsym_paths, loaded = dsymcache.fetch_dsyms(project, to_load,
+        on_dsym_file_referenced=on_dsym_file_referenced)
 
     # We only want to pass the actually loaded symbols to the report
     # symbolizer to avoid the expensive FS operations that will otherwise
@@ -176,14 +178,15 @@ class Symbolizer(object):
     """
 
     def __init__(self, project, binary_images, referenced_images=None,
-                 cpu_name=None):
+                 cpu_name=None, on_dsym_file_referenced=None):
         if isinstance(binary_images, ImageLookup):
             self.image_lookup = binary_images
         else:
             self.image_lookup = ImageLookup(binary_images)
         self.symsynd_symbolizer = make_symbolizer(
             project, self.image_lookup,
-            referenced_images=referenced_images)
+            referenced_images=referenced_images,
+            on_dsym_file_referenced=on_dsym_file_referenced)
         self.cpu_name = cpu_name
 
     def resolve_missing_vmaddrs(self):
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 63fb0b1cc3..355787a72f 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 import logging
 
+from collections import namedtuple
 from symsynd.macho.arch import get_cpu_name
 from symsynd.utils import parse_addr
 
@@ -26,6 +27,8 @@ KNOWN_DSYM_TYPES = {
     'watchOS': 'macho',
 }
 
+AppInfo = namedtuple('AppInfo', ['id', 'version', 'build', 'name'])
+
 
 def find_apple_crash_report_referenced_images(binary_images, threads):
     """Given some binary images from an apple crash report and a thread
@@ -156,6 +159,23 @@ def cpu_name_from_data(data):
     return unique_cpu_name
 
 
+def version_build_from_data(data):
+    """Returns release and build string from the given data if it exists."""
+    app_context = data.get('contexts', {}).get('app', {})
+    if app_context is not None:
+        if (app_context.get('app_identifier', None) and
+                app_context.get('app_short_version', None) and
+                app_context.get('app_version', None) and
+                app_context.get('app_name', None)):
+            return AppInfo(
+                app_context.get('app_identifier', None),
+                app_context.get('app_short_version', None),
+                app_context.get('app_version', None),
+                app_context.get('app_name', None),
+            )
+    return None
+
+
 def rebase_addr(instr_addr, img):
     return parse_addr(instr_addr) - parse_addr(img['image_addr'])
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app.jsx b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
index 086c865e1f..8ae3acd194 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
@@ -9,8 +9,9 @@ const AppContextType = React.createClass({
   },
 
   render() {
-    let {app_id, app_start_time, device_app_hash,
-      build_type, ...data} = this.props.data;
+    let {app_id, app_start_time, device_app_hash, build_type,
+      app_identifier, app_name, app_short_version,
+      app_version, ...data} = this.props.data;
     return (
       <ContextBlock
         data={data}
@@ -19,6 +20,10 @@ const AppContextType = React.createClass({
           ['?Start Time', app_start_time],
           ['?Device', device_app_hash],
           ['?Build Type', build_type],
+          ['?Bundle ID', app_identifier],
+          ['?Bundle Name', app_name],
+          ['?Version', app_short_version],
+          ['?Build', app_version],
         ]}
         alias={this.props.alias} />
     );
diff --git a/tests/sentry/lang/native/test_utils.py b/tests/sentry/lang/native/test_utils.py
index c89bbb6282..51e22a208b 100644
--- a/tests/sentry/lang/native/test_utils.py
+++ b/tests/sentry/lang/native/test_utils.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
-from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data
+from sentry.lang.native.utils import get_sdk_from_event, cpu_name_from_data, \
+    version_build_from_data
 
 
 def test_get_sdk_from_event():
@@ -55,6 +56,54 @@ def test_cpu_name_from_data():
     assert cpu_name == 'arm64'
 
 
+def test_version_build_from_data():
+
+    app_info = version_build_from_data({
+        'app': {
+            'app_version': "2",
+            'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
+            'app_id': "45BA82DF-F3E3-37F7-9D88-12A1AAB719E7",
+            'app_short_version': "1.0",
+            'app_identifier': "com.rokkincat.SentryExample",
+            'app_name': "SwiftExample",
+            'app_start_time': "2017-03-28T15:14:01Z",
+            'type': "app",
+            'build_type': "simulator"
+        }
+    })
+    assert app_info.version == '1.0'
+    assert app_info.build == '2'
+    assert app_info.name == 'SwiftExample'
+    assert app_info.id == 'com.rokkincat.SentryExample'
+
+    app_info = version_build_from_data({
+        'app': {
+            'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
+            'app_id': "45BA82DF-F3E3-37F7-9D88-12A1AAB719E7",
+            'app_short_version': "1.0",
+            'app_identifier': "com.rokkincat.SentryExample",
+            'app_name': "SwiftExample",
+            'app_start_time': "2017-03-28T15:14:01Z",
+            'type': "app",
+            'build_type': "simulator"
+        }
+    })
+    assert app_info is None
+
+    app_info = version_build_from_data({
+        'app': {
+            'device_app_hash': "18482a73f96d2ed3f4ce8d73fa9942744bff3598",
+            'app_id': "45BA82DF-F3E3-37F7-9D88-12A1AAB719E7",
+            'app_identifier': "com.rokkincat.SentryExample",
+            'app_name': "SwiftExample",
+            'app_start_time': "2017-03-28T15:14:01Z",
+            'type': "app",
+            'build_type': "simulator"
+        }
+    })
+    assert app_info is None
+
+
 def test_cpu_name_from_data_inferred_type():
     cpu_name = cpu_name_from_data({
         'contexts': {
