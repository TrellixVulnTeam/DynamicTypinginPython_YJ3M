commit cdb063e41eb5bd17d6042c8fe41c52422080e077
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Dec 2 19:45:21 2015 -0800

    Move expire_local_cache hook into signals

diff --git a/src/sentry/middleware/env.py b/src/sentry/middleware/env.py
index d089e54da0..adf06ef805 100644
--- a/src/sentry/middleware/env.py
+++ b/src/sentry/middleware/env.py
@@ -4,8 +4,6 @@ from django.conf import settings
 from django.core.urlresolvers import reverse
 
 from sentry.app import env
-from random import random
-from sentry.options import default_store
 
 
 class SentryEnvMiddleware(object):
@@ -16,12 +14,3 @@ class SentryEnvMiddleware(object):
 
         # bind request to env
         env.request = request
-
-        # Periodically for an expire the local OptionsStore cache.
-        # This cleanup is purely to keep memory low and garbage collect
-        # old values. It's not required to run to keep things consistent.
-        # Internally, if an option is fetched and it's expired, it gets
-        # evicted immediately. This is purely for options that haven't
-        # been fetched since they've expired.
-        if random() < 0.25:
-            default_store.expire_local_cache()
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 7569d84ebf..eaaad0d439 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -16,6 +16,8 @@ __all__ = (
 )
 
 default_store = OptionsStore()
+default_store.connect_signals()
+
 default_manager = OptionsManager(store=default_store)
 
 # expose public API
diff --git a/src/sentry/options/store.py b/src/sentry/options/store.py
index da23979951..ef6b2c7209 100644
--- a/src/sentry/options/store.py
+++ b/src/sentry/options/store.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import, print_function
 import logging
 from collections import namedtuple
 from time import time
+from random import random
 
 from django.utils import timezone
 from sentry.db.models.query import create_or_update
@@ -221,9 +222,6 @@ class OptionsStore(object):
         Iterate over our local cache items, and
         remove the keys that are beyond their grace time.
         """
-        if not self._local_cache:
-            return
-
         to_expire = []
         now = int(time())
         for k, (_, _, grace) in self._local_cache.iteritems():
@@ -244,3 +242,21 @@ class OptionsStore(object):
         Empty store's local in-process cache.
         """
         self._local_cache = {}
+
+    def maybe_expire_local_cache(self):
+        # Periodically force an expire on the local cache.
+        # This cleanup is purely to keep memory low and garbage collect
+        # old values. It's not required to run to keep things consistent.
+        # Internally, if an option is fetched and it's expired, it gets
+        # evicted immediately. This is purely for options that haven't
+        # been fetched since they've expired.
+        if not self._local_cache:
+            return
+        if random() < 0.25:
+            self.expire_local_cache()
+
+    def connect_signals(self):
+        from celery.signals import task_postrun
+        from django.core.signals import request_finished
+        task_postrun.connect(self.maybe_expire_local_cache)
+        request_finished.connect(self.maybe_expire_local_cache)
