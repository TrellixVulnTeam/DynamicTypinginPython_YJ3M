commit fd40b5e037a80c1dfc2c08e40d30246cdb76369f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Feb 8 00:42:36 2017 +0100

    Pass meta information to symsynd

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index e6201a58c4..5cec5c7a43 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -640,7 +640,7 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
         self.populate_source_cache(frames)
         return True
 
-    def process_frame(self, frame, idx=None):
+    def process_frame(self, frame, stacktrace_info, idx):
         if not settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT or \
            self.get_effective_platform(frame) != 'javascript':
             return
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 4f9d6f8006..7870f3de46 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -381,7 +381,29 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         # dict.
         return self.sym.resolve_missing_vmaddrs()
 
-    def process_frame(self, frame, idx=None):
+    def _get_frame_meta(self, stacktrace_info, idx):
+        # We only need to provide meta information for frame zero
+        if idx != 0:
+            return None
+
+        # The signal is useful information for symsynd in some situations
+        # to disambiugate the first frame.  If we can get this information
+        # from the mechanism we want to pass it onwards.
+        signal = None
+        exc = self.data.get('sentry.interfaces.Exception')
+        if exc is not None:
+            mechanism = exc['values'][0].get('mechanism')
+            if mechanism and 'posix_signal' in mechanism and \
+               'signal' in mechanism['posix_signal']:
+                signal = mechanism['posix_signal']['signal']
+
+        return {
+            'frame_number': 0,
+            'registers': stacktrace_info.stacktrace.get('registers'),
+            'signal': signal,
+        }
+
+    def process_frame(self, frame, stacktrace_info, idx):
         # XXX: warn on missing availability?
 
         # Only process frames here that are of supported platforms and
@@ -404,11 +426,14 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             'symbol_name': frame.get('function'),
             'symbol_addr': frame['symbol_addr'],
         }
+        meta = self._get_frame_meta(stacktrace_info, idx)
+
         new_frame = dict(frame)
         raw_frame = dict(frame)
 
         try:
-            sfrm = self.sym.symbolize_frame(sym_frame, self.sdk_info)
+            sfrm = self.sym.symbolize_frame(sym_frame, self.sdk_info,
+                                            meta=meta)
         except SymbolicationFailed as e:
             if e.is_user_fixable or e.is_sdk_failure:
                 errors.append({
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index d2d005efc9..c7f5222cc2 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -211,7 +211,7 @@ class Symbolizer(object):
         img = self.images.get(frame['object_addr'])
         return img is not None and self._is_app_frame(frame, img)
 
-    def symbolize_app_frame(self, frame, img):
+    def symbolize_app_frame(self, frame, img, meta=None):
         if frame['object_addr'] not in self.symsynd_symbolizer.images:
             if self._is_optional_app_bundled_framework(frame, img):
                 type = EventError.NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM
@@ -224,7 +224,7 @@ class Symbolizer(object):
 
         try:
             new_frame = self.symsynd_symbolizer.symbolize_frame(
-                frame, silent=False, demangle=False)
+                frame, silent=False, demangle=False, meta=meta)
         except SymbolicationError as e:
             raise SymbolicationFailed(
                 type=EventError.NATIVE_BAD_DSYM,
@@ -259,7 +259,7 @@ class Symbolizer(object):
                   object_name=img['name'])
         return self._process_frame(rv, img)
 
-    def symbolize_frame(self, frame, sdk_info=None):
+    def symbolize_frame(self, frame, sdk_info=None, meta=None):
         img = self.images.get(frame['object_addr'])
         if img is None:
             raise SymbolicationFailed(
@@ -272,9 +272,10 @@ class Symbolizer(object):
         if not self._is_app_bundled_frame(frame, img):
             return self.symbolize_system_frame(frame, img, sdk_info)
 
-        return self.symbolize_app_frame(frame, img)
+        return self.symbolize_app_frame(frame, img, meta)
 
     def symbolize_backtrace(self, backtrace, sdk_info=None):
+        # TODO: kill me
         rv = []
         errors = []
         idx = -1
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 56ff828be4..872096bf9c 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -33,7 +33,7 @@ class StacktraceProcessor(object):
     def get_effective_platform(self, frame):
         return frame.get('platform') or self.data['platform']
 
-    def process_frame(self, frame, idx=None):
+    def process_frame(self, frame, stacktrace_info, idx):
         pass
 
 
@@ -126,7 +126,8 @@ def process_single_stacktrace(stacktrace_info, processors):
         errors = None
         for processor in processors:
             try:
-                rv = processor.process_frame(frame, frame_count - idx - 1)
+                rv = processor.process_frame(frame, stacktrace_info,
+                                             frame_count - idx - 1)
                 if rv is None:
                     continue
             except Exception:
