commit a4566b36d616d69a4ac93fae9f27ad06324b032c
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 19 09:18:38 2014 -0800

    Initial Rules implementation

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 103b79f978..f7b53a344e 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -221,3 +221,11 @@ TAG_LABELS = {
     'url': _('URL'),
     'server_name': _('Server'),
 }
+
+# TODO(dcramer): once this is more flushed out we want this to be extendable
+SENTRY_RULES = (
+    'sentry.rules.actions.notify_event.NotifyEventAction',
+    'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition',
+    'sentry.rules.conditions.regression_event.RegressionEventCondition',
+    'sentry.rules.conditions.tagged_event.TaggedEventCondition',
+)
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index efc78699a5..96e9d05f77 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -1000,7 +1000,6 @@ class Http(Interface):
             data = dict(enumerate(data))
 
         self.url = urlparse.urlunsplit((scheme, netloc, path, query, fragment))
-        self.short_url = urlparse.urlunsplit((scheme, netloc, path, None, None))
         self.method = method
         self.data = data
         self.query_string = query
@@ -1025,6 +1024,16 @@ class Http(Interface):
         self.headers = headers or {}
         self.env = env or {}
 
+    @property
+    def short_url(self):
+        scheme, netloc, path, _, _ = urlparse.urlsplit(self.url)
+        return urlparse.urlunsplit((scheme, netloc, path, None, None))
+
+    @property
+    def url_without_fragment(self):
+        scheme, netloc, path, query, _ = urlparse.urlsplit(self.url)
+        return urlparse.urlunsplit((scheme, netloc, path, query, None))
+
     def serialize(self):
         return {
             'url': self.url,
@@ -1093,7 +1102,7 @@ class Http(Interface):
     def get_search_context(self, event):
         return {
             'filters': {
-                'url': [self.url],
+                'url': [self.short_url],
             }
         }
 
@@ -1224,7 +1233,7 @@ class User(Interface):
         self.email = email
         self.username = username
         self.ip_address = ip_address
-        self.data = kwargs
+        self.data = kwargs.get('data', kwargs)
 
     def serialize(self):
         # XXX: legacy -- delete
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 6b59ba3dd1..ca6e784b68 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -416,7 +416,7 @@ class GroupManager(BaseManager, ChartMixin):
                 tags.extend(added_tags)
 
         try:
-            group, is_new, is_sample = self._create_group(
+            group, is_new, is_regression, is_sample = self._create_group(
                 event=event,
                 tags=data['tags'],
                 **group_kwargs
@@ -457,8 +457,9 @@ class GroupManager(BaseManager, ChartMixin):
             send_group_processors(
                 group=group,
                 event=event,
-                is_new=is_new,
-                is_sample=is_sample
+                is_new=is_new or is_regression,  # backwards compat
+                is_sample=is_sample,
+                is_regression=is_regression,
             )
 
         if getattr(settings, 'SENTRY_INDEX_SEARCH', settings.SENTRY_USE_SEARCH):
@@ -521,7 +522,7 @@ class GroupManager(BaseManager, ChartMixin):
 
             if group.status == STATUS_RESOLVED or group.is_over_resolve_age():
                 # Making things atomic
-                is_new = bool(self.filter(
+                is_regression = bool(self.filter(
                     id=group.id,
                     status=STATUS_RESOLVED,
                 ).exclude(
@@ -532,6 +533,8 @@ class GroupManager(BaseManager, ChartMixin):
 
                 group.active_at = date
                 group.status = STATUS_UNRESOLVED
+            else:
+                is_regression = False
 
             group.last_seen = extra['last_seen']
 
@@ -539,6 +542,8 @@ class GroupManager(BaseManager, ChartMixin):
                 'id': group.id,
             }, extra)
         else:
+            is_regression = False
+
             # TODO: this update should actually happen as part of create
             group.update(score=ScoreClause(group))
 
@@ -573,7 +578,7 @@ class GroupManager(BaseManager, ChartMixin):
         except Exception, e:
             logger.exception('Unable to record tags: %s' % (e,))
 
-        return group, is_new, is_sample
+        return group, is_new, is_regression, is_sample
 
     def add_tags(self, group, tags):
         from sentry.models import TagValue, GroupTag
diff --git a/src/sentry/migrations/0109_add_rule.py b/src/sentry/migrations/0109_add_rule.py
new file mode 100644
index 0000000000..b2b0d186c5
--- /dev/null
+++ b/src/sentry/migrations/0109_add_rule.py
@@ -0,0 +1,296 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'Rule'
+        db.create_table('sentry_rule', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Project'])),
+            ('label', self.gf('django.db.models.fields.CharField')(max_length=64)),
+            ('data', self.gf('django.db.models.fields.TextField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['Rule'])
+
+    def backwards(self, orm):
+        # Deleting model 'Rule'
+        db.delete_table('sentry_rule')
+
+    models = {
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': "orm['sentry.AlertRelatedGroup']", 'to': "orm['sentry.Group']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Alert']"}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.IntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'GroupCountByMinute', 'db_table': "'sentry_messagecountbyminute'"},
+            'date': ('django.db.models.fields.DateTimeField', [], {'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'),)", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'team_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.TeamMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/models/__init__.py b/src/sentry/models/__init__.py
index 62d80e37d8..7d99381ead 100644
--- a/src/sentry/models/__init__.py
+++ b/src/sentry/models/__init__.py
@@ -29,6 +29,7 @@ from .project import *  # NOQA
 from .projectcountbyminute import *  # NOQA
 from .projectkey import *  # NOQA
 from .projectoption import *  # NOQA
+from .rule import *  # NOQA
 from .tagkey import *  # NOQA
 from .tagvalue import *  # NOQA
 from .team import *  # NOQA
diff --git a/src/sentry/models/rule.py b/src/sentry/models/rule.py
new file mode 100644
index 0000000000..423fb20336
--- /dev/null
+++ b/src/sentry/models/rule.py
@@ -0,0 +1,24 @@
+"""
+sentry.models.rule
+~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import Model, GzippedDictField, sane_repr
+
+
+class Rule(Model):
+    project = models.ForeignKey('sentry.Project')
+    label = models.CharField(max_length=64)
+    data = GzippedDictField()
+    date_added = models.DateTimeField(default=timezone.now)
+
+    class Meta:
+        db_table = 'sentry_rule'
+        app_label = 'sentry'
+
+    __repr__ = sane_repr('project_id', 'label')
diff --git a/src/sentry/rules.py b/src/sentry/rules.py
new file mode 100644
index 0000000000..266b543c3d
--- /dev/null
+++ b/src/sentry/rules.py
@@ -0,0 +1,88 @@
+"""
+sentry.rules
+~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+
+Rules apply either before an event gets stored, or immediately after.
+
+Basic actions:
+
+- I want to get notified when [X]
+- I want to group events when [X]
+- I want to scrub data when [X]
+
+Expanded:
+
+- I want to get notified when an event is first seen
+- I want to get notified when an event is marked as a regression
+- I want to get notified when the rate of an event increases by [100%]
+- I want to get notified when an event has been seen more than [100] times
+- I want to get notified when an event matches [conditions]
+- I want to group events when an event matches [conditions]
+
+Rules get broken down into two phases:
+
+- An action
+- A rule condition
+
+A condition itself may actually be any number of things, but that is determined
+by the rule's logic. Each rule condition may be associated with a form.
+
+- [ACTION:I want to get notified when] [RULE:an event is first seen]
+- [ACTION:I want to group events when] [RULE:an event matches [FORM]]
+
+"""
+import re
+
+from django.utils.html import escape
+from django.utils.safestring import mark_safe
+
+
+class RuleDescriptor(type):
+    def __new__(cls, *args, **kwargs):
+        new_cls = super(RuleDescriptor, cls).__new__(cls, *args, **kwargs)
+        new_cls.id = '%s.%s' % (new_cls.__module__, new_cls.__name__)
+        return new_cls
+
+
+class RuleBase(object):
+    label = None
+    form_cls = None
+
+    __metaclass__ = RuleDescriptor
+
+    def __init__(self, project, data=None):
+        self.project = project
+        self.data = data or {}
+
+    def get_option(self, key):
+        return self.data.get(key)
+
+    def render_label(self):
+        return self.label.format(**self.data)
+
+    def render_form(self):
+        if not self.form_cls:
+            return self.label
+
+        form = self.form_cls(
+            self.data,
+        )
+
+        def replace_field(match):
+            field = match.group(1)
+            return unicode(form[field])
+
+        return mark_safe(re.sub(r'{([^}]+)}', replace_field, escape(self.label)))
+
+    def validate_form(self):
+        if not self.form_cls:
+            return True
+
+        form = self.form_cls(
+            self.data,
+        )
+
+        return form.is_valid()
diff --git a/src/sentry/rules/__init__.py b/src/sentry/rules/__init__.py
new file mode 100644
index 0000000000..4d451ecc33
--- /dev/null
+++ b/src/sentry/rules/__init__.py
@@ -0,0 +1,26 @@
+"""
+sentry.rules
+~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from .base import *  # NOQA
+from .registry import RuleRegistry  # NOQA
+
+
+def init_registry():
+    from sentry.constants import SENTRY_RULES
+    from sentry.utils.imports import import_string
+
+    registry = RuleRegistry()
+    for rule in SENTRY_RULES:
+        cls = import_string(rule)
+        registry.add(cls)
+    return registry
+
+
+rules = init_registry()
diff --git a/src/sentry/rules/actions/__init__.py b/src/sentry/rules/actions/__init__.py
new file mode 100644
index 0000000000..e44e46c002
--- /dev/null
+++ b/src/sentry/rules/actions/__init__.py
@@ -0,0 +1,11 @@
+"""
+sentry.rules.actions
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from .base import *  # NOQA
diff --git a/src/sentry/rules/actions/base.py b/src/sentry/rules/actions/base.py
new file mode 100644
index 0000000000..670f154bb7
--- /dev/null
+++ b/src/sentry/rules/actions/base.py
@@ -0,0 +1,18 @@
+"""
+sentry.rules.actions.base
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.rules.base import RuleBase
+
+
+class EventAction(RuleBase):
+    rule_type = 'action/event'
+
+    def after(self, event, is_new, is_regression, **kwargs):
+        pass
diff --git a/src/sentry/rules/actions/notify_event.py b/src/sentry/rules/actions/notify_event.py
new file mode 100644
index 0000000000..8f1390957a
--- /dev/null
+++ b/src/sentry/rules/actions/notify_event.py
@@ -0,0 +1,26 @@
+"""
+sentry.rules.actions.notify_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.rules.actions.base import EventAction
+
+
+class NotifyEventAction(EventAction):
+    label = 'Send a notification'
+
+    def notify(self, event):
+        # TODO: fire off plugin notifications
+        pass
+
+    def after(self, event, **kwargs):
+        if self.should_notify(event):
+            self.notify(event)
+
+    def passes(self, event, **kwargs):
+        raise NotImplementedError
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
new file mode 100644
index 0000000000..8d03a6ebd9
--- /dev/null
+++ b/src/sentry/rules/base.py
@@ -0,0 +1,91 @@
+"""
+sentry.rules.base
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+
+Rules apply either before an event gets stored, or immediately after.
+
+Basic actions:
+
+- I want to get notified when [X]
+- I want to group events when [X]
+- I want to scrub data when [X]
+
+Expanded:
+
+- I want to get notified when an event is first seen
+- I want to get notified when an event is marked as a regression
+- I want to get notified when the rate of an event increases by [100%]
+- I want to get notified when an event has been seen more than [100] times
+- I want to get notified when an event matches [conditions]
+- I want to group events when an event matches [conditions]
+
+Rules get broken down into two phases:
+
+- An action
+- A rule condition
+
+A condition itself may actually be any number of things, but that is determined
+by the rule's logic. Each rule condition may be associated with a form.
+
+- [ACTION:I want to get notified when] [RULE:an event is first seen]
+- [ACTION:I want to group events when] [RULE:an event matches [FORM]]
+
+"""
+
+from __future__ import absolute_import
+
+import re
+
+from django.utils.html import escape
+from django.utils.safestring import mark_safe
+
+
+class RuleDescriptor(type):
+    def __new__(cls, *args, **kwargs):
+        new_cls = super(RuleDescriptor, cls).__new__(cls, *args, **kwargs)
+        new_cls.id = '%s.%s' % (new_cls.__module__, new_cls.__name__)
+        return new_cls
+
+
+class RuleBase(object):
+    label = None
+    form_cls = None
+
+    __metaclass__ = RuleDescriptor
+
+    def __init__(self, project, data=None):
+        self.project = project
+        self.data = data or {}
+
+    def get_option(self, key):
+        return self.data.get(key)
+
+    def render_label(self):
+        return self.label.format(**self.data)
+
+    def render_form(self):
+        if not self.form_cls:
+            return self.label
+
+        form = self.form_cls(
+            self.data,
+        )
+
+        def replace_field(match):
+            field = match.group(1)
+            return unicode(form[field])
+
+        return mark_safe(re.sub(r'{([^}]+)}', replace_field, escape(self.label)))
+
+    def validate_form(self):
+        if not self.form_cls:
+            return True
+
+        form = self.form_cls(
+            self.data,
+        )
+
+        return form.is_valid()
diff --git a/src/sentry/rules/conditions/__init__.py b/src/sentry/rules/conditions/__init__.py
new file mode 100644
index 0000000000..0275fe9aa9
--- /dev/null
+++ b/src/sentry/rules/conditions/__init__.py
@@ -0,0 +1,11 @@
+"""
+sentry.rules.conditions
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from .base import *  # NOQA
diff --git a/src/sentry/rules/conditions/base.py b/src/sentry/rules/conditions/base.py
new file mode 100644
index 0000000000..d46d13cf6f
--- /dev/null
+++ b/src/sentry/rules/conditions/base.py
@@ -0,0 +1,16 @@
+"""
+sentry.rules.conditions.base
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from sentry.rules.base import RuleBase
+
+
+class EventCondition(RuleBase):
+    rule_type = 'condition/event'
+
+    def passes(self, event, is_new, is_regression, **kwargs):
+        raise NotImplementedError
diff --git a/src/sentry/rules/conditions/first_seen_event.py b/src/sentry/rules/conditions/first_seen_event.py
new file mode 100644
index 0000000000..cbb6678784
--- /dev/null
+++ b/src/sentry/rules/conditions/first_seen_event.py
@@ -0,0 +1,18 @@
+"""
+sentry.rules.conditions.first_seen_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class FirstSeenEventCondition(EventCondition):
+    label = 'An event is first seen'
+
+    def passes(self, event, is_new, **kwargs):
+        return is_new
diff --git a/src/sentry/rules/conditions/regression_event.py b/src/sentry/rules/conditions/regression_event.py
new file mode 100644
index 0000000000..cfcfe0e78f
--- /dev/null
+++ b/src/sentry/rules/conditions/regression_event.py
@@ -0,0 +1,18 @@
+"""
+sentry.rules.conditions.regression_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class RegressionEventCondition(EventCondition):
+    label = 'An event changes state from resolved to unresolved'
+
+    def passes(self, event, is_regression, **kwargs):
+        return is_regression
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
new file mode 100644
index 0000000000..75e2e6add2
--- /dev/null
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -0,0 +1,83 @@
+"""
+sentry.rules.conditions.tagged_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django import forms
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class MatchType(object):
+    EQUAL = 'eq'
+    NOT_EQUAL = 'ne'
+    STARTS_WITH = 'sw'
+    ENDS_WITH = 'ew'
+    CONTAINS = 'co'
+    NOT_CONTAINS = 'nc'
+
+
+class TaggedEventForm(forms.Form):
+    key = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'key'}))
+    match = forms.ChoiceField(choices=(
+        (MatchType.EQUAL, 'equals'),
+        (MatchType.NOT_EQUAL, 'does not equal'),
+        (MatchType.STARTS_WITH, 'starts with'),
+        (MatchType.ENDS_WITH, 'ends with'),
+        (MatchType.CONTAINS, 'contains'),
+        (MatchType.NOT_CONTAINS, 'does not contain'),
+    ))
+    value = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'value'}))
+
+
+class TaggedEventCondition(EventCondition):
+    form_cls = TaggedEventForm
+    label = 'An events tags match {key} {match} {value}'
+
+    def passes(self, event, is_regression, **kwargs):
+        key = self.get_option('key')
+        match = self.get_option('match')
+        value = self.get_option('value')
+
+        tags = (v for k, v in event.get_tags() if k == key)
+
+        if match == MatchType.EQUAL:
+            for t_value in tags:
+                if t_value == value:
+                    return True
+            return False
+
+        elif match == MatchType.NOT_EQUAL:
+            for t_value in tags:
+                if t_value == value:
+                    return False
+            return True
+
+        elif match == MatchType.STARTS_WITH:
+            for t_value in tags:
+                if t_value.startswith(value):
+                    return True
+            return False
+
+        elif match == MatchType.ENDS_WITH:
+            for t_value in tags:
+                if t_value.endswith(value):
+                    return True
+            return False
+
+        elif match == MatchType.CONTAINS:
+            for t_value in tags:
+                if value in t_value:
+                    return True
+            return False
+
+        elif match == MatchType.NOT_CONTAINS:
+            for t_value in tags:
+                if value in t_value:
+                    return False
+            return True
diff --git a/src/sentry/rules/registry.py b/src/sentry/rules/registry.py
new file mode 100644
index 0000000000..478d8164fd
--- /dev/null
+++ b/src/sentry/rules/registry.py
@@ -0,0 +1,24 @@
+"""
+sentry.rules.registry
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from collections import defaultdict
+
+
+class RuleRegistry(object):
+    def __init__(self):
+        self._rules = defaultdict(list)
+
+    def __iter__(self):
+        for rule_type, rule_list in self._rules.iteritems():
+            for rule in rule_list:
+                yield rule_type, rule
+
+    def add(self, rule):
+        self._rules[rule.rule_type].append(rule)
diff --git a/src/sentry/static/sentry/less/rules.less b/src/sentry/static/sentry/less/rules.less
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 57be8f33fe..d87104c0a8 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -2181,6 +2181,37 @@ table.vars {
   }
 }
 
+.table tbody tr {
+  &.success > td {
+    background-color: @successBackground;
+  }
+  &.error > td {
+    background-color: @errorBackground;
+  }
+  &.warning > td {
+    background-color: @warningBackground;
+  }
+  &.info > td {
+    background-color: @infoBackground;
+  }
+}
+
+// Hover states for .table-hover
+.table-hover tbody tr {
+  &.success:hover > td {
+    background-color: darken(@successBackground, 5%);
+  }
+  &.error:hover > td {
+    background-color: darken(@errorBackground, 5%);
+  }
+  &.warning:hover > td {
+    background-color: darken(@warningBackground, 5%);
+  }
+  &.info:hover > td {
+    background-color: darken(@infoBackground, 5%);
+  }
+}
+
 .nav-tabs {
   border-bottom: 1px solid #dee3e9;
   > li {
@@ -2538,6 +2569,19 @@ table.vars {
   padding: 4px 10px;
 }
 
+.rule-list {
+  list-style: none;
+  li {
+    line-height: 30px;
+    input[type=number] {
+      border-width: 0 0 1px;
+      width: 50px;
+      .border-radius(0);
+      .box-shadow(none);
+    }
+  }
+}
+
 #flotTip {
   background-color: @tooltipBackground;
   .border-radius(@baseBorderRadius);
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index 6dc3bc8167..4af59f5d99 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -633,6 +633,209 @@
 
     });
 
+
+    app.NewProjectRulePage = BasePage.extend({
+
+        initialize: function(data){
+            var select2_options = {
+                width: 'element',
+                allowClear: false,
+                minimumResultsForSearch: 10
+            };
+
+            BasePage.prototype.initialize.apply(this, arguments);
+
+            _.bindAll(this, 'addAction', 'addCondition', 'parseFormData');
+
+            this.actions_by_id = {};
+            this.conditions_by_id = {};
+            this.el = $(data.el);
+            this.action_sel = this.el.find('select[id="action-select"]');
+            this.action_table = this.el.find('table.action-list');
+            this.action_table_body = this.action_table.find('tbody');
+            this.condition_sel = this.el.find('select[id="condition-select"]');
+            this.condition_table = this.el.find('table.condition-list');
+            this.condition_table_body = this.condition_table.find('tbody');
+
+            this.action_sel.empty();
+            this.action_sel.append($('<option></option>'));
+            $.each(data.actions, _.bind(function(_, action) {
+                var opt = $('<option></option>');
+                opt.attr({
+                    value: action.id
+                });
+                opt.text(action.label);
+                opt.appendTo(this.action_sel);
+
+                this.actions_by_id[action.id] = action;
+            }, this));
+
+            this.condition_sel.empty();
+            this.condition_sel.append($('<option></option>'));
+            $.each(data.conditions, _.bind(function(_, condition) {
+                var opt = $('<option></option>');
+                opt.attr({
+                    value: condition.id
+                });
+                opt.text(condition.label);
+                opt.appendTo(this.condition_sel);
+
+                this.conditions_by_id[condition.id] = condition;
+            }, this));
+
+            this.action_sel.select2(select2_options);
+            this.condition_sel.select2(select2_options);
+
+            this.action_sel.change(_.bind(function(){
+                this.addAction(this.action_sel.val());
+            }, this));
+            this.condition_sel.change(_.bind(function(){
+                this.addCondition(this.condition_sel.val());
+            }, this));
+
+            this.parseFormData(data.form_data, data.form_errors);
+        },
+
+        parseFormData: function(form_data, form_errors) {
+            // start by parsing into condition/action bits
+            var data = {
+                    action: {},
+                    action_match: form_data.action_match || 'all',
+                    condition: {},
+                    label: form_data.label || ''
+                };
+
+            form_errors = form_errors || {};
+
+            $.each(form_data, function(key, value){
+                var matches = key.match(/^(condition|action)\[(\d+)\]\[(.+)\]$/);
+                var type, num;
+                if (!matches) {
+                    return;
+                }
+                type = matches[1];
+                num = matches[2];
+                if (data[type][num] === undefined) {
+                    data[type][num] = {};
+                }
+                data[type][num][matches[3]] = value;
+            });
+
+            this.el.find('input[name=label]').val(data.label);
+            this.el.find('select[name="action_match"]').val(data.action_match);
+
+            $.each(_.sortBy(data.condition), _.bind(function(num, item){
+                this.addCondition(item.id, item, form_errors['condition[' + num + ']'] || false);
+            }, this));
+            $.each(_.sortBy(data.action), _.bind(function(num, item){
+                this.addAction(item.id, item, form_errors['action[' + num + ']'] || false);
+            }, this));
+        },
+
+        addCondition: function(id, options, has_errors) {
+            var node = this.conditions_by_id[id],
+                row = $('<tr></tr>'),
+                remove_btn = $('<button class="btn btn-small">Remove</button>'),
+                num = this.condition_table_body.find('tr').length,
+                html = $('<div>' + node.html + '</div>'),
+                prefix = 'condition[' + num + ']',
+                id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
+
+            has_errors = has_errors || false;
+            options = options || {};
+
+            if (has_errors) {
+                row.addClass('error');
+            }
+
+            html.find('select').each(function(){
+                var $this = $(this),
+                    options = {
+                        width: 'element',
+                        allowClear: false,
+                        minimumResultsForSearch: 10
+                    };
+
+                if ($this.attr('data-allowClear')) {
+                    options.allowClear = $this.attr('data-allowClear');
+                }
+
+                $this.select2(options);
+            });
+
+            // we need to update the id of all form elements
+            html.find('input, select, textarea').each(function(_, el){
+                var $el = $(el),
+                    name = $el.attr('name');
+                $el.attr('name', prefix + '[' + name + ']');
+                $el.val(options[name] || '');
+            });
+            row.append($('<td></td>').append(html).append(id_field));
+            row.append($('<td></td>').append(remove_btn));
+            row.appendTo(this.condition_table_body);
+
+            remove_btn.click(function(){
+                row.remove();
+                return false;
+            });
+
+            this.condition_sel.data("select2").clear();
+            this.condition_table.show();
+        },
+
+        addAction: function(id, options, has_errors) {
+            var node = this.actions_by_id[id],
+                row = $('<tr></tr>'),
+                remove_btn = $('<button class="btn btn-small">Remove</button>'),
+                num = this.action_table_body.find('tr').length,
+                html = $('<div>' + node.html + '</div>'),
+                prefix = 'action[' + num + ']',
+                id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
+
+            has_errors = has_errors || false;
+            options = options || {};
+
+            if (has_errors) {
+                row.addClass('error');
+            }
+
+            html.find('select').each(function(){
+                var $this = $(this),
+                    options = {
+                        width: 'element',
+                        allowClear: false,
+                        minimumResultsForSearch: 10
+                    };
+
+                if ($this.attr('data-allowClear')) {
+                    options.allowClear = $this.attr('data-allowClear');
+                }
+
+                $this.select2(options);
+            });
+
+            // we need to update the id of all form elements
+            html.find('input, select, textarea').each(function(_, el){
+                var $el = $(el),
+                    name = $el.attr('name');
+                $el.attr('name', prefix + '[' + name + ']');
+                $el.val(options[name] || '');
+            });
+            row.append($('<td></td>').append(html).append(id_field));
+            row.append($('<td></td>').append(remove_btn));
+            row.appendTo(this.action_table_body);
+
+            remove_btn.click(function(){
+                row.remove();
+                return false;
+            });
+
+            this.action_sel.data("select2").clear();
+            this.action_table.show();
+        }
+
+    });
+
     Backbone.sync = function(method, model, success, error){
         success();
     };
diff --git a/src/sentry/static/sentry/scripts/global.min.js b/src/sentry/static/sentry/scripts/global.min.js
index 978c37125a..7a1079c084 100644
--- a/src/sentry/static/sentry/scripts/global.min.js
+++ b/src/sentry/static/sentry/scripts/global.min.js
@@ -1,2 +1,3 @@
-app=window.app={config:{},templates:{},utils:{}};(function(app,Backbone){"use strict";app.models={};app.models.Group=Backbone.Model.extend({defaults:{count:0,version:0,annotations:[],tags:[],versions:[],hasSeen:false,isBookmarked:false,historicalData:[]}})})(app,Backbone);(function(app){"use strict";app.templates={group:""+'<div class="count" data-count="<%= app.utils.formatNumber(count) %>">'+'<span title="<%= count %>"><%= app.utils.formatNumber(count) %></span>'+"</div>"+'<div class="details">'+'<h3><a href="<%= permalink %>"><%= title %></a></h3>'+'<p class="message">'+"<%= message %>"+"</p>"+'<div class="meta">'+"<% $.each(annotations, function(_, tag) { %>"+'<span class="tag annotation" data-tag="<%= tag.label %>" data-count="<%= app.utils.formatNumber(tag.count) %>">'+"<i><%= tag.label %></i>"+'<span title="<%= count %>"><%= app.utils.formatNumber(tag.count) %></span>'+"</span>"+"<% }) %>"+'<span class="last-seen pretty-date"></span>'+"<% if (timeSpent) { %>"+'<span class="tag time-spent"><%= Math.round(timeSpent) %>ms</span>'+"<% } %>"+'<span class="tag tag-project">'+'<a href="<%= projectUrl %>"><%= project.name %></a>'+"</span>"+'<span class="tag tag-logger">'+'<a href="<%= loggerUrl %>"><%= logger %></a>'+"</span>"+"<% _.each(versions, function(version){ %> "+'<span class="tag tag-version"><%= version %></span>'+"<% }) %>"+"<% _.each(tags, function(tag){ %> "+'<span class="tag"><%= tag %></span>'+"<% }) %>"+"</div>"+'<span class="sparkline"></span>'+'<ul class="actions">'+"<% if (canResolve) { %>"+"<li>"+'<a href="#" data-action="resolve">'+'<i aria-hidden="true" class="icon-checkmark"></i>'+"</a>"+"</li>"+"<li>"+'<a href="#" data-action="bookmark" class="bookmark" title="Bookmark">'+'<i aria-hidden="true" class="icon-star"></i>'+"</a>"+"</li>"+"<% } %>"+"</ul>"+"</div>"}})(app);(function(app,jQuery,_,moment){"use strict";var $=jQuery;var number_formats=[[1e9,"b"],[1e6,"m"],[1e3,"k"]];app.utils={getQueryParams:function(){var vars={},href=window.location.href,hashes,hash;if(href.indexOf("?")==-1)return vars;hashes=href.slice(href.indexOf("?")+1,href.indexOf("#")!=-1?href.indexOf("#"):href.length).split("&");$.each(hashes,function(_,chunk){hash=chunk.split("=");if(!hash[0]&&!hash[1])return;vars[decodeURIComponent(hash[0])]=hash[1]?decodeURIComponent(hash[1]).replace(/\+/," "):""});return vars},floatFormat:function(number,places){var multi=Math.pow(10,places);return parseInt(number*multi,10)/multi},formatNumber:function(number){var b,x,y,o,p;number=parseInt(number,10);for(var i=0;b=number_formats[i];i++){x=b[0];y=b[1];o=Math.floor(number/x);p=number%x;if(o>0){if(o/10>1||!p)return""+o+y;return""+this.floatFormat(number/x,1)+y}}return""+number},slugify:function(str){str=str.replace(/^\s+|\s+$/g,"");str=str.toLowerCase();var from="àáäâèéëêìíïîòóöôùúüûñç·/_,:;";var to="aaaaeeeeiiiioooouuuunc------";for(var i=0,l=from.length;i<l;i++){str=str.replace(new RegExp(from.charAt(i),"g"),to.charAt(i))}str=str.replace(/[^a-z0-9\s\-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-");return str},varToggle:function(link,$elm){var $link=$(link);if(!$link.attr("data-expand-label"))$link.attr("data-expand-label",$link.html());$elm.toggle();if($elm.is(":visible"))$link.html($link.attr("data-collapse-label"));else $link.html($link.attr("data-expand-label"))},getSearchUsersUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/users/search/"},getSearchProjectsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/projects/search/"},getSearchTagsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/tags/search/"},makeSearchableInput:function(el,url,callback){$(el).select2({allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},ajax:{url:url,dataType:"json",data:function(term,page){return{query:term,limit:10}},results:function(data,page){var results=callback(data);return{results:callback(data)}}}})},escape:function(str){return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},makeSearchableUsersInput:function(el){this.makeSearchableInput(el,this.getSearchUsersUrl(),_.bind(function(data){var results=[];$(data.results).each(_.bind(function(_,val){var label;if(val.first_name){label=this.escape(val.first_name)+" &mdash; "+this.escape(val.username)}else{label=this.escape(val.username)}label+="<br>"+this.escape(val.email);results.push({id:val.username,text:label})},this));if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:this.escape(data.query),text:this.escape(data.query)})}return results},this))},makeSearchableProjectsInput:function(el){this.makeSearchableInput(el,this.getSearchProjectsUrl(),function(data){var results=[];$(data.results).each(function(_,val){results.push({id:val.slug,text:val.name+"<br>"+val.slug})});return results})},makeSearchableTagsInput:function(el,options){var $el=$(el);$el.select2({multiple:true,tokenSeperators:[","],minimumInputLength:3,allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);var values=$el.val().split(",");var results=[];$.each(values,function(_,val){results.push({id:val,text:val})});callback(results)},ajax:{url:this.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$el.data("tag"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:val,text:val})});if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:data.query,text:data.query})}return{results:results}}}})}};$(function(){$(".body select").each(function(){var $this=$(this),options={width:"element",allowClear:false};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});setInterval(function(){$(".pretty-date").each(function(_,el){var $el=$(el);var dt=$el.data("datetime");if(dt){var date=moment(dt);if(date){$el.text(date.fromNow());$el.attr("title",date.format("llll"))}}})},5e3)});$.fn.select2.defaults.escapeMarkup=function(s){return s}})(app,jQuery,_,moment);(function(app,Backbone){"use strict";app.ScoredList=Backbone.Collection.extend({comparator:function(member){return-member.get("score")}})})(app,Backbone);(function(app,Backbone,jQuery,moment){"use strict";var $=jQuery;app.charts={render:function(el,options){var $el=$("#chart");var url=$el.attr("data-api-url");var title=$(el).attr("data-title");var $spark=$el.find(".sparkline");$spark.height($el.height());$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:$el.attr("data-days")||7,gid:$el.attr("data-group")||undefined},success:function(resp){var data=[],maxval=10;$spark.empty();$.each(resp,function(_,val){var date=new Date(val[0]);data.push({y:val[1],label:moment(date).fromNow()});if(val[1]>maxval){maxval=val[1]}});app.charts.createSparkline($spark,data,options)}})},createSparkline:function(el,points,options){var $el=$(el),existing=$el.children(),maxval=10,title,point,pct,child,point_width;if(options===undefined){options={}}for(var i=0;i<points.length;i++){point=points[i];if(typeof point==="number"){point=points[i]={y:point}}if(point.y>maxval){maxval=point.y}}point_width=app.utils.floatFormat(100/points.length,2)+"%";for(i=0;i<points.length;i++){point=points[i];pct=app.utils.floatFormat(point.y/maxval*99,2)+"%";title=point.y+" events";if(point.label){title=title+"<br>("+point.label+")"}if(existing.get(i)===undefined){$('<a style="width:'+point_width+';" rel="tooltip" title="'+title+'"><span style="height:'+pct+'">'+point.y+"</span></a>").tooltip({placement:options.placement||"bottom",html:true,container:"body"}).appendTo($el)}else{$(existing[i]).find("span").css("height",pct).text(point.y).attr("title",point.label||point.y)}}}}})(app,Backbone,jQuery,moment);(function(window,app,Backbone,jQuery,_,moment){"use strict";var $=jQuery;app.GroupView=Backbone.View.extend({tagName:"li",className:"group",template:_.template(app.templates.group),initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments);_.bindAll(this,"updateCount","updateAllAnnotations","updateAnnotation","updateLastSeen","updateResolved","updateHasSeen","renderSparkline","updateBookmarked","render");this.model.on({"change:count":this.updateCount,"change:annotations":this.updateAllAnnotations,"change:lastSeen":this.updateLastSeen,"change:isBookmarked":this.updateBookmarked,"change:isResolved":this.updateResolved,"change:hasSeen":this.updateHasSeen,"change:historicalData":this.renderSparkline},this)},render:function(){var data=this.model.toJSON();data.projectUrl=app.config.urlPrefix+"/"+app.config.teamId+"/"+data.project.slug+"/";data.loggerUrl=data.projectUrl+"?logger="+data.logger;this.$el.html(this.template(data));this.$el.attr("data-id",this.model.id);this.$el.addClass(this.getLevelClassName());this.$el.find("a[data-action=resolve]").click(_.bind(function(e){e.preventDefault();if(this.model.get("isResolved")){this.unresolve()}else{this.resolve()}},this));this.$el.find("a[data-action=bookmark]").click(_.bind(function(e){e.preventDefault();this.bookmark()},this));this.updateLastSeen();this.renderSparkline();this.updateResolved();this.updateHasSeen();this.updateBookmarked()},updateBookmarked:function(){if(this.model.get("isBookmarked")){this.$el.find("a[data-action=bookmark]").addClass("checked")}else{this.$el.find("a[data-action=bookmark]").removeClass("checked")}},updateResolved:function(){if(this.model.get("isResolved")){this.$el.addClass("resolved")}else{this.$el.removeClass("resolved")}},updateHasSeen:function(){if(this.model.get("hasSeen")){this.$el.addClass("seen")}else{this.$el.removeClass("seen")}},renderSparkline:function(obj){var data=this.model.get("historicalData");if(!data||!data.length)return;this.$el.addClass("with-sparkline");app.charts.createSparkline(this.$el.find(".sparkline"),data)},resolve:function(){$.ajax({url:this.getResolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isResolved",true)},this)})},unresolve:function(){$.ajax({url:this.getUnresolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isResolved",false)},this)})},getResolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/resolved/"},getUnresolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/unresolved/"},getBookmarkUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/bookmark/"},bookmark:function(){$.ajax({url:this.getBookmarkUrl(),type:"post",dataType:"json",data:{gid:this.model.get("id")},success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isBookmarked",response.isBookmarked)},this)})},getLevelClassName:function(){return"level-"+this.model.get("levelName")},updateLastSeen:function(){var dt=moment(this.model.get("lastSeen"));this.$el.find(".last-seen").text(dt.fromNow()).data("datetime",this.model.get("lastSeen")).attr("title",dt.format("llll"))},updateCount:function(){var new_count=app.utils.formatNumber(this.model.get("count"));var counter=this.$el.find(".count");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAnnotation:function(annotation){var value=annotation.count;if(value===null)return;var new_count=app.utils.formatNumber(value);var counter=this.$el.find('.annotation[data-tag="'+annotation.label+'"]');var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAllAnnotations:function(){var self=this;$.each(this.model.get("annotations"),function(index,annotation){self.updateAnnotation(annotation)})}});app.OrderedElementsView=Backbone.View.extend({emptyMessage:'<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',loadingMessage:"<p>Loading...</p>",model:app.models.Group,defaults:{maxItems:50,view:Backbone.View},initialize:function(data){if(_.isUndefined(data))data={};var members=data.members;Backbone.View.prototype.initialize.apply(this,arguments);this.options=$.extend({},this.defaults,this.options,data);this.$wrapper=$("#"+this.id);this.$parent=$("<ul></ul>");this.$empty=$('<li class="empty"></li>');this.$wrapper.html(this.$parent);if(this.options.className)this.$parent.addClass(this.options.className);_.bindAll(this,"renderMemberInContainer","unrenderMember","reSortMembers");this.collection=new app.ScoredList([],{model:data.model});this.collection.on("add",this.renderMemberInContainer,this);this.collection.on("remove",this.unrenderMember,this);this.collection.on("reset",this.reSortMembers,this);delete data.members;this.reset(members)},reset:function(members){this.$parent.empty();this.setEmpty();if(members===undefined){this.$empty.html(this.loadingMessage);this.collection.reset();this.setEmpty();this.loaded=false}else{this.$empty.html(this.emptyMessage);this.collection.reset(members);this.loaded=true}},setEmpty:function(){this.$parent.html(this.$empty)},extend:function(data){for(var i=0;i<data.length;i++){this.addMember(data[i])}},addMember:function(member){if(!this.hasMember(member)){if(this.collection.length>=this.options.maxItems){if(member.score<this.collection.last().get("score"))return;while(this.collection.length>=this.options.maxItems)this.collection.pop()}}this.collection.add(member,{merge:true})},reSortMembers:function(){this.collection.each(_.bind(function(member){this.renderMemberInContainer(member)},this))},updateMember:function(member,options){if(_.isUndefined(options))options={};var existing=this.collection.get(member.id);if(existing.get("version")>member.get("version"))return;this.collection.add(member,{merge:true,sort:options.sort!==false?true:false})},hasMember:function(member){return this.collection.get(member.id)?true:false},removeMember:function(member){this.collection.remove(member)},renderMemberInContainer:function(member){var new_pos=this.collection.indexOf(member),$el,$rel;this.$parent.find("li.empty").remove();$el=$("#"+this.id+member.id);if(!$el.length){$el=this.renderMember(member)}else if($el.index()===new_pos){return}if(new_pos===0){this.$parent.prepend($el)}else{$rel=$("#"+this.id+this.collection.at(new_pos).id);if(!$rel.length){this.$parent.append($el)}else if($el.id!==$rel.id){$el.insertBefore($rel)}else{return}}if(this.loaded)$el.css("background-color","#eee").animate({backgroundColor:"#fff"},300)},renderMember:function(member){var view=new this.options.view({model:member,id:this.id+member.id});view.render();return view.$el},unrenderMember:function(member){this.$parent.find("#"+this.id+member.id).remove();if(!this.$parent.find("li").length)this.setEmpty()}});app.GroupListView=app.OrderedElementsView.extend({defaults:{realtime:false,stream:false,pollUrl:null,pollTime:1e3,tickTime:100},initialize:function(data){if(_.isUndefined(data))data={};data.model=app.models.Group;data.view=app.GroupView;app.OrderedElementsView.prototype.initialize.call(this,data);this.options=$.extend({},this.defaults,this.options,data);this.queue=new app.ScoredList([],{model:data.model});this.cursor=null;_.bindAll(this,"poll","pollSuccess","pollFailure","tick");this.poll();window.setInterval(this.tick,this.options.tickTime)},tick:function(){if(!this.queue.length)return;var item=this.queue.pop();if(this.options.canStream){this.addMember(item)}else if(this.hasMember(item)){this.updateMember(item,{sort:false})}},pollSuccess:function(groups){if(!groups.length)return window.setTimeout(this.poll,this.options.pollTime*5);this.cursor=groups[groups.length-1].score;this.queue.add(groups,{merge:true});window.setTimeout(this.poll,this.options.pollTime)},pollFailure:function(jqXHR,textStatus,errorThrown){window.setTimeout(this.poll,this.options.pollTime*10)},poll:function(){var data;if(!this.options.realtime||!this.options.pollUrl)return window.setTimeout(this.poll,this.options.pollTime);data=app.utils.getQueryParams();data.cursor=this.cursor||undefined;$.ajax({url:this.options.pollUrl,type:"GET",dataType:"json",data:data,success:this.pollSuccess,error:this.pollFailure})}})})(window,app,Backbone,jQuery,_,moment);(function(window,app,Backbone,jQuery,_){"use strict";var $=jQuery;var BasePage=Backbone.View.extend({defaults:{canStream:false,realtime:false},initialize:function(data){Backbone.View.prototype.initialize.apply(this,arguments);if(_.isUndefined(data))data={};this.options=$.extend({},this.defaults,this.options,data);this.views={};this.initializeAjaxTabs()},initializeAjaxTabs:function(){$("a[data-toggle=ajtab]").click(_.bind(function(e){var $tab=$(e.target),uri=$tab.attr("data-uri"),view_id=$tab.attr("href").substr(1),view=this.getView(view_id,uri),$cont,$parent;e.preventDefault();if(!uri)return view.reset();$cont=$("#"+view_id);$parent=$cont.parent();$parent.css("opacity",.6);$.ajax({url:uri,dataType:"json",success:function(data){view.reset(data);$parent.css("opacity",1);$tab.tab("show")},error:function(){$cont.html("<p>There was an error fetching data from the server.</p>")}})},this));$("li.active a[data-toggle=ajtab]").click()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list small",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},getView:function(id,uri){if(!this.views[id])this.views[id]=this.makeDefaultView(id);var view=this.views[id];view.options.pollUrl=uri;return view}});app.StreamPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:data.groups,maxItems:50,realtime:$.cookie("pausestream")?false:true,canStream:this.options.canStream,pollUrl:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/poll/",model:app.models.Group});this.control=$("a[data-action=pause]");this.updateStreamOptions();this.initFilters();this.control.click(_.bind(function(e){e.preventDefault();this.options.realtime=this.group_list.options.realtime=this.control.hasClass("realtime-pause");this.updateStreamOptions()},this));$("#chart").height("50px");app.charts.render("#chart",{placement:"left"})},initFilters:function(){$(".filter").each(_.bind(function(_,el){var $filter=$(el);var $input=$filter.find("input[type=text]");if($input.length>0){$input.select2({initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},allowClear:true,minimumInputLength:3,ajax:{url:app.utils.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$input.attr("name"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:app.utils.escape(val),text:app.utils.escape(val)})});return{results:results}}}})}else{$input=$filter.find("select").select2({allowClear:true})}if($input.length>0){$input.on("change",function(e){var query=app.utils.getQueryParams();query[e.target.name]=e.val;window.location.href="?"+$.param(query)})}},this))},updateStreamOptions:function(){if(this.options.realtime){$.removeCookie("pausestream");this.control.removeClass("realtime-pause");this.control.addClass("realtime-play");this.control.html(this.control.attr("data-pause-label"))}else{$.cookie("pausestream","1",{expires:7});this.control.addClass("realtime-pause");this.control.removeClass("realtime-play");this.control.html(this.control.attr("data-play-label"))}}});app.DashboardPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);$("#chart").height("150px");Sentry.charts.render("#chart")}});app.SelectTeamPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);this.refreshSparklines();$(window).on("resize",this.refreshSparklines)},refreshSparklines:function(){$(".chart").each(function(n,el){var $el=$(el);$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:1},success:_.bind(function(data){$.plot($el,[{data:data,color:"#ebeff3",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,color:"#f6f8fa"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})})}});app.GroupDetailsPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:[data.group],model:app.models.Group});$("#chart").height("150px");Sentry.charts.render("#chart");$("#public-status .action").click(function(){var $this=$(this);$.ajax({url:$this.attr("data-api-url"),type:"post",success:function(group){var selector=group.isPublic?"true":"false";var nselector=group.isPublic?"false":"true";$('#public-status span[data-public="'+selector+'"]').show();$('#public-status span[data-public="'+nselector+'"]').hide()},error:function(){window.alert("There was an error changing the public status")}})});$(".add-note-btn").click(function(e){var $el=$(this);e.preventDefault();if($el.hasClass("selected")){$el.removeClass("selected");$(".add-note-form",$el.parent()).addClass("hide")}else{$el.addClass("selected");$(".add-note-form",$el.parent()).removeClass("hide")}});var $event_nav=$("#event_nav");if($event_nav.length>0){var $window=$(window);var $nav_links=$event_nav.find("a[href*=#]");var $nav_targets=[];var scroll_offset=$event_nav.offset().top;var event_nav_height;var last_target;$window.resize(function(){event_nav_height=$event_nav.find(".nav").outerHeight();$event_nav.height(event_nav_height+"px")}).resize();$nav_links.click(function(e){var $el=$(this);var target=$(this.hash);$el.parent().addClass("active").siblings().removeClass("active");$("html,body").animate({scrollTop:target.position().top+event_nav_height},"fast");if(history.pushState){history.pushState({},"",this.hash)}e.preventDefault()}).each(function(){if(this.hash.length>1&&$(this.hash).length){$nav_targets.push(this.hash)}});var resizeTimer;$window.scroll(function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){if($window.scrollTop()>scroll_offset){if(!$event_nav.hasClass("fixed")){$event_nav.addClass("fixed")}}else if($event_nav.hasClass("fixed")){$event_nav.removeClass("fixed")}if($nav_targets.length){var from_top=$window.scrollTop()+event_nav_height+20;var cur=$.map($nav_targets,function(hash){if($(hash).offset().top<from_top){return hash}});var target=cur?cur[cur.length-1]:null;if(!target){target=$nav_targets[0]}if(last_target!==target){last_target=target;$nav_links.parent().removeClass("active").end().filter("[href="+target+"]").parent().addClass("active")}}},1)}).scroll()}}});app.WallPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,{realtime:true,pollTime:3e3});this.sparkline=$(".chart");this.sparkline.height(this.sparkline.parent().height());this.stats=$("#stats");_.bindAll(this,"refreshStats");this.refreshSparkline();this.refreshStats()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},refreshSparkline:function(){$.ajax({url:this.sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{days:1,gid:this.sparkline.attr("data-group")||undefined},success:_.bind(function(data){$.plot(this.sparkline,[{data:data,color:"#52566c",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,fillColor:"#232428"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})},refreshStats:function(){$.ajax({url:this.stats.attr("data-uri"),dataType:"json",success:_.bind(function(data){this.stats.find("[data-stat]").each(function(){var $this=$(this);var new_count=data[$this.attr("data-stat")];var counter=$this.find("big");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")});window.setTimeout(this.refreshStats,1e3)},this)})}});app.AddTeamMemberPage=BasePage.extend({});app.AccessGroupMembersPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=user]")}});app.AccessGroupProjectsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableProjectsInput("form input[name=project]")}});app.TeamDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]")}});app.ProjectDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]");$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),values=[],$value=$('<span class="value"></span>');var i=min;while(i<=max){values.push(i);if(i<12){i+=1}else if(i<24){i+=3}else if(i<36){i+=6}else if(i<48){i+=12}else{i+=24}}$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatHours(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatHours(data.value))},this)).simpleSlider({range:[min,max],step:step,allowedValues:values,snap:true})},this))},formatHours:function formatHours(val){val=parseInt(val,10);if(val===0){return"Disabled"}else if(val>23&&val%24===0){val=val/24;return val+" day"+(val!=1?"s":"")}return val+" hour"+(val!=1?"s":"")}});app.ProjectNotificationsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),$value=$('<span class="value"></span>');$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatThreshold(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatThreshold(data.value))},this)).simpleSlider({range:[min,max],step:step,snap:true})},this));$("#tag_list input").each(function(_,el){$(el).addClass("span6");app.utils.makeSearchableTagsInput(el)})},formatThreshold:function formatThreshold(value){if(!value){return"Disabled"}return value+"%"}});app.NewProjectPage=BasePage.extend({initialize:function(data){this.el=$(data.el);BasePage.prototype.initialize.apply(this,arguments);if(this.options.canSelectTeam&&this.options.canCreateTeam){$("#new_team").hide();$('a[rel="create-new-team"]').click(function(){$("#new_team").show();$("#select_team").hide()});$('a[rel="select-team"]').click(function(){$("#new_team").hide();$("#select_team").show()})}}});Backbone.sync=function(method,model,success,error){success()}})(window,app,Backbone,jQuery,_);
+app=window.app={config:{},templates:{},utils:{}};(function(app,Backbone){"use strict";app.models={};app.models.Group=Backbone.Model.extend({defaults:{count:0,version:0,annotations:[],tags:[],versions:[],hasSeen:false,isBookmarked:false,historicalData:[]}})})(app,Backbone);(function(app){"use strict";app.templates={group:""+'<div class="count" data-count="<%= app.utils.formatNumber(count) %>">'+'<span title="<%= count %>"><%= app.utils.formatNumber(count) %></span>'+"</div>"+'<div class="details">'+'<h3><a href="<%= permalink %>"><%= title %></a></h3>'+'<p class="message">'+"<%= message %>"+"</p>"+'<div class="meta">'+"<% $.each(annotations, function(_, tag) { %>"+'<span class="tag annotation" data-tag="<%= tag.label %>" data-count="<%= app.utils.formatNumber(tag.count) %>">'+"<i><%= tag.label %></i>"+'<span title="<%= count %>"><%= app.utils.formatNumber(tag.count) %></span>'+"</span>"+"<% }) %>"+'<span class="last-seen pretty-date"></span>'+"<% if (timeSpent) { %>"+'<span class="tag time-spent"><%= Math.round(timeSpent) %>ms</span>'+"<% } %>"+'<span class="tag tag-project">'+'<a href="<%= projectUrl %>"><%= project.name %></a>'+"</span>"+'<span class="tag tag-logger">'+'<a href="<%= loggerUrl %>"><%= logger %></a>'+"</span>"+"<% _.each(versions, function(version){ %> "+'<span class="tag tag-version"><%= version %></span>'+"<% }) %>"+"<% _.each(tags, function(tag){ %> "+'<span class="tag"><%= tag %></span>'+"<% }) %>"+"</div>"+'<span class="sparkline"></span>'+'<ul class="actions">'+"<% if (canResolve) { %>"+"<li>"+'<a href="#" data-action="resolve">'+'<i aria-hidden="true" class="icon-checkmark"></i>'+"</a>"+"</li>"+"<li>"+'<a href="#" data-action="bookmark" class="bookmark" title="Bookmark">'+'<i aria-hidden="true" class="icon-star"></i>'+"</a>"+"</li>"+"<% } %>"+"</ul>"+"</div>"}})(app);(function(app,jQuery,_,moment){"use strict";var $=jQuery;var number_formats=[[1e9,"b"],[1e6,"m"],[1e3,"k"]];app.utils={getQueryParams:function(){var vars={},href=window.location.href,hashes,hash;if(href.indexOf("?")==-1)return vars;hashes=href.slice(href.indexOf("?")+1,href.indexOf("#")!=-1?href.indexOf("#"):href.length).split("&");$.each(hashes,function(_,chunk){hash=chunk.split("=");if(!hash[0]&&!hash[1])return;vars[decodeURIComponent(hash[0])]=hash[1]?decodeURIComponent(hash[1]).replace(/\+/," "):""});return vars},floatFormat:function(number,places){var multi=Math.pow(10,places);return parseInt(number*multi,10)/multi},formatNumber:function(number){var b,x,y,o,p;number=parseInt(number,10);for(var i=0;b=number_formats[i];i++){x=b[0];y=b[1];o=Math.floor(number/x);p=number%x;if(o>0){if(o/10>1||!p)return""+o+y;return""+this.floatFormat(number/x,1)+y}}return""+number},slugify:function(str){str=str.replace(/^\s+|\s+$/g,"");str=str.toLowerCase();var from="àáäâèéëêìíïîòóöôùúüûñç·/_,:;";var to="aaaaeeeeiiiioooouuuunc------";for(var i=0,l=from.length;i<l;i++){str=str.replace(new RegExp(from.charAt(i),"g"),to.charAt(i))}str=str.replace(/[^a-z0-9\s\-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-");return str},varToggle:function(link,$elm){var $link=$(link);if(!$link.attr("data-expand-label"))$link.attr("data-expand-label",$link.html());$elm.toggle();if($elm.is(":visible"))$link.html($link.attr("data-collapse-label"));else $link.html($link.attr("data-expand-label"))},getSearchUsersUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/users/search/"},getSearchProjectsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/projects/search/"},getSearchTagsUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/tags/search/"},makeSearchableInput:function(el,url,callback){$(el).select2({allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},ajax:{url:url,dataType:"json",data:function(term,page){return{query:term,limit:10}},results:function(data,page){var results=callback(data);return{results:callback(data)}}}})},escape:function(str){return str.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},makeSearchableUsersInput:function(el){this.makeSearchableInput(el,this.getSearchUsersUrl(),_.bind(function(data){var results=[];$(data.results).each(_.bind(function(_,val){var label;if(val.first_name){label=this.escape(val.first_name)+" &mdash; "+this.escape(val.username)}else{label=this.escape(val.username)}label+="<br>"+this.escape(val.email);results.push({id:val.username,text:label})},this));if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:this.escape(data.query),text:this.escape(data.query)})}return results},this))},makeSearchableProjectsInput:function(el){this.makeSearchableInput(el,this.getSearchProjectsUrl(),function(data){var results=[];$(data.results).each(function(_,val){results.push({id:val.slug,text:val.name+"<br>"+val.slug})});return results})},makeSearchableTagsInput:function(el,options){var $el=$(el);$el.select2({multiple:true,tokenSeperators:[","],minimumInputLength:3,allowClear:true,width:"element",initSelection:function(el,callback){var $el=$(el);var values=$el.val().split(",");var results=[];$.each(values,function(_,val){results.push({id:val,text:val})});callback(results)},ajax:{url:this.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$el.data("tag"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:val,text:val})});if($(results).filter(function(){return this.id.localeCompare(data.query)===0}).length===0){results.push({id:data.query,text:data.query})}return{results:results}}}})}};$(function(){$(".body select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});setInterval(function(){$(".pretty-date").each(function(_,el){var $el=$(el);var dt=$el.data("datetime");if(dt){var date=moment(dt);if(date){$el.text(date.fromNow());$el.attr("title",date.format("llll"))}}})},5e3)});$.fn.select2.defaults.escapeMarkup=function(s){return s}})(app,jQuery,_,moment);(function(app,Backbone){"use strict";app.ScoredList=Backbone.Collection.extend({comparator:function(member){return-member.get("score")}})})(app,Backbone);(function(app,Backbone,jQuery,moment){"use strict";var $=jQuery;app.charts={render:function(el,options){var $el=$("#chart");var url=$el.attr("data-api-url");var title=$(el).attr("data-title");var $spark=$el.find(".sparkline");$spark.height($el.height());$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:$el.attr("data-days")||7,gid:$el.attr("data-group")||undefined},success:function(resp){var data=[],maxval=10;$spark.empty();$.each(resp,function(_,val){var date=new Date(val[0]);data.push({y:val[1],label:moment(date).fromNow()});if(val[1]>maxval){maxval=val[1]}});app.charts.createSparkline($spark,data,options)}})},createSparkline:function(el,points,options){var $el=$(el),existing=$el.children(),maxval=10,title,point,pct,child,point_width;if(options===undefined){options={}}for(var i=0;i<points.length;i++){point=points[i];if(typeof point==="number"){point=points[i]={y:point}}if(point.y>maxval){maxval=point.y}}point_width=app.utils.floatFormat(100/points.length,2)+"%";for(i=0;i<points.length;i++){point=points[i];pct=app.utils.floatFormat(point.y/maxval*99,2)+"%";title=point.y+" events";if(point.label){title=title+"<br>("+point.label+")"}if(existing.get(i)===undefined){$('<a style="width:'+point_width+';" rel="tooltip" title="'+title+'"><span style="height:'+pct+'">'+point.y+"</span></a>").tooltip({placement:options.placement||"bottom",html:true,container:"body"}).appendTo($el)}else{$(existing[i]).find("span").css("height",pct).text(point.y).attr("title",point.label||point.y)}}}}})(app,Backbone,jQuery,moment);(function(window,app,Backbone,jQuery,_,moment){"use strict";var $=jQuery;app.GroupView=Backbone.View.extend({tagName:"li",className:"group",template:_.template(app.templates.group),initialize:function(){Backbone.View.prototype.initialize.apply(this,arguments);_.bindAll(this,"updateCount","updateAllAnnotations","updateAnnotation","updateLastSeen","updateResolved","updateHasSeen","renderSparkline","updateBookmarked","render");this.model.on({"change:count":this.updateCount,"change:annotations":this.updateAllAnnotations,"change:lastSeen":this.updateLastSeen,"change:isBookmarked":this.updateBookmarked,"change:isResolved":this.updateResolved,"change:hasSeen":this.updateHasSeen,"change:historicalData":this.renderSparkline},this)},render:function(){var data=this.model.toJSON();data.projectUrl=app.config.urlPrefix+"/"+app.config.teamId+"/"+data.project.slug+"/";data.loggerUrl=data.projectUrl+"?logger="+data.logger;this.$el.html(this.template(data));this.$el.attr("data-id",this.model.id);this.$el.addClass(this.getLevelClassName());this.$el.find("a[data-action=resolve]").click(_.bind(function(e){e.preventDefault();if(this.model.get("isResolved")){this.unresolve()}else{this.resolve()}},this));this.$el.find("a[data-action=bookmark]").click(_.bind(function(e){e.preventDefault();this.bookmark()},this));this.updateLastSeen();this.renderSparkline();this.updateResolved();this.updateHasSeen();this.updateBookmarked()},updateBookmarked:function(){if(this.model.get("isBookmarked")){this.$el.find("a[data-action=bookmark]").addClass("checked")}else{this.$el.find("a[data-action=bookmark]").removeClass("checked")}},updateResolved:function(){if(this.model.get("isResolved")){this.$el.addClass("resolved")}else{this.$el.removeClass("resolved")}},updateHasSeen:function(){if(this.model.get("hasSeen")){this.$el.addClass("seen")}else{this.$el.removeClass("seen")}},renderSparkline:function(obj){var data=this.model.get("historicalData");if(!data||!data.length)return;this.$el.addClass("with-sparkline");app.charts.createSparkline(this.$el.find(".sparkline"),data)},resolve:function(){$.ajax({url:this.getResolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isResolved",true)},this)})},unresolve:function(){$.ajax({url:this.getUnresolveUrl(),type:"post",dataType:"json",success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isResolved",false)},this)})},getResolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/resolved/"},getUnresolveUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/group/"+this.model.get("id")+"/set/unresolved/"},getBookmarkUrl:function(){return app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/bookmark/"},bookmark:function(){$.ajax({url:this.getBookmarkUrl(),type:"post",dataType:"json",data:{gid:this.model.get("id")},success:_.bind(function(response){this.model.set("version",response.version);this.model.set("isBookmarked",response.isBookmarked)},this)})},getLevelClassName:function(){return"level-"+this.model.get("levelName")},updateLastSeen:function(){var dt=moment(this.model.get("lastSeen"));this.$el.find(".last-seen").text(dt.fromNow()).data("datetime",this.model.get("lastSeen")).attr("title",dt.format("llll"))},updateCount:function(){var new_count=app.utils.formatNumber(this.model.get("count"));var counter=this.$el.find(".count");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAnnotation:function(annotation){var value=annotation.count;if(value===null)return;var new_count=app.utils.formatNumber(value);var counter=this.$el.find('.annotation[data-tag="'+annotation.label+'"]');var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")},updateAllAnnotations:function(){var self=this;$.each(this.model.get("annotations"),function(index,annotation){self.updateAnnotation(annotation)})}});app.OrderedElementsView=Backbone.View.extend({emptyMessage:'<div class="empty-message"><h2>No events to show.</h2><p>We\'ll notify you if that changes. In the meantime why not take a moment to become more familiar with Sentry.</p><p class="links"><a href="docs/">Installation instructions</a> <a href="settings/">Project settings</a></p></div>',loadingMessage:"<p>Loading...</p>",model:app.models.Group,defaults:{maxItems:50,view:Backbone.View},initialize:function(data){if(_.isUndefined(data))data={};var members=data.members;Backbone.View.prototype.initialize.apply(this,arguments);this.options=$.extend({},this.defaults,this.options,data);this.$wrapper=$("#"+this.id);this.$parent=$("<ul></ul>");this.$empty=$('<li class="empty"></li>');this.$wrapper.html(this.$parent);if(this.options.className)this.$parent.addClass(this.options.className);_.bindAll(this,"renderMemberInContainer","unrenderMember","reSortMembers");this.collection=new app.ScoredList([],{model:data.model});this.collection.on("add",this.renderMemberInContainer,this);this.collection.on("remove",this.unrenderMember,this);this.collection.on("reset",this.reSortMembers,this);delete data.members;this.reset(members)},reset:function(members){this.$parent.empty();this.setEmpty();if(members===undefined){this.$empty.html(this.loadingMessage);this.collection.reset();this.setEmpty();this.loaded=false}else{this.$empty.html(this.emptyMessage);this.collection.reset(members);this.loaded=true}},setEmpty:function(){this.$parent.html(this.$empty)},extend:function(data){for(var i=0;i<data.length;i++){this.addMember(data[i])}},addMember:function(member){if(!this.hasMember(member)){if(this.collection.length>=this.options.maxItems){if(member.score<this.collection.last().get("score"))return;while(this.collection.length>=this.options.maxItems)this.collection.pop()}}this.collection.add(member,{merge:true})},reSortMembers:function(){this.collection.each(_.bind(function(member){this.renderMemberInContainer(member)},this))},updateMember:function(member,options){if(_.isUndefined(options))options={};var existing=this.collection.get(member.id);if(existing.get("version")>member.get("version"))return;this.collection.add(member,{merge:true,sort:options.sort!==false?true:false})},hasMember:function(member){return this.collection.get(member.id)?true:false},removeMember:function(member){this.collection.remove(member)},renderMemberInContainer:function(member){var new_pos=this.collection.indexOf(member),$el,$rel;this.$parent.find("li.empty").remove();$el=$("#"+this.id+member.id);if(!$el.length){$el=this.renderMember(member)}else if($el.index()===new_pos){return}if(new_pos===0){this.$parent.prepend($el)}else{$rel=$("#"+this.id+this.collection.at(new_pos).id);if(!$rel.length){this.$parent.append($el)}else if($el.id!==$rel.id){$el.insertBefore($rel)}else{return}}if(this.loaded)$el.css("background-color","#eee").animate({backgroundColor:"#fff"},300)},renderMember:function(member){var view=new this.options.view({model:member,id:this.id+member.id});view.render();return view.$el},unrenderMember:function(member){this.$parent.find("#"+this.id+member.id).remove();if(!this.$parent.find("li").length)this.setEmpty()}});app.GroupListView=app.OrderedElementsView.extend({defaults:{realtime:false,stream:false,pollUrl:null,pollTime:1e3,tickTime:100},initialize:function(data){if(_.isUndefined(data))data={};data.model=app.models.Group;data.view=app.GroupView;app.OrderedElementsView.prototype.initialize.call(this,data);this.options=$.extend({},this.defaults,this.options,data);this.queue=new app.ScoredList([],{model:data.model});this.cursor=null;_.bindAll(this,"poll","pollSuccess","pollFailure","tick");this.poll();window.setInterval(this.tick,this.options.tickTime)},tick:function(){if(!this.queue.length)return;var item=this.queue.pop();if(this.options.canStream){this.addMember(item)}else if(this.hasMember(item)){this.updateMember(item,{sort:false})}},pollSuccess:function(groups){if(!groups.length)return window.setTimeout(this.poll,this.options.pollTime*5);this.cursor=groups[groups.length-1].score;this.queue.add(groups,{merge:true});window.setTimeout(this.poll,this.options.pollTime)},pollFailure:function(jqXHR,textStatus,errorThrown){window.setTimeout(this.poll,this.options.pollTime*10)},poll:function(){var data;if(!this.options.realtime||!this.options.pollUrl)return window.setTimeout(this.poll,this.options.pollTime);data=app.utils.getQueryParams();data.cursor=this.cursor||undefined;$.ajax({url:this.options.pollUrl,type:"GET",dataType:"json",data:data,success:this.pollSuccess,error:this.pollFailure})}})})(window,app,Backbone,jQuery,_,moment);(function(window,app,Backbone,jQuery,_){"use strict";var $=jQuery;var BasePage=Backbone.View.extend({defaults:{canStream:false,realtime:false},initialize:function(data){Backbone.View.prototype.initialize.apply(this,arguments);if(_.isUndefined(data))data={};this.options=$.extend({},this.defaults,this.options,data);this.views={};this.initializeAjaxTabs()},initializeAjaxTabs:function(){$("a[data-toggle=ajtab]").click(_.bind(function(e){var $tab=$(e.target),uri=$tab.attr("data-uri"),view_id=$tab.attr("href").substr(1),view=this.getView(view_id,uri),$cont,$parent;e.preventDefault();if(!uri)return view.reset();$cont=$("#"+view_id);$parent=$cont.parent();$parent.css("opacity",.6);$.ajax({url:uri,dataType:"json",success:function(data){view.reset(data);$parent.css("opacity",1);$tab.tab("show")},error:function(){$cont.html("<p>There was an error fetching data from the server.</p>")}})},this));$("li.active a[data-toggle=ajtab]").click()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list small",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},getView:function(id,uri){if(!this.views[id])this.views[id]=this.makeDefaultView(id);var view=this.views[id];view.options.pollUrl=uri;return view}});app.StreamPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:data.groups,maxItems:50,realtime:$.cookie("pausestream")?false:true,canStream:this.options.canStream,pollUrl:app.config.urlPrefix+"/api/"+app.config.teamId+"/"+app.config.projectId+"/poll/",model:app.models.Group});this.control=$("a[data-action=pause]");this.updateStreamOptions();this.initFilters();this.control.click(_.bind(function(e){e.preventDefault();this.options.realtime=this.group_list.options.realtime=this.control.hasClass("realtime-pause");this.updateStreamOptions()},this));$("#chart").height("50px");app.charts.render("#chart",{placement:"left"})},initFilters:function(){$(".filter").each(_.bind(function(_,el){var $filter=$(el);var $input=$filter.find("input[type=text]");if($input.length>0){$input.select2({initSelection:function(el,callback){var $el=$(el);callback({id:$el.val(),text:$el.val()})},allowClear:true,minimumInputLength:3,ajax:{url:app.utils.getSearchTagsUrl(),dataType:"json",data:function(term,page){return{query:term,quietMillis:300,name:$input.attr("name"),limit:10}},results:function(data,page){var results=[];$(data.results).each(function(_,val){results.push({id:app.utils.escape(val),text:app.utils.escape(val)})});return{results:results}}}})}else{$input=$filter.find("select").select2({allowClear:true})}if($input.length>0){$input.on("change",function(e){var query=app.utils.getQueryParams();query[e.target.name]=e.val;window.location.href="?"+$.param(query)})}},this))},updateStreamOptions:function(){if(this.options.realtime){$.removeCookie("pausestream");this.control.removeClass("realtime-pause");this.control.addClass("realtime-play");this.control.html(this.control.attr("data-pause-label"))}else{$.cookie("pausestream","1",{expires:7});this.control.addClass("realtime-pause");this.control.removeClass("realtime-play");this.control.html(this.control.attr("data-play-label"))}}});app.DashboardPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);$("#chart").height("150px");Sentry.charts.render("#chart")}});app.SelectTeamPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);this.refreshSparklines();$(window).on("resize",this.refreshSparklines)},refreshSparklines:function(){$(".chart").each(function(n,el){var $el=$(el);$.ajax({url:$el.attr("data-api-url"),type:"get",dataType:"json",data:{days:1},success:_.bind(function(data){$.plot($el,[{data:data,color:"#ebeff3",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,color:"#f6f8fa"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})})}});app.GroupDetailsPage=BasePage.extend({initialize:function(data){BasePage.prototype.initialize.apply(this,arguments);this.group_list=new app.GroupListView({className:"group-list",id:"event_list",members:[data.group],model:app.models.Group});$("#chart").height("150px");Sentry.charts.render("#chart");$("#public-status .action").click(function(){var $this=$(this);$.ajax({url:$this.attr("data-api-url"),type:"post",success:function(group){var selector=group.isPublic?"true":"false";var nselector=group.isPublic?"false":"true";$('#public-status span[data-public="'+selector+'"]').show();$('#public-status span[data-public="'+nselector+'"]').hide()},error:function(){window.alert("There was an error changing the public status")}})});$(".add-note-btn").click(function(e){var $el=$(this);e.preventDefault();if($el.hasClass("selected")){$el.removeClass("selected");$(".add-note-form",$el.parent()).addClass("hide")}else{$el.addClass("selected");$(".add-note-form",$el.parent()).removeClass("hide")}});var $event_nav=$("#event_nav");if($event_nav.length>0){var $window=$(window);var $nav_links=$event_nav.find("a[href*=#]");var $nav_targets=[];var scroll_offset=$event_nav.offset().top;var event_nav_height;var last_target;$window.resize(function(){event_nav_height=$event_nav.find(".nav").outerHeight();$event_nav.height(event_nav_height+"px")}).resize();$nav_links.click(function(e){var $el=$(this);var target=$(this.hash);$el.parent().addClass("active").siblings().removeClass("active");$("html,body").animate({scrollTop:target.position().top+event_nav_height},"fast");if(history.pushState){history.pushState({},"",this.hash)}e.preventDefault()}).each(function(){if(this.hash.length>1&&$(this.hash).length){$nav_targets.push(this.hash)}});var resizeTimer;$window.scroll(function(){clearTimeout(resizeTimer);resizeTimer=setTimeout(function(){if($window.scrollTop()>scroll_offset){if(!$event_nav.hasClass("fixed")){$event_nav.addClass("fixed")}}else if($event_nav.hasClass("fixed")){$event_nav.removeClass("fixed")}if($nav_targets.length){var from_top=$window.scrollTop()+event_nav_height+20;var cur=$.map($nav_targets,function(hash){if($(hash).offset().top<from_top){return hash}});var target=cur?cur[cur.length-1]:null;if(!target){target=$nav_targets[0]}if(last_target!==target){last_target=target;$nav_links.parent().removeClass("active").end().filter("[href="+target+"]").parent().addClass("active")}}},1)}).scroll()}}});app.WallPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,{realtime:true,pollTime:3e3});this.sparkline=$(".chart");this.sparkline.height(this.sparkline.parent().height());this.stats=$("#stats");_.bindAll(this,"refreshStats");this.refreshSparkline();this.refreshStats()},makeDefaultView:function(id){return new app.GroupListView({className:"group-list",id:id,maxItems:5,stream:this.options.stream,realtime:this.options.realtime,model:app.models.Group})},refreshSparkline:function(){$.ajax({url:this.sparkline.attr("data-api-url"),type:"get",dataType:"json",data:{days:1,gid:this.sparkline.attr("data-group")||undefined},success:_.bind(function(data){$.plot(this.sparkline,[{data:data,color:"#52566c",shadowSize:0,lines:{lineWidth:2,show:true,fill:true,fillColor:"#232428"}}],{yaxis:{min:0},grid:{show:false},hoverable:false,legend:{noColumns:5},lines:{show:false}})},this)})},refreshStats:function(){$.ajax({url:this.stats.attr("data-uri"),dataType:"json",success:_.bind(function(data){this.stats.find("[data-stat]").each(function(){var $this=$(this);var new_count=data[$this.attr("data-stat")];var counter=$this.find("big");var digit=counter.find("span");if(digit.is(":animated"))return false;if(counter.data("count")==new_count){return false}counter.data("count",new_count);var replacement=$("<span></span>",{css:{top:"-2.1em",opacity:0},text:new_count});digit.before(replacement).animate({top:"2.5em",opacity:0},"fast",function(){digit.remove()});replacement.delay(100).animate({top:0,opacity:1},"fast")});window.setTimeout(this.refreshStats,1e3)},this)})}});app.AddTeamMemberPage=BasePage.extend({});app.AccessGroupMembersPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=user]")}});app.AccessGroupProjectsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableProjectsInput("form input[name=project]")}});app.TeamDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]")}});app.ProjectDetailsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);app.utils.makeSearchableUsersInput("form input[name=owner]");$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),values=[],$value=$('<span class="value"></span>');var i=min;while(i<=max){values.push(i);if(i<12){i+=1}else if(i<24){i+=3}else if(i<36){i+=6}else if(i<48){i+=12}else{i+=24}}$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatHours(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatHours(data.value))},this)).simpleSlider({range:[min,max],step:step,allowedValues:values,snap:true})},this))},formatHours:function formatHours(val){val=parseInt(val,10);if(val===0){return"Disabled"}else if(val>23&&val%24===0){val=val/24;return val+" day"+(val!=1?"s":"")}return val+" hour"+(val!=1?"s":"")}});app.ProjectNotificationsPage=BasePage.extend({initialize:function(){BasePage.prototype.initialize.apply(this,arguments);$("input[type=range]").each(_.bind(function loop(n,el){var $el=$(el),min=parseInt($el.attr("min"),10),max=parseInt($el.attr("max"),10),step=parseInt($el.attr("step"),10),$value=$('<span class="value"></span>');$el.on("slider:ready",_.bind(function sliderready(event,data){$value.appendTo(data.el);$value.html(this.formatThreshold(data.value))},this)).on("slider:changed",_.bind(function sliderchanged(event,data){$value.html(this.formatThreshold(data.value))},this)).simpleSlider({range:[min,max],step:step,snap:true})},this));$("#tag_list input").each(function(_,el){$(el).addClass("span6");app.utils.makeSearchableTagsInput(el)})},formatThreshold:function formatThreshold(value){if(!value){return"Disabled"}return value+"%"}});app.NewProjectPage=BasePage.extend({initialize:function(data){this.el=$(data.el);BasePage.prototype.initialize.apply(this,arguments);if(this.options.canSelectTeam&&this.options.canCreateTeam){$("#new_team").hide();$('a[rel="create-new-team"]').click(function(){$("#new_team").show();$("#select_team").hide()});$('a[rel="select-team"]').click(function(){$("#new_team").hide();$("#select_team").show()})}}});app.NewProjectRulePage=BasePage.extend({initialize:function(data){var select2_options={width:"element",allowClear:false,minimumResultsForSearch:10};BasePage.prototype.initialize.apply(this,arguments);_.bindAll(this,"addAction","addCondition","parseFormData");this.actions_by_id={};this.conditions_by_id={};this.el=$(data.el);this.action_sel=this.el.find('select[id="action-select"]');this.action_table=this.el.find("table.action-list");this.action_table_body=this.action_table.find("tbody");this.condition_sel=this.el.find('select[id="condition-select"]');this.condition_table=this.el.find("table.condition-list");this.condition_table_body=this.condition_table.find("tbody");this.action_sel.empty();this.action_sel.append($("<option></option>"));$.each(data.actions,_.bind(function(_,action){var opt=$("<option></option>");opt.attr({value:action.id});opt.text(action.label);opt.appendTo(this.action_sel);this.actions_by_id[action.id]=action},this));this.condition_sel.empty();this.condition_sel.append($("<option></option>"));$.each(data.conditions,_.bind(function(_,condition){var opt=$("<option></option>");opt.attr({value:condition.id});opt.text(condition.label);opt.appendTo(this.condition_sel);this.conditions_by_id[condition.id]=condition},this));this.action_sel.select2(select2_options);this.condition_sel.select2(select2_options);this.action_sel.change(_.bind(function(){this.addAction(this.action_sel.val())},this));this.condition_sel.change(_.bind(function(){this.addCondition(this.condition_sel.val())},this));this.parseFormData(data.form_data,data.form_errors)},parseFormData:function(form_data,form_errors){var data={action:{},action_match:form_data.action_match||"all",condition:{},label:form_data.label||""};form_errors=form_errors||{};$.each(form_data,function(key,value){var matches=key.match(/^(condition|action)\[(\d+)\]\[(.+)\]$/);var type,num;if(!matches){return}type=matches[1];num=matches[2];if(data[type][num]===undefined){data[type][num]={}}data[type][num][matches[3]]=value});this.el.find("input[name=label]").val(data.label);this.el.find('select[name="action_match"]').val(data.action_match);$.each(_.sortBy(data.condition),_.bind(function(num,item){this.addCondition(item.id,item,form_errors["condition["+num+"]"]||false)},this));$.each(_.sortBy(data.action),_.bind(function(num,item){this.addAction(item.id,item,form_errors["action["+num+"]"]||false)},this))},addCondition:function(id,options,has_errors){var node=this.conditions_by_id[id],row=$("<tr></tr>"),remove_btn=$('<button class="btn btn-small">Remove</button>'),num=this.condition_table_body.find("tr").length,html=$("<div>"+node.html+"</div>"),prefix="condition["+num+"]",id_field=$('<input type="hidden" name="'+prefix+'[id]" value="'+node.id+'">');has_errors=has_errors||false;options=options||{};if(has_errors){row.addClass("error")}html.find("select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});html.find("input, select, textarea").each(function(_,el){var $el=$(el),name=$el.attr("name");$el.attr("name",prefix+"["+name+"]");$el.val(options[name]||"")});row.append($("<td></td>").append(html).append(id_field));row.append($("<td></td>").append(remove_btn));row.appendTo(this.condition_table_body);remove_btn.click(function(){row.remove();return false});this.condition_sel.data("select2").clear();this.condition_table.show()},addAction:function(id,options,has_errors){var node=this.actions_by_id[id],row=$("<tr></tr>"),remove_btn=$('<button class="btn btn-small">Remove</button>'),num=this.action_table_body.find("tr").length,html=$("<div>"+node.html+"</div>"),prefix="action["+num+"]",id_field=$('<input type="hidden" name="'+prefix+'[id]" value="'+node.id+'">');has_errors=has_errors||false;
+options=options||{};if(has_errors){row.addClass("error")}html.find("select").each(function(){var $this=$(this),options={width:"element",allowClear:false,minimumResultsForSearch:10};if($this.attr("data-allowClear")){options.allowClear=$this.attr("data-allowClear")}$this.select2(options)});html.find("input, select, textarea").each(function(_,el){var $el=$(el),name=$el.attr("name");$el.attr("name",prefix+"["+name+"]");$el.val(options[name]||"")});row.append($("<td></td>").append(html).append(id_field));row.append($("<td></td>").append(remove_btn));row.appendTo(this.action_table_body);remove_btn.click(function(){row.remove();return false});this.action_sel.data("select2").clear();this.action_table.show()}});Backbone.sync=function(method,model,success,error){success()}})(window,app,Backbone,jQuery,_);
 //@ sourceMappingURL=global.min.map.js
\ No newline at end of file
diff --git a/src/sentry/static/sentry/scripts/utils.js b/src/sentry/static/sentry/scripts/utils.js
index 93751088df..7bac57f184 100644
--- a/src/sentry/static/sentry/scripts/utils.js
+++ b/src/sentry/static/sentry/scripts/utils.js
@@ -228,7 +228,8 @@
             var $this = $(this),
                 options = {
                     width: 'element',
-                    allowClear: false
+                    allowClear: false,
+                    minimumResultsForSearch: 10
                 };
 
             if ($this.attr('data-allowClear')) {
diff --git a/src/sentry/static/sentry/styles/global.min.css b/src/sentry/static/sentry/styles/global.min.css
index ad045b7835..30060763c7 100644
--- a/src/sentry/static/sentry/styles/global.min.css
+++ b/src/sentry/static/sentry/styles/global.min.css
@@ -8678,6 +8678,30 @@ table.vars table.vars th {
 .table-striped tbody tr:nth-child(even) th {
   background-color: #fff;
 }
+.table tbody tr.success > td {
+  background-color: #dff0d8;
+}
+.table tbody tr.error > td {
+  background-color: #f2dede;
+}
+.table tbody tr.warning > td {
+  background-color: #fcf8e3;
+}
+.table tbody tr.info > td {
+  background-color: #d9edf7;
+}
+.table-hover tbody tr.success:hover > td {
+  background-color: #d0e9c6;
+}
+.table-hover tbody tr.error:hover > td {
+  background-color: #ebcccc;
+}
+.table-hover tbody tr.warning:hover > td {
+  background-color: #faf2cc;
+}
+.table-hover tbody tr.info:hover > td {
+  background-color: #c4e3f3;
+}
 .nav-tabs {
   border-bottom: 1px solid #dee3e9;
 }
@@ -9023,6 +9047,22 @@ table.vars table.vars th {
 .popover-content {
   padding: 4px 10px;
 }
+.rule-list {
+  list-style: none;
+}
+.rule-list li {
+  line-height: 30px;
+}
+.rule-list li input[type=number] {
+  border-width: 0 0 1px;
+  width: 50px;
+  -webkit-border-radius: 0;
+  -moz-border-radius: 0;
+  border-radius: 0;
+  -webkit-box-shadow: none;
+  -moz-box-shadow: none;
+  box-shadow: none;
+}
 #flotTip {
   background-color: #000000;
   -webkit-border-radius: 4px;
diff --git a/src/sentry/static/sentry/styles/sentry.css b/src/sentry/static/sentry/styles/sentry.css
index ad045b7835..30060763c7 100644
--- a/src/sentry/static/sentry/styles/sentry.css
+++ b/src/sentry/static/sentry/styles/sentry.css
@@ -8678,6 +8678,30 @@ table.vars table.vars th {
 .table-striped tbody tr:nth-child(even) th {
   background-color: #fff;
 }
+.table tbody tr.success > td {
+  background-color: #dff0d8;
+}
+.table tbody tr.error > td {
+  background-color: #f2dede;
+}
+.table tbody tr.warning > td {
+  background-color: #fcf8e3;
+}
+.table tbody tr.info > td {
+  background-color: #d9edf7;
+}
+.table-hover tbody tr.success:hover > td {
+  background-color: #d0e9c6;
+}
+.table-hover tbody tr.error:hover > td {
+  background-color: #ebcccc;
+}
+.table-hover tbody tr.warning:hover > td {
+  background-color: #faf2cc;
+}
+.table-hover tbody tr.info:hover > td {
+  background-color: #c4e3f3;
+}
 .nav-tabs {
   border-bottom: 1px solid #dee3e9;
 }
@@ -9023,6 +9047,22 @@ table.vars table.vars th {
 .popover-content {
   padding: 4px 10px;
 }
+.rule-list {
+  list-style: none;
+}
+.rule-list li {
+  line-height: 30px;
+}
+.rule-list li input[type=number] {
+  border-width: 0 0 1px;
+  width: 50px;
+  -webkit-border-radius: 0;
+  -moz-border-radius: 0;
+  border-radius: 0;
+  -webkit-box-shadow: none;
+  -moz-box-shadow: none;
+  box-shadow: none;
+}
 #flotTip {
   background-color: #000000;
   -webkit-border-radius: 4px;
diff --git a/src/sentry/static/sentry/styles/wall.css b/src/sentry/static/sentry/styles/wall.css
index e64782cab5..18b6e01cbe 100644
--- a/src/sentry/static/sentry/styles/wall.css
+++ b/src/sentry/static/sentry/styles/wall.css
@@ -7851,6 +7851,13 @@ ul.traceback {
   left: 0;
   top: 12px;
 }
+.frames-omitted {
+  color: #999;
+  border: 1px dotted #ddd;
+  border-width: 1px 0;
+  padding: 5px;
+  margin-bottom: 11px;
+}
 .frame {
   overflow: hidden;
   position: relative;
@@ -8671,6 +8678,30 @@ table.vars table.vars th {
 .table-striped tbody tr:nth-child(even) th {
   background-color: #fff;
 }
+.table tbody tr.success > td {
+  background-color: #dff0d8;
+}
+.table tbody tr.error > td {
+  background-color: #f2dede;
+}
+.table tbody tr.warning > td {
+  background-color: #fcf8e3;
+}
+.table tbody tr.info > td {
+  background-color: #d9edf7;
+}
+.table-hover tbody tr.success:hover > td {
+  background-color: #d0e9c6;
+}
+.table-hover tbody tr.error:hover > td {
+  background-color: #ebcccc;
+}
+.table-hover tbody tr.warning:hover > td {
+  background-color: #faf2cc;
+}
+.table-hover tbody tr.info:hover > td {
+  background-color: #c4e3f3;
+}
 .nav-tabs {
   border-bottom: 1px solid #dee3e9;
 }
@@ -9016,6 +9047,22 @@ table.vars table.vars th {
 .popover-content {
   padding: 4px 10px;
 }
+.rule-list {
+  list-style: none;
+}
+.rule-list li {
+  line-height: 30px;
+}
+.rule-list li input[type=number] {
+  border-width: 0 0 1px;
+  width: 50px;
+  -webkit-border-radius: 0;
+  -moz-border-radius: 0;
+  border-radius: 0;
+  -webkit-box-shadow: none;
+  -moz-box-shadow: none;
+  box-shadow: none;
+}
 #flotTip {
   background-color: #000000;
   -webkit-border-radius: 4px;
diff --git a/src/sentry/static/sentry/styles/wall.min.css b/src/sentry/static/sentry/styles/wall.min.css
index e64782cab5..18b6e01cbe 100644
--- a/src/sentry/static/sentry/styles/wall.min.css
+++ b/src/sentry/static/sentry/styles/wall.min.css
@@ -7851,6 +7851,13 @@ ul.traceback {
   left: 0;
   top: 12px;
 }
+.frames-omitted {
+  color: #999;
+  border: 1px dotted #ddd;
+  border-width: 1px 0;
+  padding: 5px;
+  margin-bottom: 11px;
+}
 .frame {
   overflow: hidden;
   position: relative;
@@ -8671,6 +8678,30 @@ table.vars table.vars th {
 .table-striped tbody tr:nth-child(even) th {
   background-color: #fff;
 }
+.table tbody tr.success > td {
+  background-color: #dff0d8;
+}
+.table tbody tr.error > td {
+  background-color: #f2dede;
+}
+.table tbody tr.warning > td {
+  background-color: #fcf8e3;
+}
+.table tbody tr.info > td {
+  background-color: #d9edf7;
+}
+.table-hover tbody tr.success:hover > td {
+  background-color: #d0e9c6;
+}
+.table-hover tbody tr.error:hover > td {
+  background-color: #ebcccc;
+}
+.table-hover tbody tr.warning:hover > td {
+  background-color: #faf2cc;
+}
+.table-hover tbody tr.info:hover > td {
+  background-color: #c4e3f3;
+}
 .nav-tabs {
   border-bottom: 1px solid #dee3e9;
 }
@@ -9016,6 +9047,22 @@ table.vars table.vars th {
 .popover-content {
   padding: 4px 10px;
 }
+.rule-list {
+  list-style: none;
+}
+.rule-list li {
+  line-height: 30px;
+}
+.rule-list li input[type=number] {
+  border-width: 0 0 1px;
+  width: 50px;
+  -webkit-border-radius: 0;
+  -moz-border-radius: 0;
+  border-radius: 0;
+  -webkit-box-shadow: none;
+  -moz-box-shadow: none;
+  box-shadow: none;
+}
 #flotTip {
   background-color: #000000;
   -webkit-border-radius: 4px;
diff --git a/src/sentry/templates/sentry/partial/interfaces/http_email.html b/src/sentry/templates/sentry/partial/interfaces/http_email.html
index d9b76c2081..c135165123 100644
--- a/src/sentry/templates/sentry/partial/interfaces/http_email.html
+++ b/src/sentry/templates/sentry/partial/interfaces/http_email.html
@@ -14,7 +14,7 @@
         <tr>
             <th>{% trans "Query" %}</th>
             <td>
-                <code>{{ query_string|pprint }}</code>
+                <code>{{ query_string }}</code>
             </td>
         </tr>
     </tbody>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 1f92384dc5..a5eed6a717 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -69,6 +69,9 @@
         <li{% if page == 'quotas' %} class="active"{% endif %}>
             <a href="{% url 'sentry-manage-project-quotas' project.team.slug project.slug %}">{% trans "Rate Limits" %}</a>
         </li>
+        <li{% if page == 'rules' %} class="active"{% endif %}>
+            <a href="{% url 'sentry-project-rules' project.team.slug project.slug %}">{% trans "Rules" %}</a>
+        </li>
         <li{% if page == 'tags' %} class="active"{% endif %}>
             <a href="{% url 'sentry-manage-project-tags' project.team.slug project.slug %}">{% trans "Tags" %}</a>
         </li>
diff --git a/src/sentry/templates/sentry/projects/rules/list.html b/src/sentry/templates/sentry/projects/rules/list.html
new file mode 100644
index 0000000000..0da0218797
--- /dev/null
+++ b/src/sentry/templates/sentry/projects/rules/list.html
@@ -0,0 +1,30 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load i18n %}
+
+{% block inner %}
+    <div class="page-header">
+        <a href="{% url 'sentry-new-project-rule' project.team.slug project.slug %}" class="btn pull-right btn-primary">{% trans "New Rule" %}</a>
+        <h2>{% trans "Rules" %}</h2>
+    </div>
+    {% if rule_list %}
+        <table class="table table-striped">
+            <thead>
+                <tr>
+                    <th>Rule</th>
+                </tr>
+            </thead>
+            <tbody>
+                {% for rule in rule_list %}
+                    <tr>
+                        <td>
+                            <a href="{% url 'sentry-edit-project-rule' project.team.slug project.slug rule.id %}">{{ rule.label }}</a>
+                        </td>
+                    </tr>
+                {% endfor %}
+            </tbody>
+        </table>
+    {% else %}
+        <p>You have not yet created any rules. Rules allow you to tweak the behavior of Sentry in various situations, such as sending notifications.</p>
+    {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/rules/new.html b/src/sentry/templates/sentry/projects/rules/new.html
new file mode 100644
index 0000000000..d2d2a035f3
--- /dev/null
+++ b/src/sentry/templates/sentry/projects/rules/new.html
@@ -0,0 +1,85 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block inner %}
+    <div class="page-header">
+        <h2>
+            {% if rule.id %}
+                {% trans "Edit Rule" %}
+            {% else %}
+                {% trans "New Rule" %}
+            {% endif %}
+            <small>Applying to Events</small>
+        </h2>
+    </div>
+    <div id="new-rule-form">
+        <form method="POST" action="">
+            {% csrf_token %}
+
+            {% if not form_is_valid %}
+                <div class="alert-block alert alert-error">
+                    <p>{% trans "There were errors with your submission. Please ensure all options are filled out correctly." %}</p>
+                </div>
+            {% endif %}
+
+            {{ form|as_crispy_errors }}
+
+            <fieldset>
+                <div class="controls{% if form_errors.label %} error{% endif %}">
+                    <label>{% trans "Label:" %}</label> <input type="text" name="label" placeholder="{% trans "e.g. My Rule Name" %}">
+                </div>
+            </fieldset>
+
+            <fieldset>
+                <div><legend>Conditions</legend></div>
+                <p>When <select name="action_match" style="width:100px" class="select2-small">
+                    <option value="all">all of</option>
+                    <option value="any">any of</option>
+                    <option value="none">none of</option>
+                </select> these conditions are met:</p>
+                <table class="condition-list table table-striped">
+                    <colgroup>
+                        <col>
+                        <col style="width:50px">
+                    </colgroup>
+                    <tbody></tbody>
+                </table>
+                <div class="controls">
+                    <select id="condition-select" class="span6" placeholder="add a condition"></select>
+                </div>
+            </fieldset>
+
+            <fieldset>
+                <div><legend>Actions</legend></div>
+                <p>Take these actions every time this rules matches:</p>
+                <table class="action-list table table-striped">
+                    <colgroup>
+                        <col>
+                        <col style="width:50px">
+                    </colgroup>
+                    <tbody></tbody>
+                </table>
+                <div class="controls">
+                    <select id="action-select" class="span6" placeholder="add an action"></select>
+                </div>
+            </fieldset>
+
+            <div class="actions">
+                <button type="submit" class="btn btn-primary">{% trans "Save Rule" %}</button>
+            </div>
+        </form>
+    </div>
+
+    <script>
+    new app.NewProjectRulePage({
+        el: '#new-rule-form',
+        actions: {{ action_list|safe }},
+        conditions: {{ condition_list|safe }},
+        form_data: {{ form_data|to_json|safe }},
+        form_errors: {{ form_errors|to_json|safe }}
+    });
+    </script>
+{% endblock %}
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 2bffe56193..c000fc61ad 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -173,3 +173,27 @@ class TransactionTestCase(BaseTestCase, TransactionTestCase):
 
 class APITestCase(BaseTestCase, BaseAPITestCase):
     pass
+
+
+class RuleTestCase(TestCase):
+    rule_cls = None
+
+    def get_rule(self, data=None):
+        return self.rule_cls(
+            project=self.project,
+            data=data or {},
+        )
+
+    def assertPasses(self, rule, event=None, **kwargs):
+        if event is None:
+            event = self.event
+        kwargs.setdefault('is_new', True)
+        kwargs.setdefault('is_regression', True)
+        assert rule.passes(event, **kwargs) is True
+
+    def assertDoesNotPass(self, rule, event=None, **kwargs):
+        if event is None:
+            event = self.event
+        kwargs.setdefault('is_new', True)
+        kwargs.setdefault('is_regression', True)
+        assert rule.passes(event, **kwargs) is False
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 70a2e3a0c3..0a21a1d8be 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -211,8 +211,10 @@ class APIView(BaseView):
             auth = Auth(auth_vars, is_public=bool(origin))
 
             if auth.version >= 3:
+                if request.method == 'GET' and origin is None:
+                    return HttpResponse('Missing required Origin or Referer header', status=400)
                 # Version 3 enforces secret key for server side requests
-                if origin is None and not auth.secret_key:
+                if not auth.secret_key:
                     return HttpResponse('Missing required attribute in authentication header: sentry_secret', status=400)
 
             try:
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index a66556cfec..f9b3014be9 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -211,3 +211,10 @@ class ProjectQuotasForm(forms.Form):
         ProjectOption.objects.set_value(
             self.project, 'quotas:per_minute', self.cleaned_data['per_minute'] or ''
         )
+
+
+class NewRuleForm(forms.Form):
+    label = forms.CharField(
+        label=_('Label'),
+        widget=forms.TextInput(attrs={'placeholder': 'e.g. My Custom Rule'}),
+    )
diff --git a/src/sentry/web/frontend/events.py b/src/sentry/web/frontend/events.py
index 607cb35a58..598f5d3065 100644
--- a/src/sentry/web/frontend/events.py
+++ b/src/sentry/web/frontend/events.py
@@ -43,13 +43,8 @@ def replay_event(request, team, project, group, event_id):
     else:
         data = http.data
 
-    if http.query_string:
-        full_url = http.url + '?' + http.query_string
-    else:
-        full_url = http.url
-
     initial = {
-        'url': full_url,
+        'url': http.url_without_fragment,
         'method': http.method,
         'headers': headers,
         'data': data,
diff --git a/src/sentry/web/frontend/projects/rules.py b/src/sentry/web/frontend/projects/rules.py
new file mode 100644
index 0000000000..715b1ca5e1
--- /dev/null
+++ b/src/sentry/web/frontend/projects/rules.py
@@ -0,0 +1,173 @@
+"""
+sentry.web.frontend.projects.rules
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import re
+from collections import defaultdict
+
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+from django.views.decorators.csrf import csrf_protect
+
+from sentry.constants import MEMBER_OWNER
+from sentry.models import Rule
+from sentry.utils import json
+from sentry.utils.cache import memoize
+from sentry.rules import rules
+from sentry.web.decorators import has_access
+from sentry.web.helpers import render_to_response
+
+
+class RuleFormValidator(object):
+    # XXX(dcramer): please no judgements on any of the rule code, I realize it's
+    # all terrible and poorly described
+    def __init__(self, project, data=None):
+        self.project = project
+        self.data = data
+        self.errors = {}
+
+    @memoize
+    def cleaned_data(self):
+        # parse out rules
+        rules_by_id = {
+            'actions': {},
+            'conditions': {},
+        }
+        # TODO: conditions need to be based on actions
+        for rule_type, rule in rules:
+            if rule_type.startswith('condition/'):
+                rules_by_id['conditions'][rule.id] = rule
+            elif rule_type.startswith('action/'):
+                rules_by_id['actions'][rule.id] = rule
+
+        key_regexp = r'^(condition|action)\[(\d+)\]\[(.+)\]$'
+        raw_data = defaultdict(lambda: defaultdict(dict))
+        for key, value in self.data.iteritems():
+            match = re.match(key_regexp, key)
+            if not match:
+                continue
+            raw_data[match.group(1)][match.group(2)][match.group(3)] = value
+
+        data = {
+            'label': self.data.get('label', '').strip(),
+            'action_match': self.data.get('action_match', 'all'),
+            'actions': [],
+            'conditions': [],
+        }
+
+        for num, node in sorted(raw_data['condition'].iteritems()):
+            data['conditions'].append(node)
+            cls = rules_by_id['conditions'][node['id']]
+            if not cls(self.project, node).validate_form():
+                self.errors['condition[%s]' % (num,)] = 'Ensure all fields are filled out correctly.'
+
+        for num, node in sorted(raw_data['action'].iteritems()):
+            data['actions'].append(node)
+            cls = rules_by_id['actions'][node['id']]
+            if not cls(self.project, node).validate_form():
+                self.errors['action[%s]' % (num,)] = 'Ensure all fields are filled out correctly.'
+
+        if not data['label'] or len(data['label']) > 64:
+            self.errors['label'] = 'Value must be less than 64 characters.'
+
+        return data
+
+    def is_valid(self):
+        # force validation
+        self.cleaned_data
+        return not bool(self.errors)
+
+
+@has_access(MEMBER_OWNER)
+def list_rules(request, team, project):
+    rule_list = Rule.objects.filter(project=project)
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'page': 'rules',
+        'project': project,
+        'rule_list': rule_list,
+    })
+
+    return render_to_response('sentry/projects/rules/list.html', context, request)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def create_or_edit_rule(request, team, project, rule_id=None):
+    if rule_id:
+        rule = Rule.objects.get(project=project, id=rule_id)
+    else:
+        rule = Rule(project=project)
+
+    form_data = {
+        'label': rule.label,
+        'action_match': rule.data.get('action_match'),
+    }
+
+    for num, node in enumerate(rule.data.get('conditions', [])):
+        prefix = 'condition[%d]' % (num,)
+        for key, value in node.iteritems():
+            form_data[prefix + '[' + key + ']'] = value
+
+    for num, node in enumerate(rule.data.get('actions', [])):
+        prefix = 'action[%d]' % (num,)
+        for key, value in node.iteritems():
+            form_data[prefix + '[' + key + ']'] = value
+
+    for key, value in request.POST.iteritems():
+        form_data[key] = value
+
+    validator = RuleFormValidator(project, form_data)
+    if request.POST and validator.is_valid():
+        data = validator.cleaned_data.copy()
+
+        rule.label = data.pop('label')
+        rule.data = data
+        rule.save()
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Changes to your rule were saved.'))
+
+        path = reverse('sentry-project-rules', args=[team.slug, project.slug])
+        return HttpResponseRedirect(path)
+
+    action_list = []
+    condition_list = []
+
+    # TODO: conditions need to be based on actions
+    for rule_type, rule in rules:
+        node = rule(project)
+        context = {
+            'id': node.id,
+            'label': node.label,
+            'html': node.render_form(),
+        }
+
+        if rule_type.startswith('condition/'):
+            condition_list.append(context)
+        elif rule_type.startswith('action/'):
+            action_list.append(context)
+
+    context = csrf(request)
+    context.update({
+        'rule': rule,
+        'form_is_valid': (not request.POST or validator.is_valid()),
+        'form_errors': validator.errors,
+        'form_data': form_data,
+        'team': team,
+        'page': 'rules',
+        'action_list': json.dumps(action_list),
+        'condition_list': json.dumps(condition_list),
+        'project': project,
+    })
+
+    return render_to_response('sentry/projects/rules/new.html', context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 23cca9b49a..2af1b7b428 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -27,6 +27,7 @@ import sentry.web.frontend.projects.notifications
 import sentry.web.frontend.projects.plugins
 import sentry.web.frontend.projects.quotas
 import sentry.web.frontend.projects.remove
+import sentry.web.frontend.projects.rules
 import sentry.web.frontend.projects.settings
 import sentry.web.frontend.projects.tags
 
@@ -185,6 +186,16 @@ urlpatterns += patterns('',
         sentry.web.frontend.projects.notifications.notification_settings,
         name='sentry-project-notifications'),
 
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/$',
+        sentry.web.frontend.projects.rules.list_rules,
+        name='sentry-project-rules'),
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/(?P<rule_id>\d+)/edit/$',
+        sentry.web.frontend.projects.rules.create_or_edit_rule,
+        name='sentry-edit-project-rule'),
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/rules/new/$',
+        sentry.web.frontend.projects.rules.create_or_edit_rule,
+        name='sentry-new-project-rule'),
+
     # Generic
     url(r'^$', generic.dashboard,
         name='sentry'),
diff --git a/tests/sentry/interfaces/user/__init__.py b/tests/sentry/interfaces/user/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/interfaces/user/tests.py b/tests/sentry/interfaces/user/tests.py
new file mode 100644
index 0000000000..de09aad150
--- /dev/null
+++ b/tests/sentry/interfaces/user/tests.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import mock
+from exam import fixture
+
+from sentry.testutils import TestCase
+from sentry.interfaces import User
+from sentry.models import Event
+
+
+class UserTest(TestCase):
+    @fixture
+    def event(self):
+        return mock.Mock(spec=Event())
+
+    @fixture
+    def interface(self):
+        return User(id=1, email='lol@example.com', favorite_color='brown')
+
+    def test_serialize_behavior(self):
+        assert self.interface.serialize() == {
+            'id': 1,
+            'username': None,
+            'email': 'lol@example.com',
+            'ip_address': None,
+            'data': {'favorite_color': 'brown'}
+        }
+
+    @mock.patch('sentry.interfaces.render_to_string')
+    def test_to_html(self, render_to_string):
+        interface = User(**self.interface.serialize())
+        interface.to_html(self.event)
+        render_to_string.assert_called_once_with('sentry/partial/interfaces/user.html', {
+            'is_public': False,
+            'event': self.event,
+            'user_ip_address': None,
+            'user_id': 1,
+            'user_username': None,
+            'user_email': 'lol@example.com',
+            'user_data': {'favorite_color': 'brown'},
+        })
+
+    def test_to_html_public(self):
+        result = self.interface.to_html(self.event, is_public=True)
+        assert result == ''
diff --git a/tests/sentry/rules/__init__.py b/tests/sentry/rules/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/rules/conditions/__init__.py b/tests/sentry/rules/conditions/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/rules/conditions/test_first_seen_event.py b/tests/sentry/rules/conditions/test_first_seen_event.py
new file mode 100644
index 0000000000..eb4b835e67
--- /dev/null
+++ b/tests/sentry/rules/conditions/test_first_seen_event.py
@@ -0,0 +1,13 @@
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.conditions.first_seen_event import FirstSeenEventCondition
+
+
+class FirstSeenEventConditionTest(RuleTestCase):
+    rule_cls = FirstSeenEventCondition
+
+    def test_applies_correctly(self):
+        rule = self.get_rule()
+
+        self.assertPasses(rule, self.event, is_new=True)
+
+        self.assertDoesNotPass(rule, self.event, is_new=False)
diff --git a/tests/sentry/rules/conditions/test_regression_event.py b/tests/sentry/rules/conditions/test_regression_event.py
new file mode 100644
index 0000000000..54deb1a1b6
--- /dev/null
+++ b/tests/sentry/rules/conditions/test_regression_event.py
@@ -0,0 +1,13 @@
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.conditions.regression_event import RegressionEventCondition
+
+
+class RegressionEventConditionTest(RuleTestCase):
+    rule_cls = RegressionEventCondition
+
+    def test_applies_correctly(self):
+        rule = self.get_rule()
+
+        self.assertPasses(rule, self.event, is_regression=True)
+
+        self.assertDoesNotPass(rule, self.event, is_regression=False)
diff --git a/tests/sentry/rules/conditions/test_tagged_event.py b/tests/sentry/rules/conditions/test_tagged_event.py
new file mode 100644
index 0000000000..8aac61f032
--- /dev/null
+++ b/tests/sentry/rules/conditions/test_tagged_event.py
@@ -0,0 +1,112 @@
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.conditions.tagged_event import TaggedEventCondition, MatchType
+
+
+class TaggedEventConditionTest(RuleTestCase):
+    rule_cls = TaggedEventCondition
+
+    def get_event(self):
+        event = self.event
+        event.data['tags'] = (
+            ('logger', 'sentry.example'),
+            ('logger', 'foo.bar'),
+            ('notlogger', 'sentry.other.example'),
+            ('notlogger', 'bar.foo.baz'),
+        )
+        return event
+
+    def test_equals(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'key': 'logger',
+            'value': 'sentry.example',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'key': 'logger',
+            'value': 'sentry.other.example',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_does_not_equal(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.NOT_EQUAL,
+            'key': 'logger',
+            'value': 'sentry.example',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.NOT_EQUAL,
+            'key': 'logger',
+            'value': 'sentry.other.example',
+        })
+        self.assertPasses(rule, event)
+
+    def test_starts_with(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.STARTS_WITH,
+            'key': 'logger',
+            'value': 'sentry.',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.STARTS_WITH,
+            'key': 'logger',
+            'value': 'bar.',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_ends_with(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.ENDS_WITH,
+            'key': 'logger',
+            'value': '.example',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.ENDS_WITH,
+            'key': 'logger',
+            'value': '.foo',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_contains(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.CONTAINS,
+            'key': 'logger',
+            'value': 'sentry',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.CONTAINS,
+            'key': 'logger',
+            'value': 'bar.foo',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_does_not_contain(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.NOT_CONTAINS,
+            'key': 'logger',
+            'value': 'sentry',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.NOT_CONTAINS,
+            'key': 'logger',
+            'value': 'bar.foo',
+        })
+        self.assertPasses(rule, event)
