commit bfd554ecd904083bbdc1246e857f2a9e50d1bf2f
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri May 15 12:35:20 2020 -0700

    feat(integrations): slack messages private channels on migration (#18801)

diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index 01b0481551..e997e5910a 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -171,7 +171,7 @@ class IntegrationProvider(PipelineProvider):
     def get_logger(self):
         return logging.getLogger("sentry.integration.%s" % (self.key,))
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         pass
 
     def get_pipeline_views(self):
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index b162715d23..18a3db4ad4 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -153,7 +153,7 @@ class BitbucketIntegrationProvider(IntegrationProvider):
         )
         return [identity_pipeline_view, VerifyInstallation()]
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         repo_ids = Repository.objects.filter(
             organization_id=organization.id,
             provider__in=["bitbucket", "integrations:bitbucket"],
diff --git a/src/sentry/integrations/bitbucket_server/integration.py b/src/sentry/integrations/bitbucket_server/integration.py
index 1869966457..b2f71a7f4f 100644
--- a/src/sentry/integrations/bitbucket_server/integration.py
+++ b/src/sentry/integrations/bitbucket_server/integration.py
@@ -297,7 +297,7 @@ class BitbucketServerIntegrationProvider(IntegrationProvider):
     def get_pipeline_views(self):
         return [InstallationConfigView(), OAuthLoginView(), OAuthCallbackView()]
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         repo_ids = Repository.objects.filter(
             organization_id=organization.id,
             provider__in=["bitbucket_server", "integrations:bitbucket_server"],
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 683ce6f3ba..291bb9e8d5 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -160,7 +160,7 @@ class ExampleIntegrationProvider(IntegrationProvider):
     def get_config(self):
         return [{"name": "name", "label": "Name", "type": "text", "required": True}]
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         Migrator.run(integration=integration, organization=organization)
 
     def build_integration(self, state):
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index c1f91b2c9f..61db18cb4d 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -164,7 +164,7 @@ class GitHubIntegrationProvider(IntegrationProvider):
 
     setup_dialog_config = {"width": 1030, "height": 1000}
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         repo_ids = Repository.objects.filter(
             organization_id=organization.id,
             provider__in=["github", "integrations:github"],
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index b79082ec37..fd698367ea 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -287,7 +287,7 @@ class GitHubEnterpriseIntegrationProvider(GitHubIntegrationProvider):
             lambda: self._make_identity_pipeline_view(),
         ]
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         pass
 
     def get_installation_info(self, installation_data, access_token, installation_id):
diff --git a/src/sentry/integrations/pagerduty/integration.py b/src/sentry/integrations/pagerduty/integration.py
index ba1f7f0b3b..5d435dbc95 100644
--- a/src/sentry/integrations/pagerduty/integration.py
+++ b/src/sentry/integrations/pagerduty/integration.py
@@ -142,7 +142,7 @@ class PagerDutyIntegrationProvider(IntegrationProvider):
     def get_pipeline_views(self):
         return [PagerDutyInstallationRedirect()]
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         services = integration.metadata["services"]
         try:
             org_integration = OrganizationIntegration.objects.get(
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index 7b29868915..6e9bbedc4b 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -51,9 +51,11 @@ class IntegrationPipeline(Pipeline):
             return self.error(six.text_type(e))
 
         response = self._finish_pipeline(data)
-        # TODO: pass in the post_install_data to be able to make the requests
+
+        extra = data.get("post_install_data")
+
         # to Slack
-        self.provider.post_install(self.integration, self.organization)
+        self.provider.post_install(self.integration, self.organization, extra=extra)
         self.clear_session()
         return response
 
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 9f099711b3..562508df39 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -18,6 +18,7 @@ from sentry.models import Integration, Rule, RuleStatus
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 from sentry.shared_integrations.exceptions import ApiError, IntegrationError
+from sentry.integrations.slack import post_migration
 
 from .client import SlackClient
 from .utils import logger
@@ -57,7 +58,7 @@ setup_alert = {
 }
 
 reauthentication_alert = {
-    "alertText": "Slack must be re-authorized to avoid a disruption of Slack notifications",
+    "alertText": "Upgrade Slack to avoid any disruption to service. It'll be worth it, we promise.",
 }
 
 metadata = IntegrationMetadata(
@@ -174,7 +175,8 @@ class SlackIntegrationProvider(IntegrationProvider):
 
             post_install_data = {
                 "user_id": state["user_id"],
-                "channels": state["private_channels"],
+                "private_channels": state["private_channels"],
+                "missing_channels": state["missing_channels"],
             }
 
             integration["integration_id"] = state.get("integration_id")
@@ -182,6 +184,26 @@ class SlackIntegrationProvider(IntegrationProvider):
 
         return integration
 
+    def post_install(self, integration, organization, extra=None):
+        # normal installtions don't have extra, quit immediately
+        if extra is None:
+            return
+
+        private_channels = extra.get("private_channels")
+        missing_channels = extra.get("missing_channels")
+        run_args = {
+            "integration_id": integration.id,
+            "organization_id": organization.id,
+            "user_id": extra.get("user_id"),
+            "private_channels": private_channels,
+            "missing_channels": missing_channels,
+        }
+        if private_channels or missing_channels:
+            post_migration.run_post_migration.apply_async(kwargs=run_args)
+        else:
+            # if we don't have channels, log it so we know we skipped this
+            logger.info("slack.integration.skipped_post_migration", extra=run_args)
+
 
 class SlackReAuthIntro(PipelineView):
     """
@@ -283,16 +305,24 @@ def _request_channel_info(pipeline):
             # TODO(meredith): subclass the ApiError and make a SlackApiError so we can
             # reraise the other errors
         except ApiError as e:
-            # adds the channel to our dict grouped by the error message which could
-            # be any of the following found under the 'errors' section found in
-            # https://api.slack.com/methods/conversations.list
-            channel_responses[e].add(Channel(channel["name"], channel["id"]))
+            logger.info(
+                "slack.request_channel_info.response-error",
+                extra={
+                    "error": six.text_type(e),
+                    "channel": channel["id"],
+                    "integration_id": integration.id,
+                },
+            )
+            # regardless of the type of error, we are going to group the channels together
+            # when showing this to the user to make things a bit simpler
+            channel_responses["not_found"].add(Channel(channel["name"], channel["id"]))
             continue
 
         if resp["channel"]["is_private"]:
             channel_responses["private"].add(Channel(channel["name"], channel["id"]))
 
     pipeline.bind_state("private_channels", channel_responses["private"])
+    pipeline.bind_state("missing_channels", channel_responses["not_found"])
     return channel_responses
 
 
diff --git a/src/sentry/integrations/slack/post_migration.py b/src/sentry/integrations/slack/post_migration.py
new file mode 100644
index 0000000000..8ae62b8eae
--- /dev/null
+++ b/src/sentry/integrations/slack/post_migration.py
@@ -0,0 +1,92 @@
+from __future__ import absolute_import
+
+import six
+import logging
+
+from sentry.shared_integrations.exceptions import ApiError
+from sentry.models import Integration, User, Organization
+from sentry.utils import json, email
+from sentry.tasks.base import instrumented_task, retry
+
+from .client import SlackClient
+
+logger = logging.getLogger(__name__)
+
+
+doc_link = "https://docs.sentry.io/workflow/integrations/global-integrations/#slack"
+
+
+def build_migration_attachment():
+    return {
+        "title": "Action required",
+        "text": "Your Sentry Slack Integration has been upgraded. Mention `@sentry` to receive Sentry notifications in this channel. For more information, <%s|check out the documentation>."
+        % (doc_link),
+        "footer": "Sentry API",
+        "footer_icon": "https://sentryio-assets.storage.googleapis.com/img/slack/integration-avatar.png",
+    }
+
+
+@instrumented_task(
+    name="sentry.integrations.slack.run_post_migration", queue="integrations",
+)
+@retry(on=())  # no retries on any errors
+def run_post_migration(
+    integration_id, organization_id, user_id, private_channels, missing_channels
+):
+
+    integration = Integration.objects.get(id=integration_id)
+    organization = Organization.objects.get(id=organization_id)
+    user = User.objects.get(id=user_id)
+
+    client = SlackClient()
+
+    failing_channels = []
+    good_channels = []
+    for channel in private_channels:
+        attachment = build_migration_attachment()
+        channel_name = channel["name"]
+        channel_id = channel["id"]
+        payload = {
+            "channel": channel_id,
+            "link_names": 1,
+            "attachments": json.dumps([attachment]),
+        }
+        headers = {
+            "Authorization": "Bearer %s" % (six.text_type(integration.metadata["old_access_token"]))
+        }
+        try:
+            client.post("/chat.postMessage", data=payload, headers=headers, timeout=5, json=True)
+            good_channels.append(channel)
+        except ApiError as e:
+            logger.error(
+                "slack.post_migration.response_error",
+                extra={
+                    "error": six.text_type(e),
+                    "channel_id": channel_id,
+                    "channel_name": channel_name,
+                    "integration_id": integration_id,
+                    "organization_id": organization_id,
+                    "integration_name": integration.name,
+                    "organization_slug": organization.slug,
+                },
+            )
+            failing_channels.append(channel)
+
+    message = email.MessageBuilder(
+        subject=u"Your Slack Sentry Integration has been upgraded",
+        template="sentry/emails/slack-migration.txt",
+        html_template="sentry/emails/slack-migration.html",
+        type="slack_migration.summary",
+        context={
+            "good_channels": good_channels,
+            "failing_channels": failing_channels,
+            "missing_channels": missing_channels,
+            "doc_link": doc_link,
+            "integration": integration,
+            "organization": organization,
+        },
+    )
+    message.send([user.email])
+    # delete the old access token at the end
+    del integration.metadata["old_access_token"]
+    integration.save()
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index cbfcba1c10..e0f445277a 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -324,7 +324,7 @@ class VstsIntegrationProvider(IntegrationProvider):
 
     VSTS_ACCOUNT_LOOKUP_URL = "https://app.vssps.visualstudio.com/_apis/resourceareas/79134C72-4A58-4B42-976C-04E7115F32BF?hostId=%s&api-preview=5.0-preview.1"
 
-    def post_install(self, integration, organization):
+    def post_install(self, integration, organization, extra=None):
         repo_ids = Repository.objects.filter(
             organization_id=organization.id,
             provider__in=["visualstudio", "integrations:vsts"],
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index 51e38bf6ec..437f9c772b 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -151,7 +151,7 @@ export default class InstalledIntegration extends React.Component<Props> {
                 <Tooltip
                   disabled={hasAccess}
                   title={t(
-                    'You must be an organization owner, manager or admin to re-authenticate'
+                    'You must be an organization owner, manager or admin to upgrade'
                   )}
                 >
                   <AddIntegrationButton
@@ -162,7 +162,7 @@ export default class InstalledIntegration extends React.Component<Props> {
                     integrationId={integration.id}
                     priority="primary"
                     size="small"
-                    buttonText={t('Re-authenticate Now')}
+                    buttonText={t('Upgrade Now')}
                     icon={<IconWarning size="sm" />}
                   />
                 </Tooltip>
diff --git a/src/sentry/templates/sentry/emails/slack-migration.html b/src/sentry/templates/sentry/emails/slack-migration.html
new file mode 100644
index 0000000000..ec2bf738a9
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/slack-migration.html
@@ -0,0 +1,45 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+{% load sentry_avatars %}
+{% load sentry_helpers %}
+
+{% block main %}
+  <h3>Slack Upgrade</h3>
+  Your Sentry Slack Integration for workspace <strong>{{integration.name}}</strong> has been updated on behalf of organization <strong>{{organization.name}}</strong>. For more information, <a href="{{ doc_link }}">check out the documentation.</a>
+  <br />
+  <br />
+  {% if good_channels %}
+    <div>
+        <strong>Working Private Channels</strong>
+        <p>Sentry was able to send messages to the following private channels with instructions on how to add Sentry to the channel:</p>
+        {% for channel in good_channels %}
+            <li class="channel-name">{{channel.name}} </li>
+        {% endfor %}
+    </div>
+    {% endif %}
+    {% if failing_channels %}
+        <br />
+        <strong>Failing Private Channels</strong>
+        <p>Sentry was unable to send messages to the following private channels:</p>
+        {% for channel in failing_channels %}
+            <li class="channel-name">{{channel.name}} </li>
+        {% endfor %}
+        </div>
+    {% endif %}
+    {% if missing_channels %}
+        <br />
+        <div>
+            <strong>Missing or Unauthorized Channels</strong>
+            <p class="section-info">
+                {% trans "These channels were found to be missing or unauthorized by the current Slack integration. If they are private channels, you'll have make sure to add the Sentry bot to the channels after migration. Otherwise you may want update your alert rules to use a different channel." %}
+            </p>
+            {% for channel in missing_channels %}
+                <li class="channel-name">{{channel.name}} </li>
+            {% endfor %}
+        </div>
+    {% endif %}
+
+{% endblock %}
+
+{% block footer %}{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/slack-migration.txt b/src/sentry/templates/sentry/emails/slack-migration.txt
new file mode 100644
index 0000000000..f2669a4797
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/slack-migration.txt
@@ -0,0 +1,17 @@
+Slack Upgrade
+--------------
+
+Your Sentry Slack Integration for workspace {{integration.name}} has been updated on behalf of organization {{organization.name}}. For more information, check out the documentation: {{ doc_link }}.
+
+{% if good_channels %}
+    Sentry was able to send messages to the following private channels with instructions on how to add Sentry to the channel:
+    {% for channel in good_channels %}
+        {{ channel }}
+    {% endfor %}
+{% endif %}
+{% if problem_channels %}
+    Sentry was unable to send messages to the following private channels:
+    {% for channel in problem_channels %}
+        {{ channel }}
+    {% endfor %}
+{% endif %}
diff --git a/src/sentry/templates/sentry/integrations/slack-reauth-details.html b/src/sentry/templates/sentry/integrations/slack-reauth-details.html
index 11dd690d0d..635de83a0e 100644
--- a/src/sentry/templates/sentry/integrations/slack-reauth-details.html
+++ b/src/sentry/templates/sentry/integrations/slack-reauth-details.html
@@ -63,28 +63,12 @@
 
     </div>
 
-    <div>
-        {% if no_permission %}
-            <strong>Missing or Unauthorized Channels</strong>
-            <p class="section-info">
-                {% trans "These channels were found to be missing or unauthorized by the current Slack integration. If they are private channels, you'll have make sure to add the Sentry bot to the channels after migration. Otherwise you may want update your alert rules to use a different channel." %}
-            </p>
-        {% endif %}
-        {% for channel in no_permission %}
-            <li class="channel-name">{{channel.name}} </li>
-        {% endfor %}
-        {% for channel in not_found %}
-            <li class="channel-name">{{channel.name}} </li>
-        {% endfor %}
-    </div>
 
     <div>
-        {% if not private and not no_permission and not not_found %}
+        {% if not private %}
         <h6><strong>Next Steps</strong></h6>
             <p class="section-info"> You are good to go! Click "Next" to start the re-authentication flow!</p>
         {% endif %}
-
-
     </div>
 
     <div class="form-actions clearfix">
diff --git a/tests/sentry/integrations/slack/test_migration_flow.py b/tests/sentry/integrations/slack/test_migration_flow.py
index 2bee8ac80b..1dbd65f93e 100644
--- a/tests/sentry/integrations/slack/test_migration_flow.py
+++ b/tests/sentry/integrations/slack/test_migration_flow.py
@@ -14,6 +14,7 @@ from sentry.models import (
     OrganizationIntegration,
 )
 from sentry.testutils import IntegrationTestCase
+from sentry.utils.compat.mock import patch
 
 
 class SlackMigrationTest(IntegrationTestCase):
@@ -53,6 +54,7 @@ class SlackMigrationTest(IntegrationTestCase):
         authorizing_user_id="UXXXXXXX1",
         expected_client_id="slack-client-id",
         expected_client_secret="slack-client-secret",
+        check_channels=True,
     ):
         responses.reset()
 
@@ -115,19 +117,21 @@ class SlackMigrationTest(IntegrationTestCase):
             )
         )
 
-        mock_request = responses.calls[1].request
-        req_params = parse_qs(mock_request.body)
-        assert req_params["grant_type"] == ["authorization_code"]
-        assert req_params["code"] == ["oauth-code"]
-        assert req_params["redirect_uri"] == ["http://testserver/extensions/slack/setup/"]
-        assert req_params["client_id"] == [expected_client_id]
-        assert req_params["client_secret"] == [expected_client_secret]
+        if check_channels:
+            mock_request = responses.calls[1].request
+            req_params = parse_qs(mock_request.body)
+            assert req_params["grant_type"] == ["authorization_code"]
+            assert req_params["code"] == ["oauth-code"]
+            assert req_params["redirect_uri"] == ["http://testserver/extensions/slack/setup/"]
+            assert req_params["client_id"] == [expected_client_id]
+            assert req_params["client_secret"] == [expected_client_secret]
 
         assert resp.status_code == 200
         self.assertDialogSuccess(resp)
 
+    @patch("sentry.integrations.slack.post_migration.run_post_migration")
     @responses.activate
-    def test_migration_flow(self):
+    def test_migration_flow(self, run_post_migration):
         self.assert_setup_flow()
 
         integration = Integration.objects.get(provider=self.provider.key)
@@ -151,6 +155,22 @@ class SlackMigrationTest(IntegrationTestCase):
         idp = IdentityProvider.objects.get(type="slack", external_id="TXXXXXXX1")
         identity = Identity.objects.get(idp=idp, user=self.user, external_id="UXXXXXXX1")
         assert identity.status == IdentityStatus.VALID
+        run_post_migration.apply_async.assert_called_with(
+            kwargs={
+                "integration_id": integration.id,
+                "organization_id": self.organization.id,
+                "user_id": self.user.id,
+                "private_channels": [{"name": "#general", "id": "XXXXX"}],
+                "missing_channels": [],
+            }
+        )
+
+    @patch("sentry.integrations.slack.post_migration.run_post_migration")
+    @responses.activate
+    def test_migration_flow_no_channels(self, run_post_migration):
+        self.rule.delete()
+        self.assert_setup_flow(check_channels=False)
+        assert len(run_post_migration.apply_async.mock_calls) == 0
 
     def test_invalid_integration_id(self):
         responses.reset()
diff --git a/tests/sentry/integrations/slack/test_post_migration.py b/tests/sentry/integrations/slack/test_post_migration.py
new file mode 100644
index 0000000000..9870bb2ce2
--- /dev/null
+++ b/tests/sentry/integrations/slack/test_post_migration.py
@@ -0,0 +1,79 @@
+from __future__ import absolute_import
+
+import responses
+
+
+from sentry.utils import json
+from sentry.utils.compat.mock import patch
+from sentry.models import Integration
+from sentry.testutils.cases import TestCase
+
+from sentry.integrations.slack.post_migration import run_post_migration
+
+
+class SlackPostMigrationTest(TestCase):
+    def setUp(self):
+        self.org = self.create_organization(name="foo", owner=self.user)
+        self.project1 = self.create_project(organization=self.org)
+        self.integration = Integration.objects.create(
+            provider="slack",
+            name="Team A",
+            external_id="TXXXXXXX1",
+            metadata={"old_access_token": "xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx"},
+        )
+        self.integration.add_organization(self.org, self.user)
+        self.data = {
+            "integration_id": self.integration.id,
+            "organization_id": self.org.id,
+            "user_id": self.user.id,
+        }
+
+    @responses.activate
+    @patch("sentry.utils.email.MessageBuilder")
+    def test_basic(self, builder):
+        def request_callback(request):
+            payload = json.loads(request.body)
+            if payload["channel"] == "good_channel_id":
+                return (200, {}, json.dumps({"ok": True}))
+            else:
+                return (200, {}, json.dumps({"ok": False}))
+
+        responses.add_callback(
+            method=responses.POST,
+            url="https://slack.com/api/chat.postMessage",
+            callback=request_callback,
+            content_type="application/json",
+        )
+
+        self.data["private_channels"] = [
+            {"name": "#good_channel", "id": "good_channel_id"},
+            {"name": "#bad_channel", "id": "bad_channel_id"},
+        ]
+
+        self.data["missing_channels"] = [
+            {"name": "#missing_channel", "id": "missing_channel_id"},
+        ]
+
+        with self.tasks():
+            run_post_migration(**self.data)
+
+        request = responses.calls[0].request
+        assert request.headers["Authorization"] == "Bearer xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx"
+
+        expected_email_args = {
+            "subject": u"Your Slack Sentry Integration has been upgraded",
+            "type": "slack_migration.summary",
+            "template": "sentry/emails/slack-migration.txt",
+            "html_template": "sentry/emails/slack-migration.html",
+            "context": {
+                "good_channels": [{"name": "#good_channel", "id": "good_channel_id"}],
+                "failing_channels": [{"name": "#bad_channel", "id": "bad_channel_id"}],
+                "missing_channels": [{"name": "#missing_channel", "id": "missing_channel_id"}],
+                "doc_link": "https://docs.sentry.io/workflow/integrations/global-integrations/#slack",
+                "integration": self.integration,
+                "organization": self.org,
+            },
+        }
+        builder.assert_called_with(**expected_email_args)
+        integration = Integration.objects.get(id=self.integration.id)
+        assert "old_access_token" not in integration.metadata
