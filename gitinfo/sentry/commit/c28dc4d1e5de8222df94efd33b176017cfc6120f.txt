commit c28dc4d1e5de8222df94efd33b176017cfc6120f
Author: Chris Clark <christopherchristopherclark@gmail.com>
Date:   Wed Jan 24 13:12:57 2018 -0800

    Feat(Settings): Email Panel Styles (#7036)
    
    * move helper button thingy to bottom
    
    * tag component
    
    * add to storybook
    
    * improved spacing
    
    * submit on return basics
    
    * hover state and other styles
    
    * add a generous click target
    
    * tooltip
    
    * crappiest possible state management
    
    * change name to ReturnButton and change flag to showReturnButton
    
    * returnButton snapshot test
    
    * add to storybok
    
    * type => priority
    
    * use theme backgrounds
    
    * add to stories
    
    * improve language for storybook

diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index 706d9dfd86..e721c224b0 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -6,7 +6,7 @@ import {action} from '@storybook/addon-actions';
 
 import {
   Form as LegacyForm,
-  TextField,
+  TextField as LegacyTextField,
   PasswordField,
   BooleanField,
 } from 'sentry-ui/forms';
@@ -14,6 +14,7 @@ import RadioField from 'settings-ui/forms/radioField';
 import RadioGroup from 'settings-ui/forms/radioGroup';
 import Form from 'settings-ui/forms/form';
 import FormField from 'settings-ui/forms/formField';
+import TextField from 'settings-ui/forms/textField';
 
 class UndoButton extends React.Component {
   static contextTypes = {
@@ -47,13 +48,13 @@ storiesOf('Forms/Form', module)
     'save on blur and undo',
     withInfo('Saves on blur and has undo')(() => (
       <LegacyForm saveOnBlur allowUndo>
-        <TextField
+        <LegacyTextField
           name="name"
           label="Team Name"
           placeholder="e.g. Operations, Web, Desktop"
           required
         />
-        <TextField name="slug" label="Short name" placeholder="e.g. api-team" />
+        <LegacyTextField name="slug" label="Short name" placeholder="e.g. api-team" />
         <UndoButton />
       </LegacyForm>
     ))
@@ -63,15 +64,19 @@ storiesOf('Forms/Fields', module)
   .add(
     'TextField',
     withInfo('Simple text input')(() => (
-      <LegacyForm saveOnBlur allowUndo>
+      <Form initialData={{context: {location: 'cat'}}}>
         <TextField
-          name="name"
-          label="Team Name"
-          placeholder="e.g. Operations, Web, Desktop"
-          required
+          name="simpletextfield"
+          label="Simple Text Field"
+          placeholder="Simple Text Field"
         />
-        <TextField name="slug" label="Short name" placeholder="e.g. api-team" />
-      </LegacyForm>
+        <TextField
+          name="textfieldwithreturnsubmit"
+          label="Text Field With Return Submit"
+          placeholder="Type here to show the return button"
+          showReturnButton
+        />
+      </Form>
     ))
   )
   .add(
diff --git a/docs-ui/components/tag.stories.js b/docs-ui/components/tag.stories.js
new file mode 100644
index 0000000000..65362d8d1c
--- /dev/null
+++ b/docs-ui/components/tag.stories.js
@@ -0,0 +1,25 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import Tag from 'settings-ui/tag';
+
+storiesOf('Tags', module)
+  .add(
+    'default',
+    withInfo('A basic tag-like thing. If you pass no type, it will be gray')(() => (
+      <Tag>Development</Tag>
+    ))
+  )
+  .add(
+    'warning',
+    withInfo(
+      'A warning tag-like thing. Use this to signal that something is maybe not so great'
+    )(() => <Tag priority="warning">Development</Tag>)
+  )
+  .add(
+    'success',
+    withInfo('A happy tag-like thing. Use this to signal something good')(() => (
+      <Tag priority="success">Development</Tag>
+    ))
+  );
diff --git a/src/sentry/static/sentry/app/data/forms/accountEmails.jsx b/src/sentry/static/sentry/app/data/forms/accountEmails.jsx
index 9b7b88d76b..67e33da6e5 100644
--- a/src/sentry/static/sentry/app/data/forms/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/data/forms/accountEmails.jsx
@@ -14,6 +14,7 @@ const formGroups = [
         label: 'Additional Email',
         placeholder: 'e.g. secondary@example.com',
         help: 'Designate an alternative email for this account',
+        showReturnButton: true,
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/icons/icon-return-key.svg b/src/sentry/static/sentry/app/icons/icon-return-key.svg
new file mode 100644
index 0000000000..26dded736a
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-return-key.svg
@@ -0,0 +1,5 @@
+<svg viewBox="0 0 16 12">
+  <g stroke-width="1" fill="currentColor" fill-rule="evenodd">
+    <path d="M15,8.23921879 L3.52878851,8.23921879 L5.65850461,10.1772839 C6.07414124,10.5555178 6.11625875,11.2125589 5.75257669,11.6448262 C5.38889464,12.0770936 4.75713202,12.1208963 4.34149539,11.7426624 L0.341495392,8.10261831 C-0.113831797,7.68826555 -0.113831797,6.95159259 0.341495392,6.53723983 L4.34149539,2.89719574 C4.75713202,2.51896183 5.38889464,2.56276456 5.75257669,2.9950319 C6.11625875,3.42729923 6.07414124,4.08434031 5.65850461,4.46257422 L3.71248211,6.23347614 L14,6.23347614 L14,1.00287132 C14,0.449000786 14.4477153,0 15,0 C15.5522847,0 16,0.449000786 16,1.00287132 L16,7.23634747 C16,7.79021801 15.5522847,8.23921879 15,8.23921879 Z" id="Combined-Shape"></path>
+  </g>
+</svg>
diff --git a/src/sentry/static/sentry/app/utils/theme.js b/src/sentry/static/sentry/app/utils/theme.js
index 5a8ae19893..d2de297806 100644
--- a/src/sentry/static/sentry/app/utils/theme.js
+++ b/src/sentry/static/sentry/app/utils/theme.js
@@ -58,15 +58,18 @@ const theme = {
 
   alert: {
     info: {
-      background: '#F5FAFE',
+      backgroundLight: '#F5FAFE',
+      background: '#2D5BB1',
       border: '#B5D6ED',
     },
     warning: {
-      background: '#FFFDF7',
+      backgroundLight: '#FFFDF7',
+      background: '#f9a66d',
       border: '#E1D697',
     },
     success: {
-      background: '#F8FCF7',
+      backgroundLight: '#F8FCF7',
+      background: '#57be8c',
       border: '#BBD6B3',
     },
     error: {
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
index 6d6151b0e7..7268ea1ccb 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
@@ -1,4 +1,4 @@
-import {Box, Flex} from 'grid-emotion';
+import {Flex, Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
@@ -13,6 +13,7 @@ import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
 import PanelHeader from '../components/panelHeader';
 import Row from '../components/row';
+import Tag from '../components/tag';
 import SettingsPageHeader from '../components/settingsPageHeader';
 import accountEmailsFields from '../../../data/forms/accountEmails';
 
@@ -48,24 +49,19 @@ class EmailRow extends React.Component {
     let {email, isPrimary, isVerified, hideRemove} = this.props;
 
     return (
-      <Row>
-        <Flex align="center" flex="1">
-          <Flex flex="1">
-            <div>{email}</div>
-          </Flex>
-          <Flex ml={2}>
-            {!isVerified ? t('Unverified') : ''}
-            <Box ml={1}>{isPrimary ? t('Primary') : ''}</Box>
-          </Flex>
+      <Row justify="space-between">
+        <Flex align="center">
+          {email}
+          {!isVerified && <Tag priority="warning">{t('Unverified')}</Tag>}
+          {isPrimary && <Tag priority="success">{t('Primary')}</Tag>}
         </Flex>
 
         {!isPrimary &&
           !hideRemove && (
-            <Flex ml={2}>
+            <Flex>
               <Button size="small" onClick={this.handleSetPrimary}>
                 {t('Set as primary')}
               </Button>
-
               <Box ml={1}>
                 <RemoveButton
                   onClick={this.handleRemove}
@@ -124,16 +120,8 @@ class AccountEmails extends AsyncView {
       <div>
         <SettingsPageHeader title="Emails" />
 
-        <Box mb={30}>
-          <AlertLink to="/settings/account/notifications" icon="icon-stack">
-            {t('Wanna change how many emails you get? Use the notifications panel.')}
-          </AlertLink>
-        </Box>
-
         <Panel>
-          <PanelHeader>
-            <Box>{t('Emails')}</Box>
-          </PanelHeader>
+          <PanelHeader>{t('Emails')}</PanelHeader>
           <PanelBody>
             {primary && <EmailRow onRemove={this.handleRemove} {...primary} />}
 
@@ -159,6 +147,10 @@ class AccountEmails extends AsyncView {
         >
           <JsonForm location={this.props.location} forms={accountEmailsFields} />
         </Form>
+
+        <AlertLink to="/settings/account/notifications" icon="icon-stack">
+          {t('Wanna change how many emails you get? Use the notifications panel.')}
+        </AlertLink>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index 6fb8825b49..49660d7c30 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -26,6 +26,7 @@ export default class FieldFromConfig extends React.Component {
       extraHelp: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
       visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+      showReturnButton: PropTypes.bool,
       getValue: PropTypes.func,
       setValue: PropTypes.func,
     }).isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index fe111ff028..f44b2fc1cf 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -17,6 +17,7 @@ import FormFieldWrapper from './formFieldWrapper';
 import FormState from '../../../../../components/forms/state';
 import InlineSvg from '../../../../../components/inlineSvg';
 import Spinner from '../styled/spinner';
+import returnButton from '../returnButton';
 
 // This wraps Control + ControlError message
 // * can NOT be a flex box have because of position: absolute on "control error message"
@@ -69,6 +70,12 @@ const FormSpinner = styled(Spinner)`
   margin-left: 0;
 `;
 
+const ReturnButtonStyled = styled(returnButton)`
+  position: absolute;
+  right: 0;
+  top: 0;
+`;
+
 /**
  * Some fields don't need to implement their own onChange handlers, in
  * which case we will receive an Event, but if they do we should handle
@@ -94,6 +101,7 @@ class FormField extends React.Component {
     defaultValue: PropTypes.any,
     disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
     disabledReason: PropTypes.string,
+    showReturnButton: PropTypes.bool,
     help: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
     required: PropTypes.bool,
     hideErrorMessage: PropTypes.bool,
@@ -127,6 +135,11 @@ class FormField extends React.Component {
     form: PropTypes.object,
   };
 
+  constructor(props) {
+    super(props);
+    this.state = {showReturnButton: false};
+  }
+
   componentDidMount() {
     // this.attachTooltips();
     // Tell model about this field's props
@@ -161,7 +174,7 @@ class FormField extends React.Component {
   // Only works for styled inputs
   handleInputMount = ref => {
     if (ref && !this.input) {
-      let hash = this.context.location.hash;
+      let hash = this.context.location && this.context.location.hash;
 
       if (!hash) return;
       if (hash !== `#${this.props.name}`) return;
@@ -180,6 +193,8 @@ class FormField extends React.Component {
     let {value, event} = getValueFromEvent(...args);
     let model = this.getModel();
 
+    if (this.props.showReturnButton) this.setState({showReturnButton: true});
+
     if (onChange) {
       onChange(value, event);
     }
@@ -228,6 +243,7 @@ class FormField extends React.Component {
       inline,
       disabled,
       disabledReason,
+      showReturnButton,
       hideErrorMessage,
       help,
       alignRight,
@@ -280,6 +296,8 @@ class FormField extends React.Component {
                     <span className="icon-question" />
                   </span>
                 )}
+
+              {showReturnButton && this.state.showReturnButton && <ReturnButtonStyled />}
             </FormFieldControlStyled>
 
             <FormFieldControlState justify="center" align="center">
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx
new file mode 100644
index 0000000000..9908d8f568
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/returnButton.jsx
@@ -0,0 +1,47 @@
+import React from 'react';
+import styled from 'react-emotion';
+import Tooltip from '../../../../components/tooltip';
+import InlineSvg from '../../../../components/inlineSvg';
+
+const SubmitButton = styled('div')`
+  background: transparent;
+  box-shadow: none;
+  border: 1px solid transparent;
+  border-radius: ${p => p.theme.borderRadius};
+  transition: 0.2s all;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  height: 1.4em;
+  width: 1.4em;
+`;
+
+const ClickTargetStyled = styled('div')`
+  height: 100%;
+  width: 25%;
+  max-width: 2.5em;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  cursor: pointer;
+
+  &:hover ${SubmitButton} {
+    background: #fff;
+    box-shadow: ${p => p.theme.dropShadowLight};
+    border: 1px solid ${p => p.theme.borderLight};
+  }
+`;
+
+const returnButton = props => {
+  return (
+    <ClickTargetStyled {...props}>
+      <Tooltip title="Save">
+        <SubmitButton>
+          <InlineSvg size="0.75em" src="icon-return-key" />
+        </SubmitButton>
+      </Tooltip>
+    </ClickTargetStyled>
+  );
+};
+
+export default returnButton;
diff --git a/src/sentry/static/sentry/app/views/settings/components/tag.jsx b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
new file mode 100644
index 0000000000..ca41bb480d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
@@ -0,0 +1,30 @@
+import React from 'react';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+
+const TagTextStyled = styled('span')`
+  display: inline;
+  padding: 0.3em 0.6em 0.4em;
+  font-size: 75%;
+  font-weight: bold;
+  line-height: 1;
+  color: #fff;
+  text-align: center;
+  white-space: nowrap;
+  vertical-align: baseline;
+  border-radius: 0.25em;
+  margin-left: 0.5em;
+  text-transform: lowercase;
+  background-color: ${p =>
+    p.priority ? p.theme.alert[p.priority].background : p.theme.gray1};
+`;
+
+const Tag = ({children, priority, ...props}) => (
+  <TagTextStyled priority={priority}>{children}</TagTextStyled>
+);
+
+Tag.propTypes = {
+  priority: PropTypes.string,
+};
+
+export default Tag;
diff --git a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
index 31bceec331..5f86a7b90c 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
@@ -19,7 +19,7 @@ const StyledIconCircleExclamation = styled(props => (
 
 let StyledWarning = styled.div`
   margin: 30px 0;
-  background: ${p => p.theme.alert.info.background};
+  background: ${p => p.theme.alert.info.backgroundLight};
   border: 1px solid ${p => p.theme.alert.info.border};
   padding: 15px 20px;
   border-radius: ${p => p.theme.borderRadius};
diff --git a/tests/js/spec/components/__snapshots__/returnButton.spec.jsx.snap b/tests/js/spec/components/__snapshots__/returnButton.spec.jsx.snap
new file mode 100644
index 0000000000..c371edc5d2
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/returnButton.spec.jsx.snap
@@ -0,0 +1,16 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`returnButton renders 1`] = `
+<Styled(div)>
+  <Tooltip
+    title="Save"
+  >
+    <Styled(div)>
+      <InlineSvg
+        size="0.75em"
+        src="icon-return-key"
+      />
+    </Styled(div)>
+  </Tooltip>
+</Styled(div)>
+`;
diff --git a/tests/js/spec/components/returnButton.spec.jsx b/tests/js/spec/components/returnButton.spec.jsx
new file mode 100644
index 0000000000..7ba636b52c
--- /dev/null
+++ b/tests/js/spec/components/returnButton.spec.jsx
@@ -0,0 +1,10 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import ReturnButton from 'app/views/settings/components/forms/returnButton';
+
+describe('returnButton', function() {
+  it('renders', function() {
+    let wrapper = shallow(<ReturnButton />);
+    expect(wrapper).toMatchSnapshot();
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
index 268608cdd1..6d0c18717e 100644
--- a/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/accountEmails.spec.jsx.snap
@@ -8,21 +8,9 @@ exports[`AccountEmails renders with emails 1`] = `
     <SettingsPageHeading
       title="Emails"
     />
-    <Box
-      mb={30}
-    >
-      <Styled(Component)
-        icon="icon-stack"
-        to="/settings/account/notifications"
-      >
-        Wanna change how many emails you get? Use the notifications panel.
-      </Styled(Component)>
-    </Box>
     <Styled(div)>
       <PanelHeader>
-        <Box>
-          Emails
-        </Box>
+        Emails
       </PanelHeader>
       <PanelBody
         direction="column"
@@ -78,6 +66,7 @@ exports[`AccountEmails renders with emails 1`] = `
                   "label": "Additional Email",
                   "name": "email",
                   "placeholder": "e.g. secondary@example.com",
+                  "showReturnButton": true,
                   "type": "string",
                 },
               ],
@@ -87,6 +76,12 @@ exports[`AccountEmails renders with emails 1`] = `
         }
       />
     </Form>
+    <Styled(Component)
+      icon="icon-stack"
+      to="/settings/account/notifications"
+    >
+      Wanna change how many emails you get? Use the notifications panel.
+    </Styled(Component)>
   </div>
 </SideEffect(DocumentTitle)>
 `;
diff --git a/tests/js/spec/views/accountEmails.spec.jsx b/tests/js/spec/views/accountEmails.spec.jsx
index 9bd1a0c649..cb471bcac0 100644
--- a/tests/js/spec/views/accountEmails.spec.jsx
+++ b/tests/js/spec/views/accountEmails.spec.jsx
@@ -2,6 +2,8 @@ import React from 'react';
 import {shallow, mount} from 'enzyme';
 
 import {Client} from 'app/api';
+import {ThemeProvider} from 'emotion-theming';
+import theme from 'app/utils/theme';
 import AccountEmails from 'app/views/settings/account/accountEmails';
 
 jest.mock('scroll-to-element', () => {});
@@ -30,7 +32,12 @@ describe('AccountEmails', function() {
       statusCode: 200,
     });
 
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    let wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <AccountEmails />
+      </ThemeProvider>,
+      TestStubs.routerContext()
+    );
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -58,7 +65,12 @@ describe('AccountEmails', function() {
       statusCode: 200,
     });
 
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    let wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <AccountEmails />
+      </ThemeProvider>,
+      TestStubs.routerContext()
+    );
 
     expect(mock).not.toHaveBeenCalled();
 
@@ -85,7 +97,12 @@ describe('AccountEmails', function() {
       method: 'POST',
       statusCode: 200,
     });
-    let wrapper = mount(<AccountEmails />, TestStubs.routerContext());
+    let wrapper = mount(
+      <ThemeProvider theme={theme}>
+        <AccountEmails />
+      </ThemeProvider>,
+      TestStubs.routerContext()
+    );
 
     expect(mock).not.toHaveBeenCalled();
 
