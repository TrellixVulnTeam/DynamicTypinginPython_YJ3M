commit d2ab3cde1c721eedd44c072d4b4f1f826b7c7a0e
Author: Chris Clark <christopherchristopherclark@gmail.com>
Date:   Tue Dec 19 10:32:52 2017 -0800

    Feat(Account Settings): Layout and Notifications Panel (#6756)

diff --git a/.storybook/config.js b/.storybook/config.js
index eed5453f15..dd202e7400 100644
--- a/.storybook/config.js
+++ b/.storybook/config.js
@@ -1,8 +1,13 @@
+import React from 'react';
 import {configure, setAddon, addDecorator} from '@storybook/react';
+import {ThemeProvider} from 'emotion-theming';
 import infoAddon, {setDefaults} from '@storybook/addon-info';
 import {withKnobs} from '@storybook/addon-knobs';
+import theme from '../src/sentry/static/sentry/app/utils/theme';
 import './storybook.less';
 
+const withTheme = storyFn => <ThemeProvider theme={theme}>{storyFn()}</ThemeProvider>;
+
 setDefaults({
   inline: true,
   header: false,
@@ -10,6 +15,7 @@ setDefaults({
 });
 setAddon(infoAddon);
 
+addDecorator(withTheme);
 addDecorator(withKnobs);
 // Use webpack's require.context to load modules dynamically
 // From https://storybook.js.org/basics/writing-stories/
diff --git a/.storybook/webpack.config.js b/.storybook/webpack.config.js
index dcb596382b..6b9b4d2646 100644
--- a/.storybook/webpack.config.js
+++ b/.storybook/webpack.config.js
@@ -1,8 +1,17 @@
 const path = require('path');
 const webpack = require('webpack');
 
-const staticPath = path.resolve(__dirname, '..', 'src', 'sentry', 'static', 'sentry');
-const componentPath = path.resolve(staticPath, 'app', 'components');
+const staticPath = path.resolve(
+  __dirname,
+  '..',
+  'src',
+  'sentry',
+  'static',
+  'sentry',
+  'app'
+);
+const componentPath = path.resolve(staticPath, 'components');
+const newSettingsPath = path.resolve(staticPath, 'views', 'settings', 'components');
 
 const sentryConfig = require('../webpack.config');
 const appConfig = sentryConfig[0];
@@ -63,6 +72,8 @@ module.exports = {
     extensions: appConfig.resolve.extensions,
     alias: Object.assign({}, appConfig.resolve.alias, {
       'sentry-ui': componentPath,
+      'settings-ui': newSettingsPath,
+      'application-root': staticPath,
     }),
   },
 };
diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index dfdb56a0cf..8602a8afda 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -4,11 +4,18 @@ import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import {action} from '@storybook/addon-actions';
 
-import {Form, TextField, PasswordField, BooleanField} from 'sentry-ui/forms';
+import {
+  Form as LegacyForm,
+  TextField,
+  PasswordField,
+  BooleanField,
+} from 'sentry-ui/forms';
+import RadioField from 'settings-ui/forms/radioField';
+import Form from 'settings-ui/forms/form';
 
 class UndoButton extends React.Component {
   static contextTypes = {
-    form: PropTypes.object
+    form: PropTypes.object,
   };
 
   handleClick = e => {
@@ -17,23 +24,27 @@ class UndoButton extends React.Component {
   };
 
   render() {
-    return <button type="button" onClick={this.handleClick}> Undo</button>;
+    return (
+      <button type="button" onClick={this.handleClick}>
+        Undo
+      </button>
+    );
   }
 }
 
 // eslint-disable-next-line
 storiesOf('Forms/Form', module)
-  .add('empty', withInfo('Empty form')(() => <Form onSubmit={action('submit')} />))
+  .add('empty', withInfo('Empty form')(() => <LegacyForm onSubmit={action('submit')} />))
   .add(
     'with Cancel',
     withInfo('Adds a "Cancel" button when `onCancel` is defined')(() => (
-      <Form onCancel={action('cancel')} onSubmit={action('submit')} />
+      <LegacyForm onCancel={action('cancel')} onSubmit={action('submit')} />
     ))
   )
   .add(
     'save on blur and undo',
     withInfo('Saves on blur and has undo')(() => (
-      <Form saveOnBlur allowUndo>
+      <LegacyForm saveOnBlur allowUndo>
         <TextField
           name="name"
           label="Team Name"
@@ -42,7 +53,7 @@ storiesOf('Forms/Form', module)
         />
         <TextField name="slug" label="Short name" placeholder="e.g. api-team" />
         <UndoButton />
-      </Form>
+      </LegacyForm>
     ))
   );
 
@@ -50,7 +61,7 @@ storiesOf('Forms/Fields', module)
   .add(
     'TextField',
     withInfo('Simple text input')(() => (
-      <Form saveOnBlur allowUndo>
+      <LegacyForm saveOnBlur allowUndo>
         <TextField
           name="name"
           label="Team Name"
@@ -58,22 +69,34 @@ storiesOf('Forms/Fields', module)
           required
         />
         <TextField name="slug" label="Short name" placeholder="e.g. api-team" />
-      </Form>
+      </LegacyForm>
     ))
   )
   .add(
     'PasswordField',
     withInfo('Password input')(() => (
-      <Form>
+      <LegacyForm>
         <PasswordField hasSavedValue name="password" label="password" />
-      </Form>
+      </LegacyForm>
     ))
   )
   .add(
     'BooleanField',
     withInfo('Boolean field (i.e. checkbox)')(() => (
-      <Form>
+      <LegacyForm>
         <BooleanField name="field" />
+      </LegacyForm>
+    ))
+  )
+  .add(
+    'RadioField',
+    withInfo('Radio field')(() => (
+      <Form>
+        <RadioField
+          name="radio"
+          label="Radio Field"
+          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+        />
       </Form>
     ))
   );
diff --git a/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
new file mode 100644
index 0000000000..715e3f4c2e
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/accountNotificationSettings.jsx
@@ -0,0 +1,71 @@
+const forms = [
+  {
+    title: 'Alerts',
+    fields: [
+      {
+        name: 'projectAlerts',
+        type: 'boolean',
+        label: 'Send Me Project Alerts',
+        help: 'Alerts are defined in [Project] » Project Settings » Alerts » Rules.',
+      },
+    ],
+  },
+
+  {
+    title: 'Workflow Notifications',
+    fields: [
+      {
+        name: 'workflowNotifications',
+        type: 'radio',
+        label: 'Send Me Workflow Notifications',
+        choices: [[0, 'Always'], [1, 'Only On Issues I Subscribe To'], [2, 'Never']],
+        help: 'E.g. changes in issue assignment, resolution status, and comments.',
+      },
+    ],
+  },
+
+  {
+    title: 'Weekly Reports',
+    fields: [
+      {
+        name: 'weeklyReports',
+        type: 'boolean',
+        label: 'Send Me Weekly Reports',
+        help: "Reports contain a summary of what's happened within your organization.",
+      },
+    ],
+  },
+
+  {
+    title: 'Deploy Notifications',
+    fields: [
+      {
+        name: 'deployNotifications',
+        type: 'radio',
+        label: 'Send Me Deploy Notifications',
+        choices: [[0, 'Always'], [1, 'Only On Deploys With My Commits'], [2, 'Never']],
+        help: 'Deploy emails include release, environment and commit overviews.',
+      },
+    ],
+  },
+
+  {
+    title: 'My Activity',
+    fields: [
+      {
+        name: 'personalActivity',
+        type: 'boolean',
+        label: 'Notify Me About My Own Activity',
+        help: 'Enable this to recieve notifications about your own actions on Sentry.',
+      },
+      {
+        name: 'claimUnassignedIssues',
+        type: 'boolean',
+        label: "Claim Unassigned Issues I've Resolved",
+        help: "You'll recieve notifications about any changes that happen afterwords.",
+      },
+    ],
+  },
+];
+
+export default forms;
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0c1fe7d580..89db71ee9e 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -3,6 +3,9 @@ import React from 'react';
 
 import AccountAuthorizations from './views/accountAuthorizations';
 import AccountLayout from './views/accountLayout';
+import AccountSettingsLayout from './views/settings/account/accountSettingsLayout';
+import AccountNotifications from './views/settings/account/accountNotifications';
+import AccountEmails from './views/settings/account/accountEmails';
 import AdminBuffer from './views/adminBuffer';
 import AdminLayout from './views/adminLayout';
 import AdminOrganizations from './views/adminOrganizations';
@@ -226,6 +229,23 @@ const orgSettingsRoutes = [
   />,
 ];
 
+const accountSettingsRoutes = [
+  <IndexRedirect key="account-settings-index" to="notifications/" />,
+
+  <Route
+    key="notifications/"
+    path="notifications/"
+    name="Notifications"
+    component={errorHandler(AccountNotifications)}
+  />,
+  <Route
+    key="emails/"
+    path="emails/"
+    name="Emails"
+    component={errorHandler(AccountEmails)}
+  />,
+];
+
 const projectSettingsRoutes = [
   <IndexRedirect key="projects-index" to="settings/" />,
   <Route
@@ -368,6 +388,9 @@ function routes() {
         component={errorHandler(SettingsWrapper)}
       >
         <IndexRoute component={errorHandler(SettingsIndex)} />
+        <Route path="account/" name="Account" component={AccountSettingsLayout}>
+          {accountSettingsRoutes}
+        </Route>
         <Route path="organization/">
           <IndexRoute component={errorHandler(OrganizationPicker)} />
 
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
new file mode 100644
index 0000000000..cb511fcc74
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountEmails.jsx
@@ -0,0 +1,13 @@
+import React from 'react';
+
+import SettingsPageHeader from '../components/settingsPageHeader';
+
+const AccountEmails = () => {
+  return (
+    <div>
+      <SettingsPageHeader label="Emails" />
+    </div>
+  );
+};
+
+export default AccountEmails;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx b/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
new file mode 100644
index 0000000000..339602cf85
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountNotifications.jsx
@@ -0,0 +1,21 @@
+import React from 'react';
+
+import SettingsPageHeader from '../components/settingsPageHeader';
+import accountNotificationFields from '../../../data/forms/accountNotificationSettings';
+import Form from '../components/forms/form';
+import JsonForm from '../components/forms/jsonForm';
+
+const AccountNotifications = React.createClass({
+  render() {
+    return (
+      <div>
+        <SettingsPageHeader label="Notifications" />
+        <Form>
+          <JsonForm location={this.props.location} forms={accountNotificationFields} />
+        </Form>
+      </div>
+    );
+  },
+});
+
+export default AccountNotifications;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
new file mode 100644
index 0000000000..306ee88f31
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsLayout.jsx
@@ -0,0 +1,19 @@
+import React from 'react';
+
+import SettingsLayout from '../settingsLayout';
+import AccountSettingsNavigation from './accountSettingsNavigation';
+
+class AccountSettingsLayout extends React.Component {
+  render() {
+    return (
+      <SettingsLayout
+        {...this.props}
+        renderNavigation={() => <AccountSettingsNavigation {...this.props} />}
+      >
+        {this.props.children}
+      </SettingsLayout>
+    );
+  }
+}
+
+export default AccountSettingsLayout;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.jsx
new file mode 100644
index 0000000000..6089d5417d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSettingsNavigation.jsx
@@ -0,0 +1,10 @@
+import React from 'react';
+
+import SettingsNavigation from '../components/settingsNavigation';
+import navigationConfiguration from './navigationConfiguration';
+
+const AccountSettingsNavigation = () => {
+  return <SettingsNavigation navigationObjects={navigationConfiguration} />;
+};
+
+export default AccountSettingsNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
new file mode 100644
index 0000000000..514e8799e0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
@@ -0,0 +1,21 @@
+import {t} from '../../../locale';
+
+const pathPrefix = '/settings/account';
+
+const accountNavigation = [
+  {
+    name: t('Account'),
+    items: [
+      {
+        path: `${pathPrefix}/notifications/`,
+        title: t('Notifications'),
+      },
+      {
+        path: `${pathPrefix}/emails/`,
+        title: t('Emails'),
+      },
+    ],
+  },
+];
+
+export default accountNavigation;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index 1cb34eef8f..af5ec3a14c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -11,12 +11,13 @@ import Select2Field from './select2Field';
 // import Select2TextField from './select2TextField';
 import TextField from './textField';
 import TextareaField from './textareaField';
+import RadioField from './radioField';
 
 export default class FieldFromConfig extends React.Component {
   static propTypes = {
     field: PropTypes.shape({
       name: PropTypes.string,
-      type: PropTypes.oneOf(['string', 'array', 'boolean']),
+      type: PropTypes.oneOf(['string', 'array', 'boolean', 'radio']),
       required: PropTypes.bool,
       multiline: PropTypes.bool,
       label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
@@ -90,6 +91,8 @@ export default class FieldFromConfig extends React.Component {
         // return <Select2FieldAutocomplete {...props} />;
         // }
         return <Select2Field {...props} />;
+      case 'radio':
+        return <RadioField {...props} />;
       default:
         return null;
     }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
index d0179416eb..8e280839c3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField.jsx
@@ -4,13 +4,14 @@ import {css} from 'emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import ReactDOM from 'react-dom';
-import styled, {keyframes} from 'react-emotion';
+import styled from 'react-emotion';
 
 import {defined} from '../../../../utils';
 import FormState from '../../../../components/forms/state';
 import IconCheckmarkSm from '../../../../icons/icon-checkmark-sm';
 import IconWarningSm from '../../../../icons/icon-warning-sm';
 import Spinner from './styled/spinner';
+import {pulse, fadeOut} from './styled/animations';
 
 const SettingsPanelItemWrapper = styled(({highlighted, ...props}) => <Flex {...props} />)`
   padding: 15px 20px;
@@ -78,26 +79,6 @@ const SettingsErrorReason = styled.div`
   box-shadow: 0 0 0 1px rgba(64, 11, 54, 0.15), 0 4px 20px 0 rgba(64, 11, 54, 0.36);
   z-index: 10000;
 `;
-const fadeOut = keyframes`
-  0% {
-    opacity: 1;
-  }
-  100% {
-    opacity: 0;
-  }
-`;
-
-const pulse = keyframes`
-  0% {
-    transform: scale(1,1);
-  }
-  50% {
-    transform: scale(1.15, 1.15);
-  }
-  100% {
-    transform: scale(1, 1);
-  }
-`;
 
 const SettingsError = styled.div`
   color: ${p => p.theme.redDark};
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
new file mode 100644
index 0000000000..13729b74bd
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/radioField.jsx
@@ -0,0 +1,36 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import RadioGroup from './radioGroup';
+import InputField from './inputField';
+
+class RadioField extends React.Component {
+  static propTypes = {
+    id: PropTypes.number,
+    value: PropTypes.string,
+    choices: PropTypes.arrayOf(PropTypes.array),
+  };
+
+  onChange = (id, onChange, onBlur, e) => {
+    onChange(id, e);
+    onBlur(id, e);
+  };
+
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        field={({onChange, onBlur, value, disabled, ...props}) => (
+          <RadioGroup
+            choices={props.choices}
+            value={value == '' ? null : value}
+            label={props.label}
+            onChange={(id, e) => this.onChange(id, onChange, onBlur, e)}
+          />
+        )}
+      />
+    );
+  }
+}
+
+export default RadioField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
new file mode 100644
index 0000000000..61e3a279cf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/radioGroup.jsx
@@ -0,0 +1,78 @@
+import React from 'react';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+
+import {growIn} from './styled/animations';
+
+const RadioGroup = ({value, choices, label, onChange}) => {
+  const isSelected = id => {
+    return value ? value === id : id === 0;
+  };
+
+  return (
+    <div role="radiogroup" aria-labelledby={label}>
+      {(choices || []).map(([id, name], index) => (
+        <RadioLineItem
+          key={index}
+          onClick={e => onChange(id, e)}
+          role="radio"
+          index={index}
+          tabIndex={isSelected(id) ? 0 : -1}
+          aria-checked={isSelected(id)}
+        >
+          <RadioLineButton>
+            {isSelected(id) && <RadioLineButtonFill animate={value !== ''} />}
+          </RadioLineButton>
+          <RadioLineText>{name}</RadioLineText>
+        </RadioLineItem>
+      ))}
+    </div>
+  );
+};
+
+RadioGroup.propTypes = {
+  value: PropTypes.number,
+  choices: PropTypes.arrayOf(PropTypes.array),
+  label: PropTypes.string,
+  onChange: PropTypes.func,
+};
+
+const RadioLineButton = styled.div`
+  width: 1.5em;
+  height: 1.5em;
+  position: relative;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  border: 1px solid ${p => p.theme.borderLight};
+  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.04);
+`;
+
+const RadioLineItem = styled.div`
+  display: flex;
+  align-items: center;
+  cursor: pointer;
+  margin-top: ${p => (p.index ? '0.5em' : '0')};
+  outline: none;
+
+  :focus ${RadioLineButton} {
+    border: 1px solid ${p => p.theme.borderDark};
+  }
+`;
+
+const RadioLineButtonFill = styled.div`
+  width: 54%;
+  height: 54%;
+  border-radius: 50%;
+  background-color: ${p => p.theme.green};
+  animation: ${p => (p.animate ? `0.2s ${growIn} ease` : 'none')};
+`;
+
+const RadioLineText = styled.div`
+  margin-left: 0.5em;
+  font-size: 0.875em;
+  font-weight: bold;
+`;
+
+export default RadioGroup;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/styled/animations.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/styled/animations.jsx
new file mode 100644
index 0000000000..8eb4fa88bb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/styled/animations.jsx
@@ -0,0 +1,31 @@
+import {keyframes} from 'react-emotion';
+
+export const growIn = keyframes`
+  0% {
+    transform: scale(0);
+  }
+  100% {
+    transform: scale(1);
+  }
+`;
+
+export const fadeOut = keyframes`
+  0% {
+    opacity: 1;
+  }
+  100% {
+    opacity: 0;
+  }
+`;
+
+export const pulse = keyframes`
+  0% {
+    transform: scale(1,1);
+  }
+  50% {
+    transform: scale(1.15, 1.15);
+  }
+  100% {
+    transform: scale(1, 1);
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/project/navgationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/project/navgationConfiguration.jsx
rename to src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
index 01ca234e9b..d3cbca580d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import HookStore from '../../../stores/hookStore';
 import ProjectState from '../../../mixins/projectState';
 import SettingsNavigation from '../components/settingsNavigation';
-import getConfiguration from './navgationConfiguration';
+import getConfiguration from './navigationConfiguration';
 
 const ProjectSettingsNavigation = React.createClass({
   mixins: [ProjectState],
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index c695185690..20b2c9c0fb 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -338,6 +338,7 @@ urlpatterns += patterns(
         name='sentry-accept-project-transfer'),
 
     url(r'^settings/$', react_page_view),
+    url(r'^settings/account/$', react_page_view),
 
     # Organizations
     url(r'^(?P<organization_slug>[\w_-]+)/$',
diff --git a/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
new file mode 100644
index 0000000000..1a5d64f894
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/radioGroup.spec.jsx.snap
@@ -0,0 +1,101 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RadioGroup render() can select a different item 1`] = `
+<div
+  role="radiogroup"
+>
+  <Styled(div)
+    aria-checked={false}
+    index={0}
+    key="0"
+    onClick={[Function]}
+    role="radio"
+    tabIndex={-1}
+  >
+    <Styled(div) />
+    <Styled(div)>
+      Choice One
+    </Styled(div)>
+  </Styled(div)>
+  <Styled(div)
+    aria-checked={false}
+    index={1}
+    key="1"
+    onClick={[Function]}
+    role="radio"
+    tabIndex={-1}
+  >
+    <Styled(div) />
+    <Styled(div)>
+      Choice Two
+    </Styled(div)>
+  </Styled(div)>
+  <Styled(div)
+    aria-checked={true}
+    index={2}
+    key="2"
+    onClick={[Function]}
+    role="radio"
+    tabIndex={0}
+  >
+    <Styled(div)>
+      <Styled(div)
+        animate={true}
+      />
+    </Styled(div)>
+    <Styled(div)>
+      Choice Three
+    </Styled(div)>
+  </Styled(div)>
+</div>
+`;
+
+exports[`RadioGroup render() renders 1`] = `
+<div
+  role="radiogroup"
+>
+  <Styled(div)
+    aria-checked={true}
+    index={0}
+    key="0"
+    onClick={[Function]}
+    role="radio"
+    tabIndex={0}
+  >
+    <Styled(div)>
+      <Styled(div)
+        animate={true}
+      />
+    </Styled(div)>
+    <Styled(div)>
+      Choice One
+    </Styled(div)>
+  </Styled(div)>
+  <Styled(div)
+    aria-checked={false}
+    index={1}
+    key="1"
+    onClick={[Function]}
+    role="radio"
+    tabIndex={-1}
+  >
+    <Styled(div) />
+    <Styled(div)>
+      Choice Two
+    </Styled(div)>
+  </Styled(div)>
+  <Styled(div)
+    aria-checked={false}
+    index={2}
+    key="2"
+    onClick={[Function]}
+    role="radio"
+    tabIndex={-1}
+  >
+    <Styled(div) />
+    <Styled(div)>
+      Choice Three
+    </Styled(div)>
+  </Styled(div)>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/radioGroup.spec.jsx b/tests/js/spec/components/forms/radioGroup.spec.jsx
new file mode 100644
index 0000000000..1ae6474a7b
--- /dev/null
+++ b/tests/js/spec/components/forms/radioGroup.spec.jsx
@@ -0,0 +1,48 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+
+import RadioGroup from 'app/views/settings/components/forms/radioGroup';
+
+describe('RadioGroup', function() {
+  describe('render()', function() {
+    it('renders', function() {
+      const wrapper = shallow(
+        <RadioGroup
+          name="radio"
+          value={0}
+          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+        />
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('can select a different item', function() {
+      const wrapper = shallow(
+        <RadioGroup
+          name="radio"
+          value={2}
+          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+        />
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('calls onChange when clicked', function() {
+      const mock = jest.fn();
+
+      const wrapper = mount(
+        <RadioGroup
+          name="radio"
+          value={0}
+          choices={[[0, 'Choice One'], [1, 'Choice Two'], [2, 'Choice Three']]}
+          onChange={mock}
+        />
+      );
+      wrapper
+        .find('[role="radio"]')
+        .last()
+        .simulate('click');
+      expect(mock).toBeCalledWith(expect.any(Number), expect.any(Object));
+    });
+  });
+});
