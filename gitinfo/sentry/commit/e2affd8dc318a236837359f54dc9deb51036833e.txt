commit e2affd8dc318a236837359f54dc9deb51036833e
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 15 14:36:25 2017 -0700

    admin: various improvements
    
    - adjust stackedbarchart to use series
    - remove flot usage (replace with stackedbarchart)
    - convert queue (admin) to react

diff --git a/CHANGES b/CHANGES
index ad41343d5a..41dda54987 100644
--- a/CHANGES
+++ b/CHANGES
@@ -4,6 +4,9 @@ Version 8.18 (Unreleased)
 - Expanded resolution options to allow current and explicit versions.
 - Removed support for global dsyms
 - Added proguard support
+- Removed support for global dsyms.
+- Moved Queue admin page to React.
+- Replaced usage of jQuery Flot library with internal graphs.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/internal_queue_tasks.py b/src/sentry/api/endpoints/internal_queue_tasks.py
new file mode 100644
index 0000000000..5eeff9e421
--- /dev/null
+++ b/src/sentry/api/endpoints/internal_queue_tasks.py
@@ -0,0 +1,15 @@
+
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.celery import app
+from sentry.api.base import Endpoint
+from sentry.api.permissions import SuperuserPermission
+
+
+class InternalQueueTasksEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission,)
+
+    def get(self, request):
+        return Response(sorted(app.tasks.keys()))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index b84864e843..5c91af5c90 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -27,6 +27,7 @@ from .endpoints.group_tagkey_details import GroupTagKeyDetailsEndpoint
 from .endpoints.group_tagkey_values import GroupTagKeyValuesEndpoint
 from .endpoints.group_user_reports import GroupUserReportsEndpoint
 from .endpoints.index import IndexEndpoint
+from .endpoints.internal_queue_tasks import InternalQueueTasksEndpoint
 from .endpoints.internal_stats import InternalStatsEndpoint
 from .endpoints.legacy_project_redirect import LegacyProjectRedirectEndpoint
 from .endpoints.organization_access_request_details import OrganizationAccessRequestDetailsEndpoint
@@ -488,6 +489,8 @@ urlpatterns = patterns(
     url(r'^internal/options/$',
         SystemOptionsEndpoint.as_view(),
         name='sentry-api-0-system-options'),
+    url(r'^internal/queue/tasks/$',
+        InternalQueueTasksEndpoint.as_view()),
     url(r'^internal/stats/$',
         InternalStatsEndpoint.as_view(),
         name='sentry-api-0-internal-stats'),
diff --git a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
index c46414a8e2..3286f4727d 100644
--- a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
@@ -78,44 +78,14 @@ const EventsPerHour = React.createClass({
   },
 
   formatData(rawData) {
-    // Do this grossness to make sure data is zero filled
-    let allXValues = {};
-    let valueLookup = {};
-    this.STAT_OPTS.forEach(stat => {
-      valueLookup[stat] = {};
-      rawData[stat] &&
-        rawData[stat].forEach(point => {
-          allXValues[point[0]] = null;
-          valueLookup[stat][point[0]] = point[1];
-        });
+    return this.STAT_OPTS.map(stat => {
+      return {
+        data: rawData[stat].map(([x, y]) => {
+          return {x, y};
+        }),
+        label: stat
+      };
     });
-    allXValues = Object.keys(allXValues);
-
-    let chartData = [];
-    allXValues.forEach(x => {
-      let point = {x: +x, y: []};
-      // convert received --> accepted
-      let acceptedY =
-        valueLookup.received[x] - valueLookup.rejected[x] - valueLookup.blacklisted[x];
-      point.y.push(acceptedY);
-      ['rejected', 'blacklisted'].forEach(stat => {
-        let yVal = valueLookup[stat][x] || 0;
-        point.y.push(yVal);
-      });
-      chartData.push(point);
-    });
-
-    chartData.sort((a, b) => {
-      if (a.x < b.x) {
-        return -1;
-      }
-      if (a.x > b.x) {
-        return 1;
-      }
-      return 0;
-    });
-
-    return chartData;
   },
 
   render() {
@@ -135,8 +105,9 @@ const EventsPerHour = React.createClass({
         </Link>
         <h6 className="nav-header">{t('Events Per Hour')}</h6>
         <StackedBarChart
-          points={this.state.formattedData}
+          series={this.state.formattedData}
           className="sparkline dashboard-sparkline"
+          label="events"
           barClasses={this.STAT_OPTS}
         />
       </div>
diff --git a/src/sentry/static/sentry/app/components/flotChart.jsx b/src/sentry/static/sentry/app/components/flotChart.jsx
deleted file mode 100644
index efb9875f63..0000000000
--- a/src/sentry/static/sentry/app/components/flotChart.jsx
+++ /dev/null
@@ -1,159 +0,0 @@
-import React from 'react';
-import ReactDOM from 'react-dom';
-import jQuery from 'jquery';
-import moment from 'moment';
-
-// we need flot and the various plugins
-require('flot');
-require('flot/jquery.flot.stack');
-require('flot/jquery.flot.time');
-require('flot-tooltip/jquery.flot.tooltip');
-
-let timeUnitSize = {
-  second: 1000,
-  minute: 60 * 1000,
-  hour: 60 * 60 * 1000,
-  day: 24 * 60 * 60 * 1000,
-  month: 30 * 24 * 60 * 60 * 1000,
-  quarter: 3 * 30 * 24 * 60 * 60 * 1000,
-  year: 365.2425 * 24 * 60 * 60 * 1000
-};
-
-let numberWithCommas = function(x) {
-  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
-};
-
-let buildTooltipHandler = function(series) {
-  return function(_l, xval, _y, flotItem) {
-    let yval;
-    let content =
-      '<h6>' + moment(parseInt(xval, 10)).format('MMMM D YYYY HH:mm z') + '</h6>';
-    for (let i = 0; i < series.length; i++) {
-      // we're assuming series are identical
-      yval = numberWithCommas(series[i].data[flotItem.dataIndex][1] || 0);
-      content +=
-        '<strong style="color:' +
-        series[i].color +
-        '">' +
-        series[i].label +
-        ':</strong> ' +
-        yval +
-        '<br>';
-    }
-    return content;
-  };
-};
-
-let tickFormatter = (value, axis) => {
-  let d = moment(parseInt(value, 10));
-
-  let t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];
-  let span = axis.max - axis.min;
-  let fmt;
-
-  if (t < timeUnitSize.minute) {
-    fmt = 'LT';
-  } else if (t < timeUnitSize.day) {
-    fmt = 'LT';
-    if (span < 2 * timeUnitSize.day) {
-      fmt = 'LT';
-    } else {
-      fmt = 'MMM D LT';
-    }
-  } else if (t < timeUnitSize.month) {
-    fmt = 'MMM D';
-  } else if (t < timeUnitSize.year) {
-    if (span < timeUnitSize.year) {
-      fmt = 'MMM';
-    } else {
-      fmt = 'MMM YY';
-    }
-  } else {
-    fmt = 'YY';
-  }
-
-  return d.format(fmt);
-};
-
-const FlotChart = React.createClass({
-  propTypes: {
-    plotData: React.PropTypes.array,
-    style: React.PropTypes.object
-  },
-
-  componentDidMount() {
-    this.renderChart();
-    jQuery(window).resize(this.renderChart);
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    // TODO(dcramer): improve logic here
-    return nextProps.plotData.length > 0;
-  },
-
-  componentDidUpdate() {
-    this.renderChart();
-  },
-
-  componentWillUnmount() {
-    jQuery(window).unbind('resize', this.renderChart);
-  },
-
-  renderChart(options) {
-    let series = this.props.plotData;
-    let plotOptions = {
-      xaxis: {
-        mode: 'time',
-        minTickSize: [1, 'day'],
-        tickFormatter: tickFormatter
-      },
-      yaxis: {
-        min: 0,
-        minTickSize: 1,
-        tickFormatter: value => {
-          if (value > 999999) {
-            return value / 1000000 + 'mm';
-          }
-          if (value > 999) {
-            return value / 1000 + 'k';
-          }
-          return value;
-        }
-      },
-      tooltip: true,
-      tooltipOpts: {
-        content: buildTooltipHandler(series),
-        defaultTheme: false
-      },
-      grid: {
-        show: true,
-        hoverable: true,
-        backgroundColor: '#ffffff',
-        borderColor: '#DEE3E9',
-        borderWidth: 2,
-        tickColor: '#DEE3E9'
-      },
-      hoverable: false,
-      legend: {
-        noColumns: series.length,
-        position: 'nw'
-      },
-      lines: {show: false}
-    };
-
-    let chart = ReactDOM.findDOMNode(this.refs.chartNode);
-    jQuery.plot(chart, series, plotOptions);
-  },
-
-  render() {
-    return (
-      <figure
-        className={this.props.className || 'chart'}
-        style={this.props.style}
-        ref="chartNode"
-      />
-    );
-  }
-});
-
-export default FlotChart;
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index 4258193c9b..5e91004873 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -137,7 +137,7 @@ const GroupReleaseChart = React.createClass({
         <StackedBarChart
           points={points}
           height={40}
-          className="sparkline"
+          label="events"
           markers={markers}
           barClasses={['release', 'environment', 'inactive']}
           tooltip={this.renderTooltip}
diff --git a/src/sentry/static/sentry/app/components/internalStatChart.jsx b/src/sentry/static/sentry/app/components/internalStatChart.jsx
new file mode 100644
index 0000000000..f7fbcbc274
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/internalStatChart.jsx
@@ -0,0 +1,95 @@
+/*eslint getsentry/jsx-needs-il8n:0*/
+import React from 'react';
+import underscore from 'underscore';
+
+import ApiMixin from '../mixins/apiMixin';
+import BarChart from '../components/barChart';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+
+export default React.createClass({
+  propTypes: {
+    since: React.PropTypes.number.isRequired,
+    resolution: React.PropTypes.string.isRequired,
+    stat: React.PropTypes.string.isRequired,
+    label: React.PropTypes.string,
+    height: React.PropTypes.number
+  },
+
+  mixins: [ApiMixin],
+
+  getDefaultProps() {
+    return {
+      height: 150
+    };
+  },
+
+  getInitialState() {
+    return {
+      error: false,
+      loading: true,
+      data: null
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (!underscore.isEqual(nextProps, this.props)) {
+      this.setState(
+        {
+          loading: true
+        },
+        this.fetchData
+      );
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return this.state.loading !== nextState.loading;
+  },
+
+  fetchData() {
+    this.api.request('/internal/stats/', {
+      method: 'GET',
+      data: {
+        since: this.props.since,
+        resolution: this.props.resolution,
+        key: this.props.stat
+      },
+      success: data => {
+        this.setState({
+          data: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: data => {
+        this.setState({
+          error: true
+        });
+      }
+    });
+  },
+
+  getChartPoints() {
+    return this.state.data.map(([x, y]) => {
+      return {x, y};
+    });
+  },
+
+  render() {
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    return (
+      <BarChart
+        points={this.getChartPoints()}
+        label={this.props.label}
+        height={this.props.height}
+      />
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index 333597f8e7..dc46a295a3 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -1,11 +1,12 @@
 import moment from 'moment';
+import underscore from 'underscore';
 import React from 'react';
-import {intcomma, valueIsEqual} from '../utils';
 import TooltipMixin from '../mixins/tooltip';
 import ConfigStore from '../stores/configStore.jsx';
 
 const StackedBarChart = React.createClass({
   propTypes: {
+    // TODO(dcramer): DEPRECATED, use series instead
     points: React.PropTypes.arrayOf(
       React.PropTypes.shape({
         x: React.PropTypes.number.isRequired,
@@ -13,6 +14,17 @@ const StackedBarChart = React.createClass({
         label: React.PropTypes.string
       })
     ),
+    series: React.PropTypes.arrayOf(
+      React.PropTypes.shape({
+        data: React.PropTypes.arrayOf(
+          React.PropTypes.shape({
+            x: React.PropTypes.number.isRequired,
+            y: React.PropTypes.number
+          })
+        ),
+        label: React.PropTypes.string
+      })
+    ),
     interval: React.PropTypes.string,
     height: React.PropTypes.number,
     width: React.PropTypes.number,
@@ -47,7 +59,8 @@ const StackedBarChart = React.createClass({
           let pointIdx = this.getAttribute('data-point-index');
           let tooltipFunc = chart.props.tooltip || chart.renderTooltip;
 
-          if (pointIdx) return tooltipFunc(chart.props.points[pointIdx], pointIdx, chart);
+          if (pointIdx)
+            return tooltipFunc(chart.state.pointIndex[pointIdx], pointIdx, chart);
           else return this.getAttribute('data-title');
         }
       };
@@ -55,18 +68,48 @@ const StackedBarChart = React.createClass({
   ],
 
   statics: {
-    getInterval(points) {
-      return points.length > 1 ? points[1].x - points[0].x : null;
+    getInterval(series) {
+      // TODO(dcramer): not guaranteed correct
+      return series.length && series[0].data.length > 1
+        ? series[0].data[1].x - series[0].data[0].x
+        : null;
+    },
+
+    pointsToSeries(points) {
+      let series = [];
+      points.forEach((p, pIdx) => {
+        p.y.forEach((y, yIdx) => {
+          if (!series[yIdx]) {
+            series[yIdx] = {data: []};
+          }
+          series[yIdx].data.push({x: p.x, y: y});
+        });
+      });
+      return series;
+    },
+
+    pointIndex(series) {
+      let points = {};
+      series.forEach(s => {
+        s.data.forEach(p => {
+          if (!points[p.x]) {
+            points[p.x] = {y: [], x: p.x};
+          }
+          points[p.x].y.push(p.y);
+        });
+      });
+      return points;
     }
   },
 
   getDefaultProps() {
     return {
-      className: '',
+      className: 'sparkline',
       height: null,
-      label: 'events',
+      label: '',
       placement: 'bottom',
       points: [],
+      series: [],
       markers: [],
       width: null,
       barClasses: ['chart-bar'],
@@ -75,21 +118,44 @@ const StackedBarChart = React.createClass({
   },
 
   getInitialState() {
+    // massage points
+    let series = this.props.series;
+    if (this.props.points.length) {
+      if (series.length) {
+        throw new Error('Only one of [points|series] should be specified.');
+      }
+
+      series = StackedBarChart.pointsToSeries(this.props.points);
+    }
+
     return {
-      interval: StackedBarChart.getInterval(this.props.points)
+      series: series,
+      pointIndex: StackedBarChart.pointIndex(series),
+      interval: StackedBarChart.getInterval(series)
     };
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.points) {
+    if (nextProps.points || nextProps.series) {
+      let series = nextProps.series;
+      if (nextProps.points.length) {
+        if (series.length) {
+          throw new Error('Only one of [points|series] should be specified.');
+        }
+
+        series = StackedBarChart.pointsToSeries(nextProps.points);
+      }
+
       this.setState({
-        interval: StackedBarChart.getInterval(nextProps.points)
+        series: series,
+        pointIndex: StackedBarChart.pointIndex(series),
+        interval: StackedBarChart.getInterval(series)
       });
     }
   },
 
   shouldComponentUpdate(nextProps, nextState) {
-    return !valueIsEqual(this.props, nextProps, true);
+    return !underscore.isEqual(this.props, nextProps, true);
   },
 
   use24Hours() {
@@ -122,7 +188,7 @@ const StackedBarChart = React.createClass({
   timeLabelAsDay(point) {
     let timeMoment = moment(point.x * 1000);
 
-    return '<span>' + timeMoment.format('LL') + '</span>';
+    return `<span>${timeMoment.format('LL')}</span>`;
   },
 
   timeLabelAsRange(interval, point) {
@@ -159,17 +225,7 @@ const StackedBarChart = React.createClass({
   },
 
   maxPointValue() {
-    let maxval = 10;
-    this.props.points.forEach(point => {
-      let totalY = 0;
-      point.y.forEach(y => {
-        totalY += y;
-      });
-      if (totalY > maxval) {
-        maxval = totalY;
-      }
-    });
-    return maxval;
+    return Math.max(10, ...this.state.series.map(s => Math.max(...s.data.map(p => p.y))));
   },
 
   renderMarker(marker) {
@@ -194,27 +250,26 @@ const StackedBarChart = React.createClass({
 
   renderTooltip(point, pointIdx) {
     let timeLabel = this.getTimeLabel(point);
-    let totalY = 0;
-    for (let i = 0; i < point.y.length; i++) {
-      totalY += point.y[i];
-    }
+    let totalY = point.y.reduce((a, b) => a + b);
     let title =
       '<div style="width:130px">' +
       `<div class="time-label">${timeLabel}</div>` +
-      `<div class="value-label">${intcomma(totalY)} ${this.props.label}</div>` +
       '</div>';
-    if (point.label) {
-      title += '<div>(' + point.label + ')</div>';
+    if (this.props.label) {
+      title += `<div class="value-label">${totalY.toLocaleString()} ${this.props.label}</div>`;
     }
+    point.y.forEach((y, i) => {
+      let s = this.state.series[i];
+      if (s.label) {
+        title += `<div><span style="color:${s.color}">${s.label}:</span> ${(y || 0)
+          .toLocaleString()}</div>`;
+      }
+    });
     return title;
   },
 
-  renderChartColumn(pointIdx, maxval, pointWidth) {
-    let point = this.props.points[pointIdx];
-    let totalY = 0;
-    for (let i = 0; i < point.y.length; i++) {
-      totalY += point.y[i];
-    }
+  renderChartColumn(point, maxval, pointWidth) {
+    let totalY = point.y.reduce((a, b) => a + b);
     let totalPct = totalY / maxval;
     let prevPct = 0;
     let pts = point.y.map((y, i) => {
@@ -223,7 +278,11 @@ const StackedBarChart = React.createClass({
         <span
           key={i}
           className={this.props.barClasses[i]}
-          style={{height: pct + '%', bottom: prevPct + '%'}}>
+          style={{
+            height: pct + '%',
+            bottom: prevPct + '%',
+            backgroundColor: this.state.series[i].color || null
+          }}>
           {y}
         </span>
       );
@@ -234,7 +293,7 @@ const StackedBarChart = React.createClass({
       <a
         key={point.x}
         className="chart-column tip"
-        data-point-index={pointIdx}
+        data-point-index={point.x}
         style={{width: pointWidth, height: this.props.height}}>
         {pts}
       </a>
@@ -242,20 +301,31 @@ const StackedBarChart = React.createClass({
   },
 
   renderChart() {
-    let points = this.props.points;
-    let pointWidth = this.floatFormat(100.0 / points.length, 2) + '%';
+    let {pointIndex, series} = this.state;
+    let totalPoints = Math.max(...series.map(s => s.data.length));
+    let pointWidth = this.floatFormat(100.0 / totalPoints, 2) + '%';
 
     let maxval = this.maxPointValue();
 
     let markers = this.props.markers.slice();
 
+    // group points, then resort
+    let points = Object.keys(pointIndex)
+      .map(k => {
+        let p = pointIndex[k];
+        return {x: p.x, y: p.y};
+      })
+      .sort((a, b) => {
+        return a.x - b.x;
+      });
+
     let children = [];
-    points.forEach((point, pointIdx) => {
+    points.forEach(point => {
       while (markers.length && markers[0].x <= point.x) {
         children.push(this.renderMarker(markers.shift()));
       }
 
-      children.push(this.renderChartColumn(pointIdx, maxval, pointWidth));
+      children.push(this.renderChartColumn(point, maxval, pointWidth));
     });
 
     // in bizarre case where markers never got rendered, render them last
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 4cdb140743..8212274bfa 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -28,7 +28,7 @@ const GroupChart = React.createClass({
 
     return (
       <LazyLoad>
-        <BarChart points={chartData} className="sparkline" />
+        <BarChart points={chartData} label="events" />
       </LazyLoad>
     );
   }
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index b74905e3da..5113bac9e7 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -102,7 +102,6 @@ export default {
     Count: require('./components/count').default,
     DateTime: require('./components/dateTime').default,
     DropdownLink: require('./components/dropdownLink').default,
-    FlotChart: require('./components/flotChart').default,
     Form: require('./components/forms/form').default,
     FormState: require('./components/forms/index').FormState,
     HookStore: require('./stores/hookStore').default,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 9e7d389b92..8b11a75d1e 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -11,11 +11,12 @@ import ApiApplicationDetails from './views/apiApplicationDetails';
 import ApiLayout from './views/apiLayout';
 import ApiNewToken from './views/apiNewToken';
 import ApiTokens from './views/apiTokens';
-import Admin from './views/admin';
 import AdminBuffer from './views/adminBuffer';
+import AdminLayout from './views/adminLayout';
 import AdminOrganizations from './views/adminOrganizations';
 import AdminOverview from './views/adminOverview';
 import AdminProjects from './views/adminProjects';
+import AdminQueue from './views/adminQueue';
 import AdminSettings from './views/adminSettings';
 import AdminUsers from './views/adminUsers';
 import App from './views/app';
@@ -119,11 +120,12 @@ function routes() {
 
       <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
 
-      <Route path="/manage/" component={errorHandler(Admin)}>
+      <Route path="/manage/" component={errorHandler(AdminLayout)}>
         <IndexRoute component={errorHandler(AdminOverview)} />
         <Route path="buffer/" component={errorHandler(AdminBuffer)} />
         <Route path="organizations/" component={errorHandler(AdminOrganizations)} />
         <Route path="projects/" component={errorHandler(AdminProjects)} />
+        <Route path="queue/" component={errorHandler(AdminQueue)} />
         <Route path="settings/" component={errorHandler(AdminSettings)} />
         <Route path="users/" component={errorHandler(AdminUsers)} />
         {hooksAdminRoutes}
diff --git a/src/sentry/static/sentry/app/views/adminBuffer.jsx b/src/sentry/static/sentry/app/views/adminBuffer.jsx
index e41ca9c780..fc92da9a6b 100644
--- a/src/sentry/static/sentry/app/views/adminBuffer.jsx
+++ b/src/sentry/static/sentry/app/views/adminBuffer.jsx
@@ -1,84 +1,7 @@
 /*eslint getsentry/jsx-needs-il8n:0*/
 import React from 'react';
 
-import ApiMixin from '../mixins/apiMixin';
-import FlotChart from '../components/flotChart';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-
-const InternalChart = React.createClass({
-  propTypes: {
-    since: React.PropTypes.number.isRequired,
-    resolution: React.PropTypes.string.isRequired,
-    stat: React.PropTypes.string.isRequired,
-    label: React.PropTypes.string
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      error: false,
-      loading: true,
-      data: null
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    this.api.request('/internal/stats/', {
-      method: 'GET',
-      data: {
-        since: this.props.since,
-        resolution: this.props.resolution,
-        key: this.props.stat
-      },
-      success: data => {
-        this.setState({
-          data: data,
-          loading: false,
-          error: false
-        });
-      },
-      error: data => {
-        this.setState({
-          error: true
-        });
-      }
-    });
-  },
-
-  getChartPoints() {
-    let points = this.state.data.map(point => {
-      return [point[0] * 1000, point[1]];
-    });
-
-    return [
-      {
-        data: points,
-        label: this.props.label,
-        color: 'rgba(86, 175, 232, 1)',
-        shadowSize: 0,
-        stack: true,
-        lines: {
-          lineWidth: 2,
-          show: true,
-          fill: true
-        }
-      }
-    ];
-  },
-
-  render() {
-    if (this.state.loading) return <LoadingIndicator />;
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
-  }
-});
+import InternalStatChart from '../components/internalStatChart';
 
 const AdminBuffer = React.createClass({
   getInitialState() {
@@ -114,7 +37,7 @@ const AdminBuffer = React.createClass({
             <h4>Updates Processed</h4>
           </div>
           <div className="box-content with-padding">
-            <InternalChart
+            <InternalStatChart
               since={this.state.since}
               resolution={this.state.resolution}
               stat="jobs.finished.sentry.tasks.process_buffer.process_incr"
@@ -128,7 +51,7 @@ const AdminBuffer = React.createClass({
             <h4>Revoked Updates</h4>
           </div>
           <div className="box-content with-padding">
-            <InternalChart
+            <InternalStatChart
               since={this.state.since}
               resolution={this.state.resolution}
               stat="buffer.revoked"
diff --git a/src/sentry/static/sentry/app/views/admin/index.jsx b/src/sentry/static/sentry/app/views/adminLayout.jsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/admin/index.jsx
rename to src/sentry/static/sentry/app/views/adminLayout.jsx
index df6830745a..c0d7768019 100644
--- a/src/sentry/static/sentry/app/views/admin/index.jsx
+++ b/src/sentry/static/sentry/app/views/adminLayout.jsx
@@ -2,12 +2,12 @@
 import DocumentTitle from 'react-document-title';
 import React from 'react';
 
-import Footer from '../../components/footer';
-import Sidebar from '../../components/sidebar';
-import HookStore from '../../stores/hookStore';
-import ListLink from '../../components/listLink';
+import Footer from '../components/footer';
+import Sidebar from '../components/sidebar';
+import HookStore from '../stores/hookStore';
+import ListLink from '../components/listLink';
 
-const Admin = React.createClass({
+export default React.createClass({
   getInitialState() {
     // Allow injection via getsentry et all
     let hooksManage = [];
@@ -37,7 +37,7 @@ const Admin = React.createClass({
                   <ul className="nav nav-stacked">
                     <ListLink index={true} to="/manage/">Overview</ListLink>
                     <ListLink index={true} to="/manage/buffer/">Buffer</ListLink>
-                    <li><a href="/manage/queue/">Queue</a></li>
+                    <ListLink index={true} to="/manage/queue/">Queue</ListLink>
                     <li><a href="/manage/status/environment/">Environment</a></li>
                     <li><a href="/manage/status/packages/">Packages</a></li>
                     <li><a href="/manage/status/mail/">Mail</a></li>
@@ -65,5 +65,3 @@ const Admin = React.createClass({
     );
   }
 });
-
-export default Admin;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
index 5dd4171103..cbaafb599a 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -1,13 +1,14 @@
 import React from 'react';
 
 import ApiMixin from '../../mixins/apiMixin';
-import FlotChart from '../../components/flotChart';
+import StackedBarChart from '../../components/stackedBarChart';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
-const ApiChart = React.createClass({
+export default React.createClass({
   propTypes: {
-    since: React.PropTypes.number.isRequired
+    since: React.PropTypes.number.isRequired,
+    resolution: React.PropTypes.string.isRequired
   },
 
   mixins: [ApiMixin],
@@ -79,48 +80,28 @@ const ApiChart = React.createClass({
 
   processRawSeries(series) {
     return series.map(item => {
-      return [item[0] * 1000, item[1]];
+      return {x: item[0], y: item[1]};
     });
   },
 
-  getChartPoints() {
+  getChartSeries() {
     let {rawData} = this.state;
     return [
       {
         data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),
         color: 'rgb(86, 175, 232)',
         shadowSize: 0,
-        label: '4xx',
-        stack: true,
-        lines: {
-          lineWidth: 2,
-          show: true,
-          fill: true
-        }
+        label: '4xx'
       },
       {
         data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),
         color: 'rgb(244, 63, 32)',
-        shadowSize: 0,
-        label: '5xx',
-        stack: true,
-        lines: {
-          lineWidth: 2,
-          show: true,
-          fill: true
-        }
+        label: '5xx'
       },
       {
         data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),
-        label: '2xx',
         color: 'rgb(78, 222, 73)',
-        shadowSize: 0,
-        stack: true,
-        lines: {
-          lineWidth: 2,
-          show: true,
-          fill: true
-        }
+        label: '2xx'
       }
     ];
   },
@@ -128,8 +109,6 @@ const ApiChart = React.createClass({
   render() {
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-    return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
+    return <StackedBarChart series={this.getChartSeries()} height={150} />;
   }
 });
-
-export default ApiChart;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
index 06fb48dfe8..7a4ade6af9 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -1,12 +1,11 @@
-import jQuery from 'jquery';
 import React from 'react';
 
 import ApiMixin from '../../mixins/apiMixin';
-import FlotChart from '../../components/flotChart';
+import StackedBarChart from '../../components/stackedBarChart';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
-const EventChart = React.createClass({
+export default React.createClass({
   propTypes: {
     since: React.PropTypes.number.isRequired,
     resolution: React.PropTypes.string.isRequired
@@ -76,10 +75,10 @@ const EventChart = React.createClass({
     let sReceived = {};
     let sRejected = {};
     let aReceived = [0, 0]; // received, points
-    jQuery.each(rawData['events.total'], function(idx, point) {
+    rawData['events.total'].forEach((point, idx) => {
       let dReceived = point[1];
       let dRejected = rawData['events.dropped'][idx][1];
-      let ts = point[0] * 1000;
+      let ts = point[0];
       if (sReceived[ts] === undefined) {
         sReceived[ts] = dReceived;
         sRejected[ts] = dRejected;
@@ -102,45 +101,31 @@ const EventChart = React.createClass({
         avgRate: parseInt(aReceived[0] / aReceived[1] / 60, 10)
       },
       stats: {
-        rejected: jQuery.map(sRejected, function(value, ts) {
-          return [[ts, value || null]];
+        rejected: Object.keys(sRejected).map(ts => {
+          return {x: ts, y: sRejected[ts] || null};
         }),
-        accepted: jQuery.map(sReceived, function(value, ts) {
+        accepted: Object.keys(sReceived).map(ts => {
           // total number of events accepted (received - rejected)
-          return [[ts, value - sRejected[ts]]];
+          return {x: ts, y: sReceived[ts] - sRejected[ts]};
         })
       },
       loading: false
     });
   },
 
-  getChartPoints() {
+  getChartSeries() {
     let {stats} = this.state;
 
     return [
       {
         data: stats.accepted,
         label: 'Accepted',
-        color: 'rgba(86, 175, 232, 1)',
-        shadowSize: 0,
-        stack: true,
-        lines: {
-          lineWidth: 2,
-          show: true,
-          fill: true
-        }
+        color: 'rgba(86, 175, 232, 1)'
       },
       {
         data: stats.rejected,
         color: 'rgba(244, 63, 32, 1)',
-        shadowSize: 0,
-        label: 'Dropped',
-        stack: true,
-        lines: {
-          lineWidth: 2,
-          show: true,
-          fill: true
-        }
+        label: 'Dropped'
       }
     ];
   },
@@ -148,9 +133,6 @@ const EventChart = React.createClass({
   render() {
     if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
+    return <StackedBarChart series={this.getChartSeries()} height={150} />;
   }
 });
-
-export default EventChart;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/index.jsx b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
index b9e885cccf..bd6e06a974 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/index.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 import ApiChart from './apiChart';
 import EventChart from './eventChart';
 
-const AdminOverview = React.createClass({
+export default React.createClass({
   getInitialState() {
     return {
       since: new Date().getTime() / 1000 - 3600 * 24 * 7,
@@ -41,5 +41,3 @@ const AdminOverview = React.createClass({
     );
   }
 });
-
-export default AdminOverview;
diff --git a/src/sentry/static/sentry/app/views/adminQueue.jsx b/src/sentry/static/sentry/app/views/adminQueue.jsx
new file mode 100644
index 0000000000..677ee675e8
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminQueue.jsx
@@ -0,0 +1,153 @@
+/*eslint getsentry/jsx-needs-il8n:0*/
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import InternalStatChart from '../components/internalStatChart';
+import {Select2Field} from '../components/forms';
+
+export default React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      timeWindow: '1h',
+      since: new Date().getTime() / 1000 - 3600 * 24 * 7,
+      resolution: '1h',
+      loading: true,
+      error: false,
+      taskName: null,
+      taskList: []
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    this.api.request('/internal/queue/tasks/', {
+      method: 'GET',
+      success: data => {
+        this.setState({
+          taskList: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: data => {
+        this.setState({
+          error: true
+        });
+      }
+    });
+  },
+
+  changeWindow(timeWindow) {
+    let seconds;
+    if (timeWindow === '1h') {
+      seconds = 3600;
+    } else if (timeWindow === '1d') {
+      seconds = 3600 * 24;
+    } else if (timeWindow === '1w') {
+      seconds = 3600 * 24 * 7;
+    } else {
+      throw new Error('Invalid time window');
+    }
+    this.setState({
+      since: new Date().getTime() / 1000 - seconds,
+      timeWindow
+    });
+  },
+
+  changeTask(value) {
+    this.setState({activeTask: value});
+  },
+
+  render() {
+    let {activeTask, taskList} = this.state;
+
+    return (
+      <div>
+        <div className="btn-group pull-right">
+          {['1h', '1d', '1w'].map(r => {
+            return (
+              <a
+                className={`btn btn-sm ${r == this.state.timeWindow ? 'btn-primary' : 'btn-default'}`}
+                onClick={() => this.changeWindow(r)}
+                key={r}>
+                {r}
+              </a>
+            );
+          })}
+        </div>
+
+        <h3 className="no-border">Queue Overview</h3>
+
+        <div className="box">
+          <div className="box-header"><h3>Global Throughput</h3></div>
+          <div className="box-content with-padding">
+            <InternalStatChart
+              since={this.state.since}
+              resolution={this.state.resolution}
+              stat="jobs.all.started"
+              label="jobs started"
+            />
+          </div>
+        </div>
+
+        <h3 className="no-border">Task Details</h3>
+
+        {this.state.loading
+          ? <LoadingIndicator />
+          : this.state.error
+              ? <LoadingError onRetry={this.fetchData} />
+              : <div>
+                  <div>
+                    <label>Show details for task:</label>
+                    <Select2Field
+                      name="task"
+                      onChange={this.changeTask}
+                      value={activeTask}
+                      allowClear={true}
+                      choices={[''].concat(...taskList).map(t => [t, t])}
+                    />
+                  </div>
+                  {activeTask
+                    ? <div>
+                        <div className="box box-mini" key="jobs.started">
+                          <div className="box-header">
+                            Jobs Started <small>{activeTask}</small>
+                          </div>
+                          <div className="box-content with-padding">
+                            <InternalStatChart
+                              since={this.state.since}
+                              resolution={this.state.resolution}
+                              stat={`jobs.started.${this.state.activeTask}`}
+                              label="jobs"
+                              height={100}
+                            />
+                          </div>
+                        </div>
+                        <div className="box box-mini" key="jobs.finished">
+                          <div className="box-header">
+                            Jobs Finished <small>{activeTask}</small>
+                          </div>
+                          <div className="box-content with-padding">
+                            <InternalStatChart
+                              since={this.state.since}
+                              resolution={this.state.resolution}
+                              stat={`jobs.finished.${this.state.activeTask}`}
+                              label="jobs"
+                              height={100}
+                            />
+                          </div>
+                        </div>
+                      </div>
+                    : null}
+                </div>}
+      </div>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index e48b88e16c..631a0537c5 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -262,8 +262,8 @@ const OrganizationStats = React.createClass({
                     <StackedBarChart
                       points={this.state.orgStats}
                       height={150}
+                      label="events"
                       barClasses={['accepted', 'rate-limited', 'black-listed']}
-                      className="sparkline"
                       tooltip={this.renderTooltip}
                     />
                   </div>}
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index f0df21cbfd..3ad25a1c9e 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -144,7 +144,7 @@ const ExpandedTeamList = React.createClass({
         </td>
         <td className="align-right project-chart">
           {chartData &&
-            <LazyLoad><BarChart points={chartData} className="sparkline" /></LazyLoad>}
+            <LazyLoad><BarChart points={chartData} label="events" /></LazyLoad>}
         </td>
       </tr>
     );
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index 32e000ee13..56d37f20de 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -99,7 +99,7 @@ const ProjectChart = React.createClass({
 
     return (
       <div className="chart-wrapper">
-        <BarChart points={points} markers={markers} className="sparkline" />
+        <BarChart points={points} markers={markers} label="events" />
         <small className="date-legend">
           {moment(this.props.dateSince * 1000).format('LL')}
         </small>
diff --git a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
index efc1f67c94..4cea490731 100644
--- a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
+++ b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
@@ -74,6 +74,7 @@ const DataForwardingStats = React.createClass({
                   <StackedBarChart
                     points={this.state.stats}
                     height={50}
+                    label="events"
                     barClasses={['accepted']}
                     className="sparkline m-b-0"
                   />
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index 58d884fa4e..03c300c3bd 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -500,6 +500,7 @@ const ProjectFilters = React.createClass({
                     <StackedBarChart
                       points={this.state.stats}
                       height={50}
+                      label="events"
                       barClasses={['filtered']}
                       className="sparkline m-b-0"
                     />
diff --git a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
index 962f83ea3b..1e7f7d3b67 100644
--- a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
@@ -109,6 +109,7 @@ const KeyStats = React.createClass({
                   <StackedBarChart
                     points={this.state.stats}
                     height={100}
+                    label="events"
                     barClasses={['accepted', 'rate-limited']}
                     className="sparkline m-b-0"
                     tooltip={this.renderTooltip}
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 27c824c254..fcbde12e97 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3247,14 +3247,6 @@ ul.radio-inputs {
   padding: 4px 10px;
 }
 
-#flotTip {
-  background-color: @tooltip-bg;
-  border-radius: @border-radius-base;
-  max-width: 200px;
-  padding: 10px;
-  color: @tooltip-color;
-}
-
 /**
 * Tag List
 * ============================================================================
diff --git a/src/sentry/status_checks/celery_alive.py b/src/sentry/status_checks/celery_alive.py
index acdff7a1fb..f08cbdf4f9 100644
--- a/src/sentry/status_checks/celery_alive.py
+++ b/src/sentry/status_checks/celery_alive.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from time import time
 
 from django.conf import settings
-from django.core.urlresolvers import reverse
 
 from sentry import options
 from sentry.utils.http import absolute_uri
@@ -35,6 +34,6 @@ class CeleryAliveCheck(StatusCheck):
         return [
             Problem(
                 message,
-                url=absolute_uri(reverse('sentry-admin-queue')),
+                url=absolute_uri('/manage/queue/'),
             ),
         ]
diff --git a/src/sentry/templates/sentry/admin-queue.html b/src/sentry/templates/sentry/admin-queue.html
deleted file mode 100644
index 3ed66e6cef..0000000000
--- a/src/sentry/templates/sentry/admin-queue.html
+++ /dev/null
@@ -1,169 +0,0 @@
-{% extends "sentry/bases/admin.html" %}
-
-{% block admin-nav-queue %} class="active"{% endblock %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Queue" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  <ul class="nav nav-tabs pull-right" id="duration">
-    <li class="active"><a href="#">1h</a></li>
-    <li><a href="#">1d</a></li>
-    <li><a href="#">1w</a></li>
-  </ul>
-
-  <h3 class="no-border">Queue Overview</h3>
-
-  <div class="box">
-    <div class="box-header"><h3>Global Throughput</h3></div>
-    <div class="box-content with-padding">
-      <div class="chart-loader" style="height:200px" data-metric="jobs.all.started" data-label="Jobs started"></div>
-    </div>
-  </div>
-
-  <h3 class="no-border">Tasks</h3>
-
-  <div class="row">
-    {% for task_name in task_list %}
-      <div class="col-md-6">
-        <div class="box box-mini">
-          <div class="box-header">{{ task_name }}</div>
-          <div class="box-content with-padding">
-            <div class="chart-loader" style="height:100px"
-               data-metric="jobs.started.{{ task_name }}"
-               data-label="Jobs started"></div>
-          </div>
-        </div>
-      </div>
-    {% endfor %}
-  </div>
-
-  <script>
-  $(function(){
-    var selectedDuration = $("#duration .active a").text();
-    $('#duration a').click(function(e){
-      e.preventDefault();
-      var $el = $(this);
-      $el.parents('ul').find('li').removeClass('active');
-      $el.parent().addClass('active');
-      selectedDuration = $el.text();
-      redrawCharts();
-    });
-
-    var redrawCharts = function(){
-      $('.chart-loader').each(function(){
-        var chart = this;
-        var $chart = $(chart);
-        var chartType = $chart.data('chart');
-        var metric = $chart.data('metric');
-        var endpoint = '{{ URL_PREFIX }}/api/0/internal/stats/';
-        var since = new Date().getTime() / 1000;
-        var resolution;
-
-        switch(selectedDuration) {
-          case '1h':
-            since -= 3600;
-            resolution = '10s';
-            break;
-          case '1d':
-            since -= 3600 * 24;
-            resolution = '1h';
-            break;
-          case '1w':
-            since -= 3600 * 24 * 7;
-            resolution = '1h';
-            break;
-          default:
-            throw new Error('Invalid duration: ' + selectedDuration);
-        }
-
-        $chart.html(
-          '<div class="loading">' +
-            '<div className="loading-mask"></div>' +
-            '<div className="loading-indicator"></div>' +
-            '<div className="loading-message">Loading</div>' +
-          '</div>'
-        );
-
-        $.ajax({
-          url: endpoint,
-          type: 'get',
-          dataType: 'json',
-          data: {
-            since: since,
-            resolution: resolution,
-            key: metric
-          },
-          success: function(data){
-            renderChart(chart, {
-              label: $chart.data('label'),
-              points: processData(data)
-            });
-          },
-          error: function(data) {
-            $chart.html('<div class="error">There was an error loading statistics.</div>');
-          }
-        });
-      });
-    };
-
-    redrawCharts();
-
-    var processData = function(points) {
-      var result = [];
-      for (var i = 0; i < points.length; i++) {
-        var point = points[i];
-        var ts = point[0] * 1000;
-        result.push([ts, point[1]]);
-      }
-      return result;
-    };
-
-    var renderChart = function(parent, data) {
-      var points = [
-        {
-          data: data.points,
-          label: data.label,
-          // color: 'rgba(86, 175, 232, 1)',
-          shadowSize: 0,
-          stack: true,
-          lines: {
-            lineWidth: 2,
-            show: true,
-            fill: true
-          }
-        }
-      ];
-
-      ReactDOM.render(React.createFactory(Sentry.FlotChart)({
-        className: "chart",
-        plotData: points
-      }), parent);
-    }
-  });
-  </script>
-
-  <style>
-  .task-list {
-    margin-left: 0;
-    padding-left: 0;
-  }
-  .task-list li {
-    width: 49%;
-    display: inline-block;
-    border-bottom: 1px solid #ddd;
-    margin: 0 0 5px;
-    padding: 0 0 5px;
-  }
-  .task-list li strong {
-    display: block;
-  }
-  .task-list .flot-y-axis,
-  .task-list .flot-x-axis,
-  .task-list .legend {
-    display: none !important;
-  }
-  </style>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/admin.html b/src/sentry/templates/sentry/bases/admin.html
index 19971abab1..6fbd8ce246 100644
--- a/src/sentry/templates/sentry/bases/admin.html
+++ b/src/sentry/templates/sentry/bases/admin.html
@@ -11,7 +11,7 @@
     <ul class="nav nav-stacked">
         <li><a href="{% absolute_uri '/manage/' %}">{% trans "Overview" %}</a></li>
         <li><a href="{% absolute_uri '/manage/buffer/' %}">{% trans "Buffer" %}</a></li>
-        <li{% block admin-nav-queue %}{% endblock %}><a href="{% url 'sentry-admin-queue' %}">{% trans "Queue" %}</a></li>
+        <li><a href="{% absolute_uri '/manage/queue/' %}">{% trans "Queue" %}</a></li>
         <li{% block admin-nav-status %}{% endblock %}><a href="{% url 'sentry-admin-status' %}">{% trans "Environment" %}</a></li>
         <li{% block admin-nav-packages %}{% endblock %}><a href="{% url 'sentry-admin-packages-status' %}">{% trans "Packages" %}</a></li>
         <li{% block admin-nav-mail %}{% endblock %}><a href="{% url 'sentry-admin-mail-status' %}">{% trans "Mail" %}</a></li>
diff --git a/src/sentry/web/frontend/admin_queue.py b/src/sentry/web/frontend/admin_queue.py
deleted file mode 100644
index e9e820b11c..0000000000
--- a/src/sentry/web/frontend/admin_queue.py
+++ /dev/null
@@ -1,16 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.celery import app
-from sentry.web.frontend.base import BaseView
-
-
-class AdminQueueView(BaseView):
-    def has_permission(self, request):
-        return request.is_superuser()
-
-    def handle(self, request):
-        context = {
-            'task_list': sorted(app.tasks.keys()),
-        }
-
-        return self.respond('sentry/admin-queue.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 76dd2b950b..f116220629 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -18,7 +18,6 @@ from sentry.web.frontend.accept_organization_invite import \
     AcceptOrganizationInviteView
 from sentry.web.frontend.account_security import AccountSecurityView
 from sentry.web.frontend.account_notification import AccountNotificationView
-from sentry.web.frontend.admin_queue import AdminQueueView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.twofactor import TwoFactorAuthView, u2f_appid
 from sentry.web.frontend.auth_logout import AuthLogoutView
@@ -214,8 +213,6 @@ urlpatterns += patterns(
     url(r'^account/', generic_react_page_view),
 
     # Admin
-    url(r'^manage/queue/$', AdminQueueView.as_view(),
-        name='sentry-admin-queue'),
     url(r'^manage/status/environment/$', admin.status_env,
         name='sentry-admin-status'),
     url(r'^manage/status/packages/$', admin.status_packages,
diff --git a/tests/js/spec/components/eventsPerHour.spec.jsx b/tests/js/spec/components/eventsPerHour.spec.jsx
index bcccc2c0b5..010589c62d 100644
--- a/tests/js/spec/components/eventsPerHour.spec.jsx
+++ b/tests/js/spec/components/eventsPerHour.spec.jsx
@@ -13,8 +13,18 @@ describe('EventsPerHour', function() {
     sinon.stub(EventsPerHour.prototype, 'fetchData');
     let eventsPerHour = shallow(<EventsPerHour />).instance();
     expect(eventsPerHour.formatData(data)).toEqual([
-      {x: 1461099600, y: [28867, 2867, 0]},
-      {x: 1461103200, y: [34048, 2742, 0]}
+      {
+        data: [{x: 1461099600, y: 31734}, {x: 1461103200, y: 36790}],
+        label: 'received'
+      },
+      {
+        data: [{x: 1461099600, y: 2867}, {x: 1461103200, y: 2742}],
+        label: 'rejected'
+      },
+      {
+        data: [{x: 1461099600, y: 0}, {x: 1461103200, y: 0}],
+        label: 'blacklisted'
+      }
     ]);
   });
 });
diff --git a/tests/sentry/api/endpoints/test_internal_queue_tasks.py b/tests/sentry/api/endpoints/test_internal_queue_tasks.py
new file mode 100644
index 0000000000..233de36f81
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_internal_queue_tasks.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+
+
+class InternalQueueTasksListTest(APITestCase):
+    def test_anonymous(self):
+        self.login_as(self.user)
+        url = '/api/0/internal/queue/tasks/'
+        response = self.client.get(url)
+        assert response.status_code == 200
+        assert 'sentry.tasks.send_beacon' in response.data
diff --git a/webpack.config.js b/webpack.config.js
index 339a26bfb6..e90d4843b2 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -60,10 +60,6 @@ var entry = {
     'react-sparklines',
     'reflux',
     'select2',
-    'flot/jquery.flot',
-    'flot/jquery.flot.stack',
-    'flot/jquery.flot.time',
-    'flot-tooltip/jquery.flot.tooltip',
     'vendor/simple-slider/simple-slider',
     'underscore',
     'ios-device-list'
@@ -149,7 +145,6 @@ var config = {
       'window.jQuery': 'jquery',
       'root.jQuery': 'jquery',
       Raven: 'raven-js',
-      ReactDOM: 'react-dom',
       underscore: 'underscore',
       _: 'underscore'
     }),
@@ -171,8 +166,6 @@ var config = {
   ],
   resolve: {
     alias: {
-      flot: path.join(__dirname, staticPrefix, 'vendor', 'jquery-flot'),
-      'flot-tooltip': path.join(__dirname, staticPrefix, 'vendor', 'jquery-flot-tooltip'),
       'sentry-locale': path.join(__dirname, 'src', 'sentry', 'locale')
     },
     modules: [path.join(__dirname, staticPrefix), 'node_modules'],
