commit 63ead024d208db7789b36aee596128892596591a
Author: Matte Noble <me@mattenoble.com>
Date:   Mon Apr 15 15:37:23 2019 -0700

    feat(app-platform): Analytics (#12718)
    
    Adds analytics recording for a set of events:
    
    - Sentry App Created
    - Sentry App Updated
    - Sentry App Deleted
    - Sentry App Installed
    - Sentry App Uninstalled
    - Sentry App Token Exchanged (authorize)
    - Sentry App Token Exchanged (refresh)

diff --git a/src/sentry/analytics/events/sentry_app_created.py b/src/sentry/analytics/events/sentry_app_created.py
new file mode 100644
index 0000000000..3acc2278bf
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_created.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppCreatedEvent(analytics.Event):
+    type = 'sentry_app.created'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(SentryAppCreatedEvent)
diff --git a/src/sentry/analytics/events/sentry_app_deleted.py b/src/sentry/analytics/events/sentry_app_deleted.py
new file mode 100644
index 0000000000..b9d56e1bc0
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_deleted.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppDeletedEvent(analytics.Event):
+    type = 'sentry_app.deleted'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(SentryAppDeletedEvent)
diff --git a/src/sentry/analytics/events/sentry_app_installed.py b/src/sentry/analytics/events/sentry_app_installed.py
new file mode 100644
index 0000000000..606d750596
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_installed.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppInstalledEvent(analytics.Event):
+    type = 'sentry_app.installed'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(SentryAppInstalledEvent)
diff --git a/src/sentry/analytics/events/sentry_app_token_exchanged.py b/src/sentry/analytics/events/sentry_app_token_exchanged.py
new file mode 100644
index 0000000000..d103b2018d
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_token_exchanged.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppTokenExchangedEvent(analytics.Event):
+    type = 'sentry_app.token_exchanged'
+
+    attributes = (
+        analytics.Attribute('sentry_app_installation_id'),
+        analytics.Attribute('exchange_type'),
+    )
+
+
+analytics.register(SentryAppTokenExchangedEvent)
diff --git a/src/sentry/analytics/events/sentry_app_uninstalled.py b/src/sentry/analytics/events/sentry_app_uninstalled.py
new file mode 100644
index 0000000000..c983e2f46c
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_uninstalled.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppUninstalledEvent(analytics.Event):
+    type = 'sentry_app.uninstalled'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(SentryAppUninstalledEvent)
diff --git a/src/sentry/analytics/events/sentry_app_updated.py b/src/sentry/analytics/events/sentry_app_updated.py
new file mode 100644
index 0000000000..dbc9d6932f
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_updated.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class SentryAppUpdatedEvent(analytics.Event):
+    type = 'sentry_app.updated'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(SentryAppUpdatedEvent)
diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index f6deafc32d..9c694f7721 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -37,6 +37,7 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
             result = serializer.object
 
             updated_app = Updater.run(
+                user=request.user,
                 sentry_app=sentry_app,
                 name=result.get('name'),
                 author=result.get('author'),
@@ -61,6 +62,7 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
 
         if sentry_app.status == SentryAppStatus.UNPUBLISHED:
             Destroyer.run(
+                user=request.user,
                 sentry_app=sentry_app,
                 request=request,
             )
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index aa537cf7ae..e89f1dc60c 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -31,6 +31,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
 
             sentry_app = Creator.run(
                 name=result.get('name'),
+                user=request.user,
                 author=result.get('author'),
                 organization=self._get_user_org(request),
                 scopes=result.get('scopes'),
diff --git a/src/sentry/mediators/mediator.py b/src/sentry/mediators/mediator.py
index 90936ba235..01409918b8 100644
--- a/src/sentry/mediators/mediator.py
+++ b/src/sentry/mediators/mediator.py
@@ -160,6 +160,7 @@ class Mediator(object):
         with obj.log():
             result = obj.call()
             obj.audit()
+            obj.record_analytics()
             return result
 
     def __init__(self, *args, **kwargs):
@@ -172,6 +173,10 @@ class Mediator(object):
         # used for creating audit log entries
         pass
 
+    def record_analytics(self):
+        # used to record data to Amplitude
+        pass
+
     def call(self):
         raise NotImplementedError
 
diff --git a/src/sentry/mediators/sentry_app_installations/creator.py b/src/sentry/mediators/sentry_app_installations/creator.py
index c2dee72b16..4f90dd142d 100644
--- a/src/sentry/mediators/sentry_app_installations/creator.py
+++ b/src/sentry/mediators/sentry_app_installations/creator.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from sentry import analytics
 from sentry.mediators import Mediator, Param, service_hooks
 from sentry.models import (
     AuditLogEntryEvent, ApiAuthorization, ApiGrant, SentryApp, SentryAppInstallation
@@ -72,6 +73,14 @@ class Creator(Mediator):
                 },
             )
 
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.installed',
+            user_id=self.user.id,
+            organization_id=self.organization.id,
+            sentry_app=self.slug,
+        )
+
     @memoize
     def api_application(self):
         return self.sentry_app.application
diff --git a/src/sentry/mediators/sentry_app_installations/destroyer.py b/src/sentry/mediators/sentry_app_installations/destroyer.py
index 2657b95aa9..e5cd042d87 100644
--- a/src/sentry/mediators/sentry_app_installations/destroyer.py
+++ b/src/sentry/mediators/sentry_app_installations/destroyer.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from sentry import analytics
 from sentry.mediators import Mediator, Param
 from sentry.mediators import service_hooks
 from sentry.models import AuditLogEntryEvent, ServiceHook
@@ -54,3 +55,11 @@ class Destroyer(Mediator):
                     'sentry_app': self.install.sentry_app.name,
                 },
             )
+
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.uninstalled',
+            user_id=self.user.id,
+            organization_id=self.install.organization_id,
+            sentry_app=self.install.sentry_app.slug,
+        )
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index 25c453c169..e4f6880fd1 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -4,6 +4,7 @@ import six
 
 from collections import Iterable
 
+from sentry import analytics
 from sentry.utils.audit import create_audit_entry
 from sentry.mediators import Mediator, Param
 from sentry.models import (AuditLogEntryEvent, ApiApplication, SentryApp, SentryAppComponent, User,)
@@ -21,13 +22,14 @@ class Creator(Mediator):
     schema = Param(dict, default=lambda self: {})
     overview = Param(six.string_types, required=False)
     request = Param('rest_framework.request.Request', required=False)
+    user = Param('sentry.models.User')
 
     def call(self):
         self.proxy = self._create_proxy_user()
         self.api_app = self._create_api_application()
-        self.app = self._create_sentry_app()
+        self.sentry_app = self._create_sentry_app()
         self._create_ui_components()
-        return self.app
+        return self.sentry_app
 
     def _create_proxy_user(self):
         return User.objects.create(
@@ -64,7 +66,7 @@ class Creator(Mediator):
         for element in schema.get('elements', []):
             SentryAppComponent.objects.create(
                 type=element['type'],
-                sentry_app_id=self.app.id,
+                sentry_app_id=self.sentry_app.id,
                 schema=element,
             )
 
@@ -76,6 +78,14 @@ class Creator(Mediator):
                 target_object=self.organization.id,
                 event=AuditLogEntryEvent.SENTRY_APP_ADD,
                 data={
-                    'sentry_app': self.app.name,
+                    'sentry_app': self.sentry_app.name,
                 },
             )
+
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.created',
+            user_id=self.user.id,
+            organization_id=self.organization.id,
+            sentry_app=self.sentry_app.slug,
+        )
diff --git a/src/sentry/mediators/sentry_apps/destroyer.py b/src/sentry/mediators/sentry_apps/destroyer.py
index 0cfdb11eb2..b93b64fbc0 100644
--- a/src/sentry/mediators/sentry_apps/destroyer.py
+++ b/src/sentry/mediators/sentry_apps/destroyer.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from sentry import analytics
 from sentry.mediators import Mediator, Param
 from sentry.mediators import sentry_app_installations
 from sentry.models import AuditLogEntryEvent
@@ -44,3 +45,11 @@ class Destroyer(Mediator):
                     'sentry_app': self.sentry_app.name,
                 },
             )
+
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.deleted',
+            user_id=self.user.id,
+            organization_id=self.sentry_app.owner.id,
+            sentry_app=self.sentry_app.slug,
+        )
diff --git a/src/sentry/mediators/sentry_apps/updater.py b/src/sentry/mediators/sentry_apps/updater.py
index 25cac5a838..8bd37e83f1 100644
--- a/src/sentry/mediators/sentry_apps/updater.py
+++ b/src/sentry/mediators/sentry_apps/updater.py
@@ -3,8 +3,9 @@ from __future__ import absolute_import
 import six
 
 from collections import Iterable
-from sentry.coreapi import APIError
 
+from sentry import analytics
+from sentry.coreapi import APIError
 from sentry.constants import SentryAppStatus
 from sentry.mediators import Mediator, Param
 from sentry.mediators import service_hooks
@@ -23,6 +24,7 @@ class Updater(Mediator):
     is_alertable = Param(bool, required=False)
     schema = Param(dict, required=False)
     overview = Param(six.string_types, required=False)
+    user = Param('sentry.models.User')
 
     def call(self):
         self._update_name()
@@ -103,3 +105,10 @@ class Updater(Mediator):
                 sentry_app_id=self.sentry_app.id,
                 schema=element,
             )
+
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.updated',
+            user_id=self.user.id,
+            sentry_app=self.sentry_app.slug,
+        )
diff --git a/src/sentry/mediators/token_exchange/grant_exchanger.py b/src/sentry/mediators/token_exchange/grant_exchanger.py
index bb3532c857..fa0dbed11d 100644
--- a/src/sentry/mediators/token_exchange/grant_exchanger.py
+++ b/src/sentry/mediators/token_exchange/grant_exchanger.py
@@ -5,6 +5,7 @@ import pytz
 
 from datetime import datetime
 
+from sentry import analytics
 from sentry.coreapi import APIUnauthorized
 from sentry.mediators import Mediator, Param
 from sentry.mediators.token_exchange.validator import Validator
@@ -29,13 +30,22 @@ class GrantExchanger(Mediator):
         # exchangable, so we delete it.
         self._delete_grant()
 
-        return ApiToken.objects.create(
+        self.token = ApiToken.objects.create(
             user=self.user,
             application=self.application,
             scope_list=self.sentry_app.scope_list,
             expires_at=token_expiration()
         )
 
+        return self.token
+
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.token_exchanged',
+            sentry_app_installation_id=self.install.id,
+            exchange_type='authorization',
+        )
+
     def _validate(self):
         Validator.run(
             install=self.install,
diff --git a/src/sentry/mediators/token_exchange/refresher.py b/src/sentry/mediators/token_exchange/refresher.py
index d000394c7c..1d875902d2 100644
--- a/src/sentry/mediators/token_exchange/refresher.py
+++ b/src/sentry/mediators/token_exchange/refresher.py
@@ -5,6 +5,7 @@ import pytz
 
 from datetime import datetime
 
+from sentry import analytics
 from sentry.coreapi import APIUnauthorized
 from sentry.mediators import Mediator, Param
 from sentry.mediators.token_exchange.validator import Validator
@@ -34,6 +35,13 @@ class Refresher(Mediator):
             expires_at=token_expiration(),
         )
 
+    def record_analytics(self):
+        analytics.record(
+            'sentry_app.token_exchanged',
+            sentry_app_installation_id=self.install.id,
+            exchange_type='refresh',
+        )
+
     def _validate(self):
         Validator.run(
             install=self.install,
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 3dab0344bf..cf54f5c914 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -673,7 +673,7 @@ class Factories(object):
 
     @staticmethod
     def create_sentry_app(name=None, author='Sentry', organization=None, published=False, scopes=(),
-                          webhook_url=None, **kwargs):
+                          webhook_url=None, user=None, **kwargs):
         if not name:
             name = petname.Generate(2, ' ', letters=10).title()
         if not organization:
@@ -682,6 +682,7 @@ class Factories(object):
             webhook_url = 'https://example.com/webhook'
 
         _kwargs = {
+            'user': (user or Factories.create_user()),
             'name': name,
             'organization': organization,
             'author': author,
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 4504c8d231..18d4f5ca97 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -158,7 +158,7 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
             organization=self.org,
         )
 
-        sentry_apps.Destroyer.run(sentry_app=sentry_app)
+        sentry_apps.Destroyer.run(sentry_app=sentry_app, user=self.user)
 
         response = self.client.put(
             self.url,
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index f3cba16071..157cfbf18b 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -140,7 +140,7 @@ class PostSentryAppsTest(SentryAppsTest):
             name='Foo Bar',
             organization=self.org,
         )
-        sentry_apps.Destroyer.run(sentry_app=sentry_app)
+        sentry_apps.Destroyer.run(sentry_app=sentry_app, user=self.user)
         response = self._post(**{'name': sentry_app.name})
         assert response.status_code == 422
         assert response.data == \
diff --git a/tests/sentry/mediators/sentry_app_installations/test_creator.py b/tests/sentry/mediators/sentry_app_installations/test_creator.py
index 41d8f88fd6..d721a2ad6f 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_creator.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_creator.py
@@ -97,3 +97,19 @@ class TestCreator(TestCase):
 
         assert install.api_grant is not None
         assert install.authorization is not None
+
+    @patch('sentry.analytics.record')
+    def test_records_analytics(self, record):
+        Creator.run(
+            organization=self.org,
+            slug='nulldb',
+            user=self.user,
+            request=self.make_request(user=self.user, method='GET'),
+        )
+
+        record.assert_called_with(
+            'sentry_app.installed',
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app='nulldb',
+        )
diff --git a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
index 95a2d70266..a1b126de4e 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import responses
 
 from django.db import connection
+from mock import patch
 
 from sentry.mediators.sentry_app_installations import Creator, Destroyer
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiAuthorization, ApiGrant, SentryAppInstallation, ServiceHook
@@ -105,3 +106,21 @@ class TestDestroyer(TestCase):
             [self.install.id])
 
         assert c.fetchone()[0] == 1
+
+    @responses.activate
+    @patch('sentry.analytics.record')
+    def test_records_analytics(self, record):
+        responses.add(responses.POST, 'https://example.com/webhook')
+
+        Destroyer.run(
+            install=self.install,
+            user=self.user,
+            request=self.make_request(user=self.user, method='GET'),
+        )
+
+        record.assert_called_with(
+            'sentry_app.uninstalled',
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app=self.install.sentry_app.slug,
+        )
diff --git a/tests/sentry/mediators/sentry_apps/test_creator.py b/tests/sentry/mediators/sentry_apps/test_creator.py
index d554d0e712..c0360b3e52 100644
--- a/tests/sentry/mediators/sentry_apps/test_creator.py
+++ b/tests/sentry/mediators/sentry_apps/test_creator.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from mock import patch
+
 from sentry.mediators.sentry_apps import Creator
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiApplication, SentryApp, SentryAppComponent, User
 from sentry.testutils import TestCase
@@ -11,6 +13,7 @@ class TestCreator(TestCase):
         self.org = self.create_organization(owner=self.user)
         self.creator = Creator(
             name='nulldb',
+            user=self.user,
             author='Sentry',
             organization=self.org,
             scopes=('project:read',),
@@ -80,6 +83,7 @@ class TestCreator(TestCase):
         request = self.make_request(user=self.user, method='GET')
         Creator.run(
             name='nulldb',
+            user=self.user,
             author='Sentry',
             organization=self.org,
             scopes=('project:read',),
@@ -100,3 +104,23 @@ class TestCreator(TestCase):
     def test_schema_with_no_elements(self):
         self.creator.schema = {'elements': []}
         assert self.creator.call()
+
+    @patch('sentry.analytics.record')
+    def test_records_analytics(self, record):
+        sentry_app = Creator.run(
+            name='nulldb',
+            user=self.user,
+            author='Sentry',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+            schema={'elements': [self.create_issue_link_schema()]},
+            request=self.make_request(user=self.user, method='GET')
+        )
+
+        record.assert_called_with(
+            'sentry_app.created',
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app=sentry_app.slug,
+        )
diff --git a/tests/sentry/mediators/sentry_apps/test_destroyer.py b/tests/sentry/mediators/sentry_apps/test_destroyer.py
index 5e2d284690..5769636748 100644
--- a/tests/sentry/mediators/sentry_apps/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_apps/test_destroyer.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from django.db import connection
+from mock import patch
 
 from sentry.mediators.sentry_apps import Destroyer
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiApplication, User, SentryApp, SentryAppInstallation
@@ -46,6 +47,7 @@ class TestDestroyer(TestCase):
     def test_creates_audit_log_entry(self):
         request = self.make_request(user=self.user, method='GET')
         Destroyer.run(
+            user=self.user,
             sentry_app=self.sentry_app,
             request=request,
         )
@@ -67,3 +69,18 @@ class TestDestroyer(TestCase):
             [self.sentry_app.id])
 
         assert c.fetchone()[0] == 1
+
+    @patch('sentry.analytics.record')
+    def test_records_analytics(self, record):
+        Destroyer.run(
+            user=self.user,
+            sentry_app=self.sentry_app,
+            request=self.make_request(user=self.user, method='GET'),
+        )
+
+        record.assert_called_with(
+            'sentry_app.deleted',
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app=self.sentry_app.slug,
+        )
diff --git a/tests/sentry/mediators/sentry_apps/test_updater.py b/tests/sentry/mediators/sentry_apps/test_updater.py
index f69f93d77b..28f05cacf7 100644
--- a/tests/sentry/mediators/sentry_apps/test_updater.py
+++ b/tests/sentry/mediators/sentry_apps/test_updater.py
@@ -18,7 +18,10 @@ class TestUpdater(TestCase):
             schema={'elements': [self.create_issue_link_schema()]},
         )
 
-        self.updater = Updater(sentry_app=self.sentry_app)
+        self.updater = Updater(
+            sentry_app=self.sentry_app,
+            user=self.user,
+        )
 
     def test_updates_name(self):
         self.updater.name = 'A New Thing'
@@ -38,7 +41,7 @@ class TestUpdater(TestCase):
             scopes=('project:read',),
             published=True,
         )
-        updater = Updater(sentry_app=sentry_app)
+        updater = Updater(sentry_app=sentry_app, user=self.user)
         updater.scopes = ('project:read', 'project:write', )
 
         with self.assertRaises(APIError):
@@ -50,7 +53,7 @@ class TestUpdater(TestCase):
             organization=self.org,
             scopes=('project:read',),
         )
-        updater = Updater(sentry_app=sentry_app)
+        updater = Updater(sentry_app=sentry_app, user=self.user)
         updater.events = ('issue',)
         with self.assertRaises(APIError):
             updater.call()
@@ -63,7 +66,7 @@ class TestUpdater(TestCase):
             events=('event.alert',),
         )
         self.create_sentry_app_installation(slug='sentry')
-        updater = Updater(sentry_app=sentry_app, events=('issue',))
+        updater = Updater(sentry_app=sentry_app, events=('issue',), user=self.user)
         updater.call()
         assert set(sentry_app.events) == expand_events(['issue'])
         service_hook = ServiceHook.objects.filter(application=sentry_app.application)[0]
diff --git a/tests/sentry/mediators/token_exchange/test_grant_exchanger.py b/tests/sentry/mediators/token_exchange/test_grant_exchanger.py
index 9907d70243..e361d5e724 100644
--- a/tests/sentry/mediators/token_exchange/test_grant_exchanger.py
+++ b/tests/sentry/mediators/token_exchange/test_grant_exchanger.py
@@ -75,3 +75,18 @@ class TestGrantExchanger(TestCase):
         grant_id = self.install.api_grant_id
         self.grant_exchanger.call()
         assert not ApiGrant.objects.filter(id=grant_id)
+
+    @patch('sentry.analytics.record')
+    def test_records_analytics(self, record):
+        GrantExchanger.run(
+            install=self.install,
+            client_id=self.client_id,
+            code=self.code,
+            user=self.user,
+        )
+
+        record.assert_called_with(
+            'sentry_app.token_exchanged',
+            sentry_app_installation_id=self.install.id,
+            exchange_type='authorization',
+        )
diff --git a/tests/sentry/mediators/token_exchange/test_refresher.py b/tests/sentry/mediators/token_exchange/test_refresher.py
index 8caaa17ffa..9d765f5b2f 100644
--- a/tests/sentry/mediators/token_exchange/test_refresher.py
+++ b/tests/sentry/mediators/token_exchange/test_refresher.py
@@ -79,3 +79,18 @@ class TestRefresher(TestCase):
     def test_sentry_app_must_exist(self, _):
         with self.assertRaises(APIUnauthorized):
             self.refresher.call()
+
+    @patch('sentry.analytics.record')
+    def test_records_analytics(self, record):
+        Refresher.run(
+            install=self.install,
+            client_id=self.client_id,
+            refresh_token=self.token.refresh_token,
+            user=self.user,
+        )
+
+        record.assert_called_with(
+            'sentry_app.token_exchanged',
+            sentry_app_installation_id=self.install.id,
+            exchange_type='refresh',
+        )
