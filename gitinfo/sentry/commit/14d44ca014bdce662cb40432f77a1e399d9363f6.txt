commit 14d44ca014bdce662cb40432f77a1e399d9363f6
Author: Mark Story <mark@sentry.io>
Date:   Fri Jul 26 09:54:40 2019 -0400

    feat(ui) Wire transaction list view to modal (#14149)
    
    Connect the transaction aggregate view up to the details modal.
    Extend/reuse the 'get latest' event paradigm we use on error
    aggregation. This has required another querystring parameter as the
    parameters to event latest/oldest require different search terms.
    
    Pagination buttons are not working just yet.
    
    Refs SEN-865

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
index 4ce8a256ac..80011ad5e9 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
@@ -15,7 +15,7 @@ import pinIcon from 'app/../images/location-pin.png';
 import {t} from 'app/locale';
 import {QueryLink} from './styles';
 
-export const MODAL_QUERY_KEYS = ['eventSlug', 'groupSlug'];
+export const MODAL_QUERY_KEYS = ['eventSlug', 'groupSlug', 'transactionSlug'];
 export const PIN_ICON = `image://${pinIcon}`;
 
 export const ALL_VIEWS = deepFreeze([
@@ -83,7 +83,7 @@ export const ALL_VIEWS = deepFreeze([
       'user.ip',
       'environment',
     ],
-    columnWidths: ['3fr', '1fr', '1fr', '1fr', '1fr', '1fr', '1fr'],
+    columnWidths: ['3fr', '2fr'],
   },
 ]);
 
@@ -101,7 +101,7 @@ export const SPECIAL_FIELDS = {
         pathname: `/organizations/${organization.slug}/events/`,
         query: {
           ...location.query,
-          transactionSlug: `${data['project.name']}:${data.transaction}`,
+          transactionSlug: `${data['project.name']}:${data.transaction}:latest`,
         },
       };
       return (
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx
index 4098d4f03c..b17625d0f9 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/eventDetails.jsx
@@ -27,6 +27,18 @@ const slugValidator = function(props, propName, componentName) {
   return null;
 };
 
+const transactionValidator = function(props, propName, componentName) {
+  const value = props[propName];
+  // Accept slugs that look like:
+  // * project-slug:/some/pathname:latest
+  // * project-slug:a_bare_string:oldest
+  // * project-slug:/some/otherpath:deadbeef
+  if (value && !/^(?:[^:]+):(?:[^:]+):(?:[^:]+|latest|oldest)$/.test(value)) {
+    return new Error(`Invalid value for ${propName} provided to ${componentName}.`);
+  }
+  return null;
+};
+
 const modalStyles = css`
   top: 0px;
   left: 0px;
@@ -45,12 +57,20 @@ class EventDetails extends AsyncComponent {
     organization: SentryTypes.Organization.isRequired,
     eventSlug: slugValidator,
     groupSlug: slugValidator,
+    transactionSlug: transactionValidator,
     location: PropTypes.object.isRequired,
     view: PropTypes.object.isRequired,
   };
 
   getEndpoints() {
-    const {organization, eventSlug, groupSlug, view, location} = this.props;
+    const {
+      organization,
+      eventSlug,
+      groupSlug,
+      transactionSlug,
+      view,
+      location,
+    } = this.props;
     const query = getQuery(view, location);
 
     // If we're getting an issue/group use the latest endpoint.
@@ -75,22 +95,47 @@ class EventDetails extends AsyncComponent {
       return [['event', url, {query}]];
     }
 
-    // Get a specific event. This could be coming from
-    // a paginated group or standalone event.
-    const [projectId, eventId] = eventSlug.toString().split(':');
-    return [
-      [
-        'event',
-        `/organizations/${organization.slug}/events/${projectId}:${eventId}/`,
-        {query},
-      ],
-    ];
+    // If we're looking at a transaction aggregate we need to do a search
+    // by transaction to find the latest event for the transaction.
+    if (transactionSlug) {
+      const [projectId, transactionName, eventId] = transactionSlug.toString().split(':');
+
+      let url = `/organizations/${organization.slug}/events/`;
+      // latest / oldest have dedicated endpoints
+      if (['latest', 'oldest'].includes(eventId)) {
+        url += `${eventId}/`;
+      } else {
+        url += `${projectId}:${eventId}/`;
+      }
+      if (query.query) {
+        query.query += ` transaction:${transactionName}`;
+      } else {
+        query.query = `transaction:${transactionName}`;
+      }
+
+      return [['event', url, {query}]];
+    }
+
+    if (eventSlug) {
+      // Get a specific event. This could be coming from
+      // a paginated group or standalone event.
+      const [projectId, eventId] = eventSlug.toString().split(':');
+      return [
+        [
+          'event',
+          `/organizations/${organization.slug}/events/${projectId}:${eventId}/`,
+          {query},
+        ],
+      ];
+    }
+
+    throw new Error('No valid datasource property found.');
   }
 
   onDismiss = () => {
     const {location} = this.props;
     // Remove modal related query parameters.
-    const query = omit(location.query, ['groupSlug', 'eventSlug']);
+    const query = omit(location.query, ['transactionSlug', 'groupSlug', 'eventSlug']);
 
     browserHistory.push({
       pathname: location.pathname,
@@ -99,15 +144,12 @@ class EventDetails extends AsyncComponent {
   };
 
   get projectId() {
-    if (this.props.eventSlug) {
-      const [projectId] = this.props.eventSlug.split(':');
-      return projectId;
-    }
-    if (this.props.groupSlug) {
-      const [projectId] = this.props.groupSlug.split(':');
-      return projectId;
+    const source =
+      this.props.eventSlug || this.props.groupSlug || this.props.transactionSlug;
+    if (!source) {
+      throw new Error('Could not determine projectId');
     }
-    throw new Error('Could not determine projectId');
+    return source.split(':')[0];
   }
 
   renderBody() {
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
index f8251f2331..4e6e042745 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/index.jsx
@@ -53,9 +53,9 @@ export default class OrganizationEventsV2 extends React.Component {
 
   render() {
     const {organization, location, router} = this.props;
-    const {eventSlug, groupSlug} = location.query;
+    const {eventSlug, groupSlug, transactionSlug} = location.query;
     const currentView = getCurrentView(location.query.view);
-    const showModal = groupSlug || eventSlug;
+    const showModal = transactionSlug || groupSlug || eventSlug;
 
     return (
       <DocumentTitle title={`Events - ${organization.slug} - Sentry`}>
@@ -82,6 +82,7 @@ export default class OrganizationEventsV2 extends React.Component {
                 params={this.props.params}
                 eventSlug={eventSlug}
                 groupSlug={groupSlug}
+                transactionSlug={transactionSlug}
                 view={currentView}
                 location={location}
               />
diff --git a/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx b/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx
index 3b88e32c4e..add0b14cc4 100644
--- a/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/eventDetails.spec.jsx
@@ -171,6 +171,27 @@ describe('OrganizationEventsV2 > EventDetails', function() {
     });
   });
 
+  it('removes transactionSlug when close button is clicked', function() {
+    const wrapper = mount(
+      <EventDetails
+        organization={TestStubs.Organization({projects: [TestStubs.Project()]})}
+        transactionSlug="project-slug:/users/login:latest"
+        location={{
+          pathname: '/organizations/org-slug/events/',
+          query: {groupSlug: 'project-slug:/users/login:latest'},
+        }}
+        view={allEventsView}
+      />,
+      TestStubs.routerContext()
+    );
+    const button = wrapper.find('DismissButton');
+    button.simulate('click');
+    expect(browserHistory.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {},
+    });
+  });
+
   it('navigates when tag values are clicked', async function() {
     const {organization, routerContext} = initializeOrg({
       organization: TestStubs.Organization({projects: [TestStubs.Project()]}),
