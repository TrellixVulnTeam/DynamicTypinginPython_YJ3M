commit 2fc75c9153422fa4c83e7348ac0179ddfabe7a46
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed May 20 13:47:10 2020 -0700

    refs(alert_rules): Stop writing to unused incident fields. Modify data model to prepare for removing unused fields (#18875)
    
    This refactors the `Incident` model to make `aggregation` and `query` nullable, removes the `groups`
    relations and disables the constraints on `IncidentGroup`. We don't use any of these fields any
    more, so may as well remove.
    
    We also make `alert_rule` not null, since we will always have an alert rule available now. The data
    migration will remove any incidents without alert rules - these are all test rows and are fine to
    remove.
    
    All tables involved are small, and so it's fine to do these operations as part of the migration.

diff --git a/bin/load-mocks b/bin/load-mocks
index ab514e46e6..8cae78f8b3 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -670,9 +670,7 @@ def main(num_events=1, extra_events=False):
                     org,
                     type_=IncidentType.DETECTED,
                     title="My Incident",
-                    query="",
                     date_started=datetime.utcnow().replace(tzinfo=utc),
-                    aggregation=QueryAggregations.TOTAL,
                     alert_rule=alert_rule,
                     projects=[project],
                 )
diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 80ba8432ba..c819c8b106 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0077_alert_query_col_drop_state
+sentry: 0078_incident_field_updates
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/api/endpoints/organization_incident_index.py b/src/sentry/api/endpoints/organization_incident_index.py
index 0e23267580..2ad9bb0ec4 100644
--- a/src/sentry/api/endpoints/organization_incident_index.py
+++ b/src/sentry/api/endpoints/organization_incident_index.py
@@ -1,51 +1,12 @@
 from __future__ import absolute_import
 
-from rest_framework import serializers
-
 from sentry import features
 from sentry.api.bases.incident import IncidentPermission
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.api.serializers.rest_framework import ListField
 from sentry.incidents.models import Incident, IncidentStatus
-from sentry.models.group import Group
-from sentry.models.project import Project
-from sentry.snuba.models import QueryAggregations
-
-
-class IncidentSerializer(serializers.Serializer):
-    projects = ListField(child=serializers.CharField(), required=False, default=[])
-    groups = ListField(child=serializers.CharField(), required=True, allow_null=False)
-    title = serializers.CharField(required=True)
-    query = serializers.CharField(required=False, allow_blank=True, allow_null=True)
-    aggregation = serializers.IntegerField(default=QueryAggregations.TOTAL.value)
-    dateStarted = serializers.DateTimeField(required=False)
-    dateDetected = serializers.DateTimeField(required=False, allow_null=True)
-
-    def validate_projects(self, slugs):
-        projects = Project.objects.filter(organization=self.context["organization"], slug__in=slugs)
-        if len(projects) != len(slugs):
-            raise serializers.ValidationError("Invalid project slug(s)")
-        return list(projects)
-
-    def validate_groups(self, group_ids):
-        groups = Group.objects.filter(
-            project__organization=self.context["organization"], id__in=group_ids
-        ).select_related("project")
-        if len(groups) != len(group_ids):
-            raise serializers.ValidationError("Invalid group id(s)")
-        return list(groups)
-
-    def validate_aggregation(self, aggregation):
-        try:
-            return QueryAggregations(aggregation)
-        except ValueError:
-            raise serializers.ValidationError(
-                "Invalid aggregation, valid values are %s"
-                % [item.value for item in QueryAggregations]
-            )
 
 
 class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index 45cb054a84..eec4a3787e 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -5,13 +5,7 @@ from collections import defaultdict
 import six
 
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.incidents.models import (
-    Incident,
-    IncidentGroup,
-    IncidentProject,
-    IncidentSeen,
-    IncidentSubscription,
-)
+from sentry.incidents.models import Incident, IncidentProject, IncidentSeen, IncidentSubscription
 from sentry.snuba.models import QueryDatasets
 from sentry.utils.db import attach_foreignkey
 
@@ -41,8 +35,6 @@ class IncidentSerializer(Serializer):
             "statusMethod": obj.status_method,
             "type": obj.type,
             "title": obj.title,
-            "query": obj.query,
-            "aggregation": obj.aggregation,
             "dateStarted": obj.date_started,
             "dateDetected": obj.date_detected,
             "dateCreated": obj.date_added,
@@ -62,15 +54,8 @@ class DetailedIncidentSerializer(IncidentSerializer):
                 )
             )
 
-        incident_groups = defaultdict(list)
-        for incident_id, group_id in IncidentGroup.objects.filter(
-            incident__in=item_list
-        ).values_list("incident_id", "group_id"):
-            incident_groups[incident_id].append(six.text_type(group_id))
-
         for item in item_list:
             results[item]["is_subscribed"] = item.id in subscribed_incidents
-            results[item]["groups"] = incident_groups.get(item.id, [])
         return results
 
     def _get_incident_seen_list(self, incident, user):
@@ -97,7 +82,6 @@ class DetailedIncidentSerializer(IncidentSerializer):
         context["isSubscribed"] = attrs["is_subscribed"]
         context["seenBy"] = seen_list["seen_by"]
         context["hasSeen"] = seen_list["has_seen"]
-        context["groups"] = attrs["groups"]
         context["alertRule"] = serialize(obj.alert_rule, user)
         # The query we should use to get accurate results in Discover.
         context["discoverQuery"] = self._build_discover_query(obj)
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 2b74e39a84..1260a7d98b 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -21,7 +21,6 @@ from sentry.incidents.models import (
     Incident,
     IncidentActivity,
     IncidentActivityType,
-    IncidentGroup,
     IncidentProject,
     IncidentSnapshot,
     PendingIncidentSnapshot,
@@ -60,23 +59,14 @@ def create_incident(
     organization,
     type_,
     title,
-    query,
-    aggregation,
     date_started,
     date_detected=None,
     # TODO: Probably remove detection_uuid?
     detection_uuid=None,
     projects=None,
-    groups=None,
     user=None,
     alert_rule=None,
 ):
-    if groups:
-        group_projects = [g.project for g in groups]
-        if projects is None:
-            projects = []
-        projects = list(set(projects + group_projects))
-
     if date_detected is None:
         date_detected = date_started
 
@@ -87,8 +77,6 @@ def create_incident(
             status=IncidentStatus.OPEN.value,
             type=type_.value,
             title=title,
-            query=query,
-            aggregation=aggregation.value,
             date_started=date_started,
             date_detected=date_detected,
             alert_rule=alert_rule,
@@ -104,11 +92,6 @@ def create_incident(
                     sender=type(incident_project), instance=incident_project, created=True
                 )
 
-        if groups:
-            IncidentGroup.objects.bulk_create(
-                [IncidentGroup(incident=incident, group=group) for group in groups]
-            )
-
         create_incident_activity(incident, IncidentActivityType.DETECTED, user=user)
         analytics.record(
             "incident.created",
@@ -320,11 +303,6 @@ def build_incident_query_params(incident, start=None, end=None, windowed_stats=F
         incident, start, end, windowed_stats=windowed_stats
     )
 
-    group_ids = list(
-        IncidentGroup.objects.filter(incident=incident).values_list("group_id", flat=True)
-    )
-    if group_ids:
-        params["group_ids"] = group_ids
     project_ids = list(
         IncidentProject.objects.filter(incident=incident).values_list("project_id", flat=True)
     )
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index d1dc7f5bad..b978612707 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -34,7 +34,7 @@ class IncidentGroup(Model):
     __core__ = False
 
     group = FlexibleForeignKey("sentry.Group", db_index=False, db_constraint=False)
-    incident = FlexibleForeignKey("sentry.Incident")
+    incident = FlexibleForeignKey("sentry.Incident", db_constraint=False)
 
     class Meta:
         app_label = "sentry"
@@ -163,8 +163,7 @@ class Incident(Model):
     projects = models.ManyToManyField(
         "sentry.Project", related_name="incidents", through=IncidentProject
     )
-    groups = models.ManyToManyField("sentry.Group", related_name="incidents", through=IncidentGroup)
-    alert_rule = FlexibleForeignKey("sentry.AlertRule", null=True, on_delete=models.SET_NULL)
+    alert_rule = FlexibleForeignKey("sentry.AlertRule", on_delete=models.PROTECT)
     # Incrementing id that is specific to the org.
     identifier = models.IntegerField()
     # Identifier used to match incoming events from the detection algorithm
@@ -174,10 +173,10 @@ class Incident(Model):
         default=IncidentStatusMethod.RULE_TRIGGERED.value
     )
     type = models.PositiveSmallIntegerField()
-    aggregation = models.PositiveSmallIntegerField(default=QueryAggregations.TOTAL.value)
+    aggregation = models.PositiveSmallIntegerField(default=QueryAggregations.TOTAL.value, null=True)
     title = models.TextField()
     # Query used to fetch events related to an incident
-    query = models.TextField()
+    query = models.TextField(null=True)
     # When we suspect the incident actually started
     date_started = models.DateTimeField(default=timezone.now)
     # When we actually detected the incident
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index f58548fd43..04f3dfc9c9 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -23,7 +23,6 @@ from sentry.incidents.models import (
     TriggerStatus,
 )
 from sentry.incidents.tasks import handle_trigger_action
-from sentry.snuba.subscriptions import aggregate_to_query_aggregation
 from sentry.utils import metrics, redis
 from sentry.utils.dates import to_datetime, to_timestamp
 from sentry.utils.compat import zip
@@ -185,10 +184,6 @@ class SubscriptionProcessor(object):
                     # TODO: Include more info in name?
                     self.alert_rule.name,
                     alert_rule=self.alert_rule,
-                    query=self.subscription.snuba_query.query,
-                    aggregation=aggregate_to_query_aggregation[
-                        self.alert_rule.snuba_query.aggregate
-                    ],
                     date_started=detected_at,
                     date_detected=detected_at,
                     projects=[self.subscription.project],
diff --git a/src/sentry/migrations/0078_incident_field_updates.py b/src/sentry/migrations/0078_incident_field_updates.py
new file mode 100644
index 0000000000..22ade9c07b
--- /dev/null
+++ b/src/sentry/migrations/0078_incident_field_updates.py
@@ -0,0 +1,72 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-05-15 20:50
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+import sentry.db.models.fields.foreignkey
+from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
+
+
+def delete_incidents_with_no_alert_rule(apps, schema_editor):
+    # These are only test incidents that we don't care about, should be fine to remove
+    # these so that we can require there always be an AlertRule associated with
+    # Incidents going forward
+    Incident = apps.get_model("sentry", "Incident")
+    for incident in RangeQuerySetWrapperWithProgressBar(
+        Incident.objects.filter(alert_rule__isnull=True)
+    ):
+        incident.delete()
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = False
+
+    dependencies = [("sentry", "0077_alert_query_col_drop_state")]
+
+    operations = [
+        migrations.RunPython(
+            delete_incidents_with_no_alert_rule, reverse_code=migrations.RunPython.noop
+        ),
+        migrations.RemoveField(model_name="incident", name="groups"),
+        migrations.AlterField(
+            model_name="incident",
+            name="aggregation",
+            field=models.PositiveSmallIntegerField(default=0, null=True),
+        ),
+        migrations.AlterField(
+            model_name="incident",
+            name="alert_rule",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                on_delete=django.db.models.deletion.PROTECT, to="sentry.AlertRule"
+            ),
+        ),
+        migrations.AlterField(
+            model_name="incident", name="query", field=models.TextField(null=True)
+        ),
+        migrations.AlterField(
+            model_name="incidentgroup",
+            name="incident",
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                db_constraint=False,
+                on_delete=django.db.models.deletion.CASCADE,
+                to="sentry.Incident",
+            ),
+        ),
+    ]
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index aa25791ca1..a6e30f009f 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -31,7 +31,6 @@ from sentry.incidents.models import (
     AlertRuleTriggerAction,
     Incident,
     IncidentActivity,
-    IncidentGroup,
     IncidentProject,
     IncidentSeen,
     IncidentType,
@@ -812,7 +811,6 @@ class Factories(object):
         date_started=None,
         date_detected=None,
         date_closed=None,
-        groups=None,
         seen_by=None,
         alert_rule=None,
     ):
@@ -828,7 +826,6 @@ class Factories(object):
             detection_uuid=detection_uuid,
             status=status,
             title=title,
-            query=query,
             alert_rule=alert_rule,
             date_started=date_started or timezone.now(),
             date_detected=date_detected or timezone.now(),
@@ -837,9 +834,6 @@ class Factories(object):
         )
         for project in projects:
             IncidentProject.objects.create(incident=incident, project=project)
-        if groups:
-            for group in groups:
-                IncidentGroup.objects.create(incident=incident, group=group)
         if seen_by:
             for user in seen_by:
                 IncidentSeen.objects.create(incident=incident, user=user, last_seen=timezone.now())
diff --git a/tests/acceptance/test_incidents.py b/tests/acceptance/test_incidents.py
index 87b450dfea..8c099daefa 100644
--- a/tests/acceptance/test_incidents.py
+++ b/tests/acceptance/test_incidents.py
@@ -5,9 +5,7 @@ import pytz
 
 from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now
-from sentry.incidents.logic import create_alert_rule, create_incident
-from sentry.incidents.models import IncidentType
-from sentry.snuba.models import QueryAggregations
+from sentry.incidents.logic import create_alert_rule
 
 FEATURE_NAME = "organizations:incidents"
 
@@ -31,16 +29,12 @@ class OrganizationIncidentsListTest(AcceptanceTestCase, SnubaTestCase):
             self.organization, [self.project], "hello", "level:error", "count()", 10, 1
         )
 
-        incident = create_incident(
+        incident = self.create_incident(
             self.organization,
-            type_=IncidentType.DETECTED,
             title="Incident #1",
-            query="hello",
-            aggregation=QueryAggregations.TOTAL,
             date_started=timezone.now(),
             date_detected=timezone.now(),
             projects=[self.project],
-            groups=[self.group],
             alert_rule=alert_rule,
         )
 
diff --git a/tests/sentry/api/endpoints/test_organization_incident_details.py b/tests/sentry/api/endpoints/test_organization_incident_details.py
index 47501f4f0a..eb9dcf90f3 100644
--- a/tests/sentry/api/endpoints/test_organization_incident_details.py
+++ b/tests/sentry/api/endpoints/test_organization_incident_details.py
@@ -62,7 +62,6 @@ class OrganizationIncidentDetailsTest(BaseIncidentDetailsTest, APITestCase):
 
         assert resp.data["id"] == expected["id"]
         assert resp.data["identifier"] == expected["identifier"]
-        assert resp.data["query"] == expected["query"]
         assert resp.data["projects"] == expected["projects"]
         assert resp.data["dateDetected"] == expected["dateDetected"]
         assert resp.data["dateCreated"] == expected["dateCreated"]
diff --git a/tests/sentry/api/serializers/test_incident.py b/tests/sentry/api/serializers/test_incident.py
index 0d45699815..679869890b 100644
--- a/tests/sentry/api/serializers/test_incident.py
+++ b/tests/sentry/api/serializers/test_incident.py
@@ -11,7 +11,6 @@ from freezegun import freeze_time
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.incident import DetailedIncidentSerializer
 from sentry.incidents.logic import subscribe_to_incident
-from sentry.incidents.models import IncidentGroup
 from sentry.testutils import TestCase
 
 
@@ -29,8 +28,6 @@ class IncidentSerializerTest(TestCase):
         assert result["statusMethod"] == incident.status_method
         assert result["type"] == incident.type
         assert result["title"] == incident.title
-        assert result["query"] == incident.query
-        assert result["aggregation"] == incident.aggregation
         assert result["dateStarted"] == incident.date_started
         assert result["dateDetected"] == incident.date_detected
         assert result["dateCreated"] == incident.date_added
@@ -47,15 +44,6 @@ class DetailedIncidentSerializerTest(TestCase):
         result = serialize(incident, serializer=serializer, user=self.user)
         assert result["isSubscribed"]
 
-    def test_groups(self):
-        incident = self.create_incident()
-        serializer = DetailedIncidentSerializer()
-        result = serialize(incident, serializer=serializer)
-        assert result["groups"] == []
-        IncidentGroup.objects.create(incident=incident, group=self.group)
-        result = serialize(incident, serializer=serializer)
-        assert result["groups"] == [six.text_type(self.group.id)]
-
     def test_alert_rule(self):
         incident = self.create_incident()
         query = "test query"
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 9b8c22a228..52a29ef4fc 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -59,7 +59,6 @@ from sentry.incidents.models import (
     Incident,
     IncidentActivity,
     IncidentActivityType,
-    IncidentGroup,
     IncidentProject,
     PendingIncidentSnapshot,
     IncidentStatus,
@@ -67,7 +66,7 @@ from sentry.incidents.models import (
     IncidentSubscription,
     IncidentType,
 )
-from sentry.snuba.models import QueryAggregations, QueryDatasets
+from sentry.snuba.models import QueryDatasets
 from sentry.models.integration import Integration
 from sentry.testutils import TestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
@@ -80,11 +79,7 @@ class CreateIncidentTest(TestCase):
     def test_simple(self):
         incident_type = IncidentType.ALERT_TRIGGERED
         title = "hello"
-        query = "goodbye"
-        aggregation = QueryAggregations.UNIQUE_USERS
         date_started = timezone.now()
-        other_project = self.create_project(fire_project_created=True)
-        other_group = self.create_group(project=other_project)
         alert_rule = create_alert_rule(
             self.organization, [self.project], "hello", "level:error", "count()", 10, 1
         )
@@ -94,34 +89,20 @@ class CreateIncidentTest(TestCase):
             self.organization,
             type_=incident_type,
             title=title,
-            query=query,
-            aggregation=aggregation,
             date_started=date_started,
             projects=[self.project],
-            groups=[self.group, other_group],
             alert_rule=alert_rule,
         )
         assert incident.identifier == 1
         assert incident.status == IncidentStatus.OPEN.value
         assert incident.type == incident_type.value
         assert incident.title == title
-        assert incident.query == query
-        assert incident.aggregation == aggregation.value
         assert incident.date_started == date_started
         assert incident.date_detected == date_started
         assert incident.alert_rule == alert_rule
-        assert (
-            IncidentGroup.objects.filter(
-                incident=incident, group__in=[self.group, other_group]
-            ).count()
-            == 2
-        )
-        assert (
-            IncidentProject.objects.filter(
-                incident=incident, project__in=[self.project, other_project]
-            ).count()
-            == 2
-        )
+        assert IncidentProject.objects.filter(
+            incident=incident, project__in=[self.project]
+        ).exists()
         assert (
             IncidentActivity.objects.filter(
                 incident=incident, type=IncidentActivityType.DETECTED.value
@@ -186,14 +167,8 @@ class UpdateIncidentStatus(TestCase):
         }
 
     def test_closed(self):
-        incident = create_incident(
-            self.organization,
-            IncidentType.ALERT_TRIGGERED,
-            "Test",
-            "",
-            QueryAggregations.TOTAL,
-            timezone.now(),
-            projects=[self.project],
+        incident = self.create_incident(
+            self.organization, title="Test", date_started=timezone.now(), projects=[self.project]
         )
         with self.assertChanges(
             lambda: PendingIncidentSnapshot.objects.filter(incident=incident).exists(),
@@ -204,14 +179,8 @@ class UpdateIncidentStatus(TestCase):
 
     def test_pending_snapshot_management(self):
         # Test to verify PendingIncidentSnapshot's are created on close, and deleted on open
-        incident = create_incident(
-            self.organization,
-            IncidentType.ALERT_TRIGGERED,
-            "Test",
-            "",
-            QueryAggregations.TOTAL,
-            timezone.now(),
-            projects=[self.project],
+        incident = self.create_incident(
+            self.organization, title="Test", date_started=timezone.now(), projects=[self.project]
         )
         assert PendingIncidentSnapshot.objects.all().count() == 0
         update_incident_status(incident, IncidentStatus.CLOSED)
@@ -328,10 +297,6 @@ class GetIncidentEventStatsTest(TestCase, BaseIncidentEventStatsTest):
             windowed_stats=True,
         )
 
-    def test_groups(self):
-        self.run_test(self.group_incident, [1, 1])
-        self.run_test(self.group_incident, [1, 1], windowed_stats=True)
-
     def test_with_transactions(self):
         incident = self.project_incident
         alert_rule = self.create_alert_rule(
@@ -364,27 +329,11 @@ class BaseIncidentAggregatesTest(BaseIncidentsTest):
         self.create_event(self.now - timedelta(minutes=2), user={"id": 124})
         return incident
 
-    @property
-    def group_incident(self):
-        fp = "group"
-        group = self.create_event(self.now - timedelta(minutes=1), fingerprint=fp).group
-        self.create_event(self.now - timedelta(minutes=2), user={"id": 123}, fingerprint=fp)
-        self.create_event(self.now - timedelta(minutes=2), user={"id": 123}, fingerprint=fp)
-        self.create_event(self.now - timedelta(minutes=2), user={"id": 123}, fingerprint="other")
-        self.create_event(self.now - timedelta(minutes=2), user={"id": 124}, fingerprint=fp)
-        self.create_event(self.now - timedelta(minutes=2), user={"id": 124}, fingerprint="other")
-        return self.create_incident(
-            date_started=self.now - timedelta(minutes=5), query="", projects=[], groups=[group]
-        )
-
 
 class GetIncidentAggregatesTest(TestCase, BaseIncidentAggregatesTest):
     def test_projects(self):
         assert get_incident_aggregates(self.project_incident) == {"count": 4, "unique_users": 2}
 
-    def test_groups(self):
-        assert get_incident_aggregates(self.group_incident) == {"count": 4, "unique_users": 2}
-
 
 @freeze_time()
 class CreateEventStatTest(TestCase, BaseIncidentsTest):
@@ -590,7 +539,6 @@ class GetIncidentStatsTest(TestCase, BaseIncidentsTest):
             self.organization,
             title="Open",
             query="",
-            groups=[self.group],
             date_started=timezone.now() - timedelta(days=30),
         )
         self.run_test(open_incident)
@@ -600,7 +548,6 @@ class GetIncidentStatsTest(TestCase, BaseIncidentsTest):
             self.organization,
             title="Closed",
             query="",
-            groups=[self.group],
             date_started=timezone.now() - timedelta(days=30),
         )
         update_incident_status(
diff --git a/tests/sentry/incidents/test_models.py b/tests/sentry/incidents/test_models.py
index ec7ffa4422..4b82ff1af1 100644
--- a/tests/sentry/incidents/test_models.py
+++ b/tests/sentry/incidents/test_models.py
@@ -281,8 +281,13 @@ class IncidentCreationTest(TestCase):
     def test_simple(self):
         title = "hello"
         query = "goodbye"
+        alert_rule = self.create_alert_rule()
         incident = Incident.objects.create(
-            self.organization, title=title, query=query, type=IncidentType.ALERT_TRIGGERED.value
+            self.organization,
+            title=title,
+            query=query,
+            type=IncidentType.ALERT_TRIGGERED.value,
+            alert_rule=alert_rule,
         )
         assert incident.identifier == 1
         assert incident.title == title
@@ -290,13 +295,18 @@ class IncidentCreationTest(TestCase):
 
         # Check identifier correctly increments
         incident = Incident.objects.create(
-            self.organization, title=title, query=query, type=IncidentType.ALERT_TRIGGERED.value
+            self.organization,
+            title=title,
+            query=query,
+            type=IncidentType.ALERT_TRIGGERED.value,
+            alert_rule=alert_rule,
         )
         assert incident.identifier == 2
 
     def test_identifier_conflict(self):
         create_method = BaseManager.create
         call_count = [0]
+        alert_rule = self.create_alert_rule()
 
         def mock_base_create(*args, **kwargs):
             if not call_count[0]:
@@ -311,6 +321,7 @@ class IncidentCreationTest(TestCase):
                         title="Conflicting Incident",
                         query="Uh oh",
                         type=IncidentType.ALERT_TRIGGERED.value,
+                        alert_rule=alert_rule,
                     )
                 assert incident.identifier == kwargs["identifier"]
                 try:
@@ -328,6 +339,7 @@ class IncidentCreationTest(TestCase):
         with patch.object(BaseManager, "create", new=mock_base_create):
             incident = Incident.objects.create(
                 self.organization,
+                alert_rule=alert_rule,
                 status=IncidentStatus.OPEN.value,
                 title="hi",
                 query="bye",
