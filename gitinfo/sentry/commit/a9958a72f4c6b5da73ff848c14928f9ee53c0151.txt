commit a9958a72f4c6b5da73ff848c14928f9ee53c0151
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Sat Nov 14 14:16:51 2015 -0800

    Add CLI tool to diff two events

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 10a8a6e3e1..c5b7ab6c41 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -12,6 +12,7 @@ import math
 import six
 
 from datetime import datetime, timedelta
+from collections import OrderedDict
 from django.conf import settings
 from django.db import connection, IntegrityError, transaction
 from django.db.models import Q
@@ -64,14 +65,35 @@ def md5_from_hash(hash_bits):
     return result.hexdigest()
 
 
+def get_fingerprint_for_event(event):
+    fingerprint = event.data.get('fingerprint')
+    if fingerprint is None:
+        return ['{{ default }}']
+    if isinstance(fingerprint, basestring):
+        return [fingerprint]
+    return fingerprint
+
+
 def get_hashes_for_event(event):
+    return get_hashes_for_event_with_reason(event)[1]
+
+
+def get_hashes_for_event_with_reason(event):
     interfaces = event.get_interfaces()
     for interface in interfaces.itervalues():
         result = interface.compute_hashes(event.platform)
         if not result:
             continue
-        return result
-    return [[event.message]]
+        return (interface.get_path(), result)
+    return ('message', event.message)
+
+
+def get_grouping_behavior(event):
+    data = event.data
+    if 'checksum' in data:
+        return ('checksum', data['checksum'])
+    fingerprint = get_fingerprint_for_event(event)
+    return ('fingerprint', get_hashes_from_fingerprint_with_reason(event, fingerprint))
 
 
 def get_hashes_from_fingerprint(event, fingerprint):
@@ -94,6 +116,24 @@ def get_hashes_from_fingerprint(event, fingerprint):
     return hashes
 
 
+def get_hashes_from_fingerprint_with_reason(event, fingerprint):
+    default_values = set(['{{ default }}', '{{default}}'])
+    if any(d in fingerprint for d in default_values):
+        default_hashes = get_hashes_for_event_with_reason(event)
+        hash_count = len(default_hashes[1])
+    else:
+        hash_count = 1
+
+    hashes = OrderedDict((bit, []) for bit in fingerprint)
+    for idx in xrange(hash_count):
+        for bit in fingerprint:
+            if bit in default_values:
+                hashes[bit].append(default_hashes)
+            else:
+                hashes[bit] = bit
+    return hashes.items()
+
+
 if not settings.SENTRY_SAMPLE_DATA:
     def should_sample(current_datetime, last_seen, times_seen):
         return False
diff --git a/src/sentry/management/commands/diff.py b/src/sentry/management/commands/diff.py
new file mode 100644
index 0000000000..eea9c15653
--- /dev/null
+++ b/src/sentry/management/commands/diff.py
@@ -0,0 +1,101 @@
+"""
+sentry.management.commands.diff
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2015 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+from django.core.management.base import BaseCommand, CommandError
+
+import sys
+from optparse import make_option
+
+
+def get_group_event(pk):
+    from sentry.models import Group, Event
+    event = Group.objects.get(pk=pk).get_latest_event()
+    Event.objects.bind_nodes([event], 'data')
+    return event
+
+
+def get_event(pk):
+    from sentry.models import Event
+    event = Event.objects.get(pk=pk)
+    Event.objects.bind_nodes([event], 'data')
+    return event
+
+
+def print_unified_diff(left, right):
+    from difflib import unified_diff
+    from sentry.event_manager import (
+        get_grouping_behavior,
+    )
+
+    left_id = left.id
+    right_id = right.id
+
+    left = get_grouping_behavior(left)
+    right = get_grouping_behavior(right)
+
+    if left == right:
+        return
+
+    if left[0] != right[0]:
+        print('! Grouping behavior differs: %r vs %r' % (left[0], right[0]))
+        return
+
+    print('> Same grouping behavior: %r' % left[0])
+
+    # These should only be fingerprints at this point
+
+    left = left[1]
+    right = right[1]
+
+    left_fingerprint = [k[0] for k in left]
+    right_fingerprint = [k[0] for k in right]
+    if left_fingerprint != right_fingerprint:
+        print('!! Different fingerprint algorithms: %r vs %r' % (left_fingerprint, right_fingerprint))
+        return
+
+    bits = left_fingerprint
+    print('> Same fingerprint algorithm: %r' % bits)
+
+    left = [k[1] for k in left]
+    right = [k[1] for k in right]
+    for idx, (a, b) in enumerate(zip(left, right)):
+        bit = bits[idx]
+        for ((a_key, a_hashes), (b_key, b_hashes)) in zip(a, b):
+            if a_key != b_key:
+                print('>> Different interfaces for %r: %r vs %r' % (bit, a_key, b_key))
+                continue
+            for idx, (a_hash, b_hash) in enumerate(zip(a_hashes, b_hashes)):
+                a_hash = [h + '\n' for h in a_hash]
+                b_hash = [h + '\n' for h in b_hash]
+                a_file = '<Event id=%d> %r %r[%d]' % (left_id, bit, a_key, idx)
+                b_file = '<Event id=%d> %r %r[%d]' % (right_id, bit, b_key, idx)
+                for line in unified_diff(a_hash, b_hash, fromfile=a_file, tofile=b_file):
+                    sys.stdout.write(line)
+
+
+class Command(BaseCommand):
+    help = 'Display a diff between two events'
+
+    option_list = BaseCommand.option_list + (
+        make_option('--group',
+            action='store_true',
+            dest='group',
+            default=False,
+            help='Compare latest event by group id'
+        ),
+    )
+
+    def handle(self, *args, **options):
+        if len(args) != 2:
+            raise CommandError('Must specify two ids to diff')
+
+        if args[0] == args[1]:
+            raise CommandError('Specify different ids')
+
+        print_unified_diff(*map(get_group_event if options['group'] else get_event, args))
