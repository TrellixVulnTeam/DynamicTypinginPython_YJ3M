commit 78a7ec37573a02a43b9b9450fc5bd370b096f9a4
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 21 15:38:42 2013 -0700

    Correct handling of exception interface type for protocol 4

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 208bf4b759..c435744d4e 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -288,7 +288,12 @@ def validate_data(project, data, client=None):
 
         value = data.pop(k)
         try:
-            inst = interface(**value)
+            # HACK: exception allows you to pass the value as a list
+            # so let's try to actually support that
+            if isinstance(value, dict):
+                inst = interface(**value)
+            else:
+                inst = interface(value)
             inst.validate()
             data[import_path] = inst.serialize()
         except Exception, e:
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index ff5a61ac84..ec84663acf 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -209,6 +209,17 @@ class ValidateDataTest(BaseAPITest):
         assert full_path in result
         assert result[full_path] == interface.return_value.serialize.return_value
 
+    def test_doesnt_expand_list(self):
+        data = validate_data(self.project, {
+            'message': 'foo',
+            'exception': [{
+                'type': 'ValueError',
+                'value': 'hello world',
+                'module': 'foo.bar',
+            }]
+        })
+        assert 'sentry.interfaces.Exception' in data
+
     def test_log_level_as_string(self):
         data = validate_data(self.project, {
             'message': 'foo',
