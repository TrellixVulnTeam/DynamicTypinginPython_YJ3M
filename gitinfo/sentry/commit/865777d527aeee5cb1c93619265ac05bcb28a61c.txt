commit 865777d527aeee5cb1c93619265ac05bcb28a61c
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Oct 18 09:50:09 2018 -0700

    feat(api): Add statsPeriod and time range support to org events endpoint (#10123)

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 0f26236f4b..02265592af 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -13,10 +13,47 @@ from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.event import SnubaEvent
+from sentry.api.utils import parse_stats_period
 from sentry.models import OrganizationMember, OrganizationMemberTeam, Project, ProjectStatus
+from sentry.search.utils import parse_datetime_string, InvalidQuery
 from sentry.utils.snuba import raw_query
 
 
+MIN_STATS_PERIOD = timedelta(hours=1)
+MAX_STATS_PERIOD = timedelta(days=90)
+
+
+class InvalidParams(Exception):
+    pass
+
+
+def get_date_range_from_params(params):
+    # Returns (start, end) or raises an `InvalidParams` exception
+    now = timezone.now()
+
+    end = now
+    start = now - MAX_STATS_PERIOD
+
+    stats_period = params.get('statsPeriod')
+    if stats_period is not None:
+        stats_period = parse_stats_period(stats_period)
+        if stats_period is None or stats_period < MIN_STATS_PERIOD or stats_period >= MAX_STATS_PERIOD:
+            raise InvalidParams('Invalid statsPeriod')
+        start = now - stats_period
+    elif params.get('start') or params.get('end'):
+        if not all([params.get('start'), params.get('end')]):
+            raise InvalidParams('start and end are both required')
+        try:
+            start = parse_datetime_string(params['start'])
+            end = parse_datetime_string(params['end'])
+        except InvalidQuery as exc:
+            raise InvalidParams(exc.message)
+        if start > end:
+            raise InvalidParams('start must be before end')
+
+    return (start, end)
+
+
 class OrganizationEventsEndpoint(OrganizationEndpoint):
 
     def get_project_ids(self, request, organization):
@@ -61,7 +98,10 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
             conditions.append(
                 [['positionCaseInsensitive', ['message', "'%s'" % (query,)]], '!=', 0])
 
-        now = timezone.now()
+        try:
+            start, end = get_date_range_from_params(request.GET)
+        except InvalidParams as exc:
+            return Response({'detail': exc.message}, status=400)
 
         try:
             project_ids = self.get_project_ids(request, organization)
@@ -71,8 +111,8 @@ class OrganizationEventsEndpoint(OrganizationEndpoint):
         data_fn = partial(
             # extract 'data' from raw_query result
             lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
-            start=now - timedelta(days=90),
-            end=now,
+            start=start,
+            end=end,
             conditions=conditions,
             filter_keys={'project_id': project_ids},
             selected_columns=SnubaEvent.selected_columns,
diff --git a/src/sentry/api/endpoints/organization_health.py b/src/sentry/api/endpoints/organization_health.py
index b393c450d8..b7fd468e4d 100644
--- a/src/sentry/api/endpoints/organization_health.py
+++ b/src/sentry/api/endpoints/organization_health.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import re
 from collections import namedtuple, defaultdict
 from datetime import timedelta
 
@@ -10,6 +9,7 @@ from django.utils import timezone
 
 from sentry.api.bases import OrganizationEndpoint, EnvironmentMixin
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.utils import parse_stats_period
 from sentry.models import (
     Project, ProjectStatus, OrganizationMemberTeam,
     Environment,
@@ -25,23 +25,6 @@ SnubaResultSet = namedtuple('SnubaResultSet', ('current', 'previous'))
 SnubaTSResult = namedtuple('SnubaTSResult', ('data', 'start', 'end', 'rollup'))
 
 
-def parse_stats_period(period):
-    """
-    Convert a value such as 1h into a
-    proper timedelta.
-    """
-    m = re.match('^(\d+)([hdms]?)$', period)
-    if not m:
-        return None
-    value, unit = m.groups()
-    value = int(value)
-    if not unit:
-        unit = 's'
-    return timedelta(**{
-        {'h': 'hours', 'd': 'days', 'm': 'minutes', 's': 'seconds'}[unit]: value,
-    })
-
-
 def query(**kwargs):
     kwargs['referrer'] = 'health'
     kwargs['totals'] = True
diff --git a/src/sentry/api/utils.py b/src/sentry/api/utils.py
new file mode 100644
index 0000000000..bd096ee568
--- /dev/null
+++ b/src/sentry/api/utils.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+import re
+from datetime import timedelta
+
+
+def parse_stats_period(period):
+    """
+    Convert a value such as 1h into a
+    proper timedelta.
+    """
+    m = re.match('^(\d+)([hdms]?)$', period)
+    if not m:
+        return None
+    value, unit = m.groups()
+    value = int(value)
+    if not unit:
+        unit = 's'
+    return timedelta(**{
+        {'h': 'hours', 'd': 'days', 'm': 'minutes', 's': 'seconds'}[unit]: value,
+    })
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 9e21a4e0d3..0c89756bae 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from six.moves.urllib.parse import urlencode
+
 from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
@@ -11,6 +13,10 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationEventsTest, self).setUp()
         self.min_ago = timezone.now() - timedelta(minutes=1)
+        self.day_ago = timezone.now() - timedelta(days=1)
+
+    def assert_events_in_response(self, response, event_ids):
+        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(event_ids)
 
     def test_simple(self):
         self.login_as(user=self.user)
@@ -32,12 +38,7 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
-            [
-                event_1.event_id,
-                event_2.event_id,
-            ]
-        )
+        self.assert_events_in_response(response, [event_1.event_id, event_2.event_id])
 
     def test_message_search(self):
         self.login_as(user=self.user)
@@ -106,20 +107,71 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
-        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
-            [
-                event_1.event_id,
-            ]
-        )
+        self.assert_events_in_response(response, [event_1.event_id])
 
         # test only returns events from project user has access to
         response = self.client.get(base_url, format='json')
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 2
-        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
-            [
-                event_1.event_id,
-                event_2.event_id,
-            ]
+        self.assert_events_in_response(response, [event_1.event_id, event_2.event_id])
+
+    def test_stats_period(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        project2 = self.create_project()
+        group = self.create_group(project=project)
+        group2 = self.create_group(project=project2)
+        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
+        self.create_event('b' * 32, group=group2, datetime=self.day_ago)
+
+        url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
+        )
+        url = '%s?statsPeriod=2h' % (url,)
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        self.assert_events_in_response(response, [event_1.event_id])
+
+    def test_time_range(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        project2 = self.create_project()
+        group = self.create_group(project=project)
+        group2 = self.create_group(project=project2)
+        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
+        self.create_event('b' * 32, group=group2, datetime=self.day_ago)
+
+        now = timezone.now()
+
+        base_url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+            }
         )
+
+        # test swapped order of start/end
+        url = '%s?%s' % (base_url, urlencode({
+            'end': (now - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%S'),
+            'start': now.strftime('%Y-%m-%dT%H:%M:%S'),
+        }))
+        response = self.client.get(url, format='json')
+        assert response.status_code == 400
+
+        url = '%s?%s' % (base_url, urlencode({
+            'start': (now - timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%S'),
+            'end': now.strftime('%Y-%m-%dT%H:%M:%S'),
+        }))
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        self.assert_events_in_response(response, [event_1.event_id])
