commit 3482e1920b1dd99a40169058c2b3c70d3769246b
Author: Mark Story <mark@sentry.io>
Date:   Tue Nov 26 10:17:07 2019 -0500

    fix(discover) Fix deleting queries not refreshing the list (#15806)
    
    I've renamed the update callback as it can be used for more than just
    queries being saved. I've also changed the height shift from
    a translate() to a position + top as the translate caused some rendering
    bugs when context menus overlapped the pagination buttons.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
index 80ed247500..9c937abb51 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -19,7 +19,7 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   savedQueries: SavedQuery[];
-  onQuerySave: () => void;
+  onQueryChange: () => void;
 };
 
 const NAME_DEFAULT = t('Untitled query');
@@ -64,7 +64,7 @@ class EventInputName extends React.Component<Props> {
 
     handleUpdateQueryName(api, organization, nextEventView).then(
       (updatedQuery: SavedQuery) => {
-        this.props.onQuerySave();
+        this.props.onQueryChange();
         const view = EventView.fromSavedQuery(updatedQuery);
         browserHistory.push({
           pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 57a6382560..7e3baf810e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -130,9 +130,9 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
     this.setState({isBannerHidden: true});
   };
 
-  // When a query is saved we need to re-fetch the
+  // When a query is saved or deleted we need to re-fetch the
   // saved query list as we don't use a reflux store.
-  handleQuerySave = () => {
+  handleQueryChange = () => {
     this.fetchData({reloading: true});
   };
 
@@ -220,6 +220,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
             savedQueries={savedQueries}
             location={location}
             organization={organization}
+            onQueryChange={this.handleQueryChange}
           />
         )}
       </PageContent>
@@ -268,7 +269,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
             savedQueries={savedQueries}
             organization={organization}
             eventView={eventView}
-            onQuerySave={this.handleQuerySave}
+            onQueryChange={this.handleQueryChange}
           />
           <Controller>
             <SavedQueryButtonGroup
@@ -277,7 +278,7 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
               eventView={eventView}
               savedQueries={savedQueries}
               savedQueriesLoading={reloading}
-              onQuerySave={this.handleQuerySave}
+              onQueryChange={this.handleQueryChange}
             />
           </Controller>
         </HeaderBox>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index b1406c49c2..84508be942 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -29,6 +29,7 @@ type Props = {
   location: Location;
   savedQueries: SavedQuery[];
   pageLinks: string;
+  onQueryChange: () => void;
 };
 
 class QueryList extends React.Component<Props> {
@@ -36,13 +37,10 @@ class QueryList extends React.Component<Props> {
     event.preventDefault();
     event.stopPropagation();
 
-    const {api, location, organization} = this.props;
+    const {api, organization, onQueryChange} = this.props;
 
     handleDeleteQuery(api, organization, eventView).then(() => {
-      browserHistory.push({
-        pathname: location.pathname,
-        query: {},
-      });
+      onQueryChange();
     });
   };
 
@@ -50,12 +48,13 @@ class QueryList extends React.Component<Props> {
     event.preventDefault();
     event.stopPropagation();
 
-    const {api, location, organization} = this.props;
+    const {api, location, organization, onQueryChange} = this.props;
 
     eventView = eventView.clone();
     eventView.name = `${eventView.name} copy`;
 
     handleCreateQuery(api, organization, eventView).then(() => {
+      onQueryChange();
       browserHistory.push({
         pathname: location.pathname,
         query: {},
diff --git a/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx b/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
index 601a074314..138f3fefaf 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
@@ -62,7 +62,8 @@ const StyledQueryCard = styled('button')`
   &:focus,
   &:hover {
     box-shadow: 0px 0px 0px 6px rgba(209, 202, 216, 0.2);
-    transform: translateY(-2px);
+    position: relative;
+    top: -2px;
     outline: none;
   }
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 897bcf08e3..99e71b78b1 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -33,7 +33,7 @@ type Props = {
   eventView: EventView;
   savedQueries: SavedQuery[];
   savedQueriesLoading: boolean;
-  onQuerySave: () => void;
+  onQueryChange: () => void;
 };
 
 type State = {
@@ -148,7 +148,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
       (savedQuery: any) => {
         const view = EventView.fromSavedQuery(savedQuery);
 
-        this.props.onQuerySave();
+        this.props.onQueryChange();
         this.setState({queryName: ''});
         browserHistory.push({
           pathname: location.pathname,
@@ -165,7 +165,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     const {api, organization, eventView} = this.props;
 
     handleUpdateQuery(api, organization, eventView).then(() => {
-      this.props.onQuerySave();
+      this.props.onQueryChange();
       this.setState({queryName: ''});
     });
   };
@@ -177,7 +177,7 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     const {api, location, organization, eventView} = this.props;
 
     handleDeleteQuery(api, organization, eventView).then(() => {
-      this.props.onQuerySave();
+      this.props.onQueryChange();
       browserHistory.push({
         pathname: location.pathname,
         query: {},
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 9453d71595..71e887ecc2 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -16,7 +16,7 @@ function generateWrappedComponent(
   organization,
   eventView,
   savedQueries,
-  onQuerySave
+  onQueryChange
 ) {
   return mountWithTheme(
     <SavedQueryButtonGroup
@@ -24,7 +24,7 @@ function generateWrappedComponent(
       organization={organization}
       eventView={eventView}
       savedQueries={savedQueries}
-      onQuerySave={onQuerySave}
+      onQueryChange={onQueryChange}
     />,
     TestStubs.routerContext()
   );
@@ -53,13 +53,13 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
   const savedQueries = [errorsSavedQuery];
 
   describe('building on a new query', () => {
-    let onQuerySave;
+    let onQueryChange;
     const mockUtils = jest
       .spyOn(utils, 'handleCreateQuery')
       .mockImplementation(() => Promise.resolve(errorsSavedQuery));
 
     beforeEach(() => {
-      onQuerySave = jest.fn();
+      onQueryChange = jest.fn();
       mockUtils.mockClear();
     });
 
@@ -69,7 +69,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         errorsView,
         savedQueries,
-        onQuerySave
+        onQueryChange
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -89,7 +89,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         errorsView,
         savedQueries,
-        onQuerySave
+        onQueryChange
       );
 
       // Click on ButtonSaveAs to open dropdown
@@ -114,7 +114,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         }),
         true
       );
-      expect(onQuerySave).toHaveBeenCalled();
+      expect(onQueryChange).toHaveBeenCalled();
     });
 
     it('rejects if query.name is empty', async () => {
@@ -123,7 +123,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         errorsView,
         savedQueries,
-        onQuerySave
+        onQueryChange
       );
 
       // Click on ButtonSaveAs to open dropdown
@@ -148,18 +148,18 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       // expect(wrapper.state('queryName')).toBe('');
 
       expect(mockUtils).not.toHaveBeenCalled();
-      expect(onQuerySave).not.toHaveBeenCalled();
+      expect(onQueryChange).not.toHaveBeenCalled();
     });
   });
 
   describe('viewing a saved query', () => {
-    let mockUtils, onQuerySave;
+    let mockUtils, onQueryChange;
 
     beforeEach(() => {
       mockUtils = jest
         .spyOn(utils, 'handleDeleteQuery')
         .mockImplementation(() => Promise.resolve(errorsSavedQuery));
-      onQuerySave = jest.fn();
+      onQueryChange = jest.fn();
     });
 
     afterEach(() => {
@@ -172,7 +172,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         errorsViewSaved,
         savedQueries,
-        onQuerySave
+        onQueryChange
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -192,7 +192,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         errorsViewSaved,
         savedQueries,
-        onQuerySave
+        onQueryChange
       );
 
       const buttonDelete = wrapper.find(SELECTOR_BUTTON_DELETE).first();
@@ -203,12 +203,12 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         expect.objectContaining({id: '1'})
       );
-      expect(onQuerySave).toHaveBeenCalled();
+      expect(onQueryChange).toHaveBeenCalled();
     });
   });
 
   describe('modifying a saved query', () => {
-    let mockUtils, onQuerySave;
+    let mockUtils, onQueryChange;
 
     it('renders the correct set of buttons', () => {
       const wrapper = generateWrappedComponent(
@@ -216,7 +216,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         organization,
         errorsViewModified,
         [errorsViewSaved.toNewQuery()],
-        onQuerySave
+        onQueryChange
       );
 
       const buttonSaveAs = wrapper.find(SELECTOR_BUTTON_SAVE_AS);
@@ -235,7 +235,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
         mockUtils = jest
           .spyOn(utils, 'handleUpdateQuery')
           .mockImplementation(() => Promise.resolve(errorsSavedQuery));
-        onQuerySave = jest.fn();
+        onQueryChange = jest.fn();
       });
 
       afterEach(() => {
@@ -248,7 +248,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           organization,
           errorsViewModified,
           savedQueries,
-          onQuerySave
+          onQueryChange
         );
 
         // Click on Save in the Dropdown
@@ -262,7 +262,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
             ...errorsViewModified,
           })
         );
-        expect(onQuerySave).toHaveBeenCalled();
+        expect(onQueryChange).toHaveBeenCalled();
       });
     });
 
@@ -283,7 +283,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           organization,
           errorsViewModified,
           savedQueries,
-          onQuerySave
+          onQueryChange
         );
 
         // Click on ButtonSaveAs to open dropdown
@@ -308,7 +308,7 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
           }),
           false
         );
-        expect(onQuerySave).toHaveBeenCalled();
+        expect(onQueryChange).toHaveBeenCalled();
       });
     });
   });
