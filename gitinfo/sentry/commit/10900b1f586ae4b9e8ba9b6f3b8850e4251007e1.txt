commit 10900b1f586ae4b9e8ba9b6f3b8850e4251007e1
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 22 17:52:03 2015 -0700

    Show generated rule output on list

diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index 63763cf172..c6180463fc 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -8,6 +8,7 @@ sentry.rules.conditions.tagged_event
 
 from __future__ import absolute_import
 
+from collections import OrderedDict
 from django import forms
 
 from sentry.rules.conditions.base import EventCondition
@@ -22,16 +23,19 @@ class MatchType(object):
     NOT_CONTAINS = 'nc'
 
 
+MATCH_CHOICES = OrderedDict([
+    (MatchType.EQUAL, 'equals'),
+    (MatchType.NOT_EQUAL, 'does not equal'),
+    (MatchType.STARTS_WITH, 'starts with'),
+    (MatchType.ENDS_WITH, 'ends with'),
+    (MatchType.CONTAINS, 'contains'),
+    (MatchType.NOT_CONTAINS, 'does not contain'),
+])
+
+
 class TaggedEventForm(forms.Form):
     key = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'key'}))
-    match = forms.ChoiceField(choices=(
-        (MatchType.EQUAL, 'equals'),
-        (MatchType.NOT_EQUAL, 'does not equal'),
-        (MatchType.STARTS_WITH, 'starts with'),
-        (MatchType.ENDS_WITH, 'ends with'),
-        (MatchType.CONTAINS, 'contains'),
-        (MatchType.NOT_CONTAINS, 'does not contain'),
-    ))
+    match = forms.ChoiceField(choices=MATCH_CHOICES.items())
     value = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'value'}))
 
 
diff --git a/src/sentry/templates/sentry/projects/rules/list.html b/src/sentry/templates/sentry/projects/rules/list.html
index bbfc483361..34d01ef1b6 100644
--- a/src/sentry/templates/sentry/projects/rules/list.html
+++ b/src/sentry/templates/sentry/projects/rules/list.html
@@ -19,7 +19,19 @@
                 {% for rule in rule_list %}
                     <tr>
                         <td>
-                            <a href="{% url 'sentry-edit-project-rule' project.organization.slug project.slug rule.id %}">{{ rule.label }}</a>
+                            <strong><a href="{% url 'sentry-edit-project-rule' project.organization.slug project.slug rule.id %}">{{ rule.label }}</a></strong><br />
+                            {% if rule.conditions %}
+                                <div><small><strong>When</strong></small></div>
+                                {% for condition in rule.conditions %}
+                                    <code>{{ condition }}</code><br />
+                                {% endfor %}
+                            {% endif %}
+                            {% if rule.actions %}
+                                <div><small><strong>Do</strong></small></div>
+                                {% for action in rule.actions %}
+                                    <code>{{ action }}</code><br />
+                                {% endfor %}
+                            {% endif %}
                         </td>
                         <td>
                             <a href="{% url 'sentry-remove-project-rule' project.organization.slug project.slug rule.id %}"
diff --git a/src/sentry/web/frontend/projects/rules.py b/src/sentry/web/frontend/projects/rules.py
index 7b71cc66b9..aa56695627 100644
--- a/src/sentry/web/frontend/projects/rules.py
+++ b/src/sentry/web/frontend/projects/rules.py
@@ -86,9 +86,35 @@ class RuleFormValidator(object):
         return not bool(self.errors)
 
 
+def _generate_rule_label(project, rule, data):
+    rule_cls = rules.get(data['id'])
+    if rule_cls is None:
+        return
+
+    rule_inst = rule_cls(project, data=data, rule=rule)
+    return rule_inst.render_label()
+
+
 @has_access(MEMBER_ADMIN)
 def list_rules(request, organization, project):
-    rule_list = Rule.objects.filter(project=project)
+    rule_list = []
+    for rule in Rule.objects.filter(project=project):
+        conditions = []
+        for data in rule.data['conditions']:
+            conditions.append(_generate_rule_label(project, rule, data))
+        conditions = filter(bool, conditions)
+
+        actions = []
+        for data in rule.data['actions']:
+            actions.append(_generate_rule_label(project, rule, data))
+        actions = filter(bool, actions)
+
+        rule_list.append({
+            'id': rule.id,
+            'label': rule.label,
+            'actions': actions,
+            'conditions': conditions,
+        })
 
     context = csrf(request)
     context.update({
