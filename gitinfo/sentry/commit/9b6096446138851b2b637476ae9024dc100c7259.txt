commit 9b6096446138851b2b637476ae9024dc100c7259
Author: Dora <dora.l.chan@gmail.com>
Date:   Tue Dec 3 10:35:59 2019 -0800

    feat(discoverv2): tracing-cleanup (#15899)
    
    * begin trace cleanup
    
    * remove purple color
    
    * transition divider line
    
    * added white text
    
    * change from divergent colors to chart palette
    
    * fix duration guide box
    
    * undo val string removal for background color removal
    
    * removing excess transformY

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
index d5231a7b4b..d7d64eef17 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
@@ -20,10 +20,10 @@ import {zIndex} from './styles';
 
 export const MINIMAP_CONTAINER_HEIGHT = 106;
 export const MINIMAP_SPAN_BAR_HEIGHT = 4;
-const MINIMAP_HEIGHT = 75;
+const MINIMAP_HEIGHT = 120;
 export const NUM_OF_SPANS_FIT_IN_MINI_MAP = MINIMAP_HEIGHT / MINIMAP_SPAN_BAR_HEIGHT;
-const TIME_AXIS_HEIGHT = 30;
-const VIEW_HANDLE_HEIGHT = 20;
+const TIME_AXIS_HEIGHT = 20;
+const VIEW_HANDLE_HEIGHT = 18;
 
 type PropType = {
   minimapInteractiveRef: React.RefObject<HTMLDivElement>;
@@ -473,32 +473,27 @@ const TimeAxis = styled('div')`
   width: 100%;
   position: absolute;
   left: 0;
-  top: ${MINIMAP_HEIGHT}px;
-
-  border-top: 1px solid #d1cad8;
-
+  bottom: 0;
+  border-top: 1px solid ${p => p.theme.borderDark};
   height: ${TIME_AXIS_HEIGHT}px;
-  background-color: #faf9fb;
-
-  color: #9585a3;
+  background-color: ${p => p.theme.white};
+  color: ${p => p.theme.gray2};
   font-size: 10px;
   font-weight: 500;
 `;
 
 const TickLabelContainer = styled('div')`
   height: ${TIME_AXIS_HEIGHT}px;
-
   position: absolute;
   top: 0;
-
+  display: flex;
+  align-items: center;
   user-select: none;
 `;
 
 const TickText = styled('span')<{align: TickAlignment}>`
-  line-height: 1;
-
   position: absolute;
-  bottom: 8px;
+  line-height: 1;
   white-space: nowrap;
 
   ${({align}) => {
@@ -523,14 +518,11 @@ const TickText = styled('span')<{align: TickAlignment}>`
 
 const TickMarker = styled('div')`
   width: 1px;
-  height: 5px;
-
-  background-color: #d1cad8;
-
+  height: 4px;
+  background-color: ${p => p.theme.borderDark};
   position: absolute;
   top: 0;
   left: 0;
-
   transform: translateX(-50%);
 `;
 
@@ -552,20 +544,12 @@ const TickLabel = (props: {
 
 const DurationGuideBox = styled('div')<{alignLeft: boolean}>`
   position: absolute;
-
   background-color: ${p => p.theme.white};
   padding: 4px;
-
+  height: 100%;
   border-radius: 3px;
   border: 1px solid rgba(0, 0, 0, 0.1);
-
-  height: 16px;
-
   line-height: 1;
-  vertical-align: middle;
-
-  transform: translateY(50%);
-
   white-space: nowrap;
 
   ${({alignLeft}) => {
@@ -573,7 +557,7 @@ const DurationGuideBox = styled('div')<{alignLeft: boolean}>`
       return null;
     }
 
-    return 'transform: translateY(50%) translateX(-100%) translateX(-8px);';
+    return 'transform: translateX(-100%) translateX(-8px);';
   }};
 `;
 
@@ -583,11 +567,8 @@ const HeaderContainer = styled('div')`
   left: 0;
   top: 0;
   z-index: ${zIndex.minimapContainer};
-
-  background-color: #fff;
-
-  border-bottom: 1px solid #d1cad8;
-
+  background-color: ${p => p.theme.white};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
   height: ${MINIMAP_HEIGHT + TIME_AXIS_HEIGHT + 1}px;
 `;
 
@@ -611,42 +592,21 @@ const MinimapContainer = styled('div')`
 const ViewHandleContainer = styled('div')`
   position: absolute;
   top: 0;
-
   height: ${MINIMAP_HEIGHT}px;
 `;
 
 const ViewHandle = styled('div')<{isDragging: boolean}>`
   position: absolute;
-  top: 0;
-
-  background-color: #6c5fc7;
-
+  background-color: ${p => p.theme.gray5};
   cursor: col-resize;
-
+  width: 8px;
   height: ${VIEW_HANDLE_HEIGHT}px;
-
-  ${({isDragging}) => {
-    if (isDragging) {
-      return `
-      width: 6px;
-      transform: translate(-3px, ${MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}px);
-      `;
-    }
-
-    return `
-    width: 4px;
-    transform: translate(-2px, ${MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}px);
-    `;
-  }};
-
-  &:hover {
-    width: 6px;
-    transform: translate(-3px, ${MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}px);
-  }
+  bottom: 0;
+  left: -4px;
 `;
 
 const Fog = styled('div')`
-  background-color: rgba(241, 245, 251, 0.5);
+  background-color: rgba(108, 95, 199, 0.1);
   position: absolute;
   top: 0;
 `;
@@ -657,9 +617,7 @@ const MinimapSpanBar = styled('div')`
   min-height: 2px;
   max-height: 2px;
   margin: 2px 0;
-
   min-width: 1px;
-
   border-radius: 1px;
 `;
 
@@ -671,8 +629,7 @@ const CursorGuide = styled('div')`
   position: absolute;
   top: 0;
   width: 1px;
-  background-color: #e03e2f;
-
+  background-color: ${p => p.theme.red};
   transform: translateX(-50%);
 `;
 
@@ -703,8 +660,8 @@ const Handle = ({
           y1="0"
           y2={MINIMAP_HEIGHT - VIEW_HANDLE_HEIGHT}
           strokeWidth="1"
-          strokeDasharray="4 3"
-          style={{stroke: '#6C5FC7'}}
+          strokeDasharray="5 3"
+          style={{stroke: '#302839'}}
         />
       </svg>
       <ViewHandle
@@ -722,9 +679,7 @@ const Handle = ({
 const WindowSelection = styled('div')`
   position: absolute;
   top: 0;
-
   height: ${MINIMAP_HEIGHT}px;
-
   background-color: rgba(69, 38, 80, 0.1);
 `;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
index aae1bf9232..71ae0a3d4b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
@@ -1,9 +1,7 @@
 import React from 'react';
-
-import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 
-import {Panel, PanelHeader, PanelBody} from 'app/components/panels';
+import {Panel} from 'app/components/panels';
 
 import {SentryTransactionEvent} from './types';
 import TraceView from './traceView';
@@ -21,12 +19,7 @@ class SpansInterface extends React.Component<PropType> {
 
     return (
       <Panel>
-        <PanelHeader disablePadding={false} hasButtons={false}>
-          {t('Trace View - This Transaction')}
-        </PanelHeader>
-        <PanelBody>
-          <TraceView event={event} />
-        </PanelBody>
+        <TraceView event={event} />
       </Panel>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 3fae573ede..22153fc4b7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import styled from 'react-emotion';
 import get from 'lodash/get';
-import color from 'color';
 import 'intersection-observer'; // this is a polyfill
 
 import {t} from 'app/locale';
@@ -188,6 +187,18 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     showDetail: false,
   };
 
+  componentDidMount() {
+    this._mounted = true;
+    if (this.spanRowDOMRef.current) {
+      this.connectObservers();
+    }
+  }
+
+  componentWillUnmount() {
+    this._mounted = false;
+    this.disconnectObservers();
+  }
+
   spanRowDOMRef = React.createRef<HTMLDivElement>();
   intersectionObserver?: IntersectionObserver = void 0;
   zoomLevel: number = 1; // assume initial zoomLevel is 100%
@@ -556,18 +567,6 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     }
   };
 
-  componentDidMount() {
-    this._mounted = true;
-    if (this.spanRowDOMRef.current) {
-      this.connectObservers();
-    }
-  }
-
-  componentWillUnmount() {
-    this._mounted = false;
-    this.disconnectObservers();
-  }
-
   renderCursorGuide = () => {
     return (
       <CursorGuideHandler.Consumer>
@@ -764,13 +763,13 @@ const getBackgroundColor = ({
   theme: any;
 }) => {
   if (!theme) {
-    return 'white';
+    return theme.white;
   }
 
   if (showDetail) {
-    return theme.offWhite2;
+    return theme.gray5;
   }
-  return showStriping ? theme.offWhite : 'white';
+  return showStriping ? theme.offWhite : theme.white;
 };
 
 type SpanRowCellProps = OmitHtmlDivProps<{
@@ -784,49 +783,40 @@ const SpanRowCell = styled('div')<SpanRowCellProps>`
   height: 100%;
   overflow: hidden;
   background-color: ${p => getBackgroundColor(p)};
+  color: ${p => (p.showDetail ? p.theme.white : null)};
 `;
 
 const SpanRowCellContainer = styled('div')`
   position: relative;
   height: ${SPAN_ROW_HEIGHT}px;
-
-  &:hover ${SpanRowCell} {
-    background-color: ${p =>
-      color(p.theme.offWhite2)
-        .alpha(0.4)
-        .string()};
-  }
 `;
 
 const CursorGuide = styled('div')`
   position: absolute;
   top: 0;
   width: 1px;
-  background-color: #e03e2f;
-
+  background-color: ${p => p.theme.red};
   transform: translateX(-50%);
-
   height: 100%;
 `;
 
 export const DividerLine = styled('div')`
+  background-color: ${p => p.theme.borderDark};
   position: absolute;
   height: 100%;
   width: 1px;
   transform: translateX(-50%);
-
-  /* increase hit target */
-  border-width: 0 5px;
+  transition: all 125ms ease-in-out;
+  border-width: 0 2px;
   border-color: rgba(0, 0, 0, 0);
   border-style: solid;
   box-sizing: content-box;
   background-clip: content-box;
-
-  background-color: #cdc7d5;
   z-index: ${zIndex.dividerLine};
 
   &.hovering {
-    width: 3px;
+    background-color: ${p => p.theme.gray5};
+    width: 2px;
     cursor: col-resize;
   }
 `;
@@ -845,7 +835,6 @@ const SpanBarTitleContainer = styled('div')`
 const SpanBarTitle = styled('div')`
   position: relative;
   height: 100%;
-  color: ${p => p.theme.gray4};
   font-size: ${p => p.theme.fontSizeSmall};
   white-space: nowrap;
   display: flex;
@@ -921,7 +910,6 @@ const getTogglerTheme = ({
   disabled: boolean;
 }) => {
   const buttonTheme = isExpanded ? theme.button.default : theme.button.primary;
-  const activeButtonTheme = isExpanded ? theme.button.primary : theme.button.default;
 
   if (disabled) {
     return `
@@ -937,12 +925,6 @@ const getTogglerTheme = ({
     background: ${buttonTheme.background};
     border: 1px solid ${buttonTheme.border};
     color: ${buttonTheme.color};
-
-    &:hover {
-      background: ${activeButtonTheme.background};
-      border: 1px solid ${activeButtonTheme.border};
-      color: ${activeButtonTheme.color};
-    }
   `;
 };
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 8be66249ba..d17f70e42b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -72,8 +72,6 @@ const SpanDetail = (props: PropTypes) => {
 const SpanDetailContainer = styled('div')`
   border-bottom: 1px solid ${p => p.theme.gray1};
   padding: ${space(2)};
-  background-color: #faf9fb;
-
   cursor: auto;
 `;
 
@@ -94,7 +92,7 @@ const Row = ({
     <tr>
       <td className="key">{title}</td>
       <td className="value">
-        <pre className="val " style={{backgroundColor: '#F0ECF3'}}>
+        <pre className="val">
           <span className="val-string">{children}</span>
         </pre>
       </td>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx
index 569b4ab666..b296c142e7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx
@@ -25,9 +25,7 @@ export const SpanRow = styled('div')<SpanRowAndDivProps>`
   margin-top: ${p => (p.showBorder ? '-1px' : null)}; /* to prevent offset on toggle */
   position: relative;
   overflow: hidden;
-
   min-height: ${SPAN_ROW_HEIGHT}px;
-
   cursor: pointer;
   transition: background-color 0.15s ease-in-out;
 
@@ -36,27 +34,17 @@ export const SpanRow = styled('div')<SpanRowAndDivProps>`
       border-bottom: none !important;
     }
   }
-
-  &:hover {
-    background-color: rgba(189, 180, 199, 0.1);
-  }
 `;
 
 export const SpanRowMessage = styled(SpanRow)`
   display: block;
-
   cursor: auto;
-
-  color: #4a3e56;
-  font-size: 12px;
   line-height: ${SPAN_ROW_HEIGHT}px;
-
   padding-left: ${space(1)};
   padding-right: ${space(1)};
-
-  background-color: #f1f5fb !important;
-
-  outline: 1px solid #c9d4ea;
-
+  color: ${p => p.theme.gray2};
+  background-color: ${p => p.theme.offWhiteLight};
+  outline: 1px solid ${p => p.theme.borderDark};
+  font-size: ${p => p.theme.fontSizeSmall};
   z-index: 99999;
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index b57891b9ba..16a6a9fcc9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -1,5 +1,5 @@
 import isString from 'lodash/isString';
-import {divergentColorScale, spanColors} from 'app/utils/theme';
+import CHART_PALETTE from 'app/constants/chartPalette';
 
 type Rect = {
   // x and y are left/top coords respectively
@@ -246,17 +246,23 @@ const getLetterIndex = (letter: string): number => {
   return index === -1 ? 0 : index;
 };
 
-const colorsAsArray = Object.keys(divergentColorScale).map(
-  key => divergentColorScale[key]
-);
+const colorsAsArray = Object.keys(CHART_PALETTE).map(key => CHART_PALETTE[17][key]);
+
+export const spanColors = {
+  default: CHART_PALETTE[17][4],
+  transaction: CHART_PALETTE[17][8],
+  http: CHART_PALETTE[17][10],
+  db: CHART_PALETTE[17][17],
+};
 
 export const pickSpanBarColour = (input: string | undefined): string => {
   // We pick the color for span bars using the first two letters of the op name.
   // That way colors stay consistent between transactions.
 
   if (!input || input.length < 2) {
-    return divergentColorScale.blue;
+    return CHART_PALETTE[17][4];
   }
+
   if (spanColors[input]) {
     return spanColors[input];
   }
diff --git a/src/sentry/static/sentry/app/utils/theme.tsx b/src/sentry/static/sentry/app/utils/theme.tsx
index 99fdd42f13..17caef0331 100644
--- a/src/sentry/static/sentry/app/utils/theme.tsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -76,43 +76,6 @@ const colors = {
   placeholderBackground: '#f5f5f5',
 };
 
-// from the Sentry design system: most useful for showing a transition
-// from one extreme, through a neutral middle, to an opposite extreme.
-export const divergentColorScale = {
-  blue: '#444674',
-  maroon: '#955389',
-  magenta: '#C15584',
-  salmon: '#E65D73',
-  purple: '#694E86',
-  orange: '#F27A58',
-  marigold: '#F6983B',
-  yellow: '#F2B712',
-  softBlue: '#535577',
-  softMaroon: '#805567',
-  softMagenta: '#99628F',
-  softSalmon: '#96545E',
-  softPurple: '#6B597E',
-  softOrange: '#D17D65',
-  softMarigold: '#E4944E',
-  softYellow: '#EDC658',
-  darkOrange: '#98361B',
-  darkBlue: '#1E1F33',
-  darkMaroon: '#382947',
-  darkMagenta: '#522E4B',
-  darkSalmon: '#833054',
-  darkPurple: '#AF2C41',
-  darkMarigold: '#C36609',
-  darkYellow: '#E2B22E',
-};
-
-// you can link span operation types to specific colors here
-export const spanColors = {
-  default: divergentColorScale.blue,
-  transaction: divergentColorScale.softBlue,
-  db: divergentColorScale.magenta,
-  http: divergentColorScale.marigold,
-};
-
 const warning = {
   backgroundLight: colors.yellowLightest,
   background: colors.yellowDarkest,
diff --git a/src/sentry/static/sentry/less/type.less b/src/sentry/static/sentry/less/type.less
index 0ccb455bef..a799601a20 100644
--- a/src/sentry/static/sentry/less/type.less
+++ b/src/sentry/static/sentry/less/type.less
@@ -174,8 +174,8 @@ code {
 }
 
 pre {
-  word-break: keep-all;
-  word-wrap: normal;
+  word-break: break-all;
+  white-space: pre-wrap;
   padding: 10px;
 }
 
diff --git a/tests/js/spec/components/events/interfaces/spanComponents/utils.spec.jsx b/tests/js/spec/components/events/interfaces/spanComponents/utils.spec.jsx
index 3cbcd23ba5..b599dce218 100644
--- a/tests/js/spec/components/events/interfaces/spanComponents/utils.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/spanComponents/utils.spec.jsx
@@ -1,24 +1,25 @@
-import {divergentColorScale, spanColors} from 'app/utils/theme';
-import {pickSpanBarColour} from 'app/components/events/interfaces/spans/utils';
+import CHART_PALETTE from 'app/constants/chartPalette';
+import {
+  spanColors,
+  pickSpanBarColour,
+} from 'app/components/events/interfaces/spans/utils';
 
 describe('pickSpanBarColour()', function() {
   it('returns blue when undefined', function() {
     expect(pickSpanBarColour(undefined)).toEqual(spanColors.default);
   });
 
+  it('returns the predefined color when available', function() {
+    expect(pickSpanBarColour('transaction')).toEqual(spanColors.transaction);
+  });
+
   it('returns blue when the string is too short', function() {
     expect(pickSpanBarColour('')).toEqual(spanColors.default);
     expect(pickSpanBarColour('c')).toEqual(spanColors.default);
   });
 
-  it('returns the predefined color when available', function() {
-    expect(pickSpanBarColour('transaction')).toEqual(spanColors.transaction);
-  });
-
   it('returns a random color when no predefined option is available', function() {
-    const colorsAsArray = Object.keys(divergentColorScale).map(
-      key => divergentColorScale[key]
-    );
+    const colorsAsArray = Object.keys(CHART_PALETTE).map(key => CHART_PALETTE[17][key]);
 
     let randomColor = pickSpanBarColour('a normal string');
     expect(colorsAsArray).toContain(randomColor);
