commit aabd03de718782f2490ce1b92757e8917a9ee318
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Sep 25 14:16:08 2018 -0700

    feat(discover): Move to tabs for sidebar (#9856)
    
    We need to move to a tab layout since we'll add another tab soon for saved search.
    
    Add some placeholder styles for saved search component.

diff --git a/src/sentry/static/sentry/app/components/navTabs.jsx b/src/sentry/static/sentry/app/components/navTabs.jsx
index f18a1bc617..5f3b81a5c3 100644
--- a/src/sentry/static/sentry/app/components/navTabs.jsx
+++ b/src/sentry/static/sentry/app/components/navTabs.jsx
@@ -3,9 +3,11 @@ import PropTypes from 'prop-types';
 import classnames from 'classnames';
 
 function NavTabs(props) {
-  let {underlined, ...tabProps} = props;
-  let className = classnames('nav nav-tabs', {'border-bottom': underlined});
-  return <ul className={className} {...tabProps} />;
+  let {underlined, className, ...tabProps} = props;
+  let mergedClassName = classnames('nav nav-tabs', className, {
+    'border-bottom': underlined,
+  });
+  return <ul className={mergedClassName} {...tabProps} />;
 }
 
 NavTabs.propTypes = {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 7f607ebff0..889df7ad24 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -1,4 +1,3 @@
-import {Flex, Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import {browserHistory} from 'react-router';
@@ -6,41 +5,28 @@ import {uniq} from 'lodash';
 
 import {addErrorMessage, clearIndicators} from 'app/actionCreators/indicator';
 import {t} from 'app/locale';
-import Button from 'app/components/button';
 import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
-import NumberField from 'app/components/forms/numberField';
-import SelectControl from 'app/components/forms/selectControl';
 import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 
-import Aggregations from './aggregations';
-import Conditions from './conditions';
 import Result from './result';
 import Intro from './intro';
 import EarlyAdopterMessage from './earlyAdopterMessage';
-import SavedQueries from './savedQueries';
+import QueryFields from './sidebar/queryFields';
+import SavedQueries from './sidebar/savedQueries';
 
-import {
-  getQueryStringFromQuery,
-  getQueryFromQueryString,
-  getOrderByOptions,
-} from './utils';
+import {getQueryStringFromQuery, getQueryFromQueryString} from './utils';
 import {isValidCondition} from './conditions/utils';
 import {isValidAggregation} from './aggregations/utils';
 import {
   Discover,
-  Sidebar,
   Body,
   BodyContent,
   TopBar,
-  SidebarHeader,
-  SidebarTitle,
+  Sidebar,
+  SidebarTabs,
   PageTitle,
-  Fieldset,
-  PlaceholderText,
-  SidebarLabel,
-  ButtonSpinner,
 } from './styles';
 
 import {trackQuery} from './analytics';
@@ -59,7 +45,7 @@ export default class OrganizationDiscover extends React.Component {
       chartData: null,
       chartQuery: null,
       isFetchingQuery: false,
-      showSavedQueries: false,
+      view: 'query',
     };
   }
 
@@ -181,15 +167,23 @@ export default class OrganizationDiscover extends React.Component {
     }
   };
 
-  getSummarizePlaceholder = () => {
-    const {queryBuilder} = this.props;
-    const query = queryBuilder.getInternal();
-    const text =
-      query.aggregations.length > 0
-        ? t('Select fields')
-        : t('No fields selected, showing all');
-    return <PlaceholderText>{text}</PlaceholderText>;
-  };
+  renderSidebarNav() {
+    const {view} = this.state;
+    const views = [
+      {id: 'query', title: t('Query')},
+      // {id: 'saved', title: t('Saved queries')},
+    ];
+
+    return (
+      <SidebarTabs underlined={true}>
+        {views.map(({id, title}) => (
+          <li key={id} className={view === id ? 'active' : ''}>
+            <a onClick={() => this.setState({view: id})}>{title}</a>
+          </li>
+        ))}
+      </SidebarTabs>
+    );
+  }
 
   reset = () => {
     browserHistory.push({
@@ -197,124 +191,27 @@ export default class OrganizationDiscover extends React.Component {
     });
   };
 
-  toggleSidebar = () => {
-    this.setState(state => ({
-      showSavedQueries: !state.showSavedQueries,
-    }));
-  };
-
   render() {
-    const {
-      data,
-      query,
-      chartData,
-      chartQuery,
-      isFetchingQuery,
-      showSavedQueries,
-    } = this.state;
+    const {data, query, chartData, chartQuery, isFetchingQuery, view} = this.state;
     const {queryBuilder, organization} = this.props;
 
     const currentQuery = queryBuilder.getInternal();
-    const columns = queryBuilder.getColumns();
-    // Do not allow conditions on projectID field
-    const columnsForConditions = columns.filter(({name}) => name !== 'project_id');
-
-    const fieldOptions = columns.map(({name}) => ({
-      value: name,
-      label: name,
-    }));
 
     return (
       <Discover>
         <Sidebar>
           <PageTitle>{t('Discover')}</PageTitle>
-          {!showSavedQueries && (
-            <React.Fragment>
-              <SidebarHeader>
-                <SidebarTitle>{t('Query')}</SidebarTitle>
-                <Flex>
-                  <Box mr={1}>
-                    <Button size="xsmall" onClick={this.reset}>
-                      {t('Reset')}
-                    </Button>
-                  </Box>
-                  <Button
-                    size="xsmall"
-                    onClick={this.runQuery}
-                    priority="primary"
-                    busy={isFetchingQuery}
-                  >
-                    {t('Run')}
-                    {isFetchingQuery && <ButtonSpinner />}
-                  </Button>
-                </Flex>
-              </SidebarHeader>
-              <Fieldset>
-                <SidebarLabel htmlFor="fields" className="control-label">
-                  {t('Summarize')}
-                </SidebarLabel>
-                <SelectControl
-                  name="fields"
-                  multiple={true}
-                  placeholder={this.getSummarizePlaceholder()}
-                  options={fieldOptions}
-                  value={currentQuery.fields}
-                  onChange={val =>
-                    this.updateField('fields', val.map(({value}) => value))}
-                  clearable={true}
-                />
-              </Fieldset>
-              <Fieldset>
-                <Aggregations
-                  value={currentQuery.aggregations}
-                  columns={columns}
-                  onChange={val => this.updateField('aggregations', val)}
-                />
-              </Fieldset>
-              <Fieldset>
-                <Conditions
-                  value={currentQuery.conditions}
-                  columns={columnsForConditions}
-                  onChange={val => this.updateField('conditions', val)}
-                />
-              </Fieldset>
-              <Fieldset>
-                <SidebarLabel htmlFor="orderby" className="control-label">
-                  {t('Order by')}
-                </SidebarLabel>
-                <SelectControl
-                  name="orderby"
-                  label={t('Order By')}
-                  placeholder={<PlaceholderText>{t('Order by...')}</PlaceholderText>}
-                  options={getOrderByOptions(queryBuilder)}
-                  value={currentQuery.orderby}
-                  onChange={val => this.updateField('orderby', val.value)}
-                />
-              </Fieldset>
-              <Fieldset>
-                <NumberField
-                  name="limit"
-                  label={<SidebarLabel>{t('Limit')}</SidebarLabel>}
-                  placeholder="#"
-                  value={currentQuery.limit}
-                  onChange={val =>
-                    this.updateField('limit', typeof val === 'number' ? val : null)}
-                />
-              </Fieldset>
-              <Fieldset>
-                {/**<SidebarToggle onClick={this.toggleSidebar}>
-                  {t('View saved queries')}
-                  </SidebarToggle>**/}
-              </Fieldset>
-            </React.Fragment>
-          )}
-          {showSavedQueries && (
-            <SavedQueries
-              organization={organization}
+          {this.renderSidebarNav()}
+          {view === 'query' && (
+            <QueryFields
               queryBuilder={queryBuilder}
-              toggleSidebar={this.toggleSidebar}
+              isFetchingQuery={isFetchingQuery}
+              updateField={this.updateField}
+              runQuery={this.runQuery}
+              reset={this.reset}
             />
           )}
+          {view === 'saved' && <SavedQueries organization={organization} />}
         </Sidebar>
         <Body direction="column" flex="1">
           <TopBar>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/savedQueries/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/savedQueries/index.jsx
deleted file mode 100644
index 8f1a7de29e..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDiscover/savedQueries/index.jsx
+++ /dev/null
@@ -1,41 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-
-// import SentryTypes from 'app/sentryTypes';
-
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t} from 'app/locale';
-
-import {SidebarHeader, SidebarTitle, SidebarToggle, Fieldset} from '../styles';
-
-export default class SavedQueries extends React.Component {
-  static propTypes = {
-    // organization: SentryTypes.Organization.isRequired,
-    // queryBuilder: PropTypes.object.isRequired,
-    toggleSidebar: PropTypes.func.isRequired,
-  };
-
-  renderLoading() {
-    return <LoadingIndicator />;
-  }
-
-  renderEmpty() {
-    return <Fieldset>{t('No saved searches')}</Fieldset>;
-  }
-
-  render() {
-    const {toggleSidebar} = this.props;
-
-    return (
-      <React.Fragment>
-        <SidebarHeader>
-          <SidebarTitle>{t('Saved Queries')}</SidebarTitle>
-        </SidebarHeader>
-        {this.renderEmpty()}
-        <Fieldset>
-          <SidebarToggle onClick={toggleSidebar}>{t('View query builder')}</SidebarToggle>
-        </Fieldset>
-      </React.Fragment>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/savedQueries/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/savedQueries/utils.jsx
deleted file mode 100644
index 9be0552084..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDiscover/savedQueries/utils.jsx
+++ /dev/null
@@ -1,30 +0,0 @@
-import {Client} from 'app/api';
-
-export function fetchSavedQueries(organization) {
-  const api = new Client();
-  const endpoint = `/organizations/${organization.slug}/discover/saved/`;
-
-  return api.requestPromise(endpoint, {
-    method: 'GET',
-  });
-}
-
-export function createQuery(organization, data) {
-  const api = new Client();
-  const endpoint = `/organizations/${organization.slug}/discover/saved/`;
-
-  return api.requestPromise(endpoint, {
-    method: 'POST',
-    data,
-  });
-}
-
-export function updateQuery(organization, id, data) {
-  const api = new Client();
-  const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;
-
-  return api.requestPromise(endpoint, {
-    method: 'POST',
-    data,
-  });
-}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
new file mode 100644
index 0000000000..cf2a0fa291
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryFields.jsx
@@ -0,0 +1,120 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Flex, Box} from 'grid-emotion';
+
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import NumberField from 'app/components/forms/numberField';
+import SelectControl from 'app/components/forms/selectControl';
+
+import Aggregations from '../aggregations';
+import Conditions from '../conditions';
+import {getOrderByOptions} from '../utils';
+import {Fieldset, PlaceholderText, SidebarLabel, ButtonSpinner} from '../styles';
+
+export default class QueryFields extends React.Component {
+  static propTypes = {
+    queryBuilder: PropTypes.object.isRequired,
+    isFetchingQuery: PropTypes.bool.isRequired,
+    updateField: PropTypes.func.isRequired,
+    runQuery: PropTypes.func.isRequired,
+    reset: PropTypes.func.isRequired,
+  };
+
+  getSummarizePlaceholder = () => {
+    const {queryBuilder} = this.props;
+    const query = queryBuilder.getInternal();
+    const text =
+      query.aggregations.length > 0
+        ? t('Select fields')
+        : t('No fields selected, showing all');
+    return <PlaceholderText>{text}</PlaceholderText>;
+  };
+
+  render() {
+    const {queryBuilder, isFetchingQuery, updateField, runQuery, reset} = this.props;
+
+    const currentQuery = queryBuilder.getInternal();
+    const columns = queryBuilder.getColumns();
+    // Do not allow conditions on projectID field
+    const columnsForConditions = columns.filter(({name}) => name !== 'project_id');
+
+    const fieldOptions = columns.map(({name}) => ({
+      value: name,
+      label: name,
+    }));
+
+    return (
+      <React.Fragment>
+        <Fieldset>
+          <SidebarLabel htmlFor="fields" className="control-label">
+            {t('Summarize')}
+          </SidebarLabel>
+          <SelectControl
+            name="fields"
+            multiple={true}
+            placeholder={this.getSummarizePlaceholder()}
+            options={fieldOptions}
+            value={currentQuery.fields}
+            onChange={val => updateField('fields', val.map(({value}) => value))}
+            clearable={true}
+          />
+        </Fieldset>
+        <Fieldset>
+          <Aggregations
+            value={currentQuery.aggregations}
+            columns={columns}
+            onChange={val => updateField('aggregations', val)}
+          />
+        </Fieldset>
+        <Fieldset>
+          <Conditions
+            value={currentQuery.conditions}
+            columns={columnsForConditions}
+            onChange={val => updateField('conditions', val)}
+          />
+        </Fieldset>
+        <Fieldset>
+          <SidebarLabel htmlFor="orderby" className="control-label">
+            {t('Order by')}
+          </SidebarLabel>
+          <SelectControl
+            name="orderby"
+            label={t('Order By')}
+            placeholder={<PlaceholderText>{t('Order by...')}</PlaceholderText>}
+            options={getOrderByOptions(queryBuilder)}
+            value={currentQuery.orderby}
+            onChange={val => updateField('orderby', val.value)}
+          />
+        </Fieldset>
+        <Fieldset>
+          <NumberField
+            name="limit"
+            label={<SidebarLabel>{t('Limit')}</SidebarLabel>}
+            placeholder="#"
+            value={currentQuery.limit}
+            onChange={val => updateField('limit', typeof val === 'number' ? val : null)}
+          />
+        </Fieldset>
+        <Fieldset>
+          <Flex>
+            <Button
+              size="xsmall"
+              onClick={runQuery}
+              priority="primary"
+              busy={isFetchingQuery}
+            >
+              {t('Run')}
+              {isFetchingQuery && <ButtonSpinner />}
+            </Button>
+            <Box ml={1}>
+              <Button size="xsmall" onClick={reset}>
+                {t('Reset')}
+              </Button>
+            </Box>
+          </Flex>
+        </Fieldset>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueries.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueries.jsx
new file mode 100644
index 0000000000..b7ffbc5b23
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/savedQueries.jsx
@@ -0,0 +1,70 @@
+import React from 'react';
+// import PropTypes from 'prop-types';
+
+import SentryTypes from 'app/sentryTypes';
+
+import Link from 'app/components/link';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import {t} from 'app/locale';
+
+import {fetchSavedQueries} from '../utils';
+import {Fieldset, SavedQueryList, SavedQueryListItem} from '../styles';
+
+export default class SavedQueries extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+  };
+
+  constructor() {
+    super();
+    this.state = {isLoading: true};
+  }
+
+  componentWillMount() {
+    fetchSavedQueries(this.props.organization)
+      .then(data => {
+        this.setState({isLoading: false, data});
+      })
+      .catch(err => {
+        this.setState({isLoading: false});
+      });
+  }
+
+  renderLoading() {
+    return (
+      <Fieldset>
+        <LoadingIndicator mini />
+      </Fieldset>
+    );
+  }
+
+  renderEmpty() {
+    return <Fieldset>{t('No saved searches')}</Fieldset>;
+  }
+
+  renderList() {
+    const {organization} = this.props;
+    const {data} = this.state;
+
+    if (!data.length) {
+      return this.renderEmpty();
+    }
+
+    return (
+      <SavedQueryList>
+        {data.map(({id, name}) => (
+          <SavedQueryListItem key={id}>
+            <Link to={`/organizations/${organization.slug}/discover/saved/${id}/`}>
+              {name}
+            </Link>
+          </SavedQueryListItem>
+        ))}
+      </SavedQueryList>
+    );
+  }
+
+  render() {
+    const {isLoading} = this.state;
+    return isLoading ? this.renderEmpty() : this.renderList();
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 02cf83a143..919aba5cb7 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -1,11 +1,12 @@
+import React from 'react';
 import styled from 'react-emotion';
 import {Flex, Box} from 'grid-emotion';
 import {keyframes} from 'emotion';
 
 import space from 'app/styles/space';
 
-import Link from 'app/components/link';
 import Panel from 'app/components/panels/panel';
+import NavTabs from 'app/components/navTabs';
 
 export const Discover = styled(Flex)`
   min-height: calc(100vh - 87px); /* 100% viewport height - footer height */
@@ -48,18 +49,8 @@ export const TopBar = styled(Flex)`
   height: 60px;
 `;
 
-export const SidebarHeader = styled(Flex)`
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  padding: ${space(1.5)} ${space(4)};
-`;
-
-export const SidebarTitle = styled(Box)`
-  flex: 1;
-  align-items: center;
-  font-size: 18px;
-  font-weight: normal;
-  color: ${p => p.theme.gray4};
-  margin: 0;
+export const SidebarTabs = styled(props => <NavTabs {...props} underlined={true} />)`
+  padding: 20px 30px 0;
 `;
 
 export const PlaceholderText = styled.div`
@@ -88,11 +79,6 @@ export const SidebarLabel = styled.label`
   color: ${p => p.theme.gray3};
 `;
 
-export const SidebarToggle = styled(Link)`
-  font-size: ${p => p.theme.fontSizeMedium};
-  text-decoration: underline;
-`;
-
 export const AddText = styled.span`
   font-style: italic;
   text-decoration: underline;
@@ -139,3 +125,13 @@ export const ChartNote = styled(Box)`
   color: ${p => p.theme.gray3};
   margin-bottom: ${space(3)};
 `;
+
+export const SavedQueryList = styled('ul')`
+  list-style-type: none;
+  padding: 0;
+`;
+
+export const SavedQueryListItem = styled('li')`
+  padding: ${space(3)} ${space(4)};
+  border-bottom: 1px solid ${p => p.theme.borderLighter};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index abce34696b..44cd7b30c6 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -1,3 +1,5 @@
+import {Client} from 'app/api';
+
 import {isValidAggregation} from './aggregations/utils';
 
 export function getQueryFromQueryString(queryString) {
@@ -67,3 +69,32 @@ export function getOrderByOptions(queryBuilder) {
 
   return [...columnOptions, ...aggregationOptions];
 }
+
+export function fetchSavedQueries(organization) {
+  const api = new Client();
+  const endpoint = `/organizations/${organization.slug}/discover/saved/`;
+
+  return api.requestPromise(endpoint, {
+    method: 'GET',
+  });
+}
+
+export function createQuery(organization, data) {
+  const api = new Client();
+  const endpoint = `/organizations/${organization.slug}/discover/saved/`;
+
+  return api.requestPromise(endpoint, {
+    method: 'POST',
+    data,
+  });
+}
+
+export function updateQuery(organization, id, data) {
+  const api = new Client();
+  const endpoint = `/organizations/${organization.slug}/discover/saved/${id}/`;
+
+  return api.requestPromise(endpoint, {
+    method: 'POST',
+    data,
+  });
+}
