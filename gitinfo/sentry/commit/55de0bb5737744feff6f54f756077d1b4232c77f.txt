commit 55de0bb5737744feff6f54f756077d1b4232c77f
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Apr 13 15:18:12 2018 -0700

    feat: Search for organization members (#8016)
    
    * feat: Search for organization members
    
    * include searching by name
    
    * add tests
    
    * add another test

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index e7c91b4147..4eb8fb0410 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -63,10 +63,14 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
             tokens = tokenize_query(query)
             for key, value in six.iteritems(tokens):
                 if key == 'email':
-                    queryset = queryset.filter(
-                        Q(user__email__in=value) | Q(
-                            user__emails__email__in=value)
-                    )
+                    queryset = queryset.filter(Q(user__email__in=value) |
+                                               Q(user__emails__email__in=value))
+                elif key == 'query':
+                    value = ' '.join(value)
+                    queryset = queryset.filter(Q(user__email__icontains=value) |
+                                               Q(user__name__icontains=value))
+                else:
+                    queryset = queryset.none()
 
         return self.paginate(
             request=request,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
index 7c649c5fa6..8834d4a718 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/members/organizationMembersView.jsx
@@ -1,6 +1,7 @@
-import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
+import {debounce} from 'lodash';
+import idx from 'idx';
 
 import {Panel, PanelBody, PanelHeader} from '../../../../components/panels';
 import {addErrorMessage, addSuccessMessage} from '../../../../actionCreators/indicator';
@@ -9,6 +10,7 @@ import AsyncView from '../../../asyncView';
 import Button from '../../../../components/buttons/button';
 import ConfigStore from '../../../../stores/configStore';
 import GuideAnchor from '../../../../components/assistant/guideAnchor';
+import Input from '../../components/forms/controls/input';
 import OrganizationAccessRequests from './organizationAccessRequests';
 import OrganizationMemberRow from './organizationMemberRow';
 import Pagination from '../../../../components/pagination';
@@ -22,9 +24,18 @@ class OrganizationMembersView extends AsyncView {
   };
 
   static contextTypes = {
+    router: PropTypes.object.isRequired,
     organization: SentryTypes.Organization,
   };
 
+  componentWillReceiveProps(nextProps, nextContext) {
+    super.componentWillReceiveProps(nextProps, nextContext);
+    let searchQuery = idx(nextProps, _ => _.location.query.query);
+    if (searchQuery !== idx(this.props, _ => _.location.query.query)) {
+      this.setState({searchQuery});
+    }
+  }
+
   // XXX(billy): setState causes re-render of the entire view...
   // we should not do this
   getDefaultState() {
@@ -34,6 +45,7 @@ class OrganizationMembersView extends AsyncView {
       members: [],
       invited: new Map(),
       accessRequestBusy: new Map(),
+      searchQuery: idx(this.props, _ => _.location.query.query) || '',
     };
   }
 
@@ -42,7 +54,11 @@ class OrganizationMembersView extends AsyncView {
       [
         'members',
         `/organizations/${this.props.params.orgId}/members/`,
-        {},
+        {
+          query: {
+            query: idx(this.props, _ => _.location.query.query),
+          },
+        },
         {paginate: true},
       ],
       [
@@ -65,6 +81,18 @@ class OrganizationMembersView extends AsyncView {
     return `${org.name} Members`;
   }
 
+  handleSearch = e => {
+    let {router} = this.context;
+    let {location} = this.props;
+    e.preventDefault();
+    router.push({
+      pathname: location.pathname,
+      query: {
+        query: this.state.searchQuery,
+      },
+    });
+  };
+
   removeMember = id => {
     let {params} = this.props;
     let {orgId} = params || {};
@@ -180,6 +208,24 @@ class OrganizationMembersView extends AsyncView {
     });
   };
 
+  handleChange = evt => {
+    let searchQuery = evt.target.value;
+    this.setState({searchQuery}, this.getMembers);
+  };
+
+  getMembers = debounce(() => {
+    let {params} = this.props;
+    let {orgId} = params || {};
+    let {searchQuery} = this.state;
+
+    this.api.request(`/organizations/${orgId}/members/?query=${searchQuery}`, {
+      method: 'GET',
+      success: data => {
+        this.setState({members: data});
+      },
+    });
+  }, 200);
+
   renderBody() {
     let {params, routes} = this.props;
     let {membersPageLinks, members, requestList} = this.state;
@@ -232,23 +278,16 @@ class OrganizationMembersView extends AsyncView {
         />
 
         <Panel>
-          <PanelHeader disablePadding>
-            <Box px={2} flex="1">
-              {t('Member')}
-            </Box>
-            <Box px={2} w={180}>
-              <GuideAnchor target="member_status" type="text">
-                {t('Status')}
-              </GuideAnchor>
-            </Box>
-            <Box px={2} w={140}>
-              <GuideAnchor target="member_role" type="text">
-                {t('Role')}
-              </GuideAnchor>
-            </Box>
-            <Box px={2} w={140}>
-              {t('Actions')}
-            </Box>
+          <PanelHeader hasButtons>
+            {t('Member')}
+            <form onSubmit={this.handleSearch}>
+              <Input
+                value={this.state.searchQuery}
+                onChange={this.handleChange}
+                className="search"
+                placeholder={t('Search Members')}
+              />
+            </form>
           </PanelHeader>
 
           <PanelBody>
diff --git a/tests/js/spec/views/organizationMembersView.spec.jsx b/tests/js/spec/views/organizationMembersView.spec.jsx
index d575799f97..9883dbba8d 100644
--- a/tests/js/spec/views/organizationMembersView.spec.jsx
+++ b/tests/js/spec/views/organizationMembersView.spec.jsx
@@ -8,6 +8,7 @@ import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
 
 jest.mock('app/api');
 jest.mock('app/actionCreators/indicator');
+jest.mock('lodash/debounce', () => jest.fn(fn => fn));
 
 describe('OrganizationMembersView', function() {
   let members = TestStubs.Members();
@@ -296,4 +297,39 @@ describe('OrganizationMembersView', function() {
       })
     );
   });
+
+  it('can search organization members', async function() {
+    let searchMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-id/members/?query=member',
+      body: [],
+    });
+    let routerContext = TestStubs.routerContext();
+    let wrapper = mount(
+      <OrganizationMembersView
+        {...defaultProps}
+        location={{}}
+        params={{
+          orgId: 'org-id',
+        }}
+      />,
+      routerContext
+    );
+
+    expect(searchMock).not.toHaveBeenCalled();
+
+    wrapper.find('Input').simulate('change', {target: {value: 'member'}});
+
+    expect(wrapper.state('searchQuery')).toBe('member');
+    expect(searchMock).toHaveBeenCalled();
+    expect(searchMock).toHaveBeenCalledWith(
+      '/organizations/org-id/members/?query=member',
+      expect.objectContaining({
+        method: 'GET',
+      })
+    );
+
+    wrapper.find('PanelHeader form').simulate('submit');
+
+    expect(routerContext.context.router.push.calledOnce).toBe(true);
+  });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index af99f8d392..ed3aea13da 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -34,6 +34,14 @@ class OrganizationMemberListTest(APITestCase):
         assert response.data[0]['email'] == self.user_2.email
         assert response.data[1]['email'] == self.owner_user.email
 
+    def test_empty_query(self):
+        response = self.client.get(self.url + "?query=")
+
+        assert response.status_code == 200
+        assert len(response.data) == 2
+        assert response.data[0]['email'] == self.user_2.email
+        assert response.data[1]['email'] == self.owner_user.email
+
     def test_email_query(self):
         response = self.client.get(self.url + "?query=email:foo@localhost")
 
