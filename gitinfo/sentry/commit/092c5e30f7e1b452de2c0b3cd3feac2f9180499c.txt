commit 092c5e30f7e1b452de2c0b3cd3feac2f9180499c
Author: Jess MacQueen <jess@getsentry.com>
Date:   Thu Jul 13 15:36:41 2017 -0700

    change group_tombstone_id to not be foreign key

diff --git a/src/sentry/api/endpoints/group_tombstone_details.py b/src/sentry/api/endpoints/group_tombstone_details.py
index fa365b514c..10abf76696 100644
--- a/src/sentry/api/endpoints/group_tombstone_details.py
+++ b/src/sentry/api/endpoints/group_tombstone_details.py
@@ -26,10 +26,10 @@ class GroupTombstoneDetailsEndpoint(ProjectEndpoint):
         """
         GroupHash.objects.filter(
             project_id=project.id,
-            group_tombstone=tombstone_id,
+            group_tombstone_id=tombstone_id,
         ).update(
             # will allow new events to be captured
-            group_tombstone=None,
+            group_tombstone_id=None,
         )
 
         try:
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 941798b75e..beb68052e5 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -499,7 +499,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
                             group=group,
                         ).update(
                             group=None,
-                            group_tombstone=tombstone,
+                            group_tombstone_id=tombstone.id,
                         )
 
             self._delete_groups(request, project, groups_to_delete)
diff --git a/src/sentry/models/grouphash.py b/src/sentry/models/grouphash.py
index 18504cfa5c..84bee74c44 100644
--- a/src/sentry/models/grouphash.py
+++ b/src/sentry/models/grouphash.py
@@ -24,7 +24,7 @@ class GroupHash(Model):
     project = FlexibleForeignKey('sentry.Project', null=True)
     hash = models.CharField(max_length=32)
     group = FlexibleForeignKey('sentry.Group', null=True)
-    group_tombstone = FlexibleForeignKey('sentry.GroupTombstone', null=True)
+    group_tombstone_id = BoundedPositiveIntegerField(db_index=True, null=True)
     state = BoundedPositiveIntegerField(
         choices=[
             (State.LOCKED_IN_MIGRATION, _('Locked (Migration in Progress)')),
diff --git a/src/sentry/south_migrations/0340_auto__add_grouptombstone__add_field_grouphash_group_tombstone.py b/src/sentry/south_migrations/0340_auto__add_grouptombstone__add_field_grouphash_group_tombstone_id.py
similarity index 98%
rename from src/sentry/south_migrations/0340_auto__add_grouptombstone__add_field_grouphash_group_tombstone.py
rename to src/sentry/south_migrations/0340_auto__add_grouptombstone__add_field_grouphash_group_tombstone_id.py
index 5dc0ec791a..145ec275f9 100644
--- a/src/sentry/south_migrations/0340_auto__add_grouptombstone__add_field_grouphash_group_tombstone.py
+++ b/src/sentry/south_migrations/0340_auto__add_grouptombstone__add_field_grouphash_group_tombstone_id.py
@@ -25,17 +25,17 @@ class Migration(SchemaMigration):
         ))
         db.send_create_signal('sentry', ['GroupTombstone'])
 
-        # Adding field 'GroupHash.group_tombstone'
-        db.add_column('sentry_grouphash', 'group_tombstone',
-                      self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
-                          to=orm['sentry.GroupTombstone'], null=True),
+        # Adding field 'GroupHash.group_tombstone_id'
+        db.add_column('sentry_grouphash', 'group_tombstone_id',
+                      self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
+                          null=True, db_index=True),
                       keep_default=False)
 
     def backwards(self, orm):
         # Deleting model 'GroupTombstone'
         db.delete_table('sentry_grouptombstone')
 
-        # Deleting field 'GroupHash.group_tombstone'
+        # Deleting field 'GroupHash.group_tombstone_id'
         db.delete_column('sentry_grouphash', 'group_tombstone_id')
 
     models = {
@@ -53,12 +53,12 @@ class Migration(SchemaMigration):
         'sentry.apiapplication': {
             'Meta': {'object_name': 'ApiApplication'},
             'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'client_id': ('django.db.models.fields.CharField', [], {'default': "'efebfdf85d674b71be1ba604758987cc6325b8900f6c4e7ca4d2811d963af525'", 'unique': 'True', 'max_length': '64'}),
-            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'90c2b9f9de06452899ba1eba5a4ecf04a36b51397a7a4b23960054afa92e00ad'"}),
+            'client_id': ('django.db.models.fields.CharField', [], {'default': "'e4fc93b24b5b4c7f8399e3d79daca39d1a191a6513c64360a382919051475d64'", 'unique': 'True', 'max_length': '64'}),
+            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'b929cd5967d34cdbb0dab6f8c698de94c3412396519c4342bfc1bcc8f43ce9bc'"}),
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
             'homepage_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'default': "'Present Redfish'", 'max_length': '64', 'blank': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'default': "'Prompt Duckling'", 'max_length': '64', 'blank': 'True'}),
             'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
             'privacy_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
             'redirect_uris': ('django.db.models.fields.TextField', [], {}),
@@ -77,7 +77,7 @@ class Migration(SchemaMigration):
         'sentry.apigrant': {
             'Meta': {'object_name': 'ApiGrant'},
             'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']"}),
-            'code': ('django.db.models.fields.CharField', [], {'default': "'53d60bb96a54450981e8dd9b30e47cc1'", 'max_length': '64', 'db_index': 'True'}),
+            'code': ('django.db.models.fields.CharField', [], {'default': "'1d8ca0f7372c405fa968762e9cfcb0d6'", 'max_length': '64', 'db_index': 'True'}),
             'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 7, 13, 0, 0)', 'db_index': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'redirect_uri': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
@@ -103,10 +103,10 @@ class Migration(SchemaMigration):
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
             'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 8, 12, 0, 0)', 'null': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'0bf3f22db6244cbf9722b702f3a6a9c75fa8400aaa3f41ba9c7aada5d11d76c4'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'320fd0cac50949ef93ada08307abd80a3d4d8ee2b35343dabddcf1037360e53c'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
             'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
             'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
-            'token': ('django.db.models.fields.CharField', [], {'default': "'8e4880fc6c5e41eb9eff5490673daa451efcf0a1cbf046ab9e3b43407158e261'", 'unique': 'True', 'max_length': '64'}),
+            'token': ('django.db.models.fields.CharField', [], {'default': "'41cbb17c8a1f4ff3baba84032999c34b528ee88c2d5143d1b8069fb8bd09c86a'", 'unique': 'True', 'max_length': '64'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
         },
         'sentry.auditlogentry': {
@@ -398,7 +398,7 @@ class Migration(SchemaMigration):
         'sentry.grouphash': {
             'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
             'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
-            'group_tombstone': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.GroupTombstone']", 'null': 'True'}),
+            'group_tombstone_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
             'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
@@ -780,7 +780,7 @@ class Migration(SchemaMigration):
             'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
             'date_scheduled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 8, 12, 0, 0)'}),
-            'guid': ('django.db.models.fields.CharField', [], {'default': "'83e4b546b5ca4c72b8d4f29b8fdf3dd9'", 'unique': 'True', 'max_length': '32'}),
+            'guid': ('django.db.models.fields.CharField', [], {'default': "'0435f711086941608b647516f94d0463'", 'unique': 'True', 'max_length': '32'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'in_progress': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
             'model_name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
@@ -856,7 +856,7 @@ class Migration(SchemaMigration):
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
-            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'mcnub6nUIR1zVGm1U6Vyks2tQfjxMcdX'", 'max_length': '32'})
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'u1q9gSY3eLllZSdV7omtfeWOLOI57McI'", 'max_length': '32'})
         },
         'sentry.useroption': {
             'Meta': {'unique_together': "(('user', 'project', 'key'), ('user', 'organization', 'key'))", 'object_name': 'UserOption'},
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 587a5b0e8b..2062ce8a8b 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -8,7 +8,7 @@ from django.utils import timezone
 from sentry.models import (
     Activity, Group, GroupHash, GroupAssignee, GroupBookmark, GroupResolution,
     GroupSeen, GroupSnooze, GroupSubscription, GroupStatus, GroupTagValue,
-    Release
+    GroupTombstone, Release
 )
 from sentry.testutils import APITestCase
 
@@ -296,7 +296,9 @@ class GroupUpdateTest(APITestCase):
         assert GroupHash.objects.filter(
             id=group_hash.id,
         ).exists()
-        tombstone = GroupHash.objects.get(id=group_hash.id).group_tombstone
+        tombstone = GroupTombstone.objects.get(
+            id=GroupHash.objects.get(id=group_hash.id).group_tombstone_id,
+        )
         assert tombstone.message == group.message
         assert tombstone.culprit == group.culprit
         assert tombstone.project == group.project
diff --git a/tests/sentry/api/endpoints/test_group_tombstone.py b/tests/sentry/api/endpoints/test_group_tombstone.py
index 83470924f5..cda6d7af4e 100644
--- a/tests/sentry/api/endpoints/test_group_tombstone.py
+++ b/tests/sentry/api/endpoints/test_group_tombstone.py
@@ -37,7 +37,7 @@ class GroupTombstoneTest(APITestCase):
             project=group.project,
             hash='x' * 32,
             group=group,
-            group_tombstone=tombstone
+            group_tombstone_id=tombstone.id,
         )
 
         path = reverse('sentry-api-0-group-tombstones',
diff --git a/tests/sentry/api/endpoints/test_group_tombstone_details.py b/tests/sentry/api/endpoints/test_group_tombstone_details.py
index fcb5a6aae1..77107cda53 100644
--- a/tests/sentry/api/endpoints/test_group_tombstone_details.py
+++ b/tests/sentry/api/endpoints/test_group_tombstone_details.py
@@ -37,9 +37,9 @@ class GroupTombstoneDetailsTest(APITestCase):
             project=group.project,
             hash='x' * 32,
             group=group,
-            group_tombstone=tombstone
+            group_tombstone_id=tombstone.id,
         )
-        assert GroupHash.objects.filter(group_tombstone=tombstone).exists()
+        assert GroupHash.objects.filter(group_tombstone_id=tombstone.id).exists()
         path = reverse('sentry-api-0-group-tombstone-details',
                        kwargs={
                            'organization_slug': self.org.slug,
@@ -50,7 +50,7 @@ class GroupTombstoneDetailsTest(APITestCase):
         response = self.client.delete(path)
 
         assert response.status_code == 204, response
-        assert not GroupHash.objects.filter(group_tombstone=tombstone).exists()
+        assert not GroupHash.objects.filter(group_tombstone_id=tombstone.id).exists()
 
     def test_dont_delete_from_other_proj(self):
         self.user = self.create_user('foo@example.com')
@@ -89,9 +89,9 @@ class GroupTombstoneDetailsTest(APITestCase):
             project=group.project,
             hash='x' * 32,
             group=group,
-            group_tombstone=tombstone
+            group_tombstone_id=tombstone.id,
         )
-        assert GroupHash.objects.filter(group_tombstone=tombstone).exists()
+        assert GroupHash.objects.filter(group_tombstone_id=tombstone.id).exists()
         path = reverse('sentry-api-0-group-tombstone-details',
                        kwargs={
                            'organization_slug': self.org.slug,
@@ -102,5 +102,5 @@ class GroupTombstoneDetailsTest(APITestCase):
         response = self.client.delete(path)
 
         assert response.status_code == 204, response
-        assert GroupHash.objects.filter(group_tombstone=tombstone).exists()
+        assert GroupHash.objects.filter(group_tombstone_id=tombstone.id).exists()
         assert GroupTombstone.objects.filter(project_id=self.project.id, id=tombstone.id).exists()
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 4f03b249fd..49426e47cc 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -12,7 +12,7 @@ from mock import patch
 from sentry.models import (
     Activity, EventMapping, Group, GroupAssignee, GroupBookmark, GroupHash,
     GroupResolution, GroupSeen, GroupSnooze, GroupStatus, GroupSubscription,
-    GroupTagKey, GroupTagValue, Release, UserOption
+    GroupTagKey, GroupTagValue, GroupTombstone, Release, UserOption
 )
 from sentry.models.event import Event
 from sentry.testutils import APITestCase
@@ -1209,7 +1209,9 @@ class GroupUpdateTest(APITestCase):
         assert GroupHash.objects.filter(
             id=group_hash.id,
         ).exists()
-        tombstone = GroupHash.objects.get(id=group_hash.id).group_tombstone
+        tombstone = GroupTombstone.objects.get(
+            id=GroupHash.objects.get(id=group_hash.id).group_tombstone_id,
+        )
         assert tombstone.message == group1.message
         assert tombstone.culprit == group1.culprit
         assert tombstone.project == group1.project
diff --git a/tests/sentry/api/serializers/test_group_tombstone.py b/tests/sentry/api/serializers/test_group_tombstone.py
index 11e2db21f1..ab34d0dc79 100644
--- a/tests/sentry/api/serializers/test_group_tombstone.py
+++ b/tests/sentry/api/serializers/test_group_tombstone.py
@@ -32,7 +32,7 @@ class GroupTombstoneSerializerTest(TestCase):
             project=group.project,
             hash='x' * 32,
             group=group,
-            group_tombstone=tombstone
+            group_tombstone_id=tombstone.id,
         )
         result = serialize(tombstone, self.user)
 
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index bea188707e..4e885bb032 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -781,7 +781,7 @@ class EventManagerTest(TransactionTestCase):
             group=group,
         ).update(
             group=None,
-            group_tombstone=tombstone,
+            group_tombstone_id=tombstone.id,
         )
 
         manager = EventManager(self.make_event(
