commit 714724346b35cf09e3ae5c833475e2d29ba7dba1
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Apr 3 09:34:56 2020 -0700

    fix(workflow): Alert builder should query for event.type = errâ€¦ (#18063)
    
    Alert builder should always (for now) query for non-transaction events. There is an edge-case where this does not happen when *any* `event.type` string is already present in the query.

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index 263db1e2e4..78365111e8 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -100,6 +100,12 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     ];
   }
 
+  getEventType() {
+    // XXX: This is hardcoded for now, this will need to change when we add
+    // metric types that require different `event.type` (e.g. transactions)
+    return '!event.type:transaction';
+  }
+
   goBack() {
     const {router, routes, params, location} = this.props;
 
@@ -382,6 +388,10 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
     const {organization, ruleId, rule, params, onSubmitSuccess} = this.props;
     const {query, aggregation, timeWindow, triggers} = this.state;
 
+    const queryAndAlwaysErrorEvents = !query.includes('event.type')
+      ? `${query} ${this.getEventType()}`.trim()
+      : query;
+
     return (
       <Access access={['project:write']}>
         {({hasAccess}) => (
@@ -426,7 +436,7 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
               organization={organization}
               projects={this.state.projects}
               triggers={triggers}
-              query={query}
+              query={queryAndAlwaysErrorEvents}
               aggregation={aggregation}
               timeWindow={timeWindow}
             />
diff --git a/tests/js/spec/views/settings/incidentRules/create.spec.jsx b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
index a95dd909f5..1ea4843f05 100644
--- a/tests/js/spec/views/settings/incidentRules/create.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
@@ -5,6 +5,8 @@ import {initializeOrg} from 'sentry-test/initializeOrg';
 import IncidentRulesCreate from 'app/views/settings/incidentRules/create';
 
 describe('Incident Rules Create', function() {
+  let eventStatsMock;
+
   beforeEach(function() {
     MockApiClient.clearMockResponses();
     MockApiClient.addMockResponse({
@@ -19,7 +21,7 @@ describe('Incident Rules Create', function() {
       url: '/projects/org-slug/project-slug/environments/',
       body: [],
     });
-    MockApiClient.addMockResponse({
+    eventStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
       body: TestStubs.EventsStats(),
     });
@@ -46,5 +48,18 @@ describe('Incident Rules Create', function() {
       />,
       routerContext
     );
+
+    expect(eventStatsMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        query: {
+          interval: '1m',
+          project: [2],
+          query: '!event.type:transaction',
+          statsPeriod: '12h',
+          yAxis: 'event_count',
+        },
+      })
+    );
   });
 });
