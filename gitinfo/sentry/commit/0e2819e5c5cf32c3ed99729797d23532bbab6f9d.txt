commit 0e2819e5c5cf32c3ed99729797d23532bbab6f9d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Jul 15 17:20:13 2019 +0200

    feat(grouping): Improve single frame grouping and add min-frames (#13955)

diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index 00b5101986..1b9211d871 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -13,6 +13,7 @@ from parsimonious.exceptions import ParseError
 from sentry import projectoptions
 from sentry.stacktraces.functions import set_in_app
 from sentry.stacktraces.platform import get_behavior_family_for_platform
+from sentry.grouping.component import GroupingComponent
 from sentry.grouping.utils import get_rule_bool
 from sentry.utils.compat import implements_to_string
 from sentry.utils.glob import glob_match
@@ -35,7 +36,7 @@ matcher_type     = "path" / "function" / "module" / "family" / "package" / "app"
 actions          = action+
 action           = flag_action / var_action
 var_action       = _ var_name _ "=" _ expr
-var_name         = "max-frames"
+var_name         = "max-frames" / "min-frames"
 flag_action      = _ range? flag flag_action_name
 flag_action_name = "group" / "app"
 flag             = "+" / "-"
@@ -171,7 +172,7 @@ class Action(object):
     def update_frame_components_contributions(self, components, frames, idx, rule=None):
         pass
 
-    def modify_stack_state(self, state, rule):
+    def modify_stacktrace_state(self, state, rule):
         pass
 
     @classmethod
@@ -267,14 +268,14 @@ class VarAction(Action):
     def _to_config_structure(self):
         return [self.var, self.value]
 
-    def modify_stack_state(self, state, rule):
+    def modify_stacktrace_state(self, state, rule):
         state.set(self.var, self.value, rule)
 
 
-class StackState(object):
+class StacktraceState(object):
 
     def __init__(self):
-        self.vars = {'max-frames': 0}
+        self.vars = {'max-frames': 0, 'min-frames': 0}
         self.setters = {}
 
     def set(self, var, value, rule=None):
@@ -290,6 +291,12 @@ class StackState(object):
         if rule is not None:
             return rule.matcher_description
 
+    def add_to_hint(self, hint, var):
+        description = self.describe_var_rule(var)
+        if description is None:
+            return hint
+        return '%s by grouping enhancement rule (%s)' % (hint, description)
+
 
 class Enhancements(object):
 
@@ -315,7 +322,7 @@ class Enhancements(object):
                     action.apply_modifications_to_frame(frames, idx)
 
     def update_frame_components_contributions(self, components, frames, platform):
-        stack_state = StackState()
+        stacktrace_state = StacktraceState()
 
         # Apply direct frame actions and update the stack state alongside
         for rule in self.iter_rules():
@@ -324,10 +331,12 @@ class Enhancements(object):
                 for action in actions or ():
                     action.update_frame_components_contributions(
                         components, frames, idx, rule=rule)
-                    action.modify_stack_state(stack_state, rule)
+                    action.modify_stacktrace_state(stacktrace_state, rule)
 
-        # Use the stack state to update frame contributions again
-        max_frames = stack_state.get('max-frames')
+        # Use the stack state to update frame contributions again to trim
+        # down to max-frames.  min-frames is handled on the other hand for
+        # the entire stacktrace later.
+        max_frames = stacktrace_state.get('max-frames')
         if max_frames > 0:
             ignored = 0
             for component in reversed(components):
@@ -340,11 +349,41 @@ class Enhancements(object):
                     max_frames,
                     'frames are' if max_frames != 1 else 'frame is',
                 )
-                description = stack_state.describe_var_rule('max-frames')
-                if description is not None:
-                    hint = '%s by grouping enhancement rule (%s)' % (hint, description)
+                hint = stacktrace_state.add_to_hint(hint, var='max-frames')
                 component.update(hint=hint, contributes=False)
 
+        return stacktrace_state
+
+    def assemble_stacktrace_component(self, components, frames, platform):
+        """This assembles a stacktrace grouping component out of the given
+        frame components and source frames.  Internally this invokes the
+        `update_frame_components_contributions` method but also handles cases
+        where the entire stacktrace should be discarded.
+        """
+        hint = None
+        contributes = None
+        stacktrace_state = self.update_frame_components_contributions(
+            components, frames, platform)
+
+        min_frames = stacktrace_state.get('min-frames')
+        if min_frames > 0:
+            total_contributes = sum(x.contributes for x in components)
+            if 0 < total_contributes < min_frames:
+                hint = 'discarded because stacktrace only contains %d ' \
+                    'frame%s which is under the configured threshold' % (
+                        total_contributes,
+                        's' if total_contributes != 1 else '',
+                    )
+                hint = stacktrace_state.add_to_hint(hint, var='min-frames')
+                contributes = False
+
+        return GroupingComponent(
+            id='stacktrace',
+            values=components,
+            hint=hint,
+            contributes=contributes,
+        )
+
     def as_dict(self, with_rules=False):
         rv = {
             'id': self.id,
diff --git a/src/sentry/grouping/strategies/legacy.py b/src/sentry/grouping/strategies/legacy.py
index b2e437465f..5570650e88 100644
--- a/src/sentry/grouping/strategies/legacy.py
+++ b/src/sentry/grouping/strategies/legacy.py
@@ -473,15 +473,10 @@ def stacktrace_legacy(stacktrace, config, variant, **meta):
         frames_for_filtering.append(frame.get_raw_data())
         prev_frame = frame
 
-    config.enhancements.update_frame_components_contributions(
+    rv = config.enhancements.assemble_stacktrace_component(
         values, frames_for_filtering, meta['event'].platform)
-
-    return GroupingComponent(
-        id='stacktrace',
-        values=values,
-        contributes=contributes,
-        hint=hint,
-    )
+    rv.update(contributes=contributes, hint=hint)
+    return rv
 
 
 @strategy(
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 9cb75df904..ff3e0c67c6 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -395,8 +395,16 @@ def get_frame_component(frame, event, meta, legacy_function_logic=False,
     score=1800,
 )
 def stacktrace_v1(stacktrace, config, variant, **meta):
+    return get_stacktrace_component(stacktrace, config, variant, meta)
+
+
+@stacktrace_v1.variant_processor
+def stacktrace_v1_variant_processor(variants, config, **meta):
+    return remove_non_stacktrace_variants(variants)
+
+
+def get_stacktrace_component(stacktrace, config, variant, meta):
     frames = stacktrace.frames
-    hint = None
     all_frames_considered_in_app = False
 
     values = []
@@ -422,19 +430,19 @@ def stacktrace_v1(stacktrace, config, variant, **meta):
         frames_for_filtering.append(frame.get_raw_data())
         prev_frame = frame
 
-    config.enhancements.update_frame_components_contributions(
-        values, frames_for_filtering, meta['event'].platform)
-
-    return GroupingComponent(
-        id='stacktrace',
-        values=values,
-        hint=hint,
-    )
-
+    # Special case for JavaScript where we want to ignore single frame
+    # stacktraces in certain cases where those would be of too low quality
+    # for grouping.
+    if len(frames) == 1 and values[0].contributes and \
+       get_behavior_family_for_platform(frames[0].platform or meta['event'].platform) == 'javascript' and \
+       not frames[0].function and frames[0].is_url():
+        values[0].update(
+            contributes=False,
+            hint='ignored single non-URL JavaScript frame'
+        )
 
-@stacktrace_v1.variant_processor
-def stacktrace_v1_variant_processor(variants, config, **meta):
-    return remove_non_stacktrace_variants(variants)
+    return config.enhancements.assemble_stacktrace_component(
+        values, frames_for_filtering, meta['event'].platform)
 
 
 def single_exception_common(exception, config, meta, with_value):
diff --git a/tests/sentry/grouping/grouping_inputs/stacktrace-enforce-min-frames.json b/tests/sentry/grouping/grouping_inputs/stacktrace-enforce-min-frames.json
new file mode 100644
index 0000000000..7fedc175be
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/stacktrace-enforce-min-frames.json
@@ -0,0 +1,52 @@
+{
+  "_grouping": {
+    "enhancement_base": "common:2019-03-23",
+    "enhancements": "function:log_demo::* +app\nfamily:native min-frames=2"
+  },
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "_main",
+              "instruction_addr": "0x10d6dd338"
+            },
+            {
+              "function": "std::rt::lang_start_internal",
+              "package": "std",
+              "instruction_addr": "0x10d98ea2c"
+            },
+            {
+              "function": "___rust_maybe_catch_panic",
+              "instruction_addr": "0x10d99175e"
+            },
+            {
+              "function": "std::panicking::try::do_call",
+              "package": "std",
+              "instruction_addr": "0x10d98df37"
+            },
+            {
+              "function": "std::rt::lang_start::{{closure}}",
+              "package": "std",
+              "instruction_addr": "0x10d6d93b5"
+            },
+            {
+              "function": "log_demo::main",
+              "package": "log_demo",
+              "instruction_addr": "0x10d6dd251"
+            },
+            {
+              "function": "log::__private_api_log",
+              "package": "log",
+              "instruction_addr": "0x10d97fdbb"
+            }
+          ]
+        },
+        "type": "log_demo",
+        "value": "Holy shit everything is on fire!"
+      }
+    ]
+  },
+  "platform": "native"
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/stacktrace_enforce_min_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/stacktrace_enforce_min_frames.pysnap
new file mode 100644
index 0000000000..f5780056af
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/stacktrace_enforce_min_frames.pysnap
@@ -0,0 +1,64 @@
+---
+created: '2019-07-09T13:22:06.178503Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace (discarded because stacktrace only contains 1 frame which is under the configured threshold by grouping enhancement rule (family:native min-frames=2))
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/stacktrace_enforce_min_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/stacktrace_enforce_min_frames.pysnap
new file mode 100644
index 0000000000..b52aebb43f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/stacktrace_enforce_min_frames.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-07-09T12:12:23.637309Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function (function name is used only if module or filename are available)
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start::{{closure}}'
+          frame (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function (function name is used only if module or filename are available)
+              u'log_demo::main'
+          frame (non app frame)
+            function (function name is used only if module or filename are available)
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '3e0ae2ce25cce2fca3390f3416e6a82a'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            function (function name is used only if module or filename are available)
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start_internal'
+          frame
+            function (function name is used only if module or filename are available)
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function (function name is used only if module or filename are available)
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function (function name is used only if module or filename are available)
+              u'std::rt::lang_start::{{closure}}'
+          frame (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function (function name is used only if module or filename are available)
+              u'log_demo::main'
+          frame
+            function (function name is used only if module or filename are available)
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_module_if_page_url.pysnap
index 4421ae7464..bd7e5c9ead 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_module_if_page_url.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_module_if_page_url.pysnap
@@ -1,12 +1,12 @@
 ---
-created: '2019-03-16T15:38:20.740059Z'
+created: '2019-07-10T12:18:43.528621Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app (stacktrace of system takes precedence)
+    app
       stacktrace
         frame (non app frame)
           module*
@@ -14,12 +14,15 @@ app:
           filename (ignored because frame points to a URL)
             u'foo.py'
 --------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
 system:
-  hash: 'a7a536723f7289f3ab7cbb444b7058ac'
+  hash: None
   component:
-    system*
-      stacktrace*
-        frame*
+    system
+      stacktrace
+        frame (ignored single non-URL JavaScript frame)
           module*
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/stacktrace_enforce_min_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/stacktrace_enforce_min_frames.pysnap
new file mode 100644
index 0000000000..9ebd34d1ad
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/stacktrace_enforce_min_frames.pysnap
@@ -0,0 +1,64 @@
+---
+created: '2019-07-09T13:22:08.877627Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace (discarded because stacktrace only contains 1 frame which is under the configured threshold by grouping enhancement rule (family:native min-frames=2))
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_module_if_page_url.pysnap
index d5a196adda..3e2b07dedb 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_module_if_page_url.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_module_if_page_url.pysnap
@@ -1,12 +1,12 @@
 ---
-created: '2019-04-17T20:07:50.372035Z'
+created: '2019-07-10T12:18:44.713927Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app (stacktrace of system takes precedence)
+    app
       stacktrace
         frame (non app frame)
           module*
@@ -14,12 +14,15 @@ app:
           filename (ignored because frame points to a URL)
             u'foo.py'
 --------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
 system:
-  hash: 'a7a536723f7289f3ab7cbb444b7058ac'
+  hash: None
   component:
-    system*
-      stacktrace*
-        frame*
+    system
+      stacktrace
+        frame (ignored single non-URL JavaScript frame)
           module*
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/stacktrace_enforce_min_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/stacktrace_enforce_min_frames.pysnap
new file mode 100644
index 0000000000..fe9ac000cb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/stacktrace_enforce_min_frames.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-07-09T13:22:10.137941Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace (discarded because stacktrace only contains 1 frame which is under the configured threshold by grouping enhancement rule (family:native min-frames=2))
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap
index dc2ca81515..97d1c2fa2b 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap
@@ -1,12 +1,12 @@
 ---
-created: '2019-05-10T12:45:55.344044Z'
+created: '2019-07-10T12:18:45.903717Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app (stacktrace of system takes precedence)
+    app
       stacktrace
         frame (non app frame)
           module*
@@ -15,12 +15,15 @@ app:
             u'foo.py'
           function (ignored unknown function name)
 --------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
 system:
-  hash: 'a7a536723f7289f3ab7cbb444b7058ac'
+  hash: None
   component:
-    system*
-      stacktrace*
-        frame*
+    system
+      stacktrace
+        frame (ignored single non-URL JavaScript frame)
           module*
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_enforce_min_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_enforce_min_frames.pysnap
new file mode 100644
index 0000000000..d46f5358b4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_enforce_min_frames.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-07-09T13:22:11.421699Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace (discarded because stacktrace only contains 1 frame which is under the configured threshold by grouping enhancement rule (family:native min-frames=2))
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
