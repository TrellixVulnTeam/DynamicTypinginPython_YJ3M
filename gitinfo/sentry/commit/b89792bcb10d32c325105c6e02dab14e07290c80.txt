commit b89792bcb10d32c325105c6e02dab14e07290c80
Author: josh <josh@jrl.ninja>
Date:   Wed Feb 12 20:03:51 2020 +0000

    meta: sync with updated devenv docs (#16954)

diff --git a/.python-version b/.python-version
new file mode 100644
index 0000000000..35b46aeaca
--- /dev/null
+++ b/.python-version
@@ -0,0 +1 @@
+2.7.16
diff --git a/Brewfile b/Brewfile
index 5bd78f66d9..6ac2e83a7e 100644
--- a/Brewfile
+++ b/Brewfile
@@ -1,9 +1,18 @@
-brew 'python@2'
+brew 'pyenv'
+
+# required for pyenv's python-build
+brew 'openssl'
+brew 'readline'
+
+# required to build some of sentry's dependencies
 brew 'pkgconfig'
 brew 'libxmlsec1'
-brew 'openssl'
 brew 'geoip'
 
 tap 'homebrew/cask'
+
+# required for acceptance testing
 cask 'chromedriver'
+
+# required to run devservices
 cask 'docker'
diff --git a/Makefile b/Makefile
index 64a749f35e..2d2af939e5 100644
--- a/Makefile
+++ b/Makefile
@@ -4,7 +4,7 @@ YARN := ./bin/yarn
 
 bootstrap: develop init-config run-dependent-services create-db apply-migrations
 
-develop: ensure-venv ensure-pinned-pip setup-git install-yarn-pkgs install-sentry-dev
+develop: ensure-pinned-pip setup-git install-yarn-pkgs install-sentry-dev
 
 clean:
 	@echo "--> Cleaning static cache"
@@ -17,10 +17,10 @@ clean:
 	rm -rf build/ dist/ src/sentry/assets.json
 	@echo ""
 
-init-config:
+init-config: ensure-venv
 	sentry init --dev
 
-run-dependent-services:
+run-dependent-services: ensure-venv
 	sentry devservices up
 
 DROPDB := $(shell command -v dropdb 2> /dev/null)
@@ -40,7 +40,7 @@ create-db:
 	@echo "--> Creating 'sentry' database"
 	$(CREATEDB) -h 127.0.0.1 -U postgres -E utf-8 sentry || true
 
-apply-migrations:
+apply-migrations: ensure-venv
 	@echo "--> Applying migrations"
 	sentry upgrade
 
@@ -49,10 +49,10 @@ reset-db: drop-db create-db apply-migrations
 ensure-venv:
 	@./scripts/ensure-venv.sh
 
-ensure-pinned-pip:
+ensure-pinned-pip: ensure-venv
 	$(PIP) install --no-cache-dir "pip>=20.0.2"
 
-setup-git:
+setup-git: ensure-venv
 	@echo "--> Installing git hooks"
 	git config branch.autosetuprebase always
 	git config core.ignorecase false
@@ -66,7 +66,6 @@ node-version-check:
 
 install-yarn-pkgs: node-version-check
 	@echo "--> Installing Yarn packages (for development)"
-	@command -v $(YARN) 2>&1 > /dev/null || (echo 'yarn not found. Please install it before proceeding.'; exit 1)
 	# Use NODE_ENV=development so that yarn installs both dependencies + devDependencies
 	NODE_ENV=development $(YARN) install --pure-lockfile
 	# A common problem is with node packages not existing in `node_modules` even though `yarn install`
@@ -75,7 +74,7 @@ install-yarn-pkgs: node-version-check
 	# Add an additional check against `node_modules`
 	$(YARN) check --verify-tree || $(YARN) install --check-files
 
-install-sentry-dev:
+install-sentry-dev: ensure-venv
 	@echo "--> Installing Sentry (for development)"
 	# SENTRY_LIGHT_BUILD=1 disables webpacking during setup.py.
 	# Webpacked assets are only necessary for devserver (which does it lazily anyways)
diff --git a/scripts/ensure-venv.sh b/scripts/ensure-venv.sh
index 148a3fb504..25ad7aeadc 100755
--- a/scripts/ensure-venv.sh
+++ b/scripts/ensure-venv.sh
@@ -1,21 +1,26 @@
 #!/bin/bash
-set -xe
 
 # optionally opt out of virtualenv creation
 if [ "x$SENTRY_NO_VIRTUALENV_CREATION" == "x1" ]; then
-  exit 0
+    exit 0
 fi
 
-# if we already have a venv, we can leave
-if .venv/bin/python --version &> /dev/null; then
-  exit 0
+if [ -n "$VIRTUAL_ENV" ]; then
+    # we're enforcing that virtualenv be in .venv, since future tooling e.g. venv-update will rely on this.
+    if [ "$VIRTUAL_ENV" != "${PWD}/.venv" ]; then
+        echo "You're in a virtualenv, but it's not in the expected location (${PWD}/.venv)"
+        exit 1
+    fi
+    # TODO: when direnv lands, make the check strictly match .python-version.
+    if ! python -c "import sys; sys.exit(sys.version_info[:2] != (2, 7))"; then
+        echo "Your virtualenv's python version isn't 2.7. You'll need to recreate it with the correct python version."
+        exit 1
+    fi
+else
+    if [ ! -f ".venv/bin/activate" ]; then
+        echo "You don't seem to have a virtualenv. Please create one by running: python -m virtualenv .venv"
+        exit 1
+    fi
+    echo "You have a virtualenv, but it doesn't seem to be activated. Please run: source .venv/bin/activate"
+    exit 1
 fi
-
-# do we have a WORKON_HOME? Prime from there
-if [ "x$WORKON_HOME" != x ]; then
-  ln -s "${WORKON_HOME}/sentry" .venv
-  exit 0
-fi
-
-# otherwise make a new virtualenv from scratch
-virtualenv -ppython2.7 .venv
