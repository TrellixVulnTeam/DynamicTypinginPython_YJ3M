commit aef13935311816b0f5e97433fcf1c13d83666bbb
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Feb 20 14:48:30 2019 -0800

    feat: sentry devservices

diff --git a/Brewfile b/Brewfile
index 11c8ca9552..f6a1ba92e1 100644
--- a/Brewfile
+++ b/Brewfile
@@ -3,8 +3,7 @@ brew 'pkgconfig'
 brew 'libxmlsec1'
 brew 'openssl'
 brew 'geoip'
-brew 'redis@3.2', restart_service: true
-brew 'postgresql@9.6', restart_service: true, link: true
+brew 'postgresql@9.6', link: true
 
 tap 'caskroom/cask'
 cask 'chromedriver'
diff --git a/Makefile b/Makefile
index 7d216924a4..6d12305be7 100644
--- a/Makefile
+++ b/Makefile
@@ -22,9 +22,9 @@ build: locale
 
 reset-db:
 	@echo "--> Dropping existing 'sentry' database"
-	dropdb sentry || true
+	dropdb -h 127.0.0.1 -U postgres sentry || true
 	@echo "--> Creating 'sentry' database"
-	createdb -E utf-8 sentry
+	createdb -h 127.0.0.1 -U postgres -E utf-8 sentry
 	@echo "--> Applying migrations"
 	sentry upgrade
 
diff --git a/requirements-dev.txt b/requirements-dev.txt
index 756eacb0e2..87a8df33ac 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -9,3 +9,4 @@ flake8>=3.5.0,<3.6.0
 isort>=4.3.4,<4.4.0
 pycodestyle>=2.3.1,<2.4.0
 sentry-flake8>=0.0.1
+docker>=3.7.0,<3.8.0
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 09ea06911d..aeebc1be55 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -104,7 +104,7 @@ DATABASES = {
         'NAME': 'sentry',
         'USER': 'postgres',
         'PASSWORD': '',
-        'HOST': '',
+        'HOST': '127.0.0.1',
         'PORT': '',
         'AUTOCOMMIT': True,
         'ATOMIC_REQUESTS': False,
@@ -1325,6 +1325,82 @@ SENTRY_WATCHERS = (
     ),
 )
 
+SENTRY_DEVSERVICES = {
+    'redis': {
+        'image': 'redis:5.0-alpine',
+        'ports': {'6379/tcp': 6379},
+        'command': ['redis-server', '--appendonly', 'yes'],
+        'volumes': {
+            'redis': {'bind': '/data'},
+        }
+    },
+    'postgres': {
+        'image': 'postgres:9.6-alpine',
+        'ports': {'5432/tcp': 5432},
+        'environment': {
+            'POSTGRES_DB': 'sentry',
+        },
+        'volumes': {
+            'postgres': {'bind': '/var/lib/postgresql/data'},
+        },
+    },
+    'zookeeper': {
+        'image': 'confluentinc/cp-zookeeper:5.1.2',
+        'environment': {
+            'ZOOKEEPER_CLIENT_PORT': '2181',
+        },
+        'volumes': {
+            'zookeeper': {'bind': '/var/lib/zookeeper'},
+        },
+    },
+    'kafka': {
+        'image': 'confluentinc/cp-kafka:5.1.2',
+        'ports': {'9092/tcp': 9092},
+        'environment': {
+            'KAFKA_ZOOKEEPER_CONNECT': '{containers[zookeeper][name]}:2181',
+            'KAFKA_LISTENERS': 'INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092',
+            'KAFKA_ADVERTISED_LISTENERS': 'INTERNAL://{containers[kafka][name]}:9093,EXTERNAL://127.0.0.1:{containers[kafka][ports][9092/tcp]}',
+            'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP': 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT',
+            'KAFKA_INTER_BROKER_LISTENER_NAME': 'INTERNAL',
+            'KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR': '1',
+        },
+        'volumes': {
+            'kafka': {'bind': '/var/lib/kafka'},
+        },
+    },
+    'clickhouse': {
+        'image': 'yandex/clickhouse-server:19.3',
+        'ports': {
+            '9000/tcp': 9000,
+            '9009/tcp': 9009,
+            '8123/tcp': 8123,
+        },
+        'ulimits': [
+            {'name': 'nofile', 'soft': 262144, 'hard': 262144},
+        ],
+        'volumes': {
+            'clickhouse': {'bind': '/var/lib/clickhouse'},
+        },
+    },
+    'snuba': {
+        'image': 'getsentry/snuba:latest',
+        'pull': True,
+        'ports': {'1218/tcp': 1218},
+        'command': ['devserver'],
+        'environment': {
+            'PYTHONUNBUFFERED': '1',
+            'SNUBA_SETTINGS': 'docker',
+            'DEBUG': '1',
+            'CLICKHOUSE_TABLE': 'dev',
+            'CLICKHOUSE_SERVER': '{containers[clickhouse][name]}:9000',
+            'DEFAULT_BROKERS': '{containers[kafka][name]}:9093',
+            'REDIS_HOST': '{containers[redis][name]}',
+            'REDIS_PORT': '6379',
+            'REDIS_DB': '1',
+        },
+    },
+}
+
 # Max file size for avatar photo uploads
 SENTRY_MAX_AVATAR_SIZE = 5000000
 
diff --git a/src/sentry/data/config/sentry.conf.py.default b/src/sentry/data/config/sentry.conf.py.default
index 7652a79dc6..ab83494791 100644
--- a/src/sentry/data/config/sentry.conf.py.default
+++ b/src/sentry/data/config/sentry.conf.py.default
@@ -12,7 +12,7 @@ DATABASES = {
         'NAME': 'sentry',
         'USER': 'postgres',
         'PASSWORD': '',
-        'HOST': '',
+        'HOST': '127.0.0.1',
         'PORT': '',
         'AUTOCOMMIT': True,
         'ATOMIC_REQUESTS': False,
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index 55c4cc3f25..802d0247d1 100644
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -65,6 +65,7 @@ list(
             'sentry.runner.commands.start.start', 'sentry.runner.commands.tsdb.tsdb',
             'sentry.runner.commands.upgrade.upgrade',
             'sentry.runner.commands.permissions.permissions',
+            'sentry.runner.commands.devservices.devservices',
         )
     )
 )
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index a984e8ca81..02c5f8baf7 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -136,6 +136,12 @@ def devserver(reload, watchers, workers, browser_reload, styleguide, prefix, env
             ('cron', ['sentry', 'run', 'cron', '--autoreload']),
         ]
 
+        from sentry import eventstream
+        if eventstream.requires_post_process_forwarder():
+            daemons += [
+                ('relay', ['sentry', 'run', 'post-process-forwarder', '--loglevel=debug', '--commit-batch-size=1']),
+            ]
+
     if needs_https and has_https:
         https_port = six.text_type(parsed_url.port)
         https_host = parsed_url.hostname
diff --git a/src/sentry/runner/commands/devservices.py b/src/sentry/runner/commands/devservices.py
new file mode 100644
index 0000000000..64de3b8ff1
--- /dev/null
+++ b/src/sentry/runner/commands/devservices.py
@@ -0,0 +1,161 @@
+from __future__ import absolute_import, print_function
+
+import os
+import click
+
+
+def get_or_create(client, thing, name):
+    import docker
+    try:
+        return getattr(client, thing + 's').get(name)
+    except docker.errors.NotFound:
+        click.secho("> Creating '%s' %s" % (name, thing), err=True, fg='yellow')
+        return getattr(client, thing + 's').create(name)
+
+
+class SetType(click.ParamType):
+    name = 'set'
+
+    def convert(self, value, param, ctx):
+        if value is None:
+            return set()
+        return set(value.split(','))
+
+
+Set = SetType()
+
+
+@click.group()
+def devservices():
+    """
+    Manage dependent development services required for Sentry.
+
+    Do not use in production!
+    """
+
+
+@devservices.command()
+@click.option('--project', default='sentry')
+@click.option('--exclude', type=Set, help='Services to ignore and not run.')
+def up(project, exclude):
+    "Run/update dependent services."
+    os.environ['SENTRY_SKIP_BACKEND_VALIDATION'] = '1'
+
+    from sentry.runner import configure
+    configure()
+
+    import docker
+    from django.conf import settings
+    client = docker.from_env()
+
+    # This is brittle, but is the best way now to limit what
+    # services are run if they're not needed.
+    if not exclude:
+        exclude = set()
+    if 'kafka' in settings.SENTRY_EVENTSTREAM:
+        pass
+    elif 'snuba' in settings.SENTRY_EVENTSTREAM:
+        click.secho('! Skipping kafka and zookeeper since your eventstream backend does not require it', err=True, fg='cyan')
+        exclude |= {'kafka', 'zookeeper'}
+    else:
+        click.secho('! Skipping kafka, zookeeper, snuba, and clickhouse since your eventstream backend does not require it', err=True, fg='cyan')
+        exclude |= {'kafka', 'zookeeper', 'snuba', 'clickhouse'}
+
+    get_or_create(client, 'network', project)
+
+    containers = {}
+    for name, options in settings.SENTRY_DEVSERVICES.items():
+        if name in exclude:
+            continue
+        options = options.copy()
+        options['network'] = project
+        options['detach'] = True
+        options['name'] = project + '_' + name
+        options.setdefault('ports', {})
+        options.setdefault('environment', {})
+        options.setdefault('restart_policy', {'Name': 'on-failure'})
+        containers[name] = options
+
+    pulled = set()
+    for name, options in containers.items():
+        # HACK(mattrobenolt): special handle snuba backend becuase it needs to
+        # handle different values based on the eventstream backend
+        # For snuba, we can't run the full suite of devserver, but can only
+        # run the api.
+        if name == 'snuba' and 'snuba' in settings.SENTRY_EVENTSTREAM:
+            options['environment'].pop('DEFAULT_BROKERS', None)
+            options['command'] = ['devserver', '--no-workers']
+
+        for key, value in options['environment'].items():
+            options['environment'][key] = value.format(containers=containers)
+        if options.pop('pull', False) and options['image'] not in pulled:
+            click.secho("> Pulling image '%s'" % options['image'], err=True, fg='green')
+            client.images.pull(options['image'])
+            pulled.add(options['image'])
+        for mount in options.get('volumes', {}).keys():
+            if '/' not in mount:
+                get_or_create(client, 'volume', project + '_' + mount)
+                options['volumes'][project + '_' + mount] = options['volumes'].pop(mount)
+        try:
+            container = client.containers.get(options['name'])
+        except docker.errors.NotFound:
+            pass
+        else:
+            container.stop()
+            container.remove()
+        click.secho("> Creating '%s' container" % options['name'], err=True, fg='yellow')
+        client.containers.run(**options)
+
+
+@devservices.command()
+@click.option('--project', default='sentry')
+@click.argument('service', nargs=-1)
+def down(project, service):
+    "Shut down all services."
+    import docker
+    client = docker.from_env()
+
+    prefix = project + '_'
+
+    for container in client.containers.list(all=True):
+        if container.name.startswith(prefix):
+            if not service or container.name[len(prefix):] in service:
+                click.secho("> Removing '%s' container" % container.name, err=True, fg='red')
+                container.stop()
+                container.remove()
+
+
+@devservices.command()
+@click.option('--project', default='sentry')
+@click.argument('service', nargs=-1)
+def rm(project, service):
+    "Delete all services and associated data."
+
+    click.confirm('Are you sure you want to continue?\nThis will delete all of your Sentry related data!', abort=True)
+
+    import docker
+    client = docker.from_env()
+
+    prefix = project + '_'
+
+    for container in client.containers.list(all=True):
+        if container.name.startswith(prefix):
+            if not service or container.name[len(prefix):] in service:
+                click.secho("> Removing '%s' container" % container.name, err=True, fg='red')
+                container.stop()
+                container.remove()
+
+    for volume in client.volumes.list():
+        if volume.name.startswith(prefix):
+            if not service or volume.name[len(prefix):] in service:
+                click.secho("> Removing '%s' volume" % volume.name, err=True, fg='red')
+                volume.remove()
+
+    if not service:
+        try:
+            network = client.networks.get(project)
+        except docker.errors.NotFound:
+            pass
+        else:
+            click.secho("> Removing '%s' network" % network.name, err=True, fg='red')
+            network.remove()
