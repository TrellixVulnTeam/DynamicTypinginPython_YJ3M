commit fbe1eda4aa3d57e1ae1bc5c6fd4dbe2c4c0f722f
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Jan 14 15:31:24 2020 -0800

    feat(teams): Allow members to request to add members to teams (#16389)

diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 3007c31f51..4241151436 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from django.db.models import Q
-from rest_framework import serializers
+from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry import roles
@@ -39,8 +39,6 @@ class RelaxedOrganizationPermission(OrganizationPermission):
         "GET": _allowed_scopes,
         "POST": _allowed_scopes,
         "PUT": _allowed_scopes,
-        # DELETE checks for role comparison as you can either remove a member
-        # with a lower access role, or yourself, without having the req. scope
         "DELETE": _allowed_scopes,
     }
 
@@ -48,15 +46,28 @@ class RelaxedOrganizationPermission(OrganizationPermission):
 class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
     permission_classes = [RelaxedOrganizationPermission]
 
-    def _can_access(self, request, member, organization):
+    def _can_create_team_member(self, request, organization, team_slug):
         """
-        Conditions where user can modify the requested resource:
+        User can join or add a member to a team:
 
         * If they are an active superuser
-        * If they are modifying their own membership
-        * If the user's role is higher than the targeted user's role (e.g. "admin" can't modify "owner")
-        * If the user is an "admin" and they are modifying a team they are a member of
-        * If the "open membership" setting is enabled and the targeted user is being added to a team
+        * If they are a team admin or have global write access
+        * If the open membership organization setting is enabled
+        """
+
+        return (
+            is_active_superuser(request)
+            or self._can_admin_team(request, organization, team_slug)
+            or organization.flags.allow_joinleave
+        )
+
+    def _can_delete(self, request, member, organization, team_slug):
+        """
+        User can remove a member from a team:
+
+        * If they are an active superuser
+        * If they are removing their own membership
+        * If they are a team admin or have global write access
         """
 
         if is_active_superuser(request):
@@ -68,27 +79,22 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         if request.user.id == member.user_id:
             return True
 
-        acting_member = OrganizationMember.objects.get(
-            organization=organization, user__id=request.user.id, user__is_active=True
-        )
-
-        if roles.get(acting_member.role).is_global and roles.can_manage(
-            acting_member.role, member.role
-        ):
-            return True
-
-        if request.method == "POST" and organization.flags.allow_joinleave:
+        if self._can_admin_team(request, organization, team_slug):
             return True
 
         return False
 
     def _can_admin_team(self, request, organization, team_slug):
+        global_roles = [r.id for r in roles.with_scope("org:write") if r.is_global]
+        team_roles = [r.id for r in roles.with_scope("team:write")]
+
+        # must be a team admin or have global write access
         return OrganizationMember.objects.filter(
+            Q(role__in=global_roles)
+            | Q(organizationmemberteam__team__slug=team_slug, role__in=team_roles),
             organization=organization,
             user__id=request.user.id,
             user__is_active=True,
-            role="admin",
-            organizationmemberteam__team__slug=team_slug,
         ).exists()
 
     def _get_member(self, request, organization, member_id):
@@ -104,27 +110,31 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             )
         return queryset.select_related("user").get()
 
+    def _create_access_request(self, request, team, member):
+        requester = request.user if request.user != member.user else None
+        omt, created = OrganizationAccessRequest.objects.get_or_create(
+            team=team, member=member, requester=requester
+        )
+        if created:
+            omt.send_request_email()
+
     def post(self, request, organization, member_id, team_slug):
         """
-        Join or add a member to a team
-
         Join, request access to or add a member to a team.
 
-        If the user is already a member of the team, this will simply return
-        a 204.
-
         If the user needs permission to join the team, an access request will
         be generated and the returned status code will be 202.
+
+        If the user is already a member of the team, this will simply return
+        a 204.
         """
         try:
-            om = self._get_member(request, organization, member_id)
+            member = self._get_member(request, organization, member_id)
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        can_admin_team = self._can_admin_team(request, organization, team_slug)
-
-        if not self._can_access(request, om, organization) and not can_admin_team:
-            return Response({"detail": ERR_INSUFFICIENT_ROLE}, status=400)
+        if not request.user.is_authenticated():
+            return Response(status=status.HTTP_401_UNAUTHORIZED)
 
         try:
             team = Team.objects.get(organization=organization, slug=team_slug)
@@ -132,19 +142,14 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             raise ResourceDoesNotExist
 
         try:
-            omt = OrganizationMemberTeam.objects.get(team=team, organizationmember=om)
+            omt = OrganizationMemberTeam.objects.get(team=team, organizationmember=member)
         except OrganizationMemberTeam.DoesNotExist:
-            if not (
-                request.access.has_scope("org:write")
-                or organization.flags.allow_joinleave
-                or can_admin_team
-            ):
-                omt, created = OrganizationAccessRequest.objects.get_or_create(team=team, member=om)
-                if created:
-                    omt.send_request_email()
+            if self._can_create_team_member(request, organization, team_slug):
+                omt = OrganizationMemberTeam.objects.create(team=team, organizationmember=member)
+            else:
+                self._create_access_request(request, team, member)
                 return Response(status=202)
 
-            omt = OrganizationMemberTeam.objects.create(team=team, organizationmember=om)
         else:
             return Response(status=204)
 
@@ -152,7 +157,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             request=request,
             organization=organization,
             target_object=omt.id,
-            target_user=om.user,
+            target_user=member.user,
             event=AuditLogEntryEvent.MEMBER_JOIN_TEAM,
             data=omt.get_audit_log_data(),
         )
@@ -164,13 +169,11 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         Leave or remove a member from a team
         """
         try:
-            om = self._get_member(request, organization, member_id)
+            member = self._get_member(request, organization, member_id)
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        can_admin_team = self._can_admin_team(request, organization, team_slug)
-
-        if not self._can_access(request, om, organization) and not can_admin_team:
+        if not self._can_delete(request, member, organization, team_slug):
             return Response({"detail": ERR_INSUFFICIENT_ROLE}, status=400)
 
         try:
@@ -179,7 +182,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             raise ResourceDoesNotExist
 
         try:
-            omt = OrganizationMemberTeam.objects.get(team=team, organizationmember=om)
+            omt = OrganizationMemberTeam.objects.get(team=team, organizationmember=member)
         except OrganizationMemberTeam.DoesNotExist:
             pass
         else:
@@ -187,7 +190,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
                 request=request,
                 organization=organization,
                 target_object=omt.id,
-                target_user=om.user,
+                target_user=member.user,
                 event=AuditLogEntryEvent.MEMBER_LEAVE_TEAM,
                 data=omt.get_audit_log_data(),
             )
diff --git a/src/sentry/api/serializers/models/organization_access_request.py b/src/sentry/api/serializers/models/organization_access_request.py
index b7cc7f5f34..c74ed16ac2 100644
--- a/src/sentry/api/serializers/models/organization_access_request.py
+++ b/src/sentry/api/serializers/models/organization_access_request.py
@@ -13,5 +13,6 @@ class OrganizationAccessRequestSerializer(Serializer):
             "id": six.text_type(obj.id),
             "member": serialize(obj.member),
             "team": serialize(obj.team),
+            "requester": serialize(obj.requester),
         }
         return d
diff --git a/src/sentry/models/organizationaccessrequest.py b/src/sentry/models/organizationaccessrequest.py
index 4ebce95ee0..c623178506 100644
--- a/src/sentry/models/organizationaccessrequest.py
+++ b/src/sentry/models/organizationaccessrequest.py
@@ -39,12 +39,15 @@ class OrganizationAccessRequest(Model):
             "team": self.team,
             "url": absolute_uri(
                 reverse(
-                    "sentry-organization-members", kwargs={"organization_slug": organization.slug}
+                    "sentry-organization-members-requests",
+                    kwargs={"organization_slug": organization.slug},
                 )
-                + "?ref=access-requests"
             ),
         }
 
+        if self.requester:
+            context.update({"requester": self.requester.get_display_name()})
+
         msg = MessageBuilder(
             subject="Sentry Access Request",
             template="sentry/emails/request-team-access.txt",
diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index b288342bae..03d970dc47 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -33,6 +33,12 @@ export type SentryAppDetailsModalOptions = {
   organization: Organization;
 };
 
+export type TeamAccessRequestModalOptions = {
+  memberId: string;
+  teamId: string;
+  orgId: string;
+};
+
 /**
  * Show a modal
  */
@@ -151,6 +157,16 @@ export function openRecoveryOptions(options: ModalOptions = {}) {
     });
 }
 
+export function openTeamAccessRequestModal(options: TeamAccessRequestModalOptions) {
+  import(/* webpackChunkName: "TeamAccessRequestModal" */ 'app/components/modals/teamAccessRequestModal')
+    .then(mod => mod.default)
+    .then(Modal => {
+      openModal(deps => <Modal {...deps} {...options} />, {
+        modalClassName: 'confirm-team-request',
+      });
+    });
+}
+
 /**
  * @param Object options.provider The integration provider to show the details for
  * @param Function options.onAddIntegration Called after a new integration is added
diff --git a/src/sentry/static/sentry/app/components/modals/teamAccessRequestModal.tsx b/src/sentry/static/sentry/app/components/modals/teamAccessRequestModal.tsx
new file mode 100644
index 0000000000..337af8e356
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/teamAccessRequestModal.tsx
@@ -0,0 +1,84 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import {Client} from 'app/api';
+import {ModalRenderProps, TeamAccessRequestModalOptions} from 'app/actionCreators/modal';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+type Props = ModalRenderProps &
+  TeamAccessRequestModalOptions & {
+    api: Client;
+    memberId: string;
+    teamId: string;
+    orgId: string;
+  };
+
+type State = {
+  createBusy: boolean;
+};
+
+class CreateTeamAccessRequest extends React.Component<Props, State> {
+  state: State = {
+    createBusy: false,
+  };
+
+  handleClick = async () => {
+    const {api, memberId, orgId, teamId, closeModal} = this.props;
+
+    this.setState({createBusy: true});
+
+    try {
+      await api.requestPromise(
+        `/organizations/${orgId}/members/${memberId}/teams/${teamId}/`,
+        {
+          method: 'POST',
+        }
+      );
+      addSuccessMessage(t('Team request sent for approval'));
+    } catch (err) {
+      addErrorMessage(t('Unable to send team request'));
+    }
+    this.setState({createBusy: false});
+    closeModal();
+  };
+
+  render() {
+    const {Body, Footer, closeModal, teamId} = this.props;
+
+    return (
+      <React.Fragment>
+        <Body>
+          {tct(
+            'You do not have permission to add members to the #[team] team, but we will send a request to your organization admins for approval.',
+            {team: teamId}
+          )}
+        </Body>
+        <Footer>
+          <ButtonGroup>
+            <Button onClick={closeModal}>{t('Cancel')}</Button>
+            <Button
+              priority="primary"
+              onClick={this.handleClick}
+              busy={this.state.createBusy}
+              autoFocus
+            >
+              {t('Continue')}
+            </Button>
+          </ButtonGroup>
+        </Footer>
+      </React.Fragment>
+    );
+  }
+}
+
+const ButtonGroup = styled('div')`
+  display: grid;
+  grid-template-columns: max-content max-content;
+  grid-gap: ${space(1)};
+`;
+
+export default withApi(CreateTeamAccessRequest);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
index 65f09b8860..32db6e3103 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/organizationAccessRequests.jsx
@@ -20,6 +20,7 @@ class OrganizationAccessRequests extends React.Component {
         id: PropTypes.string.isRequired,
         member: SentryTypes.Member,
         team: SentryTypes.Team,
+        requester: SentryTypes.User,
       })
     ),
   };
@@ -88,17 +89,25 @@ class OrganizationAccessRequests extends React.Component {
         <PanelHeader>{t('Pending Team Requests')}</PanelHeader>
 
         <PanelBody>
-          {requestList.map(({id, member, team}) => {
-            const displayName =
+          {requestList.map(({id, member, team, requester}) => {
+            const memberName =
               member.user &&
               (member.user.name || member.user.email || member.user.username);
+            const requesterName =
+              requester && (requester.name || requester.email || requester.username);
             return (
               <StyledPanelItem key={id}>
                 <div data-test-id="request-message">
-                  {tct('[name] requests access to the [team] team.', {
-                    name: <strong>{displayName}</strong>,
-                    team: <strong>#{team.slug}</strong>,
-                  })}
+                  {requesterName
+                    ? tct('[requesterName] requests to add [name] to the [team] team.', {
+                        requesterName,
+                        name: <strong>{memberName}</strong>,
+                        team: <strong>#{team.slug}</strong>,
+                      })
+                    : tct('[name] requests access to the [team] team.', {
+                        name: <strong>{memberName}</strong>,
+                        team: <strong>#{team.slug}</strong>,
+                      })}
                 </div>
                 <div>
                   <StyledButton
diff --git a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
index 69215c91a3..2a5adfca1d 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationTeams/teamMembers.jsx
@@ -6,7 +6,10 @@ import styled from '@emotion/styled';
 import {Panel, PanelHeader} from 'app/components/panels';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {joinTeam, leaveTeam} from 'app/actionCreators/teams';
-import {openInviteMembersModal} from 'app/actionCreators/modal';
+import {
+  openInviteMembersModal,
+  openTeamAccessRequestModal,
+} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import UserAvatar from 'app/components/avatar/userAvatar';
 import Button from 'app/components/button';
@@ -150,7 +153,7 @@ class TeamMembers extends React.Component {
   };
 
   addTeamMember = selection => {
-    const params = this.props.params;
+    const {params} = this.props;
 
     this.setState({
       loading: true,
@@ -199,7 +202,8 @@ class TeamMembers extends React.Component {
   };
 
   renderDropdown = access => {
-    const {organization} = this.props;
+    const {organization, params} = this.props;
+    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));
 
     // members can add other members to a team if the `Open Membership` setting is enabled
     // otherwise, `org:write` or `team:admin` permissions are required
@@ -207,22 +211,6 @@ class TeamMembers extends React.Component {
     const hasWriteAccess = access.has('org:write') || access.has('team:admin');
     const canAddMembers = hasOpenMembership || hasWriteAccess;
 
-    if (!canAddMembers) {
-      return (
-        <DropdownButton
-          disabled
-          title={t('You do not have enough permission to add new members')}
-          isOpen={false}
-          size="xsmall"
-          data-test-id="add-member"
-        >
-          {t('Add Member')}
-        </DropdownButton>
-      );
-    }
-
-    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));
-
     const items = (this.state.orgMemberList || [])
       .filter(m => !existingMembers.has(m.id))
       .map(m => {
@@ -253,7 +241,16 @@ class TeamMembers extends React.Component {
     return (
       <DropdownAutoComplete
         items={items}
-        onSelect={this.addTeamMember}
+        onSelect={
+          canAddMembers
+            ? this.addTeamMember
+            : selection =>
+                openTeamAccessRequestModal({
+                  teamId: params.teamId,
+                  orgId: params.orgId,
+                  memberId: selection.value,
+                })
+        }
         menuHeader={menuHeader}
         emptyMessage={t('No members')}
         onChange={this.handleMemberFilterChange}
@@ -295,8 +292,7 @@ class TeamMembers extends React.Component {
 
     const {params, organization, config} = this.props;
     const access = new Set(organization.access);
-    const isOrgAdmin = access.has('org:write');
-    const isTeamAdmin = access.has('team:admin');
+    const hasWriteAccess = access.has('org:write') || access.has('team:admin');
 
     return (
       <Panel>
@@ -307,7 +303,7 @@ class TeamMembers extends React.Component {
         {this.state.teamMemberList.length ? (
           this.state.teamMemberList.map(member => {
             const isSelf = member.email === config.user.email;
-            const canRemoveMember = isOrgAdmin || isTeamAdmin || isSelf;
+            const canRemoveMember = hasWriteAccess || isSelf;
             return (
               <StyledMemberContainer key={member.id}>
                 <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />
diff --git a/src/sentry/templates/sentry/emails/request-team-access.html b/src/sentry/templates/sentry/emails/request-team-access.html
index 2c6a21f196..a73b9f7e4e 100644
--- a/src/sentry/templates/sentry/emails/request-team-access.html
+++ b/src/sentry/templates/sentry/emails/request-team-access.html
@@ -3,12 +3,17 @@
 {% load i18n %}
 
 {% block main %}
-    <h3>Request for Access</h3>
-    <p><strong>{{ name }}</strong> is requesting access to the #{{ team.slug }} team on Sentry.</p>
+  <h3>Request for Access</h3>
 
-    <p>Accept or decline this request in the <a href="{{ url }}">pending requests panel</a>.</p>
+  {% if requester %}
+    <p>{{ requester }} is requesting to add <strong>{{ name }}</strong> to the <strong>#{{ team.slug }}</strong> team.</p>
+  {% else %}
+     <p><strong>{{ name }}</strong> is requesting access to the #{{ team.slug }} team on Sentry.</p>
+  {% endif %}
 
-    <p class="via">
-        You are receiving this email because you're listed as an administrator of the #{{ team.slug }} team.
-    </p>
+  <p>Accept or decline this request in the <a href="{{ url }}">pending requests panel</a>.</p>
+
+  <p class="via">
+    You are receiving this email because you're listed as an administrator of the #{{ team.slug }} team.
+  </p>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/emails/request-team-access.txt b/src/sentry/templates/sentry/emails/request-team-access.txt
index 6e6848039e..9b5217e92d 100644
--- a/src/sentry/templates/sentry/emails/request-team-access.txt
+++ b/src/sentry/templates/sentry/emails/request-team-access.txt
@@ -1,7 +1,11 @@
-{{ name }} is requesting access to #{{ team.slug }}.
+{% if requester %}
+{{ requester }} is requesting to add {{ name }} to the #{{ team.slug }} team.
+{% else %}
+{{ name }} is requesting access to the #{{ team.slug }} team on Sentry.
+{% endif %}
 
 You can accept or decline this request in via the pending requests panel:
 
-    {{ url }}
+  {{ url }}
 
 You are receiving this email because you're listed as an administrator of the #{{ team.slug }} team.
diff --git a/src/sentry/web/debug_urls.py b/src/sentry/web/debug_urls.py
index 15e293c308..d7d1ff23b7 100644
--- a/src/sentry/web/debug_urls.py
+++ b/src/sentry/web/debug_urls.py
@@ -81,6 +81,10 @@ urlpatterns = [
         DebugResolvedInReleaseUpcomingEmailView.as_view(),
     ),
     url(r"^debug/mail/request-access/$", sentry.web.frontend.debug.mail.request_access),
+    url(
+        r"^debug/mail/request-access-for-another-member/$",
+        sentry.web.frontend.debug.mail.request_access_for_another_member,
+    ),
     url(r"^debug/mail/join-request/$", DebugOrganizationJoinRequestEmailView.as_view()),
     url(r"^debug/mail/invite-request/$", DebugOrganizationInviteRequestEmailView.as_view()),
     url(r"^debug/mail/access-approved/$", sentry.web.frontend.debug.mail.access_approved),
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 9085347925..3af9382be0 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -513,7 +513,7 @@ def report(request):
 
 @login_required
 def request_access(request):
-    org = Organization(id=1, slug="example", name="Example")
+    org = Organization(id=1, slug="sentry", name="Sentry org")
     team = Team(id=1, slug="example", name="Example", organization=org)
 
     return MailPreview(
@@ -525,9 +525,33 @@ def request_access(request):
             "organization": org,
             "team": team,
             "url": absolute_uri(
-                reverse("sentry-organization-members", kwargs={"organization_slug": org.slug})
-                + "?ref=access-requests"
+                reverse(
+                    "sentry-organization-members-requests", kwargs={"organization_slug": org.slug}
+                )
+            ),
+        },
+    ).render(request)
+
+
+@login_required
+def request_access_for_another_member(request):
+    org = Organization(id=1, slug="sentry", name="Sentry org")
+    team = Team(id=1, slug="example", name="Example", organization=org)
+
+    return MailPreview(
+        html_template="sentry/emails/request-team-access.html",
+        text_template="sentry/emails/request-team-access.txt",
+        context={
+            "email": "foo@example.com",
+            "name": "Username",
+            "organization": org,
+            "team": team,
+            "url": absolute_uri(
+                reverse(
+                    "sentry-organization-members-requests", kwargs={"organization_slug": org.slug}
+                )
             ),
+            "requester": request.user.get_display_name(),
         },
     ).render(request)
 
diff --git a/tests/js/sentry-test/fixtures/accessRequest.js b/tests/js/sentry-test/fixtures/accessRequest.js
index 102359a2ee..fdbd9693b7 100644
--- a/tests/js/sentry-test/fixtures/accessRequest.js
+++ b/tests/js/sentry-test/fixtures/accessRequest.js
@@ -6,6 +6,7 @@ export function AccessRequest(params = {}) {
     id: '123',
     member: Member(),
     team: Team(),
+    requester: null,
     ...params,
   };
 }
diff --git a/tests/js/spec/components/modals/teamAccessRequestModal.spec.jsx b/tests/js/spec/components/modals/teamAccessRequestModal.spec.jsx
new file mode 100644
index 0000000000..7f997bea05
--- /dev/null
+++ b/tests/js/spec/components/modals/teamAccessRequestModal.spec.jsx
@@ -0,0 +1,59 @@
+import {Modal} from 'react-bootstrap';
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+import TeamAccessRequestModal from 'app/components/modals/teamAccessRequestModal';
+
+describe('TeamAccessRequestModal', function() {
+  let wrapper;
+  let createMock;
+
+  const closeModal = jest.fn();
+  const onClose = jest.fn();
+  const orgId = TestStubs.Organization().slug;
+  const memberId = TestStubs.Member().id;
+  const teamId = TestStubs.Team().slug;
+
+  const modalRenderProps = {
+    Body: Modal.Body,
+    Footer: Modal.Footer,
+    Header: Modal.Header,
+    closeModal,
+    onClose,
+  };
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    wrapper = mountWithTheme(
+      <TeamAccessRequestModal
+        orgId={orgId}
+        teamId={teamId}
+        memberId={memberId}
+        {...modalRenderProps}
+      />,
+      TestStubs.routerContext()
+    );
+
+    createMock = MockApiClient.addMockResponse({
+      url: `/organizations/${orgId}/members/${memberId}/teams/${teamId}/`,
+      method: 'POST',
+    });
+  });
+
+  it('renders', function() {
+    expect(wrapper.find('div[className="modal-body"]').text()).toBe(
+      `You do not have permission to add members to the #${teamId} team, but we will send a request to your organization admins for approval.`
+    );
+  });
+
+  it('creates access request on continue', function() {
+    wrapper.find('button[aria-label="Continue"]').simulate('click');
+    expect(createMock).toHaveBeenCalled();
+  });
+
+  it('closes modal on cancel', function() {
+    wrapper.find('button[aria-label="Cancel"]').simulate('click');
+    expect(createMock).not.toHaveBeenCalled();
+    expect(closeModal).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx b/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
index 90c65e857d..84a7c55d9b 100644
--- a/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/organizationAccessRequests.spec.jsx
@@ -6,7 +6,13 @@ import OrganizationAccessRequests from 'app/views/settings/organizationMembers/o
 describe('OrganizationAccessRequests', function() {
   const orgId = 'org-slug';
   const accessRequest = TestStubs.AccessRequest();
-  const requestList = [accessRequest];
+  const requester = TestStubs.User({
+    id: '9',
+    username: 'requester@example.com',
+    email: 'requester@example.com',
+    name: 'Requester',
+  });
+  const requestList = [accessRequest, TestStubs.AccessRequest({id: '4', requester})];
 
   it('renders empty', function() {
     const wrapper = mountWithTheme(
@@ -33,6 +39,7 @@ describe('OrganizationAccessRequests', function() {
     expect(
       wrapper
         .find('StyledPanelItem')
+        .first()
         .text()
         .includes(
           `${accessRequest.member.user.name} requests access to the #${
@@ -40,6 +47,17 @@ describe('OrganizationAccessRequests', function() {
           } team`
         )
     ).toBe(true);
+    expect(
+      wrapper
+        .find('StyledPanelItem')
+        .last()
+        .text()
+        .includes(
+          `${requester.name} requests to add ${accessRequest.member.user.name} to the #${
+            accessRequest.team.slug
+          } team`
+        )
+    ).toBe(true);
   });
 
   it('can approve', async function() {
@@ -57,7 +75,10 @@ describe('OrganizationAccessRequests', function() {
       />
     );
 
-    wrapper.find('button[aria-label="Approve"]').simulate('click');
+    wrapper
+      .find('button[aria-label="Approve"]')
+      .first()
+      .simulate('click');
 
     await tick();
 
@@ -87,7 +108,10 @@ describe('OrganizationAccessRequests', function() {
       />
     );
 
-    wrapper.find('button[aria-label="Deny"]').simulate('click');
+    wrapper
+      .find('button[aria-label="Deny"]')
+      .first()
+      .simulate('click');
 
     await tick();
 
diff --git a/tests/js/spec/views/teamMembers.spec.jsx b/tests/js/spec/views/teamMembers.spec.jsx
index 912239da8f..cca66751db 100644
--- a/tests/js/spec/views/teamMembers.spec.jsx
+++ b/tests/js/spec/views/teamMembers.spec.jsx
@@ -1,32 +1,48 @@
 import React from 'react';
 
 import {Client} from 'app/api';
-import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme} from 'sentry-test/enzyme';
-import {openInviteMembersModal} from 'app/actionCreators/modal';
+import {
+  openInviteMembersModal,
+  openTeamAccessRequestModal,
+} from 'app/actionCreators/modal';
 import TeamMembers from 'app/views/settings/organizationTeams/teamMembers';
 
 jest.mock('app/actionCreators/modal', () => ({
   openInviteMembersModal: jest.fn(),
+  openTeamAccessRequestModal: jest.fn(),
 }));
 
 describe('TeamMembers', function() {
-  const {organization, routerContext} = initializeOrg();
+  let createMock;
+
+  const organization = TestStubs.Organization();
+  const routerContext = TestStubs.routerContext([{organization}]);
   const team = TestStubs.Team();
   const members = TestStubs.Members();
+  const member = TestStubs.Member({
+    id: '9',
+    email: 'sentry9@test.com',
+    name: 'Sentry 9 Name',
+  });
 
   beforeEach(function() {
     Client.clearMockResponses();
     Client.addMockResponse({
       url: `/organizations/${organization.slug}/members/`,
       method: 'GET',
-      body: members,
+      body: [member],
     });
     Client.addMockResponse({
       url: `/teams/${organization.slug}/${team.slug}/members/`,
       method: 'GET',
       body: members,
     });
+
+    createMock = Client.addMockResponse({
+      url: `/organizations/${organization.slug}/members/${member.id}/teams/${team.slug}/`,
+      method: 'POST',
+    });
   });
 
   it('renders', async function() {
@@ -41,6 +57,85 @@ describe('TeamMembers', function() {
     wrapper.update();
   });
 
+  it('can add member to team with open membership', async function() {
+    const org = TestStubs.Organization({access: [], openMembership: true});
+    const wrapper = mountWithTheme(
+      <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    wrapper.find('DropdownButton[data-test-id="add-member"]').simulate('click');
+    wrapper
+      .find('StyledUserListElement')
+      .first()
+      .simulate('click');
+
+    await tick();
+    wrapper.update();
+
+    expect(createMock).toHaveBeenCalled();
+  });
+
+  it('can add member to team with team:admin permission', async function() {
+    const org = TestStubs.Organization({access: ['team:admin'], openMembership: false});
+    const wrapper = mountWithTheme(
+      <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    wrapper.find('DropdownButton[data-test-id="add-member"]').simulate('click');
+    wrapper
+      .find('StyledUserListElement')
+      .first()
+      .simulate('click');
+
+    expect(createMock).toHaveBeenCalled();
+  });
+
+  it('can add member to team with org:write permission', async function() {
+    const org = TestStubs.Organization({access: ['org:write'], openMembership: false});
+    const wrapper = mountWithTheme(
+      <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    wrapper.find('DropdownButton[data-test-id="add-member"]').simulate('click');
+    wrapper
+      .find('StyledUserListElement')
+      .first()
+      .simulate('click');
+
+    expect(createMock).toHaveBeenCalled();
+  });
+
+  it('can request access to add member to team without permission', async function() {
+    const org = TestStubs.Organization({access: [], openMembership: false});
+    const wrapper = mountWithTheme(
+      <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    wrapper.find('DropdownButton[data-test-id="add-member"]').simulate('click');
+    wrapper
+      .find('StyledUserListElement')
+      .first()
+      .simulate('click');
+
+    expect(openTeamAccessRequestModal).toHaveBeenCalled();
+  });
+
   it('can invite member from team dropdown with access', async function() {
     const org = TestStubs.Organization({access: ['team:admin'], openMembership: false});
     const wrapper = mountWithTheme(
@@ -95,7 +190,7 @@ describe('TeamMembers', function() {
     expect(openInviteMembersModal).toHaveBeenCalled();
   });
 
-  it('cannot invite member from team dropdown without access and `Open Membership` disabled', async function() {
+  it('can invite member from team dropdown without access and `Open Membership` disabled', async function() {
     const org = TestStubs.Organization({access: [], openMembership: false});
     const wrapper = mountWithTheme(
       <TeamMembers params={{orgId: org.slug, teamId: team.slug}} organization={org} />,
@@ -105,21 +200,21 @@ describe('TeamMembers', function() {
     await tick();
     wrapper.update();
 
-    expect(
-      wrapper.find('DropdownButton[data-test-id="add-member"]').prop('disabled')
-    ).toBe(true);
+    wrapper.find('DropdownButton[data-test-id="add-member"]').simulate('click');
+    wrapper
+      .find('StyledCreateMemberLink[data-test-id="invite-member"]')
+      .simulate('click');
+
+    expect(openInviteMembersModal).toHaveBeenCalled();
   });
 
   it('can remove member from team', async function() {
-    const endpoint = `/organizations/${organization.slug}/members/${
-      members[0].id
-    }/teams/${team.slug}/`;
-    const mock = Client.addMockResponse({
-      url: endpoint,
+    const deleteMock = Client.addMockResponse({
+      url: `/organizations/${organization.slug}/members/${members[0].id}/teams/${
+        team.slug
+      }/`,
       method: 'DELETE',
-      statusCode: 200,
     });
-
     const wrapper = mountWithTheme(
       <TeamMembers
         params={{orgId: organization.slug, teamId: team.slug}}
@@ -131,19 +226,14 @@ describe('TeamMembers', function() {
     await tick();
     wrapper.update();
 
-    expect(mock).not.toHaveBeenCalled();
+    expect(deleteMock).not.toHaveBeenCalled();
 
     wrapper
       .find('Button')
       .at(1)
       .simulate('click');
 
-    expect(mock).toHaveBeenCalledWith(
-      endpoint,
-      expect.objectContaining({
-        method: 'DELETE',
-      })
-    );
+    expect(deleteMock).toHaveBeenCalled();
   });
 
   it('can only remove self from team', async function() {
@@ -157,13 +247,9 @@ describe('TeamMembers', function() {
       body: [...members, me],
     });
 
-    const endpoint = `/organizations/${organization.slug}/members/${me.id}/teams/${
-      team.slug
-    }/`;
-    const mock = Client.addMockResponse({
-      url: endpoint,
+    const deleteMock = Client.addMockResponse({
+      url: `/organizations/${organization.slug}/members/${me.id}/teams/${team.slug}/`,
       method: 'DELETE',
-      statusCode: 200,
     });
     const organizationMember = TestStubs.Organization({
       access: [],
@@ -180,7 +266,7 @@ describe('TeamMembers', function() {
     await tick();
     wrapper.update();
 
-    expect(mock).not.toHaveBeenCalled();
+    expect(deleteMock).not.toHaveBeenCalled();
 
     expect(wrapper.find('IdBadge')).toHaveLength(members.length + 1);
 
@@ -188,11 +274,6 @@ describe('TeamMembers', function() {
     expect(wrapper.find('button[aria-label="Remove"]')).toHaveLength(1);
 
     wrapper.find('button[aria-label="Remove"]').simulate('click');
-    expect(mock).toHaveBeenCalledWith(
-      endpoint,
-      expect.objectContaining({
-        method: 'DELETE',
-      })
-    );
+    expect(deleteMock).toHaveBeenCalled();
   });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_member_team_details.py b/tests/sentry/api/endpoints/test_organization_member_team_details.py
index b509226bc2..e130265cb8 100644
--- a/tests/sentry/api/endpoints/test_organization_member_team_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_team_details.py
@@ -1,373 +1,385 @@
 from __future__ import absolute_import
 
-from sentry.models import Organization, OrganizationAccessRequest, OrganizationMemberTeam
+from exam import fixture
+from sentry.models import (
+    Organization,
+    OrganizationMember,
+    OrganizationAccessRequest,
+    OrganizationMemberTeam,
+)
 from sentry.testutils import APITestCase
 
 
-class CreateOrganizationMemberTeamTest(APITestCase):
+class MemberTeamFixtures(APITestCase):
+    @fixture
+    def org(self):
+        # open membership
+        return self.create_organization(owner=self.user, flags=Organization.flags.allow_joinleave)
+
+    @fixture
+    def team(self):
+        return self.create_team(organization=self.org)
+
+    @fixture
+    def owner(self):
+        return OrganizationMember.objects.get(organization=self.org, user=self.user)
+
+    @fixture
+    def member(self):
+        return self.create_member(organization=self.org, user=self.create_user(), role="member")
+
+    @fixture
+    def admin(self):
+        return self.create_member(organization=self.org, user=self.create_user(), role="admin")
+
+    @fixture
+    def manager(self):
+        return self.create_member(organization=self.org, user=self.create_user(), role="manager")
+
+    @fixture
+    def team_member(self):
+        return self.create_member(
+            organization=self.org, user=self.create_user(), role="member", teams=[self.team]
+        )
+
+    @fixture
+    def team_admin(self):
+        return self.create_member(
+            organization=self.org, user=self.create_user(), role="admin", teams=[self.team]
+        )
+
+    @fixture
+    def team_manager(self):
+        return self.create_member(
+            organization=self.org, user=self.create_user(), role="manager", teams=[self.team]
+        )
+
+    @fixture
+    def team_owner(self):
+        return self.create_member(
+            organization=self.org, user=self.create_user(), role="owner", teams=[self.team]
+        )
+
+
+class CreateOrganizationMemberTeamTest(MemberTeamFixtures):
     endpoint = "sentry-api-0-organization-member-team-details"
     method = "post"
 
-    def test_can_join_as_owner_without_open_membership(self):
-        organization = self.create_organization(name="foo", owner=self.user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        owner = self.create_member(
-            organization=organization, user=self.create_user(), role="owner", teams=[]
-        )
+    def test_manager_can_join_team(self):
+        self.login_as(self.manager.user)
+        resp = self.get_response(self.org.slug, self.manager.id, self.team.slug)
+        assert resp.status_code == 201
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.manager
+        ).exists()
 
+    def test_owner_can_join_team(self):
+        owner = self.create_member(organization=self.org, user=self.create_user(), role="owner")
         self.login_as(owner.user)
-        resp = self.get_response(organization.slug, owner.id, team.slug)
+        resp = self.get_response(self.org.slug, owner.id, self.team.slug)
         assert resp.status_code == 201
 
-    def test_cannot_join_as_member_without_open_membership(self):
-        organization = self.create_organization(name="foo", owner=self.user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
-        )
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=owner
+        ).exists()
 
-        self.login_as(member.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
-        assert resp.status_code == 202
+    def test_team_admin_can_add_members_to_team(self):
+        self.login_as(self.team_admin.user)
 
-        assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
-        ).exists()
-        assert OrganizationAccessRequest.objects.filter(team=team, member=member).exists()
+        # member
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
+        assert resp.status_code == 201
 
-    def test_can_join_as_member_with_open_membership(self):
-        organization = self.create_organization(
-            name="foo", owner=self.user, flags=Organization.flags.allow_joinleave
-        )
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
-        )
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.member
+        ).exists()
 
-        self.login_as(member.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+        # manager
+        resp = self.get_response(self.org.slug, self.manager.id, self.team.slug)
         assert resp.status_code == 201
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=member).exists()
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.manager
+        ).exists()
 
-    def test_member_can_add_member_with_open_membership(self):
-        organization = self.create_organization(
-            name="foo", owner=self.user, flags=Organization.flags.allow_joinleave
-        )
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member"
-        )
-        target_member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
-        )
+    def test_manager_can_add_members_to_team(self):
+        self.login_as(self.manager.user)
 
-        self.login_as(member.user)
-        resp = self.get_response(organization.slug, target_member.id, team.slug)
+        # member
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
         assert resp.status_code == 201
 
         assert OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=target_member
+            team=self.team, organizationmember=self.member
         ).exists()
 
-    def test_owner_can_add_member(self):
-        user = self.create_user()
-        organization = self.create_organization(name="foo", owner=user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
-        )
-
-        self.login_as(user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+        # owner
+        resp = self.get_response(self.org.slug, self.owner.id, self.team.slug)
         assert resp.status_code == 201
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=member).exists()
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.owner.id
+        ).exists()
 
-    def test_owner_can_add_manager(self):
-        user = self.create_user()
-        organization = self.create_organization(name="foo", owner=user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        manager = self.create_member(
-            organization=organization, user=self.create_user(), role="manager", teams=[]
-        )
+    def test_owner_can_add_members_to_team(self):
+        self.login_as(self.owner.user)
 
-        self.login_as(user)
-        resp = self.get_response(organization.slug, manager.id, team.slug)
+        # member
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
         assert resp.status_code == 201
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=manager).exists()
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.member
+        ).exists()
 
-    def test_owner_can_add_other_owner(self):
-        user = self.create_user()
-        organization = self.create_organization(name="foo", owner=user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        owner = self.create_member(
-            organization=organization, user=self.create_user(), role="owner", teams=[]
+        # manager
+        resp = self.get_response(self.org.slug, self.manager.id, self.team.slug)
+        assert resp.status_code == 201
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.manager
+        ).exists()
+
+        # owner
+        target_owner = self.create_member(
+            organization=self.org, user=self.create_user(), role="owner"
         )
+        resp = self.get_response(self.org.slug, target_owner.id, self.team.slug)
+        assert resp.status_code == 201
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=target_owner
+        ).exists()
+
 
-        self.login_as(user)
-        resp = self.get_response(organization.slug, owner.id, team.slug)
+class CreateWithOpenMembershipTest(MemberTeamFixtures):
+    endpoint = "sentry-api-0-organization-member-team-details"
+    method = "post"
+
+    def test_member_can_join_team(self):
+        self.login_as(self.member.user)
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
         assert resp.status_code == 201
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=owner).exists()
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.member
+        ).exists()
+
+    def test_admin_can_join_team(self):
+        self.login_as(self.admin.user)
+        resp = self.get_response(self.org.slug, self.admin.id, self.team.slug)
+        assert resp.status_code == 201
 
-    def test_manager_can_add_member(self):
-        organization = self.create_organization(name="foo", flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        manager = self.create_member(
-            organization=organization, user=self.create_user(), role="manager", teams=[team]
-        )
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.admin
+        ).exists()
+
+    def test_member_can_add_member_to_team(self):
+        target_member = self.create_member(
+            organization=self.org, user=self.create_user(), role="member"
         )
 
-        self.login_as(manager.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+        self.login_as(self.member.user)
+        resp = self.get_response(self.org.slug, target_member.id, self.team.slug)
         assert resp.status_code == 201
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=member).exists()
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=target_member
+        ).exists()
 
-    def test_manager_cannot_add_owner(self):
-        organization = self.create_organization(name="foo", flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        manager = self.create_member(
-            organization=organization, user=self.create_user(), role="manager", teams=[team]
-        )
-        owner = self.create_member(
-            organization=organization, user=self.create_user(), role="owner", teams=[]
-        )
+    def test_admin_can_add_member_to_team(self):
+        self.login_as(self.admin.user)
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
+        assert resp.status_code == 201
 
-        self.login_as(manager.user)
-        resp = self.get_response(organization.slug, owner.id, team.slug)
-        assert resp.status_code == 400
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.member
+        ).exists()
+
+
+class CreateWithClosedMembershipTest(CreateOrganizationMemberTeamTest):
+    @fixture
+    def org(self):
+        # rerun create org member tests with closed membership
+        return self.create_organization(owner=self.user, flags=0)
+
+    def test_member_must_request_access_to_join_team(self):
+        self.login_as(self.member.user)
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
+        assert resp.status_code == 202
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=owner
+            team=self.team, organizationmember=self.member
         ).exists()
 
-    def test_admin_not_in_team_cannot_add_member(self):
-        organization = self.create_organization(name="foo", owner=self.user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        admin = self.create_member(
-            organization=organization, user=self.create_user(), role="admin", teams=[]
-        )
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
-        )
+        # access request created
+        assert OrganizationAccessRequest.objects.filter(
+            team=self.team, member=self.member, requester=None
+        ).exists()
 
-        self.login_as(admin.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
-        assert resp.status_code == 400
+    def test_admin_must_request_access_to_join_team(self):
+        self.login_as(self.admin.user)
+        resp = self.get_response(self.org.slug, self.admin.id, self.team.slug)
+        assert resp.status_code == 202
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+            team=self.team, organizationmember=self.admin
         ).exists()
 
-    def test_admin_in_team_can_add_member(self):
-        organization = self.create_organization(name="foo", owner=self.user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        admin = self.create_member(
-            organization=organization, user=self.create_user(), role="admin", teams=[team]
-        )
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[]
-        )
+        # access request created
+        assert OrganizationAccessRequest.objects.filter(
+            team=self.team, member=self.admin, requester=None
+        ).exists()
 
-        self.login_as(admin.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
-        assert resp.status_code == 201
+    def test_team_member_must_request_access_to_add_member_to_team(self):
+        self.login_as(self.team_member.user)
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
+        assert resp.status_code == 202
+
+        assert not OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.member
+        ).exists()
+
+        # access request created
+        assert OrganizationAccessRequest.objects.filter(
+            team=self.team, member=self.member, requester=self.team_member.user
+        ).exists()
+
+    def test_admin_must_request_access_to_add_member_to_team(self):
+        # admin not in the team
+        self.login_as(self.admin.user)
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
+        assert resp.status_code == 202
+
+        assert not OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.member
+        ).exists()
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=member).exists()
+        # access request created
+        assert OrganizationAccessRequest.objects.filter(
+            team=self.team, member=self.member, requester=self.admin.user
+        ).exists()
 
 
-class DeleteOrganizationMemberTeamTest(APITestCase):
+class DeleteOrganizationMemberTeamTest(MemberTeamFixtures):
     endpoint = "sentry-api-0-organization-member-team-details"
     method = "delete"
 
-    def test_can_leave_as_member(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
-        )
-
-        self.login_as(member.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+    def test_member_can_leave(self):
+        self.login_as(self.team_member.user)
+        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+            team=self.team, organizationmember=self.team_member
         ).exists()
 
-    def test_can_leave_as_non_member(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization,
-            user=self.create_user(is_superuser=False),
-            role="member",
-            teams=[],
-        )
-
-        self.login_as(member.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+    def test_member_can_leave_without_membership(self):
+        self.login_as(self.member.user)
+        resp = self.get_response(self.org.slug, self.member.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+            team=self.team, organizationmember=self.member
         ).exists()
 
     def test_can_leave_as_superuser_without_membership(self):
-        organization = self.create_organization(name="foo", owner=self.user)
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization,
-            user=self.create_user(is_superuser=True),
-            role="member",
-            teams=[],
-        )
+        superuser = self.create_user(is_superuser=True)
+        member = self.create_member(organization=self.org, user=superuser, role="member", teams=[])
 
         self.login_as(member.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+        resp = self.get_response(self.org.slug, member.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+            team=self.team, organizationmember=member
         ).exists()
 
-    def test_owner_can_remove_member(self):
-        user = self.create_user()
-        organization = self.create_organization(name="foo", owner=user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
+    def test_member_cannot_remove_member(self):
+        target_member = self.create_member(
+            organization=self.org, user=self.create_user(), role="member", teams=[self.team]
         )
 
-        self.login_as(user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
-        assert resp.status_code == 200
+        self.login_as(self.team_member.user)
+        resp = self.get_response(self.org.slug, target_member.id, self.team.slug)
+        assert resp.status_code == 400
 
-        assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=target_member
         ).exists()
 
-    def test_owner_can_remove_manager(self):
-        user = self.create_user()
-        organization = self.create_organization(name="foo", owner=user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        manager = self.create_member(
-            organization=organization, user=self.create_user(), role="manager", teams=[team]
-        )
+    def test_admin_cannot_remove_member(self):
+        # admin not in team
+        self.login_as(self.admin.user)
+        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
+        assert resp.status_code == 400
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.team_member
+        ).exists()
+
+    def test_team_admin_can_remove_members(self):
+        self.login_as(self.team_admin.user)
 
-        self.login_as(user)
-        resp = self.get_response(organization.slug, manager.id, team.slug)
+        # member
+        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=manager
+            team=self.team, organizationmember=self.team_member
         ).exists()
 
-    def test_owner_can_remove_other_owner(self):
-        user = self.create_user()
-        organization = self.create_organization(name="foo", owner=user, flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        owner = self.create_member(
-            organization=organization, user=self.create_user(), role="owner", teams=[team]
-        )
-
-        self.login_as(user)
-        resp = self.get_response(organization.slug, owner.id, team.slug)
+        # manager
+        resp = self.get_response(self.org.slug, self.team_manager.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=owner
+            team=self.team, organizationmember=self.team_manager
         ).exists()
 
-    def test_manager_can_remove_member(self):
-        organization = self.create_organization(name="foo", flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        manager = self.create_member(
-            organization=organization, user=self.create_user(), role="manager", teams=[team]
-        )
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
-        )
+    def test_manager_can_remove_members(self):
+        self.login_as(self.team_manager.user)
 
-        self.login_as(manager.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+        # member
+        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+            team=self.team, organizationmember=self.team_member
         ).exists()
 
-    def test_manager_cannot_remove_owner(self):
-        organization = self.create_organization(name="foo", flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        manager = self.create_member(
-            organization=organization, user=self.create_user(), role="manager", teams=[team]
-        )
-        owner = self.create_member(
-            organization=organization, user=self.create_user(), role="owner", teams=[team]
-        )
-
-        self.login_as(manager.user)
-        resp = self.get_response(organization.slug, owner.id, team.slug)
-        assert resp.status_code == 400
+        # owner
+        resp = self.get_response(self.org.slug, self.team_owner.id, self.team.slug)
+        assert resp.status_code == 200
 
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=owner).exists()
+        assert not OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.team_owner
+        ).exists()
 
-    def test_admin_in_team_can_remove_member(self):
-        organization = self.create_organization(name="foo", flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        admin = self.create_member(
-            organization=organization, user=self.create_user(), role="admin", teams=[team]
-        )
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
-        )
+    def test_owner_can_remove_members(self):
+        self.login_as(self.owner.user)
 
-        self.login_as(admin.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
+        # member
+        resp = self.get_response(self.org.slug, self.team_member.id, self.team.slug)
         assert resp.status_code == 200
 
         assert not OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=member
+            team=self.team, organizationmember=self.team_member
         ).exists()
 
-    def test_admin_not_in_team_cannot_remove_member(self):
-        organization = self.create_organization(name="foo", flags=0)
-        team = self.create_team(name="foo", organization=organization)
-        admin = self.create_member(
-            organization=organization, user=self.create_user(), role="admin", teams=[]
-        )
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
-        )
-
-        self.login_as(admin.user)
-        resp = self.get_response(organization.slug, member.id, team.slug)
-        assert resp.status_code == 400
-
-        assert OrganizationMemberTeam.objects.filter(team=team, organizationmember=member).exists()
+        # manager
+        resp = self.get_response(self.org.slug, self.team_manager.id, self.team.slug)
+        assert resp.status_code == 200
 
-    def test_member_cannot_remove_member(self):
-        organization = self.create_organization(
-            name="foo", flags=Organization.flags.allow_joinleave
-        )
-        team = self.create_team(name="foo", organization=organization)
-        member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
-        )
-        target_member = self.create_member(
-            organization=organization, user=self.create_user(), role="member", teams=[team]
-        )
+        assert not OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.team_manager
+        ).exists()
 
-        self.login_as(member.user)
-        resp = self.get_response(organization.slug, target_member.id, team.slug)
-        assert resp.status_code == 400
+        # owner
+        resp = self.get_response(self.org.slug, self.team_owner.id, self.team.slug)
+        assert resp.status_code == 200
 
-        assert OrganizationMemberTeam.objects.filter(
-            team=team, organizationmember=target_member
+        assert not OrganizationMemberTeam.objects.filter(
+            team=self.team, organizationmember=self.team_owner
         ).exists()
