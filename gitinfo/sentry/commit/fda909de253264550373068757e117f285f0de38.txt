commit fda909de253264550373068757e117f285f0de38
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Thu Mar 19 16:34:15 2020 -0700

    feat(guides): Add experiment logging (#17773)

diff --git a/src/sentry/static/sentry/app/actionCreators/guides.tsx b/src/sentry/static/sentry/app/actionCreators/guides.tsx
index aa0961a81c..f7f984c8d4 100644
--- a/src/sentry/static/sentry/app/actionCreators/guides.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/guides.tsx
@@ -1,4 +1,5 @@
 import {Client} from 'app/api';
+import ConfigStore from 'app/stores/configStore';
 import GuideActions from 'app/actions/guideActions';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 
@@ -42,11 +43,18 @@ export function recordFinish(guide: string, orgId: string) {
       status: 'viewed',
     },
   });
+
+  const user = ConfigStore.get('user');
+  if (!user) {
+    return;
+  }
+
   const data = {
     eventKey: 'assistant.guide_finished',
     eventName: 'Assistant Guide Finished',
     guide,
     organization_id: orgId,
+    user_id: parseInt(user.id, 10),
   };
   trackAnalyticsEvent(data);
 }
@@ -59,12 +67,19 @@ export function recordDismiss(guide: string, step: number, orgId: string) {
       status: 'dismissed',
     },
   });
+
+  const user = ConfigStore.get('user');
+  if (!user) {
+    return;
+  }
+
   const data = {
     eventKey: 'assistant.guide_dismissed',
     eventName: 'Assistant Guide Dismissed',
     guide,
     step,
     organization_id: orgId,
+    user_id: parseInt(user.id, 10),
   };
   trackAnalyticsEvent(data);
 }
diff --git a/src/sentry/static/sentry/app/stores/guideStore.tsx b/src/sentry/static/sentry/app/stores/guideStore.tsx
index 7990e35af3..798d7289b1 100644
--- a/src/sentry/static/sentry/app/stores/guideStore.tsx
+++ b/src/sentry/static/sentry/app/stores/guideStore.tsx
@@ -3,7 +3,7 @@ import Reflux from 'reflux';
 
 import {Client} from 'app/api';
 import {Guide, GuidesServerData, GuidesContent} from 'app/components/assistant/types';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {logExperiment, trackAnalyticsEvent} from 'app/utils/analytics';
 import ConfigStore from 'app/stores/configStore';
 import getGuidesContent from 'app/components/assistant/getGuidesContent';
 import GuideActions from 'app/actions/guideActions';
@@ -137,13 +137,26 @@ const guideStoreConfig: Reflux.StoreDefinition & GuideStoreInterface = {
   },
 
   recordCue(guide) {
+    const user = ConfigStore.get('user');
+    if (!user) {
+      return;
+    }
+
     const data = {
       guide,
       eventKey: 'assistant.guide_cued',
       eventName: 'Assistant Guide Cued',
       organization_id: this.state.orgId,
+      user_id: user.id,
     };
     trackAnalyticsEvent(data);
+
+    logExperiment({
+      key: 'AssistantGuideExperiment',
+      unitName: 'user_id',
+      unitId: parseInt(user.id, 10),
+      param: 'variant',
+    });
   },
 
   updatePrevGuide(nextGuide) {
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index 416a07b54b..ecf4a40d18 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -1,15 +1,22 @@
-import GuideStore from 'app/stores/guideStore';
+import {logExperiment, trackAnalyticsEvent} from 'app/utils/analytics';
 import ConfigStore from 'app/stores/configStore';
+import GuideStore from 'app/stores/guideStore';
+
+jest.mock('app/utils/analytics');
 
 describe('GuideStore', function() {
   let data;
+  const user = {
+    id: '5',
+    isSuperuser: false,
+    dateJoined: new Date(2020, 0, 1),
+  };
 
   beforeEach(function() {
+    trackAnalyticsEvent.mockClear();
+    logExperiment.mockClear();
     ConfigStore.config = {
-      user: {
-        isSuperuser: false,
-        dateJoined: new Date(2020, 0, 1),
-      },
+      user,
     };
     GuideStore.init();
     data = [
@@ -63,6 +70,15 @@ describe('GuideStore', function() {
     const spy = jest.spyOn(GuideStore, 'recordCue');
     GuideStore.onFetchSucceeded(data);
     expect(spy).toHaveBeenCalledWith('issue');
+
+    expect(trackAnalyticsEvent).toHaveBeenCalledWith({
+      guide: 'issue',
+      eventKey: 'assistant.guide_cued',
+      eventName: 'Assistant Guide Cued',
+      organization_id: null,
+      user_id: user.id,
+    });
+
     expect(spy).toHaveBeenCalledTimes(1);
 
     GuideStore.updateCurrentGuide();
@@ -71,6 +87,13 @@ describe('GuideStore', function() {
     GuideStore.onNextStep();
     expect(spy).toHaveBeenCalledTimes(1);
     spy.mockRestore();
+
+    expect(logExperiment).toHaveBeenCalledWith({
+      key: 'AssistantGuideExperiment',
+      unitName: 'user_id',
+      unitId: parseInt(user.id, 10),
+      param: 'variant',
+    });
   });
 
   describe('discover sidebar guide', function() {
