commit 21a7b74f4abd0497b411be01550a8ae60c32a2a4
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 6 19:21:46 2012 -0800

    Added date limiting to group feed (fixes GH-342)

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 516338784f..67f7416d72 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -137,6 +137,9 @@ USE_SEARCH = True
 # Default sort option for the group stream
 DEFAULT_SORT_OPTION = 'date'
 
+# Default date cutoff option for the group stream
+DEFAULT_DATE_OPTION = '3d'
+
 # Default sort option for the search results
 SEARCH_DEFAULT_SORT_OPTION = 'date'
 
diff --git a/sentry/constants.py b/sentry/constants.py
new file mode 100644
index 0000000000..36271319fe
--- /dev/null
+++ b/sentry/constants.py
@@ -0,0 +1,49 @@
+from datetime import timedelta
+from django.utils.datastructures import SortedDict
+from django.utils.translation import ugettext_lazy as _
+
+SORT_OPTIONS = SortedDict((
+    ('priority', _('Priority')),
+    ('date', _('Last Seen')),
+    ('new', _('First Seen')),
+    ('freq', _('Frequency')),
+    ('tottime', _('Total Time Spent')),
+    ('avgtime', _('Average Time Spent')),
+    ('accel_15', _('Trending: %(minutes)d minutes' % {'minutes': 15})),
+    ('accel_60', _('Trending: %(minutes)d minutes' % {'minutes': 60})),
+))
+SORT_CLAUSES = {
+    'date': 'EXTRACT(EPOCH FROM last_seen)',
+    'new': 'EXTRACT(EPOCH FROM first_seen)',
+    'freq': 'times_seen',
+    'tottime': 'time_spent_total',
+    'avgtime': '(time_spent_total / time_spent_count)',
+}
+SQLITE_SORT_CLAUSES = SORT_CLAUSES.copy()
+SQLITE_SORT_CLAUSES.update({
+    'date': 'last_seen',
+    'new': 'first_seen',
+})
+MYSQL_SORT_CLAUSES = SORT_CLAUSES.copy()
+MYSQL_SORT_CLAUSES.update({
+    'date': 'UNIX_TIMESTAMP(last_seen)',
+    'new': 'UNIX_TIMESTAMP(first_seen)',
+})
+SEARCH_SORT_OPTIONS = SortedDict((
+    ('score', _('Score')),
+    ('date', _('Last Seen')),
+    ('new', _('First Seen')),
+))
+DATE_OPTIONS = SortedDict((
+    ('', _('All time')),
+    ('30d', _('30 days')),
+    ('7d', _('7 days')),
+    ('3d', _('3 days')),
+    ('1d', _('24 hours')),
+))
+DATE_VALUES = {
+    '30d': timedelta(days=30),
+    '7d': timedelta(days=7),
+    '3d': timedelta(days=3),
+    '1d': timedelta(days=1),
+}
diff --git a/sentry/templates/sentry/groups/group_list.html b/sentry/templates/sentry/groups/group_list.html
index 19b6d4723d..5127201bbe 100644
--- a/sentry/templates/sentry/groups/group_list.html
+++ b/sentry/templates/sentry/groups/group_list.html
@@ -52,6 +52,7 @@
 {% block main %}
     {% paginator event_list from request as event_list per_page MESSAGES_PER_PAGE %}
     {% querystring from request without sort as sort_querystring %}
+    {% querystring from request without since as since_querystring %}
 
     <div class="btn-toolbar">
         <div class="btn-group">
@@ -63,20 +64,28 @@
         <div class="btn-group">
             <a href="#" class="btn dropdown-toggle" data-toggle="dropdown">{% blocktrans with sort_label as label %}Sort by: {{ label }}{% endblocktrans %} <span class="caret"></span></a>
             <ul class="dropdown-menu">
-                <li{% ifequal sort 'priority' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=priority">{% trans "Priority" %}</a></li>
-                <li{% ifequal sort 'date' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=date">{% trans "Last Seen" %}</a></li>
-                <li{% ifequal sort 'new' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=new">{% trans "First Seen" %}</a></li>
-                <li{% ifequal sort 'freq' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=freq">{% trans "Frequency" %}</a></li>
+                <li{% ifequal sort 'priority' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=priority">{{ SORT_OPTIONS.priority }}</a></li>
+                <li{% ifequal sort 'date' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=date">{{ SORT_OPTIONS.date }}</a></li>
+                <li{% ifequal sort 'new' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=new">{{ SORT_OPTIONS.new }}</a></li>
+                <li{% ifequal sort 'freq' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=freq">{{ SORT_OPTIONS.freq }}</a></li>
                 <li class="divider"></li>
-                <li{% ifequal sort 'tottime' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=tottime">{% trans "Total Time Spent" %}</a></li>
-                <li{% ifequal sort 'avgtime' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=avgtime">{% trans "Average Time Spent" %}</a></li>
+                <li{% ifequal sort 'tottime' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=tottime">{{ SORT_OPTIONS.tottime }}</a></li>
+                <li{% ifequal sort 'avgtime' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=avgtime">{{ SORT_OPTIONS.avgtime }}</a></li>
                 {% if HAS_TRENDING %}
                     <li class="divider"></li>
-                    <li{% ifequal sort 'accel_15' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=accel_15">{% trans "Trending: 15 minutes" %}</a></li>
-                    <li{% ifequal sort 'accel_60' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=accel_60">{% trans "Trending: 60 minutes" %}</a></li>
+                    <li{% ifequal sort 'accel_15' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=accel_15">{{ SORT_OPTIONS.accel_15 }}</a></li>
+                    <li{% ifequal sort 'accel_60' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=accel_60">{{ SORT_OPTIONS.accel_60 }}</a></li>
                 {% endif %}
             </ul>
         </div>
+        <div class="btn-group">
+            <a href="#" class="btn dropdown-toggle" data-toggle="dropdown">{% blocktrans with since_label as label %}Since: {{ label }}{% endblocktrans %} <span class="caret"></span></a>
+            <ul class="dropdown-menu">
+                {% for key, value in DATE_OPTIONS.iteritems %}
+                    <li{% ifequal since key %} class="active"{% endifequal %}><a href="?{{ since_querystring }}&amp;since={{ key }}">{{ value }}</a></li>
+                {% endfor %}
+            </ul>
+        </div>
         <div class="btn-group pull-right">
             <a class="btn prev{% if not event_list.paginator.has_previous %} disabled{% endif %}" href="?{{ event_list.query_string|escape }}&amp;p={{ event_list.paginator.previous_page }}"><span>{% trans "Previous" %}</span></a>
             <a class="btn next{% if not event_list.paginator.has_next %} disabled{% endif %}" href="?{{ event_list.query_string|escape }}&amp;p={{ event_list.paginator.next_page }}"><span>{% trans "Next" %}</span></a>
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index cd7edf4b00..fde4c5a2d5 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -16,9 +16,10 @@ from django.http import HttpResponse, \
 from django.shortcuts import get_object_or_404
 from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
+from sentry.constants import SORT_OPTIONS, SEARCH_SORT_OPTIONS, DATE_OPTIONS, \
+  SORT_CLAUSES, MYSQL_SORT_CLAUSES, SQLITE_SORT_CLAUSES, DATE_VALUES
 from sentry.filters import Filter
 from sentry.models import Group, Event, View, SearchDocument
 from sentry.plugins import plugins
@@ -30,40 +31,6 @@ uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 event_re = re.compile(r'^(?P<event_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
 
 
-SORT_OPTIONS = (
-    'priority',
-    'date',
-    'new',
-    'freq',
-    'tottime',
-    'avgtime',
-    'accel_15',
-    'accel_60',
-)
-SORT_CLAUSES = {
-    'date': 'EXTRACT(EPOCH FROM last_seen)',
-    'new': 'EXTRACT(EPOCH FROM first_seen)',
-    'freq': 'times_seen',
-    'tottime': 'time_spent_total',
-    'avgtime': '(time_spent_total / time_spent_count)',
-}
-SQLITE_SORT_CLAUSES = SORT_CLAUSES.copy()
-SQLITE_SORT_CLAUSES.update({
-    'date': 'last_seen',
-    'new': 'first_seen',
-})
-MYSQL_SORT_CLAUSES = SORT_CLAUSES.copy()
-MYSQL_SORT_CLAUSES.update({
-    'date': 'UNIX_TIMESTAMP(last_seen)',
-    'new': 'UNIX_TIMESTAMP(first_seen)',
-})
-SEARCH_SORT_OPTIONS = (
-    'score',
-    'date',
-    'new',
-)
-
-
 def _get_rendered_interfaces(event):
     interface_list = []
     for interface in event.interfaces.itervalues():
@@ -79,22 +46,6 @@ def _get_rendered_interfaces(event):
     return interface_list
 
 
-def _get_sort_label(sort):
-    if sort.startswith('accel_'):
-        n = sort.split('accel_', 1)[-1]
-        return _('Trending: %(minutes)d minutes' % {'minutes': int(n)})
-
-    return {
-        'date': _('Last Seen'),
-        'new': _('First Seen'),
-        'freq': _('Frequency'),
-        'tottime': _('Total Time Spent'),
-        'avgtime': _('Average Time Spent'),
-        'priority': _('Priority'),
-        'score': _('Score'),
-    }[sort]
-
-
 def _get_group_list(request, project, view=None):
     filters = []
     for cls in Filter.objects.filter(Group):
@@ -121,6 +72,13 @@ def _get_group_list(request, project, view=None):
     if sort not in SORT_OPTIONS:
         sort = settings.DEFAULT_SORT_OPTION
 
+    if sort.startswith('accel_') and not has_trending():
+        sort = settings.DEFAULT_SORT_OPTION
+    else:
+        since = request.GET.get('since', '')
+        if since not in DATE_OPTIONS:
+            since = settings.DEFAULT_DATE_OPTION
+
     engine = get_db_engine('default')
     if engine.startswith('sqlite'):
         sort_clause = SQLITE_SORT_CLAUSES.get(sort)
@@ -133,9 +91,12 @@ def _get_group_list(request, project, view=None):
         event_list = event_list.filter(time_spent_count__gt=0)
     elif sort == 'avgtime':
         event_list = event_list.filter(time_spent_count__gt=0)
-    elif has_trending() and sort and sort.startswith('accel_'):
+    elif sort.startswith('accel_'):
         event_list = Group.objects.get_accelerated(event_list, minutes=int(sort.split('_', 1)[1]))
 
+    if since in DATE_VALUES:
+        event_list = event_list.filter(last_seen__gte=datetime.datetime.now() - DATE_VALUES[since])
+
     if sort_clause:
         event_list = event_list.extra(
             select={'sort_value': sort_clause},
@@ -161,7 +122,7 @@ def search(request, project):
     sort = request.GET.get('sort')
     if sort not in SEARCH_SORT_OPTIONS:
         sort = settings.SEARCH_DEFAULT_SORT_OPTION
-    sort_label = _get_sort_label(sort)
+    sort_label = SEARCH_SORT_OPTIONS[sort]
 
     result = event_re.match(query)
     if result:
@@ -237,7 +198,12 @@ def group_list(request, project, view_id=None):
     sort = request.GET.get('sort')
     if sort not in SORT_OPTIONS:
         sort = settings.DEFAULT_SORT_OPTION
-    sort_label = _get_sort_label(sort)
+    sort_label = SORT_OPTIONS[sort]
+
+    since = request.GET.get('since')
+    if since not in DATE_OPTIONS:
+        since = settings.DEFAULT_DATE_OPTION
+    since_label = DATE_OPTIONS[since]
 
     today = datetime.datetime.utcnow()
 
@@ -250,8 +216,12 @@ def group_list(request, project, view_id=None):
         'today': today,
         'sort': sort,
         'sort_label': sort_label,
+        'since': since,
+        'since_label': since_label,
         'filters': filters,
         'view': view,
+        'SORT_OPTIONS': SORT_OPTIONS,
+        'DATE_OPTIONS': DATE_OPTIONS,
         'HAS_TRENDING': has_trending(),
         'PAGE': 'dashboard',
     }, request)
