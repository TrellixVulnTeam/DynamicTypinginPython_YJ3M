commit 8a7f906b6ccbfd258f41019ce5ff2a4a5954c619
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Oct 11 16:07:00 2018 -0700

    ref: Support (but don't require) using Snuba in `ProjectEventsEndpoint` (#10097)

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 320b48df2d..77bc60f66c 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -91,6 +91,10 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
 
             events = events.filter(q)
 
+        # TODO currently snuba can be used to get this filter of event_ids matching
+        # the search tags, which is then used to further filter a postgres QuerySet
+        # Ideally we would just use snuba to completely replace the fetching of the
+        # events.
         if tags:
             event_filter = tagstore.get_group_event_filter(
                 group.project_id,
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 715d70ce32..3322926f4b 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -3,12 +3,9 @@ from __future__ import absolute_import
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry import quotas
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.api.paginator import DateTimePaginator
-from sentry.models import Event
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -23,21 +20,10 @@ def list_project_available_samples_scenario(runner):
 class ProjectEventsEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
-    @attach_scenarios([list_project_available_samples_scenario])
-    def get(self, request, project):
-        """
-        List a Project's Events
-        ```````````````````````
-
-        Return a list of events bound to a project.
-
-        Note: This endpoint is experimental and may be removed without notice.
-
-        :pparam string organization_slug: the slug of the organization the
-                                          groups belong to.
-        :pparam string project_slug: the slug of the project the groups
-                                     belong to.
-        """
+    def __search_events_legacy(self, request, project):
+        from sentry import quotas
+        from sentry.api.paginator import DateTimePaginator
+        from sentry.models import Event
 
         events = Event.objects.filter(
             project_id=project.id,
@@ -63,3 +49,52 @@ class ProjectEventsEndpoint(ProjectEndpoint):
             on_results=lambda x: serialize(x, request.user),
             paginator_cls=DateTimePaginator,
         )
+
+    def __search_events_snuba(self, request, project):
+        from functools32 import partial
+        from sentry.api.paginator import GenericOffsetPaginator
+        from sentry.api.serializers.models.event import SnubaEvent
+        from sentry.utils.snuba import raw_query
+
+        query = request.GET.get('query')
+        conditions = []
+        if query:
+            conditions.append(['message', 'LIKE', '%{}%'.format(query)])
+
+        data_fn = partial(
+            # extract 'data' from raw_query result
+            lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
+            start=timezone.now() - timedelta(days=90),
+            end=timezone.now(),
+            conditions=conditions,
+            filter_keys={'project_id': [project.id]},
+            selected_columns=SnubaEvent.selected_columns
+        )
+
+        return self.paginate(
+            request=request,
+            on_results=lambda results: serialize(
+                [SnubaEvent(row) for row in results], request.user),
+            paginator=GenericOffsetPaginator(data_fn=data_fn)
+        )
+
+    @attach_scenarios([list_project_available_samples_scenario])
+    def get(self, request, project):
+        """
+        List a Project's Events
+        ```````````````````````
+
+        Return a list of events bound to a project.
+
+        Note: This endpoint is experimental and may be removed without notice.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          groups belong to.
+        :pparam string project_slug: the slug of the project the groups
+                                     belong to.
+        """
+        backend = request.COOKIES.get('eventstream', 'legacy')
+        return {
+            'legacy': self.__search_events_legacy,
+            'snuba': self.__search_events_snuba,
+        }[backend](request, project)
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 5df8357546..26dd046545 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -49,9 +49,9 @@ class SnubaTagStorage(TagStorage):
     def get_time_range(self, days=90):
         """
         Returns the default (start, end) time range for querrying snuba.
+        The snuba util may further reduce this range based on the project
+        retention, and first/last seen dates of the groups being queried.
         """
-        # TODO this should use the per-project retention figure to limit
-        # the query to looking at only the retention window for the project.
         end = timezone.now()
         return (end - timedelta(days=days), end)
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index ae44ee5f31..f1980e34f6 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -843,15 +843,16 @@ class SnubaTestCase(TestCase):
         if not data.get('received'):
             data['received'] = calendar.timegm(event.datetime.timetuple())
 
-        environment = Environment.get_or_create(
-            event.project,
-            tags['environment'],
-        )
+        if 'environment' in tags:
+            environment = Environment.get_or_create(
+                event.project,
+                tags['environment'],
+            )
 
-        GroupEnvironment.objects.get_or_create(
-            environment_id=environment.id,
-            group_id=event.group_id,
-        )
+            GroupEnvironment.objects.get_or_create(
+                environment_id=environment.id,
+                group_id=event.group_id,
+            )
 
         hashes = get_hashes_from_fingerprint(
             event,
diff --git a/tests/snuba/api/endpoints/test_project_events.py b/tests/snuba/api/endpoints/test_project_events.py
new file mode 100644
index 0000000000..1c33b94038
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_project_events.py
@@ -0,0 +1,89 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase, SnubaTestCase
+
+
+class ProjectEventsTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(ProjectEventsTest, self).setUp()
+        self.min_ago = timezone.now() - timedelta(minutes=1)
+        self.client.cookies['eventstream'] = 'snuba'
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event('b' * 32, group=group, datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-project-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert sorted(map(lambda x: x['eventID'], response.data)) == sorted(
+            [
+                event_1.event_id,
+                event_2.event_id,
+            ]
+        )
+
+    def test_message_search(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
+        event_2 = self.create_event(
+            'y' * 32,
+            group=group,
+            message="delet the data",
+            datetime=self.min_ago)
+
+        url = reverse(
+            'sentry-api-0-project-events',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+            }
+        )
+        response = self.client.get(url, {'query': 'delet'}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['eventID'] == event_2.event_id
+        assert response.data[0]['message'] == 'delet the data'
+
+    def test_filters_based_on_retention(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        group = self.create_group(project=project)
+        two_days_ago = timezone.now() - timedelta(days=2)
+        self.create_event('c' * 32, group=group, datetime=two_days_ago)
+        event_2 = self.create_event('d' * 32, group=group, datetime=self.min_ago)
+
+        with self.options({'system.event-retention-days': 1}):
+            url = reverse(
+                'sentry-api-0-project-events',
+                kwargs={
+                    'organization_slug': project.organization.slug,
+                    'project_slug': project.slug,
+                }
+            )
+            response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['eventID'] == event_2.event_id
