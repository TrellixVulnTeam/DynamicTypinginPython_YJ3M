commit 5398254f737023359eb0b038f4a86a04ec02d7f7
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 21 01:51:04 2011 -0700

    Initial work on cleaning up interfaces and handling new api

diff --git a/interfaces.py b/interfaces.py
new file mode 100644
index 0000000000..16f3626cce
--- /dev/null
+++ b/interfaces.py
@@ -0,0 +1,218 @@
+"""
+sentry.interfaces
+~~~~~~~~~~~~~~~~~
+
+Interfaces provide an abstraction for how structured data should be
+validated and rendered.
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+import urlparse
+
+from flask import render_template
+
+# unserialization concept is based on pickle
+class _EmptyClass(object):
+    pass
+
+def unserialize(klass, data):
+    value = _EmptyClass()
+    value.__class__ = klass
+    value.__setstate__(data)
+    return value
+
+class Interface(object):
+    """
+    An interface is a structured represntation of data, which may
+    render differently than the default ``extra`` metadata in an event.
+    """
+
+    def __init__(self, **kwargs):
+        self.attrs = kwargs.keys()
+        self.__dict__.update(kwargs)
+
+    def __setstate__(self, data):
+        self.__dict__.update(self.unserialize(data))
+
+    def __getstate__(self):
+        return self.serialize()
+
+    def unserialize(self, data):
+        return data
+
+    def serialize(self):
+        return dict((k, self.__dict__[k]) for k in self.attrs)
+
+    def to_html(self, event):
+        return ''
+
+class Message(Interface):
+    def __init__(self, message, params):
+        self.message = message
+        self.params = params
+
+    def serialize(self):
+        return {
+            'message': self.message,
+            'params': self.params,
+        }
+
+class Query(Interface):
+    def __init__(self, query, engine):
+        self.query = query
+        self.engine = engine
+
+    def serialize(self):
+        return {
+            'query': self.query,
+            'engine': self.engine,
+        }
+
+class Stacktrace(Interface):
+    """
+    {
+        frames: {
+            filename: '/real/file/name.py',
+            function: 'myfunction',
+            vars: {
+                key: value
+            },
+            pre_context: [
+                'line1',
+                'line2'
+            ],
+            context_line: 'line3',
+            lineno: 7,
+            post_context: [
+                'line4',
+                'line5'
+            ],
+        }
+    }
+    """
+    def __init__(self, frames):
+        self.frames = frames
+
+    def serialize(self):
+        return {
+            'frames': self.frames,
+        }
+
+    def to_html(self, event):
+        return render_template('sentry/partial/interfaces/stacktrace.html', **{
+            'frames': self.frames,
+        })
+
+class Exception(Interface):
+    def __init__(self, type, value):
+        self.type = type
+        self.value = value
+
+    def serialize(self):
+        return {
+            'type': self.type,
+            'value': self.value,
+        }
+
+    def to_html(self, event):
+        return render_template('sentry/partial/interfaces/exception.html', **{
+            'exception_value': self.value,
+            'exception_type': self.type,
+        })
+
+class Http(Interface):
+    # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
+    METHODS = ('GET', 'POST', 'PUT', 'OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'CONNECT')
+
+    def __init__(self, url, method, data=None, query_string=None, **kwargs):
+        if data is None:
+            data = {}
+
+        method = method.upper()
+
+        assert method in self.METHODS
+
+        urlparts = urlparse.urlsplit(url)
+
+        if not query_string:
+            # define querystring from url
+            query_string = urlparts.query
+
+        elif query_string.startswith('?'):
+            # remove '?' prefix
+            query_string = query_string[1:]
+
+        self.url = '%s://%s%s' % (urlparts.scheme, urlparts.netloc, urlparts.path)
+        self.method = method
+        self.data = data
+        self.query_string = query_string
+
+    def serialize(self):
+        return {
+            'url': self.url,
+            'method': self.method,
+            'data': self.data,
+            'query_string': self.query_string,
+        }
+
+    def to_html(self, event):
+        return render_template('sentry/partial/interfaces/http.html', **{
+            'full_url': '?'.join(filter(None, [self.url, self.query_string])),
+            'url': self.url,
+            'method': self.method,
+            'data': self.data,
+            'query_string': self.query_string,
+        })
+
+class Template(Interface):
+    """
+    {
+        filename: '/real/file/name.html',
+        pre_context: [
+            'line1',
+            'line2'
+        ],
+        context_line: 'line3',
+        lineno: 7,
+        post_context: [
+            'line4',
+            'line5'
+        ],
+    }
+    """
+    def __init__(self, filename, context_line, lineno, pre_context=None, post_context=None):
+        self.filename = filename
+        self.context_line = context_line
+        self.lineno = lineno
+        self.pre_context = pre_context
+        self.post_context = post_context
+
+    def serialize(self):
+        return {
+            'filename': self.filename,
+            'context_line': self.context_line,
+            'lineno': self.lineno,
+            'pre_context': self.pre_context,
+            'post_context': self.post_context,
+        }
+
+    def to_html(self, event):
+        return render_template('sentry/partial/interfaces/template.html', **{
+            'filename': self.filename,
+            'context_line': self.context_line,
+            'lineno': self.lineno,
+            'pre_context': self.pre_context,
+            'post_context': self.post_context,
+        })
+
+class User(Interface):
+    """
+    {
+        is_authenticated: true,
+        id: 'unique_id',
+        username: 'foo',
+        email: 'foo@example.com'
+    }
+    """
\ No newline at end of file
diff --git a/sentry/models.py b/sentry/models.py
index 45cf582ecd..d916c1bd95 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -8,7 +8,6 @@ sentry.models
 
 from __future__ import absolute_import
 
-import base64
 import logging
 import math
 import time
@@ -28,15 +27,10 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.utils import cached_property, construct_checksum, get_filters, \
                          MockDjangoRequest
-from sentry.utils.compat import pickle
+from sentry.utils.models import Model, GzippedDictField
 from sentry.utils.manager import GroupManager
 from sentry.templatetags.sentry_helpers import truncatechars
 
-try:
-    from idmapper.models import SharedMemoryModel as Model
-except ImportError:
-    Model = models.Model
-
 __all__ = ('Event', 'Group')
 
 STATUS_LEVELS = (
@@ -53,40 +47,6 @@ FILTER_KEYS = (
 
 logger = logging.getLogger('sentry.errors')
 
-class GzippedDictField(models.TextField):
-    """
-    Slightly different from a JSONField in the sense that the default
-    value is a dictionary.
-    """
-    __metaclass__ = models.SubfieldBase
-
-    def to_python(self, value):
-        if isinstance(value, basestring) and value:
-            try:
-                value = pickle.loads(base64.b64decode(value).decode('zlib'))
-            except Exception, e:
-                logger.exception(e)
-                return {}
-        elif not value:
-            return {}
-        return value
-
-    def get_prep_value(self, value):
-        if value is None:
-            return
-        return base64.b64encode(pickle.dumps(value).encode('zlib'))
-
-    def value_to_string(self, obj):
-        value = self._get_val_from_obj(obj)
-        return self.get_db_prep_value(value)
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.TextField"
-        args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
-
 class Project(Model):
     name            = models.CharField(max_length=200)
     owner           = models.ForeignKey(User, related_name="owned_project_set", null=True)
@@ -282,7 +242,7 @@ class Group(MessageBase):
         return module, self.data['version']
 
 class Event(MessageBase):
-    message_id      = models.CharField(max_length=32, null=True, unique=True)
+    event_id        = models.CharField(max_length=32, null=True, unique=True, db_column="message_id")
     group           = models.ForeignKey(Group, blank=True, null=True, related_name="message_set")
     datetime        = models.DateTimeField(default=datetime.now, db_index=True)
     url             = models.URLField(verify_exists=False, null=True, blank=True)
diff --git a/sentry/templates/sentry/partial/interfaces/exception.html b/sentry/templates/sentry/partial/interfaces/exception.html
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/templates/sentry/partial/interfaces/http.html b/sentry/templates/sentry/partial/interfaces/http.html
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/templates/sentry/partial/interfaces/stacktrace.html b/sentry/templates/sentry/partial/interfaces/stacktrace.html
new file mode 100644
index 0000000000..c25f5dd74b
--- /dev/null
+++ b/sentry/templates/sentry/partial/interfaces/stacktrace.html
@@ -0,0 +1,48 @@
+<div id="traceback">
+  <h2>Traceback</h2>
+  {% autoescape off %}
+  <div id="browserTraceback">
+    <ul class="traceback">
+      {% for frame in frames %}
+        <li class="frame">
+          <code>{{ frame.filename|escape }}</code> in <code>{{ frame.function|escape }}</code>
+
+          {% if frame.context_line %}
+            <div class="context" id="c{{ frame.id }}">
+              {% if frame.pre_context %}
+                <ol start="{{ frame.pre_context_lineno }}" class="pre-context" id="pre{{ frame.id }}">{% for line in frame.pre_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
+              {% endif %}
+              <ol start="{{ frame.lineno }}" class="context-line"><li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ frame.context_line|escape }} <span>...</span></li></ol>
+              {% if frame.post_context %}
+                <ol start='{{ frame.lineno + 1 }}' class="post-context" id="post{{ frame.id }}">{% for line in frame.post_context %}<li onclick="toggle('pre{{ frame.id }}', 'post{{ frame.id }}')">{{ line|escape }}</li>{% endfor %}</ol>
+              {% endif %}
+            </div>
+          {% endif %}
+
+          {% if frame.vars %}
+            <div class="commands">
+                <a href="#" onclick="return varToggle(this, '{{ frame.id }}')"><span>&#x25b6;</span> Local vars</a>
+            </div>
+            <table class="vars" id="v{{ frame.id }}">
+              <thead>
+                <tr>
+                  <th>Variable</th>
+                  <th>Value</th>
+                </tr>
+              </thead>
+              <tbody>
+              {% for var in frame.vars|dictsort(0) %}
+                <tr>
+                  <td>{{ var.0|escape }}</td>
+                  <td class="code"><pre>{{ var.1|pprint|escape }}</pre></td>
+                </tr>
+              {% endfor %}
+              </tbody>
+            </table>
+          {% endif %}
+        </li>
+      {% endfor %}
+    </ul>
+  </div>
+  {% endautoescape %}
+</div>
\ No newline at end of file
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 5099bdc78f..01d1359fdc 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -11,7 +11,7 @@ import logging
 import warnings
 
 from django.db import models
-from django.db.models import signals, Sum, F
+from django.db.models import Sum, F
 
 from sentry.conf import settings
 from sentry.signals import regression_signal
@@ -73,25 +73,56 @@ def time_limit(silence): # ~ 3600 per hour
 class GroupManager(models.Manager):
     use_for_related_fields = True
 
+    def convert_legacy_kwargs(self, kwargs):
+        date = kwargs.pop('timestamp', None)
+
+        data = kwargs.pop('data', {}) or {}
+        sentry = data.get('__sentry__', {})
+        message_id = kwargs.pop('message_id', None)
+
+        if 'url' in data:
+            url = data['url']
+        elif 'url' in kwargs:
+            url = kwargs['url']
+        else:
+            url = None
+
+        if 'version' in sentry and 'module' in sentry:
+            version = [sentry['module'], sentry['version']]
+        else:
+            version = None
+
+        extra = {}
+
+        data = {
+            'version': version,
+        }
+
+        return {
+            'date': date,
+            'event_id': message_id,
+            'data': data,
+            'extra': extra,
+        }
+
     def from_kwargs(self, project, **kwargs):
         from sentry.models import Event, FilterValue, Project
 
         URL_MAX_LENGTH = Event._meta.get_field_by_name('url')[0].max_length
-        now = kwargs.pop('timestamp', None) or datetime.datetime.now()
-
         view = kwargs.pop('view', None)
+        if view:
+            # assume legacy
+            kwargs = self.convert_legacy_kwargs(kwargs)
+
         logger_name = kwargs.pop('logger', 'root')
-        url = kwargs.pop('url', None)
         server_name = kwargs.pop('server_name', None)
         site = kwargs.pop('site', None)
         project = Project.objects.get(pk=project)
 
-        data = kwargs.pop('data', {}) or {}
-        message_id = kwargs.pop('message_id', None)
+        date = kwargs.pop('date', None) or datetime.datetime.now()
 
-        if url:
-            data['url'] = url
-            url = url[:URL_MAX_LENGTH]
+        data = kwargs.pop('data', None) or {}
+        event_id = kwargs.pop('event_id', None)
 
         checksum = kwargs.pop('checksum', None)
         if not checksum:
@@ -99,19 +130,14 @@ class GroupManager(models.Manager):
 
         mail = False
         try:
-            kwargs['data'] = {}
-
-            if 'url' in data:
-                kwargs['data']['url'] = data['url']
-            if 'version' in data.get('__sentry__', {}):
-                kwargs['data']['version'] = data['__sentry__']['version']
-            if 'module' in data.get('__sentry__', {}):
-                kwargs['data']['module'] = data['__sentry__']['module']
+            if 'extra' in kwargs:
+                data['extra'] = kwargs.pop('extra')
+            kwargs['data'] = data
 
             group_kwargs = kwargs.copy()
             group_kwargs.update({
-                'last_seen': now,
-                'first_seen': now,
+                'last_seen': date,
+                'first_seen': date,
             })
 
             group, created = self.get_or_create(
@@ -127,37 +153,25 @@ class GroupManager(models.Manager):
                 # HACK: maintain appeared state
                 if group.status == 1:
                     mail = True
-                silence_timedelta = now - group.last_seen
+                silence_timedelta = date - group.last_seen
                 silence = silence_timedelta.days * 86400 + silence_timedelta.seconds
-                group.status = 0
-                group.last_seen = now
-                group.times_seen += 1
-                self.filter(pk=group.pk).update(
-                    times_seen=F('times_seen') + 1,
-                    status=0,
-                    last_seen=now,
-                    score=ScoreClause(group),
-                )
-                signals.post_save.send(sender=self.model, instance=group, created=False)
+                group.update(status=0, last_seen=date, times_seen=F('times_seen') + 1, score=ScoreClause(group))
             else:
-                self.filter(pk=group.pk).update(
-                    score=ScoreClause(group),
-                )
+                group.update(score=ScoreClause(group))
                 silence = 0
                 mail = True
 
             instance = Event(
                 project=project,
-                message_id=message_id,
+                event_id=event_id,
                 view=view,
                 logger=logger_name,
                 data=data,
-                url=url,
                 server_name=server_name,
                 site=site,
                 checksum=checksum,
                 group=group,
-                datetime=now,
+                datetime=date,
                 **kwargs
             )
 
@@ -166,10 +180,10 @@ class GroupManager(models.Manager):
 
             # rounded down to the nearest interval
             if settings.MINUTE_NORMALIZATION:
-                minutes = (now.minute - (now.minute % settings.MINUTE_NORMALIZATION))
+                minutes = (date.minute - (date.minute % settings.MINUTE_NORMALIZATION))
             else:
-                minutes = now.minute
-            normalized_datetime = now.replace(second=0, microsecond=0, minute=minutes)
+                minutes = date.minute
+            normalized_datetime = date.replace(second=0, microsecond=0, minute=minutes)
 
             affected = group.messagecountbyminute_set.filter(date=normalized_datetime).update(times_seen=F('times_seen') + 1)
             if not affected:
diff --git a/sentry/utils/models.py b/sentry/utils/models.py
new file mode 100644
index 0000000000..cc68c82c4e
--- /dev/null
+++ b/sentry/utils/models.py
@@ -0,0 +1,105 @@
+import base64
+import logging
+import operator
+
+from django.db import models, router
+from django.db.models import signals
+from django.db.models.expressions import ExpressionNode, F
+
+from sentry.utils.compat import pickle
+
+logger = logging.getLogger(__name__)
+
+EXPRESSION_NODE_CALLBACKS = {
+    ExpressionNode.ADD: operator.add,
+    ExpressionNode.SUB: operator.sub,
+    ExpressionNode.MUL: operator.mul,
+    ExpressionNode.DIV: operator.div,
+    ExpressionNode.MOD: operator.mod,
+    ExpressionNode.AND: operator.and_,
+    ExpressionNode.OR: operator.or_,
+}
+
+class CannotResolve(Exception):
+    pass
+
+def resolve_expression_node(instance, node):
+    def _resolve(instance, node):
+        if isinstance(node, F):
+            return getattr(instance, node.name)
+        elif isinstance(node, ExpressionNode):
+            return resolve_expression_node(instance, node)
+        return node
+
+    op = EXPRESSION_NODE_CALLBACKS.get(node.connector, None)
+    if not op:
+        raise CannotResolve
+    runner = _resolve(instance, node.children[0])
+    for n in node.children[1:]:
+        runner = op(runner, _resolve(instance, n))
+    return runner
+
+class Model(models.Model):
+    class Meta:
+        abstract = True
+
+    def update(self, using=None, **kwargs):
+        """
+        Updates specified attributes on the current instance.
+        """
+        assert self.pk, "Cannot update an instance that has not yet been created."
+
+        using = using or router.db_for_write(self.__class__, instance=self)
+
+        for field in self._meta.fields:
+            if getattr(field, 'auto_now', False) and field.name not in kwargs:
+                kwargs[field.name] = field.pre_save(self, False)
+
+        affected = self.__class__._base_manager.using(using).filter(pk=self.pk).update(**kwargs)
+        for k,v in kwargs.iteritems():
+            if isinstance(v, ExpressionNode):
+                v = resolve_expression_node(self, v)
+            setattr(self, k, v)
+        if affected == 1:
+            signals.post_save.send(sender=self.__class__, instance=self, created=False)
+            return True
+        elif affected == 0:
+            raise self.DoesNotExist("Cannot update an instance that is not in the database.")
+        else:
+            raise ValueError("Somehow we have updated multiple rows, and you are now royally fucked.")
+
+    update.alters_data = True
+
+class GzippedDictField(models.TextField):
+    """
+    Slightly different from a JSONField in the sense that the default
+    value is a dictionary.
+    """
+    __metaclass__ = models.SubfieldBase
+
+    def to_python(self, value):
+        if isinstance(value, basestring) and value:
+            try:
+                value = pickle.loads(base64.b64decode(value).decode('zlib'))
+            except Exception, e:
+                logger.exception(e)
+                return {}
+        elif not value:
+            return {}
+        return value
+
+    def get_prep_value(self, value):
+        if value is None:
+            return
+        return base64.b64encode(pickle.dumps(value).encode('zlib'))
+
+    def value_to_string(self, obj):
+        value = self._get_val_from_obj(obj)
+        return self.get_db_prep_value(value)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
\ No newline at end of file
