commit d209e71392a66575a7b5df45bf4c2aaa56d75d10
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 14 11:36:52 2016 -0800

    Remove ForeignKey's on Event/EventMapping
    
    We support these models being on different partitions and Django's built-in ForeignKey does not handle routing when accessing relations.

diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 856f2c4d57..e1c8df7311 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -48,7 +48,7 @@ class EventDetailsEndpoint(Endpoint):
 
         # HACK(dcramer): work around lack of unique sorting on datetime
         base_qs = Event.objects.filter(
-            group=event.group_id,
+            group_id=event.group_id,
         ).exclude(id=event.id)
 
         # First, we collect 5 leading/trailing events
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 1081a7823d..7f8420f5c2 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -33,7 +33,7 @@ class GroupEventsEndpoint(GroupEndpoint):
         """
 
         events = Event.objects.filter(
-            group=group
+            group_id=group.id,
         )
 
         query = request.GET.get('query')
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index e911f946b2..78648663fc 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -41,7 +41,7 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         try:
             event = Event.objects.get(
                 event_id=event_id,
-                project=project,
+                project_id=project.id,
             )
         except Event.DoesNotExist:
             return Response({'detail': 'Event not found'}, status=404)
@@ -50,7 +50,7 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
 
         # HACK(dcramer): work around lack of unique sorting on datetime
         base_qs = Event.objects.filter(
-            group=event.group_id,
+            group_id=event.group_id,
         ).exclude(id=event.id)
         try:
             next_event = sorted(
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 3e75e172fb..3f3b69d199 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -35,7 +35,7 @@ class ProjectEventsEndpoint(ProjectEndpoint):
         """
 
         events = Event.objects.filter(
-            project=project,
+            project_id=project.id,
         )
 
         query = request.GET.get('query')
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index e71d3bd5a3..c4d9bc42b3 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -208,7 +208,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             # check to see if we've got an event ID
             try:
                 mapping = EventMapping.objects.get(
-                    project=project,
+                    project_id=project.id,
                     event_id=query,
                 )
             except EventMapping.DoesNotExist:
diff --git a/src/sentry/db/deletion.py b/src/sentry/db/deletion.py
index d6ebadabe5..6c5a40fb0f 100644
--- a/src/sentry/db/deletion.py
+++ b/src/sentry/db/deletion.py
@@ -64,7 +64,10 @@ class BulkDeleteQuery(object):
                 **{'{}__lte'.format(self.dtfield): cutoff}
             )
         if self.project_id:
-            qs = qs.filter(project=self.project_id)
+            if 'project' in self.model._meta.get_all_field_names():
+                qs = qs.filter(project=self.project_id)
+            else:
+                qs = qs.filter(project_id=self.project_id)
 
         # XXX: we step through because the deletion collector will pull all
         # relations into memory
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7ae5eb153d..5cd589b732 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -393,7 +393,7 @@ class EventManager(object):
         }
 
         event = Event(
-            project=project,
+            project_id=project.id,
             event_id=event_id,
             data=data,
             time_spent=time_spent,
@@ -468,7 +468,6 @@ class EventManager(object):
         )
 
         event.group = group
-        event.group_id = group.id
         # store a reference to the group id to guarantee validation of isolation
         event.data.bind_ref(event)
 
diff --git a/src/sentry/migrations/0230_auto__del_field_eventmapping_group__del_field_eventmapping_project__ad.py b/src/sentry/migrations/0230_auto__del_field_eventmapping_group__del_field_eventmapping_project__ad.py
new file mode 100644
index 0000000000..88762509a0
--- /dev/null
+++ b/src/sentry/migrations/0230_auto__del_field_eventmapping_group__del_field_eventmapping_project__ad.py
@@ -0,0 +1,472 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        pass
+
+
+    def backwards(self, orm):
+        pass
+
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 1, 21, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.broadcastseen': {
+            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
+            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
+            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
+            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.fileblob': {
+            'Meta': {'object_name': 'FileBlob'},
+            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
+        },
+        'sentry.fileblobindex': {
+            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.group': {
+            'Meta': {'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupresolution': {
+            'Meta': {'object_name': 'GroupResolution'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.groupsnooze': {
+            'Meta': {'object_name': 'GroupSnooze'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'until': ('django.db.models.fields.DateTimeField', [], {})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'counter': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationoption': {
+            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 9c8aca15f2..74cff468f2 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -15,8 +15,8 @@ from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.db.models import (
-    BaseManager, BoundedIntegerField, FlexibleForeignKey, Model, NodeField,
-    sane_repr
+    BaseManager, BoundedBigIntegerField, BoundedIntegerField,
+    Model, NodeField, sane_repr
 )
 from sentry.interfaces.base import get_interface
 from sentry.utils.cache import memoize
@@ -30,9 +30,9 @@ class Event(Model):
     """
     __core__ = False
 
-    group = FlexibleForeignKey('sentry.Group', blank=True, null=True, related_name="event_set")
+    group_id = BoundedBigIntegerField(blank=True, null=True)
     event_id = models.CharField(max_length=32, null=True, db_column="message_id")
-    project = FlexibleForeignKey('sentry.Project', null=True)
+    project_id = BoundedBigIntegerField(blank=True, null=True)
     message = models.TextField()
     platform = models.CharField(max_length=64, null=True)
     datetime = models.DateTimeField(default=timezone.now, db_index=True)
@@ -51,11 +51,37 @@ class Event(Model):
         db_table = 'sentry_message'
         verbose_name = _('message')
         verbose_name_plural = _('messages')
-        unique_together = (('project', 'event_id'),)
-        index_together = (('group', 'datetime'),)
+        unique_together = (('project_id', 'event_id'),)
+        index_together = (('group_id', 'datetime'),)
 
     __repr__ = sane_repr('project_id', 'group_id')
 
+    # Implement a ForeignKey-like accessor for backwards compat
+    def _set_group(self, group):
+        self.group_id = group.id
+        self._group_cache = group
+
+    def _get_group(self):
+        from sentry.models import Group
+        if not hasattr(self, '_group_cache'):
+            self._group_cache = Group.objects.get(id=self.group_id)
+        return self._group_cache
+
+    group = property(_get_group, _set_group)
+
+    # Implement a ForeignKey-like accessor for backwards compat
+    def _set_project(self, project):
+        self.project_id = project.id
+        self._project_cache = project
+
+    def _get_project(self):
+        from sentry.models import Project
+        if not hasattr(self, '_project_cache'):
+            self._project_cache = Project.objects.get(id=self.project_id)
+        return self._project_cache
+
+    project = property(_get_project, _set_project)
+
     def error(self):
         message = strip(self.message)
         if not message:
diff --git a/src/sentry/models/eventmapping.py b/src/sentry/models/eventmapping.py
index 6f7aa262b9..1f6a2628df 100644
--- a/src/sentry/models/eventmapping.py
+++ b/src/sentry/models/eventmapping.py
@@ -10,24 +10,52 @@ from __future__ import absolute_import
 from django.db import models
 from django.utils import timezone
 
-from sentry.db.models import FlexibleForeignKey, Model, sane_repr
+from sentry.db.models import (
+    BoundedBigIntegerField, Model, sane_repr
+)
 
 
 class EventMapping(Model):
     __core__ = False
 
-    project = FlexibleForeignKey('sentry.Project')
-    group = FlexibleForeignKey('sentry.Group')
+    project_id = BoundedBigIntegerField()
+    group_id = BoundedBigIntegerField()
     event_id = models.CharField(max_length=32)
     date_added = models.DateTimeField(default=timezone.now)
 
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_eventmapping'
-        unique_together = (('project', 'event_id'),)
+        unique_together = (('project_id', 'event_id'),)
 
     __repr__ = sane_repr('project_id', 'group_id', 'event_id')
 
     @property
     def team(self):
         return self.project.team
+
+    # Implement a ForeignKey-like accessor for backwards compat
+    def _set_group(self, group):
+        self.group_id = group.id
+        self._group_cache = group
+
+    def _get_group(self):
+        from sentry.models import Group
+        if not hasattr(self, '_group_cache'):
+            self._group_cache = Group.objects.get(id=self.group_id)
+        return self._group_cache
+
+    group = property(_get_group, _set_group)
+
+    # Implement a ForeignKey-like accessor for backwards compat
+    def _set_project(self, project):
+        self.project_id = project.id
+        self._project_cache = project
+
+    def _get_project(self):
+        from sentry.models import Project
+        if not hasattr(self, '_project_cache'):
+            self._project_cache = Project.objects.get(id=self.project_id)
+        return self._project_cache
+
+    project = property(_get_project, _set_project)
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 78cd4856c5..fa2b00f5d3 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -158,6 +158,11 @@ class Group(Model):
         return absolute_uri(reverse('sentry-group', args=[
             self.organization.slug, self.project.slug, self.id]))
 
+    @property
+    def event_set(self):
+        from sentry.models import Event
+        return Event.objects.filter(group_id=self.id)
+
     @property
     def avg_time_spent(self):
         if not self.time_spent_count:
@@ -217,7 +222,7 @@ class Group(Model):
         if not hasattr(self, '_latest_event'):
             latest_events = sorted(
                 Event.objects.filter(
-                    group=self,
+                    group_id=self.id,
                 ).order_by('-datetime')[0:5],
                 key=EVENT_ORDERING_KEY,
                 reverse=True,
@@ -234,7 +239,7 @@ class Group(Model):
         if not hasattr(self, '_oldest_event'):
             oldest_events = sorted(
                 Event.objects.filter(
-                    group=self,
+                    group_id=self.id,
                 ).order_by('datetime')[0:5],
                 key=EVENT_ORDERING_KEY,
             )
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index df5e4bd901..c5baf6c962 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -130,10 +130,14 @@ class Project(Model):
                 )
             except Group.DoesNotExist:
                 group.update(project=project)
-                for model in (Event, GroupTagValue):
-                    model.objects.filter(project=self, group=group).update(project=project)
+                GroupTagValue.objects.filter(
+                    project=self,
+                    group_id=group,
+                ).update(project=project)
             else:
-                Event.objects.filter(group=group).update(group=other)
+                Event.objects.filter(
+                    group_id=group.id,
+                ).update(group_id=other.id)
 
                 for obj in GroupTagValue.objects.filter(group=group):
                     obj2, created = GroupTagValue.objects.get_or_create(
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index de9082125e..2acd27960d 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -106,7 +106,7 @@ def _rehash_group_events(group, limit=100):
     )
     from sentry.models import Event
 
-    event_list = list(Event.objects.filter(group=group)[:limit])
+    event_list = list(Event.objects.filter(group_id=group.id)[:limit])
     Event.objects.bind_nodes(event_list, 'data')
 
     for event in event_list:
@@ -137,7 +137,7 @@ def _rehash_group_events(group, limit=100):
                 release=None,
                 **group_kwargs
             )
-            event.update(group=new_group)
+            event.update(group_id=new_group.id)
     return bool(event_list)
 
 
@@ -149,12 +149,16 @@ def merge_objects(models, group, new_group, limit=1000,
         if logger is not None:
             logger.info('Merging %r objects where %r into %r', model, group,
                         new_group)
-        for obj in model.objects.filter(group=group)[:limit]:
+        if 'group' in model._meta.get_all_field_names():
+            queryset = model.objects.filter(group=group)
+        else:
+            queryset = model.objects.filter(group_id=group.id)
+        for obj in queryset[:limit]:
             try:
                 with transaction.atomic(using=router.db_for_write(model)):
                     model.objects.filter(
                         id=obj.id
-                    ).update(group=new_group)
+                    ).update(group_id=new_group.id)
             except IntegrityError:
                 delete = True
             else:
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 3edae3c6f1..6ce6c0f74f 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -7,7 +7,7 @@ from django.template.loader import render_to_string
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_exempt
 
-from sentry.models import Group, ProjectKey, UserReport
+from sentry.models import EventMapping, Group, ProjectKey, UserReport
 from sentry.web.helpers import render_to_response
 from sentry.utils import json
 from sentry.utils.http import is_valid_origin
@@ -90,13 +90,15 @@ class ErrorPageEmbedView(View):
             report.project = key.project
             report.event_id = event_id
             try:
-                report.group = Group.objects.get(
-                    eventmapping__event_id=report.event_id,
-                    eventmapping__project=key.project,
+                mapping = EventMapping.objects.get(
+                    event_id=report.event_id,
+                    project_id=key.project_id,
                 )
-            except Group.DoesNotExist:
+            except EventMapping.DoesNotExist:
                 # XXX(dcramer): the system should fill this in later
                 pass
+            else:
+                report.group = Group.objects.get(id=mapping.group_id)
             report.save()
             return HttpResponse(status=200)
         elif request.method == 'POST':
diff --git a/src/sentry/web/frontend/replay_event.py b/src/sentry/web/frontend/replay_event.py
index bf7de4ce31..d87d8636ef 100644
--- a/src/sentry/web/frontend/replay_event.py
+++ b/src/sentry/web/frontend/replay_event.py
@@ -16,7 +16,7 @@ class ReplayEventView(ProjectView):
 
     def handle(self, request, organization, project, team, group_id, event_id):
         try:
-            event = Event.objects.get(group=group_id, id=event_id)
+            event = Event.objects.get(group_id=group_id, id=event_id)
         except Event.DoesNotExist:
             return self.redirect(reverse('sentry'))
 
diff --git a/tests/fixtures/cleanup.json b/tests/fixtures/cleanup.json
index 0459a99fee..50ef80c37e 100644
--- a/tests/fixtures/cleanup.json
+++ b/tests/fixtures/cleanup.json
@@ -61,8 +61,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 2,
+      "project_id": 1,
+      "group_id": 2,
       "datetime": "2010-08-31 17:50:47Z",
       "data": "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",
       "message": "'template'"
@@ -72,8 +72,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 3,
+      "project_id": 1,
+      "group_id": 3,
       "datetime": "2010-08-31 17:53:31Z",
       "data": "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",
       "message": "global name 'bar' is not defined"
@@ -83,8 +83,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 3,
+      "project_id": 1,
+      "group_id": 3,
       "datetime": "2010-08-31 17:53:31Z",
       "data": "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",
       "message": "global name 'bar' is not defined"
@@ -94,8 +94,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 3,
+      "project_id": 1,
+      "group_id": 3,
       "datetime": "2010-08-31 17:53:31Z",
       "data": "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",
       "message": "global name 'bar' is not defined"
@@ -105,8 +105,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 4,
+      "project_id": 1,
+      "group_id": 4,
       "datetime": "2010-08-31 17:53:53Z",
       "data": "",
       "message": "'tuple' object has no attribute 'args'"
@@ -116,8 +116,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 4,
+      "project_id": 1,
+      "group_id": 4,
       "datetime": "2010-08-31 17:53:54Z",
       "data": "",
       "message": "'tuple' object has no attribute 'args'"
@@ -127,8 +127,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 4,
+      "project_id": 1,
+      "group_id": 4,
       "datetime": "2010-08-31 17:53:54Z",
       "data": "",
       "message": "'tuple' object has no attribute 'args'"
@@ -138,8 +138,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 5,
+      "project_id": 1,
+      "group_id": 5,
       "datetime": "2010-08-31 17:54:23Z",
       "data": "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",
       "message": "type object 'datetime.datetime' has no attribute 'tomorrow'"
@@ -149,8 +149,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 5,
+      "project_id": 1,
+      "group_id": 5,
       "datetime": "2010-08-31 17:54:23Z",
       "data": "eJztW21z2siy/s6vmKrzAdjFegUBjp0qFmObjQ1ewE6c5FyVgAG0ERKRRGxnK//99DOSkBDgJHfv1qm6ZVeKaLp7emZ6Znq6n5FK05VaGBbb/f6bbmdYLKy0Qmm60om0DM2Jt1xyN+Q+0atEcqpV/+v9mf37+7XR70wfz2+H97/r9+Prx8no8rdF7/7idt56vL4n8VohGBY39U3XWnKiGqTEmi5tl57rkJj+aU75eD03V5bLHaI2SGJhTyHcLAQkcdEZ0bOqoFuqijprH4KqBskwXB3L8nTik35fcryJ5Rw3FEWTIaFD2jQD6oL/ZJogVYWaGlXljxMQjELJWan1wp1pjte2E9quaRK5UbBAbxbuwqcVZ974Tz4JWXFqhTy0l1xKHopsYQXM9ZgVhr49XoecFUNv6fm+9wBjKgULijQV7Wro8mztTkLbgwU0vXA356Hp82DluQEnShVdXvmcTE92ewwhVUMXNaNwx3J//2Kt1cp5Yl9s/sCW9nTq8AfLh5p6wdqRnnl+Rshc8nDhTZntsoA7M8mEEjPlH5OWxh4t+Ev6y053FZZ8/nnNg7DCaCqcsTX5lD6Zlj8PMsVPDyCUqaXmgZbs2aYx6pCuHBCLOhWufZelttRVkt5TgdYCdGkFi0z9xfIDsrGuw8Z6VfzWCne0OPgKsxQQzyAlJ0tvunZocqd/Wu7ckyaez6VUqshmvrdkRfk24H6QrEdZ+mL74dpyuPuFiHbweR3Ijj2WV09kKleTDDmwQ360ImNYc04iQrkM5XKqXFo9TYqvqSP1aDHpDeog9elvrUy9GSmrKoW7rfmhna6KxV/VYglapQEPaWcIZhXW2FjBnUlX1tenYcxPumOFTHlUFaVujfWmQn2v1mJltIx31gyxsWBPxt7anbJ4YbYDf3ZHa/J6Iy2tfG/Cg0AsVebNWNKNVKE0oVrSbtVcv1Q+blZV5TU61og71sQonRl5LmVrhKR0Ybmkxw+kh2BuS2+HF93LiLKjtqlVxXBraqS1phXu4g1BRB2KUX0QkT6uFUWxyMEdn/yx5v7TmT0Jj9lf315XIs5Nf3iIFfvr47/yPvaYxQ42FmR5F0sCwr9u+Ft+nrg/7OS/xSquO6MWdQS+iJs36/FwPTaH3uQTebYBd6eRVjlcrmTHIue3OKpbvf6lI8fMTUfa/evrVu/MvO6fdVBl7dqPmqLoWYneqNMbmVed3sXoEjK7vNH9jagN7ymvHCtrivZwcG5GpoNIYzw1qrVarV6dKDOjWtemhtpQjUmjWm1qTSvT8Fl3eHPVus8PRJ+9a+kXsufPpcdjJSP+e6t30TeHndGo27sYYkS3V6JJ/mgtYSZaylg5UrKx0rrnraur31rtN+bZ/dWZedX9bdAa3Js3rWi8srcKZXHMwZGktS5ao87b1r3ZJSMMzltt0Vj7oiurkpqR6o7Mzll31B+A7Vqul/Iuu8MRbDjoX4mO+lbAp+tVpmeX/WuhdtvJZfij0Y3Zarc7NyOxDGk92BMLLkx+XDqVrfIiXDq/giqmCaVXn08VqVlJp00QGhV7Sa5RXrnzyi/yL4JW29uk2b5sDcjiaLo77B81GrXmkVpZh7OjhqhWr0TV9f3VO712/4xmC/XnX+1VZcpnDvnSSjCdLPZXuaJZvm1dRBPrHt0OKzzudU6+3WpfdsyMdZfW4xEN61TJC/Z7vU571O33IPWJ89WR5dhf+I5YsoSzm/f0R3fuK7btNE6Fx3jFtj3F6babEA1fkkdCs7sBV05w0DnvDDpimR2O0ea+t17J+fm4HXYGJlm1J1q69r7ajmPJNUlhpWtrYruhFyxesdtXrEsDcBjRWH/I3jFVMQ2z+oqJmSiL0Ii/5eM3dijXdF2qstKby9H1VYU59ifOLvjkk1dm7QWd2xzaJb1ek1StzobWzPLtqE7aNcx1NM/UQel2dH6UmWTapaN+/6r7XszJnHZm6HmO/TVjvqv+Ra8V7Z+djdO/Ort5e7a7teQz/oU73gpTFccGR1Ewm9bdOIbvRx5j2z3e9h/yygvCOYVMn52GDr6cFbiyx77lP8nnUPng+Z8C+UYELtIsoch31ChiFBnBTK6BXDEQ5XXg75TFw6YU0fPSm+I7VUVh2wLk9877ZIZ1Uc4wuliHf9x2Bx3zrjsY3bbo3LgTZ4O/5nm54Q1tvO/KpXzzt9Zwjzvctnym8lCFcCmaizLItUn0+yFb4B/0+it1mSX9+8Nz0npeOlt4+Kl2fkr4OWllW5RlzPBz61zOnZcZRfejy35vz7H406v2uYD8OG3wj9sOncPD0SA+I1LOoHPdH3XM1tmZ8HdqU5NUoyFptezRGwslDjTLIM3DkUlR1GVfGAcZb8q+7ZnXrW5vdzkO24MuHUKxV1lnVJIDvSMfmvM3kefdkbrpD0SPtp14whz0R/12dGbBOW+HE7HQsH8+etsaiLYQ3Q65/4UmVZFUFlkeZs6e2sPLzpVQKVzO2AoWWd7VneBl2xlemq1b2uXDfvtNPga7vNTef67TtAchd2leM9XuegejHYqSrkF9pDNweTTxHM/fZmLoF4OWEIoi2xFJ2m7Wglk5kywxjM9trZ4500bXN2dd0QOZkk155jlTLP2bW/oXKM5kqXf++Nx4t7TqjtdczH6lv1FXPhotV0cZ9zF6LzpC00ghlNxe0O88MxycmXuPlthfmbFD+/4pkVZ92x+86ffM/VHfVtW0jglJSV5aLm0fylszHLN9Hh3to8677WiLUqfz2rGSDaBFosUpVaX5PGYn3oq7bGYj/z4JQrKf/7pYYZSSE+GhuMk2tepU5crrbS2oZj74FH2KRORk4lhBsJ3HB2LBBhKtRI5oRTqnOm/jKjl1trtah9ATiAxHMqE/TgNz2eBMnynTfHeWaye040SW1JxbTsD3SIQLn1tTEhjRnt/m+2vX9NwJ31977TtmMFnwKBXEaHJW/RL5PuKW1ApTyt+QrlbjdLWWggFEFcBHglcxm7K1xzTVnXFdE6lujErUGkh1A8+hBogKROdkwOf88XZwNYjpLJ/+UG8DVup5Lj/GT5n9j0wqjRg1M9TCHUkkWgPiaIewmKzcP4DGZNUneIyhx92sCsDItN2ZR9SaQE8Mo3B3IhCaYgbJaSVYTAdrWyip/10kxwBMdxL61oRj3nZWodYcTxtoCYgPulbPQj4RBldY1QH6TFf1GPSp62I2YyitDtAHE0SPMZBTN8TcAAEiIgaxb26JBXxlG9M0Hdvl5IyJ2SzcNfXCqqEI2JOC0Qzu2VCBxjW0XdwzMijrJHatMKCDDf0AOvgv1p2xcMEjnNS3bEpsmeUyntanPcXskIQoI5kvUg5prR7UmsJOFVI3BViJVjaVMwIxOhkwizTWDmpMLF5h64CTMiuUWJ90+g82iD4Xnd9uRSKNxgGN34F8Nzq2cd/GPvQ4hVl/BPvlZVLTEAgr/GOM/jdouv8P92QCyyGCwGFTWDXFOtosryb5DzoW6EEDPRyDphd+ZLM0BRBvT1GDnGJV1+pGtapqUGZEVxvpWoZQfXeZ5syVbLnUSr/kgPFfftmFxpuNQoCN2WwW5rgvEF4Y9yE01Hl0NUD9jhovS9Qj3yqBrWXmkGabBnn6F+j5TVIMYEsRXZKrCcyA01Ers9LKeyiVZo7n+SWhdBKW+MqbLCLX6hK3zI4YnaWhqFKmOrqhKGX2K9PKFaZS+ItntVysoNnsLvoGQrIJypLn04Fujp9KxaOoLxVWPNooLpYhnSxwPNczz1hi8wi8V5Wm+E8l7+Z483mMbZALUtXIt6niysj3PHgXVYWHo2c80mQLp6aqNaDAiAZEZfAMcYsQcWmSHaQqoDcy9GZM37SIex+0qOFuTVXEdRU5MoGu4FncTOkRnU4PmmzXdgVH3JtpEcfAdONMUTVxWVaLyHTQzqzQQi+0JuhVQddp4CJkwrOajEjPItCq/gJBv0DQLxD0CwT9AkG/QNAvEPQLBP0CQb9A0C8Q9AsE/QJBv0DQ/1UIWtVjDFrVt3NwpNN4BQ/ptF6ndHrbl4BLCfEWEbRmkgBXN3gAXv9U06y9SpkxqQ9omZiOLdLjKtLjDycXCAr59DpiUi/rFMttIbfHO+ViuKYdWkwmYBexBZ5DM8l2tVfLrEedjxVlHueON7YcBiuw4tjyi8yG1pBRXmC7fLpXm15mZx4Pel7YeaRRHedK2/JsaYWTBWV/7DNSfDYlWdECh7S0twH1+8b4G3j2oSbf8KdYefpECTadzKS1+PrfmD2soGAOUJkWDJVrhWAeocgq3juMcaPJwvJD83PATlncghR1NYhiBdQ8jIBiM5PDLiWDMc15yE9Db2o9sSO2GSt+ptwJrdLCW/vBqVYtl1P1h16sJfURgpcgdkXUjpL2CINDOYLgkqbKxW9l6YvlrHlQisQzDR16r5YaslyaZ9JRctfL07a3dsMS8M5yokzsiVhjhc6u9VJAceLtSKBue8DcwzFU/B8A+EAgtWpNpckBQEt7jkoaSt+DZifiwkmt6RDOoLJNDdQqqDEMG83HKdtZe1Ky0EpiMDV4CbxlDgAJvqRmRC+Iw9Fs4h7Q8V66CH5QEKjbVpKJN8mVZ19ITzJNSIrX2LOHG4gAJ5874SATv9G+/xyDAN7STw8zUASgeCC/AN/IDMwQMGM+pgIDw38usIKMsMregIS4dVgHUQmexfijEAxFMfJNHAaKGGcuLAUdw4s/CKiLgSU5LQhGejiIshiMCEtQauS4orcieMfr/srzxv//mb9i4GIqthILUDEjRbHI49XZ0HcMJMjimgSJJQr4rGKTXX788PFjkrR9pPwxLutR+ePHh5xErpiUFRSYUC/uXRIYFARs0mewUIg08mtSUJtUMRdREzm6PRIoC0qA7rNQC2jaZuPnED8wYaLvwH4QqyZdEiXYLJsBgCYG+gyWDZn82LcBbUhEQ38vnsWAc5E7vk5RNuOJ8TwQ1dzHP/8IqIeGtIy3iXexpuh7QjxNqUYOIc1yQYTttlJdEI3ItyCFQxF2UsVSzsem4DZily0KwiNkcDSiqfALWTANNDX1qDvIDvha6lG16BukOAFDGR7sf5GFoWotYy6RMoMIpyfyZhQi953mnKBhiCLxREEMMXeFQXRNSfZ7BtMAHUvhnwM20EK0Braya5D13PLeSbEhJBZFNr0EsfZDnlyIGpE1Mlc+oGLFbO59QGhsVk+UeYFGwc+Pp1/40ktJFk0evgNT/U6fhZCw1DNXM5DRt+cL9zMgC0NlwRoQKYDaDCyb8IFnFLqKmvENmysBMGGgzL0ASI1UduueATz4nvSyAd+4CVuYRaJn83Rw1Jx/FUTsp3/wJgdN6BtLJLkpqOJzMI3SiC6ljV1FvM6Qvx+AHPbgf/mSAN0Qu3/3Fg4sOIHkKg7l5ma8m1QeHxoqNO1KxtMKqBAMNfEP8T0BaHvi1cOXBaigby+3BIEAq5o0vPduCxLik83tCy6QjXylTDSsiSh+9yINnGjBZu4bQcRKTS8diWJEuzYasLFnl/44agwF2fNuA2uCgW27wTZBEBv2wBUu+NEHrAfucSFgZB29uI8GFfbIXEqDlO7cZLKNZv4EPk4OmLqwR+YKFzQ1c8DUtc0cb4FeYCG7+2nkCxWFMbL35iDCAt+9PIegselRDOaBSGniTyJ6qNVIUoborgckJMHiM+Wb2HoN8aGyhrha+g8mNrJv",
       "message": "type object 'datetime.datetime' has no attribute 'tomorrow'"
@@ -160,8 +160,8 @@
   },
   {
     "fields": {
-      "project": 1,
-      "group": 5,
+      "project_id": 1,
+      "group_id": 5,
       "datetime": "2010-08-31 17:54:24Z",
       "data": "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",
       "message": "type object 'datetime.datetime' has no attribute 'tomorrow'"
diff --git a/tests/sentry/tasks/test_merge.py b/tests/sentry/tasks/test_merge.py
index 55a99e2ee0..d8d9763491 100644
--- a/tests/sentry/tasks/test_merge.py
+++ b/tests/sentry/tasks/test_merge.py
@@ -49,13 +49,13 @@ class RehashGroupEventsTest(TestCase):
         # reference check being bound to a group
         event1 = Event.objects.get(id=event1.id)
         group1 = event1.group
-        assert sorted(Event.objects.filter(group=group1).values_list('id', flat=True)) == [
+        assert sorted(Event.objects.filter(group_id=group1.id).values_list('id', flat=True)) == [
             event1.id,
             event2.id,
         ]
 
         event3 = Event.objects.get(id=event3.id)
         group2 = event3.group
-        assert sorted(Event.objects.filter(group=group2).values_list('id', flat=True)) == [
+        assert sorted(Event.objects.filter(group_id=group2.id).values_list('id', flat=True)) == [
             event3.id,
         ]
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 43aee75783..4d6b6f0759 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -66,7 +66,9 @@ class EventManagerTest(TransactionTestCase):
         event = manager.save(1)
 
         assert EventMapping.objects.filter(
-            group=event.group, event_id=event_id).exists()
+            group_id=event.group_id,
+            event_id=event_id,
+        ).exists()
 
     def test_tags_as_list(self):
         manager = EventManager(self.make_event(tags=[('foo', 'bar')]))
