commit b606dcaeb11e54a2e44420e7a3f1785b44282c92
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Jul 17 15:54:29 2018 -0700

    fix: EventUser's tag_value was being calculated differently than it's hash (#9065)
    
    This unifies the priority and the behavor of both build_hash and
    tag_value so they match.
    
    Prior to this, EventUser.email was favored in a tag value over
    EventUser.username. And the hash favored the opposite way.
    
    This means if an EventUser row had both a email and an ident, it'd
    generate a hash and tag_value that weren't compatible with each other.
    From a given tag_value, you wouldn't be able to reverse it back into a
    valid EventUser row since you couldn't reliably generate a hash given a
    tag_value only.
    
    This change in behavior breaks some existing tags, but the impact of
    this is very low. Less than 0.1% of our real production data is impacted
    by this, so I'm choosing to just write new tag values correctly moving
    forward and ignoring repair (since this would require rewriting tag
    values, if even possible).

diff --git a/src/sentry/models/eventuser.py b/src/sentry/models/eventuser.py
index 40581e61b7..7f1903e2df 100644
--- a/src/sentry/models/eventuser.py
+++ b/src/sentry/models/eventuser.py
@@ -1,20 +1,27 @@
 from __future__ import absolute_import
 
+from collections import OrderedDict
+from functools import reduce
+from operator import or_
+
 from django.db import models
 from django.utils import timezone
-from operator import or_
-from six.moves import reduce
 
 from sentry.db.models import BoundedPositiveIntegerField, Model, sane_repr
+from sentry.utils.datastructures import BidirectionalMapping
 from sentry.utils.hashlib import md5_text
 from sentry.constants import MAX_EMAIL_FIELD_LENGTH
 
-KEYWORD_MAP = {
-    'id': 'ident',
-    'email': 'email',
-    'username': 'username',
-    'ip': 'ip_address',
-}
+
+# The order of these keys are significant to also indicate priority
+# when used in hashing and determining uniqueness. If you change the order
+# you will break stuff.
+KEYWORD_MAP = BidirectionalMapping(OrderedDict((
+    ('ident', 'id'),
+    ('username', 'username'),
+    ('email', 'email'),
+    ('ip_address', 'ip'),
+)))
 
 
 class EventUser(Model):
@@ -44,7 +51,7 @@ class EventUser(Model):
 
     @classmethod
     def attr_from_keyword(cls, keyword):
-        return KEYWORD_MAP[keyword]
+        return KEYWORD_MAP.get_key(keyword)
 
     @classmethod
     def for_tags(cls, project_id, values):
@@ -70,24 +77,25 @@ class EventUser(Model):
         self.hash = self.build_hash()
 
     def build_hash(self):
-        value = self.ident or self.username or self.email or self.ip_address
-        if not value:
-            return None
-        return md5_text(value).hexdigest()
+        for key, value in self.iter_attributes():
+            if value:
+                return md5_text(value).hexdigest()
 
     @property
     def tag_value(self):
         """
         Return the identifier used with tags to link this user.
         """
-        if self.ident:
-            return u'id:{}'.format(self.ident)
-        if self.email:
-            return u'email:{}'.format(self.email)
-        if self.username:
-            return u'username:{}'.format(self.username)
-        if self.ip_address:
-            return u'ip:{}'.format(self.ip_address)
+        for key, value in self.iter_attributes():
+            if value:
+                return u'{}:{}'.format(KEYWORD_MAP[key], value)
+
+    def iter_attributes(self):
+        """
+        Iterate over key/value pairs for this EventUser in priority order.
+        """
+        for key in KEYWORD_MAP.keys():
+            yield key, getattr(self, key)
 
     def get_label(self):
         return self.email or self.username or self.ident or self.ip_address
diff --git a/tests/sentry/models/test_eventuser.py b/tests/sentry/models/test_eventuser.py
new file mode 100644
index 0000000000..5f43c735b6
--- /dev/null
+++ b/tests/sentry/models/test_eventuser.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+from sentry.models import EventUser
+
+
+class EventUserTestCase(TestCase):
+    def test_build_hash(self):
+        cases = [
+            ({'ident': 'ident', 'username': 'username', 'email': 'email', 'ip_address': '127.0.0.1'}, '67217d8b401cf5e72bbf5103d60f3e97'),
+            ({'username': 'username', 'email': 'email', 'ip_address': '127.0.0.1'}, '14c4b06b824ec593239362517f538b29'),
+            ({'email': 'email', 'ip_address': '127.0.0.1'}, '0c83f57c786a0b4a39efab23731c7ebc'),
+            ({'ip_address': '127.0.0.1'}, 'f528764d624db129b32c21fbca0cb8d6'),
+            ({}, None),
+        ]
+        for kw, value in cases:
+            assert EventUser(**kw).build_hash() == value
+
+    def test_tag_value(self):
+        cases = [
+            ({'ident': 'ident', 'username': 'username', 'email': 'email', 'ip_address': '127.0.0.1'}, 'id:ident'),
+            ({'username': 'username', 'email': 'email', 'ip_address': '127.0.0.1'}, 'username:username'),
+            ({'email': 'email', 'ip_address': '127.0.0.1'}, 'email:email'),
+            ({'ip_address': '127.0.0.1'}, 'ip:127.0.0.1'),
+            ({}, None),
+        ]
+        for kw, value in cases:
+            assert EventUser(**kw).tag_value == value
+
+    def test_attr_from_keyword(self):
+        cases = [
+            ('id', 'ident'),
+            ('username', 'username'),
+            ('email', 'email'),
+            ('ip', 'ip_address'),
+        ]
+        for keyword, attr in cases:
+            assert EventUser.attr_from_keyword(keyword) == attr
