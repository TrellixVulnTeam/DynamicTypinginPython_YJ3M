commit 2a491c899327b305a3f7c9b5d46621ca85bf4b92
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Aug 13 12:12:45 2019 -0700

    ref(ts): Convert higher order components to TypeScript (#14326)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4894086ea8..14944bfa49 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -64,3 +64,23 @@ export type CommitAuthor = {
   email?: string;
   name?: string;
 };
+
+// TODO(ts): This type is incomplete
+export type Environment = {};
+
+// TODO(ts): This type is incomplete
+export type SavedSearch = {};
+
+// TODO(ts): This type is incomplete
+export type Plugin = {};
+
+export type GlobalSelection = {
+  projects: number[];
+  environments: string[];
+  datetime: {
+    start: string;
+    end: string;
+    period: string;
+    utc: boolean;
+  };
+};
diff --git a/src/sentry/static/sentry/app/utils/__mocks__/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/__mocks__/withLatestContext.tsx
similarity index 94%
rename from src/sentry/static/sentry/app/utils/__mocks__/withLatestContext.jsx
rename to src/sentry/static/sentry/app/utils/__mocks__/withLatestContext.tsx
index 2e2f2a9315..ed017c6cdd 100644
--- a/src/sentry/static/sentry/app/utils/__mocks__/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/__mocks__/withLatestContext.tsx
@@ -1,5 +1,7 @@
 import React from 'react';
 
+declare const TestStubs;
+
 const MOCK_ORG = TestStubs.Organization();
 const DEFAULTS = {
   organization: MOCK_ORG,
diff --git a/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx b/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.tsx
similarity index 95%
rename from src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx
rename to src/sentry/static/sentry/app/utils/__mocks__/withOrganization.tsx
index 254712591c..0d5ce2c154 100644
--- a/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.jsx
+++ b/src/sentry/static/sentry/app/utils/__mocks__/withOrganization.tsx
@@ -2,6 +2,8 @@ import React from 'react';
 
 import SentryTypes from 'app/sentryTypes';
 
+declare const TestStubs;
+
 const withOrganizationMock = WrappedComponent =>
   class WithOrganizationMockWrapper extends React.Component {
     static contextTypes = {
diff --git a/src/sentry/static/sentry/app/utils/getDisplayName.tsx b/src/sentry/static/sentry/app/utils/getDisplayName.tsx
index 09dd797148..d773b5176b 100644
--- a/src/sentry/static/sentry/app/utils/getDisplayName.tsx
+++ b/src/sentry/static/sentry/app/utils/getDisplayName.tsx
@@ -1,6 +1,8 @@
 // Attempts to get a display name from a Component
 //
 // Use for HoCs
-export default function getDisplayName(WrappedComponent: React.ComponentType): string {
+export default function getDisplayName<Props = {}>(
+  WrappedComponent: React.ComponentType<Props>
+): string {
   return WrappedComponent.displayName || WrappedComponent.name || 'Component';
 }
diff --git a/src/sentry/static/sentry/app/utils/withApi.jsx b/src/sentry/static/sentry/app/utils/withApi.tsx
similarity index 52%
rename from src/sentry/static/sentry/app/utils/withApi.jsx
rename to src/sentry/static/sentry/app/utils/withApi.tsx
index 007d760fa6..660f973efd 100644
--- a/src/sentry/static/sentry/app/utils/withApi.jsx
+++ b/src/sentry/static/sentry/app/utils/withApi.tsx
@@ -6,8 +6,10 @@ import getDisplayName from 'app/utils/getDisplayName';
 /**
  * HoC that provides "api" client when mounted, and clears API requests when component is unmounted
  */
-const withApi = WrappedComponent => {
-  class WithApi extends React.Component {
+const withApi = <P extends object>(WrappedComponent: React.ComponentType<P>) => {
+  return class extends React.Component<Omit<P, 'api'>> {
+    static displayName = `withApi(${getDisplayName(WrappedComponent)})`;
+
     constructor(props) {
       super(props);
       this.api = new Client();
@@ -15,14 +17,14 @@ const withApi = WrappedComponent => {
     componentWillUnmount() {
       this.api.clear();
     }
-    render() {
-      return <WrappedComponent api={this.api} {...this.props} />;
-    }
-  }
 
-  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;
+    // TODO(ts): Update this when API client is typed
+    private api: any;
 
-  return WithApi;
+    render() {
+      return <WrappedComponent api={this.api as any} {...this.props as P} />;
+    }
+  };
 };
 
 export default withApi;
diff --git a/src/sentry/static/sentry/app/utils/withConfig.jsx b/src/sentry/static/sentry/app/utils/withConfig.tsx
similarity index 78%
rename from src/sentry/static/sentry/app/utils/withConfig.jsx
rename to src/sentry/static/sentry/app/utils/withConfig.tsx
index 43d67e6a54..0b3ca3d4ab 100644
--- a/src/sentry/static/sentry/app/utils/withConfig.jsx
+++ b/src/sentry/static/sentry/app/utils/withConfig.tsx
@@ -7,7 +7,7 @@ import ConfigStore from 'app/stores/configStore';
 /**
  * Higher order component that passes the config object to the wrapped component
  */
-const withConfig = WrappedComponent =>
+const withConfig = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
   createReactClass({
     displayName: `withConfig(${getDisplayName(WrappedComponent)})`,
     mixins: [Reflux.listenTo(ConfigStore, 'onUpdate')],
@@ -24,7 +24,9 @@ const withConfig = WrappedComponent =>
     },
 
     render() {
-      return <WrappedComponent config={this.state.config} {...this.props} />;
+      return (
+        <WrappedComponent config={this.state.config as object} {...this.props as P} />
+      );
     },
   });
 
diff --git a/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx b/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
similarity index 80%
rename from src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
rename to src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
index 56ec82876f..ae350f77df 100644
--- a/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
+++ b/src/sentry/static/sentry/app/utils/withGlobalSelection.tsx
@@ -4,12 +4,15 @@ import createReactClass from 'create-react-class';
 
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import getDisplayName from 'app/utils/getDisplayName';
+import {GlobalSelection} from 'app/types';
 
 /**
  * Higher order component that uses GlobalSelectionStore and provides the
  * active project
  */
-const withGlobalSelection = WrappedComponent =>
+const withGlobalSelection = <P extends object>(
+  WrappedComponent: React.ComponentType<P>
+) =>
   createReactClass({
     displayName: `withGlobalSelection(${getDisplayName(WrappedComponent)})`,
     mixins: [Reflux.listenTo(GlobalSelectionStore, 'onUpdate')],
@@ -41,9 +44,9 @@ const withGlobalSelection = WrappedComponent =>
       const {forceUrlSync, ...selection} = this.state.selection;
       return (
         <WrappedComponent
-          forceUrlSync={forceUrlSync}
-          selection={selection}
-          {...this.props}
+          forceUrlSync={forceUrlSync as boolean}
+          selection={selection as GlobalSelection}
+          {...this.props as P}
         />
       );
     },
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.tsx
similarity index 73%
rename from src/sentry/static/sentry/app/utils/withLatestContext.jsx
rename to src/sentry/static/sentry/app/utils/withLatestContext.tsx
index 0f6732bce4..69c8e02020 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.tsx
@@ -8,11 +8,9 @@ import LatestContextStore from 'app/stores/latestContextStore';
 import SentryTypes from 'app/sentryTypes';
 import getDisplayName from 'app/utils/getDisplayName';
 import withOrganizations from 'app/utils/withOrganizations';
+import {Project, Organization} from 'app/types';
 
-// HoC that returns most usable organization + project
-// This means your org if you only have 1 org, or
-// last accessed organization/project
-const withLatestContext = WrappedComponent =>
+const withLatestContext = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
   withOrganizations(
     createReactClass({
       displayName: `withLatestContext(${getDisplayName(WrappedComponent)})`,
@@ -24,7 +22,12 @@ const withLatestContext = WrappedComponent =>
       render() {
         const {organizations} = this.props;
         const {latestContext} = this.state;
-        const {organization, project, lastRoute} = latestContext || {};
+        const {
+          organization,
+          project,
+          lastRoute,
+        }: {organization?: Organization; project?: Project; lastRoute?: string} =
+          latestContext || {};
 
         // Even though org details exists in LatestContextStore,
         // fetch organization from OrganizationsStore so that we can
@@ -42,11 +45,11 @@ const withLatestContext = WrappedComponent =>
         // project from `latestContext`
         return (
           <WrappedComponent
-            organizations={organizations}
-            organization={latestOrganization}
-            project={project}
-            lastRoute={lastRoute}
-            {...this.props}
+            organizations={organizations as Organization[]}
+            organization={latestOrganization as Organization}
+            project={project as Project}
+            lastRoute={lastRoute as string}
+            {...this.props as P}
           />
         );
       },
diff --git a/src/sentry/static/sentry/app/utils/withOrganization.jsx b/src/sentry/static/sentry/app/utils/withOrganization.tsx
similarity index 53%
rename from src/sentry/static/sentry/app/utils/withOrganization.jsx
rename to src/sentry/static/sentry/app/utils/withOrganization.tsx
index e67c9755ab..a7fff50a77 100644
--- a/src/sentry/static/sentry/app/utils/withOrganization.jsx
+++ b/src/sentry/static/sentry/app/utils/withOrganization.tsx
@@ -2,12 +2,10 @@ import React from 'react';
 
 import SentryTypes from 'app/sentryTypes';
 import getDisplayName from 'app/utils/getDisplayName';
+import {Organization} from 'app/types';
 
-/**
- * Currently wraps component with organization from context
- */
-const withOrganization = WrappedComponent =>
-  class extends React.Component {
+const withOrganization = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
+  class extends React.Component<Omit<P, 'organization'>> {
     static displayName = `withOrganization(${getDisplayName(WrappedComponent)})`;
     static contextTypes = {
       organization: SentryTypes.Organization,
@@ -15,7 +13,10 @@ const withOrganization = WrappedComponent =>
 
     render() {
       return (
-        <WrappedComponent organization={this.context.organization} {...this.props} />
+        <WrappedComponent
+          organization={this.context.organization as Organization}
+          {...this.props as P}
+        />
       );
     }
   };
diff --git a/src/sentry/static/sentry/app/utils/withOrganizations.jsx b/src/sentry/static/sentry/app/utils/withOrganizations.tsx
similarity index 63%
rename from src/sentry/static/sentry/app/utils/withOrganizations.jsx
rename to src/sentry/static/sentry/app/utils/withOrganizations.tsx
index e4f6c21028..e40d9df040 100644
--- a/src/sentry/static/sentry/app/utils/withOrganizations.jsx
+++ b/src/sentry/static/sentry/app/utils/withOrganizations.tsx
@@ -4,8 +4,9 @@ import createReactClass from 'create-react-class';
 
 import getDisplayName from 'app/utils/getDisplayName';
 import OrganizationsStore from 'app/stores/organizationsStore';
+import {Organization} from 'app/types';
 
-const withOrganizations = WrappedComponent =>
+const withOrganizations = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
   createReactClass({
     displayName: `withOrganizations(${getDisplayName(WrappedComponent)})`,
     mixins: [Reflux.connect(OrganizationsStore, 'organizations')],
@@ -13,9 +14,9 @@ const withOrganizations = WrappedComponent =>
     render() {
       return (
         <WrappedComponent
-          organizationsLoading={!OrganizationsStore.loaded}
-          organizations={this.state.organizations}
-          {...this.props}
+          organizationsLoading={!OrganizationsStore.loaded as boolean}
+          organizations={this.state.organizations as Organization[]}
+          {...this.props as P}
         />
       );
     },
diff --git a/src/sentry/static/sentry/app/utils/withPlugins.jsx b/src/sentry/static/sentry/app/utils/withPlugins.tsx
similarity index 87%
rename from src/sentry/static/sentry/app/utils/withPlugins.jsx
rename to src/sentry/static/sentry/app/utils/withPlugins.tsx
index 01af2013b6..398f66c27a 100644
--- a/src/sentry/static/sentry/app/utils/withPlugins.jsx
+++ b/src/sentry/static/sentry/app/utils/withPlugins.tsx
@@ -10,12 +10,14 @@ import SentryTypes from 'app/sentryTypes';
 
 import withOrganization from 'app/utils/withOrganization';
 import withProject from 'app/utils/withProject';
+import {Plugin} from 'app/types';
 
 /**
  * Higher order component that fetches list of plugins and
  * passes PluginsStore to component as `plugins`
  */
-const withPlugins = WrappedComponent =>
+
+const withPlugins = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
   withOrganization(
     withProject(
       createReactClass({
@@ -30,7 +32,7 @@ const withPlugins = WrappedComponent =>
           this.fetchPlugins();
         },
 
-        componentDidUpdate(prevProps, prevState, prevContext) {
+        componentDidUpdate(prevProps, _prevState, prevContext) {
           const {organization, project} = this.props;
 
           // Only fetch plugins when a org slug or project slug has changed
@@ -70,7 +72,12 @@ const withPlugins = WrappedComponent =>
         },
 
         render() {
-          return <WrappedComponent {...this.props} plugins={this.state.store} />;
+          return (
+            <WrappedComponent
+              {...this.props as P}
+              plugins={this.state.store as Plugin[]}
+            />
+          );
         },
       })
     )
diff --git a/src/sentry/static/sentry/app/utils/withProject.jsx b/src/sentry/static/sentry/app/utils/withProject.tsx
similarity index 55%
rename from src/sentry/static/sentry/app/utils/withProject.jsx
rename to src/sentry/static/sentry/app/utils/withProject.tsx
index 5f0bca8522..1348675bd6 100644
--- a/src/sentry/static/sentry/app/utils/withProject.jsx
+++ b/src/sentry/static/sentry/app/utils/withProject.tsx
@@ -2,19 +2,25 @@ import React from 'react';
 
 import SentryTypes from 'app/sentryTypes';
 import getDisplayName from 'app/utils/getDisplayName';
+import {Project} from 'app/types';
 
 /**
  * Currently wraps component with project from context
  */
-const withProject = WrappedComponent =>
-  class extends React.Component {
+const withProject = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
+  class extends React.Component<Omit<P, 'project'>> {
     static displayName = `withProject(${getDisplayName(WrappedComponent)})`;
     static contextTypes = {
       project: SentryTypes.Project,
     };
 
     render() {
-      return <WrappedComponent project={this.context.project} {...this.props} />;
+      return (
+        <WrappedComponent
+          project={this.context.project as Project}
+          {...this.props as P}
+        />
+      );
     }
   };
 
diff --git a/src/sentry/static/sentry/app/utils/withProjects.jsx b/src/sentry/static/sentry/app/utils/withProjects.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/utils/withProjects.jsx
rename to src/sentry/static/sentry/app/utils/withProjects.tsx
index 5cdd2a047e..9e200fa4e7 100644
--- a/src/sentry/static/sentry/app/utils/withProjects.jsx
+++ b/src/sentry/static/sentry/app/utils/withProjects.tsx
@@ -5,11 +5,16 @@ import createReactClass from 'create-react-class';
 import getDisplayName from 'app/utils/getDisplayName';
 import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
+import {Project} from 'app/types';
 
 /**
  * Higher order component that uses ProjectsStore and provides a list of projects
  */
-const withProjects = WrappedComponent =>
+type Props = {
+  projects: Project[];
+};
+
+const withProjects = <P extends Props>(WrappedComponent: React.ComponentType<P>) =>
   createReactClass({
     displayName: `withProjects(${getDisplayName(WrappedComponent)})`,
     propTypes: {
diff --git a/src/sentry/static/sentry/app/utils/withSavedSearches.jsx b/src/sentry/static/sentry/app/utils/withSavedSearches.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/utils/withSavedSearches.jsx
rename to src/sentry/static/sentry/app/utils/withSavedSearches.tsx
index 404a192f4c..aa0558b6b0 100644
--- a/src/sentry/static/sentry/app/utils/withSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/utils/withSavedSearches.tsx
@@ -4,11 +4,13 @@ import createReactClass from 'create-react-class';
 
 import SavedSearchesStore from 'app/stores/savedSearchesStore';
 import getDisplayName from 'app/utils/getDisplayName';
+import {SavedSearch} from 'app/types';
 
 /**
  * Currently wraps component with organization from context
  */
-const withSavedSearches = WrappedComponent =>
+
+const withSavedSearches = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
   createReactClass({
     displayName: `withSavedSearches(${getDisplayName(WrappedComponent)})`,
     mixins: [Reflux.listenTo(SavedSearchesStore, 'onUpdate')],
@@ -45,10 +47,10 @@ const withSavedSearches = WrappedComponent =>
 
       return (
         <WrappedComponent
-          savedSearches={savedSearches}
-          savedSearchLoading={isLoading}
-          savedSearch={savedSearch}
-          {...this.props}
+          savedSearches={savedSearches as SavedSearch[]}
+          savedSearchLoading={isLoading as boolean}
+          savedSearch={savedSearch as SavedSearch | null}
+          {...this.props as P}
         />
       );
     },
diff --git a/src/sentry/static/sentry/app/utils/withSentryAppComponents.jsx b/src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx
similarity index 56%
rename from src/sentry/static/sentry/app/utils/withSentryAppComponents.jsx
rename to src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx
index 61269235f9..25caf93891 100644
--- a/src/sentry/static/sentry/app/utils/withSentryAppComponents.jsx
+++ b/src/sentry/static/sentry/app/utils/withSentryAppComponents.tsx
@@ -5,7 +5,17 @@ import createReactClass from 'create-react-class';
 import getDisplayName from 'app/utils/getDisplayName';
 import SentryAppComponentsStore from 'app/stores/sentryAppComponentsStore';
 
-const withSentryAppComponents = (WrappedComponent, {componentType} = {}) =>
+type Options = {
+  componentType?: 'stacktrace-link';
+};
+
+// TODO(ts): Update when component type is defined
+type Component = {};
+
+const withSentryAppComponents = <P extends object>(
+  WrappedComponent: React.ComponentType<P>,
+  {componentType}: Options = {}
+) =>
   createReactClass({
     displayName: `withSentryAppComponents(${getDisplayName(WrappedComponent)})`,
     mixins: [Reflux.connect(SentryAppComponentsStore, 'components')],
@@ -13,8 +23,10 @@ const withSentryAppComponents = (WrappedComponent, {componentType} = {}) =>
     render() {
       return (
         <WrappedComponent
-          components={SentryAppComponentsStore.getComponentByType(componentType)}
-          {...this.props}
+          components={
+            SentryAppComponentsStore.getComponentByType(componentType) as Component[]
+          }
+          {...this.props as P}
         />
       );
     },
diff --git a/src/sentry/static/sentry/app/utils/withTeams.jsx b/src/sentry/static/sentry/app/utils/withTeams.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/utils/withTeams.jsx
rename to src/sentry/static/sentry/app/utils/withTeams.tsx
index cf3658d76a..91faf93c87 100644
--- a/src/sentry/static/sentry/app/utils/withTeams.jsx
+++ b/src/sentry/static/sentry/app/utils/withTeams.tsx
@@ -5,11 +5,12 @@ import createReactClass from 'create-react-class';
 import getDisplayName from 'app/utils/getDisplayName';
 import SentryTypes from 'app/sentryTypes';
 import TeamStore from 'app/stores/teamStore';
+import {Team} from 'app/types';
 
 /**
  * Higher order component that uses TeamStore and provides a list of teams
  */
-const withTeams = WrappedComponent =>
+const withTeams = <P extends object>(WrappedComponent: React.ComponentType<P>) =>
   createReactClass({
     displayName: `withTeams(${getDisplayName(WrappedComponent)})`,
     propTypes: {
@@ -28,7 +29,7 @@ const withTeams = WrappedComponent =>
       });
     },
     render() {
-      return <WrappedComponent {...this.props} teams={this.state.teams} />;
+      return <WrappedComponent {...this.props as P} teams={this.state.teams as Team[]} />;
     },
   });
 
diff --git a/src/sentry/static/sentry/app/views/discover/index.tsx b/src/sentry/static/sentry/app/views/discover/index.tsx
index c5d470ac6c..0090fd54c9 100644
--- a/src/sentry/static/sentry/app/views/discover/index.tsx
+++ b/src/sentry/static/sentry/app/views/discover/index.tsx
@@ -9,7 +9,7 @@ import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
-import {Organization} from 'app/types';
+import {GlobalSelection, Organization} from 'app/types';
 
 import Discover from './discover';
 import createQueryBuilder from './queryBuilder';
@@ -22,7 +22,7 @@ import {
 } from './utils';
 
 import {DiscoverWrapper} from './styles';
-import {GlobalSelection, SavedQuery} from './types';
+import {SavedQuery} from './types';
 
 const AlertAsAny: any = Alert;
 
diff --git a/src/sentry/static/sentry/app/views/discover/result/table.tsx b/src/sentry/static/sentry/app/views/discover/result/table.tsx
index 524d32d264..8e342fd519 100644
--- a/src/sentry/static/sentry/app/views/discover/result/table.tsx
+++ b/src/sentry/static/sentry/app/views/discover/result/table.tsx
@@ -26,8 +26,8 @@ type Props = {
   organization: Organization;
   data: SnubaResult;
   query: Query;
-  height?: number;
-  width?: number;
+  height: number | null;
+  width: number | null;
 };
 
 /**
@@ -233,7 +233,7 @@ class ResultTable extends React.Component<Props> {
     return Math.ceil(context.measureText(text).width) + 5;
   };
 
-  getMaxVisibleRows = (elementHeight?: number) => {
+  getMaxVisibleRows = (elementHeight: number | null) => {
     if (!elementHeight) {
       return MIN_VISIBLE_ROWS;
     }
diff --git a/src/sentry/static/sentry/app/views/discover/types.tsx b/src/sentry/static/sentry/app/views/discover/types.tsx
index ec734fdf71..fbf4426902 100644
--- a/src/sentry/static/sentry/app/views/discover/types.tsx
+++ b/src/sentry/static/sentry/app/views/discover/types.tsx
@@ -53,14 +53,3 @@ export type DiscoverBaseProps = {
   columns: Column[];
   disabled: boolean;
 };
-
-export type GlobalSelection = {
-  projects: number[];
-  environments: string[];
-  datetime: {
-    start: string;
-    end: string;
-    period: string;
-    utc: boolean;
-  };
-};
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
index 769d21e6e3..921bfed504 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
@@ -169,7 +169,7 @@ type RuleFormContainerProps = {
   orgId: string;
   projectId: string;
   incidentRuleId?: string;
-  initialData?: {[key: string]: string | number | boolean};
+  initialData?: {[key: string]: string | number | boolean | number[]};
   onSubmitSuccess?: Function;
 };
 function RuleFormContainer({
