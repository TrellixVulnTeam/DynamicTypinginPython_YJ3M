commit 82aa90c40cb87599d4e4aa99a147bd6181196d3e
Author: Mark Story <mark@mark-story.com>
Date:   Wed Apr 17 09:43:59 2019 -0400

    feat(ui) Update design of issue searchbar (#12802)
    
    Update the visuals of the issue searchbar to match the latest mocks.
    I've moved the various buttons into a container div that exists outside
    the form to address the submit issues that folks are having.
    
    I've duplicated a bunch of display logic in SmartSearchBar. I was aiming
    to make the code easy to clean-up later as I've found that larger
    conditionals are easier to remove than smaller ones.
    
    Fixes SEN-474

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index 3b011661e8..8a0ba98efd 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -107,6 +107,8 @@ class SmartSearchBar extends React.Component {
 
     onSavedRecentSearch: PropTypes.func,
 
+    onSidebarToggle: PropTypes.func,
+
     // If true, excludes the environment tag from the autocompletion list
     // This is because we don't want to treat environment as a tag in some places
     // such as the stream view where it is a top level concept
@@ -140,6 +142,7 @@ class SmartSearchBar extends React.Component {
     placeholder: t('Search for events, users, tags, and everything else.'),
     supportedTags: {},
     defaultSearchItems: [],
+    hasPinnedSearch: false,
   };
 
   constructor(props) {
@@ -635,29 +638,23 @@ class SmartSearchBar extends React.Component {
     const {
       className,
       dropdownClassName,
+      hasPinnedSearch,
       organization,
       placeholder,
       disabled,
+      onSidebarToggle,
     } = this.props;
 
-    return (
-      <div
-        className={classNames(
-          'search',
-          {
-            disabled,
-          },
-          className
-        )}
-      >
-        <form className="form-horizontal" onSubmit={this.onSubmit}>
-          <div>
-            <input
+    if (hasPinnedSearch) {
+      return (
+        <Container isDisabled={disabled}>
+          <form onSubmit={this.onSubmit}>
+            <StyledInput
               type="text"
               className="search-input form-control"
               placeholder={placeholder}
               name="query"
-              ref={this.searchInput}
+              innerRef={this.searchInput}
               autoComplete="off"
               value={this.state.query}
               onFocus={this.onQueryFocus}
@@ -668,35 +665,72 @@ class SmartSearchBar extends React.Component {
               onClick={this.onInputClick}
               disabled={disabled}
             />
-            <span className="icon-search" />
-
-            {this.props.hasPinnedSearch && (
-              <CreateSavedSearchButton
-                query={this.state.query}
-                organization={organization}
-              />
+            {(this.state.loading || this.state.searchItems.length > 0) && (
+              <DropdownWrapper visible={this.state.dropdownVisible}>
+                <SearchDropdown
+                  className={dropdownClassName}
+                  items={this.state.searchItems}
+                  onClick={this.onAutoComplete}
+                  loading={this.state.loading}
+                  searchSubstring={this.state.searchTerm}
+                />
+              </DropdownWrapper>
             )}
-            {this.state.query !== '' && (
-              <React.Fragment>
-                {this.props.hasPinnedSearch && (
-                  <Tooltip title={t('Pin this search')}>
-                    <PinButton
-                      type="button"
-                      borderless
-                      size="zero"
-                      onClick={this.onTogglePinnedSearch}
-                    >
-                      <PinIcon isPinned={!!this.props.pinnedSearch} src="icon-pin" />
-                    </PinButton>
-                  </Tooltip>
-                )}
-                <a className="search-clear-form" onClick={this.clearSearch}>
-                  <span className="icon-circle-cross" />
-                </a>
-              </React.Fragment>
-            )}
-          </div>
+          </form>
+          <ButtonBar>
+            <CreateSavedSearchButton
+              query={this.state.query}
+              organization={organization}
+            />
+            <Tooltip title={t('Pin this search')}>
+              <Button
+                type="button"
+                borderless
+                aria-label={t('Pin this search')}
+                size="zero"
+                onClick={this.onTogglePinnedSearch}
+              >
+                <PinIcon isPinned={!!this.props.pinnedSearch} src="icon-pin" />
+              </Button>
+            </Tooltip>
+            <SidebarButton
+              borderless
+              size="zero"
+              aria-label={t('Toggle search builder')}
+              icon="icon-sliders"
+              onClick={onSidebarToggle}
+            />
+          </ButtonBar>
+        </Container>
+      );
+    }
+    const classes = classNames('search', {disabled}, className);
 
+    return (
+      <div className={classes}>
+        <form className="form-horizontal" onSubmit={this.onSubmit}>
+          <input
+            type="text"
+            className="search-input form-control"
+            placeholder={placeholder}
+            name="query"
+            ref={this.searchInput}
+            autoComplete="off"
+            value={this.state.query}
+            onFocus={this.onQueryFocus}
+            onBlur={this.onQueryBlur}
+            onKeyUp={this.onKeyUp}
+            onKeyDown={this.onKeyDown}
+            onChange={this.onQueryChange}
+            onClick={this.onInputClick}
+            disabled={disabled}
+          />
+          <span className="icon-search" />
+          {this.state.query !== '' && (
+            <a className="search-clear-form" onClick={this.clearSearch}>
+              <span className="icon-circle-cross" />
+            </a>
+          )}
           {(this.state.loading || this.state.searchItems.length > 0) && (
             <DropdownWrapper visible={this.state.dropdownVisible}>
               <SearchDropdown
@@ -744,13 +778,6 @@ const SmartSearchBarContainer = withApi(
   )
 );
 
-const PinButton = styled(Button)`
-  margin-right: ${space(0.5)};
-  position: absolute;
-  right: 26px;
-  top: 10px;
-`;
-
 const PinIcon = styled(InlineSvg)`
   fill: ${p => (p.isPinned ? p.theme.blueLight : p.theme.gray2)};
   &:hover {
@@ -758,9 +785,62 @@ const PinIcon = styled(InlineSvg)`
   }
 `;
 
+const Container = styled.div`
+  position: relative;
+  flex-grow: 1;
+  z-index: ${p => p.theme.zIndex.dropdown};
+`;
+
+// Buttons are 18px wide, and we want 3px gutters
+const buttonBarWidth = 18 * 3 + 3 * 3;
+
+const ButtonBar = styled.div`
+  position: absolute;
+  top: 10px;
+  right: ${space(1)};
+  display: flex;
+  justify-content: space-between;
+  width: ${buttonBarWidth}px;
+
+  button {
+    background: transparent;
+  }
+`;
+
 const DropdownWrapper = styled('div')`
   display: ${p => (p.visible ? 'block' : 'none')};
 `;
 
+const StyledInput = styled.input`
+  border: 1px solid ${p => p.theme.borderLight};
+  border-radius: 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0;
+  box-shadow: inset ${p => p.theme.dropShadowLight};
+  color: ${p => p.theme.foreground};
+
+  font-size: ${p => p.theme.fontSizeMedium};
+  height: 38px;
+  width: 100%;
+
+  /* pad the right side of the input to accomodate the button bar */
+  padding: ${space(1)} ${buttonBarWidth + 12}px ${space(1)} ${space(1)};
+
+  &::placeholder {
+    color: ${p => p.theme.gray1};
+  }
+  &:focus {
+    border-color: ${p => p.theme.borderDark};
+    border-bottom-right-radius: 0;
+  }
+`;
+
+const SidebarButton = styled(Button)`
+  & svg {
+    color: ${p => p.theme.gray2};
+  }
+  .show-sidebar & svg {
+    color: ${p => p.theme.blueLight};
+  }
+`;
+
 export default SmartSearchBarContainer;
 export {SmartSearchBar};
diff --git a/src/sentry/static/sentry/app/icons/icon-sliders.svg b/src/sentry/static/sentry/app/icons/icon-sliders.svg
index d5d173dd41..d94ee3a49f 100644
--- a/src/sentry/static/sentry/app/icons/icon-sliders.svg
+++ b/src/sentry/static/sentry/app/icons/icon-sliders.svg
@@ -1 +1 @@
-<svg width="13" height="12" xmlns="http://www.w3.org/2000/svg"><g transform="translate(1 1)" stroke="#9F92AD" stroke-width="1.6" fill="none" fill-rule="evenodd"><path d="M0 1.667h1.833m3.668 0H11M0 8.333h5.5m3.667 0H11" stroke-opacity=".502" stroke-linecap="round"/><ellipse cx="3.929" cy="1.667" rx="1.571" ry="1.667"/><ellipse cx="7.071" cy="8.333" rx="1.571" ry="1.667"/></g></svg>
\ No newline at end of file
+<svg width="13" height="12" xmlns="http://www.w3.org/2000/svg"><g transform="translate(1 1)" stroke="currentColor" stroke-width="1.6" fill="none" fill-rule="evenodd"><path d="M0 1.667h1.833m3.668 0H11M0 8.333h5.5m3.667 0H11" stroke-opacity=".502" stroke-linecap="round"/><ellipse cx="3.929" cy="1.667" rx="1.571" ry="1.667"/><ellipse cx="7.071" cy="8.333" rx="1.571" ry="1.667"/></g></svg>
diff --git a/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx b/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx
index fe174bb604..3926c804d1 100644
--- a/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx
+++ b/src/sentry/static/sentry/app/views/stream/createSavedSearchButton.jsx
@@ -97,6 +97,7 @@ class CreateSavedSearchButton extends React.Component {
               type="button"
               onClick={this.onToggle}
               data-test-id="save-current-search"
+              aria-label={t('Add to organization filter list')}
               icon="icon-add-to-list"
             />
           </Tooltip>
@@ -152,10 +153,6 @@ class CreateSavedSearchButton extends React.Component {
 }
 
 const StyledButton = styled(Button)`
-  position: absolute;
-  top: 9px;
-  right: 52px;
-
   & svg {
     color: ${p => p.theme.gray6};
   }
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index e4e82b1885..291fc4f446 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import Feature from 'app/components/acl/feature';
 import SentryTypes from 'app/sentryTypes';
@@ -73,6 +74,7 @@ class StreamFilters extends React.Component {
       tagValueLoader,
       tags,
     } = this.props;
+    const hasOrgSavedSearches = organization.features.includes('org-saved-searches');
 
     return (
       <PageHeader>
@@ -97,7 +99,7 @@ class StreamFilters extends React.Component {
             <QueryCount count={queryCount} max={queryMaxCount} />
           </PageHeading>
         </Feature>
-        <div className="search-container">
+        <SearchContainer isWide={hasOrgSavedSearches}>
           <SortOptions sort={sort} onSelect={onSortChange} />
 
           <Feature features={['org-saved-searches']}>
@@ -120,14 +122,17 @@ class StreamFilters extends React.Component {
             supportedTags={tags}
             tagValueLoader={tagValueLoader}
             savedSearch={savedSearch}
+            onSidebarToggle={onSidebarToggle}
           />
-          <a className="btn btn-default toggle-stream-sidebar" onClick={onSidebarToggle}>
-            <span className="icon-filter" />
-          </a>
-        </div>
+        </SearchContainer>
       </PageHeader>
     );
   }
 }
 
+const SearchContainer = styled.div`
+  display: flex;
+  width: ${p => (p.isWide ? '70%' : '58.3%')};
+`;
+
 export default StreamFilters;
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index ea13fb7987..130cb0a402 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -65,6 +65,7 @@ class SearchBar extends React.Component {
     savedSearch: SentryTypes.SavedSearch,
     organization: SentryTypes.Organization.isRequired,
     tagValueLoader: PropTypes.func.isRequired,
+    onSidebarToggle: PropTypes.func,
   };
 
   state = {
@@ -149,21 +150,31 @@ class SearchBar extends React.Component {
     const {
       tagValueLoader, // eslint-disable-line no-unused-vars
       savedSearch,
+      onSidebarToggle,
       ...props
     } = this.props;
+    const hasPinnedSearch = this.hasOrgSavedSearches();
 
     return (
-      <SmartSearchBar
-        onGetTagValues={this.getTagValues}
-        defaultSearchItems={this.state.defaultSearchItems}
-        maxSearchItems={5}
-        hasPinnedSearch={this.hasOrgSavedSearches()}
-        savedSearchType={SEARCH_TYPES.ISSUE}
-        displayRecentSearches={this.hasRecentSearches()}
-        onSavedRecentSearch={this.handleSavedRecentSearch}
-        pinnedSearch={savedSearch && savedSearch.isPinned ? savedSearch : null}
-        {...props}
-      />
+      <React.Fragment>
+        <SmartSearchBar
+          onGetTagValues={this.getTagValues}
+          defaultSearchItems={this.state.defaultSearchItems}
+          maxSearchItems={5}
+          hasPinnedSearch={hasPinnedSearch}
+          savedSearchType={SEARCH_TYPES.ISSUE}
+          displayRecentSearches={this.hasRecentSearches()}
+          onSavedRecentSearch={this.handleSavedRecentSearch}
+          onSidebarToggle={onSidebarToggle}
+          pinnedSearch={savedSearch && savedSearch.isPinned ? savedSearch : null}
+          {...props}
+        />
+        {!hasPinnedSearch && onSidebarToggle && (
+          <a className="btn btn-default toggle-stream-sidebar" onClick={onSidebarToggle}>
+            <span className="icon-filter" />
+          </a>
+        )}
+      </React.Fragment>
     );
   }
 }
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index 33db02513e..2730849270 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {shallow, mount} from 'enzyme';
+import {Client} from 'app/api';
 
 import {SmartSearchBar, addSpace, removeSpace} from 'app/components/smartSearchBar';
 import TagStore from 'app/stores/tagStore';
@@ -44,9 +45,7 @@ describe('SmartSearchBar', function() {
     supportedTags = {};
     organization = TestStubs.Organization({id: '123'});
 
-    options = {
-      context: {organization},
-    };
+    options = TestStubs.routerContext([{organization}]);
 
     environmentTagValuesMock = MockApiClient.addMockResponse({
       url: '/projects/123/456/tags/environment/values/',
@@ -184,6 +183,24 @@ describe('SmartSearchBar', function() {
 
       expect(searchBar.state.dropdownVisible).toBe(true);
     });
+
+    it('displays dropdown in hasPinnedSearch mode', function() {
+      const searchBar = shallow(
+        <SmartSearchBar
+          orgId="123"
+          projectId="456"
+          supportedTags={supportedTags}
+          onGetTagValues={tagValuesMock}
+          hasPinnedSearch
+        />,
+        options
+      ).instance();
+      expect(searchBar.state.dropdownVisible).toBe(false);
+
+      searchBar.onQueryFocus();
+
+      expect(searchBar.state.dropdownVisible).toBe(true);
+    });
   });
 
   describe('onQueryBlur()', function() {
@@ -260,6 +277,26 @@ describe('SmartSearchBar', function() {
       await tick();
       expect(props.onSearch).toHaveBeenCalledWith('');
     });
+
+    it('invokes onSearch() on submit in hasPinnedSearch mode', function() {
+      const stubbedOnSearch = jest.fn();
+      const wrapper = mount(
+        <SmartSearchBar
+          onSearch={stubbedOnSearch}
+          organization={organization}
+          orgId="123"
+          projectId="456"
+          query="is:unresolved"
+          supportedTags={supportedTags}
+          hasPinnedSearch
+        />,
+        options
+      );
+
+      wrapper.find('form').simulate('submit');
+
+      expect(stubbedOnSearch).toHaveBeenCalledWith('is:unresolved');
+    });
   });
 
   it('handles an empty query', function() {
@@ -387,4 +424,65 @@ describe('SmartSearchBar', function() {
       expect(mock).not.toHaveBeenCalled();
     });
   });
+
+  describe('onTogglePinnedSearch', function() {
+    let pinRequest, unpinRequest;
+    beforeEach(function() {
+      pinRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'PUT',
+        body: [],
+      });
+      unpinRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/pinned-searches/',
+        method: 'DELETE',
+        body: [],
+      });
+    });
+
+    it('adds pins', async function() {
+      const wrapper = mount(
+        <SmartSearchBar
+          api={new Client()}
+          organization={organization}
+          orgId={organization.slug}
+          projectId="456"
+          query="is:unresolved"
+          supportedTags={supportedTags}
+          savedSearchType={0}
+          hasPinnedSearch
+        />,
+        options
+      );
+      wrapper.find('button[aria-label="Pin this search"]').simulate('click');
+      await wrapper.update();
+
+      expect(pinRequest).toHaveBeenCalled();
+      expect(unpinRequest).not.toHaveBeenCalled();
+    });
+
+    it('removes pins', async function() {
+      const pinnedSearch = TestStubs.Search({isPinned: true});
+      const wrapper = mount(
+        <SmartSearchBar
+          api={new Client()}
+          organization={organization}
+          orgId={organization.slug}
+          projectId="456"
+          query="is:unresolved"
+          supportedTags={supportedTags}
+          savedSearchType={0}
+          pinnedSearch={pinnedSearch}
+          hasPinnedSearch
+        />,
+        options
+      );
+
+      wrapper.find('button[aria-label="Pin this search"]').simulate('click');
+      await wrapper.update();
+
+      expect(pinRequest).not.toHaveBeenCalled();
+      expect(unpinRequest).toHaveBeenCalled();
+    });
+  });
 });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 6e20869c4c..f64e633e43 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -250,7 +250,7 @@ describe('SearchBar', function() {
         organization,
       };
       const searchBar = mount(<SearchBar {...props} />, routerContext);
-      searchBar.find('PinButton').simulate('click');
+      searchBar.find('button[aria-label="Pin this search"]').simulate('click');
 
       expect(pinSearch).toHaveBeenLastCalledWith(
         expect.anything(),
@@ -275,7 +275,7 @@ describe('SearchBar', function() {
         pinnedSearch: {id: '1', query: 'url:"fu" '},
       };
       const searchBar = mount(<SearchBar {...props} />, routerContext);
-      searchBar.find('PinButton').simulate('click');
+      searchBar.find('button[aria-label="Pin this search"]').simulate('click');
 
       expect(unpinSearch).toHaveBeenLastCalledWith(
         expect.anything(),
