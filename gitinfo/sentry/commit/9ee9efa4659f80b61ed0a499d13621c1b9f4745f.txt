commit 9ee9efa4659f80b61ed0a499d13621c1b9f4745f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 19 19:40:04 2012 -0800

    Moved mailing of admins into a processor

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index cccd59563e..8bfe6ede8d 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -94,6 +94,7 @@ QUEUE = {
 
 # List of event handlers
 PROCESSORS = (
+    'sentry.processors.mail.MailProcessor',
 )
 
 # List of event aggregation views
diff --git a/sentry/manager.py b/sentry/manager.py
index 5af66352aa..aa7fdf4bf1 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -18,9 +18,10 @@ from django.db.models import Sum, F
 from sentry.conf import settings
 from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.signals import regression_signal
-from sentry.utils import get_db_engine, should_mail
+from sentry.utils import get_db_engine
 from sentry.utils.charts import has_charts
 from sentry.utils.compat.db import connections
+from sentry.processors.base import send_group_processors
 
 logger = logging.getLogger('sentry.errors')
 
@@ -342,10 +343,9 @@ class GroupManager(models.Manager, ChartMixin):
         if not is_sample:
             event.save()
 
-        # TODO: this should be moved into the processor framework
-        if is_new and should_mail(group):
-            regression_signal.send(sender=self.model, instance=group)
-            group.mail_admins()
+        regression_signal.send(sender=self.model, instance=group)
+
+        send_group_processors(group=group, event=event, is_new=is_new, is_sample=is_sample)
 
         return event
 
diff --git a/sentry/models.py b/sentry/models.py
index e501606dff..d7600f299d 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -20,7 +20,7 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import Sum, F
-from django.db.models.signals import post_syncdb, post_save
+from django.db.models.signals import post_syncdb
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
@@ -32,7 +32,6 @@ from sentry.utils import cached_property, \
                          MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField
 from sentry.templatetags.sentry_helpers import truncatechars
-import sentry.processors.base
 
 __all__ = ('Event', 'Group', 'Project')
 
@@ -605,11 +604,6 @@ def create_default_project(created_models, verbosity=2, **kwargs):
                 print 'done!'
 
 # Signal registration
-post_save.connect(
-    sentry.processors.base.post_save_processors,
-    sender=Event,
-    dispatch_uid="processors_post_save"
-)
 post_syncdb.connect(
     create_default_project,
     dispatch_uid="create_default_project"
diff --git a/sentry/processors/base.py b/sentry/processors/base.py
index 5755499bef..7bc60bc91f 100644
--- a/sentry/processors/base.py
+++ b/sentry/processors/base.py
@@ -8,13 +8,13 @@ sentry.processors.base
 from sentry.conf import settings
 from sentry.utils import InstanceManager
 
-__all__ = ('Processor', 'post_save_processors')
+__all__ = ('Processor', 'send_group_processors')
 
 
 class Processor(object):
     conditions = {}
 
-    def post_processing(self, event):
+    def post_process(self, event):
         """
         Called every time an event is created
         """
@@ -23,6 +23,6 @@ class Processor(object):
     handlers = InstanceManager(settings.PROCESSORS)
 
 
-def post_save_processors(sender, **kwargs):
+def send_group_processors(**kwargs):
     for processor in Processor.handlers.all():
-        processor.post_processing(sender)
+        processor.post_process(**kwargs)
diff --git a/sentry/processors/console.py b/sentry/processors/console.py
index 7d34decd32..b837e6b794 100644
--- a/sentry/processors/console.py
+++ b/sentry/processors/console.py
@@ -10,7 +10,7 @@ from .base import Processor
 
 
 class ConsoleProcessor(Processor):
-    def post_processing(self, event, **kwargs):
+    def post_process(self, event, **kwargs):
         print 'Received an event:'
         print '  ID:', event.event_id
         print '  Project:', event.project.name
diff --git a/sentry/processors/mail.py b/sentry/processors/mail.py
new file mode 100644
index 0000000000..e22bd411fd
--- /dev/null
+++ b/sentry/processors/mail.py
@@ -0,0 +1,88 @@
+"""
+sentry.processors.mail
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.mail import send_mail
+from django.template.loader import render_to_string
+from sentry.conf import settings
+
+from .base import Processor
+
+NOTSET = object()
+
+
+class MailProcessor(Processor):
+    def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
+                 send_to=NOTSET, *args, **kwargs):
+
+        super(MailProcessor, self).__init__(*args, **kwargs)
+
+        if min_level is NOTSET:
+            min_level = settings.MAIL_LEVEL
+        if include_loggers is NOTSET:
+            include_loggers = settings.MAIL_INCLUDE_LOGGERS
+        if exclude_loggers is NOTSET:
+            exclude_loggers = settings.MAIL_EXCLUDE_LOGGERS
+        if send_to is NOTSET:
+            send_to = settings.ADMINS
+
+        self.min_level = min_level
+        self.include_loggers = include_loggers
+        self.exclude_loggers = exclude_loggers
+        self.send_to = send_to
+        self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
+
+    def mail_admins(self, group, event, fail_silently=True):
+        interfaces = event.interfaces
+
+        if 'sentry.interfaces.Exception' in interfaces:
+            traceback = interfaces['sentry.interfaces.Exception'].to_string(event)
+        else:
+            traceback = None
+
+        http = interfaces.get('sentry.interfaces.Http')
+
+        if http:
+            ip_repr = (http.env.get('REMOTE_ADDR') in settings.INTERNAL_IPS and 'internal' or 'EXTERNAL')
+            subject = '%sError (%s IP): %s' % (self.subject_prefix, ip_repr, http.url)
+        else:
+            subject = '%sError: %s' % (self.subject_prefix, event.message)
+
+        if event.site:
+            subject = '[%s] %s' % (event.site, subject)
+
+        link = '%s%s' % (settings.URL_PREFIX, self.get_absolute_url())
+
+        body = render_to_string('sentry/emails/error.txt', {
+            'traceback': traceback,
+            'group': self,
+            'event': event,
+            'link': link,
+        })
+
+        send_mail(subject, body,
+                  settings.SERVER_EMAIL, self.send_to,
+                  fail_silently=fail_silently)
+
+    def should_mail(self, group, event):
+        if not self.send_to:
+            return False
+        if int(group.level) < self.min_level:
+            return False
+        if self.include_loggers is not None and group.logger not in self.include_loggers:
+            return False
+        if self.exclude_loggers and group.logger in self.exclude_loggers:
+            return False
+        return True
+
+    def post_process(self, group, event, is_new, is_sample, **kwargs):
+        if not is_sample:
+            return
+
+        if not self.should_mail(group, event):
+            return
+
+        self.mail_admins(group, event)
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index 9b26145793..0f2eb67653 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -174,16 +174,6 @@ class MockDjangoRequest(HttpRequest):
         return self.url
 
 
-def should_mail(group):
-    if int(group.level) < settings.MAIL_LEVEL:
-        return False
-    if settings.MAIL_INCLUDE_LOGGERS is not None and group.logger not in settings.MAIL_INCLUDE_LOGGERS:
-        return False
-    if settings.MAIL_EXCLUDE_LOGGERS and group.logger in settings.MAIL_EXCLUDE_LOGGERS:
-        return False
-    return True
-
-
 def to_unicode(value):
     try:
         value = unicode(force_unicode(value))
diff --git a/tests/processors/processor.py b/tests/processors/processor.py
index 01acd9f6fd..0441fb951f 100644
--- a/tests/processors/processor.py
+++ b/tests/processors/processor.py
@@ -6,5 +6,5 @@ class TestProcessor(Processor):
     def __init__(self, *args, **kwargs):
         self.called = 0
 
-    def post_processing(self, event):
+    def post_process(self, **kwargs):
         self.called += 1
diff --git a/tests/processors/tests.py b/tests/processors/tests.py
index 38b657f59a..9f3f9ae665 100644
--- a/tests/processors/tests.py
+++ b/tests/processors/tests.py
@@ -2,8 +2,9 @@
 
 from __future__ import absolute_import
 
-
+from mock import Mock
 from sentry.processors import Processor
+from sentry.processors.mail import MailProcessor
 from sentry.conf import settings
 
 from tests.base import TestCase
@@ -43,3 +44,37 @@ class SentryProcessorsTest(TestCase):
         proc_list = Processor.handlers.all()
         self.assertEqual(len(proc_list), 1)
         self.assertEqual(proc_list[0].called, 2)
+
+
+class MailProcessorTest(TestCase):
+    def test_should_mail(self):
+        # no admins
+        p = MailProcessor(send_to=())
+        self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
+
+        # not min level
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=2)
+        group = Mock()
+        group.level = 1
+        self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+        # not in inclusion
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, include_loggers=['foo'])
+        group = Mock()
+        group.level = 5
+        group.logger = 'root'
+        self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+        # in exclusion
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None, exclude_loggers=['root'])
+        group = Mock()
+        group.level = 5
+        group.logger = 'root'
+        self.assertFalse(p.should_mail(group=group, event=Mock()))
+
+        # in exclusion
+        p = MailProcessor(send_to=['foo@exampe.com'], min_level=None)
+        group = Mock()
+        group.level = 5
+        group.logger = 'root'
+        self.assertTrue(p.should_mail(group=group, event=Mock()))
