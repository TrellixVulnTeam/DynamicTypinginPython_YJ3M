commit d46213a3cb4fea1653724ac58bcd78e32a3dda05
Author: josh <josh@jrl.ninja>
Date:   Tue Feb 25 18:49:01 2020 +0000

    ref(py3): implement list coercion compat layer for map, filter, zip, and enforce via lint (#17270)

diff --git a/.travis.yml b/.travis.yml
index c7b91271cd..5ea405b3dc 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -133,7 +133,8 @@ matrix:
     # Proactive linting on 3.7 during the porting process
     - python: 3.7
       name: 'Linter (Python 3.7)'
-      install: pip install 'sentry-flake8>=0.2.0,<0.3.0'
+      # XXX: this must be synced with requirements-dev.txt
+      install: pip install 'sentry-flake8==0.3.0'
       # configuration for flake8 can be found in setup.cfg
       script: flake8
 
diff --git a/requirements-dev.txt b/requirements-dev.txt
index 25cd0632b7..7b7588a3ee 100644
--- a/requirements-dev.txt
+++ b/requirements-dev.txt
@@ -11,5 +11,5 @@ pytest-html==1.22.0
 pytest-sentry==0.1.1
 pytest-rerunfailures==8.0
 responses>=0.8.1,<0.9.0
-sentry-flake8==0.1.1
+sentry-flake8==0.3.0
 werkzeug==0.15.5
diff --git a/src/bitfield/admin.py b/src/bitfield/admin.py
index f2231df88a..3ec83c9234 100644
--- a/src/bitfield/admin.py
+++ b/src/bitfield/admin.py
@@ -22,9 +22,9 @@ class BitFieldListFilter(FieldListFilter):
         )
 
     def queryset(self, request, queryset):
-        filter = dict((p, bitor(F(p), v)) for p, v in six.iteritems(self.used_parameters))
+        _filter = dict((p, bitor(F(p), v)) for p, v in six.iteritems(self.used_parameters))
         try:
-            return queryset.filter(**filter)
+            return queryset.filter(**_filter)
         except ValidationError as e:
             raise IncorrectLookupParameters(e)
 
diff --git a/src/sentry/analytics/event.py b/src/sentry/analytics/event.py
index a413e4317d..496b37aa36 100644
--- a/src/sentry/analytics/event.py
+++ b/src/sentry/analytics/event.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import, print_function
+from sentry.utils.compat import map
 
 __all__ = ("Attribute", "Event", "Map")
 
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index a21e15c22e..de4ffd19c0 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -22,6 +22,7 @@ from sentry.models import (
 from sentry.utils import auth
 from sentry.utils.hashlib import hash_values
 from sentry.utils.sdk import bind_organization_context
+from sentry.utils.compat import map
 
 
 class OrganizationEventsError(Exception):
diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 17b362515a..a300eadd1f 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -7,6 +7,7 @@ from sentry.api.bases import OrganizationEndpoint, OrganizationEventsError
 from sentry.api.event_search import get_filter, InvalidSearchQuery
 from sentry.models.project import Project
 from sentry.snuba.discover import ReferenceEvent
+from sentry.utils.compat import map
 
 
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
@@ -44,7 +45,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             # Instead of using this parameter clients should use `issue.id`
             # in their query string.
             try:
-                group_ids = set(map(int, filter(None, group_ids)))
+                group_ids = set(map(int, [_f for _f in group_ids if _f]))
             except ValueError:
                 raise OrganizationEventsError("Invalid group parameter. Values must be numbers")
 
diff --git a/src/sentry/api/endpoints/assistant.py b/src/sentry/api/endpoints/assistant.py
index 166cf1c8e8..559bf9c49e 100644
--- a/src/sentry/api/endpoints/assistant.py
+++ b/src/sentry/api/endpoints/assistant.py
@@ -12,6 +12,7 @@ from rest_framework.response import Response
 from sentry.api.base import Endpoint
 from sentry.models import AssistantActivity
 from sentry.assistant import manager
+from sentry.utils.compat import zip
 
 VALID_STATUSES = frozenset(("viewed", "dismissed"))
 
diff --git a/src/sentry/api/endpoints/chunk.py b/src/sentry/api/endpoints/chunk.py
index 0d6eefe6ba..fd1b33984f 100644
--- a/src/sentry/api/endpoints/chunk.py
+++ b/src/sentry/api/endpoints/chunk.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import logging
 import six
-from six.moves import zip
+
 from io import BytesIO
 from gzip import GzipFile
 from rest_framework import status
@@ -15,6 +15,7 @@ from sentry import options
 from sentry.models import FileBlob
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationReleasePermission
 from sentry.utils.files import get_max_file_size
+from sentry.utils.compat import zip
 
 
 # The blob size must be a power of two
diff --git a/src/sentry/api/endpoints/group_similar_issues.py b/src/sentry/api/endpoints/group_similar_issues.py
index 1e12ceed1a..3d40485771 100644
--- a/src/sentry/api/endpoints/group_similar_issues.py
+++ b/src/sentry/api/endpoints/group_similar_issues.py
@@ -9,6 +9,8 @@ from sentry.api.serializers import serialize
 from sentry.models import Group
 from sentry.similarity import features
 from sentry.utils.functional import apply_values
+from sentry.utils.compat import map
+from sentry.utils.compat import filter
 
 
 class GroupSimilarIssuesEndpoint(GroupEndpoint):
diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
index 0ccc47e457..7dc9bcf9d2 100644
--- a/src/sentry/api/endpoints/organization_config_integrations.py
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -19,7 +19,7 @@ class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
         )
 
         if "provider_key" in request.GET:
-            serialized = list(filter(lambda d: d["key"] == request.GET["provider_key"], serialized))
+            serialized = [d for d in serialized if d["key"] == request.GET["provider_key"]]
 
         if not serialized:
             return Response({"detail": "Providers do not exist"}, status=404)
diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index 69dbff251b..44f615674b 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -19,6 +19,7 @@ from sentry.discover.utils import transform_aliases_and_query
 from sentry.snuba import discover
 from sentry.utils import snuba
 from sentry.utils.dates import parse_stats_period
+from sentry.utils.compat import zip
 
 
 class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
diff --git a/src/sentry/api/endpoints/organization_group_index.py b/src/sentry/api/endpoints/organization_group_index.py
index c76562919e..8113871bdf 100644
--- a/src/sentry/api/endpoints/organization_group_index.py
+++ b/src/sentry/api/endpoints/organization_group_index.py
@@ -24,6 +24,7 @@ from sentry.models import Group, GroupStatus
 from sentry.search.snuba.backend import EventsDatasetSnubaSearchBackend
 from sentry.snuba import discover
 from sentry.utils.validators import normalize_event_id
+from sentry.utils.compat import map
 
 
 ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
diff --git a/src/sentry/api/endpoints/organization_member_unreleased_commits.py b/src/sentry/api/endpoints/organization_member_unreleased_commits.py
index ba5410d313..e67e714eff 100644
--- a/src/sentry/api/endpoints/organization_member_unreleased_commits.py
+++ b/src/sentry/api/endpoints/organization_member_unreleased_commits.py
@@ -1,13 +1,14 @@
 from __future__ import absolute_import
 
 import six
-from six.moves import zip
+
 
 from django.db import connections
 
 from sentry.api.bases import OrganizationMemberEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import Commit, Repository, UserEmail
+from sentry.utils.compat import zip
 
 # TODO(dcramer): once LatestRepoReleaseEnvironment is backfilled, change this query to use the new
 # schema [performance]
diff --git a/src/sentry/api/endpoints/organization_projects_sent_first_event.py b/src/sentry/api/endpoints/organization_projects_sent_first_event.py
index 77748b38d7..c2b4ce4e19 100644
--- a/src/sentry/api/endpoints/organization_projects_sent_first_event.py
+++ b/src/sentry/api/endpoints/organization_projects_sent_first_event.py
@@ -6,6 +6,7 @@ from sentry.models import Project
 from sentry.api.base import DocSection
 from sentry.api.serializers import serialize
 from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.utils.compat import map
 
 
 class OrganizationProjectsSentFirstEventEndpoint(OrganizationEndpoint):
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index 12c0533322..63308b4579 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -8,6 +8,7 @@ from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import Environment, Project, Team
 from sentry.utils.apidocs import attach_scenarios, scenario
+from sentry.utils.compat import map
 
 
 @scenario("RetrieveEventCountsOrganization")
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 10dd52a76c..be162ee533 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -42,6 +42,7 @@ from sentry.grouping.fingerprinting import FingerprintingRules, InvalidFingerpri
 from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
 from sentry.utils import json
+from sentry.utils.compat import filter
 
 delete_logger = logging.getLogger("sentry.deletions.api")
 
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index a3b4dc707c..864bd79834 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -61,16 +61,16 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
             if requested_environments:
                 conditions.append(["environment", "IN", requested_environments])
 
-            filter = eventstore.Filter(
+            _filter = eventstore.Filter(
                 conditions=conditions, project_ids=[event.project_id], group_ids=[event.group_id]
             )
 
             # Ignore any time params and search entire retention period
-            next_event_filter = deepcopy(filter)
+            next_event_filter = deepcopy(_filter)
             next_event_filter.end = datetime.utcnow()
             next_event = eventstore.get_next_event_id(event, filter=next_event_filter)
 
-            prev_event_filter = deepcopy(filter)
+            prev_event_filter = deepcopy(_filter)
             prev_event_filter.start = datetime.utcfromtimestamp(0)
             prev_event = eventstore.get_prev_event_id(event, filter=prev_event_filter)
 
diff --git a/src/sentry/api/endpoints/prompts_activity.py b/src/sentry/api/endpoints/prompts_activity.py
index 5c16cda390..e2a0201611 100644
--- a/src/sentry/api/endpoints/prompts_activity.py
+++ b/src/sentry/api/endpoints/prompts_activity.py
@@ -10,6 +10,7 @@ from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
 from sentry.models import Organization, PromptsActivity, Project
+from sentry.utils.compat import zip
 
 PROMPTS = {
     "releases": {"required_fields": ["organization_id", "project_id"]},
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 39eaee9ecc..285b3b8a31 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -25,6 +25,9 @@ from sentry.search.utils import (
 from sentry.snuba.dataset import Dataset
 from sentry.utils.dates import to_timestamp
 from sentry.utils.snuba import DATASETS, get_json_type
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
+from sentry.utils.compat import filter
 
 WILDCARD_CHARS = re.compile(r"[\*]")
 
@@ -292,7 +295,7 @@ class SearchVisitor(NodeVisitor):
             return children
 
         children = [child for group in children for child in _flatten(group)]
-        children = filter(None, _flatten(children))
+        children = [_f for _f in _flatten(children) if _f]
 
         return children
 
@@ -575,8 +578,8 @@ def parse_search_query(query):
         tree = event_search_grammar.parse(query)
     except IncompleteParseError as e:
         idx = e.column()
-        prefix = query[max(0, idx - 5):idx]
-        suffix = query[idx:(idx + 5)]
+        prefix = query[max(0, idx - 5) : idx]
+        suffix = query[idx : (idx + 5)]
         raise InvalidSearchQuery(
             u"{} {}".format(
                 u"Parse error at '{}{}' (column {:d}).".format(prefix, suffix, e.column()),
@@ -596,7 +599,9 @@ def convert_search_boolean_to_snuba_query(search_boolean):
             return convert_search_boolean_to_snuba_query(term)
         else:
             raise InvalidSearchQuery(
-                u"Attempted to convert term of unrecognized type {} into a snuba expression".format(term.__class__.__name__)
+                u"Attempted to convert term of unrecognized type {} into a snuba expression".format(
+                    term.__class__.__name__
+                )
             )
 
     if not search_boolean:
@@ -742,7 +747,9 @@ def get_filter(query=None, params=None):
         try:
             parsed_terms = parse_search_query(query)
         except ParseError as e:
-            raise InvalidSearchQuery(u"Parse error: {} (column {:d})".format(e.expr.name, e.column()))
+            raise InvalidSearchQuery(
+                u"Parse error: {} (column {:d})".format(e.expr.name, e.column())
+            )
 
     kwargs = {
         "start": None,
@@ -769,7 +776,9 @@ def get_filter(query=None, params=None):
                     )
                 except Exception:
                     raise InvalidSearchQuery(
-                        u"Invalid query. Project {} does not exist or is not an actively selected project.".format(term.value.value)
+                        u"Invalid query. Project {} does not exist or is not an actively selected project.".format(
+                            term.value.value
+                        )
                     )
 
                 # Create a new search filter with the correct values
@@ -942,7 +951,9 @@ class NumberRange(FunctionArg):
             raise InvalidFunctionArgument(u"{} is not a number".format(value))
 
         if self.start and value < self.start:
-            raise InvalidFunctionArgument(u"{:g} must be greater than or equal to {:g}".format(value, self.start))
+            raise InvalidFunctionArgument(
+                u"{:g} must be greater than or equal to {:g}".format(value, self.start)
+            )
         elif self.end and value >= self.end:
             raise InvalidFunctionArgument(u"{:g} must be less than {:g}".format(value, self.end))
 
@@ -966,10 +977,7 @@ class IntervalDefault(NumberRange):
 FUNCTIONS = {
     "percentile": {
         "name": "percentile",
-        "args": [
-            NumericColumn("column"),
-            NumberRange("percentile", 0, 1),
-        ],
+        "args": [NumericColumn("column"), NumberRange("percentile", 0, 1)],
         "transform": u"quantile({percentile:.2f})({column})",
     },
     "rps": {
@@ -1032,7 +1040,16 @@ def resolve_function(field, match=None, params=None):
 
     snuba_string = function["transform"].format(**arguments)
 
-    return [], [[snuba_string, None, get_function_alias(function["name"], columns if not used_default else [])]]
+    return (
+        [],
+        [
+            [
+                snuba_string,
+                None,
+                get_function_alias(function["name"], columns if not used_default else []),
+            ]
+        ],
+    )
 
 
 def resolve_orderby(orderby, fields, aggregations):
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index 02afa86d51..36dcd26de7 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -60,6 +60,7 @@ from sentry.utils import metrics
 from sentry.utils.audit import create_audit_entry
 from sentry.utils.cursors import Cursor
 from sentry.utils.functional import extract_lazy_object
+from sentry.utils.compat import zip
 
 delete_logger = logging.getLogger("sentry.deletions.api")
 
diff --git a/src/sentry/api/issue_search.py b/src/sentry/api/issue_search.py
index 3dcaaca0ab..1f35f5344f 100644
--- a/src/sentry/api/issue_search.py
+++ b/src/sentry/api/issue_search.py
@@ -18,6 +18,7 @@ from sentry.search.utils import (
     parse_release,
     parse_status_value,
 )
+from sentry.utils.compat import map
 
 
 class IssueSearchVisitor(SearchVisitor):
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index 16de839624..f25a2652a4 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -10,6 +10,8 @@ from django.db.models.sql.datastructures import EmptyResultSet
 from django.utils import timezone
 
 from sentry.utils.cursors import build_cursor, Cursor, CursorResult
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 quote_name = connections["default"].ops.quote_name
 
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index 0434d95968..81b7971e71 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -6,6 +6,7 @@ import six
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import Activity, Commit, Group, PullRequest
 from sentry.utils.functional import apply_values
+from sentry.utils.compat import zip
 
 
 @register(Activity)
diff --git a/src/sentry/api/serializers/models/alert_rule.py b/src/sentry/api/serializers/models/alert_rule.py
index 419a9c8308..dc5985969e 100644
--- a/src/sentry/api/serializers/models/alert_rule.py
+++ b/src/sentry/api/serializers/models/alert_rule.py
@@ -12,6 +12,7 @@ from sentry.incidents.models import (
     AlertRuleEnvironment,
 )
 from sentry.models import Rule
+from sentry.utils.compat import zip
 
 
 @register(AlertRule)
diff --git a/src/sentry/api/serializers/models/alert_rule_trigger.py b/src/sentry/api/serializers/models/alert_rule_trigger.py
index 537f244655..d040b7a586 100644
--- a/src/sentry/api/serializers/models/alert_rule_trigger.py
+++ b/src/sentry/api/serializers/models/alert_rule_trigger.py
@@ -5,7 +5,12 @@ from collections import defaultdict
 import six
 
 from sentry.api.serializers import register, serialize, Serializer
-from sentry.incidents.models import AlertRuleTrigger, AlertRuleTriggerAction, AlertRuleTriggerExclusion
+from sentry.incidents.models import (
+    AlertRuleTrigger,
+    AlertRuleTriggerAction,
+    AlertRuleTriggerExclusion,
+)
+from sentry.utils.compat import zip
 
 
 @register(AlertRuleTrigger)
@@ -15,7 +20,9 @@ class AlertRuleTriggerSerializer(Serializer):
         triggers = {item.id: item for item in item_list}
         result = defaultdict(dict)
 
-        actions = AlertRuleTriggerAction.objects.filter(alert_rule_trigger__in=item_list).order_by("id")
+        actions = AlertRuleTriggerAction.objects.filter(alert_rule_trigger__in=item_list).order_by(
+            "id"
+        )
         serialized_actions = serialize(list(actions))
         for trigger, serialized in zip(actions, serialized_actions):
             triggers_actions = result[triggers[trigger.alert_rule_trigger_id]].setdefault(
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index b7c985b240..3ba6841c40 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -5,7 +5,7 @@ from collections import defaultdict
 from datetime import timedelta
 
 import six
-from six.moves import zip
+
 
 from django.conf import settings
 from django.db.models import Min, Q
@@ -44,6 +44,7 @@ from sentry.models import (
 from sentry.tsdb.snuba import SnubaTSDB
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.safe import safe_execute
+from sentry.utils.compat import zip
 
 SUBSCRIPTION_REASON_MAP = {
     GroupSubscriptionReason.comment: "commented",
diff --git a/src/sentry/api/serializers/models/grouprelease.py b/src/sentry/api/serializers/models/grouprelease.py
index f63d8dcb05..8b97402569 100644
--- a/src/sentry/api/serializers/models/grouprelease.py
+++ b/src/sentry/api/serializers/models/grouprelease.py
@@ -9,6 +9,7 @@ from django.utils import timezone
 from sentry.app import tsdb
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import GroupRelease, Release
+from sentry.utils.compat import zip
 
 StatsPeriod = namedtuple("StatsPeriod", ("segments", "interval"))
 
diff --git a/src/sentry/api/serializers/models/grouptombstone.py b/src/sentry/api/serializers/models/grouptombstone.py
index 5902d92be0..05e24a0bba 100644
--- a/src/sentry/api/serializers/models/grouptombstone.py
+++ b/src/sentry/api/serializers/models/grouptombstone.py
@@ -1,11 +1,12 @@
 from __future__ import absolute_import
 
 import six
-from six.moves import zip
+
 
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.constants import LOG_LEVELS
 from sentry.models import GroupTombstone, User
+from sentry.utils.compat import zip
 
 
 @register(GroupTombstone)
diff --git a/src/sentry/api/serializers/models/incident.py b/src/sentry/api/serializers/models/incident.py
index 68b93e6388..b539420201 100644
--- a/src/sentry/api/serializers/models/incident.py
+++ b/src/sentry/api/serializers/models/incident.py
@@ -15,6 +15,7 @@ from sentry.incidents.models import (
     IncidentSubscription,
 )
 from sentry.utils.db import attach_foreignkey
+from sentry.utils.compat import zip
 
 
 @register(Incident)
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 411e33949d..5fc8f58242 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -33,6 +33,7 @@ from sentry.models import (
     UserReport,
 )
 from sentry.utils.data_filters import FilterTypes
+from sentry.utils.compat import zip
 
 STATUS_LABELS = {
     ProjectStatus.VISIBLE: "active",
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 9e5f2ab98b..fdaff395ad 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 import six
-from six.moves import zip
+
 
 from collections import defaultdict
 from django.db.models import Sum
@@ -19,6 +19,7 @@ from sentry.models import (
     User,
     UserEmail,
 )
+from sentry.utils.compat import zip
 
 
 def get_users_for_authors(organization_id, authors, user=None):
diff --git a/src/sentry/api/serializers/models/rule.py b/src/sentry/api/serializers/models/rule.py
index f00592e93c..c8178e0a52 100644
--- a/src/sentry/api/serializers/models/rule.py
+++ b/src/sentry/api/serializers/models/rule.py
@@ -21,7 +21,7 @@ def _generate_rule_label(project, rule, data):
 class RuleSerializer(Serializer):
     def get_attrs(self, item_list, user, **kwargs):
         environments = Environment.objects.in_bulk(
-            filter(None, [i.environment_id for i in item_list])
+            [_f for _f in [i.environment_id for i in item_list] if _f]
         )
         return {i: {"environment": environments.get(i.environment_id)} for i in item_list}
 
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 8f75c4d81e..1b766a965d 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -4,7 +4,7 @@ import six
 
 from collections import defaultdict
 from django.db.models import Count
-from six.moves import zip
+
 
 from sentry import roles
 from sentry.app import env
@@ -20,6 +20,7 @@ from sentry.models import (
     Team,
     TeamAvatar,
 )
+from sentry.utils.compat import zip
 
 
 def get_team_memberships(team_list, user):
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 63ff5f6345..be4ffc3c4c 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -22,10 +22,10 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.utils.avatar import get_gravatar_url
 
 
-def manytoone_to_dict(queryset, key, filter=None):
+def manytoone_to_dict(queryset, key, filter_func=None):
     result = defaultdict(list)
     for row in queryset:
-        if filter and not filter(row):
+        if filter_func and not filter_func(row):
             continue
         result[getattr(row, key)].append(row)
     return result
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 57164ed619..4513965a96 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -4,6 +4,7 @@ import six
 
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.models import EventUser, UserReport
+from sentry.utils.compat import zip
 
 
 @register(UserReport)
diff --git a/src/sentry/api/validators/monitor.py b/src/sentry/api/validators/monitor.py
index c12358c9d9..0591128938 100644
--- a/src/sentry/api/validators/monitor.py
+++ b/src/sentry/api/validators/monitor.py
@@ -10,6 +10,7 @@ from rest_framework import serializers
 from sentry.models import MonitorStatus, MonitorType, ScheduleType
 from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers.rest_framework.project import ProjectField
+from sentry.utils.compat import zip
 
 
 SCHEDULE_TYPES = OrderedDict(
diff --git a/src/sentry/auth/providers/google/views.py b/src/sentry/auth/providers/google/views.py
index ab2be2e47a..b879890384 100644
--- a/src/sentry/auth/providers/google/views.py
+++ b/src/sentry/auth/providers/google/views.py
@@ -7,6 +7,7 @@ from sentry.utils import json
 from sentry.utils.signing import urlsafe_b64decode
 
 from .constants import DOMAIN_BLOCKLIST, ERR_INVALID_DOMAIN, ERR_INVALID_RESPONSE
+from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry.auth.google")
 
diff --git a/src/sentry/auth/providers/saml2/provider.py b/src/sentry/auth/providers/saml2/provider.py
index f5c5039bb5..545e2a624b 100644
--- a/src/sentry/auth/providers/saml2/provider.py
+++ b/src/sentry/auth/providers/saml2/provider.py
@@ -305,7 +305,7 @@ class SAML2Provider(Provider):
             )
 
         name = (attributes[k] for k in (Attributes.FIRST_NAME, Attributes.LAST_NAME))
-        name = " ".join(filter(None, name))
+        name = " ".join([_f for _f in name if _f])
 
         return {
             "id": attributes[Attributes.IDENTIFIER],
diff --git a/src/sentry/db/deletion.py b/src/sentry/db/deletion.py
index 0b2119803f..0b5033b630 100644
--- a/src/sentry/db/deletion.py
+++ b/src/sentry/db/deletion.py
@@ -6,6 +6,7 @@ from uuid import uuid4
 from datetime import timedelta
 from django.db import connections, router
 from django.utils import timezone
+from sentry.utils.compat import zip
 
 
 class BulkDeleteQuery(object):
diff --git a/src/sentry/db/models/fields/array.py b/src/sentry/db/models/fields/array.py
index 25fb0f597c..f35e340cad 100644
--- a/src/sentry/db/models/fields/array.py
+++ b/src/sentry/db/models/fields/array.py
@@ -6,6 +6,7 @@ from django.db import models
 
 from sentry.db.models.utils import Creator
 from sentry.utils import json
+from sentry.utils.compat import map
 
 
 # Adapted from django-pgfields
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index c2d8716715..c2f85e7d4f 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -20,6 +20,7 @@ from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
 
 from .query import create_or_update
+from sentry.utils.compat import zip
 
 __all__ = ("BaseManager", "OptionManager")
 
diff --git a/src/sentry/debug/utils/packages.py b/src/sentry/debug/utils/packages.py
index 4dbfc2d5b2..91456a63ea 100644
--- a/src/sentry/debug/utils/packages.py
+++ b/src/sentry/debug/utils/packages.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 import sys
+from sentry.utils.compat import map
 
 try:
     import pkg_resources
diff --git a/src/sentry/deletions/base.py b/src/sentry/deletions/base.py
index bc1630ef96..b2d90981f7 100644
--- a/src/sentry/deletions/base.py
+++ b/src/sentry/deletions/base.py
@@ -79,7 +79,7 @@ class BaseDeletionTask(object):
             return child_relations
 
         return list(
-            filter(lambda rel: rel.params.get("model") not in self.skip_models, child_relations)
+            [rel for rel in child_relations if rel.params.get("model") not in self.skip_models]
         )
 
     def delete_bulk(self, instance_list):
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index ee2ecc67ac..50800522e1 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -13,6 +13,7 @@ from sentry.utils.locking.backends.redis import RedisLockBackend
 from sentry.utils.locking.manager import LockManager
 from sentry.utils.redis import check_cluster_versions, get_cluster_from_options, load_script
 from sentry.utils.versioning import Version
+from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry.digests")
 
@@ -218,7 +219,7 @@ class RedisBackend(Backend):
             # If the record value is `None`, this means the record data was
             # missing (it was presumably evicted by Redis) so we don't need to
             # return it here.
-            yield filter(lambda record: record.value is not None, records)
+            yield [record for record in records if record.value is not None]
 
             script(
                 connection,
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index 78c27eef64..117dcd8054 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -139,7 +139,7 @@ def rewrite_record(record, project, groups, rules):
 
     return Record(
         record.key,
-        Notification(event, filter(None, [rules.get(id) for id in record.value.rules])),
+        Notification(event, [_f for _f in [rules.get(id) for id in record.value.rules] if _f]),
         record.timestamp,
     )
 
diff --git a/src/sentry/discover/endpoints/discover_query.py b/src/sentry/discover/endpoints/discover_query.py
index 32e7c9b01c..6a3d6dd86d 100644
--- a/src/sentry/discover/endpoints/discover_query.py
+++ b/src/sentry/discover/endpoints/discover_query.py
@@ -14,6 +14,7 @@ from sentry.discover.utils import transform_aliases_and_query
 from sentry import features
 
 from .serializers import DiscoverQuerySerializer
+from sentry.utils.compat import map
 
 
 class DiscoverQueryPermission(OrganizationPermission):
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 393f3c3d27..d0a5d0fca4 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -82,6 +82,7 @@ from sentry.utils.dates import to_timestamp
 from sentry.utils.safe import safe_execute, trim, get_path, setdefault_path
 from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
 from sentry.culprit import generate_culprit
+from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry.events")
 
@@ -322,7 +323,7 @@ class EventManager(object):
             raise APIError("Invalid security report: %s" % str(e).splitlines()[0])
 
         def clean(d):
-            return dict(filter(lambda x: x[1], d.items()))
+            return dict([x for x in d.items() if x[1]])
 
         data.update(
             {
@@ -405,7 +406,7 @@ class EventManager(object):
             return (True, FilterStatKeys.ERROR_MESSAGE)
 
         for exc in get_path(self._data, "exception", "values", filter=True, default=[]):
-            message = u": ".join(filter(None, map(exc.get, ["type", "value"])))
+            message = u": ".join([_f for _f in map(exc.get, ["type", "value"]) if _f])
             if message and not is_valid_error_message(self.project_config, message):
                 return (True, FilterStatKeys.ERROR_MESSAGE)
 
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index 48eb7768cb..9b1ad9ac66 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -80,7 +80,7 @@ class EventStorage(Service):
     minimal_columns = [Columns.EVENT_ID, Columns.GROUP_ID, Columns.PROJECT_ID, Columns.TIMESTAMP]
 
     def get_events(
-        self, filter, orderby=None, limit=100, offset=0, referrer="eventstore.get_events"
+        self, filter, orderby=None, limit=100, offset=0, referrer="eventstore.get_events"  # NOQA
     ):
         """
         Fetches a list of events given a set of criteria.
@@ -95,7 +95,7 @@ class EventStorage(Service):
         raise NotImplementedError
 
     def get_unfetched_events(
-        self, filter, orderby=None, limit=100, offset=0, referrer="eventstore.get_unfetched_events"
+        self, filter, orderby=None, limit=100, offset=0, referrer="eventstore.get_unfetched_events"  # NOQA
     ):
         """
         Same as get_events but returns events without their node datas loaded.
@@ -125,7 +125,7 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
-    def get_next_event_id(self, event, filter):
+    def get_next_event_id(self, event, filter):  # NOQA
         """
         Gets the next event given a current event and some conditions/filters.
         Returns a tuple of (project_id, event_id)
@@ -136,7 +136,7 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
-    def get_prev_event_id(self, event, filter):
+    def get_prev_event_id(self, event, filter):  # NOQA
         """
         Gets the previous event given a current event and some conditions/filters.
         Returns a tuple of (project_id, event_id)
@@ -147,7 +147,7 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
-    def get_earliest_event_id(self, event, filter):
+    def get_earliest_event_id(self, event, filter):  # NOQA
         """
         Gets the earliest event given a current event and some conditions/filters.
         Returns a tuple of (project_id, event_id)
@@ -158,7 +158,7 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
-    def get_latest_event_id(self, event, filter):
+    def get_latest_event_id(self, event, filter):  # NOQA
         """
         Gets the latest event given a current event and some conditions/filters.
         Returns a tuple of (project_id, event_id)
diff --git a/src/sentry/eventstore/models.py b/src/sentry/eventstore/models.py
index 002010e9b2..5aae059609 100644
--- a/src/sentry/eventstore/models.py
+++ b/src/sentry/eventstore/models.py
@@ -21,6 +21,7 @@ from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyView
 from sentry.utils.safe import get_path, trim
 from sentry.utils.strings import truncatechars
+from sentry.utils.compat import zip
 
 
 def ref_func(x):
@@ -338,9 +339,11 @@ class Event(object):
             if hashes is not None:
                 return hashes
 
-        return filter(
-            None, [x.get_hash() for x in self.get_grouping_variants(force_config).values()]
-        )
+        return [
+            _f
+            for _f in [x.get_hash() for x in self.get_grouping_variants(force_config).values()]
+            if _f
+        ]
 
     def get_grouping_variants(self, force_config=None, normalize_stacktraces=False):
         """
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 8a622f5e33..b9db0121d2 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -48,7 +48,7 @@ class SnubaEventStorage(EventStorage):
 
     def get_events(
         self,
-        filter,
+        filter,  # NOQA
         orderby=None,
         limit=DEFAULT_LIMIT,
         offset=DEFAULT_OFFSET,
@@ -58,7 +58,7 @@ class SnubaEventStorage(EventStorage):
         Get events from Snuba, with node data loaded.
         """
         return self.__get_events(
-            filter,
+            filter,  # NOQA
             orderby=orderby,
             limit=limit,
             offset=offset,
@@ -68,7 +68,7 @@ class SnubaEventStorage(EventStorage):
 
     def get_unfetched_events(
         self,
-        filter,
+        filter,  # NOQA
         orderby=None,
         limit=DEFAULT_LIMIT,
         offset=DEFAULT_OFFSET,
@@ -78,7 +78,7 @@ class SnubaEventStorage(EventStorage):
         Get events from Snuba, without node data loaded.
         """
         return self.__get_events(
-            filter,
+            filter,  # NOQA
             orderby=orderby,
             limit=limit,
             offset=offset,
@@ -88,14 +88,14 @@ class SnubaEventStorage(EventStorage):
 
     def __get_events(
         self,
-        filter,
+        filter,  # NOQA
         orderby=None,
         limit=DEFAULT_LIMIT,
         offset=DEFAULT_OFFSET,
         referrer=None,
         should_bind_nodes=False,
     ):
-        assert filter, "You must provide a filter"
+        assert filter, "You must provide a filter"  # NOQA
         cols = self.__get_columns()
         orderby = orderby or DESC_ORDERING
 
@@ -210,60 +210,60 @@ class SnubaEventStorage(EventStorage):
 
         return event
 
-    def get_earliest_event_id(self, event, filter):
-        filter = deepcopy(filter)
+    def get_earliest_event_id(self, event, filter):  # NOQA
+        filter = deepcopy(filter)  # NOQA
         filter.conditions = filter.conditions or []
         filter.conditions.extend(get_before_event_condition(event))
         filter.end = event.datetime
 
-        return self.__get_event_id_from_filter(filter=filter, orderby=ASC_ORDERING)
+        return self.__get_event_id_from_filter(filter=filter, orderby=ASC_ORDERING)  # NOQA
 
-    def get_latest_event_id(self, event, filter):
-        filter = deepcopy(filter)
+    def get_latest_event_id(self, event, filter):  # NOQA
+        filter = deepcopy(filter)  # NOQA
         filter.conditions = filter.conditions or []
         filter.conditions.extend(get_after_event_condition(event))
         filter.start = event.datetime
 
-        return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)
+        return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)  # NOQA
 
-    def get_next_event_id(self, event, filter):
+    def get_next_event_id(self, event, filter):  # NOQA
         """
         Returns (project_id, event_id) of a next event given a current event
         and any filters/conditions. Returns None if no next event is found.
         """
-        assert filter, "You must provide a filter"
+        assert filter, "You must provide a filter"  # NOQA
 
         if not event:
             return None
 
-        filter = deepcopy(filter)
+        filter = deepcopy(filter)  # NOQA
         filter.conditions = filter.conditions or []
         filter.conditions.extend(get_after_event_condition(event))
         filter.start = event.datetime
 
-        return self.__get_event_id_from_filter(filter=filter, orderby=ASC_ORDERING)
+        return self.__get_event_id_from_filter(filter=filter, orderby=ASC_ORDERING)  # NOQA
 
-    def get_prev_event_id(self, event, filter):
+    def get_prev_event_id(self, event, filter):  # NOQA
         """
         Returns (project_id, event_id) of a previous event given a current event
         and a filter. Returns None if no previous event is found.
         """
-        assert filter, "You must provide a filter"
+        assert filter, "You must provide a filter"  # NOQA
 
         if not event:
             return None
 
-        filter = deepcopy(filter)
+        filter = deepcopy(filter)  # NOQA
         filter.conditions = filter.conditions or []
         filter.conditions.extend(get_before_event_condition(event))
         filter.end = event.datetime
 
-        return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)
+        return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)  # NOQA
 
     def __get_columns(self):
         return [col.value.event_name for col in EventStorage.minimal_columns]
 
-    def __get_event_id_from_filter(self, filter=None, orderby=None):
+    def __get_event_id_from_filter(self, filter=None, orderby=None):  # NOQA
         columns = [Columns.EVENT_ID.value.alias, Columns.PROJECT_ID.value.alias]
 
         try:
diff --git a/src/sentry/eventstream/kafka/backend.py b/src/sentry/eventstream/kafka/backend.py
index eec44db7ad..8972d13ea9 100644
--- a/src/sentry/eventstream/kafka/backend.py
+++ b/src/sentry/eventstream/kafka/backend.py
@@ -60,7 +60,7 @@ class KafkaEventStream(SnubaProtocolEventStream):
                 key=key.encode("utf-8"),
                 value=json.dumps((self.EVENT_PROTOCOL_VERSION, _type) + extra_data),
                 on_delivery=self.delivery_callback,
-                headers=[(k, v.encode('utf-8')) for k, v in headers.items()],
+                headers=[(k, v.encode("utf-8")) for k, v in headers.items()],
             )
         except Exception as error:
             logger.error("Could not publish message: %s", error, exc_info=True)
@@ -99,7 +99,7 @@ class KafkaEventStream(SnubaProtocolEventStream):
         def commit(partitions):
             results = consumer.commit(offsets=partitions, asynchronous=False)
 
-            errors = filter(lambda i: i.error is not None, results)
+            errors = [i for i in results if i.error is not None]
             if errors:
                 raise Exception(
                     "Failed to commit %s/%s partitions: %r" % (len(errors), len(partitions), errors)
diff --git a/src/sentry/grouping/component.py b/src/sentry/grouping/component.py
index 65d7250c96..c5d253257e 100644
--- a/src/sentry/grouping/component.py
+++ b/src/sentry/grouping/component.py
@@ -57,7 +57,7 @@ class GroupingComponent(object):
             for value in c.values:
                 if isinstance(value, GroupingComponent) and value.contributes:
                     _walk_components(value, stack)
-            parts = filter(None, stack)
+            parts = [_f for _f in stack if _f]
             items.append(parts)
             stack.pop()
 
diff --git a/src/sentry/grouping/enhancer.py b/src/sentry/grouping/enhancer.py
index eeef974f95..078ae2a403 100644
--- a/src/sentry/grouping/enhancer.py
+++ b/src/sentry/grouping/enhancer.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import io
 import os
 import six
-from six.moves import zip
+
 import base64
 import msgpack
 import inspect
@@ -19,6 +19,7 @@ from sentry.grouping.utils import get_rule_bool
 from sentry.utils.compat import implements_to_string
 from sentry.utils.glob import glob_match
 from sentry.utils.safe import get_path
+from sentry.utils.compat import zip
 
 
 # Grammar is defined in EBNF syntax.
@@ -148,7 +149,7 @@ class Match(object):
 
     def _to_config_structure(self):
         if self.key == "family":
-            arg = "".join(filter(None, [FAMILIES.get(x) for x in self.pattern.split(",")]))
+            arg = "".join([_f for _f in [FAMILIES.get(x) for x in self.pattern.split(",")] if _f])
         elif self.key == "app":
             arg = {True: "1", False: "0"}.get(get_rule_bool(self.pattern), "")
         else:
@@ -159,7 +160,7 @@ class Match(object):
     def _from_config_structure(cls, obj):
         key = SHORT_MATCH_KEYS[obj[0]]
         if key == "family":
-            arg = ",".join(filter(None, [REVERSE_FAMILIES.get(x) for x in obj[1:]]))
+            arg = ",".join([_f for _f in [REVERSE_FAMILIES.get(x) for x in obj[1:]] if _f])
         else:
             arg = obj[1:]
         return cls(key, arg)
diff --git a/src/sentry/identity/google/provider.py b/src/sentry/identity/google/provider.py
index 7831daf8de..c69a34cca0 100644
--- a/src/sentry/identity/google/provider.py
+++ b/src/sentry/identity/google/provider.py
@@ -6,6 +6,7 @@ from sentry.auth.exceptions import IdentityNotValid
 from sentry.utils import json
 from sentry.utils.signing import urlsafe_b64decode
 from sentry.auth.provider import MigratingIdentityId
+from sentry.utils.compat import map
 
 
 # When no hosted domain is in use for the authenticated user, we default to the
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index fd293699f8..0a42abf240 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -42,6 +42,7 @@ from sentry.snuba.subscriptions import (
     query_aggregation_to_snuba,
 )
 from sentry.utils.snuba import bulk_raw_query, SnubaQueryParams, SnubaTSResult
+from sentry.utils.compat import zip
 
 
 class AlreadyDeletedError(Exception):
diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 9cbb071cc0..3c6d6387cd 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -4,7 +4,7 @@ import logging
 import operator
 from copy import deepcopy
 from datetime import timedelta
-from six.moves import zip
+
 
 from django.conf import settings
 from django.db import transaction
@@ -25,6 +25,7 @@ from sentry.incidents.tasks import handle_trigger_action
 from sentry.snuba.models import QueryAggregations
 from sentry.utils import metrics, redis
 from sentry.utils.dates import to_datetime, to_timestamp
+from sentry.utils.compat import zip
 
 
 logger = logging.getLogger(__name__)
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 98bd9c74a6..d6dc111310 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -129,7 +129,7 @@ class BitbucketIntegration(IntegrationInstallation, BitbucketIssueBasicMixin, Re
 
         accessible_repos = [r["identifier"] for r in self.get_repositories()]
 
-        return filter(lambda repo: repo.name not in accessible_repos, repos)
+        return [repo for repo in repos if repo.name not in accessible_repos]
 
     def reinstall(self):
         self.reinstall_repositories()
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index c88c0e1deb..2b56bd5f13 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -119,7 +119,7 @@ class GitHubIntegration(IntegrationInstallation, GitHubIssueBasic, RepositoryMix
             organization_id=self.organization_id, provider="github"
         )
 
-        return filter(lambda repo: repo.name not in accessible_repo_names, existing_repos)
+        return [repo for repo in existing_repos if repo.name not in accessible_repo_names]
 
     def reinstall(self):
         self.reinstall_repositories()
diff --git a/src/sentry/integrations/pagerduty/integration.py b/src/sentry/integrations/pagerduty/integration.py
index 2e14954172..faefac53d8 100644
--- a/src/sentry/integrations/pagerduty/integration.py
+++ b/src/sentry/integrations/pagerduty/integration.py
@@ -137,7 +137,7 @@ class PagerDutyIntegrationProvider(IntegrationProvider):
         account = config["account"]
         # PagerDuty gives us integration keys for various things, some of which
         # are not services. For now we only care about services.
-        services = filter(lambda x: x["type"] == "service", config["integration_keys"])
+        services = [x for x in config["integration_keys"] if x["type"] == "service"]
 
         return {
             "name": account["name"],
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index 2bf1f19600..b56a34994a 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -253,7 +253,7 @@ def build_group_attachment(group, event=None, tags=None, identity=None, actions=
             )
 
     if actions:
-        action_texts = filter(None, [build_action_text(group, identity, a) for a in actions])
+        action_texts = [_f for _f in [build_action_text(group, identity, a) for a in actions] if _f]
         text += "\n" + "\n".join(action_texts)
 
         color = ACTIONED_ISSUE_COLOR
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index a56df84c96..a828d0b8e0 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import
+from sentry.utils.compat import map
 
 __all__ = ("Http",)
 
@@ -57,7 +58,7 @@ def format_cookies(value):
     if isinstance(value, dict):
         value = value.items()
 
-    return [list(map(fix_broken_encoding, (k.strip(), v))) for k, v in value]
+    return [map(fix_broken_encoding, (k.strip(), v)) for k, v in value]
 
 
 def fix_broken_encoding(value):
diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
index 787dc2bd96..54dfe2233e 100644
--- a/src/sentry/lang/java/plugin.py
+++ b/src/sentry/lang/java/plugin.py
@@ -8,6 +8,7 @@ from sentry.stacktraces.processing import StacktraceProcessor
 from sentry.models import ProjectDebugFile, EventError
 from sentry.reprocessing import report_processing_issue
 from sentry.utils.safe import get_path
+from sentry.utils.compat import map
 
 FRAME_CACHE_VERSION = 2
 
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index e101c79f33..0511c97131 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -9,6 +9,7 @@ from sentry.utils.compat import implements_to_string
 from sentry.utils.safe import get_path
 
 from symbolic import parse_addr
+from sentry.utils.compat import map
 
 REPORT_VERSION = "104"
 
diff --git a/src/sentry/lang/native/processing.py b/src/sentry/lang/native/processing.py
index 8b29db1091..ae721ac138 100644
--- a/src/sentry/lang/native/processing.py
+++ b/src/sentry/lang/native/processing.py
@@ -22,6 +22,7 @@ from sentry.utils.in_app import is_known_third_party, is_optional_package
 from sentry.utils.safe import get_path, set_path, setdefault_path, trim
 from sentry.stacktraces.functions import trim_function_name
 from sentry.stacktraces.processing import find_stacktraces_in_data
+from sentry.utils.compat import zip
 
 logger = logging.getLogger(__name__)
 
diff --git a/src/sentry/loader/browsersdkversion.py b/src/sentry/loader/browsersdkversion.py
index 057a8ddf31..c2588d4779 100644
--- a/src/sentry/loader/browsersdkversion.py
+++ b/src/sentry/loader/browsersdkversion.py
@@ -12,6 +12,7 @@ from sentry.utils.compat import functools
 import sentry
 
 from django.conf import settings
+from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry")
 
@@ -32,7 +33,7 @@ def load_registry(path):
 
 
 def get_highest_browser_sdk_version(versions):
-    full_versions = filter(lambda x: _version_regexp.match(x), versions)
+    full_versions = [x for x in versions if _version_regexp.match(x)]
     return (
         six.binary_type(max(map(parse_version, full_versions)))
         if full_versions
@@ -63,7 +64,7 @@ def get_highest_selected_browser_sdk_version(selected_version):
     if selected_version == "latest":
         return get_highest_browser_sdk_version(versions)
     return get_highest_browser_sdk_version(
-        filter(lambda x: x.startswith(selected_version[0]), versions)
+        [x for x in versions if x.startswith(selected_version[0])]
     )
 
 
diff --git a/src/sentry/management/commands/collectstatic.py b/src/sentry/management/commands/collectstatic.py
index cd9daa360e..59482a022d 100644
--- a/src/sentry/management/commands/collectstatic.py
+++ b/src/sentry/management/commands/collectstatic.py
@@ -7,7 +7,9 @@ from itertools import chain
 from operator import itemgetter
 from hashlib import md5
 from django.contrib.staticfiles.management.commands.collectstatic import Command as BaseCommand
-from six.moves import zip
+
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 BUFFER_SIZE = 65536
 VERSION_PATH = "version"
@@ -25,7 +27,7 @@ def checksum(file_):
 
 def get_bundle_version(files):
     hasher = md5()
-    for (short, _), sum in zip(files, list(map(checksum, files))):
+    for (short, _), sum in zip(files, map(checksum, files)):
         echo("%s  %s" % (sum, short))
         hasher.update("{}  {}\n".format(sum, short).encode("utf-8"))
     return hasher.hexdigest()
@@ -40,8 +42,8 @@ class Command(BaseCommand):
 
         collected = super(Command, self).collect()
         paths = sorted(set(chain(*itemgetter(*collected.keys())(collected))))
-        abs_paths = list(map(self.storage.path, paths))
-        version = get_bundle_version(list(zip(paths, abs_paths)))
+        abs_paths = map(self.storage.path, paths)
+        version = get_bundle_version(zip(paths, abs_paths))
         echo("-----------------")
         echo(version)
         with open(self.storage.path(VERSION_PATH), "wb") as fp:
diff --git a/src/sentry/mediators/plugins/migrator.py b/src/sentry/mediators/plugins/migrator.py
index e8a3bdea3b..78dbe4db7d 100644
--- a/src/sentry/mediators/plugins/migrator.py
+++ b/src/sentry/mediators/plugins/migrator.py
@@ -36,7 +36,7 @@ class Migrator(Mediator):
                 pass
 
     def repos_for_provider(self, provider):
-        return filter(lambda r: r.provider == provider, self.repositories)
+        return [r for r in self.repositories if r.provider == provider]
 
     @property
     def repositories(self):
diff --git a/src/sentry/middleware/health.py b/src/sentry/middleware/health.py
index 561e874de7..eb1e15227f 100644
--- a/src/sentry/middleware/health.py
+++ b/src/sentry/middleware/health.py
@@ -4,6 +4,7 @@ import itertools
 import six
 
 from django.http import HttpResponse
+from sentry.utils.compat import filter
 
 
 class HealthCheck(object):
diff --git a/src/sentry/models/apikey.py b/src/sentry/models/apikey.py
index 103a82b6d1..bdfe14235a 100644
--- a/src/sentry/models/apikey.py
+++ b/src/sentry/models/apikey.py
@@ -16,6 +16,7 @@ from sentry.db.models import (
     FlexibleForeignKey,
     sane_repr,
 )
+from sentry.utils.compat import filter
 
 
 # TODO(dcramer): pull in enum library
diff --git a/src/sentry/models/projectownership.py b/src/sentry/models/projectownership.py
index 22a5789ba7..ae6a6e3312 100644
--- a/src/sentry/models/projectownership.py
+++ b/src/sentry/models/projectownership.py
@@ -118,7 +118,7 @@ class ProjectOwnership(Model):
             if candidate > score:
                 score = candidate
                 owners = rule.owners
-        actors = filter(None, resolve_actors(owners, project_id).values())
+        actors = [_f for _f in resolve_actors(owners, project_id).values() if _f]
 
         # Can happen if the ownership rule references a user/team that no longer
         # is assigned to the project or has been removed from the org.
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index db9dbf64c5..b8a5d962f1 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -27,7 +27,7 @@ set = default_manager.set
 delete = default_manager.delete
 register = default_manager.register
 all = default_manager.all
-filter = default_manager.filter
+filter = default_manager.filter  # NOQA
 isset = default_manager.isset
 lookup_key = default_manager.lookup_key
 
diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index 9ffb93038d..43b62feaf7 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -128,7 +128,7 @@ class OwnershipVisitor(NodeVisitor):
     visit_comment = visit_empty = lambda *a: None
 
     def visit_ownership(self, node, children):
-        return filter(None, children)
+        return [_f for _f in children if _f]
 
     def visit_line(self, node, children):
         _, line, _ = children
diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index bbbc263b06..f56096b915 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -28,6 +28,7 @@ from sentry.models import (
 from sentry.utils.http import absolute_uri
 
 from .base import ActivityEmail
+from sentry.utils.compat import zip
 
 
 class ReleaseActivityEmail(ActivityEmail):
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index d775cc97dc..e2cc66d439 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -13,6 +13,7 @@ from sentry.plugins.bases import notify
 from sentry.http import is_valid_url, safe_urlopen
 from sentry.utils.safe import safe_execute
 from sentry.integrations import FeatureDescription, IntegrationFeatures
+from sentry.utils.compat import filter
 
 DESCRIPTION = """
 Trigger outgoing HTTP POST requests from Sentry.
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index ac08edf519..1a56c21dbe 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -12,6 +12,8 @@ from sentry.utils.redis import (
     load_script,
 )
 from sentry.utils.json import prune_empty_keys
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 is_rate_limited = load_script("quotas/is_rate_limited.lua")
 
diff --git a/src/sentry/receivers/sentry_apps.py b/src/sentry/receivers/sentry_apps.py
index 0dbaf4a250..4073440758 100644
--- a/src/sentry/receivers/sentry_apps.py
+++ b/src/sentry/receivers/sentry_apps.py
@@ -56,4 +56,4 @@ def send_workflow_webhooks(organization, issue, user, event, data=None):
 def installations_to_notify(organization, event):
     installations = organization.sentry_app_installations.select_related("sentry_app")
 
-    return filter(lambda i: event in i.sentry_app.events, installations)
+    return [i for i in installations if event in i.sentry_app.events]
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index ab8a66e0f7..8bc90b7d3d 100644
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -6,6 +6,7 @@ import sys
 import sentry
 import datetime
 from sentry.utils.imports import import_string
+from sentry.utils.compat import map
 
 # We need to run this here because of a concurrency bug in Python's locale
 # with the lazy initialization.
diff --git a/src/sentry/runner/commands/devservices.py b/src/sentry/runner/commands/devservices.py
index 01bbdc248b..c2b515ffb2 100644
--- a/src/sentry/runner/commands/devservices.py
+++ b/src/sentry/runner/commands/devservices.py
@@ -4,6 +4,7 @@ import os
 import click
 from six import text_type
 from itertools import chain
+from sentry.utils.compat import map
 
 
 def get_docker_client():
diff --git a/src/sentry/runner/commands/tsdb.py b/src/sentry/runner/commands/tsdb.py
index 82d4ec9184..95e38461f7 100644
--- a/src/sentry/runner/commands/tsdb.py
+++ b/src/sentry/runner/commands/tsdb.py
@@ -10,6 +10,7 @@ from dateutil.parser import parse
 
 from sentry.runner.decorators import configuration
 from sentry.utils.iterators import chunked
+from sentry.utils.compat import map
 
 
 class DateTimeParamType(click.ParamType):
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 924e254455..4d8b0dbd6f 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -10,6 +10,7 @@ from django.conf import settings
 from sentry.utils import metrics, warnings
 from sentry.utils.sdk import configure_sdk
 from sentry.utils.warnings import DeprecatedSettingWarning
+from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry.runner.initializer")
 
diff --git a/src/sentry/sdk_updates.py b/src/sentry/sdk_updates.py
index 725caaadd5..779dc1c8a8 100644
--- a/src/sentry/sdk_updates.py
+++ b/src/sentry/sdk_updates.py
@@ -7,6 +7,7 @@ from django.core.cache import cache
 
 from sentry.net.http import Session
 from sentry.utils.safe import get_path
+from sentry.utils.compat import zip
 
 logger = logging.getLogger(__name__)
 
diff --git a/src/sentry/search/snuba/executors.py b/src/sentry/search/snuba/executors.py
index 73a99646c4..c4099d0d3d 100644
--- a/src/sentry/search/snuba/executors.py
+++ b/src/sentry/search/snuba/executors.py
@@ -268,7 +268,7 @@ class PostgresSnubaQueryExecutor(AbstractQueryExecutor):
 
         now = timezone.now()
         end = None
-        end_params = filter(None, [date_to, get_search_filter(search_filters, "date", "<")])
+        end_params = [_f for _f in [date_to, get_search_filter(search_filters, "date", "<")] if _f]
         if end_params:
             end = min(end_params)
 
@@ -300,9 +300,11 @@ class PostgresSnubaQueryExecutor(AbstractQueryExecutor):
         # retention date, which may be closer than 90 days in the past, but
         # apparently `retention_window_start` can be None(?), so we need a
         # fallback.
-        retention_date = max(filter(None, [retention_window_start, now - timedelta(days=90)]))
+        retention_date = max(
+            [_f for _f in [retention_window_start, now - timedelta(days=90)] if _f]
+        )
         start_params = [date_from, retention_date, get_search_filter(search_filters, "date", ">")]
-        start = max(filter(None, start_params))
+        start = max([_f for _f in start_params if _f])
         end = max([retention_date, end])
 
         if start == retention_date and end == retention_date:
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 81f394cd8e..66f28b2d61 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -11,6 +11,7 @@ from sentry.constants import STATUS_CHOICES
 from sentry.models import EventUser, KEYWORD_MAP, Release, Team, User
 from sentry.search.base import ANY
 from sentry.utils.auth import find_users
+from sentry.utils.compat import map
 
 
 class InvalidQuery(Exception):
diff --git a/src/sentry/similarity/backends/redis.py b/src/sentry/similarity/backends/redis.py
index 3091b09ead..ba9e0e239b 100644
--- a/src/sentry/similarity/backends/redis.py
+++ b/src/sentry/similarity/backends/redis.py
@@ -6,6 +6,8 @@ import time
 from sentry.similarity.backends.abstract import AbstractIndexBackend
 from sentry.utils.iterators import chunked
 from sentry.utils.redis import load_script
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 
 index = load_script("similarity/index.lua")
@@ -64,7 +66,7 @@ class RedisScriptMinHashIndexBackend(AbstractIndexBackend):
         def get_comparison_key(result):
             key, scores = result
 
-            scores = filter(lambda score: score is not None, scores)
+            scores = [score for score in scores if score is not None]
 
             return (
                 sum(scores) / len(scores) * -1,  # average score, descending
diff --git a/src/sentry/similarity/encoder.py b/src/sentry/similarity/encoder.py
index 226704c1b5..04a85966ac 100644
--- a/src/sentry/similarity/encoder.py
+++ b/src/sentry/similarity/encoder.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from collections import Mapping, Set, Sequence
 
 import six
+from sentry.utils.compat import map
 
 
 class Encoder(object):
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 23f9193938..b681fd4b91 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -5,6 +5,8 @@ import itertools
 import logging
 
 from sentry.utils.dates import to_timestamp
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 logger = logging.getLogger("sentry.similarity")
 
diff --git a/src/sentry/similarity/signatures.py b/src/sentry/similarity/signatures.py
index 5ac301e8b7..ba61fde93c 100644
--- a/src/sentry/similarity/signatures.py
+++ b/src/sentry/similarity/signatures.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import mmh3
+from sentry.utils.compat import map
 
 
 class MinHashSignatureBuilder(object):
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index b2ee86fd9f..8f11d3f104 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -199,7 +199,7 @@ def resolve_discover_aliases(snuba_args):
         for (i, condition) in enumerate(conditions):
             replacement = resolve_condition(condition, resolve_column)
             conditions[i] = replacement
-        resolved["conditions"] = list(filter(None, conditions))
+        resolved["conditions"] = [c for c in conditions if c]
 
     # TODO add support for extracting having conditions.
 
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index be9cdb1ef5..eea33c0ac0 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -615,7 +615,7 @@ class SnubaTagStorage(TagStorage):
     def get_group_ids_for_users(self, project_ids, event_users, limit=100):
         filters = {"project_id": project_ids}
         conditions = [
-            ["tags[sentry:user]", "IN", filter(None, [eu.tag_value for eu in event_users])]
+            ["tags[sentry:user]", "IN", [_f for _f in [eu.tag_value for eu in event_users] if _f]]
         ]
         aggregations = [["max", SEEN_COLUMN, "last_seen"]]
 
@@ -633,7 +633,7 @@ class SnubaTagStorage(TagStorage):
     def get_group_tag_values_for_users(self, event_users, limit=100):
         filters = {"project_id": [eu.project_id for eu in event_users]}
         conditions = [
-            ["tags[sentry:user]", "IN", filter(None, [eu.tag_value for eu in event_users])]
+            ["tags[sentry:user]", "IN", [_f for _f in [eu.tag_value for eu in event_users] if _f]]
         ]
         aggregations = [
             ["count()", "", "times_seen"],
diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index 238b2bdadb..ec72643fe1 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -31,6 +31,9 @@ from sentry.utils.email import MessageBuilder
 from sentry.utils.iterators import chunked
 from sentry.utils.math import mean
 from six.moves import reduce, zip_longest
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
+from sentry.utils.compat import filter
 
 
 date_format = functools.partial(dateformat.format, format_string="F jS, Y")
@@ -436,7 +439,7 @@ class RedisReportBackend(ReportBackend):
                 [project.id for project in projects],
             )
 
-        return list(map(self.__decode, result.value))
+        return map(self.__decode, result.value)
 
 
 backend = RedisReportBackend(redis.clusters.get("default"), 60 * 60 * 3)
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 5ede14f1ec..5981b378d3 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -24,6 +24,7 @@ from sentry.models import (
     SentryApp,
 )
 from sentry.models.sentryapp import VALID_EVENTS, track_response_code
+from sentry.utils.compat import filter
 
 logger = logging.getLogger("sentry.tasks.sentry_apps")
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index ce9d5ae592..0abe23067a 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import
+from sentry.utils.compat import zip
 
 __all__ = (
     "TestCase",
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 5c2e38f51a..c1bfefd5df 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -11,6 +11,7 @@ from enum import Enum
 
 from sentry.utils.dates import to_datetime, to_timestamp
 from sentry.utils.services import Service
+from sentry.utils.compat import map
 
 ONE_MINUTE = 60
 ONE_HOUR = ONE_MINUTE * 60
diff --git a/src/sentry/tsdb/inmemory.py b/src/sentry/tsdb/inmemory.py
index 3322aed4d1..59b043b570 100644
--- a/src/sentry/tsdb/inmemory.py
+++ b/src/sentry/tsdb/inmemory.py
@@ -7,6 +7,7 @@ from django.utils import timezone
 
 from sentry.tsdb.base import BaseTSDB
 from sentry.utils.dates import to_datetime, to_timestamp
+from sentry.utils.compat import map
 
 
 class InMemoryTSDB(BaseTSDB):
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 34ebd220ea..0e8ea2f20e 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -19,6 +19,8 @@ from sentry.utils.dates import to_datetime, to_timestamp
 from sentry.utils.redis import check_cluster_versions, get_cluster_from_options
 from sentry.utils.versioning import Version
 from six.moves import reduce
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 logger = logging.getLogger(__name__)
 
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index ce19e69ba9..fc8a6db8cf 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -10,6 +10,8 @@ from sentry.tsdb.base import BaseTSDB, TSDBModel
 from sentry.utils import snuba, outcomes
 from sentry.utils.data_filters import FILTER_STAT_KEYS_TO_VALUES
 from sentry.utils.dates import to_datetime
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 
 SnubaModelQuerySettings = collections.namedtuple(
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 31c82a7912..90530ce80c 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -11,6 +11,7 @@ from django.utils.http import is_safe_url
 from time import time
 
 from sentry.models import User, Authenticator
+from sentry.utils.compat import map
 
 logger = logging.getLogger("sentry.auth")
 
diff --git a/src/sentry/utils/avatar.py b/src/sentry/utils/avatar.py
index 71ff161c54..10724435c1 100644
--- a/src/sentry/utils/avatar.py
+++ b/src/sentry/utils/avatar.py
@@ -15,6 +15,7 @@ from six.moves.urllib.parse import urlencode
 
 from sentry.utils.hashlib import md5_text
 from sentry.http import safe_urlopen
+from sentry.utils.compat import map
 
 
 def get_gravatar_url(email, size=None, default="mm"):
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index a19a369b74..040284fa33 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 import operator
 import six
-from six.moves import zip
+
 
 from sentry.api.serializers import serialize
 from sentry.models import Release, ReleaseCommit, Commit, CommitFileChange, Group
@@ -16,6 +16,7 @@ from django.core.cache import cache
 
 from collections import defaultdict
 from functools import reduce
+from sentry.utils.compat import zip
 
 PATH_SEPERATORS = frozenset(["/", "\\"])
 
@@ -25,7 +26,7 @@ def tokenize_path(path):
         if sep in path:
             # Exclude empty path segments as some repository integrations
             # start their paths with `/` which we want to ignore.
-            return reversed(filter(lambda x: x != "", path.split(sep)))
+            return reversed([x for x in path.split(sep) if x != ""])
     else:
         return iter([path])
 
diff --git a/src/sentry/utils/compat/__init__.py b/src/sentry/utils/compat/__init__.py
index cea60bf22c..624246d8e4 100644
--- a/src/sentry/utils/compat/__init__.py
+++ b/src/sentry/utils/compat/__init__.py
@@ -13,6 +13,22 @@ try:
 except ImportError:
     import functools  # NOQA
 
+from six.moves import map as _map
+from six.moves import filter as _filter
+from six.moves import zip as _zip
+
+
+def map(a, b, *c):
+    return list(_map(a, b, *c))
+
+
+def filter(a, b):
+    return list(_filter(a, b))
+
+
+def zip(*a):
+    return list(_zip(*a))
+
 
 def _identity(x):
     return x
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index 72f57eec81..42efa8169b 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -46,7 +46,7 @@ def attach_foreignkey(objects, field, related=(), database=None):
 
     # Ensure values are unique, do not contain already present values, and are not missing
     # values specified in select_related
-    values = set(filter(None, (getattr(o, column) for o in objects)))
+    values = set([_f for _f in (getattr(o, column) for o in objects) if _f])
     if values:
         qs = model.objects
         if database:
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 46f8e92903..78cc0c1a0c 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -29,6 +29,7 @@ from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
 from sentry.utils.strings import is_valid_dot_atom
 from sentry.web.helpers import render_to_string
+from sentry.utils.compat import map
 
 # The maximum amount of recipients to display in human format.
 MAX_RECIPIENTS = 5
diff --git a/src/sentry/utils/functional.py b/src/sentry/utils/functional.py
index 91a5e2f420..8732e1b29a 100644
--- a/src/sentry/utils/functional.py
+++ b/src/sentry/utils/functional.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 
 from django.utils.functional import empty
+from sentry.utils.compat import zip
 
 
 def extract_lazy_object(lo):
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index d538b64e5e..2d56f742de 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -9,6 +9,8 @@ from functools import partial
 
 from sentry import options
 from sentry.utils import json
+from sentry.utils.compat import map
+from sentry.utils.compat import filter
 
 ParsedUriMatch = namedtuple("ParsedUriMatch", ["scheme", "domain", "path"])
 
diff --git a/src/sentry/utils/iterators.py b/src/sentry/utils/iterators.py
index 645ad348f5..c4e345bff4 100644
--- a/src/sentry/utils/iterators.py
+++ b/src/sentry/utils/iterators.py
@@ -2,7 +2,9 @@ from __future__ import absolute_import
 
 import itertools
 
-from six.moves import zip
+
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 
 def advance(n, iterator):
diff --git a/src/sentry/utils/meta.py b/src/sentry/utils/meta.py
index ff3d7208fe..2a0f5f0c45 100644
--- a/src/sentry/utils/meta.py
+++ b/src/sentry/utils/meta.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import collections
 import six
+from sentry.utils.compat import map
 
 
 class Meta(object):
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index b474aa4f73..4b4976326e 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -18,6 +18,7 @@ from selenium.webdriver.common.action_chains import ActionChains
 from six.moves.urllib.parse import quote, urlparse
 
 from sentry.utils.retries import TimedRetryPolicy
+from sentry.utils.compat import map
 
 # if we're not running in a PR, we kill the PERCY_TOKEN because its a push
 # to a branch, and we dont want percy comparing things
@@ -322,7 +323,7 @@ def start_chrome(**chrome_args):
 @pytest.fixture(scope="function")
 def browser(request, percy, live_server):
     window_size = request.config.getoption("window_size")
-    window_width, window_height = list(map(int, window_size.split("x", 1)))
+    window_width, window_height = map(int, window_size.split("x", 1))
 
     driver_type = request.config.getoption("selenium_driver")
     headless = not request.config.getoption("no_headless")
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 958aaa51e3..df1c85776b 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -20,6 +20,7 @@ from sentry.exceptions import InvalidConfiguration
 from sentry.utils import warnings
 from sentry.utils.warnings import DeprecatedSettingWarning
 from sentry.utils.versioning import Version, check_versions
+from sentry.utils.compat import map
 
 logger = logging.getLogger(__name__)
 
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 081a175b6a..922ceb2403 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -10,6 +10,7 @@ from django.utils.encoding import force_text
 
 from sentry.utils import json
 from sentry.utils.strings import truncatechars
+from sentry.utils.compat import filter
 
 
 def safe_execute(func, *args, **kwargs):
@@ -149,7 +150,7 @@ def get_path(data, *path, **kwargs):
             return default
 
     if f and data and isinstance(data, (list, tuple)):
-        data = list(filter((lambda x: x is not None) if f is True else f, data))
+        data = filter((lambda x: x is not None) if f is True else f, data)
 
     return data if data is not None else default
 
diff --git a/src/sentry/utils/services.py b/src/sentry/utils/services.py
index 9b0d65c1d5..79f6a98363 100644
--- a/src/sentry/utils/services.py
+++ b/src/sentry/utils/services.py
@@ -394,7 +394,7 @@ class ServiceDelegator(Service):
             )
 
             if self.__callback_func is not None:
-                FutureSet(filter(None, results)).add_done_callback(
+                FutureSet([_f for _f in results if _f]).add_done_callback(
                     lambda *a, **k: self.__callback_func(
                         context, attribute_name, callargs, selected_backend_names, results
                     )
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index e7404fb908..c24f4fc48a 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -34,6 +34,7 @@ from sentry.utils import metrics, json
 from sentry.utils.dates import to_timestamp
 from sentry.snuba.events import Columns
 from sentry.snuba.dataset import Dataset
+from sentry.utils.compat import map
 
 # TODO remove this when Snuba accepts more than 500 issues
 MAX_ISSUES = 500
@@ -756,7 +757,7 @@ def aliased_query(
                 derived_columns.append(col[2])
             else:
                 selected_columns[i] = resolve_column(col, dataset)
-        selected_columns = list(filter(None, selected_columns))
+        selected_columns = [c for c in selected_columns if c]
 
     if aggregations:
         for aggregation in aggregations:
@@ -767,7 +768,7 @@ def aliased_query(
         for (i, condition) in enumerate(conditions):
             replacement = resolve_condition(condition, column_resolver)
             conditions[i] = replacement
-        conditions = list(filter(None, conditions))
+        conditions = [c for c in conditions if c]
 
     if orderby:
         # Don't mutate in case we have a default order passed.
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 539f9ef847..639d6f64f6 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -8,6 +8,7 @@ import string
 import zlib
 
 from django.utils.encoding import force_text, smart_text
+from sentry.utils.compat import map
 
 _word_sep_re = re.compile(r"[\s.;,_-]+(?u)")
 _camelcase_re = re.compile(r"(?:[A-Z]{2,}(?=[A-Z]))|(?:[A-Z][a-z0-9]+)|(?:[a-z0-9]+)")
diff --git a/src/sentry/utils/versioning.py b/src/sentry/utils/versioning.py
index add50d101c..78fd61b438 100644
--- a/src/sentry/utils/versioning.py
+++ b/src/sentry/utils/versioning.py
@@ -4,6 +4,7 @@ import six
 
 from sentry.exceptions import InvalidConfiguration
 from sentry.utils import warnings
+from sentry.utils.compat import map
 
 
 class Version(tuple):
@@ -42,13 +43,13 @@ def check_versions(service, versions, required, recommended=None):
         requirement, a ``PendingDeprecationWarning`` is raised.
     """
     # x = (host, version)
-    must_upgrade = dict(filter(lambda x: required > x[1], versions.items()))
+    must_upgrade = dict([x for x in versions.items() if required > x[1]])
     if must_upgrade:
         raise InvalidConfiguration(make_upgrade_message(service, "must", required, must_upgrade))
 
     if recommended:
         # x = (host, version)
-        should_upgrade = dict(filter(lambda x: recommended > x[1], versions.items()))
+        should_upgrade = dict([x for x in versions.items() if recommended > x[1]])
         if should_upgrade:
             warnings.warn(
                 make_upgrade_message(service, "should", recommended, should_upgrade),
diff --git a/src/sentry/web/frontend/debug/debug_new_release_email.py b/src/sentry/web/frontend/debug/debug_new_release_email.py
index f413723eac..8b830d1782 100644
--- a/src/sentry/web/frontend/debug/debug_new_release_email.py
+++ b/src/sentry/web/frontend/debug/debug_new_release_email.py
@@ -18,6 +18,7 @@ from sentry.models import (
 from sentry.utils.http import absolute_uri
 
 from .mail import MailPreview
+from sentry.utils.compat import zip
 
 
 class DebugNewReleaseEmailView(View):
diff --git a/src/sentry/web/frontend/mixins/csv.py b/src/sentry/web/frontend/mixins/csv.py
index 7529636dce..654f1c5071 100644
--- a/src/sentry/web/frontend/mixins/csv.py
+++ b/src/sentry/web/frontend/mixins/csv.py
@@ -5,6 +5,7 @@ import six
 
 from django.utils.encoding import force_bytes
 from django.http import StreamingHttpResponse
+from sentry.utils.compat import map
 
 # Python 2 doesn't support unicode with CSV, but Python 3 does via
 # the encoding param
diff --git a/src/sentry_plugins/twilio/plugin.py b/src/sentry_plugins/twilio/plugin.py
index 78e5f5ccc5..03cea45c50 100644
--- a/src/sentry_plugins/twilio/plugin.py
+++ b/src/sentry_plugins/twilio/plugin.py
@@ -13,6 +13,8 @@ from .client import TwilioApiClient
 from sentry_plugins.base import CorePluginMixin
 
 import sentry
+from sentry.utils.compat import map
+from sentry.utils.compat import filter
 
 DEFAULT_REGION = "US"
 MAX_SMS_LENGTH = 160
diff --git a/src/social_auth/__init__.py b/src/social_auth/__init__.py
index 9619dff167..f76c2287d2 100644
--- a/src/social_auth/__init__.py
+++ b/src/social_auth/__init__.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import six
+from sentry.utils.compat import map
 
 version = (0, 7, 28)
 
diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index 7873e48c69..866b5c4866 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -45,6 +45,7 @@ from social_auth.exceptions import (
 )
 
 from sentry.utils import json
+from sentry.utils.compat import map
 
 PIPELINE = setting(
     "SOCIAL_AUTH_PIPELINE",
diff --git a/tests/sentry/api/endpoints/team_projects.py b/tests/sentry/api/endpoints/team_projects.py
index 52bcdeff04..795a1e01d5 100644
--- a/tests/sentry/api/endpoints/team_projects.py
+++ b/tests/sentry/api/endpoints/team_projects.py
@@ -6,6 +6,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.models import Project
 from sentry.testutils import APITestCase
+from sentry.utils.compat import map
 
 
 class TeamProjectIndexTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_organization_config_repositories.py b/tests/sentry/api/endpoints/test_organization_config_repositories.py
index 24f0e494f0..2ab424482e 100644
--- a/tests/sentry/api/endpoints/test_organization_config_repositories.py
+++ b/tests/sentry/api/endpoints/test_organization_config_repositories.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase
+from sentry.utils.compat import filter
 
 
 class OrganizationConfigRepositoriesTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_organization_dashboard_details.py b/tests/sentry/api/endpoints/test_organization_dashboard_details.py
index ace16a45bf..8c10df0b19 100644
--- a/tests/sentry/api/endpoints/test_organization_dashboard_details.py
+++ b/tests/sentry/api/endpoints/test_organization_dashboard_details.py
@@ -12,6 +12,7 @@ from sentry.models import (
     WidgetDisplayTypes,
 )
 from sentry.testutils import APITestCase
+from sentry.utils.compat import zip
 
 
 class OrganizationDashboardDetailsTestCase(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index 600dff94a1..d7ea759349 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -18,6 +18,7 @@ from sentry.models import (
     TotpInterface,
 )
 from sentry.testutils import APITestCase
+from sentry.utils.compat import map
 
 
 class UpdateOrganizationMemberTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_organization_plugins.py b/tests/sentry/api/endpoints/test_organization_plugins.py
index f9517003b4..e4014d75e6 100644
--- a/tests/sentry/api/endpoints/test_organization_plugins.py
+++ b/tests/sentry/api/endpoints/test_organization_plugins.py
@@ -32,7 +32,7 @@ class OrganizationPluginsTest(APITestCase):
         # issuetrackingplugin2, webhooks, mail
         # none of the plugins should have an 'enabled' key since these
         # plugins are not bound by a project
-        plugins = [p for p in filter(lambda p: "enabled" in p, response.data)]
+        plugins = [p for p in [p for p in response.data if "enabled" in p]]
         assert len(plugins) == 0
         assert len(response.data) > 0
 
@@ -49,7 +49,7 @@ class OrganizationPluginsTest(APITestCase):
         assert response.status_code == 200, (response.status_code, response.content)
 
         enabled_plugins = [
-            (p["project"]["id"], p["slug"]) for p in filter(lambda p: p["enabled"], response.data)
+            (p["project"]["id"], p["slug"]) for p in [p for p in response.data if p["enabled"]]
         ]
 
         assert (self.projectA.id, "webhooks") in enabled_plugins
@@ -67,7 +67,7 @@ class OrganizationPluginsTest(APITestCase):
         assert response.status_code == 200, (response.status_code, response.content)
 
         enabled_plugins = [
-            (p["project"]["id"], p["slug"]) for p in filter(lambda p: p["enabled"], response.data)
+            (p["project"]["id"], p["slug"]) for p in [p for p in response.data if p["enabled"]]
         ]
 
         assert (self.projectA.id, "webhooks") not in enabled_plugins
@@ -85,7 +85,7 @@ class OrganizationPluginsTest(APITestCase):
         assert response.status_code == 200, (response.status_code, response.content)
 
         enabled_plugins = [
-            (p["project"]["id"], p["slug"]) for p in filter(lambda p: p["enabled"], response.data)
+            (p["project"]["id"], p["slug"]) for p in [p for p in response.data if p["enabled"]]
         ]
 
         assert enabled_plugins == [(self.projectB.id, "mail")]
diff --git a/tests/sentry/api/endpoints/test_organization_plugins_configs.py b/tests/sentry/api/endpoints/test_organization_plugins_configs.py
index ae9a9b4334..3d238a2c4e 100644
--- a/tests/sentry/api/endpoints/test_organization_plugins_configs.py
+++ b/tests/sentry/api/endpoints/test_organization_plugins_configs.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from sentry.plugins.base import plugins
 from sentry.testutils import APITestCase
+from sentry.utils.compat import map
 
 
 class OrganizationPluginsTest(APITestCase):
@@ -28,7 +29,7 @@ class OrganizationPluginsTest(APITestCase):
 
     def test_only_configuable_plugins(self):
         response = self.client.get(self.url)
-        assert filter(lambda x: not x["hasConfiguration"], response.data) == []
+        assert [x for x in response.data if not x["hasConfiguration"]] == []
 
     def test_enabled_not_configured(self):
         plugins.get("webhooks").enable(self.projectA)
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 6ac07964dd..2fbd7c7f26 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -23,6 +23,7 @@ from sentry.models import (
     AuditLogEntryEvent,
 )
 from sentry.testutils import APITestCase
+from sentry.utils.compat import zip
 
 
 class ProjectDetailsTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py b/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py
index cce677ae7f..eacc82077e 100644
--- a/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py
+++ b/tests/sentry/api/endpoints/test_project_issues_resolved_in_release.py
@@ -7,6 +7,7 @@ import six
 from sentry.models import Commit, GroupLink, GroupResolution, ReleaseCommit, Repository
 
 from sentry.testutils import APITestCase
+from sentry.utils.compat import map
 
 
 class ProjectIssuesResolvedInReleaseEndpointTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_project_plugins.py b/tests/sentry/api/endpoints/test_project_plugins.py
index bc7a779ebe..3472d44bfb 100644
--- a/tests/sentry/api/endpoints/test_project_plugins.py
+++ b/tests/sentry/api/endpoints/test_project_plugins.py
@@ -5,6 +5,7 @@ from django.core.urlresolvers import reverse
 from sentry.plugins.base import plugins
 from sentry.testutils import APITestCase
 from sentry.utils.compat.mock import patch
+from sentry.utils.compat import filter
 
 
 class ProjectPluginsTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index 4e06f94822..5665e12d68 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -7,6 +7,7 @@ from uuid import uuid4
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.models import EventUser, GroupStatus, UserReport
+from sentry.utils.compat import map
 
 
 class ProjectUserReportListTest(APITestCase, SnubaTestCase):
diff --git a/tests/sentry/api/endpoints/test_project_users.py b/tests/sentry/api/endpoints/test_project_users.py
index cd16c4f88e..2626c82e64 100644
--- a/tests/sentry/api/endpoints/test_project_users.py
+++ b/tests/sentry/api/endpoints/test_project_users.py
@@ -6,6 +6,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.models import EventUser
 from sentry.testutils import APITestCase
+from sentry.utils.compat import map
 
 
 class ProjectUsersTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_user_emails.py b/tests/sentry/api/endpoints/test_user_emails.py
index 93bb21c5b8..9f0e5d2859 100644
--- a/tests/sentry/api/endpoints/test_user_emails.py
+++ b/tests/sentry/api/endpoints/test_user_emails.py
@@ -21,11 +21,11 @@ class UserEmailsTest(APITestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 3
 
-        primary_email = filter(lambda n: n["isPrimary"], response.data)
+        primary_email = [n for n in response.data if n["isPrimary"]]
         assert len(primary_email) == 1
         assert primary_email[0]["email"] == "foo@example.com"
 
-        secondary_emails = filter(lambda n: not n["isPrimary"], response.data)
+        secondary_emails = [n for n in response.data if not n["isPrimary"]]
         assert len(secondary_emails) == 2
 
     def test_add_secondary_email(self):
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 350deed20d..a60d391949 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -881,7 +881,7 @@ class ParseBooleanSearchQueryTest(unittest.TestCase):
 
 class GetSnubaQueryArgsTest(TestCase):
     def test_simple(self):
-        filter = get_filter(
+        _filter = get_filter(
             "user.email:foo@example.com release:1.2.1 fruit:apple hello",
             {
                 "project_id": [1, 2, 3],
@@ -890,25 +890,25 @@ class GetSnubaQueryArgsTest(TestCase):
             },
         )
 
-        assert filter.conditions == [
+        assert _filter.conditions == [
             ["user.email", "=", "foo@example.com"],
             ["release", "=", "1.2.1"],
             [["ifNull", ["fruit", "''"]], "=", "apple"],
             [["positionCaseInsensitive", ["message", "'hello'"]], "!=", 0],
         ]
-        assert filter.start == datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc)
-        assert filter.end == datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc)
-        assert filter.filter_keys == {"project_id": [1, 2, 3]}
-        assert filter.project_ids == [1, 2, 3]
-        assert not filter.group_ids
-        assert not filter.event_ids
+        assert _filter.start == datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc)
+        assert _filter.end == datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc)
+        assert _filter.filter_keys == {"project_id": [1, 2, 3]}
+        assert _filter.project_ids == [1, 2, 3]
+        assert not _filter.group_ids
+        assert not _filter.event_ids
 
     def test_negation(self):
-        filter = get_filter("!user.email:foo@example.com")
-        assert filter.conditions == [
+        _filter = get_filter("!user.email:foo@example.com")
+        assert _filter.conditions == [
             [[["isNull", ["user.email"]], "=", 1], ["user.email", "!=", "foo@example.com"]]
         ]
-        assert filter.filter_keys == {}
+        assert _filter.filter_keys == {}
 
     def test_implicit_and_explicit_tags(self):
         assert get_filter("tags[fruit]:apple").conditions == [
@@ -922,40 +922,40 @@ class GetSnubaQueryArgsTest(TestCase):
         ]
 
     def test_no_search(self):
-        filter = get_filter(
+        _filter = get_filter(
             params={
                 "project_id": [1, 2, 3],
                 "start": datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc),
                 "end": datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc),
             }
         )
-        assert not filter.conditions
-        assert filter.filter_keys == {"project_id": [1, 2, 3]}
-        assert filter.start == datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc)
-        assert filter.end == datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc)
+        assert not _filter.conditions
+        assert _filter.filter_keys == {"project_id": [1, 2, 3]}
+        assert _filter.start == datetime.datetime(2015, 5, 18, 10, 15, 1, tzinfo=timezone.utc)
+        assert _filter.end == datetime.datetime(2015, 5, 19, 10, 15, 1, tzinfo=timezone.utc)
 
     def test_wildcard(self):
-        filter = get_filter("release:3.1.* user.email:*@example.com")
-        assert filter.conditions == [
+        _filter = get_filter("release:3.1.* user.email:*@example.com")
+        assert _filter.conditions == [
             [["match", ["release", "'(?i)^3\\.1\\..*$'"]], "=", 1],
             [["match", ["user.email", "'(?i)^.*\\@example\\.com$'"]], "=", 1],
         ]
-        assert filter.filter_keys == {}
+        assert _filter.filter_keys == {}
 
     def test_wildcard_event_id(self):
         with self.assertRaises(InvalidSearchQuery):
             get_filter("id:deadbeef*")
 
     def test_negated_wildcard(self):
-        filter = get_filter("!release:3.1.* user.email:*@example.com")
-        assert filter.conditions == [
+        _filter = get_filter("!release:3.1.* user.email:*@example.com")
+        assert _filter.conditions == [
             [
                 [["isNull", ["release"]], "=", 1],
                 [["match", ["release", "'(?i)^3\\.1\\..*$'"]], "!=", 1],
             ],
             [["match", ["user.email", "'(?i)^.*\\@example\\.com$'"]], "=", 1],
         ]
-        assert filter.filter_keys == {}
+        assert _filter.filter_keys == {}
 
     def test_escaped_wildcard(self):
         assert get_filter("release:3.1.\\* user.email:\\*@example.com").conditions == [
@@ -970,15 +970,15 @@ class GetSnubaQueryArgsTest(TestCase):
         ]
 
     def test_wildcard_array_field(self):
-        filter = get_filter(
+        _filter = get_filter(
             "error.value:Deadlock* stack.filename:*.py stack.abs_path:%APP_DIR%/th_ing*"
         )
-        assert filter.conditions == [
+        assert _filter.conditions == [
             ["error.value", "LIKE", "Deadlock%"],
             ["stack.filename", "LIKE", "%.py"],
             ["stack.abs_path", "LIKE", "\\%APP\\_DIR\\%/th\\_ing%"],
         ]
-        assert filter.filter_keys == {}
+        assert _filter.filter_keys == {}
 
     def test_has(self):
         assert get_filter("has:release").conditions == [[["isNull", ["release"]], "!=", 1]]
@@ -1013,20 +1013,20 @@ class GetSnubaQueryArgsTest(TestCase):
             get_filter("(user.email:foo@example.com OR user.email:bar@example.com")
 
     def test_issue_id_filter(self):
-        filter = get_filter("issue.id:1")
-        assert not filter.conditions
-        assert filter.filter_keys == {"group_id": [1]}
-        assert filter.group_ids == [1]
+        _filter = get_filter("issue.id:1")
+        assert not _filter.conditions
+        assert _filter.filter_keys == {"group_id": [1]}
+        assert _filter.group_ids == [1]
 
-        filter = get_filter("issue.id:1 issue.id:2 issue.id:3")
-        assert not filter.conditions
-        assert filter.filter_keys == {"group_id": [1, 2, 3]}
-        assert filter.group_ids == [1, 2, 3]
+        _filter = get_filter("issue.id:1 issue.id:2 issue.id:3")
+        assert not _filter.conditions
+        assert _filter.filter_keys == {"group_id": [1, 2, 3]}
+        assert _filter.group_ids == [1, 2, 3]
 
-        filter = get_filter("issue.id:1 user.email:foo@example.com")
-        assert filter.conditions == [["user.email", "=", "foo@example.com"]]
-        assert filter.filter_keys == {"group_id": [1]}
-        assert filter.group_ids == [1]
+        _filter = get_filter("issue.id:1 user.email:foo@example.com")
+        assert _filter.conditions == [["user.email", "=", "foo@example.com"]]
+        assert _filter.filter_keys == {"group_id": [1]}
+        assert _filter.group_ids == [1]
 
     def test_issue_filter(self):
         with pytest.raises(InvalidSearchQuery) as err:
@@ -1036,60 +1036,60 @@ class GetSnubaQueryArgsTest(TestCase):
 
     def test_environment_param(self):
         params = {"environment": ["", "prod"]}
-        filter = get_filter("", params)
+        _filter = get_filter("", params)
         # Should generate OR conditions
-        assert filter.conditions == [
+        assert _filter.conditions == [
             [["environment", "IS NULL", None], ["environment", "=", "prod"]]
         ]
-        assert filter.filter_keys == {}
-        assert filter.group_ids == []
+        assert _filter.filter_keys == {}
+        assert _filter.group_ids == []
 
         params = {"environment": ["dev", "prod"]}
-        filter = get_filter("", params)
-        assert filter.conditions == [[["environment", "IN", {"dev", "prod"}]]]
-        assert filter.filter_keys == {}
-        assert filter.group_ids == []
+        _filter = get_filter("", params)
+        assert _filter.conditions == [[["environment", "IN", {"dev", "prod"}]]]
+        assert _filter.filter_keys == {}
+        assert _filter.group_ids == []
 
     def test_environment_condition_string(self):
-        filter = get_filter("environment:dev")
-        assert filter.conditions == [[["environment", "=", "dev"]]]
-        assert filter.filter_keys == {}
-        assert filter.group_ids == []
+        _filter = get_filter("environment:dev")
+        assert _filter.conditions == [[["environment", "=", "dev"]]]
+        assert _filter.filter_keys == {}
+        assert _filter.group_ids == []
 
-        filter = get_filter("!environment:dev")
-        assert filter.conditions == [[["environment", "!=", "dev"]]]
-        assert filter.filter_keys == {}
-        assert filter.group_ids == []
+        _filter = get_filter("!environment:dev")
+        assert _filter.conditions == [[["environment", "!=", "dev"]]]
+        assert _filter.filter_keys == {}
+        assert _filter.group_ids == []
 
-        filter = get_filter("environment:dev environment:prod")
+        _filter = get_filter("environment:dev environment:prod")
         # Will generate conditions that will never find anything
-        assert filter.conditions == [[["environment", "=", "dev"]], [["environment", "=", "prod"]]]
-        assert filter.filter_keys == {}
-        assert filter.group_ids == []
+        assert _filter.conditions == [[["environment", "=", "dev"]], [["environment", "=", "prod"]]]
+        assert _filter.filter_keys == {}
+        assert _filter.group_ids == []
 
-        filter = get_filter('environment:""')
+        _filter = get_filter('environment:""')
         # The '' environment is Null in snuba
-        assert filter.conditions == [[["environment", "IS NULL", None]]]
-        assert filter.filter_keys == {}
-        assert filter.group_ids == []
+        assert _filter.conditions == [[["environment", "IS NULL", None]]]
+        assert _filter.filter_keys == {}
+        assert _filter.group_ids == []
 
     def test_project_name(self):
         p1 = self.create_project(organization=self.organization)
         p2 = self.create_project(organization=self.organization)
 
         params = {"project_id": [p1.id, p2.id]}
-        filter = get_filter("project.name:{}".format(p1.slug), params)
-        assert filter.conditions == [["project_id", "=", p1.id]]
-        assert filter.filter_keys == {"project_id": [p1.id, p2.id]}
-        assert filter.project_ids == [p1.id, p2.id]
+        _filter = get_filter("project.name:{}".format(p1.slug), params)
+        assert _filter.conditions == [["project_id", "=", p1.id]]
+        assert _filter.filter_keys == {"project_id": [p1.id, p2.id]}
+        assert _filter.project_ids == [p1.id, p2.id]
 
         params = {"project_id": [p1.id, p2.id]}
-        filter = get_filter("!project.name:{}".format(p1.slug), params)
-        assert filter.conditions == [
+        _filter = get_filter("!project.name:{}".format(p1.slug), params)
+        assert _filter.conditions == [
             [[["isNull", ["project_id"]], "=", 1], ["project_id", "!=", p1.id]]
         ]
-        assert filter.filter_keys == {"project_id": [p1.id, p2.id]}
-        assert filter.project_ids == [p1.id, p2.id]
+        assert _filter.filter_keys == {"project_id": [p1.id, p2.id]}
+        assert _filter.project_ids == [p1.id, p2.id]
 
         with pytest.raises(InvalidSearchQuery) as err:
             params = {"project_id": []}
diff --git a/tests/sentry/auth/test_helper.py b/tests/sentry/auth/test_helper.py
index f4817ad110..a3b4e81438 100644
--- a/tests/sentry/auth/test_helper.py
+++ b/tests/sentry/auth/test_helper.py
@@ -28,7 +28,7 @@ class HandleNewUserTest(TestCase):
         assert user.email == identity["email"]
         assert OrganizationMember.objects.filter(organization=self.organization, user=user).exists()
 
-        signup_record = filter(lambda r: r[0][0] == "user.signup", mock_record.call_args_list)
+        signup_record = [r for r in mock_record.call_args_list if r[0][0] == "user.signup"]
         assert signup_record == [
             mock.call(
                 "user.signup", user_id=user.id, source="sso", provider=provider, referrer="in-app"
diff --git a/tests/sentry/db/postgres/test_base.py b/tests/sentry/db/postgres/test_base.py
index dd81f9fc49..d74f731d5e 100644
--- a/tests/sentry/db/postgres/test_base.py
+++ b/tests/sentry/db/postgres/test_base.py
@@ -5,6 +5,7 @@ import pytest
 from sentry.testutils import TestCase
 from sentry.constants import MAX_CULPRIT_LENGTH
 from django.utils.encoding import force_text
+from sentry.utils.compat import map
 
 
 def psycopg2_version():
diff --git a/tests/sentry/event_manager/test_validate_csp.py b/tests/sentry/event_manager/test_validate_csp.py
index 33d811ee16..d637fe12e6 100644
--- a/tests/sentry/event_manager/test_validate_csp.py
+++ b/tests/sentry/event_manager/test_validate_csp.py
@@ -4,6 +4,7 @@ import pytest
 
 from sentry.coreapi import APIError
 from sentry.event_manager import EventManager
+from sentry.utils.compat import map
 
 
 def validate_and_normalize(report, client_ip="198.51.100.0", user_agent="Awesome Browser"):
diff --git a/tests/sentry/eventstore/snuba/test_backend.py b/tests/sentry/eventstore/snuba/test_backend.py
index c0323898c9..645b198185 100644
--- a/tests/sentry/eventstore/snuba/test_backend.py
+++ b/tests/sentry/eventstore/snuba/test_backend.py
@@ -133,11 +133,11 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
     def test_get_next_prev_event_id(self):
         event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
 
-        filter = Filter(project_ids=[self.project1.id, self.project2.id])
+        _filter = Filter(project_ids=[self.project1.id, self.project2.id])
 
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
+        prev_event = self.eventstore.get_prev_event_id(event, filter=_filter)
 
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
+        next_event = self.eventstore.get_next_event_id(event, filter=_filter)
 
         assert prev_event == (six.text_type(self.project1.id), "a" * 32)
 
@@ -145,40 +145,40 @@ class SnubaEventStorageTest(TestCase, SnubaTestCase):
         assert next_event == (six.text_type(self.project2.id), "c" * 32)
 
         # Returns None if no event
-        assert self.eventstore.get_prev_event_id(None, filter=filter) is None
-        assert self.eventstore.get_next_event_id(None, filter=filter) is None
+        assert self.eventstore.get_prev_event_id(None, filter=_filter) is None
+        assert self.eventstore.get_next_event_id(None, filter=_filter) is None
 
     def test_get_latest_or_oldest_event_id(self):
         # Returns a latest/oldest event
         event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
-        filter = Filter(project_ids=[self.project1.id, self.project2.id])
-        oldest_event = self.eventstore.get_earliest_event_id(event, filter=filter)
-        latest_event = self.eventstore.get_latest_event_id(event, filter=filter)
+        _filter = Filter(project_ids=[self.project1.id, self.project2.id])
+        oldest_event = self.eventstore.get_earliest_event_id(event, filter=_filter)
+        latest_event = self.eventstore.get_latest_event_id(event, filter=_filter)
         assert oldest_event == (six.text_type(self.project1.id), "a" * 32)
         assert latest_event == (six.text_type(self.project2.id), "e" * 32)
 
         # Returns none when no latest/oldest event that meets conditions
         event = self.eventstore.get_event_by_id(self.project2.id, "b" * 32)
-        filter = Filter(project_ids=[self.project1.id], group_ids=[self.event2.group_id])
-        oldest_event = self.eventstore.get_earliest_event_id(event, filter=filter)
-        latest_event = self.eventstore.get_latest_event_id(event, filter=filter)
+        _filter = Filter(project_ids=[self.project1.id], group_ids=[self.event2.group_id])
+        oldest_event = self.eventstore.get_earliest_event_id(event, filter=_filter)
+        latest_event = self.eventstore.get_latest_event_id(event, filter=_filter)
         assert oldest_event is None
         assert latest_event is None
 
     def test_transaction_get_next_prev_event_id(self):
-        filter = Filter(
+        _filter = Filter(
             project_ids=[self.project1.id, self.project2.id],
             conditions=[["type", "=", "transaction"]],
         )
 
         event = self.eventstore.get_event_by_id(self.project2.id, "e" * 32)
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
+        prev_event = self.eventstore.get_prev_event_id(event, filter=_filter)
+        next_event = self.eventstore.get_next_event_id(event, filter=_filter)
         assert prev_event == (six.text_type(self.project2.id), "d" * 32)
         assert next_event is None
 
         event = self.eventstore.get_event_by_id(self.project2.id, "d" * 32)
-        prev_event = self.eventstore.get_prev_event_id(event, filter=filter)
-        next_event = self.eventstore.get_next_event_id(event, filter=filter)
+        prev_event = self.eventstore.get_prev_event_id(event, filter=_filter)
+        next_event = self.eventstore.get_next_event_id(event, filter=_filter)
         assert prev_event is None
         assert next_event == (six.text_type(self.project2.id), "e" * 32)
diff --git a/tests/sentry/eventstore/test_base.py b/tests/sentry/eventstore/test_base.py
index fc47956c04..1ae1c4c46c 100644
--- a/tests/sentry/eventstore/test_base.py
+++ b/tests/sentry/eventstore/test_base.py
@@ -75,17 +75,17 @@ class ServiceDelegationTest(TestCase, SnubaTestCase):
 
         with mock.patch.object(logger, "info") as mock_logger:
             # No differences to log
-            filter = eventstore.Filter(project_ids=[self.project.id])
-            eventstore.get_events(filter=filter)
+            _filter = eventstore.Filter(project_ids=[self.project.id])
+            eventstore.get_events(filter=_filter)
             eventstore.get_event_by_id(self.project.id, "a" * 32)
             assert mock_logger.call_count == 0
 
             # Here we expect a difference since the original implementation handles type as a tag
             event = eventstore.get_event_by_id(self.project.id, "a" * 32)
-            filter = eventstore.Filter(
+            _filter = eventstore.Filter(
                 project_ids=[self.project.id], conditions=[["type", "=", "transaction"]]
             )
-            eventstore.get_next_event_id(event, filter)
+            eventstore.get_next_event_id(event, _filter)
             assert mock_logger.call_count == 1
             mock_logger.assert_called_with(
                 "discover.result-mismatch",
@@ -94,7 +94,7 @@ class ServiceDelegationTest(TestCase, SnubaTestCase):
                     "snuba_discover_result": (six.text_type(self.project.id), "b" * 32),
                     "method": "get_next_event_id",
                     "event_id": event.event_id,
-                    "filter_keys": filter.filter_keys,
-                    "conditions": filter.conditions,
+                    "filter_keys": _filter.filter_keys,
+                    "conditions": _filter.conditions,
                 },
             )
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 3051225bdf..886521e065 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -70,6 +70,7 @@ from sentry.snuba.models import QueryAggregations, QueryDatasets, QuerySubscript
 from sentry.models.integration import Integration
 from sentry.testutils import TestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format
+from sentry.utils.compat import zip
 
 
 class CreateIncidentTest(TestCase):
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index f9a7f471d0..5a87fa4f8c 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -42,6 +42,7 @@ from sentry.incidents.subscription_processor import (
 from sentry.snuba.models import QueryAggregations, QuerySubscription
 from sentry.testutils import TestCase
 from sentry.utils.dates import to_timestamp
+from sentry.utils.compat import map
 
 
 @freeze_time()
diff --git a/tests/sentry/lang/native/test_symbolicator.py b/tests/sentry/lang/native/test_symbolicator.py
index 8a65ce8d4e..dc2d8f7cbc 100644
--- a/tests/sentry/lang/native/test_symbolicator.py
+++ b/tests/sentry/lang/native/test_symbolicator.py
@@ -4,6 +4,7 @@ import pytest
 
 from sentry.lang.native.symbolicator import get_sources_for_project
 from sentry.testutils.helpers import Feature
+from sentry.utils.compat import map
 
 
 CUSTOM_SOURCE_CONFIG = """
diff --git a/tests/sentry/models/test_file.py b/tests/sentry/models/test_file.py
index 86ef1c2965..c9edc19cde 100644
--- a/tests/sentry/models/test_file.py
+++ b/tests/sentry/models/test_file.py
@@ -6,6 +6,7 @@ from django.core.files.base import ContentFile
 
 from sentry.models import File, FileBlob
 from sentry.testutils import TestCase
+from sentry.utils.compat import map
 
 
 class FileBlobTest(TestCase):
diff --git a/tests/sentry/models/test_project.py b/tests/sentry/models/test_project.py
index b1a7b7b48f..640e6a4218 100644
--- a/tests/sentry/models/test_project.py
+++ b/tests/sentry/models/test_project.py
@@ -18,6 +18,7 @@ from sentry.models import (
     Rule,
 )
 from sentry.testutils import TestCase
+from sentry.utils.compat import zip
 
 
 class ProjectTest(TestCase):
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 0f50994a7e..00ce41721d 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -13,6 +13,7 @@ from sentry.quotas.redis import is_rate_limited, BasicRedisQuota, RedisQuota
 from sentry.testutils import TestCase
 from sentry.utils.redis import clusters
 from six.moves import xrange
+from sentry.utils.compat import map
 
 
 def test_is_rate_limited_script():
@@ -63,9 +64,9 @@ def test_is_rate_limited_script():
     # increment
     is_rate_limited(client, ("orange", "baz"), (1, now + 60))
     # test that it's rate limited without refund
-    assert list(map(bool, is_rate_limited(client, ("orange", "baz"), (1, now + 60)))) == [True]
+    assert map(bool, is_rate_limited(client, ("orange", "baz"), (1, now + 60))) == [True]
     # test that refund key is used
-    assert list(map(bool, is_rate_limited(client, ("orange", "apple"), (1, now + 60)))) == [False]
+    assert map(bool, is_rate_limited(client, ("orange", "apple"), (1, now + 60))) == [False]
 
 
 class RedisQuotaTest(TestCase):
diff --git a/tests/sentry/similarity/test_signatures.py b/tests/sentry/similarity/test_signatures.py
index 9859609526..aaf6d425fe 100644
--- a/tests/sentry/similarity/test_signatures.py
+++ b/tests/sentry/similarity/test_signatures.py
@@ -4,6 +4,8 @@ from collections import Counter
 from unittest import TestCase
 
 from sentry.similarity.signatures import MinHashSignatureBuilder
+from sentry.utils.compat import map
+from sentry.utils.compat import zip
 
 
 class MinHashSignatureBuilderTestCase(TestCase):
diff --git a/tests/sentry/tasks/test_reports.py b/tests/sentry/tasks/test_reports.py
index ec6dd43c9a..a138e5dd88 100644
--- a/tests/sentry/tasks/test_reports.py
+++ b/tests/sentry/tasks/test_reports.py
@@ -40,6 +40,7 @@ from sentry.utils.dates import to_datetime, to_timestamp, floor_to_utc_day
 from sentry.testutils.helpers.datetime import iso_format
 
 from six.moves import xrange
+from sentry.utils.compat import map
 
 
 @pytest.yield_fixture(scope="module")
diff --git a/tests/sentry/tsdb/test_snuba.py b/tests/sentry/tsdb/test_snuba.py
index 82e8266de1..08eb3d47bb 100644
--- a/tests/sentry/tsdb/test_snuba.py
+++ b/tests/sentry/tsdb/test_snuba.py
@@ -208,9 +208,9 @@ class SnubaTSDBTest(OutcomesSnubaTest):
         ]
 
         # does not include the internal TSDB model
-        models = filter(
-            lambda model: 0 < model.value < 700 and model not in exceptions, list(TSDBModel)
-        )
+        models = [
+            model for model in list(TSDBModel) if 0 < model.value < 700 and model not in exceptions
+        ]
         for model in models:
             assert model in SnubaTSDB.model_query_settings
 
@@ -234,6 +234,6 @@ class SnubaTSDBTest(OutcomesSnubaTest):
                 or (600 <= model.value < 700)
             )
 
-        models = filter(lambda x: is_an_outcome(x), list(TSDBModel))
+        models = [x for x in list(TSDBModel) if is_an_outcome(x)]
         for model in models:
             assert model in SnubaTSDB.lower_rollup_query_settings
diff --git a/tests/sentry/utils/test_numbers.py b/tests/sentry/utils/test_numbers.py
index 8c1e0bb085..371cbf7172 100644
--- a/tests/sentry/utils/test_numbers.py
+++ b/tests/sentry/utils/test_numbers.py
@@ -141,7 +141,7 @@ def test_base36():
         "3J",
     ]
 
-    assert [base36_decode(base36_encode(x)) for x in range(128)] == list(map(int, range(128)))
+    assert [base36_decode(base36_encode(x)) for x in range(128)] == list(range(128))
 
 
 def test_base32():
@@ -276,7 +276,7 @@ def test_base32():
         "3Z",
     ]
 
-    assert [base32_decode(base32_encode(x)) for x in range(128)] == list(map(int, range(128)))
+    assert [base32_decode(base32_encode(x)) for x in range(128)] == list(range(128))
 
 
 def test_format_bytes():
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index e8e4d1a44d..bcc575fa29 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -88,7 +88,7 @@ class AuthLoginTest(TestCase):
         assert user.name == "Foo Bar"
         assert not OrganizationMember.objects.filter(user=user).exists()
 
-        signup_record = filter(lambda r: r[0][0] == "user.signup", mock_record.call_args_list)
+        signup_record = [r for r in mock_record.call_args_list if r[0][0] == "user.signup"]
         assert signup_record == [
             mock.call(
                 "user.signup",
diff --git a/tests/sentry/web/frontend/test_auth_saml2.py b/tests/sentry/web/frontend/test_auth_saml2.py
index 1a55546d5f..93d268e733 100644
--- a/tests/sentry/web/frontend/test_auth_saml2.py
+++ b/tests/sentry/web/frontend/test_auth_saml2.py
@@ -21,6 +21,7 @@ from sentry.models import (
 )
 from sentry.testutils import AuthProviderTestCase
 from sentry.testutils.helpers import Feature
+from sentry.utils.compat import map
 
 
 dummy_provider_config = {
diff --git a/tests/sentry_plugins/twilio/test_plugin.py b/tests/sentry_plugins/twilio/test_plugin.py
index 5a2c31c348..d80c6ea120 100644
--- a/tests/sentry_plugins/twilio/test_plugin.py
+++ b/tests/sentry_plugins/twilio/test_plugin.py
@@ -8,6 +8,7 @@ from sentry.plugins.base import Notification
 from sentry.testutils import TestCase, PluginTestCase
 from sentry_plugins.twilio.plugin import TwilioConfigurationForm, TwilioPlugin
 from six.moves.urllib.parse import parse_qs
+from sentry.utils.compat import map
 
 
 class TwilioConfigurationFormTest(TestCase):
@@ -40,7 +41,7 @@ class TwilioConfigurationFormTest(TestCase):
         # extracting the message from django.forms.ValidationError
         # is the easiest and simplest way I've found to assert as_data
         for e in errors:
-            errors[e] = list(map(lambda x: x.message, errors[e]))
+            errors[e] = map(lambda x: x.message, errors[e])
 
         self.assertDictEqual(
             errors,
diff --git a/tests/snuba/api/endpoints/test_group_events.py b/tests/snuba/api/endpoints/test_group_events.py
index 22fc80bc2f..a12b43eff7 100644
--- a/tests/snuba/api/endpoints/test_group_events.py
+++ b/tests/snuba/api/endpoints/test_group_events.py
@@ -8,6 +8,7 @@ from freezegun import freeze_time
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
+from sentry.utils.compat import map
 
 
 class GroupEventsTest(APITestCase, SnubaTestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 70725c43c4..c2555ea0cd 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -8,6 +8,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
+from sentry.utils.compat import map
 
 
 class OrganizationEventsEndpointTest(APITestCase, SnubaTestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index da72bf035d..3052cf1541 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -10,6 +10,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
+from sentry.utils.compat import zip
 
 
 class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_issues_resolved_in_release.py b/tests/snuba/api/endpoints/test_organization_issues_resolved_in_release.py
index c57fa65d78..759713900d 100644
--- a/tests/snuba/api/endpoints/test_organization_issues_resolved_in_release.py
+++ b/tests/snuba/api/endpoints/test_organization_issues_resolved_in_release.py
@@ -7,6 +7,7 @@ import six
 from sentry.models import Commit, GroupLink, GroupResolution, ReleaseCommit, Repository
 
 from sentry.testutils import APITestCase, SnubaTestCase
+from sentry.utils.compat import map
 
 
 class OrganizationIssuesResolvedInReleaseEndpointTest(APITestCase, SnubaTestCase):
diff --git a/tests/snuba/api/endpoints/test_project_events.py b/tests/snuba/api/endpoints/test_project_events.py
index 7dd455a81c..1d8d503764 100644
--- a/tests/snuba/api/endpoints/test_project_events.py
+++ b/tests/snuba/api/endpoints/test_project_events.py
@@ -4,6 +4,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
+from sentry.utils.compat import map
 
 
 class ProjectEventsTest(APITestCase, SnubaTestCase):
diff --git a/tests/snuba/tasks/test_unmerge.py b/tests/snuba/tasks/test_unmerge.py
index abbe635543..13d05fa586 100644
--- a/tests/snuba/tasks/test_unmerge.py
+++ b/tests/snuba/tasks/test_unmerge.py
@@ -31,6 +31,7 @@ from sentry.testutils.helpers.datetime import before_now, iso_format
 from sentry.tasks.merge import merge_groups
 
 from six.moves import xrange
+from sentry.utils.compat import map
 
 # Use the default redis client as a cluster client in the similarity index
 index = _make_index_backend(redis.clusters.get("default").get_local_client(0))
