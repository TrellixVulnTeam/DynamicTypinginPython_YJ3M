commit 7168c7a560df0d9746a7ab187b6832f7891cd054
Author: Ted Kaemming <ted@kaemming.com>
Date:   Mon Mar 14 12:30:25 2016 -0700

    Disable frequency sketches for Redis by default.
    
    This allows disabling frequency sketches for older Redis versions, since
    the data is currently unused. The write path becomes a noop, and read
    paths raise an exception.
    
    Enabling the frequency sketch implementation changes the version
    requirement from 2.8.9 to 2.8.18, when Lua BitOp was made available to
    the embedded Lua interpreter.[1]
    
    This fixes GH-2835.
    
    [1]: https://raw.githubusercontent.com/antirez/redis/2.8/00-RELEASENOTES

diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 5724fc6b19..67ae6b051f 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -96,13 +96,15 @@ class RedisTSDB(BaseTSDB):
         self.cluster, options = get_cluster_from_options(self, options)
         self.prefix = prefix
         self.vnodes = vnodes
+        self.enable_frequency_sketches = options.pop('enable_frequency_sketches', False)
         super(RedisTSDB, self).__init__(**options)
 
     def validate(self):
         logger.debug('Validating Redis version...')
+        version = Version((2, 8, 18 if self.enable_frequency_sketches else 9))
         check_cluster_versions(
             self.cluster,
-            Version((2, 8, 9)),
+            version,
             label='TSDB',
         )
 
@@ -296,6 +298,9 @@ class RedisTSDB(BaseTSDB):
         )
 
     def record_frequency_multi(self, requests, timestamp=None):
+        if not self.enable_frequency_sketches:
+            return
+
         if timestamp is None:
             timestamp = timezone.now()
 
@@ -332,6 +337,9 @@ class RedisTSDB(BaseTSDB):
         self.cluster.execute_commands(commands)
 
     def get_most_frequent(self, model, keys, start, end=None, rollup=None, limit=None):
+        if not self.enable_frequency_sketches:
+            raise NotImplementedError("Frequency sketches are disabled.")
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         commands = {}
@@ -354,6 +362,9 @@ class RedisTSDB(BaseTSDB):
         return results
 
     def get_frequency_series(self, model, items, start, end=None, rollup=None):
+        if not self.enable_frequency_sketches:
+            raise NotImplementedError("Frequency sketches are disabled.")
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         # Freeze ordering of the members (we'll need these later.)
@@ -381,6 +392,9 @@ class RedisTSDB(BaseTSDB):
         return results
 
     def get_frequency_totals(self, model, items, start, end=None, rollup=None):
+        if not self.enable_frequency_sketches:
+            raise NotImplementedError("Frequency sketches are disabled.")
+
         responses = {}
 
         for key, series in self.get_frequency_series(model, items, start, end, rollup).iteritems():
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 2159043060..417defc092 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -23,7 +23,8 @@ class RedisTSDBTest(TestCase):
                 (ONE_HOUR, 24),  # 1 days at 1 hour
                 (ONE_DAY, 30),  # 30 days at 1 day
             ),
-            vnodes=64
+            vnodes=64,
+            enable_frequency_sketches=True,
         )
 
     def test_make_counter_key(self):
