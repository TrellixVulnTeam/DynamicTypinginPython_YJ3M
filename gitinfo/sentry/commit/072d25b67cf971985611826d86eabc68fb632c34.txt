commit 072d25b67cf971985611826d86eabc68fb632c34
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 21 20:18:26 2012 -0700

    Dont allow inactive user accounts to send messages

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 2b122740c7..644d7d6925 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -78,6 +78,10 @@ def project_from_auth_vars(auth_vars, data):
             pm = ProjectMember.objects.get_from_cache(public_key=api_key)
         except ProjectMember.DoesNotExist:
             raise APIForbidden('Invalid signature')
+
+        if pm.user and not pm.user.is_active:
+            raise APIUnauthorized('Account is not active')
+
         project = pm.project
         secret_key = pm.secret_key
     else:
@@ -116,6 +120,9 @@ def project_from_api_key_and_id(api_key, project_id):
     if str(pm.project_id) != str(project_id):
         raise APIUnauthorized()
 
+    if pm.user and not pm.user.is_active:
+        raise APIUnauthorized('Account is not active')
+
     return pm.project
 
 
@@ -124,6 +131,9 @@ def project_from_id(request):
     Given a request returns a project instance or throws
     APIUnauthorized.
     """
+    if not request.user.is_active:
+        raise APIUnauthorized('Account is not active')
+
     try:
         pm = ProjectMember.objects.get(
             user=request.user,
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 7abd0fdfb6..f2847a0ade 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -17,6 +17,7 @@ from sentry.utils.auth import get_signature
 
 from tests.base import TestCase
 
+
 class BaseAPITest(TestCase):
     def setUp(self):
         self.user = User.objects.create(username='coreapi')
@@ -49,6 +50,14 @@ class ProjectFromIdTest(BaseAPITest):
 
         self.assertRaises(APIUnauthorized, project_from_id, request)
 
+    def test_inactive_user(self):
+        request = mock.Mock()
+        request.user = self.user
+        request.user.is_active = False
+        request.GET = {'project_id': self.project.id}
+
+        self.assertRaises(APIUnauthorized, project_from_id, request)
+
 
 class ProjectFromApiKeyAndIdTest(BaseAPITest):
     def test_valid(self):
@@ -62,6 +71,13 @@ class ProjectFromApiKeyAndIdTest(BaseAPITest):
     def test_invalid_api_key(self):
         self.assertRaises(APIUnauthorized, project_from_api_key_and_id, 1, self.project.id)
 
+    def test_inactive_user(self):
+        user = self.pm.user
+        user.is_active = False
+        user.save()
+
+        self.assertRaises(APIUnauthorized, project_from_api_key_and_id, self.pm.public_key, self.project.id)
+
 
 class ExtractAuthVarsTest(BaseAPITest):
     def test_valid(self):
@@ -115,6 +131,26 @@ class ProjectFromAuthVarsTest(BaseAPITest):
             result = project_from_auth_vars(auth_vars, '')
             self.assertEquals(result, self.project)
 
+    def test_inactive_user(self):
+        user = self.pm.user
+        user.is_active = False
+        user.save()
+
+        auth_vars = {
+            'sentry_signature': 'adf',
+            'sentry_timestamp': time.time(),
+        }
+        with mock.patch('sentry.coreapi.validate_hmac') as validate_hmac_:
+            validate_hmac_.return_value = True
+
+            # without key
+            result = project_from_auth_vars(auth_vars, '')
+            self.assertEquals(result, None)
+
+            # with key
+            auth_vars['sentry_key'] = self.pm.public_key
+            self.assertRaises(APIUnauthorized, project_from_auth_vars, auth_vars, '')
+
 
 class ValidateHmacTest(BaseAPITest):
     def test_valid(self):
