commit 6816f8112a2d79947c034b24d574e9423cc2ccab
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 30 03:30:51 2013 -0800

    Various cleanup for model refactor

diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index def244a9be..adadf94bc4 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -91,10 +91,10 @@ class Group(Model):
 
     def delete(self):
         from sentry.models import (
-            GroupTagKey, GroupTag, GroupCountByMinute, EventMapping, Event
+            GroupTagKey, GroupTagValue, GroupCountByMinute, EventMapping, Event
         )
         model_list = (
-            GroupTagKey, GroupTag, GroupCountByMinute, EventMapping, Event
+            GroupTagKey, GroupTagValue, GroupCountByMinute, EventMapping, Event
         )
         for model in model_list:
             logging.info('Removing %r objects where group=%s', model, self.id)
@@ -140,9 +140,13 @@ class Group(Model):
         return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
 
     def get_latest_event(self):
+        from sentry.models import Event
+
         if not hasattr(self, '_latest_event'):
             try:
-                self._latest_event = self.event_set.order_by('-datetime')[0]
+                self._latest_event = Event.objects.filter(
+                    group=self,
+                ).order_by('-datetime')[0]
             except IndexError:
                 self._latest_event = None
         return self._latest_event
@@ -156,7 +160,10 @@ class Group(Model):
         return module, self.data['version']
 
     def get_unique_tags(self, tag):
-        return self.grouptag_set.filter(
+        from sentry.models import GroupTagValue
+
+        return GroupTagValue.objects.filter(
+            group=self,
             project=self.project,
             key=tag,
         ).values_list(
@@ -167,9 +174,12 @@ class Group(Model):
         ).order_by('-times_seen')
 
     def get_tags(self):
+        from sentry.models import GroupTagKey
+
         if not hasattr(self, '_tag_cache'):
             self._tag_cache = sorted([
-                t for t in self.grouptagkey_set.filter(
+                t for t in GroupTagKey.objects.filter(
+                    group=self,
                     project=self.project,
                 ).values_list('key', flat=True)
                 if not t.startswith('sentry:')
diff --git a/src/sentry/models/grouptagvalue.py b/src/sentry/models/grouptagvalue.py
index 2c0210b30e..bc72912f10 100644
--- a/src/sentry/models/grouptagvalue.py
+++ b/src/sentry/models/grouptagvalue.py
@@ -20,8 +20,8 @@ class GroupTagValue(Model):
     Stores the total number of messages seen by a group matching
     the given filter.
     """
-    project = models.ForeignKey('sentry.Project', null=True, related_name='grouptag_set')
-    group = models.ForeignKey('sentry.Group', related_name='grouptag_set')
+    project = models.ForeignKey('sentry.Project', null=True, related_name='grouptag')
+    group = models.ForeignKey('sentry.Group', related_name='grouptag')
     times_seen = BoundedPositiveIntegerField(default=0)
     key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
     value = models.CharField(max_length=MAX_TAG_VALUE_LENGTH)
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 6ca2993a28..911ff39678 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -12,7 +12,7 @@ from sentry.interfaces import Interface
 from sentry.manager import get_checksum_from_event
 from sentry.models import (
     Event, Group, Project, GroupCountByMinute, ProjectCountByMinute,
-    Team, EventMapping, User, AccessGroup
+    Team, EventMapping, User, AccessGroup, GroupTagValue
 )
 from sentry.utils.db import has_trending  # NOQA
 from sentry.testutils import TestCase
@@ -61,78 +61,6 @@ class SentryManagerTest(TestCase):
             self.assertEquals(event.project_id, 1)
             self.assertEquals(event.datetime, date.replace(tzinfo=timezone.utc))
 
-    def test_url_filter(self):
-        event = Group.objects.from_kwargs(1, message='foo')
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='url').count(), 0)
-
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com',
-            }
-        })
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='url').count(), 1)
-        res = group.grouptag_set.filter(key='url').get()
-        self.assertEquals(res.value, 'http://example.com')
-        self.assertEquals(res.times_seen, 1)
-
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com',
-            }
-        })
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='url').count(), 1)
-        res = group.grouptag_set.filter(key='url').get()
-        self.assertEquals(res.value, 'http://example.com')
-        self.assertEquals(res.times_seen, 2)
-
-        event = Group.objects.from_kwargs(1, message='foo', **{
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com/2',
-            }
-        })
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='url').count(), 2)
-        results = list(group.grouptag_set.filter(key='url').order_by('id'))
-        res = results[0]
-        self.assertEquals(res.value, 'http://example.com')
-        self.assertEquals(res.times_seen, 2)
-        res = results[1]
-        self.assertEquals(res.value, 'http://example.com/2')
-        self.assertEquals(res.times_seen, 1)
-
-    def test_server_name_filter(self):
-        event = Group.objects.from_kwargs(1, message='foo')
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='server_name').count(), 0)
-
-        event = Group.objects.from_kwargs(1, message='foo', server_name='foo')
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='server_name').count(), 1)
-        res = group.grouptag_set.filter(key='server_name').get()
-        self.assertEquals(res.value, 'foo')
-        self.assertEquals(res.times_seen, 1)
-
-        event = Group.objects.from_kwargs(1, message='foo', server_name='foo')
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='server_name').count(), 1)
-        res = group.grouptag_set.filter(key='server_name').get()
-        self.assertEquals(res.value, 'foo')
-        self.assertEquals(res.times_seen, 2)
-
-        event = Group.objects.from_kwargs(1, message='foo', server_name='bar')
-        group = event.group
-        self.assertEquals(group.grouptag_set.filter(key='server_name').count(), 2)
-        results = list(group.grouptag_set.filter(key='server_name').order_by('id'))
-        res = results[0]
-        self.assertEquals(res.value, 'foo')
-        self.assertEquals(res.times_seen, 2)
-        res = results[1]
-        self.assertEquals(res.value, 'bar')
-        self.assertEquals(res.times_seen, 1)
-
     @mock.patch('sentry.manager.send_group_processors', mock.Mock())
     @mock.patch('sentry.manager.GroupManager.add_tags')
     def test_tags_as_list(self, add_tags):
@@ -201,8 +129,9 @@ class SentryManagerTest(TestCase):
         group = event.group
         Group.objects.add_tags(group, tags=(('foo', 'bar'), ('foo', 'baz'), ('biz', 'boz')))
 
-        self.assertEquals(group.grouptag_set.filter(key='foo').count(), 2)
-        results = list(group.grouptag_set.filter(key='foo').order_by('id'))
+        results = list(GroupTagValue.objects.filter(
+            group=group, key='foo').order_by('id'))
+        assert len(results) == 2
         res = results[0]
         self.assertEquals(res.value, 'bar')
         self.assertEquals(res.times_seen, 1)
@@ -210,8 +139,9 @@ class SentryManagerTest(TestCase):
         self.assertEquals(res.value, 'baz')
         self.assertEquals(res.times_seen, 1)
 
-        self.assertEquals(group.grouptag_set.filter(key='biz').count(), 1)
-        results = list(group.grouptag_set.filter(key='biz').order_by('id'))
+        results = list(GroupTagValue.objects.filter(
+            group=group, key='biz').order_by('id'))
+        assert len(results) == 1
         res = results[0]
         self.assertEquals(res.value, 'boz')
         self.assertEquals(res.times_seen, 1)
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 45770a116b..eba89b6595 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -14,7 +14,7 @@ from sentry.constants import MINUTE_NORMALIZATION
 from sentry.db.models.fields.node import NodeData
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
-    GroupTag, GroupCountByMinute, TagValue, PendingTeamMember,
+    GroupTagValue, GroupCountByMinute, TagValue, PendingTeamMember,
     LostPasswordHash, Alert, User, create_default_project)
 from sentry.testutils import TestCase, fixture
 from sentry.utils.compat import pickle
@@ -34,13 +34,13 @@ class ProjectTest(TestCase):
         self.assertFalse(Project.objects.filter(pk=1).exists())
         self.assertFalse(Group.objects.filter(project__isnull=True).exists())
         self.assertFalse(Event.objects.filter(project__isnull=True).exists())
-        self.assertFalse(GroupTag.objects.filter(project__isnull=True).exists())
+        self.assertFalse(GroupTagValue.objects.filter(project__isnull=True).exists())
         self.assertFalse(GroupCountByMinute.objects.filter(project__isnull=True).exists())
         self.assertFalse(TagValue.objects.filter(project__isnull=True).exists())
 
         self.assertEquals(project2.group_set.count(), 4)
         self.assertEquals(project2.event_set.count(), 10)
-        assert not project2.grouptag_set.exists()
+        assert not GroupTagValue.objects.filter(project=project2).exists()
         assert not project2.groupcountbyminute_set.exists()
         assert not TagValue.objects.filter(project=project2).exists()
 
@@ -134,11 +134,12 @@ class AlertTest(TestCase):
             'message': 'This is a test message',
         }
 
-    @mock.patch('sentry.models.has_trending', mock.Mock(return_value=True))
+    @mock.patch('sentry.models.alert.has_trending', mock.Mock(return_value=True))
     @mock.patch('sentry.models.Group.objects.get_accelerated')
     def test_does_add_trending_events(self, get_accelerated):
         get_accelerated.return_value = [self.group]
         alert = Alert.maybe_alert(**self.params)
+        assert alert is not None
         get_accelerated.assert_called_once_with([self.project.id], minutes=MINUTE_NORMALIZATION)
         assert list(alert.related_groups.all()) == [self.group]
 
