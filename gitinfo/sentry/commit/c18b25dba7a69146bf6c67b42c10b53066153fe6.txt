commit c18b25dba7a69146bf6c67b42c10b53066153fe6
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Nov 25 13:37:48 2019 -0800

    feat(api-members): Implement additional filters (#15769)
    
    isInvited, ssoLinked, and has2fa -- all boolean filters.

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 6596643f5e..b146e74fde 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 import six
 
 from django.db import transaction
-from django.db.models import Q
+from django.db.models import Q, F
 from rest_framework import serializers
 from rest_framework.response import Response
 from django.conf import settings
@@ -22,6 +22,7 @@ from sentry.models import (
     Team,
     TeamStatus,
 )
+from sentry.models.authenticator import available_authenticators
 from sentry.search.utils import tokenize_query
 from sentry.signals import member_invited
 from .organization_member_details import get_allowed_roles
@@ -108,6 +109,7 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
         )
 
         query = request.GET.get("query")
+
         if query:
             tokens = tokenize_query(query)
             for key, value in six.iteritems(tokens):
@@ -124,6 +126,28 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
                 elif key == "role":
                     queryset = queryset.filter(role__in=value)
 
+                elif key == "isInvited":
+                    isInvited = "true" in value
+                    queryset = queryset.filter(user__isnull=isInvited)
+
+                elif key == "ssoLinked":
+                    ssoFlag = OrganizationMember.flags["sso:linked"]
+                    ssoLinked = "true" in value
+                    if ssoLinked:
+                        queryset = queryset.filter(flags=F("flags").bitor(ssoFlag))
+                    else:
+                        queryset = queryset.filter(flags=F("flags").bitand(~ssoFlag))
+
+                elif key == "has2fa":
+                    has2fa = "true" in value
+                    if has2fa:
+                        types = [a.type for a in available_authenticators(ignore_backup=True)]
+                        queryset = queryset.filter(
+                            user__authenticator__isnull=False, user__authenticator__type__in=types
+                        )
+                    else:
+                        queryset = queryset.filter(user__authenticator__isnull=True)
+
                 elif key == "query":
                     value = " ".join(value)
                     queryset = queryset.filter(
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 896a7d46b8..ef41905028 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -8,7 +8,7 @@ from django.core import mail
 from sentry import roles
 from sentry.api.endpoints.organization_member_index import OrganizationMemberSerializer
 from sentry.testutils import APITestCase, TestCase
-from sentry.models import InviteStatus, OrganizationMember, OrganizationMemberTeam
+from sentry.models import InviteStatus, OrganizationMember, OrganizationMemberTeam, Authenticator
 from sentry.testutils.helpers import Feature
 
 
@@ -146,6 +146,73 @@ class OrganizationMemberListTest(APITestCase):
         assert len(response.data) == 1
         assert response.data[0]["email"] == self.owner_user.email
 
+    def test_is_invited_query(self):
+        response = self.client.get(self.url + "?query=isInvited:true")
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+        invited_member = self.create_member(
+            organization=self.org,
+            email="invited-member@example.com",
+            invite_status=InviteStatus.APPROVED.value,
+        )
+
+        response = self.client.get(self.url + "?query=isInvited:true")
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]["email"] == invited_member.email
+
+        response = self.client.get(self.url + "?query=isInvited:false")
+        assert response.status_code == 200
+        assert len(response.data) == 2
+
+    def test_sso_linked_query(self):
+        response = self.client.get(self.url + "?query=ssoLinked:true")
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+        user = self.create_user("morty@localhost", username="morty")
+        sso_member = self.create_member(
+            organization=self.org,
+            user=user,
+            email=user.email,
+            invite_status=InviteStatus.APPROVED.value,
+            flags=OrganizationMember.flags["sso:linked"],
+        )
+
+        response = self.client.get(self.url + "?query=ssoLinked:true")
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]["email"] == sso_member.email
+
+        response = self.client.get(self.url + "?query=ssoLinked:false")
+        assert response.status_code == 200
+        assert len(response.data) == 2
+
+    def test_2fa_enabled_query(self):
+        response = self.client.get(self.url + "?query=has2fa:true")
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+        user = self.create_user("morty@localhost", username="morty")
+        member_2fa = self.create_member(
+            organization=self.org,
+            user=user,
+            email=user.email,
+            invite_status=InviteStatus.APPROVED.value,
+        )
+
+        Authenticator.objects.create(user=member_2fa.user, type=1)
+
+        response = self.client.get(self.url + "?query=has2fa:true")
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]["email"] == member_2fa.email
+
+        response = self.client.get(self.url + "?query=has2fa:false")
+        assert response.status_code == 200
+        assert len(response.data) == 2
+
     def test_cannot_get_unapproved_invites(self):
         join_request = "test@email.com"
         invite_request = "test@gmail.com"
