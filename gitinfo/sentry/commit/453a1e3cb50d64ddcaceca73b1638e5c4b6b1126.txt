commit 453a1e3cb50d64ddcaceca73b1638e5c4b6b1126
Author: josh <josh@jrl.ninja>
Date:   Thu Jan 9 19:54:27 2020 +0000

    chore: cleanup bitfield (#16031)

diff --git a/src/bitfield/forms.py b/src/bitfield/forms.py
deleted file mode 100644
index e4ebcd5654..0000000000
--- a/src/bitfield/forms.py
+++ /dev/null
@@ -1,66 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from django.forms import CheckboxSelectMultiple, IntegerField, ValidationError
-
-from bitfield.types import BitHandler
-
-try:
-    from django.utils.encoding import force_text
-except ImportError:
-    from django.utils.encoding import force_unicode as force_text
-
-
-class BitFieldCheckboxSelectMultiple(CheckboxSelectMultiple):
-    def render(self, name, value, attrs=None, choices=()):
-        if isinstance(value, BitHandler):
-            value = [k for k, v in value if v]
-        elif isinstance(value, int):
-            real_value = []
-            div = 2
-            for (k, v) in self.choices:
-                if value % div != 0:
-                    real_value.append(k)
-                    value -= value % div
-                div *= 2
-            value = real_value
-        return super(BitFieldCheckboxSelectMultiple, self).render(name, value, attrs=attrs)
-
-    def _has_changed(self, initial, data):
-        if initial is None:
-            initial = []
-        if data is None:
-            data = []
-        if initial != data:
-            return True
-        initial_set = set([force_text(value) for value in initial])
-        data_set = set([force_text(value) for value in data])
-        return data_set != initial_set
-
-
-class BitFormField(IntegerField):
-    def __init__(self, choices=(), widget=BitFieldCheckboxSelectMultiple, *args, **kwargs):
-        if isinstance(kwargs["initial"], int):
-            iv = kwargs["initial"]
-            L = []
-            for i in range(0, 63):
-                if (1 << i) & iv > 0:
-                    L += [choices[i][0]]
-            kwargs["initial"] = L
-        self.widget = widget
-        super(BitFormField, self).__init__(widget=widget, *args, **kwargs)
-        self.choices = self.widget.choices = choices
-
-    def clean(self, value):
-        if not value:
-            return 0
-
-        # Assume an iterable which contains an item per flag that's enabled
-        result = BitHandler(0, [k for k, v in self.choices])
-        for k in value:
-            try:
-                setattr(result, six.text_type(k), True)
-            except AttributeError:
-                raise ValidationError("Unknown choice: %r" % (k,))
-        return int(result)
diff --git a/src/bitfield/models.py b/src/bitfield/models.py
index 4b50b4be3d..d5c82bb828 100644
--- a/src/bitfield/models.py
+++ b/src/bitfield/models.py
@@ -2,9 +2,8 @@ from __future__ import absolute_import
 
 import six
 
-from django.db.models.fields import BigIntegerField, Field
+from django.db.models.fields import BigIntegerField
 
-from bitfield.forms import BitFormField
 from bitfield.query import BitQueryExactLookupStub
 from bitfield.types import Bit, BitHandler
 
@@ -119,10 +118,6 @@ class BitField(BigIntegerField):
         self.flags = flags
         self.labels = labels
 
-    def formfield(self, form_class=BitFormField, **kwargs):
-        choices = [(k, self.labels[self.flags.index(k)]) for k in self.flags]
-        return Field.formfield(self, form_class, choices=choices, **kwargs)
-
     def pre_save(self, instance, add):
         value = getattr(instance, self.attname)
         return value
@@ -134,20 +129,6 @@ class BitField(BigIntegerField):
             value = value.mask
         return int(value)
 
-    def get_db_prep_lookup(self, lookup_type, value, connection, prepared=False):
-        if isinstance(value, (BitHandler, Bit)):
-            raise NotImplementedError("get_db_prep_lookup not supported with types Bit, BitHandler")
-
-        return BigIntegerField.get_db_prep_lookup(
-            self, lookup_type=lookup_type, value=value, connection=connection, prepared=prepared
-        )
-
-    def get_prep_lookup(self, lookup_type, value):
-        if isinstance(value, Bit):
-            raise NotImplementedError("Lookup type %r not supported with Bit type." % lookup_type)
-
-        return BigIntegerField.get_prep_lookup(self, lookup_type, value)
-
     def to_python(self, value):
         if isinstance(value, Bit):
             value = value.mask
diff --git a/tests/sentry/db/models/fields/bitfield/test_bitfield.py b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
index 4dc1a22267..1d9da05a75 100644
--- a/tests/sentry/db/models/fields/bitfield/test_bitfield.py
+++ b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
@@ -367,51 +367,3 @@ class BitFieldSerializationTest(TestCase):
         data = pickle.dumps(bf)
         inst = pickle.loads(data)
         self.assertTrue("FLAG_3" in inst.flags.keys())
-
-
-class BitFormFieldTest(TestCase):
-    def test_form_new_invalid(self):
-        invalid_data_dicts = [
-            {"flags": ["FLAG_0", "FLAG_FLAG"]},
-            {"flags": ["FLAG_4"]},
-            {"flags": [1, 2]},
-        ]
-        for invalid_data in invalid_data_dicts:
-            form = BitFieldTestModelForm(data=invalid_data)
-            self.assertFalse(form.is_valid())
-
-    def test_form_new(self):
-        data_dicts = [{"flags": ["FLAG_0", "FLAG_1"]}, {"flags": ["FLAG_3"]}, {"flags": []}, {}]
-        for data in data_dicts:
-            form = BitFieldTestModelForm(data=data)
-            self.failUnless(form.is_valid())
-            instance = form.save()
-            flags = data["flags"] if "flags" in data else []
-            for k in BitFieldTestModel.flags:
-                self.assertEquals(bool(getattr(instance.flags, k)), k in flags)
-
-    def test_form_update(self):
-        instance = BitFieldTestModel.objects.create(flags=0)
-        for k in BitFieldTestModel.flags:
-            self.assertFalse(bool(getattr(instance.flags, k)))
-
-        data = {"flags": ["FLAG_0", "FLAG_1"]}
-        form = BitFieldTestModelForm(data=data, instance=instance)
-        self.failUnless(form.is_valid())
-        instance = form.save()
-        for k in BitFieldTestModel.flags:
-            self.assertEquals(bool(getattr(instance.flags, k)), k in data["flags"])
-
-        data = {"flags": ["FLAG_2", "FLAG_3"]}
-        form = BitFieldTestModelForm(data=data, instance=instance)
-        self.failUnless(form.is_valid())
-        instance = form.save()
-        for k in BitFieldTestModel.flags:
-            self.assertEquals(bool(getattr(instance.flags, k)), k in data["flags"])
-
-        data = {"flags": []}
-        form = BitFieldTestModelForm(data=data, instance=instance)
-        self.failUnless(form.is_valid())
-        instance = form.save()
-        for k in BitFieldTestModel.flags:
-            self.assertFalse(bool(getattr(instance.flags, k)))
