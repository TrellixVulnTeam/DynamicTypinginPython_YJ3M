commit 83f59e8d84f5fbe063c82a98196feed2354cee11
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 5 15:12:16 2015 -0800

    Add basic contexts for project/team pages

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 7a1f285f4a..d9ab92536f 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -44,6 +44,7 @@ class ProjectDetailsEndpoint(Endpoint):
             'sentry:origins': '\n'.join(project.get_option('sentry:origins', None) or []),
             'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
         }
+        data['team'] = serialize(project.team, request.user)
 
         return Response(data)
 
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index defc56f800..c6cb051f2c 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -34,7 +34,7 @@ class TeamAdminSerializer(TeamSerializer):
 
 
 class TeamDetailsEndpoint(Endpoint):
-    def get(self, request, team_id):
+    def get(self, request, organization_slug, team_slug):
         """
         Retrieve a team.
 
@@ -43,15 +43,21 @@ class TeamDetailsEndpoint(Endpoint):
             {method} {path}
 
         """
-        team = Team.objects.get(id=team_id)
+        team = Team.objects.get(
+            organization__slug=organization_slug,
+            slug=team_slug,
+        )
 
         assert_perm(team, request.user, request.auth)
 
         return Response(serialize(team, request.user))
 
     @sudo_required
-    def put(self, request, team_id):
-        team = Team.objects.get(id=team_id)
+    def put(self, request, organization_slug, team_slug):
+        team = Team.objects.get(
+            organization__slug=organization_slug,
+            slug=team_slug,
+        )
 
         assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
@@ -79,8 +85,11 @@ class TeamDetailsEndpoint(Endpoint):
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
     @sudo_required
-    def delete(self, request, team_id):
-        team = Team.objects.get(id=team_id)
+    def delete(self, request, organization_slug, team_slug):
+        team = Team.objects.get(
+            organization__slug=organization_slug,
+            slug=team_slug,
+        )
 
         assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
 
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 2598d7b840..118fa0609f 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -66,7 +66,7 @@ urlpatterns = patterns(
         name='sentry-api-0-organization-teams'),
 
     # Teams
-    url(r'^teams/(?P<team_id>\d+)/$',
+    url(r'^teams/(?P<organization_slug>[^\/]+)/(?P<team_slug>[^\/]+)/$',
         TeamDetailsEndpoint.as_view(),
         name='sentry-api-0-team-details'),
     url(r'^teams/(?P<team_id>\d+)/groups/new/$',
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
new file mode 100644
index 0000000000..f01ea320bb
--- /dev/null
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -0,0 +1,15 @@
+/*** @jsx React.DOM */
+
+var PropTypes = require("../proptypes");
+
+var ProjectState = {
+  contextTypes: {
+    project: PropTypes.Project.isRequired,
+  },
+
+  getProject() {
+    return this.context.project;
+  }
+};
+
+module.exports = ProjectState;
diff --git a/src/sentry/static/sentry/app/mixins/teamState.jsx b/src/sentry/static/sentry/app/mixins/teamState.jsx
new file mode 100644
index 0000000000..9468610bda
--- /dev/null
+++ b/src/sentry/static/sentry/app/mixins/teamState.jsx
@@ -0,0 +1,15 @@
+/*** @jsx React.DOM */
+
+var PropTypes = require("../proptypes");
+
+var TeamState = {
+  contextTypes: {
+    team: PropTypes.Team.isRequired,
+  },
+
+  getTeam() {
+    return this.context.team;
+  }
+};
+
+module.exports = TeamState;
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 18be88c8f2..ef02f12b9d 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -11,6 +11,12 @@ var PropTypes = {
   Event: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   }),
+  Project: React.PropTypes.shape({
+    id: React.PropTypes.string.isRequired
+  }),
+  Team: React.PropTypes.shape({
+    id: React.PropTypes.string.isRequired
+  }),
   User: React.PropTypes.shape({
     id: React.PropTypes.string.isRequired
   })
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 577fc41f29..900fdb4cd4 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -12,6 +12,8 @@ var AggregateOverview = require("./views/aggregateOverview");
 var ProjectDetails = require("./views/projectDetails");
 var PropTypes = require("./proptypes");
 var Stream = require("./views/stream");
+var TeamDashboard = require("./views/teamDashboard");
+var TeamDetails = require("./views/teamDetails");
 
 var App = React.createClass({
   propTypes: {
@@ -28,6 +30,9 @@ var App = React.createClass({
 
 var routes = (
   <Route name="app" path="/" handler={App}>
+    <Route name="teamDetails" path="/:orgId/teams/:teamId/" handler={TeamDetails}>
+      <DefaultRoute name="teamDashboard" handler={TeamDashboard} />
+    </Route>
     <Route name="projectDetails" path="/:orgId/:projectId/" handler={ProjectDetails}>
       <DefaultRoute name="stream" handler={Stream} />
       <Route name="aggregateDetails" path="group/:aggregateId/" handler={Aggregate}>
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 73c84e1994..dcecb0e8d2 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -7,21 +7,32 @@ var Router = require("react-router");
 var api = require("../api");
 var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
 var MemberListStore = require("../stores/memberListStore");
+var ProjectState = require("../mixins/projectState");
+var PropTypes = require("../proptypes");
 
 var ProjectDetails = React.createClass({
   mixins: [
     BreadcrumbMixin,
     Reflux.connect(MemberListStore, "memberList"),
-    Router.State
+    Router.State,
+    ProjectState
   ],
 
-  getInitialState(){
+  getInitialState() {
     return {
       memberList: [],
       project: null
     };
   },
 
+  childContextTypes: {
+    project: PropTypes.Project
+  },
+
+  getChildContext() {
+     return {project: this.state.project};
+  },
+
   componentWillMount() {
     api.request(this.getMemberListEndpoint(), {
       success: (data) => {
@@ -36,6 +47,7 @@ var ProjectDetails = React.createClass({
         });
 
         this.setBreadcrumbs([
+          {name: data.team.name, to: 'teamDashboard'},
           {name: data.name, to: 'projectDetails'}
         ]);
       }
@@ -53,8 +65,12 @@ var ProjectDetails = React.createClass({
   },
 
   render() {
+    if (!this.state.project) {
+      return <div className="loading">PUT ROBOT HERE PLZ KTHX</div>;
+    }
     return (
-      <Router.RouteHandler memberList={this.state.memberList} />
+      <Router.RouteHandler
+          memberList={this.state.memberList} />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/teamDashboard.jsx b/src/sentry/static/sentry/app/views/teamDashboard.jsx
new file mode 100644
index 0000000000..11928c4a0e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamDashboard.jsx
@@ -0,0 +1,22 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+
+var TeamState = require("../mixins/teamState");
+
+var TeamDashboard = React.createClass({
+  mixins: [
+    Router.State,
+    TeamState
+  ],
+
+  render() {
+    var team = this.getTeam();
+    return (
+      <div>{team.name}</div>
+    );
+  }
+});
+
+module.exports = TeamDashboard;
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
new file mode 100644
index 0000000000..2ba0c2ba9f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -0,0 +1,61 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Reflux = require("reflux");
+var Router = require("react-router");
+
+var api = require("../api");
+var BreadcrumbMixin = require("../mixins/breadcrumbMixin");
+var PropTypes = require("../proptypes");
+var TeamState = require("../mixins/teamState");
+
+var TeamDashboard = React.createClass({
+  mixins: [
+    BreadcrumbMixin,
+    Router.State
+  ],
+
+  getInitialState() {
+    return {
+      team: null
+    };
+  },
+
+  childContextTypes: {
+    team: PropTypes.Team
+  },
+
+  getChildContext() {
+     return {team: this.state.team};
+  },
+
+  componentWillMount() {
+    api.request(this.getTeamDetailsEndpoint(), {
+      success: (data) => {
+        this.setState({
+          team: data
+        });
+
+        this.setBreadcrumbs([
+          {name: data.name, to: 'teamDetails'}
+        ]);
+      }
+    });
+  },
+
+  getTeamDetailsEndpoint() {
+    var params = this.getParams();
+    return '/teams/' + params.orgId + '/' + params.teamId + '/';
+  },
+
+  render() {
+    if (!this.state.team) {
+      return <div className="loading">PUT ROBOT HERE PLZ KTHX</div>;
+    }
+    return (
+      <Router.RouteHandler />
+    );
+  }
+});
+
+module.exports = TeamDashboard;
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 9cf411dea3..1a641c735d 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -371,7 +371,7 @@ urlpatterns += patterns('',
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', ReactPageView.as_view(),
         name='sentry-stream'),
 
-    url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/$', groups.dashboard,
+    url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/$', ReactPageView.as_view(),
         name='sentry-team-dashboard'),
 
     # Legacy
