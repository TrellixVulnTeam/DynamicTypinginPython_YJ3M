commit f97ed5e861d26129dfc13e439fa4e6d7c47e2624
Author: Matte Noble <me@mattenoble.com>
Date:   Mon Sep 17 13:38:11 2018 -0700

    fix(tests): Cleanup after overwriting values (#9787)
    
    This was messing with other tests that end up resolving to the test
    blacklisted IPs here.
    
    We revert our test changes back to what the module had defined prior to
    the test running.

diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index 2d3089f2b7..265537d142 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -13,6 +13,19 @@ from sentry import http
 from sentry.testutils import TestCase
 
 
+def stub_blacklist(ip_addresses):
+    def decorator(func):
+        def wrapper(*args, **kwargs):
+            disallowed_ips = set(http.DISALLOWED_IPS)
+            http.DISALLOWED_IPS = set(
+                ipaddress.ip_network(ip) for ip in ip_addresses
+            )
+            func(*args, **kwargs)
+            http.DISALLOWED_IPS = disallowed_ips
+        return wrapper
+    return decorator
+
+
 class HttpTest(TestCase):
     @responses.activate
     @patch('socket.getaddrinfo')
@@ -30,14 +43,8 @@ class HttpTest(TestCase):
 
     # XXX(dcramer): we can't use responses here as it hooks Session.send
     # @responses.activate
+    @stub_blacklist([u'127.0.0.1', u'::1', u'10.0.0.0/8'])
     def test_ip_blacklist(self):
-        http.DISALLOWED_IPS = set(
-            [
-                ipaddress.ip_network(u'127.0.0.1'),
-                ipaddress.ip_network(u'::1'),
-                ipaddress.ip_network(u'10.0.0.0/8'),
-            ]
-        )
         with pytest.raises(SuspiciousOperation):
             http.safe_urlopen('http://127.0.0.1')
         with pytest.raises(SuspiciousOperation):
@@ -53,14 +60,14 @@ class HttpTest(TestCase):
         platform.system() == 'Darwin',
         reason='macOS is always broken, see comment in sentry/http.py'
     )
+    @stub_blacklist([u'127.0.0.1'])
     def test_garbage_ip(self):
-        http.DISALLOWED_IPS = set([ipaddress.ip_network(u'127.0.0.1')])
         with pytest.raises(SuspiciousOperation):
             # '0177.0000.0000.0001' is an octal for '127.0.0.1'
             http.safe_urlopen('http://0177.0000.0000.0001')
 
+    @stub_blacklist([u'127.0.0.1'])
     def test_safe_socket_connect(self):
-        http.DISALLOWED_IPS = set([ipaddress.ip_network(u'127.0.0.1')])
         with pytest.raises(SuspiciousOperation):
             http.safe_socket_connect(('127.0.0.1', 80))
 
