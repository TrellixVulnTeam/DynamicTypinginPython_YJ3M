commit fe672c0e6640a0ddcff2f0180e50dd88f41a704a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jun 29 13:27:40 2016 +0200

    First pass on UI for threads

diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index dff8bbcbf7..5e960f4062 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -45,6 +45,7 @@ const EventEntries = React.createClass({
     template: require('./interfaces/template'),
     csp: require('./interfaces/csp'),
     breadcrumbs: require('./interfaces/breadcrumbs'),
+    threads: require('./interfaces/threads'),
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 39cf518837..8a96a09b64 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -1,11 +1,11 @@
 import React from 'react';
-import ConfigStore from '../../../stores/configStore';
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
 import ExceptionContent from './exceptionContent';
 import RawExceptionContent from './rawExceptionContent';
 import TooltipMixin from '../../../mixins/tooltip';
 import {t} from '../../../locale';
+import {getStacktraceDefaultState} from './stacktrace';
 
 const ExceptionInterface = React.createClass({
   propTypes: {
@@ -22,27 +22,9 @@ const ExceptionInterface = React.createClass({
   })],
 
   getInitialState() {
-    let user = ConfigStore.get('user');
-    // user may not be authenticated
-    let options = user ? user.options : {};
-    let newestFirst;
-    switch (options.stacktraceOrder) {
-      case 'newestFirst':
-        newestFirst = true;
-        break;
-      case 'newestLast':
-        newestFirst = false;
-        break;
-      case 'default':
-      default:
-        newestFirst = false;
-    }
-
-    return {
-      stackView: (this.props.data.hasSystemFrames ? 'app' : 'full'),
-      stackType: 'original',
-      newestFirst: newestFirst
-    };
+    let rv = getStacktraceDefaultState(null, this.props.data.hasSystemFrames);
+    rv.stackType = 'original';
+    return rv;
   },
 
   toggleStackView(value) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index 907acab565..62ff4fd467 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -7,6 +7,32 @@ import StacktraceContent from './stacktraceContent';
 import {t} from '../../../locale';
 
 
+export function getStacktraceDefaultState(user, hasSystemFrames) {
+  if (!user) {
+    user = ConfigStore.get('user');
+  }
+  // user may not be authenticated
+  let options = user ? user.options : {};
+  let newestFirst;
+  switch (options.stacktraceOrder) {
+    case 'newestFirst':
+      newestFirst = true;
+      break;
+    case 'newestLast':
+      newestFirst = false;
+      break;
+    case 'default': // is "default" a valid value? or bad case statement
+    default:
+      newestFirst = false;
+  }
+
+  return {
+    stackView: hasSystemFrames ? 'app' : 'full',
+    newestFirst: newestFirst
+  };
+}
+
+
 const StacktraceInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -17,26 +43,7 @@ const StacktraceInterface = React.createClass({
   },
 
   getInitialState() {
-    let user = ConfigStore.get('user');
-    // user may not be authenticated
-    let options = user ? user.options : {};
-    let newestFirst;
-    switch (options.stacktraceOrder) {
-      case 'newestFirst':
-        newestFirst = true;
-        break;
-      case 'newestLast':
-        newestFirst = false;
-        break;
-      case 'default': // is "default" a valid value? or bad case statement
-      default:
-        newestFirst = false;
-    }
-
-    return {
-      stackView: (this.props.data.hasSystemFrames ? 'app' : 'full'),
-      newestFirst: newestFirst
-    };
+    return getStacktraceDefaultState(null, this.props.data.hasSystemFrames);
   },
 
   toggleStack(value) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
new file mode 100644
index 0000000000..1af8bb1619
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -0,0 +1,130 @@
+import React from 'react';
+import GroupEventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import rawStacktraceContent from './rawStacktraceContent';
+import StacktraceContent from './stacktraceContent';
+import {getStacktraceDefaultState} from './stacktrace';
+import {t} from '../../../locale';
+
+
+const Thread = React.createClass({
+  propTypes: {
+    event: PropTypes.Event.isRequired,
+    data: React.PropTypes.object.isRequired,
+    platform: React.PropTypes.string,
+    stackView: React.PropTypes.string.isRequired,
+    newestFirst: React.PropTypes.bool.isRequired,
+  },
+
+  renderTitle() {
+    let bits = [];
+    if (this.data.index) {
+      bits.push('#' + this.data.index);
+    }
+    if (this.data.name) {
+      bits.push(`"${this.data.name}"`);
+    }
+    if (this.data.id) {
+      bits.push('id=' + this.data.id);
+    }
+    return <h3>bits.join(' ')</h3>;
+  },
+
+  render() {
+    return (
+      <div className="thread">
+        {this.renderTitle()}
+        {this.props.data.stacktrace && (
+          this.props.stackView === 'raw' ?
+            <pre className="traceback plain">
+              {rawStacktraceContent(this.props.data.stacktrace, this.props.platform)}
+            </pre>
+          :
+            <StacktraceContent
+                data={this.props.data.stacktrace}
+                className="no-exception"
+                includeSystemFrames={this.props.stackView === 'full'}
+                platform={this.props.event.platform}
+                newestFirst={this.props.newestFirst} />
+        )}
+      </div>
+    );
+  }
+});
+
+const ThreadsInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    type: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    platform: React.PropTypes.string
+  },
+
+  getInitialState() {
+    let hasSystemFrames = false;
+    for (let thread in this.props.data.threads) {
+      if (thread.hasSystemFrames) {
+        hasSystemFrames = true;
+        break;
+      }
+    }
+    let rv = getStacktraceDefaultState(null, hasSystemFrames);
+    rv.hasSystemFrames = hasSystemFrames;
+    return rv;
+  },
+
+  toggleStack(value) {
+    this.setState({
+      stackView: value
+    });
+  },
+
+  render() {
+    let group = this.props.group;
+    let evt = this.props.event;
+    let {stackView, newestFirst, hasSystemFrames} = this.state;
+
+    let title = (
+      <div>
+        <div className="btn-group">
+          {hasSystemFrames &&
+            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>{t('App Only')}</a>
+          }
+          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>{t('Full')}</a>
+          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>{t('Raw')}</a>
+        </div>
+        <h3>
+          {'Threads'}
+          {newestFirst ?
+            <small>({t('most recent call last')})</small>
+          :
+            <small>({t('most recent call first')})</small>
+          }
+        </h3>
+      </div>
+    );
+
+    return (
+      <GroupEventDataSection
+          group={group}
+          event={evt}
+          type={this.props.type}
+          title={title}
+          wrapTitle={false}>
+        {this.state.threads.map((thread, idx) => {
+          return (
+            <Thread
+              key={idx}
+              data={thread}
+              event={evt}
+              stackView={stackView}
+              newestFirst={newestFirst} />
+          );
+        })}
+      </GroupEventDataSection>
+    );
+  }
+});
+
+export default ThreadsInterface;
