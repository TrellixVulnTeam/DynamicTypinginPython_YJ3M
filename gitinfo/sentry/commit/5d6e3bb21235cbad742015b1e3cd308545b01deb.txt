commit 5d6e3bb21235cbad742015b1e3cd308545b01deb
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Oct 1 15:14:13 2015 -0700

    Fix stream poller ignoring active query, filters (fixes #1884)

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 5ee1152394..4a23325446 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -19,7 +19,7 @@ import StreamTagStore from "../stores/streamTagStore";
 import StreamFilters from './stream/filters';
 import StreamSidebar from "./stream/sidebar";
 import utils from "../utils";
-
+import parseLinkHeader from '../utils/parseLinkHeader';
 
 var Stream = React.createClass({
   mixins: [
@@ -159,7 +159,6 @@ var Stream = React.createClass({
   },
 
   componentDidUpdate(prevProps, prevState) {
-    this._poller.setEndpoint(this.getGroupListEndpoint());
     if (prevState.realtimeActive !== this.state.realtimeActive) {
       if (this.state.realtimeActive) {
         this._poller.enable();
@@ -220,11 +219,13 @@ var Stream = React.createClass({
           loading: false
         });
       },
-      complete: () => {
+      complete: (jqXHR) => {
         this.lastRequest = null;
 
+        var links = parseLinkHeader(jqXHR.getResponseHeader('Link'));
+        this._poller.setEndpoint(links.previous.href);
+
         if (this.state.realtimeActive) {
-          this._poller.setEndpoint(url);
           this._poller.enable();
         }
       }
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 56b52bffea..87792daad7 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -16,6 +16,10 @@ var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 var findWithType = TestUtils.findRenderedComponentWithType;
 
+const EXAMPLE_LINK_HEADER =
+  '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
+  '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
+
 describe("Stream", function() {
 
   beforeEach(function() {
@@ -49,12 +53,12 @@ describe("Stream", function() {
 
   describe("fetchData()", function() {
 
-    it("resets the poller endpoint", function() {
-      var expectedUrl;
+    it("resets the poller endpoint and sets cursor URL", function() {
       this.stubbedApiRequest.restore();
       this.sandbox.stub(Api, "request", function(url, options) {
-        expectedUrl = url;
-        options.complete && options.complete();
+        options.complete && options.complete({
+          getResponseHeader: () => EXAMPLE_LINK_HEADER
+        });
       });
 
       var stubbedSetEndpoint = this.sandbox.stub(CursorPoller.prototype, "setEndpoint");
@@ -62,7 +66,10 @@ describe("Stream", function() {
       var wrapper = React.render(this.Element, document.body);
       wrapper.refs.wrapped.fetchData();
 
-      expect(stubbedSetEndpoint.calledWith(expectedUrl)).to.be.true;
+      // url value pulled from EXAMPLE_LINK_HEADER
+      expect(stubbedSetEndpoint
+        .calledWith('http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1'))
+        .to.be.true;
     });
 
     it("should cancel any previous, unfinished fetches", function () {
@@ -87,7 +94,9 @@ describe("Stream", function() {
       expect(stream.lastRequest).to.be.ok;
 
       // when request "completes", lastRequest is cleared
-      requestOptions.complete();
+      requestOptions.complete({
+        getResponseHeader: () => EXAMPLE_LINK_HEADER
+      });
 
       expect(stream.lastRequest).to.be.null;
     });
