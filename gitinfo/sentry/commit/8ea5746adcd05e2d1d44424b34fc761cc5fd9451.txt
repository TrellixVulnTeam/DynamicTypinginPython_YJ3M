commit 8ea5746adcd05e2d1d44424b34fc761cc5fd9451
Author: Mark Story <mark@sentry.io>
Date:   Fri Dec 6 16:35:35 2019 -0500

    fix(settings) Fix binding error and remove $.when usage. (#15984)
    
    Fixes JAVASCRIPT-20YS

diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
index 4e49bce02c..b1f7e9f8ba 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
@@ -1,4 +1,3 @@
-import $ from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
 import SentryTypes from 'app/sentryTypes';
@@ -89,45 +88,28 @@ class ProjectFiltersChart extends React.Component {
       until: this.state.queryUntil,
       resolution: '1d',
     };
-    $.when
-      .apply(
-        $,
-        // parallelize requests for each statistic
-        statOptions.map(stat => {
-          const deferred = $.Deferred();
-          this.props.api.request(statEndpoint, {
-            query: Object.assign({stat}, query),
-            success: deferred.resolve.bind(deferred),
-            error: deferred.reject.bind(deferred),
-          });
-          return deferred;
-        })
-      )
-      .done(
-        function(/* statOption1, statOption2, ... statOptionN */) {
-          const rawStatsData = {};
-          // when there is a single request made, this is inexplicably called without being wrapped in an array
-          if (statOptions.length === 1) {
-            rawStatsData[statOptions[0]] = arguments[0];
-          } else {
-            for (let i = 0; i < statOptions.length; i++) {
-              rawStatsData[statOptions[i]] = arguments[i][0];
-            }
-          }
-
-          this.setState({
-            rawStatsData,
-            formattedData: this.formatData(rawStatsData),
-            error: false,
-            loading: false,
-          });
-        }.bind(this)
-      )
-      .fail(
-        function() {
-          this.setState({error: true});
-        }.bind(this)
-      );
+    const requests = statOptions.map(stat => {
+      return this.props.api.requestPromise(statEndpoint, {
+        query: Object.assign({stat}, query),
+      });
+    });
+    Promise.all(requests)
+      .then(results => {
+        const rawStatsData = {};
+        for (let i = 0; i < statOptions.length; i++) {
+          rawStatsData[statOptions[i]] = results[i];
+        }
+
+        this.setState({
+          rawStatsData,
+          formattedData: this.formatData(rawStatsData),
+          error: false,
+          loading: false,
+        });
+      })
+      .catch(() => {
+        this.setState({error: true, loading: false});
+      });
   }
 
   fetchData = () => {
@@ -140,7 +122,7 @@ class ProjectFiltersChart extends React.Component {
     return timeMoment.format('LL');
   }
 
-  renderTooltip(point) {
+  renderTooltip = point => {
     const timeLabel = this.timeLabelAsDay(point);
     let totalY = 0;
     for (let i = 0; i < point.y.length; i++) {
@@ -176,7 +158,7 @@ class ProjectFiltersChart extends React.Component {
         })}
       </div>
     );
-  }
+  };
 
   render() {
     const {loading, error} = this.state;
