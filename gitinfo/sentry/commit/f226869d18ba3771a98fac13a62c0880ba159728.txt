commit f226869d18ba3771a98fac13a62c0880ba159728
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Mar 17 15:40:44 2017 +0100

    Initialize context plugins for group view

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index ddfeeb6460..a6870b10e5 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -14,6 +14,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases import GroupEndpoint
 from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import (
     Activity, Group, GroupHash, GroupSeen, GroupStatus, GroupTagKey,
     GroupTagValue, Release, User, UserReport,
@@ -144,6 +145,15 @@ class GroupDetailsEndpoint(GroupEndpoint):
                                              _with_transaction=False)
         return plugin_issues
 
+    def _get_context_plugins(self, request, group):
+        project = group.project
+        return serialize([
+            plugin
+            for plugin in plugins.configurable_for_project(project, version=None)
+            if plugin.has_project_conf() and hasattr(plugin, 'get_custom_contexts')
+            and plugin.get_custom_contexts()
+        ], request.user, PluginSerializer(project))
+
     def _get_release_info(self, request, group, version):
         try:
             release = Release.objects.get(
@@ -241,6 +251,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             'participants': serialize(participants, request.user),
             'pluginActions': action_list,
             'pluginIssues': self._get_available_issue_plugins(request, group),
+            'pluginContexts': self._get_context_plugins(request, group),
             'userReportCount': UserReport.objects.filter(group=group).count(),
             'tags': sorted(serialize(tags, request.user), key=lambda x: x['name']),
             'stats': {
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 214ad29efe..d948a44d8f 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -12,6 +12,9 @@ class PluginSerializer(Serializer):
         self.project = project
 
     def serialize(self, obj, attrs, user):
+        contexts = []
+        if hasattr(obj, 'get_custom_contexts'):
+            contexts.extend(x.type for x in obj.get_custom_contexts() or ())
         d = {
             'id': obj.slug,
             'name': six.text_type(obj.get_title()),
@@ -19,6 +22,7 @@ class PluginSerializer(Serializer):
             'canDisable': obj.can_disable,
             'isTestable': obj.is_testable(),
             'metadata': obj.get_metadata(),
+            'contexts': contexts,
             'assets': [
                 {
                     'url': absolute_uri(get_asset_url(obj.asset_key or obj.slug, asset)),
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 9cd6cc7599..001a21c5e6 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -13,6 +13,22 @@ const CONTEXT_TYPES = {
   'user': require('./contexts/user').default,
 };
 
+function getContextComponent(type) {
+  return CONTEXT_TYPES[type] || plugins.contexts[type] || CONTEXT_TYPES.default;
+}
+
+function getSourcePlugin(pluginContexts, contextType) {
+  if (CONTEXT_TYPES[contextType]) {
+    return null;
+  }
+  for (let plugin of pluginContexts) {
+    if (plugin.contexts.indexOf(contextType) >= 0) {
+      return plugin;
+    }
+  }
+  return null;
+}
+
 const ContextChunk = React.createClass({
   propTypes: {
     event: React.PropTypes.object.isRequired,
@@ -22,15 +38,49 @@ const ContextChunk = React.createClass({
     value: React.PropTypes.object.isRequired,
   },
 
-  renderTitle() {
+  getInitialState() {
+    return {
+      isLoading: false
+    };
+  },
+
+  componentWillMount() {
+    this.syncPlugin();
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    if (prevProps.group.id != this.props.group.id ||
+        prevProps.type != this.props.type) {
+      this.syncPlugin();
+    }
+  },
+
+  syncPlugin() {
+    let sourcePlugin = getSourcePlugin(
+      this.props.group.pluginContexts, this.props.type);
+    if (!sourcePlugin) {
+      this.setState({
+        pluginLoading: false
+      });
+    } else {
+      this.setState({
+        pluginLoading: true,
+      }, () => {
+        plugins.load(sourcePlugin, () => {
+          this.setState({pluginLoading: false});
+        });
+      });
+    }
+  },
+
+  renderTitle(component) {
     let {value, alias, type} = this.props;
     let title = null;
     if (defined(value.title)) {
       title = value.title;
     } else {
-      let Component = CONTEXT_TYPES[type] || plugins.contexts[type] || CONTEXT_TYPES.default;
-      if (Component.getTitle) {
-        title = Component.getTitle(value);
+      if (component.getTitle) {
+        title = component.getTitle(value);
       }
       if (!defined(title)) {
         title = toTitleCase(alias);
@@ -46,10 +96,20 @@ const ContextChunk = React.createClass({
   },
 
   render() {
+    // if we are currently loading the plugin, just render nothing for now.
+    if (this.state.pluginLoading) {
+      return null;
+    }
+
     let group = this.props.group;
     let evt = this.props.event;
     let {type, alias, value} = this.props;
-    let Component = CONTEXT_TYPES[type] || CONTEXT_TYPES.default;
+    let Component = getContextComponent(type);
+
+    // this can happen if the component does not exist
+    if (!Component) {
+      return null;
+    }
 
     return (
       <GroupEventDataSection
@@ -57,7 +117,7 @@ const ContextChunk = React.createClass({
           event={evt}
           key={`context-${alias}`}
           type={`context-${alias}`}
-          title={this.renderTitle()}>
+          title={this.renderTitle(Component)}>
         <Component alias={alias} data={value} />
       </GroupEventDataSection>
     );
