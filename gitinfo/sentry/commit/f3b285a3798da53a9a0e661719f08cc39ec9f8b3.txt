commit f3b285a3798da53a9a0e661719f08cc39ec9f8b3
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 30 14:03:01 2015 -0700

    Specialized endpoint for shared groups

diff --git a/src/sentry/api/endpoints/group_index.py b/src/sentry/api/endpoints/group_index.py
deleted file mode 100644
index 71a90ba997..0000000000
--- a/src/sentry/api/endpoints/group_index.py
+++ /dev/null
@@ -1,36 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from rest_framework.response import Response
-
-from sentry.api import client
-from sentry.api.base import DocSection, Endpoint
-from sentry.models import Group
-
-
-class GroupIndexEndpoint(Endpoint):
-    doc_section = DocSection.EVENTS
-
-    permission_classes = ()
-
-    def get(self, request):
-        """
-        Retrieve an aggregate
-
-        Return details on an individual aggregate specified by query parameters.
-
-            {method} {path}?shareId=mnIX
-
-        """
-        share_id = request.GET.get('shareId')
-        if share_id:
-            try:
-                group = Group.from_share_id(share_id)
-            except Group.DoesNotExist:
-                group = None
-        else:
-            group = None
-
-        if not group:
-            return Response({'detail': 'No groups found'}, status=404)
-
-        return client.get('/groups/{}/'.format(group.id), request.user, request.auth)
diff --git a/src/sentry/api/endpoints/shared_group_details.py b/src/sentry/api/endpoints/shared_group_details.py
new file mode 100644
index 0000000000..c3525d1233
--- /dev/null
+++ b/src/sentry/api/endpoints/shared_group_details.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from sentry.api import client
+from sentry.api.base import Endpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Group
+
+
+class SharedGroupDetailsEndpoint(Endpoint):
+    permission_classes = ()
+
+    def get(self, request, share_id):
+        """
+        Retrieve an aggregate
+
+        Return details on an individual aggregate specified by it's shared ID.
+
+            {method} {path}
+
+        Note: This is not the equivilant of what you'd receive with the standard
+        group details endpoint. Data is more restrictive and designed
+        specifically for sharing.
+
+        """
+        try:
+            group = Group.from_share_id(share_id)
+        except Group.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        # TODO(dcramer): use specific serializer for public group and embed
+        # event details as part of api response
+        return client.get('/groups/{}/'.format(group.id), request.user, request.auth)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 1ef245a1da..b964152105 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -9,7 +9,6 @@ from .endpoints.event_details import EventDetailsEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
 from .endpoints.group_events_latest import GroupEventsLatestEndpoint
-from .endpoints.group_index import GroupIndexEndpoint
 from .endpoints.group_notes import GroupNotesEndpoint
 from .endpoints.group_stats import GroupStatsEndpoint
 from .endpoints.group_tags import GroupTagsEndpoint
@@ -44,6 +43,7 @@ from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
 from .endpoints.release_details import ReleaseDetailsEndpoint
 from .endpoints.release_files import ReleaseFilesEndpoint
 from .endpoints.release_file_details import ReleaseFileDetailsEndpoint
+from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
 from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
@@ -169,9 +169,6 @@ urlpatterns = patterns(
         name='sentry-api-0-project-tagkey-values'),
 
     # Groups
-    url(r'^groups/$',
-        GroupIndexEndpoint.as_view(),
-        name='sentry-api-group-index'),
     url(r'^groups/(?P<group_id>\d+)/$',
         GroupDetailsEndpoint.as_view(),
         name='sentry-api-0-group-details'),
@@ -197,6 +194,10 @@ urlpatterns = patterns(
         GroupTagKeyValuesEndpoint.as_view(),
         name='sentry-api-0-group-tagkey-values'),
 
+    url(r'^shared/groups/(?P<share_id>[^\/]+)/$',
+        SharedGroupDetailsEndpoint.as_view(),
+        name='sentry-api-0-shared-group-details'),
+
     # Events
     url(r'^events/(?P<event_id>\d+)/$',
         EventDetailsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_shared_group_details.py b/tests/sentry/api/endpoints/test_shared_group_details.py
new file mode 100644
index 0000000000..ccc1dc6303
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_shared_group_details.py
@@ -0,0 +1,20 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class SharedGroupDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-shared-group-details', kwargs={
+            'share_id': group.get_share_id(),
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(group.id)
