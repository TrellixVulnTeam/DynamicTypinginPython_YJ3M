commit 11bb65794cc63e6974f2e7a575b6477eff1dd2f0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Nov 5 11:16:18 2019 -0700

    ref(ui): Refactor `<ProjectKeys>` and `<ProjectKeyDetails>` (#15414)
    
    * Change to typescript
    * Remove `grid-emotion`
    * request -> requestPromise
    * Change updates to be optimistic
    * move tests to settings dir
    * fix tests and ref- classname
    * rename tests to mirror component file path

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 553f1eda64..d05fb19779 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -351,7 +351,7 @@ function routes() {
       <Route path="keys/" name="Client Keys">
         <IndexRoute
           componentPromise={() =>
-            import(/* webpackChunkName: "ProjectKeys" */ 'app/views/settings/project/projectKeys')
+            import(/* webpackChunkName: "ProjectKeys" */ 'app/views/settings/project/projectKeys/list')
           }
           component={errorHandler(LazyLoad)}
         />
@@ -360,7 +360,7 @@ function routes() {
           path=":keyId/"
           name="Details"
           componentPromise={() =>
-            import(/* webpackChunkName: "ProjectKeyDetails" */ 'app/views/settings/project/projectKeys/projectKeyDetails')
+            import(/* webpackChunkName: "ProjectKeyDetails" */ 'app/views/settings/project/projectKeys/details')
           }
           component={errorHandler(LazyLoad)}
         />
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx
new file mode 100644
index 0000000000..54fc468a59
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/index.tsx
@@ -0,0 +1,62 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {ProjectKey} from 'app/views/settings/project/projectKeys/types';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import KeySettings from 'app/views/settings/project/projectKeys/details/keySettings';
+import KeyStats from 'app/views/settings/project/projectKeys/details/keyStats';
+import PermissionAlert from 'app/views/settings/project/permissionAlert';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+type Props = RouteComponentProps<
+  {
+    keyId: string;
+    orgId: string;
+    projectId: string;
+  },
+  {}
+> &
+  AsyncView['props'];
+
+type State = {
+  data: ProjectKey;
+} & AsyncView['state'];
+
+export default class ProjectKeyDetails extends AsyncView<Props, State> {
+  getTitle() {
+    return t('Key Details');
+  }
+
+  getEndpoints(): [string, string][] {
+    const {keyId, orgId, projectId} = this.props.params;
+    return [['data', `/projects/${orgId}/${projectId}/keys/${keyId}/`]];
+  }
+
+  handleRemove = () => {
+    const {orgId, projectId} = this.props.params;
+    browserHistory.push(`/${orgId}/${projectId}/settings/keys/`);
+  };
+
+  renderBody() {
+    const {data} = this.state;
+    const {params} = this.props;
+
+    return (
+      <div data-test-id="key-details">
+        <SettingsPageHeader title={t('Key Details')} />
+        <PermissionAlert />
+
+        <KeyStats api={this.api} params={params} />
+
+        <KeySettings
+          api={this.api}
+          params={params}
+          data={data}
+          onRemove={this.handleRemove}
+        />
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx
new file mode 100644
index 0000000000..9e609c1529
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyRateLimitsForm.tsx
@@ -0,0 +1,176 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
+import {ProjectKey} from 'app/views/settings/project/projectKeys/types';
+import {t} from 'app/locale';
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+import Form from 'app/views/settings/components/forms/form';
+import FormField from 'app/views/settings/components/forms/formField';
+import InputControl from 'app/views/settings/components/forms/controls/input';
+import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
+import space from 'app/styles/space';
+
+const RATE_LIMIT_FORMAT_MAP = new Map([
+  [0, 'None'],
+  [60, '1 minute'],
+  [300, '5 minutes'],
+  [900, '15 minutes'],
+  [3600, '1 hour'],
+  [7200, '2 hours'],
+  [14400, '4 hours'],
+  [21600, '6 hours'],
+  [43200, '12 hours'],
+  [86400, '24 hours'],
+]);
+
+const formatRateLimitWindow = val => RATE_LIMIT_FORMAT_MAP.get(val);
+
+type Props = {
+  data: ProjectKey;
+  disabled: boolean;
+} & Pick<
+  RouteComponentProps<
+    {
+      keyId: string;
+      orgId: string;
+      projectId: string;
+    },
+    {}
+  >,
+  'params'
+>;
+
+class KeyRateLimitsForm extends React.Component<Props> {
+  handleChangeWindow = (onChange, onBlur, currentValueObj, value, e) => {
+    const valueObj = {
+      ...currentValueObj,
+      window: value,
+    };
+    onChange(valueObj, e);
+    onBlur(valueObj, e);
+  };
+
+  handleChangeCount = (cb, value, e) => {
+    const valueObj = {
+      ...value,
+      count: e.target.value,
+    };
+
+    cb(valueObj, e);
+  };
+
+  render() {
+    const {data, disabled} = this.props;
+    const {keyId, orgId, projectId} = this.props.params;
+    const apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+
+    const disabledAlert = ({features}) => (
+      <FeatureDisabled
+        alert={PanelAlert}
+        features={features}
+        featureName={t('Key Rate Limits')}
+      />
+    );
+
+    return (
+      <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
+        <Feature
+          features={['projects:rate-limits']}
+          hookName="feature-disabled:rate-limits"
+          renderDisabled={({children, ...props}) =>
+            children({...props, renderDisabled: disabledAlert})
+          }
+        >
+          {({hasFeature, features, organization, project, renderDisabled}) => (
+            <Panel>
+              <PanelHeader>{t('Rate Limits')}</PanelHeader>
+
+              <PanelBody>
+                <PanelAlert type="info" icon="icon-circle-exclamation">
+                  {t(
+                    `Rate limits provide a flexible way to manage your event
+                      volume. If you have a noisy project or environment you
+                      can configure a rate limit for this key to reduce the
+                      number of events processed.`
+                  )}
+                </PanelAlert>
+                {!hasFeature && renderDisabled({organization, project, features})}
+                <FormField
+                  className="rate-limit-group"
+                  name="rateLimit"
+                  label={t('Rate Limit')}
+                  disabled={disabled || !hasFeature}
+                  validate={({form}) => {
+                    const isValid =
+                      form &&
+                      form.rateLimit &&
+                      typeof form.rateLimit.count !== 'undefined' &&
+                      typeof form.rateLimit.window !== 'undefined';
+
+                    if (isValid) {
+                      return [];
+                    }
+
+                    return [['rateLimit', t('Fill in both fields first')]];
+                  }}
+                  help={t(
+                    'Apply a rate limit to this credential to cap the amount of events accepted during a time window.'
+                  )}
+                  inline={false}
+                >
+                  {({onChange, onBlur, value}) => (
+                    <RateLimitRow>
+                      <InputControl
+                        type="number"
+                        name="rateLimit.count"
+                        min={0}
+                        value={value && value.count}
+                        placeholder={t('Count')}
+                        disabled={disabled || !hasFeature}
+                        onChange={this.handleChangeCount.bind(this, onChange, value)}
+                        onBlur={this.handleChangeCount.bind(this, onBlur, value)}
+                      />
+                      <EventsIn>{t('event(s) in')}</EventsIn>
+                      <RangeSlider
+                        name="rateLimit.window"
+                        allowedValues={Array.from(RATE_LIMIT_FORMAT_MAP.keys())}
+                        value={value && value.window}
+                        placeholder={t('Window')}
+                        formatLabel={formatRateLimitWindow}
+                        disabled={disabled || !hasFeature}
+                        onChange={this.handleChangeWindow.bind(
+                          this,
+                          onChange,
+                          onBlur,
+                          value
+                        )}
+                      />
+                    </RateLimitRow>
+                  )}
+                </FormField>
+              </PanelBody>
+            </Panel>
+          )}
+        </Feature>
+      </Form>
+    );
+  }
+}
+
+export default KeyRateLimitsForm;
+
+const RateLimitRow = styled('div')`
+  display: grid;
+  grid-template-columns: 2fr 1fr 2fr;
+  align-items: center;
+  grid-gap: ${space(1)};
+`;
+
+const EventsIn = styled('small')`
+  font-size: ${p => p.theme.fontSizeRelativeSmaller};
+  text-align: center;
+  white-space: nowrap;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keySettings.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keySettings.tsx
new file mode 100644
index 0000000000..eafce557b2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keySettings.tsx
@@ -0,0 +1,221 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {Client} from 'app/api';
+import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
+import {ProjectKey} from 'app/views/settings/project/projectKeys/types';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+import {t, tct} from 'app/locale';
+import Access from 'app/components/acl/access';
+import BooleanField from 'app/views/settings/components/forms/booleanField';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+import DateTime from 'app/components/dateTime';
+import ExternalLink from 'app/components/links/externalLink';
+import Field from 'app/views/settings/components/forms/field';
+import Form from 'app/views/settings/components/forms/form';
+import KeyRateLimitsForm from 'app/views/settings/project/projectKeys/details/keyRateLimitsForm';
+import ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';
+import SelectField from 'app/views/settings/components/forms/selectField';
+import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
+import TextField from 'app/views/settings/components/forms/textField';
+import getDynamicText from 'app/utils/getDynamicText';
+
+type Props = {
+  api: Client;
+  data: ProjectKey;
+  onRemove: () => void;
+} & Pick<
+  RouteComponentProps<
+    {
+      keyId: string;
+      orgId: string;
+      projectId: string;
+    },
+    {}
+  >,
+  'params'
+>;
+
+type State = {
+  loading: boolean;
+  error: boolean;
+};
+
+class KeySettings extends React.Component<Props, State> {
+  state = {
+    loading: false,
+    error: false,
+  };
+
+  handleRemove = async () => {
+    if (this.state.loading) {
+      return;
+    }
+
+    addLoadingMessage(t('Revoking key..'));
+    const {api, onRemove, params} = this.props;
+    const {keyId, orgId, projectId} = params;
+
+    try {
+      await api.requestPromise(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
+        method: 'DELETE',
+      });
+
+      onRemove();
+      addSuccessMessage(t('Revoked key'));
+    } catch (_err) {
+      this.setState({
+        error: true,
+        loading: false,
+      });
+      addErrorMessage(t('Unable to revoke key'));
+    }
+  };
+
+  render() {
+    const {keyId, orgId, projectId} = this.props.params;
+    const {data} = this.props;
+    const apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
+    const loaderLink = getDynamicText({
+      value: data.dsn.cdn,
+      fixed: '__JS_SDK_LOADER_URL__',
+    });
+
+    return (
+      <Access access={['project:write']}>
+        {({hasAccess}) => (
+          <React.Fragment>
+            <Form
+              saveOnBlur
+              allowUndo
+              apiEndpoint={apiEndpoint}
+              apiMethod="PUT"
+              initialData={data}
+            >
+              <Panel>
+                <PanelHeader>{t('Details')}</PanelHeader>
+
+                <PanelBody>
+                  <TextField
+                    name="name"
+                    label={t('Name')}
+                    disabled={!hasAccess}
+                    required={false}
+                    maxLength={64}
+                  />
+                  <BooleanField
+                    name="isActive"
+                    label={t('Enabled')}
+                    required={false}
+                    disabled={!hasAccess}
+                    help="Accept events from this key? This may be used to temporarily suspend a key."
+                  />
+                  <Field label={t('Created')}>
+                    <div className="controls">
+                      <DateTime date={data.dateCreated} />
+                    </div>
+                  </Field>
+                </PanelBody>
+              </Panel>
+            </Form>
+
+            <KeyRateLimitsForm
+              params={this.props.params}
+              data={data}
+              disabled={!hasAccess}
+            />
+
+            <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
+              <Panel>
+                <PanelHeader>{t('JavaScript Loader')}</PanelHeader>
+                <PanelBody>
+                  <Field
+                    help={tct(
+                      'Copy this script into your website to setup our JavaScript SDK without any additional configuration. [link]',
+                      {
+                        link: (
+                          <ExternalLink href="https://docs.sentry.io/platforms/javascript/browser/">
+                            What does the script provide?
+                          </ExternalLink>
+                        ),
+                      }
+                    )}
+                    inline={false}
+                    flexibleControlStateSize
+                  >
+                    <TextCopyInput>
+                      {`<script src='${loaderLink}' crossorigin="anonymous"></script>`}
+                    </TextCopyInput>
+                  </Field>
+                  <SelectField
+                    name="browserSdkVersion"
+                    choices={data.browserSdk ? data.browserSdk.choices : []}
+                    placeholder={t('4.x')}
+                    allowClear={false}
+                    enabled={!hasAccess}
+                    help={t(
+                      'Select the version of the SDK that should be loaded. Note that it can take a few minutes until this change is live.'
+                    )}
+                  />
+                </PanelBody>
+              </Panel>
+            </Form>
+
+            <Panel>
+              <PanelHeader>{t('Credentials')}</PanelHeader>
+              <PanelBody>
+                <PanelAlert type="info" icon="icon-circle-exclamation">
+                  {t(
+                    'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
+                  )}
+                </PanelAlert>
+
+                <ProjectKeyCredentials
+                  projectId={`${data.projectId}`}
+                  data={data}
+                  showPublicKey
+                  showSecretKey
+                  showProjectId
+                />
+              </PanelBody>
+            </Panel>
+
+            <Access access={['project:admin']}>
+              <Panel>
+                <PanelHeader>{t('Revoke Key')}</PanelHeader>
+                <PanelBody>
+                  <Field
+                    label={t('Revoke Key')}
+                    help={t(
+                      'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
+                    )}
+                  >
+                    <div>
+                      <Confirm
+                        priority="danger"
+                        message={t(
+                          'Are you sure you want to revoke this key? This will immediately remove and suspend the credentials.'
+                        )}
+                        onConfirm={this.handleRemove}
+                        confirmText={t('Revoke Key')}
+                      >
+                        <Button priority="danger">{t('Revoke Key')}</Button>
+                      </Confirm>
+                    </div>
+                  </Field>
+                </PanelBody>
+              </Panel>
+            </Access>
+          </React.Fragment>
+        )}
+      </Access>
+    );
+  }
+}
+
+export default KeySettings;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyStats.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyStats.tsx
new file mode 100644
index 0000000000..e7e0a6b62d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/details/keyStats.tsx
@@ -0,0 +1,137 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {Client} from 'app/api';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {t} from 'app/locale';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import LoadingError from 'app/components/loadingError';
+import Placeholder from 'app/components/placeholder';
+import StackedBarChart from 'app/components/stackedBarChart';
+
+type Props = {
+  api: Client;
+} & Pick<
+  RouteComponentProps<
+    {
+      keyId: string;
+      orgId: string;
+      projectId: string;
+    },
+    {}
+  >,
+  'params'
+>;
+
+const getInitialState = () => {
+  const until = Math.floor(new Date().getTime() / 1000);
+  return {
+    since: until - 3600 * 24 * 30,
+    until,
+    loading: true,
+    error: false,
+    stats: null,
+    emptyStats: false,
+  };
+};
+
+class KeyStats extends React.Component<Props> {
+  state = getInitialState();
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  fetchData = () => {
+    const {keyId, orgId, projectId} = this.props.params;
+    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
+      query: {
+        since: this.state.since,
+        until: this.state.until,
+        resolution: '1d',
+      },
+      success: data => {
+        let emptyStats = true;
+        const stats = data.map(p => {
+          if (p.total) {
+            emptyStats = false;
+          }
+          return {
+            x: p.ts,
+            y: [p.accepted, p.dropped],
+          };
+        });
+        this.setState({
+          stats,
+          emptyStats,
+          error: false,
+          loading: false,
+        });
+      },
+      error: () => {
+        this.setState({error: true, loading: false});
+      },
+    });
+  };
+
+  renderTooltip = (point, _pointIdx, chart) => {
+    const timeLabel = chart.getTimeLabel(point);
+    const [accepted, dropped, filtered] = point.y;
+
+    return (
+      <div style={{width: '150px'}}>
+        <div className="time-label">{timeLabel}</div>
+        <div className="value-label">
+          {accepted.toLocaleString()} accepted
+          {dropped > 0 && (
+            <React.Fragment>
+              <br />
+              {dropped.toLocaleString()} rate limited
+            </React.Fragment>
+          )}
+          {filtered > 0 && (
+            <React.Fragment>
+              <br />
+              {filtered.toLocaleString()} filtered
+            </React.Fragment>
+          )}
+        </div>
+      </div>
+    );
+  };
+
+  render() {
+    if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
+
+    return (
+      <Panel>
+        <PanelHeader>{t('Key usage in the last 30 days (by day)')}</PanelHeader>
+        <PanelBody>
+          {this.state.loading ? (
+            <Placeholder height="150px" />
+          ) : !this.state.emptyStats ? (
+            <StackedBarChart
+              points={this.state.stats}
+              height={150}
+              label="events"
+              barClasses={['accepted', 'rate-limited']}
+              minHeights={[1, 0]}
+              className="standard-barchart"
+              style={{border: 'none'}}
+              tooltip={this.renderTooltip}
+            />
+          ) : (
+            <EmptyMessage
+              title={t('Nothing recorded in the last 30 days.')}
+              description={t('Total events captured using these credentials.')}
+            />
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default KeyStats;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
deleted file mode 100644
index 4a70efdb5b..0000000000
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
+++ /dev/null
@@ -1,334 +0,0 @@
-import {Box, Flex} from 'grid-emotion';
-import {Link} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {
-  addErrorMessage,
-  addLoadingMessage,
-  addSuccessMessage,
-  removeIndicator,
-} from 'app/actionCreators/indicator';
-import {t, tct} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/button';
-import ClippedBox from 'app/components/clippedBox';
-import Confirm from 'app/components/confirm';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import ExternalLink from 'app/components/links/externalLink';
-import Pagination from 'app/components/pagination';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';
-import SentryTypes from 'app/sentryTypes';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import TextBlock from 'app/views/settings/components/text/textBlock';
-import recreateRoute from 'app/utils/recreateRoute';
-import routeTitleGen from 'app/utils/routeTitle';
-
-class KeyRow extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-    access: PropTypes.object.isRequired,
-    onToggle: PropTypes.func.isRequired,
-    onRemove: PropTypes.func.isRequired,
-  };
-
-  state = {
-    loading: false,
-    error: false,
-  };
-
-  handleRemove = () => {
-    if (this.state.loading) {
-      return;
-    }
-
-    const loadingIndicator = addLoadingMessage(t('Saving changes..'));
-    const {orgId, projectId, data} = this.props;
-    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
-      method: 'DELETE',
-      success: () => {
-        this.props.onRemove();
-        removeIndicator(loadingIndicator);
-        addSuccessMessage(t('Revoked key'));
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        removeIndicator(loadingIndicator);
-        addErrorMessage(t('Unable to revoke key'));
-      },
-    });
-  };
-
-  handleUpdate = (params, cb) => {
-    if (this.state.loading) {
-      return;
-    }
-    const loadingIndicator = addLoadingMessage(t('Saving changes..'));
-    const {orgId, projectId, data} = this.props;
-    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
-      method: 'PUT',
-      data: params,
-      success: d => {
-        removeIndicator(loadingIndicator);
-        cb(d);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        removeIndicator(loadingIndicator);
-      },
-    });
-  };
-
-  handleEnable = () => {
-    this.handleUpdate(
-      {
-        isActive: true,
-      },
-      this.props.onToggle
-    );
-  };
-
-  handleDisable = () => {
-    this.handleUpdate(
-      {
-        isActive: false,
-      },
-      this.props.onToggle
-    );
-  };
-
-  render() {
-    const {access, data} = this.props;
-    const editUrl = recreateRoute(`${data.id}/`, this.props);
-    const controlActive = access.has('project:write') && !this.state.loading;
-
-    const controls = [
-      <Button key="edit" to={editUrl} size="small">
-        {t('Configure')}
-      </Button>,
-      <Button
-        key="toggle"
-        size="small"
-        onClick={data.isActive ? this.handleDisable : this.handleEnable}
-        disabled={!controlActive}
-      >
-        {data.isActive ? t('Disable') : t('Enable')}
-      </Button>,
-      <Confirm
-        key="remove"
-        priority="danger"
-        disabled={!controlActive}
-        onConfirm={this.handleRemove}
-        confirmText={t('Remove Key')}
-        message={t(
-          'Are you sure you want to remove this key? This action is irreversible.'
-        )}
-      >
-        <Button size="small" disabled={!controlActive} icon="icon-trash" />
-      </Confirm>,
-    ];
-
-    return (
-      <ClientKeyItemPanel disabled={!data.isActive}>
-        <PanelHeader hasButtons>
-          <Box flex="1">
-            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>
-            {!data.isActive && (
-              <small>
-                {' '}
-                <i className="icon icon-ban" /> {t('Disabled')}
-              </small>
-            )}
-          </Box>
-          <Flex align="center">
-            {controls.map((c, n) => (
-              <KeyControl key={n}> {c}</KeyControl>
-            ))}
-          </Flex>
-        </PanelHeader>
-
-        <ClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>
-          <PanelBody>
-            <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />
-          </PanelBody>
-        </ClippedBox>
-      </ClientKeyItemPanel>
-    );
-  }
-}
-
-export default class ProjectKeys extends AsyncView {
-  static propTypes = {
-    routes: PropTypes.array.isRequired,
-    params: PropTypes.object.isRequired,
-  };
-
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
-  getTitle() {
-    const {projectId} = this.props.params;
-    return routeTitleGen(t('Client Keys'), projectId, false);
-  }
-
-  getEndpoints() {
-    const {orgId, projectId} = this.props.params;
-    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];
-  }
-
-  handleRemoveKey = data => {
-    this.setState(state => {
-      return {
-        keyList: state.keyList.filter(key => {
-          return key.id !== data.id;
-        }),
-      };
-    });
-  };
-
-  handleToggleKey = (data, newData) => {
-    this.setState(state => {
-      const keyList = state.keyList;
-      keyList.forEach(key => {
-        if (key.id === data.id) {
-          key.isActive = newData.isActive;
-        }
-      });
-      return {keyList};
-    });
-  };
-
-  handleCreateKey = () => {
-    const {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
-      method: 'POST',
-      success: data => {
-        this.setState(state => {
-          return {
-            keyList: [...state.keyList, data],
-          };
-        });
-        addSuccessMessage(t('Created a new key.'));
-      },
-      error: () => {
-        addErrorMessage(t('Unable to create new key. Please try again.'));
-      },
-    });
-  };
-
-  renderEmpty() {
-    return (
-      <Panel>
-        <EmptyMessage
-          icon="icon-circle-exclamation"
-          description={t('There are no keys active for this project.')}
-        />
-      </Panel>
-    );
-  }
-
-  renderResults() {
-    const {routes, params} = this.props;
-    const {orgId, projectId} = params;
-    const access = new Set(this.context.organization.access);
-
-    return (
-      <div>
-        <div>
-          {this.state.keyList.map(key => {
-            return (
-              <KeyRow
-                api={this.api}
-                routes={routes}
-                params={params}
-                access={access}
-                key={key.id}
-                orgId={orgId}
-                projectId={`${projectId}`}
-                data={key}
-                onToggle={this.handleToggleKey.bind(this, key)}
-                onRemove={this.handleRemoveKey.bind(this, key)}
-              />
-            );
-          })}
-        </div>
-        <Pagination pageLinks={this.state.keyListPageLinks} />
-      </div>
-    );
-  }
-
-  renderBody() {
-    const access = new Set(this.context.organization.access);
-    const isEmpty = !this.state.keyList.length;
-
-    return (
-      <div className="ref-keys">
-        <SettingsPageHeader
-          title={t('Client Keys')}
-          action={
-            access.has('project:write') ? (
-              <Button
-                onClick={this.handleCreateKey}
-                size="small"
-                priority="primary"
-                icon="icon-circle-add"
-              >
-                {t('Generate New Key')}
-              </Button>
-            ) : null
-          }
-        />
-        <TextBlock>
-          {tct(
-            `To send data to Sentry you will need to configure an SDK with a client key
-          (usually referred to as the [code:SENTRY_DSN] value). For more
-          information on integrating Sentry with your application take a look at our
-          [link:documentation].`,
-            {
-              link: <ExternalLink href="https://docs.sentry.io/" />,
-              code: <code />,
-            }
-          )}
-        </TextBlock>
-
-        {isEmpty ? this.renderEmpty() : this.renderResults()}
-      </div>
-    );
-  }
-}
-
-const ClientKeyItemPanel = styled(({disabled: _disabled, ...props}) => (
-  <Panel {...props} />
-))`
-  ${p => (p.disabled ? 'opacity: 0.5;' : '')};
-
-  .box-clippable {
-    padding: 0;
-    margin: 0;
-
-    .clip-fade {
-      padding-bottom: 20px;
-    }
-  }
-`;
-
-const PanelHeaderLink = styled(Link)`
-  color: ${p => p.theme.gray3};
-`;
-
-const KeyControl = styled('span')`
-  margin-left: 6px;
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
new file mode 100644
index 0000000000..3b4b4f22c1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/index.tsx
@@ -0,0 +1,215 @@
+import {
+  addLoadingMessage,
+  addErrorMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {Organization, Project} from 'app/types';
+import {Panel} from 'app/components/panels';
+import {ProjectKey} from 'app/views/settings/project/projectKeys/types';
+
+import {t, tct} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import ExternalLink from 'app/components/links/externalLink';
+import Pagination from 'app/components/pagination';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import routeTitleGen from 'app/utils/routeTitle';
+import withOrganization from 'app/utils/withOrganization';
+import withProject from 'app/utils/withProject';
+
+import KeyRow from './keyRow';
+
+type Props = {
+  organization: Organization;
+  project: Project;
+} & RouteComponentProps<{orgId: string; projectId: string}, {}> &
+  AsyncView['props'];
+
+type State = {
+  keyList: ProjectKey[];
+} & AsyncView['state'];
+
+class ProjectKeys extends AsyncView<Props, State> {
+  getTitle() {
+    const {projectId} = this.props.params;
+    return routeTitleGen(t('Client Keys'), projectId, false);
+  }
+
+  getEndpoints(): [string, string][] {
+    const {orgId, projectId} = this.props.params;
+    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];
+  }
+
+  /**
+   * Optimistically remove key
+   */
+  handleRemoveKey = async (data: ProjectKey) => {
+    const oldKeyList = [...this.state.keyList];
+
+    addLoadingMessage(t('Revoking key..'));
+
+    this.setState(state => {
+      return {
+        keyList: state.keyList.filter(key => {
+          return key.id !== data.id;
+        }),
+      };
+    });
+
+    const {orgId, projectId} = this.props.params;
+
+    try {
+      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+        method: 'DELETE',
+      });
+      addSuccessMessage(t('Revoked key'));
+    } catch (_err) {
+      this.setState({
+        keyList: oldKeyList,
+      });
+      addErrorMessage(t('Unable to revoke key'));
+    }
+  };
+
+  handleToggleKey = async (isActive: boolean, data: ProjectKey) => {
+    const oldKeyList = [...this.state.keyList];
+
+    addLoadingMessage(t('Saving changes..'));
+
+    this.setState(state => {
+      const keyList = state.keyList.map(key => {
+        if (key.id === data.id) {
+          return {
+            ...key,
+            isActive: !data.isActive,
+          };
+        }
+
+        return key;
+      });
+      return {keyList};
+    });
+
+    const {orgId, projectId} = this.props.params;
+
+    try {
+      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+        method: 'PUT',
+        data: {isActive},
+      });
+      addSuccessMessage(isActive ? t('Enabled key') : t('Disabled key'));
+    } catch (_err) {
+      addErrorMessage(isActive ? t('Error enabling key') : t('Error disabling key'));
+      this.setState({keyList: oldKeyList});
+    }
+  };
+
+  handleCreateKey = async () => {
+    const {orgId, projectId} = this.props.params;
+
+    try {
+      const data: ProjectKey = await this.api.requestPromise(
+        `/projects/${orgId}/${projectId}/keys/`,
+        {
+          method: 'POST',
+        }
+      );
+
+      this.setState(state => {
+        return {
+          keyList: [...state.keyList, data],
+        };
+      });
+      addSuccessMessage(t('Created a new key.'));
+    } catch (_err) {
+      addErrorMessage(t('Unable to create new key. Please try again.'));
+    }
+  };
+
+  renderEmpty() {
+    return (
+      <Panel>
+        <EmptyMessage
+          icon="icon-circle-exclamation"
+          description={t('There are no keys active for this project.')}
+        />
+      </Panel>
+    );
+  }
+
+  renderResults() {
+    const {location, organization, routes, params} = this.props;
+    const {orgId, projectId} = params;
+    const access = new Set(organization.access);
+
+    return (
+      <React.Fragment>
+        {this.state.keyList.map(key => {
+          return (
+            <KeyRow
+              api={this.api}
+              access={access}
+              key={key.id}
+              orgId={orgId}
+              projectId={`${projectId}`}
+              data={key}
+              onToggle={this.handleToggleKey}
+              onRemove={this.handleRemoveKey}
+              routes={routes}
+              location={location}
+              params={params}
+            />
+          );
+        })}
+        <Pagination pageLinks={this.state.keyListPageLinks} />
+      </React.Fragment>
+    );
+  }
+
+  renderBody() {
+    const access = new Set(this.props.organization.access);
+    const isEmpty = !this.state.keyList.length;
+
+    return (
+      <div data-test-id="project-keys">
+        <SettingsPageHeader
+          title={t('Client Keys')}
+          action={
+            access.has('project:write') ? (
+              <Button
+                onClick={this.handleCreateKey}
+                size="small"
+                priority="primary"
+                icon="icon-circle-add"
+              >
+                {t('Generate New Key')}
+              </Button>
+            ) : null
+          }
+        />
+        <TextBlock>
+          {tct(
+            `To send data to Sentry you will need to configure an SDK with a client key
+          (usually referred to as the [code:SENTRY_DSN] value). For more
+          information on integrating Sentry with your application take a look at our
+          [link:documentation].`,
+            {
+              link: <ExternalLink href="https://docs.sentry.io/" />,
+              code: <code />,
+            }
+          )}
+        </TextBlock>
+
+        {isEmpty ? this.renderEmpty() : this.renderResults()}
+      </div>
+    );
+  }
+}
+
+export default withOrganization(withProject(ProjectKeys));
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx
new file mode 100644
index 0000000000..46ea4003d1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/list/keyRow.tsx
@@ -0,0 +1,135 @@
+import {Link} from 'react-router';
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Client} from 'app/api';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {ProjectKey} from 'app/views/settings/project/projectKeys/types';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import ClippedBox from 'app/components/clippedBox';
+import Confirm from 'app/components/confirm';
+import ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';
+import recreateRoute from 'app/utils/recreateRoute';
+import space from 'app/styles/space';
+
+type Props = {
+  api: Client;
+  orgId: string;
+  projectId: string;
+  data: ProjectKey;
+  access: Set<string>;
+  onToggle: (isActive: boolean, data: ProjectKey) => void;
+  onRemove: (data: ProjectKey) => void;
+} & Pick<RouteComponentProps<{}, {}>, 'routes' | 'location' | 'params'>;
+
+class KeyRow extends React.Component<Props> {
+  handleRemove = () => {
+    const {data, onRemove} = this.props;
+    onRemove(data);
+  };
+
+  handleEnable = () => {
+    const {onToggle, data} = this.props;
+    onToggle(true, data);
+  };
+
+  handleDisable = () => {
+    const {onToggle, data} = this.props;
+    onToggle(false, data);
+  };
+
+  render() {
+    const {access, data, routes, location, params} = this.props;
+    const editUrl = recreateRoute(`${data.id}/`, {routes, params, location});
+    const controlActive = access.has('project:write');
+
+    const controls = [
+      <Button key="edit" to={editUrl} size="small">
+        {t('Configure')}
+      </Button>,
+      <Button
+        key="toggle"
+        size="small"
+        onClick={data.isActive ? this.handleDisable : this.handleEnable}
+        disabled={!controlActive}
+      >
+        {data.isActive ? t('Disable') : t('Enable')}
+      </Button>,
+      <Confirm
+        key="remove"
+        priority="danger"
+        disabled={!controlActive}
+        onConfirm={this.handleRemove}
+        confirmText={t('Remove Key')}
+        message={t(
+          'Are you sure you want to remove this key? This action is irreversible.'
+        )}
+      >
+        <Button size="small" disabled={!controlActive} icon="icon-trash" />
+      </Confirm>,
+    ];
+
+    return (
+      <ClientKeyItemPanel>
+        <PanelHeader hasButtons>
+          <Title disabled={!data.isActive}>
+            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>
+            {!data.isActive && (
+              <small>
+                {' \u2014  '}
+                {t('Disabled')}
+              </small>
+            )}
+          </Title>
+          <Controls>
+            {controls.map((c, n) => (
+              <span key={n}> {c}</span>
+            ))}
+          </Controls>
+        </PanelHeader>
+
+        <ClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>
+          <StyledPanelBody disabled={!data.isActive}>
+            <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />
+          </StyledPanelBody>
+        </ClippedBox>
+      </ClientKeyItemPanel>
+    );
+  }
+}
+
+export default KeyRow;
+
+const ClientKeyItemPanel = styled(Panel)`
+  .box-clippable {
+    padding: 0;
+    margin: 0;
+
+    .clip-fade {
+      padding-bottom: 20px;
+    }
+  }
+`;
+
+const PanelHeaderLink = styled(Link)`
+  color: ${p => p.theme.gray3};
+`;
+
+const Title = styled('div')<{disabled: boolean}>`
+  flex: 1;
+  ${p => (p.disabled ? 'opacity: 0.5;' : '')};
+  margin-right: ${space(1)};
+`;
+
+const Controls = styled('div')`
+  display: grid;
+  align-items: center;
+  grid-gap: ${space(1)};
+  grid-auto-flow: column;
+`;
+
+const StyledPanelBody = styled(PanelBody)<{disabled: boolean}>`
+  ${p => (p.disabled ? 'opacity: 0.5;' : '')};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
rename to src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx
index 0ee5be5ed2..483fe2501c 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.tsx
@@ -1,38 +1,30 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
+import {ProjectKey} from 'app/views/settings/project/projectKeys/types';
 import {t, tct} from 'app/locale';
 import ExternalLink from 'app/components/links/externalLink';
 import Field from 'app/views/settings/components/forms/field';
 import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
-import SentryTypes from 'app/sentryTypes';
 import getDynamicText from 'app/utils/getDynamicText';
 
-class ProjectKeyCredentials extends React.Component {
-  static propTypes = {
-    projectId: PropTypes.string.isRequired,
-    data: SentryTypes.ProjectKey,
+const DEFAULT_PROPS = {
+  showDsn: true,
+  showDsnPublic: true,
+  showSecurityEndpoint: true,
+  showMinidump: true,
+  showUnreal: true,
+  showPublicKey: false,
+  showSecretKey: false,
+  showProjectId: false,
+};
 
-    showDsn: PropTypes.bool,
-    showDsnPublic: PropTypes.bool,
-    showSecurityEndpoint: PropTypes.bool,
-    showMinidump: PropTypes.bool,
-    showUnreal: PropTypes.bool,
-    showPublicKey: PropTypes.bool,
-    showSecretKey: PropTypes.bool,
-    showProjectId: PropTypes.bool,
-  };
+type Props = {
+  projectId: string;
+  data: ProjectKey;
+} & Partial<typeof DEFAULT_PROPS>;
 
-  static defaultProps = {
-    showDsn: true,
-    showDsnPublic: true,
-    showSecurityEndpoint: true,
-    showMinidump: true,
-    showUnreal: true,
-    showPublicKey: false,
-    showSecretKey: false,
-    showProjectId: false,
-  };
+class ProjectKeyCredentials extends React.Component<Props> {
+  static defaultProps = DEFAULT_PROPS;
 
   render() {
     const {
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
deleted file mode 100644
index 3b601a9e72..0000000000
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ /dev/null
@@ -1,516 +0,0 @@
-import {Box, Flex} from 'grid-emotion';
-import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
-import {
-  addErrorMessage,
-  addLoadingMessage,
-  addSuccessMessage,
-  removeIndicator,
-} from 'app/actionCreators/indicator';
-import {t, tct} from 'app/locale';
-import Access from 'app/components/acl/access';
-import AsyncView from 'app/views/asyncView';
-import BooleanField from 'app/views/settings/components/forms/booleanField';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import DateTime from 'app/components/dateTime';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import ExternalLink from 'app/components/links/externalLink';
-import Feature from 'app/components/acl/feature';
-import FeatureDisabled from 'app/components/acl/featureDisabled';
-import Field from 'app/views/settings/components/forms/field';
-import Form from 'app/views/settings/components/forms/form';
-import FormField from 'app/views/settings/components/forms/formField';
-import InputControl from 'app/views/settings/components/forms/controls/input';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import PermissionAlert from 'app/views/settings/project/permissionAlert';
-import ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';
-import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
-import SelectField from 'app/views/settings/components/forms/selectField';
-import SentryTypes from 'app/sentryTypes';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import StackedBarChart from 'app/components/stackedBarChart';
-import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
-import TextField from 'app/views/settings/components/forms/textField';
-import getDynamicText from 'app/utils/getDynamicText';
-
-const RATE_LIMIT_FORMAT_MAP = new Map([
-  [0, 'None'],
-  [60, '1 minute'],
-  [300, '5 minutes'],
-  [900, '15 minutes'],
-  [3600, '1 hour'],
-  [7200, '2 hours'],
-  [14400, '4 hours'],
-  [21600, '6 hours'],
-  [43200, '12 hours'],
-  [86400, '24 hours'],
-]);
-
-const formatRateLimitWindow = val => RATE_LIMIT_FORMAT_MAP.get(val);
-
-class KeyStats extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-  };
-
-  constructor(props) {
-    super(props);
-    const until = Math.floor(new Date().getTime() / 1000);
-    const since = until - 3600 * 24 * 30;
-
-    this.state = {
-      since,
-      until,
-      loading: true,
-      error: false,
-      stats: null,
-      emptyStats: false,
-    };
-  }
-
-  componentWillMount() {
-    this.fetchData();
-  }
-
-  fetchData = () => {
-    const {keyId, orgId, projectId} = this.props.params;
-    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/stats/`, {
-      query: {
-        since: this.state.since,
-        until: this.state.until,
-        resolution: '1d',
-      },
-      success: data => {
-        let emptyStats = true;
-        const stats = data.map(p => {
-          if (p.total) {
-            emptyStats = false;
-          }
-          return {
-            x: p.ts,
-            y: [p.accepted, p.dropped],
-          };
-        });
-        this.setState({
-          stats,
-          emptyStats,
-          error: false,
-          loading: false,
-        });
-      },
-      error: () => {
-        this.setState({error: true, loading: false});
-      },
-    });
-  };
-
-  renderTooltip = (point, _pointIdx, chart) => {
-    const timeLabel = chart.getTimeLabel(point);
-    const [accepted, dropped, filtered] = point.y;
-
-    return (
-      <div style={{width: '150px'}}>
-        <div className="time-label">{timeLabel}</div>
-        <div className="value-label">
-          {accepted.toLocaleString()} accepted
-          {dropped > 0 && (
-            <React.Fragment>
-              <br />
-              {dropped.toLocaleString()} rate limited
-            </React.Fragment>
-          )}
-          {filtered > 0 && (
-            <React.Fragment>
-              <br />
-              {filtered.toLocaleString()} filtered
-            </React.Fragment>
-          )}
-        </div>
-      </div>
-    );
-  };
-
-  render() {
-    if (this.state.loading) {
-      return (
-        <div className="box">
-          <LoadingIndicator />
-        </div>
-      );
-    } else if (this.state.error) {
-      return <LoadingError onRetry={this.fetchData} />;
-    }
-
-    return (
-      <Panel>
-        <PanelHeader>{t('Key usage in the last 30 days (by day)')}</PanelHeader>
-        <PanelBody>
-          {!this.state.emptyStats ? (
-            <StackedBarChart
-              points={this.state.stats}
-              height={150}
-              label="events"
-              barClasses={['accepted', 'rate-limited']}
-              minHeights={[1, 0]}
-              className="standard-barchart"
-              style={{border: 'none'}}
-              tooltip={this.renderTooltip}
-            />
-          ) : (
-            <EmptyMessage
-              title={t('Nothing recorded in the last 30 days.')}
-              description={t('Total events captured using these credentials.')}
-            />
-          )}
-        </PanelBody>
-      </Panel>
-    );
-  }
-}
-
-class KeyRateLimitsForm extends React.Component {
-  static propTypes = {
-    data: SentryTypes.ProjectKey.isRequired,
-    disabled: PropTypes.bool,
-  };
-
-  handleChangeWindow = (onChange, onBlur, currentValueObj, value, e) => {
-    const valueObj = {
-      ...currentValueObj,
-      window: value,
-    };
-    onChange(valueObj, e);
-    onBlur(valueObj, e);
-  };
-
-  handleChangeCount = (cb, value, e) => {
-    const valueObj = {
-      ...value,
-      count: e.target.value,
-    };
-
-    cb(valueObj, e);
-  };
-
-  render() {
-    const {data, disabled} = this.props;
-    const {keyId, orgId, projectId} = this.props.params;
-    const apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
-
-    const disabledAlert = ({features}) => (
-      <FeatureDisabled
-        alert={PanelAlert}
-        features={features}
-        featureName={t('Key Rate Limits')}
-      />
-    );
-
-    return (
-      <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
-        <Feature
-          features={['projects:rate-limits']}
-          hookName="feature-disabled:rate-limits"
-          renderDisabled={({children, ...props}) =>
-            children({...props, renderDisabled: disabledAlert})
-          }
-        >
-          {({hasFeature, features, organization, project, renderDisabled}) => (
-            <Panel>
-              <PanelHeader>{t('Rate Limits')}</PanelHeader>
-
-              <PanelBody>
-                <PanelAlert type="info" icon="icon-circle-exclamation">
-                  {t(
-                    `Rate limits provide a flexible way to manage your event
-                      volume. If you have a noisy project or environment you
-                      can configure a rate limit for this key to reduce the
-                      number of events processed.`
-                  )}
-                </PanelAlert>
-                {!hasFeature && renderDisabled({organization, project, features})}
-                <FormField
-                  className="rate-limit-group"
-                  name="rateLimit"
-                  label={t('Rate Limit')}
-                  disabled={disabled || !hasFeature}
-                  validate={({form}) => {
-                    const isValid =
-                      form &&
-                      form.rateLimit &&
-                      typeof form.rateLimit.count !== 'undefined' &&
-                      typeof form.rateLimit.window !== 'undefined';
-
-                    if (isValid) {
-                      return [];
-                    }
-
-                    return [['rateLimit', t('Fill in both fields first')]];
-                  }}
-                  help={t(
-                    'Apply a rate limit to this credential to cap the amount of events accepted during a time window.'
-                  )}
-                  inline={false}
-                >
-                  {({onChange, onBlur, value}) => (
-                    <Flex>
-                      <Flex flex="2" align="center">
-                        <InputControl
-                          type="number"
-                          name="rateLimit.count"
-                          min={0}
-                          value={value && value.count}
-                          placeholder={t('Count')}
-                          disabled={disabled || !hasFeature}
-                          onChange={this.handleChangeCount.bind(this, onChange, value)}
-                          onBlur={this.handleChangeCount.bind(this, onBlur, value)}
-                        />
-                      </Flex>
-                      <Flex justify="center" align="center" mx={10} flex="1">
-                        <small css={{whiteSpace: 'nowrap'}}>event(s) in</small>
-                      </Flex>
-                      <Box flex="2">
-                        <RangeSlider
-                          name="rateLimit.window"
-                          allowedValues={Array.from(RATE_LIMIT_FORMAT_MAP.keys())}
-                          value={value && value.window}
-                          placeholder={t('Window')}
-                          formatLabel={formatRateLimitWindow}
-                          disabled={disabled || !hasFeature}
-                          onChange={this.handleChangeWindow.bind(
-                            this,
-                            onChange,
-                            onBlur,
-                            value
-                          )}
-                        />
-                      </Box>
-                    </Flex>
-                  )}
-                </FormField>
-              </PanelBody>
-            </Panel>
-          )}
-        </Feature>
-      </Form>
-    );
-  }
-}
-
-class KeySettings extends React.Component {
-  static propTypes = {
-    api: PropTypes.object.isRequired,
-    data: SentryTypes.ProjectKey.isRequired,
-    onRemove: PropTypes.func.isRequired,
-  };
-
-  state = {
-    loading: false,
-  };
-
-  handleRemove = () => {
-    if (this.state.loading) {
-      return;
-    }
-
-    const loadingIndicator = addLoadingMessage(t('Saving changes..'));
-    const {keyId, orgId, projectId} = this.props.params;
-    this.props.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
-      method: 'DELETE',
-      success: () => {
-        this.props.onRemove();
-        removeIndicator(loadingIndicator);
-        addSuccessMessage(t('Revoked key'));
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        removeIndicator(loadingIndicator);
-        addErrorMessage(t('Unable to revoke key'));
-      },
-    });
-  };
-
-  render() {
-    const {keyId, orgId, projectId} = this.props.params;
-    const {data} = this.props;
-    const apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
-    const loaderLink = getDynamicText({
-      value: data.dsn.cdn,
-      fixed: '__JS_SDK_LOADER_URL__',
-    });
-
-    return (
-      <Access access={['project:write']}>
-        {({hasAccess}) => (
-          <React.Fragment>
-            <Form
-              saveOnBlur
-              allowUndo
-              apiEndpoint={apiEndpoint}
-              apiMethod="PUT"
-              initialData={data}
-            >
-              <Panel>
-                <PanelHeader>{t('Details')}</PanelHeader>
-
-                <PanelBody>
-                  <TextField
-                    name="name"
-                    label={t('Name')}
-                    disabled={!hasAccess}
-                    required={false}
-                    maxLength={64}
-                  />
-                  <BooleanField
-                    name="isActive"
-                    label={t('Enabled')}
-                    required={false}
-                    disabled={!hasAccess}
-                    help="Accept events from this key? This may be used to temporarily suspend a key."
-                  />
-                  <Field label={t('Created')}>
-                    <div className="controls">
-                      <DateTime date={data.dateCreated} />
-                    </div>
-                  </Field>
-                </PanelBody>
-              </Panel>
-            </Form>
-
-            <KeyRateLimitsForm
-              params={this.props.params}
-              data={data}
-              disabled={!hasAccess}
-            />
-
-            <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
-              <Panel>
-                <PanelHeader>{t('JavaScript Loader')}</PanelHeader>
-                <PanelBody>
-                  <Field
-                    help={tct(
-                      'Copy this script into your website to setup our JavaScript SDK without any additional configuration. [link]',
-                      {
-                        link: (
-                          <ExternalLink href="https://docs.sentry.io/platforms/javascript/browser/">
-                            What does the script provide?
-                          </ExternalLink>
-                        ),
-                      }
-                    )}
-                    inline={false}
-                    flexibleControlStateSize
-                  >
-                    <TextCopyInput>
-                      {`<script src='${loaderLink}' crossorigin="anonymous"></script>`}
-                    </TextCopyInput>
-                  </Field>
-                  <SelectField
-                    name="browserSdkVersion"
-                    choices={data.browserSdk ? data.browserSdk.choices : []}
-                    placeholder={t('4.x')}
-                    allowClear={false}
-                    enabled={!hasAccess}
-                    help={t(
-                      'Select the version of the SDK that should be loaded. Note that it can take a few minutes until this change is live.'
-                    )}
-                  />
-                </PanelBody>
-              </Panel>
-            </Form>
-
-            <Panel>
-              <PanelHeader>{t('Credentials')}</PanelHeader>
-              <PanelBody>
-                <PanelAlert type="info" icon="icon-circle-exclamation">
-                  {t(
-                    'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
-                  )}
-                </PanelAlert>
-
-                <ProjectKeyCredentials
-                  projectId={`${data.projectId}`}
-                  data={data}
-                  showPublicKey
-                  showSecretKey
-                  showProjectId
-                />
-              </PanelBody>
-            </Panel>
-
-            <Access access={['project:admin']}>
-              <Panel>
-                <PanelHeader>{t('Revoke Key')}</PanelHeader>
-                <PanelBody>
-                  <Field
-                    label={t('Revoke Key')}
-                    help={t(
-                      'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
-                    )}
-                  >
-                    <div>
-                      <Confirm
-                        priority="danger"
-                        message={t(
-                          'Are you sure you want to revoke this key? This will immediately remove and suspend the credentials.'
-                        )}
-                        onConfirm={this.handleRemove}
-                        confirmText={t('Revoke Key')}
-                      >
-                        <Button priority="danger">{t('Revoke Key')}</Button>
-                      </Confirm>
-                    </div>
-                  </Field>
-                </PanelBody>
-              </Panel>
-            </Access>
-          </React.Fragment>
-        )}
-      </Access>
-    );
-  }
-}
-
-export default class ProjectKeyDetails extends AsyncView {
-  getTitle() {
-    return t('Key Details');
-  }
-
-  getEndpoints() {
-    const {keyId, orgId, projectId} = this.props.params;
-    return [['data', `/projects/${orgId}/${projectId}/keys/${keyId}/`]];
-  }
-
-  handleRemove = () => {
-    const {orgId, projectId} = this.props.params;
-    browserHistory.push(`/${orgId}/${projectId}/settings/keys/`);
-  };
-
-  renderBody() {
-    const {data} = this.state;
-    const {params} = this.props;
-
-    return (
-      <div className="ref-key-details">
-        <SettingsPageHeader title={t('Key Details')} />
-        <PermissionAlert />
-
-        <KeyStats api={this.api} params={params} />
-
-        <KeySettings
-          api={this.api}
-          params={params}
-          data={data}
-          onRemove={this.handleRemove}
-        />
-      </div>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/types.tsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/types.tsx
new file mode 100644
index 0000000000..4cfb86e63a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/types.tsx
@@ -0,0 +1,24 @@
+export type ProjectKey = {
+  dateCreated: string;
+  id: string;
+  browserSdk: {
+    choices: [string, string][];
+  };
+  name: string;
+  projectId: number;
+  rateLimit: number | null;
+  label: string;
+  dsn: {
+    cdn: string;
+    minidump: string;
+    csp: string;
+    secret: string;
+    unreal: string;
+    security: string;
+    public: string;
+  };
+  browserSdkVersion: ProjectKey['browserSdk']['choices'][number][0];
+  secret: string;
+  isActive: boolean;
+  public: string;
+};
diff --git a/tests/acceptance/test_project_keys.py b/tests/acceptance/test_project_keys.py
index 79379ce051..eb3b4bc71b 100644
--- a/tests/acceptance/test_project_keys.py
+++ b/tests/acceptance/test_project_keys.py
@@ -30,8 +30,8 @@ class ProjectKeysTest(AcceptanceTestCase):
     def test_simple(self):
         self.browser.get(self.path)
         self.browser.wait_until_not(".loading-indicator")
+        self.browser.wait_until_test_id("project-keys")
         self.browser.snapshot("project keys")
-        self.browser.wait_until(".ref-keys")
 
 
 class ProjectKeyDetailsTest(AcceptanceTestCase):
@@ -59,5 +59,5 @@ class ProjectKeyDetailsTest(AcceptanceTestCase):
     def test_simple(self):
         self.browser.get(self.path)
         self.browser.wait_until_not(".loading-indicator")
+        self.browser.wait_until_test_id("key-details")
         self.browser.snapshot("project key details")
-        self.browser.wait_until(".ref-key-details")
diff --git a/tests/js/spec/views/projectKeyDetails.spec.jsx b/tests/js/spec/views/settings/projectKeys/details/index.spec.jsx
similarity index 97%
rename from tests/js/spec/views/projectKeyDetails.spec.jsx
rename to tests/js/spec/views/settings/projectKeys/details/index.spec.jsx
index 78df248938..4bdf85ceb0 100644
--- a/tests/js/spec/views/projectKeyDetails.spec.jsx
+++ b/tests/js/spec/views/settings/projectKeys/details/index.spec.jsx
@@ -1,13 +1,8 @@
-import {mountWithTheme} from 'sentry-test/enzyme';
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import ProjectKeyDetails from 'app/views/settings/project/projectKeys/projectKeyDetails';
-
-jest.mock('react-router', () => ({
-  withRouter: i => i,
-  browserHistory: {push: jest.fn()},
-}));
+import {mountWithTheme} from 'sentry-test/enzyme';
+import ProjectKeyDetails from 'app/views/settings/project/projectKeys/details';
 
 describe('ProjectKeyDetails', function() {
   let org;
diff --git a/tests/js/spec/views/projectKeys.spec.jsx b/tests/js/spec/views/settings/projectKeys/list/index.spec.jsx
similarity index 97%
rename from tests/js/spec/views/projectKeys.spec.jsx
rename to tests/js/spec/views/settings/projectKeys/list/index.spec.jsx
index 2c566101a1..638906e77b 100644
--- a/tests/js/spec/views/projectKeys.spec.jsx
+++ b/tests/js/spec/views/settings/projectKeys/list/index.spec.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
-import ProjectKeys from 'app/views/settings/project/projectKeys';
+import ProjectKeys from 'app/views/settings/project/projectKeys/list';
 
 describe('ProjectKeys', function() {
   let org, project, wrapper;
