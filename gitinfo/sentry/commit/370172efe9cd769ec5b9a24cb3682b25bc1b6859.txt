commit 370172efe9cd769ec5b9a24cb3682b25bc1b6859
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Nov 4 11:35:50 2019 -0700

    ref(ui): Refactor `ApiApplications` (#15404)
    
    * Refactor to typescript
    * Remove `grid-emotion`
    * Visual design consistency cleanups
    * Use async/await for API calls

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f81a00d729..553f1eda64 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -182,7 +182,7 @@ function routes() {
             path=":appId/"
             name="Details"
             componentPromise={() =>
-              import(/* webpackChunkName: "ApiApplicationDetails" */ 'app/views/settings/account/apiApplicationDetails')
+              import(/* webpackChunkName: "ApiApplicationDetails" */ 'app/views/settings/account/apiApplications/details')
             }
             component={errorHandler(LazyLoad)}
           />
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 809319f08b..019e9eae55 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -549,6 +549,18 @@ export type InternalAppApiToken = BaseApiToken & {
   refreshToken: string;
 };
 
+export type ApiApplication = {
+  allowedOrigins: string[];
+  clientID: string;
+  clientSecret: string | null;
+  homepageUrl: string | null;
+  id: string;
+  name: string;
+  privacyUrl: string | null;
+  redirectUris: string[];
+  termsUrl: string | null;
+};
+
 export type UserReport = {
   id: string;
   eventID: string;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
deleted file mode 100644
index dcd7a4da08..0000000000
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplicationDetails.jsx
+++ /dev/null
@@ -1,115 +0,0 @@
-import {Box} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import ConfigStore from 'app/stores/configStore';
-import Form from 'app/views/settings/components/forms/form';
-import FormField from 'app/views/settings/components/forms/formField';
-import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
-import apiApplication from 'app/data/forms/apiApplication';
-import getDynamicText from 'app/utils/getDynamicText';
-
-class ApiApplicationDetails extends AsyncView {
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-  };
-
-  getDefaultState() {
-    return {
-      loading: true,
-      error: false,
-      app: null,
-      errors: {},
-    };
-  }
-
-  getEndpoints() {
-    return [['app', `/api-applications/${this.props.params.appId}/`]];
-  }
-
-  getTitle() {
-    return 'Application Details';
-  }
-
-  renderBody() {
-    const urlPrefix = ConfigStore.get('urlPrefix');
-
-    return (
-      <div>
-        <SettingsPageHeader title={this.getTitle()} />
-
-        <Form
-          apiMethod="PUT"
-          apiEndpoint={`/api-applications/${this.props.params.appId}/`}
-          saveOnBlur
-          allowUndo
-          initialData={this.state.app}
-          onSubmitError={err => addErrorMessage('Unable to save change')}
-        >
-          <Box>
-            <JsonForm location={this.props.location} forms={apiApplication} />
-
-            <Panel>
-              <PanelHeader>{t('Credentials')}</PanelHeader>
-
-              <PanelBody>
-                <FormField name="clientID" label="Client ID" overflow>
-                  {({value}) => {
-                    return (
-                      <div>
-                        <TextCopyInput>
-                          {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
-                        </TextCopyInput>
-                      </div>
-                    );
-                  }}
-                </FormField>
-
-                <FormField
-                  overflow
-                  name="clientSecret"
-                  label="Client Secret"
-                  help={t(`Your secret is only available briefly after application creation. Make
-                  sure to save this value!`)}
-                >
-                  {({value}) => {
-                    return value ? (
-                      <TextCopyInput>
-                        {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
-                      </TextCopyInput>
-                    ) : (
-                      <em>hidden</em>
-                    );
-                  }}
-                </FormField>
-
-                <FormField name="" label="Authorization URL">
-                  {({value}) => {
-                    return (
-                      <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>
-                    );
-                  }}
-                </FormField>
-
-                <FormField name="" label="Token URL">
-                  {() => {
-                    const value = `${urlPrefix}/oauth/token/`;
-                    return <TextCopyInput>{value}</TextCopyInput>;
-                  }}
-                </FormField>
-              </PanelBody>
-            </Panel>
-          </Box>
-        </Form>
-      </div>
-    );
-  }
-}
-
-export default ApiApplicationDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
deleted file mode 100644
index 49386ad10f..0000000000
--- a/src/sentry/static/sentry/app/views/settings/account/apiApplications.jsx
+++ /dev/null
@@ -1,197 +0,0 @@
-import {Box, Flex} from 'grid-emotion';
-import {Link} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
-import {
-  addErrorMessage,
-  addLoadingMessage,
-  addSuccessMessage,
-  removeIndicator,
-} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/button';
-import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import IndicatorStore from 'app/stores/indicatorStore';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import getDynamicText from 'app/utils/getDynamicText';
-
-const ROUTE_PREFIX = '/settings/account/api/';
-
-const ApiApplicationRow = createReactClass({
-  displayName: 'ApiApplicationRow',
-
-  propTypes: {
-    api: PropTypes.object,
-    app: PropTypes.object.isRequired,
-    onRemove: PropTypes.func.isRequired,
-  },
-
-  getInitialState() {
-    return {
-      loading: false,
-    };
-  },
-
-  handleRemove() {
-    if (this.state.loading) {
-      return;
-    }
-
-    const app = this.props.app;
-
-    this.setState(
-      {
-        loading: true,
-      },
-      () => {
-        const loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        this.props.api.request(`/api-applications/${app.id}/`, {
-          method: 'DELETE',
-          success: data => {
-            IndicatorStore.remove(loadingIndicator);
-            this.props.onRemove(app);
-          },
-          error: () => {
-            IndicatorStore.remove(loadingIndicator);
-            IndicatorStore.add(
-              t('Unable to remove application. Please try again.'),
-              'error',
-              {
-                duration: 3000,
-              }
-            );
-          },
-        });
-      }
-    );
-  },
-
-  render() {
-    const app = this.props.app;
-
-    let btnClassName = 'btn btn-default';
-    if (this.state.loading) {
-      btnClassName += ' disabled';
-    }
-
-    return (
-      <PanelItem justify="space-between" px={2} py={2}>
-        <Box flex="1">
-          <h4 style={{marginBottom: 5}}>
-            <Link to={`${ROUTE_PREFIX}applications/${app.id}/`}>
-              {getDynamicText({value: app.name, fixed: 'PERCY_APPLICATION_NAME'})}
-            </Link>
-          </h4>
-          <small style={{color: '#999'}}>
-            {getDynamicText({value: app.clientID, fixed: 'PERCY_CLIENT_ID'})}
-          </small>
-        </Box>
-
-        <Flex align="center">
-          <Box pl={2}>
-            <a
-              aria-label="Remove"
-              onClick={this.handleRemove}
-              className={btnClassName}
-              disabled={this.state.loading}
-            >
-              <span className="icon icon-trash" />
-            </a>
-          </Box>
-        </Flex>
-      </PanelItem>
-    );
-  },
-});
-
-class ApiApplications extends AsyncView {
-  static contextTypes = {
-    router: PropTypes.object.isRequired,
-  };
-
-  getEndpoints() {
-    return [['appList', '/api-applications/']];
-  }
-
-  getTitle() {
-    return 'API Applications';
-  }
-
-  handleCreateApplication = () => {
-    const indicator = addLoadingMessage();
-    this.api.request('/api-applications/', {
-      method: 'POST',
-      success: app => {
-        addSuccessMessage(t('Created a new API Application'));
-        removeIndicator(indicator);
-        this.context.router.push(`${ROUTE_PREFIX}applications/${app.id}/`);
-      },
-      error: error => {
-        removeIndicator(indicator);
-        addErrorMessage(t('Unable to remove application. Please try again.'));
-      },
-    });
-  };
-
-  handleRemoveApplication = app => {
-    this.setState({
-      appList: this.state.appList.filter(a => a.id !== app.id),
-    });
-  };
-
-  renderBody() {
-    const action = (
-      <Button
-        priority="primary"
-        size="small"
-        onClick={this.handleCreateApplication}
-        icon="icon-circle-add"
-      >
-        {t('Create New Application')}
-      </Button>
-    );
-
-    const isEmpty = this.state.appList.length === 0;
-
-    return (
-      <div>
-        <SettingsPageHeader title="API Applications" action={action} />
-
-        <Panel>
-          <PanelHeader disablePadding>
-            <Flex align="center">
-              <Box px={2} flex="1">
-                {t('Application Name')}
-              </Box>
-            </Flex>
-          </PanelHeader>
-
-          <PanelBody>
-            {!isEmpty ? (
-              this.state.appList.map(app => {
-                return (
-                  <ApiApplicationRow
-                    api={this.api}
-                    key={app.id}
-                    app={app}
-                    onRemove={this.handleRemoveApplication}
-                  />
-                );
-              })
-            ) : (
-              <EmptyMessage>
-                {t("You haven't created any applications yet.")}
-              </EmptyMessage>
-            )}
-          </PanelBody>
-        </Panel>
-      </div>
-    );
-  }
-}
-
-export default ApiApplications;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
new file mode 100644
index 0000000000..0eb5f55d77
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/details.tsx
@@ -0,0 +1,98 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {ApiApplication} from 'app/types';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import ConfigStore from 'app/stores/configStore';
+import Form from 'app/views/settings/components/forms/form';
+import FormField from 'app/views/settings/components/forms/formField';
+import JsonForm from 'app/views/settings/components/forms/jsonForm';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import TextCopyInput from 'app/views/settings/components/forms/textCopyInput';
+import apiApplication from 'app/data/forms/apiApplication';
+import getDynamicText from 'app/utils/getDynamicText';
+
+type Props = RouteComponentProps<{}, {}> & AsyncView['props'];
+type State = {
+  app: ApiApplication;
+} & AsyncView['state'];
+
+class ApiApplicationsDetails extends AsyncView<Props, State> {
+  getEndpoints(): [string, string][] {
+    return [['app', `/api-applications/${this.props.params.appId}/`]];
+  }
+
+  getTitle() {
+    return t('Application Details');
+  }
+
+  renderBody() {
+    const urlPrefix = ConfigStore.get('urlPrefix');
+
+    return (
+      <div>
+        <SettingsPageHeader title={this.getTitle()} />
+
+        <Form
+          apiMethod="PUT"
+          apiEndpoint={`/api-applications/${this.props.params.appId}/`}
+          saveOnBlur
+          allowUndo
+          initialData={this.state.app}
+          onSubmitError={() => addErrorMessage('Unable to save change')}
+        >
+          <JsonForm location={this.props.location} forms={apiApplication} />
+
+          <Panel>
+            <PanelHeader>{t('Credentials')}</PanelHeader>
+
+            <PanelBody>
+              <FormField name="clientID" label="Client ID" overflow>
+                {({value}) => {
+                  return (
+                    <div>
+                      <TextCopyInput>
+                        {getDynamicText({value, fixed: 'PERCY_CLIENT_ID'})}
+                      </TextCopyInput>
+                    </div>
+                  );
+                }}
+              </FormField>
+
+              <FormField
+                overflow
+                name="clientSecret"
+                label="Client Secret"
+                help={t(`Your secret is only available briefly after application creation. Make
+                  sure to save this value!`)}
+              >
+                {({value}) => {
+                  return value ? (
+                    <TextCopyInput>
+                      {getDynamicText({value, fixed: 'PERCY_CLIENT_SECRET'})}
+                    </TextCopyInput>
+                  ) : (
+                    <em>hidden</em>
+                  );
+                }}
+              </FormField>
+
+              <FormField name="" label="Authorization URL">
+                {() => <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>}
+              </FormField>
+
+              <FormField name="" label="Token URL">
+                {() => <TextCopyInput>{`${urlPrefix}/oauth/token/`}</TextCopyInput>}
+              </FormField>
+            </PanelBody>
+          </Panel>
+        </Form>
+      </div>
+    );
+  }
+}
+
+export default ApiApplicationsDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
new file mode 100644
index 0000000000..55ba6cac15
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/index.tsx
@@ -0,0 +1,100 @@
+import {RouteComponentProps} from 'react-router/lib/Router';
+import React from 'react';
+
+import {ApiApplication} from 'app/types';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import Button from 'app/components/button';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import Row from 'app/views/settings/account/apiApplications/row';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+
+const ROUTE_PREFIX = '/settings/account/api/';
+
+type Props = RouteComponentProps<{}, {}> & AsyncView['props'];
+type State = {
+  appList: ApiApplication[];
+} & AsyncView['state'];
+
+class ApiApplications extends AsyncView<Props, State> {
+  getEndpoints(): [string, string][] {
+    return [['appList', '/api-applications/']];
+  }
+
+  getTitle() {
+    return t('API Applications');
+  }
+
+  handleCreateApplication = async () => {
+    addLoadingMessage();
+
+    try {
+      const app = await this.api.requestPromise('/api-applications/', {
+        method: 'POST',
+      });
+
+      addSuccessMessage(t('Created a new API Application'));
+      this.props.router.push(`${ROUTE_PREFIX}applications/${app.id}/`);
+    } catch (_err) {
+      addErrorMessage(t('Unable to remove application. Please try again.'));
+    }
+  };
+
+  handleRemoveApplication = (app: ApiApplication) => {
+    this.setState({
+      appList: this.state.appList.filter(a => a.id !== app.id),
+    });
+  };
+
+  renderBody() {
+    const action = (
+      <Button
+        priority="primary"
+        size="small"
+        onClick={this.handleCreateApplication}
+        icon="icon-circle-add"
+      >
+        {t('Create New Application')}
+      </Button>
+    );
+
+    const isEmpty = this.state.appList.length === 0;
+
+    return (
+      <div>
+        <SettingsPageHeader title="API Applications" action={action} />
+
+        <Panel>
+          <PanelHeader>{t('Application Name')}</PanelHeader>
+
+          <PanelBody>
+            {!isEmpty ? (
+              this.state.appList.map(app => {
+                return (
+                  <Row
+                    api={this.api}
+                    key={app.id}
+                    app={app}
+                    onRemove={this.handleRemoveApplication}
+                  />
+                );
+              })
+            ) : (
+              <EmptyMessage>
+                {t("You haven't created any applications yet.")}
+              </EmptyMessage>
+            )}
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default ApiApplications;
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiApplications/row.tsx b/src/sentry/static/sentry/app/views/settings/account/apiApplications/row.tsx
new file mode 100644
index 0000000000..cd9147a744
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/apiApplications/row.tsx
@@ -0,0 +1,111 @@
+import {Link} from 'react-router';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {ApiApplication} from 'app/types';
+import {Client} from 'app/api';
+import {PanelItem} from 'app/components/panels';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  clearIndicators,
+} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import getDynamicText from 'app/utils/getDynamicText';
+import space from 'app/styles/space';
+
+const ROUTE_PREFIX = '/settings/account/api/';
+
+type Props = {
+  api: Client;
+  app: ApiApplication;
+  onRemove: (app: ApiApplication) => void;
+};
+
+type State = {
+  loading: boolean;
+};
+
+class Row extends React.Component<Props, State> {
+  state = {
+    loading: false,
+  };
+
+  handleRemove = () => {
+    if (this.state.loading) {
+      return;
+    }
+
+    const {api, app, onRemove} = this.props;
+
+    this.setState(
+      {
+        loading: true,
+      },
+      async () => {
+        addLoadingMessage();
+
+        try {
+          await api.requestPromise(`/api-applications/${app.id}/`, {
+            method: 'DELETE',
+          });
+
+          clearIndicators();
+          onRemove(app);
+        } catch (_err) {
+          addErrorMessage(t('Unable to remove application. Please try again.'));
+        }
+      }
+    );
+  };
+
+  render() {
+    const {app} = this.props;
+
+    return (
+      <StyledPanelItem>
+        <ApplicationNameWrapper>
+          <ApplicationName to={`${ROUTE_PREFIX}applications/${app.id}/`}>
+            {getDynamicText({value: app.name, fixed: 'PERCY_APPLICATION_NAME'})}
+          </ApplicationName>
+          <ClientId>
+            {getDynamicText({value: app.clientID, fixed: 'PERCY_CLIENT_ID'})}
+          </ClientId>
+        </ApplicationNameWrapper>
+
+        <Button
+          aria-label="Remove"
+          onClick={this.handleRemove}
+          disabled={this.state.loading}
+          icon="icon-trash"
+        />
+      </StyledPanelItem>
+    );
+  }
+}
+
+const StyledPanelItem = styled(PanelItem)`
+  padding: ${space(2)};
+  align-items: center;
+`;
+
+const ApplicationNameWrapper = styled('div')`
+  display: flex;
+  flex-direction: column;
+  flex: 1;
+  margin-right: ${space(1)};
+`;
+
+const ApplicationName = styled(Link)`
+  font-size: ${p => p.theme.headerFontSize};
+  font-weight: bold;
+  margin-bottom: ${space(0.5)};
+`;
+
+const ClientId = styled('div')`
+  color: ${p => p.theme.gray1};
+  font-size: ${p => p.theme.fontSizeMedium};
+`;
+
+export default Row;
diff --git a/tests/js/spec/views/settings/account/apiApplications.spec.jsx b/tests/js/spec/views/settings/account/apiApplications.spec.jsx
index 08bf9ce5a0..48322ff06d 100644
--- a/tests/js/spec/views/settings/account/apiApplications.spec.jsx
+++ b/tests/js/spec/views/settings/account/apiApplications.spec.jsx
@@ -10,7 +10,10 @@ describe('ApiApplications', function() {
   const {router, routerContext} = initializeOrg();
 
   const createWrapper = props => {
-    wrapper = mountWithTheme(<ApiApplications {...props} />, routerContext);
+    wrapper = mountWithTheme(
+      <ApiApplications {...props} router={router} />,
+      routerContext
+    );
   };
 
   beforeEach(function() {
@@ -42,7 +45,7 @@ describe('ApiApplications', function() {
 
     expect(requestMock).toHaveBeenCalled();
 
-    expect(wrapper.find('ApiApplicationRow')).toHaveLength(1);
+    expect(wrapper.find('Row')).toHaveLength(1);
   });
 
   it('creates application', async function() {
@@ -55,7 +58,10 @@ describe('ApiApplications', function() {
     });
     createWrapper();
 
-    wrapper.find('Button').simulate('click');
+    wrapper.find('button[aria-label="Create New Application"]').simulate('click');
+
+    await tick();
+
     expect(createApplicationRequest).toHaveBeenCalledWith(
       '/api-applications/',
       expect.objectContaining({method: 'POST'})
@@ -72,7 +78,9 @@ describe('ApiApplications', function() {
     });
     createWrapper();
 
-    wrapper.find('a[aria-label="Remove"]').simulate('click');
+    wrapper.find('button[aria-label="Remove"]').simulate('click');
+    await tick();
+    wrapper.update();
     expect(deleteApplicationRequest).toHaveBeenCalledWith(
       '/api-applications/123/',
       expect.objectContaining({method: 'DELETE'})
