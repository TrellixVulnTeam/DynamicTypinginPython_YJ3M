commit be588113ad25c773fa3b1f76551002df319cd440
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon May 14 13:54:13 2018 -0500

    fix: Collapse hashes for dynamically generated javassist classes/fileâ€¦ (#8425)

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 0cd5aa6bfb..2e1fede89f 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -37,9 +37,13 @@ _filename_version_re = re.compile(
 
 # Java Spring specific anonymous classes.
 # see: http://mydailyjava.blogspot.co.at/2013/11/cglib-missing-manual.html
-_java_enhancer_re = re.compile(r'''
-(\$\$[\w_]+?CGLIB\$\$)[a-fA-F0-9]+(_[0-9]+)?
-''', re.X)
+_java_cglib_enhancer_re = re.compile(r'''(\$\$[\w_]+?CGLIB\$\$)[a-fA-F0-9]+(_[0-9]+)?''', re.X)
+
+# Handle Javassist auto-generated classes and filenames:
+#   com.example.api.entry.EntriesResource_$$_javassist_74
+#   com.example.api.entry.EntriesResource_$$_javassist_seam_74
+#   EntriesResource_$$_javassist_seam_74.java
+_java_assist_enhancer_re = re.compile(r'''(\$\$_javassist)(?:_seam)?(?:_[0-9]+)?''', re.X)
 
 # Clojure anon functions are compiled down to myapp.mymodule$fn__12345
 _clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
@@ -183,15 +187,20 @@ def remove_filename_outliers(filename, platform=None):
     # contain things like /Users/foo/Dropbox/...
     if platform == 'cocoa':
         return posixpath.basename(filename)
+    elif platform == 'java':
+        filename = _java_assist_enhancer_re.sub(r'\1<auto>', filename)
     return _filename_version_re.sub('<version>/', filename)
 
 
-def remove_module_outliers(module):
+def remove_module_outliers(module, platform=None):
     """Remove things that augment the module but really should not."""
-    if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
-        return 'sun.reflect.GeneratedMethodAccessor'
-    module = _java_enhancer_re.sub(r'\1<auto>', module)
-    return _clojure_enhancer_re.sub(r'\1<auto>', module)
+    if platform == 'java':
+        if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
+            return 'sun.reflect.GeneratedMethodAccessor'
+        module = _java_cglib_enhancer_re.sub(r'\1<auto>', module)
+        module = _java_assist_enhancer_re.sub(r'\1<auto>', module)
+        module = _clojure_enhancer_re.sub(r'\1<auto>', module)
+    return module
 
 
 def slim_frame_data(frames, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
@@ -409,7 +418,7 @@ class Frame(Interface):
             if self.is_unhashable_module(platform):
                 output.append('<module>')
             else:
-                output.append(remove_module_outliers(self.module))
+                output.append(remove_module_outliers(self.module, platform))
         elif self.filename and not self.is_url() and not self.is_caused_by():
             output.append(remove_filename_outliers(self.filename, platform))
 
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index ecb3705f01..38f343f05a 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -287,7 +287,7 @@ class StacktraceTest(TestCase):
                 'function': 'invoke'
             }
         )
-        result = interface.get_hash()
+        result = interface.get_hash(platform='java')
         self.assertEquals(result, [
             'sentry_clojure_example.core$_main$fn__<auto>',
             'invoke',
@@ -300,7 +300,7 @@ class StacktraceTest(TestCase):
                 'function': 'invoke'
             }
         )
-        result = interface.get_hash()
+        result = interface.get_hash(platform='java')
         self.assertEquals(
             result, [
                 'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>',
@@ -318,7 +318,7 @@ class StacktraceTest(TestCase):
                 'jipJipManagementApplication'
             }
         )
-        result = interface.get_hash()
+        result = interface.get_hash(platform='java')
         self.assertEquals(
             result, [
                 'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'
@@ -339,7 +339,7 @@ class StacktraceTest(TestCase):
                 'jipJipManagementApplication'
             }
         )
-        result = interface.get_hash()
+        result = interface.get_hash(platform='java')
         self.assertEquals(
             result, [
                 'invalid.gruml.talkytalkyhub.common.config.JipJipConfig'
@@ -349,6 +349,46 @@ class StacktraceTest(TestCase):
             ]
         )
 
+    def test_get_hash_ignores_javassist(self):
+        interface = Frame.to_python(
+            {
+                'module': 'com.example.api.entry.EntriesResource_$$_javassist_seam_74',
+                'function': 'fn',
+            }
+        )
+        result = interface.get_hash(platform='java')
+        self.assertEquals(
+            result, [
+                'com.example.api.entry.EntriesResource_$$_javassist<auto>', 'fn'
+            ]
+        )
+
+        interface = Frame.to_python(
+            {
+                'module': 'com.example.api.entry.EntriesResource_$$_javassist_74',
+                'function': 'fn',
+            }
+        )
+        result = interface.get_hash(platform='java')
+        self.assertEquals(
+            result, [
+                'com.example.api.entry.EntriesResource_$$_javassist<auto>', 'fn'
+            ]
+        )
+
+        interface = Frame.to_python(
+            {
+                'filename': 'EntriesResource_$$_javassist_seam_74.java',
+                'function': 'fn',
+            }
+        )
+        result = interface.get_hash(platform='java')
+        self.assertEquals(
+            result, [
+                'EntriesResource_$$_javassist<auto>.java', 'fn'
+            ]
+        )
+
     def test_get_hash_ignores_sun_java_generated_methods(self):
         interface = Frame.to_python(
             {
@@ -356,7 +396,7 @@ class StacktraceTest(TestCase):
                 'function': 'invoke',
             }
         )
-        result = interface.get_hash()
+        result = interface.get_hash(platform='java')
         self.assertEquals(result, [
             'sun.reflect.GeneratedMethodAccessor',
             'invoke',
