commit e40d49a0252d78de9e35e37393e74cfdc2184034
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jan 7 10:00:48 2019 -0800

    ref(register): Add password strength component (#11370)
    
    This component replaces the 1st party pwStrength package that we have
    with a react component that performs the same functionality.
    
    Importantly, this component is NOT loaded anywhere within the main react
    app, and instead is exposed as a asynchronously, code-split, module that
    can be loaded through the global SentryApp variable.
    
    A shim is provided through the exported `attachTo` function to allow the
    password strength component to be rendered on non-react pages.

diff --git a/src/sentry/static/sentry/app/components/passwordStrength.jsx b/src/sentry/static/sentry/app/components/passwordStrength.jsx
new file mode 100644
index 0000000000..5ce2495355
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/passwordStrength.jsx
@@ -0,0 +1,112 @@
+import {throttle} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+import ReactDOM from 'react-dom';
+import zxcvbn from 'zxcvbn';
+import styled, {css} from 'react-emotion';
+import {tct} from 'app/locale';
+
+import theme from 'app/utils/theme';
+
+/**
+ * NOTE: Do not import this component synchronously. The zxcvbn library is
+ * relatively large. This component should be loaded async as a split chunk.
+ */
+
+/**
+ * The maximum score that zxcvbn reports
+ */
+const MAX_SCORE = 5;
+
+class PasswordStrength extends React.Component {
+  static propTypes = {
+    /**
+     * A set of labels to display for each password strength level. 5 levels.
+     */
+    labels: PropTypes.arrayOf(PropTypes.string),
+    /**
+     * The color to make the progress bar for each strength level. 5 levels.
+     */
+    colors: PropTypes.arrayOf(PropTypes.string),
+    /**
+     * The password value.
+     */
+    value: PropTypes.string,
+  };
+
+  static defaultProps = {
+    labels: ['Very Weak', 'Very Weak', 'Weak', 'Strong', 'Very Strong'],
+    colors: [theme.red, theme.red, theme.yellow, theme.green, theme.green],
+  };
+
+  render() {
+    const {value, labels, colors} = this.props;
+    if (value === '') {
+      return null;
+    }
+
+    const result = zxcvbn(value);
+    if (!result) {
+      return null;
+    }
+
+    const {score} = result;
+    const percent = Math.round((score + 1) / MAX_SCORE * 100);
+
+    const styles = css`
+      background: ${colors[score]};
+      width: ${percent}%;
+      height: 100%;
+    `;
+
+    return (
+      <React.Fragment>
+        <StrengthProgress
+          role="progressbar"
+          aria-valuenow={score}
+          aria-valuemin="0"
+          aria-valuemax="100"
+        >
+          <div css={styles} />
+        </StrengthProgress>
+        <StrengthLabel>
+          {tct('Strength: [textScore]', {
+            textScore: <ScoreText>{labels[score]}</ScoreText>,
+          })}
+        </StrengthLabel>
+      </React.Fragment>
+    );
+  }
+}
+
+const StrengthProgress = styled('div')`
+  background: ${theme.offWhite2};
+  height: 8px;
+  border-radius: 2px;
+  overflow: hidden;
+`;
+
+const StrengthLabel = styled('div')`
+  font-size: 0.8em;
+  margin-top: 2px;
+  color: ${theme.gray3};
+`;
+
+const ScoreText = styled('strong')`
+  color: #000;
+`;
+
+export default PasswordStrength;
+
+/**
+ * This is a shim that allows the password strength component to be used
+ * outside of our main react application. Mostly useful since all of our
+ * registration pages aren't in the react app.
+ */
+export const attachTo = ({input, element}) =>
+  input.addEventListener(
+    'input',
+    throttle(e => {
+      ReactDOM.render(<PasswordStrength value={e.target.value} />, element);
+    })
+  );
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 695774315d..344e943009 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -85,6 +85,14 @@ let render = Component => {
   ReactDOM.render(<Component />, rootEl);
 };
 
+// The password strength component is very heavyweight as it includes the
+// zxcvbn, a relatively byte-heavy password strength estimation library. Load
+// it on demand.
+async function loadPasswordStrength(callback) {
+  let module = await import(/* webpackChunkName: "passwordStrength" */ 'app/components/passwordStrength');
+  callback(module);
+}
+
 const globals = {
   $: jQuery,
   jQuery,
@@ -222,6 +230,7 @@ const globals = {
       onboardingSteps: require('app/views/onboarding/utils').onboardingSteps,
       stepDescriptions: require('app/views/onboarding/utils').stepDescriptions,
     },
+    passwordStrength: {load: loadPasswordStrength},
   },
 };
 
diff --git a/src/sentry/static/sentry/js/pwstrength/index.js b/src/sentry/static/sentry/js/pwstrength/index.js
deleted file mode 100644
index eba1b6958c..0000000000
--- a/src/sentry/static/sentry/js/pwstrength/index.js
+++ /dev/null
@@ -1,102 +0,0 @@
-/* eslint no-var:0 */
-/* eslint-env commonjs */
-// var webpack will bundle zxcvbn
-
-module.exports = (function() {
-  var zxcvbn = require('zxcvbn');
-  var MAX = 5;
-  var labels = ['', 'Very Weak', 'Very Weak', 'Weak', 'Strong', 'Very Strong'];
-  var red = '#e03e2f';
-  var yellow = '#ECD744';
-  var green = '#57be8c';
-  var colors = ['transparent', red, red, yellow, green, green];
-  var $ = window.$;
-  var throttle =
-    (window._ && window._.throttle) ||
-    function(f) {
-      return f;
-    };
-
-  var setStrength = function(score, $bar, $label) {
-    if (score > -1 && score <= MAX) {
-      var scoreRatio = score / MAX;
-      var percent = Math.round(scoreRatio * 100);
-      var color = colors[score] || 'transparent';
-      var label = labels[score] || '';
-
-      if ($bar && $bar.length && $label && $label.length) {
-        var $sr = $bar.find('.sr-only');
-        if ($sr && $sr.length) {
-          $sr.text(percent + '%');
-        }
-        $bar.attr('aria-valuenow', percent);
-
-        $bar.css({
-          width: percent + '%',
-          'background-color': color
-        });
-
-        $label.text(label).css({
-          color: color
-        });
-      }
-    }
-  };
-
-  var createIndicator = function(parent) {
-    var $progress = $(
-      '<div class="progress">' +
-        '<div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100">' +
-        '<span class="sr-only">0%</span>' +
-        '</div>' +
-        '</div>'
-    );
-    var $label = $(
-      '<div class="password-strength-heading">' +
-        'Password Strength: <span class="password-strength-label"></span>' +
-        '</div>'
-    );
-    var $warning = $('<div class="password-warnings" />');
-    $(parent).append($label, $progress, $warning);
-
-    return {
-      bar: $progress.find('.progress-bar'),
-      label: $label.find('.password-strength-label'),
-      warning: $warning
-    };
-  };
-
-  var addStrengthIndicator = function(passwordSel, parent) {
-    // Don't do anything if jquery OR zxcvbn do not exist in `window`
-    if ($ && zxcvbn) {
-      var els = createIndicator(parent);
-      var $bar = els.bar;
-      var $label = els.label;
-      var $warning = els.warning;
-
-      var setStrengthHandler = function() {
-        var val = $(this).val();
-        if (val) {
-          $(parent).addClass('visible');
-          var result = zxcvbn(val);
-          if (result) {
-            $warning.text(result.feedback.warning);
-            // Score is 0 indexed
-            var score = result.score + 1;
-            setStrength(score, $bar, $label);
-          } else {
-            setStrength(0);
-          }
-        } else {
-          setStrength(0);
-        }
-      };
-
-      $(passwordSel).on('input', throttle(setStrengthHandler));
-    }
-  };
-
-  return {
-    addStrengthIndicator: addStrengthIndicator
-  };
-})();
diff --git a/src/sentry/static/sentry/less/auth.less b/src/sentry/static/sentry/less/auth.less
index 9c9ce412d3..4ea0c14935 100644
--- a/src/sentry/static/sentry/less/auth.less
+++ b/src/sentry/static/sentry/less/auth.less
@@ -290,27 +290,3 @@ div.u2f-box {
     opacity: 0.1;
   }
 }
-
-.password-strength-heading {
-  font-weight: bold;
-}
-
-.password-warnings {
-  opacity: 0.8;
-  font-size: 0.9em;
-  font-style: italic;
-}
-
-.password-strength {
-  display: none;
-  &.visible {
-    display: block;
-  }
-  .progress {
-    margin: 5px 0;
-  }
-  .progress-bar {
-    border-radius: 2px;
-    height: 14px;
-  }
-}
diff --git a/src/sentry/templates/sentry/organization-login.html b/src/sentry/templates/sentry/organization-login.html
index f0f4fe6745..df495b1b4c 100644
--- a/src/sentry/templates/sentry/organization-login.html
+++ b/src/sentry/templates/sentry/organization-login.html
@@ -8,34 +8,17 @@
 {{ block.super }}
 
 <script>
-  (function() {
-    var SRC = "{% asset_url 'sentry' 'dist/pwstrength.js' %}";
-
-    var async_load = function() {
-      var first, s;
-      s = document.createElement('script');
-      s.src = SRC;
-      s.type = 'text/javascript';
-      s.async = true;
-      s.addEventListener('load', function() {
-        if (window.sentrypw) {
-          window.sentrypw.addStrengthIndicator(
-            '#register #id_password',
-            '.password-strength'
-          );
-        }
-      }, false);
-      first = document.getElementsByTagName('script')[0];
-      return first.parentNode.insertBefore(s, first);
-    };
-
-    window.addEventListener('load', async_load, false);
-  })();
+  SentryApp.passwordStrength.load(function(passwordStrength) {
+    $(function() {
+      passwordStrength.attachTo({
+        input: document.querySelector('#register #id_password'),
+        element: document.querySelector('.password-strength'),
+      });
+    })
+  })
 </script>
-
 {% endblock %}
 
-
 {% block title %}{% trans "Login" %} | {{ block.super }}{% endblock %}
 
 {% block auth_container %}
diff --git a/webpack.config.js b/webpack.config.js
index 56884b98ee..51afffecba 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -291,31 +291,6 @@ const appConfig = {
   devtool: IS_PRODUCTION ? 'source-map' : 'cheap-module-eval-source-map',
 };
 
-/**
- * Webpack entry for password strength checker
- */
-const pwConfig = {
-  mode: WEBPACK_MODE,
-  entry: {
-    pwstrength: './index',
-  },
-  context: path.resolve(path.join(__dirname, staticPrefix), 'js', 'pwstrength'),
-  module: {},
-  plugins: [],
-  resolve: {
-    modules: [path.join(__dirname, staticPrefix), 'node_modules'],
-    extensions: ['.js'],
-  },
-  output: {
-    path: distPath,
-    filename: '[name].js',
-    libraryTarget: 'window',
-    library: 'sentrypw',
-    sourceMapFilename: '[name].js.map',
-  },
-  devtool: IS_PRODUCTION ? 'source-map' : 'cheap-source-map',
-};
-
 /**
  * Legacy CSS Webpack appConfig for Django-powered views.
  * This generates a single "sentry.css" file that imports ALL component styles
@@ -401,9 +376,8 @@ if (IS_PRODUCTION) {
   // NOTE: can't do plugins.push(Array) because webpack/webpack#2217
   minificationPlugins.forEach(function(plugin) {
     appConfig.plugins.push(plugin);
-    pwConfig.plugins.push(plugin);
     legacyCssConfig.plugins.push(plugin);
   });
 }
 
-module.exports = [appConfig, pwConfig, legacyCssConfig];
+module.exports = [appConfig, legacyCssConfig];
