commit 618bb0cc6f8edd36d0c6462e25f496f67ba3840f
Author: Filippo Pacifici <fpacifici@sentry.io>
Date:   Wed Jul 3 13:07:07 2019 -0700

    feat:issueless events. Prepare data structures for issueless events (#13822)
    
    This PR prepares the ground for skipping issue creation if the
    event has no fingerprint by removing some assumption that the group
    should always exists.

diff --git a/src/sentry/api/bases/event.py b/src/sentry/api/bases/event.py
new file mode 100644
index 0000000000..8e8b4d52ed
--- /dev/null
+++ b/src/sentry/api/bases/event.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.project import ProjectPermission
+
+
+class EventPermission(ProjectPermission):
+    scope_map = {
+        'GET': ['event:read', 'event:write', 'event:admin'],
+        'POST': ['event:write', 'event:admin'],
+        'PUT': ['event:write', 'event:admin'],
+        'DELETE': ['event:admin'],
+    }
+
+    def has_object_permission(self, request, view, event):
+        return super(EventPermission, self).has_object_permission(
+            request, view, event.project)
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index 3265d82dae..33f6e1e603 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -3,14 +3,14 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
-from sentry.api.bases.group import GroupPermission
+from sentry.api.bases.event import EventPermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import DetailedEventSerializer, serialize
 from sentry.models import Event
 
 
 class EventDetailsEndpoint(Endpoint):
-    permission_classes = (GroupPermission, )
+    permission_classes = (EventPermission, )
 
     def get(self, request, event_id):
         """
@@ -27,7 +27,7 @@ class EventDetailsEndpoint(Endpoint):
         if event is None:
             raise ResourceDoesNotExist
 
-        self.check_object_permissions(request, event.group)
+        self.check_object_permissions(request, event)
 
         Event.objects.bind_nodes([event], 'data')
 
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index ecc32bf51c..b2ba6945ad 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -247,7 +247,7 @@ class EventSerializer(Serializer):
 
         d = {
             'id': six.text_type(obj.id),
-            'groupID': six.text_type(obj.group_id),
+            'groupID': six.text_type(obj.group_id) if obj.group_id else None,
             'eventID': six.text_type(obj.event_id),
             'projectID': six.text_type(obj.project_id),
             'size': obj.size,
@@ -359,7 +359,7 @@ class SimpleEventSerializer(EventSerializer):
         return {
             'id': six.text_type(obj.id),
             'event.type': six.text_type(obj.type),
-            'groupID': six.text_type(obj.group_id),
+            'groupID': six.text_type(obj.group_id) if obj.group_id else None,
             'eventID': six.text_type(obj.event_id),
             'projectID': six.text_type(obj.project_id),
             # XXX for 'message' this doesn't do the proper resolution of logentry
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index d6af2bde7d..2917aca1a2 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -725,7 +725,7 @@ class EventManager(object):
                     extra={
                         'event_uuid': event_id,
                         'project_id': project.id,
-                        'group_id': group.id,
+                        'group_id': group.id if group else None,
                         'model': EventMapping.__name__,
                     }
                 )
@@ -833,7 +833,7 @@ class EventManager(object):
                     extra={
                         'event_uuid': event_id,
                         'project_id': project.id,
-                        'group_id': group.id,
+                        'group_id': group.id if group else None,
                         'model': Event.__name__,
                     }
                 )
@@ -842,7 +842,7 @@ class EventManager(object):
             tagstore.delay_index_event_tags(
                 organization_id=project.organization_id,
                 project_id=project.id,
-                group_id=group.id,
+                group_id=group.id if group else None,
                 environment_id=environment.id,
                 event_id=event.id,
                 tags=event.tags,
@@ -885,7 +885,8 @@ class EventManager(object):
         if not raw:
             if not project.first_event:
                 project.update(first_event=date)
-                first_event_received.send_robust(project=project, group=group, sender=Project)
+                first_event_received.send_robust(
+                    project=project, event=event, sender=Project)
 
         eventstream.insert(
             group=group,
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 3ca6b96eda..291cce3d37 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -89,6 +89,8 @@ class EventCommon(object):
     @property
     def group(self):
         from sentry.models import Group
+        if not self.group_id:
+            return None
         if not hasattr(self, '_group_cache'):
             self._group_cache = Group.objects.get(id=self.group_id)
         return self._group_cache
@@ -223,7 +225,9 @@ class EventCommon(object):
     @property
     def culprit(self):
         # For a while events did not save the culprit
-        return self.data.get('culprit') or self.group.culprit
+        if self.group_id:
+            return self.data.get('culprit') or self.group.culprit
+        return self.data.get('culprit')
 
     @property
     def location(self):
@@ -353,7 +357,7 @@ class EventCommon(object):
 
         # for a long time culprit was not persisted.  In those cases put
         # the culprit in from the group.
-        if data.get('culprit') is None:
+        if data.get('culprit') is None and self.group_id:
             data['culprit'] = self.group.culprit
 
         # Override title and location with dynamically generated data
@@ -370,12 +374,18 @@ class EventCommon(object):
     def level(self):
         # we might want to move to this:
         # return LOG_LEVELS_MAP.get(self.get_level_display()) or self.group.level
-        return self.group.level
+        if self.group:
+            return self.group.level
+        else:
+            return None
 
     def get_level_display(self):
         # we might want to move to this:
         # return self.get_tag('level') or self.group.get_level_display()
-        return self.group.get_level_display()
+        if self.group:
+            return self.group.get_level_display()
+        else:
+            return None
 
     # deprecated accessors
 
@@ -630,7 +640,7 @@ class SnubaEvent(EventCommon):
             conditions=conditions,
             filter_keys={
                 'project_id': [self.project_id],
-                'issue': [self.group_id],
+                'issue': [self.group_id] if self.group_id else [],
             },
             orderby=['timestamp', 'event_id'],
             limit=1,
@@ -660,7 +670,7 @@ class SnubaEvent(EventCommon):
             conditions=conditions,
             filter_keys={
                 'project_id': [self.project_id],
-                'issue': [self.group_id],
+                'issue': [self.group_id] if self.group_id else [],
             },
             orderby=['-timestamp', '-event_id'],
             limit=1,
@@ -778,7 +788,7 @@ class EventSubjectTemplateData(object):
             return self.event.project.get_full_name()
         elif name == 'projectID':
             return self.event.project.slug
-        elif name == 'shortID':
+        elif name == 'shortID' and self.event.group_id:
             return self.event.group.qualified_short_id
         elif name == 'orgID':
             return self.event.organization.slug
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index 73f650edc9..a49a6d72e4 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -50,7 +50,7 @@ DEFAULT_TAGS = frozenset(
 
 # First Event
 @first_event_received.connect(weak=False)
-def record_first_event(project, group, **kwargs):
+def record_first_event(project, **kwargs):
     FeatureAdoption.objects.record(
         organization_id=project.organization_id, feature_slug="first_event", complete=True
     )
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 3218a4e061..bd0b9f1f20 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -93,7 +93,7 @@ def record_raven_installed(project, user, **kwargs):
 
 
 @first_event_received.connect(weak=False)
-def record_first_event(project, group, **kwargs):
+def record_first_event(project, event, **kwargs):
     """
     Requires up to 2 database calls, but should only run with the first event in
     any project, so performance should not be a huge bottleneck.
@@ -111,7 +111,7 @@ def record_first_event(project, group, **kwargs):
             'project_id': project.id,
             'date_completed': project.first_event,
             'data': {
-                'platform': group.platform
+                'platform': event.platform
             },
         }
     )
@@ -124,7 +124,7 @@ def record_first_event(project, group, **kwargs):
             user_id=user.id,
             organization_id=project.organization_id,
             project_id=project.id,
-            platform=group.platform,
+            platform=event.platform,
         )
         return
 
@@ -138,8 +138,8 @@ def record_first_event(project, group, **kwargs):
 
     # Only counts if it's a new project and platform
     if oot.project_id != project.id and oot.data.get(
-        'platform', group.platform
-    ) != group.platform:
+        'platform', event.platform
+    ) != event.platform:
         rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
             organization_id=project.organization_id,
             task=OnboardingTask.SECOND_PLATFORM,
@@ -149,7 +149,7 @@ def record_first_event(project, group, **kwargs):
                 'project_id': project.id,
                 'date_completed': project.first_event,
                 'data': {
-                    'platform': group.platform
+                    'platform': event.platform
                 },
             }
         )
@@ -159,7 +159,7 @@ def record_first_event(project, group, **kwargs):
                 user_id=user.id,
                 organization_id=project.organization_id,
                 project_id=project.id,
-                platform=group.platform,
+                platform=event.platform,
             )
 
 
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 0770aa2cdb..76e19887fe 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -66,7 +66,7 @@ event_saved = BetterSignal(providing_args=["project"])
 # Organization Onboarding Signals
 project_created = BetterSignal(providing_args=["project", "user"])
 first_event_pending = BetterSignal(providing_args=["project", "user"])
-first_event_received = BetterSignal(providing_args=["project", "group"])
+first_event_received = BetterSignal(providing_args=["project", "event"])
 member_invited = BetterSignal(providing_args=["member", "user"])
 member_joined = BetterSignal(providing_args=["member", "organization"])
 issue_tracker_used = BetterSignal(providing_args=["plugin", "project", "user"])
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 14b7af8014..7e23027806 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -102,6 +102,9 @@ class FeatureSet(object):
 
         items = []
         for event in events:
+            # TODO: how we index events?
+            if not event.group_id:
+                continue
             for label, features in self.extract(event).items():
                 if scope is None:
                     scope = self.__get_scope(event.project)
diff --git a/src/sentry/testutils/factories.py b/src/sentry/testutils/factories.py
index 0f0eb7708e..09ef8dcf73 100644
--- a/src/sentry/testutils/factories.py
+++ b/src/sentry/testutils/factories.py
@@ -447,11 +447,11 @@ class Factories(object):
         return useremail
 
     @staticmethod
-    def create_event(group, event_id=None, normalize=True, **kwargs):
+    def create_event(group=None, project=None, event_id=None, normalize=True, **kwargs):
         # XXX: Do not use this method for new tests! Prefer `store_event`.
         if event_id is None:
             event_id = uuid4().hex
-        kwargs.setdefault('project', group.project)
+        kwargs.setdefault('project', project if project else group.project)
         kwargs.setdefault('data', copy.deepcopy(DEFAULT_EVENT_DATA))
         kwargs.setdefault('platform', kwargs['data'].get('platform', 'python'))
         kwargs.setdefault('message', kwargs['data'].get('message', 'message'))
@@ -497,11 +497,12 @@ class Factories(object):
         )
 
         event = Event(event_id=event_id, group=group, **kwargs)
-        EventMapping.objects.create(
-            project_id=event.project.id,
-            event_id=event_id,
-            group=group,
-        )
+        if group:
+            EventMapping.objects.create(
+                project_id=event.project.id,
+                event_id=event_id,
+                group=group,
+            )
         # emulate EventManager refs
         event.data.bind_ref(event)
         event.save()
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index 8851c510b4..183af77bb9 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -247,3 +247,29 @@ class SnubaEventSerializerTest(TestCase):
             'value': 'email:test@test.com',
             'query': 'user.email:test@test.com',
         }]
+
+    def test_no_group(self):
+        """
+        Use the SimpleEventSerializer to serialize an event without group
+        """
+
+        event = SnubaEvent({
+            'event_id': 'a',
+            'project_id': 1,
+            'message': 'hello there',
+            'title': 'hi',
+            'type': 'default',
+            'location': 'somewhere',
+            'culprit': 'foo',
+            'timestamp': '2011-01-01T00:00:00Z',
+            'user_id': '123',
+            'email': 'test@test.com',
+            'username': 'test',
+            'ip_address': '192.168.0.1',
+            'platform': 'asdf',
+            'group_id': None,
+            'tags.key': ['sentry:user'],
+            'tags.value': ['email:test@test.com'],
+        })
+        result = serialize(event, None, SimpleEventSerializer())
+        assert result['groupID'] is None
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 99cdd4eb20..76259a978f 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -7,6 +7,7 @@ from sentry.models import Environment
 from sentry.db.models.fields.node import NodeData
 from sentry.event_manager import EventManager
 from sentry.testutils import TestCase
+from sentry.testutils.factories import Factories
 
 
 class EventTest(TestCase):
@@ -162,6 +163,22 @@ class EventTest(TestCase):
         event = self.create_event()
         assert event.ip_address is None
 
+    def test_issueless_event(self):
+        event = Factories.create_event(
+            group=None,
+            project=self.project,
+            event_id='a' * 32,
+            tags={'level': 'info'},
+            message='Foo bar',
+            data={
+                'culprit': 'app/components/events/eventEntries in map',
+            },
+        )
+        assert event.group is None
+        assert event.culprit == 'app/components/events/eventEntries in map'
+        assert event.level is None
+        assert event.get_level_display() is None
+
 
 @pytest.mark.django_db
 def test_renormalization(monkeypatch, factories, task_runner, default_project):
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 38ba72cb30..a88f4f6bdb 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -63,10 +63,14 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete.complete
 
     def test_first_event(self):
-        group = self.create_group(
+        event = self.create_event(
             project=self.project, platform='javascript', message='javascript error message'
         )
-        first_event_received.send(project=self.project, group=group, sender=type(self.project))
+        first_event_received.send(
+            project=self.project,
+            event=event,
+            sender=type(self.project),
+        )
 
         first_event = FeatureAdoption.objects.get_by_slug(
             organization=self.organization, slug="first_event"
@@ -563,10 +567,15 @@ class FeatureAdoptionTest(TestCase):
         group = self.create_group(
             project=self.project, platform='javascript', message='javascript error message'
         )
-        simple_event = self.create_event()
-        first_event_received.send(project=self.project, group=group, sender=type(self.project))
+        simple_event = self.create_event(group=group, platform='javascript')
+        first_event_received.send(
+            project=self.project,
+            event=simple_event,
+            sender=type(self.project),
+        )
         event_processed.send(
-            project=self.project, group=group, event=simple_event, sender=type(self.project)
+            project=self.project, group=simple_event.group, event=simple_event, sender=type(
+                self.project)
         )
 
         first_event = FeatureAdoption.objects.get_by_slug(
@@ -580,7 +589,8 @@ class FeatureAdoptionTest(TestCase):
 
         full_event = self.create_full_event()
         event_processed.send(
-            project=self.project, group=group, event=full_event, sender=type(self.project)
+            project=self.project, group=full_event.group, event=full_event, sender=type(
+                self.project)
         )
 
         release_tracking = FeatureAdoption.objects.get_by_slug(
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 2c20ad03d1..132d81ad9d 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -23,7 +23,11 @@ class OrganizationOnboardingTaskTest(TestCase):
     def test_no_existing_task(self):
         now = timezone.now()
         project = self.create_project(first_event=now)
-        first_event_received.send(project=project, group=self.group, sender=type(project))
+        first_event_received.send(
+            project=project,
+            event=self.event,
+            sender=type(project),
+        )
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization, task=OnboardingTask.FIRST_EVENT
@@ -46,7 +50,11 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task.status == OnboardingTaskStatus.PENDING
         assert task.project_id == project.id
 
-        first_event_received.send(project=project, group=self.group, sender=type(project))
+        first_event_received.send(
+            project=project,
+            event=self.event,
+            sender=type(project),
+        )
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization,
@@ -66,7 +74,11 @@ class OrganizationOnboardingTaskTest(TestCase):
             status=OnboardingTaskStatus.COMPLETE,
         )
 
-        first_event_received.send(project=project, group=self.group, sender=type(project))
+        first_event_received.send(
+            project=project,
+            event=self.event,
+            sender=type(project),
+        )
 
         task = OrganizationOnboardingTask.objects.get(id=task.id)
         assert task.status == OnboardingTaskStatus.COMPLETE
@@ -128,10 +140,14 @@ class OrganizationOnboardingTaskTest(TestCase):
         now = timezone.now()
         project = self.create_project(first_event=now)
         project_created.send(project=project, user=self.user, sender=type(project))
-        group = self.create_group(
+        event = self.create_event(
             project=project, platform='javascript', message='javascript error message'
         )
-        first_event_received.send(project=project, group=group, sender=type(project))
+        first_event_received.send(
+            project=project,
+            event=event,
+            sender=type(project),
+        )
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization,
@@ -151,11 +167,13 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
         assert second_task is not None
 
-        second_group = self.create_group(
+        second_event = self.create_event(
             project=second_project, platform='python', message='python error message'
         )
         first_event_received.send(
-            project=second_project, group=second_group, sender=type(second_project)
+            project=second_project,
+            event=second_event,
+            sender=type(second_project),
         )
         second_task = OrganizationOnboardingTask.objects.get(
             organization=second_project.organization,
@@ -248,19 +266,25 @@ class OrganizationOnboardingTaskTest(TestCase):
         user = self.create_user(email='test@example.org')
         project = self.create_project(first_event=now)
         second_project = self.create_project(first_event=now)
-        second_group = self.create_group(
+        second_event = self.create_event(
             project=second_project, platform='python', message='python error message'
         )
-        event = self.create_full_event()
+        event = self.create_full_event(project=project)
         member = self.create_member(organization=self.organization, teams=[self.team], user=user)
 
-        event_processed.send(project=project, group=self.group, event=event, sender=type(project))
+        event_processed.send(project=project, group=event.group, event=event, sender=type(project))
         project_created.send(project=project, user=user, sender=type(project))
         project_created.send(project=second_project, user=user, sender=type(second_project))
 
-        first_event_received.send(project=project, group=self.group, sender=type(project))
         first_event_received.send(
-            project=second_project, group=second_group, sender=type(second_project)
+            project=project,
+            event=event,
+            sender=type(project),
+        )
+        first_event_received.send(
+            project=second_project,
+            event=second_event,
+            sender=type(second_project),
         )
         member_joined.send(member=member, organization=self.organization, sender=type(member))
         plugin_enabled.send(
