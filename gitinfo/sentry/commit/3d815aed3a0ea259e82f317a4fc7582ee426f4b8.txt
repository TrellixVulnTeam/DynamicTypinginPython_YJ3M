commit 3d815aed3a0ea259e82f317a4fc7582ee426f4b8
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 25 15:01:12 2015 -0700

    Remove explore code

diff --git a/src/sentry/models/tagkey.py b/src/sentry/models/tagkey.py
index ddab2e20e8..6bf7c2bea2 100644
--- a/src/sentry/models/tagkey.py
+++ b/src/sentry/models/tagkey.py
@@ -7,7 +7,6 @@ sentry.models.tagkey
 """
 from __future__ import absolute_import, print_function
 
-from django.core.urlresolvers import reverse
 from django.db import models
 from django.utils.translation import ugettext_lazy as _
 
@@ -17,7 +16,6 @@ from sentry.db.models import (
 )
 from sentry.db.models.manager import BaseManager
 from sentry.utils.cache import cache
-from sentry.utils.http import absolute_uri
 
 
 # TODO(dcramer): pull in enum library
@@ -50,13 +48,6 @@ class TagKey(Model):
     """
     __core__ = False
 
-    DEFAULT_URL_NAME = 'sentry-explore-tag'
-    URL_NAMES = {
-        'sentry:user': 'sentry-users',
-        'sentry:filename': 'sentry-explore-code',
-        'sentry:function': 'sentry-explore-code-by-function',
-    }
-
     project = FlexibleForeignKey('sentry.Project')
     key = models.CharField(max_length=MAX_TAG_KEY_LENGTH)
     values_seen = BoundedPositiveIntegerField(default=0)
@@ -81,18 +72,6 @@ class TagKey(Model):
             or TAG_LABELS.get(self.key) \
             or self.key.replace('_', ' ').title()
 
-    def get_absolute_url(self):
-        # HACK(dcramer): quick and dirty way to support code/users
-        try:
-            url_name = self.URL_NAMES[self.key]
-        except KeyError:
-            url_name = self.DEFAULT_URL_NAME
-            return absolute_uri(reverse(url_name, args=[
-                self.project.organization.slug, self.project.slug, self.key]))
-
-        return absolute_uri(reverse(url_name, args=[
-            self.project.organization.slug, self.project.slug]))
-
     def get_audit_log_data(self):
         return {
             'key': self.key,
diff --git a/src/sentry/web/frontend/explore.py b/src/sentry/web/frontend/explore.py
deleted file mode 100644
index 4bfa6cc78d..0000000000
--- a/src/sentry/web/frontend/explore.py
+++ /dev/null
@@ -1,116 +0,0 @@
-"""
-sentry.web.frontend.explore
-~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-Contains views for the "Explore" section of Sentry.
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import, division
-
-from sentry.auth import access
-from sentry.models import TagKey, TagValue, Group
-from sentry.web.decorators import has_access
-from sentry.web.helpers import render_to_response
-
-DEFAULT_SORT_OPTION = 'recent'
-SORT_OPTIONS = {
-    'recent': 'Last Seen',
-    'newest': 'First Seen',
-    'events': 'Number of Events',
-}
-
-
-@has_access
-def tag_list(request, organization, project):
-    tag_key_qs = sorted(TagKey.objects.filter(
-        project=project
-    ), key=lambda x: x.get_label())
-
-    tag_value_qs = TagValue.objects.filter(
-        project=project).order_by('-times_seen')
-
-    # O(N) db access
-    tag_list = []
-    for tag_key in tag_key_qs:
-        # prevent some excess queries by binding project
-        tag_key.project = project
-        tag_values = tag_value_qs.filter(key=tag_key.key)[:5]
-        for tag_value in tag_values:
-            tag_value.project = project
-        tag_list.append((tag_key, tag_values))
-
-    return render_to_response('sentry/explore/tag_list.html', {
-        'SECTION': 'explore',
-        'project': project,
-        'team': project.team,
-        'organization': organization,
-        'tag_list': tag_list,
-        'ACCESS': access.from_user(
-            user=request.user,
-            organization=organization,
-        ).to_django_context(),
-    }, request)
-
-
-@has_access
-def tag_value_list(request, organization, project, key):
-    tag_key = TagKey.objects.select_related('project').get(
-        project=project, key=key)
-    tag_values_qs = TagValue.objects.filter(
-        project=project, key=key).select_related('project')
-
-    sort = request.GET.get('sort')
-    if sort not in SORT_OPTIONS:
-        sort = DEFAULT_SORT_OPTION
-
-    if sort == 'recent':
-        tag_values_qs = tag_values_qs.order_by('-last_seen')
-    elif sort == 'newest':
-        tag_values_qs = tag_values_qs.order_by('-first_seen')
-    elif sort == 'events':
-        tag_values_qs = tag_values_qs.order_by('-times_seen')
-
-    return render_to_response('sentry/explore/tag_value_list.html', {
-        'SECTION': 'explore',
-        'project': project,
-        'team': project.team,
-        'organization': organization,
-        'SORT_OPTIONS': SORT_OPTIONS,
-        'sort_label': SORT_OPTIONS[sort],
-        'tag_key': tag_key,
-        'tag_values': tag_values_qs,
-        'ACCESS': access.from_user(
-            user=request.user,
-            organization=project.organization,
-        ).to_django_context(),
-    }, request)
-
-
-@has_access
-def tag_value_details(request, organization, project, key, value_id):
-    tag_key = TagKey.objects.get(
-        project=project, key=key)
-    tag_value = TagValue.objects.get(
-        project=project, key=key, id=value_id)
-
-    event_list = Group.objects.filter(
-        grouptag__project=project,
-        grouptag__key=key,
-        grouptag__value=tag_value.value,
-    ).order_by('-score')
-
-    return render_to_response('sentry/explore/tag_value_details.html', {
-        'SECTION': 'explore',
-        'project': project,
-        'team': project.team,
-        'organization': organization,
-        'tag_key': tag_key,
-        'tag_value': tag_value,
-        'event_list': event_list,
-        'ACCESS': access.from_user(
-            user=request.user,
-            organization=organization,
-        ).to_django_context(),
-    }, request)
diff --git a/src/sentry/web/frontend/explore_code.py b/src/sentry/web/frontend/explore_code.py
deleted file mode 100644
index f86f83d733..0000000000
--- a/src/sentry/web/frontend/explore_code.py
+++ /dev/null
@@ -1,79 +0,0 @@
-"""
-sentry.web.frontend.explore_code
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from sentry.models import TagValue, Group
-from sentry.web.decorators import login_required, has_access
-from sentry.web.helpers import render_to_response
-
-DEFAULT_SORT_OPTION = 'recent'
-SORT_OPTIONS = {
-    'recent': 'Last Seen',
-    'newest': 'First Seen',
-    'events': 'Number of Events',
-}
-
-
-@has_access
-@login_required
-def list_tag(request, organization, project, selection):
-    assert selection in ('filenames', 'functions')
-
-    tag_name = selection[:-1]
-
-    sort = request.GET.get('sort')
-    if sort not in SORT_OPTIONS:
-        sort = DEFAULT_SORT_OPTION
-
-    tag_list = TagValue.objects.filter(project=project, key='sentry:%s' % (tag_name,))
-
-    if sort == 'recent':
-        tag_list = tag_list.order_by('-last_seen')
-    elif sort == 'newest':
-        tag_list = tag_list.order_by('-first_seen')
-    elif sort == 'events':
-        tag_list = tag_list.order_by('-times_seen')
-
-    return render_to_response('sentry/explore/code/list_tag.html', {
-        'organization': organization,
-        'team': project.team,
-        'project': project,
-        'tag_list': tag_list,
-        'selection': selection,
-        'sort_label': SORT_OPTIONS[sort],
-        'SORT_OPTIONS': SORT_OPTIONS,
-    }, request)
-
-
-@has_access
-@login_required
-def tag_details(request, organization, project, selection, tag_id):
-    assert selection in ('filenames', 'functions')
-
-    tag_name = selection[:-1]
-
-    tag = TagValue.objects.get(
-        project=project,
-        key='sentry:%s' % (tag_name,),
-        id=tag_id,
-    )
-
-    event_list = Group.objects.filter(
-        grouptag__project=project,
-        grouptag__key='sentry:%s' % (tag_name,),
-        grouptag__value=tag.value,
-    )
-
-    return render_to_response('sentry/explore/code/tag_details.html', {
-        'organization': organization,
-        'team': project.team,
-        'project': project,
-        'tag': tag,
-        'selection': selection,
-        'event_list': event_list,
-    }, request)
diff --git a/src/sentry/web/frontend/users.py b/src/sentry/web/frontend/users.py
deleted file mode 100644
index c7143b82dd..0000000000
--- a/src/sentry/web/frontend/users.py
+++ /dev/null
@@ -1,71 +0,0 @@
-"""
-sentry.web.frontend.users
-~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from sentry.models import TagValue, Group
-from sentry.web.decorators import login_required, has_access
-from sentry.web.helpers import render_to_response
-
-DEFAULT_SORT_OPTION = 'recent'
-SORT_OPTIONS = {
-    'recent': 'Last Seen',
-    'newest': 'First Seen',
-    'events': 'Number of Events',
-}
-
-
-@has_access
-@login_required
-def user_list(request, organization, project):
-    sort = request.GET.get('sort')
-    if sort not in SORT_OPTIONS:
-        sort = DEFAULT_SORT_OPTION
-
-    tag_list = TagValue.objects.filter(project=project, key='sentry:user')
-
-    if sort == 'recent':
-        tag_list = tag_list.order_by('-last_seen')
-    elif sort == 'newest':
-        tag_list = tag_list.order_by('-first_seen')
-    elif sort == 'events':
-        tag_list = tag_list.order_by('-times_seen')
-
-    return render_to_response('sentry/users/list.html', {
-        'team': project.team,
-        'organization': organization,
-        'project': project,
-        'tag_list': tag_list,
-        'sort_label': SORT_OPTIONS[sort],
-        'SECTION': 'users',
-        'SORT_OPTIONS': SORT_OPTIONS,
-    }, request)
-
-
-@has_access
-@login_required
-def user_details(request, organization, project, user_id):
-    tag = TagValue.objects.get(
-        project=project,
-        key='sentry:user',
-        id=user_id,
-    )
-
-    event_list = Group.objects.filter(
-        grouptag__project=project,
-        grouptag__key='sentry:user',
-        grouptag__value=tag.value,
-    )
-
-    return render_to_response('sentry/users/details.html', {
-        'team': project.team,
-        'organization': organization,
-        'project': project,
-        'tag': tag,
-        'event_list': event_list,
-        'SECTION': 'users',
-    }, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 38186cf09d..bf2476c0d8 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -20,8 +20,7 @@ import sentry.web.frontend.projects.tags
 
 from sentry.web import api
 from sentry.web.frontend import (
-    accounts, generic, groups, events,
-    admin, users, explore, explore_code,
+    accounts, generic, groups, events, admin
 )
 
 from sentry.web.frontend.admin_queue import AdminQueueView
@@ -335,30 +334,6 @@ urlpatterns += patterns('',
     url(r'^(?P<organization_slug>[\w_-]+)/teams/(?P<team_slug>[\w_-]+)/wall/$', groups.wall_display,
         name='sentry-wall'),
 
-    # Explore - Users
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/$',
-        users.user_list, name='sentry-users'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/users/(?P<user_id>\d+)/$',
-        users.user_details, name='sentry-user-details'),
-
-    # Explore - Code
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/$', explore_code.list_tag,
-        {'selection': 'filenames'}, name='sentry-explore-code'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/function/$', explore_code.list_tag,
-        {'selection': 'functions'}, name='sentry-explore-code-by-function'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/filename/(?P<tag_id>\d+)/$',
-        explore_code.tag_details, {'selection': 'filenames'}, name='sentry-explore-code-details'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/code/by/function/(?P<tag_id>\d+)/$',
-        explore_code.tag_details, {'selection': 'functions'}, name='sentry-explore-code-details-by-function'),
-
-    # Explore
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/$', explore.tag_list,
-        name='sentry-explore'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/$', explore.tag_value_list,
-        name='sentry-explore-tag'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/(?P<value_id>\d+)/$', explore.tag_value_details,
-        name='sentry-explore-tag-value'),
-
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/$', ReactPageView.as_view(),
         name='sentry-group'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/activity/$', ReactPageView.as_view(),
diff --git a/tests/sentry/web/frontend/users/__init__.py b/tests/sentry/web/frontend/users/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/web/frontend/users/tests.py b/tests/sentry/web/frontend/users/tests.py
deleted file mode 100644
index c8d503f9f9..0000000000
--- a/tests/sentry/web/frontend/users/tests.py
+++ /dev/null
@@ -1,79 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import, print_function
-
-import logging
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import TagValue
-from sentry.testutils import TestCase
-
-logger = logging.getLogger(__name__)
-
-
-class UserListTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-users', args=[
-            self.organization.slug, self.project.slug])
-
-    def test_missing_permission(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
-
-    def test_invalid_team_slug(self):
-        resp = self.client.get(reverse('sentry-users', args=['a', 'b']))
-        assert resp.status_code == 302
-
-    def test_does_render(self):
-        self.login_as(self.user)
-
-        tag = TagValue.objects.create(
-            project=self.project,
-            key='sentry:user',
-            value='foo',
-        )
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/users/list.html')
-        assert resp.context['team'] == self.team
-        assert resp.context['SECTION'] == 'users'
-        assert list(resp.context['tag_list']) == [tag]
-
-
-class UserDetailsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-user-details', args=[
-            self.organization.slug, self.project.slug, self.tag.id])
-
-    @fixture
-    def tag(self):
-        return TagValue.objects.create(
-            project=self.project,
-            key='sentry:user',
-            value='foo',
-        )
-
-    def test_missing_permission(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
-
-    def test_invalid_tuser_id(self):
-        resp = self.client.get(reverse('sentry-user-details', args=[
-            self.organization.slug, self.project.slug, 0]))
-        assert resp.status_code == 302
-
-    def test_does_load(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/users/details.html')
-        assert resp.context['team'] == self.team
-        assert resp.context['tag'] == self.tag
-        assert resp.context['SECTION'] == 'users'
