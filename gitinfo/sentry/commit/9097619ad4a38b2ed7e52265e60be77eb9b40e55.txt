commit 9097619ad4a38b2ed7e52265e60be77eb9b40e55
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Jan 18 13:27:13 2017 +0100

    Apple Crash Report download (#4750)
    
    * Add EventAppleCrashReportEndpoint, Make debug_meta not ephemeral
    
    * Generate binary images string
    
    * Generate thread apple string
    
    * Add meta header, Create text response
    
    * Fetch apple crash report in frontend
    
    * Add parameter for symbolicated or unsymbolicated report
    
    * Add download button for report
    
    * Cleanup code, Add CHANGES entry
    
    * Fix spacing between frame addresses
    
    * Strip none native frames from crash report
    
    * Move helper functions to AppleCrashReport class, Lookup slide value in debug images
    
    * Use parse_addr instead of int
    
    * Use six and text_type instead __str__
    
    * Add debugmeta interface

diff --git a/CHANGES b/CHANGES
index 2c14f3bcc0..0343e2cc8d 100644
--- a/CHANGES
+++ b/CHANGES
@@ -6,7 +6,8 @@ Version 8.13 (Unreleased)
 - start using ReleaseProject and Release.organization instead of Release.project
 - Project quotas are no longer available, and must now be configured via the organizational rate limits.
 - Quotas implementation now requires a tuple of maximum rate and interval window.
-- Add memory and storage information for apple devices.
+- Added the ability to download an apple compatible crash report for cocoa events.
+- Add memory and storage information for apple devices
 - The legacy API keys feature is now disabled by default.
 
 Version 8.12
diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
new file mode 100644
index 0000000000..1c7d9ed345
--- /dev/null
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -0,0 +1,75 @@
+from __future__ import absolute_import
+
+import six
+
+from django.http import HttpResponse, CompatibleStreamingHttpResponse
+
+from sentry.api.base import Endpoint
+from sentry.api.bases.group import GroupPermission
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import Event
+from sentry.lang.native.applecrashreport import AppleCrashReport
+
+
+class EventAppleCrashReportEndpoint(Endpoint):
+    permission_classes = (GroupPermission,)
+
+    def get(self, request, event_id):
+        """
+        Retrieve an Apple Crash Report from and event
+        `````````````````````````````````````````````
+
+        This endpoint returns the an apple crash report for a specific event.
+        The event ID is the event as it appears in the Sentry database
+        and not the event ID that is reported by the client upon submission.
+        This works only if the event.platform == cocoa
+        """
+        try:
+            event = Event.objects.get(
+                id=event_id
+            )
+        except Event.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        self.check_object_permissions(request, event.group)
+
+        Event.objects.bind_nodes([event], 'data')
+
+        if event.platform != 'cocoa':
+            return HttpResponse({
+                'message': 'Only cocoa events can return an apple crash report',
+            }, status=403)
+
+        threads = event.data.get(
+            'sentry.interfaces.threads',
+            event.data.get('threads'
+        )).get('values')
+
+        symbolicated = (request.GET.get('minified') not in ('1', 'true'))
+        debug_images = None
+        if (event.data.get('debug_meta') and
+           event.data.get('debug_meta').get('images')):
+            debug_images = event.data.get('debug_meta').get('images')
+
+        apple_crash_report_string = six.text_type(AppleCrashReport(
+            threads=threads,
+            context=event.data.get('contexts'),
+            debug_images=debug_images,
+            symbolicated=symbolicated
+        ))
+
+        response = HttpResponse(apple_crash_report_string, content_type='text/plain')
+
+        if request.GET.get('download') is not None:
+            filename = "{}{}.crash".format(
+                event.event_id,
+                symbolicated and '-symbolicated' or ''
+            )
+            response = CompatibleStreamingHttpResponse(
+                apple_crash_report_string,
+                content_type='text/plain',
+            )
+            response['Content-Length'] = len(apple_crash_report_string)
+            response['Content-Disposition'] = 'attachment; filename="%s"' % filename
+
+        return response
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 26a340834d..68d4c58246 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -7,6 +7,7 @@ from .endpoints.auth_index import AuthIndexEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
+from .endpoints.event_apple_crash_report import EventAppleCrashReportEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_environment_details import GroupEnvironmentDetailsEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
@@ -387,6 +388,9 @@ urlpatterns = patterns(
     url(r'^events/(?P<event_id>\d+)/$',
         EventDetailsEndpoint.as_view(),
         name='sentry-api-0-event-details'),
+    url(r'^events/(?P<event_id>\d+)/apple-crash-report$',
+        EventAppleCrashReportEndpoint.as_view(),
+        name='sentry-api-0-event-apple-crash-report'),
 
     # Installation Global Endpoints
     url(r'^system/global-dsyms/$',
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index b34fe298bf..327c99e8c1 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -49,7 +49,7 @@ class DebugMeta(Interface):
         a list of debug images and their mappings.
     """
 
-    ephemeral = True
+    ephemeral = False
 
     @classmethod
     def to_python(cls, data):
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
new file mode 100644
index 0000000000..4849856ee4
--- /dev/null
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -0,0 +1,127 @@
+from __future__ import absolute_import
+
+from sentry.utils.compat import implements_to_string
+from sentry.utils.native import parse_addr
+
+REPORT_VERSION = '104'
+
+
+@implements_to_string
+class AppleCrashReport(object):
+
+    def __init__(self, threads=None, context=None,
+                debug_images=None, symbolicated=False):
+        self.threads = threads
+        self.context = context
+        self.debug_images = debug_images
+        self.symbolicated = symbolicated
+
+    def __str__(self):
+        rv = []
+        rv.append(self._get_meta_header())
+        rv.append(self.get_threads_apple_string())
+        rv.append(self.get_binary_images_apple_string())
+        return '\n\n'.join(rv) + '\n\nEOF'
+
+    def _get_meta_header(self):
+        return "OS Version: {} {} ({})\nReport Version: {}".format(
+            self.context.get('os').get('name'),
+            self.context.get('os').get('version'),
+            self.context.get('os').get('build'),
+            REPORT_VERSION
+        )
+
+    def get_threads_apple_string(self):
+        rv = []
+        for thread in self.threads:
+            thread_string = self.get_thread_apple_string(thread)
+            if thread_string is not None:
+                rv.append(thread_string)
+        return "\n\n".join(rv)
+
+    def get_thread_apple_string(self, thread):
+        rv = []
+        stacktrace = thread.get('stacktrace')
+        if stacktrace is None:
+            return None
+        if stacktrace:
+            frames = stacktrace.get('frames')
+            if frames:
+                i = 0
+                for frame in reversed(frames):
+                    frame_string = self._convert_frame_to_apple_string(
+                        frame=frame,
+                        number=i
+                    )
+                    if frame_string is not None:
+                        rv.append(frame_string)
+                        i += 1
+
+        if len(rv) == 0:
+            return None  # No frames in thread, so we remove thread
+        thread_string = 'Thread {} name: {}\n'.format(thread['id'],
+            thread['name'] and thread['name'] or ''
+        )
+        if thread['crashed']:
+            thread_string += 'Thread {} Crashed:\n'.format(thread['id'])
+        return thread_string + "\n".join(rv)
+
+    def _convert_frame_to_apple_string(self, frame, number=0):
+        if frame.get('instruction_addr') is None:
+            return None
+        slide_value = self._get_slide_value(frame['image_addr'])
+        instruction_addr = slide_value + parse_addr(frame['instruction_addr'])
+        image_addr = slide_value + parse_addr(frame['image_addr'])
+        offset = ''
+        if frame['image_addr'] is not None and not self.symbolicated:
+            offset = ' + {}'.format(
+                instruction_addr - slide_value - parse_addr(frame['symbol_addr'])
+            )
+        symbol = hex(image_addr)
+        if self.symbolicated:
+            file = ''
+            if frame.get('filename') and frame.get('lineno'):
+                file = " ({}:{})".format(
+                    frame['filename'],
+                    frame['lineno']
+                )
+            symbol = "{}{}".format(
+                frame['function'],
+                file
+            )
+        return "{}{}{}{}{}".format(
+            str(number).ljust(4, " "),
+            frame['package'].rsplit('/', 1)[-1].ljust(32, " "),
+            hex(instruction_addr).ljust(20, " "),
+            symbol,
+            offset
+        )
+
+    def _get_slide_value(self, image_addr):
+        if self.debug_images:
+            for debug_image in self.debug_images:
+                if parse_addr(debug_image['image_addr']) == parse_addr(image_addr):
+                    return parse_addr(debug_image['image_vmaddr'])
+        return 0
+
+    def get_binary_images_apple_string(self):
+        # We dont need binary images on symbolicated crashreport
+        if self.symbolicated or self.debug_images is None:
+            return ''
+        binary_images = map(lambda i:
+            self._convert_debug_meta_to_binary_image_row(debug_image=i),
+            sorted(self.debug_images, key=lambda i: parse_addr(i['image_addr'])
+        ))
+        return "Binary Images:\n" + "\n".join(binary_images)
+
+    def _convert_debug_meta_to_binary_image_row(self, debug_image):
+        slide_value = parse_addr(debug_image['image_vmaddr'])
+        image_addr = parse_addr(debug_image['image_addr']) + slide_value
+        return "{} - {} {} {}  <{}> {}".format(
+            hex(image_addr),
+            hex(image_addr + debug_image['image_size'] - 1),
+            debug_image['name'].rsplit('/', 1)[-1],
+            self.context['device']['arch'],
+            debug_image['uuid'].replace('-', '').lower(),
+            debug_image['name']
+        )
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index e8f1e35bc4..aba337e2ed 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -23,6 +23,7 @@ import TemplateInterface from './interfaces/template';
 import CspInterface from './interfaces/csp';
 import BreadcrumbsInterface from './interfaces/breadcrumbs';
 import ThreadsInterface from './interfaces/threads';
+import DebugMetaInterface from './interfaces/debugmeta';
 
 export const INTERFACES = {
   exception: ExceptionInterface,
@@ -33,6 +34,7 @@ export const INTERFACES = {
   csp: CspInterface,
   breadcrumbs: BreadcrumbsInterface,
   threads: ThreadsInterface,
+  debugmeta: DebugMetaInterface,
 };
 
 const EventEntries = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
index 555785225d..00b7c6618f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -22,6 +22,7 @@ const CrashContent = React.createClass({
     return (
       stackView === 'raw' ?
         <RawExceptionContent
+          eventId={event.id}
           type={stackType}
           values={exception.values}
           platform={event.platform} /> :
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
new file mode 100644
index 0000000000..0b8b957a4c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -0,0 +1,40 @@
+import React from 'react';
+import PropTypes from '../../../proptypes';
+import EventDataSection from '../eventDataSection';
+import ClippedBox from '../../clippedBox';
+import KeyValueList from './keyValueList';
+import {t} from '../../../locale';
+
+const DebugMetaInterface = React.createClass({
+  propTypes: {
+    group: PropTypes.Group.isRequired,
+    event: PropTypes.Event.isRequired,
+    data: React.PropTypes.object.isRequired
+  },
+
+  render() {
+    let data = this.props.data;
+
+    // TODO(hazat): don't use image.uuid should be version number
+    // as soon as this is implemented in KSCrash
+    let images = data.images.map(
+        (image) => [image.name.split('/').pop(), image.uuid]
+    );
+
+    return (
+      <div>
+        <EventDataSection
+            group={this.props.group}
+            event={this.props.event}
+            type="packages"
+            title={t('Images Loaded')}>
+            <ClippedBox>
+                <KeyValueList data={images} isSorted={false} />
+            </ClippedBox>
+        </EventDataSection>
+      </div>
+    );
+  }
+});
+
+export default DebugMetaInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index cc9046c151..5c9a1e48c1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -1,20 +1,99 @@
 import React from 'react';
 import rawStacktraceContent from './rawStacktraceContent';
+import ApiMixin from '../../../mixins/apiMixin';
+import LoadingIndicator from '../../loadingIndicator';
+import LoadingError from '../../loadingError';
+import ClippedBox from '../../clippedBox';
 
 const RawExceptionContent = React.createClass({
   propTypes: {
     type: React.PropTypes.oneOf(['original', 'minified']),
     platform: React.PropTypes.string,
+    eventId: React.PropTypes.string,
     values: React.PropTypes.array.isRequired,
   },
 
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+      crashReport: ''
+    };
+  },
+
+  componentDidMount() {
+    if (this.props.platform == 'cocoa') {
+      this.fetchAppleCrashReport();
+    }
+  },
+
+  componentDidUpdate(prevProps) {
+    if (this.props.platform == 'cocoa' && this.props.type !== prevProps.type) {
+      this.fetchAppleCrashReport();
+    }
+  },
+
+  getAppleCrashReportEndpoint() {
+    let minified = this.props.type == 'minified';
+    return `/events/${this.props.eventId}/apple-crash-report?minified=${minified}`;
+  },
+
+  fetchAppleCrashReport() {
+    this.setState({
+      loading: true,
+      error: false,
+      crashReport: ''
+    });
+    this.api.request(this.getAppleCrashReportEndpoint(), {
+      method: 'GET',
+      success: (data) => {
+        this.setState({
+          error: false,
+          loading: false,
+          crashReport: data
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
   render() {
     let {type} = this.props;
+    let downloadButton;
     let children = this.props.values.map((exc, excIdx) => {
+      let content = exc.stacktrace && rawStacktraceContent(type === 'original' ? exc.stacktrace : exc.rawStacktrace, this.props.platform, exc);
+      if (this.props.platform == 'cocoa') {
+        if (this.state.loading)
+          content = <LoadingIndicator />;
+        else if (this.state.error)
+          content = <LoadingError onRetry={this.fetchData} />;
+        else if (!this.state.loading && this.state.crashReport != '') {
+          content = (<ClippedBox clipHeight={250}>
+            {this.state.crashReport}
+          </ClippedBox>);
+          downloadButton = (<a
+            href={this.api.baseUrl + this.getAppleCrashReportEndpoint() + `&download=1`}
+            className="btn btn-default btn-sm pull-right">
+              Download
+          </a>);
+        }
+
+      }
+
       return (
-        <pre key={excIdx} className="traceback plain">
-          {exc.stacktrace && rawStacktraceContent(type === 'original' ? exc.stacktrace : exc.rawStacktrace, this.props.platform, exc)}
-        </pre>
+        <div>
+          {downloadButton}
+          <pre key={excIdx} className="traceback plain">
+            {content}
+          </pre>
+        </div>
       );
     });
 
diff --git a/tests/sentry/lang/native/test_applecrashreport.py b/tests/sentry/lang/native/test_applecrashreport.py
new file mode 100644
index 0000000000..4dcf8be9d1
--- /dev/null
+++ b/tests/sentry/lang/native/test_applecrashreport.py
@@ -0,0 +1,314 @@
+from __future__ import absolute_import
+
+from sentry.lang.native.applecrashreport import AppleCrashReport
+
+
+def test_get_threads_apple_string():
+    acr = AppleCrashReport(threads=[
+        {'crashed': True,
+        'current': True,
+        'id': 1,
+        'name': None,
+        'stacktrace': {'frames': [
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+             'colno': 0,
+             'filename': 'SentrySwizzle.swift',
+             'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x31caa4',
+             'lineno': 0,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+             'symbol_addr': '0x31ca38'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+             'colno': 84,
+             'filename': 'SentrySwizzle.swift',
+             'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x31c3e8',
+             'lineno': 92,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+             'symbol_addr': '0x31b9f8'}]
+        }},
+        {'crashed': False,
+        'current': False,
+        'id': 2,
+        'name': 'com.apple.test',
+        'stacktrace': {'frames': [
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+             'colno': 0,
+             'filename': 'ViewController.swift',
+             'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
+             'image_addr': '0xf0000',
+             'in_app': True,
+             'instruction_addr': '0xf6cd4',
+             'lineno': 0,
+             'object_addr': '0xf0000',
+             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+             'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+             'symbol_addr': '0xf6c98'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+             'colno': 36,
+             'filename': 'ViewController.swift',
+             'function': 'ViewController.onClickFatalError(AnyObject) -> ()',
+             'image_addr': '0xf0000',
+             'in_app': True,
+             'instruction_addr': '0xf6c78',
+             'lineno': 110,
+             'object_addr': '0xf0000',
+             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+             'symbol': '_TFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+             'symbol_addr': '0xf6c04'}]
+        }},
+    ])
+    threads = acr.get_threads_apple_string()
+    assert threads == 'Thread 1 name: \n\
+Thread 1 Crashed:\n\
+0   SentrySwift                     0x31c3e8            0x2c8000 + 2544\n\
+1   SentrySwift                     0x31caa4            0x2c8000 + 108\n\n\
+Thread 2 name: com.apple.test\n\
+0   SwiftExample                    0xf6c78             0xf0000 + 116\n\
+1   SwiftExample                    0xf6cd4             0xf0000 + 60'
+
+
+# 0   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
+# 1   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
+# 2   SentrySwift                     0x0000000100312308 @objc SentryClient.crash() -> () (Sentry.swift:0)
+# 3   SwiftExample                    0x00000001000f6c78 ViewController.onClickFatalError(AnyObject) -> () (ViewController.swift:110)
+# 4   SwiftExample                    0x00000001000f6cd4 @objc ViewController.onClickFatalError(AnyObject) -> () (ViewController.swift:0)
+# 5   UIKit                           0x000000018755fd30 -[UIApplication sendAction:to:from:forEvent:] + 96
+# 6   SentrySwift                     0x000000010031c3e8 UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:92)
+# 7   SentrySwift                     0x000000010031caa4 @objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:0)
+
+# 0   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
+# 1   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
+# 2   SentrySwift                     0x0000000100312308 0x1002c8000 + 303880
+# 3   SwiftExample                    0x00000001000f6c78 0x1000f0000 + 27768
+# 4   SwiftExample                    0x00000001000f6cd4 0x1000f0000 + 27860
+# 5   UIKit                           0x000000018755fd30 0x18751b000 + 281904
+# 6   SentrySwift                     0x000000010031c3e8 0x1002c8000 + 345064
+# 7   SentrySwift                     0x000000010031caa4 0x1002c8000 + 346788
+
+
+def test_get_thread_apple_string():
+    acr = AppleCrashReport()
+    thread = acr.get_thread_apple_string({
+        'crashed': True,
+        'current': False,
+        'id': 1,
+        'name': None,
+        'stacktrace': {'frames': [
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+             'colno': 0,
+             'filename': 'SentrySwizzle.swift',
+             'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x31caa4',
+             'lineno': 0,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+             'symbol_addr': '0x31ca38'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+             'colno': 84,
+             'filename': 'SentrySwizzle.swift',
+             'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x31c3e8',
+             'lineno': 92,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+             'symbol_addr': '0x31b9f8'},
+            {'function': '<redacted>',
+             'image_addr': '0x8751b000',
+             'in_app': False,
+             'instruction_addr': '0x8755fd30',
+             'package': '/System/Library/Frameworks/UIKit.framework/UIKit',
+             'symbol_addr': '0x8755fcd0'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+             'colno': 0,
+             'filename': 'ViewController.swift',
+             'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
+             'image_addr': '0xf0000',
+             'in_app': True,
+             'instruction_addr': '0xf6cd4',
+             'lineno': 0,
+             'object_addr': '0xf0000',
+             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+             'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+             'symbol_addr': '0xf6c98'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+             'colno': 36,
+             'filename': 'ViewController.swift',
+             'function': 'ViewController.onClickFatalError(AnyObject) -> ()',
+             'image_addr': '0xf0000',
+             'in_app': True,
+             'instruction_addr': '0xf6c78',
+             'lineno': 110,
+             'object_addr': '0xf0000',
+             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+             'symbol': '_TFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+             'symbol_addr': '0xf6c04'},
+            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/Sentry.swift',
+             'colno': 0,
+             'filename': 'Sentry.swift',
+             'function': '@objc SentryClient.crash() -> ()',
+             'image_addr': '0x2c8000',
+             'in_app': False,
+             'instruction_addr': '0x312308',
+             'lineno': 0,
+             'object_addr': '0x2c8000',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+             'symbol': '_TToFC11SentrySwift12SentryClient5crashfT_T_',
+             'symbol_addr': '0x312280'},
+            {'function': 'specialized _assertionFailed(StaticString, String, StaticString, UInt) -> ()',
+             'image_addr': '0x3f8000',
+             'in_app': False,
+             'instruction_addr': '0x556cc4',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/libswiftCore.dylib',
+             'symbol_addr': '0x556c24'},
+            {'function': 'specialized _assertionFailed(StaticString, String, StaticString, UInt) -> ()',
+             'image_addr': '0x3f8000',
+             'in_app': False,
+             'instruction_addr': '0x556cc4',
+             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/libswiftCore.dylib',
+             'symbol_addr': '0x556c24'}
+        ]}
+    })
+    # TODO(hazat): the address here in a real crash is 0x0000000100556cc4 but we just get 0x556cc4
+    assert thread == 'Thread 1 name: \n\
+Thread 1 Crashed:\n\
+0   libswiftCore.dylib              0x556cc4            0x3f8000 + 160\n\
+1   libswiftCore.dylib              0x556cc4            0x3f8000 + 160\n\
+2   SentrySwift                     0x312308            0x2c8000 + 136\n\
+3   SwiftExample                    0xf6c78             0xf0000 + 116\n\
+4   SwiftExample                    0xf6cd4             0xf0000 + 60\n\
+5   UIKit                           0x8755fd30          0x8751b000 + 96\n\
+6   SentrySwift                     0x31c3e8            0x2c8000 + 2544\n\
+7   SentrySwift                     0x31caa4            0x2c8000 + 108'
+
+
+def test__convert_frame_to_apple_string():
+    acr = AppleCrashReport()
+    frame = acr._convert_frame_to_apple_string(frame={'abs_path': None,
+        'colno': 0,
+        'function': 'SentryClient.crash() -> ()',
+        'image_addr': '0xabd7000',
+        'in_app': False,
+        'instruction_addr': '0xac24ab6',
+        'lineno': 0,
+        'package': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/4C903BE8-ED5E-414A-AC42-2D4ACCACE781/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+        'symbol': '_TFC11SentrySwift12SentryClient5crashfT_T_',
+        'symbol_addr': '0xac24a10'
+    })
+    assert frame == '0   SentrySwift                     0xac24ab6           0xabd7000 + 166'
+    acr2 = AppleCrashReport(symbolicated=True)
+    frame_symbolicated = acr2._convert_frame_to_apple_string(frame={'abs_path': None,
+        'colno': 0,
+        'function': 'SentryClient.crash() -> ()',
+        'image_addr': '0xabd7000',
+        'in_app': False,
+        'instruction_addr': '0xac24ab6',
+        'lineno': 0,
+        'package': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/4C903BE8-ED5E-414A-AC42-2D4ACCACE781/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+        'symbol': '_TFC11SentrySwift12SentryClient5crashfT_T_',
+        'symbol_addr': '0xac24a10'
+    }, number=1)
+    assert frame_symbolicated == '1   SentrySwift                     0xac24ab6           SentryClient.crash() -> ()'
+
+
+def test_get_binary_images_apple_string():
+    acr = AppleCrashReport(debug_images=[
+        {'cpu_subtype': 3,
+        'cpu_type': 16777223,
+        'image_addr': '0x141c5000',
+        'image_size': 20480,
+        'image_vmaddr': '0x0',
+        'name': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8C286977-D498-44FF-B7BE-42BFE3DE38BD/SwiftExample.app/Frameworks/libswiftContacts.dylib',
+        'type': 'apple',
+        'uuid': '4B5A054F-B7A1-3AD0-81E1-513B4DBE2A33'},
+        {'cpu_subtype': 3,
+        'cpu_type': 16777223,
+        'image_addr': '0x1400c000',
+        'image_size': 266240,
+        'image_vmaddr': '0x0',
+        'name': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/ContentIndex.framework/ContentIndex',
+        'type': 'apple',
+        'uuid': '766DFB14-72EE-32D2-8961-687D32548F2B'},
+        {'cpu_subtype': 3,
+        'cpu_type': 16777223,
+        'image_addr': '0x1406f000',
+        'image_size': 913408,
+        'image_vmaddr': '0x0',
+        'name': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CorePDF.framework/CorePDF',
+        'type': 'apple',
+        'uuid': 'BE602DC1-D3A0-3389-B8F4-922C37DEA3DC'}
+    ], context={
+        'device': {
+            'arch': 'x86',
+            'family': 'iPhone',
+            'freeMemory': 169684992,
+            'memorySize': 17179869184,
+            'model': 'iPhone9,1',
+            'simulator': True,
+            'storageSize': 249695305728,
+            'type': 'device',
+            'usableMemory': 14919622656
+        },
+        'os': {
+            'build': '16C67',
+            'bundleID': 'com.rokkincat.SentryExample',
+            'bundleVersion': '2',
+            'kernel_version': 'Darwin Kernel Version 16.3.0: Thu Nov 17 20:23:58 PST 2016; root:xnu-3789.31.2~1/RELEASE_X86_64',
+            'name': 'iOS',
+            'type': 'os',
+            'version': '10.2'
+        }
+    })
+    binary_images = acr.get_binary_images_apple_string()
+    assert binary_images == 'Binary Images:\n\
+0x1400c000 - 0x1404cfff ContentIndex x86  <766dfb1472ee32d28961687d32548f2b> /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/ContentIndex.framework/ContentIndex\n\
+0x1406f000 - 0x1414dfff CorePDF x86  <be602dc1d3a03389b8f4922c37dea3dc> /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CorePDF.framework/CorePDF\n\
+0x141c5000 - 0x141c9fff libswiftContacts.dylib x86  <4b5a054fb7a13ad081e1513b4dbe2a33> /Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8C286977-D498-44FF-B7BE-42BFE3DE38BD/SwiftExample.app/Frameworks/libswiftContacts.dylib'
+
+
+def test__convert_debug_meta_to_binary_image_row():
+    acr = AppleCrashReport(context={'device':
+        {'arch': 'x86',
+         'family': 'iPhone',
+         'freeMemory': 169684992,
+         'memorySize': 17179869184,
+         'model': 'iPhone9,1',
+         'simulator': True,
+         'storageSize': 249695305728,
+         'type': 'device',
+         'usableMemory': 14919622656
+         },
+        'os': {'build': '16C67',
+         'bundleID': 'com.rokkincat.SentryExample',
+         'bundleVersion': '2',
+         'kernel_version': 'Darwin Kernel Version 16.3.0: Thu Nov 17 20:23:58 PST 2016; root:xnu-3789.31.2~1/RELEASE_X86_64',
+         'name': 'iOS',
+         'type': 'os',
+         'version': '10.2'
+         }
+    })
+    binary_image = acr._convert_debug_meta_to_binary_image_row(debug_image={
+        'cpu_subtype': 3,
+        'cpu_type': 16777223,
+        'image_addr': '0xd69a000',
+        'image_size': 495616,
+        'image_vmaddr': '0x0',
+        'name': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8F8140DF-B25B-4088-B5FB-57F474A49CD6/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+        'type': 'apple',
+        'uuid': 'B427AE1D-BF36-3B50-936F-D78A7D1C8340'
+    })
+    assert binary_image == '0xd69a000 - 0xd712fff SentrySwift x86  <b427ae1dbf363b50936fd78a7d1c8340> /Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8F8140DF-B25B-4088-B5FB-57F474A49CD6/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift'
