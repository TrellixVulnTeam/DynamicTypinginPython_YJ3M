commit 985d7528283d22ed160cfe7f3d22cc859e6b11ea
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 12 16:38:49 2018 -0700

    ref: Remove duplicated projects from organization details
    
    This refactors a large amount of UI components to stop using `team.projects` and instead rely on the `project.teams` association to identify which teams are associated to which projects.
    
    The primary initial motivator here is the huge performance hit both in response payload but also in serialization.

diff --git a/docs/cli/repair/index.rst b/docs/cli/repair/index.rst
index 18b5268979..c153b1935d 100644
--- a/docs/cli/repair/index.rst
+++ b/docs/cli/repair/index.rst
@@ -6,14 +6,11 @@ Attempt to repair any invalid data.
 This by default will correct some common issues like projects missing
 DSNs or counters desynchronizing.  Optionally it can also synchronize
 the current client documentation from the Sentry documentation server
-(--with-docs) and repair missing or broken callsigns and short IDs
-(--with-callsigns).
+(--with-docs).
 
 Options
 ```````
 
 - ``--with-docs / --without-docs``: Synchronize and repair embedded
   documentation. This is disabled by default.
-- ``--with-callsigns / --without-callsigns``: Repair and fill callsigns.
-  This is disabled by default.
 - ``--help``: print this help page.
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index fa856b34db..5300afe5f3 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -45,7 +45,10 @@ class OrganizationPermission(ScopedPermission):
             )
 
         elif request.auth:
-            return request.auth.organization_id == organization.id
+            if request.auth.organization_id == organization.id:
+                request.access = access.from_auth(request.auth)
+            else:
+                request.access = access.DEFAULT
 
         else:
             request.access = access.from_request(request, organization)
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 2ed2b0c051..d0c7507a56 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -9,9 +9,6 @@ from .organization import OrganizationPermission
 
 
 def has_team_permission(request, team, scope_map):
-    if not (request.user and request.user.is_authenticated()) and request.auth:
-        return request.auth.organization_id == team.organization.id
-
     allowed_scopes = set(scope_map.get(request.method, []))
     return any(request.access.has_team_scope(team, s) for s in allowed_scopes)
 
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 2183aac0b6..c42d2a8d15 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -349,6 +349,7 @@ class GroupSerializer(Serializer):
             'statusDetails': status_details,
             'isPublic': share_id is not None,
             'project': {
+                'id': six.text_type(obj.project.id),
                 'name': obj.project.name,
                 'slug': obj.project.slug,
             },
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index d0937a26e3..a5724b4c42 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -70,7 +70,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         from sentry import features
         from sentry.app import env
         from sentry.api.serializers.models.project import ProjectWithTeamSerializer
-        from sentry.api.serializers.models.team import TeamWithProjectsSerializer
+        from sentry.api.serializers.models.team import TeamSerializer
 
         team_list = list(Team.objects.filter(
             organization=obj,
@@ -165,8 +165,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             'safeFields': obj.get_option('sentry:safe_fields', None) or [],
             'scrubIPAddresses': bool(obj.get_option('sentry:require_scrub_ip_address', False)),
         })
-        # TODO(jess): make this the basic team serializer eventually?
-        context['teams'] = serialize(team_list, user, TeamWithProjectsSerializer())
+        context['teams'] = serialize(team_list, user, TeamSerializer())
         context['projects'] = serialize(project_list, user, ProjectWithTeamSerializer())
         if env.request:
             context['access'] = access.from_request(env.request, obj).scopes
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 049aa4649e..8ac1746abf 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -164,7 +164,6 @@ class ProjectSerializer(Serializer):
             'name': obj.name,
             'isPublic': obj.public,
             'isBookmarked': attrs['is_bookmarked'],
-            'callSign': obj.callsign,
             'color': obj.color,
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
@@ -204,18 +203,19 @@ class ProjectWithTeamSerializer(ProjectSerializer):
         attrs = super(ProjectWithTeamSerializer,
                       self).get_attrs(item_list, user)
 
-        project_teams = list(
-            ProjectTeam.objects.filter(
-                project__in=item_list,
-            ).select_related('team')
-        )
+        project_teams = list(ProjectTeam.objects.filter(
+            project__in=item_list,
+        ).select_related('team'))
 
-        teams = {d['id']: d for d in serialize(
-            list(set(pt.team for pt in project_teams)), user)}
+        teams = {pt.team_id: {
+            'id': six.text_type(pt.team.id),
+            'slug': pt.team.slug,
+            'name': pt.team.name,
+        } for pt in project_teams}
 
         teams_by_project_id = defaultdict(list)
         for pt in project_teams:
-            teams_by_project_id[pt.project_id].append(teams[six.text_type(pt.team_id)])
+            teams_by_project_id[pt.project_id].append(teams[pt.team_id])
 
         for item in item_list:
             attrs[item]['teams'] = teams_by_project_id[item.id]
@@ -434,7 +434,6 @@ class SharedProjectSerializer(Serializer):
         return {
             'slug': obj.slug,
             'name': obj.name,
-            'callSign': obj.callsign,
             'color': obj.color,
             'features': feature_list,
             'organization': {
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index a33efeead9..a748e03cc5 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -5,6 +5,7 @@ __all__ = ['from_user', 'from_member', 'DEFAULT']
 import warnings
 
 from django.conf import settings
+from django.utils.functional import cached_property
 
 from sentry import roles
 from sentry.auth.superuser import is_active_superuser
@@ -140,6 +141,10 @@ def from_request(request, organization, scopes=None):
             requires_sso=requires_sso,
             permissions=UserPermission.for_user(request.user.id),
         )
+
+    if hasattr(request, 'auth') and not request.user.is_authenticated():
+        return from_auth(request.auth, scopes=scopes)
+
     return from_user(request.user, organization, scopes=scopes)
 
 
@@ -191,6 +196,44 @@ def from_member(member, scopes=None):
     )
 
 
+def from_auth(auth, scopes=None):
+    return OrganizationGlobalAccess(auth.organization, scopes=scopes)
+
+
+class OrganizationGlobalAccess(BaseAccess):
+    requires_sso = False
+    sso_is_valid = True
+    is_active = True
+    memberships = ()
+    permissions = frozenset()
+
+    def __init__(self, organization, scopes=None):
+        if scopes:
+            self.scopes = scopes
+        self.organization = organization
+
+    @cached_property
+    def scopes(self):
+        return settings.SENTRY_SCOPES
+
+    @cached_property
+    def teams(self):
+        from sentry.models import Team
+        return list(Team.objects.filter(organization=self.organization))
+
+    def has_team_access(self, team):
+        return team.organization_id == self.organization.id
+
+    def has_team_membership(self, team):
+        return team.organization_id == self.organization.id
+
+    def has_team_scope(self, team, scope):
+        return team.organization_id == self.organization.id
+
+    def has_scope(self, scope):
+        return True
+
+
 class NoAccess(BaseAccess):
     requires_sso = False
     sso_is_valid = True
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 0a95f0d601..ed8795ccb7 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -83,8 +83,8 @@ class GroupManager(BaseManager):
         match = _short_id_re.match(short_id.strip())
         if match is None:
             raise Group.DoesNotExist()
-        callsign, id = match.groups()
-        callsign = callsign.lower()
+        slug, id = match.groups()
+        slug = slug.lower()
         try:
             short_id = base32_decode(id)
             # We need to make sure the short id is not overflowing the
@@ -96,7 +96,7 @@ class GroupManager(BaseManager):
             raise Group.DoesNotExist()
         return Group.objects.get(
             project__organization=organization_id,
-            project__slug=callsign,
+            project__slug=slug,
             short_id=short_id,
         )
 
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 37f711613e..bfa91ea766 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -172,6 +172,7 @@ class Project(Model):
 
     @property
     def callsign(self):
+        warnings.warn('Project.callsign is deprecated. Use Group.get_short_id() instead.', DeprecationWarning)
         return self.slug.upper()
 
     @property
diff --git a/src/sentry/runner/commands/repair.py b/src/sentry/runner/commands/repair.py
index d7f1879298..484ce060a2 100644
--- a/src/sentry/runner/commands/repair.py
+++ b/src/sentry/runner/commands/repair.py
@@ -9,13 +9,11 @@ from __future__ import absolute_import, print_function
 
 import os
 import click
-import six
 
 from contextlib import contextmanager
 from django.db import transaction
 
 from sentry.runner.decorators import configuration
-from sentry.utils.strings import iter_callsign_choices
 
 
 class RollbackLocally(Exception):
@@ -31,22 +29,6 @@ def catchable_atomic():
         pass
 
 
-def get_callsigns(projects):
-    rv = {}
-
-    for project in projects:
-        if project.callsign is not None:
-            rv[project.callsign] = project.id
-            continue
-        for callsign in iter_callsign_choices(project.name):
-            if callsign in rv:
-                continue
-            rv[callsign] = project.id
-            break
-
-    return dict((v, k) for k, v in six.iteritems(rv))
-
-
 def sync_docs():
     click.echo('Forcing documentation sync')
     from sentry.utils.integrationdocs import sync_docs, DOC_FOLDER
@@ -61,38 +43,6 @@ def sync_docs():
         click.echo(' - skipping, path does not exist: %r' % DOC_FOLDER)
 
 
-def repair_callsigns():
-    from sentry.utils.query import RangeQuerySetWrapperWithProgressBar, \
-        RangeQuerySetWrapper
-    from sentry.models.counter import increment_project_counter
-    from sentry.models import Organization, Group, Project
-
-    click.echo('Repairing callsigns')
-
-    queryset = Organization.objects.all()
-
-    for org in RangeQuerySetWrapperWithProgressBar(queryset):
-        projects = list(org.project_set.all())
-        callsigns = get_callsigns(projects)
-        for project in projects:
-            if project.callsign is None:
-                Project.objects.filter(
-                    pk=project.id, callsign=None
-                ).update(callsign=callsigns[project.id])
-            q = Group.objects.filter(
-                project=project,
-                short_id=None,
-            )
-            for group in RangeQuerySetWrapper(q):
-                with catchable_atomic():
-                    pending_short_id = increment_project_counter(project)
-                    updated = Group.objects.filter(
-                        pk=group.id, short_id=None
-                    ).update(short_id=pending_short_id)
-                    if updated == 0:
-                        raise RollbackLocally()
-
-
 def create_missing_dsns():
     from sentry.models import Project, ProjectKey
     click.echo('Creating missing DSNs')
@@ -128,27 +78,18 @@ def fix_group_counters():
     help='Synchronize and repair embedded documentation. This '
     'is disabled by default.'
 )
-@click.option(
-    '--with-callsigns/--without-callsigns',
-    default=False,
-    help='Repair and fill callsigns. This is disabled by default.'
-)
 @configuration
-def repair(with_docs, with_callsigns):
+def repair(with_docs):
     """Attempt to repair any invalid data.
 
     This by default will correct some common issues like projects missing
     DSNs or counters desynchronizing.  Optionally it can also synchronize
     the current client documentation from the Sentry documentation server
-    (--with-docs) and repair missing or broken callsigns and short IDs
-    (--with-callsigns).
+    (--with-docs).
     """
 
     if with_docs:
         sync_docs()
 
-    if with_callsigns:
-        repair_callsigns()
-
     create_missing_dsns()
     fix_group_counters()
diff --git a/src/sentry/static/sentry/app/components/actionOverlay.jsx b/src/sentry/static/sentry/app/components/actionOverlay.jsx
deleted file mode 100644
index 2feed2c5c4..0000000000
--- a/src/sentry/static/sentry/app/components/actionOverlay.jsx
+++ /dev/null
@@ -1,77 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import OrganizationState from '../mixins/organizationState';
-import {t} from '../locale';
-import requiredAdminActions from '../components/requiredAdminActions';
-import LoadingIndicator from '../components/loadingIndicator';
-
-const ActionOverlay = createReactClass({
-  displayName: 'ActionOverlay',
-
-  propTypes: {
-    actionId: PropTypes.string.isRequired,
-    isLoading: PropTypes.bool,
-  },
-
-  contextTypes: {
-    router: PropTypes.object.isRequired,
-  },
-
-  mixins: [OrganizationState],
-
-  componentWillMount() {
-    let action = this.getAction();
-    if (!action.requiresAction(this.getOrganization())) {
-      this.dismiss();
-    }
-  },
-
-  getAction() {
-    return requiredAdminActions[this.props.actionId];
-  },
-
-  dismiss() {
-    // is this the right thing?
-    this.context.router.goBack();
-  },
-
-  onDoThisLater(event) {
-    event.preventDefault();
-    this.dismiss();
-  },
-
-  render() {
-    let {children, isLoading, ...other} = this.props;
-    let orgUrl = `/organizations/${this.getOrganization().slug}/`;
-    let className = 'admin-action-overlay';
-    if (isLoading) {
-      className += ' loading-data';
-    }
-
-    return (
-      <div className={className} {...other}>
-        <div className="pattern" />
-        <div className="container">
-          <div className="dialog">
-            <div className="dialog-contents">
-              <div className="discard-bar">
-                <a href={orgUrl} onClick={this.onDoThisLater}>
-                  {t('Do this later …')}
-                </a>
-              </div>
-              <div className="content">{children}</div>
-              {isLoading ? (
-                <div className="loading-overlay">
-                  <LoadingIndicator />
-                </div>
-              ) : null}
-            </div>
-          </div>
-        </div>
-      </div>
-    );
-  },
-});
-
-export default ActionOverlay;
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index 8495c55445..2e4a3b79fe 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -11,7 +11,7 @@ import ApiMixin from '../../mixins/apiMixin';
 import OrganizationState from '../../mixins/organizationState';
 
 import GroupStore from '../../stores/groupStore';
-import TeamStore from '../../stores/teamStore';
+import ProjectsStore from '../../stores/projectsStore';
 import IndicatorStore from '../../stores/indicatorStore';
 import {logException} from '../../utils/logging';
 import localStorage from '../../utils/localStorage';
@@ -275,14 +275,13 @@ const NoteInput = createReactClass({
 
   mentionableTeams() {
     let {group} = this.props;
-
-    return _.uniqBy(TeamStore.getAll(), ({id}) => id)
-      .filter(({projects}) => !!projects.find(p => p.slug === group.project.slug))
-      .map(team => ({
-        id: buildTeamId(team.id),
-        display: `#${team.slug}`,
-        email: team.id,
-      }));
+    return (ProjectsStore.getAll().find(p => p.slug == group.project.slug) || {
+      teams: [],
+    }).teams.map(team => ({
+      id: buildTeamId(team.id),
+      display: `#${team.slug}`,
+      email: team.id,
+    }));
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index c760628282..f5064d5ce2 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -15,7 +15,7 @@ import FlowLayout from './flowLayout';
 import MenuItem from './menuItem';
 import {assignToUser, assignToActor, clearAssignment} from '../actionCreators/group';
 import GroupStore from '../stores/groupStore';
-import TeamStore from '../stores/teamStore';
+import ProjectsStore from '../stores/projectsStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import MemberListStore from '../stores/memberListStore';
 import ConfigStore from '../stores/configStore';
@@ -64,9 +64,8 @@ const AssigneeSelector = createReactClass({
 
   getInitialState() {
     let group = GroupStore.get(this.props.id);
-
     return {
-      assignedTo: group.assignedTo,
+      assignedTo: group && group.assignedTo,
       memberList: MemberListStore.loaded ? MemberListStore.getAll() : null,
       filter: '',
       isOpen: false,
@@ -109,14 +108,14 @@ const AssigneeSelector = createReactClass({
   assignableTeams() {
     let group = GroupStore.get(this.props.id);
 
-    return TeamStore.getAll()
-      .filter(({projects}) => projects.some(p => p.slug === group.project.slug))
-      .map(team => ({
-        id: buildTeamId(team.id),
-        name: team.slug,
-        display: `#${team.slug}`,
-        team,
-      }));
+    return (ProjectsStore.getAll().find(p => p.slug == group.project.slug) || {
+      teams: [],
+    }).teams.map(team => ({
+      id: buildTeamId(team.id),
+      display: `#${team.slug}`,
+      email: team.id,
+      team,
+    }));
   },
 
   onGroupChange(itemIds) {
diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index 98ba4a21b8..5341d0732c 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -21,9 +21,7 @@ const MissingProjectMembership = createReactClass({
 
   getInitialState() {
     let {organization, projectId} = this.props;
-    let project = organization.projects.filter(p => {
-      return p.slug === projectId;
-    })[0];
+    let project = organization.projects.find(p => p.slug === projectId);
 
     return {
       loading: false,
diff --git a/src/sentry/static/sentry/app/components/requiredAdminActions.jsx b/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
deleted file mode 100644
index eadc157e7a..0000000000
--- a/src/sentry/static/sentry/app/components/requiredAdminActions.jsx
+++ /dev/null
@@ -1,11 +0,0 @@
-import SetCallsignsAction from '../views/requiredAdminActions/setCallsigns';
-
-const requiredAdminActions = {
-  SET_CALLSIGNS: SetCallsignsAction,
-};
-
-for (let key in requiredAdminActions) {
-  requiredAdminActions[key].ID = key;
-}
-
-export default requiredAdminActions;
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 19d2d11fd6..862d7d9dce 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -10,7 +10,6 @@ import {load as loadIncidents} from '../../actionCreators/incidents';
 import Broadcasts from './broadcasts';
 import Incidents from './incidents';
 import UserNav from './userNav';
-import requiredAdminActions from '../requiredAdminActions';
 import OrganizationSelector from './organizationSelector';
 import SidebarPanel from '../sidebarPanel';
 import TodoList from '../onboardingWizard/todos';
@@ -71,16 +70,6 @@ class OnboardingStatus extends React.Component {
   }
 }
 
-function getFirstRequiredAdminAction(org) {
-  for (let key in requiredAdminActions) {
-    let action = requiredAdminActions[key];
-    if (action.requiresAction(org)) {
-      return action;
-    }
-  }
-  return null;
-}
-
 const Sidebar = createReactClass({
   displayName: 'Sidebar',
 
@@ -307,26 +296,6 @@ const Sidebar = createReactClass({
     );
   },
 
-  renderRequiredActions() {
-    // TODO: investigate if this is seriously deprecated
-    let org = this.getOrganization();
-    let requiredAction = org && getFirstRequiredAdminAction(org);
-
-    if (org && requiredAction !== null) {
-      let slugId = requiredAction.ID.toLowerCase().replace(/_/g, '-');
-      let url = `/organizations/${org.slug}/actions/${slugId}/`;
-      return (
-        <span className="admin-action-message">
-          <a href={url}>
-            {t('Required Action:')} {requiredAction.getActionLinkTitle()}
-          </a>
-        </span>
-      );
-    }
-
-    return null;
-  },
-
   render() {
     let org = this.getOrganization();
 
@@ -353,8 +322,6 @@ const Sidebar = createReactClass({
             </li>
           </ul>
         </div>
-
-        {this.renderRequiredActions()}
       </nav>
     );
   },
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 1f3ebebaad..c4ffb10840 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -115,7 +115,6 @@ export const Project = PropTypes.shape({
   id: PropTypes.string.isRequired,
   name: PropTypes.string.isRequired,
   slug: PropTypes.string.isRequired,
-  callSign: PropTypes.string,
   color: PropTypes.string,
   dateCreated: PropTypes.string,
   features: PropTypes.arrayOf(PropTypes.string),
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index e3beb233ef..bd952e48d6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -90,7 +90,6 @@ import ReleaseDetails from './views/releaseDetails';
 import ReleaseNewEvents from './views/releaseNewEvents';
 import ReleaseOverview from './views/releases/releaseOverview';
 import RouteNotFound from './views/routeNotFound';
-import SetCallsignsAction from './views/requiredAdminActions/setCallsigns';
 import SettingsProjectProvider from './views/settings/settingsProjectProvider';
 import SettingsWrapper from './views/settings/settingsWrapper';
 import SharedGroupDetails from './views/sharedGroupDetails';
@@ -656,11 +655,6 @@ function routes() {
           component={errorHandler(ProjectChooser)}
         />
 
-        <Route
-          path="/organizations/:orgId/actions/set-callsigns/"
-          component={errorHandler(SetCallsignsAction)}
-        />
-
         <Route
           path=":projectId/getting-started/"
           component={errorHandler(ProjectGettingStarted)}
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index ac6e3eeef6..24970848a6 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -1,6 +1,5 @@
 import Reflux from 'reflux';
 import TeamActions from '../actions/teamActions';
-import ProjectsStore from './projectsStore';
 
 const TeamStore = Reflux.createStore({
   init() {
@@ -9,21 +8,13 @@ const TeamStore = Reflux.createStore({
 
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
     this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
-    this.listenTo(ProjectsStore, this.onProject);
   },
 
   reset() {
     this.items = [];
-    // TODO(jess): this is not going to make sense/be accurate in sentry 9
-    this.projectMap = {}; // map of project ids => team ids
   },
 
   loadInitialData(items) {
-    items.forEach(item => {
-      item.projects.forEach(project => {
-        this.projectMap[project.id] = item.id;
-      });
-    });
     this.initialized = true;
     this.items = items;
     this.trigger(new Set(items.map(item => item.id)));
@@ -55,28 +46,6 @@ const TeamStore = Reflux.createStore({
     this.trigger(new Set([itemId]));
   },
 
-  onProject(projectIds) {
-    let teamsChanged = new Set();
-
-    projectIds.forEach((set, projectId) => {
-      let teamId = this.projectMap[projectId];
-      if (teamId === undefined) return;
-      let team = this.getById(teamId);
-      // TODO: make copy of project? right now just assigning reference
-      // to project form project store
-      let project = ProjectsStore.getById(projectId);
-      // so gross don't look, update projects in
-      // the team.projects list. this should be behavior
-      // we can completely deprecate after sentry 9
-      team.projects = team.projects.filter(p => {
-        return p.slug !== project.slug;
-      });
-      team.projects.push(project);
-      teamsChanged.add(team.id);
-    });
-    this.trigger(teamsChanged);
-  },
-
   getById(id) {
     return this.items.find(item => item.id.toString() === id.toString()) || null;
   },
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index e94646d857..042dc089f8 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -22,10 +22,6 @@ let ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND',
 };
 
-function getRequiredAdminActions(org) {
-  return [];
-}
-
 const OrganizationContext = createReactClass({
   displayName: 'OrganizationContext',
 
@@ -88,7 +84,6 @@ const OrganizationContext = createReactClass({
           hooks.push(cb(data));
         });
 
-        data.requiredAdminActions = getRequiredAdminActions(data);
         this.setState({
           organization: data,
           loading: false,
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
index 6846bf648f..13dfc5beb9 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
@@ -149,7 +149,7 @@ const ProjectListOld = createReactClass({
   displayName: 'ProjectListOld',
 
   propTypes: {
-    teams: PropTypes.array,
+    projects: PropTypes.array,
     maxProjects: PropTypes.number,
   },
 
@@ -163,21 +163,7 @@ const ProjectListOld = createReactClass({
 
   render() {
     let org = this.getOrganization();
-    let {maxProjects} = this.props;
-    // prevent duplicate projects. this is fixed correctly in the new
-    // version of ProjectList below
-    let includedProjects = new Set();
-    let projects = [];
-    this.props.teams.forEach(team => {
-      if (team.isMember) {
-        team.projects.forEach(project => {
-          if (!includedProjects.has(project.id)) {
-            projects.push({...project, teamName: team.name});
-            includedProjects.add(project.id);
-          }
-        });
-      }
-    });
+    let {maxProjects, projects} = this.props;
 
     projects = sortArray(projects, item => {
       return [!item.isBookmarked, item.teamName, item.name];
@@ -430,7 +416,7 @@ const OrganizationDashboard = createReactClass({
             {features.has('internal-catchall') ? (
               <ProjectList {...this.props} projects={this.state.projects} />
             ) : (
-              <ProjectListOld {...this.props} teams={this.state.teams} />
+              <ProjectListOld {...this.props} projects={this.state.projects} />
             )}
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index c61862d784..32f6138ca8 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -22,7 +22,7 @@ const ExpandedTeamList = createReactClass({
     access: PropTypes.object.isRequired,
     organization: SentryTypes.Organization.isRequired,
     teamList: PropTypes.arrayOf(SentryTypes.Team).isRequired,
-    projectStats: PropTypes.object,
+    projectList: PropTypes.arrayOf(SentryTypes.Project).isRequired,
     hasTeams: PropTypes.bool,
   },
 
@@ -64,16 +64,19 @@ const ExpandedTeamList = createReactClass({
     return `/organizations/${org.slug}`;
   },
 
-  renderProjectList(team) {
-    return (
-      <tbody>
-        {sortArray(team.projects, function(o) {
-          return o.name;
-        }).map(this.renderProject)}
-      </tbody>
+  getProjectsForTeam(team) {
+    return sortArray(
+      this.props.projectList.filter(p => !!p.teams.find(t1 => t1.slug == team.slug)),
+      function(o) {
+        return o.name;
+      }
     );
   },
 
+  renderProjectList(team, projects) {
+    return <tbody>{projects.map(this.renderProject)}</tbody>;
+  },
+
   renderNoProjects(team) {
     return (
       <tbody>
@@ -98,6 +101,7 @@ const ExpandedTeamList = createReactClass({
   renderTeamNode(team, urlPrefix) {
     // TODO: make this cleaner
     let access = this.props.access;
+    let projects = this.getProjectsForTeam(team);
     let orgId = this.props.organization.slug;
     return (
       <div className="box" key={team.slug}>
@@ -119,8 +123,8 @@ const ExpandedTeamList = createReactClass({
         </div>
         <div className="box-content">
           <table className="table table-no-top-border m-b-0">
-            {team.projects.length
-              ? this.renderProjectList(team)
+            {projects.length
+              ? this.renderProjectList(team, projects)
               : this.renderNoProjects(team)}
           </table>
         </div>
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
index 820362b823..80649402fd 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
@@ -8,6 +8,7 @@ import {sortArray} from '../../utils';
 import ApiMixin from '../../mixins/apiMixin';
 import LoadingIndicator from '../../components/loadingIndicator';
 import OrganizationState from '../../mixins/organizationState';
+import ProjectsStore from '../../stores/projectsStore';
 import TeamStore from '../../stores/teamStore';
 import getSettingsComponent from '../../utils/getSettingsComponent';
 
@@ -18,7 +19,12 @@ const OrganizationTeams = createReactClass({
     routes: PropTypes.arrayOf(PropTypes.object),
   },
 
-  mixins: [ApiMixin, OrganizationState, Reflux.listenTo(TeamStore, 'onTeamListChange')],
+  mixins: [
+    ApiMixin,
+    OrganizationState,
+    Reflux.listenTo(TeamStore, 'onTeamListChange'),
+    Reflux.listenTo(ProjectsStore, 'onProjectListChange'),
+  ],
 
   getInitialState() {
     return {
@@ -26,6 +32,9 @@ const OrganizationTeams = createReactClass({
       teamList: sortArray(TeamStore.getAll(), function(o) {
         return o && o.name;
       }),
+      projectList: sortArray(ProjectsStore.getAll(), function(o) {
+        return o && o.name;
+      }),
       projectStats: {},
     };
   },
@@ -65,6 +74,16 @@ const OrganizationTeams = createReactClass({
     });
   },
 
+  onProjectListChange() {
+    let newProjectList = ProjectsStore.getAll();
+
+    this.setState({
+      projectList: sortArray(newProjectList, function(o) {
+        return o.name;
+      }),
+    });
+  },
+
   render() {
     if (!this.context.organization) return null;
     if (!this.state.Component) return <LoadingIndicator />;
@@ -82,6 +101,7 @@ const OrganizationTeams = createReactClass({
         access={access}
         features={features}
         organization={org}
+        projectList={this.state.projectList}
         allTeams={allTeams}
         activeTeams={activeTeams}
       />
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx
index 8ce8a9ccfd..2c1f0063a6 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationTeamsView.jsx
@@ -13,6 +13,7 @@ class OrganizationTeamsView extends React.Component {
   static propTypes = {
     allTeams: PropTypes.arrayOf(SentryTypes.Team),
     activeTeams: PropTypes.arrayOf(SentryTypes.Team),
+    projectList: PropTypes.arrayOf(SentryTypes.Project),
     projectStats: PropTypes.array,
     organization: SentryTypes.Organization,
     access: PropTypes.object,
@@ -30,6 +31,7 @@ class OrganizationTeamsView extends React.Component {
     let {
       allTeams,
       activeTeams,
+      projectList,
       projectStats,
       organization,
       access,
@@ -78,6 +80,7 @@ class OrganizationTeamsView extends React.Component {
                 urlPrefix={urlPrefix}
                 organization={org}
                 teamList={activeTeams}
+                projectList={projectList}
                 projectStats={projectStats}
                 hasTeams={allTeams.length !== 0}
                 access={access}
diff --git a/src/sentry/static/sentry/app/views/projectChooser.jsx b/src/sentry/static/sentry/app/views/projectChooser.jsx
index c976c331ba..b8eec39f40 100644
--- a/src/sentry/static/sentry/app/views/projectChooser.jsx
+++ b/src/sentry/static/sentry/app/views/projectChooser.jsx
@@ -22,8 +22,7 @@ const ProjectChooser = createReactClass({
 
   redirectNoMultipleProjects() {
     let org = this.getOrganization();
-    let teams = org.teams.filter(team => team.projects.length > 0);
-    let projects = [].concat.apply([], teams.map(team => team.projects));
+    let projects = org.projects;
     let task = TodoList.TASKS.filter(
       task_inst => task_inst.task == this.props.location.query.task
     )[0];
@@ -38,7 +37,6 @@ const ProjectChooser = createReactClass({
 
   render() {
     let org = this.getOrganization();
-    let teams = org.teams.filter(team => team.projects.length > 0);
     let task = TodoList.TASKS.filter(
       task_inst => task_inst.task == this.props.location.query.task
     )[0];
@@ -49,42 +47,32 @@ const ProjectChooser = createReactClass({
     if (task.featureLocation != 'project') {
       throw new Error('User arrived on project chooser without a valid task id.');
     }
-    let teamProjectList = teams.map((team, i) => {
-      // Get list of projects per team
-      let projectList = team.projects.map(project => {
-        return (
-          <tr key={project.id}>
-            <td>
-              <h4>
-                <a href={`/${org.slug}/${project.slug}/${task.location}`}>
-                  {features.has('internal-catchall') ? project.slug : project.name}
-                </a>
-              </h4>
-            </td>
-          </tr>
-        );
-      });
-
-      return (
-        <div className="box" key={i}>
-          <div key={team.id}>
-            <div className="box-header" key={team.id}>
-              <h2>{features.has('internal-catchall') ? `#${team.slug}` : team.name}</h2>
-            </div>
-            <div className="box-content">
-              <table className="table">
-                <tbody>{projectList}</tbody>
-              </table>
-            </div>
-          </div>
-        </div>
-      );
-    });
-
     return (
       <div className="container">
         <h3>{t('Choose a project')}</h3>
-        <div className="team-list">{teamProjectList}</div>
+        <div className="box">
+          <div className="box-content">
+            <table className="table">
+              <tbody>
+                {org.projects.map(project => {
+                  return (
+                    <tr key={project.id}>
+                      <td>
+                        <h4>
+                          <a href={`/${org.slug}/${project.slug}/${task.location}`}>
+                            {features.has('internal-catchall')
+                              ? project.slug
+                              : project.name}
+                          </a>
+                        </h4>
+                      </td>
+                    </tr>
+                  );
+                })}
+              </tbody>
+            </table>
+          </div>
+        </div>
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
deleted file mode 100644
index 50b3d788da..0000000000
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
+++ /dev/null
@@ -1,217 +0,0 @@
-import React from 'react';
-import createReactClass from 'create-react-class';
-import {browserHistory} from 'react-router';
-
-import ActionOverlay from '../../components/actionOverlay';
-import OrganizationState from '../../mixins/organizationState';
-import ApiMixin from '../../mixins/apiMixin';
-import {t} from '../../locale';
-
-/* given an organization find information about the projects that are
-   needed for callsign review.  Splits up projects you are a member of or
-   not into different lists. */
-function getProjectInfoForReview(org) {
-  let memberProjects = [];
-  let nonMemberProjects = [];
-  let requiresReview = 0;
-  let canReviewAnything = false;
-  let canWriteProjects = new Set(org.access).has('project:write');
-
-  for (let team of org.teams) {
-    for (let project of team.projects) {
-      let canReview = false;
-      let targetList = nonMemberProjects;
-      if (team.isMember) {
-        canReview = canWriteProjects;
-        targetList = memberProjects;
-      }
-      targetList.push({
-        projectId: project.id,
-        projectName: project.name,
-        isMember: team.isMember,
-        requiresReview: false,
-        canReview,
-        teamName: team.name,
-        callSign: project.callSign || null,
-      });
-    }
-  }
-
-  return {
-    memberProjects,
-    nonMemberProjects,
-    projects: memberProjects.concat(nonMemberProjects),
-    requiresReview,
-    canReviewAnything,
-    hasNonMemberProjects: nonMemberProjects.length > 0,
-  };
-}
-
-const SetCallsignsAction = createReactClass({
-  displayName: 'SetCallsignsAction',
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    return {
-      isLoading: true,
-      info: {},
-      slugs: {},
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  onSubmit(event) {
-    this.setState({
-      isLoading: true,
-    });
-
-    let orgId = this.getOrganization().slug;
-    this.api.request(`/organizations/${orgId}/slugs/`, {
-      method: 'PUT',
-      data: {slugs: this.state.slugs},
-      success: data => {
-        browserHistory.push({state: 'refresh', pathname: `/${orgId}/`});
-      },
-      error: error => {
-        /*eslint no-console:0*/
-        console.log('Failed to set slugs:', error);
-        /*eslint no-alert:0*/
-        alert(t('Failed to set slugs'));
-      },
-      complete: () => {
-        this.setState({
-          isLoading: false,
-        });
-      },
-    });
-  },
-
-  onSetShortName(projectId, event) {
-    this.setState({
-      slugs: {
-        ...this.state.slugs,
-        [projectId]: event.target.value.toUpperCase().trim(),
-      },
-    });
-  },
-
-  fetchData() {
-    let info = getProjectInfoForReview(this.getOrganization());
-    let slugs = {};
-    info.memberProjects.forEach(project => {
-      slugs[project.projectId] = project.callSign;
-    });
-
-    this.setState({
-      info,
-      slugs,
-      isLoading: false,
-    });
-  },
-
-  isValidCallsign(callsign) {
-    let found = 0;
-
-    if (callsign.match(/^[A-Z]{2,6}$/) === null) {
-      return false;
-    }
-
-    for (let key in this.state.slugs) {
-      if (this.state.slugs[key] === callsign) {
-        found++;
-      }
-    }
-
-    this.state.info.nonMemberProjects.forEach(project => {
-      if (project.callSign === callsign) {
-        found++;
-      }
-    });
-
-    return found <= 1;
-  },
-
-  render() {
-    let org = this.getOrganization();
-    let info = this.state.info;
-    let canSubmit = true;
-
-    return (
-      <ActionOverlay actionId="SET_CALLSIGNS" isLoading={this.state.isLoading}>
-        <h1>{t('Review Call Signs for Projects')}</h1>
-        <p>
-          {t(
-            'Sentry now requires you to specify a call sign (short name) for each project in the organization “%s”. These short names are used to identify the project in the issue IDs.  Ideally they are two or three letter long.',
-            org.name
-          )}
-        </p>
-        {info.hasNonMemberProjects ? (
-          <p>{t('Projects of teams you are not a member of are not shown.')}</p>
-        ) : null}
-        <p>{t('Projects which have been previously reviewed are shown in green.')}</p>
-        <form className="form-horizontal">
-          {info.memberProjects.map(project => {
-            let inputId = 'input-' + project.projectId;
-            let className = 'form-group short-id-form-group';
-            let callsign = this.state.slugs[project.projectId] || '';
-            if (!project.requiresReview) {
-              className += ' reviewed';
-            }
-            if (!this.isValidCallsign(callsign)) {
-              className += ' invalid';
-              canSubmit = false;
-            }
-            if (callsign == '') {
-              className += ' empty';
-              canSubmit = false;
-            }
-
-            return (
-              <div className={className} key={project.projectId}>
-                <label
-                  htmlFor={inputId}
-                  className="col-sm-6 col-sm-offset-2 control-label"
-                >
-                  {project.teamName} / {project.projectName}
-                </label>
-                <div className="col-sm-2">
-                  <input
-                    type="text"
-                    id={inputId}
-                    className="form-control"
-                    onChange={this.onSetShortName.bind(this, project.projectId)}
-                    value={callsign}
-                  />
-                </div>
-              </div>
-            );
-          })}
-          <div className="actions">
-            <button
-              type="button"
-              onClick={this.onSubmit}
-              className="btn btn-primary btn-lg"
-              disabled={!canSubmit}
-            >
-              {t('Set Call Signs')}
-            </button>
-          </div>
-        </form>
-      </ActionOverlay>
-    );
-  },
-});
-
-SetCallsignsAction.requiresAction = function(org) {
-  let info = getProjectInfoForReview(org);
-  return info.requiresReview > 0 && info.canReviewAnything;
-};
-
-SetCallsignsAction.getActionLinkTitle = function() {
-  return t('Review Call Signs for Projects');
-};
-
-export default SetCallsignsAction;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
index 9211cfeed3..753a6b493d 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
@@ -5,7 +5,7 @@ import {MentionsInput, Mention} from 'react-mentions';
 
 import {Client} from '../../../../api';
 import memberListStore from '../../../../stores/memberListStore';
-import TeamStore from '../../../../stores/teamStore';
+import ProjectsStore from '../../../../stores/projectsStore';
 import Button from '../../../../components/buttons/button';
 import SentryTypes from '../../../../proptypes';
 
@@ -75,14 +75,15 @@ class OwnerInput extends React.Component {
 
   mentionableTeams() {
     let {project} = this.props;
-    return TeamStore.getAll()
-      .filter(({projects}) => !!projects.find(p => p.slug === project.slug))
-      .map(team => ({
-        id: team.id,
-        display: team.slug,
-        email: team.id,
-      }));
+    return (ProjectsStore.getAll().find(p => p.slug == project.slug) || {
+      teams: [],
+    }).teams.map(team => ({
+      id: team.id,
+      display: `#${team.slug}`,
+      email: team.id,
+    }));
   }
+
   onChange(v) {
     this.setState({text: v.target.value});
   }
diff --git a/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
deleted file mode 100644
index a9227a392a..0000000000
--- a/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
+++ /dev/null
@@ -1,231 +0,0 @@
-import {Link} from 'react-router';
-import LazyLoad from 'react-lazy-load';
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import styled from 'react-emotion';
-
-import {sortArray} from '../../../utils';
-import {t, tct} from '../../../locale';
-import ApiMixin from '../../../mixins/apiMixin';
-import {update} from '../../../actionCreators/projects';
-import {leaveTeam} from '../../../actionCreators/teams';
-import TooltipMixin from '../../../mixins/tooltip';
-import BarChart from '../../../components/barChart';
-import Panel from '../components/panel';
-import PanelHeader from '../components/panelHeader';
-import ProjectLabel from '../../../components/projectLabel';
-import SentryTypes from '../../../proptypes';
-
-const TeamHeaderLink = styled(Link)`
-  color: ${p => p.theme.gray3};
-  margin-left: 20px;
-  text-transform: none;
-  font-weight: normal;
-
-  &:hover {
-    color: ${p => p.theme.gray4};
-  }
-`;
-
-const ProjectTitle = styled.h5`
-  padding: 2px 0;
-`;
-
-const ExpandedTeamList = createReactClass({
-  displayName: 'ExpandedTeamList',
-
-  propTypes: {
-    access: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-    teamList: PropTypes.arrayOf(SentryTypes.Team).isRequired,
-    projectStats: PropTypes.object,
-    urlPrefix: PropTypes.string,
-    hasTeams: PropTypes.bool,
-  },
-
-  mixins: [
-    ApiMixin,
-    TooltipMixin(function() {
-      return {
-        selector: '.tip',
-        title: function(instance) {
-          return this.getAttribute('data-isbookmarked') === 'true'
-            ? 'Remove from bookmarks'
-            : 'Add to bookmarks';
-        },
-      };
-    }),
-  ],
-
-  leaveTeam(team) {
-    // TODO(dcramer): handle loading indicator
-    leaveTeam(this.api, {
-      orgId: this.props.organization.slug,
-      teamId: team.slug,
-    });
-  },
-
-  urlPrefix() {
-    let {organization, urlPrefix} = this.props;
-    return urlPrefix || `/organizations/${organization.slug}/`;
-  },
-
-  renderProjectList(team) {
-    return (
-      <tbody>
-        {sortArray(team.projects, function(o) {
-          return o.name;
-        }).map(this.renderProject)}
-      </tbody>
-    );
-  },
-
-  renderNoProjects(team) {
-    let {organization} = this.props;
-    return (
-      <tbody>
-        <tr>
-          <td>
-            <p className="project-list-empty">
-              {tct(
-                'There are no projects in this team. Get started by [link:creating your first project].',
-                {
-                  link: (
-                    <Link
-                      to={`/organizations/${organization.slug}/projects/new/?team=${team.slug}`}
-                    />
-                  ),
-                }
-              )}
-            </p>
-          </td>
-        </tr>
-      </tbody>
-    );
-  },
-
-  renderTeamNode(team, urlPrefix) {
-    // TODO: make this cleaner
-    let access = this.props.access;
-    return (
-      <Panel key={team.id}>
-        <PanelHeader>
-          <div className="pull-right actions hidden-xs">
-            <TeamHeaderLink onClick={this.leaveTeam.bind(this, team)}>
-              {t('Leave Team')}
-            </TeamHeaderLink>
-            {access.has('team:write') && (
-              <TeamHeaderLink to={`${this.urlPrefix()}teams/${team.slug}/`}>
-                {t('Team Settings')}
-              </TeamHeaderLink>
-            )}
-          </div>
-          #{team.slug}
-        </PanelHeader>
-        <div className="box-content">
-          <table className="table table-no-top-border m-b-0">
-            {team.projects.length
-              ? this.renderProjectList(team)
-              : this.renderNoProjects(team)}
-          </table>
-        </div>
-      </Panel>
-    );
-  },
-
-  toggleBookmark(project) {
-    update(this.api, {
-      orgId: this.props.organization.slug,
-      projectId: project.slug,
-      data: {
-        isBookmarked: !project.isBookmarked,
-      },
-    });
-  },
-
-  renderProject(project) {
-    let org = this.props.organization;
-    let chartData =
-      project.stats &&
-      project.stats.map(point => {
-        return {x: point[0], y: point[1]};
-      });
-
-    return (
-      <tr key={project.id} className={project.isBookmarked ? 'isBookmarked' : null}>
-        <td>
-          <ProjectTitle>
-            <a
-              onClick={this.toggleBookmark.bind(this, project)}
-              className="tip"
-              data-isbookmarked={project.isBookmarked}
-            >
-              {project.isBookmarked ? (
-                <span className="icon-star-solid bookmark" />
-              ) : (
-                <span className="icon-star-outline bookmark" />
-              )}
-            </a>
-            <Link
-              to={`/settings/organization/${org.slug}/project/${project.slug}/alerts/`}
-            >
-              <ProjectLabel project={project} organization={this.props.organization} />
-            </Link>
-          </ProjectTitle>
-        </td>
-        <td className="align-right project-chart">
-          {chartData && (
-            <LazyLoad>
-              <BarChart points={chartData} label="events" />
-            </LazyLoad>
-          )}
-        </td>
-      </tr>
-    );
-  },
-
-  renderEmpty() {
-    if (this.props.hasTeams) {
-      return (
-        <p>
-          {this.props.access.has('project:write')
-            ? tct(
-                'You are not a member of any teams. [joinLink:Join an existing team] or [createLink:create a new one].',
-                {
-                  joinLink: <Link to={`${this.urlPrefix()}teams/all-teams/`} />,
-                  createLink: <Link to={this.urlPrefix() + 'teams/new/'} />,
-                }
-              )
-            : tct('You are not a member of any teams. [joinLink:Join a team].', {
-                joinLink: <Link to={`${this.urlPrefix()}teams/all-teams/`} />,
-              })}
-        </p>
-      );
-    }
-    return (
-      <p>
-        {tct(
-          'You dont have any teams for this organization yet. Get started by [link:creating your first team].',
-          {
-            link: <Link to={this.urlPrefix() + 'teams/new/'} />,
-          }
-        )}
-      </p>
-    );
-  },
-
-  renderTeamNodes() {
-    return this.props.teamList.map(team => {
-      return this.renderTeamNode(team);
-    });
-  },
-
-  render() {
-    let hasTeams = this.props.teamList.length > 0;
-
-    return <div>{hasTeams ? this.renderTeamNodes() : this.renderEmpty()}</div>;
-  },
-});
-
-export default ExpandedTeamList;
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx b/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
index d7635e8248..4a6b134ccc 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
@@ -11,8 +11,6 @@ import DropdownAutoComplete from '../../../components/dropdownAutoComplete';
 import DropdownButton from '../../../components/dropdownButton';
 import EmptyMessage from '../components/emptyMessage';
 import ProjectsStore from '../../../stores/projectsStore';
-import TeamStore from '../../../stores/teamStore';
-import TeamActions from '../../../actions/teamActions';
 import LoadingError from '../../../components/loadingError';
 import OrganizationState from '../../../mixins/organizationState';
 import ProjectListItem from '../components/settingsProjectItem';
@@ -36,15 +34,15 @@ const TeamProjects = createReactClass({
     ApiMixin,
     OrganizationState,
     Reflux.listenTo(ProjectsStore, 'onProjectUpdate'),
-    Reflux.listenTo(TeamStore, 'onTeamUpdate'),
   ],
 
   getInitialState() {
-    let team = TeamStore.getBySlug(this.props.params.teamId);
+    let {teamId} = this.props.params;
+    let projectList = ProjectsStore.getAll();
     return {
-      allProjects: ProjectsStore.getAll(),
+      allProjects: projectList,
       error: false,
-      projectListLinked: team ? team.projects : [],
+      projectListLinked: projectList.filter(p => p.teams.find(t1 => teamId === t1.slug)),
     };
   },
 
@@ -59,14 +57,11 @@ const TeamProjects = createReactClass({
   },
 
   onProjectUpdate() {
+    let {teamId} = this.props.params;
+    let projectList = ProjectsStore.getAll();
     this.setState({
-      allProjects: ProjectsStore.getAll(),
-    });
-  },
-
-  onTeamUpdate() {
-    this.setState({
-      projectListLinked: TeamStore.getBySlug(this.props.params.teamId).projects,
+      allProjects: projectList,
+      projectListLinked: projectList.filter(p => p.teams.find(t1 => teamId === t1.slug)),
     });
   },
 
@@ -74,14 +69,8 @@ const TeamProjects = createReactClass({
     let {orgId, teamId} = this.props.params;
     this.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {
       method: action === 'add' ? 'POST' : 'DELETE',
-      success: () => {
-        let team = TeamStore.getBySlug(this.props.params.teamId);
-        if (action == 'add') {
-          team.projects = [...team.projects, project];
-        } else {
-          team.projects = team.projects.filter(({id}) => id != project.id);
-        }
-        TeamActions.updateSuccess(teamId, team);
+      success: data => {
+        ProjectsStore.onUpdateSuccess(data);
         addSuccessMessage(
           action === 'add'
             ? t('Successfully added project to team.')
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index 494cc59ead..38515349a1 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -15,13 +15,7 @@ import string
 import zlib
 
 from django.utils.encoding import force_text, smart_text
-from itertools import count
 
-# Callsigns we do not want to generate automatically because they might
-# overlap with something else that is popular (like GH for GitHub)
-CALLSIGN_BLACKLIST = ['GH']
-
-_callsign_re = re.compile(r'^[A-Z]{2,6}$')
 _word_sep_re = re.compile(r'[\s.;,_-]+(?u)')
 _camelcase_re = re.compile(r'(?:[A-Z]{2,}(?=[A-Z]))|(?:[A-Z][a-z0-9]+)|(?:[a-z0-9]+)')
 _letters_re = re.compile(r'[A-Z]+')
@@ -114,46 +108,6 @@ def to_unicode(value):
     return value
 
 
-def validate_callsign(value):
-    if not value:
-        return None
-    callsign = value.strip().upper()
-    if _callsign_re.match(callsign) is None:
-        return None
-    return callsign
-
-
-def iter_callsign_choices(project_name):
-    words = list(x.upper() for x in tokens_from_name(project_name, remove_digits=True))
-    bits = []
-
-    if len(words) == 2:
-        bits.append(words[0][:1] + words[1][:1])
-    elif len(words) == 3:
-        bits.append(words[0][:1] + words[1][:1] + words[2][:1])
-    elif words:
-        bit = words[0][:2]
-        if len(bit) == 2:
-            bits.append(bit)
-        bit = words[0][:3]
-        if len(bit) == 3:
-            bits.append(bit)
-
-    # Fallback if nothing else works, use PR for project
-    if not bits:
-        bits.append('PR')
-
-    for bit in bits:
-        if bit not in CALLSIGN_BLACKLIST:
-            yield bit
-
-    for idx in count(2):
-        for bit in bits:
-            bit = '%s%d' % (bit, idx)
-            if bit not in CALLSIGN_BLACKLIST:
-                yield bit
-
-
 def split_camelcase(word):
     pieces = _camelcase_re.findall(word)
 
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 28ac30fed2..22d329a006 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -457,14 +457,21 @@ window.TestStubs = {
     };
   },
 
-  Group: () => {
+  Group: params => {
+    let project = TestStubs.Project();
     return {
       id: '1',
       stats: {
         '24h': [[1517281200, 2], [1517310000, 1]],
         '30d': [[1514764800, 1], [1515024000, 122]],
       },
+      project: {
+        id: project.id,
+        slug: project.slug,
+      },
       tags: [],
+      assignedTo: null,
+      ...params,
     };
   },
 
@@ -611,6 +618,7 @@ window.TestStubs = {
       securityTokenHeader: 'x-security-header',
       verifySSL: true,
       features: [],
+      teams: [],
       ...params,
     };
   },
@@ -742,7 +750,6 @@ window.TestStubs = {
       id: '1',
       slug: 'team-slug',
       name: 'Team Name',
-      projects: [],
       ...params,
     };
   },
@@ -836,6 +843,14 @@ window.TestStubs = {
     email: 'billyfirefox@test.com',
     ...params,
   }),
+
+  User: params => ({
+    id: '1',
+    username: 'foo@example.com',
+    email: 'foo@example.com',
+    name: 'Foo Bar',
+    ...params,
+  }),
 };
 
 // this is very commonly used, so expose it globally
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index a753cf2e24..a43730dffb 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -9,6 +9,7 @@ import GroupStore from 'app/stores/groupStore';
 import MemberListStore from 'app/stores/memberListStore';
 import ConfigStore from 'app/stores/configStore';
 import TeamStore from 'app/stores/teamStore';
+import ProjectsStore from 'app/stores/projectsStore';
 
 import stubReactComponents from '../../helpers/stubReactComponent';
 
@@ -16,47 +17,56 @@ describe('AssigneeSelector', function() {
   let sandbox;
   let assigneeSelector;
   let assignToUser;
-
-  const USER_1 = {
-    id: '1',
-    name: 'Jane Doe',
-    email: 'janedoe@example.com',
-  };
-  const USER_2 = {
-    id: '2',
-    name: 'John Smith',
-    email: 'johnsmith@example.com',
-  };
-  const USER_3 = {
-    id: '3',
-    name: 'J J',
-    email: 'jj@example.com',
-  };
-
-  const TEAM_1 = {
-    id: '3',
-    name: 'COOL TEAM',
-    slug: 'cool-team',
-    projects: [
-      {
-        slug: '2',
-      },
-    ],
-  };
+  let USER_1, USER_2, USER_3;
+  let TEAM_1;
+  let PROJECT_1;
+  let GROUP_1;
+  let PATH;
 
   beforeEach(function() {
     sandbox = sinon.sandbox.create();
     stubReactComponents(sandbox, [LoadingIndicator]);
 
-    sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
-    sandbox.stub(TeamStore, 'getAll').returns([TEAM_1]);
-    sandbox.stub(GroupStore, 'get').returns({
+    USER_1 = TestStubs.User({
+      id: '1',
+      name: 'Jane Doe',
+      email: 'janedoe@example.com',
+    });
+    USER_2 = TestStubs.User({
+      id: '2',
+      name: 'John Smith',
+      email: 'johnsmith@example.com',
+    });
+    USER_3 = TestStubs.User({
+      id: '3',
+      name: 'J J',
+      email: 'jj@example.com',
+    });
+
+    TEAM_1 = TestStubs.Team({
+      id: '3',
+      name: 'COOL TEAM',
+      slug: 'cool-team',
+    });
+
+    PROJECT_1 = TestStubs.Project({
+      teams: [TEAM_1],
+    });
+
+    GROUP_1 = TestStubs.Group({
       id: '1337',
       project: {
-        slug: '2',
+        id: PROJECT_1.id,
+        slug: PROJECT_1.slug,
       },
-      assignedTo: null,
     });
+
+    PATH = `/issues/${GROUP_1.id}/`;
+
+    sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
+    sandbox.stub(TeamStore, 'getAll').returns([TEAM_1]);
+    sandbox.stub(ProjectsStore, 'getAll').returns([PROJECT_1]);
+    sandbox.stub(GroupStore, 'get').returns(GROUP_1);
   });
 
   afterEach(function() {
@@ -126,35 +136,27 @@ describe('AssigneeSelector', function() {
       // Reset sandbox because we don't want <LoadingIndicator /> stubbed
       sandbox.restore();
       sandbox = sinon.sandbox.create();
+      sandbox.stub(MemberListStore, 'getAll').returns([USER_1, USER_2]);
       sandbox.stub(TeamStore, 'getAll').returns([TEAM_1]);
-
-      GroupStore.loadInitialData([
-        {
-          id: '1337',
-          project: {
-            slug: '2',
-          },
-          assignedTo: null,
-        },
-      ]);
+      sandbox.stub(ProjectsStore, 'getAll').returns([PROJECT_1]);
+      sandbox.stub(GroupStore, 'get').returns(GROUP_1);
 
       Client.addMockResponse({
         method: 'PUT',
-        url: '/issues/1337/',
+        url: `/issues/${GROUP_1.id}/`,
         body: {
-          id: '1337',
-          assignedTo: {
-            id: '1',
-            type: 'user',
-            name: 'Jane Doe',
-          },
+          ...GROUP_1,
+          assignedTo: USER_1,
         },
       });
 
       MemberListStore.items = [];
       MemberListStore.loaded = false;
 
-      assigneeSelector = mount(<AssigneeSelector id="1337" />, TestStubs.routerContext());
+      assigneeSelector = mount(
+        <AssigneeSelector id={GROUP_1.id} />,
+        TestStubs.routerContext()
+      );
       assigneeSelector.setContext({
         organization: {id: '1', features: new Set(['internal-catchall'])},
       });
@@ -247,7 +249,7 @@ describe('AssigneeSelector', function() {
       expect(assigneeSelector.find('LoadingIndicator').exists()).toBe(true);
 
       expect(
-        Client.findMockResponse('/issues/1337/', {
+        Client.findMockResponse(PATH, {
           method: 'PUT',
         })[0].callCount
       ).toBe(1);
@@ -255,13 +257,13 @@ describe('AssigneeSelector', function() {
       assigneeSelector.instance().clearAssignTo();
 
       expect(
-        Client.findMockResponse('/issues/1337/', {
+        Client.findMockResponse(PATH, {
           method: 'PUT',
         })[0].callCount
       ).toBe(2);
       //api was called with empty string, clearing assignment
       expect(
-        Client.findMockResponse('/issues/1337/', {
+        Client.findMockResponse(PATH, {
           method: 'PUT',
         })[1].mock.calls[1][1].data.assignedTo
       ).toBe('');
@@ -278,12 +280,12 @@ describe('AssigneeSelector', function() {
         .returns(true);
       // Create a new selector because assigneeSelector.update() won't re-render
       // if the state doesn't change.
-      let sel = mount(<AssigneeSelector id="1337" />, TestStubs.routerContext());
+      let sel = mount(<AssigneeSelector id={GROUP_1.id} />, TestStubs.routerContext());
       sel.find('a').simulate('click');
       expect(sel.find('MenuItem.invite-member').length).toBe(1);
 
       // Remove org:write access permission and make sure invite member button is not shown.
-      sel = mount(<AssigneeSelector id="1337" />, TestStubs.routerContext());
+      sel = mount(<AssigneeSelector id={GROUP_1.id} />, TestStubs.routerContext());
       sel.setContext({
         organization: {id: '1', features: new Set(['internal-catchall'])},
       });
@@ -298,7 +300,10 @@ describe('AssigneeSelector', function() {
       if (assigneeSelector) {
         assigneeSelector.unmount();
       }
-      assigneeSelector = mount(<AssigneeSelector id="1337" />, TestStubs.routerContext());
+      assigneeSelector = mount(
+        <AssigneeSelector id={GROUP_1.id} />,
+        TestStubs.routerContext()
+      );
       // open menu
       assigneeSelector.find('a').simulate('click');
 
@@ -344,7 +349,10 @@ describe('AssigneeSelector', function() {
         assigneeSelector.unmount();
       }
 
-      assigneeSelector = mount(<AssigneeSelector id="1337" />, TestStubs.routerContext());
+      assigneeSelector = mount(
+        <AssigneeSelector id={GROUP_1.id} />,
+        TestStubs.routerContext()
+      );
 
       // open menu
       assigneeSelector.find('a').simulate('click');
diff --git a/tests/js/spec/components/contextPickerModal.spec.jsx b/tests/js/spec/components/contextPickerModal.spec.jsx
index e68d784a40..e0c30d90fc 100644
--- a/tests/js/spec/components/contextPickerModal.spec.jsx
+++ b/tests/js/spec/components/contextPickerModal.spec.jsx
@@ -7,15 +7,20 @@ import {ContextPickerModal} from 'app/components/contextPickerModal';
 jest.mock('jquery');
 
 describe('ContextPickerModal', function() {
-  let project = TestStubs.Project();
-  let org = TestStubs.Organization({projects: [project]});
-  let org2 = {slug: 'org2', id: '21', status: {id: 'active'}};
-  let project2 = {slug: 'project2'};
+  let project, project2, org, org2;
   let onFinish = jest.fn();
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
     onFinish.mockReset();
+
+    project = TestStubs.Project();
+    org = TestStubs.Organization({projects: [project]});
+    project2 = TestStubs.Project({slug: 'project2'});
+    org2 = TestStubs.Organization({
+      slug: 'org2',
+      id: '21',
+    });
   });
 
   const getComponent = props => (
diff --git a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
index 69e0c5c758..69724fff10 100644
--- a/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/releaseStats.spec.jsx.snap
@@ -4,7 +4,12 @@ exports[`GroupReleaseStats renders 1`] = `
 <GroupReleaseStats
   group={
     Object {
+      "assignedTo": null,
       "id": "1",
+      "project": Object {
+        "id": "2",
+        "slug": "project-slug",
+      },
       "stats": Object {
         "24h": Array [
           Array [
@@ -134,7 +139,12 @@ exports[`GroupReleaseStats renders 1`] = `
           }
           group={
             Object {
+              "assignedTo": null,
               "id": "1",
+              "project": Object {
+                "id": "2",
+                "slug": "project-slug",
+              },
               "stats": Object {
                 "24h": Array [
                   Array [
@@ -372,7 +382,12 @@ exports[`GroupReleaseStats renders 1`] = `
           }
           group={
             Object {
+              "assignedTo": null,
               "id": "1",
+              "project": Object {
+                "id": "2",
+                "slug": "project-slug",
+              },
               "stats": Object {
                 "24h": Array [
                   Array [
diff --git a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
index 575edfa005..9b93ef0ce2 100644
--- a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
@@ -168,6 +168,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
           ],
           "slug": "project-slug",
           "subjectTemplate": "[$project] \${tag:level}: $title",
+          "teams": Array [],
           "verifySSL": true,
         },
       ]
@@ -441,6 +442,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                       ],
                                       "slug": "project-slug",
                                       "subjectTemplate": "[$project] \${tag:level}: $title",
+                                      "teams": Array [],
                                       "verifySSL": true,
                                     }
                                   }
@@ -538,6 +540,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                                 ],
                                                 "slug": "project-slug",
                                                 "subjectTemplate": "[$project] \${tag:level}: $title",
+                                                "teams": Array [],
                                                 "verifySSL": true,
                                               }
                                             }
@@ -598,6 +601,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                                   ],
                                                   "slug": "project-slug",
                                                   "subjectTemplate": "[$project] \${tag:level}: $title",
+                                                  "teams": Array [],
                                                   "verifySSL": true,
                                                 }
                                               }
@@ -658,6 +662,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                                     ],
                                                     "slug": "project-slug",
                                                     "subjectTemplate": "[$project] \${tag:level}: $title",
+                                                    "teams": Array [],
                                                     "verifySSL": true,
                                                   }
                                                 }
@@ -721,6 +726,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                       ],
                                       "slug": "project-slug",
                                       "subjectTemplate": "[$project] \${tag:level}: $title",
+                                      "teams": Array [],
                                       "verifySSL": true,
                                     }
                                   }
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 66bf6925df..6a4bd8c47f 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -399,6 +399,13 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                 ],
                                 "slug": "project-slug",
                                 "subjectTemplate": "[$project] \${tag:level}: $title",
+                                "teams": Array [
+                                  Object {
+                                    "id": "1",
+                                    "name": "Team Name",
+                                    "slug": "team-slug",
+                                  },
+                                ],
                                 "verifySSL": true,
                               }
                             }
@@ -496,6 +503,13 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                           ],
                                           "slug": "project-slug",
                                           "subjectTemplate": "[$project] \${tag:level}: $title",
+                                          "teams": Array [
+                                            Object {
+                                              "id": "1",
+                                              "name": "Team Name",
+                                              "slug": "team-slug",
+                                            },
+                                          ],
                                           "verifySSL": true,
                                         }
                                       }
@@ -556,6 +570,13 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                             ],
                                             "slug": "project-slug",
                                             "subjectTemplate": "[$project] \${tag:level}: $title",
+                                            "teams": Array [
+                                              Object {
+                                                "id": "1",
+                                                "name": "Team Name",
+                                                "slug": "team-slug",
+                                              },
+                                            ],
                                             "verifySSL": true,
                                           }
                                         }
@@ -616,6 +637,13 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                               ],
                                               "slug": "project-slug",
                                               "subjectTemplate": "[$project] \${tag:level}: $title",
+                                              "teams": Array [
+                                                Object {
+                                                  "id": "1",
+                                                  "name": "Team Name",
+                                                  "slug": "team-slug",
+                                                },
+                                              ],
                                               "verifySSL": true,
                                             }
                                           }
diff --git a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
index c36d256827..6cd0a87c2f 100644
--- a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
@@ -75,6 +75,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
       ],
       "slug": "project-slug",
       "subjectTemplate": "[$project] \${tag:level}: $title",
+      "teams": Array [],
       "verifySSL": true,
     }
   }
diff --git a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
index 071a48c4ed..7f53ecacb2 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
@@ -152,6 +152,7 @@ exports[`ProjectAlertRuleDetails Edit alert rule renders 1`] = `
             ],
             "slug": "project-slug",
             "subjectTemplate": "[$project] \${tag:level}: $title",
+            "teams": Array [],
             "verifySSL": true,
           }
         }
@@ -841,6 +842,7 @@ exports[`ProjectAlertRuleDetails New alert rule renders 1`] = `
             ],
             "slug": "project-slug",
             "subjectTemplate": "[$project] \${tag:level}: $title",
+            "teams": Array [],
             "verifySSL": true,
           }
         }
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 47bbef5305..72d18bb056 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -176,6 +176,7 @@ exports[`ProjectAlertSettings render() renders 1`] = `
           ],
           "slug": "project-slug",
           "subjectTemplate": "[$project] \${tag:level}: $title",
+          "teams": Array [],
           "verifySSL": true,
         }
       }
diff --git a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
index 9df7c5734e..567b7d45af 100644
--- a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
@@ -101,6 +101,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
               ],
               "slug": "project-slug",
               "subjectTemplate": "[$project] \${tag:level}: $title",
+              "teams": Array [],
               "verifySSL": true,
             }
           }
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index 0b0ec93c8c..f69981d3af 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -195,6 +195,7 @@ exports[`ProjectPluginDetails renders 1`] = `
       ],
       "slug": "project-slug",
       "subjectTemplate": "[$project] \${tag:level}: $title",
+      "teams": Array [],
       "verifySSL": true,
     }
   }
@@ -275,6 +276,7 @@ exports[`ProjectPluginDetails renders 1`] = `
         ],
         "slug": "project-slug",
         "subjectTemplate": "[$project] \${tag:level}: $title",
+        "teams": Array [],
         "verifySSL": true,
       }
     }
@@ -491,6 +493,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                     ],
                     "slug": "project-slug",
                     "subjectTemplate": "[$project] \${tag:level}: $title",
+                    "teams": Array [],
                     "verifySSL": true,
                   }
                 }
@@ -696,6 +699,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                                   ],
                                   "slug": "project-slug",
                                   "subjectTemplate": "[$project] \${tag:level}: $title",
+                                  "teams": Array [],
                                   "verifySSL": true,
                                 }
                               }
diff --git a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
index 497bf8602a..31d715fcc5 100644
--- a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
@@ -68,7 +68,6 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
             Object {
               "id": "1",
               "name": "Team Name",
-              "projects": Array [],
               "slug": "team-slug",
             }
           }
diff --git a/tests/js/spec/views/groupMergedView.spec.jsx b/tests/js/spec/views/groupMergedView.spec.jsx
index 59460163f8..e75b2ebac1 100644
--- a/tests/js/spec/views/groupMergedView.spec.jsx
+++ b/tests/js/spec/views/groupMergedView.spec.jsx
@@ -11,7 +11,7 @@ import events from '../../mocks/events';
 jest.mock('app/api');
 jest.mock('app/mixins/projectState', () => {
   return {
-    getFeatures: () => new Set(['callsigns']),
+    getFeatures: () => new Set([]),
   };
 });
 
diff --git a/tests/js/spec/views/groupSimilarView.spec.jsx b/tests/js/spec/views/groupSimilarView.spec.jsx
index a013079afc..fe07cc932a 100644
--- a/tests/js/spec/views/groupSimilarView.spec.jsx
+++ b/tests/js/spec/views/groupSimilarView.spec.jsx
@@ -10,7 +10,7 @@ import issues from '../../mocks/issues';
 jest.mock('app/api');
 jest.mock('app/mixins/projectState', () => {
   return {
-    getFeatures: () => new Set(['callsigns']),
+    getFeatures: () => new Set([]),
     getProjectFeatures: () => new Set(['similarity-view']),
   };
 });
diff --git a/tests/js/spec/views/organizationTeamProjects.spec.jsx b/tests/js/spec/views/organizationTeamProjects.spec.jsx
index 037a2b42e8..fe59d37b66 100644
--- a/tests/js/spec/views/organizationTeamProjects.spec.jsx
+++ b/tests/js/spec/views/organizationTeamProjects.spec.jsx
@@ -8,18 +8,21 @@ import ProjectsStore from 'app/stores/projectsStore';
 import OrganizationTeamProjects from 'app/views/settings/team/teamProjects';
 
 describe('OrganizationTeamProjects', function() {
+  let project;
+  let project2;
   let team;
   let putMock;
   let postMock;
   let deleteMock;
+
   beforeEach(function() {
-    let project = TestStubs.Project();
-    let project2 = TestStubs.Project({
+    team = TestStubs.Team({slug: 'team-slug'});
+    project = TestStubs.Project({teams: [team]});
+    project2 = TestStubs.Project({
       id: '3',
       slug: 'project-slug-2',
       name: 'Project Name 2',
     });
-    team = TestStubs.Team({projects: [project]});
 
     TeamStore.loadInitialData([team]);
     ProjectsStore.loadInitialData([project, project2]);
@@ -32,12 +35,16 @@ describe('OrganizationTeamProjects', function() {
 
     postMock = Client.addMockResponse({
       method: 'POST',
-      url: `/projects/org-slug/project-slug-2/teams/${team.slug}/`,
+      url: `/projects/org-slug/${project2.slug}/teams/${team.slug}/`,
+      body: {...project2, teams: [team]},
+      status: 201,
     });
 
     deleteMock = Client.addMockResponse({
       method: 'DELETE',
-      url: `/projects/org-slug/project-slug-2/teams/${team.slug}/`,
+      url: `/projects/org-slug/${project2.slug}/teams/${team.slug}/`,
+      body: {...project2, teams: []},
+      status: 204,
     });
   });
 
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 60127c4e77..66f7bbe9d1 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -35,6 +35,35 @@ class OrganizationDetailsTest(APITestCase):
         assert response.status_code == 200, response.content
         assert response.data['id'] == six.text_type(org.id)
 
+        for i in range(5):
+            self.create_project(organization=org)
+
+        url = reverse(
+            'sentry-api-0-organization-details', kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        # TODO(dcramer): we need to pare this down -- lots of duplicate queries
+        # for membership data
+        with self.assertNumQueries(24, using='default'):
+            from django.db import connections
+            response = self.client.get(url, format='json')
+            print(connections['default'].queries)
+        assert len(response.data['projects']) == 5
+
+    def test_onboarding_tasks(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        url = reverse(
+            'sentry-api-0-organization-details', kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+        assert response.data['onboardingTasks'] == []
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(org.id)
+
         project = self.create_project(organization=org)
         project_created.send(project=project, user=self.user, sender=type(project))
 
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index ef9d9bfe20..7b8751c799 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -135,15 +135,14 @@ class ProjectWithTeamSerializerTest(TestCase):
 
         result = serialize(project, user, ProjectWithTeamSerializer())
 
-        # remove for mysql tests
-        result['team'].pop('dateCreated')
-        serialized_team = serialize(team, user)
-        serialized_team.pop('dateCreated')
-
         assert result['slug'] == project.slug
         assert result['name'] == project.name
         assert result['id'] == six.text_type(project.id)
-        assert result['team'] == serialized_team
+        assert result['team'] == {
+            'id': six.text_type(
+                team.id),
+            'slug': team.slug,
+            'name': team.name}
 
 
 class ProjectWithOrganizationSerializerTest(TestCase):
diff --git a/tests/sentry/utils/test_strings.py b/tests/sentry/utils/test_strings.py
index 9953f43d33..52ebb3e15c 100644
--- a/tests/sentry/utils/test_strings.py
+++ b/tests/sentry/utils/test_strings.py
@@ -4,7 +4,7 @@ import sys
 import functools
 
 from sentry.utils.strings import (
-    is_valid_dot_atom, iter_callsign_choices, soft_break, soft_hyphenate,
+    is_valid_dot_atom, soft_break, soft_hyphenate,
     tokens_from_name, codec_lookup, truncatechars
 )
 
@@ -62,35 +62,6 @@ def test_tokens_from_name():
     ]
 
 
-def test_iter_callsign_choices():
-    choices = iter_callsign_choices('FooBar')
-    assert next(choices) == 'FB'
-    assert next(choices) == 'FB2'
-    assert next(choices) == 'FB3'
-    assert next(choices) == 'FB4'
-
-    choices = iter_callsign_choices('FooBarBaz')
-    assert next(choices) == 'FBB'
-    assert next(choices) == 'FBB2'
-    assert next(choices) == 'FBB3'
-    assert next(choices) == 'FBB4'
-
-    choices = iter_callsign_choices('Grml')
-    assert next(choices) == 'GR'
-    assert next(choices) == 'GRM'
-    assert next(choices) == 'GR2'
-    assert next(choices) == 'GRM2'
-
-    choices = iter_callsign_choices('42')
-    assert next(choices) == 'PR'
-    assert next(choices) == 'PR2'
-    assert next(choices) == 'PR3'
-
-    choices = iter_callsign_choices('GetHub')
-    assert next(choices) == 'GH2'
-    assert next(choices) == 'GH3'
-
-
 def test_is_valid_dot_atom():
     assert is_valid_dot_atom('foo')
     assert is_valid_dot_atom('foo.bar')
