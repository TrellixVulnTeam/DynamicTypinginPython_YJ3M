commit 380b5c2e4f5586d401ea5636fea32c4edffb15a7
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Oct 10 16:18:03 2019 -0700

    feat(api): Implement api for alert rule trigger actions (SEN-991)
    
    This implements the CRUD api for alert rule trigger actions.

diff --git a/src/sentry/api/serializers/models/alert_rule_trigger_action.py b/src/sentry/api/serializers/models/alert_rule_trigger_action.py
new file mode 100644
index 0000000000..c34a56f567
--- /dev/null
+++ b/src/sentry/api/serializers/models/alert_rule_trigger_action.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import register, Serializer
+from sentry.incidents.models import AlertRuleTriggerAction
+
+
+@register(AlertRuleTriggerAction)
+class AlertRuleTriggerActionSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            "id": six.text_type(obj.id),
+            "alertRuleTriggerId": six.text_type(obj.alert_rule_trigger_id),
+            "type": obj.type,
+            "targetType": obj.target_type,
+            "targetIdentifier": obj.target_identifier,
+            "targetDisplay": obj.target_display
+            if obj.target_display is not None
+            else obj.target_identifier,
+            "integrationId": obj.integration_id,
+            "dateAdded": obj.date_added,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index fd5f4c57d0..4502106116 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -287,6 +287,12 @@ from sentry.incidents.endpoints.organization_alert_rule_details import (
 from sentry.incidents.endpoints.organization_alert_rule_index import (
     OrganizationAlertRuleIndexEndpoint,
 )
+from sentry.incidents.endpoints.organization_alert_rule_trigger_action_details import (
+    OrganizationAlertRuleTriggerActionDetailsEndpoint,
+)
+from sentry.incidents.endpoints.organization_alert_rule_trigger_action_index import (
+    OrganizationAlertRuleTriggerActionIndexEndpoint,
+)
 from sentry.incidents.endpoints.organization_alert_rule_trigger_details import (
     OrganizationAlertRuleTriggerDetailsEndpoint,
 )
@@ -569,6 +575,16 @@ urlpatterns = patterns(
                     OrganizationAlertRuleTriggerIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-alert-rules-triggers",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/triggers/(?P<alert_rule_trigger_id>[^\/]+)/actions/(?P<alert_rule_trigger_action_id>[^\/]+)/$",
+                    OrganizationAlertRuleTriggerActionDetailsEndpoint.as_view(),
+                    name="sentry-api-0-organization-alert-rule-trigger-action-details",
+                ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/alert-rules/(?P<alert_rule_id>[^\/]+)/triggers/(?P<alert_rule_trigger_id>[^\/]+)/actions$",
+                    OrganizationAlertRuleTriggerActionIndexEndpoint.as_view(),
+                    name="sentry-api-0-organization-alert-rules-trigger-actions",
+                ),
                 # Incidents
                 url(
                     r"^(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/activity/$",
diff --git a/src/sentry/incidents/endpoints/bases.py b/src/sentry/incidents/endpoints/bases.py
index 6fa2f24f5d..0d8327e5f8 100644
--- a/src/sentry/incidents/endpoints/bases.py
+++ b/src/sentry/incidents/endpoints/bases.py
@@ -6,7 +6,7 @@ from sentry import features
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.incidents.models import AlertRule, AlertRuleTrigger
+from sentry.incidents.models import AlertRule, AlertRuleTrigger, AlertRuleTriggerAction
 
 
 class ProjectAlertRuleEndpoint(ProjectEndpoint):
@@ -69,3 +69,24 @@ class OrganizationAlertRuleTriggerEndpoint(OrganizationAlertRuleEndpoint):
             raise ResourceDoesNotExist
 
         return args, kwargs
+
+
+class OrganizationAlertRuleTriggerActionEndpoint(OrganizationAlertRuleTriggerEndpoint):
+    def convert_args(self, request, alert_rule_trigger_action_id, *args, **kwargs):
+        args, kwargs = super(OrganizationAlertRuleTriggerActionEndpoint, self).convert_args(
+            request, *args, **kwargs
+        )
+        organization = kwargs["organization"]
+        trigger = kwargs["alert_rule_trigger"]
+
+        if not features.has("organizations:incidents", organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        try:
+            kwargs["alert_rule_trigger_action"] = AlertRuleTriggerAction.objects.get(
+                alert_rule_trigger=trigger, id=alert_rule_trigger_action_id
+            )
+        except AlertRuleTriggerAction.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return args, kwargs
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
new file mode 100644
index 0000000000..a3c13fb998
--- /dev/null
+++ b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_details.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry.api.serializers import serialize
+from sentry.incidents.endpoints.bases import OrganizationAlertRuleTriggerActionEndpoint
+from sentry.incidents.endpoints.serializers import AlertRuleTriggerActionSerializer
+from sentry.incidents.logic import delete_alert_rule_trigger_action
+
+
+class OrganizationAlertRuleTriggerActionDetailsEndpoint(OrganizationAlertRuleTriggerActionEndpoint):
+    def get(self, request, organization, alert_rule, alert_rule_trigger, alert_rule_trigger_action):
+        """
+        Fetch an alert rule trigger action.
+        ```````````````````````````````````
+        :auth: required
+        """
+        data = serialize(alert_rule_trigger_action, request.user)
+        return Response(data)
+
+    def put(self, request, organization, alert_rule, alert_rule_trigger, alert_rule_trigger_action):
+        serializer = AlertRuleTriggerActionSerializer(
+            context={
+                "organization": organization,
+                "alert_rule": alert_rule,
+                "alert_rule_trigger": alert_rule_trigger,
+                "access": request.access,
+            },
+            instance=alert_rule_trigger_action,
+            data=request.data,
+            partial=True,
+        )
+
+        if serializer.is_valid():
+            trigger = serializer.save()
+            return Response(serialize(trigger, request.user), status=status.HTTP_200_OK)
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    def delete(
+        self, request, organization, alert_rule, alert_rule_trigger, alert_rule_trigger_action
+    ):
+        delete_alert_rule_trigger_action(alert_rule_trigger_action)
+        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_index.py b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_index.py
new file mode 100644
index 0000000000..fdfa04ab2e
--- /dev/null
+++ b/src/sentry/incidents/endpoints/organization_alert_rule_trigger_action_index.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from rest_framework import status
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.incidents.endpoints.bases import OrganizationAlertRuleTriggerEndpoint
+from sentry.incidents.endpoints.serializers import AlertRuleTriggerActionSerializer
+from sentry.incidents.logic import get_actions_for_trigger
+
+
+class OrganizationAlertRuleTriggerActionIndexEndpoint(OrganizationAlertRuleTriggerEndpoint):
+    def get(self, request, organization, alert_rule, alert_rule_trigger):
+        """
+        Fetches actions for a trigger
+        """
+        if not features.has("organizations:incidents", organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        return self.paginate(
+            request,
+            queryset=get_actions_for_trigger(alert_rule_trigger),
+            order_by="type",
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+            default_per_page=25,
+        )
+
+    def post(self, request, organization, alert_rule, alert_rule_trigger):
+        """
+        Create an action on a trigger
+        """
+        if not features.has("organizations:incidents", organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        serializer = AlertRuleTriggerActionSerializer(
+            context={
+                "organization": organization,
+                "alert_rule": alert_rule,
+                "trigger": alert_rule_trigger,
+                "access": request.access,
+            },
+            data=request.data,
+        )
+
+        if serializer.is_valid():
+            action = serializer.save()
+            return Response(serialize(action, request.user), status=status.HTTP_201_CREATED)
+
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index 43ec724ca8..e9ba327850 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -13,11 +13,18 @@ from sentry.incidents.logic import (
     AlertRuleTriggerLabelAlreadyUsedError,
     create_alert_rule,
     create_alert_rule_trigger,
+    create_alert_rule_trigger_action,
     get_excluded_projects_for_alert_rule,
     update_alert_rule,
     update_alert_rule_trigger,
+    update_alert_rule_trigger_action,
+)
+from sentry.incidents.models import (
+    AlertRule,
+    AlertRuleThresholdType,
+    AlertRuleTrigger,
+    AlertRuleTriggerAction,
 )
-from sentry.incidents.models import AlertRule, AlertRuleThresholdType, AlertRuleTrigger
 from sentry.models.project import Project
 from sentry.snuba.models import QueryAggregations
 
@@ -205,3 +212,52 @@ class AlertRuleTriggerSerializer(CamelSnakeModelSerializer):
             return update_alert_rule_trigger(instance, **validated_data)
         except AlertRuleTriggerLabelAlreadyUsedError:
             raise serializers.ValidationError("This label is already in use for this alert rule")
+
+
+class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
+    """
+    Serializer for creating/updating a trigger action. Required context:
+     - `trigger`: The trigger related to this action.
+     - `alert_rule`: The alert_rule related to this action.
+     - `organization`: The organization related to this action.
+     - `access`: An access object (from `request.access`)
+    """
+
+    class Meta:
+        model = AlertRuleTriggerAction
+        fields = ["type", "target_type", "target_identifier"]
+        extra_kwargs = {"target_identifier": {"required": True}}
+
+    def validate_type(self, type):
+        try:
+            return AlertRuleTriggerAction.Type(type)
+        except ValueError:
+            raise serializers.ValidationError(
+                "Invalid type, valid values are %s"
+                % [item.value for item in AlertRuleTriggerAction.Type]
+            )
+
+    def validate_target_type(self, target_type):
+        try:
+            return AlertRuleTriggerAction.TargetType(target_type)
+        except ValueError:
+            raise serializers.ValidationError(
+                "Invalid target_type, valid values are %s"
+                % [item.value for item in AlertRuleTriggerAction.TargetType]
+            )
+
+    def create(self, validated_data):
+        return create_alert_rule_trigger_action(trigger=self.context["trigger"], **validated_data)
+
+    def _remove_unchanged_fields(self, instance, validated_data):
+        for field_name, value in list(six.iteritems(validated_data)):
+            # Remove any fields that haven't actually changed
+            if isinstance(value, Enum):
+                value = value.value
+            if getattr(instance, field_name) == value:
+                validated_data.pop(field_name)
+        return validated_data
+
+    def update(self, instance, validated_data):
+        validated_data = self._remove_unchanged_fields(instance, validated_data)
+        return update_alert_rule_trigger_action(instance, **validated_data)
diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index ebad8e9a97..f3f0619658 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -1074,3 +1074,7 @@ def delete_alert_rule_trigger_action(trigger_action):
     Deletes a AlertRuleTriggerAction
     """
     trigger_action.delete()
+
+
+def get_actions_for_trigger(trigger):
+    return AlertRuleTriggerAction.objects.filter(alert_rule_trigger=trigger)
diff --git a/tests/sentry/api/serializers/test_alert_rule_trigger.py b/tests/sentry/api/serializers/test_alert_rule_trigger.py
index d4c61d8635..bdf7cbb9b2 100644
--- a/tests/sentry/api/serializers/test_alert_rule_trigger.py
+++ b/tests/sentry/api/serializers/test_alert_rule_trigger.py
@@ -12,7 +12,7 @@ from sentry.testutils import TestCase
 
 
 class BaseAlertRuleTriggerSerializerTest(object):
-    def assert_alert_rule_serialized(self, trigger, result):
+    def assert_alert_rule_trigger_serialized(self, trigger, result):
         assert result["id"] == six.text_type(trigger.id)
         assert result["alertRuleId"] == six.text_type(trigger.alert_rule_id)
         assert result["label"] == trigger.label
@@ -22,24 +22,24 @@ class BaseAlertRuleTriggerSerializerTest(object):
         assert result["dateAdded"] == trigger.date_added
 
 
-class AlertRuleSerializerTest(BaseAlertRuleTriggerSerializerTest, TestCase):
+class AlertRuleTriggerSerializerTest(BaseAlertRuleTriggerSerializerTest, TestCase):
     def test_simple(self):
         alert_rule = self.create_alert_rule()
         trigger = create_alert_rule_trigger(
             alert_rule, "hi", AlertRuleThresholdType.ABOVE, 1000, 200
         )
         result = serialize(trigger)
-        self.assert_alert_rule_serialized(trigger, result)
+        self.assert_alert_rule_trigger_serialized(trigger, result)
 
 
-class DetailedAlertRuleSerializerTest(BaseAlertRuleTriggerSerializerTest, TestCase):
+class DetailedAlertRuleTriggerSerializerTest(BaseAlertRuleTriggerSerializerTest, TestCase):
     def test_simple(self):
         alert_rule = self.create_alert_rule()
         trigger = create_alert_rule_trigger(
             alert_rule, "hi", AlertRuleThresholdType.ABOVE, 1000, 200
         )
         result = serialize(trigger, serializer=DetailedAlertRuleTriggerSerializer())
-        self.assert_alert_rule_serialized(trigger, result)
+        self.assert_alert_rule_trigger_serialized(trigger, result)
         assert result["excludedProjects"] == []
 
     def test_excluded_projects(self):
@@ -49,5 +49,5 @@ class DetailedAlertRuleSerializerTest(BaseAlertRuleTriggerSerializerTest, TestCa
             alert_rule, "hi", AlertRuleThresholdType.ABOVE, 1000, 200, excluded_projects=excluded
         )
         result = serialize(trigger, serializer=DetailedAlertRuleTriggerSerializer())
-        self.assert_alert_rule_serialized(trigger, result)
+        self.assert_alert_rule_trigger_serialized(trigger, result)
         assert result["excludedProjects"] == [p.slug for p in excluded]
diff --git a/tests/sentry/api/serializers/test_alert_rule_trigger_action.py b/tests/sentry/api/serializers/test_alert_rule_trigger_action.py
new file mode 100644
index 0000000000..4110065424
--- /dev/null
+++ b/tests/sentry/api/serializers/test_alert_rule_trigger_action.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import create_alert_rule_trigger, create_alert_rule_trigger_action
+from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
+from sentry.testutils import TestCase
+
+
+class AlertRuleTriggerActionSerializerTest(TestCase):
+    def assert_action_serialized(self, action, result):
+        assert result["id"] == six.text_type(action.id)
+        assert result["alertRuleTriggerId"] == six.text_type(action.alert_rule_trigger_id)
+        assert result["type"] == action.type
+        assert result["targetType"] == action.target_type
+        assert result["targetIdentifier"] == action.target_identifier
+        assert result["targetDisplay"] == action.target_identifier
+        assert result["integrationId"] == action.integration_id
+        assert result["dateAdded"] == action.date_added
+
+    def test_simple(self):
+        alert_rule = self.create_alert_rule()
+        trigger = create_alert_rule_trigger(
+            alert_rule, "hi", AlertRuleThresholdType.ABOVE, 1000, 200
+        )
+        action = create_alert_rule_trigger_action(
+            trigger,
+            AlertRuleTriggerAction.Type.EMAIL,
+            AlertRuleTriggerAction.TargetType.SPECIFIC,
+            "hello",
+        )
+        result = serialize(action)
+        self.assert_action_serialized(action, result)
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
new file mode 100644
index 0000000000..54227b8781
--- /dev/null
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
@@ -0,0 +1,165 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import (
+    create_alert_rule,
+    create_alert_rule_trigger,
+    create_alert_rule_trigger_action,
+)
+from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
+from sentry.snuba.models import QueryAggregations
+from sentry.testutils import APITestCase
+
+
+class AlertRuleTriggerActionDetailsBase(object):
+    endpoint = "sentry-api-0-organization-alert-rule-trigger-action-details"
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def alert_rule(self):
+        return create_alert_rule(
+            self.organization,
+            [self.project],
+            "hello",
+            AlertRuleThresholdType.ABOVE,
+            "level:error",
+            QueryAggregations.TOTAL,
+            10,
+            1000,
+            400,
+            1,
+        )
+
+    @fixture
+    def trigger(self):
+        return create_alert_rule_trigger(
+            self.alert_rule, "hello", AlertRuleThresholdType.ABOVE, 1000, 400
+        )
+
+    @fixture
+    def action(self):
+        return create_alert_rule_trigger_action(
+            self.trigger,
+            AlertRuleTriggerAction.Type.EMAIL,
+            AlertRuleTriggerAction.TargetType.SPECIFIC,
+            "hello",
+        )
+
+    def test_invalid_action_id(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_response(
+                self.organization.slug, self.alert_rule.id, self.trigger.id, 1234
+            )
+
+        assert resp.status_code == 404
+
+    def test_permissions(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.create_user())
+        with self.feature("organizations:incidents"):
+            resp = self.get_response(
+                self.organization.slug, self.alert_rule.id, self.trigger.id, self.action.id
+            )
+
+        assert resp.status_code == 403
+
+    def test_no_feature(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        resp = self.get_response(
+            self.organization.slug, self.alert_rule.id, self.trigger.id, self.action.id
+        )
+        assert resp.status_code == 404
+
+
+class AlertRuleTriggerActionDetailsGetEndpointTest(AlertRuleTriggerActionDetailsBase, APITestCase):
+    def test_simple(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_response(
+                self.organization.slug, self.alert_rule.id, self.trigger.id, self.action.id
+            )
+
+        assert resp.data == serialize(self.action)
+
+
+class AlertRuleTriggerActionDetailsPutEndpointTest(AlertRuleTriggerActionDetailsBase, APITestCase):
+    method = "put"
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_response(
+                self.organization.slug,
+                self.alert_rule.id,
+                self.trigger.id,
+                self.action.id,
+                target_identifier="wat",
+            )
+
+        self.action.target_identifier = "wat"
+        assert resp.data == serialize(self.action)
+        assert resp.data["targetIdentifier"] == "wat"
+
+    def test_not_updated_fields(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(
+                self.organization.slug,
+                self.alert_rule.id,
+                self.trigger.id,
+                self.action.id,
+                type=self.action.type,
+            )
+
+        # Alert rule should be exactly the same
+        assert resp.data == serialize(self.action)
+
+
+class AlertRuleTriggerActionDetailsDeleteEndpointTest(
+    AlertRuleTriggerActionDetailsBase, APITestCase
+):
+    method = "delete"
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            self.get_valid_response(
+                self.organization.slug,
+                self.alert_rule.id,
+                self.trigger.id,
+                self.action.id,
+                status_code=204,
+            )
+
+        assert not AlertRuleTriggerAction.objects.filter(id=self.action.id).exists()
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
new file mode 100644
index 0000000000..050fdfd826
--- /dev/null
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_index.py
@@ -0,0 +1,99 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from freezegun import freeze_time
+
+from sentry.api.serializers import serialize
+from sentry.incidents.logic import create_alert_rule_trigger, create_alert_rule_trigger_action
+from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
+from sentry.testutils import APITestCase
+
+
+class AlertRuleTriggerActionIndexBase(object):
+    endpoint = "sentry-api-0-organization-alert-rules-trigger-actions"
+
+    @fixture
+    def organization(self):
+        return self.create_organization()
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    @fixture
+    def alert_rule(self):
+        return self.create_alert_rule()
+
+    @fixture
+    def trigger(self):
+        return create_alert_rule_trigger(
+            self.alert_rule, "test", AlertRuleThresholdType.ABOVE, 1000, 400
+        )
+
+
+class AlertRuleTriggerActionListEndpointTest(AlertRuleTriggerActionIndexBase, APITestCase):
+    def test_simple(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        action = create_alert_rule_trigger_action(
+            self.trigger,
+            AlertRuleTriggerAction.Type.EMAIL,
+            AlertRuleTriggerAction.TargetType.SPECIFIC,
+            "hello",
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(
+                self.organization.slug, self.alert_rule.id, self.trigger.id
+            )
+
+        assert resp.data == serialize([action])
+
+    def test_no_feature(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
+        assert resp.status_code == 404
+
+
+@freeze_time()
+class AlertRuleTriggerActionCreateEndpointTest(AlertRuleTriggerActionIndexBase, APITestCase):
+    method = "post"
+
+    def test_simple(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        with self.feature("organizations:incidents"):
+            resp = self.get_valid_response(
+                self.organization.slug,
+                self.alert_rule.id,
+                self.trigger.id,
+                type=AlertRuleTriggerAction.Type.EMAIL.value,
+                targetType=AlertRuleTriggerAction.TargetType.SPECIFIC.value,
+                targetIdentifier="hello",
+                status_code=201,
+            )
+        assert "id" in resp.data
+        action = AlertRuleTriggerAction.objects.get(id=resp.data["id"])
+        assert resp.data == serialize(action, self.user)
+
+    def test_no_feature(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="owner", teams=[self.team]
+        )
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
+        assert resp.status_code == 404
+
+    def test_no_perms(self):
+        self.create_member(
+            user=self.user, organization=self.organization, role="member", teams=[self.team]
+        )
+        self.login_as(self.user)
+        resp = self.get_response(self.organization.slug, self.alert_rule.id, self.trigger.id)
+        assert resp.status_code == 403
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index f5de576b80..b2c0bae61e 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -3,9 +3,17 @@ from __future__ import absolute_import
 from exam import fixture
 
 from sentry.auth.access import from_user
-from sentry.incidents.endpoints.serializers import AlertRuleSerializer, AlertRuleTriggerSerializer
-from sentry.incidents.logic import create_alert_rule, create_alert_rule_trigger
-from sentry.incidents.models import AlertRuleThresholdType
+from sentry.incidents.endpoints.serializers import (
+    AlertRuleSerializer,
+    AlertRuleTriggerSerializer,
+    AlertRuleTriggerActionSerializer,
+)
+from sentry.incidents.logic import (
+    create_alert_rule,
+    create_alert_rule_trigger,
+    create_alert_rule_trigger_action,
+)
+from sentry.incidents.models import AlertRuleThresholdType, AlertRuleTriggerAction
 from sentry.snuba.models import QueryAggregations
 from sentry.testutils import TestCase
 
@@ -305,3 +313,112 @@ class TestAlertRuleTriggerSerializer(TestCase):
             {"excluded_projects": [self.other_project.slug]},
             {"excluded_projects": [self.other_project]},
         )
+
+
+class TestAlertRuleTriggerActionSerializer(TestCase):
+    @fixture
+    def other_project(self):
+        return self.create_project()
+
+    @fixture
+    def alert_rule(self):
+        return self.create_alert_rule(projects=[self.project, self.other_project])
+
+    @fixture
+    def trigger(self):
+        return create_alert_rule_trigger(
+            self.alert_rule, "hello", AlertRuleThresholdType.ABOVE, 100, 20
+        )
+
+    @fixture
+    def valid_params(self):
+        return {
+            "type": AlertRuleTriggerAction.Type.EMAIL.value,
+            "target_type": AlertRuleTriggerAction.TargetType.SPECIFIC.value,
+            "target_identifier": "test@test.com",
+        }
+
+    @fixture
+    def access(self):
+        return from_user(self.user, self.organization)
+
+    @fixture
+    def context(self):
+        return {
+            "organization": self.organization,
+            "access": self.access,
+            "alert_rule": self.alert_rule,
+            "trigger": self.trigger,
+        }
+
+    def run_fail_validation_test(self, params, errors):
+        base_params = self.valid_params.copy()
+        base_params.update(params)
+        serializer = AlertRuleTriggerActionSerializer(context=self.context, data=base_params)
+        assert not serializer.is_valid()
+        assert serializer.errors == errors
+
+    def test_validation_no_params(self):
+        serializer = AlertRuleTriggerActionSerializer(context=self.context, data={})
+        assert not serializer.is_valid()
+        field_is_required = ["This field is required."]
+        assert serializer.errors == {
+            "type": field_is_required,
+            "targetType": field_is_required,
+            "targetIdentifier": field_is_required,
+        }
+
+    def test_type(self):
+        invalid_values = [
+            "Invalid type, valid values are %s"
+            % [item.value for item in AlertRuleTriggerAction.Type]
+        ]
+        self.run_fail_validation_test({"type": "a"}, {"type": ["A valid integer is required."]})
+        self.run_fail_validation_test({"type": 50}, {"type": invalid_values})
+
+    def test_target_type(self):
+        invalid_values = [
+            "Invalid target_type, valid values are %s"
+            % [item.value for item in AlertRuleTriggerAction.TargetType]
+        ]
+        self.run_fail_validation_test(
+            {"target_type": "a"}, {"targetType": ["A valid integer is required."]}
+        )
+        self.run_fail_validation_test({"targetType": 50}, {"targetType": invalid_values})
+
+    def _run_changed_fields_test(self, trigger, params, expected):
+        serializer = AlertRuleTriggerActionSerializer(
+            context=self.context, instance=trigger, data=params, partial=True
+        )
+        assert serializer.is_valid(), serializer.errors
+        assert serializer._remove_unchanged_fields(trigger, serializer.validated_data) == expected
+
+    def test_remove_unchanged_fields(self):
+        type = AlertRuleTriggerAction.Type.EMAIL
+        target_type = AlertRuleTriggerAction.TargetType.SPECIFIC
+        identifier = "hello"
+        action = create_alert_rule_trigger_action(self.trigger, type, target_type, identifier)
+
+        self._run_changed_fields_test(
+            action,
+            {"type": type.value, "target_type": target_type.value, "target_identifier": identifier},
+            {},
+        )
+
+        self._run_changed_fields_test(action, {"type": type.value}, {})
+        self._run_changed_fields_test(
+            action,
+            {"type": AlertRuleTriggerAction.Type.SLACK.value},
+            {"type": AlertRuleTriggerAction.Type.SLACK},
+        )
+        self._run_changed_fields_test(action, {"target_type": target_type.value}, {})
+        self._run_changed_fields_test(
+            action,
+            {"target_type": AlertRuleTriggerAction.TargetType.USER.value},
+            {"target_type": AlertRuleTriggerAction.TargetType.USER},
+        )
+
+        self._run_changed_fields_test(action, {"target_identifier": identifier}, {})
+        self._run_changed_fields_test(
+            action, {"target_identifier": "bye"}, {"target_identifier": "bye"}
+        )
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index 28f6c35463..b4d572337f 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -36,6 +36,7 @@ from sentry.incidents.logic import (
     delete_alert_rule_trigger,
     delete_alert_rule_trigger_action,
     DEFAULT_ALERT_RULE_RESOLUTION,
+    get_actions_for_trigger,
     get_excluded_projects_for_alert_rule,
     get_incident_aggregates,
     get_incident_event_stats,
@@ -1389,3 +1390,16 @@ class DeleteAlertRuleTriggerAction(BaseAlertRuleTriggerActionTest, TestCase):
         delete_alert_rule_trigger_action(self.action)
         with self.assertRaises(AlertRuleTriggerAction.DoesNotExist):
             AlertRuleTriggerAction.objects.get(id=action_id)
+
+
+class GetActionsForTriggerTest(BaseAlertRuleTriggerActionTest, TestCase):
+    def test(self):
+        assert list(get_actions_for_trigger(self.trigger)) == []
+        action = create_alert_rule_trigger_action(
+            self.trigger,
+            AlertRuleTriggerAction.Type.EMAIL,
+            AlertRuleTriggerAction.TargetType.USER,
+            target_identifier=six.text_type(self.user.id),
+            target_display="hello",
+        )
+        assert list(get_actions_for_trigger(self.trigger)) == [action]
