commit 5cdf1bbd492cdc22b51558aac7b2a0bd0d4870b2
Author: Radu Woinaroski <5281987+RaduW@users.noreply.github.com>
Date:   Tue Jul 2 12:38:18 2019 +0200

    ref(filters): Use relay config instead of direct DB access (#13770)
    
    Refactored message filters to take relay_config rather than doing db access

diff --git a/src/sentry/api/endpoints/project_filter_details.py b/src/sentry/api/endpoints/project_filter_details.py
index f2be918bb4..22ec2756d8 100644
--- a/src/sentry/api/endpoints/project_filter_details.py
+++ b/src/sentry/api/endpoints/project_filter_details.py
@@ -2,10 +2,10 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import filters
+from sentry import message_filters
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import AuditLogEntryEvent
+from sentry.models.auditlogentry import AuditLogEntryEvent
 import six
 
 
@@ -19,21 +19,25 @@ class ProjectFilterDetailsEndpoint(ProjectEndpoint):
             {method} {path}
 
         """
-        try:
-            filter = filters.get(filter_id)(project)
-        except filters.FilterNotRegistered:
-            raise ResourceDoesNotExist
+        current_filter = None
+        for flt in message_filters.get_all_filters():
+            if flt.spec.id == filter_id:
+                current_filter = flt
+                break
+        else:
+            raise ResourceDoesNotExist  # could not find filter with the requested id
 
-        serializer = filter.serializer_cls(data=request.DATA, partial=True)
+        serializer = current_filter.spec.serializer_cls(data=request.DATA, partial=True)
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
 
-        current_state = filter.is_enabled()
-        new_state = filter.enable(serializer.object)
+        current_state = message_filters.get_filter_state(filter_id, project)
+
+        new_state = message_filters.set_filter_state(filter_id, project, serializer.object)
         audit_log_state = AuditLogEntryEvent.PROJECT_ENABLE
 
-        if filter.id == 'legacy-browsers':
+        if filter_id == 'legacy-browsers':
             if isinstance(current_state, bool) or new_state == 0 or isinstance(
                     new_state, six.binary_type):
                 returned_state = new_state
@@ -52,8 +56,8 @@ class ProjectFilterDetailsEndpoint(ProjectEndpoint):
             elif new_state == current_state:
                 returned_state = new_state
 
-        if filter.id in ('browser-extensions', 'localhost', 'web-crawlers'):
-            returned_state = filter.id
+        if filter_id in ('browser-extensions', 'localhost', 'web-crawlers'):
+            returned_state = filter_id
             removed = current_state - new_state
 
             if removed == 1:
diff --git a/src/sentry/api/endpoints/project_filters.py b/src/sentry/api/endpoints/project_filters.py
index bde5de51cb..abce7369ab 100644
--- a/src/sentry/api/endpoints/project_filters.py
+++ b/src/sentry/api/endpoints/project_filters.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import filters
+from sentry import message_filters
 from sentry.api.bases.project import ProjectEndpoint
 
 
@@ -17,16 +17,17 @@ class ProjectFiltersEndpoint(ProjectEndpoint):
 
         """
         results = []
-        for f_cls in filters.all():
-            filter = f_cls(project)
+        for flt in message_filters.get_all_filters():
+            filter_spec = flt.spec
             results.append(
                 {
-                    'id': filter.id,
+                    'id': filter_spec.id,
                     # 'active' will be either a boolean or list for the legacy browser filters
                     # all other filters will be boolean
-                    'active': filter.is_enabled(),
-                    'description': filter.description,
-                    'name': filter.name,
+                    'active': message_filters.get_filter_state(filter_spec.id, project),
+                    'description': filter_spec.description,
+                    'name': filter_spec.name,
+                    'hello': filter_spec.id + " - " + filter_spec.name
                 }
             )
         results.sort(key=lambda x: x['name'])
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 5b6692ce3d..7a4a4c0dd4 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -19,11 +19,12 @@ from django.db.models import Func
 from django.utils import timezone
 from django.utils.encoding import force_text
 
-from sentry import buffer, eventtypes, eventstream, features, tagstore, tsdb, filters
+from sentry import buffer, eventtypes, eventstream, features, tagstore, tsdb
 from sentry.constants import (
     DEFAULT_STORE_NORMALIZER_ARGS, LOG_LEVELS, LOG_LEVELS_MAP,
     MAX_TAG_VALUE_LENGTH, MAX_SECS_IN_FUTURE, MAX_SECS_IN_PAST,
 )
+from sentry.message_filters import should_filter_event
 from sentry.grouping.api import (
     get_grouping_config_dict_for_project,
     get_grouping_config_dict_for_event_data, load_grouping_config,
@@ -291,6 +292,7 @@ class EventManager(object):
         self._is_renormalize = is_renormalize
         self._remove_other = remove_other
         self._normalized = False
+        self.relay_config = relay_config
 
     def process_csp_report(self):
         """Only called from the CSP report endpoint."""
@@ -408,12 +410,7 @@ class EventManager(object):
             if message and not is_valid_error_message(self._project, message):
                 return (True, FilterStatKeys.ERROR_MESSAGE)
 
-        for filter_cls in filters.all():
-            filter_obj = filter_cls(self._project)
-            if filter_obj.is_enabled() and filter_obj.test(self._data):
-                return (True, six.text_type(filter_obj.id))
-
-        return (False, None)
+        return should_filter_event(self.relay_config, self._data)
 
     def get_data(self):
         return self._data
diff --git a/src/sentry/filters/__init__.py b/src/sentry/filters/__init__.py
deleted file mode 100644
index aa9d4ad370..0000000000
--- a/src/sentry/filters/__init__.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from __future__ import absolute_import, print_function
-
-__all__ = [
-    'Filter', 'FilterManager', 'FilterNotRegistered', 'all', 'exists', 'get', 'register',
-    'unregister'
-]
-
-from .base import Filter  # NOQA
-from .manager import FilterManager  # NOQA
-
-from .localhost import LocalhostFilter
-from .browser_extensions import BrowserExtensionsFilter
-from .legacy_browsers import LegacyBrowsersFilter
-from .web_crawlers import WebCrawlersFilter
-
-default_manager = FilterManager([
-    LocalhostFilter,
-    BrowserExtensionsFilter,
-    LegacyBrowsersFilter,
-    WebCrawlersFilter,
-])
-
-all = default_manager.all
-exists = default_manager.exists
-get = default_manager.get
diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
deleted file mode 100644
index 7722bc47f8..0000000000
--- a/src/sentry/filters/base.py
+++ /dev/null
@@ -1,50 +0,0 @@
-from __future__ import absolute_import
-
-__all__ = ['Filter']
-
-from sentry.models import ProjectOption
-from sentry.signals import inbound_filter_toggled
-from rest_framework import serializers
-
-
-class FilterSerializer(serializers.Serializer):
-    active = serializers.BooleanField()
-
-
-class Filter(object):
-    id = None
-    description = None
-    name = None
-    default = False
-    serializer_cls = FilterSerializer
-
-    def __init__(self, project):
-        self.project = project
-
-    def is_enabled(self):
-        return ProjectOption.objects.get_value(
-            project=self.project,
-            key=u'filters:{}'.format(self.id),
-            default='1' if self.default else '0',
-        ) == '1'
-
-    def enable(self, value=None):
-        if value is None:
-            value = {'active': True}
-
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key=u'filters:{}'.format(self.id),
-            value='1' if value.get('active', False) else '0',
-        )
-
-        if value:
-            inbound_filter_toggled.send(project=self.project, sender=self)
-
-        return value.get('active', False)
-
-    def disable(self):
-        return self.enable(False)
-
-    def test(self):
-        return False
diff --git a/src/sentry/filters/browser_extensions.py b/src/sentry/filters/browser_extensions.py
deleted file mode 100644
index fb601499cf..0000000000
--- a/src/sentry/filters/browser_extensions.py
+++ /dev/null
@@ -1,111 +0,0 @@
-from __future__ import absolute_import
-
-from .base import Filter
-
-import re
-
-from sentry.utils.data_filters import FilterStatKeys
-
-EXTENSION_EXC_VALUES = re.compile(
-    '|'.join(
-        (
-            re.escape(x)
-            for x in (
-                # Random plugins/extensions
-                'top.GLOBALS',
-                # See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error.html
-                'originalCreateNotification',
-                'canvas.contentDocument',
-                'MyApp_RemoveAllHighlights',
-                'http://tt.epicplay.com',
-                'Can\'t find variable: ZiteReader',
-                'jigsaw is not defined',
-                'ComboSearch is not defined',
-                'http://loading.retry.widdit.com/',
-                'atomicFindClose',
-                # Facebook borked
-                'fb_xd_fragment',
-                # ISP "optimizing" proxy - `Cache-Control: no-transform` seems to
-                # reduce this. (thanks @acdha)
-                # See http://stackoverflow.com/questions/4113268
-                'bmi_SafeAddOnload',
-                'EBCallBackMessageReceived',
-                # See
-                # https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/7VU0_VvC7mE
-                '_gCrWeb',
-                # See http://toolbar.conduit.com/Debveloper/HtmlAndGadget/Methods/JSInjection.aspx
-                'conduitPage',
-                # Google Search app (iOS)
-                # See: https://github.com/getsentry/raven-js/issues/756
-                'null is not an object (evaluating \'elt.parentNode\')',
-                # Dragon Web Extension from Nuance Communications
-                # See: https://forum.sentry.io/t/error-in-raven-js-plugin-setsuspendstate/481/
-                'plugin.setSuspendState is not a function',
-            )
-        )
-    ),
-    re.I
-)
-
-EXTENSION_EXC_SOURCES = re.compile(
-    '|'.join(
-        (
-            # Facebook flakiness
-            r'graph\.facebook\.com',
-            # Facebook blocked
-            r'connect\.facebook\.net',
-            # Woopra flakiness
-            r'eatdifferent\.com\.woopra-ns\.com',
-            r'static\.woopra\.com\/js\/woopra\.js',
-            # Chrome extensions
-            r'^chrome(?:-extension)?:\/\/',
-            # Cacaoweb
-            r'127\.0\.0\.1:4001\/isrunning',
-            # Other
-            r'webappstoolbarba\.texthelp\.com\/',
-            r'metrics\.itunes\.apple\.com\.edgesuite\.net\/',
-            # Kaspersky Protection browser extension
-            r'kaspersky-labs\.com',
-        )
-    ),
-    re.I
-)
-
-
-class BrowserExtensionsFilter(Filter):
-    id = FilterStatKeys.BROWSER_EXTENSION
-    name = 'Filter out errors known to be caused by browser extensions'
-    description = 'Certain browser extensions will inject inline scripts and are known to cause errors.'
-
-    def get_exception_value(self, data):
-        try:
-            return data['exception']['values'][0]['value']
-        except (LookupError, TypeError):
-            return ''
-
-    def get_exception_source(self, data):
-        try:
-            return data['exception']['values'][0]['stacktrace']['frames'
-                                                                ][-1]['abs_path']
-        except (LookupError, TypeError):
-            return ''
-
-    def test(self, data):
-        """
-        Test the exception value to determine if it looks like the error is
-        caused by a common browser extension.
-        """
-        if data.get('platform') != 'javascript':
-            return False
-
-        exc_value = self.get_exception_value(data)
-        if exc_value:
-            if EXTENSION_EXC_VALUES.search(exc_value):
-                return True
-
-        exc_source = self.get_exception_source(data)
-        if exc_source:
-            if EXTENSION_EXC_SOURCES.search(exc_source):
-                return True
-
-        return False
diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
deleted file mode 100644
index aaed585c12..0000000000
--- a/src/sentry/filters/legacy_browsers.py
+++ /dev/null
@@ -1,230 +0,0 @@
-from __future__ import absolute_import
-
-from .base import Filter
-
-from ua_parser.user_agent_parser import Parse
-from rest_framework import serializers
-from sentry.models import ProjectOption
-from sentry.api.fields import MultipleChoiceField
-from sentry.utils.data_filters import FilterStatKeys
-from sentry.utils.safe import get_path
-
-"""
-For default (legacy) filter
-"""
-MIN_VERSIONS = {
-    'Chrome': 0,
-    'IE': 10,
-    'Firefox': 0,
-    'Safari': 6,
-    'Edge': 0,
-    'Opera': 15,
-    'Android': 4,
-    'Opera Mini': 8
-}
-
-
-class LegacyBrowserFilterSerializer(serializers.Serializer):
-    active = serializers.BooleanField()
-    subfilters = MultipleChoiceField(
-        choices=[
-            'ie_pre_9',
-            'ie9',
-            'ie10',
-            'opera_pre_15',
-            'android_pre_4',
-            'safari_pre_6',
-            'opera_mini_pre_8']
-    )
-
-
-class LegacyBrowsersFilter(Filter):
-    id = FilterStatKeys.LEGACY_BROWSER
-    name = 'Filter out known errors from legacy browsers'
-    description = 'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.'
-    default = False
-    serializer_cls = LegacyBrowserFilterSerializer
-
-    def is_enabled(self):
-        # May be either a '1' or an iterable for new style
-        # The javascript code requires this to return either
-        # a boolean or a list of subfilters depending on if all, none, or some
-        # legacy browsers should be filtered
-        rv = ProjectOption.objects.get_value(
-            project=self.project,
-            key=u'filters:{}'.format(self.id),
-            default='1' if self.default else '0',
-        )
-
-        if rv == '1':
-            return True
-        if rv == '0':
-            return False
-
-        return rv
-
-    def enable(self, value=None):
-        if value is None:
-            value = {}
-
-        option_val = '0'
-        if 'active' in value:
-            if value['active']:
-                option_val = '1'
-        elif 'subfilters' in value and len(value['subfilters']) > 0:
-            option_val = set(value['subfilters'])
-
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key=u'filters:{}'.format(self.id),
-            value=option_val,
-        )
-
-        return option_val
-
-    def get_user_agent(self, data):
-        try:
-            for key, value in get_path(data, 'request', 'headers', filter=True) or ():
-                if key.lower() == 'user-agent':
-                    return value
-        except LookupError:
-            return ''
-
-    def filter_default(self, browser):
-        """
-        Legacy filter - new users specify individual filters
-        """
-        try:
-            minimum_version = MIN_VERSIONS[browser['family']]
-        except KeyError:
-            return False
-
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
-
-        if minimum_version > major_browser_version:
-            return True
-
-        return False
-
-    def filter_opera_pre_15(self, browser):
-        if not browser['family'] == "Opera":
-            return False
-
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
-
-        if major_browser_version < 15:
-            return True
-
-        return False
-
-    def filter_safari_pre_6(self, browser):
-        if not browser['family'] == "Safari":
-            return False
-
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
-
-        if major_browser_version < 6:
-            return True
-
-        return False
-
-    def filter_android_pre_4(self, browser):
-        if not browser['family'] == "Android":
-            return False
-
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
-
-        if major_browser_version < 4:
-            return True
-
-        return False
-
-    def filter_opera_mini_pre_8(self, browser):
-        if not browser['family'] == "Opera Mini":
-            return False
-
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
-
-        if major_browser_version < 8:
-            return True
-
-        return False
-
-    def _filter_ie(self, browser, compare_version):
-        if not browser['family'] == "IE":
-            return False
-
-        try:
-            major_browser_version = int(browser['major'])
-        except (TypeError, ValueError):
-            return False
-
-        return compare_version(major_browser_version)
-
-    def filter_ie10(self, browser):
-        return self._filter_ie(browser, lambda major_ver: major_ver == 10)
-
-    def filter_ie9(self, browser):
-        return self._filter_ie(browser, lambda major_ver: major_ver == 9)
-
-    def filter_ie_pre_9(self, browser):
-        return self._filter_ie(browser, lambda major_ver: major_ver <= 8)
-
-    def test(self, data):
-        if data.get('platform') != 'javascript':
-            return False
-
-        opts = ProjectOption.objects.get_value(
-            project=self.project,
-            key=u'filters:{}'.format(self.id),
-        )
-
-        value = self.get_user_agent(data)
-        if not value:
-            return False
-
-        ua = Parse(value)
-        if not ua:
-            return False
-
-        browser = ua['user_agent']
-
-        if not browser['family']:
-            return False
-
-        # IE Desktop and IE Mobile use the same engines, therefore we can treat them as one
-        if browser['family'] == "IE Mobile":
-            browser['family'] = "IE"
-
-        # handle old style config
-        if opts == '1':
-            return self.filter_default(browser)
-
-        # New style is not a simple boolean, but a list of
-        # specific filters to apply
-        if opts:
-            for key in opts:
-                try:
-                    fn = getattr(self, 'filter_' + key)
-                except AttributeError:
-                    pass
-                else:
-                    if fn(browser):
-                        return True
-
-        return False
diff --git a/src/sentry/filters/localhost.py b/src/sentry/filters/localhost.py
deleted file mode 100644
index 218e65e7fa..0000000000
--- a/src/sentry/filters/localhost.py
+++ /dev/null
@@ -1,27 +0,0 @@
-from __future__ import absolute_import
-
-from .base import Filter
-from six.moves.urllib.parse import urlparse
-from sentry.utils.data_filters import FilterStatKeys
-from sentry.utils.safe import get_path
-
-LOCAL_IPS = frozenset(['127.0.0.1', '::1'])
-LOCAL_DOMAINS = frozenset(['127.0.0.1', 'localhost'])
-
-
-class LocalhostFilter(Filter):
-    id = FilterStatKeys.LOCALHOST
-    name = 'Filter out events coming from localhost'
-    description = 'This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.'
-
-    def get_ip_address(self, data):
-        return get_path(data, 'user', 'ip_address') or ''
-
-    def get_url(self, data):
-        return get_path(data, 'request', 'url') or ''
-
-    def get_domain(self, data):
-        return urlparse(self.get_url(data)).hostname
-
-    def test(self, data):
-        return self.get_ip_address(data) in LOCAL_IPS or self.get_domain(data) in LOCAL_DOMAINS
diff --git a/src/sentry/filters/manager.py b/src/sentry/filters/manager.py
deleted file mode 100644
index 38f2426a16..0000000000
--- a/src/sentry/filters/manager.py
+++ /dev/null
@@ -1,32 +0,0 @@
-from __future__ import absolute_import, print_function
-
-__all__ = ['FilterManager', 'FilterNotRegistered']
-
-import six
-
-
-class FilterNotRegistered(Exception):
-    pass
-
-
-# TODO(dcramer): a lot of these managers are very similar and should abstracted
-# into some kind of base class
-class FilterManager(object):
-    def __init__(self, values):
-        self.__values = {cls.id: cls for cls in values}
-
-    def __iter__(self):
-        return six.itervalues(self.__values)
-
-    def all(self):
-        return iter(self)
-
-    def get(self, id):
-        try:
-            cls = self.__values[id]
-        except KeyError:
-            raise FilterNotRegistered(id)
-        return cls
-
-    def exists(self, id):
-        return id in self.__values
diff --git a/src/sentry/filters/web_crawlers.py b/src/sentry/filters/web_crawlers.py
deleted file mode 100644
index 7b7d580830..0000000000
--- a/src/sentry/filters/web_crawlers.py
+++ /dev/null
@@ -1,74 +0,0 @@
-from __future__ import absolute_import
-
-import re
-
-from .base import Filter
-from sentry.utils.data_filters import FilterStatKeys
-from sentry.utils.safe import get_path
-
-# not all of these agents are guaranteed to execute JavaScript, but to avoid
-# overhead of identifying which ones do, and which ones will over time we simply
-# target all of the major ones
-CRAWLERS = re.compile(
-    r'|'.join(
-        (
-            # Google spiders (Adsense and others)
-            # https://support.google.com/webmasters/answer/1061943?hl=en
-            r'Mediapartners\-Google',
-            r'AdsBot\-Google',
-            r'Googlebot',
-            r'FeedFetcher\-Google',
-            # Bing search
-            r'BingBot',
-            r'BingPreview',
-            # Baidu search
-            r'Baiduspider',
-            # Yahoo
-            r'Slurp',
-            # Sogou
-            r'Sogou',
-            # facebook
-            r'facebook',
-            # Alexa
-            r'ia_archiver',
-            # Generic bot
-            r'bots?[\/\s\)\;]',
-            # Generic spider
-            r'spider[\/\s\)\;]',
-            # Slack - see https://api.slack.com/robots
-            r'Slack',
-            # Google indexing bot
-            r'Calypso AppCrawler',
-            # Pingdom
-            r'pingdom',
-            # Lytics
-            r'lyticsbot'
-        )
-    ),
-    re.I
-)
-
-
-class WebCrawlersFilter(Filter):
-    id = FilterStatKeys.WEB_CRAWLER
-    name = 'Filter out known web crawlers'
-    description = 'Some crawlers may execute pages in incompatible ways which then cause errors that are unlikely to be seen by a normal user.'
-    default = True
-
-    def get_user_agent(self, data):
-        try:
-            for key, value in get_path(data, 'request', 'headers', filter=True) or ():
-                if key.lower() == 'user-agent':
-                    return value
-        except LookupError:
-            return ''
-
-    def test(self, data):
-        """Return True if event with given user agent should be filtered out, False otherwise"""
-
-        # TODO(dcramer): we could also look at UA parser and use the 'Spider'
-        # device type
-        user_agent = self.get_user_agent(data)
-        if not user_agent:
-            return False
-        return bool(CRAWLERS.search(user_agent))
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index bf8d24d9a8..a7c451dccc 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -424,7 +424,7 @@ class Csp(SecurityReport):
         if project is not None:
             disallowed += tuple(project.get_option('sentry:csp_ignored_sources', []))
 
-        if disallowed and any(is_valid_origin(uri and uri, allowed=disallowed) for uri in uris):
+        if disallowed and any(is_valid_origin(uri, allowed=disallowed) for uri in uris):
             return True
 
         return False
diff --git a/src/sentry/message_filters.py b/src/sentry/message_filters.py
new file mode 100644
index 0000000000..6f1be5a779
--- /dev/null
+++ b/src/sentry/message_filters.py
@@ -0,0 +1,557 @@
+# TODO RaduW 8.06.2019 remove the sentry.filters package and rename this module to filters
+from __future__ import absolute_import
+
+import collections
+from collections import namedtuple
+import re
+
+from sentry.models.projectoption import ProjectOption
+from sentry.utils.data_filters import FilterStatKeys
+from rest_framework import serializers
+from sentry.api.fields.multiplechoice import MultipleChoiceField
+
+from six.moves.urllib.parse import urlparse
+from sentry.utils.safe import get_path
+from ua_parser.user_agent_parser import Parse
+from sentry.signals import inbound_filter_toggled
+
+EventFilteredRet = namedtuple('EventFilteredRet', 'should_filter reason')
+
+
+def should_filter_event(relay_config, data):
+    """
+    Checks if an event should be filtered
+
+    :param relay_config: relay config for the request (for the project really)
+    :param data: the event data
+    :return: an EventFilteredRet explaining if the event should be filtered and, if it should the reason
+        for filtering
+    """
+    for event_filter in get_all_filters():
+        if _is_filter_enabled(relay_config, event_filter) and event_filter(relay_config, data):
+            return EventFilteredRet(should_filter=True, reason=event_filter.spec.id)
+
+    return EventFilteredRet(should_filter=False, reason=None)
+
+
+def get_all_filters():
+    """
+    Returns a list of the existing event filters
+
+    An event filter is a function that receives a relay_config and an event data payload and returns a tuple
+    (should_filter:bool, filter_reason: string | None) representing
+
+    :return: list of registered event filters
+    """
+    return (
+        _localhost_filter,
+        _browser_extensions_filter,
+        _legacy_browsers_filter,
+        _web_crawlers_filter,
+    )
+
+
+def set_filter_state(filter_id, project, state):
+    flt = _filter_from_filter_id(filter_id)
+    if flt is None:
+        raise FilterNotRegistered(filter_id)
+
+    if flt == _legacy_browsers_filter:
+        if state is None:
+            state = {}
+
+        option_val = '0'
+        if 'active' in state:
+            if state['active']:
+                option_val = '1'
+        elif 'subfilters' in state and len(state['subfilters']) > 0:
+            option_val = set(state['subfilters'])
+
+        ProjectOption.objects.set_value(
+            project=project,
+            key=u'filters:{}'.format(filter_id),
+            value=option_val,
+        )
+
+        return option_val
+
+    else:
+        # all boolean filters
+        if state is None:
+            state = {'active': True}
+
+        ProjectOption.objects.set_value(
+            project=project,
+            key=u'filters:{}'.format(filter_id),
+            value='1' if state.get('active', False) else '0',
+        )
+
+        if state:
+            inbound_filter_toggled.send(project=project, sender=flt)
+
+        return state.get('active', False)
+
+
+def get_filter_state(filter_id, project):
+    """
+    Returns the filter state
+
+    IMPORTANT: this function accesses the database, it should NEVER be used by the ingestion pipe.
+    This api is used by the ProjectFilterDetails and ProjectFilters endpoints
+    :param filter_id: the filter Id
+    :param project: the project for which we want the filter state
+    :return: True if the filter is enabled False otherwise
+    :raises: ValueError if filter id not registered
+    """
+    flt = _filter_from_filter_id(filter_id)
+    if flt is None:
+        raise FilterNotRegistered(filter_id)
+
+    filter_state = ProjectOption.objects.get_value(project=project, key=u'filters:{}'.format(flt.spec.id))
+
+    if filter_state is None:
+        raise ValueError("Could not find filter state for filter {0}."
+                         " You need to register default filter state in projectoptions.defaults.".format(filter_id))
+
+    if flt == _legacy_browsers_filter:
+        # special handling for legacy browser state
+        if filter_state == '1':
+            return True
+        if filter_state == '0':
+            return False
+        return filter_state
+    else:
+        return filter_state == "1"
+
+
+class FilterNotRegistered(Exception):
+    pass
+
+
+# ########################################################################################################
+# ########################################### Implementation #############################################
+# ########################################################################################################
+
+
+def _filter_from_filter_id(filter_id):
+    """
+    Returns the corresponding filter for a filter id or None if no filter with the given id found
+    """
+    for flt in get_all_filters():
+        if flt.spec.id == filter_id:
+            return flt
+    return None
+
+
+class _FilterSerializer(serializers.Serializer):
+    active = serializers.BooleanField()
+
+
+class _FilterSpec(object):
+    """
+    Data associated with a filter, it defines its name, id, default enable state and how its  state is serialized
+    in the database
+    """
+
+    def __init__(self, id, name, description, serializer_cls=None):
+        self.id = id
+        self.name = name
+        self.description = description
+        if serializer_cls is None:
+            self.serializer_cls = _FilterSerializer
+        else:
+            self.serializer_cls = serializer_cls
+
+
+def _get_filter_settings(relay_config, flt):
+    """
+    Gets the filter options from the relay config or the default option if not specified in the relay config
+
+    :param relay_config: the relay config for the request
+    :param flt: the filter
+    :return: the options for the filter
+    """
+    filter_settings = relay_config.config.get('filter_settings', {})
+    filter_key = flt.spec.id
+    return filter_settings.get(filter_key, None)
+
+
+def _is_filter_enabled(relay_config, flt):
+    filter_options = _get_filter_settings(relay_config, flt)
+
+    if filter_options is None:
+        raise ValueError("unknown filter", flt.spec.id)
+
+    return filter_options['is_enabled']
+
+
+# ************* local host filter *************
+_LOCAL_IPS = frozenset(['127.0.0.1', '::1'])
+_LOCAL_DOMAINS = frozenset(['127.0.0.1', 'localhost'])
+
+
+def _localhost_filter(relay_config, data):
+    ip_address = get_path(data, 'user', 'ip_address') or ''
+    url = get_path(data, 'request', 'url') or ''
+    domain = urlparse(url).hostname
+
+    return ip_address in _LOCAL_IPS or domain in _LOCAL_DOMAINS
+
+
+_localhost_filter.spec = _FilterSpec(
+    id=FilterStatKeys.LOCALHOST,
+    name='Filter out events coming from localhost',
+    description='This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.'
+)
+
+# ************* browser extensions filter *************
+_EXTENSION_EXC_VALUES = re.compile(
+    '|'.join((re.escape(x) for x in (
+        # Random plugins/extensions
+        'top.GLOBALS',
+        # See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error.html
+        'originalCreateNotification',
+        'canvas.contentDocument',
+        'MyApp_RemoveAllHighlights',
+        'http://tt.epicplay.com',
+        'Can\'t find variable: ZiteReader',
+        'jigsaw is not defined',
+        'ComboSearch is not defined',
+        'http://loading.retry.widdit.com/',
+        'atomicFindClose',
+        # Facebook borked
+        'fb_xd_fragment',
+        # ISP "optimizing" proxy - `Cache-Control: no-transform` seems to
+        # reduce this. (thanks @acdha)
+        # See http://stackoverflow.com/questions/4113268
+        'bmi_SafeAddOnload',
+        'EBCallBackMessageReceived',
+        # See
+        # https://groups.google.com/a/chromium.org/forum/#!topic/chromium-discuss/7VU0_VvC7mE
+        '_gCrWeb',
+        # See http://toolbar.conduit.com/Debveloper/HtmlAndGadget/Methods/JSInjection.aspx
+        'conduitPage',
+        # Google Search app (iOS)
+        # See: https://github.com/getsentry/raven-js/issues/756
+        'null is not an object (evaluating \'elt.parentNode\')',
+        # Dragon Web Extension from Nuance Communications
+        # See: https://forum.sentry.io/t/error-in-raven-js-plugin-setsuspendstate/481/
+        'plugin.setSuspendState is not a function',
+    ))), re.I)
+
+_EXTENSION_EXC_SOURCES = re.compile(
+    '|'.join(
+        (
+            # Facebook flakiness
+            r'graph\.facebook\.com',
+            # Facebook blocked
+            r'connect\.facebook\.net',
+            # Woopra flakiness
+            r'eatdifferent\.com\.woopra-ns\.com',
+            r'static\.woopra\.com\/js\/woopra\.js',
+            # Chrome extensions
+            r'^chrome(?:-extension)?:\/\/',
+            # Cacaoweb
+            r'127\.0\.0\.1:4001\/isrunning',
+            # Other
+            r'webappstoolbarba\.texthelp\.com\/',
+            r'metrics\.itunes\.apple\.com\.edgesuite\.net\/',
+            # Kaspersky Protection browser extension
+            r'kaspersky-labs\.com',
+        )
+    ),
+    re.I
+)
+
+
+def _browser_extensions_filter(relay_config, data):
+    if data.get('platform') != 'javascript':
+        return False
+
+    # get exception value
+    try:
+        exc_value = data['exception']['values'][0]['value']
+    except (LookupError, TypeError):
+        exc_value = ''
+    if exc_value:
+        if _EXTENSION_EXC_VALUES.search(exc_value):
+            return True
+
+    # get exception source
+    try:
+        exc_source = data['exception']['values'][0]['stacktrace']['frames'][-1]['abs_path']
+    except (LookupError, TypeError):
+        exc_source = ''
+    if exc_source:
+        if _EXTENSION_EXC_SOURCES.search(exc_source):
+            return True
+
+    return False
+
+
+_browser_extensions_filter.spec = _FilterSpec(
+    id=FilterStatKeys.BROWSER_EXTENSION,
+    name='Filter out errors known to be caused by browser extensions',
+    description='Certain browser extensions will inject inline scripts and are known to cause errors.'
+)
+
+# ************* legacy browsers filter *************
+MIN_VERSIONS = {
+    'Chrome': 0,
+    'IE': 10,
+    'Firefox': 0,
+    'Safari': 6,
+    'Edge': 0,
+    'Opera': 15,
+    'Android': 4,
+    'Opera Mini': 8
+}
+
+
+def _legacy_browsers_filter(relay_config, data):
+    def get_user_agent(data):
+        try:
+            for key, value in get_path(data, 'request', 'headers', filter=True) or ():
+                if key.lower() == 'user-agent':
+                    return value
+        except LookupError:
+            return ''
+
+    if data.get('platform') != 'javascript':
+        return False
+
+    value = get_user_agent(data)
+    if not value:
+        return False
+
+    ua = Parse(value)
+    if not ua:
+        return False
+
+    browser = ua['user_agent']
+
+    if not browser['family']:
+        return False
+
+    # IE Desktop and IE Mobile use the same engines, therefore we can treat them as one
+    if browser['family'] == "IE Mobile":
+        browser['family'] = "IE"
+
+    filter_settings = _get_filter_settings(relay_config, _legacy_browsers_filter)
+
+    # handle old style config
+    if filter_settings is None or filter_settings.get('default_filter', False):
+        return _filter_default(browser)
+
+    enabled_sub_filters = filter_settings.get('options')
+    if isinstance(enabled_sub_filters, collections.Sequence):
+        for sub_filter_name in enabled_sub_filters:
+            sub_filter = _legacy_browsers_sub_filters.get(sub_filter_name)
+            if sub_filter is not None and sub_filter(browser):
+                return True
+
+    return False
+
+
+class _LegacyBrowserFilterSerializer(serializers.Serializer):
+    active = serializers.BooleanField()
+    subfilters = MultipleChoiceField(
+        choices=[
+            'ie_pre_9',
+            'ie9',
+            'ie10',
+            'opera_pre_15',
+            'android_pre_4',
+            'safari_pre_6',
+            'opera_mini_pre_8']
+    )
+
+
+_legacy_browsers_filter.spec = _FilterSpec(
+    id=FilterStatKeys.LEGACY_BROWSER,
+    name='Filter out known errors from legacy browsers',
+    description='Older browsers often give less accurate information, and while they may report valid issues, '
+                'the context to understand them is incorrect or missing.',
+    serializer_cls=_LegacyBrowserFilterSerializer
+)
+
+
+def _filter_default(browser):
+    """
+    Legacy filter - new users specify individual filters
+    """
+    try:
+        minimum_version = MIN_VERSIONS[browser['family']]
+    except KeyError:
+        return False
+
+    try:
+        major_browser_version = int(browser['major'])
+    except (TypeError, ValueError):
+        return False
+
+    if minimum_version > major_browser_version:
+        return True
+
+    return False
+
+
+def _filter_opera_pre_15(browser):
+    if not browser['family'] == "Opera":
+        return False
+
+    try:
+        major_browser_version = int(browser['major'])
+    except (TypeError, ValueError):
+        return False
+
+    if major_browser_version < 15:
+        return True
+
+    return False
+
+
+def _filter_safari_pre_6(browser):
+    if not browser['family'] == "Safari":
+        return False
+
+    try:
+        major_browser_version = int(browser['major'])
+    except (TypeError, ValueError):
+        return False
+
+    if major_browser_version < 6:
+        return True
+
+    return False
+
+
+def _filter_android_pre_4(browser):
+    if not browser['family'] == "Android":
+        return False
+
+    try:
+        major_browser_version = int(browser['major'])
+    except (TypeError, ValueError):
+        return False
+
+    if major_browser_version < 4:
+        return True
+
+    return False
+
+
+def _filter_opera_mini_pre_8(browser):
+    if not browser['family'] == "Opera Mini":
+        return False
+
+    try:
+        major_browser_version = int(browser['major'])
+    except (TypeError, ValueError):
+        return False
+
+    if major_browser_version < 8:
+        return True
+
+    return False
+
+
+def _filter_ie10(browser):
+    return _filter_ie_internal(browser, lambda major_ver: major_ver == 10)
+
+
+def _filter_ie9(browser):
+    return _filter_ie_internal(browser, lambda major_ver: major_ver == 9)
+
+
+def _filter_ie_pre_9(browser):
+    return _filter_ie_internal(browser, lambda major_ver: major_ver <= 8)
+
+
+def _filter_ie_internal(browser, compare_version):
+    if not browser['family'] == "IE":
+        return False
+
+    try:
+        major_browser_version = int(browser['major'])
+    except (TypeError, ValueError):
+        return False
+
+    return compare_version(major_browser_version)
+
+
+# list all browser specific sub filters that should be called
+_legacy_browsers_sub_filters = {
+    'all': _filter_default,
+    'opera_pre_15': _filter_opera_pre_15,
+    'safari_pre_6': _filter_safari_pre_6,
+    'android_pre_4': _filter_android_pre_4,
+    'opera_mini_pre_8': _filter_opera_mini_pre_8,
+    'ie9': _filter_ie9,
+    'ie10': _filter_ie10,
+    'ie_pre_9': _filter_ie_pre_9,
+}
+
+# ************* web crawler filter *************
+
+# not all of these agents are guaranteed to execute JavaScript, but to avoid
+# overhead of identifying which ones do, and which ones will over time we simply
+# target all of the major ones
+_CRAWLERS = re.compile(
+    r'|'.join(
+        (
+            # Google spiders (Adsense and others)
+            # https://support.google.com/webmasters/answer/1061943?hl=en
+            r'Mediapartners\-Google',
+            r'AdsBot\-Google',
+            r'Googlebot',
+            r'FeedFetcher\-Google',
+            # Bing search
+            r'BingBot',
+            r'BingPreview',
+            # Baidu search
+            r'Baiduspider',
+            # Yahoo
+            r'Slurp',
+            # Sogou
+            r'Sogou',
+            # facebook
+            r'facebook',
+            # Alexa
+            r'ia_archiver',
+            # Generic bot
+            r'bots?[\/\s\)\;]',
+            # Generic spider
+            r'spider[\/\s\)\;]',
+            # Slack - see https://api.slack.com/robots
+            r'Slack',
+            # Google indexing bot
+            r'Calypso AppCrawler',
+            # Pingdom
+            r'pingdom',
+            # Lytics
+            r'lyticsbot'
+        )
+    ),
+    re.I
+)
+
+
+def _web_crawlers_filter(relay_config, data):
+    try:
+        for key, value in get_path(data, 'request', 'headers', filter=True) or ():
+            if key.lower() == 'user-agent':
+                if not value:
+                    return False
+                return bool(_CRAWLERS.search(value))
+        return False
+    except LookupError:
+        return False
+
+
+_web_crawlers_filter.spec = _FilterSpec(
+    id=FilterStatKeys.WEB_CRAWLER,
+    name='Filter out known web crawlers',
+    description='Some crawlers may execute pages in incompatible ways which then cause errors that'
+                ' are unlikely to be seen by a normal user.'
+)
diff --git a/src/sentry/projectoptions/defaults.py b/src/sentry/projectoptions/defaults.py
index 71db7fdee2..86353ce63a 100644
--- a/src/sentry/projectoptions/defaults.py
+++ b/src/sentry/projectoptions/defaults.py
@@ -67,3 +67,27 @@ register(
         2: ['ios', 'microsoft'],
     }
 )
+
+# Default legacy-browsers filter
+register(key='filters:legacy-browsers',
+         epoch_defaults={
+             1: '0'
+         })
+
+# Default legacy-browsers filter
+register(key='filters:web-crawlers',
+         epoch_defaults={
+             1: '1'
+         })
+
+# Default legacy-browsers filter
+register(key='filters:browser-extensions',
+         epoch_defaults={
+             1: '0'
+         })
+
+# Default legacy-browsers filter
+register(key='filters:localhost',
+         epoch_defaults={
+             1: '0'
+         })
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 3a6b181dfa..5418b8fccb 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -581,6 +581,7 @@ class StoreView(APIView):
             user_agent=helper.context.agent,
             version=auth.version,
             content_encoding=request.META.get('HTTP_CONTENT_ENCODING', ''),
+            relay_config=relay_config,
         )
         del data
 
diff --git a/src/sentry/web/relay_config.py b/src/sentry/web/relay_config.py
index aed19d39ca..2eb38fa6d2 100644
--- a/src/sentry/web/relay_config.py
+++ b/src/sentry/web/relay_config.py
@@ -4,18 +4,17 @@ import json
 import six
 import logging
 
-from copy import copy
-
 from sentry.coreapi import APIError
 from sentry.models.organizationoption import OrganizationOption
 from sentry.models.project import Project
 from sentry.models.organization import Organization
 from sentry import options
-from sentry.utils.data_filters import FilterTypes
+from sentry.utils.data_filters import FilterTypes, FilterStatKeys
 from sentry.utils.http import get_origins
 from sentry.utils.outcomes import Outcome, track_outcome
 from sentry.grouping.api import get_grouping_config_dict_for_project
-from sentry import filters
+from sentry.models.projectoption import ProjectOption
+from sentry.message_filters import get_all_filters
 
 logger = logging.getLogger('sentry')
 
@@ -28,6 +27,78 @@ _restricted_config_properties = frozenset([
 ])
 
 
+def _to_camel_case_name(name):
+    """
+    Converts a string from snake_case to camelCase
+
+    :param name: the string to convert
+    :return: the name converted to camelCase
+
+    >>> _to_camel_case_name(22)
+    22
+    >>> _to_camel_case_name("hello_world")
+    'helloWorld'
+    >>> _to_camel_case_name("_hello_world")
+    'helloWorld'
+    >>> _to_camel_case_name("__hello___world___")
+    'helloWorld'
+    >>> _to_camel_case_name("hello")
+    'hello'
+    >>> _to_camel_case_name("Hello_world")
+    'helloWorld'
+    >>> _to_camel_case_name("one_two_three_four")
+    'oneTwoThreeFour'
+    >>> _to_camel_case_name("oneTwoThreeFour")
+    'oneTwoThreeFour'
+    """
+
+    def first_lower(s):
+        return s[:1].lower() + s[1:]
+
+    def first_upper(s):
+        return s[:1].upper() + s[1:]
+
+    if not isinstance(name, six.string_types):
+        return name
+    else:
+        name = name.strip("_")
+        pieces = name.split('_')
+        return first_lower(pieces[0]) + ''.join(first_upper(x) for x in pieces[1:])
+
+
+def _to_camel_case_dict(obj):
+    """
+    Converts recursively the keys of a dictionary from snake_case to camelCase
+
+    This is intended for converting dictionaries that use the python convention to
+    dictionaries that use the javascript/JSON convention
+
+    NOTE: this function will, by default,  mutate the dictionary in place.
+    If you do not want to change the input use clone=True
+
+    :param obj: the dictionary
+
+    :return: a dictionary with the string keys converted
+
+    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
+    {'abc': {'oneTwoThree': 1}}
+    >>> val = {'_abc': {'_one_two_three': 1}}
+    >>> _to_camel_case_dict({'_abc': {'_one_two_three': 1}})
+    {'abc': {'oneTwoThree': 1}}
+
+    # check that we didn't affect the original
+    >>> val
+    {'_abc': {'_one_two_three': 1}}
+
+    """
+
+    if not isinstance(obj, dict):
+        raise ValueError("Bad parameter passed expected dictionary got {}".format(repr(type(obj))))
+
+    return {_to_camel_case_name(key): _to_camel_case_dict(value) if isinstance(value, dict) else value
+            for (key, value) in six.iteritems(obj)}
+
+
 class _ConfigBase(object):
     """
     Base class for configuration objects
@@ -64,6 +135,7 @@ class _ConfigBase(object):
         """
         Converts the config object into a dictionary
 
+        :param to_camel_case: should the dictionary keys be converted to camelCase from snake_case
         :return: A dictionary containing the object properties, with config properties also converted in dictionaries
 
         >>> x = _ConfigBase( a= 1, b="The b", c= _ConfigBase(x=33, y = _ConfigBase(m=3.14159 , w=[1,2,3], z={'t':1})))
@@ -71,12 +143,8 @@ class _ConfigBase(object):
         True
         """
         data = self.__get_data()
-        cp = copy(data)  # copy so that we don't override inner RelayConfig objects
-
-        for (key, val) in six.iteritems(cp):
-            if isinstance(val, _ConfigBase):
-                cp[key] = val.to_dict()
-        return cp
+        return {key: value.to_dict() if isinstance(value, _ConfigBase) else value for (key, value) in
+                six.iteritems(data)}
 
     def to_json_string(self):
         """
@@ -87,6 +155,7 @@ class _ConfigBase(object):
         :return:
         """
         data = self.to_dict()
+        data = _to_camel_case_dict(data)
         return json.dumps(data)
 
     def get_at_path(self, *args):
@@ -105,8 +174,7 @@ class _ConfigBase(object):
         True
         >>> x.get_at_path('c','y','z')
         {'t': 1}
-        >>> x.get_at_path('c','y','z','t') is None # only navigates in ConfigBase does not try to go into normal
-        dictionaries
+        >>> x.get_at_path('c','y','z','t') is None # only navigates in ConfigBase does not try to go into normal dicts.
         True
 
         """
@@ -216,11 +284,14 @@ def get_full_relay_config(project_id):
     if invalid_releases is not None:
         project_cfg['invalid_releases'] = invalid_releases
 
-    # get the filters enabled for the current project
-    enabled_filters = [filter_class.id for filter_class in filters.all()
-                       if filter_class(project).is_enabled()]
+    # get the filter settings for this project
+    filter_settings = {}
+    project_cfg['filter_settings'] = filter_settings
 
-    project_cfg['enabled_filters'] = enabled_filters
+    for flt in get_all_filters():
+        filter_id = flt.spec.id
+        settings = _load_filter_settings(flt, project)
+        filter_settings[filter_id] = settings
 
     scrub_ip_address = (org_options.get('sentry:require_scrub_ip_address', False) or
                         project.get_option('sentry:scrub_ip_address', False))
@@ -268,3 +339,52 @@ def _get_project_from_id(project_id):
     except Project.DoesNotExist:
         track_outcome(0, 0, None, Outcome.INVALID, "project_id")
         raise APIError('Invalid project_id: %r' % project_id)
+
+
+def _load_filter_settings(flt, project):
+    """
+    Returns the filter settings for the specified project
+
+    :param flt: the filter function
+    :param project: the project for which we want to retrieve the options
+    :return: a dictionary with the filter options.
+        If the project does not explicitly specify the filter options then the
+        default options for the filter will be returned
+    """
+    filter_id = flt.spec.id
+    filter_key = u'filters:{}'.format(filter_id)
+    setting = ProjectOption.objects.get_value(project=project, key=filter_key, default=None)
+
+    return _filter_option_to_config_setting(flt, setting)
+
+
+def _filter_option_to_config_setting(flt, setting):
+    """
+    Encapsulates the logic for associating a filter database option with the filter setting from relay_config
+
+    :param flt: the filter
+    :param setting: the option deserialized from the database
+    :return: the option as viewed from relay_config
+    """
+    if setting is None:
+        raise ValueError("Could not find filter state for filter {0}."
+                         " You need to register default filter state in projectoptions.defaults.".format(flt.spec.id))
+
+    is_enabled = setting != '0'
+
+    ret_val = {
+        'is_enabled': is_enabled
+    }
+
+    # special case for legacy browser.
+    # If the number of special cases increases we'll have to factor this functionality somewhere
+    if flt.spec.id == FilterStatKeys.LEGACY_BROWSER:
+        if is_enabled:
+            if setting == '1':
+                # old style filter
+                ret_val['default_filter'] = True
+            else:
+                # new style filter, per legacy browser type handling
+                # ret_val['options'] = setting.split(' ')
+                ret_val['options'] = list(setting)
+    return ret_val
diff --git a/tests/integration/test_message_filters.py b/tests/integration/test_message_filters.py
new file mode 100644
index 0000000000..6afb8f464a
--- /dev/null
+++ b/tests/integration/test_message_filters.py
@@ -0,0 +1,132 @@
+from __future__ import absolute_import
+
+from sentry.models.projectoption import ProjectOption
+from sentry.testutils import TestCase
+from sentry.utils.safe import set_path
+from sentry.message_filters import (
+    _localhost_filter, _browser_extensions_filter, _web_crawlers_filter,
+    _legacy_browsers_filter,
+)
+
+
+class FilterTests(TestCase):
+    def _get_message(self):
+        return {
+
+        }
+
+    def _set_filter_state(self, flt, state):
+        ProjectOption.objects.set_value(
+            project=self.project,
+            key=u'filters:{}'.format(flt.spec.id),
+            value=state,
+        )
+
+    def _get_message_with_bad_ip(self):
+        message = self._get_message()
+        set_path(message, 'user', 'ip_address', value='127.0.0.1')
+        return message
+
+    def test_should_not_filter_simple_messages(self):
+        # baseline test (so we know everything works as expected)
+        message = self._get_message()
+        resp = self._postWithHeader(message)
+        assert resp.status_code < 400  # no http error
+
+    def test_should_filter_local_ip_addresses_when_enabled(self):
+        self._set_filter_state(_localhost_filter, '1')
+        message = self._get_message_with_bad_ip()
+        resp = self._postWithHeader(message)
+        assert resp.status_code >= 400  # some http error
+
+    def test_should_not_filter_bad_ip_addresses_when_disabled(self):
+        self._set_filter_state(_localhost_filter, '0')
+        message = self._get_message_with_bad_ip()
+        resp = self._postWithHeader(message)
+        assert resp.status_code < 400  # no http error
+
+    def _get_message_with_bad_extension(self):
+        message = self._get_message()
+        set_path(message, 'platform', value='javascript')
+        set_path(message, 'exception', value={
+            'values': [
+                {
+                    'type': 'Error',
+                    'value': 'http://loading.retry.widdit.com/',
+
+                }
+            ]
+        })
+        return message
+
+    def test_should_filter_browser_extensions_when_enbabled(self):
+        self._set_filter_state(_browser_extensions_filter, '1')
+        message = self._get_message_with_bad_extension()
+        resp = self._postWithHeader(message)
+        assert resp.status_code >= 400  # some http error
+
+    def test_should_not_filter_browser_extensions_when_disabled(self):
+        self._set_filter_state(_browser_extensions_filter, '0')
+        message = self._get_message_with_bad_extension()
+        resp = self._postWithHeader(message)
+        assert resp.status_code < 400  # no http error
+
+    def _get_message_from_webcrawler(self):
+        message = self._get_message()
+        set_path(message, 'request', value={
+            'url': 'http://example.com',
+            'method': 'GET',
+            'headers': [
+                ['User-Agent', 'Mediapartners-Google'],
+            ]
+        })
+        return message
+
+    def test_should_filter_web_crawlers_when_enabled(self):
+        self._set_filter_state(_web_crawlers_filter, '1')
+        message = self._get_message_from_webcrawler()
+        resp = self._postWithHeader(message)
+        assert resp.status_code >= 400  # some http error
+
+    def test_should_not_filter_web_crawlers_when_disabled(self):
+        self._set_filter_state(_web_crawlers_filter, '0')
+        message = self._get_message_from_webcrawler()
+        resp = self._postWithHeader(message)
+        assert resp.status_code < 400  # no http error
+
+    def _get_message_from_legacy_browser(self):
+        ie_5_user_agent = 'Mozilla/4.0 (compatible; MSIE 5.50; Windows NT; SiteKiosk 4.9; SiteCoach 1.0)'
+        message = self._get_message()
+        set_path(message, 'platform', value='javascript')
+        set_path(message, 'request', value={
+            'url': 'http://example.com',
+            'method': 'GET',
+            'headers': [
+                ['User-Agent', ie_5_user_agent],
+            ]
+        })
+        return message
+
+    def test_should_filter_legacy_browsers_all_enabled(self):
+        self._set_filter_state(_legacy_browsers_filter, '1')
+        message = self._get_message_from_legacy_browser()
+        resp = self._postWithHeader(message)
+        assert resp.status_code >= 400  # some http error
+
+    def test_should_filter_legacy_browsers_specific_browsers(self):
+        self._set_filter_state(_legacy_browsers_filter, {'ie_pre_9', 'safari_5'})
+        message = self._get_message_from_legacy_browser()
+        resp = self._postWithHeader(message)
+        assert resp.status_code >= 400  # some http error
+
+    def test_should_not_filter_legacy_browsers_when_disabled(self):
+        self._set_filter_state(_legacy_browsers_filter, '0')
+        message = self._get_message_from_legacy_browser()
+        resp = self._postWithHeader(message)
+        assert resp.status_code < 400  # no http error
+
+    def test_should_not_filter_legacy_browsers_when_current_browser_check_disabled(self):
+        self._set_filter_state(_legacy_browsers_filter, {'safari_5'})
+        message = self._get_message_from_legacy_browser()
+        resp = self._postWithHeader(message)
+        assert resp.status_code < 400  # no http error
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
index a30169a6f6..f627c33f80 100644
--- a/tests/sentry/filters/test_browser_extensions.py
+++ b/tests/sentry/filters/test_browser_extensions.py
@@ -1,14 +1,15 @@
 from __future__ import absolute_import
 
-from sentry.filters.browser_extensions import BrowserExtensionsFilter
+from sentry.message_filters import _browser_extensions_filter
+from sentry.web.relay_config import FullRelayConfig
 from sentry.testutils import TestCase
 
 
 class BrowserExtensionsFilterTest(TestCase):
-    filter_cls = BrowserExtensionsFilter
 
     def apply_filter(self, data):
-        return self.filter_cls(self.project).test(data)
+        relay_config = FullRelayConfig(self.project)
+        return _browser_extensions_filter(relay_config, data)
 
     def get_mock_data(self, exc_value=None, exc_source=None):
         return {
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 6375d23151..130071a7c5 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -2,48 +2,57 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from ua_parser.user_agent_parser import Parse
-
-from sentry.filters.legacy_browsers import LegacyBrowsersFilter
-from sentry.models import ProjectOption, AuditLogEntry, AuditLogEntryEvent
+from sentry.message_filters import _legacy_browsers_filter  # noqa
+from sentry.web.relay_config import _filter_option_to_config_setting  # noqa
+from sentry.models.projectoption import ProjectOption
+from sentry.models.auditlogentry import AuditLogEntry, AuditLogEntryEvent
 from sentry.testutils import APITestCase, TestCase
 from sentry.utils.canonical import CanonicalKeyView
+from sentry.web.relay_config import FullRelayConfig
 
 USER_AGENTS = {
     'android_2':
-    'Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1',
+        'Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; HTC Vision Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) '
+        'Version/4.0 Mobile Safari/533.1',
     'android_4':
-    'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19',
+        'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) '
+        'Chrome/18.0.1025.133 Mobile Safari/535.19',
     'ie_5':
-    'Mozilla/4.0 (compatible; MSIE 5.50; Windows NT; SiteKiosk 4.9; SiteCoach 1.0)',
+        'Mozilla/4.0 (compatible; MSIE 5.50; Windows NT; SiteKiosk 4.9; SiteCoach 1.0)',
     'ie_8':
-    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC; Tablet PC 2.0)',
+        'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET '
+        'CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC; Tablet PC 2.0)',
     'ie_9':
-    'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))',
+        'Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))',
     'iemobile_9':
-    'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; NOKIA; Lumia 710)',
+        'Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; NOKIA; Lumia 710)',
     'ie_10':
-    'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)',
+        'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)',
     'iemobile_10':
-    'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)',
+        'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia '
+        '520)',
     'opera_11':
-    'Opera/9.80 (Windows NT 5.1; U; it) Presto/2.7.62 Version/11.00',
+        'Opera/9.80 (Windows NT 5.1; U; it) Presto/2.7.62 Version/11.00',
     'opera_12':
-    'Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16',
+        'Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16',
     'opera_15':
-    'Mozilla/5.0 (X11; Linux x86_64; Debian) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 Safari/537.36 OPR/15.0.1147.100',
+        'Mozilla/5.0 (X11; Linux x86_64; Debian) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 '
+        'Safari/537.36 OPR/15.0.1147.100',
     'chrome':
-    'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',
+        'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',
     'edge':
-    'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136',
+        'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 '
+        'Edge/12.10136',
     'safari_5':
-    'Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-HK) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 Safari/533.18.5',
+        'Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-HK) AppleWebKit/533.18.1 (KHTML, like Gecko) Version/5.0.2 '
+        'Safari/533.18.5',
     'safari_7':
-    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A',
+        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 '
+        'Safari/7046A194A',
     'opera_mini_8':
-    'Opera/9.80 (J2ME/MIDP; Opera Mini/8.0.35158/36.2534; U; en) Presto/2.12.423 Version/12.16',
+        'Opera/9.80 (J2ME/MIDP; Opera Mini/8.0.35158/36.2534; U; en) Presto/2.12.423 Version/12.16',
     'opera_mini_7':
-    'Opera/9.80 (J2ME/MIDP; Opera Mini/7.0.32796/59.323; U; fr) Presto/2.12.423 Version/12.16',
+        'Opera/9.80 (J2ME/MIDP; Opera Mini/7.0.32796/59.323; U; fr) Presto/2.12.423 Version/12.16',
 }
 
 
@@ -232,10 +241,9 @@ class SetLegacyBrowserFilterTest(APITestCase):
 
 
 class LegacyBrowsersFilterTest(TestCase):
-    filter_cls = LegacyBrowsersFilter
 
-    def apply_filter(self, data):
-        return self.filter_cls(self.project).test(CanonicalKeyView(data))
+    def apply_filter(self, relay_config, data):
+        return _legacy_browsers_filter(relay_config, CanonicalKeyView(data))
 
     def get_mock_data(self, user_agent):
         return {
@@ -249,232 +257,168 @@ class LegacyBrowsersFilterTest(TestCase):
             }
         }
 
+    def _get_relay_config(self, filter_opt=None):
+        """
+        Constructs a test relay_config with the provided legacy_browsers filter setting
+        :param filter_opt: the value for 'filters:legacy-browsers' project options (may be None)
+        :return: a RelayConfig object with the filter option set and the project taken from
+        the TestCase
+        """
+        ret_val = FullRelayConfig(self.project, config={})
+        config = ret_val.config
+        filter_settings = {}
+        config['filter_settings'] = filter_settings
+        if filter_opt is not None:
+            key = _legacy_browsers_filter.spec.id
+            filter_settings[key] = _filter_option_to_config_setting(_legacy_browsers_filter, filter_opt)
+        return ret_val
+
     def test_filters_android_2_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['android_2'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_not_filter_android_4_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['android_4'])
-        assert self.apply_filter(data) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filters_ie_9_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['ie_9'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filters_iemobile_9_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['iemobile_9'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_not_filter_ie_10_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['ie_10'])
-        assert self.apply_filter(data) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_does_not_filter_iemobile_10_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['iemobile_10'])
-        assert self.apply_filter(data) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filters_opera_12_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['opera_12'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filters_opera_mini_7_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_not_filter_chrome_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['chrome'])
-        assert self.apply_filter(data) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_does_not_filter_edge_by_default(self):
-        ProjectOption.objects.set_value(
-            project=self.project,
-            key='filters:legacy-browsers',
-            value='1',
-        )
+        relay_config = self._get_relay_config('1')
         data = self.get_mock_data(USER_AGENTS['edge'])
-        assert self.apply_filter(data) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filter_opera(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'opera_pre_15'}
-        )
+        relay_config = self._get_relay_config(['opera_pre_15'])
         data = self.get_mock_data(USER_AGENTS['opera_12'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filter_opera_method(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['opera_12'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_opera_pre_15(browser) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_dont_filter_opera_15(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['opera_15'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_opera_pre_15(browser) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filter_opera_mini(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'opera_mini_pre_8'}
-        )
+        relay_config = self._get_relay_config(['opera_mini_pre_8'])
         data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filter_opera_mini_method(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['opera_mini_7'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_opera_mini_pre_8(browser) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_dont_filter_opera_mini_8(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['opera_mini_8'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_opera_mini_pre_8(browser) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filters_ie8(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'ie_pre_9'}
-        )
+        relay_config = self._get_relay_config(['ie_pre_9'])
         data = self.get_mock_data(USER_AGENTS['ie_8'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filters_ie8_method(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['ie_8'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_ie_pre_9(browser) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_filter_ie9(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'ie9'}
-        )
+        relay_config = self._get_relay_config(['ie9'])
         data = self.get_mock_data(USER_AGENTS['ie_9'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_filter_iemobile_9(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'ie9'}
-        )
+        relay_config = self._get_relay_config(['ie9'])
         data = self.get_mock_data(USER_AGENTS['iemobile_9'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_filter_ie10(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'ie10'}
-        )
+        relay_config = self._get_relay_config(['ie10'])
         data = self.get_mock_data(USER_AGENTS['ie_10'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_not_filter_ie10(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['ie_10'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_ie_pre_9(browser) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_does_filter_iemobile_10(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'ie10'}
-        )
+        relay_config = self._get_relay_config(['ie10'])
         data = self.get_mock_data(USER_AGENTS['iemobile_10'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_does_not_filter_iemobile_10(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['iemobile_10'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_ie_pre_9(browser) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filters_safari(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'safari_pre_6'}
-        )
+        relay_config = self._get_relay_config(['safari_pre_6'])
         data = self.get_mock_data(USER_AGENTS['safari_5'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filters_safari_method(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['safari_5'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_safari_pre_6(browser) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_method_does_not_filter_safari_7(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['safari_7'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_safari_pre_6(browser) is False
+        assert self.apply_filter(relay_config, data) is False
 
     def test_filters_android(self):
-        ProjectOption.objects.set_value(
-            project=self.project, key='filters:legacy-browsers', value={'android_pre_4'}
-        )
+        relay_config = self._get_relay_config(['android_pre_4'])
         data = self.get_mock_data(USER_AGENTS['android_2'])
-        assert self.apply_filter(data) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_filters_android_method(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['android_2'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_android_pre_4(browser) is True
+        assert self.apply_filter(relay_config, data) is True
 
     def test_method_does_not_filter_android_4(self):
+        relay_config = self._get_relay_config()
         data = self.get_mock_data(USER_AGENTS['android_4'])
-        ua_data = self.filter_cls(self.project).get_user_agent(data)
-        ua = Parse(ua_data)
-        browser = ua['user_agent']
-        assert self.filter_cls(self.project).filter_android_pre_4(browser) is False
+        assert self.apply_filter(relay_config, data) is False
diff --git a/tests/sentry/filters/test_localhost.py b/tests/sentry/filters/test_localhost.py
index ced97cc00f..99396436b6 100644
--- a/tests/sentry/filters/test_localhost.py
+++ b/tests/sentry/filters/test_localhost.py
@@ -1,14 +1,15 @@
 from __future__ import absolute_import
 
-from sentry.filters.localhost import LocalhostFilter
+from sentry.message_filters import _localhost_filter
+from sentry.web.relay_config import FullRelayConfig
 from sentry.testutils import TestCase
 
 
 class LocalhostFilterTest(TestCase):
-    filter_cls = LocalhostFilter
 
     def apply_filter(self, data):
-        return self.filter_cls(self.project).test(data)
+        relay_config = FullRelayConfig(self.project)
+        return _localhost_filter(relay_config, data)
 
     def get_mock_data(self, client_ip=None, url=None):
         return {
diff --git a/tests/sentry/filters/test_web_crawlers.py b/tests/sentry/filters/test_web_crawlers.py
index 99c76ae449..5dba8d4a4c 100644
--- a/tests/sentry/filters/test_web_crawlers.py
+++ b/tests/sentry/filters/test_web_crawlers.py
@@ -1,16 +1,18 @@
 from __future__ import absolute_import
 
-from sentry.models import Project
-from sentry.filters.web_crawlers import WebCrawlersFilter
+from sentry.models.project import Project
 from unittest import TestCase
 
+from sentry.message_filters import _web_crawlers_filter
+from sentry.web.relay_config import FullRelayConfig
+
 
 class WebCrawlersFilterTest(TestCase):
-    filter_cls = WebCrawlersFilter
 
     def apply_filter(self, data):
         project = Project()
-        return self.filter_cls(project).test(data)
+        relay_config = FullRelayConfig(project)
+        return _web_crawlers_filter(relay_config, data)
 
     def get_mock_data(self, user_agent):
         return {
@@ -67,7 +69,8 @@ class WebCrawlersFilterTest(TestCase):
 
     def test_filters_calypso_appcrawler(self):
         data = self.get_mock_data(
-            'Mozilla/5.0 (Linux; Android 6.0.1; Calypso AppCrawler Build/MMB30Y; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/53.0.2785.124 Mobile Safari/537.36'
+            'Mozilla/5.0 (Linux; Android 6.0.1; Calypso AppCrawler Build/MMB30Y; wv) AppleWebKit/537.36 (KHTML, '
+            'like Gecko) Version/4.0 Chrome/53.0.2785.124 Mobile Safari/537.36'
         )
         assert self.apply_filter(data)
 
