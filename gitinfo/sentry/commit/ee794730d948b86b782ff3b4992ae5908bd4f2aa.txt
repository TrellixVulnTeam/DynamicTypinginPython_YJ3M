commit ee794730d948b86b782ff3b4992ae5908bd4f2aa
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Nov 7 10:49:41 2018 -0800

    ref(data-forwarding): Refactor page (#10364)
    
     - Refactors component to use ES6 classes instead of createReactClass.
       This includes using AsyncComponent.
    
     - Cleans up some typography.
    
     - Uses the Feature component to mark when the feature is disabled.

diff --git a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
index 74b9321dae..b42f42e606 100644
--- a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
+++ b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
@@ -1,89 +1,51 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {t, tct} from 'app/locale';
-import ApiMixin from 'app/mixins/apiMixin';
+import Alert from 'app/components/alert';
+import AsyncComponent from 'app/components/asyncComponent';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import ExternalLink from 'app/components/externalLink';
-import HookStore from 'app/stores/hookStore';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
 import PluginList from 'app/components/pluginList';
-import ProjectState from 'app/mixins/projectState';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import StackedBarChart from 'app/components/stackedBarChart';
 import TextBlock from 'app/views/settings/components/text/textBlock';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-
-const DataForwardingStats = createReactClass({
-  displayName: 'DataForwardingStats',
-  mixins: [ApiMixin],
+import withOrganization from 'app/utils/withOrganization';
+import withProjects from 'app/utils/withProjects';
 
-  getInitialState() {
+class DataForwardingStats extends AsyncComponent {
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
     let until = Math.floor(new Date().getTime() / 1000);
     let since = until - 3600 * 24 * 30;
 
-    return {
-      since,
-      until,
-      loading: true,
-      error: false,
-      stats: null,
-      emptyStats: false,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/stats/`, {
+    let options = {
       query: {
-        since: this.state.since,
-        until: this.state.until,
+        since,
+        until,
         resolution: '1d',
         stat: 'forwarded',
       },
-      success: data => {
-        let emptyStats = true;
-        let stats = data.map(p => {
-          if (p[0]) emptyStats = false;
-          return {x: p[0], y: [p[1]]};
-        });
-        this.setState({
-          stats,
-          emptyStats,
-          error: false,
-          loading: false,
-        });
-      },
-      error: () => {
-        this.setState({error: true, loading: false});
-      },
-    });
-  },
-
-  render() {
-    if (this.state.loading)
-      return (
-        <div className="box">
-          <LoadingIndicator />
-        </div>
-      );
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+    };
+
+    return [['stats', `/projects/${orgId}/${projectId}/stats/`, options]];
+  }
+
+  renderBody() {
+    const stats = this.state.stats.map(p => ({x: p[0], y: [p[1]]}));
 
     return (
       <Panel>
         <PanelHeader>{t('Forwarded events in the last 30 days (by day)')}</PanelHeader>
         <PanelBody>
-          {!this.state.emptyStats ? (
+          {stats.length > 0 && stats[0][0] ? (
             <StackedBarChart
               style={{
                 border: 'none',
               }}
-              points={this.state.stats}
+              points={stats}
               height={150}
               label="events"
               barClasses={['accepted']}
@@ -100,154 +62,102 @@ const DataForwardingStats = createReactClass({
         </PanelBody>
       </Panel>
     );
-  },
-});
-
-export default createReactClass({
-  displayName: 'projectDataForwarding',
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      pluginList: [],
-      hooksDisabled: HookStore.get('project:data-forwarding:disabled'),
-    };
-  },
+  }
+}
 
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
+class ProjectDataForwarding extends AsyncComponent {
+  getEndpoints() {
     let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/plugins/`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          error: false,
-          loading: false,
-          pluginList: data.filter(
-            p => p.type === 'data-forwarding' && p.hasConfiguration
-          ),
-        });
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  onEnablePlugin(plugin) {
-    this.setState({
-      pluginList: this.state.pluginList.map(p => {
-        if (p.id !== plugin.id) return p;
-        return {
-          ...plugin,
-          enabled: true,
-        };
-      }),
-    });
-  },
-
-  onDisablePlugin(plugin) {
-    this.setState({
-      pluginList: this.state.pluginList.map(p => {
-        if (p.id !== plugin.id) return p;
-        return {
-          ...plugin,
-          enabled: false,
-        };
-      }),
-    });
-  },
 
-  renderBody() {
-    if (this.state.loading) return this.renderLoading();
-    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
-
-    let organization = this.getOrganization();
-    let project = this.getProject();
-    let {pluginList} = this.state;
-    let features = this.getProjectFeatures();
-
-    if (!features.has('data-forwarding')) {
-      return (
-        this.state.hooksDisabled
-          .map(hook => {
-            return hook(organization, project);
-          })
-          .shift() || this.renderEmpty()
-      );
-    }
+    return [['plugins', `/projects/${orgId}/${projectId}/plugins/`]];
+  }
 
-    return (
-      <PluginList
-        organization={organization}
-        project={project}
-        pluginList={pluginList}
-        onEnablePlugin={this.onEnablePlugin}
-        onDisablePlugin={this.onDisablePlugin}
-      />
+  get forwardingPlugins() {
+    return this.state.plugins.filter(
+      p => p.type === 'data-forwarding' && p.hasConfiguration
     );
-  },
+  }
 
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
+  updatePlugin(plugin, enabled) {
+    let plugins = this.state.plugins.map(p => ({
+      ...p,
+      enabled: p.id === plugin.id ? enabled : p.enabled,
+    }));
 
-  renderEmpty() {
-    return (
-      <Panel>
-        <EmptyStateWarning>
-          <p>{t('There are no integrations available for data forwarding.')}</p>
-        </EmptyStateWarning>
-      </Panel>
-    );
-  },
+    this.setState({plugins});
+  }
 
-  render() {
-    let {params} = this.props;
-    return (
-      <div className="ref-data-forwarding-settings">
-        <SettingsPageHeader title={t('Data Forwarding')} />
+  onEnablePlugin = plugin => this.updatePlugin(plugin, true);
+  onDisablePlugin = plugin => this.updatePlugin(plugin, false);
 
-        <TextBlock>
-          {t(
-            "Enable Data Forwarding to send processed events to your favorite business intelligence tools. The exact payload and types of data depend on the integration you're using."
-          )}
-        </TextBlock>
-
-        <TextBlock>
-          {tct('Learn more about this functionality in our [link:documentation].', {
-            link: <ExternalLink href="https://docs.sentry.io/learn/data-forwarding/" />,
-          })}
-        </TextBlock>
-
-        <TextBlock>
-          <small>
-            {tct(
-              `Note: Sentry will forward [em:all applicable events] to the
-              given provider, which in some situations may be a much more significant
-              volume of data.`,
-              {
-                em: <strong />,
-              }
-            )}
-          </small>
-        </TextBlock>
+  renderBody() {
+    let {params, organization, project} = this.props;
+    let plugins = this.forwardingPlugins;
+
+    let pluginsPanel =
+      plugins.length > 0 ? (
+        <PluginList
+          organization={organization}
+          project={project}
+          pluginList={plugins}
+          onEnablePlugin={this.onEnablePlugin}
+          onDisablePlugin={this.onDisablePlugin}
+        />
+      ) : (
+        <Panel>
+          <EmptyMessage
+            title={t('There are no integrations available for data forwarding')}
+          />
+        </Panel>
+      );
 
-        <DataForwardingStats params={params} />
+    return (
+      <Feature
+        features={['projects:data-forwarding']}
+        renderDisabled={p => p.children(p)}
+      >
+        {({hasFeature, features}) => (
+          <div data-test-id="data-forwarding-settings">
+            <SettingsPageHeader title={t('Data Forwarding')} />
+            <TextBlock>
+              {tct(
+                `Data Forwarding allows processed events to be sent to your
+                favorite business intelligence tools. The exact payload and
+                types of data depend on the integration you're using. Learn
+                more about this functionality in our [link:documentation].`,
+                {
+                  link: (
+                    <ExternalLink href="https://docs.sentry.io/learn/data-forwarding/" />
+                  ),
+                }
+              )}
+            </TextBlock>
+
+            <Alert icon="icon-circle-info">
+              {tct(
+                `Sentry forwards [em:all applicable events] to the provider, in
+                some cases this may be a significant volume of data.`,
+                {
+                  em: <strong />,
+                }
+              )}
+            </Alert>
+
+            {!hasFeature && (
+              <FeatureDisabled
+                alert
+                featureName="Data Forwarding"
+                feature={features[0]}
+              />
+            )}
 
-        {this.renderBody()}
-      </div>
+            <DataForwardingStats params={params} />
+            {hasFeature && pluginsPanel}
+          </div>
+        )}
+      </Feature>
     );
-  },
-});
+  }
+}
+
+export default withProjects(withOrganization(ProjectDataForwarding));
diff --git a/tests/acceptance/test_project_data_forwarding_settings.py b/tests/acceptance/test_project_data_forwarding_settings.py
index 4aaef1ffbf..eb19b73be3 100644
--- a/tests/acceptance/test_project_data_forwarding_settings.py
+++ b/tests/acceptance/test_project_data_forwarding_settings.py
@@ -31,4 +31,4 @@ class ProjectDataForwardingSettingsTest(AcceptanceTestCase):
         self.browser.get(self.path)
         self.browser.wait_until_not('.loading-indicator')
         self.browser.snapshot('project data forwarding settings')
-        self.browser.wait_until('.ref-data-forwarding-settings')
+        self.browser.wait_until('[data-test-id="data-forwarding-settings"]')
