commit 4b09a32bc4e74f0c9882a0ba42dd370c388394f4
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 30 16:52:17 2016 -0700

    Add project list endpoint

diff --git a/src/sentry/api/endpoints/project_index.py b/src/sentry/api/endpoints/project_index.py
new file mode 100644
index 0000000000..fa50a1a57c
--- /dev/null
+++ b/src/sentry/api/endpoints/project_index.py
@@ -0,0 +1,80 @@
+from __future__ import absolute_import
+
+from django.db.models import Q
+
+from sentry.api.base import DocSection, Endpoint
+from sentry.api.bases.project import ProjectPermission
+from sentry.api.paginator import DateTimePaginator
+from sentry.api.serializers import serialize, ProjectWithOrganizationSerializer
+from sentry.models import (
+    Project, ProjectStatus
+)
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ListYourProjects')
+def list_your_projects_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/projects/'
+    )
+
+
+class ProjectIndexEndpoint(Endpoint):
+    doc_section = DocSection.PROJECTS
+    permission_classes = (ProjectPermission,)
+
+    @attach_scenarios([list_your_projects_scenario])
+    def get(self, request):
+        """
+        List your Projects
+        ``````````````````
+
+        Return a list of projects available to the authenticated
+        session.
+
+        :auth: required
+        """
+        queryset = Project.objects.select_related('organization').distinct()
+
+        status = request.GET.get('status', 'active')
+        if status == 'active':
+            queryset = queryset.filter(
+                status=ProjectStatus.VISIBLE,
+            )
+        elif status == 'deleted':
+            queryset = queryset.exclude(
+                status=ProjectStatus.VISIBLE,
+            )
+        elif status:
+            queryset = queryset.none()
+
+        if request.auth:
+            if hasattr(request.auth, 'project'):
+                queryset = queryset.filter(
+                    id=request.auth.project_id,
+                )
+            elif request.auth.organization is not None:
+                queryset = queryset.filter(
+                    organization=request.auth.organization.id,
+                )
+            else:
+                queryset = queryset.none()
+        elif not request.is_superuser():
+            queryset = queryset.filter(
+                team__organizationmember__user=request.user,
+            )
+
+        query = request.GET.get('query')
+        if query:
+            queryset = queryset.filter(
+                Q(name__icontains=query) | Q(slug__icontains=query),
+            )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-date_added',
+            on_results=lambda x: serialize(x, request.user, ProjectWithOrganizationSerializer()),
+            paginator_cls=DateTimePaginator,
+        )
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 9810995432..af2a99441e 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -1,7 +1,14 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import Serializer, register
-from sentry.models import Project, ProjectBookmark, ProjectOption
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import Project, ProjectBookmark, ProjectOption, ProjectStatus
+
+STATUS_LABELS = {
+    ProjectStatus.VISIBLE: 'active',
+    ProjectStatus.HIDDEN: 'deleted',
+    ProjectStatus.PENDING_DELETION: 'deleted',
+    ProjectStatus.DELETION_IN_PROGRESS: 'deleted',
+}
 
 
 @register(Project)
@@ -39,6 +46,8 @@ class ProjectSerializer(Serializer):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
 
+        status_label = STATUS_LABELS.get(obj.status, 'unknown')
+
         return {
             'id': str(obj.id),
             'slug': obj.slug,
@@ -53,4 +62,27 @@ class ProjectSerializer(Serializer):
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
             'features': feature_list,
+            'status': status_label,
+        }
+
+
+class ProjectWithOrganizationSerializer(ProjectSerializer):
+    def get_attrs(self, item_list, user):
+        attrs = super(ProjectWithOrganizationSerializer, self).get_attrs(
+            item_list, user
+        )
+
+        orgs = {
+            d['id']: d
+            for d in serialize(list(set(i.organization for i in item_list)), user)
         }
+        for item in item_list:
+            attrs[item]['organization'] = orgs[str(item.organization_id)]
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        data = super(ProjectWithOrganizationSerializer, self).serialize(
+            obj, attrs, user
+        )
+        data['organization'] = attrs['organization']
+        return data
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index e6eb397359..e29f99bb08 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -45,6 +45,7 @@ from .endpoints.project_events import ProjectEventsEndpoint
 from .endpoints.project_event_details import ProjectEventDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
 from .endpoints.project_group_stats import ProjectGroupStatsEndpoint
+from .endpoints.project_index import ProjectIndexEndpoint
 from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
 from .endpoints.project_member_index import ProjectMemberIndexEndpoint
@@ -181,6 +182,9 @@ urlpatterns = patterns(
         LegacyProjectRedirectEndpoint.as_view()),
 
     # Projects
+    url(r'^projects/$',
+        ProjectIndexEndpoint.as_view(),
+        name='sentry-api-0-projects'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/$',
         ProjectDetailsEndpoint.as_view(),
         name='sentry-api-0-project-details'),
diff --git a/tests/sentry/api/endpoints/test_project_index.py b/tests/sentry/api/endpoints/test_project_index.py
new file mode 100644
index 0000000000..ff1c5be044
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_index.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import Project
+from sentry.testutils import APITestCase
+
+
+class ProjectsListTest(APITestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-api-0-projects')
+
+    def test_member(self):
+        user = self.create_user('foo@example.com', is_superuser=False)
+        org = self.create_organization(name='foo')
+        team = self.create_team(organization=org, name='foo')
+        project = self.create_project(team=team, organization=org)
+
+        self.create_member(organization=org, user=user, teams=[team])
+
+        org2 = self.create_organization(name='bar')
+        team2 = self.create_team(organization=org, name='bar')
+        self.create_project(team=team2, organization=org2)
+
+        self.login_as(user=user)
+        response = self.client.get(self.path)
+        assert response.status_code == 200
+        assert len(response.data) == 1
+
+        assert response.data[0]['id'] == str(project.id)
+        assert response.data[0]['organization']['id'] == str(org.id)
+
+    def test_superuser(self):
+        Project.objects.all().delete()
+
+        user = self.create_user('foo@example.com', is_superuser=True)
+
+        org = self.create_organization(name='foo', owner=user)
+        self.create_project(organization=org)
+
+        org2 = self.create_organization(name='bar')
+        self.create_project(organization=org2)
+
+        self.login_as(user=user)
+        response = self.client.get(self.path)
+        assert response.status_code == 200
+        assert len(response.data) == 2
