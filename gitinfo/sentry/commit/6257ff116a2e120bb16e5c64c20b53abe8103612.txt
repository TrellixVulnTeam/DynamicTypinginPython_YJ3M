commit 6257ff116a2e120bb16e5c64c20b53abe8103612
Author: Mark Story <mark@sentry.io>
Date:   Fri Mar 27 11:05:54 2020 -0400

    fix(perf-views) Fix tag bar percentages (#17945)
    
    Fix the incorrect math on tag bars in transaction summary views. I moved
    some functions into actionCreators as I didn't want to have cross
    directory imports from views. With the totalValues being loaded
    separately I needed to refactor the latency chart a bit to prevent async
    render jank.

diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index 198ed4fa0e..70e6d76ed3 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -1,4 +1,8 @@
+import {LocationDescriptor} from 'history';
+import pick from 'lodash/pick';
+
 import {Client} from 'app/api';
+import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {getPeriod} from 'app/utils/getPeriod';
 import {EventsStats, Organization, YAxisEventsStats} from 'app/types';
@@ -77,3 +81,66 @@ export const doEventsRequest = (
     },
   });
 };
+
+export type EventQuery = {
+  field: string[];
+  project?: string | string[];
+  sort?: string | string[];
+  query: string;
+  per_page?: number;
+  referrer?: string;
+};
+
+export type TagSegment = {
+  count: number;
+  name: string;
+  value: string;
+  url: LocationDescriptor;
+  isOther?: boolean;
+  key?: string;
+};
+
+export type Tag = {
+  key: string;
+  topValues: Array<TagSegment>;
+};
+
+/**
+ * Fetches tag facets for a query
+ */
+export async function fetchTagFacets(
+  api: Client,
+  orgSlug: string,
+  query: EventQuery
+): Promise<Tag[]> {
+  const urlParams = pick(query, Object.values(URL_PARAM));
+
+  const queryOption = {...urlParams, query: query.query};
+
+  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {
+    query: queryOption,
+  });
+}
+
+/**
+ * Fetches total count of events for a given query
+ */
+export async function fetchTotalCount(
+  api: Client,
+  orgSlug: String,
+  query: EventQuery
+): Promise<number> {
+  const urlParams = pick(query, Object.values(URL_PARAM));
+
+  const queryOption = {...urlParams, query: query.query};
+
+  type Response = {
+    count: number;
+  };
+
+  return api
+    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {
+      query: queryOption,
+    })
+    .then((res: Response) => res.count);
+}
diff --git a/src/sentry/static/sentry/app/components/tagDistributionMeter.tsx b/src/sentry/static/sentry/app/components/tagDistributionMeter.tsx
index 4401944c21..9631364fc7 100644
--- a/src/sentry/static/sentry/app/components/tagDistributionMeter.tsx
+++ b/src/sentry/static/sentry/app/components/tagDistributionMeter.tsx
@@ -5,6 +5,7 @@ import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
 import isPropValid from '@emotion/is-prop-valid';
 
+import {TagSegment} from 'app/actionCreators/events';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
@@ -21,15 +22,6 @@ type DefaultProps = {
   renderError: () => React.ReactNode;
 };
 
-export type TagSegment = {
-  count: number;
-  name: string;
-  value: string;
-  url: LocationDescriptor;
-  isOther?: boolean;
-  key?: string;
-};
-
 type Props = DefaultProps & {
   title: string;
   segments: TagSegment[];
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index f3f3ee6cb1..bd984ff467 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -562,6 +562,12 @@ export const EChartsData = PropTypes.arrayOf(
       name: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
       value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
     }),
+
+    // e.g. Barchart with itemStyle {itemStyle: {color: '#fff'}, value: ['category', 123]}
+    PropTypes.shape({
+      value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),
+      itemStyle: PropTypes.shape({color: PropTypes.string}),
+    }),
   ])
 );
 
diff --git a/src/sentry/static/sentry/app/types/echarts.tsx b/src/sentry/static/sentry/app/types/echarts.tsx
index f0c269abd9..5aea980e41 100644
--- a/src/sentry/static/sentry/app/types/echarts.tsx
+++ b/src/sentry/static/sentry/app/types/echarts.tsx
@@ -3,6 +3,9 @@ import {ECharts} from 'echarts';
 export type SeriesDataUnit = {
   value: number;
   name: string | number; // number because we sometimes use timestamps
+  itemStyle?: {
+    color?: string;
+  };
 };
 
 export type Series = {
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index 96c0125cab..cc245eb8e7 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -9,10 +9,11 @@ import moment from 'moment';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
 import {SavedQuery, NewQuery, SelectValue} from 'app/types';
+import {EventQuery} from 'app/actionCreators/events';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 import {TableColumn, TableColumnSort} from 'app/views/eventsV2/table/types';
-import {EventQuery, decodeColumnOrder, decodeScalar} from 'app/views/eventsV2/utils';
+import {decodeColumnOrder, decodeScalar} from 'app/views/eventsV2/utils';
 
 import {
   Sort,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index 04ef26796c..4b65101d71 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -4,6 +4,7 @@ import {Location} from 'history';
 import styled from '@emotion/styled';
 import PropTypes from 'prop-types';
 
+import {EventQuery} from 'app/actionCreators/events';
 import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import {t} from 'app/locale';
@@ -27,7 +28,7 @@ import {DataSection} from 'app/components/events/styles';
 import Projects from 'app/utils/projects';
 import EventView from 'app/utils/discover/eventView';
 
-import {EventQuery, generateTitle} from '../utils';
+import {generateTitle} from '../utils';
 import Pagination from './pagination';
 import LineGraph from './lineGraph';
 import TagsTable from '../tagsTable';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index de1505737d..7b81b06a68 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -10,6 +10,7 @@ import {Organization, GlobalSelection} from 'app/types';
 import {PageContent} from 'app/styles/organization';
 import {Client} from 'app/api';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
+import {fetchTotalCount} from 'app/actionCreators/events';
 import {loadOrganizationTags} from 'app/actionCreators/tags';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import NoProjectMessage from 'app/components/noProjectMessage';
@@ -28,7 +29,7 @@ import Table from './table';
 import Tags from './tags';
 import ResultsHeader from './resultsHeader';
 import ResultsChart from './resultsChart';
-import {generateTitle, fetchTotalCount} from './utils';
+import {generateTitle} from './utils';
 import {ContentBox} from './styles';
 
 type Props = {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index f960ae7fd8..ebef466786 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -7,12 +7,13 @@ import * as Sentry from '@sentry/browser';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 import {Client} from 'app/api';
+import {fetchTagFacets, Tag, TagSegment} from 'app/actionCreators/events';
 import SentryTypes from 'app/sentryTypes';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
 import Placeholder from 'app/components/placeholder';
-import TagDistributionMeter, {TagSegment} from 'app/components/tagDistributionMeter';
+import TagDistributionMeter from 'app/components/tagDistributionMeter';
 import withApi from 'app/utils/withApi';
 import {Organization} from 'app/types';
 import {generateQueryWithTag} from 'app/utils';
@@ -20,7 +21,6 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 
 import {SectionHeading} from './styles';
-import {fetchTagFacets, Tag} from './utils';
 
 type Props = {
   api: Client;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index cd005ea153..323d1e32ac 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -1,5 +1,4 @@
 import Papa from 'papaparse';
-import pick from 'lodash/pick';
 import isString from 'lodash/isString';
 import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
@@ -7,10 +6,8 @@ import {browserHistory} from 'react-router';
 import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import {t} from 'app/locale';
 import {Event, Organization, OrganizationSummary} from 'app/types';
-import {Client} from 'app/api';
 import {getTitle} from 'app/utils/events';
 import {getUtcDateString} from 'app/utils/dates';
-import {TagSegment} from 'app/components/tagDistributionMeter';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {disableMacros} from 'app/views/discover/result/utils';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
@@ -27,70 +24,6 @@ import {
 import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
 import {TableColumn, TableDataRow} from './table/types';
 
-export type EventQuery = {
-  field: string[];
-  project?: string | string[];
-  sort?: string | string[];
-  query: string;
-  per_page?: number;
-  referrer?: string;
-};
-
-export type Tag = {
-  key: string;
-  topValues: Array<TagSegment>;
-};
-
-/**
- * Fetches tag facets for a query
- *
- * @param {Object} api
- * @param {String} orgSlug
- * @param {String} query
- * @returns {Promise<Object>}
- */
-export function fetchTagFacets(
-  api: Client,
-  orgSlug: string,
-  query: EventQuery
-): Promise<Tag[]> {
-  const urlParams = pick(query, Object.values(URL_PARAM));
-
-  const queryOption = {...urlParams, query: query.query};
-
-  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {
-    query: queryOption,
-  });
-}
-
-/**
- * Fetches total count of events for a given query
- *
- * @param {Object} api
- * @param {String} orgSlug
- * @param {string} query
- * @returns {Promise<Number>}
- */
-export function fetchTotalCount(
-  api: Client,
-  orgSlug: String,
-  query: EventQuery
-): Promise<number> {
-  const urlParams = pick(query, Object.values(URL_PARAM));
-
-  const queryOption = {...urlParams, query: query.query};
-
-  type Response = {
-    count: number;
-  };
-
-  return api
-    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {
-      query: queryOption,
-    })
-    .then((res: Response) => res.count);
-}
-
 export type QueryWithColumnState =
   | Query
   | {
diff --git a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
index 3d02150c63..b543f8af2a 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
@@ -4,7 +4,7 @@ import {Location} from 'history';
 
 import {t} from 'app/locale';
 import {Client} from 'app/api';
-import {fetchTotalCount} from 'app/views/eventsV2/utils';
+import {fetchTotalCount} from 'app/actionCreators/events';
 import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 import {Organization} from 'app/types';
 
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 45310871d1..867f8c7c4e 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -20,11 +20,12 @@ type Props = {
   eventView: EventView;
   transactionName: string;
   organization: Organization;
+  totalValues: number | null;
 };
 
 class SummaryContent extends React.Component<Props> {
   render() {
-    const {transactionName, location, eventView, organization} = this.props;
+    const {transactionName, location, eventView, organization, totalValues} = this.props;
 
     return (
       <React.Fragment>
@@ -55,6 +56,7 @@ class SummaryContent extends React.Component<Props> {
                 eventView={eventView}
                 tableData={tableData}
                 isLoading={isLoading}
+                totalValues={totalValues}
               />
             )}
           </EventsV2>
@@ -65,7 +67,7 @@ class SummaryContent extends React.Component<Props> {
               eventView={eventView}
             />
             <Tags
-              totalValues={null}
+              totalValues={totalValues}
               eventView={eventView}
               organization={organization}
               location={location}
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index afaf0147bb..6946576bf4 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -3,22 +3,27 @@ import {Params} from 'react-router/lib/Router';
 import {browserHistory} from 'react-router';
 import {Location} from 'history';
 import styled from '@emotion/styled';
+import * as Sentry from '@sentry/browser';
 
+import {Client} from 'app/api';
 import {t} from 'app/locale';
+import {fetchTotalCount} from 'app/actionCreators/events';
 import {Organization, Project} from 'app/types';
 import withOrganization from 'app/utils/withOrganization';
 import withProjects from 'app/utils/withProjects';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import {PageContent} from 'app/styles/organization';
-import EventView from 'app/utils/discover/eventView';
+import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 import {decodeScalar} from 'app/views/eventsV2/utils';
 import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import NoProjectMessage from 'app/components/noProjectMessage';
+import withApi from 'app/utils/withApi';
 
 import SummaryContent from './content';
 
 type Props = {
+  api: Client;
   location: Location;
   params: Params;
   organization: Organization;
@@ -28,6 +33,7 @@ type Props = {
 
 type State = {
   eventView: EventView | undefined;
+  totalValues: number | null;
 };
 
 class TransactionSummary extends React.Component<Props, State> {
@@ -36,6 +42,7 @@ class TransactionSummary extends React.Component<Props, State> {
       this.props.location,
       getTransactionName(this.props)
     ),
+    totalValues: null,
   };
 
   static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
@@ -48,6 +55,43 @@ class TransactionSummary extends React.Component<Props, State> {
     };
   }
 
+  componentDidMount() {
+    this.fetchTotalCount();
+  }
+
+  componentDidUpdate(prevProps: Props, prevState: State) {
+    const {location} = this.props;
+    const {eventView} = this.state;
+
+    if (eventView && prevState.eventView) {
+      const currentQuery = eventView.getEventsAPIPayload(location);
+      const prevQuery = prevState.eventView.getEventsAPIPayload(prevProps.location);
+      if (!isAPIPayloadSimilar(currentQuery, prevQuery)) {
+        this.fetchTotalCount();
+      }
+    }
+  }
+
+  async fetchTotalCount() {
+    const {api, organization, location} = this.props;
+    const {eventView} = this.state;
+    if (!eventView || !eventView.isValid()) {
+      return;
+    }
+
+    this.setState({totalValues: null});
+    try {
+      const totals = await fetchTotalCount(
+        api,
+        organization.slug,
+        eventView.getEventsAPIPayload(location)
+      );
+      this.setState({totalValues: totals});
+    } catch (err) {
+      Sentry.captureException(err);
+    }
+  }
+
   getDocumentTitle(): string {
     const name = getTransactionName(this.props);
 
@@ -62,7 +106,7 @@ class TransactionSummary extends React.Component<Props, State> {
 
   render() {
     const {organization, location} = this.props;
-    const {eventView} = this.state;
+    const {eventView, totalValues} = this.state;
     const transactionName = getTransactionName(this.props);
     if (!eventView || transactionName === undefined) {
       // If there is no transaction name, redirect to the Performance landing page
@@ -87,6 +131,7 @@ class TransactionSummary extends React.Component<Props, State> {
                 organization={organization}
                 eventView={eventView}
                 transactionName={transactionName}
+                totalValues={totalValues}
               />
             </NoProjectMessage>
           </StyledPageContent>
@@ -143,4 +188,4 @@ function generateSummaryEventView(
   );
 }
 
-export default withProjects(withOrganization(TransactionSummary));
+export default withApi(withProjects(withOrganization(TransactionSummary)));
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
index dce77a8ffe..94eefd42be 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
@@ -2,6 +2,8 @@ import React from 'react';
 import styled from '@emotion/styled';
 import {Location} from 'history';
 import {browserHistory} from 'react-router';
+import isEqual from 'lodash/isEqual';
+import pick from 'lodash/pick';
 
 import {Panel} from 'app/components/panels';
 import {IconQuestion, IconWarning} from 'app/icons';
@@ -24,10 +26,16 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import {getDuration} from 'app/utils/formatters';
 
-type ViewProps = Pick<
-  EventView,
-  'environment' | 'project' | 'query' | 'start' | 'end' | 'statsPeriod'
->;
+const QUERY_KEYS = [
+  'environment',
+  'project',
+  'query',
+  'start',
+  'end',
+  'statsPeriod',
+] as const;
+
+type ViewProps = Pick<EventView, typeof QUERY_KEYS[number]>;
 
 type ApiResult = {
   histogram_transaction_duration_15: number;
@@ -45,9 +53,9 @@ type State = AsyncComponent['state'] & {
 };
 
 /**
- * Fetch the chart data and then render the chart panel.
+ * Fetch the chart data and then render the graph.
  */
-class LatencyChart extends AsyncComponent<Props, State> {
+class LatencyHistogram extends AsyncComponent<Props, State> {
   getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {
     const {
       organization,
@@ -90,13 +98,7 @@ class LatencyChart extends AsyncComponent<Props, State> {
     if (this.state.loading) {
       return false;
     }
-    return (
-      prevProps.query !== this.props.query ||
-      prevProps.environment !== this.props.environment ||
-      prevProps.start !== this.props.start ||
-      prevProps.end !== this.props.end ||
-      prevProps.statsPeriod !== this.props.statsPeriod
-    );
+    return !isEqual(pick(prevProps, QUERY_KEYS), pick(this.props, QUERY_KEYS));
   }
 
   handleClick = value => {
@@ -185,42 +187,46 @@ class LatencyChart extends AsyncComponent<Props, State> {
       />
     );
   }
+}
 
-  calculateTotal() {
-    if (this.state.chartData === null) {
-      return '\u2015';
-    }
-    return this.state.chartData.data.reduce((acc, item) => {
-      return acc + item.count;
-    }, 0);
+function calculateTotal(total: number | null) {
+  if (total === null) {
+    return '\u2015';
   }
+  return total.toLocaleString();
+}
 
-  render() {
-    return (
-      <Panel>
-        <PaddedSubHeading>
-          <span>{t('Latency Distribution')}</span>
-          <Tooltip
-            position="top"
-            title={t(
-              `This graph shows the volume of transactions that completed within each duration bucket.
+type WrapperProps = ViewProps & {
+  organization: OrganizationSummary;
+  location: Location;
+  totalValues: number | null;
+};
+
+function LatencyChart({totalValues, ...props}: WrapperProps) {
+  return (
+    <Panel>
+      <PaddedSubHeading>
+        <span>{t('Latency Distribution')}</span>
+        <Tooltip
+          position="top"
+          title={t(
+            `This graph shows the volume of transactions that completed within each duration bucket.
                X-axis values represent the median value of each bucket.
                `
-            )}
-          >
-            <IconQuestion size="sm" color={theme.gray6} />
-          </Tooltip>
-        </PaddedSubHeading>
-        {super.render()}
-        <ChartControls>
-          <InlineContainer>
-            <SectionHeading key="total-heading">{t('Total Events')}</SectionHeading>
-            <SectionValue key="total-value">{this.calculateTotal()}</SectionValue>
-          </InlineContainer>
-        </ChartControls>
-      </Panel>
-    );
-  }
+          )}
+        >
+          <IconQuestion size="sm" color={theme.gray6} />
+        </Tooltip>
+      </PaddedSubHeading>
+      <LatencyHistogram {...props} />
+      <ChartControls>
+        <InlineContainer>
+          <SectionHeading key="total-heading">{t('Total Events')}</SectionHeading>
+          <SectionValue key="total-value">{calculateTotal(totalValues)}</SectionValue>
+        </InlineContainer>
+      </ChartControls>
+    </Panel>
+  );
 }
 
 /**
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
index 3f9e16fc9c..50d6c087a0 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
@@ -41,6 +41,7 @@ type Props = {
 
   isLoading: boolean;
   tableData: TableData | null | undefined;
+  totalValues: number | null;
 };
 
 class SummaryContentTable extends React.Component<Props> {
@@ -158,7 +159,7 @@ class SummaryContentTable extends React.Component<Props> {
   }
 
   render() {
-    const {eventView, location, organization} = this.props;
+    const {eventView, location, organization, totalValues} = this.props;
 
     let title = t('Slowest Requests');
     let chartQuery = eventView.query;
@@ -182,6 +183,7 @@ class SummaryContentTable extends React.Component<Props> {
           start={eventView.start}
           end={eventView.end}
           statsPeriod={eventView.statsPeriod}
+          totalValues={totalValues}
         />
         <Header>
           <HeaderTitle>{title}</HeaderTitle>
