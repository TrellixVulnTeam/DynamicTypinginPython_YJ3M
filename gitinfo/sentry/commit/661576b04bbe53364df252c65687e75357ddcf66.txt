commit 661576b04bbe53364df252c65687e75357ddcf66
Author: William Mak <william@wmak.io>
Date:   Thu May 28 14:17:14 2020 -0400

    fix(discover): TopEvents with aggregate conditions (#19043)
    
    - Top events was missing the `use_aggregate_conditions` param, which
      meant that when a query had an aggregate condition it wasn't being
      used to determine the top events.

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 5e8994f27b..298a99f17f 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -906,6 +906,7 @@ def top_events_timeseries(
             orderby=orderby,
             limit=limit,
             referrer=referrer,
+            use_aggregate_conditions=True,
         )
 
     with sentry_sdk.start_span(
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index d21684a1d5..711d3a0c91 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -1274,9 +1274,8 @@ class OrganizationEventsStatsTopNEvents(APITestCase, SnubaTestCase):
                 format="json",
             )
 
-        data = response.data
-
         assert response.status_code == 200, response.content
+        data = response.data
         assert len(data) == 3
 
         results = data[""]
@@ -1297,3 +1296,32 @@ class OrganizationEventsStatsTopNEvents(APITestCase, SnubaTestCase):
             [{"count": 1}],
             [{"count": 0}],
         ]
+
+    def test_top_events_with_aggregate_condition(self):
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                data={
+                    "start": iso_format(self.day_ago),
+                    "end": iso_format(self.day_ago + timedelta(hours=1, minutes=59)),
+                    "interval": "1h",
+                    "yAxis": "count()",
+                    "orderby": ["-count()"],
+                    "field": ["message", "count()"],
+                    "query": "count():>4",
+                    "topEvents": 5,
+                },
+                format="json",
+            )
+
+        assert response.status_code == 200, response.content
+        data = response.data
+        assert len(data) == 3
+
+        for index, event in enumerate(self.events[:3]):
+            message = event.message or event.transaction
+            results = data[message]
+            assert results["order"] == index
+            assert [{"count": self.event_data[index]["count"]}] in [
+                attrs for time, attrs in results["data"]
+            ]
