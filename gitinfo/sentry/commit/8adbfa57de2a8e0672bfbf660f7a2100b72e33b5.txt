commit 8adbfa57de2a8e0672bfbf660f7a2100b72e33b5
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 24 13:09:23 2016 -0700

    Refactor settings initialization
    
    Problems:
    * When introducing the new SMTP configuration options that directly
      replaced direct Django settings, the default option values were
      never being applied back into settings, so Django could break if
      something tried to read the original values.
    * When no config.yml file was present and _only_ SENTRY_OPTIONS was
      used, none of these values got applied back into django settings
      because bootstrap_options was entirely skipped. This was just an
      oversight since it was assumed that a config.yml would always exist,
      but in getsentry case, we only use SENTRY_OPTIONS which caused a bad
      deploy.
    
    This now duplicates efforts from the options default values, and moves
    them also into SENTRY_OPTIONS, so they always exist, while always
    running through bootstrap_options. This is a temporary hack to work
    around the problem at the moment.

diff --git a/api-docs/sentry.conf.py b/api-docs/sentry.conf.py
index 93884b1103..e44e909839 100644
--- a/api-docs/sentry.conf.py
+++ b/api-docs/sentry.conf.py
@@ -49,14 +49,13 @@ SENTRY_WEB_OPTIONS = {
     'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
 }
 
-SECRET_KEY = 'super secret secret key'
-
 SENTRY_OPTIONS.update({
     'redis.clusters': {
         'default': {
             'hosts': {i: {'port': SENTRY_APIDOCS_REDIS_PORT} for i in xrange(0, 4)},
         },
     },
+    'system.secret-key': 'super secret secret key',
     'system.admin-email': 'admin@getsentry.com',
     'system.url-prefix': SENTRY_URL_PREFIX,
     'mail.backend': 'django.core.mail.backends.smtp.EmailBackend',
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7e0c13ee27..ffb0cf110d 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -25,9 +25,6 @@ import sentry
 
 gettext_noop = lambda s: s
 
-# A marker for indicating builtin Django settings that are to not be used
-DEAD = object()
-
 socket.setdefaulttimeout(5)
 
 DEBUG = False
@@ -188,8 +185,6 @@ USE_L10N = True
 
 USE_TZ = True
 
-# Make this unique, and don't share it with anybody.
-SECRET_KEY = hashlib.md5(socket.gethostname() + ')*)&8a36)6%74e@-ne5(-!8a(vv#tkv)(eyg&@0=zd^pl!7=y@').hexdigest()
 
 # List of callables that know how to import templates from various sources.
 TEMPLATE_LOADERS = (
@@ -687,10 +682,6 @@ SENTRY_SMTP_HOSTNAME = 'localhost'
 SENTRY_SMTP_HOST = 'localhost'
 SENTRY_SMTP_PORT = 1025
 
-SERVER_EMAIL = DEAD
-DEFAULT_FROM_EMAIL = DEAD
-EMAIL_SUBJECT_PREFIX = DEAD
-
 SENTRY_INTERFACES = {
     'exception': 'sentry.interfaces.exception.Exception',
     'logentry': 'sentry.interfaces.message.Message',
@@ -912,7 +903,18 @@ SENTRY_ROLES = (
 )
 
 # See sentry/options/__init__.py for more information
-SENTRY_OPTIONS = {}
+SENTRY_OPTIONS = {
+    'mail.backend': 'django.core.mail.backends.smtp.EmailBackend',
+    'mail.host': 'localhost',
+    'mail.port': 25,
+    'mail.username': '',
+    'mail.password': '',
+    'mail.use-tls': False,
+    'mail.subject-prefix': '[Sentry] ',
+    'mail.from': 'root@localhost',
+    # Make this unique, and don't share it with anybody.
+    'system.secret-key': hashlib.md5(socket.gethostname() + ')*)&8a36)6%74e@-ne5(-!8a(vv#tkv)(eyg&@0=zd^pl!7=y@').hexdigest(),
+}
 
 # You should not change this setting after your database has been created
 # unless you have altered all schemas first
@@ -944,3 +946,18 @@ def get_raven_config():
     }
 
 RAVEN_CONFIG = get_raven_config()
+
+# Config options that are explicitly disabled from Django
+DEAD = object()
+
+# This will eventually get set from values in SENTRY_OPTIONS during
+# sentry.runner.initializer:bootstrap_options
+SECRET_KEY = DEAD
+EMAIL_BACKEND = DEAD
+EMAIL_HOST = DEAD
+EMAIL_PORT = DEAD
+EMAIL_HOST_USER = DEAD
+EMAIL_HOST_PASSWORD = DEAD
+EMAIL_USE_TLS = DEAD
+SERVER_EMAIL = DEAD
+EMAIL_SUBJECT_PREFIX = DEAD
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 0e05cbd565..7ee4912be1 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -13,13 +13,13 @@ from sentry.options import (
 from sentry.utils.types import Dict, String
 
 # Cache
-register('cache.backend', flags=FLAG_NOSTORE)
-register('cache.options', type=Dict, flags=FLAG_NOSTORE)
+# register('cache.backend', flags=FLAG_NOSTORE)
+# register('cache.options', type=Dict, flags=FLAG_NOSTORE)
 
 # System
 register('system.admin-email', flags=FLAG_REQUIRED)
 register('system.databases', type=Dict, flags=FLAG_NOSTORE)
-register('system.debug', default=False, flags=FLAG_NOSTORE)
+# register('system.debug', default=False, flags=FLAG_NOSTORE)
 register('system.rate-limit', default=0, flags=FLAG_PRIORITIZE_DISK)
 register('system.secret-key', flags=FLAG_NOSTORE)
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
@@ -57,5 +57,5 @@ register('mail.password', flags=FLAG_PRIORITIZE_DISK)
 register('mail.use-tls', default=False, flags=FLAG_PRIORITIZE_DISK)
 register('mail.subject-prefix', default='[Sentry] ', flags=FLAG_PRIORITIZE_DISK)
 register('mail.from', default='root@localhost', flags=FLAG_PRIORITIZE_DISK)
-register('mail.enable-replies', default=False, flags=FLAG_PRIORITIZE_DISK)
+# register('mail.enable-replies', default=False, flags=FLAG_PRIORITIZE_DISK)
 register('mail.list-namespace', type=String, default='localhost', flags=FLAG_NOSTORE)
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 3fb75ccc70..5621a3ffcf 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -66,10 +66,10 @@ def get_asset_version(settings):
 # bootstrapping. Everything else will get validated and used
 # as a part of OptionsManager.
 options_mapper = {
-    'cache.backend': 'SENTRY_CACHE',
-    'cache.options': 'SENTRY_CACHE_OPTIONS',
-    'system.databases': 'DATABASES',
-    'system.debug': 'DEBUG',
+    # 'cache.backend': 'SENTRY_CACHE',
+    # 'cache.options': 'SENTRY_CACHE_OPTIONS',
+    # 'system.databases': 'DATABASES',
+    # 'system.debug': 'DEBUG',
     'system.secret-key': 'SECRET_KEY',
     'mail.backend': 'EMAIL_BACKEND',
     'mail.host': 'EMAIL_HOST',
@@ -82,44 +82,60 @@ options_mapper = {
 }
 
 
-def bootstrap_options(settings, config):
+def bootstrap_options(settings, config=None):
     """
     Quickly bootstrap options that come in from a config file
     and convert options into Django settings that are
     required to even initialize the rest of the app.
     """
-    if config is None:
-        return
+    options = {}
+    if config is not None:
+        # Attempt to load our config yaml file
+        from sentry.utils.yaml import safe_load
+        from yaml.parser import ParserError
+        from yaml.scanner import ScannerError
+        try:
+            with open(config, 'rb') as fp:
+                options = safe_load(fp)
+        except IOError:
+            # Gracefully fail if yaml file doesn't exist
+            pass
+        except (AttributeError, ParserError, ScannerError) as e:
+            from .importer import ConfigurationError
+            raise ConfigurationError('Malformed config.yml file: %s' % unicode(e))
+
+        # Empty options file, so fail gracefully
+        if options is None:
+            options = {}
+        # Options needs to be a dict
+        elif not isinstance(options, dict):
+            from .importer import ConfigurationError
+            raise ConfigurationError('Malformed config.yml file')
+
     from sentry.conf.server import DEAD
-    from sentry.utils.yaml import safe_load
-    from yaml.parser import ParserError
-    from yaml.scanner import ScannerError
-    try:
-        with open(config, 'rb') as fp:
-            options = safe_load(fp)
-    except IOError:
-        # Gracefully fail if yaml file doesn't exist
-        return
-    except (AttributeError, ParserError, ScannerError) as e:
-        from .importer import ConfigurationError
-        raise ConfigurationError('Malformed config.yml file: %s' % unicode(e))
-    # Empty options file, so fail gracefully
-    if options is None:
-        return
-    # Options needs to be a dict
-    if not isinstance(options, dict):
-        from .importer import ConfigurationError
-        raise ConfigurationError('Malformed config.yml file')
+
     # First move options from settings into options
     for k, v in options_mapper.iteritems():
-        if hasattr(settings, v) and k not in options and getattr(settings, v) is not DEAD:
+        if getattr(settings, v, DEAD) is not DEAD and k not in options:
+            warnings.warn(
+                DeprecatedSettingWarning(
+                    options_mapper[k],
+                    "SENTRY_OPTIONS['%s']" % k,
+                )
+            )
             options[k] = getattr(settings, v)
+
+    # Stuff everything else into SENTRY_OPTIONS
+    # these will be validated later after bootstrapping
     for k, v in options.iteritems():
-        # Stuff everything else into SENTRY_OPTIONS
-        # these will be validated later after bootstrapping
         settings.SENTRY_OPTIONS[k] = v
-        # Escalate the few needed to actually get the app bootstrapped into settings
+
+    # Now go back through all of SENTRY_OPTIONS and promote
+    # back into settings. This catches the case when values are defined
+    # only in SENTRY_OPTIONS and no config.yml file
+    for k, v in settings.SENTRY_OPTIONS.iteritems():
         if k in options_mapper:
+            # Escalate the few needed to actually get the app bootstrapped into settings
             setattr(settings, options_mapper[k], v)
 
 
@@ -232,7 +248,6 @@ def show_big_error(message):
 
 
 def apply_legacy_settings(settings):
-    from sentry.conf.server import DEAD
     from sentry import options
 
     # SENTRY_USE_QUEUE used to determine if Celery was eager or not
@@ -250,16 +265,8 @@ def apply_legacy_settings(settings):
         ('SENTRY_ADMIN_EMAIL', 'system.admin-email'),
         ('SENTRY_URL_PREFIX', 'system.url-prefix'),
         ('SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE', 'system.rate-limit'),
-        ('EMAIL_BACKEND', 'mail.backend'),
-        ('EMAIL_HOST', 'mail.host'),
-        ('EMAIL_HOST_PASSWORD', 'mail.password'),
-        ('EMAIL_HOST_USER', 'mail.username'),
-        ('EMAIL_PORT', 'mail.port'),
-        ('EMAIL_USE_TLS', 'mail.use-tls'),
-        ('SERVER_EMAIL', 'mail.from'),
-        ('EMAIL_SUBJECT_PREFIX', 'mail.subject-prefix'),
     ):
-        if not settings.SENTRY_OPTIONS.get(new) and getattr(settings, old, DEAD) is not DEAD:
+        if new not in settings.SENTRY_OPTIONS and hasattr(settings, old):
             warnings.warn(
                 DeprecatedSettingWarning(old, "SENTRY_OPTIONS['%s']" % new))
             settings.SENTRY_OPTIONS[new] = getattr(settings, old)
@@ -306,7 +313,7 @@ def apply_legacy_settings(settings):
         warnings.warn(DeprecatedSettingWarning('SENTRY_ALLOW_REGISTRATION', 'SENTRY_FEATURES["auth:register"]'))
         settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
 
-    settings.DEFAULT_FROM_EMAIL = options.get('mail.from', silent=True)
+    settings.DEFAULT_FROM_EMAIL = settings.SENTRY_OPTIONS.get('mail.from')
 
 
 def skip_migration_if_applied(settings, app_name, table_name,
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index 6deb6cbb82..629501c034 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -185,8 +185,9 @@ YAML_CONFIG_TEMPLATE = u"""\
 # The email address to send on behalf of
 # mail.from: 'root@localhost'
 
-# If this file ever becomes compromised, it's important to regenerate your SECRET_KEY
-# Changing this value will result in all current sessions being invalidated
+# If this file ever becomes compromised, it's important to regenerate your a new key
+# Changing this value will result in all current sessions being invalidated.
+# A new key can be generated with `$ sentry config generate-secret-key`
 system.secret-key: '%(secret_key)s'
 
 # The ``redis.clusters`` setting is used, unsurprisingly, to configure Redis
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index 1cfd933ad4..d0e34bc15d 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -64,8 +64,6 @@ def pytest_configure(config):
     middleware[sudo] = 'sentry.testutils.middleware.SudoMiddleware'
     settings.MIDDLEWARE_CLASSES = tuple(middleware)
 
-    settings.SENTRY_OPTIONS['system.url-prefix'] = 'http://testserver'
-
     # enable draft features
     settings.SENTRY_ENABLE_EMAIL_REPLIES = True
 
@@ -106,6 +104,7 @@ def pytest_configure(config):
             },
         },
         'mail.backend': 'django.core.mail.backends.locmem.EmailBackend',
+        'system.url-prefix': 'http://testserver',
     })
 
     # django mail uses socket.getfqdn which doesn't play nice if our
@@ -113,8 +112,10 @@ def pytest_configure(config):
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
     patcher.start()
 
-    from sentry.runner.initializer import initialize_receivers, fix_south, bind_cache_to_option_store
+    from sentry.runner.initializer import (
+        bootstrap_options, initialize_receivers, fix_south, bind_cache_to_option_store)
 
+    bootstrap_options(settings)
     fix_south(settings)
 
     bind_cache_to_option_store()
diff --git a/tests/sentry/api/endpoints/test_system_options.py b/tests/sentry/api/endpoints/test_system_options.py
index fcdb14889a..27fb22e403 100644
--- a/tests/sentry/api/endpoints/test_system_options.py
+++ b/tests/sentry/api/endpoints/test_system_options.py
@@ -15,7 +15,6 @@ class SystemOptionsTest(APITestCase):
         assert 'system.secret-key' in response.data
         assert 'system.url-prefix' in response.data
         assert 'system.admin-email' in response.data
-        assert 'cache.backend' in response.data
 
     def test_bad_query(self):
         self.login_as(user=self.user)
diff --git a/tests/sentry/runner/test_initializer.py b/tests/sentry/runner/test_initializer.py
new file mode 100644
index 0000000000..f6d90456df
--- /dev/null
+++ b/tests/sentry/runner/test_initializer.py
@@ -0,0 +1,177 @@
+from __future__ import absolute_import
+
+import pytest
+from sentry.runner.importer import ConfigurationError
+from sentry.runner.initializer import bootstrap_options, apply_legacy_settings
+
+
+@pytest.fixture
+def settings():
+    class Settings(object):
+        pass
+
+    s = Settings()
+    s.TIME_ZONE = 'UTC'
+    s.ALLOWED_HOSTS = []
+    s.SENTRY_FEATURES = {}
+    s.SENTRY_OPTIONS = {}
+    return s
+
+
+@pytest.fixture
+def config_yml(tmpdir):
+    return tmpdir.join('config.yml')
+
+
+def test_bootstrap_options_simple(settings, config_yml):
+    "Config options are specified in both places, but config.yml should prevail"
+    settings.SECRET_KEY = 'xxx'
+    settings.EMAIL_BACKEND = 'xxx'
+    settings.EMAIL_HOST = 'xxx'
+    settings.EMAIL_PORT = 6969
+    settings.EMAIL_HOST_USER = 'xxx'
+    settings.EMAIL_HOST_PASSWORD = 'xxx'
+    settings.EMAIL_USE_TLS = False
+    settings.SERVER_EMAIL = 'xxx'
+    settings.EMAIL_SUBJECT_PREFIX = 'xxx'
+    settings.SENTRY_OPTIONS = {'something.else': True}
+
+    config_yml.write("""\
+foo.bar: my-foo-bar
+system.secret-key: my-system-secret-key
+mail.backend: my-mail-backend
+mail.host: my-mail-host
+mail.port: 123
+mail.username: my-mail-username
+mail.password: my-mail-password
+mail.use-tls: true
+mail.from: my-mail-from
+mail.subject-prefix: my-mail-subject-prefix
+""")
+
+    bootstrap_options(settings, str(config_yml))
+    assert settings.SENTRY_OPTIONS == {
+        'something.else': True,
+        'foo.bar': 'my-foo-bar',
+        'system.secret-key': 'my-system-secret-key',
+        'mail.backend': 'my-mail-backend',
+        'mail.host': 'my-mail-host',
+        'mail.port': 123,
+        'mail.username': 'my-mail-username',
+        'mail.password': 'my-mail-password',
+        'mail.use-tls': True,
+        'mail.from': 'my-mail-from',
+        'mail.subject-prefix': 'my-mail-subject-prefix',
+    }
+    assert settings.SECRET_KEY == 'my-system-secret-key'
+    assert settings.EMAIL_BACKEND == 'my-mail-backend'
+    assert settings.EMAIL_HOST == 'my-mail-host'
+    assert settings.EMAIL_PORT == 123
+    assert settings.EMAIL_HOST_USER == 'my-mail-username'
+    assert settings.EMAIL_HOST_PASSWORD == 'my-mail-password'
+    assert settings.EMAIL_USE_TLS is True
+    assert settings.SERVER_EMAIL == 'my-mail-from'
+    assert settings.EMAIL_SUBJECT_PREFIX == 'my-mail-subject-prefix'
+
+
+def test_bootstrap_options_malformed_yml(settings, config_yml):
+    config_yml.write('1')
+    with pytest.raises(ConfigurationError):
+        bootstrap_options(settings, str(config_yml))
+
+    config_yml.write('{{{')
+    with pytest.raises(ConfigurationError):
+        bootstrap_options(settings, str(config_yml))
+
+
+def test_bootstrap_options_no_config(settings):
+    "No config file should gracefully extract values out of settings"
+    settings.SECRET_KEY = 'my-system-secret-key'
+    settings.EMAIL_BACKEND = 'my-mail-backend'
+    settings.EMAIL_HOST = 'my-mail-host'
+    settings.EMAIL_PORT = 123
+    settings.EMAIL_HOST_USER = 'my-mail-username'
+    settings.EMAIL_HOST_PASSWORD = 'my-mail-password'
+    settings.EMAIL_USE_TLS = True
+    settings.SERVER_EMAIL = 'my-mail-from'
+    settings.EMAIL_SUBJECT_PREFIX = 'my-mail-subject-prefix'
+    settings.FOO_BAR = 'lol'
+
+    bootstrap_options(settings)
+    assert settings.SENTRY_OPTIONS == {
+        'system.secret-key': 'my-system-secret-key',
+        'mail.backend': 'my-mail-backend',
+        'mail.host': 'my-mail-host',
+        'mail.port': 123,
+        'mail.username': 'my-mail-username',
+        'mail.password': 'my-mail-password',
+        'mail.use-tls': True,
+        'mail.from': 'my-mail-from',
+        'mail.subject-prefix': 'my-mail-subject-prefix',
+    }
+
+
+def test_bootstrap_options_no_config_only_sentry_options(settings):
+    "SENTRY_OPTIONS is only declared, but should be promoted into settings"
+    settings.SENTRY_OPTIONS = {
+        'system.secret-key': 'my-system-secret-key',
+        'mail.backend': 'my-mail-backend',
+        'mail.host': 'my-mail-host',
+        'mail.port': 123,
+        'mail.username': 'my-mail-username',
+        'mail.password': 'my-mail-password',
+        'mail.use-tls': True,
+        'mail.from': 'my-mail-from',
+        'mail.subject-prefix': 'my-mail-subject-prefix',
+    }
+
+    bootstrap_options(settings)
+    assert settings.SECRET_KEY == 'my-system-secret-key'
+    assert settings.EMAIL_BACKEND == 'my-mail-backend'
+    assert settings.EMAIL_HOST == 'my-mail-host'
+    assert settings.EMAIL_PORT == 123
+    assert settings.EMAIL_HOST_USER == 'my-mail-username'
+    assert settings.EMAIL_HOST_PASSWORD == 'my-mail-password'
+    assert settings.EMAIL_USE_TLS is True
+    assert settings.SERVER_EMAIL == 'my-mail-from'
+    assert settings.EMAIL_SUBJECT_PREFIX == 'my-mail-subject-prefix'
+
+
+def test_bootstrap_options_missing_file(settings):
+    bootstrap_options(settings, 'this-file-does-not-exist-xxxxxxxxxxxxxx.yml')
+    assert settings.SENTRY_OPTIONS == {}
+
+
+def test_bootstrap_options_empty_file(settings, config_yml):
+    config_yml.write('')
+    bootstrap_options(settings, str(config_yml))
+    assert settings.SENTRY_OPTIONS == {}
+
+
+def test_apply_legacy_settings(settings):
+    settings.SENTRY_USE_QUEUE = True
+    settings.SENTRY_ALLOW_REGISTRATION = True
+    settings.SENTRY_ADMIN_EMAIL = 'admin-email'
+    settings.SENTRY_URL_PREFIX = 'http://url-prefix'
+    settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 10
+    settings.SENTRY_REDIS_OPTIONS = {'foo': 'bar'}
+    settings.SENTRY_OPTIONS = {
+        'mail.from': 'mail-from',
+    }
+    apply_legacy_settings(settings)
+    assert settings.CELERY_ALWAYS_EAGER is False
+    assert settings.SENTRY_FEATURES['auth:register'] is True
+    assert settings.SENTRY_OPTIONS == {
+        'system.admin-email': 'admin-email',
+        'system.url-prefix': 'http://url-prefix',
+        'system.rate-limit': 10,
+        'redis.clusters': {'default': {'foo': 'bar'}},
+        'mail.from': 'mail-from',
+    }
+    assert settings.DEFAULT_FROM_EMAIL == 'mail-from'
+
+
+def test_initialize_app(settings):
+    "Just a sanity check of the full initialization process"
+    bootstrap_options(settings)
+    apply_legacy_settings(settings)
