commit a157daf75e954dd239b8d2dd7a32811c9d713693
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 2 19:00:55 2010 -0700

    Move exception handler into sentry.client

diff --git a/README.rst b/README.rst
index bc5d317430..4577b56a4a 100644
--- a/README.rst
+++ b/README.rst
@@ -56,8 +56,8 @@ Once installed, update your settings.py and add ``sentry``, ``indexer``, and ``p
 
 	    'indexer',
 	    'paging',
-	    'sentry.client',
 	    'sentry',
+	    'sentry.client',
 	    ...
 	)
 
@@ -81,6 +81,23 @@ Enable catching of 404 errors in the logs. Default value is ``False``::
 
 You can skip other custom exception types by adding a ``skip_sentry = True`` attribute to them.
 
+#################
+SENTRY_REMOTE_URL
+#################
+
+If you run on a multi server environment we highly recommend this method for storing error logs.
+
+You'll need to setup a webserver that's designated as a sentry server. Bare minimum config would include
+everything the install guide talks about here. Once done, you'll need to do two things on your app server::
+
+	# This should be the absolute URI of sentries store view
+	SENTRY_REMOTE_URL = '%sentry_url_base%/store/'
+	
+	INSTALLED_APPS = [
+	  ...
+	  'sentry.client',
+	]
+
 #####################
 SENTRY_DATABASE_USING
 #####################
diff --git a/sentry/client/models.py b/sentry/client/models.py
new file mode 100644
index 0000000000..51d68ea829
--- /dev/null
+++ b/sentry/client/models.py
@@ -0,0 +1,79 @@
+import sys
+import traceback
+import logging
+import warnings
+
+from django.conf import settings as dj_settings
+from django.core.signals import got_request_exception
+from django.db import  transaction
+from django.http import Http404
+
+from sentry import settings
+from sentry.client import SentryClient
+from sentry.helpers import get_installed_apps
+
+logger = logging.getLogger('sentry')
+
+@transaction.commit_on_success
+def sentry_exception_handler(sender, request=None, **kwargs):
+    try:
+        exc_type, exc_value, exc_traceback = sys.exc_info()
+
+        if not settings.CATCH_404_ERRORS \
+                and issubclass(exc_type, Http404):
+            return
+
+        if dj_settings.DEBUG or getattr(exc_type, 'skip_sentry', False):
+            return
+
+        if transaction.is_dirty():
+            transaction.rollback()
+
+        # kudos to Tapz for this idea
+        modules = get_installed_apps()
+
+        # only retrive last 10 lines
+        tb = traceback.extract_tb(exc_traceback)
+
+        # retrive final file and line number where the exception occured
+        file, line_number = tb[-1][:2]
+
+        # tiny hack to get the python path from filename
+        for (filename, line, function, text) in reversed(tb):
+            for path in sys.path:
+                if filename.startswith(path):
+                    view = '%s.%s' % (filename[len(path)+1:].replace('/', '.').replace('.py', ''), function)
+                    break
+            if view.split('.')[0] in modules:
+                break
+            else:
+                view = '%s.%s' % (exc_traceback.tb_frame.f_globals['__name__'], tb[-1][2]) 
+
+        if request:
+            data = dict(
+                META=request.META,
+                POST=request.POST,
+                GET=request.GET,
+                COOKIES=request.COOKIES,
+            )
+        else:
+            data = dict()
+
+        extra = dict(
+            url=request and request.build_absolute_uri() or None,
+            data=data,
+            view=view,
+        )
+
+        if settings.USE_LOGGING:
+            logger.critical(exc_value, exc_info=sys.exc_info(), extra=extra)
+        else:
+            SentryClient.create_from_exception(**extra)
+    except Exception, exc:
+        try:
+            logger.exception(u'Unable to process log entry: %s' % (exc,))
+        except Exception, exc:
+            warnings.warn(u'Unable to process log entry: %s' % (exc,))
+
+got_request_exception.connect(sentry_exception_handler)
+
diff --git a/sentry/models.py b/sentry/models.py
index 825e12a5a6..aac510af51 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -12,7 +12,6 @@ import warnings
 from django.conf import settings as dj_settings
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models, transaction
-from django.core.signals import got_request_exception
 from django.http import Http404
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
@@ -129,68 +128,6 @@ class GroupedMessage(MessageBase):
     def natural_key(self):
         return (self.logger, self.view, self.checksum)
 
-    @staticmethod
-    @transaction.commit_on_success
-    def handle_exception(sender, request=None, **kwargs):
-        try:
-            exc_type, exc_value, exc_traceback = sys.exc_info()
-
-            if not settings.CATCH_404_ERRORS \
-                    and issubclass(exc_type, Http404):
-                return
-
-            if dj_settings.DEBUG or getattr(exc_type, 'skip_sentry', False):
-                return
-
-            if transaction.is_dirty():
-                transaction.rollback()
-
-            # kudos to Tapz for this idea
-            modules = get_installed_apps()
-
-            # only retrive last 10 lines
-            tb = traceback.extract_tb(exc_traceback)
-
-            # retrive final file and line number where the exception occured
-            file, line_number = tb[-1][:2]
-
-            # tiny hack to get the python path from filename
-            for (filename, line, function, text) in reversed(tb):
-                for path in sys.path:
-                    if filename.startswith(path):
-                        view = '%s.%s' % (filename[len(path)+1:].replace('/', '.').replace('.py', ''), function)
-                        break
-                if view.split('.')[0] in modules:
-                    break
-                else:
-                    view = '%s.%s' % (exc_traceback.tb_frame.f_globals['__name__'], tb[-1][2]) 
-
-            if request:
-                data = dict(
-                    META=request.META,
-                    POST=request.POST,
-                    GET=request.GET,
-                    COOKIES=request.COOKIES,
-                )
-            else:
-                data = dict()
-
-            extra = dict(
-                url=request and request.build_absolute_uri() or None,
-                data=data,
-                view=view,
-            )
-
-            if settings.USE_LOGGING:
-                logging.getLogger('sentry').critical(exc_value, exc_info=sys.exc_info(), extra=extra)
-            else:
-                SentryClient.create_from_exception(**extra)
-        except Exception, exc:
-            try:
-                logger.exception(u'Unable to process log entry: %s' % (exc,))
-            except Exception, exc:
-                warnings.warn(u'Unable to process log entry: %s' % (exc,))
-
     @classmethod
     def get_score_clause(cls):
         if dj_settings.DATABASE_ENGINE.rsplit('.', 1)[-1].startswith('postgresql'):
@@ -236,5 +173,3 @@ class Message(MessageBase):
         return self.data.get('url') or self.url
     full_url.short_description = _('url')
     full_url.admin_order_field = 'url'
- 
-got_request_exception.connect(GroupedMessage.handle_exception)
\ No newline at end of file
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 40de6359dc..d6cc5ef966 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -21,6 +21,7 @@ from sentry import settings
 from sentry.helpers import transform
 from sentry.models import Message, GroupedMessage
 from sentry.client import SentryClient
+from sentry.client.models import sentry_exception_handler
 
 from models import TestModel, DuplicateKeyModel
 
@@ -206,7 +207,7 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999999)
         except Message.DoesNotExist, exc:
-            GroupedMessage.handle_exception(request=request, sender=self)
+            sentry_exception_handler(request=request, sender=self)
         else:
             self.fail('Unable to create `Message` entry.')
         
@@ -339,7 +340,7 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999999)
         except Message.DoesNotExist, exc:
-            GroupedMessage.handle_exception(request=request, sender=self)
+            sentry_exception_handler(request=request, sender=self)
         else:
             self.fail('Expected an exception.')
         
@@ -361,7 +362,7 @@ class SentryTestCase(TestCase):
         try:
             Message.objects.get(id=999999999)
         except Message.DoesNotExist, exc:
-            GroupedMessage.handle_exception(request=request, sender=self)
+            sentry_exception_handler(request=request, sender=self)
         else:
             self.fail('Expected an exception.')
         
