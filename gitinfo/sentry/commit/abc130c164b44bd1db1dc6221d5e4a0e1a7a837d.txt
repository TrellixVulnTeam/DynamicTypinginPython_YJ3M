commit abc130c164b44bd1db1dc6221d5e4a0e1a7a837d
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 11 14:01:49 2019 -0800

    ref(issues): Refactor suggested owners (#11486)
    
    Suggested owners component gets project and group from props instead of
    context. Makes it reusable for organization level issues where project
    and group will not be in context.

diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index e636487966..7b0fac0a09 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -243,7 +243,7 @@ const GroupSidebar = createReactClass({
 
     return (
       <div className="group-stats">
-        <SuggestedOwners event={this.props.event} />
+        <SuggestedOwners project={project} group={group} event={this.props.event} />
         <GroupReleaseStats
           group={this.props.group}
           allEnvironments={this.state.allEnvironmentsGroupData}
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 36baa8ab46..9787546722 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -8,36 +8,21 @@ import Access from 'app/components/acl/access';
 import ActorAvatar from 'app/components/actorAvatar';
 import ApiMixin from 'app/mixins/apiMixin';
 import Button from 'app/components/button';
-import GroupState from 'app/mixins/groupState';
+import OrganizationState from 'app/mixins/organizationState';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
 import SentryTypes from 'app/sentryTypes';
 import SuggestedOwnerHovercard from 'app/components/group/suggestedOwnerHovercard';
 
-/**
- * Given a list of rule objects returned from the API, locate the matching
- * rules for a specific owner.
- */
-function findMatchedRules(rules, owner) {
-  const matchOwner = (actorType, key) =>
-    (actorType == 'user' && key === owner.email) ||
-    (actorType == 'team' && key == owner.name);
-
-  const actorHasOwner = ([actorType, key]) =>
-    actorType === owner.type && matchOwner(actorType, key);
-
-  return rules
-    .filter(([_, ruleActors]) => ruleActors.find(actorHasOwner))
-    .map(([rule]) => rule);
-}
-
 const SuggestedOwners = createReactClass({
   displayName: 'SuggestedOwners',
 
   propTypes: {
+    project: SentryTypes.Project,
+    group: SentryTypes.Group,
     event: SentryTypes.Event,
   },
 
-  mixins: [ApiMixin, GroupState],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
@@ -65,8 +50,9 @@ const SuggestedOwners = createReactClass({
 
   fetchData(event) {
     if (!event) return;
-    let org = this.getOrganization();
-    let project = this.getProject();
+    const org = this.getOrganization();
+    const project = this.props.project;
+
     this.api.request(
       `/projects/${org.slug}/${project.slug}/events/${event.id}/committers/`,
       {
@@ -157,11 +143,9 @@ const SuggestedOwners = createReactClass({
   },
 
   render() {
+    const {group, project} = this.props;
     const owners = this.getOwnerList();
-
-    let group = this.getGroup();
-    let project = this.getProject();
-    let org = this.getOrganization();
+    const org = this.getOrganization();
 
     return (
       <React.Fragment>
@@ -218,3 +202,20 @@ const SuggestedOwners = createReactClass({
   },
 });
 export default SuggestedOwners;
+
+/**
+ * Given a list of rule objects returned from the API, locate the matching
+ * rules for a specific owner.
+ */
+function findMatchedRules(rules, owner) {
+  const matchOwner = (actorType, key) =>
+    (actorType == 'user' && key === owner.email) ||
+    (actorType == 'team' && key == owner.name);
+
+  const actorHasOwner = ([actorType, key]) =>
+    actorType === owner.type && matchOwner(actorType, key);
+
+  return rules
+    .filter(([_, ruleActors]) => ruleActors.find(actorHasOwner))
+    .map(([rule]) => rule);
+}
diff --git a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
index 3b0aab5815..5c6c9bf66d 100644
--- a/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/sidebar.spec.jsx.snap
@@ -13,6 +13,75 @@ exports[`GroupSidebar renders with tags renders 1`] = `
         "message": "ApiException",
       }
     }
+    group={
+      Object {
+        "assignedTo": null,
+        "id": "1",
+        "project": Object {
+          "id": "2",
+          "slug": "project-slug",
+        },
+        "stats": Object {
+          "24h": Array [
+            Array [
+              1517281200,
+              2,
+            ],
+            Array [
+              1517310000,
+              1,
+            ],
+          ],
+          "30d": Array [
+            Array [
+              1514764800,
+              1,
+            ],
+            Array [
+              1515024000,
+              122,
+            ],
+          ],
+        },
+        "tags": Array [
+          Object {
+            "canDelete": true,
+            "key": "browser",
+            "name": "Browser",
+            "totalValues": 30,
+          },
+          Object {
+            "canDelete": true,
+            "key": "device",
+            "name": "Device",
+            "totalValues": 5,
+          },
+          Object {
+            "canDelete": true,
+            "key": "url",
+            "name": "URL",
+            "totalValues": 7,
+          },
+          Object {
+            "canDelete": false,
+            "key": "environment",
+            "name": "Environment",
+            "totalValues": 100,
+          },
+        ],
+      }
+    }
+    project={
+      Object {
+        "hasAccess": true,
+        "id": "2",
+        "isBookmarked": false,
+        "isMember": true,
+        "name": "Project Name",
+        "slug": "project-slug",
+        "teams": Array [],
+      }
+    }
   />
   <GroupReleaseStats
     allEnvironments={
diff --git a/tests/js/spec/components/group/suggestedOwners.spec.jsx b/tests/js/spec/components/group/suggestedOwners.spec.jsx
index b621ca0809..713de28185 100644
--- a/tests/js/spec/components/group/suggestedOwners.spec.jsx
+++ b/tests/js/spec/components/group/suggestedOwners.spec.jsx
@@ -10,11 +10,10 @@ describe('SuggestedOwners', function() {
 
   const organization = TestStubs.Organization();
   const project = TestStubs.Project();
+  const group = TestStubs.Group();
 
   const routerContext = TestStubs.routerContext([
     {
-      group: TestStubs.Group(),
-      project,
       organization,
     },
   ]);
@@ -50,7 +49,10 @@ describe('SuggestedOwners', function() {
       },
     });
 
-    const wrapper = mount(<SuggestedOwners event={event} />, routerContext);
+    const wrapper = mount(
+      <SuggestedOwners project={project} group={group} event={event} />,
+      routerContext
+    );
 
     expect(wrapper.find('ActorAvatar')).toHaveLength(2);
 
@@ -87,7 +89,10 @@ describe('SuggestedOwners', function() {
       },
     });
 
-    const wrapper = mount(<SuggestedOwners event={event} />, routerContext);
+    const wrapper = mount(
+      <SuggestedOwners project={project} group={group} event={event} />,
+      routerContext
+    );
 
     expect(wrapper.find('ActorAvatar')).toHaveLength(1);
 
