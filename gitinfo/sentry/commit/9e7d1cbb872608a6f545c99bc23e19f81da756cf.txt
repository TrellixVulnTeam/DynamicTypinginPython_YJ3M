commit 9e7d1cbb872608a6f545c99bc23e19f81da756cf
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Mon Aug 19 11:35:49 2019 -0700

    fix(suspect-commits): Fix when empty state renders (#14376)

diff --git a/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx b/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx
index ff5079a7ab..f39c3714a3 100644
--- a/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx
@@ -14,7 +14,6 @@ import {snoozedDays} from 'app/utils/promptsActivity';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import {trackAdhocEvent, trackAnalyticsEvent} from 'app/utils/analytics';
-import Tooltip from 'app/components/tooltip';
 import withApi from 'app/utils/withApi';
 
 const EXAMPLE_COMMITS = ['dec0de', 'de1e7e', '5ca1ed'];
@@ -138,28 +137,26 @@ class EventCauseEmpty extends React.Component {
                     eventName: 'Event Cause Docs Clicked',
                   })
                 }
-                data-test-id="read-the-docs"
               >
                 {t('Read the docs')}
               </DocsButton>
 
               <div>
-                <Tooltip title={t('Remind me next week')}>
-                  <SnoozeButton
-                    size="small"
-                    onClick={() =>
-                      this.handleClick({
-                        action: 'snoozed',
-                        eventKey: 'event_cause.snoozed',
-                        eventName: 'Event Cause Snoozed',
-                      })
-                    }
-                    data-test-id="snoozed"
-                  >
-                    {t('Snooze')}
-                  </SnoozeButton>
-                </Tooltip>
+                <SnoozeButton
+                  title={t('Remind me next week')}
+                  size="small"
+                  onClick={() =>
+                    this.handleClick({
+                      action: 'snoozed',
+                      eventKey: 'event_cause.snoozed',
+                      eventName: 'Event Cause Snoozed',
+                    })
+                  }
+                >
+                  {t('Snooze')}
+                </SnoozeButton>
                 <DismissButton
+                  title={t('Dismiss for this project')}
                   size="small"
                   onClick={() =>
                     this.handleClick({
@@ -168,7 +165,6 @@ class EventCauseEmpty extends React.Component {
                       eventName: 'Event Cause Dismissed',
                     })
                   }
-                  data-test-id="dismissed"
                 >
                   {t('Dismiss')}
                 </DismissButton>
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index c96b6c6a95..d13dbccc17 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -82,7 +82,10 @@ class EventEntries extends React.Component {
   }
 
   shouldComponentUpdate(nextProps) {
-    return this.props.event.id !== nextProps.event.id;
+    return (
+      this.props.event.id !== nextProps.event.id ||
+      this.props.showExampleCommit !== nextProps.showExampleCommit
+    );
   }
 
   recordIssueError(errorTypes, errorMessages) {
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
index 0e4524930a..ea6b79cd55 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
@@ -38,7 +38,7 @@ class GroupEventDetails extends React.Component {
       error: false,
       event: null,
       eventNavLinks: '',
-      setupReleases: [],
+      releasesCompletion: null,
     };
   }
 
@@ -118,7 +118,7 @@ class GroupEventDetails extends React.Component {
       .requestPromise(`/projects/${orgSlug}/${projSlug}/releases/completion/`)
       .then(data => {
         this.setState({
-          setupReleases: data,
+          releasesCompletion: data,
         });
       });
 
@@ -142,9 +142,12 @@ class GroupEventDetails extends React.Component {
     fetchSentryAppComponents(api, orgSlug, projectId);
   };
 
-  get hasSetupCommits() {
-    const {setupReleases} = this.state;
-    return setupReleases.some(({step, complete}) => step === 'commit' && complete);
+  get showExampleCommit() {
+    const {releasesCompletion} = this.state;
+    return (
+      releasesCompletion &&
+      releasesCompletion.some(({step, complete}) => step === 'commit' && !complete)
+    );
   }
 
   render() {
@@ -192,7 +195,7 @@ class GroupEventDetails extends React.Component {
                 event={evt}
                 orgId={organization.slug}
                 project={project}
-                showExampleCommit={!this.hasSetupCommits}
+                showExampleCommit={this.showExampleCommit}
               />
             )}
           </div>
diff --git a/tests/js/spec/components/events/eventCauseEmpty.spec.jsx b/tests/js/spec/components/events/eventCauseEmpty.spec.jsx
index 56ce588358..eab65f1123 100644
--- a/tests/js/spec/components/events/eventCauseEmpty.spec.jsx
+++ b/tests/js/spec/components/events/eventCauseEmpty.spec.jsx
@@ -60,7 +60,7 @@ describe('EventCauseEmpty', function() {
     wrapper.update();
 
     wrapper
-      .find('[data-test-id="snoozed"]')
+      .find('button[aria-label="Snooze"]')
       .first()
       .simulate('click');
 
@@ -142,7 +142,7 @@ describe('EventCauseEmpty', function() {
     wrapper.update();
 
     wrapper
-      .find('[data-test-id="dismissed"]')
+      .find('button[aria-label="Dismiss"]')
       .first()
       .simulate('click');
 
@@ -198,7 +198,7 @@ describe('EventCauseEmpty', function() {
     wrapper.update();
 
     wrapper
-      .find('[data-test-id="read-the-docs"]')
+      .find('[aria-label="Read the docs"]')
       .first()
       .simulate('click');
 
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
index 5db17ceb7d..4ef975f46a 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
@@ -4,6 +4,7 @@ import {browserHistory} from 'react-router';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {GroupEventDetails} from 'app/views/organizationGroupDetails/groupEventDetails';
+import HookStore from 'app/stores/hookStore';
 
 describe('groupEventDetails', () => {
   let org;
@@ -212,64 +213,133 @@ describe('groupEventDetails', () => {
     });
   });
 
-  it('does not render suspect commit empty state', async function() {
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
-      body: [
-        {
-          step: 'commit',
-          complete: false,
-        },
-      ],
+  describe('EventCauseEmpty', () => {
+    let hookFn;
+
+    beforeEach(function() {
+      hookFn = jest.fn(() => null);
+      HookStore.hooks['component:event-cause-empty'] = [hookFn];
     });
 
-    const wrapper = mount(
-      <GroupEventDetails
-        api={new MockApiClient()}
-        group={group}
-        project={project}
-        organization={org}
-        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
-        params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
-        location={{query: {environment: 'dev'}}}
-      />,
-      routerContext
-    );
-    await tick();
-    wrapper.update();
+    afterEach(function() {
+      // clear HookStore
+      HookStore.init();
+    });
 
-    expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
-    expect(wrapper.find('EventCause').exists()).toBe(false);
-  });
+    it('calls event cause empty state hook', async function() {
+      MockApiClient.addMockResponse({
+        url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+        body: [
+          {
+            step: 'commit',
+            complete: false,
+          },
+        ],
+      });
 
-  it('renders suspect commit', async function() {
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
-      body: [
-        {
-          step: 'commit',
-          complete: true,
-        },
-      ],
+      const wrapper = mount(
+        <GroupEventDetails
+          api={new MockApiClient()}
+          group={group}
+          project={project}
+          organization={org}
+          environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+          params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+          location={{query: {environment: 'dev'}}}
+        />,
+        routerContext
+      );
+      await tick();
+      wrapper.update();
+
+      expect(hookFn).toHaveBeenCalledWith({organization: org, project});
+      expect(wrapper.find('EventCause').exists()).toBe(false);
+      expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
     });
 
-    const wrapper = mount(
-      <GroupEventDetails
-        api={new MockApiClient()}
-        group={group}
-        project={project}
-        organization={org}
-        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
-        params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
-        location={{query: {environment: 'dev'}}}
-      />,
-      routerContext
-    );
-    await tick();
-    wrapper.update();
+    it('renders suspect commit', async function() {
+      MockApiClient.addMockResponse({
+        url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+        body: [
+          {
+            step: 'commit',
+            complete: true,
+          },
+        ],
+      });
+
+      const wrapper = mount(
+        <GroupEventDetails
+          api={new MockApiClient()}
+          group={group}
+          project={project}
+          organization={org}
+          environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+          params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+          location={{query: {environment: 'dev'}}}
+        />,
+        routerContext
+      );
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('EventCause').exists()).toBe(true);
+      expect(hookFn).not.toHaveBeenCalled();
+      expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+    });
+
+    it('renders suspect commit if `releasesCompletion` empty', async function() {
+      MockApiClient.addMockResponse({
+        url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+        body: [],
+      });
+
+      const wrapper = mount(
+        <GroupEventDetails
+          api={new MockApiClient()}
+          group={group}
+          project={project}
+          organization={org}
+          environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+          params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+          location={{query: {environment: 'dev'}}}
+        />,
+        routerContext
+      );
+
+      await tick();
+      wrapper.update();
 
-    expect(wrapper.find('EventCause').exists()).toBe(true);
-    expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+      expect(wrapper.find('EventCause').exists()).toBe(true);
+      expect(hookFn).not.toHaveBeenCalled();
+      expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+    });
+
+    it('renders suspect commit if `releasesCompletion` null', async function() {
+      MockApiClient.addMockResponse({
+        url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+        body: null,
+      });
+
+      const wrapper = mount(
+        <GroupEventDetails
+          api={new MockApiClient()}
+          group={group}
+          project={project}
+          organization={org}
+          environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+          params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+          location={{query: {environment: 'dev'}}}
+        />,
+        routerContext
+      );
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('EventCause').exists()).toBe(true);
+      expect(hookFn).not.toHaveBeenCalled();
+      expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+    });
   });
 
   describe('Platform Integrations', () => {
