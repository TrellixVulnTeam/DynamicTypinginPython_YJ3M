commit 0d4009cc58ce7e887dced6143fc1a6c135e66f15
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 31 15:08:10 2015 -0800

    Yet another implementation of optimistic updates

diff --git a/.jshintrc b/.jshintrc
index fee528b191..a9f2b8aa7d 100644
--- a/.jshintrc
+++ b/.jshintrc
@@ -1,6 +1,7 @@
 {
     "strict": false,
     "browser": true,
+    "esnext": true,
     "predef": [
         "angular",
         "module",
diff --git a/package.json b/package.json
index ef82cef521..128dcbb47a 100644
--- a/package.json
+++ b/package.json
@@ -9,6 +9,7 @@
     "bootstrap": "^3.1.1",
     "chai": "1.7.x",
     "flot": "^0.8.0-alpha",
+    "fluxxor": "^1.5.2",
     "gulp": "^3.8.10",
     "gulp-cached": "^1.0.1",
     "gulp-clean": "^0.3.1",
diff --git a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx b/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
index 6b6de030d7..7fad97f765 100644
--- a/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
+++ b/src/sentry/static/sentry/app/actions/aggregateListActions.jsx
@@ -5,109 +5,20 @@ var Reflux = require("reflux");
 
 // TODO(dcramer): we should probably just make every parameter update
 // work on bulk aggregates
-// TODO(dcramer): define a spec for action parameterization and children
-// i.e. in(params) => out(params, response)
-var AggregateListActions = Reflux.createActions({
-  "assignTo": {
-    children: ["completed", "failed"]
-  },
-  "bulkUpdate": {
-    children: ["completed", "failed"]
-  },
-  "bulkDelete": {
-    children: ["completed", "failed"]
-  },
-  "merge": {
-    children: ["completed", "failed"]
-  }
-});
+var AggregateListActions = Reflux.createActions([
+  "assignTo",
+  "assignToError",
+  "assignToSuccess",
+  "delete",
+  "deleteError",
+  "deleteSuccess",
+  "update",
+  "updateError",
+  "updateSuccess",
+  "merge",
+  "mergeError",
+  "mergeSuccess"
+]);
 
-AggregateListActions.assignTo.listen(function(itemId, userEmail){
-  if (!itemId) {
-    this.failed(itemId, userEmail);
-    return false;
-  }
-
-  $.ajax({
-    url: '/api/0/groups/' + itemId + '/',
-    method: 'PUT',
-    data: JSON.stringify({
-      assignedTo: userEmail
-    }),
-    contentType: 'application/json',
-    success: function(data){
-      this.completed(itemId, userEmail, data);
-    }.bind(this),
-    error: function(){
-      this.failed(itemId, userEmail);
-    }.bind(this)
-  });
-});
-
-AggregateListActions.merge.listen(function(params){
-  if (!(params.itemIds && params.orgId && params.projectId)) {
-    return this.failed(params);
-  }
-
-  var url = '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
-  url += '?id=' + params.itemIds.join('&id=');
-
-  $.ajax({
-    url: url,
-    method: 'PUT',
-    data: {merge: 1},
-    contentType: 'application/json',
-    success: function(data){
-      this.completed(params);
-    }.bind(this),
-    error: function(){
-      this.failed(params);
-    }.bind(this)
-  });
-});
-
-AggregateListActions.bulkUpdate.listen(function(params){
-  if (!(params.orgId && params.projectId)) {
-    this.failed(params);
-  }
-  var url = '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
-  if (params.itemIds) {
-    url += '?id=' + params.itemIds.join('&id=');
-  }
-
-  $.ajax({
-    url: url,
-    method: 'PUT',
-    data: JSON.stringify(params.data),
-    contentType: 'application/json',
-    success: function(data){
-      this.completed(params);
-    }.bind(this),
-    error: function(){
-      this.failed(params);
-    }.bind(this)
-  });
-});
-
-AggregateListActions.bulkDelete.listen(function(params){
-  if (!params.itemIds) {
-    return this.failed(params);
-  }
-
-  var url = '/api/0/projects/' + params.orgId + '/' + params.projectId + '/groups/';
-  url += '?id=' + params.itemIds.join('&id=');
-
-  $.ajax({
-    url: url,
-    method: 'DELETE',
-    contentType: 'application/json',
-    success: function(data){
-      this.completed(params);
-    }.bind(this),
-    error: function(){
-      this.failed(params);
-    }.bind(this)
-  });
-});
 
 module.exports = AggregateListActions;
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index b8a16c5992..bf8e252cb8 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -2,18 +2,76 @@
 
 var $ = require("jquery");
 
-var Client = function(){
-  this.baseUrl = "/api/0";
-};
-
-Client.prototype.request = function(path, options) {
-  $.ajax({
-    url: this.baseUrl + path,
-    method: options.method || 'GET',
-    success: options.success,
-    error: options.error,
-    complete: options.complete
-  });
-};
+class Client {
+  constructor(options) {
+    this.baseUrl = options.baseUrl || "/api/0";
+  }
+
+  uniqueId() {
+    function s4() {
+      return Math.floor((1 + Math.random()) * 0x10000)
+                 .toString(16)
+                 .substring(1);
+    }
+    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
+           s4() + '-' + s4() + s4() + s4();
+  }
+
+  request(path, options) {
+    var query = $.param(options.query || "", true);
+    var method = options.method || (options.data ? "POST" : "GET");
+    var data = options.data;
+
+    if (typeof data !== "undefined") {
+      data = JSON.stringify(data);
+    }
+
+    $.ajax({
+      url: this.baseUrl + path + "?" + query,
+      method: method,
+      data: data,
+      success: options.success,
+      error: options.error,
+      complete: options.complete
+    });
+  }
+
+  bulkUpdate(params) {
+    var path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
+    var query = (params.itemIds ? {id: params.itemIds} : undefined);
+    var id = this.uniqueId();
+
+    AggregateListActions.bulkUpdate(id, params.itemIds, params.data);
+
+    return this.request(path, {
+      query: query,
+      method: "PUT",
+      data: params.data,
+      success: function(response){
+       AggregateListActions.bulkUpdateSuccess(id, params.itemIds, response);
+      },
+      error: function(error){
+       AggregateListActions.bulkUpdateError(id, params.itemIds, error);
+      }
+    });
+  }
+
+  assignTo(params) {
+    var path = "/groups/" + params.id + "/";
+
+    AggregateListActions.assignTo(params);
+
+    return this.request(path, {
+      method: "PUT",
+      data: params.data,
+      success: function(data){
+       AggregateListActions.assignToSuccess(params, data);
+      },
+      error: function(error){
+       AggregateListActions.assignToError(params, error);
+      }
+    });
+  }
+}
 
 module.exports = new Client();
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index 22cdc91b78..3bd74b3a81 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -1,7 +1,6 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
-var Reflux = require("reflux");
 var AlertActions = require('../actions/alertActions');
 
 var AlertMessage = React.createClass({
diff --git a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
index a31888ed76..ed74da3730 100644
--- a/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/aggregateListStore.jsx
@@ -11,66 +11,40 @@ var ERR_CHANGE_ASSIGNEE = 'Unable to change assignee. Please try again.';
 var OK_SCHEDULE_DELETE = 'The selected events have been scheduled for deletion.';
 var OK_SCHEDULE_MERGE = 'The selected events have been scheduled for merge.';
 
-// TODO(dcramer): what we want to actually do is keep this as a simple
-// list and have stream add/remove items as they're modified within stream
-// itself
-var _items = [];
-var _pendingChanges = [];
-
-
-var _bulkMutateAll = function(params, timestamp) {
-  _items.forEach(function(item){
-    if (!item._validAt || item._validAt <= timestamp) {
-      $.extend(item, params);
-      item._validAt = timestamp;
-    }
-  });
-};
-
-var bulkMutate = function(params, timestamp, itemIds) {
-  var itemIdsHash = {};
-  itemIds.forEach(function(id){
-    itemIdsHash[id] = 1;
-  });
-
-  _items.forEach(function(item){
-    if (typeof itemIdsHash[item.id] !== 'undefined') {
-      if (!item._validAt || item._validAt <= timestamp) {
-        $.extend(item, params);
-        item._validAt = timestamp;
-      }
-    }
-  });
-};
-
 var AggregateListStore = Reflux.createStore({
   init: function() {
-    // TODO(dcramer): theres no documented way to do listenables via these
-    this.listenTo(AggregateListActions.assignTo.completed, this.onAssignToCompleted);
-    this.listenTo(AggregateListActions.assignTo.failed, this.onAssignToFailed);
+    this.items = [];
+    this.pendingChanges = new utils.PendingChangeQueue();
+
+    this.listenTo(AggregateListActions.update, this.onUpdate);
+    this.listenTo(AggregateListActions.updateError, this.onUpdateError);
+    this.listenTo(AggregateListActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(AggregateListActions.assignTo, this.onAssignTo);
+    this.listenTo(AggregateListActions.assignToError, this.onAssignToError);
+    this.listenTo(AggregateListActions.assignToSuccess, this.onAssignToSuccess);
   },
 
   // TODO(dcramer): this should actually come from an action of some sorts
   loadInitialData: function(items) {
-    _items.splice(0);
-    _pendingChanges.splice(0);
+    this.items = [];
+    this.pendingChanges.clear();
     items.forEach(function(item){
-      _items.push(item);
+      this.items.push(item);
     });
-    this.trigger(this.getAllItems(), 'initial');
+    this.trigger("initial");
   },
 
   getItem: function(id) {
     var pendingForId = [];
-    _pendingChanges.forEach(function(change){
+    this.pendingChanges.forEach(function(change){
       if (change.id === id) {
         pendingForId.push(change);
       }
     });
 
-    for (var i = 0; i < _items.length; i++) {
-      if (_items[i].id === id) {
-        var rItem = _items[i];
+    for (var i = 0; i < this.items.length; i++) {
+      if (this.items[i].id === id) {
+        var rItem = this.items[i];
         if (pendingForId.length) {
           // copy the object so dirty state doesnt mutate original
           rItem = $.extend(true, {}, rItem);
@@ -87,7 +61,7 @@ var AggregateListStore = Reflux.createStore({
   getAllItems: function() {
     // regroup pending changes by their itemID
     var pendingById = {};
-    _pendingChanges.forEach(function(change){
+    this.pendingChanges.forEach(function(change){
       if (typeof pendingById[change.id] === 'undefined') {
         pendingById[change.id] = [];
       }
@@ -95,7 +69,7 @@ var AggregateListStore = Reflux.createStore({
     });
 
     var results = [];
-    _items.forEach(function(item){
+    this.items.forEach(function(item){
       var rItem = item;
       if (typeof pendingById[item.id] !== 'undefined') {
         // copy the object so dirty state doesnt mutate original
@@ -109,8 +83,39 @@ var AggregateListStore = Reflux.createStore({
     return results;
   },
 
-  onAssignToCompleted: function(id, email) {
-    var item = _items.get(id);
+  // re-fire bulk events as individual actions
+  // XXX(dcramer): ideally we could do this as part of the actions API but
+  // there's no way for us to know "all events" for us to actually fire the action
+  // on each individual event when its a global action (i.e. id-less)
+  onUpdate: function(id, itemIds, data){
+    if (typeof itemIds === 'undefined') this.items.map(item => item.id);
+    itemIds.forEach(item => {
+      this.pendingChanges.push(id, itemId, data);
+    });
+    this.trigger(this.getAllItems());
+  },
+
+  onpdateError: function(id, itemIds, error){
+    this.pendingChanges.remove(id);
+    this.trigger(this.getAllItems());
+  },
+
+  onpdateSuccess: function(id, itemIds, response){
+    if (typeof itemIds === 'undefined') this.items.map(item => item.id);
+    itemIds.forEach(item => {
+      $.extend(true, item, response);
+    });
+    this.pendingChanges.remove(id);
+    this.trigger(this.getAllItems());
+  },
+
+  // TODO(dcramer): This is not really the best place for this
+  onAssignToError: function(id, email) {
+    AlertActions.addAlert(ERR_CHANGE_ASSIGNEE, 'error');
+  },
+
+  onAssignToSuccess: function(id, email) {
+    var item = this.items.get(id);
     if (!item) {
       return;
     }
@@ -125,17 +130,12 @@ var AggregateListStore = Reflux.createStore({
     this.trigger(_items);
   },
 
-  onBulkDeleteCompleted: function(params, timestamp) {
+  onDeleteCompleted: function(params) {
     AlertActions.addAlert(OK_SCHEDULE_DELETE, 'success');
   },
 
   onMergeCompleted: function(params) {
     AlertActions.addAlert(OK_SCHEDULE_MERGE, 'success');
-  },
-
-  // TODO(dcramer): This is not really the best place for this
-  onAssignToFailed: function(id, email) {
-    AlertActions.addAlert(ERR_CHANGE_ASSIGNEE, 'error');
   }
 });
 
diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index 31af8063ce..2245dafc7e 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -3,7 +3,6 @@
 var Reflux = require("reflux");
 
 // var MemberListActions = require('../actions/aggregateListActions');
-var utils = require("../utils");
 
 var MemberListStore = Reflux.createStore({
   // listenables: MemberListActions,
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index b2aee98af0..6a2835dd76 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -74,5 +74,7 @@ module.exports = {
   getQueryParams: getQueryParams,
   parseLinkHeader: parseLinkHeader,
   sortArray: sortArray,
-  Collection: require('./utils/collection')
+
+  Collection: require('./utils/collection'),
+  PendingChangeQueue: require('./utils/pendingChangeQueue')
 };
diff --git a/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx b/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx
new file mode 100644
index 0000000000..570dae0ea8
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx
@@ -0,0 +1,37 @@
+/** @jsx React.DOM */
+
+class PendingChangeQueue {
+  constructor() {
+    this.changes = [];
+  }
+
+  clear() {
+    this.changes = [];
+  }
+
+  getForItem(itemId) {
+    var results = [];
+    this.changes.forEach(function(change){
+      if (change[1] == itemId) {
+        results.push(change);
+      }
+    });
+    return results;
+  }
+
+  push(changeId, itemId, data) {
+    this.changes.push([changeId, itemId, data]);
+  }
+
+  remove(changeId, itemId) {
+    var newChanges = [];
+    this.changes.forEach(function(change){
+      if (change[0] != changeId || change[1] != itemId) {
+        newChanges.push(change);
+      }
+    });
+    this.changes = newChanges;
+  }
+}
+
+module.exports = PendingChangeQueue;
diff --git a/src/sentry/static/sentry/app/views/aggregate/header.jsx b/src/sentry/static/sentry/app/views/aggregate/header.jsx
index d4897e4ef2..d5d39159f6 100644
--- a/src/sentry/static/sentry/app/views/aggregate/header.jsx
+++ b/src/sentry/static/sentry/app/views/aggregate/header.jsx
@@ -1,8 +1,6 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
-var Reflux = require("reflux");
-var Router = require("react-router");
 
 var AssigneeSelector = require("../../components/assigneeSelector");
 var Count = require("../../components/count");
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 7032edc3c1..e10696c5b3 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -7,7 +7,6 @@ var $ = require("jquery");
 var api = require("../api");
 var AggregateListActions = require("../actions/aggregateListActions");
 var AggregateListStore = require("../stores/aggregateListStore");
-var AlertActions = require("../actions/alertActions");
 var StreamAggregate = require('./stream/aggregate');
 var StreamActions = require('./stream/actions');
 var StreamFilters = require('./stream/filters');
diff --git a/webpack.config.js b/webpack.config.js
index ce5031825f..d4ded91dd0 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -19,9 +19,9 @@ module.exports = {
       "flot",
       "flot/jquery.flot.resize",
       "flot/jquery.flot.time",
+      "fluxxor",
       "jquery",
       "moment",
-
       "raven",
       "react/addons",
       "react-router",
