commit 27546ed4867bf03d3981bb39232eb0a7ef6126d7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 18 14:42:05 2015 -0800

    Add safe_execute tests

diff --git a/tests/sentry/utils/safe/__init__.py b/tests/sentry/utils/safe/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/utils/safe/tests.py b/tests/sentry/utils/safe/tests.py
deleted file mode 100644
index 367c424d17..0000000000
--- a/tests/sentry/utils/safe/tests.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.testutils import TestCase
-from sentry.utils.safe import trim, trim_dict
-
-a_very_long_string = 'a' * 1024
-
-
-class TrimTest(TestCase):
-    def test_simple_string(self):
-        assert trim(a_very_long_string) == a_very_long_string[:509] + '...'
-
-    def test_list_of_strings(self):
-        assert trim([a_very_long_string, a_very_long_string]) == [
-            a_very_long_string[:507] + '...',
-        ]
-
-
-class TrimDictTest(TestCase):
-    def test_large_dict(self):
-        value = dict((k, k) for k in xrange(500))
-        trim_dict(value)
-        assert len(value) == 50
diff --git a/tests/sentry/utils/test_safe.py b/tests/sentry/utils/test_safe.py
new file mode 100644
index 0000000000..c64610a23e
--- /dev/null
+++ b/tests/sentry/utils/test_safe.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+from sentry.utils.safe import safe_execute, trim, trim_dict
+
+a_very_long_string = 'a' * 1024
+
+
+class TrimTest(TestCase):
+    def test_simple_string(self):
+        assert trim(a_very_long_string) == a_very_long_string[:509] + '...'
+
+    def test_list_of_strings(self):
+        assert trim([a_very_long_string, a_very_long_string]) == [
+            a_very_long_string[:507] + '...',
+        ]
+
+
+class TrimDictTest(TestCase):
+    def test_large_dict(self):
+        value = dict((k, k) for k in xrange(500))
+        trim_dict(value)
+        assert len(value) == 50
+
+
+class SafeExecuteTest(TestCase):
+    def test_with_nameless_function(self):
+        assert safe_execute(lambda a: a, 1) == 1
+        assert safe_execute(lambda: a) is None  # NOQA
+
+    def test_with_simple_function(self):
+        def simple(a):
+            return a
+
+        assert safe_execute(simple, 1) == 1
+
+        def simple(a):
+            raise Exception()
+
+        assert safe_execute(simple, 1) is None
+
+    def test_with_instance_method(self):
+        class Foo(object):
+            def simple(self, a):
+                return a
+
+        assert safe_execute(Foo().simple, 1) == 1
+
+        class Foo(object):
+            def simple(self, a):
+                raise Exception()
+
+        assert safe_execute(Foo().simple, 1) is None
