commit 32b3d144416dd5af870267c6ee8fe37eade6c016
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Tue Apr 10 15:10:11 2018 -0700

    fix: timestamp error handling (#7997)
    
    Make sure the error messages for timestamps that are too old or in the
    future are surfaced to the user. Previously they had been masked by a
    generic invalid data message.
    
    Also add some tests for the various cases of timestamp problems.

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 3d63c78076..d81f69340d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -200,8 +200,7 @@ def process_timestamp(value, current_datetime=None):
         try:
             value = datetime.fromtimestamp(float(value))
         except Exception:
-            raise InvalidTimestamp(
-                'Invalid value for timestamp: %r' % value)
+            raise InvalidTimestamp(EventError.INVALID_DATA)
     elif not isinstance(value, datetime):
         # all timestamps are in UTC, but the marker is optional
         if value.endswith('Z'):
@@ -217,19 +216,16 @@ def process_timestamp(value, current_datetime=None):
         try:
             value = datetime.strptime(value, fmt)
         except Exception:
-            raise InvalidTimestamp(
-                'Invalid value for timestamp: %r' % value)
+            raise InvalidTimestamp(EventError.INVALID_DATA)
 
     if current_datetime is None:
         current_datetime = datetime.now()
 
     if value > current_datetime + timedelta(minutes=1):
-        raise InvalidTimestamp(
-            'Invalid value for timestamp (in future): %r' % value)
+        raise InvalidTimestamp(EventError.FUTURE_TIMESTAMP)
 
     if value < current_datetime - timedelta(days=30):
-        raise InvalidTimestamp(
-            'Invalid value for timestamp (too old): %r' % value)
+        raise InvalidTimestamp(EventError.PAST_TIMESTAMP)
 
     return float(value.strftime('%s'))
 
@@ -350,6 +346,9 @@ class EventManager(object):
             if c in data:
                 try:
                     data[c] = casts[c](data[c])
+                except InvalidTimestamp as it:
+                    errors.append({'type': it.args[0], 'name': c, 'value': data[c]})
+                    del data[c]
                 except Exception as e:
                     errors.append({'type': EventError.INVALID_DATA, 'name': c, 'value': data[c]})
                     del data[c]
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 6450c64b71..1b54ab2c87 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -26,6 +26,8 @@ class EventError(object):
     UNKNOWN_ERROR = 'unknown_error'
     SECURITY_VIOLATION = 'security_violation'
     RESTRICTED_IP = 'restricted_ip'
+    FUTURE_TIMESTAMP = 'future_timestamp'
+    PAST_TIMESTAMP = 'past_timestamp'
 
     JS_GENERIC_FETCH_ERROR = 'js_generic_fetch_error'  # deprecated in favor of FETCH_GENERIC_ERROR
     FETCH_GENERIC_ERROR = 'fetch_generic_error'
@@ -63,6 +65,8 @@ class EventError(object):
         UNKNOWN_ERROR: u'Unknown error',
         SECURITY_VIOLATION: u'Cannot fetch resource due to security violation on {url}',
         RESTRICTED_IP: u'Cannot fetch resource due to restricted IP address on {url}',
+        FUTURE_TIMESTAMP: u'Invalid timestamp (in future)',
+        PAST_TIMESTAMP: u'Invalid timestamp (too old)',
         # deprecated in favor of FETCH_GENERIC_ERROR
         JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource: {url}',
         FETCH_GENERIC_ERROR: u'Unable to fetch resource: {url}',
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 89f5751272..a7f6e32f96 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -2,6 +2,8 @@
 
 from __future__ import absolute_import
 
+from datetime import datetime, timedelta
+from functools import partial
 import six
 import mock
 import pytest
@@ -125,6 +127,40 @@ class ProjectIdFromAuthTest(BaseAPITest):
 
 
 class ValidateDataTest(BaseAPITest):
+    def test_timestamp(self):
+        from sentry.event_manager import process_timestamp
+        patched = partial(process_timestamp, current_datetime=datetime(2018, 4, 10, 14, 33, 18))
+        with mock.patch('sentry.event_manager.process_timestamp', patched):
+            data = self.validate_and_normalize({
+                'timestamp': '2018-04-10T14:33:18Z',
+            })
+            assert len(data['errors']) == 0
+
+        data = self.validate_and_normalize({
+            'timestamp': 'not-a-timestamp',
+        })
+        assert len(data['errors']) == 1
+
+        now = datetime.utcnow()
+        data = self.validate_and_normalize({
+            'timestamp': now.strftime('%Y-%m-%dT%H:%M:%SZ'),
+        })
+        assert len(data['errors']) == 0
+
+        future = now + timedelta(minutes=2)
+        data = self.validate_and_normalize({
+            'timestamp': future.strftime('%Y-%m-%dT%H:%M:%SZ'),
+        })
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'future_timestamp'
+
+        past = now - timedelta(days=31)
+        data = self.validate_and_normalize({
+            'timestamp': past.strftime('%Y-%m-%dT%H:%M:%SZ'),
+        })
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'past_timestamp'
+
     @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
     def test_empty_event_id(self, uuid4):
         data = self.validate_and_normalize({
