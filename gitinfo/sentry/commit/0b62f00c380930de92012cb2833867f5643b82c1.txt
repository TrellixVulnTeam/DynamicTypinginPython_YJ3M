commit 0b62f00c380930de92012cb2833867f5643b82c1
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 16 11:14:12 2015 -0700

    Improve auth invalidation behavior

diff --git a/src/sentry/tasks/check_auth.py b/src/sentry/tasks/check_auth.py
index d6a46b792f..1b5dbdebc6 100644
--- a/src/sentry/tasks/check_auth.py
+++ b/src/sentry/tasks/check_auth.py
@@ -57,50 +57,56 @@ def check_auth_identity(auth_identity_id, **kwargs):
         return
 
     auth_provider = auth_identity.auth_provider
-    provider = auth_provider.get_provider()
+
     try:
-        provider.refresh_identity(auth_identity)
-    except IdentityNotValid as exc:
+        om = OrganizationMember.objects.get(
+            user=auth_identity.user,
+            organization=auth_provider.organization_id,
+        )
+    except OrganizationMember.DoesNotExist:
         logger.warning(
-            u'AuthIdentity(id=%s) notified as not valid: %s',
+            'Removing invalid AuthIdentity(id=%s) due to no organization access',
             auth_identity_id,
-            unicode(exc),
-            exc_info=True,
         )
-        metrics.incr('auth.identities.invalidated', 1)
+        auth_identity.delete()
+        return
+
+    prev_is_valid = not getattr(om.flags, 'sso:invalid')
+
+    provider = auth_provider.get_provider()
+    try:
+        provider.refresh_identity(auth_identity)
+    except IdentityNotValid as exc:
+        if prev_is_valid:
+            logger.warning(
+                u'AuthIdentity(id=%s) notified as not valid: %s',
+                auth_identity_id,
+                unicode(exc),
+                exc_info=True,
+            )
+            metrics.incr('auth.identities.invalidated', 1)
         is_linked = False
         is_valid = False
     except Exception as exc:
         # to ensure security we count any kind of error as an invalidation
         # event
-        metrics.incr('auth.identities.refresh_error', 1)
-        logger.exception(
-            u'AuthIdentity(id=%s) returned an error during validation: %s',
-            auth_identity_id,
-            unicode(exc),
-        )
+        if prev_is_valid:
+            metrics.incr('auth.identities.refresh_error', 1)
+            logger.exception(
+                u'AuthIdentity(id=%s) returned an error during validation: %s',
+                auth_identity_id,
+                unicode(exc),
+            )
         is_linked = True
         is_valid = False
     else:
         is_linked = True
         is_valid = True
 
-    try:
-        om = OrganizationMember.objects.get(
-            user=auth_identity.user,
-            organization=auth_provider.organization_id,
-        )
-    except OrganizationMember.DoesNotExist:
-        logger.warning(
-            'Removing invalid AuthIdentity(id=%s) due to no organization access',
-            auth_identity_id,
-        )
-        auth_identity.delete()
-        return
-
-    setattr(om.flags, 'sso:linked', is_linked)
-    setattr(om.flags, 'sso:invalid', not is_valid)
-    om.update(flags=om.flags)
+    if getattr(om.flags, 'sso:linked') != is_linked:
+        setattr(om.flags, 'sso:linked', is_linked)
+        setattr(om.flags, 'sso:invalid', not is_valid)
+        om.update(flags=om.flags)
 
     now = timezone.now()
     auth_identity.update(
