commit e0419d50c7a1e79383e63c61899efc3d2325b0c0
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Apr 7 22:01:17 2013 -0700

    More various fixes and cleanup of rendering

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index bc562239e0..02de4103d5 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -381,10 +381,6 @@ def validate_data(project, data, client=None):
             data['level'] = settings.LOG_LEVEL_REVERSE_MAP.get(settings.DEFAULT_LOG_LEVEL,
                 settings.DEFAULT_LOG_LEVEL)
 
-    # convert stacktrace + exception into expanded exception
-    if 'sentry.interfaces.Exception' in data and 'sentry.interfaces.Stacktrace' in data:
-        data['sentry.interfaces.Exception'][0]['stacktrace'] = data.pop('sentry.interfaces.Stacktrace')
-
     return data
 
 
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 641a3c1249..aed5eab10c 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -634,7 +634,7 @@ class SingleException(Interface):
         # Optional module of the exception type (e.g. __builtin__)
         self.module = module
         # Optional bound stacktrace interface
-        self.stacktrace = stacktrace
+        self.stacktrace = Stacktrace(**stacktrace)
 
     def serialize(self):
         if self.stacktrace:
@@ -665,12 +665,18 @@ class SingleException(Interface):
         if interface is not None and interface.frames:
             last_frame = interface.frames[-1]
 
+        if self.module:
+            fullname = '%s.%s' % (self.module, self.type)
+        else:
+            fullname = self.type
+
         return {
             'is_public': is_public,
             'event': event,
             'exception_value': self.value,
             'exception_type': self.type,
             'exception_module': self.module,
+            'fullname': fullname,
             'last_frame': last_frame
         }
 
@@ -685,7 +691,9 @@ class Exception(Interface):
     score = 2000
 
     def __init__(self, *args, **kwargs):
-        if not kwargs and len(args) == 1 and isinstance(args[0], (list, tuple)):
+        if 'values' in kwargs:
+            values = kwargs['values']
+        elif not kwargs and len(args) == 1 and isinstance(args[0], (list, tuple)):
             values = args
         else:
             values = [kwargs]
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 9bed2b6dcc..1e8ff655a1 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -417,6 +417,14 @@ class GroupManager(BaseManager, ChartMixin):
         data.setdefault('checksum', None)
         data.setdefault('platform', None)
 
+        if 'sentry.interfaces.Exception' in data:
+            if 'values' not in data['sentry.interfaces.Exception']:
+                data['sentry.interfaces.Exception'] = {'values': [data['sentry.interfaces.Exception']]}
+
+            # convert stacktrace + exception into expanded exception
+            if 'sentry.interfaces.Stacktrace' in data:
+                data['sentry.interfaces.Exception']['values'][0]['stacktrace'] = data.pop('sentry.interfaces.Stacktrace')
+
         return data
 
     def from_kwargs(self, project, **kwargs):
diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index bc823806cb..012672d35d 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -1237,13 +1237,24 @@ div.commands {
   }
 }
 
-
 ul.traceback {
   list-style-type: none;
   margin-left: 0;
   margin-bottom: 0;
 }
 
+.module-traceback h3 {
+  margin-top: 0;
+}
+.module-traceback p {
+  color: #666;
+  font-size: 0.9em;
+  margin-left: 15px;
+}
+.module-traceback .traceback {
+  margin-top: 10px;
+}
+
 .frame {
   overflow: hidden;
   position: relative;
diff --git a/src/sentry/static/sentry/styles/global.min.css b/src/sentry/static/sentry/styles/global.min.css
index 1809a42fd6..eaff1d67fa 100644
--- a/src/sentry/static/sentry/styles/global.min.css
+++ b/src/sentry/static/sentry/styles/global.min.css
@@ -7468,6 +7468,17 @@ ul.traceback {
   margin-left: 0;
   margin-bottom: 0;
 }
+.module-traceback h3 {
+  margin-top: 0;
+}
+.module-traceback p {
+  color: #666;
+  font-size: 0.9em;
+  margin-left: 15px;
+}
+.module-traceback .traceback {
+  margin-top: 10px;
+}
 .frame {
   overflow: hidden;
   position: relative;
diff --git a/src/sentry/static/sentry/styles/sentry.css b/src/sentry/static/sentry/styles/sentry.css
index 1809a42fd6..eaff1d67fa 100644
--- a/src/sentry/static/sentry/styles/sentry.css
+++ b/src/sentry/static/sentry/styles/sentry.css
@@ -7468,6 +7468,17 @@ ul.traceback {
   margin-left: 0;
   margin-bottom: 0;
 }
+.module-traceback h3 {
+  margin-top: 0;
+}
+.module-traceback p {
+  color: #666;
+  font-size: 0.9em;
+  margin-left: 15px;
+}
+.module-traceback .traceback {
+  margin-top: 10px;
+}
 .frame {
   overflow: hidden;
   position: relative;
diff --git a/src/sentry/templates/sentry/partial/interfaces/chained_exception.html b/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
index 8a723d52bd..a4de765634 100644
--- a/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
+++ b/src/sentry/templates/sentry/partial/interfaces/chained_exception.html
@@ -20,10 +20,15 @@
             {% endif %}</small>
         </h2>
     </div>
-    <div class="module-content">
+    <div class="module-content module-traceback">
         {% for exception in exceptions %}
             {% if not forloop.first %}
-                <h3>Caused by {{ exception.fullname }}</h3>
+                <h3>Caused by <span title="{{ exception.fullname }}">{{ exception.exception_type }}</span></h3>
+            {% else %}
+                <h3><span title="{{ exception.fullname }}">{{ exception.exception_type }}</span></h3>
+            {% endif %}
+            {% if exception.exception_value %}
+                <p>{{ exception.exception_value }}</p>
             {% endif %}
             {% with exception.stacktrace.frames as frames %}
                 {% include "sentry/partial/interfaces/stacktrace_inner.html" %}
@@ -32,12 +37,12 @@
     </div>
 </div>
 
-{% block comment %}
+{% comment %}
 TODO:
 <div id="raw_stacktrace" style="display: none;">
     <pre>{{ stacktrace }}</pre>
 </div>
-{% endblock %}
+{% endcomment %}
 
 {% if system_frames %}
     <script type="text/javascript">
