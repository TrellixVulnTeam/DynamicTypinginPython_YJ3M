commit e2d8e1fa84da6b131e9ee2256f351f8ba8cd3a46
Author: Mark Story <mark@sentry.io>
Date:   Tue Apr 28 13:57:11 2020 -0400

    ref(ts) Convert actionCreator/tags to typescript (#18503)
    
    I had to rejig a few types in globalSelectionHeader because the
    getParams() function was unable to accept a GlobalSelection header value
    which is used in a few places.

diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/actionCreators/tags.jsx
rename to src/sentry/static/sentry/app/actionCreators/tags.tsx
index b7dbe1696d..02b9ec5bed 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.tsx
@@ -1,4 +1,8 @@
+import {Query} from 'history';
+
 import {t} from 'app/locale';
+import {Client} from 'app/api';
+import {Tag, GlobalSelection} from 'app/types';
 import TagStore from 'app/stores/tagStore';
 import TagActions from 'app/actions/tagActions';
 import AlertActions from 'app/actions/alertActions';
@@ -47,9 +51,10 @@ const BUILTIN_TAGS = [
   'stack.stack_level',
 ].map(tag => ({
   key: tag,
+  name: tag,
 }));
 
-function tagFetchSuccess(tags) {
+function tagFetchSuccess(tags: Tag[]) {
   const trimmedTags = tags.slice(0, MAX_TAGS);
 
   if (tags.length > MAX_TAGS) {
@@ -63,27 +68,27 @@ function tagFetchSuccess(tags) {
 
 /**
  * Load an organization's tags based on a global selection value.
- *
- * @param {Client} api
- * @param {String} orgId
- * @param {GlobalSelection} selection
  */
-export function loadOrganizationTags(api, orgId, selection) {
+export function loadOrganizationTags(
+  api: Client,
+  orgId: string,
+  selection: GlobalSelection
+) {
   TagStore.reset();
 
   const url = `/organizations/${orgId}/tags/`;
-  const query = selection.datetime ? {...getParams(selection.datetime)} : {};
+  const query: Query = selection.datetime ? {...getParams(selection.datetime)} : {};
   query.use_cache = '1';
 
   if (selection.projects) {
-    query.project = selection.projects;
+    query.project = selection.projects.map(String);
   }
   const promise = api
     .requestPromise(url, {
       method: 'GET',
       query,
     })
-    .then(tags => [...BUILTIN_TAGS, ...tags]);
+    .then((tags: Tag[]) => [...BUILTIN_TAGS, ...tags]);
 
   promise.then(
     results => {
@@ -100,12 +105,16 @@ export function loadOrganizationTags(api, orgId, selection) {
 /**
  * Fetch tags for an organization or a subset or projects.
  */
-export function fetchOrganizationTags(api, orgId, projectIds = null) {
+export function fetchOrganizationTags(
+  api: Client,
+  orgId: string,
+  projectIds: string[] | null = null
+) {
   TagStore.reset();
   TagActions.loadTags();
 
   const url = `/organizations/${orgId}/tags/`;
-  const query = {use_cache: 1};
+  const query: Query = {use_cache: '1'};
   if (projectIds) {
     query.project = projectIds;
   }
@@ -126,16 +135,16 @@ export function fetchOrganizationTags(api, orgId, projectIds = null) {
  * The `projectIds` argument can be used to subset projects.
  */
 export function fetchTagValues(
-  api,
-  orgId,
-  tagKey,
-  search = null,
-  projectIds = null,
-  endpointParams = null
+  api: Client,
+  orgId: string,
+  tagKey: string,
+  search: string | null = null,
+  projectIds: string[] | null = null,
+  endpointParams: Query | null = null
 ) {
   const url = `/organizations/${orgId}/tags/${tagKey}/values/`;
 
-  const query = {};
+  const query: Query = {};
   if (search) {
     query.query = search;
   }
diff --git a/src/sentry/static/sentry/app/components/charts/utils.tsx b/src/sentry/static/sentry/app/components/charts/utils.tsx
index 6bbd734528..a7bcec29c6 100644
--- a/src/sentry/static/sentry/app/components/charts/utils.tsx
+++ b/src/sentry/static/sentry/app/components/charts/utils.tsx
@@ -1,5 +1,6 @@
 import moment from 'moment';
 
+import {GlobalSelection} from 'app/types';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {parsePeriodToHours} from 'app/utils/dates';
 import {escape} from 'app/utils';
@@ -20,11 +21,7 @@ export const AREA_COLORS = [
   {line: '#422C6F', area: '#422C6F'},
 ];
 
-export type DateTimeObject = {
-  start: Date | null;
-  end: Date | null;
-  period?: string;
-};
+export type DateTimeObject = Partial<GlobalSelection['datetime']>;
 
 export function truncationFormatter(value: string, truncate: number): string {
   if (!truncate) {
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
index c7d5201ada..7fd7a8b5fc 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
@@ -66,7 +66,7 @@ function getStatsPeriodValue(
 // This format was transformed to the form that moment.js understands using
 // https://gist.github.com/asafge/0b13c5066d06ae9a4446
 const normalizeDateTimeString = (
-  input: string | undefined | null
+  input: Date | string | undefined | null
 ): string | undefined => {
   if (!input) {
     return undefined;
@@ -82,7 +82,7 @@ const normalizeDateTimeString = (
 };
 
 const getDateTimeString = (
-  maybe: string | string[] | undefined | null
+  maybe: Date | string | string[] | undefined | null
 ): string | undefined => {
   if (Array.isArray(maybe)) {
     if (maybe.length <= 0) {
@@ -104,7 +104,9 @@ const parseUtcValue = (utc: any) => {
   return undefined;
 };
 
-const getUtcValue = (maybe: string | string[] | undefined | null): string | undefined => {
+const getUtcValue = (
+  maybe: string | string[] | boolean | undefined | null
+): string | undefined => {
   if (Array.isArray(maybe)) {
     if (maybe.length <= 0) {
       return undefined;
@@ -113,32 +115,32 @@ const getUtcValue = (maybe: string | string[] | undefined | null): string | unde
     return maybe.find(needle => !!parseUtcValue(needle));
   }
 
-  maybe = parseUtcValue(maybe);
+  return parseUtcValue(maybe);
+};
 
-  if (typeof maybe === 'string') {
-    return maybe;
-  }
+type ParamValue = string | string[] | undefined | null;
 
-  return undefined;
+type ParsedParams = {
+  start?: string;
+  end?: string;
+  period?: string;
+  utc?: string;
+  [others: string]: string | null | undefined;
 };
 
-type ParamValue = string | string[] | undefined | null;
-type Params = {
-  start?: ParamValue;
-  end?: ParamValue;
+type InputParams = {
+  start?: Date | ParamValue;
+  end?: Date | ParamValue;
   period?: ParamValue;
   statsPeriod?: ParamValue;
-  utc?: ParamValue;
+  utc?: boolean | ParamValue;
+  [others: string]: any;
 };
-type RestParams = {[others: string]: ParamValue};
 
 export function getParams(
-  params: Params & RestParams,
+  params: InputParams,
   {allowEmptyPeriod = false}: {allowEmptyPeriod?: boolean} = {}
-): {
-  [K in keyof Params]: Exclude<NonNullable<Params[K]>, string[]>;
-} &
-  RestParams {
+): ParsedParams {
   const {start, end, period, statsPeriod, utc, ...otherParams} = params;
 
   // `statsPeriod` takes precendence for now
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 56f474055b..5263c33103 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -449,8 +449,8 @@ export type GlobalSelection = {
   projects: number[];
   environments: string[];
   datetime: {
-    start: Date | null;
-    end: Date | null;
+    start: Date | string | null;
+    end: Date | string | null;
     period: string;
     utc: boolean;
   };
