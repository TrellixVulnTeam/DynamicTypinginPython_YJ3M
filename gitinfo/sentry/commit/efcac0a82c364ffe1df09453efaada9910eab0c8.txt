commit efcac0a82c364ffe1df09453efaada9910eab0c8
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed May 23 14:38:44 2018 -0700

    feat(integrations): Add IntegrationRepositoryProvider and Bindings (#8526)
    
    * feat(integrations): Add IntegrationRepositoryProvider and bindings
    
    * internal-catchall
    
    * fix naming typo
    
    * handle no gh-apps integrations for repos
    
    * use self.model

diff --git a/src/sentry/api/endpoints/organization_config_repositories.py b/src/sentry/api/endpoints/organization_config_repositories.py
index 5322d0f2a1..bce314e1b5 100644
--- a/src/sentry/api/endpoints/organization_config_repositories.py
+++ b/src/sentry/api/endpoints/organization_config_repositories.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry import features
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.plugins import bindings
 
@@ -10,6 +11,7 @@ class OrganizationConfigRepositoriesEndpoint(OrganizationEndpoint):
 
     def get(self, request, organization):
         provider_bindings = bindings.get('repository.provider')
+        integrations_provider_bindings = bindings.get('integration-repository.provider')
 
         providers = []
         for provider_id in provider_bindings:
@@ -24,6 +26,17 @@ class OrganizationConfigRepositoriesEndpoint(OrganizationEndpoint):
                     }
                 )
 
+        if features.has('organizations:internal-catchall', organization, actor=request.user):
+            for provider_id in integrations_provider_bindings:
+                provider = integrations_provider_bindings.get(provider_id)(id=provider_id)
+                providers.append(
+                    {
+                        'id': provider_id,
+                        'name': provider.name,
+                        'config': provider.get_config(organization),
+                    }
+                )
+
         return Response({
             'providers': providers,
         })
diff --git a/src/sentry/api/endpoints/organization_repositories.py b/src/sentry/api/endpoints/organization_repositories.py
index f66c153ac5..6af45700d5 100644
--- a/src/sentry/api/endpoints/organization_repositories.py
+++ b/src/sentry/api/endpoints/organization_repositories.py
@@ -73,6 +73,20 @@ class OrganizationRepositoriesEndpoint(OrganizationEndpoint):
             }, status=403)
 
         provider_id = request.DATA.get('provider')
+
+        if features.has('organizations:internal-catchall', organization, actor=request.user):
+            if provider_id is not None and provider_id.startswith('integrations:'):
+                try:
+                    provider_cls = bindings.get('integration-repository.provider').get(provider_id)
+                except KeyError:
+                    return Response(
+                        {
+                            'error_type': 'validation',
+                        }, status=400
+                    )
+                provider = provider_cls(id=provider_id)
+                return provider.dispatch(request, organization)
+
         try:
             provider_cls = bindings.get('repository.provider').get(provider_id)
         except KeyError:
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index e6b0edc2dd..1af6ef7fa7 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -5,10 +5,12 @@ from django.utils.translation import ugettext_lazy as _
 from sentry import http, options
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.identity.github import get_user_info
-from sentry.integrations import IntegrationProvider, IntegrationMetadata
+from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
 from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.utils.http import absolute_uri
 
+from .client import GitHubAppsClient
+from .repository import GitHubRepositoryProvider
 from .utils import get_jwt
 
 
@@ -27,10 +29,17 @@ metadata = IntegrationMetadata(
 )
 
 
+class GitHubIntegration(Integration):
+
+    def get_client(self):
+        return GitHubAppsClient(external_id=self.model.external_id)
+
+
 class GitHubIntegrationProvider(IntegrationProvider):
     key = 'github'
     name = 'GitHub'
     metadata = metadata
+    integration_cls = GitHubIntegration
 
     setup_dialog_config = {
         'width': 1030,
@@ -104,6 +113,14 @@ class GitHubIntegrationProvider(IntegrationProvider):
             },
         }
 
+    def setup(self):
+        from sentry.plugins import bindings
+        bindings.add(
+            'integration-repository.provider',
+            GitHubRepositoryProvider,
+            id='integrations:github',
+        )
+
 
 class GitHubInstallationRedirect(PipelineView):
     def get_app_url(self):
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
new file mode 100644
index 0000000000..d81e84cde8
--- /dev/null
+++ b/src/sentry/integrations/github/repository.py
@@ -0,0 +1,114 @@
+from __future__ import absolute_import
+
+import logging
+import six
+
+from sentry.models import Integration
+from sentry.plugins import providers
+
+WEBHOOK_EVENTS = ['push', 'pull_request']
+
+
+class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
+    name = 'GitHub Apps'
+    logger = logging.getLogger('sentry.plugins.github')
+
+    def get_config(self, organization):
+        choices = []
+        for i in Integration.objects.filter(organizations=organization, provider='github'):
+            choices.append((i.id, i.name))
+
+        if not choices:
+            choices = [('', '')]
+
+        return [
+            {
+                'name': 'installation',
+                'label': 'Github Installation',
+                'type': 'choice',
+                'choices': choices,
+                'initial': choices[0][0],
+                'help': 'Select which GitHub installation to authenticate with.',
+                'required': True,
+            },
+            {
+                'name': 'name',
+                'label': 'Repository Name',
+                'type': 'text',
+                'placeholder': 'e.g. getsentry/sentry',
+                'help': 'Enter your repository name, including the owner.',
+                'required': True,
+            }
+        ]
+
+    def validate_config(self, organization, config, actor=None):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        if config.get('name') and config.get('installation'):
+            # this doesn't work yet, need github client
+            integration = Integration.objects.get(
+                id=config['installation'], organizations=organization)
+            installation = integration.get_installation()
+            client = installation.get_client()
+            try:
+                repo = client.get_repo(config['name'])
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                config['external_id'] = six.text_type(repo['id'])
+                config['integration_id'] = six.text_type(integration.id)
+
+        return config
+
+    def create_repository(self, organization, data, actor=None):
+        return {
+            'name': data['name'],
+            'external_id': data['external_id'],
+            'url': 'https://github.com/{}'.format(data['name']),
+            'config': {
+                'name': data['name'],
+            },
+            'integration_id': data['integration_id']
+        }
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        if actor is None:
+            raise NotImplementedError('Cannot fetch commits anonymously')
+        client = self.get_client(actor)
+
+        # use config name because that is kept in sync via webhooks
+        name = repo.config['name']
+        if start_sha is None:
+            try:
+                res = client.get_last_commits(name, end_sha)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res[:10])
+        else:
+            try:
+                res = client.compare_commits(name, start_sha, end_sha)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res['commits'])
+
+        def get_pr_commits(self, repo, number, actor=None):
+            # (not currently used by sentry)
+            if actor is None:
+                raise NotImplementedError('Cannot fetch commits anonymously')
+            client = self.get_client(actor)
+
+            # use config name because that is kept in sync via webhooks
+            name = repo.config['name']
+            try:
+                res = client.get_pr_commits(name, number)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res)
diff --git a/src/sentry/models/repository.py b/src/sentry/models/repository.py
index 0fc5656288..bdfbdcdd45 100644
--- a/src/sentry/models/repository.py
+++ b/src/sentry/models/repository.py
@@ -37,6 +37,10 @@ class Repository(Model):
 
     def get_provider(self):
         from sentry.plugins import bindings
+        if self.provider.startswith('integrations:'):
+            provider_cls = bindings.get('integration-repository.provider').get(self.provider)
+            return provider_cls(self.provider)
+
         provider_cls = bindings.get('repository.provider').get(self.provider)
         return provider_cls(self.provider)
 
diff --git a/src/sentry/plugins/base/bindings.py b/src/sentry/plugins/base/bindings.py
index 412b018cb7..8ba6d64e8f 100644
--- a/src/sentry/plugins/base/bindings.py
+++ b/src/sentry/plugins/base/bindings.py
@@ -33,9 +33,14 @@ class RepositoryProviderManager(ProviderManager):
     type = providers.RepositoryProvider
 
 
+class IntegrationRepositoryProviderManager(ProviderManager):
+    type = providers.IntegrationRepositoryProvider
+
+
 class BindingManager(object):
     BINDINGS = {
         'repository.provider': RepositoryProviderManager,
+        'integration-repository.provider': IntegrationRepositoryProviderManager
     }
 
     def __init__(self):
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
new file mode 100644
index 0000000000..6e50f89e4f
--- /dev/null
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -0,0 +1,106 @@
+from __future__ import absolute_import
+
+from django.db import IntegrityError, transaction
+from rest_framework.response import Response
+
+from sentry.api.serializers import serialize
+from sentry.exceptions import PluginError
+from sentry.models import Repository
+from sentry.plugins.config import ConfigValidator
+
+from .base import ProviderMixin
+
+
+class IntegrationRepositoryProvider(ProviderMixin):
+    name = None
+
+    def __init__(self, id):
+        self.id = id
+
+    def dispatch(self, request, organization, **kwargs):
+        try:
+            fields = self.get_config(organization)
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        if request.method == 'GET':
+            return Response(fields)
+
+        validator = ConfigValidator(fields, request.DATA)
+        if not validator.is_valid():
+            return Response(
+                {
+                    'error_type': 'validation',
+                    'errors': validator.errors,
+                }, status=400
+            )
+
+        try:
+            config = self.validate_config(organization, validator.result, actor=request.user)
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        try:
+            result = self.create_repository(
+                organization=organization,
+                data=config,
+                actor=request.user,
+            )
+        except PluginError as e:
+            return Response(
+                {
+                    'errors': {
+                        '__all__': e.message
+                    },
+                }, status=400
+            )
+
+        try:
+            with transaction.atomic():
+                repo = Repository.objects.create(
+                    organization_id=organization.id,
+                    name=result['name'],
+                    external_id=result.get('external_id'),
+                    url=result.get('url'),
+                    config=result.get('config') or {},
+                    provider=self.id,
+                )
+        except IntegrityError:
+            # Try to delete webhook we just created
+            try:
+                repo = Repository(
+                    organization_id=organization.id,
+                    name=result['name'],
+                    external_id=result.get('external_id'),
+                    url=result.get('url'),
+                    config=result.get('config') or {},
+                    provider=self.id,
+                )
+                self.delete_repository(repo, actor=request.user)
+            except PluginError:
+                pass
+            return Response(
+                {'errors': {'__all__': 'A repository with that name already exists'}},
+                status=400,
+            )
+
+        return Response(serialize(repo, request.user), status=201)
+
+    def get_config(self, organization):
+        raise NotImplementedError
+
+    def validate_config(self, organization, config, actor=None):
+        return config
+
+    def create_repository(self, organization, data, actor=None):
+        raise NotImplementedError
+
+    def delete_repository(self, repo, actor=None):
+        pass
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        raise NotImplementedError
+
+    @staticmethod
+    def should_ignore_commit(message):
+        return '#skipsentry' in message
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 5e7c6c8563..1feaea5c5f 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -55,6 +55,12 @@ def register_plugins(settings):
         else:
             integrations.register(integration_cls)
 
+    for integration in integrations.all():
+        try:
+            integration.setup()
+        except AttributeError:
+            pass
+
 
 def init_plugin(plugin):
     from sentry.plugins import bindings
diff --git a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
index 0d240e2195..a4099ff31a 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationRepositories/addRepositoryLink.jsx
@@ -32,10 +32,18 @@ class AddRepositoryLink extends PluginComponentBase {
   }
 
   getDefaultState() {
+    let formData = {};
+    // makes sure default choice field is saved
+    // if a user doesn't choose a different option
+    this.props.provider.config.forEach(field => {
+      if (field.initial) {
+        formData[field.name] = field.initial;
+      }
+    });
     return {
       isModalOpen: false,
       error: {},
-      formData: {},
+      formData,
     };
   }
 
