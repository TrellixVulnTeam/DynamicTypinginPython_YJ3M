commit 6424388d79c9d171f96606dd9f314e484fc52724
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Jan 27 10:43:28 2020 -0800

    feat(integrations): finishing touches for integration analytics (#16628)

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index de16b8f298..cadaf4dd79 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -25,13 +25,15 @@ export type IntegrationDetailsModalOptions = {
   provider: IntegrationProvider;
   organization: Organization;
   isInstalled: boolean; //used for analytics
+  onCloseModal?: () => void; //used for analytics
 };
 
 export type SentryAppDetailsModalOptions = {
   sentryApp: SentryApp;
   isInstalled: boolean;
-  onInstall: () => void;
+  onInstall: () => Promise<void>;
   organization: Organization;
+  onCloseModal?: () => void; //used for analytics
 };
 
 export type TeamAccessRequestModalOptions = {
diff --git a/src/sentry/static/sentry/app/components/confirm.tsx b/src/sentry/static/sentry/app/components/confirm.tsx
index 3042736447..bb2be0ad8c 100644
--- a/src/sentry/static/sentry/app/components/confirm.tsx
+++ b/src/sentry/static/sentry/app/components/confirm.tsx
@@ -80,6 +80,7 @@ type Props = {
 
   /**
    * Callback function when user is in the confirming state
+   * called when the confirm modal is opened
    */
   onConfirming?: () => void;
 
diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
index 7c30644ce5..8b534c9589 100644
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
@@ -54,6 +54,7 @@ class IntegrationDetailsModal extends React.Component<Props> {
     onAddIntegration: PropTypes.func.isRequired,
     provider: PropTypes.object.isRequired,
     organization: SentryTypes.Organization.isRequired,
+    onCloseModal: PropTypes.func,
   };
 
   componentDidMount() {
@@ -70,6 +71,10 @@ class IntegrationDetailsModal extends React.Component<Props> {
     );
   }
 
+  componentWillUnmount() {
+    this.props.onCloseModal?.();
+  }
+
   onAddIntegration = (integration: Integration) => {
     this.props.closeModal();
     this.props.onAddIntegration(integration);
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
index 27b12e0e7d..61e4f54799 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
@@ -57,6 +57,7 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
     onInstall: PropTypes.func.isRequired,
     isInstalled: PropTypes.bool.isRequired,
     closeModal: PropTypes.func.isRequired,
+    onCloseModal: PropTypes.func,
     view: PropTypes.string.isRequired,
   };
 
@@ -75,6 +76,10 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
     this.trackOpened();
   }
 
+  componentWillUnmount() {
+    this.props.onCloseModal?.();
+  }
+
   trackOpened() {
     const {sentryApp, organization, isInstalled, view} = this.props;
     recordInteraction(sentryApp.slug, 'sentry_app_viewed');
@@ -110,9 +115,15 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
     return toPermissions(this.props.sentryApp.scopes);
   }
 
-  onInstall() {
+  async onInstall() {
     const {onInstall, closeModal, view} = this.props;
-    onInstall();
+    //we want to make sure install finishes before we close the modal
+    //and we should close the modal if there is an error as well
+    try {
+      await onInstall();
+    } catch (_err) {
+      /* stylelint-disable-next-line no-empty-block */
+    }
     // let onInstall handle redirection post install on the external install flow
     view !== 'external_install' && closeModal();
   }
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 2f7e2d37ff..09234d5a2a 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -3,7 +3,7 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {Organization} from 'app/types';
 import {Hooks} from 'app/types/hooks';
 
-const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'integrationsAnalyticsSession';
+const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'INTEGRATION_ANALYTICS_SESSION';
 const USE_INTEGRATION_DIRECTORY = 'USE_INTEGRATION_DIRECTORY';
 
 export const startAnalyticsSession = () => {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
index 97b27965bc..7d4685ce52 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
@@ -70,6 +70,10 @@ class OrganizationIntegrations extends AsyncComponent<
   };
 
   onLoadAllEndpointsSuccess() {
+    this.recordIndexPageViewed();
+  }
+
+  recordIndexPageViewed = () => {
     //count the number of installed apps
     const {integrations, publishedApps} = this.state;
     const integrationsInstalled = new Set();
@@ -91,7 +95,7 @@ class OrganizationIntegrations extends AsyncComponent<
       this.props.organization,
       {startSession: true}
     );
-  }
+  };
 
   getEndpoints(): ([string, string, any] | [string, string])[] {
     const {orgId} = this.props.params;
@@ -246,6 +250,7 @@ class OrganizationIntegrations extends AsyncComponent<
         onReinstall={this.onInstall}
         enabledPlugins={this.enabledPlugins}
         newlyInstalledIntegrationId={this.state.newlyInstalledIntegrationId}
+        onCloseModal={this.recordIndexPageViewed}
       />
     );
   };
@@ -277,6 +282,7 @@ class OrganizationIntegrations extends AsyncComponent<
         install={this.getAppInstall(app)}
         onAppUninstall={() => this.handleRemoveAppInstallation(app)}
         onAppInstall={this.handleAppInstallation}
+        onCloseModal={this.recordIndexPageViewed}
         app={app}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
index 85af39b599..75446b83ad 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
@@ -26,6 +26,7 @@ type Props = {
   onRemove: (integration: Integration) => void;
   onDisable: (integration: Integration) => void;
   onReinstall: (integration: Integration) => void;
+  onCloseModal?: () => void;
   enabledPlugins: string[];
   newlyInstalledIntegrationId: string;
   integrations: Integration[];
@@ -46,6 +47,7 @@ export default class ProviderRow extends React.Component<Props> {
     onReinstall: PropTypes.func.isRequired,
     enabledPlugins: PropTypes.array,
     newlyInstalledIntegrationId: PropTypes.string,
+    onCloseModal: PropTypes.func,
   };
 
   static defaultProps = {
@@ -81,6 +83,7 @@ export default class ProviderRow extends React.Component<Props> {
       organization,
       onAddIntegration,
       isInstalled: this.isEnabled,
+      onCloseModal: this.props.onCloseModal,
     });
   };
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
index bf4a9aa87f..b3c3d8640a 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
@@ -23,6 +23,7 @@ type Props = {
   app: SentryApp;
   onAppUninstall: () => void;
   onAppInstall: (install: SentryAppInstallation) => void;
+  onCloseModal?: () => void; //used for analytics
 };
 
 class SentryAppInstallationDetail extends React.Component<Props> {
@@ -33,38 +34,11 @@ class SentryAppInstallationDetail extends React.Component<Props> {
     app: PropTypes.object.isRequired,
     onAppUninstall: PropTypes.func.isRequired,
     onAppInstall: PropTypes.func.isRequired,
+    onCloseModal: PropTypes.func,
   };
 
   redirectUser = (install: SentryAppInstallation) => {
     const {organization, app} = this.props;
-
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.installation_start',
-        eventName: 'Integrations: Installation Start',
-        integration_type: 'sentry_app',
-        integration: app.slug,
-        view: 'integrations_page',
-        integration_status: app.status,
-      },
-      this.props.organization
-    );
-
-    //installation is complete if the status is installed
-    if (install.status === 'installed') {
-      trackIntegrationEvent(
-        {
-          eventKey: 'integrations.installation_complete',
-          eventName: 'Integrations: Installation Complete',
-          integration_type: 'sentry_app',
-          integration: app.slug,
-          view: 'integrations_page',
-          integration_status: app.status,
-        },
-        this.props.organization
-      );
-    }
-
     if (!app.redirectUrl) {
       addSuccessMessage(t(`${app.slug} successfully installed.`));
       this.props.onAppInstall(install);
@@ -87,10 +61,36 @@ class SentryAppInstallationDetail extends React.Component<Props> {
     }
   };
 
-  handleInstall = () => {
+  handleInstall = async () => {
     const {organization, api, app} = this.props;
-    installSentryApp(api, organization.slug, app).then(
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.installation_start',
+        eventName: 'Integrations: Installation Start',
+        integration_type: 'sentry_app',
+        integration: app.slug,
+        view: 'integrations_page',
+        integration_status: app.status,
+      },
+      organization
+    );
+
+    return installSentryApp(api, organization.slug, app).then(
       install => {
+        //installation is complete if the status is installed
+        if (install.status === 'installed') {
+          trackIntegrationEvent(
+            {
+              eventKey: 'integrations.installation_complete',
+              eventName: 'Integrations: Installation Complete',
+              integration_type: 'sentry_app',
+              integration: app.slug,
+              view: 'integrations_page',
+              integration_status: app.status,
+            },
+            organization
+          );
+        }
         this.redirectUser(install);
       },
       () => {}
@@ -98,18 +98,7 @@ class SentryAppInstallationDetail extends React.Component<Props> {
   };
 
   handleUninstall = (install: SentryAppInstallation) => {
-    const {api, app} = this.props;
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.uninstall_clicked',
-        eventName: 'Integrations: Uninstall Clicked',
-        integration: app.slug,
-        integration_type: 'sentry_app',
-        integration_status: app.status,
-      },
-      this.props.organization
-    );
-
+    const {api, app, onCloseModal} = this.props;
     uninstallSentryApp(api, install).then(
       () => {
         this.props.onAppUninstall();
@@ -123,15 +112,31 @@ class SentryAppInstallationDetail extends React.Component<Props> {
           },
           this.props.organization
         );
+        onCloseModal?.();
       },
       () => {
         addErrorMessage(t(`Unable to uninstall ${app.name}`));
+        onCloseModal?.();
       }
     );
   };
 
+  recordUninstallClicked = () => {
+    const {app} = this.props;
+    trackIntegrationEvent(
+      {
+        eventKey: 'integrations.uninstall_clicked',
+        eventName: 'Integrations: Uninstall Clicked',
+        integration: app.slug,
+        integration_type: 'sentry_app',
+        integration_status: app.status,
+      },
+      this.props.organization
+    );
+  };
+
   render() {
-    const {organization, install, app} = this.props;
+    const {organization, install, app, onCloseModal} = this.props;
 
     return (
       <React.Fragment>
@@ -140,6 +145,8 @@ class SentryAppInstallationDetail extends React.Component<Props> {
           organization={organization}
           onInstall={this.handleInstall}
           onUninstall={this.handleUninstall}
+          onCloseModal={onCloseModal}
+          onUninstallModalOpen={this.recordUninstallClicked}
           install={install}
           isOnIntegrationPage
         />
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
index b533646087..5da58e162b 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
@@ -26,9 +26,11 @@ type Props = {
   app: SentryApp;
   organization: Organization;
   install?: SentryAppInstallation;
-  onInstall?: () => void;
+  onInstall?: () => Promise<void>;
   onUninstall?: (install: SentryAppInstallation) => void;
   onRemoveApp?: (app: SentryApp) => void;
+  onCloseModal?: () => void; //used for analytics
+  onUninstallModalOpen?: () => void; //used for analytics
   isOnIntegrationPage: boolean;
   ['data-test-id']?: string;
 };
@@ -41,6 +43,8 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
     onInstall: PropTypes.func,
     onUninstall: PropTypes.func,
     onRemoveApp: PropTypes.func,
+    onCloseModal: PropTypes.func,
+    onUninstallModalOpen: PropTypes.func,
     isOnIntegrationPage: PropTypes.bool,
   };
 
@@ -96,7 +100,7 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
   }
 
   openLearnMore = () => {
-    const {app, onInstall, organization} = this.props;
+    const {app, onInstall, organization, onCloseModal} = this.props;
     const isInstalled = !!this.isInstalled;
 
     onInstall &&
@@ -105,6 +109,7 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
         isInstalled,
         onInstall,
         organization,
+        onCloseModal,
       });
   };
 
@@ -123,6 +128,7 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
       isOnIntegrationPage,
       onUninstall,
       onRemoveApp,
+      onUninstallModalOpen,
     } = this.props;
     return (
       <SentryAppItem data-test-id={app.slug}>
@@ -153,6 +159,7 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
               onClickUninstall={onUninstall}
               onClickRemove={onRemoveApp}
               onClickPublish={this.handlePublish}
+              onUninstallModalOpen={onUninstallModalOpen}
             />
           </Box>
         </StyledFlex>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
index df4d8c9243..677755f3a7 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
@@ -11,11 +11,13 @@ type UninstallButtonProps = {
   install: SentryAppInstallation;
   app: SentryApp;
   onClickUninstall?: (install: SentryAppInstallation) => void;
+  onUninstallModalOpen?: () => void; //used for analytics
 };
 export const UninstallButton = ({
   install,
   app,
   onClickUninstall,
+  onUninstallModalOpen,
 }: UninstallButtonProps) => {
   const message = t(`Are you sure you want to remove the ${app.slug} installation?`);
 
@@ -23,7 +25,8 @@ export const UninstallButton = ({
     <Confirm
       message={message}
       priority="danger"
-      onConfirm={() => onClickUninstall && install && onClickUninstall(install)}
+      onConfirm={() => onClickUninstall && install && onClickUninstall(install)} //called when the user confirms the action
+      onConfirming={onUninstallModalOpen} //called when the confirm modal opens
     >
       <StyledButton borderless icon="icon-trash" data-test-id="sentry-app-uninstall">
         {t('Uninstall')}
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx
index d42de64e10..29dc614c12 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx
@@ -19,6 +19,8 @@ type Props = {
 
   onClickRemove?: (app: SentryApp) => void;
   onClickPublish?: () => void;
+
+  onUninstallModalOpen?: () => void;
 };
 
 const SentryApplicationRowButtons = ({
@@ -28,9 +30,9 @@ const SentryApplicationRowButtons = ({
   isOnIntegrationPage,
   onClickInstall,
   onClickUninstall,
-
   onClickRemove,
   onClickPublish,
+  onUninstallModalOpen,
 }: Props) => {
   const isInternal = app.status === 'internal';
 
@@ -42,7 +44,12 @@ const SentryApplicationRowButtons = ({
     }
     //if installed, render the uninstall button and if installed, render install button
     return !!install ? (
-      <UninstallButton install={install} app={app} onClickUninstall={onClickUninstall} />
+      <UninstallButton
+        install={install}
+        app={app}
+        onClickUninstall={onClickUninstall}
+        onUninstallModalOpen={onUninstallModalOpen}
+      />
     ) : (
       <InstallButton onClickInstall={onClickInstall} />
     );
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
index e3664cadba..8a68f2ecaf 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
@@ -86,6 +86,7 @@ exports[`Sentry App Installations displays all Apps owned by the Org 1`] = `
     isOnIntegrationPage={true}
     onInstall={[Function]}
     onUninstall={[Function]}
+    onUninstallModalOpen={[Function]}
     organization={
       Object {
         "access": Array [
@@ -243,6 +244,7 @@ exports[`Sentry App Installations displays all Apps owned by the Org 1`] = `
                   onClickInstall={[Function]}
                   onClickPublish={[Function]}
                   onClickUninstall={[Function]}
+                  onUninstallModalOpen={[Function]}
                   organization={
                     Object {
                       "access": Array [
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 0e26ebc601..2cd102d4ad 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -230,6 +230,7 @@ describe('OrganizationIntegrations', () => {
           sentryApp,
           isInstalled: false,
           onInstall: expect.any(Function),
+          onCloseModal: expect.any(Function),
           organization: org,
         });
       });
@@ -240,6 +241,7 @@ describe('OrganizationIntegrations', () => {
           onAddIntegration: wrapper.instance().onInstall,
           organization: routerContext.context.organization,
           isInstalled: false,
+          onCloseModal: expect.any(Function),
         };
 
         wrapper
