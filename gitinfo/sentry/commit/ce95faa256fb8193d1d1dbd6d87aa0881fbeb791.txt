commit ce95faa256fb8193d1d1dbd6d87aa0881fbeb791
Author: Mark Story <mark@sentry.io>
Date:   Fri Feb 28 17:06:33 2020 -0500

    feat(discover) Add modal component to column picker (#17345)
    
    Add the modal window component for the new column editor. This component
    takes a list of columns and fires an onApply prop when the changes are
    ready to be applied.
    
    Once this component is hooked up to the discover results table, we'll
    update the EventView and navigate to the new results.

diff --git a/docs-ui/components/columnEditor.stories.js b/docs-ui/components/columnEditor.stories.js
index 1d01516ca2..5c255ec04e 100644
--- a/docs-ui/components/columnEditor.stories.js
+++ b/docs-ui/components/columnEditor.stories.js
@@ -2,22 +2,24 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
+import {action} from '@storybook/addon-actions';
 
-import ColumnEditCollection from 'app/views/eventsV2/table/columnEditCollection';
+import {openModal} from 'app/actionCreators/modal';
+import Button from 'app/components/button';
+import GlobalModal from 'app/components/globalModal';
+import ColumnEditModal from 'app/views/eventsV2/table/columnEditModal';
 
-/**
- * Fake modal container. Later on this will be a stateful
- * container that will update the EventView column edits
- * are submitted.
- */
-class FakeModal extends React.Component {
-  static propTypes = {
-    organization: PropTypes.object,
-    tagKeys: PropTypes.arrayOf(PropTypes.string),
-  };
-
-  state = {
-    columns: [
+storiesOf('Discover|ColumnEditor', module).add(
+  'all',
+  withInfo({
+    text: 'Playground for building out column editor v2 for discover',
+  })(() => {
+    const organization = {
+      slug: 'test-org',
+      features: ['transaction-events'],
+    };
+    const tags = ['browser.name', 'custom-field'];
+    const columns = [
       {
         field: 'event.type',
       },
@@ -28,40 +30,24 @@ class FakeModal extends React.Component {
         field: 'id',
         aggregation: 'count',
       },
-    ],
-  };
-
-  handleChange = columns => {
-    this.setState({columns});
-  };
+    ];
 
-  render() {
-    const {tagKeys, organization} = this.props;
-    return (
-      <ColumnEditCollection
-        organization={organization}
-        columns={this.state.columns}
-        tagKeys={tagKeys}
-        onChange={this.handleChange}
-      />
-    );
-  }
-}
-
-storiesOf('Discover|ColumnEditor', module).add(
-  'all',
-  withInfo({
-    text: 'Playground for building out column editor v2 for discover',
-  })(() => {
-    const organization = {
-      slug: 'test-org',
-      features: ['transaction-events'],
+    const showModal = () => {
+      openModal(modalProps => (
+        <ColumnEditModal
+          {...modalProps}
+          organization={organization}
+          tagKeys={tags}
+          columns={columns}
+          onApply={action('onApply')}
+        />
+      ));
     };
-    const tags = ['browser.name', 'custom-field'];
 
     return (
       <div>
-        <FakeModal organization={organization} tagKeys={tags} />
+        <Button onClick={showModal}>Edit columns</Button>
+        <GlobalModal />
       </div>
     );
   })
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 4d99bc6dee..ac4e04aefe 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -3,14 +3,15 @@ import ReactDOM from 'react-dom';
 import styled from '@emotion/styled';
 
 import Button from 'app/components/button';
-import {IconAdd, IconGrabbable, IconClose} from 'app/icons';
-import {t} from 'app/locale';
-import {OrganizationSummary} from 'app/types';
-import space from 'app/styles/space';
 import {
   UserSelectValues,
   setBodyUserSelect,
 } from 'app/components/events/interfaces/spans/utils';
+import {IconAdd, IconGrabbable, IconClose} from 'app/icons';
+import {t} from 'app/locale';
+import {OrganizationSummary} from 'app/types';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
 
 import {Column} from '../eventView';
 import ColumnEditRow from './columnEditRow';
@@ -33,6 +34,7 @@ type State = {
 };
 
 const DRAG_CLASS = 'draggable-item';
+const GRAB_HANDLE_FUDGE = 25;
 
 class ColumnEditCollection extends React.Component<Props, State> {
   state = {
@@ -50,7 +52,7 @@ class ColumnEditCollection extends React.Component<Props, State> {
       portal.style.position = 'absolute';
       portal.style.top = '0';
       portal.style.left = '0';
-      portal.style.zIndex = '9999';
+      portal.style.zIndex = String(theme.zIndex.modal);
 
       this.portal = portal;
 
@@ -128,8 +130,9 @@ class ColumnEditCollection extends React.Component<Props, State> {
     if (this.dragGhostRef.current) {
       // move the ghost box
       const ghostDOM = this.dragGhostRef.current;
-      ghostDOM.style.left = `${event.pageX}px`;
-      ghostDOM.style.top = `${event.pageY}px`;
+      // Adjust so cursor is over the grab handle.
+      ghostDOM.style.left = `${event.pageX - GRAB_HANDLE_FUDGE}px`;
+      ghostDOM.style.top = `${event.pageY - GRAB_HANDLE_FUDGE}px`;
     }
 
     const dragItems = document.querySelectorAll(`.${DRAG_CLASS}`);
@@ -189,13 +192,16 @@ class ColumnEditCollection extends React.Component<Props, State> {
     if (typeof index !== 'number' || !this.state.isDragging || !this.portal) {
       return null;
     }
-
-    const top = `${this.state.top}px`;
-    const left = `${this.state.left}px`;
+    const top = Number(this.state.top) - GRAB_HANDLE_FUDGE;
+    const left = Number(this.state.left) - GRAB_HANDLE_FUDGE;
     const col = this.props.columns[index];
 
+    const style = {
+      top: `${top}px`,
+      left: `${left}px`,
+    };
     const ghost = (
-      <Ghost ref={this.dragGhostRef} style={{display: 'block', top, left}}>
+      <Ghost ref={this.dragGhostRef} style={style}>
         {this.renderItem(col, index, true)}
       </Ghost>
     );
@@ -240,20 +246,29 @@ class ColumnEditCollection extends React.Component<Props, State> {
     return (
       <div>
         {this.renderGhost()}
+        <RowContainer>
+          <Heading>
+            <strong>{t('Column')}</strong>
+            <strong>{t('Function')}</strong>
+          </Heading>
+        </RowContainer>
         {columns.map((col: Column, i: number) => this.renderItem(col, i))}
-        <Actions>
-          <Button onClick={this.handleAddColumn}>
-            <StyledIconAdd circle size="sm" />
-            {t('Add a column')}
-          </Button>
-        </Actions>
+        <RowContainer>
+          <Actions>
+            <Button size="xsmall" onClick={this.handleAddColumn}>
+              <StyledIconAdd circle size="sm" />
+              {t('Add a Column')}
+            </Button>
+          </Actions>
+        </RowContainer>
       </div>
     );
   }
 }
 
 const RowContainer = styled('div')`
-  display: flex;
+  display: grid;
+  grid-template-columns: 30px auto 30px;
   align-items: center;
   width: 100%;
 
@@ -262,16 +277,22 @@ const RowContainer = styled('div')`
 
 const Ghost = styled('div')`
   background: ${p => p.theme.white};
+  display: block;
   position: absolute;
   padding: 4px;
   border: 4px solid ${p => p.theme.borderLight};
   border-radius: 4px;
   width: 400px;
-  opacity: 80%;
+  opacity: 0.8;
+  cursor: grabbing;
 
   & > ${RowContainer} {
     margin-bottom: 0;
   }
+
+  & svg {
+    cursor: grabbing;
+  }
 `;
 
 const DragPlaceholder = styled('div')`
@@ -282,8 +303,8 @@ const DragPlaceholder = styled('div')`
 `;
 
 const IconButton = styled('button')`
-  padding: 0 ${space(1)};
   margin: 0;
+  padding: 0;
   border: 0;
   height: 16px;
   background: transparent;
@@ -295,7 +316,16 @@ const StyledIconAdd = styled(IconAdd)`
 `;
 
 const Actions = styled('div')`
-  padding-top: ${space(1)};
+  grid-column: 2 / 3;
+`;
+
+const Heading = styled('div')`
+  grid-column: 2 / 3;
+
+  /* Emulate the grid used in the column editor rows */
+  display: grid;
+  grid-template-columns: repeat(2, 1fr);
+  grid-column-gap: ${space(1)};
 `;
 
 export default ColumnEditCollection;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
new file mode 100644
index 0000000000..e734cfe52a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
@@ -0,0 +1,68 @@
+import React from 'react';
+
+import Button from 'app/components/button';
+import ButtonBar from 'app/components/buttonBar';
+import {DISCOVER2_DOCS_URL} from 'app/constants';
+import {ModalRenderProps} from 'app/actionCreators/modal';
+import {t} from 'app/locale';
+import {OrganizationSummary} from 'app/types';
+import {Column} from '../eventView';
+import ColumnEditCollection from './columnEditCollection';
+
+type Props = {
+  columns: Column[];
+  organization: OrganizationSummary;
+  tagKeys: string[];
+  // Fired when column selections have been applied.
+  onApply: (columns: Column[]) => void;
+} & ModalRenderProps;
+
+type State = {
+  columns: Column[];
+};
+
+class ColumnEditModal extends React.Component<Props, State> {
+  state = {
+    columns: this.props.columns,
+  };
+
+  handleChange = (columns: Column[]) => {
+    this.setState({columns});
+  };
+
+  handleApply = () => {
+    this.props.onApply(this.state.columns);
+    this.props.closeModal();
+  };
+
+  render() {
+    const {Header, Body, Footer, tagKeys, organization} = this.props;
+    return (
+      <React.Fragment>
+        <Header>
+          <h4>{t('Edit Columns')}</h4>
+        </Header>
+        <Body>
+          <ColumnEditCollection
+            organization={organization}
+            columns={this.state.columns}
+            tagKeys={tagKeys}
+            onChange={this.handleChange}
+          />
+        </Body>
+        <Footer>
+          <ButtonBar gap={1}>
+            <Button priority="default" to={DISCOVER2_DOCS_URL}>
+              {t('Read the Docs')}
+            </Button>
+            <Button priority="primary" onClick={this.handleApply}>
+              {t('Apply')}
+            </Button>
+          </ButtonBar>
+        </Footer>
+      </React.Fragment>
+    );
+  }
+}
+
+export default ColumnEditModal;
