commit 98c53b2db68fcfbda858105a69bf3a88d3555b9b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Dec 7 10:28:06 2018 -0800

    ref(health): Remove health ☠️ (#10953)
    
    :wave:

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index ee459fccfb..2a9106fc1b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -787,8 +787,6 @@ SENTRY_FEATURES = {
     'organizations:global-views': False,
     # Enable the interface and functionality for unmerging event groups.
     'organizations:group-unmerge': False,
-    # Enable the 'health' interface.
-    'organizations:health': False,
     # Enable integration functionality to create and link groups to issues on
     # external services.
     'organizations:integrations-issue-basic': False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 8907f5e439..5343b98dc6 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -56,7 +56,6 @@ default_manager.add('organizations:discover', OrganizationFeature)  # NOQA
 default_manager.add('organizations:event-attachments', OrganizationFeature)  # NOQA
 default_manager.add('organizations:global-views', OrganizationFeature)  # NOQA
 default_manager.add('organizations:group-unmerge', OrganizationFeature)  # NOQA
-default_manager.add('organizations:health', OrganizationFeature)  # NOQA
 default_manager.add('organizations:integrations-issue-basic', OrganizationFeature)  # NOQA
 default_manager.add('organizations:integrations-issue-sync', OrganizationFeature)  # NOQA
 default_manager.add('organizations:internal-catchall', OrganizationFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index f8ed22c5a6..6343d295db 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -784,46 +784,6 @@ function routes() {
             />
           </Route>
 
-          <Route
-            path="/organizations/:orgId/health/"
-            componentPromise={() =>
-              import(/*webpackChunkName: "OrganizationHealth"*/ './views/organizationHealth')}
-            component={errorHandler(LazyLoad)}
-          >
-            <IndexRoute
-              componentPromise={() =>
-                import(/*webpackChunkName: "HealthOverview"*/ './views/organizationHealth/overview')}
-              component={errorHandler(LazyLoad)}
-            />
-            <Route
-              path="errors"
-              componentPromise={() =>
-                import(/*webpackChunkName: "HealthErrors"*/ './views/organizationHealth/errors')}
-              component={errorHandler(LazyLoad)}
-            />
-
-            <Route
-              path="transactions"
-              componentPromise={() =>
-                import(/*webpackChunkName: "HealthTransactions"*/ './views/organizationHealth/transactions')}
-              component={errorHandler(LazyLoad)}
-            />
-
-            <Route
-              path="browsers"
-              componentPromise={() =>
-                import(/*webpackChunkName: "HealthBrowsers"*/ './views/organizationHealth/browsers')}
-              component={errorHandler(LazyLoad)}
-            />
-
-            <Route
-              path="devices"
-              componentPromise={() =>
-                import(/*webpackChunkName: "HealthDevices"*/ './views/organizationHealth/devices')}
-              component={errorHandler(LazyLoad)}
-            />
-          </Route>
-
           <Route
             path="/organizations/:orgId/teams/new/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx b/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx
rename to src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
index a37c6bac1d..a269e56778 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/loadingPanel.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
@@ -1,8 +1,6 @@
 import React from 'react';
 import styled from 'react-emotion';
 
-import HealthPanelChart from 'app/views/organizationHealth/styles/healthPanelChart';
-
 const LoadingMask = styled('div')`
   background-color: ${p => p.theme.offWhite};
   border-radius: ${p => p.theme.borderRadius};
@@ -14,11 +12,13 @@ const LoadingMask = styled('div')`
 `;
 
 const LoadingPanel = styled(props => (
-  <HealthPanelChart {...props}>
+  <div {...props}>
     <LoadingMask />
-  </HealthPanelChart>
+  </div>
 ))`
   flex: 1;
+  flex-shrink: 0;
+  overflow: hidden;
   height: 200px;
   position: relative;
   border-color: transparent;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
index 4531bb5629..10769acd5b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
@@ -5,9 +5,10 @@ import React from 'react';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {doEventsRequest} from 'app/actionCreators/events';
 import {t} from 'app/locale';
-import LoadingPanel from 'app/views/organizationHealth/loadingPanel';
 import SentryTypes from 'app/sentryTypes';
 
+import LoadingPanel from '../loadingPanel';
+
 const propNamesToIgnore = ['api', 'children', 'organizations', 'project', 'loading'];
 const omitIgnoredProps = props =>
   omitBy(props, (value, key) => propNamesToIgnore.includes(key));
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx b/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
deleted file mode 100644
index 139ecdd1eb..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
+++ /dev/null
@@ -1,130 +0,0 @@
-import {Flex} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {t} from 'app/locale';
-import OrganizationHealthDetails from 'app/views/organizationHealth/details';
-import PieChart from 'app/components/charts/pieChart';
-
-import DetailContainer from './detailContainer';
-import EventsTableChart from './eventsTableChart';
-import HealthPanelChart from './styles/healthPanelChart';
-import HealthRequest from './util/healthRequest';
-
-class OrganizationHealthBrowsersOverview extends React.Component {
-  static propTypes = {
-    tag: PropTypes.string,
-    title: PropTypes.string,
-    onSetSpecifier: PropTypes.func,
-  };
-
-  render() {
-    const {tag, title, onSetSpecifier} = this.props;
-
-    return (
-      <React.Fragment>
-        <Flex>
-          <HealthRequest
-            tag={tag}
-            showLoading
-            includeTimeseries={false}
-            includeTop
-            limit={5}
-          >
-            {({tagData}) => {
-              return (
-                <HealthPanelChart
-                  showLegend={false}
-                  height={200}
-                  series={[
-                    {
-                      seriesName: title,
-                      data: tagData.map(([name, value]) => ({name, value})),
-                    },
-                  ]}
-                  title={title}
-                >
-                  {({series}) => <PieChart height={300} series={series} selectOnRender />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-
-          <HealthRequest
-            tag="os.name"
-            showLegend={false}
-            showLoading
-            includeTimeseries={false}
-            includeTop
-            limit={5}
-          >
-            {({tagData}) => {
-              return (
-                <HealthPanelChart
-                  showLegend={false}
-                  height={200}
-                  series={[
-                    {
-                      seriesName: t('OS'),
-                      data: tagData.map(([name, value]) => ({name, value})),
-                    },
-                  ]}
-                  title={t('OS')}
-                >
-                  {({series}) => <PieChart height={300} series={series} selectOnRender />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-
-        <Flex>
-          <HealthRequest
-            tag={tag}
-            showLoading
-            includeTimeseries={false}
-            includeTop
-            includePercentages
-            limit={5}
-          >
-            {({tagDataWithPercentages}) => {
-              return (
-                <EventsTableChart
-                  headers={[title, t('Events'), t('Percentage'), t('Last event')]}
-                  data={tagDataWithPercentages}
-                  onRowClick={onSetSpecifier}
-                />
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-      </React.Fragment>
-    );
-  }
-}
-class OrganizationHealthBrowsers extends React.Component {
-  render() {
-    const title = t('Browsers');
-
-    return (
-      <DetailContainer title={title}>
-        {({shouldShowDetails, setSpecifier}) => (
-          <React.Fragment>
-            {shouldShowDetails ? (
-              <OrganizationHealthDetails title={title} />
-            ) : (
-              <OrganizationHealthBrowsersOverview
-                tag="browser.name"
-                title={title}
-                onSetSpecifier={setSpecifier}
-              />
-            )}
-          </React.Fragment>
-        )}
-      </DetailContainer>
-    );
-  }
-}
-
-export default OrganizationHealthBrowsers;
-export {OrganizationHealthBrowsers};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/detailContainer.jsx b/src/sentry/static/sentry/app/views/organizationHealth/detailContainer.jsx
deleted file mode 100644
index 998ded4649..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/detailContainer.jsx
+++ /dev/null
@@ -1,60 +0,0 @@
-import {Link, withRouter} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import InlineSvg from 'app/components/inlineSvg';
-import recreateRoute from 'app/utils/recreateRoute';
-import space from 'app/styles/space';
-
-import {HealthContextActions} from './propTypes';
-import Header from './styles/header';
-import withHealth from './util/withHealth';
-
-class DetailContainer extends React.Component {
-  static propTypes = {
-    title: PropTypes.node,
-    router: PropTypes.object,
-    actions: HealthContextActions,
-    specifiers: PropTypes.arrayOf(PropTypes.string),
-  };
-
-  render() {
-    const {router, actions, specifiers, children, title} = this.props;
-    // destructure `location` because we don't want to pass query string to breadcrumb
-    // eslint-disable-next-line no-unused-vars
-    const {location, ...routerWithoutQueryString} = router;
-    const shouldShowDetails = specifiers && !!specifiers.length;
-
-    return (
-      <React.Fragment>
-        <Header>
-          {shouldShowDetails ? (
-            <React.Fragment>
-              <Link to={recreateRoute('', routerWithoutQueryString)}>{title}</Link>
-              <Chevron /> {specifiers[0].split(':')[1]}
-            </React.Fragment>
-          ) : (
-            title
-          )}
-        </Header>
-
-        {children({
-          shouldShowDetails,
-          title,
-          specifiers,
-          setSpecifier: actions.setSpecifier,
-        })}
-      </React.Fragment>
-    );
-  }
-}
-
-export default withRouter(withHealth(DetailContainer));
-export {DetailContainer};
-
-const Chevron = styled(props => <InlineSvg src="icon-chevron-right" {...props} />)`
-  height: 14px;
-  width: 14px;
-  margin: 0 ${space(0.5)};
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/details.jsx b/src/sentry/static/sentry/app/views/organizationHealth/details.jsx
deleted file mode 100644
index fd8a3e5643..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/details.jsx
+++ /dev/null
@@ -1,72 +0,0 @@
-import {Flex} from 'grid-emotion';
-import React from 'react';
-
-import {t} from 'app/locale';
-import LineChart from 'app/components/charts/lineChart';
-import PieChart from 'app/components/charts/pieChart';
-
-import HealthPanelChart from './styles/healthPanelChart';
-import HealthRequest from './util/healthRequest';
-import withHealth from './util/withHealth';
-
-class OrganizationHealthDetails extends React.Component {
-  render() {
-    return (
-      <React.Fragment>
-        <Flex>
-          <HealthRequest
-            tag="error.handled"
-            includePrevious
-            showLoading
-            interval="1d"
-            includeTimeseries
-            includeTimeAggregation
-            timeAggregationSeriesName={t('Errors')}
-          >
-            {({timeseriesData, timeAggregatedData, previousTimeseriesData}) => {
-              return (
-                <HealthPanelChart
-                  height={200}
-                  showLegend
-                  series={[timeAggregatedData]}
-                  previousPeriod={previousTimeseriesData}
-                  title={t('Errors')}
-                >
-                  {props => <LineChart isGroupedByDate {...props} />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-
-          <HealthRequest
-            tag="os.name"
-            showLoading
-            includeTimeseries={false}
-            includeTop
-            limit={5}
-          >
-            {({tagData}) => {
-              return (
-                <HealthPanelChart
-                  showLegend={false}
-                  height={200}
-                  series={[
-                    {
-                      seriesName: t('By Device'),
-                      data: tagData.map(([name, value]) => ({name, value})),
-                    },
-                  ]}
-                  title={t('By Device')}
-                >
-                  {({series}) => <PieChart height={300} series={series} selectOnRender />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-      </React.Fragment>
-    );
-  }
-}
-export default withHealth(OrganizationHealthDetails);
-export {OrganizationHealthDetails};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx b/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx
deleted file mode 100644
index 2cdfec202a..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx
+++ /dev/null
@@ -1,89 +0,0 @@
-import {Flex} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {t} from 'app/locale';
-import OrganizationHealthDetails from 'app/views/organizationHealth/details';
-import PieChart from 'app/components/charts/pieChart';
-
-import DetailContainer from './detailContainer';
-import EventsTableChart from './eventsTableChart';
-import HealthPanelChart from './styles/healthPanelChart';
-import HealthRequest from './util/healthRequest';
-
-class OrganizationHealthDevicesOverview extends React.Component {
-  static propTypes = {
-    tag: PropTypes.string,
-    title: PropTypes.string,
-    onSetSpecifier: PropTypes.func,
-  };
-
-  render() {
-    const {title, tag, onSetSpecifier} = this.props;
-    return (
-      <HealthRequest
-        tag={tag}
-        showLoading
-        includeTimeseries={false}
-        includeTop
-        includePercentages
-        limit={5}
-      >
-        {({tagData, tagDataWithPercentages}) => (
-          <React.Fragment>
-            <Flex>
-              <HealthPanelChart
-                height={300}
-                showLegend={false}
-                series={[
-                  {
-                    seriesName: title,
-                    data: tagData.map(([name, value]) => ({name, value})),
-                  },
-                ]}
-                title={title}
-              >
-                {({series}) => <PieChart height={300} selectOnRender series={series} />}
-              </HealthPanelChart>
-            </Flex>
-
-            <Flex>
-              <EventsTableChart
-                headers={[t('Device'), t('Events'), t('Percentage'), t('Last event')]}
-                data={tagDataWithPercentages}
-                onRowClick={onSetSpecifier}
-              />
-            </Flex>
-          </React.Fragment>
-        )}
-      </HealthRequest>
-    );
-  }
-}
-
-class OrganizationHealthDevices extends React.Component {
-  render() {
-    const title = t('Devices');
-
-    return (
-      <DetailContainer title={title}>
-        {({shouldShowDetails, setSpecifier}) => (
-          <React.Fragment>
-            {shouldShowDetails ? (
-              <OrganizationHealthDetails title={title} />
-            ) : (
-              <OrganizationHealthDevicesOverview
-                tag="device"
-                title={title}
-                onSetSpecifier={setSpecifier}
-              />
-            )}
-          </React.Fragment>
-        )}
-      </DetailContainer>
-    );
-  }
-}
-
-export default OrganizationHealthDevices;
-export {OrganizationHealthDevices};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx b/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx
deleted file mode 100644
index bc8da54bbe..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx
+++ /dev/null
@@ -1,374 +0,0 @@
-import {Box, Flex} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
-import AreaChart from 'app/components/charts/areaChart';
-import Count from 'app/components/count';
-import IdBadge from 'app/components/idBadge';
-import PercentageBarChart from 'app/components/charts/percentageBarChart';
-import PieChart from 'app/components/charts/pieChart';
-import SentryTypes from 'app/sentryTypes';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
-
-import Header from './styles/header';
-import HealthPanelChart from './styles/healthPanelChart';
-import HealthRequest from './util/healthRequest';
-import HealthTableChart from './styles/healthTableChart';
-import withHealth from './util/withHealth';
-
-const filterEmpty = val => !!val;
-
-class OrganizationHealthErrors extends React.Component {
-  static propTypes = {
-    actions: PropTypes.object,
-    organization: SentryTypes.Organization,
-  };
-
-  handleSetSpecifier = (tag, value) => {
-    this.props.actions.setSpecifier(tag, value);
-  };
-
-  render() {
-    let {organization} = this.props;
-
-    const tooltipOptions = {
-      filter: filterEmpty,
-      confine: true,
-    };
-
-    return (
-      <React.Fragment>
-        <Flex justify="space-between">
-          <Header>{t('Errors')}</Header>
-        </Flex>
-
-        <Flex>
-          <HealthRequest
-            tag="error.handled"
-            includeTimeseries
-            interval="1d"
-            showLoading
-            getCategory={value => (value ? t('Handled') : t('Crash'))}
-          >
-            {({timeseriesData, previousTimeseriesData}) => {
-              return (
-                <HealthPanelChart
-                  height={200}
-                  title={t('Errors')}
-                  series={timeseriesData}
-                  previousPeriod={previousTimeseriesData}
-                >
-                  {props => <AreaChart isGroupedByDate {...props} />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-
-          <HealthRequest tag="user" showLoading includeTop includeTimeseries={false}>
-            {({originalTagData: originalData, tag}) => (
-              <HealthTableChart
-                headers={[t('Most Impacted')]}
-                data={originalData.map(row => [row, row])}
-                widths={[null, 120]}
-                getValue={item => (typeof item === 'number' ? item : item && item.count)}
-                renderHeaderCell={({getValue, value, columnIndex}) => {
-                  return typeof value === 'string' ? (
-                    value
-                  ) : (
-                    <div>
-                      <IdBadge
-                        user={value[tag].value}
-                        displayName={value[tag].value && value[tag].value.label}
-                      />
-                    </div>
-                  );
-                }}
-                renderDataCell={({getValue, value}) => {
-                  return <Count value={getValue(value)} />;
-                }}
-                showRowTotal={false}
-                showColumnTotal={false}
-                shadeRowPercentage
-              />
-            )}
-          </HealthRequest>
-        </Flex>
-
-        <Flex>
-          <HealthRequest
-            tag="error.type"
-            showLoading
-            includeTimeseries={false}
-            includeTop
-            interval="1d"
-          >
-            {({tagData}) => {
-              return (
-                <HealthTableChart
-                  title={t('Error Type')}
-                  headers={[t('Error Type')]}
-                  data={tagData}
-                  widths={[null, 60, 60, 60, 60]}
-                  showColumnTotal
-                  shadeRowPercentage
-                  renderDataCell={({value}) => <Count value={value} />}
-                />
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-
-        <Flex>
-          <ReleasesRequest organization={organization}>
-            {({loading, timeseriesData}) => {
-              if (loading) return null;
-              return (
-                <HealthPanelChart
-                  height={200}
-                  title={t('Releases (most recent)')}
-                  series={timeseriesData}
-                >
-                  {props => (
-                    <AreaChart isGroupedByDate tooltip={tooltipOptions} {...props} />
-                  )}
-                </HealthPanelChart>
-              );
-            }}
-          </ReleasesRequest>
-        </Flex>
-
-        <Flex>
-          <HealthRequest
-            tag="release"
-            includeTimeseries
-            interval="1d"
-            showLoading
-            limit={10}
-            getCategory={({shortVersion}) => shortVersion}
-          >
-            {({timeseriesData}) => {
-              return (
-                <HealthPanelChart
-                  height={200}
-                  title={t('Releases (most in period)')}
-                  series={timeseriesData}
-                >
-                  {props => <AreaChart tooltip={tooltipOptions} {...props} />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-
-        <Flex>
-          <ReleasesRequest organization={organization}>
-            {({timeseriesData, loading}) => {
-              if (loading) return null;
-              return (
-                <HealthPanelChart
-                  height={200}
-                  title={t('Releases (most recent)')}
-                  series={timeseriesData}
-                >
-                  {props => <PercentageBarChart isGroupedByDate {...props} />}
-                </HealthPanelChart>
-              );
-            }}
-          </ReleasesRequest>
-
-          <HealthRequest
-            tag="release"
-            includeTimeseries
-            interval="1d"
-            showLoading
-            limit={10}
-            getCategory={({shortVersion}) => shortVersion}
-          >
-            {({timeseriesData}) => {
-              return (
-                <HealthPanelChart
-                  height={200}
-                  title={t('Releases (most in period)')}
-                  series={timeseriesData}
-                >
-                  {props => <PercentageBarChart isGroupedByDate {...props} />}
-                </HealthPanelChart>
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-
-        <Flex>
-          <HealthRequest
-            tag="release"
-            showLoading
-            includeTimeseries={false}
-            includeTop
-            limit={5}
-            topk={5}
-            getCategory={({shortVersion}) => shortVersion}
-          >
-            {({originalTagData: data, tag}) => {
-              return (
-                <React.Fragment>
-                  <HealthTableChart
-                    headers={[t('Errors by Release')]}
-                    data={data.map(row => [row, row])}
-                    widths={[null, 120]}
-                    getValue={item =>
-                      typeof item === 'number' ? item : item && item.count}
-                    renderHeaderCell={({getValue, value, columnIndex}) => {
-                      return (
-                        <Flex justify="space-between">
-                          <ReleaseName
-                            onClick={() =>
-                              this.handleSetSpecifier(tag, value[tag]._health_id)}
-                          >
-                            {value[tag].value.shortVersion}
-                          </ReleaseName>
-                          <Project>
-                            {value.topProjects.map(p => (
-                              <IdBadge key={p.slug} project={p} />
-                            ))}
-                          </Project>
-                        </Flex>
-                      );
-                    }}
-                    renderDataCell={({getValue, value, columnIndex}) => {
-                      return <Count value={getValue(value)} />;
-                    }}
-                    showRowTotal={false}
-                    showColumnTotal={false}
-                    shadeRowPercentage
-                  />
-                  <HealthPanelChart
-                    height={300}
-                    title={t('Errors By Release')}
-                    showLegend={false}
-                    series={[
-                      {
-                        seriesName: t('Errors By Release'),
-                        data: data.map(row => ({
-                          name: row.release.value.shortVersion,
-                          value: row.count,
-                        })),
-                      },
-                    ]}
-                  >
-                    {({series}) => (
-                      <Flex>
-                        <PieChartWrapper>
-                          <PieChart height={300} series={series} />
-                        </PieChartWrapper>
-                      </Flex>
-                    )}
-                  </HealthPanelChart>
-                </React.Fragment>
-              );
-            }}
-          </HealthRequest>
-        </Flex>
-      </React.Fragment>
-    );
-  }
-}
-
-/**
- * This is a proof of concept, unsure if we'll want this.
- *
- * What this does is fetch the most recent releases and then make a snuba query to
- * fetch counts only for those releases.
- *
- * An alternate query is to only include the releases that contain the most error counts
- */
-const ReleasesRequest = withApi(
-  class ReleasesRequestComponent extends React.Component {
-    static propTypes = {
-      limit: PropTypes.number,
-    };
-
-    static defaultProps = {
-      limit: 10,
-    };
-
-    constructor(props) {
-      super(props);
-      this.state = {
-        data: null,
-      };
-    }
-
-    async componentDidMount() {
-      let {api, organization, limit} = this.props;
-      if (!organization) return;
-
-      try {
-        // fetch last `limit` releases
-        const releases = await api.requestPromise(
-          `/organizations/${organization.slug}/releases/`,
-          {
-            query: {
-              per_page: limit,
-            },
-          }
-        );
-
-        // eslint-disable-next-line
-        this.setState({
-          data: releases,
-        });
-      } catch (err) {
-        addErrorMessage(t('Unable to fetch releases'));
-      }
-    }
-
-    render() {
-      let {children, limit, ...props} = this.props;
-      let {data} = this.state;
-      let loading = data === null;
-
-      if (!data) {
-        return children({
-          loading,
-        });
-      }
-
-      return (
-        <HealthRequest
-          tag="release"
-          includeTimeseries
-          interval="1d"
-          showLoading
-          limit={limit}
-          getCategory={({shortVersion}) => shortVersion}
-          specifiers={data.map(({version}) => `release:${version}`)}
-          {...props}
-        >
-          {children}
-        </HealthRequest>
-      );
-    }
-  }
-);
-
-export default withHealth(OrganizationHealthErrors);
-export {OrganizationHealthErrors};
-
-const PieChartWrapper = styled(Box)`
-  flex: 1;
-  flex-shrink: 0;
-`;
-
-const ReleaseName = styled(Box)`
-  ${overflowEllipsis};
-`;
-
-const Project = styled(Box)`
-  margin-left: ${space(1)};
-  flex-shrink: 0;
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx b/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx
deleted file mode 100644
index c82d45e51e..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx
+++ /dev/null
@@ -1,164 +0,0 @@
-import {Flex} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import Count from 'app/components/count';
-import InlineSvg from 'app/components/inlineSvg';
-import TableChart from 'app/components/charts/tableChart';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import space from 'app/styles/space';
-
-const Delta = ({current, previous, className}) => {
-  const changePercent = Math.round(Math.abs(current - previous) / previous * 100);
-  const direction = !changePercent ? 0 : current - previous;
-  return (
-    <StyledDelta direction={direction} className={className}>
-      {!!direction && <DeltaCaret direction={direction} src="icon-chevron-down" />}
-      {changePercent !== 0 ? `${changePercent}%` : <span>&mdash;</span>}
-    </StyledDelta>
-  );
-};
-Delta.propTypes = {
-  current: PropTypes.number,
-  previous: PropTypes.number,
-};
-
-const DeltaCaret = styled(InlineSvg)`
-  /* should probably have a chevron-up svg (: */
-  ${p => p.direction > 0 && 'transform: rotate(180deg)'};
-  width: 10px;
-  height: 10px;
-`;
-
-const StyledDelta = styled(Flex)`
-  align-items: center;
-  padding: 0 ${space(0.25)};
-  margin-right: ${space(0.5)};
-  font-size: ${p => p.theme.fontSizeSmall};
-  color: ${p =>
-    p.direction > 0 ? p.theme.green : p.direction < 0 ? p.theme.red : p.theme.gray2};
-`;
-
-class EventsTableChart extends React.Component {
-  static propTypes = {
-    headers: PropTypes.arrayOf(PropTypes.node),
-    onRowClick: PropTypes.func,
-    data: PropTypes.arrayOf(
-      PropTypes.shape({
-        name: PropTypes.node,
-        percentage: PropTypes.number,
-        count: PropTypes.number,
-        lastCount: PropTypes.number,
-      })
-    ),
-  };
-
-  static defaultProps = {
-    onRowClick: () => {},
-  };
-
-  handleRowClick = ({specifier}, e) => {
-    const {onRowClick} = this.props;
-    onRowClick(specifier, e);
-  };
-
-  render() {
-    const {headers, data} = this.props;
-
-    return (
-      <TableChart
-        headers={headers}
-        data={data.map(({count, lastCount, name, percentage}) => [
-          <Name key="name">{name}</Name>,
-          <Events key="events">
-            <Delta current={count} previous={lastCount} />
-            <Count value={count} />
-          </Events>,
-          <React.Fragment key="bar">
-            <BarWrapper>
-              <Bar width={percentage} />
-            </BarWrapper>
-            <span>{percentage}%</span>
-          </React.Fragment>,
-          <LastEvent key="time-ago">n/a</LastEvent>,
-        ])}
-        renderRow={({items, rowIndex, ...other}) => (
-          <Row onClick={this.handleRowClick} data={data} rowIndex={rowIndex}>
-            <NameAndEventsContainer justify="space-between" align="center">
-              {items[0]}
-              <div>{items[1]}</div>
-            </NameAndEventsContainer>
-            <PercentageContainer justify="space-between" align="center">
-              <Flex w={[3 / 4]} align="center" key="bar">
-                {items[2]}
-              </Flex>
-              <Flex w={[1 / 4]} justify="flex-end" key="last-event">
-                {items[3]}
-              </Flex>
-            </PercentageContainer>
-          </Row>
-        )}
-      />
-    );
-  }
-}
-
-const Row = styled(function RowComponent({className, data, rowIndex, onClick, children}) {
-  return (
-    <div
-      className={className}
-      onClick={e => typeof onClick === 'function' && onClick(data[rowIndex], e)}
-    >
-      {children}
-    </div>
-  );
-})`
-  display: flex;
-  flex: 1;
-  cursor: pointer;
-`;
-
-const StyledEventsTableChart = styled(EventsTableChart)`
-  width: 100%;
-`;
-
-const NameAndEventsContainer = styled(Flex)`
-  flex-shrink: 0;
-  margin-right: ${space(2)};
-  width: 50%;
-`;
-
-const PercentageContainer = styled(Flex)`
-  width: 50%;
-`;
-
-const BarWrapper = styled('div')`
-  width: 85%;
-  margin-right: ${space(1)};
-`;
-
-const Bar = styled(({width, ...props}) => <div {...props} />)`
-  flex: 1;
-  width: ${p => p.width}%;
-  background-color: ${p => p.theme.gray1};
-  height: 12px;
-  border-radius: 2px;
-`;
-
-const Name = styled('span')`
-  ${overflowEllipsis};
-`;
-
-const Events = styled(Name)`
-  display: flex;
-  align-items: center;
-  margin-left: ${space(0.5)};
-`;
-
-const LastEvent = styled(Name)`
-  text-align: right;
-  margin-left: ${space(0.5)};
-`;
-
-export default StyledEventsTableChart;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
deleted file mode 100644
index e0f9f1433c..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
+++ /dev/null
@@ -1,86 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import {t} from 'app/locale';
-import Link from 'app/components/link';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import withLatestContext from 'app/utils/withLatestContext';
-
-const HealthNavigationMenu = styled(
-  withLatestContext(
-    class HealthNavigationMenu extends React.Component {
-      static propTypes = {
-        organization: SentryTypes.Organization,
-      };
-
-      render() {
-        let {className, organization} = this.props;
-        return (
-          <div className={className}>
-            <NavigationGroup title={t('Monitoring')}>
-              <NavItem to={`/organizations/${organization.slug}/health/`}>
-                {t('Overview')}
-              </NavItem>
-              <NavItem to={`/organizations/${organization.slug}/health/errors/`}>
-                {t('Errors')}
-              </NavItem>
-              <NavItem to={`/organizations/${organization.slug}/health/transactions/`}>
-                {t('Transactions')}
-              </NavItem>
-            </NavigationGroup>
-
-            <NavigationGroup title={t('Users')}>
-              <NavItem to={`/organizations/${organization.slug}/health/browsers/`}>
-                {t('Browsers')}
-              </NavItem>
-              <NavItem to={`/organizations/${organization.slug}/health/devices/`}>
-                {t('Devices')}
-              </NavItem>
-            </NavigationGroup>
-          </div>
-        );
-      }
-    }
-  )
-)`
-  border-right: 1px solid ${p => p.theme.borderLight};
-  width: 180px;
-  flex-shrink: 0;
-`;
-
-export default HealthNavigationMenu;
-
-const NavigationGroup = styled(
-  class NavigationGroup extends React.Component {
-    static propTypes = {
-      title: PropTypes.node,
-    };
-
-    render() {
-      let {className, title, children} = this.props;
-      return (
-        <div className={className}>
-          <Title>{title}</Title>
-          {children}
-        </div>
-      );
-    }
-  }
-)`
-  display: flex;
-  flex-direction: column;
-`;
-
-const Title = styled('div')`
-  color: ${p => p.theme.gray1};
-  font-size: 0.9em;
-  padding: ${space(2)};
-  margin-bottom: ${space(0)};
-  text-transform: uppercase;
-`;
-
-const NavItem = styled(Link)`
-  padding: 0 ${space(2)};
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
deleted file mode 100644
index f2dcdb7870..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
+++ /dev/null
@@ -1,145 +0,0 @@
-import {Flex} from 'grid-emotion';
-import {withRouter} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import Feature from 'app/components/acl/feature';
-import HeaderSeparator from 'app/components/organizations/headerSeparator';
-import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
-import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
-import SentryTypes from 'app/sentryTypes';
-import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
-import space from 'app/styles/space';
-import withLatestContext from 'app/utils/withLatestContext';
-
-import HealthContext from './util/healthContext';
-import HealthNavigationMenu from './healthNavigationMenu';
-
-class OrganizationHealth extends React.Component {
-  static propTypes = {
-    organization: SentryTypes.Organization,
-    router: PropTypes.object,
-  };
-
-  static getDerivedStateFromProps(props, state) {
-    const {query} = props.router.location;
-
-    return {
-      projects: query.projects || [],
-      environments: query.environments || [],
-      specifiers:
-        typeof query.specifiers === 'string'
-          ? [query.specifiers]
-          : Array.isArray(query.specifiers) ? query.specifiers : [],
-      period: query.period || '7d',
-    };
-  }
-
-  constructor(props) {
-    super(props);
-
-    this.actions = {
-      updateParams: this.updateParams,
-      setSpecifier: this.setSpecifier,
-    };
-
-    this.state = {};
-  }
-
-  updateParams = obj => {
-    const {router} = this.props;
-    router.push({
-      pathname: router.location.pathname,
-      query: {
-        ...router.location.query,
-        ...obj,
-      },
-    });
-  };
-
-  setSpecifier = (tag, value) => {
-    this.setState(state => ({
-      ...state,
-      specifiers: [`${tag}:${value}`],
-    }));
-  };
-
-  handleChangeProjects = projects => {
-    this.updateParams({projects});
-  };
-
-  handleChangeEnvironments = environments => {
-    this.updateParams({environments});
-  };
-
-  handleChangeTime = period => {
-    this.updateParams({period});
-  };
-
-  render() {
-    let {organization, children} = this.props;
-
-    // TODO(billy): Is this what we want, only projects user is member of?
-    let projects =
-      organization.projects && organization.projects.filter(({isMember}) => isMember);
-
-    return (
-      <Feature features={['health']} renderDisabled>
-        <HealthContext.Provider value={{actions: this.actions, ...this.state}}>
-          <HealthWrapper>
-            <HealthNavigationMenu />
-            <Content>
-              <Header>
-                <MultipleProjectSelector
-                  organization={organization}
-                  projects={projects}
-                  value={this.state.projects}
-                  onChange={this.handleChangeProjects}
-                />
-                <HeaderSeparator />
-                <MultipleEnvironmentSelector
-                  organization={organization}
-                  value={this.state.environments}
-                  onChange={this.handleChangeEnvironments}
-                />
-                <HeaderSeparator />
-                <TimeRangeSelector
-                  showAbsolute={false}
-                  showRelative
-                  relative={this.state.period}
-                  onChange={this.handleChangeTime}
-                />
-              </Header>
-              <Body>{children}</Body>
-            </Content>
-          </HealthWrapper>
-        </HealthContext.Provider>
-      </Feature>
-    );
-  }
-}
-
-export default withRouter(withLatestContext(OrganizationHealth));
-export {OrganizationHealth};
-
-const HealthWrapper = styled(Flex)`
-  flex: 1;
-  margin-bottom: -20px; /* <footer> has margin-top: 20px; */
-`;
-const Content = styled(Flex)`
-  flex-direction: column;
-  flex: 1;
-  overflow: hidden;
-`;
-
-const Header = styled(Flex)`
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  font-size: 18px;
-  padding: ${space(1)} ${space(4)};
-`;
-
-const Body = styled('div')`
-  flex: 1;
-  padding: ${space(3)};
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/overview.jsx b/src/sentry/static/sentry/app/views/organizationHealth/overview.jsx
deleted file mode 100644
index cd41010ee4..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/overview.jsx
+++ /dev/null
@@ -1,9 +0,0 @@
-import React from 'react';
-
-class OrganizationHealthOverview extends React.Component {
-  render() {
-    return <div>Overview</div>;
-  }
-}
-
-export default OrganizationHealthOverview;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/propTypes/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/propTypes/index.jsx
deleted file mode 100644
index 98710ebfbf..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/propTypes/index.jsx
+++ /dev/null
@@ -1,8 +0,0 @@
-import PropTypes from 'prop-types';
-
-const HealthContextActions = PropTypes.shape({
-  updateParams: PropTypes.func.isRequired,
-  setSpecifier: PropTypes.func.isRequired,
-});
-
-export {HealthContextActions};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/chartMargin.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/chartMargin.jsx
deleted file mode 100644
index b1a5103fa6..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/styles/chartMargin.jsx
+++ /dev/null
@@ -1,12 +0,0 @@
-import {css} from 'react-emotion';
-
-import space from 'app/styles/space';
-
-const chartMargin = css`
-  margin-right: ${space(2)};
-  &:last-child {
-    margin-right: 0;
-  }
-`;
-
-export default chartMargin;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
deleted file mode 100644
index b98924548d..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
+++ /dev/null
@@ -1,12 +0,0 @@
-import styled from 'react-emotion';
-import {Flex} from 'grid-emotion';
-
-import space from 'app/styles/space';
-
-const Header = styled(Flex)`
-  align-items: center;
-  font-size: ${p => p.theme.fontSizeExtraLarge};
-  margin-bottom: ${space(2)};
-`;
-
-export default Header;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx
deleted file mode 100644
index 06bd1290a0..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx
+++ /dev/null
@@ -1,12 +0,0 @@
-import styled from 'react-emotion';
-
-import PanelChart from 'app/components/charts/panelChart';
-
-import chartMargin from './chartMargin';
-
-const HealthPanelChart = styled(PanelChart)`
-  ${chartMargin};
-  flex-shrink: 0;
-  overflow: hidden;
-`;
-export default HealthPanelChart;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthTableChart.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/healthTableChart.jsx
deleted file mode 100644
index 878a566df4..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthTableChart.jsx
+++ /dev/null
@@ -1,12 +0,0 @@
-import styled from 'react-emotion';
-
-import TableChart from 'app/components/charts/tableChart';
-
-import chartMargin from './chartMargin';
-
-const HealthPanelChart = styled(TableChart)`
-  ${chartMargin};
-  flex-shrink: 0;
-  overflow: hidden;
-`;
-export default HealthPanelChart;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/transactions.jsx b/src/sentry/static/sentry/app/views/organizationHealth/transactions.jsx
deleted file mode 100644
index 6b03bdc953..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/transactions.jsx
+++ /dev/null
@@ -1,100 +0,0 @@
-import {Flex} from 'grid-emotion';
-import React from 'react';
-
-import {t} from 'app/locale';
-import AreaChart from 'app/components/charts/areaChart';
-import LineChart from 'app/components/charts/lineChart';
-
-import {HealthContextActions} from './propTypes';
-import HealthPanelChart from './styles/healthPanelChart';
-import EventsTableChart from './eventsTableChart';
-import HealthRequest from './util/healthRequest';
-import withHealth from './util/withHealth';
-
-class OrganizationHealthTransactions extends React.Component {
-  static propTypes = {
-    actions: HealthContextActions,
-  };
-
-  render() {
-    let {className} = this.props;
-    return (
-      <div className={className}>
-        <HealthRequest
-          tag="transaction"
-          showLoading
-          includeTimeseries
-          includeTimeAggregation
-          timeAggregationSeriesName="Transactions"
-          includePrevious
-        >
-          {({timeseriesData, timeAggregatedData, previousTimeseriesData}) => {
-            return (
-              <Flex>
-                <HealthPanelChart
-                  showLegend={false}
-                  height={400}
-                  title={t('Transactions')}
-                  previousPeriod={previousTimeseriesData}
-                >
-                  {props => (
-                    <LineChart isGroupedByDate {...props} series={[timeAggregatedData]} />
-                  )}
-                </HealthPanelChart>
-              </Flex>
-            );
-          }}
-        </HealthRequest>
-
-        <HealthRequest
-          tag="transaction"
-          showLoading
-          includeTop
-          includeTimeseries
-          includeTimeAggregation
-          timeAggregationSeriesName="Transactions"
-          includePercentages
-          includePrevious
-          limit={10}
-        >
-          {({
-            timeseriesData,
-            tagDataWithPercentages,
-            timeAggregatedData,
-            previousTimeseriesData,
-          }) => {
-            return (
-              <React.Fragment>
-                <Flex>
-                  <HealthPanelChart
-                    showLegend={false}
-                    height={400}
-                    title={t('Transactions')}
-                    series={timeseriesData}
-                    previousPeriod={previousTimeseriesData}
-                  >
-                    {props => <AreaChart isGroupedByDate {...props} />}
-                  </HealthPanelChart>
-                </Flex>
-                <Flex>
-                  <EventsTableChart
-                    headers={[
-                      t('Transaction'),
-                      t('Events'),
-                      t('Percentage'),
-                      t('Last event'),
-                    ]}
-                    data={tagDataWithPercentages}
-                  />
-                </Flex>
-              </React.Fragment>
-            );
-          }}
-        </HealthRequest>
-      </div>
-    );
-  }
-}
-
-export default withHealth(OrganizationHealthTransactions);
-export {OrganizationHealthTransactions};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/__mocks__/withHealth.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/__mocks__/withHealth.jsx
deleted file mode 100644
index 6f2a4611ac..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/__mocks__/withHealth.jsx
+++ /dev/null
@@ -1,30 +0,0 @@
-import React from 'react';
-
-import getDisplayName from 'app/utils/getDisplayName';
-import withLatestContext from 'app/utils/withLatestContext';
-
-jest.mock('app/utils/withLatestContext');
-
-const ACTIONS = {
-  actions: {
-    setSpecifier: jest.fn(),
-    updateParams: jest.fn(),
-  },
-};
-
-const withHealthMock = WrappedComponent => {
-  const WrappedWithLatestContext = withLatestContext(WrappedComponent);
-
-  class WithHealthMockWrapper extends React.Component {
-    render() {
-      return <WrappedWithLatestContext {...ACTIONS} {...this.props} />;
-    }
-  }
-  WithHealthMockWrapper.displayName = `withHealthMock(${getDisplayName(
-    WrappedComponent
-  )})`;
-
-  return WithHealthMockWrapper;
-};
-
-export default withHealthMock;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthContext.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthContext.jsx
deleted file mode 100644
index 4ef924b532..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/healthContext.jsx
+++ /dev/null
@@ -1,9 +0,0 @@
-import React from 'react';
-
-const HealthContext = React.createContext({
-  projects: [],
-  environments: [],
-  daterange: '7d',
-});
-
-export default HealthContext;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
deleted file mode 100644
index d5ca10aa9d..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
+++ /dev/null
@@ -1,481 +0,0 @@
-import {isEqual, omitBy} from 'lodash';
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {doHealthRequest} from 'app/actionCreators/health';
-import LoadingPanel from 'app/views/organizationHealth/loadingPanel';
-import SentryTypes from 'app/sentryTypes';
-import withApi from 'app/utils/withApi';
-import withLatestContext from 'app/utils/withLatestContext';
-
-import HealthContext from './healthContext';
-
-class HealthRequestWithParams extends React.Component {
-  static propTypes = {
-    /**
-     * API client instance
-     */
-    api: PropTypes.object.isRequired,
-
-    organization: SentryTypes.Organization.isRequired,
-
-    /**
-     * Health tag (this will use a BASE_URL defined in health actionCreators
-     */
-    tag: PropTypes.string.isRequired,
-
-    /**
-     * List of project ids to query
-     */
-    projects: PropTypes.arrayOf(PropTypes.number),
-
-    /**
-     * List of environments to query
-     */
-    environments: PropTypes.arrayOf(PropTypes.string),
-
-    /**
-     * Relative time period for query.
-     *
-     * Use `start` and `end` for absolute dates.
-     *
-     * e.g. 24h, 7d, 30d
-     */
-    period: PropTypes.string,
-
-    /**
-     * Absolute start date for query
-     */
-    start: PropTypes.instanceOf(Date),
-    /**
-     * Absolute end date for query
-     */
-    end: PropTypes.instanceOf(Date),
-
-    /**
-     * Interval to group results in
-     *
-     * e.g. 1d, 1h, 1m, 1s
-     */
-    interval: PropTypes.string,
-
-    /**
-     * Include data for previous period
-     */
-    includePrevious: PropTypes.bool,
-
-    /**
-     * number of rows to return
-     */
-    limit: PropTypes.number,
-
-    /**
-     * topK value, currently only hardcoded for topk projects
-     */
-    topk: PropTypes.number,
-
-    /**
-     * Callback function to process category
-     */
-    getCategory: PropTypes.func,
-
-    /**
-     * Transform the response data to be something ingestible by charts
-     */
-    includeTransformedData: PropTypes.bool,
-
-    /**
-     * Include a dataset transform that will aggregate count values for each timestamp.
-     * Be sure to supply a name to `timeAggregationSeriesName`
-     */
-    includeTimeAggregation: PropTypes.bool,
-
-    /**
-     * Name of series of aggregated timeseries
-     */
-    timeAggregationSeriesName: PropTypes.string,
-
-    /**
-     * Include a map of series name -> percentage integers
-     *
-     * This is only valid for non-timeseries data
-     */
-    includePercentages: PropTypes.bool,
-
-    includeTimeseries: PropTypes.bool,
-
-    includeTop: PropTypes.bool,
-
-    showLoading: PropTypes.bool,
-  };
-
-  static defaultProps = {
-    period: null,
-    start: null,
-    end: null,
-    interval: '1d',
-    limit: 15,
-    getCategory: i => i,
-
-    includeTimeseries: true,
-    includePrevious: true,
-    includeTransformedData: true,
-  };
-
-  constructor(props) {
-    super(props);
-    this.state = {
-      reloading: false,
-      tagData: null,
-      timeseriesData: null,
-    };
-  }
-
-  componentDidMount() {
-    this.fetchData();
-  }
-
-  componentDidUpdate(prevProps) {
-    const propNamesToIgnore = [
-      'api',
-      'children',
-      'getCategory',
-      'organization',
-      'organizations',
-      'project',
-    ];
-
-    const prevPropsToCheck = omitBy(prevProps, (value, key) =>
-      propNamesToIgnore.includes(key)
-    );
-
-    const propsToCheck = omitBy(this.props, (value, key) =>
-      propNamesToIgnore.includes(key)
-    );
-
-    if (isEqual(prevPropsToCheck, propsToCheck)) return;
-
-    this.fetchData();
-  }
-
-  componentWillUnmount() {
-    this.unmounting = true;
-  }
-
-  fetchData = async () => {
-    const {tag} = this.props;
-
-    this.setState(state => ({
-      reloading: state.tagData !== null && state.timeseriesData !== null,
-    }));
-
-    // If `includeTop` is defined and > 0, we need to fetch the top tags ordered by count
-    // And then if we need timeseries, we'll pass the specific tag values into the timeseries query
-    // to fetch only the counts for those tag values.
-    const tagData = await this.fetchTopTag();
-    const tagSpecifiers =
-      (tagData &&
-        tagData.data &&
-        tagData.data
-          .map(({[tag]: tagObject}) => tagObject && tagObject._health_id)
-          .filter(id => !!id)) ||
-      null;
-
-    const timeseriesData = await this.fetchTimeseriesData({
-      ...(tagSpecifiers && tagSpecifiers.length
-        ? {
-            specifiers: tagSpecifiers,
-          }
-        : {}),
-    });
-
-    if (this.unmounting) return;
-
-    this.setState({
-      reloading: false,
-      tagData,
-      timeseriesData,
-    });
-  };
-
-  fetchTopTag = otherProps => {
-    const {api, includeTop, ...props} = this.props;
-
-    if (!includeTop) return Promise.resolve({});
-
-    return doHealthRequest(api, {...props, ...otherProps, timeseries: false});
-  };
-
-  fetchTimeseriesData = otherProps => {
-    const {api, includeTimeseries, ...props} = this.props;
-    if (!includeTimeseries) return Promise.resolve({});
-    return doHealthRequest(api, {...props, ...otherProps, timeseries: true});
-  };
-
-  // Is going to be called with an object with `value` and `_health_id`
-  getCategory = ({value} = {}) => {
-    return this.props.getCategory(value);
-  };
-
-  /**
-   * Retrieves data set for the current period (since data can potentially contain previous period's data), as
-   * well as the previous period if possible.
-   *
-   * Returns `null` if data does not exist
-   */
-  getData = (data, isTimeseries) => {
-    const {includePrevious} = this.props;
-
-    if (!data) {
-      return {
-        previous: null,
-        current: null,
-      };
-    }
-
-    const hasPreviousPeriod = isTimeseries && includePrevious;
-    // Take the floor just in case, but data should always be divisible by 2
-    const dataMiddleIndex = Math.floor(data.length / 2);
-
-    return {
-      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,
-      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,
-    };
-  };
-
-  // This aggregates all values per `timestamp`
-  calculateTotalsPerTimestamp = (data, getName = timestamp => timestamp * 1000) => {
-    return data.map(([timestamp, countArray], i) => ({
-      name: getName(timestamp, countArray, i),
-      value: countArray.reduce((acc, {count}) => acc + count, 0),
-    }));
-  };
-
-  transformSeriesPercentageMap = (transformedData, total) => {
-    return new Map(
-      transformedData.map(([name, value]) => [
-        name,
-        Math.round(value / total * 10000) / 100,
-      ])
-    );
-  };
-
-  /**
-   * Get previous period data, but transform timestampts so that data fits unto the current period's data axis
-   */
-  transformPreviousPeriodData = (current, previous) => {
-    // Need the current period data array so we can take the timestamp
-    // so we can be sure the data lines up
-    if (!previous) return [];
-
-    return {
-      seriesName: 'Previous Period',
-      data: this.calculateTotalsPerTimestamp(
-        previous,
-        (timestamp, countArray, i) => current[i][0] * 1000
-      ),
-    };
-  };
-
-  /**
-   * Aggregate all counts for each time stamp
-   */
-  transformAggregatedTimeseries = (data, seriesName) => {
-    if (!data) return null;
-
-    return {
-      seriesName,
-      data: this.calculateTotalsPerTimestamp(data),
-    };
-  };
-
-  /**
-   * Transforms query response into timeseries data to be used in a chart
-   */
-  transformTimeseriesData = (data, tag) => {
-    const categorySet = new Set();
-    const timestampMap = new Map();
-
-    data.forEach(([timestamp, resultsForTimestamp]) => {
-      resultsForTimestamp &&
-        !!resultsForTimestamp.length &&
-        resultsForTimestamp.forEach(({count, [tag]: tagObject}) => {
-          const category = this.getCategory(tagObject);
-          const timestampKey = `${timestamp}-${this.getCategory(tagObject)}`;
-          categorySet.add(category);
-
-          // aggregate if exists
-          timestampMap.set(
-            timestampKey,
-            timestampMap.has(timestampKey)
-              ? timestampMap.get(timestampKey) + count
-              : count
-          );
-        });
-    });
-
-    return Array.from(categorySet).map(seriesName => {
-      return {
-        seriesName,
-        data: data.map(([timestamp]) => ({
-          name: timestamp * 1000,
-          value: timestampMap.get(`${timestamp}-${seriesName}`) || 0,
-        })),
-      };
-    });
-  };
-
-  /**
-   * Transforms query response into a non-timeseries data to be used in a chart
-   */
-  transformNonTimeSeriesData = (data, tag) =>
-    data.map(({[tag]: tagObject, count}) => [this.getCategory(tagObject), count]);
-
-  transformData = (data, isTimeseries) => {
-    const {tag} = this.props;
-    if (!data) return null;
-
-    return isTimeseries
-      ? this.transformTimeseriesData(data, tag)
-      : this.transformNonTimeSeriesData(data, tag);
-  };
-
-  processData({data, totals} = {}, isTimeseries) {
-    const {
-      tag,
-      includeTransformedData,
-      includePercentages,
-      includeTimeAggregation,
-      includeTop,
-      timeAggregationSeriesName,
-    } = this.props;
-    const shouldIncludePercentages = includePercentages && includeTop && !isTimeseries;
-    const {current, previous} = this.getData(data, isTimeseries);
-    const transformedData =
-      includeTransformedData || shouldIncludePercentages
-        ? this.transformData(current, isTimeseries)
-        : null;
-
-    const percentageMap =
-      shouldIncludePercentages &&
-      totals &&
-      this.transformSeriesPercentageMap(transformedData, totals.count);
-
-    const dataWithPercentages =
-      shouldIncludePercentages && current
-        ? current.map(({count, lastCount, [tag]: tagObject}) => {
-            const name = this.getCategory(tagObject);
-
-            return {
-              count,
-              lastCount,
-              name,
-              percentage: percentageMap.get(name),
-            };
-          })
-        : null;
-
-    const previousData =
-      isTimeseries && includeTransformedData
-        ? this.transformPreviousPeriodData(current, previous)
-        : null;
-
-    const timeAggregatedData =
-      isTimeseries && includeTimeAggregation
-        ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName)
-        : null;
-
-    return {
-      data: transformedData,
-      allData: data,
-      originalData: current,
-      totals,
-      originalPreviousData: previous,
-      previousData,
-      timeAggregatedData,
-      dataWithPercentages,
-    };
-  }
-
-  render() {
-    const {children, tag, showLoading, ...props} = this.props;
-
-    const {tagData, timeseriesData, reloading} = this.state;
-
-    // Is "loading" if data is null
-    const loading = reloading || (tagData === null || timeseriesData === null);
-
-    if (showLoading && loading) {
-      return <LoadingPanel />;
-    }
-
-    const {
-      data: transformedTagData,
-      allData: allTagData,
-      originalData: originalTagData,
-      totals: tagTotals,
-      dataWithPercentages: tagDataWithPercentages,
-    } =
-      (tagData && this.processData(tagData)) || {};
-
-    const {
-      data: transformedTimeseriesData,
-      allData: allTimeseriesData,
-      originalData: originalTimeseriesData,
-      totals: timeseriesTotals,
-      originalPreviousData: originalPreviousTimeseriesData,
-      previousData: previousTimeseriesData,
-      timeAggregatedData,
-    } =
-      (timeseriesData && this.processData(timeseriesData, true)) || {};
-
-    return children({
-      loading,
-
-      // tg data
-      tagData: transformedTagData,
-      allTagData,
-      originalTagData,
-      tagTotals,
-      tagDataWithPercentages,
-
-      // timeseries data
-      timeseriesData: transformedTimeseriesData,
-      allTimeseriesData,
-      originalTimeseriesData,
-      timeseriesTotals,
-      originalPreviousTimeseriesData,
-      previousTimeseriesData,
-      timeAggregatedData,
-
-      // sometimes we want to reference props that were given to HealthRequest
-      tag,
-      ...props,
-    });
-  }
-}
-
-const HealthRequest = withLatestContext(
-  withApi(
-    class HealthRequest extends React.Component {
-      render() {
-        return (
-          <HealthContext.Consumer>
-            {({projects, environments, period, filters}) => (
-              <HealthRequestWithParams
-                projects={projects}
-                environments={environments}
-                period={period}
-                filters={filters}
-                {...this.props}
-              />
-            )}
-          </HealthContext.Consumer>
-        );
-      }
-    }
-  )
-);
-
-export default HealthRequest;
-export {HealthRequestWithParams};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx
deleted file mode 100644
index 075cda512c..0000000000
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx
+++ /dev/null
@@ -1,29 +0,0 @@
-import React from 'react';
-
-import getDisplayName from 'app/utils/getDisplayName';
-import withLatestContext from 'app/utils/withLatestContext';
-
-import HealthContext from './healthContext';
-
-/**
- * HoC that provides component with properties from `HealthContext`
- */
-const withHealth = WrappedComponent => {
-  const WrappedWithLatestContext = withLatestContext(WrappedComponent);
-
-  class WithHealth extends React.Component {
-    render() {
-      return (
-        <HealthContext.Consumer>
-          {context => <WrappedWithLatestContext {...context} {...this.props} />}
-        </HealthContext.Consumer>
-      );
-    }
-  }
-
-  WithHealth.displayName = `withHealth(${getDisplayName(WrappedComponent)})`;
-
-  return WithHealth;
-};
-
-export default withHealth;
diff --git a/tests/acceptance/test_health.py b/tests/acceptance/test_health.py
deleted file mode 100644
index 606aed11df..0000000000
--- a/tests/acceptance/test_health.py
+++ /dev/null
@@ -1,53 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.testutils import AcceptanceTestCase
-
-
-class HealthTest(AcceptanceTestCase):
-    def setUp(self):
-        super(HealthTest, self).setUp()
-        self.user = self.create_user('foo@example.com')
-        self.org = self.create_organization(
-            name='Rowdy Tiger Rowdy Tiger',
-            owner=None,
-        )
-        self.team = self.create_team(organization=self.org, name='Mariachi Band Mariachi Band')
-        self.project = self.create_project(
-            organization=self.org,
-            teams=[self.team],
-            name='Bengal',
-        )
-
-        self.create_member(
-            user=self.user,
-            organization=self.org,
-            role='owner',
-            teams=[self.team],
-        )
-
-        self.login_as(self.user)
-        self.path = u'/organizations/{}/health'.format(self.org.slug)
-
-    def test_overview_without_feature_flag(self):
-        self.browser.get(u'{}/'.format(self.path))
-        self.browser.wait_until_not('.loading-indicator')
-        self.browser.snapshot('health overview - no permissions')
-
-    def test_overview(self):
-        with self.feature('organizations:health'):
-            self.browser.get(u'{}/'.format(self.path))
-            self.browser.wait_until_not('.loading-indicator')
-            self.browser.snapshot('health overview')
-
-    # TODO(billyvg): Skipping until API endpoints are ready
-    #  def test_errors(self):
-        #  with self.feature('organizations:health'):
-            #  self.browser.get('{}/errors/'.format(self.path))
-            #  self.browser.wait_until_not('.loading-indicator')
-            #  self.browser.snapshot('health errors')
-
-    #  def test_transactions(self):
-        #  with self.feature('organizations:health'):
-            #  self.browser.get('{}/transactions/'.format(self.path))
-            #  self.browser.wait_until_not('.loading-indicator')
-            #  self.browser.snapshot('health transactions')
diff --git a/tests/js/spec/views/organizationHealth/__snapshots__/overview.spec.jsx.snap b/tests/js/spec/views/organizationHealth/__snapshots__/overview.spec.jsx.snap
deleted file mode 100644
index 3d29b27357..0000000000
--- a/tests/js/spec/views/organizationHealth/__snapshots__/overview.spec.jsx.snap
+++ /dev/null
@@ -1,9 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`OrganizationHealthOverview renders 1`] = `
-<OrganizationHealthOverview>
-  <div>
-    Overview
-  </div>
-</OrganizationHealthOverview>
-`;
diff --git a/tests/js/spec/views/organizationHealth/browsers.spec.jsx b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
deleted file mode 100644
index 4afa4d13ef..0000000000
--- a/tests/js/spec/views/organizationHealth/browsers.spec.jsx
+++ /dev/null
@@ -1,35 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import OrganizationHealthBrowsers from 'app/views/organizationHealth/browsers';
-
-jest.mock('app/views/organizationHealth/util/withHealth');
-jest.mock('app/utils/withLatestContext');
-
-describe('OrganizationHealthBrowsers', function() {
-  const org = TestStubs.Organization();
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/top/',
-    body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query);
-    },
-  });
-
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/graph/',
-    body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query);
-    },
-  });
-
-  it('renders with PieChart, and EventTableChart', async function() {
-    let wrapper = mount(
-      <OrganizationHealthBrowsers organization={org} />,
-      TestStubs.routerContext()
-    );
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('PieChart')).toHaveLength(2);
-    expect(wrapper.find('EventsTableChart')).toHaveLength(1);
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/devices.spec.jsx b/tests/js/spec/views/organizationHealth/devices.spec.jsx
deleted file mode 100644
index fd3a55db0c..0000000000
--- a/tests/js/spec/views/organizationHealth/devices.spec.jsx
+++ /dev/null
@@ -1,39 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import OrganizationHealthDevices from 'app/views/organizationHealth/devices';
-
-jest.mock('app/utils/withLatestContext');
-jest.mock('app/views/organizationHealth/util/withHealth');
-
-describe('OrganizationHealthDevices', function() {
-  const org = TestStubs.Organization();
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/top/',
-    body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query);
-    },
-  });
-
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/graph/',
-    body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query);
-    },
-  });
-
-  it('renders with PieChart, and EventTableChart', async function() {
-    let wrapper = mount(
-      <OrganizationHealthDevices
-        actions={{updateParams: jest.fn(), setSpecifier: jest.fn()}}
-        router={TestStubs.router()}
-        organization={org}
-      />,
-      TestStubs.routerContext()
-    );
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('PieChart')).toHaveLength(1);
-    expect(wrapper.find('EventsTableChart')).toHaveLength(1);
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/errors.spec.jsx b/tests/js/spec/views/organizationHealth/errors.spec.jsx
deleted file mode 100644
index 9dbe42ff70..0000000000
--- a/tests/js/spec/views/organizationHealth/errors.spec.jsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import OrganizationHealthErrors from 'app/views/organizationHealth/errors';
-
-jest.mock('app/utils/withLatestContext');
-
-describe('OrganizationHealthErrors', function() {
-  const org = TestStubs.Organization();
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/top/',
-    body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query);
-    },
-  });
-
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/graph/',
-    body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query);
-    },
-  });
-
-  it('renders with PieChart, and EventTableChart', async function() {
-    let wrapper = mount(
-      <OrganizationHealthErrors organization={org} />,
-      TestStubs.routerContext()
-    );
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/eventsTableChart.spec.jsx b/tests/js/spec/views/organizationHealth/eventsTableChart.spec.jsx
deleted file mode 100644
index 610b93b3a7..0000000000
--- a/tests/js/spec/views/organizationHealth/eventsTableChart.spec.jsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-import EventsTableChart from 'app/views/organizationHealth/eventsTableChart';
-
-describe('EventsTableChart', function() {
-  let wrapper;
-
-  beforeEach(function() {
-    wrapper = mount(
-      <EventsTableChart
-        headers={['User', <span key="events-column">Events</span>, null, 'Last Column']}
-        data={[
-          {
-            count: 40,
-            lastCount: 20,
-            name: 'billy',
-            percentage: 40,
-          },
-          {
-            count: 60,
-            lastCount: 120,
-            name: 'not billy',
-            percentage: 60,
-          },
-        ]}
-      />
-    );
-  });
-
-  it('renders headers', function() {
-    expect(
-      wrapper.find('PanelHeader NameAndEventsContainer').prop('children')
-    ).toHaveLength(2);
-
-    expect(wrapper.find('PanelHeader').text()).toContain('User');
-    expect(wrapper.find('PanelHeader').text()).toContain('Events');
-    expect(wrapper.find('PanelHeader').text()).toContain('Last Column');
-  });
-
-  it('renders data rows', function() {
-    expect(wrapper.find('TableChartRow')).toHaveLength(2);
-
-    expect(
-      wrapper
-        .find('TableChartRow Name')
-        .at(0)
-        .text()
-    ).toBe('billy');
-
-    expect(
-      wrapper
-        .find('TableChartRow Events DeltaCaret')
-        .at(0)
-        .prop('direction')
-    ).toBeGreaterThan(0);
-
-    expect(
-      wrapper
-        .find('TableChartRow Bar')
-        .at(0)
-        .prop('width')
-    ).toBe(40);
-
-    expect(
-      wrapper
-        .find('TableChartRow Name')
-        .at(1)
-        .text()
-    ).toBe('not billy');
-
-    expect(
-      wrapper
-        .find('TableChartRow Events DeltaCaret')
-        .at(1)
-        .prop('direction')
-    ).toBeLessThan(0);
-
-    expect(
-      wrapper
-        .find('TableChartRow Bar')
-        .at(1)
-        .prop('width')
-    ).toBe(60);
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/index.spec.jsx b/tests/js/spec/views/organizationHealth/index.spec.jsx
deleted file mode 100644
index bcc7696093..0000000000
--- a/tests/js/spec/views/organizationHealth/index.spec.jsx
+++ /dev/null
@@ -1,83 +0,0 @@
-import React from 'react';
-
-import {OrganizationHealth} from 'app/views/organizationHealth';
-import {mount} from 'enzyme';
-import {setActiveOrganization} from 'app/actionCreators/organizations';
-
-describe('OrganizationHealth', function() {
-  let wrapper;
-  const router = TestStubs.router({
-    location: {
-      pathname: '/organizations/org-slug/health/',
-      query: {},
-    },
-  });
-  const project = TestStubs.Project({isMember: true});
-  const organization = TestStubs.Organization({
-    features: ['health'],
-    projects: [project],
-  });
-
-  beforeAll(async function() {
-    MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/environments/`,
-      body: TestStubs.Environments(),
-    });
-
-    setActiveOrganization(organization);
-    await tick();
-
-    wrapper = mount(
-      <OrganizationHealth router={router} organization={organization}>
-        <div />
-      </OrganizationHealth>,
-      TestStubs.routerContext([
-        {
-          organization,
-        },
-      ])
-    );
-  });
-
-  it('renders', function() {
-    expect(wrapper.find('HealthWrapper')).toHaveLength(1);
-  });
-
-  it('updates component state when router is updated', async function() {
-    wrapper = mount(
-      <OrganizationHealth router={router} organization={organization}>
-        <div />
-      </OrganizationHealth>,
-      TestStubs.routerContext([
-        {
-          organization,
-        },
-      ])
-    );
-    expect(wrapper.state('environments')).toEqual([]);
-
-    wrapper.setProps({
-      router: {
-        location: {
-          pathname: '/organizations/org-slug/health/',
-          query: {
-            environments: ['production'],
-          },
-        },
-      },
-    });
-    expect(wrapper.state('environments')).toEqual(['production']);
-
-    wrapper.setProps({
-      router: {
-        location: {
-          pathname: '/organizations/org-slug/health/',
-          query: {
-            environments: ['production', 'staging'],
-          },
-        },
-      },
-    });
-    expect(wrapper.state('environments')).toEqual(['production', 'staging']);
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/overview.spec.jsx b/tests/js/spec/views/organizationHealth/overview.spec.jsx
deleted file mode 100644
index 27b32eafdd..0000000000
--- a/tests/js/spec/views/organizationHealth/overview.spec.jsx
+++ /dev/null
@@ -1,11 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import OrganizationHealthOverview from 'app/views/organizationHealth/overview';
-
-describe('OrganizationHealthOverview', function() {
-  it('renders', function() {
-    let wrapper = mount(<OrganizationHealthOverview />);
-    expect(wrapper).toMatchSnapshot();
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/transactions.spec.jsx b/tests/js/spec/views/organizationHealth/transactions.spec.jsx
deleted file mode 100644
index aefb18cbbc..0000000000
--- a/tests/js/spec/views/organizationHealth/transactions.spec.jsx
+++ /dev/null
@@ -1,35 +0,0 @@
-import React from 'react';
-import {mount} from 'enzyme';
-
-import OrganizationHealthTransactions from 'app/views/organizationHealth/transactions';
-
-jest.mock('app/utils/withLatestContext');
-
-describe('OrganizationHealthTransactions', function() {
-  const org = TestStubs.Organization();
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/top/',
-    body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query);
-    },
-  });
-
-  MockApiClient.addMockResponse({
-    url: '/organizations/org-slug/health/graph/',
-    body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query);
-    },
-  });
-
-  it('renders with LineChart, AreaChart, and TableChart', async function() {
-    let wrapper = mount(
-      <OrganizationHealthTransactions organization={org} />,
-      TestStubs.routerContext()
-    );
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('TableChart')).toHaveLength(1);
-    expect(wrapper.find('AreaChart')).toHaveLength(1);
-    expect(wrapper.find('LineChart')).toHaveLength(1);
-  });
-});
diff --git a/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx b/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
deleted file mode 100644
index e763f9aa3a..0000000000
--- a/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
+++ /dev/null
@@ -1,503 +0,0 @@
-import {mount} from 'enzyme';
-import React from 'react';
-
-import {doHealthRequest} from 'app/actionCreators/health';
-import {HealthRequestWithParams} from 'app/views/organizationHealth/util/healthRequest';
-
-const COUNT_OBJ = {
-  count: 123,
-  release: {
-    _health_id: 'release:release-slug',
-    value: {slug: 'release-slug'},
-  },
-};
-
-jest.mock('app/actionCreators/health', () => {
-  return {
-    doHealthRequest: jest.fn(),
-  };
-});
-
-describe('HealthRequest', function() {
-  const project = TestStubs.Project();
-  const organization = TestStubs.Organization();
-  const mock = jest.fn(() => null);
-  const DEFAULTS = {
-    api: {},
-    projects: [parseInt(project.id, 10)],
-    environments: [],
-    period: '24h',
-    organization,
-    tag: 'release',
-    includePrevious: false,
-    includeTimeseries: true,
-  };
-
-  let wrapper;
-
-  describe('with props changes', function() {
-    beforeAll(function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [[new Date(), [COUNT_OBJ]]],
-        })
-      );
-      wrapper = mount(
-        <HealthRequestWithParams {...DEFAULTS}>{mock}</HealthRequestWithParams>
-      );
-    });
-
-    it('makes requests', async function() {
-      expect(mock).toHaveBeenNthCalledWith(
-        1,
-        expect.objectContaining({
-          loading: true,
-        })
-      );
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          loading: false,
-          timeseriesData: [
-            {
-              seriesName: expect.anything(),
-              data: [
-                expect.objectContaining({
-                  name: expect.any(Number),
-                  value: 123,
-                }),
-              ],
-            },
-          ],
-          originalTimeseriesData: [[expect.anything(), expect.anything()]],
-          tagData: null,
-          originalTagData: null,
-        })
-      );
-
-      expect(doHealthRequest).toHaveBeenCalled();
-    });
-
-    it('makes a new request if projects prop changes', async function() {
-      doHealthRequest.mockClear();
-
-      wrapper.setProps({projects: [123]});
-      await tick();
-      wrapper.update();
-      expect(doHealthRequest).toHaveBeenCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          projects: [123],
-        })
-      );
-    });
-
-    it('makes a new request if environments prop changes', async function() {
-      doHealthRequest.mockClear();
-
-      wrapper.setProps({environments: ['dev']});
-      await tick();
-      wrapper.update();
-      expect(doHealthRequest).toHaveBeenCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          environments: ['dev'],
-        })
-      );
-    });
-
-    it('makes a new request if period prop changes', async function() {
-      doHealthRequest.mockClear();
-
-      wrapper.setProps({period: '7d'});
-      await tick();
-      wrapper.update();
-      expect(doHealthRequest).toHaveBeenCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          period: '7d',
-        })
-      );
-    });
-
-    it('makes a new request if includeTimeseries prop changes', async function() {
-      doHealthRequest.mockClear();
-
-      wrapper.setProps({includeTimeseries: false, includeTop: true});
-      await tick();
-      wrapper.update();
-      expect(doHealthRequest).toHaveBeenCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          timeseries: false,
-        })
-      );
-    });
-  });
-
-  describe('transforms', function() {
-    beforeEach(function() {
-      doHealthRequest.mockClear();
-    });
-
-    it('defines a category name getter', async function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [[new Date(), [COUNT_OBJ]]],
-        })
-      );
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          getCategory={release => release && release.slug}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-      await tick();
-      wrapper.update();
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          loading: false,
-          timeseriesData: [
-            {
-              seriesName: 'release-slug',
-              data: [
-                expect.objectContaining({
-                  name: expect.anything(),
-                  value: 123,
-                }),
-              ],
-            },
-          ],
-          originalTimeseriesData: [[expect.anything(), expect.anything()]],
-        })
-      );
-    });
-
-    it('expands period in query if `includePrevious` and `timeseries`', async function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [
-            [new Date(), [{...COUNT_OBJ, count: 321}, {...COUNT_OBJ, count: 79}]],
-            [new Date(), [COUNT_OBJ]],
-          ],
-        })
-      );
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          includeTimeseries={true}
-          includePrevious={true}
-          getCategory={({slug} = {}) => slug}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-
-      await tick();
-      wrapper.update();
-
-      // actionCreator handles expanding the period when calling the API
-      expect(doHealthRequest).toHaveBeenCalledWith(
-        expect.anything(),
-        expect.objectContaining({
-          period: '24h',
-        })
-      );
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          loading: false,
-          allTimeseriesData: [
-            [
-              expect.anything(),
-              [
-                expect.objectContaining({count: 321}),
-                expect.objectContaining({count: 79}),
-              ],
-            ],
-            [expect.anything(), [expect.objectContaining({count: 123})]],
-          ],
-          timeseriesData: [
-            {
-              seriesName: expect.anything(),
-              data: [
-                expect.objectContaining({
-                  name: expect.anything(),
-                  value: 123,
-                }),
-              ],
-            },
-          ],
-          previousTimeseriesData: {
-            seriesName: 'Previous Period',
-            data: [
-              expect.objectContaining({
-                name: expect.anything(),
-                value: 400,
-              }),
-            ],
-          },
-
-          originalTimeseriesData: [
-            [expect.anything(), [expect.objectContaining({count: 123})]],
-          ],
-
-          originalPreviousTimeseriesData: [
-            [
-              expect.anything(),
-              [
-                expect.objectContaining({count: 321}),
-                expect.objectContaining({count: 79}),
-              ],
-            ],
-          ],
-        })
-      );
-    });
-
-    it('transforms data for non-timeseries response', async function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [COUNT_OBJ],
-        })
-      );
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          includeTimeseries={false}
-          includeTop={true}
-          getCategory={({slug} = {}) => slug}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          loading: false,
-          tagData: [['release-slug', 123]],
-          originalTagData: [
-            {
-              count: 123,
-              release: {
-                value: {slug: 'release-slug'},
-                _health_id: 'release:release-slug',
-              },
-            },
-          ],
-        })
-      );
-    });
-
-    it('transforms data with percentages only when `includPercentages` prop is true', async function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [
-            {...COUNT_OBJ, count: 100, lastCount: 50},
-            {
-              count: 80,
-              lastCount: 100,
-              release: {
-                value: {
-                  slug: 'new-release',
-                },
-              },
-            },
-          ],
-          totals: {
-            count: 180,
-          },
-        })
-      );
-
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          includeTimeseries={false}
-          includeTop={true}
-          includePercentages={false}
-          getCategory={({slug} = {}) => slug}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          tagDataWithPercentages: null,
-        })
-      );
-
-      wrapper.setProps({includePercentages: true});
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          tagDataWithPercentages: [
-            expect.objectContaining({
-              count: 100,
-              lastCount: 50,
-              percentage: 55.56,
-            }),
-            expect.objectContaining({
-              count: 80,
-              lastCount: 100,
-              percentage: 44.44,
-            }),
-          ],
-        })
-      );
-    });
-
-    it('aggregates counts per timestamp only when `includeTimeAggregation` prop is true', async function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [[new Date(), [COUNT_OBJ, {...COUNT_OBJ, count: 100}]]],
-        })
-      );
-
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          includeTimeseries={true}
-          getCategory={({slug} = {}) => slug}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          timeAggregatedData: null,
-        })
-      );
-
-      wrapper.setProps({
-        includeTimeAggregation: true,
-        timeAggregationSeriesName: 'aggregated series',
-      });
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          timeAggregatedData: {
-            seriesName: 'aggregated series',
-            data: [{name: expect.anything(), value: 223}],
-          },
-        })
-      );
-    });
-
-    it('aggregates all counts per timestamp when category name identical', async function() {
-      doHealthRequest.mockImplementation(() =>
-        Promise.resolve({
-          data: [[new Date(), [COUNT_OBJ, {...COUNT_OBJ, count: 100}]]],
-        })
-      );
-
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          includeTimeseries={true}
-          getCategory={() => 'static-category'}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          timeAggregatedData: null,
-        })
-      );
-
-      wrapper.setProps({
-        includeTimeAggregation: true,
-        timeAggregationSeriesName: 'aggregated series',
-      });
-      await tick();
-      wrapper.update();
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          timeAggregatedData: {
-            seriesName: 'aggregated series',
-            data: [{name: expect.anything(), value: 223}],
-          },
-        })
-      );
-    });
-
-    it('transparently queries for top tags and then queries for timeseries data using only those top tags', async function() {
-      doHealthRequest.mockClear();
-      doHealthRequest.mockImplementation((api, props) => {
-        if (props.timeseries) {
-          return Promise.resolve({
-            data: [[new Date(), [COUNT_OBJ, {...COUNT_OBJ, count: 100}]]],
-          });
-        }
-
-        return Promise.resolve({
-          data: [{...COUNT_OBJ, count: 100}],
-          totals: {
-            count: 100,
-            lastCount: 50,
-          },
-        });
-      });
-
-      wrapper = mount(
-        <HealthRequestWithParams
-          {...DEFAULTS}
-          includeTop
-          includeTimeseries
-          includePercentages
-          includeTimeAggregation
-          includePrevious
-          timeAggregationSeriesName="Aggregated"
-          getCategory={({slug} = {}) => slug}
-        >
-          {mock}
-        </HealthRequestWithParams>
-      );
-
-      await tick();
-      wrapper.update();
-
-      expect(doHealthRequest).toHaveBeenCalledTimes(2);
-      expect(doHealthRequest).toHaveBeenNthCalledWith(
-        2,
-        expect.anything(),
-        expect.objectContaining({
-          timeseries: true,
-          specifiers: ['release:release-slug'],
-        })
-      );
-
-      expect(mock).toHaveBeenLastCalledWith(
-        expect.objectContaining({
-          timeAggregatedData: {
-            seriesName: 'Aggregated',
-            data: [{name: expect.anything(), value: 223}],
-          },
-        })
-      );
-    });
-  });
-});
