commit 28effbf842cece76a0e4ffa6b1aa8677f58e55c5
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Nov 30 10:40:44 2018 -0800

    fix(eventstream): Add skip_consume to task state for Kafka backend (#10843)

diff --git a/src/sentry/eventstream/kafka/backend.py b/src/sentry/eventstream/kafka/backend.py
index 1651e2558d..3abff1cb5e 100644
--- a/src/sentry/eventstream/kafka/backend.py
+++ b/src/sentry/eventstream/kafka/backend.py
@@ -13,7 +13,7 @@ from sentry import options, quotas
 from sentry.models import Organization
 from sentry.eventstream.base import EventStream
 from sentry.eventstream.kafka.consumer import SynchronizedConsumer
-from sentry.eventstream.kafka.protocol import parse_event_message
+from sentry.eventstream.kafka.protocol import get_task_kwargs_for_message
 from sentry.tasks.post_process import post_process_group
 from sentry.utils import json
 
@@ -147,6 +147,7 @@ class KafkaEventStream(EventStream):
             'is_sample': is_sample,
             'is_regression': is_regression,
             'is_new_group_environment': is_new_group_environment,
+            'skip_consume': skip_consume,
         },))
 
     def start_delete_groups(self, project_id, group_ids):
@@ -351,9 +352,9 @@ class KafkaEventStream(EventStream):
                 i = i + 1
                 owned_partition_offsets[key] = message.offset() + 1
 
-                payload = parse_event_message(message.value())
-                if payload is not None:
-                    post_process_group.delay(**payload)
+                task_kwargs = get_task_kwargs_for_message(message.value())
+                if task_kwargs is not None:
+                    post_process_group.delay(**task_kwargs)
 
                 if i % commit_batch_size == 0:
                     commit_offsets()
diff --git a/src/sentry/eventstream/kafka/protocol.py b/src/sentry/eventstream/kafka/protocol.py
index 33aa7046ae..494967276f 100644
--- a/src/sentry/eventstream/kafka/protocol.py
+++ b/src/sentry/eventstream/kafka/protocol.py
@@ -20,6 +20,9 @@ def basic_protocol_handler(unsupported_operations):
     # so this function builds a handler function that can deal with both.
 
     def get_task_kwargs_for_insert(operation, event_data, task_state=None):
+        if task_state and task_state.get('skip_consume', False):
+            return None  # nothing to do
+
         event_data['datetime'] = datetime.strptime(
             event_data['datetime'],
             "%Y-%m-%dT%H:%M:%S.%fZ",
@@ -83,7 +86,7 @@ class InvalidVersion(Exception):
     pass
 
 
-def parse_event_message(value):
+def get_task_kwargs_for_message(value):
     """
     Decodes a message body, returning a dictionary of keyword arguments that
     can be applied to a post-processing task, or ``None`` if no task should be
diff --git a/tests/sentry/eventstream/kafka/test_protocol.py b/tests/sentry/eventstream/kafka/test_protocol.py
index d8e8abc7a0..b2a65149ea 100644
--- a/tests/sentry/eventstream/kafka/test_protocol.py
+++ b/tests/sentry/eventstream/kafka/test_protocol.py
@@ -8,22 +8,22 @@ from sentry.eventstream.kafka.protocol import (
     InvalidPayload,
     InvalidVersion,
     UnexpectedOperation,
-    parse_event_message,
+    get_task_kwargs_for_message,
 )
 from sentry.utils import json
 
 
-def test_parse_event_message_invalid_payload():
+def test_get_task_kwargs_for_message_invalid_payload():
     with pytest.raises(InvalidPayload):
-        parse_event_message('{"format": "invalid"}')
+        get_task_kwargs_for_message('{"format": "invalid"}')
 
 
-def test_parse_event_message_invalid_version():
+def test_get_task_kwargs_for_message_invalid_version():
     with pytest.raises(InvalidVersion):
-        parse_event_message(json.dumps([0, 'insert', {}]))
+        get_task_kwargs_for_message(json.dumps([0, 'insert', {}]))
 
 
-def test_parse_event_message_version_1():
+def test_get_task_kwargs_for_message_version_1():
     event_data = {
         'project_id': 1,
         'group_id': 2,
@@ -43,7 +43,7 @@ def test_parse_event_message_version_1():
         'is_new_group_environment': True,
     }
 
-    kwargs = parse_event_message(json.dumps([1, 'insert', event_data, task_state]))
+    kwargs = get_task_kwargs_for_message(json.dumps([1, 'insert', event_data, task_state]))
     event = kwargs.pop('event')
     assert event.project_id == 1
     assert event.group_id == 2
@@ -63,10 +63,15 @@ def test_parse_event_message_version_1():
     assert not kwargs, 'unexpected values remaining: {!r}'.format(kwargs)
 
 
-def test_parse_event_message_version_1_unsupported_operation():
-    assert parse_event_message(json.dumps([1, 'delete', {}])) is None
+def test_get_task_kwargs_for_message_version_1_skip_consume():
+    assert get_task_kwargs_for_message(json.dumps(
+        [1, 'insert', {}, {'skip_consume': True}])) is None
 
 
-def test_parse_event_message_version_1_unexpected_operation():
+def test_get_task_kwargs_for_message_version_1_unsupported_operation():
+    assert get_task_kwargs_for_message(json.dumps([1, 'delete', {}])) is None
+
+
+def test_get_task_kwargs_for_message_version_1_unexpected_operation():
     with pytest.raises(UnexpectedOperation):
-        parse_event_message(json.dumps([1, 'invalid', {}, {}]))
+        get_task_kwargs_for_message(json.dumps([1, 'invalid', {}, {}]))
