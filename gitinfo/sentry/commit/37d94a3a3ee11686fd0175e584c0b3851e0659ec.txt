commit 37d94a3a3ee11686fd0175e584c0b3851e0659ec
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Jun 14 15:21:31 2017 +0200

    Add regex check for function names for in_app detection react native

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 2ffd8d5f55..1789dbda0c 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -191,6 +191,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             # backend.  We only assemble the bare minimum we need here.
             instruction_addr = processable_frame.data['instruction_addr']
             in_app = self.sym.is_in_app(instruction_addr)
+            in_app = (in_app and not self.sym.is_internal_function(raw_frame.get('function')))
             if raw_frame.get('in_app') is None:
                 raw_frame['in_app'] = in_app
             img_uuid = processable_frame.data['image_uuid']
@@ -260,7 +261,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             if sfrm.get('package'):
                 new_frame['package'] = sfrm['package']
             if new_frame.get('in_app') is None:
-                new_frame['in_app'] = in_app
+                new_frame['in_app'] = (in_app and not self.sym.is_internal_function(new_frame['function']))
             new_frames.append(new_frame)
 
         return new_frames, [raw_frame], []
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 0f4b89908d..18f7b4d21e 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -37,6 +37,8 @@ _support_framework = re.compile(r'''(?x)
 SIM_PATH = '/Developer/CoreSimulator/Devices/'
 SIM_APP_PATH = '/Containers/Bundle/Application/'
 
+_internal_function_re = re.compile(r'(kscm_|kscrash_|KSCrash |SentryClient |RNSentry )')
+
 KNOWN_GARBAGE_SYMBOLS = set([
     '_mh_execute_header',
     '<redacted>',
@@ -266,3 +268,6 @@ class Symbolizer(object):
     def is_in_app(self, instruction_addr):
         img = self.image_lookup.find_image(instruction_addr)
         return img is not None and self._is_app_frame(instruction_addr, img)
+
+    def is_internal_function(self, function):
+        return _internal_function_re.search(function) is not None
