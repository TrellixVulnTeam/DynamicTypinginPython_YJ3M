commit 8bad9f76bd2150d65eadf6cf397e063ed3c5b264
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 6 14:36:27 2018 -0700

    Revert "Correct BitField query behavior"
    
    This reverts commit 3c416cf0f8a77299b1a5febb5cf9fb662a91d8a5.

diff --git a/src/bitfield/query.py b/src/bitfield/query.py
index 1a0ae6540a..35747214df 100644
--- a/src/bitfield/query.py
+++ b/src/bitfield/query.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from bitfield.types import Bit, BitHandler
+
 
 class BitQueryLookupWrapper(object):
     def __init__(self, alias, column, bit):
@@ -21,20 +23,24 @@ class BitQueryLookupWrapper(object):
 
 try:
     # Django 1.7+
-    from django.db.models.lookups import BuiltinLookup
-
-    class BitQueryLookupWrapper(BuiltinLookup):  # NOQA
-        def as_sql(self, compiler, connection):
-            """
-            Create the proper SQL fragment. This inserts something like
-            "(T0.flags & value) != 0".
-
-            This will be called by Where.as_sql()
-            """
-            qn = connection.ops.quote_name
-            if self.bit:
-                return ("(%s.%s | %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
-            return ("(%s.%s & %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
+    from django.db.models.lookups import Exact
+
+    class BitQueryLookupWrapper(Exact):  # NOQA
+        def process_lhs(self, qn, connection, lhs=None):
+            lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
+            if self.rhs:
+                lhs_sql = lhs_sql + ' & %s'
+            else:
+                lhs_sql = lhs_sql + ' | %s'
+            params.append(self.get_db_prep_lookup(self.rhs, connection)[1])
+            return lhs_sql, params
+
+        def get_db_prep_lookup(self, value, connection, prepared=False):
+            v = value.mask if isinstance(value, (BitHandler, Bit)) else value
+            return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
+
+        def get_prep_lookup(self):
+            return self.rhs
 
 except ImportError:
     pass
