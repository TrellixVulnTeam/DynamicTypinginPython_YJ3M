commit 1cb90358ec1f2b888f628ec75dfa56b72f9dedf0
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Fri Sep 16 13:40:59 2016 -0700

    Add project list to organization reports. (#4156)

diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index ed448bee3c..ee97786533 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -13,7 +13,7 @@ from django.utils import dateformat, timezone
 from sentry import features
 from sentry.app import tsdb
 from sentry.models import (
-    Activity, Group, GroupStatus, Organization, OrganizationStatus, Project,
+    Activity, GroupStatus, Organization, OrganizationStatus, Project,
     Release, TagValue, Team, User, UserOption
 )
 from sentry.tasks.base import instrumented_task
@@ -181,15 +181,7 @@ def prepare_project_aggregates((_, stop), project):
     ]
 
 
-def trim_issue_list(value):
-    return sorted(
-        value,
-        key=lambda (id, statistics): statistics,
-        reverse=True,
-    )[:10]
-
-
-def prepare_project_issue_list(interval, project):
+def prepare_project_issue_summaries(interval, project):
     start, stop = interval
 
     queryset = project.group_set.exclude(status=GroupStatus.MUTED)
@@ -225,21 +217,11 @@ def prepare_project_issue_list(interval, project):
         ).distinct().values_list('group_id', flat=True)
     )
 
-    issue_list_candidates = new_issue_ids | reopened_issue_ids
-
     rollup = 60 * 60 * 24
 
     event_counts = tsdb.get_sums(
         tsdb.models.group,
-        issue_list_candidates,
-        start,
-        stop,
-        rollup=rollup,
-    )
-
-    user_counts = tsdb.get_distinct_counts_totals(
-        tsdb.models.users_affected_by_group,
-        issue_list_candidates,
+        new_issue_ids | reopened_issue_ids,
         start,
         stop,
         rollup=rollup,
@@ -258,21 +240,14 @@ def prepare_project_issue_list(interval, project):
         0,
     )
 
-    return (
-        [
-            new_issue_count,
-            reopened_issue_count,
-            existing_issue_count,
-        ],
-        trim_issue_list([(id, (event_counts[id], user_counts[id])) for id in issue_list_candidates]),
-    )
+    return [
+        new_issue_count,
+        reopened_issue_count,
+        existing_issue_count,
+    ]
 
 
-def merge_issue_lists(target, other):
-    return (
-        merge_sequences(target[0], other[0]),
-        trim_issue_list(target[1] + other[1]),
-    )
+merge_issue_summaries = merge_sequences
 
 
 def trim_release_list(value):
@@ -305,12 +280,32 @@ def prepare_project_release_list((start, stop), project):
     )
 
 
+def prepare_project_usage_summary((start, stop), project):
+    return (
+        tsdb.get_sums(
+            tsdb.models.project_total_blacklisted,
+            [project.id],
+            start,
+            stop,
+            rollup=60 * 60 * 24,
+        )[project.id],
+        tsdb.get_sums(
+            tsdb.models.project_total_rejected,
+            [project.id],
+            start,
+            stop,
+            rollup=60 * 60 * 24,
+        )[project.id],
+    )
+
+
 def prepare_project_report(interval, project):
     return (
         prepare_project_series(interval, project),
         prepare_project_aggregates(interval, project),
-        prepare_project_issue_list(interval, project),
+        prepare_project_issue_summaries(interval, project),
         prepare_project_release_list(interval, project),
+        prepare_project_usage_summary(interval, project),
     )
 
 
@@ -431,11 +426,15 @@ def merge_reports(target, other):
             other[1],
             safe_add,
         ),
-        merge_issue_lists(
+        merge_issue_summaries(
             target[2],
             other[2],
         ),
         trim_release_list(target[3] + other[3]),
+        merge_sequences(
+            target[4],
+            other[4],
+        )
     )
 
 
@@ -505,7 +504,7 @@ Duration = namedtuple(
     'Duration', (
         'adjective',    # e.g. "daily" or "weekly",
         'noun',         # relative to today, e.g. "yesterday" or "this week"
-        'date_format',  # date format used for series x axis labeling
+        'date_format',  # date format used for large series x axis labeling
     ))
 
 durations = {
@@ -517,7 +516,7 @@ durations = {
 }
 
 
-def build_message(timestamp, duration, organization, user, report):
+def build_message(timestamp, duration, organization, user, reports):
     start, stop = interval = _to_interval(timestamp, duration)
 
     duration_spec = durations[duration]
@@ -543,7 +542,7 @@ def build_message(timestamp, duration, organization, user, report):
                 organization,
                 user,
             ),
-            'report': to_context(report),
+            'report': to_context(reports),
             'user': user,
         },
     )
@@ -572,7 +571,7 @@ class Skipped(object):
 
 
 def has_valid_aggregates(interval, (project, report)):
-    _, aggregates, _, _ = report
+    _, aggregates, _, _, _ = report
     return any(bool(value) for value in aggregates)
 
 
@@ -610,8 +609,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
         has_valid_aggregates,
     ]
 
-    reports = [
-        report for project, report in
+    reports = dict(
         filter(
             lambda item: all(predicate(interval, item) for predicate in inclusion_predicates),
             zip(
@@ -624,7 +622,7 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
                 ),
             )
         )
-    ]
+    )
 
     if not reports:
         logger.debug('Skipping report for %r to %r, no qualifying reports to deliver.',
@@ -638,46 +636,115 @@ def deliver_organization_user_report(timestamp, duration, organization_id, user_
         duration,
         organization,
         user,
-        reduce(
-            merge_reports,
-            reports,
-        )
+        reports,
     )
 
     if features.has('organizations:reports:deliver', organization):
         message.send()
 
 
-IssueList = namedtuple('IssueList', 'count issues')
-IssueStatistics = namedtuple('IssueStatistics', 'events users')
+Point = namedtuple('Point', 'resolved unresolved')
+DistributionType = namedtuple('DistributionType', 'label color')
 
 
-def rewrite_issue_list((count, issues), fetch_groups=None):
-    # XXX: This only exists for removing data dependency in tests.
-    if fetch_groups is None:
-        fetch_groups = Group.objects.in_bulk
+def series_map(function, series):
+    return [(timestamp, function(value)) for timestamp, value in series]
 
-    instances = fetch_groups([id for id, _ in issues])
 
-    def rewrite((id, statistics)):
-        instance = instances.get(id)
-        if instance is None:
-            logger.debug("Could not retrieve group with key %r, skipping...", id)
-            return None
-        return (instance, IssueStatistics(*statistics))
+colors = [
+    '#696dc3',
+    '#6288ba',
+    '#59aca4',
+    '#99d59a',
+    '#daeca9',
+]
 
-    return IssueList(
-        count,
-        filter(None, map(rewrite, issues)),
-    )
 
+def build_project_breakdown_series(reports):
+    Key = namedtuple('Key', 'label url color data')
 
-Point = namedtuple('Point', 'resolved unresolved')
-DistributionType = namedtuple('DistributionType', 'label color')
+    def get_legend_data(report):
+        series, _, _, _, (filtered, rate_limited) = report
+        return {
+            'events': sum(sum(value) for timestamp, value in series),
+            'filtered': filtered,
+            'rate_limited': rate_limited,
+        }
 
+    # Find the reports with the most total events. (The number of reports to
+    # keep is the same as the number of colors available to use in the legend.)
+    instances = map(
+        operator.itemgetter(0),
+        sorted(
+            reports.items(),
+            key=lambda (instance, report): sum(sum(values) for timestamp, values in report[0]),
+            reverse=True,
+        ),
+    )[:len(colors)]
+
+    # Starting building the list of items to include in the report chart. This
+    # is a list of [Key, Report] pairs, in *ascending* order of the total sum
+    # of values in the series. (This is so when we render the series, the
+    # largest color blocks are at the bottom and it feels appropriately
+    # weighted.)
+    selections = map(
+        lambda (instance, color): (
+            Key(
+                instance.slug,
+                instance.get_absolute_url(),
+                color,
+                get_legend_data(reports[instance]),
+            ),
+            reports[instance],
+        ),
+        zip(
+            instances,
+            colors,
+        ),
+    )[::-1]
+
+    # Collect any reports that weren't in the selection set, merge them
+    # together and add it at the top (front) of the stack.
+    overflow = set(reports) - set(instances)
+    if overflow:
+        overflow_report = reduce(
+            merge_reports,
+            [reports[instance] for instance in overflow],
+        )
+        selections.insert(0, (
+            Key('Other', None, '#f2f0fa', get_legend_data(overflow_report)),
+            overflow_report,
+        ))
+
+    def summarize(key, points):
+        total = sum(points)
+        return [(key, total)] if total else []
+
+    # Collect all of the independent series into a single series to make it
+    # easier to render, resulting in a series where each value is a sequence of
+    # (key, count) pairs.
+    series = reduce(
+        merge_series,
+        [
+            series_map(
+                functools.partial(summarize, key),
+                report[0],
+            ) for key, report in selections
+        ],
+    )
 
-def to_context(report, fetch_groups=None):
-    series, aggregates, issue_list, release_list = report
+    return {
+        'points': [(to_datetime(timestamp), value) for timestamp, value in series],
+        'maximum': max(sum(count for key, count in value) for timestamp, value in series),
+        'legend': [key for key, value in reversed(selections)],
+    }
+
+
+def to_context(reports):
+    series, aggregates, issue_summaries, release_list, usage_summary = reduce(
+        merge_reports,
+        reports.values(),
+    )
     series = [(to_datetime(timestamp), Point(*values)) for timestamp, values in series]
 
     return {
@@ -695,10 +762,10 @@ def to_context(report, fetch_groups=None):
                         DistributionType('Reopened', '#6C5FC7'),
                         DistributionType('Existing', '#534a92'),
                     ),
-                    issue_list[0],
+                    issue_summaries,
                 ),
             ),
-            'total': sum(issue_list[0]),
+            'total': sum(issue_summaries),
         },
         'comparisons': [
             ('last week', change(aggregates[-1], aggregates[-2])),
@@ -707,8 +774,7 @@ def to_context(report, fetch_groups=None):
                 mean(aggregates) if all(v is not None for v in aggregates) else None,
             )),
         ],
-        'issue_list': rewrite_issue_list(
-            issue_list,
-            fetch_groups,
-        ),
+        'projects': {
+            'series': build_project_breakdown_series(reports),
+        },
     }
diff --git a/src/sentry/templates/sentry/emails/email-styles.html b/src/sentry/templates/sentry/emails/email-styles.html
index 125f82e399..536a3d15d0 100644
--- a/src/sentry/templates/sentry/emails/email-styles.html
+++ b/src/sentry/templates/sentry/emails/email-styles.html
@@ -733,15 +733,6 @@
     font-size: 0;
   }
 
-  .weekly-report .issue-breakdown {
-    border-bottom: 1px solid #D6DBE4;
-    margin-bottom: 30px;
-  }
-
-  .weekly-report .issue-breakdown table {
-    margin-bottom: 40px;
-  }
-
   .weekly-report .user-impact-stat table {
     width: 90px;
     height: 90px;
diff --git a/src/sentry/templates/sentry/emails/reports/body.html b/src/sentry/templates/sentry/emails/reports/body.html
index 298e80948d..c111ffa977 100644
--- a/src/sentry/templates/sentry/emails/reports/body.html
+++ b/src/sentry/templates/sentry/emails/reports/body.html
@@ -98,7 +98,7 @@
   <table class="issue-breakdown">
     <tr>
       <td>
-        <h4>Event Breakdown</h4>
+        <h4>Events by Issue Type</h4>
       </td>
       <td class="legend">
         {% for type, count in report.distribution.types %}
@@ -122,39 +122,106 @@
   </table>
   {% endwith %}
 
-  <table class="issue-table">
-    <thead>
+  <style type="text/css">
+
+    .project-breakdown {
+      margin-bottom: 40px;
+    }
+
+    .project-breakdown .graph td {
+        font-size: 0;
+        border-right: 10px solid #fff;
+    }
+
+    .project-breakdown .graph td:last-child {
+        border-right: none;
+    }
+
+    .project-breakdown .graph .label {
+      font-size: 14px;
+      color: #848296;
+      text-align: center;
+      padding-top: 10px;
+    }
+
+    .project-breakdown .summary thead th {
+      font-size: 12px;
+      text-transform: uppercase;
+      color: #88859a;
+      font-weight: 500;
+    }
+
+    .project-breakdown .summary tbody td {
+      font-size: 14px;
+      padding: 10px 0 0 0;
+    }
+
+    .project-breakdown .summary .numeric {
+      text-align: center;
+    }
+
+  </style>
+
+  <div class="project-breakdown">
+
+    {% with series=report.projects.series height=110 %}
+
+    <h4>Events by Project</h4>
+
+    <table class="graph">
       <tr>
-        <th>
-          <h4>New and Reopened Issues {{ duration.noun|title }}</h4>
-        </th>
-        <th class="narrow-column">Events</th>
-        <th class="narrow-column">Users</th>
+        {% for timestamp, values in series.points %}
+        <td valign="bottom" class="bar" style="height: {{ height }}px; width: {% widthratio 1 series.points|length 100 %}%">
+            <table>
+              {% for key, count in values %}
+                <tr>
+                  <td height="{% widthratio count series.maximum height %}" style="background-color: {{ key.color }};">&nbsp;</td>
+                </tr>
+              {% empty %}
+                <tr>
+                  <td height="1" style="background-color: #ebe9f7;"></td>
+                </td>
+              {% endfor %}
+              <tr>
+                <td class="label">
+                  {{ timestamp|date:duration.date_format }}
+                </tr>
+              </td>
+            </table>
+          </td>
+        {% endfor %}
       </tr>
-    </thead>
-    <tbody>
-      {% for group, statistics in report.issue_list.issues %}
+    </table>
+
+    <table class="summary">
+      <thead>
         <tr>
-          <td class="issue">
-            {% include "sentry/emails/_group.html" %}
-            <small>
-              Last seen at {{ group.last_seen }}
-              in <a href="{% absolute_uri project_link %}" class="issue-project">{{ group.project.name }}</a>
-            </small>
-          </td>
-          <td class="narrow-column">{{ statistics.events|small_count }}</td>
-          <td class="narrow-column">{{ statistics.users|small_count }}</td>
+          <th style="width: 1em;"></th>
+          <th style="width: 7em;" class="numeric">Events</th>
+          <th>Project</th>
+          <th style="width: 7em;" class="numeric">Filtered</th>
+          <th style="width: 7em;" class="numeric">Rate Limited</th>
         </tr>
-      {% empty %}
+      </thead>
+      <tbody>
+      {% for key in series.legend %}
         <tr>
-          <td class="empty" colspan="3">
-            {# TODO: This is probably not the best way to articulate this. #}
-            There were no issues this period.
+          <td>
+            <span style="background-color: {{ key.color }}; display: inline-block; height: 1em; width: 1em;">&nbsp;</span>
           </td>
+          <td class="numeric">{{ key.data.events|small_count:1 }}</div>
+          <td>
+              {% if key.url %}<a href="{{ key.url }}" style="font-weight: bold;">{% endif %}{{ key.label }}{% if key.url %}</a>{% endif %}
+          </td>
+          <td class="numeric">{{ key.data.filtered|small_count:1 }}</td>
+          <td class="numeric">{{ key.data.rate_limited|small_count:1 }}</td>
         </tr>
       {% endfor %}
-    </tbody>
-  </table>
+      </tbody>
+    </table>
+    {% endwith %}
+
+  </div>
 
   {% if personal.resolved and personal.users %}
     <h4>Your impact</h4>
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 377ecde3c4..12f97f717e 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -11,6 +11,7 @@ from random import Random
 import six
 from django.contrib.webdesign.lorem_ipsum import WORDS
 from django.core.urlresolvers import reverse
+from django.template.defaultfilters import slugify
 from django.utils import timezone
 from django.utils.safestring import mark_safe
 from django.views.generic import View
@@ -382,36 +383,26 @@ def report(request):
         organization=organization,
     )
 
-    project = Project(
-        id=1,
-        organization=organization,
-        team=team,
-        slug='project',
-        name='My Project',
-    )
+    projects = []
+    for i in xrange(0, random.randint(1, 8)):
+        name = ' '.join(
+            random.sample(
+                WORDS,
+                random.randint(1, 4)
+            )
+        )
+        projects.append(
+            Project(
+                id=i,
+                organization=organization,
+                team=team,
+                slug=slugify(name),
+                name=name,
+            )
+        )
 
     start, stop = reports._to_interval(timestamp, duration)
 
-    group_instances = {}
-
-    def fetch_group_instances(id_list):
-        results = {}
-        for id in id_list:
-            instance = group_instances.get(id)
-            if instance is not None:
-                results[id] = instance
-        return results
-
-    def make_group_id_generator():
-        group_generator = make_group_generator(random, project)
-        while True:
-            group = next(group_generator)
-            if random.random() < 0.95:
-                group_instances[group.id] = group
-            yield group.id
-
-    group_id_sequence = make_group_id_generator()
-
     def make_release_generator():
         id_sequence = itertools.count(1)
         while True:
@@ -423,7 +414,7 @@ def report(request):
             )
             yield Release(
                 id=next(id_sequence),
-                project=project,
+                project=random.choice(projects),
                 version=''.join([
                     random.choice('0123456789abcdef') for _ in range(40)
                 ]),
@@ -442,20 +433,13 @@ def report(request):
 
     release_id_generator = make_release_id_generator()
 
-    def build_issue_list():
+    def build_issue_summaries():
         summaries = []
         for i in range(3):
             summaries.append(
                 int(random.weibullvariate(10, 1) * random.paretovariate(0.5))
             )
-
-        return summaries, [(
-            next(group_id_sequence),
-            (
-                int(random.paretovariate(0.3)),
-                int(random.paretovariate(0.3)),
-            ),
-        ) for _ in xrange(0, random.randint(1, 5))]
+        return summaries
 
     def build_release_list():
         return reports.trim_release_list([
@@ -465,6 +449,12 @@ def report(request):
             ) for _ in range(random.randint(0, 10))
         ])
 
+    def build_usage_summary():
+        return (
+            int(random.weibullvariate(3, 1) * random.paretovariate(0.2)),
+            int(random.weibullvariate(5, 1) * random.paretovariate(0.2)),
+        )
+
     def build_report():
         daily_maximum = random.randint(1000, 10000)
 
@@ -478,12 +468,7 @@ def report(request):
             random.randint(0, daily_maximum * 7) if random.random() < 0.9 else None for _ in xrange(0, 4)
         ]
 
-        return series, aggregates, build_issue_list(), build_release_list()
-
-    report = reduce(
-        reports.merge_reports,
-        [build_report() for _ in xrange(0, random.randint(1, 3))]
-    )
+        return series, aggregates, build_issue_summaries(), build_release_list(), build_usage_summary()
 
     if random.random() < 0.85:
         personal = {
@@ -506,8 +491,7 @@ def report(request):
                 'stop': reports.date_format(stop),
             },
             'report': reports.to_context(
-                report,
-                fetch_group_instances,
+                {project: build_report() for project in projects}
             ),
             'organization': organization,
             'personal': personal,
diff --git a/tests/sentry/tasks/test_reports.py b/tests/sentry/tasks/test_reports.py
index 04f969c085..8325e11b53 100644
--- a/tests/sentry/tasks/test_reports.py
+++ b/tests/sentry/tasks/test_reports.py
@@ -169,7 +169,7 @@ def test_has_valid_aggregates(interval):
     project = None  # parameter is unused
 
     def make_report(aggregates):
-        return None, aggregates, None, None
+        return None, aggregates, None, None, None
 
     assert has_valid_aggregates(
         interval,
