commit 3e9043c983b2ecb2df277df9b01735e4b0276d03
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 16 21:23:26 2015 -0700

    Record internal metrics in sentry.tsdb (counters only)

diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index ad9fd6a71d..12d22a9131 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -16,6 +16,8 @@ ONE_DAY = ONE_HOUR * 24
 
 
 class TSDBModel(Enum):
+    internal = 0
+
     # number of events seen specific to grouping
     project = 1
     project_tag_key = 2
diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
index d862a2eba3..52ba3303a4 100644
--- a/src/sentry/utils/metrics.py
+++ b/src/sentry/utils/metrics.py
@@ -4,6 +4,7 @@ __all__ = ['timing', 'incr']
 
 from django_statsd.clients import statsd
 from django.conf import settings
+from random import random
 
 
 def _get_key(key):
@@ -14,15 +15,24 @@ def _get_key(key):
 
 
 def incr(key, amount=1):
+    from sentry.app import tsdb
+
+    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
+
+    if sample_rate < 1 and random() >= sample_rate:
+        tsdb.incr(tsdb.models.internal, key)
+
     return statsd.incr(_get_key(key), amount,
-                       rate=settings.SENTRY_METRICS_SAMPLE_RATE)
+                       rate=sample_rate)
 
 
 def timing(key, value):
+    # TODO(dcramer): implement timing for tsdb
     return statsd.timing(_get_key(key), value,
                          rate=settings.SENTRY_METRICS_SAMPLE_RATE)
 
 
 def timer(key):
+    # TODO(dcramer): implement timing for tsdb
     return statsd.timer(_get_key(key),
                         rate=settings.SENTRY_METRICS_SAMPLE_RATE)
