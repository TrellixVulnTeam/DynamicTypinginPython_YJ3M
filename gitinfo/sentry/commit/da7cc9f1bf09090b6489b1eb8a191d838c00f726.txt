commit da7cc9f1bf09090b6489b1eb8a191d838c00f726
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Nov 28 14:32:31 2015 -0800

    Enforce no spacing between brackets

diff --git a/.eslintrc b/.eslintrc
index 4033cc6d39..00b1a7ce0b 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -110,6 +110,9 @@
     "no-with": 2,                    // http://eslint.org/docs/rules/no-with
     "quotes": [2, "single"],         // http://eslint.org/docs/rules/quotes.html
     "radix": 2,                      // http://eslint.org/docs/rules/radix
+    "computed-property-spacing": [2, "never"], // http://eslint.org/docs/rules/space-in-brackets.html
+    "array-bracket-spacing": [2, "never"], // http://eslint.org/docs/rules/space-in-brackets.html
+    "object-curly-spacing": [2, "never"], // http://eslint.org/docs/rules/space-in-brackets.html
     "space-infix-ops": 2,            // http://eslint.org/docs/rules/space-infix-ops.html
     "vars-on-top": 0,                // http://eslint.org/docs/rules/vars-on-top
     "wrap-iife": [2, "any"],         // http://eslint.org/docs/rules/wrap-iife
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 6e49ae0f42..3510e38149 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -1,6 +1,6 @@
 import moment from 'moment';
 import React from 'react';
-import { valueIsEqual } from '../utils';
+import {valueIsEqual} from '../utils';
 import TooltipMixin from '../mixins/tooltip';
 
 const BarChart = React.createClass({
@@ -192,9 +192,9 @@ const BarChart = React.createClass({
       <a key={point.x}
          className="chart-column tip"
          data-point-index={pointIdx}
-         style={{ width: pointWidth }}
+         style={{width: pointWidth}}
        >
-        <span style={{ height: pct }}>{point.y}</span>
+        <span style={{height: pct}}>{point.y}</span>
       </a>
     );
   },
diff --git a/src/sentry/static/sentry/app/components/flotChart.jsx b/src/sentry/static/sentry/app/components/flotChart.jsx
index a94d9c6399..52e2371553 100644
--- a/src/sentry/static/sentry/app/components/flotChart.jsx
+++ b/src/sentry/static/sentry/app/components/flotChart.jsx
@@ -129,7 +129,7 @@ const FlotChart = React.createClass({
         noColumns: series.length,
         position: 'nw'
       },
-      lines: { show: false }
+      lines: {show: false},
     };
 
     let chart = ReactDOM.findDOMNode(this.refs.chartNode);
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 0c64456ce1..b5050f1d7a 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -45,7 +45,7 @@ const ProjectSelector = React.createClass({
   },
 
   close() {
-    this.setState({ filter: '' });
+    this.setState({filter: ''});
     // dropdownLink might not exist because we try to close within
     // onFilterBlur above after a timeout. My hunch is that sometimes
     // this DOM element is removed within the 200ms, so we error out.
diff --git a/src/sentry/static/sentry/app/components/searchBar.jsx b/src/sentry/static/sentry/app/components/searchBar.jsx
index 267a2309b5..9073c2d642 100644
--- a/src/sentry/static/sentry/app/components/searchBar.jsx
+++ b/src/sentry/static/sentry/app/components/searchBar.jsx
@@ -33,7 +33,7 @@ const SearchBar = React.createClass({
 
   clearSearch() {
     this.setState(
-      { query: this.props.defaultQuery },
+      {query: this.props.defaultQuery},
       () => this.props.onSearch(this.state.query)
     );
   },
@@ -45,11 +45,11 @@ const SearchBar = React.createClass({
   },
 
   onQueryBlur() {
-    this.setState({ dropdownVisible: false });
+    this.setState({dropdownVisible: false});
   },
 
   onQueryChange(evt) {
-    this.setState({ query: evt.target.value });
+    this.setState({query: evt.target.value});
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/locale.jsx b/src/sentry/static/sentry/app/locale.jsx
index f852117edd..68af50cb05 100644
--- a/src/sentry/static/sentry/app/locale.jsx
+++ b/src/sentry/static/sentry/app/locale.jsx
@@ -1,6 +1,6 @@
 import Jed from 'jed';
 import ConfigStore from './stores/configStore';
-import { getTranslations } from './translations';
+import {getTranslations} from './translations';
 
 export function getCurrentTranslations() {
   let user = ConfigStore.get('user');
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index b485deee7d..9cbf612d11 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -14,7 +14,7 @@ const ProjectReleases = React.createClass({
     setProjectNavSection: React.PropTypes.func
   },
 
-  mixins: [ History ],
+  mixins: [History],
 
   getDefaultProps() {
     return {
diff --git a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
index 12abd4e91e..e99e9338b8 100644
--- a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
@@ -12,7 +12,7 @@ const ReleaseArtifacts = React.createClass({
     release: React.PropTypes.object
   },
 
-  mixins: [ History ],
+  mixins: [History],
 
   getInitialState() {
     return {
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
index 10babd73cf..1a4fd57259 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
@@ -47,7 +47,7 @@ const RuleNodeList = React.createClass({
       <div className={this.props.className}>
         <table className="node-list table" style={{marginBottom: '10px'}}>
           <col />
-          <col style={{ textAlign: 'right'}} />
+          <col style={{textAlign: 'right'}} />
           <tbody>
             {this.state.items.map((item, idx) => {
               return (
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index f997d85b20..f4ce9bab1d 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -138,9 +138,9 @@ const Stream = React.createClass({
 
     let filter = {};
     if (currentQuery.bookmarks) {
-      filter = { bookmarks: '1' };
+      filter = {bookmarks: '1'};
     } else if (currentQuery.assigned) {
-      filter = { assigned: '1' };
+      filter = {assigned: '1'};
     }
 
     let query =
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index fc857fc5fe..280ea7967f 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -122,7 +122,7 @@ const SearchBar = React.createClass({
 
   clearSearch() {
     this.setState(
-      { query: this.props.defaultQuery },
+      {query: this.props.defaultQuery},
       () => this.props.onSearch(this.state.query)
     );
   },
@@ -138,13 +138,13 @@ const SearchBar = React.createClass({
     // clicking a menu option
     this.blurTimeout = setTimeout(() => {
       this.blurTimeout = null;
-      this.setState({ dropdownVisible: false });
+      this.setState({dropdownVisible: false});
     }, this.DROPDOWN_BLUR_DURATION);
   },
 
   onQueryChange(evt) {
     this.setState(
-      { query: evt.target.value },
+      {query: evt.target.value},
       () => this.updateAutoCompleteItems()
     );
   },
@@ -190,7 +190,7 @@ const SearchBar = React.createClass({
       },
       method: 'GET',
       success: (values) => {
-        this.setState({ loading: false });
+        this.setState({loading: false});
         callback(values.map((v) => {
           // Wrap in quotes if there is a space
           return v.value.indexOf(' ') > -1 ? `"${v.value}"` : v.value;
@@ -217,7 +217,7 @@ const SearchBar = React.createClass({
       // If the cursor lands at the end of the input value, and the preceding character
       // is not whitespace, then add a space and move the cursor beyond that space.
       this.setState(
-        { query: this.state.query + ' ' },
+        {query: this.state.query + ' '},
         () => {
           ReactDOM.findDOMNode(this.refs.searchInput).setSelectionRange(cursor + 1, cursor + 1);
           this.updateAutoCompleteItems();
@@ -338,7 +338,7 @@ const SearchBar = React.createClass({
         : Math.max(state.activeSearchItem - 1, 0);
 
       searchItems[state.activeSearchItem].active = true;
-      this.setState({ searchItems: searchItems.slice(0) });
+      this.setState({searchItems: searchItems.slice(0)});
 
     } else if ((evt.key === 'Tab' || evt.key === 'Enter') && !this.isDefaultDropdown()) {
       evt.preventDefault();
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 191a79bde7..5532b1be4e 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -59,7 +59,7 @@ const StreamSidebar = React.createClass({
   },
 
   onTextChange: function (evt) {
-    this.setState({ textFilter: evt.target.value });
+    this.setState({textFilter: evt.target.value});
   },
 
   debouncedTextChange: _.debounce(function(text) {
diff --git a/tests/js/spec/components/barChart.spec.jsx b/tests/js/spec/components/barChart.spec.jsx
index f3e6e5c746..aff628b342 100644
--- a/tests/js/spec/components/barChart.spec.jsx
+++ b/tests/js/spec/components/barChart.spec.jsx
@@ -15,9 +15,9 @@ describe('BarChart', function() {
 
     it('renders with points data', function () {
       let points = [
-        { x: 1439766000, y: 10 },
-        { x: 1439769600, y: 20 },
-        { x: 1439773200, y: 30 },
+        {x: 1439766000, y: 10},
+        {x: 1439769600, y: 20},
+        {x: 1439773200, y: 30},
       ];
 
       let comp = TestUtils.renderIntoDocument(<BarChart points={points}/>);
@@ -31,13 +31,13 @@ describe('BarChart', function() {
 
     it('renders with points and markers', function () {
       let points = [
-        { x: 1439769600, y: 10 },
-        { x: 1439773200, y: 20 },
-        { x: 1439776800, y: 30 }
+        {x: 1439769600, y: 10},
+        {x: 1439773200, y: 20},
+        {x: 1439776800, y: 30}
       ];
       let markers = [
-        { x: 1439769600, className: 'first-seen', label: 'first seen' }, // matches first point
-        { x: 1439776800, className: 'last-seen', label: 'last seen' } // matches last point
+        {x: 1439769600, className: 'first-seen', label: 'first seen'}, // matches first point
+        {x: 1439776800, className: 'last-seen', label: 'last seen'} // matches last point
       ];
 
       let comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>);
@@ -55,11 +55,11 @@ describe('BarChart', function() {
 
     it('renders with points and markers, when first and last seen are same data point', function () {
       let points = [
-        { x: 1439776800, y: 30 }
+        {x: 1439776800, y: 30}
       ];
       let markers = [
-        { x: 1439776800, className: 'first-seen', label: 'first seen' },
-        { x: 1439776800, className: 'last-seen', label: 'last seen' }
+        {x: 1439776800, className: 'first-seen', label: 'first seen'},
+        {x: 1439776800, className: 'last-seen', label: 'last seen'}
       ];
 
       let comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>);
diff --git a/tests/js/spec/stores/alertStore.spec.js b/tests/js/spec/stores/alertStore.spec.js
index 419bc79647..0ff7e6b512 100644
--- a/tests/js/spec/stores/alertStore.spec.js
+++ b/tests/js/spec/stores/alertStore.spec.js
@@ -27,9 +27,9 @@ describe('AlertStore', function () {
   describe('onCloseAlert()', function () {
     it('should remove alert with given id', function () {
       AlertStore.alerts = [
-        { id: 1, message: 'foo', type: 'error '},
-        { id: 2, message: 'bar', type: 'error '},
-        { id: 3, message: 'baz', type: 'error '},
+        {id: 1, message: 'foo', type: 'error '},
+        {id: 2, message: 'bar', type: 'error '},
+        {id: 3, message: 'baz', type: 'error '},
       ];
 
       AlertStore.onCloseAlert(2);
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index 60b12daad9..157a7dce35 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -13,20 +13,20 @@ describe('GroupStore', function () {
   describe('onMergeSuccess()', function () {
     it('should remove the non-parent merged ids', function () {
       GroupStore.items = [
-        { id: 1 },
-        { id: 2 },
-        { id: 3 },
-        { id: 4 }
+        {id: 1},
+        {id: 2},
+        {id: 3},
+        {id: 4}
       ];
 
       GroupStore.onMergeSuccess(null,
         [2, 3, 4], // items merged
-        { merge: { parent: 3 } } // merge API response
+        {merge: {parent: 3}} // merge API response
       );
 
       expect(GroupStore.items).to.eql([
-        { id: 1 },
-        { id: 3 } // parent
+        {id: 1},
+        {id: 3} // parent
       ]);
     });
   });
@@ -34,9 +34,9 @@ describe('GroupStore', function () {
   describe('onUpdate()', function () {
     it('should treat undefined itemIds argument as \'all\'', function () {
       GroupStore.items = [
-        { id: 1 },
-        { id: 2 },
-        { id: 3 },
+        {id: 1},
+        {id: 2},
+        {id: 3},
       ];
 
       this.sandbox.stub(GroupStore, 'trigger');
@@ -51,9 +51,9 @@ describe('GroupStore', function () {
   describe('onUpdateSuccess()', function () {
     it('should treat undefined itemIds argument as \'all\'', function () {
       GroupStore.items = [
-        { id: 1 },
-        { id: 2 },
-        { id: 3 },
+        {id: 1},
+        {id: 2},
+        {id: 3},
       ];
 
       this.sandbox.stub(GroupStore, 'trigger');
diff --git a/tests/js/spec/stores/selectedGroupStore.spec.js b/tests/js/spec/stores/selectedGroupStore.spec.js
index 573d58fe69..24fe42e4ac 100644
--- a/tests/js/spec/stores/selectedGroupStore.spec.js
+++ b/tests/js/spec/stores/selectedGroupStore.spec.js
@@ -18,16 +18,16 @@ describe('SelectedGroupStore', function() {
 
     it('removes records no longer in the GroupStore', function() {
       this.sandbox.stub(GroupStore, 'getAllItemIds', () => ['3']);
-      SelectedGroupStore.records = { 1: true, 2: true, 3: true };
+      SelectedGroupStore.records = {1: true, 2: true, 3: true};
       SelectedGroupStore.prune();
-      expect(SelectedGroupStore.records).to.eql({ 3: true });
+      expect(SelectedGroupStore.records).to.eql({3: true});
     });
 
     it('doesn\'t have any effect when already in sync', function() {
       this.sandbox.stub(GroupStore, 'getAllItemIds', () => ['1', '2', '3']);
-      SelectedGroupStore.records = { 1: true, 2: true, 3: true };
+      SelectedGroupStore.records = {1: true, 2: true, 3: true};
       SelectedGroupStore.prune();
-      expect(SelectedGroupStore.records).to.eql({ 1: true, 2: true, 3: true });
+      expect(SelectedGroupStore.records).to.eql({1: true, 2: true, 3: true});
     });
 
   });
@@ -35,15 +35,15 @@ describe('SelectedGroupStore', function() {
   describe('add()', function() {
 
     it('defaults value of new ids to \'allSelected()\'', function() {
-      SelectedGroupStore.records = { 1: true };
+      SelectedGroupStore.records = {1: true};
       SelectedGroupStore.add([2]);
-      expect(SelectedGroupStore.records).to.eql({ 1: true, 2: true });
+      expect(SelectedGroupStore.records).to.eql({1: true, 2: true});
     });
 
     it('does not update existing ids', function() {
-      SelectedGroupStore.records = { 1: false, 2: true };
+      SelectedGroupStore.records = {1: false, 2: true};
       SelectedGroupStore.add([3]);
-      expect(SelectedGroupStore.records).to.eql({ 1: false, 2: true, 3: false });
+      expect(SelectedGroupStore.records).to.eql({1: false, 2: true, 3: false});
     });
 
   });
@@ -75,17 +75,17 @@ describe('SelectedGroupStore', function() {
   describe('allSelected()', function() {
 
     it('returns true when all ids are selected', function() {
-      SelectedGroupStore.records = { 1: true, 2: true };
+      SelectedGroupStore.records = {1: true, 2: true};
       expect(SelectedGroupStore.allSelected()).to.be.true;
     });
 
     it('returns false when some ids are selected', function() {
-      SelectedGroupStore.records = { 1: true, 2: false };
+      SelectedGroupStore.records = {1: true, 2: false};
       expect(SelectedGroupStore.allSelected()).to.be.false;
     });
 
     it('returns false when no ids are selected', function() {
-      SelectedGroupStore.records = { 1: false, 2: false };
+      SelectedGroupStore.records = {1: false, 2: false};
       expect(SelectedGroupStore.allSelected()).to.be.false;
     });
 
@@ -98,12 +98,12 @@ describe('SelectedGroupStore', function() {
   describe('anySelected()', function() {
 
     it('returns true if any ids are selected', function() {
-      SelectedGroupStore.records = { 1: true, 2: false };
+      SelectedGroupStore.records = {1: true, 2: false};
       expect(SelectedGroupStore.anySelected()).to.be.true;
     });
 
     it('returns false when no ids are selected', function() {
-      SelectedGroupStore.records = { 1: false, 2: false };
+      SelectedGroupStore.records = {1: false, 2: false};
       expect(SelectedGroupStore.anySelected()).to.be.false;
     });
 
@@ -112,17 +112,17 @@ describe('SelectedGroupStore', function() {
   describe('multiSelected()', function() {
 
     it('returns true when multiple ids are selected', function() {
-      SelectedGroupStore.records = { 1: true, 2: true, 3: false };
+      SelectedGroupStore.records = {1: true, 2: true, 3: false};
       expect(SelectedGroupStore.multiSelected()).to.be.true;
     });
 
     it('returns false when a single id is selected', function() {
-      SelectedGroupStore.records = { 1: true, 2: false };
+      SelectedGroupStore.records = {1: true, 2: false};
       expect(SelectedGroupStore.multiSelected()).to.be.false;
     });
 
     it('returns false when no ids are selected', function() {
-      SelectedGroupStore.records = { 1: false, 2: false };
+      SelectedGroupStore.records = {1: false, 2: false};
       expect(SelectedGroupStore.multiSelected()).to.be.false;
     });
 
@@ -131,7 +131,7 @@ describe('SelectedGroupStore', function() {
   describe('getSelectedIds()', function() {
 
     it('returns selected ids', function() {
-      SelectedGroupStore.records = { 1: true, 2: false, 3: true };
+      SelectedGroupStore.records = {1: true, 2: false, 3: true};
       var ids = SelectedGroupStore.getSelectedIds();
 
       expect(ids.has('1')).to.be.true;
@@ -140,7 +140,7 @@ describe('SelectedGroupStore', function() {
     });
 
     it('returns empty set with no selected ids', function() {
-      SelectedGroupStore.records = { 1: false };
+      SelectedGroupStore.records = {1: false};
       var ids = SelectedGroupStore.getSelectedIds();
 
       expect(ids.has('1')).to.be.false;
@@ -152,12 +152,12 @@ describe('SelectedGroupStore', function() {
   describe('isSelected()', function() {
 
     it('returns true if id is selected', function() {
-      SelectedGroupStore.records = { 1: true };
+      SelectedGroupStore.records = {1: true};
       expect(SelectedGroupStore.isSelected(1)).to.be.true;
     });
 
     it('returns false if id is unselected or unknown', function() {
-      SelectedGroupStore.records = { 1: false };
+      SelectedGroupStore.records = {1: false};
       expect(SelectedGroupStore.isSelected(1)).to.be.false;
       expect(SelectedGroupStore.isSelected(2)).to.be.false;
       expect(SelectedGroupStore.isSelected()).to.be.false;
@@ -168,9 +168,9 @@ describe('SelectedGroupStore', function() {
   describe('deselectAll()', function() {
 
     it('sets all records to false', function() {
-      SelectedGroupStore.records = { 1: true, 2: true, 3: false };
+      SelectedGroupStore.records = {1: true, 2: true, 3: false};
       SelectedGroupStore.deselectAll();
-      expect(SelectedGroupStore.records).to.eql({ 1: false, 2: false, 3: false });
+      expect(SelectedGroupStore.records).to.eql({1: false, 2: false, 3: false});
     });
 
     it('triggers an update', function() {
@@ -183,7 +183,7 @@ describe('SelectedGroupStore', function() {
   describe('toggleSelect()', function() {
 
     it('toggles state given pre-existing id', function() {
-      SelectedGroupStore.records = { 1: true };
+      SelectedGroupStore.records = {1: true};
       SelectedGroupStore.toggleSelect(1);
       expect(SelectedGroupStore.records[1]).to.be.false;
     });
@@ -196,7 +196,7 @@ describe('SelectedGroupStore', function() {
     });
 
     it('triggers an update given pre-existing id', function() {
-      SelectedGroupStore.records = { 1: true };
+      SelectedGroupStore.records = {1: true};
       SelectedGroupStore.toggleSelect(1);
       expect(this.trigger.called).to.be.true;
     });
@@ -210,15 +210,15 @@ describe('SelectedGroupStore', function() {
   describe('toggleSelectAll()', function() {
 
     it('selects all ids if any are unselected', function() {
-      SelectedGroupStore.records = { 1: true, 2: false };
+      SelectedGroupStore.records = {1: true, 2: false};
       SelectedGroupStore.toggleSelectAll();
-      expect(SelectedGroupStore.records).to.eql({ 1: true, 2: true });
+      expect(SelectedGroupStore.records).to.eql({1: true, 2: true});
     });
 
     it('unselects all ids if all are selected', function() {
-      SelectedGroupStore.records = { 1: true, 2: true };
+      SelectedGroupStore.records = {1: true, 2: true};
       SelectedGroupStore.toggleSelectAll();
-      expect(SelectedGroupStore.records).to.eql({ 1: false, 2: false });
+      expect(SelectedGroupStore.records).to.eql({1: false, 2: false});
     });
 
     it('triggers an update', function() {
diff --git a/tests/js/spec/utils/streamManager.spec.js b/tests/js/spec/utils/streamManager.spec.js
index 3d44260323..ff1f7eba00 100644
--- a/tests/js/spec/utils/streamManager.spec.js
+++ b/tests/js/spec/utils/streamManager.spec.js
@@ -12,7 +12,7 @@ describe('StreamManager', function() {
   });
 
   it('allows options configuration', function() {
-    var options = { limit: 2 };
+    var options = {limit: 2};
     var mgr = new StreamManager(this.store, options);
 
     expect(mgr.limit).to.eql(options.limit);
@@ -30,7 +30,7 @@ describe('StreamManager', function() {
     it('adds items', function() {
       var storeAdd = sinon.spy(this.store, 'add');
       var mgr = new StreamManager(this.store);
-      var items = [{ id: 1 }];
+      var items = [{id: 1}];
       mgr.push(items);
 
       expect(mgr.idList.length).to.eql(1);
@@ -40,7 +40,7 @@ describe('StreamManager', function() {
     it('allows adding a single item', function() {
       var storeAdd = sinon.spy(this.store, 'add');
       var mgr = new StreamManager(this.store);
-      var item = { id: 1 };
+      var item = {id: 1};
       mgr.push(item);
 
       expect(mgr.idList.length).to.eql(1);
@@ -48,10 +48,10 @@ describe('StreamManager', function() {
     });
 
     it('trims after adding', function() {
-      var mgr = new StreamManager(this.store, { limit: 1 });
+      var mgr = new StreamManager(this.store, {limit: 1});
       var storeRemove = sinon.spy(this.store, 'remove');
       var mgrTrim = sinon.spy(mgr, 'trim');
-      mgr.push([{ id: 1 }, { id: 2 }]);
+      mgr.push([{id: 1}, {id: 2}]);
 
       expect(mgr.idList.length).to.eql(1);
       expect(storeRemove.calledWith(2)).to.be.true;
@@ -60,8 +60,8 @@ describe('StreamManager', function() {
 
     it('preserves NEW order of duplicates', function() {
       var mgr = new StreamManager(this.store);
-      mgr.push([{ id: 1 }, { id: 3 }]);
-      mgr.push([{ id: 1 }, { id: 2 }]); // New order of "1" if after "3"
+      mgr.push([{id: 1}, {id: 3}]);
+      mgr.push([{id: 1}, {id: 2}]); // New order of "1" if after "3"
 
       expect(mgr.idList).to.eql([3, 1, 2]);
     });
@@ -72,7 +72,7 @@ describe('StreamManager', function() {
 
     it('removes trailing items in excess of the limit', function() {
       var storeRemove = sinon.spy(this.store, 'remove');
-      var mgr = new StreamManager(this.store, { limit: 1 });
+      var mgr = new StreamManager(this.store, {limit: 1});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
@@ -84,7 +84,7 @@ describe('StreamManager', function() {
 
     it('does nothing with fewer items than limit', function() {
       var storeRemove = sinon.spy(this.store, 'remove');
-      var mgr = new StreamManager(this.store, { limit: 10 });
+      var mgr = new StreamManager(this.store, {limit: 10});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
@@ -99,27 +99,27 @@ describe('StreamManager', function() {
 
     it('retrives ordered items from store', function() {
       var storeGetAllItems = sinon.stub(this.store, 'getAllItems', function() {
-        return [{ id: 1 }, { id: 2 }];
+        return [{id: 1}, {id: 2}];
       });
       var mgr = new StreamManager(this.store);
-      mgr.push({ id: 2 });
-      mgr.push({ id: 1 });
+      mgr.push({id: 2});
+      mgr.push({id: 1});
       var items = mgr.getAllItems();
 
-      expect(items).to.eql([{ id: 2 }, { id: 1 }]);
+      expect(items).to.eql([{id: 2}, {id: 1}]);
       expect(storeGetAllItems.called).to.be.true;
     });
 
     it('does not mutate store', function() {
-      var storeItems = [{ id: 1 }, { id: 2 }];
+      var storeItems = [{id: 1}, {id: 2}];
       sinon.stub(this.store, 'getAllItems', function() {
         return storeItems;
       });
       var mgr = new StreamManager(this.store);
-      mgr.push([{ id: 2 }, { id: 1 }]);
+      mgr.push([{id: 2}, {id: 1}]);
       mgr.getAllItems();
 
-      expect(this.store.getAllItems()).to.eql([{ id: 1 }, { id: 2 }]);
+      expect(this.store.getAllItems()).to.eql([{id: 1}, {id: 2}]);
     });
 
   });
@@ -129,33 +129,33 @@ describe('StreamManager', function() {
     it('adds items to the start of the list', function() {
       var storeAdd = sinon.spy(this.store, 'add');
       var mgr = new StreamManager(this.store);
-      mgr.unshift([{ id: 2 }]);
-      mgr.unshift([{ id: 1 }]);
+      mgr.unshift([{id: 2}]);
+      mgr.unshift([{id: 1}]);
 
       expect(mgr.idList).to.eql([1, 2]);
-      expect(storeAdd.firstCall.calledWith([{ id: 2 }])).to.be.true;
-      expect(storeAdd.secondCall.calledWith([{ id: 1 }])).to.be.true;
+      expect(storeAdd.firstCall.calledWith([{id: 2}])).to.be.true;
+      expect(storeAdd.secondCall.calledWith([{id: 1}])).to.be.true;
     });
 
     it('moves duplicates to the start of the list', function() {
       var mgr = new StreamManager(this.store);
-      mgr.unshift([{ id: 2 }, { id: 1 }]);
-      mgr.unshift([{ id: 1 }]);
+      mgr.unshift([{id: 2}, {id: 1}]);
+      mgr.unshift([{id: 1}]);
 
       expect(mgr.idList).to.eql([1, 2]);
     });
 
     it('moves a duplicate array to the start of the list and preserves order', function() {
       var mgr = new StreamManager(this.store);
-      mgr.unshift([{ id: 3 }, { id: 2 }, { id: 1 }]);
-      mgr.unshift([{ id: 2 }, { id: 1 }]);
+      mgr.unshift([{id: 3}, {id: 2}, {id: 1}]);
+      mgr.unshift([{id: 2}, {id: 1}]);
 
       expect(mgr.idList).to.eql([2, 1, 3]);
     });
 
     it('allows adding a single item', function() {
       var mgr = new StreamManager(this.store);
-      mgr.unshift({ id: 1 });
+      mgr.unshift({id: 1});
 
       expect(mgr.idList).to.eql([1]);
     });
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index 4603b6ee98..2f62b087cd 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -18,7 +18,7 @@ describe('OrganizationTeams', function() {
     stubReactComponent(this.sandbox, [ExpandedTeamList, AllTeamsList, OrganizationHomeContainer]);
 
     let ContextStubbedOrganizationTeams = stubContext(OrganizationTeams, {
-      organization: { id: '1337' }
+      organization: {id: '1337'}
     });
 
     this.Element = <ContextStubbedOrganizationTeams params={{orgId:'123'}}/>;
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index 0e84e62f6e..6db45c73ba 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -17,7 +17,7 @@ describe('ProjectReleases', function () {
 
     this.props = {
       setProjectNavSection: function () {},
-      params: { orgId: '123', projectId: '456'},
+      params: {orgId: '123', projectId: '456'},
       location: {query: {limit: 0, query: 'derp'}}
     };
     this.projectReleases = TestUtils.renderIntoDocument(
@@ -56,7 +56,7 @@ describe('ProjectReleases', function () {
       expect(pushState.args[0]).to.eql([
         null,
         '/123/456/releases/',
-        { query: 'searchquery' }
+        {query: 'searchquery'}
       ]);
     });
   });
@@ -73,7 +73,7 @@ describe('ProjectReleases', function () {
         ...this.props,
         location: {
           search: '?query=newquery',
-          query: { query: 'newquery' }
+          query: {query: 'newquery'}
         }
       };
       projectReleases.componentWillReceiveProps(newProps);
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 3b7c0c1c8f..c5beb2318c 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -116,7 +116,7 @@ describe('Stream', function() {
 
     it('displays a loading indicator when component is loading', function() {
       let stream = TestUtils.renderIntoDocument(this.Element);
-      stream.setState({ loading: true });
+      stream.setState({loading: true});
       let expected = findWithType(stream, LoadingIndicator);
 
       expect(expected).to.be.ok;
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 5ebf18aeb7..1981d8f0cb 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -144,7 +144,7 @@ describe('SearchBar', function() {
       let stubbedOnSearch = this.sandbox.spy();
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456"/>).refs.wrapped;
 
-      TestUtils.Simulate.submit(wrapper.refs.searchForm, { preventDefault() {} });
+      TestUtils.Simulate.submit(wrapper.refs.searchForm, {preventDefault() {}});
 
       expect(stubbedOnSearch.called).to.be.true;
     });
