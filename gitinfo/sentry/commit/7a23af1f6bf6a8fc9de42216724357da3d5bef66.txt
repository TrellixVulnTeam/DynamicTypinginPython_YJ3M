commit 7a23af1f6bf6a8fc9de42216724357da3d5bef66
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 23 13:45:34 2015 -0800

    Add feature abstraction
    
    This adds a new abstraction for determining if a feature is enabled. This will slowly expand to encompass a number of things, and will provide a second layer hook to permissions.
    
    For example, getsentry.com might want to say "this organization cannot create teams". That's not so much permission related (and the permission system isn't great). This also makes it much simpler to provide a layer that would abstract this into something like Gargoyle.

diff --git a/docs/config/index.rst b/docs/config/index.rst
index cc41b4e6b1..fdb636a472 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -19,7 +19,7 @@ Authentication
 --------------
 
 
-.. data:: SENTRY_ALLOW_REGISTRATION
+.. data:: SENTRY_FEATURES['auth:register']
     :noindex:
 
     Should Sentry allow users to create new accounts?
@@ -28,7 +28,7 @@ Authentication
 
     ::
 
-        SENTRY_ALLOW_REGISTRATION = False
+        SENTRY_FEATURES['auth:register'] = True
 
 .. data:: SENTRY_PUBLIC
     :noindex:
diff --git a/docs/quickstart/index.rst b/docs/quickstart/index.rst
index 0ba731283c..d74abb5f2e 100644
--- a/docs/quickstart/index.rst
+++ b/docs/quickstart/index.rst
@@ -409,7 +409,9 @@ want to disable account creation, simply set the following value:
 
 .. code-block:: python
 
-  SOCIAL_AUTH_CREATE_USERS = False
+  SENTRY_FEATURES = {
+    'social-auth:register': False,
+  }
 
 
 Google
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index c7afe983a1..f2e8fa0eaa 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -334,8 +334,6 @@ SOCIAL_AUTH_PIPELINE = (
     'social_auth.backends.pipeline.misc.save_status_to_session',
 )
 
-SOCIAL_AUTH_CREATE_USERS = True
-
 INITIAL_CUSTOM_USER_MIGRATION = '0108_fix_user'
 
 # Auth engines and the settings required for them to be listed
@@ -533,6 +531,11 @@ SENTRY_FRONTEND_PROJECT = None
 
 SENTRY_CACHE_BACKEND = 'default'
 
+SENTRY_FEATURES = {
+    'auth:register': True,
+    'social-auth:register': True,
+}
+
 SENTRY_FILTERS = (
     'sentry.filters.StatusFilter',
 )
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
new file mode 100644
index 0000000000..31d9231ea9
--- /dev/null
+++ b/src/sentry/features/__init__.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from .base import *  # NOQA
+from .manager import *  # NOQA
+
+
+default_manager = FeatureManager()
+default_manager.add('auth:register')
+default_manager.add('social-auth:register')
+
+# expose public api
+add = default_manager.add
+get = default_manager.get
+has = default_manager.has
diff --git a/src/sentry/features/base.py b/src/sentry/features/base.py
new file mode 100644
index 0000000000..9336b2fbba
--- /dev/null
+++ b/src/sentry/features/base.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+__all__ = ['Feature', 'OrganizationFeature']
+
+
+class Feature(object):
+    def __init__(self, name):
+        self.name = name
+
+    def has(self, actor):
+        """
+        A feature may return one of three values:
+
+        - True: the feature is enabled for actor
+        - False: the feature is not enabled for actor
+        - None: defer
+        """
+        return None
+
+
+class OrganizationFeature(object):
+    def __init__(self, name, organization):
+        self.name = name
+        self.organization = organization
diff --git a/src/sentry/features/exceptions.py b/src/sentry/features/exceptions.py
new file mode 100644
index 0000000000..74b84684bc
--- /dev/null
+++ b/src/sentry/features/exceptions.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+__all__ = ['FeatureNotRegistered']
+
+
+class FeatureNotRegistered(Exception):
+    pass
diff --git a/src/sentry/features/manager.py b/src/sentry/features/manager.py
new file mode 100644
index 0000000000..8449211c6e
--- /dev/null
+++ b/src/sentry/features/manager.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+__all__ = ['FeatureManager']
+
+from django.conf import settings
+
+from sentry.plugins import plugins
+from sentry.utils.safe import safe_execute
+
+from .base import Feature
+from .exceptions import FeatureNotRegistered
+
+
+class FeatureManager(object):
+    def __init__(self):
+        self._registry = {}
+
+    def add(self, name, cls=Feature):
+        self._registry[name] = cls
+
+    def get(self, name, *args, **kwargs):
+        try:
+            cls = self._registry[name]
+        except KeyError:
+            raise FeatureNotRegistered(name)
+        return cls(name, *args, **kwargs)
+
+    def has(self, name, *args, **kwargs):
+        """
+        >>> FeatureManager.has('my:feature', actor=request.user)
+        """
+        actor = kwargs.pop('actor', None)
+        feature = self.get(name, *args, **kwargs)
+        rv = self._get_plugin_value(feature, actor)
+        if rv is None:
+            rv = feature.has(actor=actor)
+        if rv is None:
+            rv = self._get_default_value(feature)
+        return rv
+
+    def _get_default_value(self, feature):
+        return settings.SENTRY_FEATURES.get(feature.name, False)
+
+    def _get_plugin_value(self, feature, actor):
+        for plugin in plugins.all(version=2):
+            for handler in (safe_execute(plugin.get_feature_hooks) or ()):
+                rv = handler(feature, actor)
+                if rv is not None:
+                    return rv
+        return None
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 7983b1549d..996336ba30 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -291,6 +291,17 @@ class IPlugin2(local):
         """
         return []
 
+    def get_feature_hooks(self, **kwargs):
+        """
+        Return a list of callables to check for feature status.
+
+        >>> def get_feature_hooks(self, **kwargs):
+        >>>     def no_features(feature, actor):
+        >>>         return False
+        >>>     return [no_features]
+        """
+        return []
+
 
 class Plugin2(IPlugin2):
     """
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index 57dca4326b..0c59071f12 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -364,9 +364,17 @@ def apply_legacy_settings(config):
             settings.ALLOWED_HOSTS = (urlbits.hostname,)
 
     if not settings.SERVER_EMAIL and hasattr(settings, 'SENTRY_SERVER_EMAIL'):
-        warnings.warn('SENTRY_SERVER_EMAIL is deprecated. Please use SERVER_EMAIL instead.', DeprecationWarning)
+        warnings.warn('SENTRY_SERVER_EMAIL is deprecated. Use SERVER_EMAIL instead.', DeprecationWarning)
         settings.SERVER_EMAIL = settings.SENTRY_SERVER_EMAIL
 
+    if hasattr(settings, 'SENTRY_ALLOW_REGISTRATION'):
+        warnings.warn('SENTRY_ALLOW_REGISTRATION is deprecated. Use SENTRY_FEATURES instead.', DeprecationWarning)
+        settings.SENTRY_FEATURES['auth:register'] = settings.SENTRY_ALLOW_REGISTRATION
+
+    if hasattr(settings, 'SOCIAL_AUTH_CREATE_USERS'):
+        warnings.warn('SOCIAL_AUTH_CREATE_USERS is deprecated. Use SENTRY_FEATURES instead.', DeprecationWarning)
+        settings.SENTRY_FEATURES['social-auth:register'] = settings.SOCIAL_AUTH_CREATE_USERS
+
 
 def skip_migration_if_applied(settings, app_name, table_name,
                               name='0001_initial'):
diff --git a/src/sentry/utils/social_auth.py b/src/sentry/utils/social_auth.py
index 9965ca8466..9ed1b3fbf9 100644
--- a/src/sentry/utils/social_auth.py
+++ b/src/sentry/utils/social_auth.py
@@ -7,11 +7,11 @@ sentry.utils.social_auth
 """
 from __future__ import absolute_import
 
-from django.conf import settings
-
 from social_auth.backends.pipeline.user import create_user
 from social_auth.exceptions import SocialAuthBaseException
 
+from sentry import features
+
 
 class AuthNotAllowed(SocialAuthBaseException):
     pass
@@ -22,7 +22,7 @@ def create_user_if_enabled(*args, **kwargs):
     A pipeline step for django-social-auth
     Create user. Depends on get_username pipeline.
     """
-    if not settings.SOCIAL_AUTH_CREATE_USERS and not kwargs.get('user'):
+    if not features.has('social-auth:register') and not kwargs.get('user'):
         raise AuthNotAllowed('You must create an account before associating an identity.')
 
     backend = kwargs.pop('backend')
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 01e8596f99..40cc468ca2 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -20,6 +20,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.utils import timezone
 from sudo.decorators import sudo_required
 
+from sentry import features
 from sentry.models import (
     LostPasswordHash, Organization, Project, Team, UserOption
 )
@@ -68,7 +69,7 @@ def register(request):
     return render_to_response('sentry/register.html', {
         'form': form,
         'AUTH_PROVIDERS': get_auth_providers(),
-        'SOCIAL_AUTH_CREATE_USERS': settings.SOCIAL_AUTH_CREATE_USERS,
+        'SOCIAL_AUTH_CREATE_USERS': features.has('social-auth:register'),
     }, request)
 
 
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index e5e0f0d33c..12478c1cd4 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -1,8 +1,8 @@
 from __future__ import absolute_import, print_function
 
 from django.contrib.auth import login
-from django.conf import settings
 
+from sentry import features
 from sentry.web.forms.accounts import AuthenticationForm
 from sentry.web.frontend.base import BaseView
 from sentry.utils.auth import get_auth_providers, get_login_redirect
@@ -34,8 +34,8 @@ class AuthLoginView(BaseView):
         context = {
             'form': form,
             'next': request.session.get('_next'),
-            'CAN_REGISTER': settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register'),
+            'CAN_REGISTER': features.has('auth:register') or request.session.get('can_register'),
             'AUTH_PROVIDERS': get_auth_providers(),
-            'SOCIAL_AUTH_CREATE_USERS': settings.SOCIAL_AUTH_CREATE_USERS,
+            'SOCIAL_AUTH_CREATE_USERS': features.has('social-auth:register'),
         }
         return self.respond('sentry/login.html', context)
