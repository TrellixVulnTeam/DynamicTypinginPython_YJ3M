commit ae8b1b703d5fc8b89af6c769cb8e2e3231694eba
Author: Mark Story <mark@sentry.io>
Date:   Fri Nov 29 15:11:49 2019 -0500

    ref(discover) Update events-meta endpoint to use new discover api (#15870)
    
    Update the events-meta endpoint to use the new discover API methods.
    This endpoint needed the count() with no additional fields applied, so
    I've added a flag to opt-out of the automatic field additions that are
    required by the main results page.

diff --git a/src/sentry/api/endpoints/organization_events_meta.py b/src/sentry/api/endpoints/organization_events_meta.py
index ebe43bf096..9eb2196ce6 100644
--- a/src/sentry/api/endpoints/organization_events_meta.py
+++ b/src/sentry/api/endpoints/organization_events_meta.py
@@ -3,23 +3,23 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
-from sentry.utils import snuba
+from sentry.snuba import discover
 
 
 class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
     def get(self, request, organization):
         try:
             params = self.get_filter_params(request, organization)
-            snuba_args = self.get_snuba_query_args(request, organization, params)
         except OrganizationEventsError as exc:
             return Response({"detail": exc.message}, status=400)
         except NoProjects:
             return Response({"count": 0})
 
-        data = snuba.transform_aliases_and_query(
-            aggregations=[["count()", "", "count"]],
-            referrer="api.organization-event-meta",
-            **snuba_args
-        )["data"][0]
+        result = discover.query(
+            selected_columns=["count()"],
+            params=params,
+            query=request.query_params.get("query"),
+            referrer="api.organization-events-meta",
+        )
 
-        return Response({"count": data["count"]})
+        return Response({"count": result["data"][0]["count"]})
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 09036fced9..4781b2091c 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -769,7 +769,7 @@ def get_aggregate_alias(match):
     return u"{}_{}".format(match.group("function"), column).rstrip("_")
 
 
-def resolve_field_list(fields, snuba_args):
+def resolve_field_list(fields, snuba_args, auto_fields=True):
     """
     Expand a list of fields based on aliases and aggregate functions.
 
@@ -819,7 +819,7 @@ def resolve_field_list(fields, snuba_args):
             )
 
     rollup = snuba_args.get("rollup")
-    if not rollup:
+    if not rollup and auto_fields:
         # Ensure fields we require to build a functioning interface
         # are present. We don't add fields when using a rollup as the additional fields
         # would be aggregated away. When there are aggregations
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 91fe1e112b..afe6ed9570 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -135,7 +135,7 @@ def resolve_discover_aliases(snuba_args):
     return resolved, translated_columns
 
 
-def query(selected_columns, query, params, orderby=None, referrer=None):
+def query(selected_columns, query, params, orderby=None, referrer=None, auto_fields=False):
     """
     High-level API for doing arbitrary user queries against events.
 
@@ -150,6 +150,8 @@ def query(selected_columns, query, params, orderby=None, referrer=None):
     query (str) Filter query string to create conditions from.
     params (Dict[str, str]) Filtering parameters with start, end, project_id, environment
     orderby (str|Sequence[str]) The field to order results by.
+    referrer (str) A reference string to help locate where queries are coming from.
+    auto_fields (bool) Set to true to have project + eventid fields automatically added.
     """
     snuba_filter = get_filter(query, params)
 
@@ -162,7 +164,7 @@ def query(selected_columns, query, params, orderby=None, referrer=None):
         "filter_keys": snuba_filter.filter_keys,
         "orderby": orderby,
     }
-    snuba_args.update(resolve_field_list(selected_columns, snuba_args))
+    snuba_args.update(resolve_field_list(selected_columns, snuba_args, auto_fields=auto_fields))
 
     # Resolve the public aliases into the discover dataset names.
     snuba_args, translated_columns = resolve_discover_aliases(snuba_args)
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 2cfd02a202..383750d8e5 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -36,26 +36,26 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         )
         data = result["data"]
         assert len(data) == 1
-        assert data[0]["id"] == self.event.event_id
         assert data[0]["project.id"] == self.project.id
         assert data[0]["user.email"] == "bruce@example.com"
         assert data[0]["release"] == "first-release"
 
-        assert len(result["meta"]) == 4
+        assert len(result["meta"]) == 3
         assert result["meta"][0] == {"name": "project.id", "type": "UInt64"}
         assert result["meta"][1] == {"name": "user.email", "type": "Nullable(String)"}
         assert result["meta"][2] == {"name": "release", "type": "Nullable(String)"}
-        assert result["meta"][3] == {"name": "id", "type": "FixedString(32)"}
 
     def test_field_aliasing_in_aggregate_functions_and_groupby(self):
         result = discover.query(
             selected_columns=["project.id", "count_unique(user.email)"],
             query="",
             params={"project_id": [self.project.id]},
+            auto_fields=True,
         )
         data = result["data"]
         assert len(data) == 1
         assert data[0]["project.id"] == self.project.id
+        assert data[0]["latest_event"] == self.event.event_id
         assert data[0]["count_unique_user_email"] == 1
 
     def test_field_aliasing_in_conditions(self):
@@ -69,6 +69,39 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         assert data[0]["project.id"] == self.project.id
         assert data[0]["user.email"] == "bruce@example.com"
 
+    def test_auto_fields_simple_fields(self):
+        result = discover.query(
+            selected_columns=["user.email", "release"],
+            query="",
+            params={"project_id": [self.project.id]},
+            auto_fields=True,
+        )
+        data = result["data"]
+        assert len(data) == 1
+        assert data[0]["id"] == self.event.event_id
+        assert data[0]["project.id"] == self.project.id
+        assert data[0]["user.email"] == "bruce@example.com"
+        assert data[0]["release"] == "first-release"
+
+        assert len(result["meta"]) == 4
+        assert result["meta"][0] == {"name": "user.email", "type": "Nullable(String)"}
+        assert result["meta"][1] == {"name": "release", "type": "Nullable(String)"}
+        assert result["meta"][2] == {"name": "id", "type": "FixedString(32)"}
+        assert result["meta"][3] == {"name": "project.id", "type": "UInt64"}
+
+    def test_auto_fields_aggregates(self):
+        result = discover.query(
+            selected_columns=["count_unique(user.email)"],
+            query="",
+            params={"project_id": [self.project.id]},
+            auto_fields=True,
+        )
+        data = result["data"]
+        assert len(data) == 1
+        assert data[0]["projectid"] == self.project.id
+        assert data[0]["latest_event"] == self.event.event_id
+        assert data[0]["count_unique_user_email"] == 1
+
     def test_release_condition(self):
         result = discover.query(
             selected_columns=["id", "message"],
@@ -86,7 +119,6 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         data = result["data"]
         assert data[0]["id"] == self.event.event_id
         assert data[0]["message"] == self.event.message
-        assert data[0]["project.id"] == self.project.id, "project.id should be inserted"
         assert "event_id" not in data[0]
 
     def test_environment_condition(self):
@@ -106,7 +138,6 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         data = result["data"]
         assert data[0]["id"] == self.event.event_id
         assert data[0]["message"] == self.event.message
-        assert data[0]["project.id"] == self.project.id, "project.id should be inserted"
 
 
 class QueryTransformTest(TestCase):
@@ -138,14 +169,7 @@ class QueryTransformTest(TestCase):
             selected_columns=["user", "project"], query="", params={"project_id": [self.project.id]}
         )
         mock_query.assert_called_with(
-            selected_columns=[
-                "user_id",
-                "username",
-                "email",
-                "ip_address",
-                "project_id",
-                "event_id",
-            ],
+            selected_columns=["user_id", "username", "email", "ip_address", "project_id"],
             aggregations=[],
             filter_keys={"project_id": [self.project.id]},
             dataset=Dataset.Discover,
@@ -157,6 +181,31 @@ class QueryTransformTest(TestCase):
             referrer=None,
         )
 
+    @patch("sentry.snuba.discover.raw_query")
+    def test_selected_columns_no_auto_fields(self, mock_query):
+        mock_query.return_value = {
+            "meta": [{"name": "user_id"}, {"name": "email"}],
+            "data": [{"user_id": "1", "email": "a@example.org"}],
+        }
+        discover.query(
+            selected_columns=["count()"],
+            query="",
+            params={"project_id": [self.project.id]},
+            auto_fields=False,
+        )
+        mock_query.assert_called_with(
+            selected_columns=[],
+            aggregations=[["count", None, "count"]],
+            filter_keys={"project_id": [self.project.id]},
+            dataset=Dataset.Discover,
+            end=None,
+            start=None,
+            conditions=[],
+            groupby=[],
+            orderby=None,
+            referrer=None,
+        )
+
     @patch("sentry.snuba.discover.raw_query")
     def test_selected_columns_aliasing_in_function(self, mock_query):
         mock_query.return_value = {
@@ -171,6 +220,7 @@ class QueryTransformTest(TestCase):
             ],
             query="",
             params={"project_id": [self.project.id]},
+            auto_fields=True,
         )
         mock_query.assert_called_with(
             selected_columns=["transaction", "duration"],
@@ -199,6 +249,7 @@ class QueryTransformTest(TestCase):
             selected_columns=["transaction", "p95", "count_unique(transaction)"],
             query="",
             params={"project_id": [self.project.id]},
+            auto_fields=True,
         )
         mock_query.assert_called_with(
             selected_columns=["transaction"],
@@ -231,7 +282,7 @@ class QueryTransformTest(TestCase):
             orderby=["project.id"],
         )
         mock_query.assert_called_with(
-            selected_columns=["project_id", "title", "event_id"],
+            selected_columns=["project_id", "title"],
             filter_keys={"project_id": [self.project.id]},
             dataset=Dataset.Discover,
             orderby=["project_id"],
@@ -271,10 +322,7 @@ class QueryTransformTest(TestCase):
             filter_keys={"project_id": [self.project.id]},
             dataset=Dataset.Discover,
             orderby=["count_id"],
-            aggregations=[
-                ["count", None, "count_id"],
-                ["argMax", ["event_id", "timestamp"], "latest_event"],
-            ],
+            aggregations=[["count", None, "count_id"]],
             end=None,
             start=None,
             conditions=[],
@@ -296,11 +344,7 @@ class QueryTransformTest(TestCase):
         )
         mock_query.assert_called_with(
             selected_columns=["timestamp", "transaction", "duration"],
-            aggregations=[
-                ["count", None, "count"],
-                ["argMax", ["event_id", "timestamp"], "latest_event"],
-                ["argMax", ["project_id", "timestamp"], "projectid"],
-            ],
+            aggregations=[["count", None, "count"]],
             conditions=[
                 ["duration", "=", 200],
                 ["sdk_name", "=", "python"],
@@ -333,11 +377,7 @@ class QueryTransformTest(TestCase):
                 [["match", ["email", "'(?i)^.*\@sentry\.io$'"]], "=", 1],
                 [["positionCaseInsensitive", ["message", "'recent-searches'"]], "!=", 0],
             ],
-            aggregations=[
-                ["count", None, "count"],
-                ["argMax", ["event_id", "timestamp"], "latest_event"],
-                ["argMax", ["project_id", "timestamp"], "projectid"],
-            ],
+            aggregations=[["count", None, "count"]],
             filter_keys={"project_id": [self.project.id]},
             dataset=Dataset.Discover,
             groupby=["transaction"],
@@ -359,7 +399,7 @@ class QueryTransformTest(TestCase):
             params={"project_id": [self.project.id]},
         )
         mock_query.assert_called_with(
-            selected_columns=["transaction", "duration", "event_id", "project_id"],
+            selected_columns=["transaction", "duration"],
             conditions=[["http_method", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=[],
@@ -385,7 +425,7 @@ class QueryTransformTest(TestCase):
             params={"project_id": [self.project.id], "start": start_time, "end": end_time},
         )
         mock_query.assert_called_with(
-            selected_columns=["transaction", "duration", "event_id", "project_id"],
+            selected_columns=["transaction", "duration"],
             conditions=[["http_method", "=", "GET"]],
             filter_keys={"project_id": [self.project.id]},
             groupby=[],
