commit 9b00dd61ec2095333be58cee7b7d9fb7895d7c2e
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 3 22:14:04 2012 -0800

    Cleaning up queue logic, pushing search indexing into the queue, and wrapping from_kwargs in a transaction

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 4a3a35cfec..bb64ad1185 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -199,14 +199,8 @@ def validate_data(project, data):
     return data
 
 
-def insert_data_to_database(data, queue=None):
-    if queue is None:
-        queue = settings.USE_QUEUE
-
-    if queue:
-        delay(insert_data_to_database, data, queue=False)
-    else:
-        try:
-            Group.objects.from_kwargs(**data)
-        except (InvalidInterface, InvalidData), e:
-            raise APIError(e)
+def insert_data_to_database(data):
+    try:
+        delay(Group.objects.from_kwargs, **data)
+    except (InvalidInterface, InvalidData), e:
+        raise APIError(e)
diff --git a/sentry/manager.py b/sentry/manager.py
index f7398b3512..663e5e3aed 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -14,17 +14,18 @@ import logging
 import re
 import warnings
 
-from django.db import models
+from django.db import models, transaction
 from django.db.models import Sum, F
 
 from sentry.conf import settings
 from sentry.exceptions import InvalidInterface, InvalidData
+from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.utils import get_db_engine
 from sentry.utils.charts import has_charts
 from sentry.utils.compat.db import connections
 from sentry.utils.dates import utc_to_local
-from sentry.processors.base import send_group_processors
+from sentry.queue.client import delay
 
 logger = logging.getLogger('sentry.errors')
 
@@ -204,6 +205,7 @@ class GroupManager(models.Manager, ChartMixin):
         result['extra'] = data
         return result
 
+    @transaction.commit_on_success
     def from_kwargs(self, project, **kwargs):
         # TODO: this function is way too damn long and needs refactored
         # the inner imports also suck so let's try to move it away from
@@ -337,16 +339,20 @@ class GroupManager(models.Manager, ChartMixin):
         if not is_sample:
             event.save()
 
+        transaction.commit_unless_managed(using=group._state.db)
+
         if settings.USE_SEARCH:
             try:
-                SearchDocument.objects.index(event)
+                delay(SearchDocument.objects.index, event)
             except Exception, e:
+                transaction.rollback_unless_managed(using=group._state.db)
                 logger.exception(u'Error indexing document: %s', e)
 
         if is_new:
             try:
                 regression_signal.send(sender=self.model, instance=group)
             except Exception, e:
+                transaction.rollback_unless_managed(using=group._state.db)
                 logger.exception(u'Error sending regression signal: %s', e)
 
         send_group_processors(group=group, event=event, is_new=is_new, is_sample=is_sample)
diff --git a/sentry/processors/base.py b/sentry/processors/base.py
index 0635086cf3..08020ba2be 100644
--- a/sentry/processors/base.py
+++ b/sentry/processors/base.py
@@ -7,16 +7,19 @@ sentry.processors.base
 """
 import logging
 
+from django.db import transaction
+
 from sentry.plugins import plugins
 
 __all__ = ('send_group_processors',)
 
 
-def send_group_processors(**kwargs):
+def send_group_processors(group, **kwargs):
     for inst in plugins.all():
         try:
-            inst.post_process(**kwargs)
+            inst.post_process(group=group, **kwargs)
         except:
+            transaction.rollback_unless_managed(using=group._state.db)
             logger = logging.getLogger('sentry.plugins')
             logger.exception('Error processing post_process() on %r', inst.__class__)
 
diff --git a/sentry/queue/client.py b/sentry/queue/client.py
index 474fb41563..1db6ed4bb5 100644
--- a/sentry/queue/client.py
+++ b/sentry/queue/client.py
@@ -5,17 +5,26 @@ sentry.queue.client
 :copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
-from kombu import BrokerConnection
-from kombu.common import maybe_declare
-from kombu.pools import producers
 
 from sentry.conf import settings
 from sentry.queue.queues import task_queues, task_exchange
 
 
+from kombu import BrokerConnection
+from kombu.common import maybe_declare
+from kombu.pools import producers
+
+
 class Broker(object):
     def __init__(self, config):
-        self.connection = BrokerConnection(**config)
+        self.config = config
+
+    def _get_connection(self):
+        if hasattr(self, '_connection'):
+            return self._connection
+
+        self._connection = BrokerConnection(**self.config)
+
         with producers[self.connection].acquire(block=False) as producer:
             for queue in task_queues:
                 maybe_declare(queue, producer.channel)
@@ -36,5 +45,16 @@ class Broker(object):
                 routing_key='sentry.default',
             )
 
-broker = Broker(settings.QUEUE)
+
+class EagerBroker(Broker):
+    """
+    Executes tasks within the same process.
+    """
+    def delay(self, func, *args, **kwargs):
+        return func(*args, **kwargs)
+
+if not settings.USE_QUEUE:
+    broker = EagerBroker(settings.QUEUE)
+else:
+    broker = Broker(settings.QUEUE)
 delay = broker.delay
diff --git a/tests/api/tests.py b/tests/api/tests.py
index 4bcb01aea1..323a040ac7 100644
--- a/tests/api/tests.py
+++ b/tests/api/tests.py
@@ -167,15 +167,9 @@ class APITest(TestCase):
             'timestamp': 'foo'
         })
 
-    def test_insert_data_to_database_with_queue(self):
+    @mock.patch('sentry.models.Group.objects.from_kwargs')
+    def test_insert_data_to_database(self, from_kwargs):
         insert_data_to_database({
             'foo': 'bar'
-        }, True)
-        self.assertEquals(Message.objects.filter(visible=True).count(), 1)
-
-    def test_insert_data_to_database_without_queue(self):
-        with mock.patch('sentry.models.Group.objects.from_kwargs') as from_kwargs:
-            insert_data_to_database({
-                'foo': 'bar'
-            }, False)
-            from_kwargs.assert_called_once_with(foo='bar')
+        })
+        from_kwargs.assert_called_once_with(foo='bar')
