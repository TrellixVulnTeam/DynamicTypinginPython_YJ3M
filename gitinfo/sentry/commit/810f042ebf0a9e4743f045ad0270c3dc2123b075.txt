commit 810f042ebf0a9e4743f045ad0270c3dc2123b075
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 17 00:24:15 2015 -0700

    Some initial work on an organization admin

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 0c96b7fe81..0c1735d0fb 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -1,14 +1,16 @@
 from __future__ import absolute_import
 
+from django.db.models import Q
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry import roles
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
+from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationMember
+    AuditLogEntryEvent, Organization, OrganizationMember, OrganizationStatus
 )
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -41,18 +43,46 @@ class OrganizationIndexEndpoint(Endpoint):
         user bound context.  For API key based requests this will
         only return the organization that belongs to the key.
 
+        :qparam bool member: restrict results to organizations which you have
+                             membership
+
         :auth: required
         """
+        member_only = request.GET.get('member') in ('1', 'true')
+
+        queryset = Organization.objects.filter(
+            status=OrganizationStatus.VISIBLE,
+        )
+
         if request.auth:
             if hasattr(request.auth, 'project'):
-                organizations = [request.auth.project.organization]
+                queryset = queryset.filter(
+                    id=request.auth.project.organization_id
+                )
             else:
-                organizations = [request.auth.organization]
-        else:
-            organizations = Organization.objects.get_for_user(
-                user=request.user,
+                queryset = queryset.filter(
+                    id=request.auth.organization.id
+                )
+        elif member_only or not request.user.is_active_superuser():
+            queryset = queryset.filter(
+                id__in=OrganizationMember.objects.filter(
+                    user=request.user,
+                ).values('organization'),
             )
-        return Response(serialize(organizations, request.user))
+
+        query = request.GET.get('query')
+        if query:
+            queryset = queryset.filter(
+                Q(name__icontains=query) | Q(slug__icontains=query),
+            )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='name',
+            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=OffsetPaginator,
+        )
 
     # XXX: endpoint useless for end-users as it needs user context.
     def post(self, request):
diff --git a/src/sentry/static/sentry/app/views/projectReleases/searchBar.jsx b/src/sentry/static/sentry/app/components/searchBar.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/projectReleases/searchBar.jsx
rename to src/sentry/static/sentry/app/components/searchBar.jsx
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 473aed09ef..4669e2bf52 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -4,6 +4,7 @@ var Route = Router.Route;
 var DefaultRoute = Router.DefaultRoute;
 
 import Admin from "./views/admin";
+import AdminOrganizations from "./views/adminOrganizations";
 import AdminOverview from "./views/adminOverview";
 import App from "./views/app";
 import GroupActivity from "./views/groupActivity";
@@ -35,6 +36,7 @@ import Stream from "./views/stream";
 var routes = (
   <Route name="app" path="/" handler={App}>
     <Route name="admin" path="/manage/" handler={Admin}>
+      <Route name="adminOrganizations" path="organizations/" handler={AdminOrganizations} />
       <DefaultRoute name="adminOverview" handler={AdminOverview} />
     </Route>
     <Route path="/organizations/:orgId/" handler={OrganizationDetails}>
diff --git a/src/sentry/static/sentry/app/views/admin/index.jsx b/src/sentry/static/sentry/app/views/admin/index.jsx
index 0c182e6db1..f72f14d559 100644
--- a/src/sentry/static/sentry/app/views/admin/index.jsx
+++ b/src/sentry/static/sentry/app/views/admin/index.jsx
@@ -38,6 +38,7 @@ const Admin = React.createClass({
 
                   <h6 className="nav-header">Manage</h6>
                   <ul className="nav nav-stacked">
+                    <ListLink to="adminOrganizations">Organizations</ListLink>
                     <li><a href={`${urlPrefix}/manage/teams/`}>Teams</a></li>
                     <li><a href={`${urlPrefix}/manage/projects/`}>Projects</a></li>
                     <li><a href={`${urlPrefix}/manage/users/`}>Users</a></li>
diff --git a/src/sentry/static/sentry/app/views/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
new file mode 100644
index 0000000000..6ea7cebd97
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
@@ -0,0 +1,183 @@
+import jQuery from "jquery";
+import React from "react";
+import Router from "react-router";
+
+import api from "../api";
+import LoadingError from "../components/loadingError";
+import LoadingIndicator from "../components/loadingIndicator";
+import Pagination from "../components/pagination";
+import RouteMixin from "../mixins/routeMixin";
+import SearchBar from "../components/searchBar.jsx";
+
+const AdminOrganizations = React.createClass({
+  mixins: [
+    RouteMixin
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getInitialState() {
+    let queryParams = this.context.router.getCurrentQuery();
+
+    return {
+      data: [],
+      loading: true,
+      error: false,
+      query: queryParams.query || '',
+      pageLinks: '',
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    let queryParams = this.context.router.getCurrentQuery();
+
+    api.request(`/organizations/`, {
+      method: 'GET',
+      data: queryParams,
+      success: (data, _, jqXHR) => {
+        this.setState({
+          data: data,
+          error: false,
+          loading: false,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: (error) => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  routeDidChange() {
+    let queryParams = this.context.router.getCurrentQuery();
+    this.setState({
+      query: queryParams.query,
+      loading: true,
+      error: false
+    }, this.fetchData);
+  },
+
+  onPage(cursor) {
+    let router = this.context.router;
+    let params = router.getCurrentParams();
+    let queryParams = jQuery.extend({}, router.getCurrentQuery(), {
+      cursor: cursor
+    });
+    router.transitionTo('adminOrganizations', params, queryParams);
+  },
+
+  onSearch(query) {
+    let router = this.context.router;
+    let params = router.getCurrentParams();
+
+    let targetQueryParams = {};
+    if (query !== '')
+      targetQueryParams.query = query;
+
+    router.transitionTo("adminOrganizations", params, targetQueryParams);
+  },
+
+  renderLoading() {
+    return (
+      <tr>
+        <td colSpan="3">
+          <LoadingIndicator />
+        </td>
+      </tr>
+    );
+  },
+
+  renderError() {
+    return (
+      <tr>
+        <td colSpan="3">
+          <LoadingError onRetry={this.remountComponent} />
+        </td>
+      </tr>
+    );
+  },
+
+  renderNoResults() {
+    return (
+      <tr>
+        <td colSpan="3">
+          <span className="icon icon-exclamation" />
+          <p>Sorry, no results match your filters.</p>
+        </td>
+      </tr>
+    );
+  },
+
+  renderResults() {
+    return this.state.data.map((item) => {
+      return (
+        <tr>
+          <td>
+            <Router.Link to="organizationDetails" params={{orgId: item.slug}}>
+              {item.name}
+            </Router.Link><br />
+            <small>{item.slug}</small>
+          </td>
+          <td>&mdash;</td>
+          <td>&mdash;</td>
+        </tr>
+      );
+    });
+  },
+
+  render() {
+    return (
+      <div>
+        <div className="row">
+          <div className="col-sm-7">
+            <h3>Organizations</h3>
+          </div>
+          <div className="col-sm-5">
+            <SearchBar defaultQuery=""
+              placeholder="Search for an organization."
+              query={this.state.query}
+              onSearch={this.onSearch}
+            />
+          </div>
+        </div>
+
+        <table className="table">
+          <thead>
+            <tr>
+              <th>Organization</th>
+              <th style={{width: 100}}>Members</th>
+              <th style={{width: 100}}>Projects</th>
+            </tr>
+          </thead>
+          <tbody>
+            {this.state.loading ?
+              this.renderLoading()
+            : (this.state.error ?
+              this.renderError()
+            : (this.state.data.length === 0 ?
+              this.renderNoResults()
+            :
+              this.renderResults()
+            ))}
+          </tbody>
+        </table>
+        <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
+      </div>
+    );
+  }
+});
+
+export default AdminOrganizations;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 49a9ec4519..d8fb5affe5 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -17,6 +17,9 @@ var App = React.createClass({
 
   componentWillMount() {
     api.request('/organizations/', {
+      query: {
+        'member': '1'
+      },
       success: (data) => {
         OrganizationStore.load(data);
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index 2ea6c90d4d..8dfe8a98c2 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -5,7 +5,7 @@ import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 import Pagination from "../../components/pagination";
 import RouteMixin from "../../mixins/routeMixin";
-import SearchBar from "./searchBar.jsx";
+import SearchBar from "../../components/searchBar.jsx";
 
 import ReleaseList from "./releaseList";
 
@@ -168,7 +168,6 @@ var ProjectReleases = React.createClass({
             <SearchBar defaultQuery=""
               placeholder="Search for a release."
               query={this.state.query}
-              onQueryChange={this.onQueryChange}
               onSearch={this.onSearch}
             />
           </div>
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5dbb12f852..c4f03501a2 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -175,8 +175,6 @@ urlpatterns += patterns(
     url(r'^account/settings/social/', include('social_auth.urls')),
 
     # Admin
-    url(r'^manage/$', react_page_view,
-        name='sentry-admin-overview'),
     url(r'^manage/queue/$', AdminQueueView.as_view(),
         name='sentry-admin-queue'),
     url(r'^manage/status/environment/$', admin.status_env,
@@ -210,6 +208,9 @@ urlpatterns += patterns(
     url(r'^manage/plugins/(?P<slug>[\w_-]+)/$', admin.configure_plugin,
         name='sentry-admin-configure-plugin'),
 
+    url(r'^manage/', react_page_view,
+        name='sentry-admin-overview'),
+
     # Legacy Redirects
     url(r'^docs/?$',
         RedirectView.as_view(url='https://docs.getsentry.com/hosted/', permanent=False),
