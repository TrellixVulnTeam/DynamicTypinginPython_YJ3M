commit 96893d6ad9bb038be660be8f07f75cc2aefc4c5d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 27 10:36:13 2016 -0700

    [security] prevent multiple auth payloads

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 9e2d7e2320..1852bdf959 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -18,6 +18,7 @@ import zlib
 
 from collections import MutableMapping
 from datetime import datetime, timedelta
+from django.core.exceptions import SuspiciousOperation
 from django.utils.crypto import constant_time_compare
 from gzip import GzipFile
 from six import BytesIO
@@ -185,16 +186,21 @@ class ClientApiHelper(object):
         self.log = ClientLogHelper(self.context)
 
     def auth_from_request(self, request):
+        result = {
+            k: request.GET[k]
+            for k in six.iterkeys(request.GET)
+            if k[:7] == 'sentry_'
+        }
+
         if request.META.get('HTTP_X_SENTRY_AUTH', '')[:7].lower() == 'sentry ':
+            if result:
+                raise SuspiciousOperation('Multiple authentication payloads were detected.')
             result = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
         elif request.META.get('HTTP_AUTHORIZATION', '')[:7].lower() == 'sentry ':
+            if result:
+                raise SuspiciousOperation('Multiple authentication payloads were detected.')
             result = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
-        else:
-            result = {
-                k: request.GET[k]
-                for k in six.iterkeys(request.GET)
-                if k[:7] == 'sentry_'
-            }
+
         if not result:
             raise APIUnauthorized('Unable to find authentication information')
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 24b071136e..eac1c9f13e 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -4,8 +4,10 @@ from __future__ import absolute_import
 
 import six
 import mock
+import pytest
 
 from datetime import datetime
+from django.core.exceptions import SuspiciousOperation
 from uuid import UUID
 
 from sentry.coreapi import (
@@ -30,18 +32,21 @@ class AuthFromRequestTest(BaseAPITest):
     def test_valid(self):
         request = mock.Mock()
         request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value, biz=baz'}
+        request.GET = {}
         result = self.helper.auth_from_request(request)
         assert result.public_key == 'value'
 
     def test_valid_missing_space(self):
         request = mock.Mock()
         request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,biz=baz'}
+        request.GET = {}
         result = self.helper.auth_from_request(request)
         assert result.public_key == 'value'
 
     def test_valid_ignore_case(self):
         request = mock.Mock()
         request.META = {'HTTP_X_SENTRY_AUTH': 'SeNtRy sentry_key=value, biz=baz'}
+        request.GET = {}
         result = self.helper.auth_from_request(request)
         assert result.public_key == 'value'
 
@@ -69,15 +74,24 @@ class AuthFromRequestTest(BaseAPITest):
     def test_invalid_header_missing_pair(self):
         request = mock.Mock()
         request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry foo'}
+        request.GET = {}
         with self.assertRaises(APIUnauthorized):
             self.helper.auth_from_request(request)
 
     def test_invalid_malformed_value(self):
         request = mock.Mock()
         request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,,biz=baz'}
+        request.GET = {}
         with self.assertRaises(APIUnauthorized):
             self.helper.auth_from_request(request)
 
+    def test_multiple_auth_suspicious(self):
+        request = mock.Mock()
+        request.GET = {'sentry_version': '1', 'foo': 'bar'}
+        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value, biz=baz'}
+        with pytest.raises(SuspiciousOperation):
+            self.helper.auth_from_request(request)
+
 
 class ProjectIdFromAuthTest(BaseAPITest):
     def test_invalid_if_missing_key(self):
