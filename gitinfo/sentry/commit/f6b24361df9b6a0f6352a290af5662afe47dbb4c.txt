commit f6b24361df9b6a0f6352a290af5662afe47dbb4c
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Jan 30 15:18:00 2019 -0800

    ref(snuba): Implement SnubaCompatibilityTagStorage (#11810)

diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 3eaff96b02..7d66774845 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -690,3 +690,68 @@ class SnubaTagStorage(TagStorage):
         # exist in Snuba. This logic is implemented in the search backend
         # instead.
         raise NotImplementedError
+
+
+class SnubaCompatibilityTagStorage(SnubaTagStorage):
+    """
+    This class extends the read-only SnubaTagStorage backend, implementing the
+    subset of the ``TagStorage`` write interface that is actually used by
+    callers external to the ``tagstore`` module.
+
+    This is necessary since writes to Snuba occur via the event stream and an
+    external writer process, instead of through this service backend. However,
+    we need still to "implement" these methods (so that at least they do not
+    raise a ``NotImplementedError``, as well as providing compatibile return
+    types when required by the call site) so that other backends that *do*
+    require these methods in the application to be available can still be used.
+
+    If Snuba becomes the exclusive implementer of the ``TagStorage`` interface
+    in the future, this subclass can be removed (along with the entire
+    ``TagStorage`` write interface from the base implementation.)
+    """
+    def get_or_create_group_tag_key(self, project_id, group_id, environment_id, key, **kwargs):
+        # Called by ``unmerge.repair_tag_data``. The return value is not used.
+        pass
+
+    def get_or_create_group_tag_value(self, project_id, group_id,
+                                      environment_id, key, value, **kwargs):
+        # Called by ``unmerge.repair_tag_data``. The first member of the return
+        # value is not used, the second indicates whether or not an object was
+        # created (always False in our case.)
+        return None, False
+
+    def create_event_tags(self, project_id, group_id, environment_id,
+                          event_id, tags, date_added=None):
+        # Called by ``post_process.index_event_tags``. The return value is not
+        # used.
+        pass
+
+    def delete_all_group_tag_keys(self, project_id, group_id):
+        # Called by ``unmerge.truncate_denormalizations``. The return value is
+        # not used.
+        pass
+
+    def delete_all_group_tag_values(self, project_id, group_id):
+        # Called by ``unmerge.truncate_denormalizations``. The return value is
+        # not used.
+        pass
+
+    def incr_tag_value_times_seen(self, project_id, environment_id,
+                                  key, value, extra=None, count=1):
+        # Called by ``Group.add_tags``. The return value is not used.
+        pass
+
+    def incr_group_tag_value_times_seen(
+            self, project_id, group_id, environment_id, key, value, extra=None, count=1):
+        # Called by ``Group.add_tags`` (and ``unmerge.repair_tag_data`` if
+        # ``get_or_create_group_tag_value`` indicates an object is created --
+        # in our case this will never happen.) The return value is not used.
+        pass
+
+    def update_group_for_events(self, project_id, event_ids, destination_id):
+        # Called by ``unmerge.migrate_events``. The return value is not used.
+        pass
+
+    def update_group_tag_key_values_seen(self, project_id, group_ids):
+        # Called by ``unmerge``. The return value is not used.
+        pass
