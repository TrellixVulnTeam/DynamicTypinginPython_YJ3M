commit 3ffb9f4963ab66ff8fa851e34d9727884cb75ab6
Author: Matte Noble <me@mattenoble.com>
Date:   Fri Jul 27 13:39:28 2018 -0700

    feat(integrations): BitBucket Repo Migration (#9181)
    
    After the new BitBucket integration is installed, it will automatically migrate all existing Repositories that are accessible by the new integration.

diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 378dc176a1..ea61735e44 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -5,6 +5,8 @@ from sentry.integrations.repositories import RepositoryMixin
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import Repository
 from sentry.utils.http import absolute_uri
 
 from .repository import BitbucketRepositoryProvider
@@ -56,6 +58,21 @@ class BitbucketIntegration(Integration, BitbucketIssueBasicMixin, RepositoryMixi
             )
         return data
 
+    def get_unmigratable_repositories(self):
+        repos = Repository.objects.filter(
+            organization_id=self.organization_id,
+            provider='bitbucket',
+        )
+
+        accessible_repos = [
+            r['identifier'] for r in self.get_repositories()
+        ]
+
+        return filter(
+            lambda repo: repo.name not in accessible_repos,
+            repos,
+        )
+
     def reinstall(self):
         self.reinstall_repositories()
 
@@ -80,6 +97,19 @@ class BitbucketIntegrationProvider(IntegrationProvider):
         )
         return [identity_pipeline_view]
 
+    def post_install(self, integration, organization):
+        repos = Repository.objects.filter(
+            organization_id=organization.id,
+            provider='bitbucket',
+        )
+
+        unmigrateable_repos = self \
+            .get_installation(integration, organization.id) \
+            .get_unmigratable_repositories()
+
+        for repo in filter(lambda r: r not in unmigrateable_repos, repos):
+            repo.update(integration_id=integration.id)
+
     def build_integration(self, state):
         # TODO(LB): Add verification for clientKey
         if state.get('publicKey'):
diff --git a/tests/sentry/integrations/bitbucket/test_installed.py b/tests/sentry/integrations/bitbucket/test_installed.py
index fc36606af5..59d2b65d9d 100644
--- a/tests/sentry/integrations/bitbucket/test_installed.py
+++ b/tests/sentry/integrations/bitbucket/test_installed.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
+import responses
+
 from sentry.testutils import APITestCase
 from sentry.integrations.bitbucket.installed import BitbucketInstalledEndpoint
-from sentry.integrations.bitbucket.integration import scopes
-from sentry.models import Integration
+from sentry.integrations.bitbucket.integration import scopes, BitbucketIntegrationProvider
+from sentry.models import Integration, Repository
 
 
 class BitbucketInstalledEndpointTest(APITestCase):
@@ -81,6 +83,57 @@ class BitbucketInstalledEndpointTest(APITestCase):
         assert integration.name == self.username
         assert integration.metadata == self.metadata
 
+    @responses.activate
+    def test_plugin_migration(self):
+        accessible_repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name='sentryuser/repo',
+            url='https://bitbucket.org/sentryuser/repo',
+            provider='bitbucket',
+            external_id='123456',
+        )
+
+        inaccessible_repo = Repository.objects.create(
+            organization_id=self.organization.id,
+            name='otheruser/otherrepo',
+            url='https://bitbucket.org/otheruser/otherrepo',
+            provider='bitbucket',
+            external_id='654321',
+        )
+
+        self.client.post(
+            self.path,
+            data=self.data_from_bitbucket
+        )
+
+        integration = Integration.objects.get(
+            provider=self.provider,
+            external_id=self.client_key,
+        )
+
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/{}'.format(self.username),
+            json={
+                'values': [{
+                    'full_name': 'sentryuser/repo',
+                }],
+            },
+        )
+
+        BitbucketIntegrationProvider().post_install(
+            integration,
+            self.organization,
+        )
+
+        assert Repository.objects.get(
+            id=accessible_repo.id
+        ).integration_id == integration.id
+
+        assert Repository.objects.get(
+            id=inaccessible_repo.id
+        ).integration_id is None
+
     def test_installed_without_public_key(self):
         integration = Integration.objects.get_or_create(
             provider=self.provider,
