commit 5f04453dd4e881619b97f8c657280f6be192c6dc
Author: Mark Story <mark@sentry.io>
Date:   Fri Mar 13 10:33:18 2020 -0400

    fix(issues) Correctly handle internal field names (#17590)
    
    Issue search should not be using internal field names. Instead all
    non-public event columns should be handled as tags. The default aliasing
    logic in `aliased_query` allows internal field names to be used as
    a shim for snuba queries that come from within the application. However,
    issue search should be using the more conservative
    get_snuba_column_name() which doesn't allow internal field usage.

diff --git a/src/sentry/search/snuba/executors.py b/src/sentry/search/snuba/executors.py
index c4099d0d3d..5538952c5c 100644
--- a/src/sentry/search/snuba/executors.py
+++ b/src/sentry/search/snuba/executors.py
@@ -191,6 +191,7 @@ class AbstractQueryExecutor:
             totals=True,  # Needs to have totals_mode=after_having_exclusive so we get groups matching HAVING only
             turbo=get_sample,  # Turn off FINAL when in sampling mode
             sample=1,  # Don't use clickhouse sampling, even when in turbo mode.
+            condition_resolver=snuba.get_snuba_column_name,
         )
         rows = snuba_results["data"]
         total = snuba_results["totals"]["total"]
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 52ff390f19..8d70d2dbd1 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -745,6 +745,7 @@ def aliased_query(
     having=None,
     dataset=None,
     orderby=None,
+    condition_resolver=None,
     **kwargs
 ):
     """
@@ -775,7 +776,8 @@ def aliased_query(
             derived_columns.append(aggregation[2])
 
     if conditions:
-        column_resolver = functools.partial(resolve_column, dataset=dataset)
+        condition_resolver = condition_resolver or resolve_column
+        column_resolver = functools.partial(condition_resolver, dataset=dataset)
         for (i, condition) in enumerate(conditions):
             replacement = resolve_condition(condition, column_resolver)
             conditions[i] = replacement
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 1c24e9c113..4d37d1fee0 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -426,6 +426,22 @@ class EventsSnubaSearchTest(TestCase, SnubaTestCase):
         results = self.make_query(search_filter_query="priority:%s" % priority, sort_by="priority")
         assert list(results) == [self.group1, self.group2]
 
+    def test_search_tag_overlapping_with_internal_fields(self):
+        # Using a tag of email overlaps with the promoted user.email column in events.
+        # We don't want to bypass public schema limits in issue search.
+        self.store_event(
+            data={
+                "fingerprint": ["put-me-in-group2"],
+                "timestamp": iso_format(self.group2.first_seen + timedelta(days=1)),
+                "stacktrace": {"frames": [{"module": "group2"}]},
+                "message": "group2",
+                "tags": {"email": "tags@example.com"},
+            },
+            project_id=self.project.id,
+        )
+        results = self.make_query(search_filter_query="email:tags@example.com")
+        assert set(results) == set([self.group2])
+
     def test_project(self):
         results = self.make_query([self.create_project(name="other")])
         assert set(results) == set([])
