commit c57f8bc477b329e2991a52c973bc07960e2b9c83
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 3 02:14:38 2012 -0800

    Initial tests for views

diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 0107dbf4ad..efebbf938c 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -296,11 +296,11 @@ class GroupManager(models.Manager, ChartMixin):
                 if not viewhandler.should_store(event):
                     continue
 
-                path = '%s.%s' % (viewhandler.__module__, viewhandler.__name__)
+                path = '%s.%s' % (viewhandler.__module__, viewhandler.__class__.__name__)
 
                 if not viewhandler.ref:
                     # TODO: this should handle race conditions
-                    viewhandler.ref = View.objects.get_or_create(path=path)
+                    viewhandler.ref = View.objects.get_or_create(path=path)[0]
 
                 views.add(viewhandler.ref)
 
diff --git a/sentry/views/message.py b/sentry/views/message.py
index fd727c0e47..a441e04b1a 100644
--- a/sentry/views/message.py
+++ b/sentry/views/message.py
@@ -15,3 +15,6 @@ __all__ = ('Message',)
 class Message(View):
     verbose_name = _('message')
     verbose_name_plural = _('messages')
+
+    def should_store(self, event):
+        return 'sentry.interfaces.Message' in event.interfaces
diff --git a/sentry/views/query.py b/sentry/views/query.py
index 1bdff4297c..090ab842b2 100644
--- a/sentry/views/query.py
+++ b/sentry/views/query.py
@@ -15,3 +15,6 @@ __all__ = ('Query',)
 class Query(View):
     verbose_name = _('query')
     verbose_name_plural = _('queries')
+
+    def should_store(self, event):
+        return 'sentry.interfaces.Query' in event.interfaces
diff --git a/sentry/web/frontend/groups.py b/sentry/web/frontend/groups.py
index 2ae7d3d8ab..414897f23c 100644
--- a/sentry/web/frontend/groups.py
+++ b/sentry/web/frontend/groups.py
@@ -21,7 +21,7 @@ from django.views.decorators.csrf import csrf_exempt
 
 from sentry.conf import settings
 from sentry.filters import Filter
-from sentry.models import Group, Event, Project
+from sentry.models import Group, Event, Project, View
 from sentry.plugins import GroupActionProvider
 from sentry.utils import json
 from sentry.web.decorators import has_access, login_required
@@ -221,7 +221,13 @@ def search(request, project):
 
 @login_required
 @has_access
-def group_list(request, project):
+def group_list(request, project, view=None):
+    if view:
+        try:
+            view = View.objects.get(pk=view)
+        except View.DoesNotExist:
+            return HttpResponseRedirect(reverse('sentry', args=[project.pk]))
+
     filters = []
     for cls in Filter.handlers.filter(Group):
         filters.append(cls(request))
@@ -233,6 +239,9 @@ def group_list(request, project):
 
     event_list = Group.objects.filter(project=project)
 
+    if view:
+        event_list = event_list.filter(views=view)
+
     # Filters only apply if we're not searching
     any_filter = False
     for filter_ in filters:
diff --git a/tests/views/tests.py b/tests/views/tests.py
index e69de29bb2..a127ffb0d6 100644
--- a/tests/views/tests.py
+++ b/tests/views/tests.py
@@ -0,0 +1,113 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from mock import Mock
+
+from sentry.conf import settings
+from sentry.models import Event
+from sentry.views import View, Exception, Query, Message
+
+from tests.base import TestCase
+
+
+class ViewIntegrationTest(TestCase):
+    def setUp(self):
+        self.orig = settings.VIEWS
+        View.handlers.update((
+            'sentry.views.Exception',
+            'sentry.views.Query',
+            'sentry.views.Message',
+        ))
+        assert len(View.handlers.all()) == 3
+
+    def tearDown(self):
+        settings.VIEWS = self.orig
+        View.handlers.update(settings.VIEWS)
+
+    def create_event(self, data):
+        kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        kwargs.update(data)
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200, resp.content)
+
+    def test_single_content(self):
+        self.create_event({
+            'sentry.interfaces.Message': {
+                'message': 'this is a message',
+                'params': [],
+            },
+        })
+
+        instance = Event.objects.get()
+        group = instance.group
+        views = list(group.views.all())
+        self.assertEquals(len(views), 1)
+        self.assertEquals(views[0].path, 'sentry.views.message.Message')
+
+    def test_multi_content(self):
+        self.create_event({
+            'sentry.interfaces.Message': {
+                'message': 'this is a message',
+                'params': [],
+            },
+            'sentry.interfaces.Query': {
+                'query': 'SELECT 1 FROM foo',
+            },
+        })
+
+        instance = Event.objects.get()
+        group = instance.group
+        views = list(group.views.all())
+        self.assertEquals(len(views), 2)
+        paths = [v.path for v in views]
+        self.assertTrue('sentry.views.message.Message' in paths)
+        self.assertTrue('sentry.views.query.Query' in paths)
+
+
+class ExceptionViewTest(TestCase):
+    def test_should_store_response(self):
+        event = Mock()
+        event.interfaces = {
+            'sentry.interfaces.Exception': {}
+        }
+        resp = Exception().should_store(event)
+        self.assertTrue(resp)
+
+    def test_should_not_store_response(self):
+        event = Mock()
+        event.interfaces = {}
+        resp = Exception().should_store(event)
+        self.assertFalse(resp)
+
+
+class QueryViewTest(TestCase):
+    def test_should_store_response(self):
+        event = Mock()
+        event.interfaces = {
+            'sentry.interfaces.Query': {}
+        }
+        resp = Query().should_store(event)
+        self.assertTrue(resp)
+
+    def test_should_not_store_response(self):
+        event = Mock()
+        event.interfaces = {}
+        resp = Query().should_store(event)
+        self.assertFalse(resp)
+
+
+class MessageViewTest(TestCase):
+    def test_should_store_response(self):
+        event = Mock()
+        event.interfaces = {
+            'sentry.interfaces.Message': {}
+        }
+        resp = Message().should_store(event)
+        self.assertTrue(resp)
+
+    def test_should_not_store_response(self):
+        event = Mock()
+        event.interfaces = {}
+        resp = Message().should_store(event)
+        self.assertFalse(resp)
