commit c2986e7e0e5abb3a71287b5e2c1143ccade3a82a
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Sep 10 15:14:18 2015 -0700

    Fix broken tag distribution meter not filling 100% width

diff --git a/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx
index 87e7d1e40e..88ec75b5b9 100644
--- a/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/views/groupOverview/tagDistributionMeter.jsx
@@ -62,86 +62,82 @@ var TagDistributionMeter = React.createClass({
     });
   },
 
-  render() {
-    if (this.state.loading)
-      return (
-        <div className="distribution-graph">
-          <h6><span>{this.props.name}</span></h6>
-        </div>
-      );
-
-    if (this.state.error)
-      return (
-        <div className="distribution-graph">
-          <h6><span>{this.props.name}</span></h6>
-        </div>
-      );
-
-    var data = this.state.data;
-    var totalValues = data.totalValues;
-
-    if (!totalValues) {
-      return (
-        <div className="distribution-graph">
-          <h6><span>{this.props.name}</span></h6>
-          <p>No recent data.</p>
-        </div>
-      );
-    }
-
-    var totalVisible = 0;
-    data.topValues.forEach((value) => {
-      totalVisible += value.count;
-    });
+  /**
+   * Render segments of tag distribution
+   *
+   * e.g.
+   *
+   * .--------.-----.----------------.
+   * |  web-1 |web-2|     other      |
+   * `--------'-----'----------------'
+   */
 
-    var hasOther = (totalVisible < totalValues);
-    var otherPct = percent(totalValues - totalVisible, totalValues);
-    var otherPctLabel = Math.floor(otherPct);
+  renderSegments() {
+    let data = this.state.data;
+    let totalValues = data.totalValues;
 
-    var currentParams = this.context.router.getCurrentParams();
-    var params = {
-      orgId: currentParams.orgId,
-      projectId: currentParams.projectId,
-      groupId: currentParams.groupId,
-      tagKey: this.props.tag
-    };
+    let totalVisible = data.topValues.reduce((sum, value) => sum + value.count, 0);
+
+    let hasOther = totalVisible < totalValues;
+    let otherPct = percent(totalValues - totalVisible, totalValues);
+    let otherPctLabel = Math.floor(otherPct);
+
+    let params = Object.assign({}, this.context.router.getCurrentParams());
+    params.tagKey = this.props.tag;
 
     return (
-      <div className="distribution-graph">
-        <h6><span>{this.props.name}</span></h6>
-        <div className="segments">
-          {data.topValues.map((value) => {
-            var pct = percent(value.count, totalValues);
-            var pctLabel = Math.floor(pct);
-
-            return (
-              <Router.Link
-                  key={value}
-                  className="segment" style={{width: pct + "%"}}
-                  to="groupTagValues"
-                  params={params}
-                  title={'<div class="truncate">' + escape(value.name) + '</div>' + pctLabel + '%'}>
-                <span className="tag-description">
-                  <span className="tag-percentage">{pctLabel}%</span>
-                  <span className="tag-label">{value.name}</span>
-                </span>
-              </Router.Link>
-            );
-          })}
-          {hasOther &&
+      <div className="segments">
+        {data.topValues.map((value) => {
+          var pct = percent(value.count, totalValues);
+          var pctLabel = Math.floor(pct);
+
+          return (
             <Router.Link
-                key="other"
-                className="segment" style={{width: otherPct + "%"}}
+                key={value.value}
+                className="segment" style={{width: pct + "%"}}
                 to="groupTagValues"
                 params={params}
-                title={'Other<br/>' + otherPctLabel + '%'}>
+                title={'<div class="truncate">' + escape(value.name) + '</div>' + pctLabel + '%'}>
               <span className="tag-description">
-                <span className="tag-percentage">{otherPctLabel}%</span>
-                <span className="tag-label">Other</span>
+                <span className="tag-percentage">{pctLabel}%</span>
+                <span className="tag-label">{value.name}</span>
               </span>
             </Router.Link>
-          }
-        </div>
+          );
+        })}
+        {hasOther &&
+          <Router.Link
+              key="other"
+              className="segment" style={{width: otherPct + "%"}}
+              to="groupTagValues"
+              params={params}
+              title={'Other<br/>' + otherPctLabel + '%'}>
+            <span className="tag-description">
+              <span className="tag-percentage">{otherPctLabel}%</span>
+              <span className="tag-label">Other</span>
+            </span>
+          </Router.Link>
+        }
+      </div>
+    );
+  },
+
+  renderBody() {
+    if (this.state.loading || this.state.error)
+      return null;
+
+    if (!this.state.data.totalValues)
+      return <p>No recent data.</p>;
+
+    return this.renderSegments();
+  },
+
+
+  render() {
+    return (
+      <div className="distribution-graph">
+        <h6><span>{this.props.name}</span></h6>
+        {this.renderBody()}
       </div>
     );
   }
diff --git a/tests/js/spec/views/groupOverview/tagDistributionMeter.spec.jsx b/tests/js/spec/views/groupOverview/tagDistributionMeter.spec.jsx
new file mode 100644
index 0000000000..00e1a25dcc
--- /dev/null
+++ b/tests/js/spec/views/groupOverview/tagDistributionMeter.spec.jsx
@@ -0,0 +1,99 @@
+var React = require("react/addons");
+var TestUtils = React.addons.TestUtils;
+
+var api = require("app/api");
+var TagDistributionMeter = require("app/views/groupOverview/TagDistributionMeter");
+var stubRouter = require("../../../helpers/stubRouter");
+var stubContext = require("../../../helpers/stubContext");
+
+describe("TagDistributionMeter", function() {
+
+  beforeEach(function() {
+    this.sandbox = sinon.sandbox.create();
+
+    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+
+    let ContextStubbedTagDistributionMeter = stubContext(TagDistributionMeter, {
+      organization: { id: 1337 },
+      router: stubRouter({
+        getCurrentParams() {
+          return { orgId: "123" };
+        },
+        getCurrentQuery() {
+          return { limit: 0 };
+        }
+      })
+    });
+
+    this.element = TestUtils.renderIntoDocument(<ContextStubbedTagDistributionMeter tag="browser" group={{id:1337}}/>).refs.wrapped;
+  });
+
+  afterEach(function() {
+    this.sandbox.restore();
+  });
+
+  describe("fetchData()", function() {
+    it('should make a request to the groups/tags endpoint', function () {
+      // NOTE: creation of OrganizationTeams causes a bunch of API requests to fire ...
+      //       reset the request stub so that we can get an accurate count
+      this.stubbedApiRequest.reset();
+
+      this.element.fetchData();
+
+      expect(this.stubbedApiRequest.callCount).to.equal(1);
+      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal('/groups/1337/tags/browser/');
+    });
+  });
+
+  describe("renderBody()", function () {
+    it('should return null if loading', function (done) {
+      this.element.setState({
+        loading: true,
+        error: false
+      }, () => {
+        expect(this.element.renderBody()).to.be.null;
+        done();
+      });
+    });
+
+    it('should return null if in an error state', function (done) {
+      this.element.setState({
+        error: true,
+        loading: false
+      }, () => {
+        expect(this.element.renderBody()).to.be.null;
+        done();
+      });
+    });
+
+    it('should return "no recent data" if no total values present', function (done) {
+      this.element.setState({
+        error: false,
+        loading: false,
+        data: {
+          totalValues: 0
+        }
+      }, () => {
+        let out = this.element.renderBody();
+        expect(React.renderToStaticMarkup(out)).to.eql('<p>No recent data.</p>');
+        done();
+      });
+    });
+
+    it('should call renderSegments() if values present', function (done) {
+      this.sandbox.stub(this.element, 'renderSegments');
+
+      this.element.setState({
+        error: false,
+        loading: false,
+        data: {
+          totalValues: 100
+        }
+      }, () => {
+        this.element.renderBody();
+        expect(this.element.renderSegments.calledOnce);
+        done();
+      });
+    });
+  });
+});
