commit 53b471b63aa800ce60fd3f74fd0a8c8af2c7cd02
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Thu Jun 18 14:29:36 2020 -0400

    feat(async-csv): Link discover exports back to query (#19426)
    
    Add a link from the download page back to the original query to allow users to look at the query
    itself as well as make any changes then running another export.

diff --git a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
index 51fc2642f9..035a722021 100644
--- a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
+++ b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {browserHistory} from 'react-router';
 import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
@@ -136,11 +137,58 @@ class DataDownload extends AsyncView<Props, State> {
       </React.Fragment>
     );
   }
+
+  openInDiscover() {
+    const {
+      download: {
+        query: {info},
+      },
+    } = this.state;
+    const {orgId} = this.props.params;
+
+    const to = {
+      pathname: `/organizations/${orgId}/discover/results/`,
+      query: info,
+    };
+
+    browserHistory.push(to);
+  }
+
+  renderOpenInDiscover() {
+    const {
+      download: {
+        query = {
+          type: ExportQueryType.IssuesByTag,
+          info: {},
+        },
+      },
+    } = this.state;
+
+    // default to IssuesByTag because we dont want to
+    // display this unless we're sure its a discover query
+    const {type = ExportQueryType.IssuesByTag} = query;
+
+    return type === 'Discover' ? (
+      <React.Fragment>
+        <p>{t('Need to make changes?')}</p>
+        <Button
+          priority="primary"
+          icon="icon-discover"
+          onClick={() => this.openInDiscover()}
+        >
+          {t('Open in Discover')}
+        </Button>
+        <br />
+      </React.Fragment>
+    ) : null;
+  }
+
   renderValid(): React.ReactNode {
     const {
       download: {dateExpired, checksum},
     } = this.state;
     const {orgId, dataExportId} = this.props.params;
+
     return (
       <React.Fragment>
         <Header>
@@ -160,10 +208,12 @@ class DataDownload extends AsyncView<Props, State> {
             <br />
             {this.renderDate(dateExpired)}
           </p>
-          <small>
-            <strong>SHA1:{checksum}</strong>
-          </small>
+          {this.renderOpenInDiscover()}
           <p>
+            <small>
+              <strong>SHA1:{checksum}</strong>
+            </small>
+            <br />
             {tct('Need help verifying? [link].', {
               link: (
                 <a
@@ -171,7 +221,7 @@ class DataDownload extends AsyncView<Props, State> {
                   target="_blank"
                   rel="noopener noreferrer"
                 >
-                  {t('Check out our docs.')}
+                  {t('Check out our docs')}
                 </a>
               ),
             })}
@@ -180,6 +230,7 @@ class DataDownload extends AsyncView<Props, State> {
       </React.Fragment>
     );
   }
+
   renderError(): React.ReactNode {
     const {
       errors: {download: err},
diff --git a/tests/js/spec/views/dataExport/dataDownload.spec.jsx b/tests/js/spec/views/dataExport/dataDownload.spec.jsx
index abb71caaf7..389e5e3372 100644
--- a/tests/js/spec/views/dataExport/dataDownload.spec.jsx
+++ b/tests/js/spec/views/dataExport/dataDownload.spec.jsx
@@ -78,4 +78,34 @@ describe('DataDownload', function() {
     );
     expect(wrapper.find('DateTime').prop('date')).toEqual(new Date(dateExpired));
   });
+
+  it('should render the Open in Discover button when needed', function() {
+    const status = DownloadStatus.Valid;
+    getDataExportDetails({
+      dateExpired,
+      status,
+      query: {
+        type: ExportQueryType.Discover,
+        info: {},
+      },
+    });
+    const wrapper = mountWithTheme(<DataDownload params={mockRouteParams} />);
+    const buttonWrapper = wrapper.find('button[aria-label="Open in Discover"]');
+    expect(buttonWrapper.exists()).toBeTruthy();
+  });
+
+  it('should not render the Open in Discover button when not needed', function() {
+    const status = DownloadStatus.Valid;
+    getDataExportDetails({
+      dateExpired,
+      status,
+      query: {
+        type: ExportQueryType.IssuesByTag,
+        info: {},
+      },
+    });
+    const wrapper = mountWithTheme(<DataDownload params={mockRouteParams} />);
+    const buttonWrapper = wrapper.find('button[aria-label="Open in Discover"]');
+    expect(buttonWrapper.exists()).toBeFalsy();
+  });
 });
