commit 44816d606ca014d96c33391bb55b9f0d2bd6e37a
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Oct 7 02:14:09 2015 -0700

    Fix all F841 lint violations and enforce

diff --git a/setup.cfg b/setup.cfg
index c6fbddfa9a..4dd570852b 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -4,7 +4,7 @@ addopts=--tb=native -p no:doctest
 norecursedirs=bin dist docs	htmlcov script hooks node_modules .* {args}
 
 [flake8]
-ignore = F999,E501,E128,E124,E402,W503,E731,F841
+ignore = F999,E501,E128,E124,E402,W503,E731
 max-line-length = 100
 exclude = .tox,.git,*/migrations/*,node_modules/*,src/sentry/static/sentry/vendor/*,docs/*
 
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index ee627de871..62659d978b 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -40,13 +40,12 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
         else:
             lookup_key = key
 
-        try:
-            tagkey = TagKey.objects.get(
-                project=group.project_id,
-                key=lookup_key,
-                status=TagKeyStatus.VISIBLE,
-            )
-        except TagKey.DoesNotExist:
+        tagkey = TagKey.objects.filter(
+            project=group.project_id,
+            key=lookup_key,
+            status=TagKeyStatus.VISIBLE,
+        )
+        if not tagkey.exists():
             raise ResourceDoesNotExist
 
         queryset = GroupTagValue.objects.filter(
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index e95d551c99..76c11ef4ba 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -269,8 +269,6 @@ class AuthHelper(object):
 
     def _handle_new_user(self, identity):
         auth_provider = self.auth_provider
-        organization = self.organization
-        request = self.request
 
         user = User.objects.create(
             username=uuid4().hex,
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 9a1e90d312..4ce130bb74 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -442,8 +442,6 @@ class EventManager(object):
             **group_kwargs
         )
 
-        using = group._state.db
-
         event.group = group
         event.group_id = group.id
         # store a reference to the group id to guarantee validation of isolation
@@ -560,7 +558,6 @@ class EventManager(object):
         )
 
     def _save_aggregate(self, event, hashes, **kwargs):
-        time_spent = event.time_spent
         project = event.project
 
         # attempt to find a matching hash
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 41b97aa56a..07cd3ec20c 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -469,7 +469,6 @@ class SourceProcessor(object):
     def expand_frames(self, frames):
         last_state = None
         state = None
-        has_changes = False
 
         cache = self.cache
         sourcemaps = self.sourcemaps
@@ -478,7 +477,6 @@ class SourceProcessor(object):
         for frame in frames:
             errors = cache.get_errors(frame.abs_path)
             if errors:
-                has_changes = True
                 all_errors.extend(errors)
 
             source = cache.get(frame.abs_path)
diff --git a/src/sentry/nodestore/riak/client.py b/src/sentry/nodestore/riak/client.py
index c4c02593b6..a8cd3b6bba 100644
--- a/src/sentry/nodestore/riak/client.py
+++ b/src/sentry/nodestore/riak/client.py
@@ -223,7 +223,7 @@ class ConnectionManager(object):
                 conn = self.strategy.next(self.connections)
                 try:
                     return conn.urlopen(method, path, **kwargs)
-                except HTTPError as e:
+                except HTTPError:
                     self.mark_dead(conn)
 
                     if len(self.connections) == 0:
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index b69386c1f0..4187704fe7 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -82,7 +82,7 @@ class OptionsManager(object):
 
         try:
             self.update_cached_value(key, value)
-        except Exception as e:
+        except Exception:
             self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
 
     def get(self, key):
@@ -99,7 +99,7 @@ class OptionsManager(object):
 
         try:
             result = self.cache.get(cache_key)
-        except Exception as e:
+        except Exception:
             self.logger.warn(CACHE_FETCH_ERR, key, exc_info=True)
             result = None
             cache_success = False
@@ -120,7 +120,7 @@ class OptionsManager(object):
             if result is not None and cache_success:
                 try:
                     self.update_cached_value(key, result)
-                except Exception as e:
+                except Exception:
                     self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
 
         if not result:
@@ -145,7 +145,7 @@ class OptionsManager(object):
 
         try:
             self.cache.delete(cache_key)
-        except Exception as e:
+        except Exception:
             self.logger.warn(CACHE_UPDATE_ERR, key, exc_info=True)
 
     def update_cached_value(self, key, value):
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index 14a0343283..7aab3b8669 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -34,7 +34,7 @@ class ReleaseHook(object):
             project=self.project,
             values=values,
         )
-        activity = Activity.objects.create(
+        Activity.objects.create(
             type=Activity.RELEASE,
             project=self.project,
             ident=version,
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 6eaae122e9..67c9e538dc 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -47,7 +47,7 @@ def create_default_projects(created_models, verbosity=2, **kwargs):
     )
 
     if settings.SENTRY_FRONTEND_PROJECT:
-        project = create_default_project(
+        create_default_project(
             id=settings.SENTRY_FRONTEND_PROJECT,
             name='Frontend',
             slug='frontend',
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 2ec97d78ca..e49b1adf76 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -321,8 +321,6 @@ def with_metadata(group_list, request):
 
 @register.inclusion_tag('sentry/plugins/bases/tag/widget.html')
 def render_tag_widget(group, tag):
-    cutoff = timezone.now() - timedelta(days=7)
-
     return {
         'title': tag['label'],
         'tag_name': tag['key'],
diff --git a/src/sentry/utils/cache.py b/src/sentry/utils/cache.py
index 85be3cae4f..9cb95b52d1 100644
--- a/src/sentry/utils/cache.py
+++ b/src/sentry/utils/cache.py
@@ -62,7 +62,6 @@ class Lock(object):
         if time_remaining:
             raise LockAlreadyHeld('Tried to acquire lock that is already held, %.3fs remaining: %r' % (time_remaining, self))
 
-        started_at = time()
         self.__acquired_at = None
 
         delay = 0.01 + random.random() / 10
diff --git a/src/sentry/utils/db.py b/src/sentry/utils/db.py
index 0e2c1efee1..d7c0d83060 100644
--- a/src/sentry/utils/db.py
+++ b/src/sentry/utils/db.py
@@ -35,7 +35,6 @@ def is_sqlite(alias='default'):
 
 
 def has_charts(db):
-    engine = get_db_engine(db)
     if is_sqlite(db):
         return False
     return True
diff --git a/src/sentry/utils/metrics.py b/src/sentry/utils/metrics.py
index 1f1060e7d2..5a5cd66de8 100644
--- a/src/sentry/utils/metrics.py
+++ b/src/sentry/utils/metrics.py
@@ -41,7 +41,6 @@ def _sampled_value(value):
 def _incr_internal(key, instance=None, tags=None, amount=1):
     from sentry.app import tsdb
 
-    sample_rate = settings.SENTRY_METRICS_SAMPLE_RATE
     if _should_sample():
         amount = _sampled_value(amount)
         if instance:
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index 6334fbf53f..bdf0896514 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -68,7 +68,6 @@ class RangeQuerySetWrapper(object):
             queryset = queryset.order_by(self.order_by)
 
         # we implement basic cursor pagination for columns that are not unique
-        last_value = None
         last_object = None
         has_results = True
         while has_results:
@@ -97,7 +96,6 @@ class RangeQuerySetWrapper(object):
 
                 num += 1
                 cur_value = getattr(result, self.order_by)
-                last_value = cur_value
                 last_object = result
 
             if cur_value is None:
diff --git a/src/sentry/web/frontend/auth_link_identity.py b/src/sentry/web/frontend/auth_link_identity.py
index 7f9e45f63d..9ed0c81d4c 100644
--- a/src/sentry/web/frontend/auth_link_identity.py
+++ b/src/sentry/web/frontend/auth_link_identity.py
@@ -87,12 +87,11 @@ class AuthLinkIdentityView(BaseView):
         return self.respond('sentry/auth-link-login.html', context)
 
     def handle_authed(self, request, organization, auth_provider):
-        try:
-            om = OrganizationMember.objects.get(
-                organization=organization,
-                user=request.user,
-            )
-        except OrganizationMember.DoesNotExist:
+        om = OrganizationMember.objects.filter(
+            organization=organization,
+            user=request.user,
+        )
+        if not om.exists():
             auth_logger.debug('User does is not a member of organization: %s',
                               organization.slug)
             messages.add_message(
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index ef475b6278..623ca2bb92 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -32,7 +32,7 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
 
     def test_org_member_with_global_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
@@ -43,7 +43,7 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
 
     def test_org_member_without_global_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
diff --git a/tests/sentry/api/bases/test_project.py b/tests/sentry/api/bases/test_project.py
index d738bcb40e..eac3954fe9 100644
--- a/tests/sentry/api/bases/test_project.py
+++ b/tests/sentry/api/bases/test_project.py
@@ -34,7 +34,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
 
     def test_org_member_without_team_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
@@ -44,7 +44,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
 
     def test_org_member_with_global_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
@@ -54,7 +54,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
 
     def test_org_member_with_team_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
diff --git a/tests/sentry/api/bases/test_team.py b/tests/sentry/api/bases/test_team.py
index 1c1be786ed..388940c379 100644
--- a/tests/sentry/api/bases/test_team.py
+++ b/tests/sentry/api/bases/test_team.py
@@ -33,7 +33,7 @@ class TeamPermissionTest(TeamPermissionBase):
 
     def test_org_member_without_team_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
@@ -43,7 +43,7 @@ class TeamPermissionTest(TeamPermissionBase):
 
     def test_org_member_with_global_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
@@ -53,7 +53,7 @@ class TeamPermissionTest(TeamPermissionBase):
 
     def test_org_member_with_team_access(self):
         user = self.create_user()
-        om = self.create_member(
+        self.create_member(
             user=user,
             organization=self.org,
             type=OrganizationMemberType.MEMBER,
diff --git a/tests/sentry/api/endpoints/test_broadcast_index.py b/tests/sentry/api/endpoints/test_broadcast_index.py
index 6431f38686..f2f7a61595 100644
--- a/tests/sentry/api/endpoints/test_broadcast_index.py
+++ b/tests/sentry/api/endpoints/test_broadcast_index.py
@@ -9,7 +9,7 @@ from sentry.testutils import APITestCase
 class BroadcastIndexTest(APITestCase):
     def test_simple(self):
         broadcast1 = Broadcast.objects.create(message='bar', is_active=True)
-        broadcast2 = Broadcast.objects.create(message='foo', is_active=False)
+        Broadcast.objects.create(message='foo', is_active=False)
 
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-broadcast-index')
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index 2dba6d89a3..56d900f739 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -9,7 +9,8 @@ class OrganizationMemberListTest(APITestCase):
     def test_simple(self):
         user_1 = self.create_user('foo@localhost', username='foo')
         user_2 = self.create_user('bar@localhost', username='bar')
-        user_3 = self.create_user('baz@localhost', username='baz')
+        self.create_user('baz@localhost', username='baz')
+
         org = self.create_organization(owner=user_1)
         org.member_set.create(user=user_2)
 
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 791d456e29..0b2d0f7a7f 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -23,7 +23,6 @@ class GroupListTest(APITestCase):
 
     def test_sort_by_date_with_tag(self):
         # XXX(dcramer): this tests a case where an ambiguous column name existed
-        project = self.project
         now = timezone.now()
         group1 = self.create_group(
             checksum='a' * 32,
@@ -40,7 +39,6 @@ class GroupListTest(APITestCase):
         assert response.data[0]['id'] == str(group1.id)
 
     def test_simple_pagination(self):
-        project = self.project
         now = timezone.now().replace(microsecond=0)
         group1 = self.create_group(
             checksum='a' * 32,
@@ -117,13 +115,12 @@ class GroupListTest(APITestCase):
     def test_stats_period(self):
         # TODO(dcramer): this test really only checks if validation happens
         # on statsPeriod
-        project = self.project
         now = timezone.now()
-        group1 = self.create_group(
+        self.create_group(
             checksum='a' * 32,
             last_seen=now - timedelta(seconds=1),
         )
-        group2 = self.create_group(
+        self.create_group(
             checksum='b' * 32,
             last_seen=now,
         )
@@ -149,7 +146,7 @@ class GroupListTest(APITestCase):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
         now = timezone.now()
-        group1 = self.create_group(
+        self.create_group(
             checksum='a' * 32,
             last_seen=now - timedelta(days=1),
         )
@@ -171,7 +168,6 @@ class GroupListTest(APITestCase):
     def test_lookup_by_event_id(self):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
-        now = timezone.now()
         group = self.create_group(checksum='a' * 32)
         self.create_group(checksum='b' * 32)
         EventMapping.objects.create(
@@ -193,8 +189,7 @@ class GroupListTest(APITestCase):
     def test_lookup_by_unknown_event_id(self):
         project = self.project
         project.update_option('sentry:resolve_age', 1)
-        now = timezone.now()
-        group = self.create_group(checksum='a' * 32)
+        self.create_group(checksum='a' * 32)
         self.create_group(checksum='b' * 32)
 
         self.login_as(user=self.user)
@@ -248,7 +243,6 @@ class GroupUpdateTest(APITestCase):
         assert new_group4.resolved_at is None
 
     def test_selective_status_update(self):
-        project = self.project
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
         group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
@@ -290,7 +284,6 @@ class GroupUpdateTest(APITestCase):
         assert new_group4.status == GroupStatus.UNRESOLVED
 
     def test_set_unresolved(self):
-        project = self.project
         group = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
 
         self.login_as(user=self.user)
@@ -314,7 +307,6 @@ class GroupUpdateTest(APITestCase):
         assert group.status == GroupStatus.UNRESOLVED
 
     def test_set_bookmarked(self):
-        project = self.project
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
         group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
@@ -407,7 +399,6 @@ class GroupUpdateTest(APITestCase):
         assert not new_group2.is_public
 
     def test_set_has_seen(self):
-        project = self.project
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
         group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
@@ -447,11 +438,10 @@ class GroupUpdateTest(APITestCase):
 
     @patch('sentry.api.endpoints.project_group_index.merge_group')
     def test_merge(self, merge_group):
-        project = self.project
         group1 = self.create_group(checksum='a' * 32, times_seen=1)
         group2 = self.create_group(checksum='b' * 32, times_seen=50)
         group3 = self.create_group(checksum='c' * 32, times_seen=2)
-        group4 = self.create_group(checksum='d' * 32)
+        self.create_group(checksum='d' * 32)
 
         self.login_as(user=self.user)
         url = '{url}?id={group1.id}&id={group2.id}&id={group3.id}'.format(
@@ -480,7 +470,6 @@ class GroupUpdateTest(APITestCase):
 
 class GroupDeleteTest(APITestCase):
     def test_global_is_forbidden(self):
-        project = self.project
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
             'organization_slug': self.project.organization.slug,
@@ -492,7 +481,6 @@ class GroupDeleteTest(APITestCase):
         assert response.status_code == 400
 
     def test_delete_by_id(self):
-        project = self.project
         group1 = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
         group2 = self.create_group(checksum='b' * 32, status=GroupStatus.UNRESOLVED)
         group3 = self.create_group(checksum='c' * 32, status=GroupStatus.MUTED)
diff --git a/tests/sentry/api/endpoints/test_project_member_index.py b/tests/sentry/api/endpoints/test_project_member_index.py
index 938e7e0831..37dc771012 100644
--- a/tests/sentry/api/endpoints/test_project_member_index.py
+++ b/tests/sentry/api/endpoints/test_project_member_index.py
@@ -13,7 +13,7 @@ class ProjectMemberIndexTest(APITestCase):
         org = self.create_organization(owner=user_1)
         team = self.create_team(organization=org, slug='baz')
         project_1 = self.create_project(team=team, slug='foo')
-        project_2 = self.create_project(team=team, slug='bar')
+        self.create_project(team=team, slug='bar')
         org.member_set.create(user=user_2, has_global_access=True)
         org.member_set.create(user=user_3, has_global_access=False)
 
diff --git a/tests/sentry/api/endpoints/test_project_rule_details.py b/tests/sentry/api/endpoints/test_project_rule_details.py
index 932ee653de..015c343f43 100644
--- a/tests/sentry/api/endpoints/test_project_rule_details.py
+++ b/tests/sentry/api/endpoints/test_project_rule_details.py
@@ -12,7 +12,7 @@ class ProjectRuleDetailsTest(APITestCase):
 
         team = self.create_team()
         project1 = self.create_project(team=team, name='foo')
-        project2 = self.create_project(team=team, name='bar')
+        self.create_project(team=team, name='bar')
 
         rule = project1.rule_set.all()[0]
 
diff --git a/tests/sentry/api/endpoints/test_project_rules.py b/tests/sentry/api/endpoints/test_project_rules.py
index 5d08f1d633..29a99cb59b 100644
--- a/tests/sentry/api/endpoints/test_project_rules.py
+++ b/tests/sentry/api/endpoints/test_project_rules.py
@@ -12,7 +12,7 @@ class ProjectRuleListTest(APITestCase):
 
         team = self.create_team()
         project1 = self.create_project(team=team, name='foo')
-        project2 = self.create_project(team=team, name='bar')
+        self.create_project(team=team, name='bar')
 
         url = reverse('sentry-api-0-project-rules', kwargs={
             'organization_slug': project1.organization.slug,
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_values.py b/tests/sentry/api/endpoints/test_project_tagkey_values.py
index dd38eeb130..e550666586 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_values.py
@@ -10,7 +10,7 @@ class ProjectTagKeyValuesTest(APITestCase):
     def test_simple(self):
         project = self.create_project()
         tagkey = TagKey.objects.create(project=project, key='foo')
-        tagvalue = TagValue.objects.create(project=project, key='foo', value='bar')
+        TagValue.objects.create(project=project, key='foo', value='bar')
 
         self.login_as(user=self.user)
 
@@ -30,7 +30,7 @@ class ProjectTagKeyValuesTest(APITestCase):
     def test_query(self):
         project = self.create_project()
         tagkey = TagKey.objects.create(project=project, key='foo')
-        tagvalue = TagValue.objects.create(project=project, key='foo', value='bar')
+        TagValue.objects.create(project=project, key='foo', value='bar')
 
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/endpoints/test_release_details.py b/tests/sentry/api/endpoints/test_release_details.py
index daac4c0d86..d47b9bfb89 100644
--- a/tests/sentry/api/endpoints/test_release_details.py
+++ b/tests/sentry/api/endpoints/test_release_details.py
@@ -60,7 +60,7 @@ class ReleaseDeleteTest(APITestCase):
             project=project,
             version='1',
         )
-        releasefile = ReleaseFile.objects.create(
+        ReleaseFile.objects.create(
             project=project,
             release=release,
             file=File.objects.create(
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index b43c096ec0..321b0fcf9a 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -19,7 +19,7 @@ class ReleaseSerializerTest(TestCase):
             version=uuid4().hex,
             new_groups=1,
         )
-        tagvalue = TagValue.objects.create(
+        TagValue.objects.create(
             project=release.project,
             key='sentry:release',
             value=release.version,
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index 2c22ea5e85..e18bdd4172 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -51,8 +51,7 @@ class FromUserTest(TestCase):
     def test_unlinked_sso(self):
         user = self.create_user()
         organization = self.create_organization(owner=user)
-        member = organization.member_set.get(user=user)
-        team = self.create_team(organization=organization)
+        self.create_team(organization=organization)
         AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
@@ -64,8 +63,7 @@ class FromUserTest(TestCase):
     def test_sso_without_link_requirement(self):
         user = self.create_user()
         organization = self.create_organization(owner=user)
-        member = organization.member_set.get(user=user)
-        team = self.create_team(organization=organization)
+        self.create_team(organization=organization)
         AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 2cea31886a..f68236a93d 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -98,7 +98,7 @@ ValueError: hello world
             }]},
         }]))
 
-        event = self.create_event(data={
+        self.create_event(data={
             'sentry.interfaces.Exception': inst.to_json(),
         })
         context = inst.get_api_context()
@@ -125,7 +125,7 @@ ValueError: hello world
             }]},
         }]))
 
-        event = self.create_event(data={
+        self.create_event(data={
             'sentry.interfaces.Exception': inst.to_json(),
         })
         context = inst.get_api_context()
@@ -152,7 +152,7 @@ ValueError: hello world
             }]},
         }]))
 
-        event = self.create_event(data={
+        self.create_event(data={
             'sentry.interfaces.Exception': inst.to_json(),
         })
         context = inst.get_api_context()
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 81d228c0cb..c82b294e34 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -61,13 +61,13 @@ class FetchUrlTest(TestCase):
         responses.add(responses.GET, 'http://example.com', body=RequestException())
 
         with pytest.raises(BadSource):
-            result = fetch_url('http://example.com')
+            fetch_url('http://example.com')
 
         assert len(responses.calls) == 1
 
         # ensure we use the cached domain-wide failure for the second call
         with pytest.raises(BadSource):
-            result = fetch_url('http://example.com/foo/bar')
+            fetch_url('http://example.com/foo/bar')
 
         assert len(responses.calls) == 1
 
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 047f2fe563..39f410cf6c 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -45,7 +45,7 @@ class ProjectKeyTest(TestCase):
             self.assertEquals(key.get_dsn(), 'http://public:secret@endpoint.com/1')
 
     def test_key_is_created_for_project(self):
-        user = self.create_user('admin@example.com')
+        self.create_user('admin@example.com')
         team = self.create_team(name='Test')
         project = self.create_project(name='Test', team=team)
         assert project.key_set.exists() is True
@@ -141,7 +141,6 @@ class EventNodeStoreTest(TestCase):
             Event.objects.bind_nodes([event], 'data')
 
     def test_accepts_valid_ref(self):
-        invalid_event = self.create_event()
         event = self.create_event()
         event.data.bind_ref(event)
         event.save()
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 24e7850f7c..24127a0164 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -159,7 +159,7 @@ class MailPluginTest(TestCase):
 
         user = self.create_user(email='foo@example.com', is_active=True)
         user2 = self.create_user(email='baz@example.com', is_active=True)
-        user3 = self.create_user(email='baz2@example.com', is_active=True)
+        self.create_user(email='baz2@example.com', is_active=True)
 
         # user with inactive account
         self.create_user(email='bar@example.com', is_active=False)
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index d10e90c7c4..a98d7ccee4 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -43,8 +43,6 @@ class CreateDefaultProjectsTest(TestCase):
 
         create_default_projects(created_models=[Project])
 
-        user = User.objects.get(username='sentry')
-
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
         assert project.public is False
         assert project.name == 'Internal'
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 6a173b1b64..e3e9c4f35f 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -79,8 +79,6 @@ class DjangoSearchBackendTest(TestCase):
         self.backend.index(self.event2)
 
     def test_query(self):
-        backend = self.create_backend()
-
         results = self.backend.query(self.project1, query='foo')
         assert len(results) == 1
         assert results[0] == self.group1
@@ -90,8 +88,6 @@ class DjangoSearchBackendTest(TestCase):
         assert results[0] == self.group2
 
     def test_sort(self):
-        backend = self.create_backend()
-
         results = self.backend.query(self.project1, sort_by='date')
         assert len(results) == 2
         assert results[0] == self.group1
@@ -146,8 +142,6 @@ class DjangoSearchBackendTest(TestCase):
         assert len(results) == 0
 
     def test_first_seen_date_filter(self):
-        backend = self.create_backend()
-
         results = self.backend.query(
             self.project1, date_from=self.group2.first_seen,
             date_filter='first_seen')
@@ -170,8 +164,6 @@ class DjangoSearchBackendTest(TestCase):
         assert results[0] == self.group1
 
     def test_last_seen_date_filter(self):
-        backend = self.create_backend()
-
         results = self.backend.query(
             self.project1, date_from=self.group1.last_seen,
             date_filter='last_seen')
diff --git a/tests/sentry/tasks/test_check_auth.py b/tests/sentry/tasks/test_check_auth.py
index 42ce64fa26..760e72fdd1 100644
--- a/tests/sentry/tasks/test_check_auth.py
+++ b/tests/sentry/tasks/test_check_auth.py
@@ -22,7 +22,7 @@ class CheckAuthTest(TestCase):
             organization=organization,
             provider='dummy',
         )
-        om = OrganizationMember.objects.create(
+        OrganizationMember.objects.create(
             user=user,
             organization=organization,
             flags=getattr(OrganizationMember.flags, 'sso:linked'),
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index ef01709760..f059c8173b 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -18,8 +18,8 @@ class DeleteOrganizationTest(TestCase):
             name='test',
             status=OrganizationStatus.PENDING_DELETION,
         )
-        team1 = self.create_team(organization=org, name='test1')
-        team2 = self.create_team(organization=org, name='test2')
+        self.create_team(organization=org, name='test1')
+        self.create_team(organization=org, name='test2')
 
         with self.tasks():
             delete_organization(object_id=org.id)
@@ -33,8 +33,8 @@ class DeleteTeamTest(TestCase):
             name='test',
             status=TeamStatus.PENDING_DELETION,
         )
-        project1 = self.create_project(team=team, name='test1')
-        project2 = self.create_project(team=team, name='test2')
+        self.create_project(team=team, name='test1')
+        self.create_project(team=team, name='test2')
 
         with self.tasks():
             delete_team(object_id=team.id)
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index eb82a91188..40692dc8fe 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -119,13 +119,13 @@ class EventManagerTest(TransactionTestCase):
     def test_dupe_message_id(self):
         event_id = 'a' * 32
 
-        manager = EventManager(self.make_event(event_id='a' * 32))
+        manager = EventManager(self.make_event(event_id=event_id))
         manager.save(1)
 
         assert Event.objects.count() == 1
 
         # ensure that calling it again doesn't raise a db error
-        manager = EventManager(self.make_event(event_id='a' * 32))
+        manager = EventManager(self.make_event(event_id=event_id))
         manager.save(1)
 
         assert Event.objects.count() == 1
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index 52c2c9292b..14c8f93dc0 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -26,4 +26,4 @@ class HttpTest(TestCase):
     # @responses.activate
     def test_ip_blacklist(self):
         with pytest.raises(SuspiciousOperation):
-            resp = safe_urlopen('http://127.0.0.1')
+            safe_urlopen('http://127.0.0.1')
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index 9ceea58a13..a7f230abb8 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -170,7 +170,7 @@ class SensitiveDataFilterTest(TestCase):
         }
 
         proc = SensitiveDataFilter()
-        result = proc.apply(data)
+        proc.apply(data)
         self.assertTrue('sentry.interfaces.Http' in data)
         http = data['sentry.interfaces.Http']
         self.assertEquals(http['data'], proc.MASK)
@@ -183,5 +183,5 @@ class SensitiveDataFilterTest(TestCase):
         }
 
         proc = SensitiveDataFilter()
-        result = proc.apply(data)
+        proc.apply(data)
         self.assertEquals(data['extra'], {'foo': 1})
diff --git a/tests/sentry/utils/test_metrics.py b/tests/sentry/utils/test_metrics.py
index 176f49c46e..9f3ae55c8d 100644
--- a/tests/sentry/utils/test_metrics.py
+++ b/tests/sentry/utils/test_metrics.py
@@ -28,7 +28,7 @@ class ExpectedError(Exception):
 def test_timer_failure():
     with mock.patch('sentry.utils.metrics.timing') as timing:
         with pytest.raises(ExpectedError):
-            with timer('key', tags={'foo': True}) as tags:
+            with timer('key', tags={'foo': True}):
                 raise ExpectedError
 
         assert timing.call_count is 1
diff --git a/tests/sentry/web/frontend/test_auth_link_identity.py b/tests/sentry/web/frontend/test_auth_link_identity.py
index 140a41473c..e2740934a3 100644
--- a/tests/sentry/web/frontend/test_auth_link_identity.py
+++ b/tests/sentry/web/frontend/test_auth_link_identity.py
@@ -10,9 +10,6 @@ from sentry.testutils import AuthProviderTestCase
 class OrganizationAuthSettingsTest(AuthProviderTestCase):
     def test_redirects_with_no_provider(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-
         path = reverse('sentry-auth-link-identity', args=[organization.slug])
 
         self.login_as(self.user)
@@ -23,9 +20,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_renders_login_form_as_anon(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-        auth_provider = AuthProvider.objects.create(
+        AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
         )
@@ -42,14 +37,10 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_flow_as_anonymous(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-        auth_provider = AuthProvider.objects.create(
+        AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
         )
-        user = self.create_user('bar@example.com')
-        member = self.create_member(organization=organization, user=user)
 
         path = reverse('sentry-auth-link-identity', args=[organization.slug])
 
@@ -63,8 +54,6 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_flow_as_existing_user(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
         auth_provider = AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index e2c0cbb238..04db66fc04 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -10,8 +10,6 @@ from sentry.testutils import AuthProviderTestCase
 class OrganizationAuthSettingsTest(AuthProviderTestCase):
     def test_renders_basic_login_form(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         path = reverse('sentry-auth-organization', args=[organization.slug])
 
@@ -29,8 +27,6 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_basic_provider_flow_as_anonymous(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
         auth_provider = AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
@@ -71,9 +67,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_basic_provider_flow_as_existing_user(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
-        auth_provider = AuthProvider.objects.create(
+        AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
         )
diff --git a/tests/sentry/web/frontend/test_create_project.py b/tests/sentry/web/frontend/test_create_project.py
index 837a278247..c8194d7079 100644
--- a/tests/sentry/web/frontend/test_create_project.py
+++ b/tests/sentry/web/frontend/test_create_project.py
@@ -30,7 +30,7 @@ class CreateProjectPermissionTest(PermissionTestCase):
 class CreateProjectTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization()
-        team = self.create_team(organization=organization)
+        self.create_team(organization=organization)
         path = reverse('sentry-create-project', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index 3907ce30e6..d5603be8c1 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -27,7 +27,6 @@ class CreateTeamPermissionTest(PermissionTestCase):
 class CreateTeamTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization()
-        team = self.create_team(organization=organization)
         path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index c395b57b9e..cb825b318f 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -24,7 +24,6 @@ class ErrorPageEmbedTest(TestCase):
         )
 
     def test_invalid_referer(self):
-        path = reverse('sentry-error-page-embed')
         with self.settings(SENTRY_ALLOW_ORIGIN=None):
             resp = self.client.get(self.path, HTTP_REFERER='http://foo.com')
         assert resp.status_code == 403
@@ -35,7 +34,6 @@ class ErrorPageEmbedTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')
 
     def test_submission(self):
-        path = reverse('sentry-error-page-embed')
         resp = self.client.post(self.path, {
             'name': 'Jane Doe',
             'email': 'jane@example.com',
diff --git a/tests/sentry/web/frontend/test_organization_audit_log.py b/tests/sentry/web/frontend/test_organization_audit_log.py
index 82c330c8fb..616ecbea71 100644
--- a/tests/sentry/web/frontend/test_organization_audit_log.py
+++ b/tests/sentry/web/frontend/test_organization_audit_log.py
@@ -24,8 +24,6 @@ class OrganizationAuditLogPermissionTest(PermissionTestCase):
 class OrganizationAuditLogTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         path = reverse('sentry-organization-audit-log', args=[organization.slug])
 
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 7f917dc6fd..e3035fda69 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -27,8 +27,6 @@ class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
 class OrganizationAuthSettingsTest(AuthProviderTestCase):
     def test_renders_with_context(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         path = reverse('sentry-organization-auth-settings', args=[organization.slug])
 
@@ -46,8 +44,6 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_can_start_auth_flow(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         path = reverse('sentry-organization-auth-settings', args=[organization.slug])
 
@@ -61,8 +57,6 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
     def test_disable_provider(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         auth_provider = AuthProvider.objects.create(
             organization=organization,
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 1ece8c9012..29561d058f 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -27,7 +27,7 @@ class OrganizationMemberSettingsPermissionTest(PermissionTestCase):
 class OrganizationMemberSettingsTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
+        self.create_team(name='foo', organization=organization)
         team_2 = self.create_team(name='bar', organization=organization)
 
         user = self.create_user('bar@example.com')
@@ -147,7 +147,6 @@ class OrganizationMemberSettingsTest(TestCase):
         team_1 = self.create_team(name='foo', organization=organization)
         team_2 = self.create_team(name='bar', organization=organization)
 
-        user = self.create_user('bar@example.com')
         member = OrganizationMember.objects.create(
             organization=organization,
             email='bar@example.com',
@@ -172,7 +171,6 @@ class OrganizationMemberSettingsTest(TestCase):
 
     def test_ensure_admin_cant_set_owner(self):
         organization = self.create_organization(name='foo', owner=self.user)
-
         admin = self.create_user('bar@example.com', is_superuser=False)
         user = self.create_user('baz@example.com')
 
@@ -208,9 +206,6 @@ class OrganizationMemberSettingsTest(TestCase):
 
     def test_cannot_edit_yourself(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
         member = OrganizationMember.objects.get(
             organization=organization,
             user=self.user,
@@ -232,17 +227,13 @@ class OrganizationMemberSettingsTest(TestCase):
 
     def test_cannot_edit_higher_access(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
         member = self.create_user('foo@example.com', is_superuser=False)
-
         owner_om = OrganizationMember.objects.get(
             organization=organization,
             user=self.user,
         )
 
-        member_om = OrganizationMember.objects.create(
+        OrganizationMember.objects.create(
             organization=organization,
             user=member,
             type=OrganizationMemberType.ADMIN,
@@ -264,17 +255,13 @@ class OrganizationMemberSettingsTest(TestCase):
 
     def test_can_view_member_with_team_access(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
-
         member = self.create_user('foo@example.com', is_superuser=False)
-
         owner_om = OrganizationMember.objects.get(
             organization=organization,
             user=self.user,
         )
 
-        member_om = OrganizationMember.objects.create(
+        OrganizationMember.objects.create(
             organization=organization,
             user=member,
             has_global_access=False,
@@ -298,7 +285,6 @@ class OrganizationMemberSettingsTest(TestCase):
     def test_global_access_with_inactive_teams(self):
         organization = self.create_organization(name='foo', owner=self.user)
         team_1 = self.create_team(name='foo', organization=organization)
-        team_2 = self.create_team(name='bar', organization=organization)
 
         user = self.create_user('bar@example.com')
         member = OrganizationMember.objects.create(
diff --git a/tests/sentry/web/frontend/test_organization_members.py b/tests/sentry/web/frontend/test_organization_members.py
index 2189df7f7f..4e577d3696 100644
--- a/tests/sentry/web/frontend/test_organization_members.py
+++ b/tests/sentry/web/frontend/test_organization_members.py
@@ -24,7 +24,7 @@ class OrganizationMembersPermissionTest(PermissionTestCase):
 class OrganizationMembersTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team_1 = self.create_team(name='foo', organization=organization)
+        self.create_team(name='foo', organization=organization)
         team_2 = self.create_team(name='bar', organization=organization)
 
         owner = self.user
diff --git a/tests/sentry/web/frontend/test_organization_settings.py b/tests/sentry/web/frontend/test_organization_settings.py
index 37b8a9cb88..c73ae3c4d2 100644
--- a/tests/sentry/web/frontend/test_organization_settings.py
+++ b/tests/sentry/web/frontend/test_organization_settings.py
@@ -24,8 +24,6 @@ class OrganizationSettingsPermissionTest(PermissionTestCase):
 class OrganizationSettingsTest(TestCase):
     def test_renders_with_context(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         path = reverse('sentry-organization-settings', args=[organization.slug])
 
@@ -42,8 +40,6 @@ class OrganizationSettingsTest(TestCase):
 
     def test_saves(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(team=team)
 
         path = reverse('sentry-organization-settings', args=[organization.slug])
 
diff --git a/tests/sentry/web/frontend/test_release_webhook.py b/tests/sentry/web/frontend/test_release_webhook.py
index 16c0f9e9cc..abc381839a 100644
--- a/tests/sentry/web/frontend/test_release_webhook.py
+++ b/tests/sentry/web/frontend/test_release_webhook.py
@@ -59,7 +59,6 @@ class ReleaseWebhookTest(TestCase):
     def test_disabled_plugin(self, mock_plugin_get):
         MockPlugin = mock_plugin_get.return_value
         MockPlugin.is_enabled.return_value = False
-        MockReleaseHook = MockPlugin.get_release_hook.return_value
         resp = self.client.post(self.path)
         assert resp.status_code == 403
         mock_plugin_get.assert_called_once_with('dummy')
diff --git a/tests/sentry/web/frontend/test_remove_organization.py b/tests/sentry/web/frontend/test_remove_organization.py
index f21c1d0e44..ea2f9e6ad7 100644
--- a/tests/sentry/web/frontend/test_remove_organization.py
+++ b/tests/sentry/web/frontend/test_remove_organization.py
@@ -43,8 +43,6 @@ class RemoveOrganizationTest(TestCase):
         assert resp.context['team_list']
 
     def test_success(self):
-        user2 = self.create_user('bar@example.com')
-
         resp = self.client.post(self.path)
 
         assert resp.status_code == 302
@@ -60,10 +58,6 @@ class RemoveOrganizationTest(TestCase):
 
         self.login_as(self.user)
 
-        url = reverse('sentry-api-0-organization-details', kwargs={
-            'organization_slug': org.slug,
-        })
-
         with self.settings(SENTRY_SINGLE_ORGANIZATION=True):
             resp = self.client.post(self.path)
 
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 1d9fbbd3df..7898a111f1 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -47,7 +47,7 @@ class PermissionBase(TestCase):
         user.set_password('member')
         user.save()
 
-        om = self.create_member(
+        self.create_member(
             organization=self.team.organization,
             user=user,
             type=MEMBER_USER,
