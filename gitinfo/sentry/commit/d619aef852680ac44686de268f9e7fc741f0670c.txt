commit d619aef852680ac44686de268f9e7fc741f0670c
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Aug 30 11:20:02 2018 -0700

    feat(integrations): Feature gate issue sync and issue basic (#9553)

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index fbd51ccbf3..4c75c88334 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -4,7 +4,7 @@ from django.db import IntegrityError, transaction
 
 from rest_framework.response import Response
 
-from sentry import analytics
+from sentry import analytics, features
 from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.integration import IntegrationIssueConfigSerializer
@@ -12,9 +12,26 @@ from sentry.integrations import IntegrationFeatures
 from sentry.integrations.exceptions import IntegrationError, IntegrationFormError
 from sentry.models import ExternalIssue, GroupLink, Integration
 
+MISSING_FEATURE_MESSAGE = 'Your organization does not have access to this feature.'
+
 
 class GroupIntegrationDetailsEndpoint(GroupEndpoint):
+    def _has_issue_feature(self, organization, user):
+        has_issue_basic = features.has('organizations:integrations-issue-basic',
+                                       organization,
+                                       actor=user)
+
+        has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                      organization,
+                                      actor=user)
+
+        return has_issue_sync or has_issue_basic
+
     def get(self, request, group, integration_id):
+        if not self._has_issue_feature(group.organization, request.user):
+            return Response(
+                {'detail': MISSING_FEATURE_MESSAGE}, status=400)
+
         # Keep link/create separate since create will likely require
         # many external API calls that aren't necessary if the user is
         # just linking
@@ -48,6 +65,10 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
     # was thinking put for link an existing issue, post for create new issue?
     def put(self, request, group, integration_id):
+        if not self._has_issue_feature(group.organization, request.user):
+            return Response(
+                {'detail': MISSING_FEATURE_MESSAGE}, status=400)
+
         external_issue_id = request.DATA.get('externalIssue')
         if not external_issue_id:
             return Response({'detail': 'External ID required'}, status=400)
@@ -123,6 +144,10 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         return Response(context, status=201)
 
     def post(self, request, group, integration_id):
+        if not self._has_issue_feature(group.organization, request.user):
+            return Response(
+                {'detail': MISSING_FEATURE_MESSAGE}, status=400)
+
         organization_id = group.project.organization_id
         try:
             integration = Integration.objects.get(
@@ -189,6 +214,10 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         return Response(context, status=201)
 
     def delete(self, request, group, integration_id):
+        if not self._has_issue_feature(group.organization, request.user):
+            return Response(
+                {'detail': MISSING_FEATURE_MESSAGE}, status=400)
+
         # note here externalIssue refers to `ExternalIssue.id` wheras above
         # it refers to the id from the provider
         external_issue_id = request.GET.get('externalIssue')
diff --git a/src/sentry/api/endpoints/group_integrations.py b/src/sentry/api/endpoints/group_integrations.py
index f812264c97..fc256721c9 100644
--- a/src/sentry/api/endpoints/group_integrations.py
+++ b/src/sentry/api/endpoints/group_integrations.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry import integrations
+from sentry import integrations, features
 from sentry.api.bases import GroupEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
@@ -11,12 +11,21 @@ from sentry.models import Integration
 
 class GroupIntegrationsEndpoint(GroupEndpoint):
     def get(self, request, group):
+        has_issue_basic = features.has('organizations:integrations-issue-basic',
+                                       group.organization,
+                                       actor=request.user)
+
+        has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                      group.organization,
+                                      actor=request.user)
+
+        if not has_issue_basic or has_issue_sync:
+            return self.respond([])
+
         providers = [
             i.key for i in integrations.all() if i.has_feature(IntegrationFeatures.ISSUE_BASIC) or i.has_feature(IntegrationFeatures.ISSUE_SYNC)
         ]
         return self.paginate(
-            # TODO(jess): This should filter by integrations that
-            # are configured for the group's project once that is supported
             queryset=Integration.objects.filter(
                 organizations=group.organization,
                 provider__in=providers,
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 1159510086..865de5ae20 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -127,6 +127,10 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             feature_list.append('bitbucket-integration')
         if features.has('organizations:jira-integration', obj, actor=user):
             feature_list.append('jira-integration')
+        if features.has('organizations:integrations-issue-basic', obj, actor=user):
+            feature_list.append('integrations-issue-basic')
+        if features.has('organizations:integrations-issue-sync', obj, actor=user):
+            feature_list.append('integrations-issue-sync')
         if features.has('organizations:suggested-commits', obj, actor=user):
             feature_list.append('suggested-commits')
         if features.has('organizations:new-teams', obj, actor=user):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 2a3826558e..88b7ac6120 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -777,6 +777,8 @@ SENTRY_FEATURES = {
     'organizations:github-enterprise': False,
     'organizations:bitbucket-integration': False,
     'organizations:jira-integration': False,
+    'organizations:integrations-issue-basic': False,
+    'organizations:integrations-issue-sync': False,
     'organizations:new-teams': True,
     'organizations:unreleased-changes': False,
     'organizations:suggested-commits': True,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index b5807547c6..90603fe8b1 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -26,6 +26,8 @@ default_manager.add('organizations:new-issue-ui', OrganizationFeature)  # NOQA
 default_manager.add('organizations:github-enterprise', OrganizationFeature)  # NOQA
 default_manager.add('organizations:bitbucket-integration', OrganizationFeature)  # NOQA
 default_manager.add('organizations:jira-integration', OrganizationFeature)  # NOQA
+default_manager.add('organizations:integrations-issue-basic', OrganizationFeature)  # NOQA
+default_manager.add('organizations:integrations-issue-sync', OrganizationFeature)  # NOQA
 default_manager.add('organizations:new-teams', OrganizationFeature)  # NOQA
 default_manager.add('organizations:unreleased-changes', OrganizationFeature)  # NOQA
 default_manager.add('organizations:environments', OrganizationFeature)  # NOQA
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 11045a66ca..31a00f6730 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 import logging
 import six
 
-from sentry.models import Activity, Event, Group, GroupStatus
+from sentry import features
+from sentry.models import Activity, Event, Group, GroupStatus, Organization
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
 
@@ -237,6 +238,14 @@ class IssueSyncMixin(IssueBasicMixin):
     def sync_status_inbound(self, issue_key, data):
         if not self.should_sync('inbound_status'):
             return
+
+        organization = Organization.objects.get(id=self.organization_id)
+        has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                      organization)
+
+        if not has_issue_sync:
+            return
+
         affected_groups = list(
             Group.objects.get_groups_by_external_issue(
                 self.model, issue_key,
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 6b2a7155b1..277f4b243b 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -8,12 +8,13 @@ from six.moves.urllib.parse import quote_plus
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext as _
 
+from sentry import features
 from sentry.integrations import (
     Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 )
 from sentry.integrations.exceptions import ApiUnauthorized, ApiError, IntegrationError, IntegrationFormError
 from sentry.integrations.issues import IssueSyncMixin
-from sentry.models import IntegrationExternalProject, OrganizationIntegration
+from sentry.models import IntegrationExternalProject, Organization, OrganizationIntegration
 from sentry.utils.http import absolute_uri
 
 from .client import JiraApiClient
@@ -145,6 +146,16 @@ class JiraIntegration(Integration, IssueSyncMixin):
             configuration[0]['disabledReason'] = _(
                 'Unable to communicate with the Jira instance. You may need to reinstall the addon.')
 
+        organization = Organization.objects.get(id=self.organization_id)
+        has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                      organization)
+        if not has_issue_sync:
+            for field in configuration:
+                field['disabled'] = True
+                field['disabledReason'] = _(
+                    'Your organization does not have access to this feature'
+                )
+
         return configuration
 
     def update_organization_config(self, data):
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index 76b953f610..e61388d651 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -5,9 +5,12 @@ import logging
 from django import forms
 from django.utils.translation import ugettext as _
 
-from sentry import http
+from sentry import http, features
 from sentry.constants import ObjectStatus
-from sentry.models import Integration as IntegrationModel, IntegrationExternalProject, OrganizationIntegration
+from sentry.models import (
+    Integration as IntegrationModel, IntegrationExternalProject, Organization,
+    OrganizationIntegration,
+)
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
 from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.integrations.repositories import RepositoryMixin
@@ -114,7 +117,7 @@ class VstsIntegration(Integration, RepositoryMixin, VstsIssueSync):
             all_states = []
             disabled = True
 
-        return [
+        fields = [
             {
                 'name': self.outbound_status_key,
                 'type': 'choice_mapper',
@@ -165,6 +168,18 @@ class VstsIntegration(Integration, RepositoryMixin, VstsIssueSync):
             },
         ]
 
+        organization = Organization.objects.get(id=self.organization_id)
+        has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                      organization)
+        if not has_issue_sync:
+            for field in fields:
+                field['disabled'] = True
+                field['disabledReason'] = _(
+                    'Your organization does not have access to this feature'
+                )
+
+        return fields
+
     def update_organization_config(self, data):
         if 'sync_status_forward' in data:
             project_ids_and_statuses = data.pop('sync_status_forward')
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 4c4db4e1ed..71f8dc94a3 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -50,15 +50,21 @@ def sync_group_assignee_inbound(integration, email, external_issue_key, assign=T
     assign linked groups to matching users. Checks project membership.
     Returns a list of groups that were successfully assigned.
     """
+    from sentry import features
     from sentry.models import Group, UserEmail, User
 
     logger = logging.getLogger('sentry.integrations.%s' % integration.provider)
 
     orgs_with_sync_enabled = []
-    for org_id in integration.organizations.values_list('id', flat=True):
-        installation = integration.get_installation(org_id)
+    for org in integration.organizations.all():
+        has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                      org)
+        if not has_issue_sync:
+            continue
+
+        installation = integration.get_installation(org.id)
         if installation.should_sync('inbound_assignee'):
-            orgs_with_sync_enabled.append(org_id)
+            orgs_with_sync_enabled.append(org.id)
 
     affected_groups = list(
         Group.objects.get_groups_by_external_issue(
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 2d5c39767b..e1836eeff2 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
-from sentry import analytics
-from sentry.models import ExternalIssue, Group, GroupLink, GroupStatus, Integration, User
+from sentry import analytics, features
+from sentry.models import (
+    ExternalIssue, Group, GroupLink, GroupStatus, Integration, Organization, User
+)
 from sentry.integrations.exceptions import IntegrationError
 from sentry.tasks.base import instrumented_task, retry
 
@@ -17,6 +19,13 @@ from sentry.tasks.base import instrumented_task, retry
 def post_comment(external_issue_id, data, **kwargs):
     # sync Sentry comments to an external issue
     external_issue = ExternalIssue.objects.get(id=external_issue_id)
+
+    organization = Organization.objects.get(id=external_issue.organization_id)
+    has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                  organization)
+    if not has_issue_sync:
+        return
+
     integration = Integration.objects.get(id=external_issue.integration_id)
     installation = integration.get_installation(
         organization_id=external_issue.organization_id,
@@ -51,10 +60,19 @@ def sync_metadata(integration_id, **kwargs):
     default_retry_delay=60 * 5,
     max_retries=5
 )
-@retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist, User.DoesNotExist))
+@retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist,
+                User.DoesNotExist, Organization.DoesNotExist))
 def sync_assignee_outbound(external_issue_id, user_id, assign, **kwargs):
     # sync Sentry assignee to an external issue
     external_issue = ExternalIssue.objects.get(id=external_issue_id)
+
+    organization = Organization.objects.get(id=external_issue.organization_id)
+    has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                  organization)
+
+    if not has_issue_sync:
+        return
+
     integration = Integration.objects.get(id=external_issue.integration_id)
     # assume unassign if None
     if user_id is None:
@@ -91,6 +109,11 @@ def sync_status_outbound(group_id, external_issue_id, **kwargs):
     except IndexError:
         return
 
+    has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                  group.organization)
+    if not has_issue_sync:
+        return
+
     external_issue = ExternalIssue.objects.get(id=external_issue_id)
     integration = Integration.objects.get(id=external_issue.integration_id)
     installation = integration.get_installation(
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 4c8c9a635b..65a4a5826a 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -20,31 +20,32 @@ class GroupIntegrationDetailsTest(APITestCase):
 
         path = '/api/0/issues/{}/integrations/{}/?action=link'.format(group.id, integration.id)
 
-        response = self.client.get(path)
-        provider = integration.get_provider()
-
-        assert response.data == {
-            'id': six.text_type(integration.id),
-            'name': integration.name,
-            'icon': integration.metadata.get('icon'),
-            'domainName': integration.metadata.get('domain_name'),
-            'accountType': integration.metadata.get('account_type'),
-            'status': integration.get_status_display(),
-            'provider': {
-                'key': provider.key,
-                'name': provider.name,
-                'canAdd': provider.can_add,
-                'canDisable': provider.can_disable,
-                'features': [f.value for f in provider.features],
-                'aspects': provider.metadata.aspects,
-            },
-            'linkIssueConfig': [{
-                'default': '',
-                'type': 'string',
-                'name': 'externalIssue',
-                'label': 'Issue',
-            }]
-        }
+        with self.feature('organizations:integrations-issue-basic'):
+            response = self.client.get(path)
+            provider = integration.get_provider()
+
+            assert response.data == {
+                'id': six.text_type(integration.id),
+                'name': integration.name,
+                'icon': integration.metadata.get('icon'),
+                'domainName': integration.metadata.get('domain_name'),
+                'accountType': integration.metadata.get('account_type'),
+                'status': integration.get_status_display(),
+                'provider': {
+                    'key': provider.key,
+                    'name': provider.name,
+                    'canAdd': provider.can_add,
+                    'canDisable': provider.can_disable,
+                    'features': [f.value for f in provider.features],
+                    'aspects': provider.metadata.aspects,
+                },
+                'linkIssueConfig': [{
+                    'default': '',
+                    'type': 'string',
+                    'name': 'externalIssue',
+                    'label': 'Issue',
+                }]
+            }
 
     def test_simple_get_create(self):
         self.login_as(user=self.user)
@@ -59,45 +60,63 @@ class GroupIntegrationDetailsTest(APITestCase):
 
         path = '/api/0/issues/{}/integrations/{}/?action=create'.format(group.id, integration.id)
 
+        with self.feature('organizations:integrations-issue-basic'):
+            response = self.client.get(path)
+            provider = integration.get_provider()
+
+            assert response.data == {
+                'id': six.text_type(integration.id),
+                'name': integration.name,
+                'icon': integration.metadata.get('icon'),
+                'domainName': integration.metadata.get('domain_name'),
+                'accountType': integration.metadata.get('account_type'),
+                'status': integration.get_status_display(),
+                'provider': {
+                    'key': provider.key,
+                    'name': provider.name,
+                    'canAdd': provider.can_add,
+                    'canDisable': provider.can_disable,
+                    'features': [f.value for f in provider.features],
+                    'aspects': provider.metadata.aspects,
+                },
+                'createIssueConfig': [
+                    {
+                        'default': 'message',
+                        'type': 'string',
+                        'name': 'title',
+                        'label': 'Title',
+                        'required': True,
+                    }, {
+                        'default': ('Sentry Issue: [%s](%s)\n\n```\n'
+                                    'Stacktrace (most recent call last):\n\n  '
+                                    'File "sentry/models/foo.py", line 29, in build_msg\n    '
+                                    'string_max_length=self.string_max_length)\n\nmessage\n```'
+                                    ) % (group.qualified_short_id, absolute_uri(group.get_absolute_url())),
+                        'type': 'textarea',
+                        'name': 'description',
+                        'label': 'Description',
+                        'autosize': True,
+                        'maxRows': 10,
+                    }
+                ]
+            }
+
+    def test_get_feature_disabled(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        self.create_event(group=group)
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+
+        path = '/api/0/issues/{}/integrations/{}/?action=create'.format(group.id, integration.id)
+
         response = self.client.get(path)
-        provider = integration.get_provider()
-
-        assert response.data == {
-            'id': six.text_type(integration.id),
-            'name': integration.name,
-            'icon': integration.metadata.get('icon'),
-            'domainName': integration.metadata.get('domain_name'),
-            'accountType': integration.metadata.get('account_type'),
-            'status': integration.get_status_display(),
-            'provider': {
-                'key': provider.key,
-                'name': provider.name,
-                'canAdd': provider.can_add,
-                'canDisable': provider.can_disable,
-                'features': [f.value for f in provider.features],
-                'aspects': provider.metadata.aspects,
-            },
-            'createIssueConfig': [
-                {
-                    'default': 'message',
-                    'type': 'string',
-                    'name': 'title',
-                    'label': 'Title',
-                    'required': True,
-                }, {
-                    'default': ('Sentry Issue: [%s](%s)\n\n```\n'
-                                'Stacktrace (most recent call last):\n\n  '
-                                'File "sentry/models/foo.py", line 29, in build_msg\n    '
-                                'string_max_length=self.string_max_length)\n\nmessage\n```'
-                                ) % (group.qualified_short_id, absolute_uri(group.get_absolute_url())),
-                    'type': 'textarea',
-                    'name': 'description',
-                    'label': 'Description',
-                    'autosize': True,
-                    'maxRows': 10,
-                }
-            ]
-        }
+        assert response.status_code == 400
+        assert response.data['detail'] == 'Your organization does not have access to this feature.'
 
     def test_simple_put(self):
         self.login_as(user=self.user)
@@ -111,25 +130,78 @@ class GroupIntegrationDetailsTest(APITestCase):
 
         path = '/api/0/issues/{}/integrations/{}/'.format(group.id, integration.id)
 
+        with self.feature('organizations:integrations-issue-basic'):
+            response = self.client.put(path, data={
+                'externalIssue': 'APP-123'
+            })
+
+            assert response.status_code == 201
+            external_issue = ExternalIssue.objects.get(
+                key='APP-123',
+                integration_id=integration.id,
+                organization_id=org.id,
+            )
+            assert external_issue.title == 'This is a test external issue title'
+            assert external_issue.description == 'This is a test external issue description'
+            assert GroupLink.objects.filter(
+                linked_type=GroupLink.LinkedType.issue,
+                group_id=group.id,
+                linked_id=external_issue.id,
+            ).exists()
+
+    def test_put_feature_disabled(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+
+        path = '/api/0/issues/{}/integrations/{}/'.format(group.id, integration.id)
+
         response = self.client.put(path, data={
             'externalIssue': 'APP-123'
         })
+        assert response.status_code == 400
+        assert response.data['detail'] == 'Your organization does not have access to this feature.'
 
-        assert response.status_code == 201
-        external_issue = ExternalIssue.objects.get(
-            key='APP-123',
-            integration_id=integration.id,
-            organization_id=org.id,
+    def test_simple_post(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
         )
-        assert external_issue.title == 'This is a test external issue title'
-        assert external_issue.description == 'This is a test external issue description'
-        assert GroupLink.objects.filter(
-            linked_type=GroupLink.LinkedType.issue,
-            group_id=group.id,
-            linked_id=external_issue.id,
-        ).exists()
+        integration.add_organization(org.id)
 
-    def test_simple_post(self):
+        path = '/api/0/issues/{}/integrations/{}/'.format(group.id, integration.id)
+
+        with self.feature('organizations:integrations-issue-basic'):
+            response = self.client.post(path, data={})
+            assert response.status_code == 400
+            assert response.data['non_field_errors'] == ['Assignee is required']
+
+            response = self.client.post(path, data={'assignee': 'foo@sentry.io'})
+            assert response.status_code == 201
+
+            external_issue = ExternalIssue.objects.get(
+                key='APP-123',
+                integration_id=integration.id,
+                organization_id=org.id,
+            )
+            assert external_issue.description == u'This is a test external issue description'
+            assert external_issue.title == u'This is a test external issue title'
+
+            assert GroupLink.objects.filter(
+                linked_type=GroupLink.LinkedType.issue,
+                group_id=group.id,
+                linked_id=external_issue.id,
+            ).exists()
+
+    def test_post_feature_disabled(self):
         self.login_as(user=self.user)
         org = self.organization
         group = self.create_group()
@@ -143,26 +215,44 @@ class GroupIntegrationDetailsTest(APITestCase):
 
         response = self.client.post(path, data={})
         assert response.status_code == 400
-        assert response.data['non_field_errors'] == ['Assignee is required']
+        assert response.data['detail'] == 'Your organization does not have access to this feature.'
 
-        response = self.client.post(path, data={'assignee': 'foo@sentry.io'})
-        assert response.status_code == 201
+    def test_simple_delete(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
 
-        external_issue = ExternalIssue.objects.get(
-            key='APP-123',
-            integration_id=integration.id,
+        external_issue = ExternalIssue.objects.get_or_create(
             organization_id=org.id,
-        )
-        assert external_issue.description == u'This is a test external issue description'
-        assert external_issue.title == u'This is a test external issue title'
+            integration_id=integration.id,
+            key='APP-123',
+        )[0]
 
-        assert GroupLink.objects.filter(
-            linked_type=GroupLink.LinkedType.issue,
+        group_link = GroupLink.objects.get_or_create(
             group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
             linked_id=external_issue.id,
-        ).exists()
+            relationship=GroupLink.Relationship.references,
+        )[0]
 
-    def test_simple_delete(self):
+        path = '/api/0/issues/{}/integrations/{}/?externalIssue={}'.format(
+            group.id, integration.id, external_issue.id,
+        )
+
+        with self.feature('organizations:integrations-issue-basic'):
+            response = self.client.delete(path)
+
+            assert response.status_code == 204
+            assert not ExternalIssue.objects.filter(id=external_issue.id).exists()
+            assert not GroupLink.objects.filter(id=group_link.id).exists()
+
+    def test_delete_feature_disabled(self):
         self.login_as(user=self.user)
         org = self.organization
         group = self.create_group()
@@ -178,7 +268,7 @@ class GroupIntegrationDetailsTest(APITestCase):
             key='APP-123',
         )[0]
 
-        group_link = GroupLink.objects.get_or_create(
+        GroupLink.objects.get_or_create(
             group_id=group.id,
             project_id=group.project_id,
             linked_type=GroupLink.LinkedType.issue,
@@ -191,7 +281,5 @@ class GroupIntegrationDetailsTest(APITestCase):
         )
 
         response = self.client.delete(path)
-
-        assert response.status_code == 204
-        assert not ExternalIssue.objects.filter(id=external_issue.id).exists()
-        assert not GroupLink.objects.filter(id=group_link.id).exists()
+        assert response.status_code == 400
+        assert response.data['detail'] == 'Your organization does not have access to this feature.'
diff --git a/tests/sentry/api/endpoints/test_group_integrations.py b/tests/sentry/api/endpoints/test_group_integrations.py
index 4781496a88..0a900b55f5 100644
--- a/tests/sentry/api/endpoints/test_group_integrations.py
+++ b/tests/sentry/api/endpoints/test_group_integrations.py
@@ -33,30 +33,60 @@ class GroupIntegrationsTest(APITestCase):
 
         path = '/api/0/issues/{}/integrations/'.format(group.id)
 
+        with self.feature('organizations:integrations-issue-basic'):
+            response = self.client.get(path)
+            provider = integration.get_provider()
+
+            assert response.data[0] == {
+                'id': six.text_type(integration.id),
+                'name': integration.name,
+                'icon': integration.metadata.get('icon'),
+                'domainName': integration.metadata.get('domain_name'),
+                'accountType': integration.metadata.get('account_type'),
+                'status': integration.get_status_display(),
+                'provider': {
+                    'key': provider.key,
+                    'name': provider.name,
+                    'canAdd': provider.can_add,
+                    'canDisable': provider.can_disable,
+                    'features': [f.value for f in provider.features],
+                    'aspects': provider.metadata.aspects,
+                },
+                'externalIssues': [{
+                    'description': 'this is an example description',
+                    'id': six.text_type(external_issue.id),
+                    'url': 'https://example/issues/APP-123',
+                    'key': 'APP-123',
+                    'title': 'this is an example title',
+                    'displayName': 'display name: APP-123',
+                }],
+            }
+
+    def test_feature_disabled(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+        external_issue = ExternalIssue.objects.create(
+            organization_id=org.id,
+            integration_id=integration.id,
+            key='APP-123',
+            title='this is an example title',
+            description='this is an example description',
+        )
+        GroupLink.objects.create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )
+
+        path = '/api/0/issues/{}/integrations/'.format(group.id)
+
         response = self.client.get(path)
-        provider = integration.get_provider()
-
-        assert response.data[0] == {
-            'id': six.text_type(integration.id),
-            'name': integration.name,
-            'icon': integration.metadata.get('icon'),
-            'domainName': integration.metadata.get('domain_name'),
-            'accountType': integration.metadata.get('account_type'),
-            'status': integration.get_status_display(),
-            'provider': {
-                'key': provider.key,
-                'name': provider.name,
-                'canAdd': provider.can_add,
-                'canDisable': provider.can_disable,
-                'features': [f.value for f in provider.features],
-                'aspects': provider.metadata.aspects,
-            },
-            'externalIssues': [{
-                'description': 'this is an example description',
-                'id': six.text_type(external_issue.id),
-                'url': 'https://example/issues/APP-123',
-                'key': 'APP-123',
-                'title': 'this is an example title',
-                'displayName': 'display name: APP-123',
-            }],
-        }
+        assert response.data == []
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index 4c9776dc6f..a7ea741c43 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -215,7 +215,10 @@ class GroupNoteCreateTest(APITestCase):
 
         url = '/api/0/issues/{}/comments/'.format(group.id)
 
-        with self.feature('organizations:internal-catchall'):
+        with self.feature({
+            'organizations:integrations-issue-sync': True,
+            'organizations:internal-catchall': True,
+        }):
             with self.tasks():
                 response = self.client.post(
                     url, format='json', data={
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index c652dcb2bf..d4b4f8cfee 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -501,7 +501,10 @@ class GroupUpdateTest(APITestCase):
         assert len(response.data) == 1
 
         with self.tasks():
-            with self.feature('organizations:internal-catchall'):
+            with self.feature({
+                'organizations:integrations-issue-sync': True,
+                'organizations:internal-catchall': True,
+            }):
                 response = self.client.put(
                     '{}?status=unresolved'.format(self.path),
                     data={
@@ -576,7 +579,10 @@ class GroupUpdateTest(APITestCase):
         )
 
         with self.tasks():
-            with self.feature('organizations:internal-catchall'):
+            with self.feature({
+                'organizations:integrations-issue-sync': True,
+                'organizations:internal-catchall': True,
+            }):
                 response = self.client.put(
                     url, data={
                         'status': 'unresolved',
diff --git a/tests/sentry/integrations/test_issues.py b/tests/sentry/integrations/test_issues.py
index 37b8174cd1..af68ddbf25 100644
--- a/tests/sentry/integrations/test_issues.py
+++ b/tests/sentry/integrations/test_issues.py
@@ -46,15 +46,16 @@ class IssueSyncIntegration(TestCase):
 
         installation = integration.get_installation(group.organization.id)
 
-        installation.sync_status_inbound(external_issue.key, {
-            'project_id': 'APP',
-            'status': {
-                'id': '12345',
-                'category': 'done',
-            },
-        })
+        with self.feature('organizations:integrations-issue-sync'):
+            installation.sync_status_inbound(external_issue.key, {
+                'project_id': 'APP',
+                'status': {
+                    'id': '12345',
+                    'category': 'done',
+                },
+            })
 
-        assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
+            assert Group.objects.get(id=group.id).status == GroupStatus.RESOLVED
 
     def test_status_sync_inbound_unresolve(self):
         group = self.group
@@ -97,12 +98,13 @@ class IssueSyncIntegration(TestCase):
 
         installation = integration.get_installation(group.organization.id)
 
-        installation.sync_status_inbound(external_issue.key, {
-            'project_id': 'APP',
-            'status': {
-                'id': '12345',
-                'category': 'in_progress',
-            },
-        })
+        with self.feature('organizations:integrations-issue-sync'):
+            installation.sync_status_inbound(external_issue.key, {
+                'project_id': 'APP',
+                'status': {
+                    'id': '12345',
+                    'category': 'in_progress',
+                },
+            })
 
-        assert Group.objects.get(id=group.id).status == GroupStatus.UNRESOLVED
+            assert Group.objects.get(id=group.id).status == GroupStatus.UNRESOLVED
diff --git a/tests/sentry/integrations/vsts/test_webhooks.py b/tests/sentry/integrations/vsts/test_webhooks.py
index 2ac6a04c68..05226f8682 100644
--- a/tests/sentry/integrations/vsts/test_webhooks.py
+++ b/tests/sentry/integrations/vsts/test_webhooks.py
@@ -141,18 +141,20 @@ class VstsWebhookWorkItemTest(APITestCase):
                 external_issue,
                 self.project,
                 GroupStatus.UNRESOLVED) for _ in range(num_groups)]
-        resp = self.client.post(
-            absolute_uri('/extensions/vsts/issue-updated/'),
-            data=WORK_ITEM_UPDATED_STATUS,
-            HTTP_SHARED_SECRET=self.shared_secret,
-        )
-        assert resp.status_code == 200
-        group_ids = [g.id for g in groups]
-        assert len(
-            Group.objects.filter(
-                id__in=group_ids,
-                status=GroupStatus.RESOLVED)) == num_groups
-        assert len(Activity.objects.filter(group_id__in=group_ids)) == num_groups
+
+        with self.feature('organizations:integrations-issue-sync'):
+            resp = self.client.post(
+                absolute_uri('/extensions/vsts/issue-updated/'),
+                data=WORK_ITEM_UPDATED_STATUS,
+                HTTP_SHARED_SECRET=self.shared_secret,
+            )
+            assert resp.status_code == 200
+            group_ids = [g.id for g in groups]
+            assert len(
+                Group.objects.filter(
+                    id__in=group_ids,
+                    status=GroupStatus.RESOLVED)) == num_groups
+            assert len(Activity.objects.filter(group_id__in=group_ids)) == num_groups
 
     @responses.activate
     def test_inbound_status_sync_unresolve(self):
@@ -179,15 +181,16 @@ class VstsWebhookWorkItemTest(APITestCase):
         state['oldValue'] = 'Resolved'
         state['newValue'] = 'Active'
 
-        resp = self.client.post(
-            absolute_uri('/extensions/vsts/issue-updated/'),
-            data=WORK_ITEM_UPDATED_STATUS,
-            HTTP_SHARED_SECRET=self.shared_secret,
-        )
-        assert resp.status_code == 200
-        group_ids = [g.id for g in groups]
-        assert len(
-            Group.objects.filter(
-                id__in=group_ids,
-                status=GroupStatus.UNRESOLVED)) == num_groups
-        assert len(Activity.objects.filter(group_id__in=group_ids)) == num_groups
+        with self.feature('organizations:integrations-issue-sync'):
+            resp = self.client.post(
+                absolute_uri('/extensions/vsts/issue-updated/'),
+                data=WORK_ITEM_UPDATED_STATUS,
+                HTTP_SHARED_SECRET=self.shared_secret,
+            )
+            assert resp.status_code == 200
+            group_ids = [g.id for g in groups]
+            assert len(
+                Group.objects.filter(
+                    id__in=group_ids,
+                    status=GroupStatus.UNRESOLVED)) == num_groups
+            assert len(Activity.objects.filter(group_id__in=group_ids)) == num_groups
diff --git a/tests/sentry/models/test_groupassignee.py b/tests/sentry/models/test_groupassignee.py
index c2b3981f76..eb6265a2c4 100644
--- a/tests/sentry/models/test_groupassignee.py
+++ b/tests/sentry/models/test_groupassignee.py
@@ -141,7 +141,10 @@ class GroupAssigneeTestCase(TestCase):
             relationship=GroupLink.Relationship.references,
         )
 
-        with self.feature('organizations:internal-catchall'):
+        with self.feature({
+            'organizations:integrations-issue-sync': True,
+            'organizations:internal-catchall': True,
+        }):
             with self.tasks():
                 GroupAssignee.objects.assign(self.group, self.user)
 
@@ -203,7 +206,10 @@ class GroupAssigneeTestCase(TestCase):
 
         GroupAssignee.objects.assign(self.group, self.user)
 
-        with self.feature('organizations:internal-catchall'):
+        with self.feature({
+            'organizations:integrations-issue-sync': True,
+            'organizations:internal-catchall': True,
+        }):
             with self.tasks():
                 GroupAssignee.objects.deassign(self.group)
                 mock_sync_assignee_outbound.assert_called_with(external_issue, None, assign=False)
@@ -258,25 +264,26 @@ class GroupAssigneeTestCase(TestCase):
             relationship=GroupLink.Relationship.references,
         )
 
-        # no permissions
-        groups_updated = sync_group_assignee_inbound(
-            integration, user_no_access.email, 'APP-123'
-        )
+        with self.feature('organizations:integrations-issue-sync'):
+            # no permissions
+            groups_updated = sync_group_assignee_inbound(
+                integration, user_no_access.email, 'APP-123'
+            )
 
-        assert not groups_updated
+            assert not groups_updated
 
-        # w permissions
-        groups_updated = sync_group_assignee_inbound(
-            integration, user_w_access.email, 'APP-123'
-        )
+            # w permissions
+            groups_updated = sync_group_assignee_inbound(
+                integration, user_w_access.email, 'APP-123'
+            )
 
-        assert groups_updated[0] == group
-        assert GroupAssignee.objects.filter(
-            project=group.project,
-            group=group,
-            user=user_w_access,
-            team__isnull=True,
-        ).exists()
+            assert groups_updated[0] == group
+            assert GroupAssignee.objects.filter(
+                project=group.project,
+                group=group,
+                user=user_w_access,
+                team__isnull=True,
+            ).exists()
 
     def test_assignee_sync_inbound_deassign(self):
         group = self.group
@@ -315,14 +322,15 @@ class GroupAssigneeTestCase(TestCase):
 
         GroupAssignee.objects.assign(group, self.user)
 
-        groups_updated = sync_group_assignee_inbound(
-            integration, self.user.email, 'APP-123', assign=False,
-        )
+        with self.feature('organizations:integrations-issue-sync'):
+            groups_updated = sync_group_assignee_inbound(
+                integration, self.user.email, 'APP-123', assign=False,
+            )
 
-        assert groups_updated[0] == group
-        assert not GroupAssignee.objects.filter(
-            project=group.project,
-            group=group,
-            user=self.user,
-            team__isnull=True,
-        ).exists()
+            assert groups_updated[0] == group
+            assert not GroupAssignee.objects.filter(
+                project=group.project,
+                group=group,
+                user=self.user,
+                team__isnull=True,
+            ).exists()
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index ed9e5fb258..a45518f6e2 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -581,7 +581,10 @@ class EventManagerTest(TransactionTestCase):
         )
 
         with self.tasks():
-            with self.feature('organizations:internal-catchall'):
+            with self.feature({
+                'organizations:integrations-issue-sync': True,
+                'organizations:internal-catchall': True,
+            }):
                 event = manager.save(1)
                 assert event.group_id == group.id
 
