commit 8c55ee7e0280fc343fa60921a15ea0d505579754
Author: Chris Fuller <cfuller@sentry.io>
Date:   Fri Feb 21 01:09:54 2020 -0500

    feat(workflow): Updating slack alerts (#17104)
    
    * Format/Text updates to "incident" slack alerts

diff --git a/src/sentry/incidents/action_handlers.py b/src/sentry/incidents/action_handlers.py
index b99f26415f..4501ff9fda 100644
--- a/src/sentry/incidents/action_handlers.py
+++ b/src/sentry/incidents/action_handlers.py
@@ -168,9 +168,7 @@ class SlackActionHandler(ActionHandler):
         from sentry.integrations.slack.utils import send_incident_alert_notification
 
         # TODO: We should include more information about the trigger/severity etc.
-        send_incident_alert_notification(
-            self.action.integration, self.incident, self.action.target_identifier
-        )
+        send_incident_alert_notification(self.action, self.incident)
 
 
 def format_duration(minutes):
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index 9799edb720..2bf1f19600 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -11,6 +11,7 @@ from sentry import tagstore
 from sentry.api.fields.actor import Actor
 from sentry.incidents.logic import get_incident_aggregates
 from sentry.incidents.models import IncidentStatus
+from sentry.snuba.models import QueryAggregations
 from sentry.utils import metrics, json
 from sentry.utils.assets import get_asset_url
 from sentry.utils.dates import to_timestamp
@@ -43,6 +44,7 @@ MEMBER_PREFIX = "@"
 CHANNEL_PREFIX = "#"
 strip_channel_chars = "".join([MEMBER_PREFIX, CHANNEL_PREFIX])
 SLACK_DEFAULT_TIMEOUT = 10
+QUERY_AGGREGATION_DISPLAY = ["events", "users affected"]
 SLACK_DATADOG_METRIC = "integrations.slack.http_response"
 
 
@@ -290,25 +292,36 @@ def build_group_attachment(group, event=None, tags=None, identity=None, actions=
 
 def build_incident_attachment(incident):
     logo_url = absolute_uri(get_asset_url("sentry", "images/sentry-email-avatar.png"))
-
+    alert_rule = incident.alert_rule
     aggregates = get_incident_aggregates(incident)
 
     if incident.status == IncidentStatus.CLOSED.value:
         status = "Resolved"
         color = RESOLVED_COLOR
-    else:
-        status = "Fired"
-        color = LEVEL_TO_COLOR["error"]
+    elif incident.status == IncidentStatus.WARNING.value:
+        status = "Warning"
+        color = LEVEL_TO_COLOR["warning"]
+    elif incident.status == IncidentStatus.CRITICAL.value:
+        status = "Critical"
+        color = LEVEL_TO_COLOR["fatal"]
+
+    agg_text = QUERY_AGGREGATION_DISPLAY[alert_rule.aggregation]
+
+    agg_value = (
+        aggregates["count"]
+        if alert_rule.aggregation == QueryAggregations.TOTAL.value
+        else aggregates["unique_users"]
+    )
+    time_window = alert_rule.time_window
 
-    fields = [
-        {"title": "Status", "value": status, "short": True},
-        {"title": "Events", "value": aggregates["count"], "short": True},
-        {"title": "Users", "value": aggregates["unique_users"], "short": True},
-    ]
+    text = "{} {} in the last {} minutes".format(agg_value, agg_text, time_window)
+
+    if alert_rule.query != "":
+        text = text + "\Filter: {}".format(alert_rule.query)
 
     ts = incident.date_started
 
-    title = u"INCIDENT: {} (#{})".format(incident.title, incident.identifier)
+    title = u"{}: {}".format(status, alert_rule.name)
 
     return {
         "fallback": title,
@@ -322,8 +335,8 @@ def build_incident_attachment(incident):
                 },
             )
         ),
-        "text": " ",
-        "fields": fields,
+        "text": text,
+        "fields": [],
         "mrkdwn_in": ["text"],
         "footer_icon": logo_url,
         "footer": "Sentry Incident",
@@ -413,9 +426,10 @@ def get_channel_id_with_timeout(integration, name, timeout):
     return (prefix, None, False)
 
 
-def send_incident_alert_notification(integration, incident, channel):
+def send_incident_alert_notification(action, incident):
+    channel = action.target_identifier
+    integration = action.integration
     attachment = build_incident_attachment(incident)
-
     payload = {
         "token": integration.metadata["access_token"],
         "channel": channel,
diff --git a/tests/sentry/incidents/test_action_handlers.py b/tests/sentry/incidents/test_action_handlers.py
index dd20d5af03..cb2df7fe36 100644
--- a/tests/sentry/incidents/test_action_handlers.py
+++ b/tests/sentry/incidents/test_action_handlers.py
@@ -212,11 +212,13 @@ class SlackActionHandlerBaseTest(object):
 
 class SlackActionHandlerFireTest(SlackActionHandlerBaseTest, TestCase):
     def test(self):
-        self.run_test(self.create_incident(), "fire")
+        alert_rule = self.create_alert_rule()
+        self.run_test(self.create_incident(status=2, alert_rule=alert_rule), "fire")
 
 
 class SlackActionHandlerResolveTest(SlackActionHandlerBaseTest, TestCase):
     def test(self):
-        incident = self.create_incident()
+        alert_rule = self.create_alert_rule()
+        incident = self.create_incident(alert_rule=alert_rule)
         update_incident_status(incident, IncidentStatus.CLOSED)
         self.run_test(incident, "resolve")
diff --git a/tests/sentry/integrations/slack/test_event_endpoint.py b/tests/sentry/integrations/slack/test_event_endpoint.py
index b454d8a383..94b8e3d330 100644
--- a/tests/sentry/integrations/slack/test_event_endpoint.py
+++ b/tests/sentry/integrations/slack/test_event_endpoint.py
@@ -114,7 +114,10 @@ class LinkSharedEventTest(BaseEventTest):
         project2 = self.create_project(organization=org2)
         group1 = self.create_group(project=project1)
         group2 = self.create_group(project=project2)
-        incident = self.create_incident(organization=self.org, projects=[project1])
+        alert_rule = self.create_alert_rule()
+        incident = self.create_incident(
+            status=2, organization=self.org, projects=[project1], alert_rule=alert_rule
+        )
         incident.update(identifier=123)
         resp = self.post_webhook(
             event_data=json.loads(
diff --git a/tests/sentry/integrations/slack/test_utils.py b/tests/sentry/integrations/slack/test_utils.py
index 484465416b..9e31347da2 100644
--- a/tests/sentry/integrations/slack/test_utils.py
+++ b/tests/sentry/integrations/slack/test_utils.py
@@ -9,7 +9,7 @@ from sentry.integrations.slack.utils import (
     build_incident_attachment,
     CHANNEL_PREFIX,
     get_channel_id,
-    LEVEL_TO_COLOR,
+    RESOLVED_COLOR,
     MEMBER_PREFIX,
 )
 from sentry.models import Integration
@@ -80,9 +80,9 @@ class GetChannelIdTest(TestCase):
 class BuildIncidentAttachmentTest(TestCase):
     def test_simple(self):
         logo_url = absolute_uri(get_asset_url("sentry", "images/sentry-email-avatar.png"))
-
-        incident = self.create_incident()
-        title = "INCIDENT: {} (#{})".format(incident.title, incident.identifier)
+        alert_rule = self.create_alert_rule()
+        incident = self.create_incident(alert_rule=alert_rule, status=2)
+        title = u"{}: {}".format("Resolved", alert_rule.name)
         assert build_incident_attachment(incident) == {
             "fallback": title,
             "title": title,
@@ -95,17 +95,13 @@ class BuildIncidentAttachmentTest(TestCase):
                     },
                 )
             ),
-            "text": " ",
-            "fields": [
-                {"title": "Status", "value": "Fired", "short": True},
-                {"title": "Events", "value": 0, "short": True},
-                {"title": "Users", "value": 0, "short": True},
-            ],
+            "text": "0 events in the last 10 minutes\\Filter: level:error",
+            "fields": [],
             "mrkdwn_in": ["text"],
             "footer_icon": logo_url,
             "footer": "Sentry Incident",
             "ts": to_timestamp(incident.date_started),
-            "color": LEVEL_TO_COLOR["error"],
+            "color": RESOLVED_COLOR,
             "actions": [],
         }
 
