commit 51429a2ee685bb20a06a002fd66b3dfc2d67b2a1
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 1 13:12:36 2012 -0800

    Support expanded options for origin settings (validation logic) (refs GH-665)

diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index d716b8c842..afc4e09c62 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -51,7 +51,7 @@ def is_same_domain(url1, url2):
 
 def get_origins(project=None):
     if settings.ALLOW_ORIGIN == '*':
-        return '*'
+        return frozenset(['*'])
     elif settings.ALLOW_ORIGIN:
         result = settings.ALLOW_ORIGIN.split(' ')
     else:
@@ -66,11 +66,41 @@ def get_origins(project=None):
 
 
 def is_valid_origin(origin, project=None):
+    """
+    Given an ``origin`` which matches a base URI (e.g. http://example.com)
+    determine if a valid origin is present in the project settings.
+
+    Origins may be defined in several ways:
+
+    - http://domain.com[:port]: exact match for base URI (must include port)
+    - *: allow any domain
+    - *.domain.com: matches domain.com and all subdomains, on any port
+    - domain.com: matches domain.com on any port
+    """
     allowed = get_origins(project)
-    if allowed == '*':
+    if '*' in allowed:
         return True
 
     if not origin:
         return False
 
-    return origin in allowed
+    # Fast check
+    if origin in allowed:
+        return True
+
+    parsed = urlparse(origin)
+
+    for valid in allowed:
+        if '://' in valid:
+            continue
+
+        if valid.startswith('*.'):
+            # check foo.domain.com and domain.com
+            if parsed.hostname.endswith(valid[1:]) or parsed.hostname == valid[2:]:
+                return True
+            continue
+
+        if parsed.hostname == valid:
+            return True
+
+    return False
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index a9fe455ea6..0ca4906f35 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -2,11 +2,11 @@
 
 from __future__ import absolute_import
 
-from django.http import HttpResponse
+import mock
 
-from sentry.utils.http import is_same_domain, is_valid_origin
-
-from sentry.testutils import TestCase
+from sentry.models import Project, ProjectOption
+from sentry.testutils import TestCase, fixture
+from sentry.utils.http import is_same_domain, is_valid_origin, get_origins
 
 
 class SameDomainTestCase(TestCase):
@@ -29,15 +29,15 @@ class SameDomainTestCase(TestCase):
         self.assertFalse(is_same_domain(url1, url2))
 
 
-class IsValidOriginTestCase(TestCase):
+class GetOriginsTestCase(TestCase):
 
     def test_project(self):
-        from sentry.models import Project, ProjectOption
         project = Project.objects.get()
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
         with self.Settings(SENTRY_ALLOW_ORIGIN=None):
-            self.assertFalse(is_valid_origin('http://example.com', project))
+            result = get_origins(project)
+            self.assertEquals(result, frozenset(['http://foo.example']))
 
     def test_project_and_setting(self):
         from sentry.models import Project, ProjectOption
@@ -45,16 +45,81 @@ class IsValidOriginTestCase(TestCase):
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
         with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
-            self.assertTrue(is_valid_origin('http://example.com', project))
+            result = get_origins(project)
+            self.assertEquals(result, frozenset(['http://foo.example', 'http://example.com']))
 
     def test_setting_empty(self):
         with self.Settings(SENTRY_ALLOW_ORIGIN=None):
-            self.assertFalse(is_valid_origin('http://example.com'))
+            result = get_origins(None)
+            self.assertEquals(result, frozenset([]))
 
     def test_setting_all(self):
         with self.Settings(SENTRY_ALLOW_ORIGIN='*'):
-            self.assertTrue(is_valid_origin('http://example.com'))
+            result = get_origins(None)
+            self.assertEquals(result, frozenset(['*']))
 
     def test_setting_uri(self):
         with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
-            self.assertTrue(is_valid_origin('http://example.com'))
+            result = get_origins(None)
+            self.assertEquals(result, frozenset(['http://example.com']))
+
+
+class IsValidOriginTestCase(TestCase):
+    @fixture
+    def project(self):
+        return mock.Mock()
+
+    def isValidOrigin(self, origin, inputs):
+        with mock.patch('sentry.utils.http.get_origins') as get_origins:
+            get_origins.return_value = inputs
+            result = is_valid_origin(origin, self.project)
+            get_origins.assert_called_once_with(self.project)
+        return result
+
+    def test_global_wildcard_matches_domain(self):
+        result = self.isValidOrigin('http://example.com', ['*'])
+        self.assertEquals(result, True)
+
+    def test_domain_wildcard_matches_domain(self):
+        result = self.isValidOrigin('http://example.com', ['*.example.com'])
+        self.assertEquals(result, True)
+
+    def test_domain_wildcard_matches_domain_with_port(self):
+        result = self.isValidOrigin('http://example.com:80', ['*.example.com'])
+        self.assertEquals(result, True)
+
+    def test_domain_wildcard_matches_subdomain(self):
+        result = self.isValidOrigin('http://foo.example.com', ['*.example.com'])
+        self.assertEquals(result, True)
+
+    def test_domain_wildcard_matches_subdomain_with_port(self):
+        result = self.isValidOrigin('http://foo.example.com:80', ['*.example.com'])
+        self.assertEquals(result, True)
+
+    def test_domain_wildcard_does_not_match_others(self):
+        result = self.isValidOrigin('http://foo.com', ['*.example.com'])
+        self.assertEquals(result, False)
+
+    def test_base_domain_matches_domain(self):
+        result = self.isValidOrigin('http://example.com', ['example.com'])
+        self.assertEquals(result, True)
+
+    def test_base_domain_matches_domain_with_port(self):
+        result = self.isValidOrigin('http://example.com:80', ['example.com'])
+        self.assertEquals(result, True)
+
+    def test_base_domain_does_not_match_subdomain(self):
+        result = self.isValidOrigin('http://example.com', ['foo.example.com'])
+        self.assertEquals(result, False)
+
+    def test_full_uri_match(self):
+        result = self.isValidOrigin('http://example.com', ['http://example.com'])
+        self.assertEquals(result, True)
+
+    def test_full_uri_match_requires_scheme(self):
+        result = self.isValidOrigin('https://example.com', ['http://example.com'])
+        self.assertEquals(result, False)
+
+    def test_full_uri_match_requires_port(self):
+        result = self.isValidOrigin('http://example.com:80', ['http://example.com'])
+        self.assertEquals(result, False)
