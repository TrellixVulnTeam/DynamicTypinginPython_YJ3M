commit 192673ff53af23525b459a716f0bc429bf1aaadc
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 21 00:38:15 2012 -0700

    Rely on resolved_at as a marker for 'new events' so that events which have changed state will show

diff --git a/sentry/models.py b/sentry/models.py
index bf8a450c1a..7408cc23a8 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -386,7 +386,8 @@ class Group(MessageBase):
     times_seen = models.PositiveIntegerField(default=1, db_index=True)
     last_seen = models.DateTimeField(default=datetime.now, db_index=True)
     first_seen = models.DateTimeField(default=datetime.now, db_index=True)
-    resolved_at = models.DateTimeField(null=True, db_index=True)
+    # resolved_at should be the same as first_seen by default
+    resolved_at = models.DateTimeField(null=True, db_index=True, default=datetime.now)
     time_spent_total = models.FloatField(default=0)
     time_spent_count = models.IntegerField(default=0)
     score = models.IntegerField(default=0)
@@ -406,6 +407,11 @@ class Group(MessageBase):
     def __unicode__(self):
         return "(%s) %s" % (self.times_seen, self.error())
 
+    def save(self, *args, **kwargs):
+        if not self.resolved_at:
+            self.resolved_at = self.first_seen
+        super(Group, self).save(*args, **kwargs)
+
     def get_absolute_url(self):
         if self.project_id:
             return reverse('sentry-group', kwargs={'group_id': self.pk, 'project_id': self.project.slug})
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index b4481e856a..c2c857b84c 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -30,12 +30,14 @@ def dashboard(request):
             status=0,
         ).select_related('project').order_by('-score')
 
+        # TODO: change this to calculate the most frequent events in the time period,
+        # not just events seen within the time period that have at one time been frequent
         top_event_list = list(base_qs.filter(
             last_seen__gte=cutoff
         )[:10])
 
         new_event_list = list(base_qs.filter(
-            first_seen__gte=cutoff,
+            resolved_at__gte=cutoff,
         )[:10])
     else:
         top_event_list = None
