commit 59b55182e8a97f2021e54789ba6d82a013103428
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 14 10:10:10 2017 -0800

    [security] add basic encryption features

diff --git a/CHANGES b/CHANGES
index b36323378f..86309e7281 100644
--- a/CHANGES
+++ b/CHANGES
@@ -11,6 +11,7 @@ Version 8.14 (Unreleased)
 - Commits using the ``Fixes SHORTID`` annotation will now be tracked appropriately.
 - Added OrganizationReleasesEndpoint
 - Added context type app for cocoa events
+- Added basic encryption facilities (``sentry.utils.encryption``).
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index e56195bef8..0106e53a44 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1048,6 +1048,15 @@ SENTRY_DEFAULT_OPTIONS = {}
 # unless you have altered all schemas first
 SENTRY_USE_BIG_INTS = False
 
+# Encryption schemes available to Sentry. You should *never* remove from this
+# list until the key is no longer used in the database. The first listed
+# implementation is considered the default and will be used to encrypt all
+# values (as well as re-encrypt data when it's re-saved).
+SENTRY_ENCRYPTION_SCHEMES = (
+    # identifier: implementation
+    # ('0', Fernet(b'super secret key probably from Fernet.generate_key()')),
+)
+
 # Delay (in ms) to induce on API responses
 SENTRY_API_RESPONSE_DELAY = 0
 
diff --git a/src/sentry/utils/encryption.py b/src/sentry/utils/encryption.py
new file mode 100644
index 0000000000..0ef0cd22e8
--- /dev/null
+++ b/src/sentry/utils/encryption.py
@@ -0,0 +1,47 @@
+from __future__ import absolute_import
+
+import six
+
+from collections import OrderedDict
+from django.conf import settings
+from django.utils.encoding import smart_bytes
+
+
+class EncryptionManager(object):
+    def __init__(self, schemes=()):
+        for key, value in schemes:
+            if not isinstance(key, six.string_types):
+                raise ValueError('Encryption scheme type must be a string. Value was: {!r}'.format(value))
+            if not hasattr(value, 'encrypt') or not hasattr(value, 'decrypt'):
+                raise ValueError('Encryption scheme value must have \'encrypt\' and \'decrypt\' callables. Value was: {!r}'.format(value))
+        self.schemes = OrderedDict(schemes)
+        if not schemes:
+            self.default_scheme = None
+        else:
+            self.default_scheme = schemes[0][0]
+
+    def encrypt(self, value):
+        if self.default_scheme is None:
+            return value
+        value = smart_bytes(value)
+        scheme = self.schemes[self.default_scheme]
+        return b'{}${}'.format(self.default_scheme, scheme.encrypt(value))
+
+    def decrypt(self, value):
+        try:
+            enc_method, enc_data = value.split('$', 1)
+        except (ValueError, IndexError):
+            pass
+        else:
+            enc_data = smart_bytes(enc_data)
+            try:
+                scheme = self.schemes[enc_method]
+            except KeyError:
+                raise ValueError('Unknown encryption scheme: %s'.format(enc_method))
+            value = scheme.decrypt(enc_data)
+        return value
+
+default_manager = EncryptionManager(settings.SENTRY_ENCRYPTION_SCHEMES)
+
+encrypt = default_manager.encrypt
+decrypt = default_manager.decrypt
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 6289119e44..8fa5b91d6c 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -88,6 +88,8 @@ def pytest_configure(config):
 
     settings.DEBUG_VIEWS = True
 
+    settings.SENTRY_ENCRYPTION_SCHEMES = ()
+
     settings.DISABLE_RAVEN = True
 
     settings.CACHES = {
diff --git a/tests/sentry/utils/test_encryption.py b/tests/sentry/utils/test_encryption.py
new file mode 100644
index 0000000000..5894e68bce
--- /dev/null
+++ b/tests/sentry/utils/test_encryption.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from cryptography.fernet import Fernet
+
+from sentry.testutils import TestCase
+from sentry.utils.encryption import EncryptionManager
+
+
+class EncryptionManagerTest(TestCase):
+    def test_simple(self):
+        manager = EncryptionManager(schemes=(
+            ('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')),
+        ))
+        value = manager.encrypt('hello world')
+        assert value.startswith('1$')
+        result = manager.decrypt(value)
+        assert result == 'hello world'
+
+        manager = EncryptionManager(schemes=(
+            ('2', Fernet(Fernet.generate_key())),
+            ('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')),
+        ))
+
+        # this should use the first scheme
+        result = manager.decrypt(value)
+        assert result == 'hello world'
+
+        value2 = manager.encrypt('hello world')
+        assert value2 != value
+        assert value2.startswith('2$')
+
+    def test_no_schemes(self):
+        manager = EncryptionManager(schemes=())
+        value = manager.encrypt('hello world')
+        assert value == 'hello world'
+        result = manager.decrypt(value)
+        assert result == 'hello world'
