commit 1d7015415ed0b5ed4cbe09efb790343176148716
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Wed Mar 25 13:37:27 2020 -0700

    feat(IntegrationDirectory): Add category selector to filter integrations (#17852)
    
    Objective
    Add category filtering to make it easier for users to find a particular kind of integration.

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index e73a57dde8..3503208d23 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -381,6 +381,11 @@ export type PluginWithProjectList = PluginNoProject & {
   projectList: PluginProjectItem[];
 };
 
+export type AppOrProviderOrPlugin =
+  | SentryApp
+  | IntegrationProvider
+  | PluginWithProjectList;
+
 export type GlobalSelection = {
   projects: number[];
   environments: string[];
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 8561f75ce9..ae7f09dbe5 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -9,12 +9,16 @@ import {
   IntegrationInstallationStatus,
   SentryAppStatus,
   IntegrationFeature,
+  AppOrProviderOrPlugin,
+  SentryApp,
+  PluginWithProjectList,
 } from 'app/types';
 import {Hooks} from 'app/types/hooks';
 import HookStore from 'app/stores/hookStore';
 
 const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'INTEGRATION_ANALYTICS_SESSION' as const;
 const SORT_INTEGRATIONS_BY_WEIGHT = 'SORT_INTEGRATIONS_BY_WEIGHT' as const;
+const SHOW_INTEGRATION_DIRECTORY_CATEGORY_SELECT = 'SHOW_INTEGRATION_DIRECTORY_CATEGORY_SELECT' as const;
 
 export const startAnalyticsSession = () => {
   const sessionId = uniqueId();
@@ -41,6 +45,9 @@ export const getSortIntegrationsByWeightActive = (organization?: Organization) =
   }
 };
 
+export const getCategorySelectActive = () =>
+  localStorage.getItem(SHOW_INTEGRATION_DIRECTORY_CATEGORY_SELECT) === '1';
+
 export type SingleIntegrationEvent = {
   eventKey:
     | 'integrations.install_modal_opened' //TODO: remove
@@ -232,3 +239,29 @@ export const getCategories = (features: IntegrationFeature[]): string[] => {
 
   return [...new Set(transform)];
 };
+
+export const getCategoriesForIntegration = (
+  integration: AppOrProviderOrPlugin
+): string[] => {
+  if (isSentryApp(integration)) {
+    return ['internal', 'unpublished'].includes(integration.status)
+      ? [integration.status]
+      : getCategories(integration.featureData);
+  }
+  if (isPlugin(integration)) {
+    return getCategories(integration.featureDescriptions);
+  }
+  return getCategories(integration.metadata.features);
+};
+
+export function isSentryApp(
+  integration: AppOrProviderOrPlugin
+): integration is SentryApp {
+  return !!(integration as SentryApp).uuid;
+}
+
+export function isPlugin(
+  integration: AppOrProviderOrPlugin
+): integration is PluginWithProjectList {
+  return integration.hasOwnProperty('shortName');
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 88e4a0136c..fac1788473 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -3,6 +3,8 @@ import debounce from 'lodash/debounce';
 import React from 'react';
 import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
+import flatten from 'lodash/flatten';
+import uniq from 'lodash/uniq';
 
 import {
   Organization,
@@ -11,13 +13,17 @@ import {
   IntegrationProvider,
   SentryAppInstallation,
   PluginWithProjectList,
+  AppOrProviderOrPlugin,
 } from 'app/types';
 import {Panel, PanelBody} from 'app/components/panels';
 import {
   trackIntegrationEvent,
   getSentryAppInstallStatus,
   getSortIntegrationsByWeightActive,
-  getCategories,
+  getCategorySelectActive,
+  isSentryApp,
+  isPlugin,
+  getCategoriesForIntegration,
 } from 'app/utils/integrationUtil';
 import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
@@ -30,12 +36,11 @@ import SearchInput from 'app/components/forms/searchInput';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
 import space from 'app/styles/space';
 import {logExperiment} from 'app/utils/analytics';
+import SelectControl from 'app/components/forms/selectControl';
 
 import {POPULARITY_WEIGHT} from './constants';
 import IntegrationRow from './integrationRow';
 
-type AppOrProviderOrPlugin = SentryApp | IntegrationProvider | PluginWithProjectList;
-
 type Props = RouteComponentProps<{orgId: string}, {}> & {
   organization: Organization;
   hideHeader: boolean;
@@ -53,18 +58,9 @@ type State = {
   searchInput: string;
   list: AppOrProviderOrPlugin[];
   displayedList: AppOrProviderOrPlugin[];
+  selectedCategory: string;
 };
 
-function isSentryApp(integration: AppOrProviderOrPlugin): integration is SentryApp {
-  return !!(integration as SentryApp).uuid;
-}
-
-function isPlugin(
-  integration: AppOrProviderOrPlugin
-): integration is PluginWithProjectList {
-  return integration.hasOwnProperty('shortName');
-}
-
 const TEXT_SEARCH_ANALYTICS_DEBOUNCE_IN_MS = 1000;
 
 export class OrganizationIntegrations extends AsyncComponent<
@@ -96,6 +92,7 @@ export class OrganizationIntegrations extends AsyncComponent<
       ...super.getDefaultState(),
       list: [],
       displayedList: [],
+      selectedCategory: '',
     };
   }
 
@@ -289,6 +286,18 @@ export class OrganizationIntegrations extends AsyncComponent<
     });
   };
 
+  onCategorySelect = ({value: category}: {value: string}) => {
+    this.setState({selectedCategory: category}, () => {
+      if (!category) {
+        return this.setState({displayedList: this.state.list});
+      }
+      const result = this.state.list.filter(integration => {
+        return getCategoriesForIntegration(integration).includes(category);
+      });
+
+      return this.setState({displayedList: result});
+    });
+  };
   // Rendering
   renderProvider = (provider: IntegrationProvider) => {
     const {organization} = this.props;
@@ -308,7 +317,7 @@ export class OrganizationIntegrations extends AsyncComponent<
         status={integrations.length ? 'Installed' : 'Not Installed'}
         publishStatus="published"
         configurations={integrations.length}
-        categories={getCategories(provider.metadata.features)}
+        categories={getCategoriesForIntegration(provider)}
       />
     );
   };
@@ -333,7 +342,7 @@ export class OrganizationIntegrations extends AsyncComponent<
         status={plugin.projectList.length ? 'Installed' : 'Not Installed'}
         publishStatus="published"
         configurations={plugin.projectList.length}
-        categories={getCategories(plugin.featureDescriptions)}
+        categories={getCategoriesForIntegration(plugin)}
       />
     );
   };
@@ -342,9 +351,7 @@ export class OrganizationIntegrations extends AsyncComponent<
   renderSentryApp = (app: SentryApp) => {
     const {organization} = this.props;
     const status = getSentryAppInstallStatus(this.getAppInstall(app));
-    const categories = ['internal', 'unpublished'].includes(app.status)
-      ? [app.status]
-      : getCategories(app.featureData);
+    const categories = getCategoriesForIntegration(app);
 
     return (
       <IntegrationRow
@@ -373,9 +380,10 @@ export class OrganizationIntegrations extends AsyncComponent<
 
   renderBody() {
     const {orgId} = this.props.params;
-    const {displayedList} = this.state;
+    const {displayedList, selectedCategory, list} = this.state;
 
     const title = t('Integrations');
+    const categoryList = uniq(flatten(list.map(getCategoriesForIntegration)));
     return (
       <React.Fragment>
         <SentryDocumentTitle title={title} objSlug={orgId} />
@@ -384,12 +392,25 @@ export class OrganizationIntegrations extends AsyncComponent<
           <SettingsPageHeader
             title={title}
             action={
-              <SearchInput
-                value={this.state.searchInput || ''}
-                onChange={this.onSearchChange}
-                placeholder="Filter Integrations..."
-                width="25em"
-              />
+              <ActionContainer>
+                {getCategorySelectActive() ? (
+                  <SelectControl
+                    name="select-categories"
+                    onChange={this.onCategorySelect}
+                    value={selectedCategory}
+                    choices={[
+                      ['', t('All categories')],
+                      ...categoryList.map(category => [category, category]),
+                    ]}
+                  />
+                ) : null}
+                <SearchInput
+                  value={this.state.searchInput || ''}
+                  onChange={this.onSearchChange}
+                  placeholder={t('Filter Integrations...')}
+                  width="25em"
+                />
+              </ActionContainer>
             }
           />
         )}
@@ -415,6 +436,12 @@ export class OrganizationIntegrations extends AsyncComponent<
   }
 }
 
+const ActionContainer = styled('div')`
+  display: grid;
+  grid-template-columns: 240px max-content;
+  grid-gap: ${space(2)};
+`;
+
 const EmptyResultsContainer = styled('div')`
   height: 200px;
   display: flex;
