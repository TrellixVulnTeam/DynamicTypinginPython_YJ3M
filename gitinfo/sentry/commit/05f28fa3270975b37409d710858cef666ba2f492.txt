commit 05f28fa3270975b37409d710858cef666ba2f492
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 18 12:04:22 2015 -0700

    Better handling of invalid length attributes (release, event_id)

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 02eb2ec12c..267c639218 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -335,7 +335,7 @@ class ClientApiHelper(object):
                 'Discarded value for event_id due to length (%d chars)',
                 len(data['event_id']))
             data['errors'].append({
-                'type': EventError.INVALID_DATA,
+                'type': EventError.VALUE_TOO_LONG,
                 'name': 'event_id',
                 'value': data['event_id'],
             })
@@ -510,6 +510,13 @@ class ClientApiHelper(object):
 
         if data.get('release'):
             data['release'] = unicode(data['release'])
+            if len(data['release']) > 64:
+                data['errors'].append({
+                    'type': EventError.VALUE_TOO_LONG,
+                    'name': 'release',
+                    'value': data['release'],
+                })
+                del data['release']
 
         return data
 
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index eb4a309b67..181c687b90 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import
 class EventError(object):
     INVALID_DATA = 'invalid_data'
     INVALID_ATTRIBUTE = 'invalid_attribute'
+    VALUE_TOO_LONG = 'value_too_long'
     UNKNOWN_ERROR = 'unknown_error'
     SECURITY_VIOLATION = 'security_violation'
 
@@ -17,6 +18,7 @@ class EventError(object):
     _messages = {
         INVALID_DATA: 'Discarded invalid value for parameter \'{name}\'',
         INVALID_ATTRIBUTE: 'Discarded invalid parameter \'{name}\'',
+        VALUE_TOO_LONG: 'Discarded value for \'{name}\' due to exceeding maximum length',
         UNKNOWN_ERROR: 'Unknown error',
         SECURITY_VIOLATION: 'Security violation on {url}: {value}',
         JS_GENERIC_FETCH_ERROR: 'Unable to fetch resource: {url}',
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 8ce7264d6d..e7e4a48269 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -139,7 +139,7 @@ class ValidateDataTest(BaseAPITest):
         })
         assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
         assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['type'] == 'value_too_long'
         assert data['errors'][0]['name'] == 'event_id'
         assert data['errors'][0]['value'] == 'a' * 33
 
@@ -245,6 +245,22 @@ class ValidateDataTest(BaseAPITest):
             'culprit': 1
         })
 
+    def test_release_too_long(self):
+        data = self.helper.validate_data(self.project, {
+            'release': 'a' * 65,
+        })
+        assert not data.get('release')
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'value_too_long'
+        assert data['errors'][0]['name'] == 'release'
+        assert data['errors'][0]['value'] == 'a' * 65
+
+    def test_release_as_non_string(self):
+        data = self.helper.validate_data(self.project, {
+            'release': 42,
+        })
+        assert data.get('release') == '42'
+
 
 class GetInterfaceTest(TestCase):
     def test_does_not_let_through_disallowed_name(self):
