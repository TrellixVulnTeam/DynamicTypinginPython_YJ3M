commit ddbae49c2394d116ff8c82c6a516b52f200dc663
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Mon Jul 15 12:13:43 2019 -0700

    ref(suspect-commits): Add empty state (#13916)

diff --git a/src/sentry/api/endpoints/prompts_activity.py b/src/sentry/api/endpoints/prompts_activity.py
index 7bcd7f8f0d..251aef8e97 100644
--- a/src/sentry/api/endpoints/prompts_activity.py
+++ b/src/sentry/api/endpoints/prompts_activity.py
@@ -15,6 +15,9 @@ PROMPTS = {
     'releases': {
         'required_fields': ['organization_id', 'project_id'],
     },
+    'suspect_commits': {
+        'required_fields': ['organization_id', 'project_id'],
+    }
 }
 
 VALID_STATUSES = frozenset(('snoozed', 'dismissed'))
@@ -55,7 +58,7 @@ class PromptsActivityEndpoint(Endpoint):
 
         try:
             result = PromptsActivity.objects.get(user=request.user,
-                                                 feature='releases',
+                                                 feature=feature,
                                                  **filters)
         except PromptsActivity.DoesNotExist:
             return Response({})
diff --git a/src/sentry/static/sentry/app/components/commitLink.jsx b/src/sentry/static/sentry/app/components/commitLink.jsx
index 7a0d9478d1..5da2181ea2 100644
--- a/src/sentry/static/sentry/app/components/commitLink.jsx
+++ b/src/sentry/static/sentry/app/components/commitLink.jsx
@@ -50,10 +50,12 @@ function CommitLink({inline, commitId, repository}) {
     return <span>{shortId}</span>;
   }
 
-  const commitUrl = providerData.commitUrl({
-    commitId,
-    baseUrl: repository.url,
-  });
+  const commitUrl =
+    repository.url &&
+    providerData.commitUrl({
+      commitId,
+      baseUrl: repository.url,
+    });
 
   return !inline ? (
     <Button external href={commitUrl} size="small" icon={providerData.icon}>
diff --git a/src/sentry/static/sentry/app/components/commitRow.jsx b/src/sentry/static/sentry/app/components/commitRow.jsx
index d5576570e7..21dc528d1e 100644
--- a/src/sentry/static/sentry/app/components/commitRow.jsx
+++ b/src/sentry/static/sentry/app/components/commitRow.jsx
@@ -7,13 +7,13 @@ import Avatar from 'app/components/avatar';
 import TimeSince from 'app/components/timeSince';
 import CommitLink from 'app/components/commitLink';
 import {t, tct} from 'app/locale';
-
 import {PanelItem} from 'app/components/panels';
 import TextOverflow from 'app/components/textOverflow';
 
 export default class CommitRow extends React.Component {
   static propTypes = {
     commit: PropTypes.object,
+    customAvatar: PropTypes.node,
   };
 
   renderMessage = message => {
@@ -27,12 +27,19 @@ export default class CommitRow extends React.Component {
   };
 
   render() {
-    const {id, dateCreated, message, author, repository} = this.props.commit;
+    const {commit, customAvatar} = this.props;
+    const {id, dateCreated, message, author, repository} = commit;
+
     return (
       <PanelItem key={id} align="center">
-        <AvatarWrapper mr={2}>
-          <Avatar size={36} user={author} />
-        </AvatarWrapper>
+        {customAvatar ? (
+          customAvatar
+        ) : (
+          <AvatarWrapper mr={2}>
+            <Avatar size={36} user={author} />
+          </AvatarWrapper>
+        )}
+
         <Box flex="1" direction="column" style={{minWidth: 0}} mr={2}>
           <Message>{this.renderMessage(message)}</Message>
           <Meta>
@@ -42,7 +49,7 @@ export default class CommitRow extends React.Component {
             })}
           </Meta>
         </Box>
-        <Box className="hidden-xs">
+        <Box>
           <CommitLink commitId={id} repository={repository} />
         </Box>
       </PanelItem>
diff --git a/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx b/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx
new file mode 100644
index 0000000000..8a8c39e142
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventCauseEmpty.jsx
@@ -0,0 +1,197 @@
+import moment from 'moment';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Button from 'app/components/button';
+import codesworth from 'app/../images/codesworth.png';
+import CommitRow from 'app/components/commitRow';
+import getDynamicText from 'app/utils/getDynamicText';
+import {Panel} from 'app/components/panels';
+import {promptsUpdate} from 'app/actionCreators/prompts';
+import SentryTypes from 'app/sentryTypes';
+import {snoozedDays} from 'app/utils/promptsActivity';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import Tooltip from 'app/components/tooltip';
+import withApi from 'app/utils/withApi';
+
+const EXAMPLE_COMMITS = ['dec0de', 'de1e7e', '5ca1ed'];
+
+const DUMMY_COMMIT = {
+  id: getDynamicText({
+    value: EXAMPLE_COMMITS[Math.floor(Math.random() * EXAMPLE_COMMITS.length)],
+    fixed: '5ca1ed',
+  }),
+  author: {name: 'codesworth'},
+  dateCreated: moment()
+    .subtract(3, 'day')
+    .format(),
+  repository: {
+    provider: {id: 'integrations:github', name: 'GitHub', status: 'active'},
+  },
+  message: t('This commit accidentally broke something'),
+};
+
+class EventCauseEmpty extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    project: SentryTypes.Project.isRequired,
+  };
+
+  state = {
+    shouldShow: undefined,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  async fetchData() {
+    const {api, project, organization} = this.props;
+
+    const data = await api.requestPromise('/promptsactivity/', {
+      query: {
+        project_id: project.id,
+        organization_id: organization.id,
+        feature: 'suspect_commits',
+      },
+    });
+
+    this.setState({shouldShow: this.shouldShow(data)});
+  }
+
+  shouldShow({data} = {}) {
+    if (data && data.dismissed_ts) {
+      return false;
+    }
+    if (data && data.snoozed_ts) {
+      return snoozedDays(data.snoozed_ts) > 7;
+    }
+    return true;
+  }
+
+  handleClick(action) {
+    const {api, project, organization} = this.props;
+
+    const data = {
+      projectId: project.id,
+      organizationId: organization.id,
+      feature: 'suspect_commits',
+      status: action,
+    };
+    promptsUpdate(api, data).then(this.setState({shouldShow: false}));
+  }
+
+  render() {
+    const {shouldShow} = this.state;
+    if (!shouldShow) {
+      return null;
+    }
+
+    return (
+      <div className="box">
+        <StyledPanel dashedBorder>
+          <BoxHeader>
+            <Description>
+              <h3>{t('Suspect Commits')}</h3>
+              <p>{t('Identify which commit caused this issue')}</p>
+            </Description>
+            <ButtonList>
+              <Button
+                size="small"
+                priority="primary"
+                href="https://docs.sentry.io/workflow/releases/#create-release"
+              >
+                {t('Read the docs')}
+              </Button>
+
+              <div>
+                <Tooltip title={t('Remind me next week')}>
+                  <SnoozeButton
+                    size="small"
+                    onClick={() => this.handleClick('snoozed')}
+                    data-test-id="snoozed"
+                  >
+                    {t('Snooze')}
+                  </SnoozeButton>
+                </Tooltip>
+                <DismissButton
+                  size="small"
+                  onClick={() => this.handleClick('dismissed')}
+                  data-test-id="dismissed"
+                >
+                  {t('Dismiss')}
+                </DismissButton>
+              </div>
+            </ButtonList>
+          </BoxHeader>
+          <Panel>
+            <CommitRow
+              key={DUMMY_COMMIT.id}
+              commit={DUMMY_COMMIT}
+              customAvatar={<CustomAvatar src={codesworth} />}
+            />
+          </Panel>
+        </StyledPanel>
+      </div>
+    );
+  }
+}
+
+const StyledPanel = styled(Panel)`
+  padding: ${space(3)};
+  padding-bottom: 0;
+  background: none;
+`;
+
+const BoxHeader = styled('div')`
+  display: grid;
+  align-items: start;
+  grid-template-columns: repeat(auto-fit, minmax(256px, 1fr));
+`;
+
+const Description = styled('div')`
+  h3 {
+    font-size: 14px;
+    text-transform: uppercase;
+    margin-bottom: ${space(0.25)};
+    color: ${p => p.theme.gray2};
+  }
+
+  p {
+    font-size: 13px;
+    font-weight: bold;
+    color: ${p => p.theme.gray4};
+    margin-bottom: ${space(1.5)};
+  }
+`;
+
+const ButtonList = styled('div')`
+  display: inline-grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+  align-items: center;
+  justify-self: end;
+  margin-bottom: 16px;
+`;
+
+const SnoozeButton = styled(Button)`
+  border-right: 0;
+  border-top-right-radius: 0;
+  border-bottom-right-radius: 0;
+`;
+
+const DismissButton = styled(Button)`
+  border-top-left-radius: 0;
+  border-bottom-left-radius: 0;
+`;
+
+const CustomAvatar = styled('img')`
+  height: 48px;
+  padding-right: 12px;
+  margin: -6px 0px -6px -2px;
+`;
+
+export default withApi(EventCauseEmpty);
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 906bf420b3..99a07be000 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -7,10 +7,12 @@ import {logException} from 'app/utils/logging';
 import {objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
 import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs';
+import ConfigStore from 'app/stores/configStore';
 import CspInterface from 'app/components/events/interfaces/csp';
 import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
 import EventAttachments from 'app/components/events/eventAttachments';
 import EventCause from 'app/components/events/eventCause';
+import EventCauseEmpty from 'app/components/events/eventCauseEmpty';
 import EventContextSummary from 'app/components/events/contextSummary';
 import EventContexts from 'app/components/events/contexts';
 import EventDataSection from 'app/components/events/eventDataSection';
@@ -60,6 +62,7 @@ class EventEntries extends React.Component {
     // TODO(dcramer): ideally isShare would be replaced with simple permission
     // checks
     isShare: PropTypes.bool,
+    showExampleCommit: PropTypes.bool,
   };
 
   static defaultProps = {
@@ -79,7 +82,7 @@ class EventEntries extends React.Component {
     this.recordIssueError(errorTypes, errorMessages);
   }
 
-  shouldComponentUpdate(nextProps, nextState) {
+  shouldComponentUpdate(nextProps) {
     return this.props.event.id !== nextProps.event.id;
   }
 
@@ -97,6 +100,11 @@ class EventEntries extends React.Component {
     });
   }
 
+  get isSuperUser() {
+    const user = ConfigStore.get('user');
+    return user && user.isSuperuser;
+  }
+
   renderEntries() {
     const {event, project, isShare} = this.props;
 
@@ -137,7 +145,15 @@ class EventEntries extends React.Component {
   }
 
   render() {
-    const {organization, group, isShare, project, event, orgId} = this.props;
+    const {
+      organization,
+      group,
+      isShare,
+      project,
+      event,
+      orgId,
+      showExampleCommit,
+    } = this.props;
 
     const features = organization ? new Set(organization.features) : new Set();
 
@@ -155,9 +171,14 @@ class EventEntries extends React.Component {
     return (
       <div className="entries">
         {!objectIsEmpty(event.errors) && <EventErrors event={event} />}{' '}
-        {!isShare && !!group.firstRelease && (
-          <EventCause event={event} orgId={orgId} projectId={project.slug} />
-        )}
+        {!isShare &&
+          (showExampleCommit ? (
+            this.isSuperUser && (
+              <EventCauseEmpty organization={organization} project={project} />
+            )
+          ) : (
+            <EventCause event={event} orgId={orgId} projectId={project.slug} />
+          ))}
         {event.userReport && (
           <StyledEventUserFeedback
             report={event.userReport}
diff --git a/src/sentry/static/sentry/app/utils/promptsActivity.jsx b/src/sentry/static/sentry/app/utils/promptsActivity.jsx
new file mode 100644
index 0000000000..6b00844503
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/promptsActivity.jsx
@@ -0,0 +1,13 @@
+import moment from 'moment';
+
+/**
+ * Given a snoozed unix timestamp in seconds,
+ * returns the number of days since the prompt was snoozed
+ *
+ * @param {Number} snoozedTs Snoozed timestamp
+ */
+export function snoozedDays(snoozedTs) {
+  const now = moment.utc();
+  const snoozedDay = moment.unix(snoozedTs).utc();
+  return now.diff(snoozedDay, 'days');
+}
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
index 55040fdc9c..0e4524930a 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
@@ -38,6 +38,7 @@ class GroupEventDetails extends React.Component {
       error: false,
       event: null,
       eventNavLinks: '',
+      setupReleases: [],
     };
   }
 
@@ -113,6 +114,14 @@ class GroupEventDetails extends React.Component {
 
     const envNames = environments.map(e => e.name);
 
+    api
+      .requestPromise(`/projects/${orgSlug}/${projSlug}/releases/completion/`)
+      .then(data => {
+        this.setState({
+          setupReleases: data,
+        });
+      });
+
     fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)
       .then(data => {
         this.setState({
@@ -133,6 +142,11 @@ class GroupEventDetails extends React.Component {
     fetchSentryAppComponents(api, orgSlug, projectId);
   };
 
+  get hasSetupCommits() {
+    const {setupReleases} = this.state;
+    return setupReleases.some(({step, complete}) => step === 'commit' && complete);
+  }
+
   render() {
     const {group, project, organization, environments, location} = this.props;
     const evt = withMeta(this.state.event);
@@ -178,6 +192,7 @@ class GroupEventDetails extends React.Component {
                 event={evt}
                 orgId={organization.slug}
                 project={project}
+                showExampleCommit={!this.hasSetupCommits}
               />
             )}
           </div>
diff --git a/src/sentry/static/sentry/app/views/organizationReleases/list/releaseProgress.jsx b/src/sentry/static/sentry/app/views/organizationReleases/list/releaseProgress.jsx
index 5c0c7f65d7..4c4ea8e925 100644
--- a/src/sentry/static/sentry/app/views/organizationReleases/list/releaseProgress.jsx
+++ b/src/sentry/static/sentry/app/views/organizationReleases/list/releaseProgress.jsx
@@ -8,6 +8,7 @@ import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/button';
 import {PanelItem} from 'app/components/panels';
 import {promptsUpdate} from 'app/actionCreators/prompts';
+import {snoozedDays} from 'app/utils/promptsActivity';
 import withOrganization from 'app/utils/withOrganization';
 
 import ProgressBar from './progressBar';
@@ -107,10 +108,7 @@ class ReleaseProgress extends AsyncComponent {
   showBar({data} = {}) {
     let show;
     if (data && data.snoozed_ts) {
-      // check if more than 3 days have passed since snooze
-      const now = Date.now() / 1000;
-      const snoozingTime = (now - data.snoozed_ts) / (60 * 24);
-      show = snoozingTime > 3 ? true : false;
+      show = snoozedDays(data.snoozed_ts) > 7;
     } else if (data && data.dismissed_ts) {
       show = false;
     } else {
diff --git a/src/sentry/static/sentry/images/codesworth.png b/src/sentry/static/sentry/images/codesworth.png
new file mode 100644
index 0000000000..6a507483e3
Binary files /dev/null and b/src/sentry/static/sentry/images/codesworth.png differ
diff --git a/tests/js/spec/components/events/eventCauseEmpty.spec.jsx b/tests/js/spec/components/events/eventCauseEmpty.spec.jsx
new file mode 100644
index 0000000000..90e9ddd046
--- /dev/null
+++ b/tests/js/spec/components/events/eventCauseEmpty.spec.jsx
@@ -0,0 +1,164 @@
+import React from 'react';
+import moment from 'moment';
+import {mount} from 'enzyme';
+
+import EventCauseEmpty from 'app/components/events/eventCauseEmpty';
+
+describe('EventCauseEmpty', function() {
+  let putMock;
+  const routerContext = TestStubs.routerContext();
+  const organization = TestStubs.Organization();
+  const project = TestStubs.Project();
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/releases/completion/',
+      body: [{step: 'commit', complete: false}],
+    });
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {},
+    });
+    putMock = MockApiClient.addMockResponse({
+      method: 'PUT',
+      url: '/promptsactivity/',
+    });
+  });
+
+  it('renders', async function() {
+    const wrapper = mount(
+      <EventCauseEmpty organization={organization} project={project} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('CommitRow').exists()).toBe(true);
+  });
+
+  it('can be snoozed', async function() {
+    const wrapper = mount(
+      <EventCauseEmpty organization={organization} project={project} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    wrapper
+      .find('[data-test-id="snoozed"]')
+      .first()
+      .simulate('click');
+
+    expect(putMock).toHaveBeenCalledWith(
+      '/promptsactivity/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          organization_id: organization.id,
+          project_id: project.id,
+          feature: 'suspect_commits',
+          status: 'snoozed',
+        },
+      })
+    );
+
+    expect(wrapper.find('CommitRow').exists()).toBe(false);
+  });
+
+  it('does not render when snoozed', async function() {
+    const snoozed_ts = moment()
+      .subtract(1, 'day')
+      .unix();
+
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {data: {snoozed_ts}},
+    });
+
+    const wrapper = mount(
+      <EventCauseEmpty organization={organization} project={project} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('CommitRow').exists()).toBe(false);
+  });
+
+  it('renders when snoozed more than 7 days ago', async function() {
+    const snoozed_ts = moment()
+      .subtract(9, 'day')
+      .unix();
+
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {data: {snoozed_ts}},
+    });
+
+    const wrapper = mount(
+      <EventCauseEmpty organization={organization} project={project} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('CommitRow').exists()).toBe(true);
+  });
+
+  it('can be dismissed', async function() {
+    const wrapper = mount(
+      <EventCauseEmpty organization={organization} project={project} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    wrapper
+      .find('[data-test-id="dismissed"]')
+      .first()
+      .simulate('click');
+
+    expect(putMock).toHaveBeenCalledWith(
+      '/promptsactivity/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          organization_id: organization.id,
+          project_id: project.id,
+          feature: 'suspect_commits',
+          status: 'dismissed',
+        },
+      })
+    );
+
+    expect(wrapper.find('CommitRow').exists()).toBe(false);
+  });
+
+  it('does not render when dismissed', async function() {
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {data: {dismissed_ts: moment().unix()}},
+    });
+
+    const wrapper = mount(
+      <EventCauseEmpty organization={organization} project={project} />,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('CommitRow').exists()).toBe(false);
+  });
+});
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
index c07a1ac6f1..f303cbc25f 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
@@ -3,6 +3,7 @@ import {mount} from 'enzyme';
 import {browserHistory} from 'react-router';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import ConfigStore from 'app/stores/configStore';
 import {GroupEventDetails} from 'app/views/organizationGroupDetails/groupEventDetails';
 
 describe('groupEventDetails', () => {
@@ -11,6 +12,7 @@ describe('groupEventDetails', () => {
   let routerContext;
   let group;
   let event;
+  let promptsActivity;
 
   const mockGroupApis = () => {
     MockApiClient.addMockResponse({
@@ -23,6 +25,11 @@ describe('groupEventDetails', () => {
       body: event,
     });
 
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/events/1/`,
+      body: event,
+    });
+
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/issues/`,
       method: 'PUT',
@@ -52,6 +59,16 @@ describe('groupEventDetails', () => {
       url: `/groups/${group.id}/integrations/`,
       body: [],
     });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/promptsactivity/',
+      body: promptsActivity,
+    });
   };
 
   beforeEach(() => {
@@ -99,10 +116,6 @@ describe('groupEventDetails', () => {
   });
 
   it('redirects on switching to an invalid environment selection for event', async function() {
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/events/1/`,
-      body: event,
-    });
     const wrapper = mount(
       <GroupEventDetails
         api={new MockApiClient()}
@@ -124,10 +137,6 @@ describe('groupEventDetails', () => {
   });
 
   it('does not redirect when switching to a valid environment selection for event', async function() {
-    MockApiClient.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/events/1/`,
-      body: event,
-    });
     const wrapper = mount(
       <GroupEventDetails
         api={new MockApiClient()}
@@ -204,8 +213,99 @@ describe('groupEventDetails', () => {
     });
   });
 
+  it('does not render suspect commit empty state', async function() {
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+      body: [
+        {
+          step: 'commit',
+          complete: false,
+        },
+      ],
+    });
+
+    const wrapper = mount(
+      <GroupEventDetails
+        api={new MockApiClient()}
+        group={group}
+        project={project}
+        organization={org}
+        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+        params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+        location={{query: {environment: 'dev'}}}
+      />,
+      routerContext
+    );
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+    expect(wrapper.find('EventCause').exists()).toBe(false);
+  });
+
+  it('renders suspect commit empty state for super users', async function() {
+    ConfigStore.set('user', TestStubs.User({isSuperuser: true}));
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+      body: [
+        {
+          step: 'commit',
+          complete: false,
+        },
+      ],
+    });
+
+    const wrapper = mount(
+      <GroupEventDetails
+        api={new MockApiClient()}
+        group={group}
+        project={project}
+        organization={org}
+        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+        params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+        location={{query: {environment: 'dev'}}}
+      />,
+      routerContext
+    );
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('EventCauseEmpty').exists()).toBe(true);
+    expect(wrapper.find('EventCause').exists()).toBe(false);
+  });
+
+  it('renders suspect commit', async function() {
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
+      body: [
+        {
+          step: 'commit',
+          complete: true,
+        },
+      ],
+    });
+
+    const wrapper = mount(
+      <GroupEventDetails
+        api={new MockApiClient()}
+        group={group}
+        project={project}
+        organization={org}
+        environments={[{id: '1', name: 'dev', displayName: 'Dev'}]}
+        params={{orgId: org.slug, groupId: group.id, eventId: '1'}}
+        location={{query: {environment: 'dev'}}}
+      />,
+      routerContext
+    );
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('EventCause').exists()).toBe(true);
+    expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+  });
+
   describe('Platform Integrations', () => {
-    let wrapper;  // eslint-disable-line
+    let wrapper; // eslint-disable-line
     let integrationsRequest;
     let orgIntegrationsRequest;
     let componentsRequest;
@@ -255,21 +355,11 @@ describe('groupEventDetails', () => {
       MockApiClient.clearMockResponses();
       mockGroupApis();
 
-      MockApiClient.addMockResponse({
-        url: `/projects/${org.slug}/${project.slug}/events/1/`,
-        body: event,
-      });
-
       componentsRequest = MockApiClient.addMockResponse({
         url: `/organizations/${org.slug}/sentry-app-components/?projectId=${project.id}`,
         body: [component],
       });
 
-      MockApiClient.addMockResponse({
-        url: `/projects/${org.slug}/${project.slug}/events/1/`,
-        body: event,
-      });
-
       integrationsRequest = MockApiClient.addMockResponse({
         url: '/sentry-apps/',
         body: [integration],
diff --git a/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap b/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap
index 668012b2b7..97064a2c2d 100644
--- a/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap
+++ b/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap
@@ -364,14 +364,12 @@ Users now have access to useful links from the blogs and docs on Spike-protectio
                             </div>
                           </Base>
                         </Box>
-                        <Box
-                          className="hidden-xs"
-                        >
+                        <Box>
                           <Base
-                            className="hidden-xs css-roynbj"
+                            className="css-roynbj"
                           >
                             <div
-                              className="hidden-xs css-roynbj"
+                              className="css-roynbj"
                               is={null}
                             >
                               <CommitLink
@@ -774,14 +772,12 @@ Users now have access to useful links from the blogs and docs on Spike-protectio
                             </div>
                           </Base>
                         </Box>
-                        <Box
-                          className="hidden-xs"
-                        >
+                        <Box>
                           <Base
-                            className="hidden-xs css-roynbj"
+                            className="css-roynbj"
                           >
                             <div
-                              className="hidden-xs css-roynbj"
+                              className="css-roynbj"
                               is={null}
                             >
                               <CommitLink
diff --git a/tests/js/spec/views/organizationReleases/list/releaseProgress.spec.jsx b/tests/js/spec/views/organizationReleases/list/releaseProgress.spec.jsx
index 7d7fd9a0a0..2e1a9b23fb 100644
--- a/tests/js/spec/views/organizationReleases/list/releaseProgress.spec.jsx
+++ b/tests/js/spec/views/organizationReleases/list/releaseProgress.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import {Client} from 'app/api';
+import moment from 'moment';
 import {mount} from 'enzyme';
 
 import {ReleaseProgress} from 'app/views/organizationReleases/list/releaseProgress';
@@ -7,7 +7,7 @@ import {ReleaseProgress} from 'app/views/organizationReleases/list/releaseProgre
 describe('ReleaseProgress', function() {
   let wrapper, organization, project, getPromptsMock, putMock, routerContext;
   afterEach(function() {
-    Client.clearMockResponses();
+    MockApiClient.clearMockResponses();
   });
 
   beforeEach(function() {
@@ -15,19 +15,29 @@ describe('ReleaseProgress', function() {
     project = TestStubs.Project();
     routerContext = TestStubs.routerContext();
 
-    getPromptsMock = Client.addMockResponse({
+    getPromptsMock = MockApiClient.addMockResponse({
       method: 'GET',
       url: '/promptsactivity/',
       body: {},
     });
-    putMock = Client.addMockResponse({
+    putMock = MockApiClient.addMockResponse({
       method: 'PUT',
       url: '/promptsactivity/',
     });
+
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/releases/completion/',
+      body: [
+        {step: 'tag', complete: true},
+        {step: 'repo', complete: false},
+        {step: 'commit', complete: false},
+        {step: 'deploy', complete: false},
+      ],
+    });
   });
 
-  it('does not render if steps complete', async function() {
-    Client.addMockResponse({
+  it('does not render if steps complete', function() {
+    MockApiClient.addMockResponse({
       url: '/projects/org-slug/project-slug/releases/completion/',
       body: [
         {step: 'tag', complete: true},
@@ -41,20 +51,10 @@ describe('ReleaseProgress', function() {
       routerContext
     );
     expect(wrapper.state('remainingSteps')).toBe(0);
-    expect(wrapper.find('ReleaseProgress')).toHaveLength(1);
-    expect(wrapper.find('PanelItem')).toHaveLength(0);
+    expect(wrapper.find('PanelItem').exists()).toBe(false);
   });
 
-  it('renders with next step suggestion', async function() {
-    Client.addMockResponse({
-      url: '/projects/org-slug/project-slug/releases/completion/',
-      body: [
-        {step: 'tag', complete: true},
-        {step: 'repo', complete: false},
-        {step: 'commit', complete: false},
-        {step: 'deploy', complete: false},
-      ],
-    });
+  it('renders with next step suggestion', function() {
     wrapper = mount(
       <ReleaseProgress organization={organization} project={project} />,
       routerContext
@@ -69,16 +69,7 @@ describe('ReleaseProgress', function() {
     expect(getPromptsMock).toHaveBeenCalled();
   });
 
-  it('hides when snoozed', async function() {
-    Client.addMockResponse({
-      url: '/projects/org-slug/project-slug/releases/completion/',
-      body: [
-        {step: 'tag', complete: true},
-        {step: 'repo', complete: false},
-        {step: 'commit', complete: false},
-        {step: 'deploy', complete: false},
-      ],
-    });
+  it('hides when snoozed', function() {
     wrapper = mount(
       <ReleaseProgress organization={organization} project={project} />,
       routerContext
@@ -91,7 +82,6 @@ describe('ReleaseProgress', function() {
     ).toBe('Next step: Link to a repo');
     expect(wrapper.find('PanelItem')).toHaveLength(1);
 
-    //Snooze the bar
     wrapper
       .find('[data-test-id="snoozed"]')
       .first()
@@ -110,7 +100,86 @@ describe('ReleaseProgress', function() {
       })
     );
     expect(wrapper.state('showBar')).toBe(false);
-    expect(wrapper.find('ReleaseProgress')).toHaveLength(1);
-    expect(wrapper.find('PanelItem')).toHaveLength(0);
+    expect(wrapper.find('PanelItem').exists()).toBe(false);
+  });
+
+  it('does not render when snoozed', function() {
+    const snoozed_ts = moment()
+      .subtract(1, 'day')
+      .unix();
+
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {data: {snoozed_ts}},
+    });
+
+    wrapper = mount(
+      <ReleaseProgress organization={organization} project={project} />,
+      routerContext
+    );
+    expect(wrapper.state('showBar')).toBe(false);
+    expect(wrapper.find('PanelItem').exists()).toBe(false);
+  });
+
+  it('renders when snoozed more than 7 days ago', function() {
+    const snoozed_ts = moment()
+      .subtract(9, 'day')
+      .unix();
+
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {data: {snoozed_ts}},
+    });
+
+    wrapper = mount(
+      <ReleaseProgress organization={organization} project={project} />,
+      routerContext
+    );
+    expect(wrapper.state('showBar')).toBe(true);
+    expect(wrapper.find('PanelItem').exists()).toBe(true);
+  });
+
+  it('hides when dismissed', function() {
+    wrapper = mount(
+      <ReleaseProgress organization={organization} project={project} />,
+      routerContext
+    );
+
+    wrapper
+      .find('[data-test-id="dismissed"]')
+      .first()
+      .simulate('click');
+
+    expect(putMock).toHaveBeenCalledWith(
+      '/promptsactivity/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          organization_id: organization.id,
+          project_id: project.id,
+          feature: 'releases',
+          status: 'dismissed',
+        },
+      })
+    );
+    expect(wrapper.state('showBar')).toBe(false);
+    expect(wrapper.find('PanelItem').exists()).toBe(false);
+  });
+
+  it('does not render when dismissed', function() {
+    MockApiClient.addMockResponse({
+      method: 'GET',
+      url: '/promptsactivity/',
+      body: {data: {dismissed_ts: moment().unix()}},
+    });
+
+    wrapper = mount(
+      <ReleaseProgress organization={organization} project={project} />,
+      routerContext
+    );
+    expect(wrapper.state('showBar')).toBe(false);
+    expect(wrapper.find('PanelItem').exists()).toBe(false);
   });
 });
