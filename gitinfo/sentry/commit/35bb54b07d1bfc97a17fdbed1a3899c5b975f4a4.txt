commit 35bb54b07d1bfc97a17fdbed1a3899c5b975f4a4
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Feb 10 18:22:38 2017 -0800

    Safely extract frames from unexpected inputs. (#4902)

diff --git a/src/sentry/similarity.py b/src/sentry/similarity.py
index 5ac78376a0..4412a7d36b 100644
--- a/src/sentry/similarity.py
+++ b/src/sentry/similarity.py
@@ -5,6 +5,7 @@ import logging
 import math
 import operator
 import struct
+from collections import Sequence
 
 import mmh3
 from django.conf import settings
@@ -14,6 +15,9 @@ from sentry.utils.datastructures import BidirectionalMapping
 from sentry.utils.iterators import shingle
 
 
+logger = logging.getLogger(__name__)
+
+
 def scale_to_total(value):
     """\
     Convert a mapping of distinct quantities to a mapping of proportions of the
@@ -341,6 +345,25 @@ def serialize_frame(frame):
     )
 
 
+def get_exception_frames(exception):
+    """\
+    Extracts frames from an ``Exception`` interface, returning an empty
+    sequence if no frame value was provided or if the value is of an invalid or
+    unexpected type.
+    """
+    try:
+        frames = exception['stacktrace']['frames']
+    except (TypeError, KeyError):
+        logger.info('Could not extract frames from exception, returning empty sequence.', exc_info=True)
+        frames = []
+    else:
+        if not isinstance(frames, Sequence):
+            logger.info('Expected frames to be a sequence but got %r, returning empty sequence instead.', type(frames))
+            frames = []
+
+    return frames
+
+
 def get_application_chunks(exception):
     """\
     Filters out system and framework frames from a stacktrace in order to
@@ -352,7 +375,7 @@ def get_application_chunks(exception):
         itertools.ifilter(
             lambda (in_app, frames): in_app,
             itertools.groupby(
-                exception['stacktrace']['frames'],
+                get_exception_frames(exception),
                 key=lambda frame: frame.get('in_app', False),
             )
         )
@@ -362,38 +385,36 @@ def get_application_chunks(exception):
 class ExceptionFeature(object):
     def __init__(self, function):
         self.function = function
-        self.logger = logging.getLogger(__name__)
 
     def extract(self, event):
         try:
             exceptions = event.data['sentry.interfaces.Exception']['values']
         except KeyError as error:
-            self.logger.info('Could not extract characteristic(s) from %r due error: %r', event, error, exc_info=True)
+            logger.info('Could not extract characteristic(s) from %r due error: %r', event, error, exc_info=True)
             return
 
         for exception in exceptions:
             try:
                 yield self.function(exception)
             except Exception as error:
-                self.logger.exception('Could not extract characteristic(s) from exception in %r due to error: %r', event, error)
+                logger.exception('Could not extract characteristic(s) from exception in %r due to error: %r', event, error)
 
 
 class MessageFeature(object):
     def __init__(self, function):
         self.function = function
-        self.logger = logging.getLogger(__name__)
 
     def extract(self, event):
         try:
             message = event.data['sentry.interfaces.Message']
         except KeyError as error:
-            self.logger.info('Could not extract characteristic(s) from %r due error: %r', event, error, exc_info=True)
+            logger.info('Could not extract characteristic(s) from %r due error: %r', event, error, exc_info=True)
             return
 
         try:
             yield self.function(message)
         except Exception as error:
-            self.logger.exception('Could not extract characteristic(s) from message of %r due to error: %r', event, error)
+            logger.exception('Could not extract characteristic(s) from message of %r due to error: %r', event, error)
 
 
 class FeatureSet(object):
@@ -499,7 +520,7 @@ features = FeatureSet(
                     2,
                     map(
                         serialize_frame,
-                        exception['stacktrace']['frames'],
+                        get_exception_frames(exception),
                     ),
                 ),
             ),
diff --git a/tests/sentry/test_similarity.py b/tests/sentry/test_similarity.py
index 0b23cb06d6..af39844793 100644
--- a/tests/sentry/test_similarity.py
+++ b/tests/sentry/test_similarity.py
@@ -5,8 +5,8 @@ import math
 import pytest
 
 from sentry.similarity import (
-    MinHashIndex, get_euclidian_distance, get_manhattan_distance,
-    get_number_format, scale_to_total
+    MinHashIndex, get_exception_frames, get_euclidian_distance,
+    get_manhattan_distance, get_number_format, scale_to_total
 )
 from sentry.testutils import TestCase
 from sentry.utils import redis
@@ -152,6 +152,30 @@ def test_get_number_format():
         assert get_number_format(0xFFFFFFFFFFFFFFFF + 1)
 
 
+def test_get_exception_frames():
+    assert get_exception_frames({}) == []
+
+    assert get_exception_frames({
+        'stacktrace': None,
+    }) == []
+
+    assert get_exception_frames({
+        'stacktrace': {},
+    }) == []
+
+    assert get_exception_frames({
+        'stacktrace': {
+            'frames': None,
+        },
+    }) == []
+
+    assert get_exception_frames({
+        'stacktrace': {
+            'frames': 13,
+        },
+    }) == []
+
+
 class MinHashIndexTestCase(TestCase):
     def test_index(self):
         index = MinHashIndex(
