commit d364e7a2ff962831145a20f21b69d65bc2cb29a1
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Tue Jan 15 17:08:26 2019 -0800

    ref(api): Move group index validators, constand into helper file

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 022968ede6..eeced64d46 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -8,23 +8,25 @@ from uuid import uuid4
 import six
 from django.db import IntegrityError, transaction
 from django.utils import timezone
-from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry import analytics, eventstream, features, search
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
-from sentry.api.fields import ActorField, Actor
-from sentry.api.helpers.group_index import build_query_params_from_request, get_by_short_id, ValidationError
+from sentry.api.fields import Actor
+from sentry.api.helpers.group_index import (
+    build_query_params_from_request, get_by_short_id, GroupValidator,
+    STATUS_CHOICES, ValidationError
+)
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.actor import ActorSerializer
 from sentry.api.serializers.models.group import (
     SUBSCRIPTION_REASON_MAP, StreamGroupSerializer)
 from sentry.db.models.query import create_or_update
 from sentry.models import (
-    Activity, Commit, Environment, Group, GroupAssignee, GroupBookmark, GroupLink, GroupHash, GroupResolution,
+    Activity, Environment, Group, GroupAssignee, GroupBookmark, GroupLink, GroupHash, GroupResolution,
     GroupSeen, GroupShare, GroupSnooze, GroupStatus, GroupSubscription, GroupSubscriptionReason,
-    GroupTombstone, Release, Repository, TOMBSTONE_FIELDS_FROM_GROUP, UserOption, User, Team
+    GroupTombstone, Release, TOMBSTONE_FIELDS_FROM_GROUP, UserOption, User
 )
 from sentry.models.event import Event
 from sentry.receivers import DEFAULT_SAVED_SEARCHES
@@ -77,159 +79,6 @@ def list_project_issues_scenario(runner):
     )
 
 
-STATUS_CHOICES = {
-    'resolved': GroupStatus.RESOLVED,
-    'unresolved': GroupStatus.UNRESOLVED,
-    'ignored': GroupStatus.IGNORED,
-    'resolvedInNextRelease': GroupStatus.UNRESOLVED,
-
-    # TODO(dcramer): remove in 9.0
-    'muted': GroupStatus.IGNORED,
-}
-
-
-class InCommitValidator(serializers.Serializer):
-    commit = serializers.CharField(required=True)
-    repository = serializers.CharField(required=True)
-
-    def validate_repository(self, attrs, source):
-        value = attrs[source]
-        project = self.context['project']
-        try:
-            attrs[source] = Repository.objects.get(
-                organization_id=project.organization_id,
-                name=value,
-            )
-        except Repository.DoesNotExist:
-            raise serializers.ValidationError(
-                'Unable to find the given repository.'
-            )
-        return attrs
-
-    def validate(self, attrs):
-        attrs = super(InCommitValidator, self).validate(attrs)
-        repository = attrs.get('repository')
-        commit = attrs.get('commit')
-        if not repository:
-            raise serializers.ValidationError({
-                'repository': ['Unable to find the given repository.'],
-            })
-        if not commit:
-            raise serializers.ValidationError({
-                'commit': ['Unable to find the given commit.'],
-            })
-        try:
-            commit = Commit.objects.get(
-                repository_id=repository.id,
-                key=commit,
-            )
-        except Commit.DoesNotExist:
-            raise serializers.ValidationError({
-                'commit': ['Unable to find the given commit.'],
-            })
-        return commit
-
-
-class StatusDetailsValidator(serializers.Serializer):
-    inNextRelease = serializers.BooleanField()
-    inRelease = serializers.CharField()
-    inCommit = InCommitValidator(required=False)
-    ignoreDuration = serializers.IntegerField()
-    ignoreCount = serializers.IntegerField()
-    # in minutes, max of one week
-    ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)
-    ignoreUserCount = serializers.IntegerField()
-    # in minutes, max of one week
-    ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)
-
-    def validate_inRelease(self, attrs, source):
-        value = attrs[source]
-        project = self.context['project']
-        if value == 'latest':
-            try:
-                attrs[source] = Release.objects.filter(
-                    projects=project,
-                    organization_id=project.organization_id,
-                ).extra(select={
-                    'sort': 'COALESCE(date_released, date_added)',
-                }).order_by('-sort')[0]
-            except IndexError:
-                raise serializers.ValidationError(
-                    'No release data present in the system to form a basis for \'Next Release\''
-                )
-        else:
-            try:
-                attrs[source] = Release.objects.get(
-                    projects=project,
-                    organization_id=project.organization_id,
-                    version=value,
-                )
-            except Release.DoesNotExist:
-                raise serializers.ValidationError(
-                    'Unable to find a release with the given version.'
-                )
-        return attrs
-
-    def validate_inNextRelease(self, attrs, source):
-        project = self.context['project']
-        try:
-            attrs[source] = Release.objects.filter(
-                projects=project,
-                organization_id=project.organization_id,
-            ).extra(select={
-                'sort': 'COALESCE(date_released, date_added)',
-            }).order_by('-sort')[0]
-        except IndexError:
-            raise serializers.ValidationError(
-                'No release data present in the system to form a basis for \'Next Release\''
-            )
-        return attrs
-
-
-class GroupValidator(serializers.Serializer):
-    status = serializers.ChoiceField(choices=zip(
-        STATUS_CHOICES.keys(), STATUS_CHOICES.keys()))
-    statusDetails = StatusDetailsValidator()
-    hasSeen = serializers.BooleanField()
-    isBookmarked = serializers.BooleanField()
-    isPublic = serializers.BooleanField()
-    isSubscribed = serializers.BooleanField()
-    merge = serializers.BooleanField()
-    discard = serializers.BooleanField()
-    ignoreDuration = serializers.IntegerField()
-    ignoreCount = serializers.IntegerField()
-    # in minutes, max of one week
-    ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)
-    ignoreUserCount = serializers.IntegerField()
-    # in minutes, max of one week
-    ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)
-    assignedTo = ActorField()
-
-    # TODO(dcramer): remove in 9.0
-    snoozeDuration = serializers.IntegerField()
-
-    def validate_assignedTo(self, attrs, source):
-        value = attrs[source]
-        if value and value.type is User and not self.context['project'].member_set.filter(
-                user_id=value.id).exists():
-            raise serializers.ValidationError(
-                'Cannot assign to non-team member')
-
-        if value and value.type is Team and not self.context['project'].teams.filter(
-                id=value.id).exists():
-            raise serializers.ValidationError(
-                'Cannot assign to a team without access to the project')
-
-        return attrs
-
-    def validate(self, attrs):
-        attrs = super(GroupValidator, self).validate(attrs)
-        if len(attrs) > 1 and 'discard' in attrs:
-            raise serializers.ValidationError(
-                'Other attributes cannot be updated when discarding')
-        return attrs
-
-
 class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
     doc_section = DocSection.EVENTS
 
diff --git a/src/sentry/api/helpers/group_index.py b/src/sentry/api/helpers/group_index.py
index 3fdbeda7c5..55fdb3f7c7 100644
--- a/src/sentry/api/helpers/group_index.py
+++ b/src/sentry/api/helpers/group_index.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+from rest_framework import serializers
+
+from sentry.api.fields import ActorField
 from sentry.constants import DEFAULT_SORT_OPTION
-from sentry.models import Group
+from sentry.models import Commit, Group, GroupStatus, Release, Repository, Team, User
 from sentry.models.group import looks_like_short_id
 from sentry.search.utils import InvalidQuery, parse_query
 from sentry.utils.cursors import Cursor
@@ -51,3 +54,156 @@ def get_by_short_id(organization_id, is_short_id_lookup, query):
             )
         except Group.DoesNotExist:
             pass
+
+
+STATUS_CHOICES = {
+    'resolved': GroupStatus.RESOLVED,
+    'unresolved': GroupStatus.UNRESOLVED,
+    'ignored': GroupStatus.IGNORED,
+    'resolvedInNextRelease': GroupStatus.UNRESOLVED,
+
+    # TODO(dcramer): remove in 9.0
+    'muted': GroupStatus.IGNORED,
+}
+
+
+class InCommitValidator(serializers.Serializer):
+    commit = serializers.CharField(required=True)
+    repository = serializers.CharField(required=True)
+
+    def validate_repository(self, attrs, source):
+        value = attrs[source]
+        project = self.context['project']
+        try:
+            attrs[source] = Repository.objects.get(
+                organization_id=project.organization_id,
+                name=value,
+            )
+        except Repository.DoesNotExist:
+            raise serializers.ValidationError(
+                'Unable to find the given repository.'
+            )
+        return attrs
+
+    def validate(self, attrs):
+        attrs = super(InCommitValidator, self).validate(attrs)
+        repository = attrs.get('repository')
+        commit = attrs.get('commit')
+        if not repository:
+            raise serializers.ValidationError({
+                'repository': ['Unable to find the given repository.'],
+            })
+        if not commit:
+            raise serializers.ValidationError({
+                'commit': ['Unable to find the given commit.'],
+            })
+        try:
+            commit = Commit.objects.get(
+                repository_id=repository.id,
+                key=commit,
+            )
+        except Commit.DoesNotExist:
+            raise serializers.ValidationError({
+                'commit': ['Unable to find the given commit.'],
+            })
+        return commit
+
+
+class StatusDetailsValidator(serializers.Serializer):
+    inNextRelease = serializers.BooleanField()
+    inRelease = serializers.CharField()
+    inCommit = InCommitValidator(required=False)
+    ignoreDuration = serializers.IntegerField()
+    ignoreCount = serializers.IntegerField()
+    # in minutes, max of one week
+    ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)
+    ignoreUserCount = serializers.IntegerField()
+    # in minutes, max of one week
+    ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)
+
+    def validate_inRelease(self, attrs, source):
+        value = attrs[source]
+        project = self.context['project']
+        if value == 'latest':
+            try:
+                attrs[source] = Release.objects.filter(
+                    projects=project,
+                    organization_id=project.organization_id,
+                ).extra(select={
+                    'sort': 'COALESCE(date_released, date_added)',
+                }).order_by('-sort')[0]
+            except IndexError:
+                raise serializers.ValidationError(
+                    'No release data present in the system to form a basis for \'Next Release\''
+                )
+        else:
+            try:
+                attrs[source] = Release.objects.get(
+                    projects=project,
+                    organization_id=project.organization_id,
+                    version=value,
+                )
+            except Release.DoesNotExist:
+                raise serializers.ValidationError(
+                    'Unable to find a release with the given version.'
+                )
+        return attrs
+
+    def validate_inNextRelease(self, attrs, source):
+        project = self.context['project']
+        try:
+            attrs[source] = Release.objects.filter(
+                projects=project,
+                organization_id=project.organization_id,
+            ).extra(select={
+                'sort': 'COALESCE(date_released, date_added)',
+            }).order_by('-sort')[0]
+        except IndexError:
+            raise serializers.ValidationError(
+                'No release data present in the system to form a basis for \'Next Release\''
+            )
+        return attrs
+
+
+class GroupValidator(serializers.Serializer):
+    status = serializers.ChoiceField(choices=zip(
+        STATUS_CHOICES.keys(), STATUS_CHOICES.keys()))
+    statusDetails = StatusDetailsValidator()
+    hasSeen = serializers.BooleanField()
+    isBookmarked = serializers.BooleanField()
+    isPublic = serializers.BooleanField()
+    isSubscribed = serializers.BooleanField()
+    merge = serializers.BooleanField()
+    discard = serializers.BooleanField()
+    ignoreDuration = serializers.IntegerField()
+    ignoreCount = serializers.IntegerField()
+    # in minutes, max of one week
+    ignoreWindow = serializers.IntegerField(max_value=7 * 24 * 60)
+    ignoreUserCount = serializers.IntegerField()
+    # in minutes, max of one week
+    ignoreUserWindow = serializers.IntegerField(max_value=7 * 24 * 60)
+    assignedTo = ActorField()
+
+    # TODO(dcramer): remove in 9.0
+    snoozeDuration = serializers.IntegerField()
+
+    def validate_assignedTo(self, attrs, source):
+        value = attrs[source]
+        if value and value.type is User and not self.context['project'].member_set.filter(
+                user_id=value.id).exists():
+            raise serializers.ValidationError(
+                'Cannot assign to non-team member')
+
+        if value and value.type is Team and not self.context['project'].teams.filter(
+                id=value.id).exists():
+            raise serializers.ValidationError(
+                'Cannot assign to a team without access to the project')
+
+        return attrs
+
+    def validate(self, attrs):
+        attrs = super(GroupValidator, self).validate(attrs)
+        if len(attrs) > 1 and 'discard' in attrs:
+            raise serializers.ValidationError(
+                'Other attributes cannot be updated when discarding')
+        return attrs
