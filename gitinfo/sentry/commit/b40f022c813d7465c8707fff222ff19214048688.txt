commit b40f022c813d7465c8707fff222ff19214048688
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Aug 31 12:59:30 2015 -0700

    Sort input values to <DefinitionList>

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index 5b12a7f397..7ccf3308bb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -11,14 +11,14 @@ var RichHttpContent = React.createClass({
 
   /**
    * Converts an object of body/querystring key/value pairs
-   * into a tuple of [key, value] pairs.
+   * into a tuple of [key, value] pairs, and sorts them.
    *
    * Note that the query-string parser returns dupes like this:
    *   { foo: ['bar', 'baz'] } // ?foo=bar&bar=baz
    *
    * This method accounts for this.
    */
-  objectToTupleArray(obj) {
+  objectToSortedTupleArray(obj) {
     return Object.keys(obj).reduce((out, k) => {
       let val = obj[k];
       return out.concat(
@@ -26,7 +26,9 @@ var RichHttpContent = React.createClass({
           val.map(v => [k, v]) : // key has multiple values (array)
           [[k, val]]             // key has single value
       );
-    }, []);
+    }, []).sort(function ([keyA], [keyB]) {
+      return keyA < keyB ? -1 : 1;
+    });
   },
 
   getBodySection(data) {
@@ -50,7 +52,7 @@ var RichHttpContent = React.createClass({
     try {
       // Sentry API abbreviates long query stirng values, sometimes resulting in
       // an un-parsable querystring ... stay safe kids
-      return <DefinitionList data={this.objectToTupleArray(queryString.parse(data))}/>
+      return <DefinitionList data={this.objectToSortedTupleArray(queryString.parse(data))}/>
     } catch (e) {
       return <pre>{data}</pre>
     }
@@ -68,12 +70,18 @@ var RichHttpContent = React.createClass({
 
   render(){
     let data = this.props.data;
-
+    data.headers['Content-Type'] = 'application/x-www-form-urlencoded';
+    data.query='a=b&c=d&awe=foo';
+    data.data = {
+      'a': 'foo',
+      'b': 'derp',
+      'awesome': 'whee'
+    };
     return (
       <div>
         {data.query &&
           <ClippedBox title="Query String">
-            <DefinitionList data={this.objectToTupleArray(queryString.parse(data.query))}/>
+            <DefinitionList data={this.objectToSortedTupleArray(queryString.parse(data.query))}/>
           </ClippedBox>
         }
         {data.fragment &&
@@ -100,7 +108,7 @@ var RichHttpContent = React.createClass({
         }
         {!objectIsEmpty(data.env) &&
           <ClippedBox title="Environment" defaultCollapsed>
-            <DefinitionList data={this.objectToTupleArray(data.env)}/>
+            <DefinitionList data={this.objectToSortedTupleArray(data.env)}/>
           </ClippedBox>
         }
       </div>
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index fe7a598f1e..5529d78e52 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -25,23 +25,27 @@ describe("RichHttpContent", function () {
     this.sandbox.restore();
   });
 
-  describe("objectToTupleArray", function () {
-    it("should convert a key/value object to an array of key/value tuples", function () {
+  describe("objectToSortedTupleArray", function () {
+    it("should convert a key/value object to a sorted array of key/value tuples", function () {
       let elem = this.elem;
-      expect(elem.objectToTupleArray({
+      expect(elem.objectToSortedTupleArray({
+        awe: 'some',
         foo: 'bar',
         bar: 'baz'
       })).to.eql([
-        ['foo', 'bar'], ['bar', 'baz']
+        // note sorted alphabetically by key
+        ['awe', 'some'],
+        ['bar', 'baz'],
+        ['foo', 'bar']
       ]);
 
-      expect(elem.objectToTupleArray({
+      expect(elem.objectToSortedTupleArray({
         foo: ['bar', 'baz']
       })).to.eql([
         ['foo', 'bar'], ['foo', 'baz']
       ]);
 
-      expect(elem.objectToTupleArray({
+      expect(elem.objectToSortedTupleArray({
         foo: ''
       })).to.eql([
         ['foo', '']
@@ -71,8 +75,8 @@ describe("RichHttpContent", function () {
       // NOTE: ContextData is stubbed in tests; instead returns <div className="ContextData"/>
       expect(out.props.className).to.eql('DefinitionList');
       expect(out.props.data).to.eql([
-        ['foo', 'bar'],
-        ['bar', 'baz']
+        ['bar', 'baz'],
+        ['foo', 'bar']
       ]);
     });
 
