commit 93bee117c12ad68cff190b8c74e7f9fc9aa04282
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jun 27 15:40:26 2018 -0700

     feat(discover): Add ability to select custom tags (#8851)
    
    Query top tags from Snuba instead of using the predefined promoted tag list so that we'll get the custom tags as well
    
    Closes APP-353

diff --git a/src/sentry/api/endpoints/organization_discover.py b/src/sentry/api/endpoints/organization_discover.py
index 6956b7e367..7631bfe19f 100644
--- a/src/sentry/api/endpoints/organization_discover.py
+++ b/src/sentry/api/endpoints/organization_discover.py
@@ -46,6 +46,7 @@ class DiscoverSerializer(serializers.Serializer):
         child=ListField(),
         required=False,
         allow_null=True,
+        default=[]
     )
 
     def __init__(self, *args, **kwargs):
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
similarity index 62%
rename from src/sentry/static/sentry/app/views/organizationDiscover/aggregations.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
index 81b44da80f..6a00f122f2 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/index.jsx
@@ -8,91 +8,14 @@ import SelectControl from 'app/components/forms/selectControl';
 import InlineSvg from 'app/components/inlineSvg';
 import {t} from 'app/locale';
 
-import {COLUMNS} from './data';
-
-const COUNT_OPTION = {value: 'count', label: 'count'};
-
-const TOPK_COUNTS = [5, 10, 20, 50, 100];
-
-const TOP_LEVEL_OPTIONS = [
-  {value: 'uniq', label: 'uniq(...)'},
-  {value: 'topK', label: 'topK(...)'},
-];
-
-const UNIQ_OPTIONS = COLUMNS.map(({name}) => ({
-  value: `uniq_${name}`,
-  label: `uniq(${name})`,
-}));
-
-const TOPK_COUNT_OPTIONS = TOPK_COUNTS.map(num => ({
-  value: `topK_${num}`,
-  label: `topK(${num})(...)`,
-}));
-
-const TOPK_VALUE_OPTIONS = TOPK_COUNTS.reduce((acc, num) => {
-  return [
-    ...acc,
-    ...COLUMNS.map(({name}) => ({
-      value: `topK_${num}_${name}`,
-      label: `topK(${num})(${name})`,
-    })),
-  ];
-}, []);
-
-/*
-* Converts from external representation (array) to internal format (string)
-* for dropdown.
-*/
-export function getInternal(external) {
-  const [func, col] = external;
-
-  if (func === null) {
-    return '';
-  }
-
-  if (func === 'count()') {
-    return 'count';
-  }
-
-  if (func === 'uniq') {
-    return `uniq_${col}`;
-  }
-
-  if (func.startsWith('topK')) {
-    const count = func.match(/topK\((\d+)\)/)[1];
-    return `topK_${count}_${col}`;
-  }
-
-  return func;
-}
-
-/*
-* Converts from external representation (string value from dropdown) to external format (array)
-*/
-export function getExternal(internal) {
-  const uniqRegex = /^uniq_(.+)$/;
-  const topKRegex = /^topK_(\d+)_(.+)$/;
-
-  if (internal === 'count') {
-    return ['count()', null, 'count'];
-  }
-
-  if (internal.match(uniqRegex)) {
-    return ['uniq', internal.match(uniqRegex)[1], internal];
-  }
-
-  const topKMatch = internal.match(topKRegex);
-  if (topKMatch) {
-    return [`topK(${parseInt(topKMatch[1], 10)})`, topKMatch[2], internal];
-  }
-
-  return internal;
-}
+import {getInternal, getExternal, getAggregateOptions} from './utils';
+import {TOPK_COUNTS} from '../data';
 
 class Aggregation extends React.Component {
   static propTypes = {
     value: PropTypes.array,
     onChange: PropTypes.func,
+    columns: PropTypes.array,
   };
 
   constructor(props) {
@@ -100,6 +23,7 @@ class Aggregation extends React.Component {
     this.state = {
       value: getInternal(props.value),
       displayedOptions: null,
+      options: getAggregateOptions(props.columns),
     };
   }
 
@@ -110,24 +34,23 @@ class Aggregation extends React.Component {
   }
 
   getOptions() {
-    return [COUNT_OPTION, ...UNIQ_OPTIONS, ...TOPK_VALUE_OPTIONS];
+    const {options} = this.state;
+    return [options.topLevel[0], ...options.uniq, ...options.topKValues];
   }
 
-  getOptionList(options, input) {}
-
   filterOptions = (options, input, value) => {
-    let optionList = [COUNT_OPTION, ...TOP_LEVEL_OPTIONS];
+    let optionList = this.state.options.topLevel;
 
     if (input.startsWith('uniq') || this.state.displayedOptions === 'uniq') {
-      optionList = UNIQ_OPTIONS;
+      optionList = this.state.options.uniq;
     }
 
-    if (input.match(/^topK_\d+/) || this.state.displayedOptions === 'topKValues') {
-      optionList = TOPK_VALUE_OPTIONS;
+    if (input.match(/^topK_\d+/) || this.state.displayedOptions === 'topKValue') {
+      optionList = this.state.options.topKValues;
     }
 
     if (input.startsWith('topK') || this.state.displayedOptions === 'topK') {
-      optionList = TOPK_COUNT_OPTIONS;
+      optionList = this.state.options.topKCounts;
     }
 
     return optionList.filter(({label}) => label.includes(input));
@@ -138,15 +61,14 @@ class Aggregation extends React.Component {
   }
 
   handleChange = option => {
-    const topLevelValues = new Set(['uniq', 'topK']);
     const topKValues = new Set([...TOPK_COUNTS.map(num => `topK_${num}`)]);
 
-    if (topLevelValues.has(option.value)) {
+    if (option.value === 'uniq' || option.value === 'topK') {
       this.setState({displayedOptions: option.value}, this.focus);
     } else if (topKValues.has(option.value)) {
       this.setState(
         {
-          displayedOptions: 'topKValues',
+          displayedOptions: 'topKValue',
         },
         this.focus
       );
@@ -187,6 +109,7 @@ export default class Aggregations extends React.Component {
   static propTypes = {
     value: PropTypes.array.isRequired,
     onChange: PropTypes.func.isRequired,
+    columns: PropTypes.array,
   };
 
   addRow() {
@@ -208,7 +131,7 @@ export default class Aggregations extends React.Component {
   }
 
   render() {
-    const {value} = this.props;
+    const {value, columns} = this.props;
 
     return (
       <div>
@@ -224,6 +147,7 @@ export default class Aggregations extends React.Component {
             <Aggregation
               value={aggregation}
               onChange={val => this.handleChange(val, idx)}
+              columns={columns}
             />
             <Box ml={1}>
               <a onClick={() => this.removeRow(idx)}>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
new file mode 100644
index 0000000000..42118cdd20
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
@@ -0,0 +1,90 @@
+import {TOPK_COUNTS} from '../data';
+
+/*
+* Returns options for aggregation field dropdown
+*/
+
+export function getAggregateOptions(columns) {
+  const topLevel = [
+    {value: 'count', label: 'count'},
+    {value: 'uniq', label: 'uniq(...)'},
+    {value: 'topK', label: 'topK(...)'},
+  ];
+
+  const uniq = columns.map(({name}) => ({
+    value: `uniq_${name}`,
+    label: `uniq(${name})`,
+  }));
+
+  const topKCounts = TOPK_COUNTS.map(num => ({
+    value: `topK_${num}`,
+    label: `topK(${num})(...)`,
+  }));
+
+  const topKValues = TOPK_COUNTS.reduce((acc, num) => {
+    return [
+      ...acc,
+      ...columns.map(({name}) => ({
+        value: `topK_${num}_${name}`,
+        label: `topK(${num})(${name})`,
+      })),
+    ];
+  }, []);
+
+  return {
+    topLevel,
+    uniq,
+    topKCounts,
+    topKValues,
+  };
+}
+
+/*
+* Converts from external representation (array) to internal format (string)
+* for dropdown.
+*/
+export function getInternal(external) {
+  const [func, col] = external;
+
+  if (func === null) {
+    return '';
+  }
+
+  if (func === 'count()') {
+    return 'count';
+  }
+
+  if (func === 'uniq') {
+    return `uniq_${col}`;
+  }
+
+  if (func.startsWith('topK')) {
+    const count = func.match(/topK\((\d+)\)/)[1];
+    return `topK_${count}_${col}`;
+  }
+
+  return func;
+}
+
+/*
+* Converts from external representation (string value from dropdown) to external format (array)
+*/
+export function getExternal(internal) {
+  const uniqRegex = /^uniq_(.+)$/;
+  const topKRegex = /^topK_(\d+)_(.+)$/;
+
+  if (internal === 'count') {
+    return ['count()', null, 'count'];
+  }
+
+  if (internal.match(uniqRegex)) {
+    return ['uniq', internal.match(uniqRegex)[1], internal];
+  }
+
+  const topKMatch = internal.match(topKRegex);
+  if (topKMatch) {
+    return [`topK(${parseInt(topKMatch[1], 10)})`, topKMatch[2], internal];
+  }
+
+  return internal;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
index e756874c59..03ebc6e2ee 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions.jsx
@@ -9,12 +9,13 @@ import SelectField from 'app/components/forms/selectField';
 
 import {t} from 'app/locale';
 
-import {COLUMNS, CONDITION_OPERATORS} from './data';
+import {CONDITION_OPERATORS} from './data';
 
 export default class Conditions extends React.Component {
   static propTypes = {
     value: PropTypes.arrayOf(PropTypes.array).isRequired,
     onChange: PropTypes.func.isRequired,
+    columns: PropTypes.array,
   };
 
   constructor(props) {
@@ -61,7 +62,9 @@ export default class Conditions extends React.Component {
       conditions[conditionIdx][2] = conditions[conditionIdx][2]
         .split(',')
         .map(condition => {
-          const col = COLUMNS.find(({name}) => name === conditions[conditionIdx][0]);
+          const col = this.props.columns.find(
+            ({name}) => name === conditions[conditionIdx][0]
+          );
           return col.type === 'number' ? parseInt(condition, 10) : condition;
         });
     }
@@ -73,7 +76,7 @@ export default class Conditions extends React.Component {
     const stringOperators = new Set(['=', '!=', 'IN', 'IS NULL', 'IS NOT NULL', 'LIKE']);
 
     return CONDITION_OPERATORS.filter(op => {
-      const col = COLUMNS.find(({name}) => name === condition[0]);
+      const col = this.props.columns.find(({name}) => name === condition[0]);
       if (col && col.type === 'string') {
         return stringOperators.has(op);
       } else {
@@ -122,13 +125,15 @@ export default class Conditions extends React.Component {
   }
 
   renderCondition(condition, idx) {
+    const {columns} = this.props;
+
     if (this.state.editIndex === idx) {
       return (
         <React.Fragment>
           <Box w={1 / 3} pr={1}>
             <SelectField
               name="condition-1"
-              options={COLUMNS.map(({name}) => ({
+              options={columns.map(({name}) => ({
                 value: name,
                 label: name,
               }))}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 649801e254..30cd8eb392 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -1,21 +1,24 @@
+// const PROMOTED_TAGS = [
+//   {name: 'level', type: 'string'},
+//   {name: 'logger', type: 'string'},
+//   {name: 'server_name', type: 'string'},
+//   {name: 'transaction', type: 'string'},
+//   {name: 'environment', type: 'string'},
+//   {name: 'site', type: 'string'},
+//   {name: 'url', type: 'string'},
+//   {name: 'app_device', type: 'string'},
+//   {name: 'device', type: 'string'},
+//   {name: 'device_family', type: 'string'},
+//   {name: 'runtime', type: 'string'},
+//   {name: 'runtime_name', type: 'string'},
+//   {name: 'browser', type: 'string'},
+//   {name: 'browser_name', type: 'string'},
+//   {name: 'os', type: 'string'},
+//   {name: 'os_name', type: 'string'},
+//   {name: 'os_rooted', type: 'number'},
+// ];
+
 const COLUMNS = [
-  {name: 'level', type: 'string'},
-  {name: 'logger', type: 'string'},
-  {name: 'server_name', type: 'string'},
-  {name: 'transaction', type: 'string'},
-  {name: 'environment', type: 'string'},
-  {name: 'site', type: 'string'},
-  {name: 'url', type: 'string'},
-  {name: 'app_device', type: 'string'},
-  {name: 'device', type: 'string'},
-  {name: 'device_family', type: 'string'},
-  {name: 'runtime', type: 'string'},
-  {name: 'runtime_name', type: 'string'},
-  {name: 'browser', type: 'string'},
-  {name: 'browser_name', type: 'string'},
-  {name: 'os', type: 'string'},
-  {name: 'os_name', type: 'string'},
-  {name: 'os_rooted', type: 'number'},
   {name: 'os_build', type: 'string'},
   {name: 'os_kernel_version', type: 'string'},
   {name: 'device_name', type: 'string'},
@@ -78,4 +81,6 @@ const CONDITION_OPERATORS = [
   'LIKE',
 ];
 
-export {COLUMNS, CONDITION_OPERATORS};
+const TOPK_COUNTS = [5, 10, 20, 50, 100];
+
+export {COLUMNS, CONDITION_OPERATORS, TOPK_COUNTS};
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
new file mode 100644
index 0000000000..d4879bc402
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -0,0 +1,148 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+import {Flex, Box} from 'grid-emotion';
+
+import SentryTypes from 'app/proptypes';
+import SelectField from 'app/components/forms/selectField';
+import MultiSelectField from 'app/components/forms/multiSelectField';
+import NumberField from 'app/components/forms/numberField';
+import Button from 'app/components/buttons/button';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+
+import Result from './result';
+import Time from './time';
+import Project from './project';
+import Conditions from './conditions';
+import Aggregations from './aggregations';
+
+export default class OrganizationDiscover extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    queryBuilder: PropTypes.object,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      result: null,
+    };
+  }
+
+  updateField = (field, value) => {
+    this.props.queryBuilder.updateField(field, value);
+    this.forceUpdate();
+  };
+
+  runQuery = () => {
+    this.props.queryBuilder.fetch().then(
+      result => this.setState({result}),
+      () => {
+        addErrorMessage(t('An error occurred'));
+        this.setState({result: null});
+      }
+    );
+  };
+
+  render() {
+    const {result} = this.state;
+    const {queryBuilder} = this.props;
+
+    const query = queryBuilder.getInternal();
+    const columns = queryBuilder.getColumns();
+
+    const fieldOptions = columns.map(({name}) => ({
+      value: name,
+      label: name,
+    }));
+
+    const orderbyOptions = columns.reduce((acc, {name}) => {
+      return [
+        ...acc,
+        {value: name, label: `${name} asc`},
+        {value: `-${name}`, label: `${name} desc`},
+      ];
+    }, []);
+
+    return (
+      <div className="organization-home">
+        <Header
+          p={2}
+          justify="space-between"
+          align="center"
+          className="sub-header"
+          style={{marginBottom: 16}}
+        >
+          <strong>{t('Discover')}</strong>
+          <Flex>
+            <Project
+              value={query.projects}
+              projects={this.props.organization.projects}
+              onChange={val => this.updateField('projects', val)}
+              runQuery={this.runQuery}
+            />
+            <Separator />
+            <Time
+              start={query.start}
+              end={query.end}
+              updateField={(name, val) => this.updateField(name, val)}
+              runQuery={this.runQuery}
+            />
+          </Flex>
+        </Header>
+        <Flex px={2}>
+          <Box w={[1 / 3, 1 / 3, 1 / 3, 1 / 4]}>
+            <MultiSelectField
+              name="fields"
+              label={t('Summarize')}
+              options={fieldOptions}
+              value={query.fields}
+              onChange={val => this.updateField('fields', val)}
+            />
+            <Aggregations
+              value={query.aggregations}
+              columns={columns}
+              onChange={val => this.updateField('aggregations', val)}
+            />
+            <SelectField
+              name="orderby"
+              label={t('Order By')}
+              options={orderbyOptions}
+              value={query.orderby}
+              onChange={val => this.updateField('orderby', val)}
+            />
+            <NumberField
+              name="limit"
+              label={t('Limit')}
+              value={query.limit}
+              onChange={val =>
+                this.updateField('limit', typeof val === 'number' ? val : null)}
+            />
+            <Conditions
+              value={query.conditions}
+              columns={columns}
+              onChange={val => this.updateField('conditions', val)}
+            />
+            <Button onClick={this.runQuery} style={{marginTop: 8}} priority="primary">
+              {t('Run Query')}
+            </Button>
+          </Box>
+          <Box w={[2 / 3, 2 / 3, 2 / 3, 3 / 4]} pl={2}>
+            {result && <Result result={result} />}
+          </Box>
+        </Flex>
+      </div>
+    );
+  }
+}
+
+const Header = styled(Flex)`
+  font-size: 18px;
+`;
+
+const Separator = styled(Box)`
+  width: 1px;
+  background-color: ${p => p.theme.offWhite};
+  margin: 4px 16px;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index ddcd6d8119..ccc4a55190 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -1,64 +1,29 @@
 import React from 'react';
-import styled from 'react-emotion';
-import {Flex, Box} from 'grid-emotion';
-
+import {Flex} from 'grid-emotion';
 import createReactClass from 'create-react-class';
-import ApiMixin from 'app/mixins/apiMixin';
 import OrganizationState from 'app/mixins/organizationState';
+import LoadingIndicator from 'app/components/loadingIndicator';
 
-import SelectField from 'app/components/forms/selectField';
-import MultiSelectField from 'app/components/forms/multiSelectField';
-import NumberField from 'app/components/forms/numberField';
-import Button from 'app/components/buttons/button';
-
-import {addErrorMessage} from 'app/actionCreators/indicator';
-
-import {t} from 'app/locale';
-
+import Discover from './discover';
 import createQueryBuilder from './queryBuilder';
-import Result from './result';
-import Time from './time';
-import Project from './project';
-import Conditions from './conditions';
-import Aggregations from './aggregations';
-
-const OrganizationDiscover = createReactClass({
-  displayName: 'OrganizationDiscover',
 
-  mixins: [ApiMixin, OrganizationState],
+const OrganizationDiscoverContainer = createReactClass({
+  displayName: 'OrganizationDiscoverContainer',
+  mixins: [OrganizationState],
 
   getInitialState: function() {
     return {
-      queryBuilder: createQueryBuilder({}, this.context.organization.projects),
+      isLoading: true,
     };
   },
 
-  runQuery: function() {
-    const {slug} = this.context.organization;
-    const endpoint = `/organizations/${slug}/discover/`;
-    const data = this.state.queryBuilder.getExternal();
-
-    this.api.request(endpoint, {
-      method: 'POST',
-      data,
-      success: result => {
-        this.setState({
-          result,
-        });
-      },
-      error: err => {
-        const message = t('An error occurred');
-        addErrorMessage(message);
-        this.setState({result: null});
-      },
+  componentDidMount: function() {
+    this.queryBuilder = createQueryBuilder({}, this.context.organization);
+    this.queryBuilder.load().then(() => {
+      this.setState({isLoading: false});
     });
   },
 
-  updateField: function(field, value) {
-    this.state.queryBuilder.updateField(field, value);
-    this.forceUpdate();
-  },
-
   renderComingSoon: function() {
     return (
       <Flex className="organization-home" justify="center" align="center">
@@ -67,96 +32,33 @@ const OrganizationDiscover = createReactClass({
     );
   },
 
-  render: function() {
-    const {queryBuilder} = this.state;
+  renderLoading: function() {
+    return (
+      <div>
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  render() {
+    const {isLoading} = this.state;
     const hasFeature = this.getFeatures().has('internal-catchall');
 
     if (!hasFeature) return this.renderComingSoon();
 
-    const fieldOptions = queryBuilder.getFieldOptions();
-
-    const orderbyOptions = queryBuilder.getOrderByOptions();
-
-    const query = queryBuilder.getInternal();
-
     return (
       <div className="organization-home">
-        <Header
-          p={2}
-          justify="space-between"
-          align="center"
-          className="sub-header"
-          style={{marginBottom: 16}}
-        >
-          <strong>{t('Discover')}</strong>
-          <Flex>
-            <Project
-              value={query.projects}
-              projects={this.context.organization.projects}
-              onChange={val => this.updateField('projects', val)}
-              runQuery={this.runQuery}
-            />
-            <Separator />
-            <Time
-              start={query.start}
-              end={query.end}
-              updateField={(name, val) => this.updateField(name, val)}
-              runQuery={this.runQuery}
-            />
-          </Flex>
-        </Header>
-        <Flex px={2}>
-          <Box w={[1 / 3, 1 / 3, 1 / 3, 1 / 4]}>
-            <MultiSelectField
-              name="fields"
-              label={t('Summarize')}
-              options={fieldOptions}
-              value={query.fields}
-              onChange={val => this.updateField('fields', val)}
-            />
-            <Aggregations
-              value={query.aggregations}
-              onChange={val => this.updateField('aggregations', val)}
-            />
-            <SelectField
-              name="orderby"
-              label={t('Order By')}
-              options={orderbyOptions}
-              value={query.orderby}
-              onChange={val => this.updateField('orderby', val)}
-            />
-            <NumberField
-              name="limit"
-              label={t('Limit')}
-              value={query.limit}
-              onChange={val =>
-                this.updateField('limit', typeof val === 'number' ? val : null)}
-            />
-            <Conditions
-              value={query.conditions}
-              onChange={val => this.updateField('conditions', val)}
-            />
-            <Button onClick={this.runQuery} style={{marginTop: 8}} priority="primary">
-              {t('Run Query')}
-            </Button>
-          </Box>
-          <Box w={[2 / 3, 2 / 3, 2 / 3, 3 / 4]} pl={2}>
-            {this.state.result && <Result result={this.state.result} />}
-          </Box>
-        </Flex>
+        {isLoading ? (
+          this.renderLoading()
+        ) : (
+          <Discover
+            organization={this.getOrganization()}
+            queryBuilder={this.queryBuilder}
+          />
+        )}
       </div>
     );
   },
 });
 
-const Header = styled(Flex)`
-  font-size: 18px;
-`;
-
-const Separator = styled(Box)`
-  width: 1px;
-  background-color: ${p => p.theme.offWhite};
-  margin: 4px 16px;
-`;
-
-export default OrganizationDiscover;
+export default OrganizationDiscoverContainer;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 47c052c54d..b9c1ba5852 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -1,5 +1,8 @@
+/*eslint no-use-before-define: ["error", { "functions": false }]*/
+
 import moment from 'moment-timezone';
 
+import {Client} from 'app/api';
 import {COLUMNS} from './data';
 
 const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm:ss';
@@ -30,8 +33,32 @@ function applyDefaults(query) {
  * This function is responsible for storing and managing updates to query state,
  * It applies sensible defaults if query parameters are not provided on initialization.
  */
-export default function createQueryBuilder(initial = {}, projectList) {
+export default function createQueryBuilder(initial = {}, organization) {
   const query = applyDefaults(initial);
+  const defaultProjects = organization.projects.map(project => parseInt(project.id, 10));
+  let tags = [];
+
+  return {
+    getInternal,
+    getExternal,
+    updateField,
+    fetch,
+    getColumns,
+    load,
+  };
+
+  function load() {
+    return fetch({
+      projects: defaultProjects,
+      aggregations: [['topK(1000)', 'tags_key', 'tags_key']],
+      start: moment()
+        .subtract(90, 'days')
+        .format(DATE_TIME_FORMAT),
+      end: moment().format(DATE_TIME_FORMAT),
+    }).then(res => {
+      tags = res.data[0].tags_key;
+    });
+  }
 
   function getInternal() {
     return query;
@@ -39,9 +66,7 @@ export default function createQueryBuilder(initial = {}, projectList) {
 
   function getExternal() {
     // Default to all projects if none is selected
-    const projects = query.projects.length
-      ? query.projects
-      : projectList.map(project => parseInt(project.id, 10));
+    const projects = query.projects.length ? query.projects : defaultProjects;
 
     // Default to all fields if there are none selected, and no aggregation or groupby is specified
     const useDefaultFields =
@@ -71,28 +96,18 @@ export default function createQueryBuilder(initial = {}, projectList) {
     }
   }
 
-  function getFieldOptions() {
-    return COLUMNS.map(({name}) => ({
-      value: name,
-      label: name,
-    }));
-  }
+  function fetch(data) {
+    const api = new Client();
+    const endpoint = `/organizations/${organization.slug}/discover/`;
 
-  function getOrderByOptions() {
-    return COLUMNS.reduce((acc, {name}) => {
-      return [
-        ...acc,
-        {value: name, label: `${name} asc`},
-        {value: `-${name}`, label: `${name} desc`},
-      ];
-    }, []);
+    return api.requestPromise(endpoint, {
+      method: 'POST',
+      data: data || getExternal(),
+    });
   }
 
-  return {
-    getInternal,
-    getExternal,
-    updateField,
-    getFieldOptions,
-    getOrderByOptions,
-  };
+  // Get all columns, including tags
+  function getColumns() {
+    return [...COLUMNS, ...tags.map(tag => ({name: tag, type: 'string'}))];
+  }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
similarity index 99%
rename from src/sentry/static/sentry/app/views/organizationDiscover/result.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index 6eaa656809..d0bca2f2cd 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -6,7 +6,6 @@ import {Box} from 'grid-emotion';
 import AutoSelectText from 'app/components/autoSelectText';
 
 import {getDisplayValue} from './utils';
-
 /**
  * Renders results in a table as well as a query summary (timing, rows returned)
  * from any Snuba result
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
rename to src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
diff --git a/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
index f8600fd1ac..cc986435dd 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations.spec.jsx
@@ -1,4 +1,7 @@
-import {getInternal, getExternal} from 'app/views/organizationDiscover/aggregations';
+import {
+  getInternal,
+  getExternal,
+} from 'app/views/organizationDiscover/aggregations/utils';
 
 const aggregationList = [
   {
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 25a966115a..1ca7cc84d4 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -2,7 +2,10 @@ import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 
 describe('Query Builder', function() {
   it('generates default query with all projects', function() {
-    const queryBuilder = createQueryBuilder({}, [TestStubs.Project()]);
+    const queryBuilder = createQueryBuilder(
+      {},
+      TestStubs.Organization({projects: [TestStubs.Project()]})
+    );
     const external = queryBuilder.getExternal();
 
     expect(external.projects).toEqual([2]);
