commit 70c7857a2e1451fe0df6c539e70083d4cf760da2
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Mon May 23 14:40:39 2016 -0700

    Allow overriding the clock used by `TimedRetryPolicy`. (#3302)
    
    This is intended to allow isolating the mocked clock used by
    `TimedRetryPolicyTestCase` to avoid failures when these tests are ran in
    environments that are also accessing clock methods like `time.time`.

diff --git a/src/sentry/utils/retries.py b/src/sentry/utils/retries.py
index b15856417a..6d85bcb929 100644
--- a/src/sentry/utils/retries.py
+++ b/src/sentry/utils/retries.py
@@ -35,15 +35,16 @@ class TimedRetryPolicy(RetryPolicy):
         self.timeout = timeout
         self.delay = delay
         self.exceptions = exceptions
+        self.clock = time
 
     def __call__(self, function):
-        start = time.time()
+        start = self.clock.time()
         for i in itertools.count(1):
             try:
                 return function()
             except self.exceptions as error:
                 delay = self.delay(i)
-                now = time.time()
+                now = self.clock.time()
                 if (now + delay) > (start + self.timeout):
                     raise RetryException(
                         'Could not successfully execute %r within %.3f seconds (%s attempts.)' % (function, now - start, i),
@@ -57,4 +58,4 @@ class TimedRetryPolicy(RetryPolicy):
                         i,
                         delay,
                     )
-                    time.sleep(delay)
+                    self.clock.sleep(delay)
diff --git a/tests/sentry/utils/test_retries.py b/tests/sentry/utils/test_retries.py
index 9a3631b47d..e9f795eab2 100644
--- a/tests/sentry/utils/test_retries.py
+++ b/tests/sentry/utils/test_retries.py
@@ -1,7 +1,7 @@
 import mock
 
-from sentry.utils.retries import TimedRetryPolicy, RetryException
 from sentry.testutils import TestCase
+from sentry.utils.retries import TimedRetryPolicy, RetryException
 
 
 class TimedRetryPolicyTestCase(TestCase):
@@ -10,21 +10,27 @@ class TimedRetryPolicyTestCase(TestCase):
         callable = mock.MagicMock(side_effect=[bomb, mock.sentinel.OK])
 
         retry = TimedRetryPolicy(30, delay=lambda i: 10)
-        with mock.patch('time.sleep'), mock.patch('time.time', side_effect=[0, 15]):
-            assert retry(callable) is mock.sentinel.OK
-            assert callable.call_count == 2
+        retry.clock = mock.Mock()
+        retry.clock.sleep = mock.MagicMock()
+        retry.clock.time = mock.MagicMock(side_effect=[0, 15])
+
+        assert retry(callable) is mock.sentinel.OK
+        assert callable.call_count == 2
 
     def test_policy_failure(self):
         bomb = Exception('Boom!')
         callable = mock.MagicMock(side_effect=bomb)
 
         retry = TimedRetryPolicy(30, delay=lambda i: 10)
-        with mock.patch('time.sleep'), mock.patch('time.time', side_effect=[0, 15, 25]):
-            try:
-                retry(callable)
-            except RetryException as exception:
-                assert exception.exception is bomb
-            else:
-                self.fail('Expected {!r}!'.format(RetryException))
-
-            assert callable.call_count == 2
+        retry.clock = mock.Mock()
+        retry.clock.sleep = mock.MagicMock()
+        retry.clock.time = mock.MagicMock(side_effect=[0, 15, 25])
+
+        try:
+            retry(callable)
+        except RetryException as exception:
+            assert exception.exception is bomb
+        else:
+            self.fail('Expected {!r}!'.format(RetryException))
+
+        assert callable.call_count == 2
