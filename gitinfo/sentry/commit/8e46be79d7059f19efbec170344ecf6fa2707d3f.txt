commit 8e46be79d7059f19efbec170344ecf6fa2707d3f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Jun 21 16:23:29 2016 -0700

    Validate event_id before submitting user report (#3558)
    
    Fixes SENTRY-1FA

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index e784c41a9c..5e2971e069 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -12,7 +12,6 @@ from __future__ import absolute_import, print_function
 
 import base64
 import logging
-import re
 import six
 import uuid
 import zlib
@@ -37,10 +36,9 @@ from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.compat import StringIO
 from sentry.utils.strings import decompress
-from sentry.utils.validators import is_float
+from sentry.utils.validators import is_float, is_event_id
 
 LOG_LEVEL_REVERSE_MAP = dict((v, k) for k, v in LOG_LEVELS.iteritems())
-EVENT_ID_RE = re.compile(r'^[a-fA-F0-9]{32}$')
 
 
 class APIError(Exception):
@@ -370,7 +368,7 @@ class ClientApiHelper(object):
                 'value': data['event_id'],
             })
             data['event_id'] = uuid.uuid4().hex
-        elif not EVENT_ID_RE.match(data['event_id']):
+        elif not is_event_id(data['event_id']):
             self.log.info(
                 'Discarded invalid value for event_id: %r',
                 data['event_id'], exc_info=True)
diff --git a/src/sentry/utils/validators.py b/src/sentry/utils/validators.py
index 6565b28b87..b01e33c10f 100644
--- a/src/sentry/utils/validators.py
+++ b/src/sentry/utils/validators.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import re
 from ipaddr import IPAddress
 
+EVENT_ID_RE = re.compile(r'^[a-fA-F0-9]{32}$')
+
 
 def validate_ip(value, required=True):
     if not required and not value:
@@ -18,3 +21,10 @@ def is_float(var):
     except (TypeError, ValueError):
         return False
     return True
+
+
+def is_event_id(value):
+    try:
+        return bool(EVENT_ID_RE.match(value))
+    except TypeError:
+        return False
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 341d1f41c0..dbd1958c87 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -13,6 +13,7 @@ from sentry.models import EventMapping, Group, ProjectKey, UserReport
 from sentry.web.helpers import render_to_response
 from sentry.utils import json
 from sentry.utils.http import is_valid_origin
+from sentry.utils.validators import is_event_id
 
 
 class UserReportForm(forms.ModelForm):
@@ -68,6 +69,9 @@ class ErrorPageEmbedView(View):
         except KeyError:
             return self._json_response(request, status=400)
 
+        if not is_event_id(event_id):
+            return self._json_response(request, status=400)
+
         key = self._get_project_key(request)
         if not key:
             return self._json_response(request, status=404)
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index 1729fce93b..dc0878b2b3 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -63,3 +63,18 @@ class ErrorPageEmbedTest(TestCase):
         assert report.event_id == self.event_id
         assert report.project == self.project
         assert report.group is None
+
+    def test_submission_invalid_event_id(self):
+        self.event_id = 'x' * 100
+        self.path = '%s?eventId=%s&dsn=%s' % (
+            reverse('sentry-error-page-embed'),
+            quote(self.event_id),
+            quote(self.key.dsn_public),
+        )
+
+        resp = self.client.post(self.path, {
+            'name': 'Jane Doe',
+            'email': 'jane@example.com',
+            'comments': 'This is an example!',
+        }, HTTP_REFERER='http://example.com')
+        assert resp.status_code == 400
