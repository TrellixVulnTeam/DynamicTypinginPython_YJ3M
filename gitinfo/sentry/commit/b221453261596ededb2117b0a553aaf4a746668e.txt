commit b221453261596ededb2117b0a553aaf4a746668e
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Thu Feb 20 15:47:16 2020 -0800

    feat(integrations platform): Instrument Integration Platform Integrations (#17147)
    
    * feat(integrations platform): Instrument Integration Platform Integrations

diff --git a/src/sentry/mediators/external_requests/util.py b/src/sentry/mediators/external_requests/util.py
index ea8fa1ea33..ee527e8c1f 100644
--- a/src/sentry/mediators/external_requests/util.py
+++ b/src/sentry/mediators/external_requests/util.py
@@ -5,7 +5,7 @@ from requests.exceptions import RequestException
 
 from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
 from sentry.http import safe_urlopen
-
+from sentry.models.sentryapp import track_response_code
 
 SELECT_OPTIONS_SCHEMA = {
     "type": "array",
@@ -52,14 +52,18 @@ def send_and_save_sentry_app_request(url, sentry_app, org_id, event, **kwargs):
 
     buffer = SentryAppWebhookRequestsBuffer(sentry_app)
 
+    slug = sentry_app.slug_for_metrics
+
     try:
         resp = safe_urlopen(url=url, **kwargs)
     except RequestException:
+        track_response_code("timeout", slug, event)
         # Response code of 0 represents timeout
         buffer.add_request(response_code=0, org_id=org_id, event=event, url=url)
         # Re-raise the exception because some of these tasks might retry on the exception
         raise
 
+    track_response_code(resp.status_code, slug, event)
     buffer.add_request(
         response_code=resp.status_code,
         org_id=org_id,
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index 4f148623a2..5b928315c5 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -9,6 +9,7 @@ from django.db import models
 from django.utils import timezone
 from django.template.defaultfilters import slugify
 from hashlib import sha256
+from sentry.utils import metrics
 from sentry.constants import SentryAppStatus, SENTRY_APP_SLUG_MAX_LENGTH
 from sentry.models.apiscopes import HasApiScopes
 from sentry.db.models import (
@@ -65,6 +66,14 @@ def generate_slug(name, is_internal=False):
     return slug
 
 
+def track_response_code(status, integration_slug, webhook_event):
+    metrics.incr(
+        "integration-platform.http_response",
+        sample_rate=1.0,
+        tags={"status": status, "integration": integration_slug, "webhook_event": webhook_event},
+    )
+
+
 class SentryApp(ParanoidModel, HasApiScopes):
     __core__ = True
 
@@ -135,6 +144,14 @@ class SentryApp(ParanoidModel, HasApiScopes):
     def is_internal(self):
         return self.status == SentryAppStatus.INTERNAL
 
+    @property
+    def slug_for_metrics(self):
+        if self.is_internal:
+            return "internal"
+        if self.is_unpublished:
+            return "unpublished"
+        return self.slug
+
     def save(self, *args, **kwargs):
         self.date_updated = timezone.now()
         return super(SentryApp, self).save(*args, **kwargs)
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 2731ee73d0..5ede14f1ec 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -23,7 +23,7 @@ from sentry.models import (
     ServiceHookProject,
     SentryApp,
 )
-from sentry.models.sentryapp import VALID_EVENTS
+from sentry.models.sentryapp import VALID_EVENTS, track_response_code
 
 logger = logging.getLogger("sentry.tasks.sentry_apps")
 
@@ -296,16 +296,20 @@ def send_and_save_webhook_request(url, sentry_app, app_platform_event):
 
     org_id = app_platform_event.install.organization_id
     event = "{}.{}".format(app_platform_event.resource, app_platform_event.action)
+    slug = sentry_app.slug_for_metrics
 
     try:
         resp = safe_urlopen(
             url=url, data=app_platform_event.body, headers=app_platform_event.headers, timeout=5
         )
+
     except RequestException:
+        track_response_code("timeout", slug, event)
         # Response code of 0 represents timeout
         buffer.add_request(response_code=0, org_id=org_id, event=event, url=url)
         # Re-raise the exception because some of these tasks might retry on the exception
         raise
+    track_response_code(resp.status_code, slug, event)
 
     buffer.add_request(
         response_code=resp.status_code,
