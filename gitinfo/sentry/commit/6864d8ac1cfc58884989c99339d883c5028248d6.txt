commit 6864d8ac1cfc58884989c99339d883c5028248d6
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 19 14:12:36 2015 -0700

    Improve handling of various install situations
    
    - Dont initialize git components if repo missing
    - Update node_modules path for watchers
    - Correct version generation to use working path
    - Correct path to README

diff --git a/setup.py b/setup.py
index d27af9576a..02732e29ff 100755
--- a/setup.py
+++ b/setup.py
@@ -31,8 +31,8 @@ import sys
 
 from distutils import log
 from distutils.core import Command
-from setuptools.command.install import install
 from setuptools.command.develop import develop
+from setuptools.command.install import install
 from setuptools.command.sdist import sdist
 from setuptools import setup, find_packages
 from subprocess import check_output
@@ -158,7 +158,7 @@ class BuildStatic(Command):
         """
         Attempt to get the most correct current version of Sentry.
         """
-        pkg_path = os.path.join(ROOT, 'src')
+        pkg_path = os.path.join(self.work_path, 'src')
 
         sys.path.insert(0, pkg_path)
         try:
@@ -237,9 +237,10 @@ class BuildStatic(Command):
     def _build_static(self):
         work_path = self.work_path
 
-        log.info("initializing git submodules")
-        check_output(['git', 'submodule', 'init'], cwd=work_path)
-        check_output(['git', 'submodule', 'update'], cwd=work_path)
+        if os.path.exists(os.path.join(work_path, '.git')):
+            log.info("initializing git submodules")
+            check_output(['git', 'submodule', 'init'], cwd=work_path)
+            check_output(['git', 'submodule', 'update'], cwd=work_path)
 
         log.info("running [npm install --quiet]")
         check_output(['npm', 'install', '--quiet'], cwd=work_path)
@@ -284,7 +285,7 @@ setup(
     author_email='dcramer@gmail.com',
     url='https://www.getsentry.com',
     description='A realtime logging and aggregation server.',
-    long_description=open('README.rst').read(),
+    long_description=open(os.path.join(ROOT, 'README.rst')).read(),
     package_dir={'': 'src'},
     packages=find_packages('src'),
     zip_safe=False,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7653f625b2..1f8811d123 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -41,7 +41,12 @@ APPEND_SLASH = True
 
 PROJECT_ROOT = os.path.normpath(os.path.join(os.path.dirname(__file__), os.pardir))
 
-NODE_MODULES_ROOT = os.path.join(PROJECT_ROOT, os.pardir, os.pardir, 'node_modules')
+# XXX(dcramer): handle case when we've installed from source vs just running
+# this straight out of the repository
+if 'site-packages' in __file__:
+    NODE_MODULES_ROOT = os.path.join(PROJECT_ROOT, 'node_modules')
+else:
+    NODE_MODULES_ROOT = os.path.join(PROJECT_ROOT, os.pardir, os.pardir, 'node_modules')
 
 sys.path.insert(0, os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir)))
 
@@ -908,6 +913,8 @@ SENTRY_USE_BIG_INTS = False
 SENTRY_API_RESPONSE_DELAY = 0
 
 # Watchers for various application purposes (such as compiling static media)
+# XXX(dcramer): this doesn't work outside of a source distribution as the
+# webpack.config.js is not part of Sentry's datafiles
 SENTRY_WATCHERS = (
     [os.path.join(NODE_MODULES_ROOT, '.bin', 'webpack'), '-d', '--watch',
      "--config={}".format(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js"))],
