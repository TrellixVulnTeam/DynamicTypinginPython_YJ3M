commit 5901032d1501974a1f82440e1a4c1fb050609870
Author: Dena Mwangi <dena@getsentry.com>
Date:   Wed Aug 16 12:23:21 2017 -0500

    Turn off automatic redirect if first event sent (#5809)
    
    * don't redirect automatically from config page after first event sent

diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index 8b6082fe8f..eec467dc2b 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -7,27 +7,54 @@ import ProjectContext from '../../projects/projectContext';
 import ProjectDocsContext from '../../projectInstall/docsContext';
 import ProjectInstallPlatform from '../../projectInstall/platform';
 
+import Raven from 'raven-js';
+
 const Configure = React.createClass({
   mixins: [ApiMixin],
 
+  getInitialState() {
+    return {
+      isFirstTimePolling: true,
+      hasSentRealEvent: false
+    };
+  },
+
   componentWillMount() {
     let {platform} = this.props.params;
     //redirect if platform is not known.
     if (!platform || platform === 'other') {
       this.redirectToNeutralDocs();
     }
-  },
 
-  componentDidMount() {
+    this.fetchEventData();
     this.timer = setInterval(() => {
       this.fetchEventData();
     }, 2000);
   },
 
+  componentWillUpdate(nextProps, nextState) {
+    if (
+      !this.state.isFirstTimePolling &&
+      nextState.hasSentRealEvent == true &&
+      this.state.hasSentRealEvent == false
+    ) {
+      this.redirectUrl();
+    }
+  },
+
   componentWillUnmount() {
     clearInterval(this.timer);
   },
 
+  sentRealEvent(data) {
+    if (data.length == 1) {
+      let firstError = data[0];
+      return !firstError.message.includes('This is an example');
+    } else {
+      return data.length > 1;
+    }
+  },
+
   redirectUrl() {
     let {orgId, projectId} = this.props.params;
 
@@ -41,13 +68,16 @@ const Configure = React.createClass({
     this.api.request(`/projects/${orgId}/${projectId}/events/`, {
       method: 'GET',
       success: data => {
-        // this indicates that a real event has been sent to the project (the first one is the sample event)
-        if (data.length > 1) {
-          this.redirectUrl();
-        }
+        this.setState({
+          isFirstTimePolling: false,
+          hasSentRealEvent: this.sentRealEvent(data)
+        });
       },
-      error: () => {
-        this.setState({hasError: true});
+
+      error: err => {
+        Raven.captureMessage('Polling for events in onboarding configure failed', {
+          extra: err
+        });
       }
     });
   },
@@ -82,7 +112,7 @@ const Configure = React.createClass({
               />
             </ProjectDocsContext>
           </ProjectContext>
-          <Waiting skip={this.submit} />
+          <Waiting skip={this.submit} hasEvent={this.state.hasSentRealEvent} />
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
index 655056e58a..86f4d0a1cd 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/waiting.jsx
@@ -3,7 +3,8 @@ import {t} from '../../../locale';
 
 const Waiting = React.createClass({
   propTypes: {
-    skip: React.PropTypes.func
+    skip: React.PropTypes.func,
+    hasEvent: React.PropTypes.bool.isRequired
   },
 
   render() {
@@ -15,7 +16,9 @@ const Waiting = React.createClass({
           </div>
         </div>
         <div className="wrap waiting-text">
-          <h3 className="animated-ellipsis">{t('Waiting to receive an error')}</h3>
+          {!this.props.hasEvent
+            ? <h3 className="animated-ellipsis">{t('Waiting to receive an error')}</h3>
+            : <h3>{t("You've successfully sent an error")}</h3>}
           <div className="robot">
             <span className="eye" />
           </div>
diff --git a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
index e3a68e3d86..59d79dc2fd 100644
--- a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
@@ -42,6 +42,7 @@ exports[`Configure should render correctly render() should redirect to if no mat
       </ProjectDocsContext>
     </ProjectContext>
     <Waiting
+      hasEvent={false}
       skip={[Function]}
     />
   </div>
@@ -101,6 +102,7 @@ exports[`Configure should render correctly render() should render platform docs
         </DocumentTitle>
       </ProjectContext>
       <Waiting
+        hasEvent={false}
         skip={[Function]}
       >
         <div
@@ -181,6 +183,7 @@ exports[`Configure should render correctly render() shouldn't redirect for a fou
       </ProjectDocsContext>
     </ProjectContext>
     <Waiting
+      hasEvent={false}
       skip={[Function]}
     />
   </div>
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index fe4efd97ac..6447f601cf 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -106,7 +106,7 @@ describe('Configure should render correctly', function() {
         childContextTypes: {organization: PropTypes.Organization}
       });
       expect(wrapper).toMatchSnapshot();
-      expect(this.stubbedApiRequest.callCount).toEqual(4);
+      expect(this.stubbedApiRequest.callCount).toEqual(5);
     });
   });
 });
