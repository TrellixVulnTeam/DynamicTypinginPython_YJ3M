commit 8a9c62af661da21c039abf47428f5e4b81a6f25e
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Aug 7 20:05:59 2016 -0700

    Correct/expand label tests

diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index 69fa6b73bd..ece0590e82 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -93,7 +93,7 @@ class EventAttributeCondition(EventCondition):
     # TODO(dcramer): add support for stacktrace.vars.[name]
 
     form_cls = EventAttributeForm
-    label = u'An events {attribute} value {match} {value}'
+    label = u'An event\'s {attribute} value {match} {value}'
 
     def _get_attribute_values(self, event, attr):
         # TODO(dcramer): we should validate attributes (when we can) before
diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
index ec50ca0383..508a281e70 100644
--- a/src/sentry/rules/conditions/level.py
+++ b/src/sentry/rules/conditions/level.py
@@ -16,7 +16,7 @@ from sentry.constants import LOG_LEVELS, LOG_LEVELS_MAP
 from sentry.rules.conditions.base import EventCondition
 
 LEVEL_CHOICES = OrderedDict([
-    ("{0}".format(k), "{0}".format(v.capitalize()))
+    ("{0}".format(k), v)
     for k, v in sorted(LOG_LEVELS.items(), key=lambda x: x[0], reverse=True)
 ])
 
@@ -28,7 +28,7 @@ class MatchType(object):
 
 
 MATCH_CHOICES = OrderedDict([
-    (MatchType.EQUAL, 'equal'),
+    (MatchType.EQUAL, 'equal to'),
     (MatchType.LESS_OR_EQUAL, 'less than or equal to'),
     (MatchType.GREATER_OR_EQUAL, 'greater than or equal to')
 ])
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index ab16cf4a8c..acde42cddf 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -44,7 +44,7 @@ class TaggedEventForm(forms.Form):
 
 class TaggedEventCondition(EventCondition):
     form_cls = TaggedEventForm
-    label = u'An events tags match {key} {match} {value}'
+    label = u'An event\'s tags match {key} {match} {value}'
 
     def passes(self, event, state, **kwargs):
         key = self.get_option('key')
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index 215c838d22..ed3bd06fae 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -59,7 +59,7 @@ class EventAttributeConditionTest(RuleTestCase):
             'attribute': u'\xc3',
             'value': u'\xc4',
         })
-        assert rule.render_label() == u'An events \xc3 value equals \xc4'
+        assert rule.render_label() == u'An event\'s \xc3 value equals \xc4'
 
     def test_equals(self):
         event = self.get_event()
diff --git a/tests/sentry/rules/conditions/test_level_event.py b/tests/sentry/rules/conditions/test_level_event.py
index be5c4f1b76..3ba5e111ff 100644
--- a/tests/sentry/rules/conditions/test_level_event.py
+++ b/tests/sentry/rules/conditions/test_level_event.py
@@ -3,22 +3,29 @@ from __future__ import absolute_import
 import logging
 
 from sentry.testutils.cases import RuleTestCase
-from sentry.rules.conditions.level import LevelCondition, LevelMatchType
+from sentry.rules.conditions.level import LevelCondition, MatchType
 
 
 class LevelConditionTest(RuleTestCase):
     rule_cls = LevelCondition
 
+    def test_render_label(self):
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'level': '30',
+        })
+        assert rule.render_label() == u'An event\'s level is equal to warning'
+
     def test_equals(self):
         event = self.create_event(event_id='a' * 32, tags={'level': 'info'})
         rule = self.get_rule({
-            'match': LevelMatchType.EQUAL,
+            'match': MatchType.EQUAL,
             'level': '20',
         })
         self.assertPasses(rule, event)
 
         rule = self.get_rule({
-            'match': LevelMatchType.EQUAL,
+            'match': MatchType.EQUAL,
             'level': '30',
         })
         self.assertDoesNotPass(rule, event)
@@ -26,13 +33,13 @@ class LevelConditionTest(RuleTestCase):
     def test_greater_than(self):
         event = self.create_event(event_id='a' * 32, tags={'level': 'info'})
         rule = self.get_rule({
-            'match': LevelMatchType.GREATER_OR_EQUAL,
+            'match': MatchType.GREATER_OR_EQUAL,
             'level': '40',
         })
         self.assertDoesNotPass(rule, event)
 
         rule = self.get_rule({
-            'match': LevelMatchType.GREATER_OR_EQUAL,
+            'match': MatchType.GREATER_OR_EQUAL,
             'level': '20',
         })
         self.assertPasses(rule, event)
@@ -40,13 +47,13 @@ class LevelConditionTest(RuleTestCase):
     def test_less_than(self):
         event = self.create_event(event_id='a' * 32, tags={'level': 'info'})
         rule = self.get_rule({
-            'match': LevelMatchType.LESS_OR_EQUAL,
+            'match': MatchType.LESS_OR_EQUAL,
             'level': '10',
         })
         self.assertDoesNotPass(rule, event)
 
         rule = self.get_rule({
-            'match': LevelMatchType.LESS_OR_EQUAL,
+            'match': MatchType.LESS_OR_EQUAL,
             'level': '30',
         })
         self.assertPasses(rule, event)
@@ -54,7 +61,7 @@ class LevelConditionTest(RuleTestCase):
     def test_without_tag(self):
         event = self.create_event(event_id='a' * 32, tags={})
         rule = self.get_rule({
-            'match': LevelMatchType.EQUAL,
+            'match': MatchType.EQUAL,
             'level': '30',
         })
         self.assertDoesNotPass(rule, event)
@@ -62,7 +69,7 @@ class LevelConditionTest(RuleTestCase):
     def test_errors_with_invalid_level(self):
         event = self.create_event(event_id='a' * 32, tags={'level': 'foobar'})
         rule = self.get_rule({
-            'match': LevelMatchType.EQUAL,
+            'match': MatchType.EQUAL,
             'level': '30',
         })
         self.assertDoesNotPass(rule, event)
@@ -88,7 +95,7 @@ class LevelConditionTest(RuleTestCase):
         assert eevent.level == logging.WARNING
 
         rule = self.get_rule({
-            'match': LevelMatchType.GREATER_OR_EQUAL,
+            'match': MatchType.GREATER_OR_EQUAL,
             'level': '40',
         })
         self.assertDoesNotPass(rule, wevent)
diff --git a/tests/sentry/rules/conditions/test_tagged_event.py b/tests/sentry/rules/conditions/test_tagged_event.py
index 595cd3a3d6..114ba4310d 100644
--- a/tests/sentry/rules/conditions/test_tagged_event.py
+++ b/tests/sentry/rules/conditions/test_tagged_event.py
@@ -23,7 +23,7 @@ class TaggedEventConditionTest(RuleTestCase):
             'key': u'\xc3',
             'value': u'\xc4',
         })
-        assert rule.render_label() == u'An events tags match \xc3 eq \xc4'
+        assert rule.render_label() == u'An event\'s tags match \xc3 equals \xc4'
 
     def test_equals(self):
         event = self.get_event()
