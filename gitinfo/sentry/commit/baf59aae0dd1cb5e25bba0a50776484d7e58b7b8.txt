commit baf59aae0dd1cb5e25bba0a50776484d7e58b7b8
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Nov 26 11:32:53 2018 -0800

    fix(integrations): Create issue activity after issues are linked/created with an integration (#10722)
    
    * Added Activity to integration link/create
    
    * Added the activity creation to the tests.

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index a246ee49d7..e756824848 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -10,7 +10,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.integration import IntegrationIssueConfigSerializer
 from sentry.integrations import IntegrationFeatures
 from sentry.integrations.exceptions import IntegrationError, IntegrationFormError
-from sentry.models import ExternalIssue, GroupLink, Integration
+from sentry.models import Activity, ExternalIssue, GroupLink, Integration
 from sentry.signals import integration_issue_created, integration_issue_linked
 
 MISSING_FEATURE_MESSAGE = 'Your organization does not have access to this feature.'
@@ -28,6 +28,21 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         return has_issue_sync or has_issue_basic
 
+    def create_issue_activity(self, request, group, installation, external_issue):
+        issue_information = {
+            'title': external_issue.title,
+            'provider': installation.model.get_provider().name,
+            'location': installation.get_issue_url(external_issue.key),
+            'label': installation.get_issue_display_name(external_issue) or external_issue.key,
+        }
+        Activity.objects.create(
+            project=group.project,
+            group=group,
+            type=Activity.CREATE_ISSUE,
+            user=request.user,
+            data=issue_information,
+        )
+
     def get(self, request, group, integration_id):
         if not self._has_issue_feature(group.organization, request.user):
             return Response(
@@ -142,6 +157,8 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         except IntegrityError:
             return Response({'non_field_errors': ['That issue is already linked']}, status=400)
 
+        self.create_issue_activity(request, group, installation, external_issue)
+
         # TODO(jess): would be helpful to return serialized external issue
         # once we have description, title, etc
         url = data.get('url') or installation.get_issue_url(external_issue.key)
@@ -214,6 +231,8 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
             )
         installation.store_issue_last_defaults(group.project_id, request.DATA)
 
+        self.create_issue_activity(request, group, installation, external_issue)
+
         # TODO(jess): return serialized issue
         url = data.get('url') or installation.get_issue_url(external_issue.key)
         context = {
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 4c5c028073..deff69fbf6 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -5,7 +5,7 @@ import mock
 
 from sentry.integrations.example.integration import ExampleIntegration
 from sentry.integrations.exceptions import IntegrationError
-from sentry.models import ExternalIssue, GroupLink, Integration
+from sentry.models import Activity, ExternalIssue, GroupLink, Integration
 from sentry.testutils import APITestCase
 from sentry.utils.http import absolute_uri
 
@@ -186,6 +186,18 @@ class GroupIntegrationDetailsTest(APITestCase):
                 linked_id=external_issue.id,
             ).exists()
 
+            activity = Activity.objects.filter(type=Activity.CREATE_ISSUE)[0]
+            assert activity.project_id == group.project_id
+            assert activity.group_id == group.id
+            assert activity.ident is None
+            assert activity.user_id == self.user.id
+            assert activity.data == {
+                'title': 'This is a test external issue title',
+                'provider': 'Example',
+                'location': 'https://example/issues/APP-123',
+                'label': 'display name: APP-123',
+            }
+
     def test_put_feature_disabled(self):
         self.login_as(user=self.user)
         org = self.organization
@@ -238,6 +250,18 @@ class GroupIntegrationDetailsTest(APITestCase):
                 linked_id=external_issue.id,
             ).exists()
 
+            activity = Activity.objects.filter(type=Activity.CREATE_ISSUE)[0]
+            assert activity.project_id == group.project_id
+            assert activity.group_id == group.id
+            assert activity.ident is None
+            assert activity.user_id == self.user.id
+            assert activity.data == {
+                'title': 'This is a test external issue title',
+                'provider': 'Example',
+                'location': 'https://example/issues/APP-123',
+                'label': 'display name: APP-123',
+            }
+
     def test_post_feature_disabled(self):
         self.login_as(user=self.user)
         org = self.organization
