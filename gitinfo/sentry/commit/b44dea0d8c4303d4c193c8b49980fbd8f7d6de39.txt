commit b44dea0d8c4303d4c193c8b49980fbd8f7d6de39
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 24 10:36:02 2015 -0800

    Add feature block tag

diff --git a/src/sentry/templatetags/sentry_features.py b/src/sentry/templatetags/sentry_features.py
new file mode 100644
index 0000000000..20753080ac
--- /dev/null
+++ b/src/sentry/templatetags/sentry_features.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django import template
+
+from sentry import features
+
+register = template.Library()
+
+
+@register.tag
+def feature(parser, token):
+    bits = token.split_contents()
+    if len(bits) < 2:
+        raise template.TemplateSyntaxError("%r tag requires an argument" % token.contents.split()[0])
+
+    name = bits[1]
+    params = bits[2:]
+
+    nodelist_true = parser.parse(('else', 'endfeature'))
+    token = parser.next_token()
+
+    if token.contents == 'else':
+        nodelist_false = parser.parse(('endfeature',))
+        parser.delete_first_token()
+    else:
+        nodelist_false = template.NodeList()
+
+    return FeatureNode(nodelist_true, nodelist_false, name, params)
+
+
+class FeatureNode(template.Node):
+    def __init__(self, nodelist_true, nodelist_false, name, params):
+        self.nodelist_true = nodelist_true
+        self.nodelist_false = nodelist_false
+        self.name = name
+        self.params = [template.Variable(i) for i in params]
+
+    def render(self, context):
+        params = [i.resolve(context) for i in self.params]
+        if 'request' in context:
+            user = context['request'].user
+        else:
+            user = None
+
+        if not features.has(self.name, actor=user, *params):
+            return self.nodelist_false.render(context)
+
+        return self.nodelist_true.render(context)
diff --git a/tests/sentry/templatetags/test_sentry_features.py b/tests/sentry/templatetags/test_sentry_features.py
new file mode 100644
index 0000000000..7aae626ee8
--- /dev/null
+++ b/tests/sentry/templatetags/test_sentry_features.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from django.template import Context, Template
+from mock import Mock
+
+from sentry.testutils import TestCase
+
+
+class FeaturesTest(TestCase):
+    TEMPLATE = Template("""
+        {% load sentry_features %}
+        {% feature auth:register %}
+            <span>register</span>
+        {% else %}
+            <span>nope</span>
+        {% endfeature %}
+    """)
+
+    def test_enabled(self):
+        with self.feature('auth:register'):
+            result = self.TEMPLATE.render(Context({
+                'request': Mock(),
+            }))
+
+        assert '<span>register</span>' in result
+
+    def test_disabled(self):
+        with self.feature('auth:register', False):
+            result = self.TEMPLATE.render(Context({
+                'request': Mock(),
+            }))
+
+        assert '<span>nope</span>' in result
