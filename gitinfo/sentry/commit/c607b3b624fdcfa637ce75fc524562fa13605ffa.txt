commit c607b3b624fdcfa637ce75fc524562fa13605ffa
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 18 15:37:25 2014 +0200

    Add various organization management pages

diff --git a/src/sentry/migrations/0132_add_org_members.py b/src/sentry/migrations/0132_add_org_members.py
index 916b771b0e..0f5dff441c 100644
--- a/src/sentry/migrations/0132_add_org_members.py
+++ b/src/sentry/migrations/0132_add_org_members.py
@@ -12,11 +12,11 @@ class Migration(DataMigration):
         TeamMember = orm['sentry.TeamMember']
 
         for org in Organization.objects.all():
-            for tm in TeamMember.objects.filter(team__organization=org):
+            for team in org.team_set.all():
                 OrganizationMember.objects.get_or_create(
                     organization=org,
-                    user=tm.user,
-                    defaults={'type': tm.type},
+                    user=team.owner,
+                    defaults={'type': 100},  # ADMIN
                 )
 
     def backwards(self, orm):
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 1c09002de2..64d8149714 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -90,3 +90,6 @@ class User(Model, AbstractBaseUser):
             obj.update(user=to_user)
         for obj in UserOption.objects.filter(user=from_user):
             obj.update(user=to_user)
+
+    def get_display_name(self):
+        return self.first_name or self.username
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 8a8a787f27..f24b4feb54 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -7,12 +7,12 @@ from django.db.models.signals import post_syncdb, post_save, pre_delete
 from pkg_resources import parse_version as Version
 
 from sentry import options
-from sentry.constants import MEMBER_OWNER
 from sentry.db.models import update
 from sentry.db.models.utils import slugify_instance
 from sentry.models import (
-    Organization, Project, User, Team, ProjectKey, UserOption, TagKey, TagValue,
-    GroupTagValue, GroupTagKey, Activity, TeamMember, Alert
+    Organization, OrganizationMemberType, Project, User, Team, ProjectKey,
+    UserOption, TagKey, TagValue, GroupTagValue, GroupTagKey, Activity,
+    TeamMember, TeamMemberType, Alert
 )
 from sentry.signals import buffer_incr_complete, regression_signal
 from sentry.utils.safe import safe_execute
@@ -140,7 +140,20 @@ def create_team_member_for_owner(instance, created, **kwargs):
 
     instance.member_set.get_or_create(
         user=instance.owner,
-        type=MEMBER_OWNER,
+        type=TeamMemberType.ADMIN,
+    )
+
+
+def create_org_member_for_owner(instance, created, **kwargs):
+    if not created:
+        return
+
+    if not instance.owner:
+        return
+
+    instance.member_set.get_or_create(
+        user=instance.owner,
+        type=OrganizationMemberType.ADMIN,
     )
 
 
@@ -232,6 +245,12 @@ post_save.connect(
     dispatch_uid="create_team_member_for_owner",
     weak=False,
 )
+post_save.connect(
+    create_org_member_for_owner,
+    sender=Organization,
+    dispatch_uid="create_org_member_for_owner",
+    weak=False,
+)
 pre_delete.connect(
     remove_key_for_team_member,
     sender=TeamMember,
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
new file mode 100644
index 0000000000..99352ad33a
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -0,0 +1,36 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Admins" %} | {{ block.super }}{% endblock %}
+
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Admins" %}</h2>
+        </div>
+
+        <table class="table table-striped">
+            <colgroup>
+                <col>
+            </colgroup>
+            <thead>
+                <tr>
+                    <th>{% trans "User" %}</th>
+                </tr>
+            </thead>
+            <tbody>
+                {% for member in member_list %}
+                    <tr>
+                        <td>
+                            {{ member.user.get_display_name }}
+                        </td>
+                    </tr>
+                {% endfor %}
+            </tbody>
+        </table>
+    </section>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/organization-settings.html b/src/sentry/templates/sentry/organization-settings.html
new file mode 100644
index 0000000000..75cff81c30
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-settings.html
@@ -0,0 +1,35 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Organization Settings" %} | {{ block.super }}{% endblock %}
+
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Organization Details" %}</h2>
+        </div>
+        <form class="form-stacked" action="" method="post">
+            {% csrf_token %}
+
+            {% if form.errors %}
+                <div class="alert alert-error">{% trans "Please correct the errors below." %}</div>
+            {% endif %}
+
+            {{ form|as_crispy_errors }}
+
+            <fieldset>
+                {% for field in form %}
+                    {{ field|as_crispy_field }}
+                {% endfor %}
+            </fieldset>
+
+            <fieldset class="form-actions">
+                <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+            </fieldset>
+        </form>
+    </section>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/organization-teams.html b/src/sentry/templates/sentry/organization-teams.html
new file mode 100644
index 0000000000..1829b33052
--- /dev/null
+++ b/src/sentry/templates/sentry/organization-teams.html
@@ -0,0 +1,39 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Teams" %} | {{ block.super }}{% endblock %}
+
+{% block bodyclass %}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Teams" %}</h2>
+        </div>
+
+        <table class="table table-striped">
+            <colgroup>
+                <col>
+                <col style="width:100px;">
+            </colgroup>
+            <thead>
+                <tr>
+                    <th>{% trans "Name" %}</th>
+                    <th style="text-align:center;">{% trans "Status" %}</th>
+                </tr>
+            </thead>
+            <tbody>
+                {% for team in team_list %}
+                    <tr>
+                        <td>
+                            {{ team.name }}
+                        </td>
+                        <td style="text-align:center">{{ team.get_status_display }}</td>
+                    </tr>
+                {% endfor %}
+            </tbody>
+        </table>
+    </section>
+{% endblock %}
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 078d8fcf86..c3a4b18032 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -7,7 +7,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.views.generic import View
 
 from sentry.models import Organization, Project, Team
-from sentry.web.helpers import get_login_url
+from sentry.web.helpers import get_login_url, render_to_response
 
 
 class OrganizationMixin(object):
@@ -121,7 +121,7 @@ class BaseView(View, OrganizationMixin):
         if context:
             default_context.update(context)
 
-        return render_with_response(template, default_context, self.request)
+        return render_to_response(template, default_context, self.request)
 
 
 class OrganizationView(BaseView):
@@ -134,7 +134,7 @@ class OrganizationView(BaseView):
     required_access = None
 
     def get_context_data(self, request, organization, **kwargs):
-        context = super(OrganizationView, self).get_context_data()
+        context = super(OrganizationView, self).get_context_data(request)
         context['organization'] = organization
         return context
 
@@ -174,7 +174,7 @@ class TeamView(BaseView):
     required_access = None
 
     def get_context_data(self, request, organization, team, **kwargs):
-        context = super(TeamView, self).get_context_data()
+        context = super(TeamView, self).get_context_data(request)
         context['organization'] = organization
         context['team'] = team
         return context
@@ -213,7 +213,7 @@ class ProjectView(BaseView):
     required_access = None
 
     def get_context_data(self, request, organization, team, project, **kwargs):
-        context = super(TeamView, self).get_context_data()
+        context = super(TeamView, self).get_context_data(request)
         context['organization'] = organization
         context['project'] = project
         context['team'] = team
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 564b6426b8..da26e8d954 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -23,16 +23,13 @@ class NewTeamForm(forms.ModelForm):
 class CreateTeamView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
 
-    def dispatch(self, request, organization, team):
-        if not can_create_teams(request.user):
-            return missing_perm(request, Permissions.ADD_TEAM)
-
-        return super(CreateTeamView, self).dispatch(request, organization, team)
-
     def get_form(self, request):
         return NewTeamForm(request.POST or None)
 
     def get(self, request, organization):
+        if not can_create_teams(request.user):
+            return missing_perm(request, Permissions.ADD_TEAM)
+
         form = self.get_form(request)
 
         context = {
@@ -42,6 +39,9 @@ class CreateTeamView(OrganizationView):
         return self.respond('sentry/teams/new.html', context)
 
     def post(self, request, organization):
+        if not can_create_teams(request.user):
+            return missing_perm(request, Permissions.ADD_TEAM)
+
         form = self.get_form(request)
         if form.is_valid():
             team = form.save(commit=False)
diff --git a/src/sentry/web/frontend/manage_team.py b/src/sentry/web/frontend/manage_team.py
index 510246573b..15393acd9e 100644
--- a/src/sentry/web/frontend/manage_team.py
+++ b/src/sentry/web/frontend/manage_team.py
@@ -37,13 +37,6 @@ class EditTeamAdminForm(EditTeamForm):
 class ManageTeamView(TeamView):
     required_access = TeamMemberType.ADMIN
 
-    def dispatch(self, request, organization, team):
-        result = plugins.first('has_perm', request.user, 'edit_team', team)
-        if result is False and not request.user.is_superuser:
-            return HttpResponseRedirect(reverse('sentry'))
-
-        return super(ManageTeamView, self).dispatch(request, organization, team)
-
     def get_default_context(self, request, **kwargs):
         context = super(ManageTeamView, self).get_default_context(request, **kwargs)
         context.update({
@@ -66,6 +59,10 @@ class ManageTeamView(TeamView):
         }, instance=team)
 
     def get(self, request, organization, team):
+        result = plugins.first('has_perm', request.user, 'edit_team', team)
+        if result is False and not request.user.is_superuser:
+            return HttpResponseRedirect(reverse('sentry'))
+
         form = self.get_form(request, team)
 
         context = {
@@ -75,6 +72,10 @@ class ManageTeamView(TeamView):
         return self.respond('sentry/teams/manage.html', context)
 
     def post(self, request, organization, team):
+        result = plugins.first('has_perm', request.user, 'edit_team', team)
+        if result is False and not request.user.is_superuser:
+            return HttpResponseRedirect(reverse('sentry'))
+
         form = self.get_form(request, team)
         # XXX: form.is_valid() changes the foreignkey
         original_owner = team.owner
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
new file mode 100644
index 0000000000..490ae6fa83
--- /dev/null
+++ b/src/sentry/web/frontend/organization_members.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry.models import OrganizationMember, OrganizationMemberType
+from sentry.web.frontend.base import OrganizationView
+
+
+class OrganizationMembersView(OrganizationView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def get(self, request, organization):
+        context = {
+            'member_list': OrganizationMember.objects.filter(
+                organization=organization
+            ).select_related('user'),
+        }
+
+        return self.respond('sentry/organization-members.html', context)
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
new file mode 100644
index 0000000000..ad9ba1d0e6
--- /dev/null
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import Organization, OrganizationMemberType
+from sentry.web.frontend.base import OrganizationView
+
+
+class OrganizationSettingsForm(forms.ModelForm):
+    class Meta:
+        fields = ('name',)
+        model = Organization
+
+
+class OrganizationSettingsView(OrganizationView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def get_form(self, request, organization):
+        return OrganizationSettingsForm(
+            request.POST or None,
+            instance=organization
+        )
+
+    def get(self, request, organization):
+        form = self.get_form(request, organization)
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/organization-settings.html', context)
+
+    def post(self, request, organization):
+        form = self.get_form(request, organization)
+        if form.is_valid():
+            form.save()
+
+            messages.add_message(request, messages.SUCCESS,
+                _('Changes to your organization were saved.'))
+
+            return HttpResponseRedirect(reverse('sentry-organization-settings', args=[organization.id]))
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/organization-settings.html', context)
diff --git a/src/sentry/web/frontend/organization_teams.py b/src/sentry/web/frontend/organization_teams.py
new file mode 100644
index 0000000000..711c7098f5
--- /dev/null
+++ b/src/sentry/web/frontend/organization_teams.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+
+from sentry.models import OrganizationMemberType, Team
+from sentry.web.frontend.base import OrganizationView
+
+
+class OrganizationTeamsView(OrganizationView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def get(self, request, organization):
+        context = {
+            'team_list': Team.objects.filter(organization=organization),
+        }
+
+        return self.respond('sentry/organization-teams.html', context)
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 67ebd4f706..39b19eaebf 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -19,16 +19,10 @@ class RemoveTeamForm(forms.Form):
 class RemoveTeamView(TeamView):
     required_access = TeamMemberType.ADMIN
 
-    def dispatch(self, request, organization, team):
-        if not can_remove_team(request.user, team):
-            return HttpResponseRedirect(reverse('sentry'))
-
-        return super(RemoveTeamView, self).dispatch(request, organization, team)
-
     def get_form(self, request):
         return RemoveTeamForm(request.POST or None)
 
-    def remove_team(self, request, team):
+    def get(self, request, organization, team):
         form = self.get_form(request)
 
         context = {
@@ -37,7 +31,10 @@ class RemoveTeamView(TeamView):
 
         return self.respond('sentry/teams/remove.html', context)
 
-    def post(self, request, team):
+    def post(self, request, organization, team):
+        if not can_remove_team(request.user, team):
+            return HttpResponseRedirect(reverse('sentry'))
+
         form = self.get_form(request)
 
         if form.is_valid():
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 80a66d401f..f42b5f2d24 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -14,21 +14,18 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 from django.utils.translation import ugettext as _
 
-from sudo.decorators import sudo_required
-
 from sentry.constants import MEMBER_USER, MEMBER_OWNER, STATUS_VISIBLE
 from sentry.models import PendingTeamMember, TeamMember, AccessGroup, User
 from sentry.permissions import (
-    can_add_team_member, can_remove_team, can_create_projects,
-    can_create_teams, can_edit_team_member, can_remove_team_member,
+    can_add_team_member, can_create_projects,
+    can_edit_team_member, can_remove_team_member,
     Permissions)
 from sentry.plugins import plugins
 from sentry.utils.samples import create_sample_event
-from sentry.web.decorators import login_required, has_access
+from sentry.web.decorators import has_access
 from sentry.web.forms.teams import (
-    NewTeamForm, NewTeamAdminForm,
-    EditTeamForm, EditTeamAdminForm, EditTeamMemberForm, NewTeamMemberForm,
-    InviteTeamMemberForm, RemoveTeamForm, AcceptInviteForm, NewAccessGroupForm,
+    EditTeamMemberForm, NewTeamMemberForm,
+    InviteTeamMemberForm, AcceptInviteForm, NewAccessGroupForm,
     EditAccessGroupForm, NewAccessGroupMemberForm, NewAccessGroupProjectForm,
     RemoveAccessGroupForm)
 from sentry.web.helpers import render_to_response
@@ -44,34 +41,6 @@ def render_with_team_context(team, template, context, request=None):
     return render_to_response(template, context, request)
 
 
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def remove_team(request, team):
-    if not can_remove_team(request.user, team):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    if request.method == 'POST':
-        form = RemoveTeamForm(request.POST)
-    else:
-        form = RemoveTeamForm()
-
-    if form.is_valid():
-        team.delete()
-        messages.add_message(
-            request, messages.SUCCESS,
-            _(u'The team %r was permanently deleted.') % (team.name.encode('utf-8'),))
-        return HttpResponseRedirect(reverse('sentry'))
-
-    context = csrf(request)
-    context.update({
-        'page': 'settings',
-        'form': form,
-        'SUBSECTION': 'settings',
-    })
-
-    return render_with_team_context(team, 'sentry/teams/remove.html', context, request)
-
-
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_team_projects(request, team):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 84b303f84a..5a183b2ee3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -34,6 +34,9 @@ import sentry.web.frontend.projects.tags
 
 __all__ = ('urlpatterns',)
 
+from sentry.web.frontend.organization_members import OrganizationMembersView
+from sentry.web.frontend.organization_settings import OrganizationSettingsView
+from sentry.web.frontend.organization_teams import OrganizationTeamsView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.manage_team import ManageTeamView
 from sentry.web.frontend.remove_team import RemoveTeamView
@@ -105,6 +108,12 @@ urlpatterns += patterns('',
     url(r'^account/settings/social/', include('social_auth.urls')),
 
     # Organizations
+    url(r'^organizations/(?P<organization_id>\d+)/members/$', OrganizationMembersView.as_view(),
+        name='sentry-organization-members'),
+    url(r'^organizations/(?P<organization_id>\d+)/settings/$', OrganizationSettingsView.as_view(),
+        name='sentry-organization-settings'),
+    url(r'^organizations/(?P<organization_id>\d+)/teams/$', OrganizationTeamsView.as_view(),
+        name='sentry-organization-teams'),
     url(r'^organizations/(?P<organization_id>\d+)/teams/new/$', CreateTeamView.as_view(),
         name='sentry-new-team'),
 
