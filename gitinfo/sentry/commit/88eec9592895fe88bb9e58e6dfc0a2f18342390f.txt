commit 88eec9592895fe88bb9e58e6dfc0a2f18342390f
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Aug 12 15:56:09 2015 -0700

    Some initial UI / API support for user reports

diff --git a/bin/load-mocks b/bin/load-mocks
index 53ac0ece79..ec2f21ffc6 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -12,7 +12,7 @@ from random import randint
 from sentry.app import tsdb
 from sentry.models import (
     Activity, File, GroupMeta, Organization, OrganizationAccessRequest,
-    OrganizationMember, Project, Release, ReleaseFile, Team, User
+    OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport
 )
 from sentry.utils.samples import create_sample_event
 
@@ -163,6 +163,15 @@ def main():
                 except IntegrityError:
                     pass
 
+            UserReport.objects.create(
+                project=project,
+                event_id=event3.event_id,
+                group=event3.group,
+                name='Jane Doe',
+                email='jane@example.com',
+                comments='I have no idea how I got here.',
+            )
+
         OrganizationAccessRequest.objects.create_or_update(
             member=dummy_member,
             team=team,
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 0effaa931a..f88ba77a57 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -14,7 +14,7 @@ from sentry.db.models.query import create_or_update
 from sentry.constants import STATUS_CHOICES
 from sentry.models import (
     Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupStatus,
-    GroupTagValue, Release
+    GroupTagValue, Release, UserReport
 )
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
@@ -166,6 +166,7 @@ class GroupDetailsEndpoint(GroupEndpoint):
             'activity': serialize(activity, request.user),
             'seenBy': serialize(seen_by, request.user),
             'pluginActions': action_list,
+            'userReportCount': UserReport.objects.filter(group=group).count(),
             'stats': {
                 '24h': hourly_stats,
                 '30d': daily_stats,
diff --git a/src/sentry/api/endpoints/group_user_reports.py b/src/sentry/api/endpoints/group_user_reports.py
new file mode 100644
index 0000000000..701d17bd4a
--- /dev/null
+++ b/src/sentry/api/endpoints/group_user_reports.py
@@ -0,0 +1,30 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.group import GroupEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.paginator import DateTimePaginator
+from sentry.models import UserReport
+
+
+class GroupUserReportsEndpoint(GroupEndpoint):
+    def get(self, request, group):
+        """
+        List an aggregate's user reports
+
+        Return a list of user submitted crash reports for the given an aggregate.
+
+            {method} {path}
+
+        """
+
+        report_list = UserReport.objects.filter(
+            group=group
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=report_list,
+            order_by='-date_added',
+            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=DateTimePaginator,
+        )
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 68848a8229..c3fd94fe20 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -32,15 +32,23 @@ class ProjectSerializer(Serializer):
         return result
 
     def serialize(self, obj, attrs, user):
-        d = {
+        from sentry import features
+
+        feature_list = []
+        if features.has('projects:quotas', obj, actor=user):
+            feature_list.append('quotas')
+        if features.has('projects:user-reports', obj, actor=user):
+            feature_list.append('user-reports')
+
+        return {
             'id': str(obj.id),
             'slug': obj.slug,
             'name': obj.name,
             'isPublic': obj.public,
             'dateCreated': obj.date_added,
+            'features': feature_list,
             'permission': {
                 'owner': attrs['access_type'] <= OrganizationMemberType.OWNER,
                 'admin': attrs['access_type'] <= OrganizationMemberType.ADMIN,
             },
         }
-        return d
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
new file mode 100644
index 0000000000..4bbc40469a
--- /dev/null
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import UserReport
+
+
+@register(UserReport)
+class UserReportSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        # TODO(dcramer): add in various context from the event
+        # context == user / http / extra interfaces
+        return {
+            'id': str(obj.id),
+            'eventID': obj.event_id,
+            'name': obj.name,
+            'email': obj.email,
+            'comments': obj.comments,
+            'dateCreated': obj.date_added,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d9fc1ae54d..7ddd783baa 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -14,6 +14,7 @@ from .endpoints.group_stats import GroupStatsEndpoint
 from .endpoints.group_tags import GroupTagsEndpoint
 from .endpoints.group_tagkey_details import GroupTagKeyDetailsEndpoint
 from .endpoints.group_tagkey_values import GroupTagKeyValuesEndpoint
+from .endpoints.group_user_reports import GroupUserReportsEndpoint
 from .endpoints.index import IndexEndpoint
 from .endpoints.internal_stats import InternalStatsEndpoint
 from .endpoints.legacy_project_redirect import LegacyProjectRedirectEndpoint
@@ -204,6 +205,9 @@ urlpatterns = patterns(
     url(r'^groups/(?P<group_id>\d+)/tags/(?P<key>[^/]+)/values/$',
         GroupTagKeyValuesEndpoint.as_view(),
         name='sentry-api-0-group-tagkey-values'),
+    url(r'^groups/(?P<group_id>\d+)/user-reports/$',
+        GroupUserReportsEndpoint.as_view(),
+        name='sentry-api-0-group-user-reports'),
 
     url(r'^shared/groups/(?P<share_id>[^\/]+)/$',
         SharedGroupDetailsEndpoint.as_view(),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b6d1009423..29eadd420d 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -558,6 +558,7 @@ SENTRY_FEATURES = {
     'organizations:create': True,
     'organizations:sso': False,
     'projects:quotas': True,
+    'projects:user-reports': True,
 }
 
 # Default time zone for localization in the UI.
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index f940a22458..ec92af10f6 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -10,6 +10,7 @@ default_manager.add('auth:register')
 default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
 default_manager.add('projects:quotas', ProjectFeature)
+default_manager.add('projects:user-reports', ProjectFeature)
 
 # expose public api
 add = default_manager.add
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
index 50397d9590..fb36288428 100644
--- a/src/sentry/static/sentry/app/mixins/projectState.jsx
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -8,6 +8,10 @@ var ProjectState = {
     project: PropTypes.Project,
   },
 
+  getProjectFeatures() {
+    return new Set(this.context.project.features);
+  },
+
   getProject() {
     return this.context.project;
   }
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 37c77c3a8e..d656923369 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -6,11 +6,12 @@ var DefaultRoute = Router.DefaultRoute;
 import App from "./views/app";
 import GroupActivity from "./views/groupActivity";
 import GroupDetails from "./views/groupDetails";
+import GroupEventDetails from "./views/groupEventDetails";
 import GroupEvents from "./views/groupEvents";
 import GroupTags from "./views/groupTags";
 import GroupTagValues from "./views/groupTagValues";
 import GroupOverview from "./views/groupOverview";
-import GroupEventDetails from "./views/groupEventDetails";
+import GroupUserReports from "./views/groupUserReports";
 import OrganizationDetails from "./views/organizationDetails";
 import OrganizationStats from "./views/organizationStats";
 import OrganizationTeams from "./views/organizationTeams";
@@ -51,9 +52,10 @@ var routes = (
           <DefaultRoute name="groupOverview" handler={GroupOverview} />
           <Route name="groupActivity" path="activity/" handler={GroupActivity} />
           <Route name="groupEventDetails" path="events/:eventId/" handler={GroupEventDetails} />
+          <Route name="groupEvents" path="events/" handler={GroupEvents} />
           <Route name="groupTags" path="tags/" handler={GroupTags} />
           <Route name="groupTagValues" path="tags/:tagKey/" handler={GroupTagValues} />
-          <Route name="groupEvents" path="events/" handler={GroupEvents} />
+          <Route name="groupUserReports" path="reports/" handler={GroupUserReports} />
         </Route>
       </Route>
     </Route>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index 500e21c9c3..2b490b13c7 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -81,7 +81,8 @@ var GroupHeader = React.createClass({
 
   render() {
     var group = this.props.group,
-        userCount = 0;
+        userCount = 0,
+        features = this.getProjectFeatures();
 
     if (group.tags["sentry:user"] !== undefined) {
       userCount = group.tags["sentry:user"].count;
@@ -173,6 +174,11 @@ var GroupHeader = React.createClass({
           <ListLink to="groupActivity" params={params}>
             Activity <span className="badge animated">{this.state.activityCount}</span>
           </ListLink>
+          {features.has('user-reports') &&
+            <ListLink to="groupUserReports" params={params}>
+              User Reports <span className="badge animated">{group.userReportCount}</span>
+            </ListLink>
+          }
           <ListLink to="groupTags" params={params}>
             Tags
           </ListLink>
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
new file mode 100644
index 0000000000..7da12fa652
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -0,0 +1,116 @@
+import $ from "jquery";
+import React from "react";
+import Router from "react-router";
+import api from "../api";
+import Gravatar from "../components/gravatar";
+import GroupState from "../mixins/groupState";
+import GroupStore from "../stores/groupStore";
+import IndicatorStore from "../stores/indicatorStore";
+import LoadingError from "../components/loadingError";
+import LoadingIndicator from "../components/loadingIndicator";
+import PropTypes from "../proptypes";
+import TimeSince from "../components/timeSince";
+import utils from "../utils";
+
+var GroupUserReports = React.createClass({
+  // TODO(dcramer): only re-render on group/activity change
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  mixins: [GroupState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      reportList: [],
+      pageLinks: '',
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    var queryParams = this.context.router.getCurrentQuery();
+    var querystring = $.param(queryParams);
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    api.request('/groups/' + this.getGroup().id + '/user-reports/?' + querystring, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          reportList: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: (error) => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  onPage(cursor) {
+    var router = this.context.router;
+    var queryParams = $.extend({}, router.getCurrentQuery(), {cursor: cursor});
+
+    router.transitionTo('groupUserReports', this.context.router.getCurrentParams(), queryParams);
+  },
+
+  render() {
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
+
+    var children = this.state.reportList.map((item, itemIdx) => {
+      var body = utils.nl2br(utils.urlize(utils.escape(item.comments)));
+
+      return (
+        <li className="activity-note" key={itemIdx}>
+          <Gravatar email={item.email} size={64} className="avatar" />
+          <div className="activity-bubble">
+            <TimeSince date={item.dateCreated} />
+            <div className="activity-author">{item.name}</div>
+            <p dangerouslySetInnerHTML={{__html: body}} />
+          </div>
+        </li>
+      );
+    });
+
+    if (children.length) {
+      return (
+        <div className="row">
+          <div className="col-md-9">
+            <div className="activity-container">
+              <ul className="activity">
+                {children}
+              </ul>
+            </div>
+          </div>
+        </div>
+      );
+    }
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>No user reports have been collected for this event.</p>
+        <p><a href="">Learn how to integrate User Crash Reports</a></p>
+      </div>
+    );
+  }
+});
+
+export default GroupUserReports;
+
