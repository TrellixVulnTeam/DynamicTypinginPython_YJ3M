commit ddfa77e5f6bab62bd58b513cd0266ae0eedf0efa
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Jul 29 16:36:36 2019 -0700

    Feat (integrations) write to sentry app installation token table (#14172)

diff --git a/src/sentry/analytics/events/sentry_app_installation_token_created.py b/src/sentry/analytics/events/sentry_app_installation_token_created.py
new file mode 100644
index 0000000000..b6579217c8
--- /dev/null
+++ b/src/sentry/analytics/events/sentry_app_installation_token_created.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import, print_function
+
+from sentry import analytics
+
+
+class SentryAppInstallationTokenCreated(analytics.Event):
+    type = 'sentry_app_installation_token.created'
+
+    attributes = (
+        analytics.Attribute('user_id'),
+        analytics.Attribute('organization_id'),
+        analytics.Attribute('sentry_app_installation_id'),
+        analytics.Attribute('sentry_app'),
+    )
+
+
+analytics.register(SentryAppInstallationTokenCreated)
diff --git a/src/sentry/mediators/sentry_app_installation_tokens/__init__.py b/src/sentry/mediators/sentry_app_installation_tokens/__init__.py
new file mode 100644
index 0000000000..2e7d5e72ac
--- /dev/null
+++ b/src/sentry/mediators/sentry_app_installation_tokens/__init__.py
@@ -0,0 +1,3 @@
+from __future__ import absolute_import
+
+from .creator import Creator  # NOQA
diff --git a/src/sentry/mediators/sentry_app_installation_tokens/creator.py b/src/sentry/mediators/sentry_app_installation_tokens/creator.py
new file mode 100644
index 0000000000..2816679b2f
--- /dev/null
+++ b/src/sentry/mediators/sentry_app_installation_tokens/creator.py
@@ -0,0 +1,67 @@
+from __future__ import absolute_import
+
+
+from datetime import datetime
+
+from sentry.utils.cache import memoize
+from sentry.mediators import Mediator, Param
+from sentry.models import (
+    AuditLogEntryEvent, ApiToken, SentryAppInstallationToken
+)
+
+
+class Creator(Mediator):
+    sentry_app_installation = Param('sentry.models.SentryAppInstallation')
+    expires_at = Param(datetime.date, default=None, required=False)
+    # analytics and audit params
+    generate_audit = Param(bool, default=False)
+    user = Param('sentry.models.User')
+    request = Param('rest_framework.request.Request', required=False)
+
+    def call(self):
+        self._create_api_token()
+        self._create_sentry_app_installation_token()
+        return self.sentry_app_installation_token
+
+    def _create_api_token(self):
+        self.api_token = ApiToken.objects.create(
+            user=self.sentry_app.proxy_user,
+            application_id=self.sentry_app.application.id,
+            scope_list=self.sentry_app.scope_list,
+            expires_at=self.expires_at,
+        )
+
+    def _create_sentry_app_installation_token(self):
+        self.sentry_app_installation_token = SentryAppInstallationToken.objects.create(
+            api_token=self.api_token,
+            sentry_app_installation=self.sentry_app_installation
+        )
+
+    def audit(self):
+        from sentry.utils.audit import create_audit_entry
+        if self.request and self.generate_audit:
+            create_audit_entry(
+                request=self.request,
+                organization=self.organization,
+                target_object=self.sentry_app_installation_token.id,
+                event=AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD_TOKEN,
+                data={'sentry_app': self.sentry_app.name},
+            )
+
+    def record_analytics(self):
+        from sentry import analytics
+        analytics.record(
+            'sentry_app_installation_token.created',
+            user_id=self.user.id,
+            organization_id=self.organization.id,
+            sentry_app_installation_id=self.sentry_app_installation.id,
+            sentry_app=self.sentry_app.slug,
+        )
+
+    @memoize
+    def sentry_app(self):
+        return self.sentry_app_installation.sentry_app
+
+    @memoize
+    def organization(self):
+        return self.sentry_app_installation.organization
diff --git a/src/sentry/mediators/sentry_app_installations/updater.py b/src/sentry/mediators/sentry_app_installations/updater.py
index 8895ef7a9a..00f9e91b5d 100644
--- a/src/sentry/mediators/sentry_app_installations/updater.py
+++ b/src/sentry/mediators/sentry_app_installations/updater.py
@@ -25,7 +25,6 @@ class Updater(Mediator):
             self.sentry_app_installation.status = SentryAppInstallationStatus.INSTALLED
 
     def record_analytics(self):
-        # TODO: Add analytics
         analytics.record(
             'sentry_app_installation.updated',
             sentry_app_installation_id=self.sentry_app_installation.id,
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index c267f43250..7c6766d175 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -7,11 +7,11 @@ from collections import Iterable
 from sentry.constants import SentryAppStatus
 from sentry.mediators import Mediator, Param
 from sentry.models import (
-    AuditLogEntryEvent,
-    ApiToken,
+    AuditLogEntryEvent
 )
 from .creator import Creator as SentryAppCreator
 from ..sentry_app_installations import Creator as InstallationCreator
+from sentry.mediators.sentry_app_installation_tokens import Creator as SentryAppInstallationTokenCreator
 
 
 class InternalCreator(Mediator):
@@ -34,29 +34,30 @@ class InternalCreator(Mediator):
         self.sentry_app.verify_install = False
         self.sentry_app.save()
 
-        self._create_access_token()
         self._install()
+        self._create_access_token()
 
         return self.sentry_app
 
     def _create_access_token(self):
-        self.api_token = ApiToken.objects.create(
-            user=self.sentry_app.proxy_user,
-            application_id=self.sentry_app.application.id,
-            scope_list=self.sentry_app.scope_list,
-            expires_at=None,
-        )
+        data = {
+            'sentry_app_installation': self.install,
+            'user': self.user
+        }
+
+        sentry_app_installation_token = SentryAppInstallationTokenCreator.run(
+            request=self.request, **data)
+        self.install.api_token = sentry_app_installation_token.api_token
+        self.install.save()
 
     def _install(self):
-        install = InstallationCreator.run(
+        self.install = InstallationCreator.run(
             organization=self.organization,
             slug=self.sentry_app.slug,
             user=self.user,
             request=self.request,
             notify=False,
         )
-        install.api_token = self.api_token
-        install.save()
 
     def audit(self):
         from sentry.utils.audit import create_audit_entry
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index d6f0789ac4..48bfbbb206 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -87,6 +87,8 @@ class AuditLogEntryEvent(object):
 
     INTERNAL_INTEGRATION_ADD = 130
 
+    INTERNAL_INTEGRATION_ADD_TOKEN = 135
+
 
 class AuditLogEntry(Model):
     __core__ = False
@@ -159,11 +161,14 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.SENTRY_APP_INSTALL, 'sentry-app.install'),
             (AuditLogEntryEvent.SENTRY_APP_UNINSTALL, 'sentry-app.uninstall'),
             (AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD, 'internal-integration.create'),
+            (AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD_TOKEN, 'internal-integration.add-token'),
 
             (AuditLogEntryEvent.SET_ONDEMAND, 'ondemand.edit'),
             (AuditLogEntryEvent.TRIAL_STARTED, 'trial.started'),
             (AuditLogEntryEvent.PLAN_CHANGED, 'plan.changed'),
             (AuditLogEntryEvent.PLAN_CANCELLED, 'plan.cancelled'),
+
+
         )
     )
     ip_address = models.GenericIPAddressField(null=True, unpack_ipv4=True)
@@ -347,5 +352,8 @@ class AuditLogEntry(Model):
             return 'installed sentry app %s' % (self.data['sentry_app'])
         elif self.event == AuditLogEntryEvent.SENTRY_APP_UNINSTALL:
             return 'uninstalled sentry app %s' % (self.data['sentry_app'])
+        elif self.event == AuditLogEntryEvent.INTERNAL_INTEGRATION_ADD_TOKEN:
+            return 'created a token for internal integration %s' % (
+                self.data['sentry_app'])
 
         return ''
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index 210ba20b2f..3e044e66bf 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -9,6 +9,7 @@ from sentry.constants import SentryAppStatus
 from sentry.utils import json
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
+from sentry.models import SentryApp, SentryAppInstallationToken, SentryAppInstallation
 
 
 class SentryAppsTest(APITestCase):
@@ -440,6 +441,16 @@ class PostSentryAppsTest(SentryAppsTest):
         assert response.data['status'] == SentryAppStatus.as_str(SentryAppStatus.INTERNAL)
         assert not response.data['verifyInstall']
 
+        # verify tokens are created properly
+        sentry_app = SentryApp.objects.get(slug=response.data['slug'])
+        sentry_app_installation = SentryAppInstallation.objects.get(sentry_app=sentry_app)
+
+        sentry_app_installation_token = SentryAppInstallationToken.objects.get(
+            sentry_app_installation=sentry_app_installation)
+
+        # Below line will fail once we stop assigning api_token on the sentry_app_installation
+        assert sentry_app_installation_token.api_token == sentry_app_installation.api_token
+
     def _post(self, **kwargs):
         body = {
             'name': 'MyApp',
diff --git a/tests/sentry/mediators/sentry_app_installation_tokens/__init__.py b/tests/sentry/mediators/sentry_app_installation_tokens/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/mediators/sentry_app_installation_tokens/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py b/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py
new file mode 100644
index 0000000000..727064de09
--- /dev/null
+++ b/tests/sentry/mediators/sentry_app_installation_tokens/test_creator.py
@@ -0,0 +1,90 @@
+from __future__ import absolute_import
+
+from mock import patch
+from datetime import date
+
+from sentry.mediators.sentry_app_installation_tokens import Creator
+from sentry.models import (
+    AuditLogEntry,
+    SentryAppInstallationToken,
+    SentryAppInstallation
+)
+from sentry.testutils import TestCase
+
+
+class TestCreator(TestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization(owner=self.user)
+        self.create_project(organization=self.org)
+
+        # will create the installation and the first token
+        self.sentry_app = self.create_internal_integration(
+            name='nulldb',
+            organization=self.org
+        )
+
+        self.sentry_app_installation = SentryAppInstallation.objects.get(sentry_app=self.sentry_app)
+
+    @patch('sentry.analytics.record')
+    def test_create_token_with_audit(self, record):
+        today = date.today()
+        request = self.make_request(user=self.user, method='GET')
+        sentry_app_installation_token = Creator.run(
+            sentry_app_installation=self.sentry_app_installation,
+            expires_at=today,
+            user=self.user,
+            generate_audit=True,
+            request=request
+        )
+
+        # verify token was created properly
+        assert sentry_app_installation_token.api_token.expires_at == today
+
+        # check we have two tokens
+        sentry_app_installation_tokens = SentryAppInstallationToken.objects.filter(
+            sentry_app_installation=self.sentry_app_installation)
+
+        assert len(sentry_app_installation_tokens) == 2
+
+        log = AuditLogEntry.objects.get(organization=self.org)
+        assert log.get_note() == 'created a token for internal integration nulldb'
+        assert log.organization == self.org
+        assert log.target_object == sentry_app_installation_token.id
+
+        record.assert_called_with(
+            'sentry_app_installation_token.created',
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app_installation_id=self.sentry_app_installation.id,
+            sentry_app=self.sentry_app.slug,
+        )
+
+    @patch('sentry.utils.audit.create_audit_entry')
+    @patch('sentry.analytics.record')
+    def test_create_token_without_audit_or_date(self, record, create_audit_entry):
+        request = self.make_request(user=self.user, method='GET')
+        sentry_app_installation_token = Creator.run(
+            sentry_app_installation=self.sentry_app_installation,
+            user=self.user,
+            request=request
+        )
+
+        # verify token was created properly
+        assert sentry_app_installation_token.api_token.expires_at is None
+
+        # check we have two tokens
+        sentry_app_installation_tokens = SentryAppInstallationToken.objects.filter(
+            sentry_app_installation=self.sentry_app_installation)
+
+        assert len(sentry_app_installation_tokens) == 2
+
+        assert not create_audit_entry.called
+
+        record.assert_called_with(
+            'sentry_app_installation_token.created',
+            user_id=self.user.id,
+            organization_id=self.org.id,
+            sentry_app_installation_id=self.sentry_app_installation.id,
+            sentry_app=self.sentry_app.slug,
+        )
