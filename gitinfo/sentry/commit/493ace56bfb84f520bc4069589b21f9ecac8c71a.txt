commit 493ace56bfb84f520bc4069589b21f9ecac8c71a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Mar 9 04:16:16 2018 +0900

    feat(ui): Add Confirm to "require 2fa" option (#7480)
    
    * refactor Confirm component to overload `children` and accept a render function, allow rendered child to control confirm state
    * add `confirm` prop to BooleanField to open a Confirm modal
    * Move require2fa into data/forms + add confirm
    * add "resetOnError" field property and apply to boolean fields
    * fix field error reset on api errors and resetOnError

diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index 08800925bb..43da28ed3a 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -33,6 +33,35 @@ class Confirm extends React.PureComponent {
     this.confirming = false;
   }
 
+  openModal = () => {
+    let {onConfirming} = this.props;
+    if (typeof onConfirming === 'function') {
+      onConfirming();
+    }
+
+    this.setState(state => ({
+      isModalOpen: true,
+      disableConfirmButton: false,
+    }));
+
+    // always reset `confirming` when modal visibility changes
+    this.confirming = false;
+  };
+
+  closeModal = () => {
+    let {onCancel} = this.props;
+    if (typeof onCancel === 'function') {
+      onCancel();
+    }
+    this.setState(state => ({
+      isModalOpen: false,
+      disableConfirmButton: false,
+    }));
+
+    // always reset `confirming` when modal visibility changes
+    this.confirming = false;
+  };
+
   handleConfirm = e => {
     // `confirming` is used to make sure `onConfirm` is only called once
     if (!this.confirming) {
@@ -48,28 +77,15 @@ class Confirm extends React.PureComponent {
   };
 
   handleToggle = e => {
-    let {onConfirming, onCancel, disabled} = this.props;
+    let {disabled} = this.props;
     if (disabled) return;
 
     // Current state is closed, means it will toggle open
     if (!this.state.isModalOpen) {
-      if (typeof onConfirming === 'function') {
-        onConfirming();
-      }
+      this.openModal();
     } else {
-      if (typeof onCancel === 'function') {
-        onCancel();
-      }
+      this.closeModal();
     }
-
-    // Toggle modal display state
-    // Also always reset `confirming` when modal visibility changes
-    this.setState(state => ({
-      isModalOpen: !state.isModalOpen,
-      disableConfirmButton: false,
-    }));
-
-    this.confirming = false;
   };
 
   render() {
@@ -85,7 +101,12 @@ class Confirm extends React.PureComponent {
 
     return (
       <React.Fragment>
-        {React.cloneElement(children, {disabled, onClick: this.handleToggle})}
+        {typeof children === 'function'
+          ? children({
+              close: this.closeModal,
+              open: this.openModal,
+            })
+          : React.cloneElement(children, {disabled, onClick: this.handleToggle})}
         <Modal show={this.state.isModalOpen} animation={false} onHide={this.handleToggle}>
           <div className="modal-body">{confirmMessage}</div>
           <div className="modal-footer">
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 325c72a659..e446af914b 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -64,6 +64,16 @@ const formGroups = [
   {
     title: t('Security & Privacy'),
     fields: [
+      {
+        name: 'require2FA',
+        type: 'boolean',
+        label: t('Require Two-Factor Authentication'),
+        help: t('Require two-factor authentication for all members.'),
+        confirm: t(
+          'Enabling this feature will disable all accounts without two-factor authentication. It will also send an email to all users to enable two-factor authentication. Do you want to continue?'
+        ),
+        visible: ({features}) => features.has('require-2fa'),
+      },
       {
         name: 'allowSharedIssues',
         type: 'boolean',
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
index a7f4719c29..6d4ff8034d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
@@ -1,14 +1,20 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 
 import InputField from './inputField';
 import Switch from '../../../../components/switch';
+import Confirm from '../../../../components/confirm';
 
 export default class BooleanField extends InputField {
+  static propTypes = {
+    ...InputField.propTypes,
+    confirm: PropTypes.node,
+  };
   coerceValue(value) {
     return value ? true : false;
   }
 
-  onChange = (value, onChange, onBlur, e) => {
+  handleChange = (value, onChange, onBlur, e) => {
     // We need to toggle current value because Switch is not an input
     let newValue = this.coerceValue(!value);
     onChange(newValue, e);
@@ -16,18 +22,51 @@ export default class BooleanField extends InputField {
   };
 
   render() {
+    let {confirm, ...fieldProps} = this.props;
+
     return (
       <InputField
-        {...this.props}
-        field={({onChange, onBlur, value, disabled, ...props}) => (
-          <Switch
-            size="lg"
-            {...props}
-            isActive={!!value}
-            isDisabled={disabled}
-            toggle={this.onChange.bind(this, value, onChange, onBlur)}
-          />
-        )}
+        {...fieldProps}
+        resetOnError
+        field={({onChange, onBlur, value, disabled, ...props}) => {
+          // Create a function with required args bound
+          let handleChange = this.handleChange.bind(this, value, onChange, onBlur);
+
+          let switchProps = {
+            size: 'lg',
+            ...props,
+            isActive: !!value,
+            isDisabled: disabled,
+            toggle: handleChange,
+          };
+
+          if (confirm) {
+            return (
+              <Confirm message={confirm} onConfirm={() => handleChange({})}>
+                {({open}) => (
+                  <Switch
+                    {...switchProps}
+                    toggle={e => {
+                      // If we have a `confirm` prop and enabling switch
+                      // Then show confirm dialog, otherwise propagate change as normal
+                      //
+                      // TODO(billy): We will probably want a way to control if it happens on enable or disable
+                      if (!value) {
+                        // Open confirm modal
+                        open();
+                        return;
+                      }
+
+                      handleChange(e);
+                    }}
+                  />
+                )}
+              </Confirm>
+            );
+          }
+
+          return <Switch {...switchProps} />;
+        }}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index ca48dcf112..7902cfa6f4 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -333,12 +333,11 @@ class FormModel {
    */
   @action
   saveField(id, currentValue) {
+    let initialValue = this.initialData[id];
+
     // Don't save if field hasn't changed
     // Don't need to check for error state since initialData wouldn't have updated since last error
-    if (
-      currentValue === this.initialData[id] ||
-      (currentValue === '' && !defined(this.initialData[id]))
-    )
+    if (currentValue === initialValue || (currentValue === '' && !defined(initialValue)))
       return null;
 
     // Check for error first
@@ -382,6 +381,13 @@ class FormModel {
         // should we revert field value to last known state?
         saveSnapshot = null;
 
+        // Field can be configured to reset on error
+        // e.g. BooleanFields
+        let shouldReset = this.getDescriptor(id, 'resetOnError');
+        if (shouldReset) {
+          this.setValue(id, initialValue);
+        }
+
         // API can return a JSON object with either:
         // 1) map of {[fieldName] => Array<ErrorMessages>}
         // 2) {'non_field_errors' => Array<ErrorMessages>}
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
index bdec21bc3b..180a79b0b6 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -27,20 +27,6 @@ const NewOrganizationSettingsForm = createReactClass({
   render() {
     let {initialData, orgId, onSave, access} = this.props;
 
-    //Only for adding the Flag to 2FA Enforcement.
-    if (this.getFeatures().has('require-2fa')) {
-      let security_panel = organizationSettingsFields.find(
-        panel => panel.title == 'Security & Privacy'
-      );
-      if (!security_panel.fields.find(field => field.name == 'require2FA'))
-        security_panel.fields.unshift({
-          name: 'require2FA',
-          type: 'boolean',
-          label: 'Require Two-Factor Authentication',
-          help: 'Require two-factor authentication for all members.',
-        });
-    }
-
     return (
       <Form
         className="ref-organization-settings"
@@ -66,6 +52,7 @@ const NewOrganizationSettingsForm = createReactClass({
       >
         <Box>
           <JsonForm
+            features={this.getFeatures()}
             access={access}
             location={this.props.location}
             forms={organizationSettingsFields}
diff --git a/tests/acceptance/test_organization_settings.py b/tests/acceptance/test_organization_settings.py
index 387b58ca3e..afdf923358 100644
--- a/tests/acceptance/test_organization_settings.py
+++ b/tests/acceptance/test_organization_settings.py
@@ -84,5 +84,8 @@ class OrganizationSettingsTest(AcceptanceTestCase):
             self.browser.wait_until_not('.loading-indicator')
             assert not self.browser.element_exists('.ref-organization-settings .error')
             self.browser.click('#require2FA')
+            self.browser.wait_until('.modal')
+            self.browser.click('.modal .button-primary')
+            self.browser.wait_until_not('.modal')
             self.load_organization_helper("setting 2fa without 2fa enabled")
             self.browser.wait_until('.ref-toast.ref-error')
diff --git a/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx b/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx
index cf94a91bb0..a4f47afd58 100644
--- a/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx
+++ b/tests/js/spec/views/organizationGeneralSettingsView.spec.jsx
@@ -214,4 +214,122 @@ describe('OrganizationGeneralSettingsView', function() {
       done();
     });
   });
+
+  it('enables require2fa but cancels confirm modal', function(done) {
+    let mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'PUT',
+    });
+    let wrapper = mount(
+      <OrganizationGeneralSettingsView params={{orgId: org.slug}} />,
+      TestStubs.routerContext([
+        {
+          organization: TestStubs.Organization({
+            features: ['require-2fa'],
+          }),
+        },
+      ])
+    );
+
+    wrapper.setState({loading: false});
+    setTimeout(() => {
+      wrapper.update();
+      expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
+      wrapper.find('Switch[name="require2FA"]').simulate('click');
+      expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
+
+      // Cancel
+      wrapper
+        .find('Field[name="require2FA"] ModalDialog .modal-footer Button')
+        .first()
+        .simulate('click');
+      expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(0);
+      expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
+      expect(mock).not.toHaveBeenCalled();
+      done();
+    });
+  });
+
+  it('enables require2fa with confirm modal', function(done) {
+    let mock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'PUT',
+    });
+
+    let wrapper = mount(
+      <OrganizationGeneralSettingsView params={{orgId: org.slug}} />,
+      TestStubs.routerContext([
+        {
+          organization: TestStubs.Organization({
+            features: ['require-2fa'],
+          }),
+        },
+      ])
+    );
+
+    wrapper.setState({loading: false});
+    setTimeout(() => {
+      wrapper.update();
+      expect(wrapper.find('Switch[name="require2FA"]')).toHaveLength(1);
+      wrapper.find('Switch[name="require2FA"]').simulate('click');
+      expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(1);
+
+      // Confirm
+      wrapper
+        .find(
+          'Field[name="require2FA"] ModalDialog .modal-footer Button[priority="primary"]'
+        )
+        .simulate('click');
+      expect(wrapper.find('Field[name="require2FA"] ModalDialog')).toHaveLength(0);
+      expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(true);
+      expect(mock).toHaveBeenCalledWith(
+        '/organizations/org-slug/',
+        expect.objectContaining({
+          method: 'PUT',
+          data: {
+            require2FA: true,
+          },
+        })
+      );
+      done();
+    });
+  });
+
+  it('returns to "off" if switch enable fails (e.g. API error)', function(done) {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'PUT',
+      statusCode: 500,
+    });
+
+    let wrapper = mount(
+      <OrganizationGeneralSettingsView params={{orgId: org.slug}} />,
+      TestStubs.routerContext([
+        {
+          organization: TestStubs.Organization({
+            features: ['require-2fa'],
+          }),
+        },
+      ])
+    );
+
+    wrapper.setState({loading: false});
+    setTimeout(() => {
+      wrapper.update();
+      wrapper.find('Switch[name="require2FA"]').simulate('click');
+
+      // Confirm but has API failure
+      wrapper
+        .find(
+          'Field[name="require2FA"] ModalDialog .modal-footer Button[priority="primary"]'
+        )
+        .simulate('click');
+
+      setTimeout(() => {
+        wrapper.update();
+        expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
+        done();
+      });
+    });
+  });
 });
