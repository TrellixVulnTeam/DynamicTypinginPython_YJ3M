commit c1c8be00e3ab8616d62c15f3289a3549f366e276
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jun 22 09:31:56 2018 -0700

    feat(ui): Change <Select2FieldAutocomplete> to react-select (#8735)
    
    * Renames it to `SelectAsyncField` to be consistent
    * Fix `CustomResolutionModal` to work (only component to use it, the rest
     come from existing integrations)
    
    ![](https://cl.ly/1q1J2K1I0z2l/download/Screen%20Recording%202018-06-13%20at%2003.57%20PM.gif)
    
    Depends on https://github.com/getsentry/sentry/pull/8723

diff --git a/src/sentry/static/sentry/app/components/customResolutionModal.jsx b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
index e9e76ba234..451170771b 100644
--- a/src/sentry/static/sentry/app/components/customResolutionModal.jsx
+++ b/src/sentry/static/sentry/app/components/customResolutionModal.jsx
@@ -1,16 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import ReactDOMServer from 'react-dom/server';
 import jQuery from 'jquery';
-import Modal from 'react-bootstrap/lib/Modal';
-import underscore from 'lodash';
+import Modal, {Header, Body, Footer} from 'react-bootstrap/lib/Modal';
 
+import {SelectAsyncField} from 'app/components/forms';
+import {t} from 'app/locale';
+import Button from 'app/components/buttons/button';
 import TimeSince from 'app/components/timeSince';
 import Version from 'app/components/version';
 
-import {Select2FieldAutocomplete} from 'app/components/forms';
-import {t} from 'app/locale';
-
 export default class CustomResolutionModal extends React.Component {
   static propTypes = {
     onSelected: PropTypes.func.isRequired,
@@ -47,29 +45,27 @@ export default class CustomResolutionModal extends React.Component {
     let {version} = this.state;
 
     return (
-      <Modal show={this.props.show} animation={false} onHide={this.props.onCanceled}>
-        <div className="modal-header">
-          <h4>{t('Resolved In')}</h4>
-        </div>
-        <div className="modal-body">
-          <form className="m-b-1">
-            <div className="control-group m-b-1">
-              <h6 className="nav-header">{t('Version')}</h6>
-              <Select2FieldAutocomplete
-                name="version"
-                onChange={v => this.onChange(v)}
-                placeholder={t('e.g. 1.0.4')}
-                url={`/api/0/projects/${orgId}/${projectId}/releases/`}
-                value={version}
-                id={'version'}
-                onResults={results => {
-                  return {results};
-                }}
-                onQuery={query => {
-                  return {query};
-                }}
-                formatResult={release => {
-                  return ReactDOMServer.renderToStaticMarkup(
+      <Modal
+        className="custom-resolution-modal"
+        show={this.props.show}
+        animation={false}
+        onHide={this.props.onCanceled}
+      >
+        <form onSubmit={this.onSubmit}>
+          <Header>{t('Resolved In')}</Header>
+          <Body>
+            <SelectAsyncField
+              label={t('Version')}
+              id="version"
+              name="version"
+              onChange={this.onChange}
+              placeholder={t('e.g. 1.0.4')}
+              url={`/api/0/projects/${orgId}/${projectId}/releases/`}
+              value={version}
+              onResults={results => {
+                return results.map(release => ({
+                  value: release.version,
+                  label: (
                     <div>
                       <strong>
                         <Version version={release.version} anchor={false} />
@@ -79,26 +75,21 @@ export default class CustomResolutionModal extends React.Component {
                         Created <TimeSince date={release.dateCreated} />
                       </small>
                     </div>
-                  );
-                }}
-                formatSelection={item => underscore.escape(item.version)}
-                escapeMarkup={false}
-              />
-            </div>
-          </form>
-        </div>
-        <div className="modal-footer m-t-1">
-          <button
-            type="button"
-            className="btn btn-default"
-            onClick={this.props.onCanceled}
-          >
-            {t('Cancel')}
-          </button>
-          <button type="button" className="btn btn-primary" onClick={this.onSubmit}>
-            {t('Save Changes')}
-          </button>
-        </div>
+                  ),
+                }));
+              }}
+              onQuery={query => ({query})}
+            />
+          </Body>
+          <Footer>
+            <Button type="button" css={{marginRight: 10}} onClick={this.props.onCanceled}>
+              {t('Cancel')}
+            </Button>
+            <Button type="submit" priority="primary">
+              {t('Save Changes')}
+            </Button>
+          </Footer>
+        </form>
       </Modal>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index 4c63126cbf..b219e26c02 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -8,7 +8,7 @@ import EmailField from 'app/components/forms/emailField';
 import NumberField from 'app/components/forms/numberField';
 import PasswordField from 'app/components/forms/passwordField';
 import RangeField from 'app/components/forms/rangeField';
-import Select2FieldAutocomplete from 'app/components/forms/select2FieldAutocomplete';
+import SelectAsyncField from 'app/components/forms/selectAsyncField';
 import Select2Field from 'app/components/forms/select2Field';
 import SelectCreatableField from 'app/components/forms/selectCreatableField';
 import TextField from 'app/components/forms/textField';
@@ -74,7 +74,7 @@ export default class GenericField extends React.Component {
         // it's required (with *) and rely on server validation
         delete props.required;
         if (props.has_autocomplete) {
-          return <Select2FieldAutocomplete {...props} />;
+          return <SelectAsyncField {...props} />;
         }
         return <Select2Field {...props} />;
       default:
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 23a36308f2..97f29fb5e9 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -10,7 +10,7 @@ export {default as NumberField} from './numberField';
 export {default as PasswordField} from './passwordField';
 export {default as RadioBooleanField} from './radioBooleanField';
 export {default as RangeField} from './rangeField';
-export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
+export {default as SelectAsyncField} from './selectAsyncField';
 export {default as Select2Field} from './select2Field';
 export {default as SelectCreatableField} from './selectCreatableField';
 export {default as TextField} from './textField';
diff --git a/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx b/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
deleted file mode 100644
index f8c9fbecf1..0000000000
--- a/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
+++ /dev/null
@@ -1,82 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import Select2Field from 'app/components/forms/select2Field';
-
-class Select2FieldAutocomplete extends Select2Field {
-  getField() {
-    return (
-      <input
-        id={this.getId()}
-        className="form-control"
-        ref="input"
-        type="text"
-        placeholder={this.props.placeholder}
-        onChange={this.onChange.bind(this)}
-        disabled={this.props.disabled}
-        required={this.props.required}
-        value={this.state.value}
-      />
-    );
-  }
-
-  getSelect2Options() {
-    return Object.assign(super.getSelect2Options(), {
-      placeholder: this.props.placeholder || 'Start typing to search for an issue',
-      minimumInputLength: this.props.minimumInputLength,
-      ajax: {
-        url: this.props.url,
-        dataType: 'json',
-        data: this.props.onQuery.bind(this),
-        cache: true,
-        results: this.props.onResults.bind(this),
-        delay: this.props.ajaxDelay,
-      },
-      id: this.props.id,
-      formatResult: this.props.formatResult
-        ? this.props.formatResult.bind(this)
-        : undefined,
-      formatSelection: this.props.formatSelection
-        ? this.props.formatSelection.bind(this)
-        : undefined,
-      formatAjaxError: error => {
-        let resp = error.responseJSON;
-        if (resp && resp.error_type === 'validation') {
-          let message = resp.errors[0] && resp.errors[0].__all__;
-          if (message) {
-            return message;
-          }
-        }
-        return 'Loading failed';
-      },
-    });
-  }
-}
-
-Select2FieldAutocomplete.defaultProps = Object.assign(
-  {
-    onResults: function(data, page) {
-      return {results: data[this.props.name]};
-    },
-    onQuery: function(query, page) {
-      return {autocomplete_query: query, autocomplete_field: this.props.name};
-    },
-    minimumInputLength: null,
-    ajaxDelay: 250,
-  },
-  Select2Field.defaultProps
-);
-
-Select2FieldAutocomplete.propTypes = Object.assign({}, Select2Field.propTypes, {
-  ajaxDelay: PropTypes.number,
-  minimumInputLength: PropTypes.number,
-  formatResult: PropTypes.func,
-  formatSelection: PropTypes.func,
-  onResults: PropTypes.func,
-  onQuery: PropTypes.func,
-  url: PropTypes.string.isRequired,
-  id: PropTypes.any,
-});
-
-delete Select2FieldAutocomplete.propTypes.choices;
-
-export default Select2FieldAutocomplete;
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
new file mode 100644
index 0000000000..b06a9203c4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncControl.jsx
@@ -0,0 +1,126 @@
+import {debounce} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from 'app/locale';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {Client} from 'app/api';
+import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
+
+import SelectControl from './selectControl';
+
+/**
+ * Performs an API request to `url` when menu is initially opened
+ */
+class SelectAsyncControl extends React.Component {
+  static propTypes = {
+    /**
+     * API endpoint URL
+     */
+    url: PropTypes.string.isRequired,
+
+    /**
+     * Parses the results of API call for the select component
+     */
+    onResults: PropTypes.func,
+
+    /**
+     * Additional query parameters when sending API request
+     */
+    onQuery: PropTypes.func,
+
+    value: PropTypes.any,
+  };
+
+  static defaultProps = {
+    placeholder: '--',
+  };
+
+  constructor(props) {
+    super(props);
+    this.api = new Client();
+    this.state = {
+      query: '',
+    };
+    this.cache = {};
+  }
+
+  componentWillUnmount() {
+    if (!this.api) return;
+    this.api.clear();
+    this.api = null;
+  }
+
+  doQuery = debounce(cb => {
+    let {url, onQuery} = this.props;
+    let {query} = this.state;
+
+    if (!this.api) return null;
+
+    return this.api
+      .requestPromise(url, {
+        query: typeof onQuery === 'function' ? onQuery(query) : {query},
+      })
+      .then(data => cb(null, data), err => cb(err));
+  }, 250);
+
+  handleLoadOptions = () => {
+    return new Promise((resolve, reject) => {
+      this.doQuery((err, result) => {
+        if (err) {
+          reject(err);
+        } else {
+          resolve(result);
+        }
+      });
+    }).then(
+      resp => {
+        let {onResults} = this.props;
+
+        // Note `SelectControl` expects this data type:
+        // {
+        //   options: [{ label, value}],
+        // }
+        return {
+          options: typeof onResults === 'function' ? onResults(resp) : resp,
+        };
+      },
+      err => {
+        addErrorMessage(t('There was a problem with the request.'));
+        handleXhrErrorResponse('SelectAsync failed')(err);
+      }
+    );
+  };
+
+  handleInputChange = query => {
+    this.setState({query});
+  };
+
+  render() {
+    let {value} = this.props;
+
+    return (
+      <SelectControl
+        value={value}
+        defaultOptions
+        loadOptions={this.handleLoadOptions}
+        onInputChange={this.handleInputChange}
+        onClear={this.handleClear}
+        async
+        cache={this.cache}
+        {...this.props}
+      />
+    );
+  }
+}
+
+export default SelectAsyncControl;
+
+// TODO: This needs an enzyme update or else it breaks tests
+
+// function forwardRef(props, ref) {
+// return <SelectAsyncControl {...props} forwardedRef={ref} />;
+// }
+// forwardRef.displayName = 'forwardRef(SelectAsyncField)';
+
+// export default React.forwardRef(forwardRef);
diff --git a/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
new file mode 100644
index 0000000000..3a615a7935
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/selectAsyncField.jsx
@@ -0,0 +1,74 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import SelectAsyncControl from './selectAsyncControl';
+import SelectField from './selectField';
+
+class SelectAsyncField extends SelectField {
+  static propTypes = {
+    ...SelectField.propTypes,
+    ...SelectAsyncControl.propTypes,
+    /**
+     * API endpoint URL
+     */
+    url: PropTypes.string.isRequired,
+
+    /**
+     * Parses the results of API call for the select component
+     */
+    onResults: PropTypes.func,
+
+    /**
+     * Additional query parameters when sending API request
+     */
+    onQuery: PropTypes.func,
+
+    /**
+     * Field ID
+     */
+    id: PropTypes.any,
+  };
+
+  static defaultProps = {
+    ...SelectField.defaultProps,
+    placeholder: 'Start typing to search for an issue',
+  };
+
+  onResults = data => {
+    let {name} = this.props;
+    let results = data && data[name];
+
+    return (results && results.map(({id, text}) => ({value: id, label: text}))) || [];
+  };
+
+  onQuery = query => {
+    // Used by legacy integrations
+    return {autocomplete_query: query, autocomplete_field: this.props.name};
+  };
+
+  onChange = opt => {
+    let {onChange} = this.props;
+    const value = opt ? opt.value : null;
+    this.setValue(value);
+
+    if (typeof onChange === 'function') {
+      onChange(value);
+    }
+  };
+
+  getField() {
+    return (
+      <SelectAsyncControl
+        value={this.state.value}
+        onClear={this.handleClear}
+        onResults={this.onResults}
+        onQuery={this.onQuery}
+        {...this.props}
+        id={this.getId()}
+        onChange={this.onChange}
+      />
+    );
+  }
+}
+
+export default SelectAsyncField;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index af3cd6c332..c17eba7b4f 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -3,9 +3,7 @@ import React from 'react';
 
 import BooleanField from 'app/views/settings/components/forms/booleanField';
 import RangeField from 'app/views/settings/components/forms/rangeField';
-// import Select2FieldAutocomplete from './select2FieldAutocomplete';
 import SelectField from 'app/views/settings/components/forms/selectField';
-// import SelectCreatableField from './selectCreatableField';
 import TextField from 'app/views/settings/components/forms/textField';
 import TextareaField from 'app/views/settings/components/forms/textareaField';
 import RadioField from 'app/views/settings/components/forms/radioField';
@@ -49,7 +47,6 @@ export default class FieldFromConfig extends React.Component {
   render() {
     let {field, ...otherProps} = this.props;
 
-    // TODO(billy) Not sure of structure yet
     let props = {
       ...otherProps,
       ...field,
@@ -71,7 +68,10 @@ export default class FieldFromConfig extends React.Component {
         if (props.multiline) {
           return <TextareaField {...props} />;
         }
-        // if (props.choices) return <SelectCreatableField {...props} />;
+
+        // TODO(billy): Handle `props.choices` with a "creatable" SelectField
+        // if (props.choices) return <Select2TextField {...props} />;
+
         return <TextField {...props} />;
       case 'number':
         return <InputField {...props} type="number" />;
@@ -84,9 +84,12 @@ export default class FieldFromConfig extends React.Component {
         // so just make it look like it's required in field (with *),
         // and rely on server validation
         delete props.required;
+
+        // TODO(billy): Handle `props.has_autocomplete` with an "async" SelectField
         // if (props.has_autocomplete) {
-        // return <Select2FieldAutocomplete {...props} />;
+        // return <SelectAsyncField {...props} />;
         // }
+
         return <SelectField {...props} />;
       case 'radio':
         return <RadioField {...props} />;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index f70175bb2d..ad3a7fd758 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -2738,6 +2738,12 @@ ul.radio-inputs {
   }
 }
 
+.custom-resolution-modal {
+  .modal-content {
+    overflow: visible;
+  }
+}
+
 // Sudo Modal
 .sudo-modal.modal {
   .modal-header {
diff --git a/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap b/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
index b56ea0605f..d8ef27b528 100644
--- a/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
@@ -6,6 +6,7 @@ exports[`CustomResolutionModal render() renders correctly 1`] = `
   autoFocus={true}
   backdrop={true}
   bsClass="modal"
+  className="custom-resolution-modal"
   dialogComponentClass={[Function]}
   enforceFocus={true}
   keyboard={true}
@@ -26,68 +27,56 @@ exports[`CustomResolutionModal render() renders correctly 1`] = `
   restoreFocus={true}
   show={false}
 >
-  <div
-    className="modal-header"
+  <form
+    onSubmit={[Function]}
   >
-    <h4>
-      Resolved In
-    </h4>
-  </div>
-  <div
-    className="modal-body"
-  >
-    <form
-      className="m-b-1"
+    <ModalHeader
+      bsClass="modal-header"
+      closeButton={false}
+      closeLabel="Close"
     >
-      <div
-        className="control-group m-b-1"
-      >
-        <h6
-          className="nav-header"
-        >
-          Version
-        </h6>
-        <Select2FieldAutocomplete
-          ajaxDelay={250}
-          allowClear={false}
-          allowEmpty={false}
-          disabled={false}
-          escapeMarkup={false}
-          formatResult={[Function]}
-          formatSelection={[Function]}
-          hideErrorMessage={false}
-          id="version"
-          minimumInputLength={null}
-          multiple={false}
-          name="version"
-          onChange={[Function]}
-          onQuery={[Function]}
-          onResults={[Function]}
-          placeholder="e.g. 1.0.4"
-          required={false}
-          url="/api/0/projects/org/project/releases/"
-          value=""
-        />
-      </div>
-    </form>
-  </div>
-  <div
-    className="modal-footer m-t-1"
-  >
-    <button
-      className="btn btn-default"
-      onClick={[Function]}
-      type="button"
+      Resolved In
+    </ModalHeader>
+    <ModalBody
+      bsClass="modal-body"
+      componentClass="div"
     >
-      Cancel
-    </button>
-    <button
-      className="btn btn-primary"
-      onClick={[Function]}
-      type="button"
+      <SelectAsyncField
+        clearable={true}
+        disabled={false}
+        hideErrorMessage={false}
+        id="version"
+        label="Version"
+        name="version"
+        onChange={[Function]}
+        onQuery={[Function]}
+        onResults={[Function]}
+        placeholder="e.g. 1.0.4"
+        required={false}
+        url="/api/0/projects/org/project/releases/"
+        value=""
+      />
+    </ModalBody>
+    <ModalFooter
+      bsClass="modal-footer"
+      componentClass="div"
     >
-      Save Changes
-    </button>
-  </div>
+      <Button
+        className="css-lvyu5j"
+        disabled={false}
+        onClick={[Function]}
+        type="button"
+      >
+        Cancel
+      </Button>
+      <Button
+        disabled={false}
+        priority="primary"
+        type="submit"
+      >
+        Save Changes
+      </Button>
+    </ModalFooter>
+  </form>
 </Modal>
 `;
diff --git a/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap b/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
index 06f1282f69..2165057dd1 100644
--- a/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
+++ b/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
@@ -31,6 +31,7 @@ exports[`ResolveActions with confirmation step renders 1`] = `
         autoFocus={true}
         backdrop={true}
         bsClass="modal"
+        className="custom-resolution-modal"
         dialogComponentClass={[Function]}
         enforceFocus={true}
         keyboard={true}
@@ -480,6 +481,7 @@ exports[`ResolveActions without confirmation renders 1`] = `
         autoFocus={true}
         backdrop={true}
         bsClass="modal"
+        className="custom-resolution-modal"
         dialogComponentClass={[Function]}
         enforceFocus={true}
         keyboard={true}
diff --git a/tests/js/spec/components/forms/selectAsyncField.spec.jsx b/tests/js/spec/components/forms/selectAsyncField.spec.jsx
new file mode 100644
index 0000000000..4eb9a4ea9e
--- /dev/null
+++ b/tests/js/spec/components/forms/selectAsyncField.spec.jsx
@@ -0,0 +1,75 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Form, SelectAsyncField} from 'app/components/forms';
+
+describe('SelectAsyncField', function() {
+  let api;
+
+  beforeEach(function() {
+    api = MockApiClient.addMockResponse({
+      url: '/foo/bar/',
+      query: {
+        autocomplete_query: 'baz',
+        autocomplete_field: 'fieldName',
+      },
+      body: {
+        fieldName: [{id: 'baz', text: 'Baz Label'}],
+      },
+    });
+  });
+
+  it('supports autocomplete arguments from an integration', async function() {
+    let wrapper = mount(<SelectAsyncField url="/foo/bar/" name="fieldName" />);
+
+    wrapper.find('input[id="id-fieldName"]').simulate('change', {target: {value: 'baz'}});
+
+    expect(api).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    // Is in select menu
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: 'baz',
+        label: 'Baz Label',
+      }),
+    ]);
+  });
+
+  it('with Form context', async function() {
+    let submitMock = jest.fn();
+    let wrapper = mount(
+      <Form onSubmit={submitMock}>
+        <SelectAsyncField url="/foo/bar/" name="fieldName" />
+      </Form>,
+      {}
+    );
+
+    wrapper.find('input[id="id-fieldName"]').simulate('change', {target: {value: 'baz'}});
+
+    await tick();
+    wrapper.update();
+
+    // Is in select menu
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: 'baz',
+        label: 'Baz Label',
+      }),
+    ]);
+
+    // Select item
+    wrapper.find('input[id="id-fieldName"]').simulate('keyDown', {keyCode: 13});
+
+    wrapper.find('Form').simulate('submit');
+    expect(submitMock).toHaveBeenCalledWith(
+      {
+        fieldName: 'baz',
+      },
+      expect.anything(),
+      expect.anything()
+    );
+  });
+});
