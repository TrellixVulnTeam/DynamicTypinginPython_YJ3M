commit e8a1481afd782c7e7e4d2230ff784aa1be3e3ed0
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Feb 11 21:07:18 2013 -0800

    Correct some logic and a simple integration test

diff --git a/src/sentry/counters/redis.py b/src/sentry/counters/redis.py
index 5ab97c5e7c..bcfea14bc8 100644
--- a/src/sentry/counters/redis.py
+++ b/src/sentry/counters/redis.py
@@ -47,7 +47,7 @@ class RedisCounter(Counter):
         now = time.time()
         with self.conn.map() as conn:
             keys = [self._make_key('global', '1', now)]
-            keys.extend(self._make_key(k, v, now) for k, v in kwargs.iteritems())
+            keys.extend(self._make_key(k, v, now, False) for k, v in kwargs.iteritems())
             if created:
                 keys.extend(self._make_key(k, v, now, True) for k, v in kwargs.iteritems())
             for key in keys:
@@ -66,8 +66,8 @@ class RedisCounter(Counter):
         results = []
         with self.conn.map() as conn:
             for minute in xrange(minutes):
-                key = self._make_key(key, value, now - (minutes * 60), unique)
-                results.append(conn.get(key))
+                redis_key = self._make_key(key, value, now - (minute * 60), unique)
+                results.append(conn.get(redis_key))
 
         return sum(int(r or 0) for r in results)
 
diff --git a/tests/sentry/counters/redis/tests.py b/tests/sentry/counters/redis/tests.py
index 694b1b00d7..1a4cc0c9f7 100644
--- a/tests/sentry/counters/redis/tests.py
+++ b/tests/sentry/counters/redis/tests.py
@@ -37,3 +37,19 @@ class RedisCounterTest(TestCase):
         assert self.counter._make_key('team_id', 1, now, unique=True) == 'sentry.counters:22677571:1:team_id=1'
 
         assert self.counter._make_key('project_id', 'foo', now, unique=True) == 'sentry.counters:22677571:1:project_id=foo'
+
+    def test_all_the_things(self):
+        self.counter.incr(1, team_id=1, project_id=1, group_id=1, created=False)
+        self.counter.incr(1, team_id=1, project_id=1, group_id=1, created=True)
+        self.counter.incr(1, team_id=1, project_id=2, group_id=1, created=False)
+        self.counter.incr(2, team_id=1, project_id=2, group_id=2, created=True)
+        assert self.counter.total('team_id', 1) == 5
+        assert self.counter.total('project_id', 1) == 2
+        assert self.counter.total('project_id', 2) == 3
+        assert self.counter.total('group_id', 1) == 3
+        assert self.counter.total('group_id', 2) == 2
+        assert self.counter.unique('team_id', 1) == 3
+        assert self.counter.unique('project_id', 1) == 1
+        assert self.counter.unique('project_id', 2) == 2
+        assert self.counter.unique('group_id', 1) == 1
+        assert self.counter.unique('group_id', 2) == 2
