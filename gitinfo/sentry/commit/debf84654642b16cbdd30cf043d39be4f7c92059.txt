commit debf84654642b16cbdd30cf043d39be4f7c92059
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 6 19:01:51 2012 -0700

    Additional client developer guidelines

diff --git a/docs/developer/client/index.rst b/docs/developer/client/index.rst
index aa1fc92d86..80b5d3f85d 100644
--- a/docs/developer/client/index.rst
+++ b/docs/developer/client/index.rst
@@ -25,13 +25,38 @@ almost identical no matter the language:
 
   ::
 
-      println("Your exception was recorded as %s", $resultId);
+      println('Your exception was recorded as %s', $resultId);
 
-The standard methods as of writing which all clients are expected to provide are:
+The constructor ideally allows several configuration methods. The first argument should
+always be the DSN value (if possible), followed by an optional secondary argument which is
+a map of options::
+
+    client = new RavenClient('http://public_key:secret_key@example.com/default', {
+        'tags': ['foo', 'bar']
+    })
+
+.. note:: If an empty DSN is passed, you should treat it as valid option which signifies disabling the client.
+
+Which options you support is up to you, but ideally you would provide defaults for generic values
+that can be passed to the capture methods.
+
+Once you accept the options, you should output a logging message describing whether the client has been configured
+actively (as in, it will send to the remote server), or if it has been disabled. This should be done with whatever
+standard logging module is available for your platform.
+
+Additionally, you should provide methods (depending on the platform) which allow for capturing of a basic message and
+an exception-type:
 
 * RavenClient::captureMessage(string $message)
 * RavenClient::captureException(exception $exception)
 
+If your platform supports block statements, it is recommend you provide something
+like the following::
+
+    with client.captureExceptions(tags=['foo'], etc):
+        # do something that will cause an error
+        1 / 0
+
 Parsing the DSN
 ---------------
 
@@ -56,6 +81,13 @@ You should parse the following settings:
 If any of these values are not present, the client should notify the user immediately
 that they've misconfigured the client.
 
+The protocol value may also include a transport option. For example, in the Python client several
+transports are available on top of HTTP:
+
+* ``gevent+http``
+* ``threaded+http``
+* ``zmq+http``
+
 Building the JSON Packet
 ------------------------
 
@@ -65,18 +97,18 @@ which also means its expected to be base64-encoded.
 For example, with an included Exception event, a basic JSON body might resemble the following::
 
         {
-            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
-            "project": "default",
-            "culprit": "my.module.function_name",
-            "timestamp": "2011-05-02T17:41:36",
-            "message": "SyntaxError: Wattttt!",
-            "tags": {
-                "ios_version": "4.0"
+            'event_id': 'fc6d8c0c43fc4630ad850ee518f1b9d0',
+            'project': 'default',
+            'culprit': 'my.module.function_name',
+            'timestamp': '2011-05-02T17:41:36',
+            'message': 'SyntaxError: Wattttt!',
+            'tags': {
+                'ios_version': '4.0'
             },
-            "sentry.interfaces.Exception": {
-                "type": "SyntaxError":
-                "value": "Wattttt!",
-                "module": "__builtins__"
+            'sentry.interfaces.Exception': {
+                'type': 'SyntaxError':
+                'value': 'Wattttt!',
+                'module': '__builtins__'
             }
         }
 
@@ -89,7 +121,7 @@ The following attributes are required for all events:
     ::
 
         {
-            "project": "default"
+            'project': 'default'
         }
 
 .. data:: event_id
@@ -99,7 +131,7 @@ The following attributes are required for all events:
     ::
 
         {
-            "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0"
+            'event_id': 'fc6d8c0c43fc4630ad850ee518f1b9d0'
         }
 
 .. data:: message
@@ -109,7 +141,7 @@ The following attributes are required for all events:
     ::
 
         {
-            "message": "SyntaxError: Wattttt!"
+            'message': 'SyntaxError: Wattttt!'
         }
 
 .. data:: timestamp
@@ -125,7 +157,7 @@ The following attributes are required for all events:
     ::
 
         {
-            "timestamp": "2011-05-02T17:41:36"
+            'timestamp': '2011-05-02T17:41:36'
         }
 
 .. data:: level
@@ -140,7 +172,7 @@ The following attributes are required for all events:
     ::
 
         {
-            "level": "warn"
+            'level': 'warn'
         }
 
 .. data:: logger
@@ -152,7 +184,7 @@ The following attributes are required for all events:
     ::
 
         {
-            "logger": "my.logger.name"
+            'logger': 'my.logger.name'
         }
 
 Additionally, there are several optional values which Sentry recognizes and are
@@ -165,7 +197,7 @@ highly encouraged:
     ::
 
         {
-            "culprit": "my.module.function_name"
+            'culprit': 'my.module.function_name'
         }
 
 .. data:: tags
@@ -175,18 +207,18 @@ highly encouraged:
     ::
 
         {
-            "tags": {
-                "ios_version": "4.0",
-                "context": "production"
+            'tags': {
+                'ios_version': '4.0',
+                'context': 'production'
             }
         }
 
     ::
 
         {
-            "tags": [
-                ["ios_version", "4.0"],
-                ["context", "production"]
+            'tags': [
+                ['ios_version', '4.0'],
+                ['context', 'production']
             ]
         }
 
@@ -197,7 +229,7 @@ highly encouraged:
     ::
 
         {
-            "server_name": "foo.example.com"
+            'server_name': 'foo.example.com'
         }
 
 .. data:: modules
@@ -207,9 +239,9 @@ highly encouraged:
     ::
 
         {
-            "modules": [
+            'modules': [
                 {
-                    "my.module.name": "1.0"
+                    'my.module.name': '1.0'
                 }
             ]
         }
@@ -221,9 +253,9 @@ highly encouraged:
     ::
 
         {
-            "extra": {
-                "my_key": 1,
-                "some_other_value": "foo bar"
+            'extra': {
+                'my_key': 1,
+                'some_other_value': 'foo bar'
             }
         }
 
@@ -245,13 +277,13 @@ An authentication header is expected to be sent along with the message body, whi
 
 .. data:: sentry_version
 
-    The protocol version. This should be sent as the value "2.0".
+    The protocol version. This should be sent as the value '2.0'.
 
 .. data:: sentry_client
 
     An arbitrary string which identifies your client, including its version.
 
-    For example, the Python client might send this as "raven-python/1.0"
+    For example, the Python client might send this as 'raven-python/1.0'
 
 .. data:: sentry_timestamp
 
@@ -277,14 +309,14 @@ The request body should then somewhat resemble the following::
         sentry_key=b70a31b3510c4cf793964a185cfe1fd0, sentry_client=raven-python/1.0
 
     {
-        "project": "default",
-        "event_id": "fc6d8c0c43fc4630ad850ee518f1b9d0",
-        "culprit": "my.module.function_name",
-        "timestamp": "2011-05-02T17:41:36",
-        "message": "SyntaxError: Wattttt!"
-        "sentry.interfaces.Exception": {
-            "type": "SyntaxError":
-            "value": "Wattttt!",
-            "module": "__builtins__"
+        'project': 'default',
+        'event_id': 'fc6d8c0c43fc4630ad850ee518f1b9d0',
+        'culprit': 'my.module.function_name',
+        'timestamp': '2011-05-02T17:41:36',
+        'message': 'SyntaxError: Wattttt!'
+        'sentry.interfaces.Exception': {
+            'type': 'SyntaxError':
+            'value': 'Wattttt!',
+            'module': '__builtins__'
         }
     }
