commit fe2794872acfcae9823c0e879d63b430486a94b8
Author: Scott Cooper <scttcper@gmail.com>
Date:   Fri Jun 26 10:03:52 2020 -0700

    feat(alerts): Create alert from transaction summary (#19521)

diff --git a/src/sentry/static/sentry/app/components/createAlertButton.tsx b/src/sentry/static/sentry/app/components/createAlertButton.tsx
new file mode 100644
index 0000000000..9bcb8dc5bf
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/createAlertButton.tsx
@@ -0,0 +1,267 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {Project, Organization} from 'app/types';
+import {t, tct} from 'app/locale';
+import {IconInfo, IconClose, IconSiren} from 'app/icons';
+import Button from 'app/components/button';
+import EventView from 'app/utils/discover/eventView';
+import Alert from 'app/components/alert';
+import space from 'app/styles/space';
+import {explodeFieldString} from 'app/utils/discover/fields';
+import {
+  errorFieldConfig,
+  transactionFieldConfig,
+} from 'app/views/settings/incidentRules/constants';
+
+/**
+ * Discover query supports more features than alert rules
+ * To create an alert rule from a discover query, some parameters need to be adjusted
+ */
+type IncompatibleQueryProperties = {
+  /**
+   * Must have exactly one project selected and not -1 (all projects)
+   */
+  hasProjectError: boolean;
+  /**
+   * Must have zero or one environments
+   */
+  hasEnvironmentError: boolean;
+  /**
+   * event.type must be error or transaction
+   */
+  hasEventTypeError: boolean;
+  hasYAxisError: boolean;
+};
+
+type AlertProps = {
+  incompatibleQuery: IncompatibleQueryProperties;
+  eventView: EventView;
+  /**
+   * Dismiss alert
+   */
+  onClose: () => void;
+};
+
+/**
+ * Displays messages to the user on what needs to change in their query
+ */
+function IncompatibleQueryAlert({incompatibleQuery, eventView, onClose}: AlertProps) {
+  const {
+    hasProjectError,
+    hasEnvironmentError,
+    hasEventTypeError,
+    hasYAxisError,
+  } = incompatibleQuery;
+
+  const totalErrors = Object.values(incompatibleQuery).filter(val => val === true).length;
+
+  return (
+    <StyledAlert type="warning" icon={<IconInfo color="yellow400" size="sm" />}>
+      {totalErrors === 1 && (
+        <React.Fragment>
+          {hasProjectError &&
+            t('An alert can use data from only one Project. Select one and try again.')}
+          {hasEnvironmentError &&
+            t(
+              'An alert supports data from a single Environment or All Environments. Pick one try again.'
+            )}
+          {hasEventTypeError &&
+            tct(
+              'An alert needs a filter of [error:event.type:error] or [transaction:event.type:transaction]. Use one of these and try again.',
+              {
+                error: <StyledCode />,
+                transaction: <StyledCode />,
+              }
+            )}
+          {hasYAxisError &&
+            tct(
+              'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',
+              {
+                yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,
+              }
+            )}
+        </React.Fragment>
+      )}
+      {totalErrors > 1 && (
+        <React.Fragment>
+          {t('Yikes! That button didn’t work. Please fix the following problems:')}
+          <StyledUnorderedList>
+            {hasProjectError && <li>{t('Select one Project.')}</li>}
+            {hasEnvironmentError && (
+              <li>{t('Select a single Environment or All Environments.')}</li>
+            )}
+            {hasEventTypeError && (
+              <li>
+                {tct(
+                  'Use the filter [error:event.type:error] or [transaction:event.type:transaction].',
+                  {
+                    error: <StyledCode />,
+                    transaction: <StyledCode />,
+                  }
+                )}
+              </li>
+            )}
+            {hasYAxisError && (
+              <li>
+                {tct(
+                  'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',
+                  {
+                    yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,
+                  }
+                )}
+              </li>
+            )}
+          </StyledUnorderedList>
+        </React.Fragment>
+      )}
+      <StyledCloseButton
+        icon={<IconClose color="yellow400" size="sm" isCircled />}
+        aria-label={t('Close')}
+        size="zero"
+        onClick={onClose}
+        borderless
+      />
+    </StyledAlert>
+  );
+}
+
+type Props = React.ComponentProps<typeof Button> & {
+  className?: string;
+  projects: Project[];
+  /**
+   * Discover query used to create the alert
+   */
+  eventView: EventView;
+  organization: Organization;
+  /**
+   * Called when the current eventView does not meet the requirements of alert rules
+   * @returns a function that takes an alert close function argument
+   */
+  onIncompatibleQuery: (
+    incompatibleAlertNoticeFn: (onAlertClose: () => void) => React.ReactNode
+  ) => void;
+  /**
+   * Called when the user is redirected to the alert builder
+   */
+  onSuccess: () => void;
+};
+
+function incompatibleYAxis(eventView: EventView): boolean {
+  const column = explodeFieldString(eventView.getYAxis());
+  if (column.kind === 'field') {
+    return true;
+  }
+
+  const eventTypeMatch = eventView.query.match(/event\.type:(transaction|error)/);
+  if (!eventTypeMatch) {
+    return false;
+  }
+
+  const dataset = eventTypeMatch[1];
+  const yAxisConfig = dataset === 'error' ? errorFieldConfig : transactionFieldConfig;
+
+  const invalidFunction = !yAxisConfig.aggregations.includes(column.function[0]);
+  // Allow empty parameters
+  const invalidParameter = !['', ...yAxisConfig.fields].includes(column.function[1]);
+
+  return invalidFunction || invalidParameter;
+}
+
+/**
+ * Provide a button that can create an alert from an event view.
+ * Emits incompatible query issues on click
+ */
+function CreateAlertButton({
+  projects,
+  eventView,
+  organization,
+  onIncompatibleQuery,
+  onSuccess,
+  ...buttonProps
+}: Props) {
+  // Must have exactly one project selected and not -1 (all projects)
+  const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;
+  // Must have one or zero environments
+  const hasEnvironmentError = eventView.environment.length > 1;
+  // Must have event.type of error or transaction
+  const hasEventTypeError =
+    !eventView.query.includes('event.type:error') &&
+    !eventView.query.includes('event.type:transaction');
+  // yAxis must be a function and enabled on alerts
+  const hasYAxisError = incompatibleYAxis(eventView);
+  const errors: IncompatibleQueryProperties = {
+    hasProjectError,
+    hasEnvironmentError,
+    hasEventTypeError,
+    hasYAxisError,
+  };
+  const project = projects.find(p => p.id === `${eventView.project[0]}`);
+  const hasErrors = Object.values(errors).some(x => x);
+  const to = hasErrors
+    ? undefined
+    : {
+        pathname: `/settings/${organization.slug}/projects/${project?.slug}/alerts/new/`,
+        query: {
+          ...eventView.generateQueryStringObject(),
+          createFromDiscover: true,
+        },
+      };
+
+  const handleClick = (event: React.MouseEvent) => {
+    if (hasErrors) {
+      event.preventDefault();
+      onIncompatibleQuery((onAlertClose: () => void) => (
+        <IncompatibleQueryAlert
+          incompatibleQuery={errors}
+          eventView={eventView}
+          onClose={onAlertClose}
+        />
+      ));
+      return;
+    }
+
+    onSuccess();
+  };
+
+  return (
+    <Button
+      type="button"
+      icon={<IconSiren />}
+      to={to}
+      onClick={handleClick}
+      {...buttonProps}
+    >
+      {t('Create alert')}
+    </Button>
+  );
+}
+
+export default CreateAlertButton;
+
+const StyledAlert = styled(Alert)`
+  color: ${p => p.theme.gray700};
+  margin-bottom: ${space(2)};
+`;
+
+const StyledUnorderedList = styled('ul')`
+  margin-bottom: 0;
+`;
+
+const StyledCode = styled('code')`
+  background-color: transparent;
+  padding: 0;
+`;
+
+const StyledCloseButton = styled(Button)`
+  transition: opacity 0.1s linear;
+  position: absolute;
+  top: 3px;
+  right: 0;
+
+  &:hover,
+  &:focus {
+    background-color: transparent;
+    opacity: 1;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index c28a9620d5..0056754aef 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -15,6 +15,7 @@ import {fetchTotalCount} from 'app/actionCreators/events';
 import {loadOrganizationTags} from 'app/actionCreators/tags';
 import {fetchProjectsCount} from 'app/actionCreators/projects';
 import Alert from 'app/components/alert';
+import CreateAlertButton from 'app/components/createAlertButton';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
@@ -54,6 +55,7 @@ type State = {
   showTags: boolean;
   needConfirmation: boolean;
   confirmedQuery: boolean;
+  incompatibleAlertNotice: React.ReactNode;
 };
 const SHOW_TAGS_STORAGE_KEY = 'discover2:show-tags';
 
@@ -68,7 +70,7 @@ class Results extends React.Component<Props, State> {
     return {...prevState, eventView};
   }
 
-  state = {
+  state: State = {
     eventView: EventView.fromLocation(this.props.location),
     error: '',
     errorCode: 200,
@@ -76,6 +78,7 @@ class Results extends React.Component<Props, State> {
     showTags: readShowTagsState(),
     needConfirmation: false,
     confirmedQuery: false,
+    incompatibleAlertNotice: null,
   };
 
   componentDidMount() {
@@ -320,6 +323,23 @@ class Results extends React.Component<Props, State> {
     return url;
   };
 
+  handleIncompatibleQuery: React.ComponentProps<
+    typeof CreateAlertButton
+  >['onIncompatibleQuery'] = incompatibleAlertNoticeFn => {
+    const {organization} = this.props;
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.create_alert_incompatible',
+      eventName: 'Discoverv2: Creating an alert from discover was incompatible',
+      organization_id: parseInt(organization.id, 10),
+    });
+
+    const incompatibleAlertNotice = incompatibleAlertNoticeFn(() =>
+      this.setState({incompatibleAlertNotice: null})
+    );
+
+    this.setState({incompatibleAlertNotice});
+  };
+
   renderError(error: string) {
     if (!error) {
       return null;
@@ -343,6 +363,7 @@ class Results extends React.Component<Props, State> {
       errorCode,
       totalValues,
       showTags,
+      incompatibleAlertNotice,
       confirmedQuery,
     } = this.state;
     const query = decodeScalar(location.query.query) || '';
@@ -357,9 +378,11 @@ class Results extends React.Component<Props, State> {
               organization={organization}
               location={location}
               eventView={eventView}
+              onIncompatibleAlertQuery={this.handleIncompatibleQuery}
             />
             <Layout.Body>
               <Top fullWidth>
+                {incompatibleAlertNotice}
                 {this.renderError(error)}
                 <StyledSearchBar
                   organization={organization}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
index 73c1bf90c0..f8228ec971 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -11,6 +11,7 @@ import {t} from 'app/locale';
 import withApi from 'app/utils/withApi';
 import EventView from 'app/utils/discover/eventView';
 import * as Layout from 'app/components/layouts/thirds';
+import CreateAlertButton from 'app/components/createAlertButton';
 
 import DiscoverBreadcrumb from './breadcrumb';
 import EventInputName from './eventInputName';
@@ -22,6 +23,9 @@ type Props = {
   location: Location;
   errorCode: number;
   eventView: EventView;
+  onIncompatibleAlertQuery: React.ComponentProps<
+    typeof CreateAlertButton
+  >['onIncompatibleQuery'];
 };
 
 type State = {
@@ -62,7 +66,13 @@ class ResultsHeader extends React.Component<Props, State> {
   }
 
   render() {
-    const {organization, location, errorCode, eventView} = this.props;
+    const {
+      organization,
+      location,
+      errorCode,
+      eventView,
+      onIncompatibleAlertQuery,
+    } = this.props;
     const {savedQuery, loading} = this.state;
 
     const renderDisabled = p => (
@@ -110,6 +120,7 @@ class ResultsHeader extends React.Component<Props, State> {
                 savedQueryLoading={loading}
                 disabled={!hasFeature || (errorCode >= 400 && errorCode < 500)}
                 updateCallback={() => this.fetchData()}
+                onIncompatibleAlertQuery={onIncompatibleAlertQuery}
               />
             )}
           </Feature>
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index c3e676ce29..1baa2a8051 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -12,11 +12,12 @@ import DropdownButton from 'app/components/dropdownButton';
 import DropdownControl from 'app/components/dropdownControl';
 import Input from 'app/components/forms/input';
 import space from 'app/styles/space';
-import {IconBookmark, IconDelete, IconSiren} from 'app/icons';
+import {IconBookmark, IconDelete} from 'app/icons';
 import Feature from 'app/components/acl/feature';
 import EventView from 'app/utils/discover/eventView';
 import withProjects from 'app/utils/withProjects';
-import Tooltip from 'app/components/tooltip';
+import CreateAlertButton from 'app/components/createAlertButton';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 
 import {getDiscoverLandingUrl} from '../utils';
 import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
@@ -42,6 +43,9 @@ type Props = DefaultProps & {
   savedQueryLoading: boolean;
   projects: Project[];
   updateCallback: () => void;
+  onIncompatibleAlertQuery: React.ComponentProps<
+    typeof CreateAlertButton
+  >['onIncompatibleQuery'];
 };
 
 type State = {
@@ -187,6 +191,15 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     });
   };
 
+  handleCreateAlertSuccess = () => {
+    const {organization} = this.props;
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.create_alert',
+      eventName: 'Discoverv2: Create alert from discover',
+      organization_id: parseInt(organization.id, 10),
+    });
+  };
+
   renderButtonSaveAs() {
     const {disabled} = this.props;
     const {isNewQuery, isEditingQuery, queryName} = this.state;
@@ -293,46 +306,18 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
   }
 
   renderButtonCreateAlert() {
-    const {eventView, organization, projects} = this.props;
-    // Must have exactly one project selected and not -1 (all projects)
-    const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;
-    // Must have one or zero environments
-    const hasEnvironmentError = eventView.environment.length > 1;
-    // Must have event.type of error or transaction
-    const hasEventTypeError =
-      !eventView.query.includes('event.type:error') &&
-      !eventView.query.includes('event.type:transaction');
-    const project = projects.find(p => p.id === String(eventView.project[0]));
-    const isDisabled = hasProjectError || hasEnvironmentError || hasEventTypeError;
-
-    // TODO(scttcper): Implement real design for errors
-    let errorText = '';
-    if (hasProjectError) {
-      errorText = 'One project must be selected';
-    } else if (hasEnvironmentError) {
-      errorText = 'One or all environments is required';
-    } else if (hasEventTypeError) {
-      errorText = 'Either event.type:error or event.type:transaction is required';
-    }
+    const {eventView, organization, projects, onIncompatibleAlertQuery} = this.props;
 
     return (
       <Feature features={['create-from-discover']} organization={organization}>
-        <Tooltip title={errorText} disabled={!isDisabled}>
-          <Button
-            disabled={isDisabled || project === undefined}
-            to={{
-              pathname: `/settings/${organization.slug}/projects/${project?.slug}/alerts/new/`,
-              query: {
-                ...eventView.generateQueryStringObject(),
-                createFromDiscover: true,
-              },
-            }}
-            icon={<IconSiren />}
-            data-test-id="discover2-create-from-discover"
-          >
-            {t('Create alert')}
-          </Button>
-        </Tooltip>
+        <CreateAlertButton
+          eventView={eventView}
+          organization={organization}
+          projects={projects}
+          onIncompatibleQuery={onIncompatibleAlertQuery}
+          onSuccess={this.handleCreateAlertSuccess}
+          data-test-id="discover2-create-from-discover"
+        />
       </Feature>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
index adc7689a8a..a227d717f1 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
@@ -3,10 +3,11 @@ import {Location} from 'history';
 import styled from '@emotion/styled';
 import {browserHistory} from 'react-router';
 
-import {Organization} from 'app/types';
+import {Organization, Project} from 'app/types';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import DiscoverButton from 'app/components/discoverButton';
+import CreateAlertButton from 'app/components/createAlertButton';
 import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
 import PanelTable from 'app/components/panels/panelTable';
 import Link from 'app/components/links/link';
@@ -21,6 +22,8 @@ import {generateEventSlug} from 'app/utils/discover/urls';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {decodeScalar} from 'app/utils/queryString';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
+import withProjects from 'app/utils/withProjects';
+import Feature from 'app/components/acl/feature';
 import {
   TOP_TRANSACTION_LIMIT,
   TOP_TRANSACTION_FILTERS,
@@ -34,9 +37,18 @@ type WrapperProps = {
   location: Location;
   organization: Organization;
   transactionName: string;
+  projects: Project[];
 };
 
-class TransactionList extends React.PureComponent<WrapperProps> {
+type State = {
+  incompatibleAlertNotice: React.ReactNode;
+};
+
+class TransactionList extends React.Component<WrapperProps, State> {
+  state: State = {
+    incompatibleAlertNotice: null,
+  };
+
   getTransactionSort(location: Location) {
     const urlParam = decodeScalar(location.query.showTransactions) || 'slowest';
     const option =
@@ -60,6 +72,31 @@ class TransactionList extends React.PureComponent<WrapperProps> {
     browserHistory.push(target);
   };
 
+  handleIncompatibleQuery: React.ComponentProps<
+    typeof CreateAlertButton
+  >['onIncompatibleQuery'] = incompatibleAlertNoticeFn => {
+    const {organization} = this.props;
+    trackAnalyticsEvent({
+      eventKey: 'performance_views.summary.create_alert_incompatible',
+      eventName:
+        'Performance Views: Creating an alert from transaction summary was incompatible',
+      organization_id: organization.id,
+    });
+    const incompatibleAlertNotice = incompatibleAlertNoticeFn(() =>
+      this.setState({incompatibleAlertNotice: null})
+    );
+    this.setState({incompatibleAlertNotice});
+  };
+
+  handleCreateAlertSuccess = () => {
+    const {organization} = this.props;
+    trackAnalyticsEvent({
+      eventKey: 'performance_views.summary.create_alert',
+      eventName: 'Performance Views: Create Alert from Transaction Summary',
+      organization_id: organization.id,
+    });
+  };
+
   handleDiscoverViewClick = () => {
     const {organization} = this.props;
     trackAnalyticsEvent({
@@ -70,7 +107,8 @@ class TransactionList extends React.PureComponent<WrapperProps> {
   };
 
   render() {
-    const {eventView, location, organization, transactionName} = this.props;
+    const {eventView, location, organization, transactionName, projects} = this.props;
+    const {incompatibleAlertNotice} = this.state;
     const activeFilter = this.getTransactionSort(location);
     const sortedEventView = eventView.withSorts([activeFilter.sort]);
 
@@ -102,8 +140,19 @@ class TransactionList extends React.PureComponent<WrapperProps> {
             >
               {t('Open in Discover')}
             </DiscoverButton>
+            <Feature features={['internal-catchall']}>
+              <CreateAlertButton
+                eventView={eventView}
+                organization={organization}
+                projects={projects}
+                onIncompatibleQuery={this.handleIncompatibleQuery}
+                onSuccess={this.handleCreateAlertSuccess}
+                size="small"
+              />
+            </Feature>
           </HeaderButtonContainer>
         </Header>
+        {incompatibleAlertNotice}
         <DiscoverQuery
           location={location}
           eventView={sortedEventView}
@@ -281,6 +330,10 @@ const Header = styled('div')`
 const HeaderButtonContainer = styled('div')`
   display: flex;
   flex-direction: row;
+
+  > *:not(:last-child) {
+    margin-right: ${space(1)};
+  }
 `;
 
-export default TransactionList;
+export default withProjects(TransactionList);
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
index bfbb209904..4e53c7fea3 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
@@ -5,6 +5,7 @@ import {
   Dataset,
 } from 'app/views/settings/incidentRules/types';
 import EventView from 'app/utils/discover/eventView';
+import {AggregationKey, LooseFieldKey} from 'app/utils/discover/fields';
 
 export const DEFAULT_AGGREGATE = 'count()';
 
@@ -13,6 +14,38 @@ export const DATASET_EVENT_TYPE_FILTERS = {
   [Dataset.TRANSACTIONS]: 'event.type:transaction',
 } as const;
 
+type OptionConfig = {
+  aggregations: AggregationKey[];
+  fields: LooseFieldKey[];
+};
+
+/**
+ * Allowed error aggregations for alerts
+ */
+export const errorFieldConfig: OptionConfig = {
+  aggregations: ['count', 'count_unique'],
+  fields: ['user'],
+};
+
+/**
+ * Allowed transaction aggregations for alerts
+ */
+export const transactionFieldConfig: OptionConfig = {
+  aggregations: [
+    'avg',
+    'percentile',
+    'failure_rate',
+    'apdex',
+    'count',
+    'p50',
+    'p75',
+    'p95',
+    'p99',
+    'p100',
+  ],
+  fields: ['transaction.duration'],
+};
+
 export function createDefaultTrigger(): Trigger {
   return {
     label: 'critical',
@@ -48,10 +81,7 @@ export function createRuleFromEventView(eventView: EventView): UnsavedIncidentRu
       .slice()
       .replace(/event\.type:(transaction|error)/, '')
       .trim(),
-    aggregate:
-      eventView.yAxis === 'count_unique(user)'
-        ? 'count_unique(tags[sentry:user])'
-        : DEFAULT_AGGREGATE,
+    aggregate: eventView.getYAxis(),
     environment: eventView.environment.length ? eventView.environment[0] : null,
   };
 }
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx
index 9ff83b3f82..51810663b8 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/metricField.tsx
@@ -15,12 +15,11 @@ import Tooltip from 'app/components/tooltip';
 import {
   explodeFieldString,
   generateFieldAsString,
-  AggregationKey,
-  LooseFieldKey,
   AGGREGATIONS,
   FIELDS,
 } from 'app/utils/discover/fields';
 
+import {errorFieldConfig, transactionFieldConfig} from './constants';
 import {Dataset} from './types';
 import {PRESET_AGGREGATES} from './presets';
 
@@ -28,32 +27,6 @@ type Props = Omit<FormField['props'], 'children' | 'help'> & {
   organization: Organization;
 };
 
-type OptionConfig = {
-  aggregations: AggregationKey[];
-  fields: LooseFieldKey[];
-};
-
-const errorFieldConfig: OptionConfig = {
-  aggregations: ['count', 'count_unique'],
-  fields: ['user'],
-};
-
-const transactionFieldConfig: OptionConfig = {
-  aggregations: [
-    'avg',
-    'percentile',
-    'failure_rate',
-    'apdex',
-    'count',
-    'p50',
-    'p75',
-    'p95',
-    'p99',
-    'p100',
-  ],
-  fields: ['transaction.duration'],
-};
-
 const getFieldOptionConfig = (dataset: Dataset) => {
   const config = dataset === Dataset.ERRORS ? errorFieldConfig : transactionFieldConfig;
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
index bfff6d79c7..e6237cf4ed 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
@@ -22,7 +22,6 @@ type Props = RouteComponentProps<RouteParams, {}> & {
   organization: Organization;
   project: Project;
   hasMetricAlerts: boolean;
-  hasCreateFromDiscover: boolean;
 };
 
 type AlertType = 'metric' | 'issue' | null;
@@ -43,7 +42,7 @@ class Create extends React.Component<Props, State> {
   };
 
   componentDidMount() {
-    const {organization, project, hasCreateFromDiscover, location} = this.props;
+    const {organization, project, location} = this.props;
 
     trackAnalyticsEvent({
       eventKey: 'new_alert_rule.viewed',
@@ -52,7 +51,7 @@ class Create extends React.Component<Props, State> {
       project_id: parseInt(project.id, 10),
     });
 
-    if (hasCreateFromDiscover && location.query.createFromDiscover) {
+    if (location?.query?.createFromDiscover) {
       const eventView = EventView.fromLocation(location);
       // eslint-disable-next-line react/no-did-mount-set-state
       this.setState({alertType: 'metric', eventView});
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
index 259307f44b..d560b5af59 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
@@ -17,7 +17,6 @@ type RouteParams = {
 type Props = RouteComponentProps<RouteParams, {}> & {
   organization: Organization;
   hasMetricAlerts: boolean;
-  hasCreateFromDiscover: boolean;
 };
 
 function ProjectAlertsEditor(props: Props) {
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
index d392454529..58231d7aa5 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
@@ -15,19 +15,14 @@ const ProjectAlerts = ({children, organization}: Props) => (
     {({hasAccess}) => (
       <Feature organization={organization} features={['incidents']}>
         {({hasFeature: hasMetricAlerts}) => (
-          <Feature organization={organization} features={['create-from-discover']}>
-            {({hasFeature: hasCreateFromDiscover}) => (
-              <React.Fragment>
-                {React.isValidElement(children) &&
-                  React.cloneElement(children, {
-                    organization,
-                    canEditRule: hasAccess,
-                    hasMetricAlerts,
-                    hasCreateFromDiscover,
-                  })}
-              </React.Fragment>
-            )}
-          </Feature>
+          <React.Fragment>
+            {React.isValidElement(children) &&
+              React.cloneElement(children, {
+                organization,
+                canEditRule: hasAccess,
+                hasMetricAlerts,
+              })}
+          </React.Fragment>
         )}
       </Feature>
     )}
diff --git a/tests/js/spec/components/createAlertButton.spec.jsx b/tests/js/spec/components/createAlertButton.spec.jsx
new file mode 100644
index 0000000000..3032ae9ca9
--- /dev/null
+++ b/tests/js/spec/components/createAlertButton.spec.jsx
@@ -0,0 +1,153 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import {DEFAULT_EVENT_VIEW, ALL_VIEWS} from 'app/views/eventsV2/data';
+import CreateAlertButton from 'app/components/createAlertButton';
+import EventView from 'app/utils/discover/eventView';
+
+const onIncompatibleQueryMock = jest.fn();
+const onCloseMock = jest.fn();
+const onSuccessMock = jest.fn();
+
+function generateWrappedComponent(organization, eventView) {
+  return mountWithTheme(
+    <CreateAlertButton
+      location={location}
+      organization={organization}
+      eventView={eventView}
+      projects={[]}
+      onIncompatibleQuery={onIncompatibleQueryMock}
+      onSuccess={onSuccessMock}
+    />,
+    TestStubs.routerContext()
+  );
+}
+
+describe('CreateAlertButton', () => {
+  const organization = TestStubs.Organization();
+
+  afterEach(() => {
+    jest.resetAllMocks();
+  });
+
+  it('renders', () => {
+    const eventView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
+    const component = generateWrappedComponent(organization, eventView);
+    expect(component.text()).toBe('Create alert');
+  });
+
+  it('should warn when project is not selected', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...DEFAULT_EVENT_VIEW,
+      query: 'event.type:error',
+    });
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
+    const errorsAlert = mountWithTheme(
+      onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
+    );
+    expect(errorsAlert.text()).toBe(
+      'An alert can use data from only one Project. Select one and try again.'
+    );
+  });
+
+  it('should warn when all projects are selected (-1)', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...DEFAULT_EVENT_VIEW,
+      query: 'event.type:error',
+      projects: [-1],
+    });
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
+    const errorsAlert = mountWithTheme(
+      onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
+    );
+    expect(errorsAlert.text()).toBe(
+      'An alert can use data from only one Project. Select one and try again.'
+    );
+  });
+
+  it('should warn when event.type is not specified', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...DEFAULT_EVENT_VIEW,
+      query: '',
+      projects: [2],
+    });
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
+    const errorsAlert = mountWithTheme(
+      onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
+    );
+    expect(errorsAlert.text()).toBe(
+      'An alert needs a filter of event.type:error or event.type:transaction. Use one of these and try again.'
+    );
+  });
+
+  it('should warn when yAxis is not allowed', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...ALL_VIEWS.find(view => view.name === 'Errors by URL'),
+      query: 'event.type:error',
+      yAxis: 'count_unique(issue.id)',
+      projects: [2],
+    });
+    expect(eventView.getYAxis()).toBe('count_unique(issue.id)');
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
+    const errorsAlert = mountWithTheme(
+      onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
+    );
+    expect(errorsAlert.text()).toBe(
+      'An alert can’t use the metric count_unique(issue.id) just yet. Select another metric and try again.'
+    );
+  });
+
+  it('should warn with multiple errors, missing event.type and project', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...ALL_VIEWS.find(view => view.name === 'Errors by URL'),
+      query: '',
+      yAxis: 'count_unique(issue.id)',
+      projects: [],
+    });
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
+    const errorsAlert = mountWithTheme(
+      onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
+    );
+    expect(errorsAlert.text()).toContain('Yikes! That button didn’t work.');
+  });
+
+  it('should trigger success callback', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...DEFAULT_EVENT_VIEW,
+      query: 'event.type:error',
+      projects: [2],
+    });
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(0);
+    expect(onSuccessMock).toHaveBeenCalledTimes(1);
+  });
+
+  it('should allow alert to close', () => {
+    const eventView = EventView.fromSavedQuery({
+      ...DEFAULT_EVENT_VIEW,
+    });
+    const component = generateWrappedComponent(organization, eventView);
+    component.simulate('click');
+    expect(onIncompatibleQueryMock).toHaveBeenCalledTimes(1);
+    const errorsAlert = mountWithTheme(
+      onIncompatibleQueryMock.mock.calls[0][0](onCloseMock)
+    );
+    errorsAlert
+      .find('[aria-label="Close"]')
+      .at(0)
+      .simulate('click');
+    expect(onCloseMock).toHaveBeenCalledTimes(1);
+  });
+});
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index b78e49951b..68812b746b 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -312,7 +312,6 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       const buttonCreateAlert = wrapper.find(SELECTOR_BUTTON_CREATE_ALERT);
 
       expect(buttonCreateAlert.exists()).toBe(true);
-      expect(buttonCreateAlert.first().props().disabled).toBe(true);
     });
   });
 });
diff --git a/tests/js/spec/views/settings/incidentRules/constants.spec.jsx b/tests/js/spec/views/settings/incidentRules/constants.spec.jsx
index a8c1c3dcf5..22b77f8e02 100644
--- a/tests/js/spec/views/settings/incidentRules/constants.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/constants.spec.jsx
@@ -35,12 +35,12 @@ describe('createRuleFromEventView()', () => {
     const rule = createRuleFromEventView(eventView);
     expect(rule.environment).toBe('beta');
   });
-  it('converts aggregate from EventView to alert rule', () => {
+  it('gets aggregate from EventView.yAxis', () => {
     const eventView = new EventView({
       yAxis: 'count_unique(user)',
     });
 
     const rule = createRuleFromEventView(eventView);
-    expect(rule.aggregate).toBe('count_unique(tags[sentry:user])');
+    expect(rule.aggregate).toBe(eventView.yAxis);
   });
 });
