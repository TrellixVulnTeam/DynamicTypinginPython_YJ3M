commit c9a4f3edb6984ce84d1848f6cf7884052342d06a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 19 15:35:40 2019 -0800

    feat(sdk): Improve organization context
    
    - Add organization.slug tag
    - Add organization context (id, slug)
    - Add SENTRY_ORGANIZATION_CONTEXT_HELPER setting
    
    The SENTRY_ORGANIZATION_CONTEXT_HELPER will allow our saas service to define additional subscription-related context.

diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
index c317a4e3ac..b6f22a8f5a 100644
--- a/src/sentry/api/bases/group.py
+++ b/src/sentry/api/bases/group.py
@@ -5,7 +5,7 @@ import logging
 from sentry.api.base import Endpoint
 from sentry.api.bases.project import ProjectPermission
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import configure_scope, bind_organization_context
 from sentry.models import Group, GroupLink, GroupStatus, get_group_with_redirect, Organization
 from sentry.tasks.integrations import create_comment, update_comment
 
@@ -50,8 +50,7 @@ class GroupEndpoint(Endpoint):
             except Organization.DoesNotExist:
                 raise ResourceDoesNotExist
 
-            with configure_scope() as scope:
-                scope.set_tag("organization", organization.id)
+            bind_organization_context(organization)
 
             request._request.organization = organization
         else:
@@ -70,7 +69,10 @@ class GroupEndpoint(Endpoint):
 
         with configure_scope() as scope:
             scope.set_tag("project", group.project_id)
-            scope.set_tag("organization", group.project.organization_id)
+
+        # we didnt bind context above, so do it now
+        if not organization:
+            bind_organization_context(group.project.organization)
 
         if group.status in EXCLUDED_STATUSES:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/bases/monitor.py b/src/sentry/api/bases/monitor.py
index 5e820d9fce..47f53cec35 100644
--- a/src/sentry/api/bases/monitor.py
+++ b/src/sentry/api/bases/monitor.py
@@ -5,7 +5,7 @@ from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.bases.project import ProjectPermission
 from sentry.models import Monitor, Project, ProjectStatus
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import configure_scope, bind_organization_context
 
 
 class MonitorEndpoint(Endpoint):
@@ -30,9 +30,10 @@ class MonitorEndpoint(Endpoint):
         self.check_object_permissions(request, project)
 
         with configure_scope() as scope:
-            scope.set_tag("organization", project.organization_id)
             scope.set_tag("project", project.id)
 
+        bind_organization_context(project.organization)
+
         request._request.organization = project.organization
 
         kwargs.update({"monitor": monitor, "project": project})
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 7206b2a8b5..1b81eea689 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -21,7 +21,7 @@ from sentry.models import (
 )
 from sentry.utils import auth
 from sentry.utils.hashlib import hash_values
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import bind_organization_context
 
 
 class OrganizationEventsError(Exception):
@@ -266,8 +266,7 @@ class OrganizationEndpoint(Endpoint):
 
         self.check_object_permissions(request, organization)
 
-        with configure_scope() as scope:
-            scope.set_tag("organization", organization.id)
+        bind_organization_context(organization)
 
         request._request.organization = organization
 
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 7facc27094..00e47166df 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -8,7 +8,7 @@ from sentry.api.exceptions import ResourceDoesNotExist, ProjectMoved
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
 from sentry.models import OrganizationMember, Project, ProjectStatus, ProjectRedirect
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import configure_scope, bind_organization_context
 
 from .organization import OrganizationPermission
 from .team import has_team_permission
@@ -147,7 +147,8 @@ class ProjectEndpoint(Endpoint):
 
         with configure_scope() as scope:
             scope.set_tag("project", project.id)
-            scope.set_tag("organization", project.organization_id)
+
+        bind_organization_context(project.organization)
 
         request._request.organization = project.organization
 
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 009ffe494e..f99abdcfe9 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import Team, TeamStatus
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import bind_organization_context
 
 from .organization import OrganizationPermission
 
@@ -47,8 +47,7 @@ class TeamEndpoint(Endpoint):
 
         self.check_object_permissions(request, team)
 
-        with configure_scope() as scope:
-            scope.set_tag("organization", team.organization_id)
+        bind_organization_context(team.organization)
 
         request._request.organization = team.organization
 
diff --git a/src/sentry/api/endpoints/monitor_checkin_details.py b/src/sentry/api/endpoints/monitor_checkin_details.py
index 1b17c68ca4..b34632b531 100644
--- a/src/sentry/api/endpoints/monitor_checkin_details.py
+++ b/src/sentry/api/endpoints/monitor_checkin_details.py
@@ -20,7 +20,7 @@ from sentry.models import (
     ProjectKey,
     ProjectStatus,
 )
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import configure_scope, bind_organization_context
 
 
 class CheckInSerializer(serializers.Serializer):
@@ -59,9 +59,10 @@ class MonitorCheckInDetailsEndpoint(Endpoint):
         self.check_object_permissions(request, project)
 
         with configure_scope() as scope:
-            scope.set_tag("organization", project.organization_id)
             scope.set_tag("project", project.id)
 
+        bind_organization_context(project.organization)
+
         try:
             checkin = MonitorCheckIn.objects.get(monitor=monitor, guid=checkin_id)
         except MonitorCheckIn.DoesNotExist:
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 28666833ef..cacd669d9a 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1423,6 +1423,14 @@ def get_sentry_sdk_config():
 
 SENTRY_SDK_CONFIG = get_sentry_sdk_config()
 
+# Callable to bind additional context for the Sentry SDK
+#
+# def get_org_context(scope, organization, **kwargs):
+#    scope.set_tag('organization.cool', '1')
+#
+# SENTRY_ORGANIZATION_CONTEXT_HELPER = get_org_context
+SENTRY_ORGANIZATION_CONTEXT_HELPER = None
+
 # Config options that are explicitly disabled from Django
 DEAD = object()
 
diff --git a/src/sentry/tasks/assemble.py b/src/sentry/tasks/assemble.py
index c3c93fac51..72077343e8 100644
--- a/src/sentry/tasks/assemble.py
+++ b/src/sentry/tasks/assemble.py
@@ -13,7 +13,7 @@ from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
 from sentry.utils import json
 from sentry.utils.files import get_max_file_size
-from sentry.utils.sdk import configure_scope
+from sentry.utils.sdk import configure_scope, bind_organization_context
 
 logger = logging.getLogger(__name__)
 
@@ -167,10 +167,10 @@ def assemble_artifacts(org_id, version, checksum, chunks, **kwargs):
     from sentry.utils.zip import safe_extract_zip
     from sentry.models import File, Organization, Release, ReleaseFile
 
-    with configure_scope() as scope:
-        scope.set_tag("organization", org_id)
+    organization = Organization.objects.get(id=org_id)
+
+    bind_organization_context(organization)
 
-    organization = Organization.objects.filter(id=org_id).get()
     set_assemble_status(AssembleTask.ARTIFACTS, org_id, checksum, ChunkFileState.ASSEMBLING)
 
     # Assemble the chunks into a temporary file
diff --git a/src/sentry/utils/sdk.py b/src/sentry/utils/sdk.py
index c2746b78bf..f8c29f67a2 100644
--- a/src/sentry/utils/sdk.py
+++ b/src/sentry/utils/sdk.py
@@ -235,3 +235,20 @@ class RavenShim(object):
             scope.set_tag(key, value)
         if fingerprint is not None:
             scope.fingerprint = fingerprint
+
+
+def bind_organization_context(organization):
+    helper = settings.SENTRY_ORGANIZATION_CONTEXT_HELPER
+
+    with sentry_sdk.configure_scope() as scope:
+        scope.set_tag("organization", organization.id)
+        scope.set_tag("organization.slug", organization.slug)
+        scope.set_context("organization", {"id": organization.id, "slug": organization.slug})
+        if helper:
+            try:
+                helper(scope=scope, organization=organization)
+            except Exception:
+                sdk_logger.exception(
+                    "internal-error.organization-context",
+                    extra={"organization_id": organization.id},
+                )
diff --git a/tests/sentry/utils/test_sdk.py b/tests/sentry/utils/test_sdk.py
index 8477199910..289ccd0033 100644
--- a/tests/sentry/utils/test_sdk.py
+++ b/tests/sentry/utils/test_sdk.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import, print_function
 from sentry_sdk import Hub
 
 from django.conf import settings
-from sentry.utils.sdk import configure_sdk
+from sentry.utils.sdk import configure_sdk, bind_organization_context
 from sentry.app import raven
 
 from sentry.models import Event
@@ -42,3 +42,42 @@ class SentryInternalClientTest(TestCase):
         assert event["project"] == settings.SENTRY_PROJECT
         assert event["logentry"]["formatted"] == "check the req"
         assert "NotJSONSerializable" in event["extra"]["request"]
+
+    def test_bind_organization_context(self):
+        configure_sdk()
+        Hub.current.bind_client(Hub.main.client)
+
+        org = self.create_organization()
+        bind_organization_context(org)
+
+        assert Hub.current.scope._tags["organization"] == org.id
+        assert Hub.current.scope._tags["organization.slug"] == org.slug
+        assert Hub.current.scope._contexts["organization"] == {"id": org.id, "slug": org.slug}
+
+    def test_bind_organization_context_with_callback(self):
+        configure_sdk()
+        Hub.current.bind_client(Hub.main.client)
+
+        org = self.create_organization()
+
+        def add_context(scope, organization, **kwargs):
+            scope.set_tag("organization.test", "1")
+
+        with self.settings(SENTRY_ORGANIZATION_CONTEXT_HELPER=add_context):
+            bind_organization_context(org)
+
+        assert Hub.current.scope._tags["organization.test"] == "1"
+
+    def test_bind_organization_context_with_callback_error(self):
+        configure_sdk()
+        Hub.current.bind_client(Hub.main.client)
+
+        org = self.create_organization()
+
+        def add_context(scope, organization, **kwargs):
+            1 / 0
+
+        with self.settings(SENTRY_ORGANIZATION_CONTEXT_HELPER=add_context):
+            bind_organization_context(org)
+
+        assert Hub.current.scope._tags["organization"] == org.id
