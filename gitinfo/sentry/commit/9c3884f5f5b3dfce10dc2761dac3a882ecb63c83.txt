commit 9c3884f5f5b3dfce10dc2761dac3a882ecb63c83
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 2 13:07:06 2011 -0700

    Ensure we support both ISO format as well as unix timestamps for the timestamp column

diff --git a/docs/technical.rst b/docs/technical.rst
index 065b4687aa..82806afd72 100644
--- a/docs/technical.rst
+++ b/docs/technical.rst
@@ -95,6 +95,7 @@ This ``data`` JSON object contains the following fields:
 
     :``message``: the text of the formatted logging record.
     :``timestamp``: indicates when the logging record was created (in the Sentry client).  The Sentry server assumes the time is in UTC.
+                    The timestamp should be in ISO 8601 format, without a timezone. For example: 2011-05-02T17:41:36
     :``level``: the record severity.
     :``message_id``: hexadecimal string representing a uuid4 value.
     :``logger``: which logger created the record.  If missing, defaults to the string ``root``, not to the root logger.
diff --git a/sentry/helpers.py b/sentry/helpers.py
index d7fb60a230..1cabd1d56c 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -241,3 +241,10 @@ def shorten(var):
         # TODO: when we finish the above, we should also implement this for dicts
         var = list(var)[:conf.MAX_LENGTH_LIST] + ['...', '(%d more elements)' % (len(var) - conf.MAX_LENGTH_LIST,)]
     return var
+
+def is_float(var):
+    try:
+        float(var)
+    except ValueError:
+        return False
+    return True
\ No newline at end of file
diff --git a/sentry/manager.py b/sentry/manager.py
index 38eede4845..c478677e3d 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -48,7 +48,7 @@ class SentryManager(models.Manager):
         from sentry.models import Message, GroupedMessage, FilterValue
         
         URL_MAX_LENGTH = Message._meta.get_field_by_name('url')[0].max_length
-        now = datetime.datetime.now()
+        now = kwargs.pop('timestamp', None) or datetime.datetime.now()
 
         view = kwargs.pop('view', None)
         logger_name = kwargs.pop('logger', 'root')
@@ -57,7 +57,6 @@ class SentryManager(models.Manager):
         site = kwargs.pop('site', None)
         data = kwargs.pop('data', {}) or {}
         message_id = kwargs.pop('message_id', None)
-        timestamp = kwargs.pop('timestamp', None)
         
         if url:
             data['url'] = url
@@ -78,15 +77,18 @@ class SentryManager(models.Manager):
             if 'module' in data.get('__sentry__', {}):
                 kwargs['data']['module'] = data['__sentry__']['module']
 
-            if timestamp:
-                kwargs['first_seen'] = timestamp
+            group_kwargs = kwargs.copy()
+            group_kwargs.update({
+                'last_seen': now,
+                'first_seen': now,
+            })
 
             group, created = GroupedMessage.objects.get_or_create(
                 view=view,
                 logger=logger_name,
                 checksum=checksum,
                 # we store some sample data for rendering
-                defaults=kwargs
+                defaults=group_kwargs
             )
             kwargs.pop('data', None)
             if not created:
@@ -109,8 +111,6 @@ class SentryManager(models.Manager):
                 )
                 mail = True
 
-            if 'first_seen' in kwargs:
-                kwargs['datetime'] = kwargs.pop('first_seen', None)
                 
             instance = Message.objects.create(
                 message_id=message_id,
@@ -122,6 +122,7 @@ class SentryManager(models.Manager):
                 site=site,
                 checksum=checksum,
                 group=group,
+                datetime=now,
                 **kwargs
             )
             if server_name:
diff --git a/sentry/models.py b/sentry/models.py
index 2d74bc7eb0..9098c44675 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -109,7 +109,7 @@ class MessageBase(Model):
 class GroupedMessage(MessageBase):
     status          = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
     times_seen      = models.PositiveIntegerField(default=1, db_index=True)
-    last_seen       = models.DateTimeField(auto_now=True, db_index=True)
+    last_seen       = models.DateTimeField(default=datetime.now, db_index=True)
     first_seen      = models.DateTimeField(default=datetime.now, db_index=True)
 
     score           = models.IntegerField(default=0)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 926017c2d7..a6593ec589 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -5,6 +5,7 @@ try:
     import cPickle as pickle
 except ImportError:
     import pickle
+import datetime
 import getpass
 import logging
 import os.path
@@ -927,6 +928,21 @@ class RemoteSentryTest(TestCase):
         self.assertEquals(instance.level, 40)
         self.assertEquals(instance.site, 'not_a_real_site')
 
+    def testTimestamp(self):
+        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
+        kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%s.%f')}
+        resp = self.client.post(reverse('sentry-store'), {
+            'data': base64.b64encode(pickle.dumps(transform(kwargs)).encode('zlib')),
+            'key': conf.KEY,
+        })
+        self.assertEquals(resp.status_code, 200)
+        instance = Message.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.datetime, timestamp)
+        group = instance.group
+        self.assertEquals(group.first_seen, timestamp)
+        self.assertEquals(group.last_seen, timestamp)
+
     def testUngzippedData(self):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self.client.post(reverse('sentry-store'), {
diff --git a/sentry/views.py b/sentry/views.py
index b1948c67d2..90512919c6 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -20,7 +20,7 @@ from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import conf
-from sentry.helpers import get_filters
+from sentry.helpers import get_filters, is_float
 from sentry.models import GroupedMessage, Message
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
@@ -385,6 +385,16 @@ def store(request):
     # XXX: ensure keys are coerced to strings
     data = dict((smart_str(k), v) for k, v in data.iteritems())
 
+    if 'timestamp' in data:
+        if is_float(data['timestamp']):
+            data['timestamp'] = datetime.datetime.fromtimestamp(float(data['timestamp']))
+        else:
+            if '.' in data['timestamp']:
+                format = '%Y-%m-%dT%H:%M:%S.%f'
+            else:
+                format = '%Y-%m-%dT%H:%M:%S'
+            data['timestamp'] = datetime.datetime.strptime(data['timestamp'], format)
+
     GroupedMessage.objects.from_kwargs(**data)
     
     return HttpResponse()
