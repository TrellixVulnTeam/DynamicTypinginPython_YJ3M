commit 13b6acd2f9e5f4b7efc4da21200927a4855eeefd
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jun 6 14:36:59 2013 -0700

    Trim values that go beyond a length of 1024

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 82bde3f116..147c49ae0a 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -153,3 +153,7 @@ PLATFORM_TITLES = {
 # value of 0 would store counts for every minute, and is the lowest level of
 # accuracy provided.
 MINUTE_NORMALIZATION = 15
+
+# Prevent variables (e.g. context locals, extra data) from exceeding this size
+# in bytesish
+MAX_VARIABLE_SIZE = 256
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 3e1ee23cc3..739503d340 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -42,7 +42,7 @@ from sentry.utils.cache import cache, memoize
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
 from sentry.utils.models import create_or_update, make_key
-from sentry.utils.safe import safe_execute
+from sentry.utils.safe import safe_execute, trim
 
 logger = logging.getLogger('sentry.errors')
 
@@ -425,6 +425,22 @@ class GroupManager(BaseManager, ChartMixin):
             if 'sentry.interfaces.Stacktrace' in data:
                 data['sentry.interfaces.Exception']['values'][0]['stacktrace'] = data.pop('sentry.interfaces.Stacktrace')
 
+        for key, value in data.get('extra', {}).iteritems():
+            data['extra'][key] = trim(value)
+
+        # HACK: move this to interfaces code
+        if 'sentry.interfaces.Stacktrace' in data:
+            stack_vars = data['sentry.interfaces.Stacktrace'].get('vars', {})
+            for key, value in stack_vars.iteritems():
+                stack_vars[key] = trim(value)
+
+        if 'sentry.interfaces.Exception' in data:
+            exc_data = data['sentry.interfaces.Exception']
+            for key in ('type', 'module', 'value'):
+                value = exc_data.get(key)
+                if value:
+                    exc_data[key] = trim(value)
+
         return data
 
     def from_kwargs(self, project, **kwargs):
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index acdacf274b..b5fcd64f69 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -10,6 +10,9 @@ import logging
 
 from django.db import transaction
 
+from sentry.constants import MAX_VARIABLE_SIZE
+from sentry.utils.strings import truncatechars
+
 
 def safe_execute(func, *args, **kwargs):
     try:
@@ -28,3 +31,45 @@ def safe_execute(func, *args, **kwargs):
         }, exc_info=True)
     else:
         return result
+
+
+def trim(value, max_size=MAX_VARIABLE_SIZE, max_depth=3, _depth=0, _size=0, **kwargs):
+    """
+    Truncates a value to ```MAX_VARIABLE_SIZE```.
+
+    The method of truncation depends on the type of value.
+    """
+    options = {
+        'max_depth': max_depth,
+        'max_size': max_size,
+        '_depth': _depth + 1,
+    }
+
+    if _depth > max_depth:
+        return trim(repr(value, _size=_size, **options))
+
+    elif isinstance(value, dict):
+        result = {}
+        for k, v in value.iteritems():
+            trim_v = trim(v, _size=_size, **options)
+            result[k] = trim_v
+            _size += len(unicode(trim_v))
+            if _size >= max_size:
+                break
+
+    elif isinstance(value, (list, tuple)):
+        result = []
+        for v in value:
+            trim_v = trim(v, _size=_size, **options)
+            result.append(trim_v)
+            _size += len(unicode(trim_v))
+            if _size >= max_size:
+                break
+
+    elif isinstance(value, basestring):
+        result = truncatechars(value, max_size - _size)
+
+    else:
+        raise ValueError(value)
+
+    return result
diff --git a/src/sentry/utils/strings.py b/src/sentry/utils/strings.py
index db71e63d1e..4e1d3c0c56 100644
--- a/src/sentry/utils/strings.py
+++ b/src/sentry/utils/strings.py
@@ -1,3 +1,10 @@
+"""
+sentry.utils.strings
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 import base64
 import zlib
 
