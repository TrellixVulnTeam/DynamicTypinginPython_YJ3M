commit 5f608ca77c71cfeb349ac699d22cd6a842a937c0
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jul 23 15:46:15 2015 +0200

    Ensure stacktraces can be mutated correctly (refs GH-1624)

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index d3dbda5117..b9f5ec96b8 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -373,7 +373,7 @@ class SourceProcessor(object):
     def get_stacktraces(self, data):
         try:
             stacktraces = [
-                Stacktrace.to_python(e['stacktrace'])
+                e['stacktrace']
                 for e in data['sentry.interfaces.Exception']['values']
                 if e.get('stacktrace')
             ]
@@ -381,14 +381,17 @@ class SourceProcessor(object):
             stacktraces = []
 
         if 'sentry.interfaces.Stacktrace' in data:
-            stacktraces.append(Stacktrace.to_python(data['sentry.interfaces.Stacktrace']))
+            stacktraces.append(data['sentry.interfaces.Stacktrace'])
 
-        return stacktraces
+        return [
+            (s, Stacktrace.to_python(s))
+            for s in stacktraces
+        ]
 
     def get_valid_frames(self, stacktraces):
         # build list of frames that we can actually grab source for
         frames = []
-        for stacktrace in stacktraces:
+        for _, stacktrace in stacktraces:
             frames.extend([
                 f for f in stacktrace.frames
                 if f.lineno is not None
@@ -428,18 +431,18 @@ class SourceProcessor(object):
         self.expand_frames(frames)
         self.ensure_module_names(frames)
         self.fix_culprit(data, stacktraces)
-        self.update_stacktraces(data, stacktraces)
+        self.update_stacktraces(stacktraces)
 
         return data
 
     def fix_culprit(self, data, stacktraces):
-        culprit_frame = stacktraces[0].frames[-1]
+        culprit_frame = stacktraces[0][1].frames[-1]
         if culprit_frame.module and culprit_frame.function:
             data['culprit'] = truncatechars(generate_culprit(culprit_frame), MAX_CULPRIT_LENGTH)
 
-    def update_stacktraces(self, data, stacktraces):
-        for exception, stacktrace in zip(data['sentry.interfaces.Exception']['values'], stacktraces):
-            exception['stacktrace'] = stacktrace.to_json()
+    def update_stacktraces(self, stacktraces):
+        for raw, interface in stacktraces:
+            raw.update(interface.to_json())
 
     def ensure_module_names(self, frames):
         # TODO(dcramer): this doesn't really fit well with generic URLs so we
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 2840527cc4..c843a6577d 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -180,7 +180,7 @@ class SourceProcessorTest(TestCase):
         processor = SourceProcessor()
         result = processor.get_stacktraces(data)
         assert len(result) == 1
-        assert type(result[0]) is Stacktrace
+        assert type(result[0][1]) is Stacktrace
 
     def test_get_stacktraces_returns_exception_interface(self):
         data = {
@@ -212,4 +212,4 @@ class SourceProcessorTest(TestCase):
         processor = SourceProcessor()
         result = processor.get_stacktraces(data)
         assert len(result) == 1
-        assert type(result[0]) is Stacktrace
+        assert type(result[0][1]) is Stacktrace
