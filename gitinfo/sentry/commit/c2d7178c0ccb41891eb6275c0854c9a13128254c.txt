commit c2d7178c0ccb41891eb6275c0854c9a13128254c
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 26 12:54:36 2017 -0700

    api: refactor project serialization for details pages
    
    - move bulk of attributes to new DetailedProjectSerializer
    - remove unused callsign review code (not generic review code)
    - fetch project details in ProjectContext

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index a60926720c..95289f6dec 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -13,13 +13,11 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.plugin import PluginSerializer
-from sentry.digests import backend as digests
+from sentry.api.serializers.models.project import DetailedProjectSerializer
 from sentry.models import (
     AuditLogEntryEvent, Group, GroupStatus, Project, ProjectBookmark,
-    ProjectStatus, UserOption, DEFAULT_SUBJECT_TEMPLATE
+    ProjectStatus, UserOption
 )
-from sentry.plugins import plugins
 from sentry.tasks.deletion import delete_project
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -136,39 +134,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         :pparam string project_slug: the slug of the project to delete.
         :auth: required
         """
-        data = serialize(project, request.user)
-        data['options'] = {
-            'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
-            'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
-            'sentry:scrub_data': bool(project.get_option('sentry:scrub_data', True)),
-            'sentry:scrub_defaults': bool(project.get_option('sentry:scrub_defaults', True)),
-            'sentry:safe_fields': project.get_option('sentry:safe_fields', []),
-            'sentry:sensitive_fields': project.get_option('sentry:sensitive_fields', []),
-            'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
-            'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
-            'sentry:default_environment': project.get_option('sentry:default_environment'),
-            'sentry:reprocessing_active': bool(project.get_option('sentry:reprocessing_active', False)),
-            'filters:blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
-            'feedback:branding': project.get_option('feedback:branding', '1') == '1',
-        }
-        data['plugins'] = serialize([
-            plugin
-            for plugin in plugins.configurable_for_project(project, version=None)
-            if plugin.has_project_conf()
-        ], request.user, PluginSerializer(project))
-        data['team'] = serialize(project.team, request.user)
-        data['organization'] = serialize(project.organization, request.user)
-
-        data.update({
-            'digestsMinDelay': project.get_option(
-                'digests:mail:minimum_delay', digests.minimum_delay,
-            ),
-            'digestsMaxDelay': project.get_option(
-                'digests:mail:maximum_delay', digests.maximum_delay,
-            ),
-            'subjectPrefix': project.get_option('mail:subject_prefix'),
-            'subjectTemplate': project.get_option('mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
-        })
+        data = serialize(project, request.user, DetailedProjectSerializer())
 
         include = set(filter(bool, request.GET.get('include', '').split(',')))
         if 'stats' in include:
@@ -320,22 +286,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 data=project.get_audit_log_data(),
             )
 
-        data = serialize(project, request.user)
-        data['options'] = {
-            'sentry:origins': '\n'.join(project.get_option('sentry:origins', ['*']) or []),
-            'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
-        }
-        data.update({
-            'digestsMinDelay': project.get_option(
-                'digests:mail:minimum_delay', digests.minimum_delay,
-            ),
-            'digestsMaxDelay': project.get_option(
-                'digests:mail:maximum_delay', digests.maximum_delay,
-            ),
-            'subjectPrefix': project.get_option('mail:subject_prefix'),
-            'subjectTemplate': project.get_option('mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
-        })
-
+        data = serialize(project, request.user, DetailedProjectSerializer())
         return Response(data)
 
     @attach_scenarios([delete_project_scenario])
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 6a919d9abe..26f6bf7370 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -7,9 +7,11 @@ from django.db.models import Q
 from django.db.models.aggregates import Count
 
 from sentry.api.serializers import register, serialize, Serializer
+from sentry.api.serializers.models.plugin import PluginSerializer
+from sentry.digests import backend as digests
 from sentry.models import (
     Project, ProjectBookmark, ProjectOption, ProjectPlatform, ProjectStatus,
-    Release, UserOption
+    Release, UserOption, DEFAULT_SUBJECT_TEMPLATE
 )
 
 STATUS_LABELS = {
@@ -22,6 +24,10 @@ STATUS_LABELS = {
 
 @register(Project)
 class ProjectSerializer(Serializer):
+    """
+    This is primarily used to summarize projects. We utilize it when doing bulk loads for things
+    such as "show all projects for this organization", and its attributes be kept to a minimum.
+    """
     def get_attrs(self, item_list, user):
         project_ids = [i.id for i in item_list]
         if user.is_authenticated() and item_list:
@@ -39,69 +45,10 @@ class ProjectSerializer(Serializer):
             default_subscribe = (
                 user_options.get('subscribe_by_default', '1') == '1'
             )
-
-            default_environments = {
-                o.project_id: o.value
-                for o in ProjectOption.objects.filter(
-                    key='sentry:default_environment',
-                    project__in=project_ids,
-                )
-            }
         else:
             bookmarks = set()
             user_options = {}
             default_subscribe = False
-            default_environments = {}
-
-        reviewed_callsigns = {
-            p.project_id: p.value
-            for p in ProjectOption.objects.filter(
-                project__in=item_list,
-                key='sentry:reviewed-callsign',
-            )
-        }
-
-        platforms = ProjectPlatform.objects.filter(
-            project_id__in=project_ids,
-        ).values_list('project_id', 'platform')
-        platforms_by_project = defaultdict(list)
-        for project_id, platform in platforms:
-            platforms_by_project[project_id].append(platform)
-
-        num_issues_projects = Project.objects.filter(
-            id__in=project_ids
-        ).annotate(num_issues=Count('processingissue')) \
-            .values_list('id', 'num_issues')
-
-        processing_issues_by_project = {}
-        for project_id, num_issues in num_issues_projects:
-            processing_issues_by_project[project_id] = num_issues
-
-        latest_release_list = list(Release.objects.raw("""
-            SELECT lr.project_id as actual_project_id, r.*
-            FROM (
-                SELECT (
-                    SELECT lrr.id FROM sentry_release lrr
-                    JOIN sentry_release_project lrp
-                    ON lrp.release_id = lrr.id
-                    WHERE lrp.project_id = p.id
-                    ORDER BY lrr.date_added DESC
-                    LIMIT 1
-                ) as release_id,
-                p.id as project_id
-                FROM sentry_project p
-                WHERE p.id IN ({})
-            ) as lr
-            JOIN sentry_release r
-            ON r.id = lr.release_id
-        """.format(
-            ', '.join(six.text_type(i.id) for i in item_list),
-        )))
-
-        latest_releases = {
-            r.actual_project_id: d
-            for r, d in zip(latest_release_list, serialize(latest_release_list, user))
-        }
 
         result = {}
         for item in item_list:
@@ -111,11 +58,6 @@ class ProjectSerializer(Serializer):
                     (item.id, 'mail:alert'),
                     default_subscribe,
                 )),
-                'latest_release': latest_releases.get(item.id),
-                'default_environment': default_environments.get(item.id),
-                'reviewed-callsign': reviewed_callsigns.get(item.id),
-                'platforms': platforms_by_project[item.id],
-                'processing_issues': processing_issues_by_project.get(item.id, 0),
             }
         return result
 
@@ -138,19 +80,12 @@ class ProjectSerializer(Serializer):
             'name': obj.name,
             'isPublic': obj.public,
             'isBookmarked': attrs['is_bookmarked'],
-            'defaultEnvironment': attrs['default_environment'],
             'callSign': obj.callsign,
             'color': obj.color,
-            # TODO(mitsuhiko): eventually remove this when we will treat
-            # all short names as reviewed.
-            'callSignReviewed': bool(attrs['reviewed-callsign']),
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
-            'latestRelease': attrs['latest_release'],
             'features': feature_list,
             'status': status_label,
-            'platforms': attrs['platforms'],
-            'processingIssues': attrs['processing_issues'],
         }
 
 
@@ -182,12 +117,12 @@ class ProjectWithTeamSerializer(ProjectSerializer):
             item_list, user
         )
 
-        orgs = {
+        teams = {
             d['id']: d
             for d in serialize(list(set(i.team for i in item_list)), user)
         }
         for item in item_list:
-            attrs[item]['team'] = orgs[six.text_type(item.team_id)]
+            attrs[item]['team'] = teams[six.text_type(item.team_id)]
         return attrs
 
     def serialize(self, obj, attrs, user):
@@ -198,6 +133,140 @@ class ProjectWithTeamSerializer(ProjectSerializer):
         return data
 
 
+class DetailedProjectSerializer(ProjectWithTeamSerializer):
+    OPTION_KEYS = frozenset([
+        'sentry:origins',
+        'sentry:resolve_age',
+        'sentry:scrub_data',
+        'sentry:scrub_defaults',
+        'sentry:safe_fields',
+        'sentry:sensitive_fields',
+        'sentry:csp_ignored_sources_defaults',
+        'sentry:csp_ignored_sources',
+        'sentry:default_environment',
+        'sentry:reprocessing_active',
+        'sentry:blacklisted_ips',
+        'feedback:branding',
+        'digests:mail:minimum_delay',
+        'digests:mail:maximum_delay',
+        'mail:subject_prefix',
+        'mail:subject_template',
+    ])
+
+    def get_attrs(self, item_list, user):
+        attrs = super(DetailedProjectSerializer, self).get_attrs(
+            item_list, user
+        )
+
+        project_ids = [i.id for i in item_list]
+
+        platforms = ProjectPlatform.objects.filter(
+            project_id__in=project_ids,
+        ).values_list('project_id', 'platform')
+        platforms_by_project = defaultdict(list)
+        for project_id, platform in platforms:
+            platforms_by_project[project_id].append(platform)
+
+        num_issues_projects = Project.objects.filter(
+            id__in=project_ids
+        ).annotate(num_issues=Count('processingissue')) \
+            .values_list('id', 'num_issues')
+
+        processing_issues_by_project = {}
+        for project_id, num_issues in num_issues_projects:
+            processing_issues_by_project[project_id] = num_issues
+
+        latest_release_list = list(Release.objects.raw("""
+            SELECT lr.project_id as actual_project_id, r.*
+            FROM (
+                SELECT (
+                    SELECT lrr.id FROM sentry_release lrr
+                    JOIN sentry_release_project lrp
+                    ON lrp.release_id = lrr.id
+                    WHERE lrp.project_id = p.id
+                    ORDER BY lrr.date_added DESC
+                    LIMIT 1
+                ) as release_id,
+                p.id as project_id
+                FROM sentry_project p
+                WHERE p.id IN ({})
+            ) as lr
+            JOIN sentry_release r
+            ON r.id = lr.release_id
+        """.format(
+            ', '.join(six.text_type(i.id) for i in item_list),
+        )))
+
+        queryset = ProjectOption.objects.filter(
+            project__in=item_list,
+            key__in=self.OPTION_KEYS,
+        )
+        options_by_project = defaultdict(dict)
+        for option in queryset.iterator():
+            options_by_project[option.project_id][option.key] = option.value
+
+        orgs = {
+            d['id']: d
+            for d in serialize(list(set(i.organization for i in item_list)), user)
+        }
+
+        latest_releases = {
+            r.actual_project_id: d
+            for r, d in zip(latest_release_list, serialize(latest_release_list, user))
+        }
+
+        for item in item_list:
+            attrs[item].update({
+                'latest_release': latest_releases.get(item.id),
+                'org': orgs[six.text_type(item.organization_id)],
+                'options': options_by_project[item.id],
+                'platforms': platforms_by_project[item.id],
+                'processing_issues': processing_issues_by_project.get(item.id, 0),
+            })
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        from sentry.plugins import plugins
+
+        data = super(DetailedProjectSerializer, self).serialize(
+            obj, attrs, user
+        )
+        data.update({
+            'latestRelease': attrs['latest_release'],
+            'options': {
+                'sentry:origins': '\n'.join(attrs['options'].get('sentry:origins', ['*']) or []),
+                'sentry:resolve_age': int(attrs['options'].get('sentry:resolve_age', 0)),
+                'sentry:scrub_data': bool(attrs['options'].get('sentry:scrub_data', True)),
+                'sentry:scrub_defaults': bool(attrs['options'].get('sentry:scrub_defaults', True)),
+                'sentry:safe_fields': attrs['options'].get('sentry:safe_fields', []),
+                'sentry:sensitive_fields': attrs['options'].get('sentry:sensitive_fields', []),
+                'sentry:csp_ignored_sources_defaults': bool(attrs['options'].get('sentry:csp_ignored_sources_defaults', True)),
+                'sentry:csp_ignored_sources': '\n'.join(attrs['options'].get('sentry:csp_ignored_sources', []) or []),
+                'sentry:reprocessing_active': bool(attrs['options'].get('sentry:reprocessing_active', False)),
+                'filters:blacklisted_ips': '\n'.join(attrs['options'].get('sentry:blacklisted_ips', [])),
+                'feedback:branding': attrs['options'].get('feedback:branding', '1') == '1',
+            },
+            'digestsMinDelay': attrs['options'].get(
+                'digests:mail:minimum_delay', digests.minimum_delay,
+            ),
+            'digestsMaxDelay': attrs['options'].get(
+                'digests:mail:maximum_delay', digests.maximum_delay,
+            ),
+            'subjectPrefix': attrs['options'].get('mail:subject_prefix'),
+            'subjectTemplate': attrs['options'].get('mail:subject_template') or DEFAULT_SUBJECT_TEMPLATE.template,
+            'organization': attrs['org'],
+            'plugins': serialize([
+                plugin
+                for plugin in plugins.configurable_for_project(obj, version=None)
+                if plugin.has_project_conf()
+            ], user, PluginSerializer(obj)),
+            'platforms': attrs['platforms'],
+            'processingIssues': attrs['processing_issues'],
+            'defaultEnvironment': attrs['options'].get('default_environment'),
+        })
+        return data
+
+
 class SharedProjectSerializer(Serializer):
     def serialize(self, obj, attrs, user):
         from sentry import features
diff --git a/src/sentry/runner/commands/repair.py b/src/sentry/runner/commands/repair.py
index 6e748b12ff..7a4199b5ca 100644
--- a/src/sentry/runner/commands/repair.py
+++ b/src/sentry/runner/commands/repair.py
@@ -65,7 +65,7 @@ def repair_callsigns():
     from sentry.utils.query import RangeQuerySetWrapperWithProgressBar, \
         RangeQuerySetWrapper
     from sentry.models.counter import increment_project_counter
-    from sentry.models import Organization, Group, Project, ProjectOption
+    from sentry.models import Organization, Group, Project
 
     click.echo('Repairing callsigns')
 
@@ -80,10 +80,6 @@ def repair_callsigns():
                     pk=project.id,
                     callsign=None
                 ).update(callsign=callsigns[project.id])
-                ProjectOption.objects.filter(
-                    project=project,
-                    key='sentry:reviewed-callsign'
-                ).delete()
             q = Group.objects.filter(
                 project=project,
                 short_id=None,
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index aaac5dcdc0..137f737fd0 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -21,23 +21,8 @@ let ERROR_TYPES = {
   ORG_NOT_FOUND: 'ORG_NOT_FOUND'
 };
 
-function doProjectsNeedShortId(teams) {
-  for (let i = 0; i < teams.length; i++) {
-    for (let j = 0; j < teams[i].projects.length; j++) {
-      if (!teams[i].projects[j].callSignReviewed) {
-        return true;
-      }
-    }
-  }
-  return false;
-}
-
 function getRequiredAdminActions(org) {
-  let rv = [];
-  if (doProjectsNeedShortId(org.teams)) {
-    rv.push('SET_SHORT_IDS');
-  }
-  return rv;
+  return [];
 }
 
 const OrganizationDetails = React.createClass({
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 8f60be27fd..0bc687bbf1 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -16,7 +16,8 @@ import {t} from '../../locale';
 
 const ERROR_TYPES = {
   MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',
-  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND'
+  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND',
+  UNKNOWN: 'UNKNOWN'
 };
 
 /**
@@ -142,20 +143,38 @@ const ProjectContext = React.createClass({
   },
 
   fetchData() {
-    let org = this.context.organization;
-    if (!org) {
-      return;
-    }
+    let {orgId, projectId} = this.props;
+    // we fetch core access/information from the global organization data
     let [activeTeam, activeProject] = this.identifyProject();
     let hasAccess = activeTeam && activeTeam.hasAccess;
 
     this.setState({
       loading: true,
+      // we bind project initially, but it'll rebind
       project: activeProject,
       team: activeTeam
     });
 
     if (activeProject && hasAccess) {
+      this.api.request(`/projects/${orgId}/${projectId}/`, {
+        success: data => {
+          this.setState({
+            loading: false,
+            project: data,
+            team: data.team,
+            error: false,
+            errorType: null
+          });
+        },
+        error: error => {
+          // TODO(dcramer): this should handle 404 (project not found)
+          this.setState({
+            loading: false,
+            error: false,
+            errorType: ERROR_TYPES.UNKNOWN
+          });
+        }
+      });
       // TODO(dcramer): move member list to organization level
       this.api.request(this.getMemberListEndpoint(), {
         success: data => {
@@ -170,9 +189,7 @@ const ProjectContext = React.createClass({
       });
 
       this.setState({
-        loading: false,
-        error: false,
-        errorType: null
+        loading: false
       });
     } else if (activeTeam && activeTeam.isMember) {
       this.setState({
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
index 65359ff16e..f74b97f9a8 100644
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
@@ -22,17 +22,13 @@ function getProjectInfoForReview(org) {
       let targetList = nonMemberProjects;
       if (team.isMember) {
         canReview = canWriteProjects;
-        if (!project.callSignReviewed) {
-          requiresReview++;
-          canReviewAnything = canReviewAnything || canReview;
-        }
         targetList = memberProjects;
       }
       targetList.push({
         projectId: project.id,
         projectName: project.name,
         isMember: team.isMember,
-        requiresReview: !project.callSignReviewed,
+        requiresReview: false,
         canReview: canReview,
         teamName: team.name,
         callSign: project.callSign || null
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 88a17f42f3..7c937f44fd 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -297,8 +297,6 @@ class ProjectSettingsView(ProjectView):
                 else:
                     project.update_option(key, value)
 
-            project.update_option('sentry:reviewed-callsign', True)
-
             self.create_audit_entry(
                 request,
                 organization=organization,
