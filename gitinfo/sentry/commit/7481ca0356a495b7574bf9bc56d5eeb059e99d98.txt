commit 7481ca0356a495b7574bf9bc56d5eeb059e99d98
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 26 12:41:40 2013 +0800

    Correct tests

diff --git a/src/sentry/web/frontend/explore.py b/src/sentry/web/frontend/explore.py
new file mode 100644
index 0000000000..c913e43f59
--- /dev/null
+++ b/src/sentry/web/frontend/explore.py
@@ -0,0 +1,79 @@
+"""
+sentry.web.frontend.explore
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from sentry.models import TagKey, TagValue, Group
+from sentry.web.decorators import login_required, has_access
+from sentry.web.helpers import render_to_response
+
+DEFAULT_SORT_OPTION = 'recent'
+SORT_OPTIONS = {
+    'recent': 'Last Seen',
+    'newest': 'First Seen',
+    'events': 'Number of Events',
+}
+
+
+@has_access
+@login_required
+def list_tag(request, team, project, tag_name):
+    try:
+        tag = TagKey.objects.get(project=project, key=tag_name)
+    except TagKey.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-stream', args=[team.slug, project.slug]))
+
+    sort = request.GET.get('sort')
+    if sort not in SORT_OPTIONS:
+        sort = DEFAULT_SORT_OPTION
+
+    tag_list = TagValue.objects.filter(project=project, key=tag_name)
+
+    if sort == 'recent':
+        tag_list = tag_list.order_by('-last_seen')
+    elif sort == 'newest':
+        tag_list = tag_list.order_by('-first_seen')
+    elif sort == 'events':
+        tag_list = tag_list.order_by('-times_seen')
+
+    return render_to_response('sentry/explore/list_tag.html', {
+        'team': team,
+        'project': project,
+        'tag': tag,
+        'tag_list': tag_list,
+        'sort_label': SORT_OPTIONS[sort],
+        'SORT_OPTIONS': SORT_OPTIONS,
+    }, request)
+
+
+@has_access
+@login_required
+def tag_details(request, team, project, tag_name, tag_id):
+    try:
+        tag = TagKey.objects.get(project=project, key=tag_name)
+    except TagKey.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-stream', args=[team.slug, project.slug]))
+
+    tag_value = TagValue.objects.get(
+        project=project,
+        key=tag_name,
+        id=tag_id,
+    )
+
+    event_list = Group.objects.filter(
+        grouptag__project=project,
+        grouptag__key=tag_name,
+        grouptag__value=tag.value,
+    )
+
+    return render_to_response('sentry/explore/tag_details.html', {
+        'team': team,
+        'project': project,
+        'tag': tag,
+        'tag_value': tag_value,
+        'event_list': event_list,
+    }, request)
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 790c4d5a15..31a7e00596 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -125,7 +125,10 @@ def remove_team(request, team):
 
     if form.is_valid():
         team.delete()
-        return HttpResponseRedirect(reverse('sentry-team-list'))
+        messages.add_message(
+            request, messages.SUCCESS,
+            _(u'The team %r was permanently deleted.') % (team.name.encode('utf-8'),))
+        return HttpResponseRedirect(reverse('sentry'))
 
     context = csrf(request)
     context.update({
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 216425c520..b46223a573 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -142,7 +142,6 @@ class DashboardTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/dashboard.html')
         assert resp.context['team'] == self.team
         assert resp.context['project_list'] == [self.project]
-        assert resp.context['SECTION'] == 'events'
 
 
 class GetStartedTest(TestCase):
@@ -161,5 +160,3 @@ class GetStartedTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/get_started.html')
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
-        assert resp.context['SECTION'] == 'team'
-        assert resp.context['SUBSECTION'] == 'projects'
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 04503fd006..cc4f1d3e2c 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -32,13 +32,6 @@ class BaseTeamTest(TestCase):
         self.login_as(self.user)
 
 
-class TeamListTest(BaseTeamTest):
-    def test_loads(self):
-        resp = self.client.post(reverse('sentry-team-list'))
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/teams/list.html')
-
-
 class NewTeamTest(BaseTeamTest):
     @fixture
     def path(self):
@@ -162,9 +155,9 @@ class RemoveTeamTest(BaseTeamTest):
     @mock.patch('sentry.web.frontend.teams.can_remove_team', mock.Mock(return_value=True))
     def test_valid_params(self):
         resp = self.client.post(self.path)
-        self.assertNotEquals(resp.status_code, 200)
-        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-team-list'))
-        self.assertFalse(Team.objects.filter(pk=self.team.pk).exists())
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry')
+        assert not Team.objects.filter(pk=self.team.pk).exists()
 
 
 class NewTeamMemberTest(BaseTeamTest):
