commit f0303ecb5048d6c3cb7a6372c4da456ffc9a288c
Author: Mark Story <mark@sentry.io>
Date:   Wed Jun 3 12:12:12 2020 -0400

    fix(discover) Fix incorrect conditions generated from user tag (#19164)
    
    Add normalization for the user tag so that event details tags table and
    drilldowns work consistently.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 8c76d8f025..a5762c6eec 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -44,6 +44,15 @@ const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   width: COL_WIDTH_UNDEFINED,
 };
 
+function normalizeUserTag(key: string, value: string) {
+  const parts = value.split(':', 2);
+  if (parts.length !== 2) {
+    return [key, parts[0]];
+  }
+  const normalizedKey = [key, parts[0]].join('.');
+  return [normalizedKey, parts[1]];
+}
+
 // TODO(mark) these types are coupled to the gridEditable component types and
 // I'd prefer the types to be more general purpose but that will require a second pass.
 export function decodeColumnOrder(
@@ -176,7 +185,7 @@ const TRANSFORM_AGGREGATES = {
 
 /**
  * Convert an aggregated query into one that does not have aggregates.
- * Can also apply additions conditions defined in `additionalConditions`
+ * Will also apply additions conditions defined in `additionalConditions`
  * and generate conditions based on the `dataRow` parameter and the current fields
  * in the `eventView`.
  */
@@ -307,19 +316,33 @@ function generateAdditionalConditions(
           // normalize the "timestamp" field to ensure the payload works
           conditions[column.field] = getUtcDateString(nextValue);
           break;
+        case 'user':
+          const normalized = normalizeUserTag(dataKey, nextValue);
+          conditions[normalized[0]] = normalized[1];
+          break;
         default:
           conditions[column.field] = nextValue;
       }
     }
 
     // If we have an event, check tags as well.
-    if (dataRow.tags && dataRow.tags instanceof Array) {
+    if (dataRow.tags && Array.isArray(dataRow.tags)) {
       const tagIndex = dataRow.tags.findIndex(item => item.key === dataKey);
       if (tagIndex > -1) {
         const key = specialKeys.includes(column.field)
           ? `tags[${column.field}]`
           : column.field;
-        conditions[key] = dataRow.tags[tagIndex].value;
+
+        const tagValue = dataRow.tags[tagIndex].value;
+        if (key === 'user') {
+          // Remove the user condition that might have been added
+          // from the user context.
+          delete conditions[key];
+          const normalized = normalizeUserTag(key, tagValue);
+          conditions[normalized[0]] = normalized[1];
+          return;
+        }
+        conditions[key] = tagValue;
       }
     }
   });
@@ -350,12 +373,18 @@ function generateExpandedConditions(
 
   // Add additional conditions provided and generated.
   for (const key in conditions) {
+    const value = additionalConditions[key];
     if (key === 'project.id') {
-      eventView.project = [...eventView.project, parseInt(additionalConditions[key], 10)];
+      eventView.project = [...eventView.project, parseInt(value, 10)];
       continue;
     }
     if (key === 'environment') {
-      eventView.environment = [...eventView.environment, additionalConditions[key]];
+      eventView.environment = [...eventView.environment, value];
+      continue;
+    }
+    if (key === 'user' && typeof value === 'string') {
+      const normalized = normalizeUserTag(key, value);
+      parsedQuery[normalized[0]] = [normalized[1]];
       continue;
     }
     const column = explodeFieldString(key);
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index c208cd1431..c1f183b1bf 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -254,11 +254,17 @@ describe('getExpandedResults()', function() {
     ]);
   });
 
-  it('applies provided conditions', () => {
+  it('applies provided additional conditions', () => {
     const view = new EventView(state);
     let result = getExpandedResults(view, {extra: 'condition'}, {});
     expect(result.query).toEqual('event.type:error extra:condition');
 
+    // handles user tag values.
+    result = getExpandedResults(view, {user: 'id:12735'}, {});
+    expect(result.query).toEqual('event.type:error user.id:12735');
+    result = getExpandedResults(view, {user: 'name:uhoh'}, {});
+    expect(result.query).toEqual('event.type:error user.name:uhoh');
+
     // quotes value
     result = getExpandedResults(view, {extra: 'has space'}, {});
     expect(result.query).toEqual('event.type:error extra:"has space"');
@@ -341,6 +347,44 @@ describe('getExpandedResults()', function() {
     expect(result.environment).toEqual(['staging']);
   });
 
+  it('applies the normalized user tag', function() {
+    const view = new EventView({
+      ...state,
+      fields: [{field: 'user'}, {field: 'title'}],
+    });
+    let event = {
+      title: 'something bad',
+      // user context should be ignored.
+      user: {
+        id: 1234,
+        username: 'uhoh',
+      },
+      tags: [{key: 'user', value: 'id:1234'}],
+    };
+    let result = getExpandedResults(view, {}, event);
+    expect(result.query).toEqual('event.type:error user.id:1234 title:"something bad"');
+
+    event = {
+      title: 'something bad',
+      tags: [{key: 'user', value: '1234'}],
+    };
+    result = getExpandedResults(view, {}, event);
+    expect(result.query).toEqual('event.type:error user:1234 title:"something bad"');
+  });
+
+  it('applies the user field in a table row', function() {
+    const view = new EventView({
+      ...state,
+      fields: [{field: 'user'}, {field: 'title'}],
+    });
+    const event = {
+      title: 'something bad',
+      user: 'id:1234',
+    };
+    const result = getExpandedResults(view, {}, event);
+    expect(result.query).toEqual('event.type:error user.id:1234 title:"something bad"');
+  });
+
   it('normalizes the timestamp field', () => {
     const view = new EventView({
       ...state,
