commit 47579088c07ae02e8964f77be6431390a3b1a105
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Nov 14 10:39:22 2018 -0800

    perf(ui): Fix nested Proxies and recursive proxy calls (#10584)
    
    Optimized usage of `MetaProxy` in group details.
    
    Fixes ISSUE-205

diff --git a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
index 7a7a305527..0116247998 100644
--- a/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/metaProxy.jsx
@@ -1,6 +1,7 @@
 import _ from 'lodash';
 
 const GET_META = Symbol('GET_META');
+const IS_PROXY = Symbol('IS_PROXY');
 
 function isAnnotated(meta) {
   if (_.isEmpty(meta)) return false;
@@ -15,7 +16,7 @@ export class MetaProxy {
     this.local = !local ? root : local;
   }
 
-  get(obj, prop) {
+  get(obj, prop, receiver) {
     // trap calls to `getMeta` to return meta object
     if (prop === GET_META) {
       return key => {
@@ -29,34 +30,50 @@ export class MetaProxy {
       };
     }
 
+    // this is how  we can determine if current `obj` is a proxy
+    if (prop === IS_PROXY) {
+      return true;
+    }
+
+    const value = Reflect.get(obj, prop, receiver);
     if (
-      !obj.hasOwnProperty(prop) ||
-      typeof obj[prop] !== 'object' ||
-      _.isNull(obj[prop])
+      !Reflect.has(obj, prop, receiver) ||
+      typeof value !== 'object' ||
+      _.isNull(value)
     ) {
-      return obj[prop];
+      return value;
+    }
+
+    // This is so we don't create a new Proxy from an object that is
+    // already a proxy. Otherwise we can get into very deep recursive calls
+    if (Reflect.get(obj, IS_PROXY, receiver)) {
+      return value;
     }
 
     // Make sure we apply proxy to all children (objects and arrays)
     // Do we need to check for annotated inside of objects?
-    return new Proxy(
-      obj[prop],
-      new MetaProxy(this._meta, this.local && this.local[prop])
-    );
+    return new Proxy(value, new MetaProxy(this._meta, this.local && this.local[prop]));
   }
 }
 
 export function withMeta(event) {
-  if (!event) return null;
+  if (!event) {
+    return null;
+  }
 
   // Return unproxied `event` if browser does not support `Proxy`
-  if (typeof window.Proxy === 'undefined') return event;
+  if (typeof window.Proxy === 'undefined' || typeof window.Reflect === 'undefined') {
+    return event;
+  }
 
   let _meta = event._meta;
   return new Proxy(event, new MetaProxy(_meta));
 }
 
 export function getMeta(obj, prop) {
-  if (typeof obj[GET_META] !== 'function') return null;
+  if (typeof obj[GET_META] !== 'function') {
+    return null;
+  }
+
   return obj[GET_META](prop);
 }
diff --git a/tests/js/spec/components/events/interfaces/utils.spec.jsx b/tests/js/spec/components/events/interfaces/utils.spec.jsx
index c1714daee9..c293b1670d 100644
--- a/tests/js/spec/components/events/interfaces/utils.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/utils.spec.jsx
@@ -1,3 +1,4 @@
+import {MetaProxy, withMeta} from 'app/components/events/meta/metaProxy';
 import {
   getCurlCommand,
   objectToSortedTupleArray,
@@ -76,6 +77,40 @@ describe('components/interfaces/utils', function() {
         })
       ).toEqual('curl \\\n "http://example.com/foo?foo=bar"');
     });
+
+    it('works with a Proxy', function() {
+      const spy = jest.spyOn(MetaProxy.prototype, 'get');
+      const data = {
+        fragment: '',
+        cookies: [],
+        inferredContentType: null,
+        env: {
+          SERVER_NAME: 'sentry',
+          SERVER_PORT: '443',
+          REMOTE_ADDR: '127.0.0.1',
+        },
+        headers: [
+          ['Accept-Language', 'en'],
+          ['Referer', 'http://example.com'],
+          [
+            'User-Agent',
+            'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36',
+          ],
+          ['Content-Type', 'application/json'],
+          ['Referer', 'http://example.com'],
+          ['Accept-Encoding', 'gzip'],
+        ],
+        url: 'https://www.sentry.io',
+        query: '',
+        data: null,
+        method: 'GET',
+      };
+      const eventWithProxy = withMeta(data);
+      getCurlCommand(eventWithProxy);
+
+      // This may need to change, but we should aim to keep this low
+      expect(spy).toHaveBeenCalledTimes(172);
+    });
   });
 
   describe('objectToSortedTupleArray()', function() {
