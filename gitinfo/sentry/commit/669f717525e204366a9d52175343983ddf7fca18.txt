commit 669f717525e204366a9d52175343983ddf7fca18
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jul 19 14:25:31 2018 -0700

    feat(ui): Add some basic chart wrappers (#9101)
    
    * AreaChart w/ previous period
    * PieChart
    
    Data shape is expected to change, as well as a lot of defaults.

diff --git a/docs-ui/components/areaChart.stories.js b/docs-ui/components/areaChart.stories.js
new file mode 100644
index 0000000000..4a6fdfe993
--- /dev/null
+++ b/docs-ui/components/areaChart.stories.js
@@ -0,0 +1,32 @@
+import React from 'react';
+
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import AreaChart from 'app/components/charts/areaChart';
+
+// eslint-disable-next-line
+storiesOf('Charts/AreaChart', module).add(
+  'default',
+  withInfo('Stacked AreaChart with previous period')(() => (
+    <AreaChart
+      startDate={new Date()}
+      series={[
+        {
+          name: 'Handled',
+          data: [150, 300, 250, 600, 342, 800, 750],
+        },
+        {
+          name: 'Unhandled',
+          data: [50, 200, 150, 300, 102, 283, 341],
+        },
+      ]}
+      lines={[
+        {
+          name: 'Previous',
+          data: [650, 300, 350, 300, 400, 250, 200],
+        },
+      ]}
+    />
+  ))
+);
diff --git a/docs-ui/components/pieChart.stories.js b/docs-ui/components/pieChart.stories.js
new file mode 100644
index 0000000000..2b338af088
--- /dev/null
+++ b/docs-ui/components/pieChart.stories.js
@@ -0,0 +1,31 @@
+import React from 'react';
+
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import PieChart from 'app/components/charts/pieChart';
+
+// eslint-disable-next-line
+storiesOf('Charts/PieChart', module).add(
+  'default',
+  withInfo('PieChart')(() => (
+    <PieChart
+      startDate={new Date()}
+      name="Browsers"
+      data={[
+        {
+          name: 'Chrome',
+          value: 3500,
+        },
+        {
+          name: 'Firefox',
+          value: 650,
+        },
+        {
+          name: 'Safari',
+          value: 250,
+        },
+      ]}
+    />
+  ))
+);
diff --git a/src/sentry/static/sentry/app/components/charts/areaChart.jsx b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
new file mode 100644
index 0000000000..1ffec95bb6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
@@ -0,0 +1,99 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import moment from 'moment';
+
+import theme from 'app/utils/theme';
+
+import AreaSeries from './series/areaSeries';
+import BaseChart from './baseChart';
+import LineSeries from './series/lineSeries';
+import Tooltip from './components/tooltip';
+import XAxis from './components/xAxis';
+import YAxis from './components/yAxis';
+
+class AreaChart extends React.Component {
+  static propTypes = {
+    // We passthrough all props exception `options`
+    ...BaseChart.propTypes,
+
+    startDate: PropTypes.string,
+    series: PropTypes.arrayOf(
+      PropTypes.shape({
+        name: PropTypes.string,
+        data: PropTypes.arrayOf(PropTypes.number),
+      })
+    ),
+    /**
+     * Other line series to display
+     */
+    lines: PropTypes.arrayOf(
+      PropTypes.shape({
+        name: PropTypes.string,
+        data: PropTypes.arrayOf(PropTypes.number),
+      })
+    ),
+  };
+
+  render() {
+    const {series, lines, startDate, ...props} = this.props;
+    if (!series.length) return null;
+
+    const numDates = series[0].data.length;
+    const DATES = [...Array(numDates)].map((value, i) =>
+      moment(startDate)
+        .add(i, 'day')
+        .format('MMM D')
+    );
+
+    return (
+      <BaseChart
+        {...props}
+        options={{
+          tooltip: Tooltip(),
+          title: {},
+          legend: {},
+          grid: {
+            top: 24,
+            bottom: 40,
+            left: '10%',
+            right: '10%',
+          },
+          xAxis: XAxis({
+            type: 'category',
+            data: DATES,
+          }),
+          yAxis: YAxis({}),
+          series: [
+            ...series.map((s, i) =>
+              AreaSeries({
+                stack: 'test',
+                name: s.name,
+                data: s.data,
+                lineStyle: {
+                  color: '#fff',
+                  width: 2,
+                },
+                areaStyle: {
+                  color: theme.charts.colors[i],
+                  opacity: 1.0,
+                },
+              })
+            ),
+            ...lines.map(s =>
+              LineSeries({
+                name: s.name,
+                data: s.data,
+                lineStyle: {
+                  color: theme.gray1,
+                  type: 'dotted',
+                },
+              })
+            ),
+          ],
+        }}
+      />
+    );
+  }
+}
+
+export default AreaChart;
diff --git a/src/sentry/static/sentry/app/components/charts/baseChart.jsx b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
new file mode 100644
index 0000000000..0e136bf485
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/baseChart.jsx
@@ -0,0 +1,103 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import ReactEchartsCore from 'echarts-for-react/lib/core';
+import 'zrender/lib/svg/svg';
+import echarts from 'echarts/lib/echarts';
+
+import theme from 'app/utils/theme';
+
+class BaseChart extends React.Component {
+  static propTypes = {
+    // see: https://ecomfe.github.io/echarts-doc/public/en/option.html
+    options: PropTypes.object,
+
+    // Chart height
+    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+
+    // Chart width
+    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+
+    // Use `canvas` when dealing with large datasets
+    // See: https://ecomfe.github.io/echarts-doc/public/en/tutorial.html#Render%20by%20Canvas%20or%20SVG
+    renderer: PropTypes.oneOf(['canvas', 'svg']),
+
+    devicePixelRatio: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+
+    // callback when chart is ready
+    onChartReady: PropTypes.func,
+
+    // theme name
+    // example theme: https://github.com/apache/incubator-echarts/blob/master/theme/dark.js
+    theme: PropTypes.string,
+
+    // Default array of color codes to use in charts
+    colors: PropTypes.arrayOf(PropTypes.string),
+
+    // states whether or not to merge with previous `option`
+    notMerge: PropTypes.bool,
+
+    // states whether not to prevent triggering events when calling setOption
+    silent: PropTypes.bool,
+
+    // states whether not to update chart immediately
+    lazyUpdate: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    height: null,
+    width: null,
+    renderer: 'svg',
+    notMerge: false,
+    lazyUpdate: false,
+    colors: theme.charts.colors,
+    options: {},
+    onChartReady: () => {},
+  };
+
+  handleChartReady = (...args) => {
+    let {onChartReady} = this.props;
+    onChartReady(...args);
+  };
+
+  render() {
+    let {
+      colors,
+      devicePixelRatio,
+      height,
+      width,
+      renderer,
+      options,
+      notMerge,
+      lazyUpdate,
+      silent,
+      style,
+    } = this.props;
+
+    return (
+      <ReactEchartsCore
+        ref={e => (this.chart = e)}
+        echarts={echarts}
+        option={{
+          color: colors,
+          ...options,
+        }}
+        notMerge={notMerge}
+        lazyUpdate={lazyUpdate}
+        silent={silent}
+        theme={this.props.theme}
+        onChartReady={this.handleChartReady}
+        onEvents={{
+          /* TBD */
+        }}
+        opts={{
+          height,
+          width,
+          renderer,
+          devicePixelRatio,
+        }}
+        style={style}
+      />
+    );
+  }
+}
+export default BaseChart;
diff --git a/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
new file mode 100644
index 0000000000..f5b21a4f9b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/tooltip.jsx
@@ -0,0 +1,9 @@
+import 'echarts/lib/component/tooltip';
+
+export default function Tooltip(props = {}) {
+  return {
+    show: true,
+    trigger: 'axis',
+    ...props,
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
new file mode 100644
index 0000000000..2ea6f1e752
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/xAxis.jsx
@@ -0,0 +1,21 @@
+import theme from 'app/utils/theme';
+
+export default function XAxis(props = {}) {
+  return {
+    boundaryGap: false,
+    axisLine: {
+      lineStyle: {
+        color: theme.gray1,
+      },
+    },
+    axisTick: {
+      lineStyle: {
+        color: theme.gray1,
+      },
+    },
+    axisLabel: {
+      margin: 12,
+    },
+    ...props,
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/components/yAxis.jsx b/src/sentry/static/sentry/app/components/charts/components/yAxis.jsx
new file mode 100644
index 0000000000..8f7fd38858
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/components/yAxis.jsx
@@ -0,0 +1,21 @@
+import theme from 'app/utils/theme';
+
+export default function YAxis(props = {}) {
+  return {
+    axisLine: {
+      show: false,
+    },
+    axisTick: {
+      show: false,
+    },
+    axisLabel: {
+      color: theme.gray1,
+    },
+    splitLine: {
+      lineStyle: {
+        color: theme.offWhite,
+      },
+    },
+    ...props,
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/pieChart.jsx b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
new file mode 100644
index 0000000000..3e385ada5f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/pieChart.jsx
@@ -0,0 +1,75 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import PieSeries from './series/pieSeries';
+import BaseChart from './baseChart';
+import Tooltip from './components/tooltip';
+
+class PieChart extends React.Component {
+  static propTypes = {
+    // We passthrough all props exception `options`
+    ...BaseChart.propTypes,
+
+    name: PropTypes.string,
+    data: PropTypes.arrayOf(
+      PropTypes.shape({
+        name: PropTypes.string,
+        value: PropTypes.number,
+      })
+    ),
+  };
+
+  render() {
+    const {name, data, ...props} = this.props;
+    if (!data.length) return null;
+
+    return (
+      <BaseChart
+        {...props}
+        options={{
+          tooltip: Tooltip(),
+          title: {},
+          legend: {},
+          grid: {
+            top: 24,
+            bottom: 40,
+            left: '10%',
+            right: '10%',
+          },
+          series: [
+            PieSeries({
+              name,
+              data,
+              avoidLabelOverlap: false,
+              label: {
+                normal: {
+                  formatter: '{b}\n{d}%',
+                  show: false,
+                  position: 'center',
+                },
+                emphasis: {
+                  show: true,
+                  textStyle: {
+                    fontSize: '18',
+                  },
+                },
+              },
+              itemStyle: {
+                normal: {
+                  label: {
+                    show: false,
+                  },
+                  labelLine: {
+                    show: false,
+                  },
+                },
+              },
+            }),
+          ],
+        }}
+      />
+    );
+  }
+}
+
+export default PieChart;
diff --git a/src/sentry/static/sentry/app/components/charts/series/areaSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/areaSeries.jsx
new file mode 100644
index 0000000000..6e332ee0e7
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/areaSeries.jsx
@@ -0,0 +1,7 @@
+import LineSeries from 'app/components/charts/series/lineSeries';
+
+export default function AreaSeries(props = {}) {
+  return LineSeries({
+    ...props,
+  });
+}
diff --git a/src/sentry/static/sentry/app/components/charts/series/lineSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/lineSeries.jsx
new file mode 100644
index 0000000000..2384fde584
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/lineSeries.jsx
@@ -0,0 +1,9 @@
+import 'echarts/lib/chart/line';
+
+export default function LineSeries(props = {}) {
+  return {
+    showSymbol: false,
+    ...props,
+    type: 'line',
+  };
+}
diff --git a/src/sentry/static/sentry/app/components/charts/series/pieSeries.jsx b/src/sentry/static/sentry/app/components/charts/series/pieSeries.jsx
new file mode 100644
index 0000000000..77bf0ffc6d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/charts/series/pieSeries.jsx
@@ -0,0 +1,9 @@
+import 'echarts/lib/chart/pie';
+
+export default function PieSeries(props = {}) {
+  return {
+    radius: ['50%', '70%'],
+    ...props,
+    type: 'pie',
+  };
+}
diff --git a/src/sentry/static/sentry/app/utils/theme.jsx b/src/sentry/static/sentry/app/utils/theme.jsx
index 391137d826..ad8898cb5f 100644
--- a/src/sentry/static/sentry/app/utils/theme.jsx
+++ b/src/sentry/static/sentry/app/utils/theme.jsx
@@ -202,4 +202,9 @@ theme.button = {
   },
 };
 
+theme.charts = {
+  colors: ['#4C416B', '#7A5195', '#BC5090', '#EF5675', '#FF764A', '#FFA600'],
+  previousPeriod: theme.gray1,
+};
+
 export default theme;
