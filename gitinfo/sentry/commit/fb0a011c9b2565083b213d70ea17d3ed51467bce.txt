commit fb0a011c9b2565083b213d70ea17d3ed51467bce
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 30 14:49:48 2016 -0700

    Fix rate limit editor + tests (#4047)

diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index 8969b0bbf3..0b333eb86f 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -4,7 +4,7 @@ import ApiMixin from '../../mixins/apiMixin';
 import IndicatorStore from '../../stores/indicatorStore';
 import OrganizationHomeContainer from '../../components/organizations/homeContainer';
 import OrganizationState from '../../mixins/organizationState';
-import {RangeInput} from '../../components/forms';
+import {RangeField} from '../../components/forms';
 import {t, tct} from '../../locale';
 
 const RateLimitEditor = React.createClass({
@@ -65,7 +65,7 @@ const RateLimitEditor = React.createClass({
     let canSave = savedProjectLimit === currentProjectLimit && !saving;
 
     return (
-      <form onSubmit={this.onSubmit}>
+      <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
           <p>
             {/* This may not translate well to all languages since maxRate may affect plural form of "events per minute" */}
             {tct('Your organization is limited to [strong:[maxRate] events per minute]. When this rate is exceeded the system will begin discarding data until the next interval.',
@@ -78,7 +78,7 @@ const RateLimitEditor = React.createClass({
 
         <p>{t('You may set a limit to the maximum amount a single project may send:')}</p>
 
-        <RangeInput
+        <RangeField
             defaultValue={savedProjectLimit}
             onChange={this.onProjectLimitChange}
             formatLabel={(value) => { return `${value}%`; }} />
@@ -117,7 +117,7 @@ const OrganizationRateLimits = React.createClass({
             {maxRate !== 0 ?
               <RateLimitEditor organization={org} />
             :
-              <p>{t('There are no rate limits configured for your organization.')}</p>
+              <p className="ref-no-rate-limits">{t('There are no rate limits configured for your organization.')}</p>
             }
           </div>
         </div>
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index 6be29a5b27..ebca0daee3 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -10,6 +10,7 @@ import signal
 from datetime import datetime
 from django.conf import settings
 from selenium import webdriver
+from selenium.common.exceptions import NoSuchElementException
 from selenium.webdriver.support.ui import WebDriverWait
 from selenium.webdriver.support import expected_conditions
 from six.moves.urllib.parse import quote, urlparse
@@ -50,6 +51,13 @@ class Browser(object):
         self.driver.delete(self.route(path), *args, **kwargs)
         return self
 
+    def element_exists(self, selector):
+        try:
+            self.driver.find_elements_by_css_selector(selector)
+        except NoSuchElementException:
+            return False
+        return True
+
     def wait_until(self, selector, timeout=3):
         """
         Waits until ``selector`` is found in the browser, or until ``timeout``
diff --git a/tests/acceptance/test_organization_rate_limits.py b/tests/acceptance/test_organization_rate_limits.py
new file mode 100644
index 0000000000..d19c1dea8a
--- /dev/null
+++ b/tests/acceptance/test_organization_rate_limits.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+from django.utils import timezone
+from mock import Mock, patch
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class OrganizationRateLimitsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(OrganizationRateLimitsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+        self.login_as(self.user)
+        self.path = '/organizations/{}/rate-limits/'.format(self.org.slug)
+
+    @patch('sentry.app.quotas.get_organization_quota', Mock(return_value=100))
+    def test_with_rate_limits(self):
+        self.project.update(first_event=timezone.now())
+        self.browser.get(self.path)
+        self.browser.wait_until('.organization-home')
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('organization rate limits with quota')
+        assert self.browser.element_exists('.ref-rate-limit-editor')
+
+    @patch('sentry.app.quotas.get_organization_quota', Mock(return_value=0))
+    def test_without_rate_limits(self):
+        self.project.update(first_event=timezone.now())
+        self.browser.get(self.path)
+        self.browser.wait_until('.organization-home')
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('organization rate limits without quota')
+        assert self.browser.element_exists('.ref-no-rate-limits')
