commit b0b7be8d4a2950aa617d1dc657ddc931abf9f569
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 12 18:25:06 2013 -0800

    Correct and test various check alerts behavior

diff --git a/src/sentry/counter/redis.py b/src/sentry/counter/redis.py
index 244620112a..283b157da1 100644
--- a/src/sentry/counter/redis.py
+++ b/src/sentry/counter/redis.py
@@ -43,8 +43,10 @@ class RedisCounter(Counter):
     def incr(self, group):
         now = time.time()
         with self.conn.map() as conn:
-            keys = [(self._make_key('project', now), group.project_id)]
-            keys = [(self._make_key('group', now), group.id)]
+            keys = [
+                (self._make_key('project', now), group.project_id),
+                (self._make_key('group', now), group.id),
+            ]
 
             for key, member in keys:
                 conn.zincrby(key, member)
@@ -57,7 +59,7 @@ class RedisCounter(Counter):
             when = time.time() - 60
         with self.conn.map() as conn:
             key = self._make_key(prefix, when)
-            results = conn.zrange(key)
+            results = conn.zrange(key, 0, -1, withscores=True)
             conn.delete(key)
 
         return {
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 9a7f5bc091..88cec6dc02 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -34,9 +34,10 @@ Alert expiration threshold MUST be > MINUTE_NORMALIZATION.
 from __future__ import division
 
 import time
-from datetime import timedelta
+from datetime import datetime, timedelta
 from celery.task import periodic_task, task
 from celery.task.schedules import crontab
+from django.conf import settings as dj_settings
 from django.utils import timezone
 
 
@@ -56,15 +57,16 @@ def check_alerts(**kwargs):
     from sentry import app
     from sentry.utils.queue import maybe_delay
 
-    when = time.time() - 60
-    datetime = timezone.fromtimestamp(when)
+    when = datetime.fromtimestamp(time.time() - 60)
+    if dj_settings.USE_TZ:
+        when = when.replace(tzinfo=timezone.utc)
 
     results = app.counter.extract_counts(prefix='project', when=when)['results']
-    for project_id, count in results.iteritems():
+    for project_id, count in results:
         maybe_delay(check_project_alerts,
-            project_id=project_id,
-            when=datetime,
-            count=count,
+            project_id=int(project_id),
+            when=when,
+            count=int(count),
             expires=120,
         )
 
diff --git a/tests/sentry/counter/redis/tests.py b/tests/sentry/counter/redis/tests.py
index e4cbe04f2b..af76fb89f1 100644
--- a/tests/sentry/counter/redis/tests.py
+++ b/tests/sentry/counter/redis/tests.py
@@ -3,6 +3,7 @@
 from __future__ import absolute_import
 
 import mock
+import time
 
 from sentry.counter.redis import RedisCounter
 from sentry.testutils import TestCase, fixture
@@ -23,12 +24,12 @@ class RedisCounterTest(TestCase):
         self.assertEquals(counter.conn.hosts[0].host, 'localhost')
 
     @mock.patch('sentry.counter.redis.time')
-    def test_make_key_response(self, time):
-        time = time.time
+    def test_make_key_response(self, time_):
+        time_ = time_.time
 
-        time.return_value = 1360644295.816033
+        time_.return_value = 1360644295.816033
         assert self.counter._make_key('project') == 'sentry.counter:project:22677404'
-        time.assert_called_once_with()
+        time_.assert_called_once_with()
 
         now = 1360654295.816033
         assert self.counter._make_key('team', now) == 'sentry.counter:team:22677571'
@@ -38,3 +39,11 @@ class RedisCounterTest(TestCase):
         self.counter.incr(self.group)
         self.counter.incr(self.group)
         self.counter.incr(self.group)
+
+        when = time.time()
+
+        results = self.counter.extract_counts(prefix='project', when=when)
+        assert results == {
+            'when': when,
+            'results': [(str(self.project.id), 3.0)],
+        }
diff --git a/tests/sentry/tasks/check_alerts/tests.py b/tests/sentry/tasks/check_alerts/tests.py
index ae8b499fb4..698180ae84 100644
--- a/tests/sentry/tasks/check_alerts/tests.py
+++ b/tests/sentry/tasks/check_alerts/tests.py
@@ -1,11 +1,43 @@
-from datetime import timedelta
+import mock
+from datetime import datetime, timedelta
 from django.utils import timezone
 from sentry.models import ProjectCountByMinute, Alert
-from sentry.tasks.check_alerts import check_project_alerts
+from sentry.tasks.check_alerts import check_project_alerts, check_alerts
 from sentry.testutils import TestCase
 from sentry.utils.dates import normalize_datetime
 
 
+class CheckAlertsTest(TestCase):
+    @mock.patch('sentry.utils.queue.maybe_delay')
+    @mock.patch('sentry.app.counter')
+    @mock.patch('sentry.tasks.check_alerts.time')
+    def test_does_fire_jobs(self, time, counter, maybe_delay):
+        time = time.time
+        time.return_value = 1360721852.660331
+
+        when = datetime.fromtimestamp(time.return_value - 60).replace(tzinfo=timezone.utc)
+
+        counter.extract_counts.return_value = {
+            'when': when,
+            'results': [
+                (str(self.project.id), 57.0),
+            ]
+        }
+        check_alerts()
+        time.assert_called_once_with()
+        counter.extract_counts.assert_called_once_with(
+            prefix='project',
+            when=when,
+        )
+        maybe_delay.assert_called_once_with(
+            check_project_alerts,
+            project_id=self.project.id,
+            when=when,
+            count=57,
+            expires=120
+        )
+
+
 class CheckProjectAlertsTest(TestCase):
     def create_counts(self, when, amount, minute_offset=0):
         ProjectCountByMinute.objects.create(
