commit 904b1069368be7ccc038e1253b12702633dadc6e
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 18 11:54:00 2015 -0700

    Add platform to compute_hashes() call

diff --git a/CHANGES b/CHANGES
index f82131d10e..eb3fc251ed 100644
--- a/CHANGES
+++ b/CHANGES
@@ -2,6 +2,7 @@ Version 7.5.0
 -------------
 
 - Corrected various issues involving sampled data. Things should now sample according to actual MATH.
+- Interface.compute_hashes() now receives the platform of the event.
 
 
 Version 7.4.2
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 6a3ac4e9e2..d5cc262d26 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -64,7 +64,7 @@ def md5_from_hash(hash_bits):
 def get_hashes_for_event(event):
     interfaces = event.interfaces
     for interface in interfaces.itervalues():
-        result = interface.compute_hashes()
+        result = interface.compute_hashes(event.platform)
         if not result:
             continue
         return map(md5_from_hash, result)
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 74953dd66a..c08e820cda 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -84,7 +84,7 @@ class Interface(object):
     def get_hash(self):
         return []
 
-    def compute_hashes(self):
+    def compute_hashes(self, platform):
         result = self.get_hash()
         if not result:
             return []
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 1cc0bf1dc5..18c7633452 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -193,7 +193,7 @@ class Exception(Interface):
     def get_path(self):
         return 'sentry.interfaces.Exception'
 
-    def compute_hashes(self):
+    def compute_hashes(self, platform):
         system_hash = self.get_hash(system_frames=True)
         if not system_hash:
             return []
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index eb30dffa42..03e5404734 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -445,7 +445,7 @@ class Stacktrace(Interface):
     def has_app_frames(self):
         return any(f.in_app is not None for f in self.frames)
 
-    def compute_hashes(self):
+    def compute_hashes(self, platform):
         system_hash = self.get_hash(system_frames=True)
         if not system_hash:
             return []
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index eca363f094..63c20f816a 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -124,7 +124,7 @@ class StacktraceTest(TestCase):
             'filename': 'bar.py',
             'in_app': None,
         }]))
-        result = interface.compute_hashes()
+        result = interface.compute_hashes('python')
         assert result == [['foo.py', 1, 'bar.py', 1], ['foo.py', 1]]
 
     def test_get_hash_with_only_required_vars(self):
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 41aba5cc73..c6a3036450 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -223,11 +223,12 @@ class GetHashesFromEventTest(TestCase):
                     'url': 'http://example.com'
                 },
             },
+            platform='python',
             message='Foo bar',
         )
         checksums = get_hashes_for_event(event)
         assert len(checksums) == 1
         checksum = checksums[0]
-        stack_comp_hash.assert_called_once_with()
+        stack_comp_hash.assert_called_once_with('python')
         assert not http_comp_hash.called
         assert checksum == '3858f62230ac3c915f300c664312c63f'
