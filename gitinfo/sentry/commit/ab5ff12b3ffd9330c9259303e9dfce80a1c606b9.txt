commit ab5ff12b3ffd9330c9259303e9dfce80a1c606b9
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Apr 30 10:44:06 2020 +0200

    ref(ui): Data privacy rules improvements (#18406)

diff --git a/src/sentry/static/sentry/app/components/checkboxFancy/checkboxFancy.tsx b/src/sentry/static/sentry/app/components/checkboxFancy/checkboxFancy.tsx
index d4ff62bd77..fb8eee79bb 100644
--- a/src/sentry/static/sentry/app/components/checkboxFancy/checkboxFancy.tsx
+++ b/src/sentry/static/sentry/app/components/checkboxFancy/checkboxFancy.tsx
@@ -10,6 +10,7 @@ type Props = {
   isDisabled?: boolean;
   size?: string;
   className?: string;
+  onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;
 } & React.ComponentProps<typeof CheckboxFancyContent>;
 
 const disabledStyles = (p: Props & {theme: Theme}) =>
@@ -26,13 +27,14 @@ const hoverStyles = (p: Props & {theme: Theme}) =>
   `;
 
 const CheckboxFancy = styled(
-  ({isChecked, className, isDisabled, isIndeterminate}: Props) => (
+  ({isChecked, className, isDisabled, isIndeterminate, onClick}: Props) => (
     <div
       data-test-id="checkbox-fancy"
       role="checkbox"
       aria-disabled={isDisabled}
       aria-checked={isChecked}
       className={className}
+      onClick={onClick}
     >
       <CheckboxFancyContent isIndeterminate={isIndeterminate} isChecked={isChecked} />
     </div>
diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index a3b739260f..16d91f6f38 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -72,6 +72,9 @@ const defaultStyles = {
       color: theme.gray2,
       cursor: 'not-allowed',
     }),
+    ...(!state.isSearchable && {
+      cursor: 'pointer',
+    }),
   }),
 
   menu: provided => ({
@@ -88,6 +91,7 @@ const defaultStyles = {
     ...provided,
     lineHeight: '1.5',
     fontSize: theme.fontSizeMedium,
+    cursor: 'pointer',
     color: state.isFocused
       ? theme.textColor
       : state.isSelected
diff --git a/src/sentry/static/sentry/app/icons/iconQuestion.tsx b/src/sentry/static/sentry/app/icons/iconQuestion.tsx
index 9d991a0062..8c8fe743ca 100644
--- a/src/sentry/static/sentry/app/icons/iconQuestion.tsx
+++ b/src/sentry/static/sentry/app/icons/iconQuestion.tsx
@@ -7,7 +7,7 @@ export const IconQuestion = React.forwardRef(function IconQuestion(
   {color: providedColor = 'currentColor', size: providedSize = 'sm', ...props}: IconProps,
   ref: React.Ref<SVGSVGElement>
 ) {
-  const color = providedColor;
+  const color = theme[providedColor] ?? providedColor;
   const size = theme.iconSizes[providedSize] ?? providedSize;
 
   return (
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
new file mode 100644
index 0000000000..c773c5250a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRules.tsx
@@ -0,0 +1,413 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t, tct} from 'app/locale';
+import {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';
+import {Client} from 'app/api';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import ExternalLink from 'app/components/links/externalLink';
+import SentryTypes from 'app/sentryTypes';
+import Button from 'app/components/button';
+
+import {defaultSuggestions as sourceDefaultSuggestions} from './dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions';
+import DataPrivacyRulesModal from './dataPrivacyRulesModal';
+import DataPrivacyRulesPanelContent from './dataPrivacyRulesContent';
+import {RuleType, MethodType, EventIdStatus} from './dataPrivacyRulesForm/types';
+
+const ADVANCED_DATASCRUBBING_LINK =
+  'https://docs.sentry.io/data-management/advanced-datascrubbing/';
+
+type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
+type Rule = NonNullable<ModalProps['rule']>;
+type SourceSuggestions = ModalProps['sourceSuggestions'];
+
+type PiiConfig = {
+  type: RuleType;
+  pattern: string;
+  redaction?: {
+    method?: MethodType;
+  };
+};
+
+type PiiConfigRule = {
+  [key: string]: PiiConfig;
+};
+
+type Applications = {[key: string]: Array<string>};
+
+type Props = {
+  disabled?: boolean;
+  endpoint: string;
+  relayPiiConfig?: string;
+  additionalContext?: React.ReactNode;
+};
+
+type State = {
+  rules: Array<Rule>;
+  savedRules: Array<Rule>;
+  relayPiiConfig?: string;
+  sourceSuggestions: SourceSuggestions;
+  eventId: ModalProps['eventId'];
+  showAddRuleModal?: boolean;
+};
+
+class DataPrivacyRules extends React.Component<Props, State> {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
+  state: State = {
+    rules: [],
+    savedRules: [],
+    relayPiiConfig: this.props.relayPiiConfig,
+    sourceSuggestions: [],
+    eventId: {
+      value: '',
+    },
+  };
+
+  componentDidMount() {
+    this.loadRules();
+    this.loadSourceSuggestions();
+  }
+
+  componentDidUpdate(_prevProps: Props, prevState: State) {
+    if (prevState.relayPiiConfig !== this.state.relayPiiConfig) {
+      this.loadRules();
+    }
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
+
+  api = new Client();
+
+  loadRules() {
+    try {
+      const relayPiiConfig = this.state.relayPiiConfig;
+      const piiConfig = relayPiiConfig ? JSON.parse(relayPiiConfig) : {};
+      const rules: PiiConfigRule = piiConfig.rules || {};
+      const applications: Applications = piiConfig.applications || {};
+      const convertedRules: Array<Rule> = [];
+
+      for (const application in applications) {
+        for (const rule of applications[application]) {
+          if (!rules[rule]) {
+            if (rule[0] === '@') {
+              const [type, method] = rule.slice(1).split(':');
+              convertedRules.push({
+                id: convertedRules.length,
+                type: type as RuleType,
+                method: method as MethodType,
+                source: application,
+              });
+            }
+            continue;
+          }
+
+          const resolvedRule = rules[rule];
+          if (resolvedRule.type === RuleType.PATTERN && resolvedRule.pattern) {
+            const method = resolvedRule?.redaction?.method;
+
+            convertedRules.push({
+              id: convertedRules.length,
+              type: RuleType.PATTERN,
+              method: method as MethodType,
+              source: application,
+              customRegularExpression: resolvedRule.pattern,
+            });
+          }
+        }
+      }
+
+      this.setState({
+        rules: convertedRules,
+        savedRules: convertedRules,
+      });
+    } catch {
+      addErrorMessage(t('Unable to load the rules'));
+    }
+  }
+
+  loadSourceSuggestions = async () => {
+    const {organization, project} = this.context;
+    const {eventId} = this.state;
+
+    if (!eventId.value) {
+      this.setState(prevState => ({
+        sourceSuggestions: sourceDefaultSuggestions,
+        eventId: {
+          ...prevState.eventId,
+          status: undefined,
+        },
+      }));
+      return;
+    }
+
+    this.setState(prevState => ({
+      sourceSuggestions: sourceDefaultSuggestions,
+      eventId: {
+        ...prevState.eventId,
+        status: EventIdStatus.LOADING,
+      },
+    }));
+
+    try {
+      const query: {projectId?: string; eventId: string} = {eventId: eventId.value};
+      if (project?.id) {
+        query.projectId = project.id;
+      }
+      const rawSuggestions = await this.api.requestPromise(
+        `/organizations/${organization.slug}/data-scrubbing-selector-suggestions/`,
+        {method: 'GET', query}
+      );
+      const sourceSuggestions: SourceSuggestions = rawSuggestions.suggestions;
+
+      if (sourceSuggestions && sourceSuggestions.length > 0) {
+        this.setState(prevState => ({
+          sourceSuggestions,
+          eventId: {
+            ...prevState.eventId,
+            status: EventIdStatus.LOADED,
+          },
+        }));
+        return;
+      }
+
+      this.setState(prevState => ({
+        sourceSuggestions: sourceDefaultSuggestions,
+        eventId: {
+          ...prevState.eventId,
+          status: EventIdStatus.LOADED,
+        },
+      }));
+    } catch {
+      this.setState(prevState => ({
+        eventId: {
+          ...prevState.eventId,
+          status: EventIdStatus.ERROR,
+        },
+      }));
+    }
+  };
+
+  handleSubmit = async () => {
+    const {endpoint} = this.props;
+    const {rules} = this.state;
+
+    let customRulesCounter = 0;
+    const applications: Applications = {};
+    const customRules: PiiConfigRule = {};
+
+    for (const rule of rules) {
+      let ruleName = `@${rule.type}:${rule.method}`;
+      if (rule.type === RuleType.PATTERN && rule.customRegularExpression) {
+        ruleName = `customRule${customRulesCounter}`;
+
+        customRulesCounter += 1;
+
+        customRules[ruleName] = {
+          type: RuleType.PATTERN,
+          pattern: rule.customRegularExpression,
+          redaction: {
+            method: rule.method,
+          },
+        };
+      }
+
+      if (!applications[rule.source]) {
+        applications[rule.source] = [];
+      }
+
+      if (!applications[rule.source].includes(ruleName)) {
+        applications[rule.source].push(ruleName);
+      }
+    }
+
+    const piiConfig = {
+      rules: customRules,
+      applications,
+    };
+
+    const relayPiiConfig = JSON.stringify(piiConfig);
+
+    await this.api
+      .requestPromise(endpoint, {
+        method: 'PUT',
+        data: {relayPiiConfig},
+      })
+      .then(() => {
+        this.setState({
+          relayPiiConfig,
+        });
+      })
+      .then(() => {
+        addSuccessMessage(t('Successfully saved data privacy rules'));
+      })
+      .catch(error => {
+        const errorMessage = error.responseJSON?.relayPiiConfig[0];
+
+        if (!errorMessage) {
+          addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
+          return;
+        }
+
+        if (errorMessage.startsWith('invalid selector: ')) {
+          for (const line of errorMessage.split('\n')) {
+            if (line.startsWith('1 | ')) {
+              const selector = line.slice(3);
+              addErrorMessage(t('Invalid selector: %s', selector));
+              break;
+            }
+          }
+          return;
+        }
+
+        if (errorMessage.startsWith('regex parse error:')) {
+          for (const line of errorMessage.split('\n')) {
+            if (line.startsWith('error:')) {
+              const regex = line.slice(6).replace(/at line \d+ column \d+/, '');
+              addErrorMessage(t('Invalid regex: %s', regex));
+              break;
+            }
+          }
+          return;
+        }
+
+        addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
+      });
+  };
+
+  handleAddRule = (newRule: Rule) => {
+    this.setState(
+      prevState => ({
+        rules: [
+          ...prevState.rules,
+          {
+            ...newRule,
+            id: prevState.rules.length + 1,
+          },
+        ],
+      }),
+      this.handleSubmit
+    );
+  };
+
+  handleDeleteRule = (rulesToBeDeleted: Array<Rule['id']>) => {
+    this.setState(
+      prevState => ({
+        rules: prevState.rules.filter(rule => !rulesToBeDeleted.includes(rule.id)),
+      }),
+      this.handleSubmit
+    );
+  };
+
+  handleUpdateRule = (updatedRule: Rule) => {
+    this.setState(
+      prevState => ({
+        rules: prevState.rules.map(rule => {
+          if (rule.id === updatedRule.id) {
+            return updatedRule;
+          }
+          return rule;
+        }),
+      }),
+      this.handleSubmit
+    );
+  };
+
+  handleToggleAddRuleModal = (showAddRuleModal: boolean) => () => {
+    this.setState({
+      showAddRuleModal,
+    });
+  };
+
+  handleUpdateEventId = (eventId: string) => {
+    this.setState(
+      {
+        eventId: {
+          value: eventId,
+        },
+      },
+      this.loadSourceSuggestions
+    );
+  };
+
+  render() {
+    const {additionalContext, disabled} = this.props;
+    const {rules, sourceSuggestions, showAddRuleModal, eventId} = this.state;
+
+    return (
+      <React.Fragment>
+        <Panel>
+          <PanelHeader>
+            <div>{t('Data Privacy Rules')}</div>
+          </PanelHeader>
+          <PanelAlert type="info">
+            {`${additionalContext} ${t(
+              'The new rules will only apply to upcoming events. '
+            )}`}{' '}
+            {tct('For more details, see [linkToDocs].', {
+              linkToDocs: (
+                <ExternalLink href={ADVANCED_DATASCRUBBING_LINK}>
+                  {t('full documentation on data scrubbing')}
+                </ExternalLink>
+              ),
+            })}
+          </PanelAlert>
+          <PanelBody>
+            <DataPrivacyRulesPanelContent
+              rules={rules}
+              disabled={disabled}
+              onDeleteRule={this.handleDeleteRule}
+              onUpdateRule={this.handleUpdateRule}
+              onUpdateEventId={this.handleUpdateEventId}
+              eventId={eventId}
+              sourceSuggestions={sourceSuggestions}
+            />
+            <PanelAction>
+              <Button
+                href={ADVANCED_DATASCRUBBING_LINK}
+                target="_blank"
+                disabled={disabled}
+              >
+                {t('Read the docs')}
+              </Button>
+              <Button
+                disabled={disabled}
+                onClick={this.handleToggleAddRuleModal(true)}
+                priority="primary"
+              >
+                {t('Add Rule')}
+              </Button>
+            </PanelAction>
+          </PanelBody>
+        </Panel>
+        {showAddRuleModal && (
+          <DataPrivacyRulesModal
+            sourceSuggestions={sourceSuggestions}
+            onSaveRule={this.handleAddRule}
+            onClose={this.handleToggleAddRuleModal(false)}
+            onUpdateEventId={this.handleUpdateEventId}
+            eventId={eventId}
+          />
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export default DataPrivacyRules;
+
+const PanelAction = styled('div')`
+  padding: ${space(1)} ${space(2)};
+  position: relative;
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: auto auto;
+  justify-content: flex-end;
+  border-top: 1px solid ${p => p.theme.borderDark};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
new file mode 100644
index 0000000000..f020467750
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesContent.tsx
@@ -0,0 +1,138 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import {defined} from 'app/utils';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import {IconDelete, IconWarning, IconEdit} from 'app/icons';
+import TextOverflow from 'app/components/textOverflow';
+import Button from 'app/components/button';
+
+import DataPrivacyRulesModal from './dataPrivacyRulesModal';
+import {getRuleTypeLabel, getMethodTypeLabel} from './dataPrivacyRulesForm/utils';
+
+type ModalProps = React.ComponentProps<typeof DataPrivacyRulesModal>;
+type Rule = NonNullable<ModalProps['rule']>;
+
+type Props = {
+  rules: Array<Rule>;
+  onUpdateRule: (updatedRule: Rule) => void;
+  onDeleteRule: (rulesToBeDeleted: Array<Rule['id']>) => void;
+} & Pick<ModalProps, 'disabled' | 'eventId' | 'onUpdateEventId' | 'sourceSuggestions'>;
+
+type State = {
+  editRule?: Rule['id'];
+};
+
+class DataPrivacyRulesContent extends React.Component<Props, State> {
+  state: State = {
+    editRule: undefined,
+  };
+
+  handleDeleteRule = (ruleId: Rule['id']) => () => {
+    const {onDeleteRule} = this.props;
+    onDeleteRule([ruleId]);
+  };
+
+  handleShowEditRuleModal = (ruleId: Rule['id']) => () => {
+    this.setState({
+      editRule: ruleId,
+    });
+  };
+
+  handleCloseEditRuleModal = () => {
+    this.setState({
+      editRule: undefined,
+    });
+  };
+
+  handleSave = (updatedRule: Rule) => {
+    const {onUpdateRule} = this.props;
+
+    this.setState(
+      {
+        editRule: undefined,
+      },
+      () => {
+        onUpdateRule(updatedRule);
+      }
+    );
+  };
+
+  render() {
+    const {editRule} = this.state;
+    const {rules, sourceSuggestions, onUpdateEventId, eventId} = this.props;
+
+    if (rules.length === 0) {
+      return (
+        <EmptyMessage
+          icon={<IconWarning size="xl" />}
+          description={t('You have no data privacy rules')}
+        />
+      );
+    }
+
+    return (
+      <React.Fragment>
+        <List>
+          {rules.map(({id, method, type, source}) => {
+            const methodLabel = getMethodTypeLabel(method);
+            const typelabel = getRuleTypeLabel(type);
+            return (
+              <ListItem key={id}>
+                <TextOverflow>
+                  {`[${methodLabel}] [${typelabel}] ${t('from')} [${source}]`}
+                </TextOverflow>
+                <Button
+                  size="small"
+                  onClick={this.handleShowEditRuleModal(id)}
+                  icon={<IconEdit />}
+                />
+                <Button
+                  size="small"
+                  onClick={this.handleDeleteRule(id)}
+                  icon={<IconDelete />}
+                />
+              </ListItem>
+            );
+          })}
+        </List>
+        {defined(editRule) && (
+          <DataPrivacyRulesModal
+            rule={rules[editRule]}
+            sourceSuggestions={sourceSuggestions}
+            onClose={this.handleCloseEditRuleModal}
+            onUpdateEventId={onUpdateEventId}
+            onSaveRule={this.handleSave}
+            eventId={eventId}
+          />
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export default DataPrivacyRulesContent;
+
+const List = styled('ul')`
+  list-style: none;
+  margin: 0;
+  padding: 0;
+  margin-bottom: 0 !important;
+`;
+
+const ListItem = styled('li')`
+  display: grid;
+  grid-template-columns: auto max-content max-content;
+  grid-column-gap: ${space(1)};
+  align-items: center;
+  padding: ${space(1)} ${space(2)};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  &:hover {
+    background-color: ${p => p.theme.offWhite};
+  }
+  &:last-child {
+    border-bottom: 0;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
new file mode 100644
index 0000000000..08eaf55556
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesForm.tsx
@@ -0,0 +1,195 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import sortBy from 'lodash/sortBy';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import TextField from 'app/components/forms/textField';
+
+import {getRuleTypeLabel, getMethodTypeLabel} from './utils';
+import {RuleType, MethodType} from './types';
+import DataPrivacyRulesFormSource from './dataPrivacyRulesFormSource';
+import DataPrivacyRulesFormField from './dataPrivacyRulesFormField';
+import DataPrivacyRulesFormSelectControl from './dataPrivacyRulesFormSelectControl';
+import DataPrivacyRulesFormEventId from './dataPrivacyRulesFormEventId';
+
+type Rule = {
+  id: number;
+  type: RuleType;
+  method: MethodType;
+  source: string;
+  customRegularExpression?: string;
+};
+
+type EventIdProps = React.ComponentProps<typeof DataPrivacyRulesFormEventId>;
+type SourceProps = React.ComponentProps<typeof DataPrivacyRulesFormSource>;
+
+type Props = EventIdProps & {
+  rule: Rule;
+  sourceSuggestions: SourceProps['suggestions'];
+  onChange: (rule: Rule) => void;
+  onUpdateEventId: (eventId: string) => void;
+};
+
+type State = {
+  errors: {
+    [key: string]: string;
+  };
+};
+class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
+  state: State = {
+    errors: {},
+  };
+
+  componentDidUpdate(prevProps: Props) {
+    if (prevProps.rule.source !== this.props.rule.source) {
+      this.handleValidation('source')();
+    }
+  }
+
+  handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
+    const rule: Rule = {
+      ...this.props.rule,
+      [stateProperty]: value,
+    };
+
+    if (rule.type !== RuleType.PATTERN) {
+      delete rule.customRegularExpression;
+    }
+
+    this.props.onChange({
+      ...rule,
+    });
+  };
+
+  handleValidation = <T extends keyof Omit<Rule, 'id'>>(field: T) => () => {
+    const errors = {...this.state.errors};
+    const isFieldValueEmpty = !this.props.rule[field];
+    const fieldErrorAlreadyExist = errors[field];
+
+    if (isFieldValueEmpty && fieldErrorAlreadyExist) {
+      return;
+    }
+
+    if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
+      errors[field] = t('Field Required');
+    }
+
+    if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
+      delete errors[field];
+    }
+
+    this.setState({
+      errors,
+    });
+  };
+
+  render() {
+    const {rule, disabled, sourceSuggestions, onUpdateEventId, eventId} = this.props;
+    const {source, customRegularExpression, type, method} = rule;
+    const {errors} = this.state;
+
+    return (
+      <Wrapper>
+        <WrapperSelectFields>
+          <DataPrivacyRulesFormField label={t('Method')} tooltipInfo={t('What to do')}>
+            <DataPrivacyRulesFormSelectControl
+              placeholder={t('Select method')}
+              name="method"
+              options={sortBy(Object.values(MethodType)).map(value => ({
+                label: getMethodTypeLabel(value),
+                value,
+              }))}
+              value={method}
+              onChange={({value}) => this.handleChange('method', value)}
+              isDisabled={disabled}
+            />
+          </DataPrivacyRulesFormField>
+          <DataPrivacyRulesFormField
+            label={t('Data Type')}
+            tooltipInfo={t(
+              'What to look for. Use an existing pattern or define your own using regular expressions.'
+            )}
+          >
+            <DataPrivacyRulesFormSelectControl
+              placeholder={t('Select type')}
+              name="type"
+              options={sortBy(Object.values(RuleType)).map(value => ({
+                label: getRuleTypeLabel(value),
+                value,
+              }))}
+              value={type}
+              onChange={({value}) => this.handleChange('type', value)}
+              isDisabled={disabled}
+            />
+          </DataPrivacyRulesFormField>
+        </WrapperSelectFields>
+        {type === RuleType.PATTERN && (
+          <DataPrivacyRulesFormField
+            label={t('Regex matches')}
+            tooltipInfo={t('Custom Perl-style regex (PCRE)')}
+            isFullWidth
+          >
+            <CustomRegularExpression
+              name="customRegularExpression"
+              placeholder={t('[a-zA-Z0-9]+')}
+              onChange={(value: string) => {
+                this.handleChange('customRegularExpression', value);
+              }}
+              value={customRegularExpression}
+              onBlur={this.handleValidation('customRegularExpression')}
+              error={errors.customRegularExpression}
+              disabled={disabled}
+            />
+          </DataPrivacyRulesFormField>
+        )}
+        <DataPrivacyRulesFormEventId
+          onUpdateEventId={onUpdateEventId}
+          eventId={eventId}
+        />
+        <DataPrivacyRulesFormField
+          label={t('Source')}
+          tooltipInfo={t(
+            'Where to look. In the simplest case this can be an attribute name.'
+          )}
+        >
+          <DataPrivacyRulesFormSource
+            onChange={(value: string) => {
+              this.handleChange('source', value);
+            }}
+            value={source}
+            onBlur={this.handleValidation('source')}
+            suggestions={sourceSuggestions}
+            error={errors.source}
+            disabled={disabled}
+          />
+        </DataPrivacyRulesFormField>
+      </Wrapper>
+    );
+  }
+}
+
+export default DataPrivacyRulesForm;
+
+const Wrapper = styled('div')`
+  display: grid;
+  grid-row-gap: ${space(2)};
+`;
+
+const WrapperSelectFields = styled('div')`
+  display: grid;
+  grid-gap: ${space(2)};
+  grid-template-columns: 1fr;
+  @media (min-width: ${p => p.theme.breakpoints[0]}) {
+    grid-template-columns: auto auto;
+  }
+`;
+
+const CustomRegularExpression = styled(TextField)`
+  font-size: ${p => p.theme.fontSizeSmall};
+  height: 40px;
+  input {
+    height: 40px;
+    font-family: ${p => p.theme.text.familyMono};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
new file mode 100644
index 0000000000..b176d3591f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormEventId.tsx
@@ -0,0 +1,165 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import isEqual from 'lodash/isEqual';
+
+import TextField from 'app/components/forms/textField';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import ControlState from 'app/views/settings/components/forms/field/controlState';
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+
+import DataPrivacyRulesPanelFormField from './dataPrivacyRulesFormField';
+import {EventIdStatus} from './types';
+
+type EventId = {
+  value: string;
+  status?: EventIdStatus;
+};
+
+type Props = {
+  onUpdateEventId: (eventId: string) => void;
+  eventId: EventId;
+  disabled?: boolean;
+};
+
+const loadEventIdStatus = (status?: EventIdStatus) => {
+  switch (status) {
+    case EventIdStatus.INVALID:
+      addErrorMessage(t("That's not a valid event ID"));
+      break;
+    case EventIdStatus.ERROR:
+      addErrorMessage(t('Something went wrong while fetching the suggestions'));
+      break;
+    case EventIdStatus.NOT_FOUND:
+      addErrorMessage(t('The chosen event was not found in projects you have access to'));
+      break;
+    case EventIdStatus.LOADED:
+      addSuccessMessage(t('Successfully loaded event for autocompletion'));
+      break;
+    default:
+  }
+};
+
+type State = {
+  value: string;
+  status?: EventIdStatus;
+};
+
+class DataPrivacyRulesFormEventId extends React.Component<Props, State> {
+  state = {
+    value: this.props.eventId.value,
+    status: this.props.eventId.status,
+  };
+
+  componentDidUpdate(prevProps: Props) {
+    if (!isEqual(prevProps.eventId, this.props.eventId)) {
+      this.loadState();
+    }
+  }
+
+  loadState = () => {
+    this.setState(
+      {
+        ...this.props.eventId,
+      },
+      this.loadStatus
+    );
+  };
+
+  loadStatus = () => {
+    loadEventIdStatus(this.state.status);
+  };
+
+  handleChange = (value: string) => {
+    const eventId = value.replace(/-/g, '').trim();
+
+    if (eventId !== this.state.value) {
+      this.setState({
+        value: eventId,
+        status: undefined,
+      });
+    }
+  };
+
+  isEventIdValid = (): boolean => {
+    const {value} = this.state;
+
+    if (value && value.length !== 32) {
+      this.setState({status: EventIdStatus.INVALID}, this.loadStatus);
+      return false;
+    }
+
+    return true;
+  };
+
+  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {
+    event.preventDefault();
+
+    if (this.isEventIdValid()) {
+      this.props.onUpdateEventId(this.state.value);
+    }
+  };
+
+  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    const {keyCode} = event;
+
+    if (keyCode === 13 && this.isEventIdValid()) {
+      this.props.onUpdateEventId(this.state.value);
+    }
+  };
+
+  render() {
+    const {disabled} = this.props;
+    const {value, status} = this.state;
+
+    return (
+      <DataPrivacyRulesPanelFormField
+        label={t('Event ID (Optional)')}
+        tooltipInfo={t(
+          'Providing an event ID will automatically provide you a list of suggested sources'
+        )}
+      >
+        <EventIdFieldWrapper>
+          <StyledTextField
+            name="eventId"
+            disabled={disabled}
+            value={value}
+            placeholder={t('XXXXXXXXXXXXXX')}
+            onChange={this.handleChange}
+            onKeyDown={this.handleKeyDown}
+            onBlur={this.handleBlur}
+            showStatus={status !== EventIdStatus.LOADED}
+          />
+          <Status>
+            {status === EventIdStatus.LOADING && <ControlState isSaving />}
+            {status === EventIdStatus.INVALID && <ControlState error />}
+            {status === EventIdStatus.ERROR && <ControlState error />}
+            {status === EventIdStatus.NOT_FOUND && <ControlState error />}
+          </Status>
+        </EventIdFieldWrapper>
+      </DataPrivacyRulesPanelFormField>
+    );
+  }
+}
+export default DataPrivacyRulesFormEventId;
+
+const StyledTextField = styled(TextField)<{showStatus: boolean}>`
+  flex: 1;
+  font-weight: 400;
+  input {
+    height: 40px;
+    padding-right: ${p => (p.showStatus ? space(4) : space(1.5))};
+  }
+  margin-bottom: 0;
+`;
+
+const Status = styled('div')`
+  position: absolute;
+  right: 0;
+`;
+
+const EventIdFieldWrapper = styled('div')`
+  position: relative;
+  display: flex;
+  align-items: center;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormField.tsx
new file mode 100644
index 0000000000..b5bc713873
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormField.tsx
@@ -0,0 +1,52 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {css} from '@emotion/core';
+
+import {IconQuestion} from 'app/icons/iconQuestion';
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+
+type Props = {
+  label: string;
+  tooltipInfo: string;
+  children: React.ReactNode;
+  isFullWidth?: boolean;
+};
+
+const DataPrivacyRulesFormField = ({
+  label,
+  tooltipInfo,
+  children,
+  isFullWidth,
+}: Props) => (
+  <Wrapper isFullWidth={isFullWidth}>
+    <Label>
+      <LabelDescription>{label}</LabelDescription>
+      <Tooltip title={tooltipInfo} position="top">
+        <IconQuestion color="gray1" />
+      </Tooltip>
+    </Label>
+    {children}
+  </Wrapper>
+);
+
+export default DataPrivacyRulesFormField;
+
+const Wrapper = styled('div')<{isFullWidth?: boolean}>`
+  ${p =>
+    p.isFullWidth &&
+    css`
+      grid-column-start: 1;
+      grid-column-end: -1;
+    `}
+`;
+
+const Label = styled('div')`
+  display: flex;
+  align-items: center;
+  margin-bottom: ${space(0.5)};
+`;
+
+const LabelDescription = styled('span')`
+  margin-right: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
new file mode 100644
index 0000000000..9b8960cc6f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSelectControl.tsx
@@ -0,0 +1,28 @@
+import React from 'react';
+
+import SelectControl from 'app/components/forms/selectControl';
+
+type SelectControlProps = React.ComponentProps<typeof SelectControl>;
+
+type Props = Pick<
+  SelectControlProps,
+  'value' | 'placeholder' | 'name' | 'onChange' | 'options' | 'isDisabled'
+>;
+
+const DataPrivacyRulesPanelFormSelectControl = ({...props}: Props) => (
+  <SelectControl
+    {...props}
+    isSearchable={false}
+    styles={{
+      control: (provided: {[x: string]: string | number | boolean}) => ({
+        ...provided,
+        minHeight: '40px',
+        height: '40px',
+      }),
+    }}
+    openOnFocus
+    required
+  />
+);
+
+export default DataPrivacyRulesPanelFormSelectControl;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
rename to src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
index 71261b1b58..132e2a9ecc 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
@@ -10,28 +10,26 @@ import {defined} from 'app/utils';
 import {
   unaryOperatorSuggestions,
   binaryOperatorSuggestions,
-  Suggestion,
-  Suggestions,
-  SuggestionType,
-} from './dataPrivacyRulesPanelSelectorFieldTypes';
-
-type State = {
-  suggestions: Suggestions;
-  fieldValues: Array<Suggestion | Array<Suggestion>>;
-  activeSuggestion: number;
-  showSuggestions: boolean;
-};
+} from './dataPrivacyRulesFormSourceSuggestions';
+import {SourceSuggestion, SourceSuggestionType} from './types';
 
 type Props = {
   value: string;
   onChange: (value: string) => void;
-  selectorSuggestions: Array<Suggestion>;
+  suggestions: Array<SourceSuggestion>;
   error?: string;
   onBlur?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
   disabled?: boolean;
 };
 
-class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
+type State = {
+  suggestions: Array<SourceSuggestion>;
+  fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>>;
+  activeSuggestion: number;
+  showSuggestions: boolean;
+};
+
+class DataPrivacyRulesFormSource extends React.Component<Props, State> {
   state: State = {
     suggestions: [],
     fieldValues: [],
@@ -49,7 +47,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   }
 
   componentDidUpdate(prevProps: Props) {
-    if (prevProps.selectorSuggestions !== this.props.selectorSuggestions) {
+    if (prevProps.suggestions !== this.props.suggestions) {
       this.loadFieldValues(this.props.value);
       this.hideSuggestions();
     }
@@ -71,22 +69,22 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   }
 
   getValueSuggestions() {
-    return this.props.selectorSuggestions;
+    return this.props.suggestions;
   }
 
-  getFilteredSuggestions = (value: string, type: SuggestionType) => {
-    let valuesToBeFiltered: Array<Suggestion> = [];
+  getFilteredSuggestions = (value: string, type: SourceSuggestionType) => {
+    let valuesToBeFiltered: Array<SourceSuggestion> = [];
 
     switch (type) {
-      case 'binary': {
+      case SourceSuggestionType.BINARY: {
         valuesToBeFiltered = binaryOperatorSuggestions;
         break;
       }
-      case 'value': {
+      case SourceSuggestionType.VALUE: {
         valuesToBeFiltered = this.getValueSuggestions();
         break;
       }
-      case 'unary': {
+      case SourceSuggestionType.UNARY: {
         valuesToBeFiltered = unaryOperatorSuggestions;
         break;
       }
@@ -110,7 +108,9 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     return filteredSuggestions;
   };
 
-  getNewSuggestions = (fieldValues: Array<Suggestion | Array<Suggestion>>) => {
+  getNewSuggestions = (
+    fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>>
+  ) => {
     const lastFieldValue = fieldValues[fieldValues.length - 1];
     const penultimateFieldValue = fieldValues[fieldValues.length - 2];
 
@@ -122,25 +122,31 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     if (Array.isArray(penultimateFieldValue)) {
       if (lastFieldValue?.type === 'binary') {
         // returns filtered values
-        return this.getFilteredSuggestions(lastFieldValue?.value, 'value');
+        return this.getFilteredSuggestions(
+          lastFieldValue?.value,
+          SourceSuggestionType.VALUE
+        );
       }
       // returns all binaries without any filter
-      return this.getFilteredSuggestions('', 'binary');
+      return this.getFilteredSuggestions('', SourceSuggestionType.BINARY);
     }
 
     if (lastFieldValue?.type === 'value' && penultimateFieldValue?.type === 'unary') {
       // returns filtered values
-      return this.getFilteredSuggestions(lastFieldValue?.value, 'value');
+      return this.getFilteredSuggestions(
+        lastFieldValue?.value,
+        SourceSuggestionType.VALUE
+      );
     }
 
     if (lastFieldValue?.type === 'unary') {
       // returns all values without any filter
-      return this.getFilteredSuggestions('', 'value');
+      return this.getFilteredSuggestions('', SourceSuggestionType.VALUE);
     }
 
     if (lastFieldValue?.type === 'string' && penultimateFieldValue?.type === 'value') {
       // returns all binaries without any filter
-      return this.getFilteredSuggestions('', 'binary');
+      return this.getFilteredSuggestions('', SourceSuggestionType.BINARY);
     }
 
     if (
@@ -149,7 +155,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
       !penultimateFieldValue?.value
     ) {
       // returns all values without any filter
-      return this.getFilteredSuggestions('', 'string');
+      return this.getFilteredSuggestions('', SourceSuggestionType.STRING);
     }
 
     if (
@@ -158,7 +164,10 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
       lastFieldValue?.type === 'binary'
     ) {
       // returns filtered binaries
-      return this.getFilteredSuggestions(lastFieldValue?.value, 'binary');
+      return this.getFilteredSuggestions(
+        lastFieldValue?.value,
+        SourceSuggestionType.BINARY
+      );
     }
 
     return this.getFilteredSuggestions(lastFieldValue?.value, lastFieldValue?.type);
@@ -171,7 +180,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   };
 
   loadFieldValues = (newValue: string) => {
-    const fieldValues: Array<Suggestion | Array<Suggestion>> = [];
+    const fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>> = [];
 
     const splittedValue = newValue.split(' ');
 
@@ -196,7 +205,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
         if (!selector) {
           fieldValues.push([
             unaryOperatorSuggestions[0],
-            {type: 'string', value: valueAfterUnaryOperator},
+            {type: SourceSuggestionType.STRING, value: valueAfterUnaryOperator},
           ]);
           continue;
         }
@@ -210,7 +219,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
         continue;
       }
 
-      fieldValues.push({type: 'string', value});
+      fieldValues.push({type: SourceSuggestionType.STRING, value});
     }
 
     const filteredSuggestions = this.getNewSuggestions(fieldValues);
@@ -258,7 +267,9 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     onChange(newValue.join(' '));
   };
 
-  getNewFieldValues = (suggestion: Suggestion): Array<Suggestion | Array<Suggestion>> => {
+  getNewFieldValues = (
+    suggestion: SourceSuggestion
+  ): Array<SourceSuggestion | Array<SourceSuggestion>> => {
     const fieldValues = [...this.state.fieldValues];
     const lastFieldValue = fieldValues[fieldValues.length - 1];
 
@@ -282,7 +293,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
     return fieldValues;
   };
 
-  handleClickSuggestionItem = (suggestion: Suggestion) => () => {
+  handleClickSuggestionItem = (suggestion: SourceSuggestion) => () => {
     const fieldValues = this.getNewFieldValues(suggestion);
     this.setState(
       {
@@ -351,7 +362,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
       <Wrapper ref={this.selectorField}>
         <StyledTextField
           name="from"
-          placeholder={t('an attribute, variable, or header name')}
+          placeholder={t('Enter a custom attribute, variable or header name')}
           onChange={this.handleChange}
           autoComplete="off"
           value={value}
@@ -362,10 +373,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
           disabled={disabled}
         />
         {showSuggestions && suggestions.length > 0 && (
-          <SuggestionsWrapper
-            ref={this.suggestionList}
-            data-test-id="panelSelectorField-suggestions"
-          >
+          <SuggestionsWrapper ref={this.suggestionList} data-test-id="source-suggestions">
             {suggestions.slice(0, 50).map((suggestion, index) => (
               <SuggestionItem
                 key={suggestion.value}
@@ -388,7 +396,7 @@ class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
   }
 }
 
-export default DataPrivacyRulesPanelSelectorField;
+export default DataPrivacyRulesFormSource;
 
 const Wrapper = styled('div')`
   position: relative;
@@ -398,11 +406,10 @@ const Wrapper = styled('div')`
 const StyledTextField = styled(TextField)<{error?: string}>`
   width: 100%;
   font-size: ${p => p.theme.fontSizeSmall};
-  height: 34px;
+  height: 40px;
   input {
-    height: 34px;
+    height: 40px;
   }
-  margin-bottom: 0;
 `;
 
 const SuggestionsWrapper = styled('ul')`
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx
new file mode 100644
index 0000000000..ae8b403b74
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions.tsx
@@ -0,0 +1,77 @@
+import {t} from 'app/locale';
+
+import {SourceSuggestion, SourceSuggestionType} from './types';
+
+const binaryOperatorSuggestions: Array<SourceSuggestion> = [
+  {
+    type: SourceSuggestionType.BINARY,
+    value: '&&',
+  },
+  {
+    type: SourceSuggestionType.BINARY,
+    value: '||',
+  },
+];
+
+const unaryOperatorSuggestions: Array<SourceSuggestion> = [
+  {
+    type: SourceSuggestionType.UNARY,
+    value: '!',
+  },
+];
+
+const defaultSuggestions: Array<SourceSuggestion> = [
+  {type: SourceSuggestionType.VALUE, value: '**', description: t('everywhere')},
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'password',
+    description: t('attributes named "password"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$error.value',
+    description: t('the exception value'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$message',
+    description: t('the log message'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'extra.MyValue',
+    description: t('the key "MyValue" in "Additional Data"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'extra.**',
+    description: t('everything in "Additional Data"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$http.headers.x-custom-token',
+    description: t('the X-Custom-Token HTTP header'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$user.ip_address',
+    description: t('the user IP address'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: '$frame.vars.foo',
+    description: t('the local variable "foo"'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'contexts.device.timezone',
+    description: t('the timezone in the device context'),
+  },
+  {
+    type: SourceSuggestionType.VALUE,
+    value: 'tags.server_name',
+    description: t('the tag "server_name"'),
+  },
+];
+
+export {unaryOperatorSuggestions, binaryOperatorSuggestions, defaultSuggestions};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
new file mode 100644
index 0000000000..1750fbf0c2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
@@ -0,0 +1,43 @@
+export enum RuleType {
+  PATTERN = 'pattern',
+  CREDITCARD = 'creditcard',
+  PASSWORD = 'password',
+  IP = 'ip',
+  IMEI = 'imei',
+  EMAIL = 'email',
+  UUID = 'uuid',
+  PEMKEY = 'pemkey',
+  URLAUTH = 'urlauth',
+  USSSN = 'usssn',
+  USER_PATH = 'userpath',
+  MAC = 'mac',
+  ANYTHING = 'anything',
+}
+
+export enum MethodType {
+  MASK = 'mask',
+  REMOVE = 'remove',
+  HASH = 'hash',
+  REPLACE = 'replace',
+}
+
+export enum EventIdStatus {
+  LOADING = 'loading',
+  INVALID = 'invalid',
+  NOT_FOUND = 'not_found',
+  LOADED = 'loaded',
+  ERROR = 'error',
+}
+
+export enum SourceSuggestionType {
+  VALUE = 'value',
+  UNARY = 'unary',
+  BINARY = 'binary',
+  STRING = 'string',
+}
+
+export type SourceSuggestion = {
+  type: SourceSuggestionType;
+  value: string;
+  description?: string;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
new file mode 100644
index 0000000000..588bbbbe1a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/utils.tsx
@@ -0,0 +1,53 @@
+import {t} from 'app/locale';
+
+import {RuleType, MethodType} from './types';
+
+function getRuleTypeLabel(labelType: RuleType): string {
+  switch (labelType) {
+    case RuleType.ANYTHING:
+      return t('Anything');
+    case RuleType.IMEI:
+      return t('IMEI numbers');
+    case RuleType.MAC:
+      return t('MAC addresses');
+    case RuleType.EMAIL:
+      return t('Email addresses');
+    case RuleType.PEMKEY:
+      return t('PEM keys');
+    case RuleType.URLAUTH:
+      return t('Auth in URLs');
+    case RuleType.USSSN:
+      return t('US social security numbers');
+    case RuleType.USER_PATH:
+      return t('Usernames in filepaths');
+    case RuleType.UUID:
+      return t('UUIDs');
+    case RuleType.CREDITCARD:
+      return t('Credit card numbers');
+    case RuleType.PASSWORD:
+      return t('Password fields');
+    case RuleType.IP:
+      return t('IP addresses');
+    case RuleType.PATTERN:
+      return t('Regex matches');
+    default:
+      return '';
+  }
+}
+
+function getMethodTypeLabel(labelType: MethodType): string {
+  switch (labelType) {
+    case MethodType.MASK:
+      return t('Mask');
+    case MethodType.HASH:
+      return t('Hash');
+    case MethodType.REMOVE:
+      return t('Remove');
+    case MethodType.REPLACE:
+      return t('Replace');
+    default:
+      return '';
+  }
+}
+
+export {getRuleTypeLabel, getMethodTypeLabel};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
new file mode 100644
index 0000000000..3f6e733f0d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesModal.tsx
@@ -0,0 +1,127 @@
+import React from 'react';
+import Modal from 'react-bootstrap/lib/Modal';
+import styled from '@emotion/styled';
+import omit from 'lodash/omit';
+
+import Button from 'app/components/button';
+import ButtonBar from 'app/components/buttonBar';
+import {t} from 'app/locale';
+import {defined} from 'app/utils';
+
+import DataPrivacyRulesPanelForm from './dataPrivacyRulesForm/dataPrivacyRulesForm';
+import {RuleType, MethodType} from './dataPrivacyRulesForm/types';
+
+const DEFAULT_RULE_SOURCE_VALUE = '';
+
+type FormProps = React.ComponentProps<typeof DataPrivacyRulesPanelForm>;
+type Rule = FormProps['rule'];
+
+type Props = Pick<
+  FormProps,
+  'sourceSuggestions' | 'disabled' | 'eventId' | 'onUpdateEventId'
+> & {
+  rule?: Rule;
+  onSaveRule: (rule: Rule) => void;
+  onClose: () => void;
+};
+
+type State = {
+  rule: Rule;
+  isFormValid: boolean;
+};
+
+class DataPrivacyRulesModal extends React.Component<Props, State> {
+  state = {
+    rule: {
+      id: defined(this.props.rule?.id) ? this.props.rule?.id! : -1,
+      type: this.props.rule?.type || RuleType.CREDITCARD,
+      method: this.props.rule?.method || MethodType.MASK,
+      source: this.props.rule?.source || DEFAULT_RULE_SOURCE_VALUE,
+      customRegularExpression: this.props.rule?.customRegularExpression,
+    },
+    isFormValid: false,
+  };
+
+  handleChange = (updatedRule: Rule) => {
+    this.setState(
+      {
+        rule: updatedRule,
+      },
+      this.handleValidate
+    );
+  };
+
+  handleValidate = () => {
+    const {rule} = this.state;
+
+    const ruleKeys = Object.keys(omit(rule, 'id'));
+    const isFormValid = !ruleKeys.find(ruleKey => !rule[ruleKey]);
+
+    this.setState({
+      isFormValid,
+    });
+  };
+
+  handleSave = () => {
+    const {rule} = this.state;
+    const {onSaveRule, onClose} = this.props;
+
+    onSaveRule(rule);
+    onClose();
+  };
+
+  render() {
+    const {onClose, disabled, sourceSuggestions, onUpdateEventId, eventId} = this.props;
+    const {rule, isFormValid} = this.state;
+
+    return (
+      <StyledModal show animation={false} onHide={onClose}>
+        <Modal.Header closeButton>
+          {rule?.id !== -1 ? t('Edit a data privacy rule') : t('Add a data privacy rule')}
+        </Modal.Header>
+        <Modal.Body>
+          <DataPrivacyRulesPanelForm
+            onChange={this.handleChange}
+            sourceSuggestions={sourceSuggestions}
+            rule={rule}
+            disabled={disabled}
+            onUpdateEventId={onUpdateEventId}
+            eventId={eventId}
+          />
+        </Modal.Body>
+        <Modal.Footer>
+          <ButtonBar gap={1.5}>
+            <Button disabled={disabled} onClick={onClose}>
+              {t('Cancel')}
+            </Button>
+            <Button
+              disabled={disabled || !isFormValid}
+              onClick={this.handleSave}
+              priority="primary"
+            >
+              {t('Save Rule')}
+            </Button>
+          </ButtonBar>
+        </Modal.Footer>
+      </StyledModal>
+    );
+  }
+}
+
+export default DataPrivacyRulesModal;
+
+const StyledModal = styled(Modal)`
+  .modal-dialog {
+    position: absolute;
+    top: 50%;
+    left: 50%;
+    transform: translate(-50%, -50%) !important;
+    margin: 0;
+    @media (max-width: ${p => p.theme.breakpoints[0]}) {
+      width: 100%;
+    }
+  }
+  .close {
+    outline: none;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
deleted file mode 100644
index ccfe3e79ce..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesEventIdField.tsx
+++ /dev/null
@@ -1,103 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import TextField from 'app/components/forms/textField';
-import ControlState from 'app/views/settings/components/forms/field/controlState';
-import Tooltip from 'app/components/tooltip';
-import {t} from 'app/locale';
-import space from 'app/styles/space';
-
-export enum EventIdFieldStatus {
-  NONE = 'none',
-  LOADING = 'loading',
-  INVALID = 'invalid',
-  NOT_FOUND = 'not_found',
-  LOADED = 'loaded',
-  ERROR = 'error',
-}
-
-type Props = {
-  status: EventIdFieldStatus;
-  onChange: (eventId: string) => void;
-  onBlur: (event: React.FocusEvent<HTMLInputElement>) => void;
-  onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => void;
-  disabled?: boolean;
-  value: string;
-};
-
-const getEventTooltipTitle = (status: EventIdFieldStatus): string => {
-  switch (status) {
-    case EventIdFieldStatus.INVALID:
-      return t("That's not a valid event ID");
-    case EventIdFieldStatus.ERROR:
-      return t('Something went wrong while fetching the suggestions');
-    case EventIdFieldStatus.NOT_FOUND:
-      return t('Event ID not found in projects you have access to');
-    case EventIdFieldStatus.LOADED:
-      return t('Auto-completing based on this event ID');
-    default:
-      return '';
-  }
-};
-
-const DataPrivacyRulesEventIdField = ({
-  status,
-  onChange,
-  value,
-  onBlur,
-  onKeyDown,
-  disabled,
-}: Props) => (
-  <Tooltip isHoverable title={getEventTooltipTitle(status)}>
-    <TooltipContent>
-      <StyledTextField
-        name="eventId"
-        disabled={disabled}
-        value={value}
-        placeholder={t('Paste event ID for better assistance')}
-        onChange={onChange}
-        onKeyDown={onKeyDown}
-        onBlur={onBlur}
-        showStatus={
-          status !== EventIdFieldStatus.LOADED && status !== EventIdFieldStatus.NONE
-        }
-      />
-      <Status>
-        {status === EventIdFieldStatus.LOADING && <ControlState isSaving />}
-        {status === EventIdFieldStatus.INVALID && <ControlState error />}
-        {status === EventIdFieldStatus.ERROR && <ControlState error />}
-        {status === EventIdFieldStatus.NOT_FOUND && <ControlState error />}
-      </Status>
-    </TooltipContent>
-  </Tooltip>
-);
-
-export default DataPrivacyRulesEventIdField;
-
-const TooltipContent = styled('div')`
-  position: relative;
-  display: flex;
-  align-items: center;
-  padding-bottom: ${space(1)};
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    padding-bottom: 0px;
-  }
-`;
-
-const StyledTextField = styled(TextField)<{showStatus: boolean}>`
-  flex: 1;
-  font-weight: 400;
-  input {
-    height: 34px;
-    padding-right: ${p => (p.showStatus ? space(4) : space(1.5))};
-  }
-  :first-child {
-    margin-bottom: 0;
-  }
-`;
-
-const Status = styled('div')`
-  position: absolute;
-  right: 0;
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
deleted file mode 100644
index d2ad7d1a9e..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanel.tsx
+++ /dev/null
@@ -1,435 +0,0 @@
-import React from 'react';
-import omit from 'lodash/omit';
-import isEqual from 'lodash/isEqual';
-
-import {t, tct} from 'app/locale';
-import {Panel, PanelAlert, PanelBody} from 'app/components/panels';
-import {Client} from 'app/api';
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import ExternalLink from 'app/components/links/externalLink';
-import SentryTypes from 'app/sentryTypes';
-
-import {EventIdFieldStatus} from './dataPrivacyRulesEventIdField';
-import DataPrivacyRulesPanelForm from './dataPrivacyRulesPanelForm';
-import {Suggestion, defaultSuggestions} from './dataPrivacyRulesPanelSelectorFieldTypes';
-import {RULE_TYPE, METHOD_TYPE} from './utils';
-import DataprivacyRulesPanelHeader from './dataprivacyRulesPanelHeader';
-import DataPrivacyRulesPanelFooter from './dataPrivacyRulesPanelFooter';
-
-const DEFAULT_RULE_FROM_VALUE = '';
-
-type Rule = React.ComponentProps<typeof DataPrivacyRulesPanelForm>['rule'];
-
-type PiiConfig = {
-  type: RULE_TYPE;
-  pattern: string;
-  redaction?: {
-    method?: METHOD_TYPE;
-  };
-};
-
-type PiiConfigRule = {
-  [key: string]: PiiConfig;
-};
-
-type Applications = {[key: string]: Array<string>};
-
-type Props = {
-  disabled?: boolean;
-  endpoint: string;
-  relayPiiConfig?: string;
-  additionalContext?: React.ReactNode;
-};
-
-type State = {
-  rules: Array<Rule>;
-  savedRules: Array<Rule>;
-  relayPiiConfig?: string;
-  selectorSuggestions: Array<Suggestion>;
-  eventIdInputValue: string;
-  eventIdStatus: EventIdFieldStatus;
-  isFormValid: boolean;
-};
-
-class DataPrivacyRulesPanel extends React.Component<Props, State> {
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
-  state: State = {
-    rules: [],
-    savedRules: [],
-    relayPiiConfig: this.props.relayPiiConfig,
-    selectorSuggestions: [],
-    eventIdStatus: EventIdFieldStatus.NONE,
-    eventIdInputValue: '',
-    isFormValid: true,
-  };
-
-  componentDidMount() {
-    this.loadRules();
-    this.loadSelectorSuggestions();
-  }
-
-  componentDidUpdate(_prevProps: Props, prevState: State) {
-    if (prevState.relayPiiConfig !== this.state.relayPiiConfig) {
-      this.loadRules();
-    }
-  }
-
-  componentWillUnmount() {
-    this.api.clear();
-  }
-
-  api = new Client();
-
-  loadRules() {
-    try {
-      const relayPiiConfig = this.state.relayPiiConfig;
-      const piiConfig = relayPiiConfig ? JSON.parse(relayPiiConfig) : {};
-      const rules: PiiConfigRule = piiConfig.rules || {};
-      const applications: Applications = piiConfig.applications || {};
-      const convertedRules: Array<Rule> = [];
-
-      for (const application in applications) {
-        for (const rule of applications[application]) {
-          if (!rules[rule]) {
-            if (rule[0] === '@') {
-              const [type, method] = rule.slice(1).split(':');
-              convertedRules.push({
-                id: convertedRules.length,
-                type: type as RULE_TYPE,
-                method: method as METHOD_TYPE,
-                from: application,
-              });
-            }
-            continue;
-          }
-
-          const resolvedRule = rules[rule];
-          if (resolvedRule.type === RULE_TYPE.PATTERN && resolvedRule.pattern) {
-            const method = resolvedRule?.redaction?.method;
-
-            convertedRules.push({
-              id: convertedRules.length,
-              type: RULE_TYPE.PATTERN,
-              method: method as METHOD_TYPE,
-              from: application,
-              customRegularExpression: resolvedRule.pattern,
-            });
-          }
-        }
-      }
-
-      this.setState({
-        rules: convertedRules,
-        savedRules: convertedRules,
-      });
-    } catch {
-      addErrorMessage(t('Unable to load the rules'));
-    }
-  }
-
-  loadSelectorSuggestions = async () => {
-    const {organization, project} = this.context;
-    const {eventIdInputValue} = this.state;
-
-    if (!eventIdInputValue) {
-      this.setState({
-        selectorSuggestions: defaultSuggestions,
-        eventIdStatus: EventIdFieldStatus.NONE,
-      });
-      return;
-    }
-
-    this.setState({eventIdStatus: EventIdFieldStatus.LOADING});
-
-    try {
-      const query: {projectId?: string; eventId: string} = {eventId: eventIdInputValue};
-      if (project?.id) {
-        query.projectId = project.id;
-      }
-      const rawSuggestions = await this.api.requestPromise(
-        `/organizations/${organization.slug}/data-scrubbing-selector-suggestions/`,
-        {method: 'GET', query}
-      );
-      const selectorSuggestions: Array<Suggestion> = rawSuggestions.suggestions;
-
-      if (selectorSuggestions && selectorSuggestions.length > 0) {
-        this.setState({
-          selectorSuggestions,
-          eventIdStatus: EventIdFieldStatus.LOADED,
-        });
-        return;
-      }
-
-      this.setState({
-        selectorSuggestions: defaultSuggestions,
-        eventIdStatus: EventIdFieldStatus.NOT_FOUND,
-      });
-    } catch {
-      this.setState({
-        eventIdStatus: EventIdFieldStatus.ERROR,
-      });
-    }
-  };
-
-  handleEventIdChange = (value: string) => {
-    const eventId = value.replace(/-/g, '').trim();
-    this.setState({
-      eventIdStatus: EventIdFieldStatus.NONE,
-      selectorSuggestions: defaultSuggestions,
-      eventIdInputValue: eventId,
-    });
-  };
-
-  isEventIdValueValid = (): boolean => {
-    const {eventIdInputValue} = this.state;
-    if (eventIdInputValue && eventIdInputValue.length !== 32) {
-      this.setState({eventIdStatus: EventIdFieldStatus.INVALID});
-      return false;
-    }
-
-    return true;
-  };
-
-  handleEventIdBlur = (event: React.FocusEvent<HTMLInputElement>) => {
-    event.preventDefault();
-
-    if (this.isEventIdValueValid()) {
-      this.loadSelectorSuggestions();
-    }
-  };
-
-  handleEventIdKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
-    event.persist();
-
-    const {keyCode} = event;
-
-    if (keyCode === 13 && this.isEventIdValueValid()) {
-      this.loadSelectorSuggestions();
-    }
-  };
-
-  handleAddRule = () => {
-    this.setState(prevState => ({
-      rules: [
-        ...prevState.rules,
-        {
-          id: prevState.rules.length + 1,
-          type: RULE_TYPE.CREDITCARD,
-          method: METHOD_TYPE.MASK,
-          from: DEFAULT_RULE_FROM_VALUE,
-        },
-      ],
-      isFormValid: false,
-    }));
-  };
-
-  handleDeleteRule = (ruleId: number) => {
-    this.setState(prevState => ({
-      rules: prevState.rules.filter(rule => rule.id !== ruleId),
-    }));
-  };
-
-  handleChange = (updatedRule: Rule) => {
-    this.setState(
-      prevState => ({
-        rules: prevState.rules.map(rule => {
-          if (rule.id === updatedRule.id) {
-            return updatedRule;
-          }
-          return rule;
-        }),
-      }),
-      () => {
-        this.handleValidation();
-      }
-    );
-  };
-
-  handleSubmit = async () => {
-    const {endpoint} = this.props;
-    const {rules} = this.state;
-    let customRulesCounter = 0;
-    const applications: Applications = {};
-    const customRules: PiiConfigRule = {};
-
-    for (const rule of rules) {
-      let ruleName = `@${rule.type}:${rule.method}`;
-      if (rule.type === RULE_TYPE.PATTERN && rule.customRegularExpression) {
-        ruleName = `customRule${customRulesCounter}`;
-
-        customRulesCounter += 1;
-
-        customRules[ruleName] = {
-          type: RULE_TYPE.PATTERN,
-          pattern: rule.customRegularExpression,
-          redaction: {
-            method: rule.method,
-          },
-        };
-      }
-
-      if (!applications[rule.from]) {
-        applications[rule.from] = [];
-      }
-
-      if (!applications[rule.from].includes(ruleName)) {
-        applications[rule.from].push(ruleName);
-      }
-    }
-
-    const piiConfig = {
-      rules: customRules,
-      applications,
-    };
-
-    const relayPiiConfig = JSON.stringify(piiConfig);
-
-    await this.api
-      .requestPromise(endpoint, {
-        method: 'PUT',
-        data: {relayPiiConfig},
-      })
-      .then(() => {
-        this.setState({
-          relayPiiConfig,
-        });
-      })
-      .then(() => {
-        addSuccessMessage(t('Successfully saved data privacy rules'));
-      })
-      .catch(error => {
-        const errorMessage = error.responseJSON?.relayPiiConfig[0];
-
-        if (!errorMessage) {
-          addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
-          return;
-        }
-
-        if (errorMessage.startsWith('invalid selector: ')) {
-          for (const line of errorMessage.split('\n')) {
-            if (line.startsWith('1 | ')) {
-              const selector = line.slice(3);
-              addErrorMessage(t('Invalid selector: %s', selector));
-              break;
-            }
-          }
-          return;
-        }
-
-        if (errorMessage.startsWith('regex parse error:')) {
-          for (const line of errorMessage.split('\n')) {
-            if (line.startsWith('error:')) {
-              const regex = line.slice(6).replace(/at line \d+ column \d+/, '');
-              addErrorMessage(t('Invalid regex: %s', regex));
-              break;
-            }
-          }
-          return;
-        }
-
-        addErrorMessage(t('Unknown error occurred while saving data privacy rules'));
-      });
-  };
-
-  handleValidation = () => {
-    const {rules} = this.state;
-    const isAnyRuleFieldEmpty = rules.find(rule => {
-      const ruleKeys = Object.keys(omit(rule, 'id'));
-      const anyEmptyField = ruleKeys.find(ruleKey => !rule[ruleKey]);
-      return !!anyEmptyField;
-    });
-
-    const isFormValid = !isAnyRuleFieldEmpty;
-
-    this.setState({
-      isFormValid,
-    });
-  };
-
-  handleSaveForm = () => {
-    const {isFormValid} = this.state;
-
-    if (isFormValid) {
-      this.handleSubmit();
-      return;
-    }
-
-    addErrorMessage(t('Invalid rules form'));
-  };
-
-  handleCancelForm = () => {
-    this.setState(prevState => ({
-      rules: prevState.savedRules,
-    }));
-  };
-
-  render() {
-    const {additionalContext, disabled} = this.props;
-    const {
-      rules,
-      savedRules,
-      eventIdInputValue,
-      selectorSuggestions,
-      eventIdStatus,
-      isFormValid,
-    } = this.state;
-
-    return (
-      <React.Fragment>
-        <Panel>
-          <DataprivacyRulesPanelHeader
-            onKeyDown={this.handleEventIdKeyDown}
-            onChange={this.handleEventIdChange}
-            onBlur={this.handleEventIdBlur}
-            value={eventIdInputValue}
-            status={eventIdStatus}
-            disabled={disabled}
-          />
-          <PanelAlert type="info">
-            {additionalContext}{' '}
-            {tct('For more details, see [linkToDocs].', {
-              linkToDocs: (
-                <ExternalLink href="https://docs.sentry.io/data-management/advanced-datascrubbing/">
-                  {t('full documentation on data scrubbing')}
-                </ExternalLink>
-              ),
-            })}
-          </PanelAlert>
-          <PanelBody>
-            {rules.map(rule => (
-              <DataPrivacyRulesPanelForm
-                key={rule.id}
-                onDelete={this.handleDeleteRule}
-                onChange={this.handleChange}
-                selectorSuggestions={selectorSuggestions}
-                rule={rule}
-                disabled={disabled}
-              />
-            ))}
-          </PanelBody>
-          <DataPrivacyRulesPanelFooter
-            onAddRule={this.handleAddRule}
-            onCancel={this.handleCancelForm}
-            onSave={this.handleSaveForm}
-            disabled={disabled}
-            disableCancelbutton={
-              (savedRules.length === 0 && rules.length === 0) ||
-              isEqual(rules, savedRules)
-            }
-            disableSaveButton={
-              !isFormValid ||
-              (savedRules.length === 0 && rules.length === 0) ||
-              isEqual(rules, savedRules)
-            }
-          />
-        </Panel>
-      </React.Fragment>
-    );
-  }
-}
-
-export default DataPrivacyRulesPanel;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
deleted file mode 100644
index a622b363bf..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelFooter.tsx
+++ /dev/null
@@ -1,124 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Button from 'app/components/button';
-import {IconAdd} from 'app/icons/iconAdd';
-import ButtonBar from 'app/components/buttonBar';
-import space from 'app/styles/space';
-import {t} from 'app/locale';
-
-type Props = {
-  onAddRule: () => void;
-  onSave: () => void;
-  onCancel: () => void;
-  disabled?: boolean;
-  disableSaveButton?: boolean;
-  disableCancelbutton?: boolean;
-};
-
-const DataPrivacyRulesPanelFooter = ({
-  disabled,
-  onAddRule,
-  onCancel,
-  onSave,
-  disableSaveButton,
-  disableCancelbutton,
-}: Props) => (
-  <PanelAction>
-    <ButtonAddRuleLink
-      disabled={disabled}
-      icon={<IconAdd circle />}
-      onClick={onAddRule}
-      size="small"
-      priority="link"
-    >
-      {t('Add Rule')}
-    </ButtonAddRuleLink>
-    <ButtonAddRule
-      disabled={disabled}
-      icon={<IconAdd circle />}
-      onClick={onAddRule}
-      size="small"
-      priority="default"
-    >
-      {t('Add Rule')}
-    </ButtonAddRule>
-    <Actions>
-      <ButtonBar gap={1.5}>
-        <Button
-          size="small"
-          onClick={onCancel}
-          disabled={disabled || disableCancelbutton}
-        >
-          {t('Cancel')}
-        </Button>
-        <Button
-          size="small"
-          priority="primary"
-          onClick={onSave}
-          disabled={disabled || disableSaveButton}
-        >
-          {t('Save Rules')}
-        </Button>
-      </ButtonBar>
-      <Info>{t('The new rules will only apply to upcoming events')}</Info>
-    </Actions>
-  </PanelAction>
-);
-
-export default DataPrivacyRulesPanelFooter;
-
-const PanelAction = styled('div')`
-  padding: ${space(1.5)} ${space(2)};
-  position: relative;
-  display: grid;
-  grid-template-columns: auto 1fr;
-  grid-row-gap: ${space(2)};
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    align-items: center;
-    grid-row-gap: 0;
-  }
-`;
-
-const ButtonAddRule = styled(Button)`
-  color: ${p => p.theme.blue};
-  &:hover,
-  &:active,
-  &:focus {
-    color: ${p => p.theme.blueDark};
-  }
-  grid-column-start: 1;
-  grid-column-end: -1;
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    display: none;
-  }
-`;
-
-const ButtonAddRuleLink = styled(Button)`
-  display: none;
-  font-size: ${p => p.theme.fontSizeMedium};
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    display: block;
-  }
-`;
-
-const Actions = styled('div')`
-  color: ${p => p.theme.gray2};
-  font-size: ${p => p.theme.fontSizeSmall};
-  display: flex;
-  flex-direction: column;
-  grid-column-start: 1;
-  grid-column-end: -1;
-  padding-bottom: ${space(3)};
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    align-items: flex-end;
-    grid-column-start: auto;
-    grid-column-end: auto;
-  }
-`;
-
-const Info = styled('div')`
-  position: absolute;
-  bottom: ${space(1)};
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
deleted file mode 100644
index 8f309d6f7a..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
+++ /dev/null
@@ -1,265 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import space from 'app/styles/space';
-import {t} from 'app/locale';
-import SelectControl from 'app/components/forms/selectControl';
-import TextField from 'app/components/forms/textField';
-import {IconDelete} from 'app/icons/iconDelete';
-import Button from 'app/components/button';
-
-import {
-  RULE_TYPE,
-  METHOD_TYPE,
-  getRuleTypeSelectorFieldLabel,
-  getMethodTypeSelectorFieldLabel,
-} from './utils';
-import DataPrivacyRulesPanelSelectorField from './dataPrivacyRulesPanelSelectorField';
-import {Suggestion} from './dataPrivacyRulesPanelSelectorFieldTypes';
-
-type Rule = {
-  id: number;
-  type: RULE_TYPE;
-  method: METHOD_TYPE;
-  from: string;
-  customRegularExpression?: string;
-};
-
-type Props = {
-  onDelete: (ruleId: Rule['id']) => void;
-  onChange: (rule: Rule) => void;
-  selectorSuggestions: Array<Suggestion>;
-  rule: Rule;
-  disabled?: boolean;
-};
-
-type State = {
-  errors: {
-    [key: string]: string;
-  };
-};
-class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
-  state: State = {
-    errors: {},
-  };
-
-  componentDidUpdate(prevProps: Props) {
-    if (prevProps.rule.from !== this.props.rule.from) {
-      this.handleValidation('from')();
-    }
-  }
-
-  handleChange = <T extends keyof Omit<Rule, 'id'>>(stateProperty: T, value: Rule[T]) => {
-    const rule: Rule = {
-      ...this.props.rule,
-      [stateProperty]: value,
-    };
-
-    if (rule.type !== RULE_TYPE.PATTERN) {
-      delete rule.customRegularExpression;
-    }
-
-    this.props.onChange({
-      ...rule,
-    });
-  };
-
-  handleDelete = (event: React.MouseEvent) => {
-    event.stopPropagation();
-    const {onDelete, rule} = this.props;
-    onDelete(rule.id);
-  };
-
-  handleValidation = <T extends keyof Omit<Rule, 'id'>>(field: T) => () => {
-    const errors = {...this.state.errors};
-    const isFieldValueEmpty = !this.props.rule[field];
-    const fieldErrorAlreadyExist = errors[field];
-
-    if (isFieldValueEmpty && fieldErrorAlreadyExist) {
-      return;
-    }
-
-    if (isFieldValueEmpty && !fieldErrorAlreadyExist) {
-      errors[field] = t('Field Required');
-    }
-
-    if (!isFieldValueEmpty && fieldErrorAlreadyExist) {
-      delete errors[field];
-    }
-
-    this.setState({
-      errors,
-    });
-  };
-
-  render() {
-    const {onDelete, rule, disabled, selectorSuggestions} = this.props;
-    const {from, customRegularExpression, type, method} = rule;
-    const {errors} = this.state;
-
-    return (
-      <Wrapper>
-        <WrapperFields>
-          <StyledSelectControl
-            placeholder={t('Select method')}
-            name="method"
-            options={Object.values(METHOD_TYPE).map(value => ({
-              label: getMethodTypeSelectorFieldLabel(value),
-              value,
-            }))}
-            value={method}
-            onChange={({value}) => this.handleChange('method', value)}
-            isDisabled={disabled}
-            openOnFocus
-            required
-          />
-          <StyledSelectControl
-            placeholder={t('Select type')}
-            name="type"
-            options={Object.values(RULE_TYPE).map(value => ({
-              label: getRuleTypeSelectorFieldLabel(value),
-              value,
-            }))}
-            value={type}
-            onChange={({value}) => this.handleChange('type', value)}
-            isDisabled={disabled}
-            openOnFocus
-            required
-          />
-          <From>
-            <FromLabel disabled={disabled}>{t('from')}</FromLabel>
-            <DataPrivacyRulesPanelSelectorField
-              onChange={(value: string) => {
-                this.handleChange('from', value);
-              }}
-              value={from}
-              onBlur={this.handleValidation('from')}
-              selectorSuggestions={selectorSuggestions}
-              error={errors.from}
-              disabled={disabled}
-            />
-          </From>
-          {type === RULE_TYPE.PATTERN && (
-            <CustomRegularExpression
-              name="customRegularExpression"
-              placeholder={t('Enter custom regular expression')}
-              onChange={(value: string) => {
-                this.handleChange('customRegularExpression', value);
-              }}
-              value={customRegularExpression}
-              onBlur={this.handleValidation('customRegularExpression')}
-              error={errors.customRegularExpression}
-              disabled={disabled}
-            />
-          )}
-        </WrapperFields>
-        {onDelete && (
-          <StyledIconTrash
-            disabled={disabled}
-            size="small"
-            onClick={this.handleDelete}
-            fullHeight={type === RULE_TYPE.PATTERN}
-          >
-            <IconDelete />
-          </StyledIconTrash>
-        )}
-      </Wrapper>
-    );
-  }
-}
-
-export default DataPrivacyRulesForm;
-
-const Wrapper = styled('div')`
-  padding: ${space(3)} ${space(2)};
-  display: grid;
-  grid-gap: ${space(2)};
-  grid-template-columns: 1fr;
-  align-items: flex-start;
-  border-bottom: 1px solid ${p => p.theme.borderDark};
-
-  @media (min-width: ${p => p.theme.breakpoints[3]}) {
-    grid-template-columns: 1fr 40px;
-  }
-`;
-
-const WrapperFields = styled('div')`
-  display: grid;
-  grid-gap: ${space(2)};
-  grid-row-gap: ${space(3)};
-  align-items: flex-start;
-  justify-items: start;
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    grid-template-columns: 1fr 1fr;
-  }
-
-  @media (min-width: ${p => p.theme.breakpoints[3]}) {
-    grid-template-columns: 200px 200px 1fr;
-  }
-`;
-
-const FromLabel = styled('div')<{disabled?: boolean}>`
-  color: ${p => (p.disabled ? p.theme.disabled : p.theme.gray5)};
-  height: 100%;
-  align-items: center;
-  display: flex;
-  width: 100%;
-  justify-content: center;
-`;
-
-const From = styled('div')`
-  display: grid;
-  grid-template-columns: 40px 1fr;
-  grid-column-end: -1;
-  grid-column-start: 1;
-  grid-gap: ${space(2)};
-  width: 100%;
-  height: 34px;
-
-  @media (min-width: ${p => p.theme.breakpoints[3]}) {
-    grid-column-end: auto;
-    grid-column-start: auto;
-  }
-`;
-
-// TODO(Priscila): make possible to set min-height in the SelectControl
-const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
-  width: 100%;
-  line-height: 18px;
-  ${p =>
-    p.isDisabled &&
-    `
-      cursor: not-allowed;
-      pointer-events: auto;
-    `}
-  height: 34px;
-  > *:first-child {
-    height: 34px;
-    min-height: 34px !important;
-  }
-`;
-
-const CustomRegularExpression = styled(TextField)<{error?: string}>`
-  grid-column-start: 1;
-  grid-column-end: -1;
-  width: 100%;
-  font-size: ${p => p.theme.fontSizeSmall};
-  height: 34px;
-  input {
-    height: 34px;
-    font-family: ${p => p.theme.text.familyMono};
-  }
-  margin-bottom: 0;
-`;
-
-const StyledIconTrash = styled(Button)<{fullHeight?: boolean}>`
-  color: ${p => p.theme.gray3};
-  height: 100%;
-  width: 100%;
-
-  @media (min-width: ${p => p.theme.breakpoints[3]}) {
-    width: 40px;
-    height: ${p => (p.fullHeight ? '100%' : '34px')};
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
deleted file mode 100644
index 583005429c..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
+++ /dev/null
@@ -1,69 +0,0 @@
-import {t} from 'app/locale';
-
-const binaryOperatorSuggestions: Suggestions = [
-  {
-    type: 'binary',
-    value: '&&',
-  },
-  {
-    type: 'binary',
-    value: '||',
-  },
-];
-
-const unaryOperatorSuggestions: Suggestions = [
-  {
-    type: 'unary',
-    value: '!',
-  },
-];
-
-const defaultSuggestions: Suggestions = [
-  {type: 'value', value: '**', description: t('everywhere')},
-  {type: 'value', value: 'password', description: t('attributes named "password"')},
-  {type: 'value', value: '$error.value', description: t('the exception value')},
-  {type: 'value', value: '$message', description: t('the log message')},
-  {
-    type: 'value',
-    value: 'extra.MyValue',
-    description: t('the key "MyValue" in "Additional Data"'),
-  },
-  {
-    type: 'value',
-    value: 'extra.**',
-    description: t('everything in "Additional Data"'),
-  },
-  {
-    type: 'value',
-    value: '$http.headers.x-custom-token',
-    description: t('the X-Custom-Token HTTP header'),
-  },
-  {type: 'value', value: '$user.ip_address', description: t('the user IP address')},
-  {
-    type: 'value',
-    value: '$frame.vars.foo',
-    description: t('the local variable "foo"'),
-  },
-  {
-    type: 'value',
-    value: 'contexts.device.timezone',
-    description: t('The timezone in the device context'),
-  },
-  {
-    type: 'value',
-    value: 'tags.server_name',
-    description: t('the tag "server_name"'),
-  },
-];
-
-export type SuggestionType = 'value' | 'unary' | 'binary' | 'string';
-
-export type Suggestions = Array<Suggestion>;
-
-export type Suggestion = {
-  type: SuggestionType;
-  value: string;
-  description?: string;
-};
-
-export {unaryOperatorSuggestions, binaryOperatorSuggestions, defaultSuggestions};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataprivacyRulesPanelHeader.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataprivacyRulesPanelHeader.tsx
deleted file mode 100644
index 5d374ceeaf..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataprivacyRulesPanelHeader.tsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import space from 'app/styles/space';
-import {t} from 'app/locale';
-import {PanelHeader} from 'app/components/panels';
-
-import DataPrivacyRulesEventIdField from './dataPrivacyRulesEventIdField';
-
-type Props = React.ComponentProps<typeof DataPrivacyRulesEventIdField>;
-
-const DataprivacyRulesPanelHeader = (props: Props) => (
-  <StyledPanelHeader hasButtons>
-    <div>{t('Data Privacy Rules')}</div>
-    <DataPrivacyRulesEventIdField {...props} />
-  </StyledPanelHeader>
-);
-
-export default DataprivacyRulesPanelHeader;
-
-const StyledPanelHeader = styled(PanelHeader)`
-  padding-right: ${space(2)};
-  display: grid;
-  grid-gap: ${space(1)};
-  grid-template-rows: 1fr 1fr;
-  justify-content: stretch;
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    grid-template-rows: 1fr;
-    grid-template-columns: 1fr 300px;
-    justify-content: space-between;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
deleted file mode 100644
index 036e958f91..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/utils.tsx
+++ /dev/null
@@ -1,79 +0,0 @@
-import {t} from 'app/locale';
-
-enum RULE_TYPE {
-  PATTERN = 'pattern',
-  CREDITCARD = 'creditcard',
-  PASSWORD = 'password',
-  IP = 'ip',
-  IMEI = 'imei',
-  EMAIL = 'email',
-  UUID = 'uuid',
-  PEMKEY = 'pemkey',
-  URLAUTH = 'urlauth',
-  USSSN = 'usssn',
-  USER_PATH = 'userpath',
-  MAC = 'mac',
-  ANYTHING = 'anything',
-}
-
-enum METHOD_TYPE {
-  MASK = 'mask',
-  REMOVE = 'remove',
-  HASH = 'hash',
-  REPLACE = 'replace',
-}
-
-function getRuleTypeSelectorFieldLabel(labelType: RULE_TYPE): string {
-  switch (labelType) {
-    case RULE_TYPE.ANYTHING:
-      return t('Anything');
-    case RULE_TYPE.IMEI:
-      return t('IMEI numbers');
-    case RULE_TYPE.MAC:
-      return t('MAC addresses');
-    case RULE_TYPE.EMAIL:
-      return t('Email addresses');
-    case RULE_TYPE.PEMKEY:
-      return t('PEM keys');
-    case RULE_TYPE.URLAUTH:
-      return t('Auth in URLs');
-    case RULE_TYPE.USSSN:
-      return t('US social security numbers');
-    case RULE_TYPE.USER_PATH:
-      return t('Usernames in filepaths');
-    case RULE_TYPE.UUID:
-      return t('UUIDs');
-    case RULE_TYPE.CREDITCARD:
-      return t('Credit card numbers');
-    case RULE_TYPE.PASSWORD:
-      return t('Password fields');
-    case RULE_TYPE.IP:
-      return t('IP addresses');
-    case RULE_TYPE.PATTERN:
-      return t('Regex matches');
-    default:
-      return '';
-  }
-}
-
-function getMethodTypeSelectorFieldLabel(labelType: METHOD_TYPE): string {
-  switch (labelType) {
-    case METHOD_TYPE.MASK:
-      return t('Mask');
-    case METHOD_TYPE.HASH:
-      return t('Hash');
-    case METHOD_TYPE.REMOVE:
-      return t('Remove');
-    case METHOD_TYPE.REPLACE:
-      return t('Replace');
-    default:
-      return '';
-  }
-}
-
-export {
-  RULE_TYPE,
-  METHOD_TYPE,
-  getRuleTypeSelectorFieldLabel,
-  getMethodTypeSelectorFieldLabel,
-};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
index d2f9484184..18d08054be 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
@@ -13,7 +13,7 @@ import {updateOrganization} from 'app/actionCreators/organizations';
 import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
 import SentryTypes from 'app/sentryTypes';
 
-import DataPrivacyRulesPanel from '../components/dataPrivacyRulesPanel/dataPrivacyRulesPanel';
+import DataPrivacyRules from '../components/dataPrivacyRules/dataPrivacyRules';
 
 type Props = {
   organization: Organization;
@@ -76,7 +76,7 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
             disabled={!access.has('org:write')}
           />
         </Form>
-        <DataPrivacyRulesPanel
+        <DataPrivacyRules
           additionalContext={t('These rules can be configured for each project.')}
           endpoint={endpoint}
           relayPiiConfig={relayPiiConfig}
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
index 70d7087b9e..ba44132095 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
@@ -11,7 +11,7 @@ import AsyncView from 'app/views/asyncView';
 import ProjectActions from 'app/actions/projectActions';
 import SentryTypes from 'app/sentryTypes';
 
-import DataPrivacyRulesPanel from '../components/dataPrivacyRulesPanel/dataPrivacyRulesPanel';
+import DataPrivacyRules from '../components/dataPrivacyRules/dataPrivacyRules';
 
 class ProjectDataPrivacyContent extends AsyncView<{}> {
   static contextTypes = {
@@ -66,7 +66,7 @@ class ProjectDataPrivacyContent extends AsyncView<{}> {
             ]}
           />
         </Form>
-        <DataPrivacyRulesPanel
+        <DataPrivacyRules
           additionalContext={
             <span>
               {tct(
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
index bd7ef4c75f..7a29278158 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesPanelSelectorField.spec.tsx.snap
@@ -1,9 +1,9 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
-<DataPrivacyRulesPanelSelectorField
+<DataPrivacyRulesFormSource
   onChange={[MockFunction]}
-  selectorSuggestions={
+  suggestions={
     Array [
       Object {
         "description": "everywhere",
@@ -51,7 +51,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
         "value": "$frame.vars.foo",
       },
       Object {
-        "description": "The timezone in the device context",
+        "description": "the timezone in the device context",
         "type": "value",
         "value": "contexts.device.timezone",
       },
@@ -66,7 +66,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
 >
   <Wrapper>
     <div
-      className="css-8p5quz-Wrapper e1e07je00"
+      className="css-8p5quz-Wrapper e5vbseb0"
     >
       <StyledTextField
         autoComplete="off"
@@ -76,25 +76,25 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
         onChange={[Function]}
         onFocus={[Function]}
         onKeyDown={[Function]}
-        placeholder="an attribute, variable, or header name"
+        placeholder="Enter a custom attribute, variable or header name"
         required={false}
         value="$string"
       >
         <TextField
           autoComplete="off"
-          className="css-lml2jl-StyledTextField e1e07je01"
+          className="css-a4jb6d-StyledTextField e5vbseb1"
           disabled={false}
           hideErrorMessage={false}
           name="from"
           onChange={[Function]}
           onFocus={[Function]}
           onKeyDown={[Function]}
-          placeholder="an attribute, variable, or header name"
+          placeholder="Enter a custom attribute, variable or header name"
           required={false}
           value="$string"
         >
           <div
-            className="css-lml2jl-StyledTextField e1e07je01 control-group"
+            className="css-a4jb6d-StyledTextField e5vbseb1 control-group"
           >
             <div
               className="controls"
@@ -108,7 +108,7 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
                 onChange={[Function]}
                 onFocus={[Function]}
                 onKeyDown={[Function]}
-                placeholder="an attribute, variable, or header name"
+                placeholder="Enter a custom attribute, variable or header name"
                 required={false}
                 type="text"
                 value="$string"
@@ -119,5 +119,5 @@ exports[`DataPrivacyRulesPanelSelectorField default render 1`] = `
       </StyledTextField>
     </div>
   </Wrapper>
-</DataPrivacyRulesPanelSelectorField>
+</DataPrivacyRulesFormSource>
 `;
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
index 4f1aca2eba..e642284a3d 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.spec.tsx
@@ -1,21 +1,21 @@
 import React from 'react';
 
-import DataPrivacyRulesPanelSelectorField from 'app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField';
+import DataPrivacyRulesFormSource from 'app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource';
 import {
   binaryOperatorSuggestions,
   unaryOperatorSuggestions,
   defaultSuggestions,
-} from 'app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes';
+} from 'app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSourceSuggestions';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
 function renderComponent({
   value = '$string',
   onChange = jest.fn(),
   ...props
-}: Partial<DataPrivacyRulesPanelSelectorField['props']>) {
+}: Partial<DataPrivacyRulesFormSource['props']>) {
   return mountWithTheme(
-    <DataPrivacyRulesPanelSelectorField
-      selectorSuggestions={defaultSuggestions}
+    <DataPrivacyRulesFormSource
+      suggestions={defaultSuggestions}
       onChange={onChange}
       value={value}
       {...props}
@@ -34,7 +34,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: ''});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -46,7 +46,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: '   '});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -58,7 +58,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: 'foo '});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -74,7 +74,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: 'foo && '});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -88,7 +88,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: 'foo && $string '});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -104,7 +104,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: 'foo && !$string '});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -120,7 +120,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     const wrapper = renderComponent({value: 'foo && !'});
     wrapper.find('input').simulate('focus');
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -141,7 +141,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     wrapper.find('input').simulate('focus');
 
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
@@ -159,7 +159,7 @@ describe('DataPrivacyRulesPanelSelectorField', () => {
     input.simulate('focus');
 
     const suggestions = wrapper
-      .find('[data-test-id="panelSelectorField-suggestions"]')
+      .find('[data-test-id="source-suggestions"]')
       .hostNodes()
       .children();
 
