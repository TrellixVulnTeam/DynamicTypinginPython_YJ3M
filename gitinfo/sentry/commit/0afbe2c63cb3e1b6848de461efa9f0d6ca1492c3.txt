commit 0afbe2c63cb3e1b6848de461efa9f0d6ca1492c3
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Jul 23 21:29:00 2018 +0200

    feat: Always consult stored symbols from the application (#9088)

diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 5625c2a242..fb8f6965f3 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -278,13 +278,29 @@ class Symbolizer(object):
         if obj is None:
             raise SymbolicationFailed(type=EventError.NATIVE_UNKNOWN_IMAGE)
 
-        # If we are dealing with a frame that is not bundled with the app
-        # we look at system symbols.  If that fails, we go to looking for
-        # app symbols explicitly.
-        if not self.is_image_from_app_bundle(obj, sdk_info=sdk_info):
-            return self._convert_symbolserver_match(instruction_addr, symbolserver_match, obj)
-
-        return self._symbolize_app_frame(instruction_addr, obj, sdk_info=sdk_info)
+        # Try to always prefer the images from the application storage.
+        # If the symbolication fails we keep the error for later
+        app_err = None
+        try:
+            match = self._symbolize_app_frame(instruction_addr, obj, sdk_info=sdk_info)
+            if match:
+                return match
+        except SymbolicationFailed as err:
+            app_err = err
+
+        # Then we check the symbolserver for a match.
+        match = self._convert_symbolserver_match(instruction_addr, symbolserver_match, obj)
+
+        # If we do not get a match and the image was from an app bundle
+        # and we got an error first, we now fail with the original error
+        # as we did indeed encounter a symbolication error.  If however
+        # the match was empty we just accept it as a valid symbolication
+        # that just did not return any results but without error.
+        if not match and self.is_image_from_app_bundle(obj, sdk_info=sdk_info) \
+           and app_err is not None:
+            raise app_err
+
+        return match
 
     def is_in_app(self, instruction_addr, sdk_info=None):
         obj = self.object_lookup.find_object(instruction_addr)
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index 2344dffeeb..88ccfe735b 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -27,6 +27,8 @@ SDK_INFO = {"sdk_name": "iOS", "version_major": 9,
 
 
 def patched_symbolize_app_frame(self, instruction_addr, img, sdk_info=None):
+    if instruction_addr != 4295123756:
+        return []
     return [
         {
             'filename': 'Foo.swift',
