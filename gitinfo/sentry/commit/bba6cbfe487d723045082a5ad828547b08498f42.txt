commit bba6cbfe487d723045082a5ad828547b08498f42
Author: Ted Kaemming <ted@kaemming.com>
Date:   Wed Feb 10 12:48:54 2016 -0800

    Add frequency tables for tag values.

diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index fa2b00f5d3..18f2dc58f7 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -9,27 +9,27 @@ from __future__ import absolute_import, print_function
 
 import logging
 import math
-import six
 import time
 import warnings
-
 from base64 import b16decode, b16encode
 from datetime import timedelta
+
+import six
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.app import buffer
+from sentry.app import buffer, tsdb
 from sentry.constants import (
-    DEFAULT_LOGGER_NAME, LOG_LEVELS, MAX_CULPRIT_LENGTH, EVENT_ORDERING_KEY,
+    DEFAULT_LOGGER_NAME, EVENT_ORDERING_KEY, LOG_LEVELS, MAX_CULPRIT_LENGTH
 )
 from sentry.db.models import (
     BaseManager, BoundedIntegerField, BoundedPositiveIntegerField,
-    FlexibleForeignKey, Model, GzippedDictField, sane_repr
+    FlexibleForeignKey, GzippedDictField, Model, sane_repr
 )
 from sentry.utils.http import absolute_uri
-from sentry.utils.strings import truncatechars, strip
+from sentry.utils.strings import strip, truncatechars
 
 
 # TODO(dcramer): pull in enum library
@@ -58,12 +58,16 @@ class GroupManager(BaseManager):
         project_id = group.project_id
         date = group.last_seen
 
-        for tag_item in tags:
-            if len(tag_item) == 2:
-                (key, value), data = tag_item, None
+        def normalize(item):
+            if len(item) == 2:
+                (key, value), data = item, None
             else:
-                key, value, data = tag_item
+                key, value, data = item
+            return key, value, data
 
+        tags = map(normalize, tags)
+
+        for key, value, data in tags:
             buffer.incr(TagValue, {
                 'times_seen': 1,
             }, {
@@ -86,6 +90,18 @@ class GroupManager(BaseManager):
                 'last_seen': date,
             })
 
+        metrics = {}
+        for key, value, data in tags:
+            metric = metrics.setdefault(u'{}:{}'.format(group.id, key), {})
+            metric[value] = metric.get(value, 0.0) + 1.0
+
+        # XXX: No access to the event where the tags were recorded here, this
+        # assumes ``last_seen`` is updated before this function is called!!!
+        tsdb.record_frequency_multi(
+            ((tsdb.models.frequent_values_by_issue_tag, metrics),),
+            timestamp=group.last_seen
+        )
+
 
 class Group(Model):
     """
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 257f016229..26f7287a0b 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -55,12 +55,13 @@ class TSDBModel(Enum):
     # frequent_organization_received_by_system = 400
     # frequent_organization_rejected_by_system = 401
     # frequent_organization_blacklisted_by_system = 402
-    # frequent_values_by_issue_tag = 405
 
-    # number of events seen for a project, by organization
+    # number of events seen for an organization, counted by project
     frequent_projects_by_organization = 403
-    # number of issues seen for a project, by project
+    # number of events seen for a project, counted by issue
     frequent_issues_by_project = 404
+    # number of events seen for an (issue, tag key) pair, counted by value
+    frequent_values_by_issue_tag = 405
 
 
 class BaseTSDB(object):
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 10b40bdfe8..ee1098a5c9 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -2,6 +2,7 @@
 
 from __future__ import absolute_import
 
+from sentry.app import tsdb
 from sentry.models import Group, GroupTagValue, Team, User
 from sentry.testutils import TestCase
 
@@ -37,6 +38,23 @@ class SentryManagerTest(TestCase):
         self.assertEquals(res.value, 'boz')
         self.assertEquals(res.times_seen, 1)
 
+        assert tsdb.get_most_frequent(
+            tsdb.models.frequent_values_by_issue_tag,
+            (
+                '{}:foo'.format(group.id),
+                '{}:biz'.format(group.id),
+            ),
+            group.last_seen,
+        ) == {
+            '{}:foo'.format(group.id): [
+                ('bar', 1.0),
+                ('baz', 1.0),
+            ],
+            '{}:biz'.format(group.id): [
+                ('boz', 1.0),
+            ],
+        }
+
 
 class TeamManagerTest(TestCase):
     def test_simple(self):
