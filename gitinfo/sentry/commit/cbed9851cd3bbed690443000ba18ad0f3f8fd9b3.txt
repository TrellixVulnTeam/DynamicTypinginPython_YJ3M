commit cbed9851cd3bbed690443000ba18ad0f3f8fd9b3
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Apr 26 11:07:01 2018 -0700

    feat(api): Add platform list to Organization Project (#8100)

diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 64fcc5a2f3..296701e0a3 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -131,6 +131,14 @@ class ProjectSerializer(Serializer):
             stats = None
 
         avatars = {a.project_id: a for a in ProjectAvatar.objects.filter(project__in=item_list)}
+        project_ids = [i.id for i in item_list]
+        platforms = ProjectPlatform.objects.filter(
+            project_id__in=project_ids,
+        ).values_list('project_id', 'platform')
+        platforms_by_project = defaultdict(list)
+        for project_id, platform in platforms:
+            platforms_by_project[project_id].append(platform)
+
         result = self.get_access_by_project(item_list, user)
         for item in item_list:
             result[item].update({
@@ -141,6 +149,7 @@ class ProjectSerializer(Serializer):
                     default_subscribe,
                 )),
                 'avatar': avatars.get(item.id),
+                'platforms': platforms_by_project[item.id]
             })
             if stats:
                 result[item]['stats'] = stats[item.id]
@@ -260,6 +269,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             'dateCreated': obj.date_added,
             'firstEvent': obj.first_event,
             'platform': obj.platform,
+            'platforms': attrs['platforms'],
         }
         if 'stats' in attrs:
             context['stats'] = attrs['stats']
@@ -301,13 +311,6 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
 
         project_ids = [i.id for i in item_list]
 
-        platforms = ProjectPlatform.objects.filter(
-            project_id__in=project_ids,
-        ).values_list('project_id', 'platform')
-        platforms_by_project = defaultdict(list)
-        for project_id, platform in platforms:
-            platforms_by_project[project_id].append(platform)
-
         num_issues_projects = Project.objects.filter(
             id__in=project_ids
         ).annotate(num_issues=Count('processingissue')) \
@@ -364,7 +367,6 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                     'latest_release': latest_releases.get(item.id),
                     'org': orgs[six.text_type(item.organization_id)],
                     'options': options_by_project[item.id],
-                    'platforms': platforms_by_project[item.id],
                     'processing_issues': processing_issues_by_project.get(item.id, 0),
                 }
             )
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index d2e5377e17..f0ccf6df10 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -45,7 +45,7 @@ class OrganizationDetailsTest(APITestCase):
         )
         # TODO(dcramer): we need to pare this down -- lots of duplicate queries
         # for membership data
-        with self.assertNumQueries(25, using='default'):
+        with self.assertNumQueries(26, using='default'):
             from django.db import connections
             response = self.client.get(url, format='json')
             print(connections['default'].queries)
