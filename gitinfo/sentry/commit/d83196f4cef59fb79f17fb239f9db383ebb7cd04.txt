commit d83196f4cef59fb79f17fb239f9db383ebb7cd04
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Oct 14 11:01:55 2019 -0700

    feat(app-platform): prevent users from creating sentry apps with greater scopes than they have (#15003)

diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 200077a446..bf81e3d921 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -37,7 +37,7 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
         # isInternal is not field of our model but it is a field of the serializer
         data = request.data.copy()
         data["isInternal"] = sentry_app.status == SentryAppStatus.INTERNAL
-        serializer = SentryAppSerializer(sentry_app, data=data, partial=True)
+        serializer = SentryAppSerializer(sentry_app, data=data, partial=True, access=request.access)
 
         if serializer.is_valid():
             result = serializer.validated_data
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 24c0595cfa..61f8554a35 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -79,7 +79,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
                 status=403,
             )
 
-        serializer = SentryAppSerializer(data=data)
+        serializer = SentryAppSerializer(data=data, access=request.access)
 
         if serializer.is_valid():
             data["redirect_url"] = data["redirectUrl"]
diff --git a/src/sentry/api/serializers/rest_framework/sentry_app.py b/src/sentry/api/serializers/rest_framework/sentry_app.py
index a30f1b9bef..a10fb1dc8d 100644
--- a/src/sentry/api/serializers/rest_framework/sentry_app.py
+++ b/src/sentry/api/serializers/rest_framework/sentry_app.py
@@ -80,6 +80,11 @@ class SentryAppSerializer(Serializer):
     verifyInstall = serializers.BooleanField(required=False, default=True)
     allowedOrigins = ListField(child=serializers.CharField(max_length=255), required=False)
 
+    def __init__(self, *args, **kwargs):
+        self.access = kwargs["access"]
+        del kwargs["access"]
+        Serializer.__init__(self, *args, **kwargs)
+
     # an abstraction to pull fields from attrs if they are available or the sentry_app if not
     def get_current_value_wrapper(self, attrs):
         def get_current_value(field_name):
@@ -113,6 +118,27 @@ class SentryAppSerializer(Serializer):
                 raise ValidationError("'*' not allowed in origin")
         return value
 
+    def validate_scopes(self, value):
+        if not value:
+            return value
+
+        validation_errors = []
+        for scope in value:
+            # if the existing instance already has this scope, skip the check
+            if self.instance and self.instance.has_scope(scope):
+                continue
+            # add an error if the requester lacks permissions being requested
+            if not self.access.has_scope(scope):
+                validation_errors.append(
+                    "Requested permission of %s exceeds requester's permission. Please contact an administrator to make the requested change."
+                    % (scope)
+                )
+
+        if validation_errors:
+            raise ValidationError(validation_errors)
+
+        return value
+
     def validate(self, attrs):
         # validates events against scopes
         if attrs.get("scopes"):
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
index 8fb9ae5a2a..737f7e9a9e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
@@ -8,7 +8,7 @@ import {t} from 'app/locale';
 import FormState from 'app/components/forms/state';
 
 type Snapshot = Map<string, FieldValue>;
-type FieldValue = string | number | undefined; //is undefined valid here?
+type FieldValue = string | number | boolean | undefined; //is undefined valid here?
 type SaveSnapshot = (() => number) | null;
 
 type FormOptions = {
@@ -135,7 +135,7 @@ class FormModel {
    *
    * Also resets snapshots
    */
-  setInitialData(initialData) {
+  setInitialData(initialData: Object) {
     this.fields.replace(initialData || {});
     this.initialData = this.fields.toJSON() || {};
 
@@ -145,14 +145,15 @@ class FormModel {
   /**
    * Set form options
    */
-  setFormOptions(options) {
+  setFormOptions(options: FormOptions) {
     this.options = options || {};
   }
 
   /**
    * Set field properties
    */
-  setFieldDescriptor(id, props) {
+  setFieldDescriptor(id: string, props) {
+    //TODO(TS): add type to props
     this.fieldDescriptor.set(id, props);
 
     // Set default value iff initialData for field is undefined
@@ -179,7 +180,7 @@ class FormModel {
   /**
    * Remove a field from the descriptor map and errors.
    */
-  removeField(id) {
+  removeField(id: string) {
     this.fieldDescriptor.delete(id);
     this.errors.delete(id);
   }
@@ -193,7 +194,7 @@ class FormModel {
     return () => this.snapshots.unshift(snapshot);
   }
 
-  getDescriptor(id, key) {
+  getDescriptor(id: string, key: string) {
     // Needs to call `has` or else component will not be reactive if `id` doesn't exist in observable map
     const descriptor = this.fieldDescriptor.has(id) && this.fieldDescriptor.get(id);
     if (!descriptor) {
@@ -203,7 +204,7 @@ class FormModel {
     return descriptor[key];
   }
 
-  getFieldState(id, key) {
+  getFieldState(id: string, key: string) {
     // Needs to call `has` or else component will not be reactive if `id` doesn't exist in observable map
     const fieldState = this.fieldState.has(id) && this.fieldState.get(id);
     if (!fieldState) {
@@ -213,7 +214,7 @@ class FormModel {
     return fieldState[key];
   }
 
-  getValue(id) {
+  getValue(id: string) {
     if (!this.fields.has(id)) {
       return '';
     }
@@ -221,7 +222,7 @@ class FormModel {
     return this.fields.get(id);
   }
 
-  getTransformedValue(id) {
+  getTransformedValue(id: string) {
     const fieldDescriptor = this.fieldDescriptor.get(id);
     const transformer =
       fieldDescriptor && typeof fieldDescriptor.getValue === 'function'
@@ -253,18 +254,18 @@ class FormModel {
       }, {});
   }
 
-  getError(id) {
+  getError(id: string) {
     return this.errors.has(id) && this.errors.get(id);
   }
 
   // Returns true if not required or is required and is not empty
-  isValidRequiredField(id) {
+  isValidRequiredField(id: string) {
     // Check field descriptor to see if field is required
     const isRequired = this.getDescriptor(id, 'required');
     return !isRequired || this.getValue(id) !== '';
   }
 
-  isValidField(id) {
+  isValidField(id: string) {
     return (this.getError(id) || []).length === 0;
   }
 
@@ -295,7 +296,7 @@ class FormModel {
   }
 
   @action
-  setValue(id, value) {
+  setValue(id: string, value: FieldValue) {
     const fieldDescriptor = this.fieldDescriptor.get(id);
     let finalValue = value;
 
@@ -315,7 +316,7 @@ class FormModel {
   }
 
   @action
-  validateField(id) {
+  validateField(id: string) {
     const validate = this.getDescriptor(id, 'validate');
     let errors: any[] = [];
 
@@ -338,7 +339,7 @@ class FormModel {
   }
 
   @action
-  updateShowSaveState(id, value) {
+  updateShowSaveState(id: string, value: FieldValue) {
     const isValueChanged = value !== this.initialData[id];
     // Update field state to "show save" if save on blur is disabled for this field
     // (only if contents of field differs from initial value)
@@ -354,7 +355,7 @@ class FormModel {
   }
 
   @action
-  updateShowReturnButtonState(id, value) {
+  updateShowReturnButtonState(id: string, value: FieldValue) {
     const isValueChanged = value !== this.initialData[id];
     const shouldShowReturnButton = this.getDescriptor(id, 'showReturnButton');
 
@@ -434,7 +435,7 @@ class FormModel {
    * TODO(billy): This should return a promise that resolves (instead of null)
    */
   @action
-  saveField(id, currentValue) {
+  saveField(id: string, currentValue: FieldValue) {
     const oldValue = this.initialData[id];
     const savePromise = this.saveFieldRequest(id, currentValue);
 
@@ -476,7 +477,7 @@ class FormModel {
    * If failed then: 1) reset save state, 2) add error state
    */
   @action
-  saveFieldRequest(id, currentValue) {
+  saveFieldRequest(id: string, currentValue: FieldValue) {
     const initialValue = this.initialData[id];
 
     // Don't save if field hasn't changed
@@ -575,7 +576,7 @@ class FormModel {
    * If `saveOnBlur` is set then call `saveField` and handle form callbacks accordingly
    */
   @action
-  handleBlurField(id, currentValue) {
+  handleBlurField(id: string, currentValue: FieldValue) {
     // Nothing to do if `saveOnBlur` is not on
     if (!this.options.saveOnBlur) {
       return null;
@@ -599,7 +600,7 @@ class FormModel {
    * This is called when a field does not saveOnBlur and has an individual "Save" button
    */
   @action
-  handleSaveField(id, currentValue) {
+  handleSaveField(id: string, currentValue: FieldValue) {
     const savePromise = this.saveField(id, currentValue);
 
     if (!savePromise) {
@@ -615,13 +616,13 @@ class FormModel {
    * Cancel "Save Field" state and revert form value back to initial value
    */
   @action
-  handleCancelSaveField(id) {
+  handleCancelSaveField(id: string) {
     this.setValue(id, this.initialData[id]);
     this.setFieldState(id, 'showSave', false);
   }
 
   @action
-  setFieldState(id, key, value) {
+  setFieldState(id: string, key: string, value: FieldValue) {
     const state = {
       ...(this.fieldState.get(id) || {}),
       [key]: value,
@@ -633,7 +634,7 @@ class FormModel {
    * Set "saving" state for field
    */
   @action
-  setSaving(id, value) {
+  setSaving(id: string, value: FieldValue) {
     // When saving, reset error state
     this.setError(id, false);
     this.setFieldState(id, FormState.SAVING, value);
@@ -644,7 +645,7 @@ class FormModel {
    * Set "error" state for field
    */
   @action
-  setError(id, error) {
+  setError(id: string, error: boolean | string) {
     // Note we don't keep error in `this.fieldState` so that we can easily
     // See if the form is in an "error" state with the `isError` getter
     if (!!error) {
@@ -686,17 +687,21 @@ class FormModel {
   }
 
   @action
-  submitSuccess(data) {
+  submitSuccess(data: object) {
     // update initial data
     this.formState = FormState.READY;
     this.initialData = data;
   }
 
   @action
-  submitError(err) {
+  submitError(err: {responseJSON?: any}) {
     this.formState = FormState.ERROR;
-    this.formErrors = err.responseJSON;
-    this.handleErrorResponse(err);
+    this.formErrors = this.mapFormErrors(err.responseJSON);
+    this.handleErrorResponse({responseJSON: this.formErrors});
+  }
+
+  mapFormErrors(responseJSON?: any) {
+    return responseJSON;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
index a39e167935..27f3925c89 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDetails.tsx
@@ -31,8 +31,33 @@ import {
   addSentryAppToken,
   removeSentryAppToken,
 } from 'app/actionCreators/sentryAppTokens';
-import {SentryApp, InternalAppApiToken} from 'app/types';
+import {SentryApp, InternalAppApiToken, Scope} from 'app/types';
 import Tooltip from 'app/components/tooltip';
+import {SENTRY_APP_PERMISSIONS} from 'app/constants';
+
+type Resource = 'Project' | 'Team' | 'Release' | 'Event' | 'Organization' | 'Member';
+
+/**
+ * Finds the resource in SENTRY_APP_PERMISSIONS that contains a given scope
+ * We should always find a match unless there is a bug
+ * @param {Scope} scope
+ * @return {Resource | undefined}
+ */
+const getResourceFromScope = (scope: Scope): Resource | undefined => {
+  for (const permObj of SENTRY_APP_PERMISSIONS) {
+    const allChoices = Object.values(permObj.choices);
+
+    const allScopes = allChoices.reduce(
+      (_allScopes: string[], choice) => _allScopes.concat(_.get(choice, 'scopes', [])),
+      []
+    );
+
+    if (allScopes.includes(scope)) {
+      return permObj.resource as Resource;
+    }
+  }
+  return undefined;
+};
 
 class SentryAppFormModel extends FormModel {
   /**
@@ -56,6 +81,33 @@ class SentryAppFormModel extends FormModel {
       return data;
     }, {});
   }
+
+  /**
+   * We need to map the API response errors to the actual form fields.
+   * We do this by pulling out scopes and mapping each scope error to the correct input.
+   * @param {Object} responseJSON
+   */
+  mapFormErrors(responseJSON?: any) {
+    if (!responseJSON) {
+      return responseJSON;
+    }
+    const formErrors = _.omit(responseJSON, ['scopes']);
+    if (responseJSON.scopes) {
+      responseJSON.scopes.forEach((message: string) => {
+        //find the scope from the error message of a specific format
+        const matches = message.match(/Requested permission of (\w+:\w+)/);
+        if (matches) {
+          const scope = matches[1];
+          const resource = getResourceFromScope(scope as Scope);
+          //should always match but technically resource can be undefined
+          if (resource) {
+            formErrors[`${resource}--permission`] = [message];
+          }
+        }
+      });
+    }
+    return formErrors;
+  }
 }
 
 type Props = AsyncView['props'] & {
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 2695ff340c..f1a5ed6e70 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -59,7 +59,7 @@ jest.mock('app/translations');
 jest.mock('app/api');
 jest.mock('app/utils/domId');
 jest.mock('app/utils/withOrganization');
-jest.mock('scroll-to-element', () => {});
+jest.mock('scroll-to-element', () => jest.fn());
 jest.mock('react-router', () => {
   const ReactRouter = require.requireActual('react-router');
   return {
diff --git a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
index e1e8a92377..6481f5ca89 100644
--- a/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
+++ b/tests/js/spec/views/settings/organizationDeveloperSettings/sentryApplicationDetails.spec.jsx
@@ -395,4 +395,47 @@ describe('Sentry Application Details', function() {
       );
     });
   });
+
+  describe('Editing an existing public Sentry App with a scope error', () => {
+    beforeEach(() => {
+      sentryApp = TestStubs.SentryApp();
+
+      editAppRequest = Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        method: 'PUT',
+        statusCode: 400,
+        body: {
+          scopes: [
+            "Requested permission of member:write exceeds requester's permission. Please contact an administrator to make the requested change.",
+            "Requested permission of member:admin exceeds requester's permission. Please contact an administrator to make the requested change.",
+          ],
+        },
+      });
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/`,
+        body: sentryApp,
+      });
+
+      Client.addMockResponse({
+        url: `/sentry-apps/${sentryApp.slug}/api-tokens/`,
+        body: [],
+      });
+
+      wrapper = mount(
+        <SentryApplicationDetails params={{appSlug: sentryApp.slug, orgId}} />,
+        TestStubs.routerContext()
+      );
+    });
+
+    it('renders the error', async () => {
+      wrapper.find('form').simulate('submit');
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('div FormFieldErrorReason').text()).toEqual(
+        "Requested permission of member:admin exceeds requester's permission. Please contact an administrator to make the requested change."
+      );
+    });
+  });
 });
diff --git a/tests/sentry/api/endpoints/test_sentry_app_details.py b/tests/sentry/api/endpoints/test_sentry_app_details.py
index 26739ddffa..97b6d99da7 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_details.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_details.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 from sentry.constants import SentryAppStatus
-from sentry.models import SentryApp
+from sentry.models import SentryApp, OrganizationMember
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
 from sentry.utils import json
@@ -320,6 +320,24 @@ class UpdateSentryAppDetailsTest(SentryAppDetailsTest):
         assert response.status_code == 400
         assert response.data == {"allowedOrigins": ["'*' not allowed in origin"]}
 
+    def test_create_integration_exceeding_scopes(self):
+        member_om = OrganizationMember.objects.get(user=self.user, organization=self.org)
+        member_om.role = "member"
+        member_om.save()
+        self.login_as(user=self.user)
+        url = reverse("sentry-api-0-sentry-app-details", args=[self.unpublished_app.slug])
+        response = self.client.put(
+            url, data={"scopes": ["member:read", "member:write", "member:admin"]}
+        )
+
+        assert response.status_code == 400
+        assert response.data == {
+            "scopes": [
+                "Requested permission of member:write exceeds requester's permission. Please contact an administrator to make the requested change.",
+                "Requested permission of member:admin exceeds requester's permission. Please contact an administrator to make the requested change.",
+            ]
+        }
+
 
 class DeleteSentryAppDetailsTest(SentryAppDetailsTest):
     def test_delete_unpublished_app(self):
diff --git a/tests/sentry/api/endpoints/test_sentry_apps.py b/tests/sentry/api/endpoints/test_sentry_apps.py
index b8c6d5fcf5..d53514479c 100644
--- a/tests/sentry/api/endpoints/test_sentry_apps.py
+++ b/tests/sentry/api/endpoints/test_sentry_apps.py
@@ -10,7 +10,13 @@ from sentry.constants import SentryAppStatus
 from sentry.utils import json
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import with_feature
-from sentry.models import SentryApp, SentryAppInstallationToken, SentryAppInstallation, ApiToken
+from sentry.models import (
+    SentryApp,
+    SentryAppInstallationToken,
+    SentryAppInstallation,
+    ApiToken,
+    OrganizationMember,
+)
 from sentry.models.sentryapp import MASKED_VALUE
 
 
@@ -518,6 +524,21 @@ class PostSentryAppsTest(SentryAppsTest):
         )
         assert response.status_code == 400
 
+    def test_create_integration_exceeding_scopes(self):
+        member_om = OrganizationMember.objects.get(user=self.user, organization=self.org)
+        member_om.role = "member"
+        member_om.save()
+        self.login_as(user=self.user)
+        response = self._post(events=(), scopes=("member:read", "member:write", "member:admin"))
+
+        assert response.status_code == 400
+        assert response.data == {
+            "scopes": [
+                "Requested permission of member:write exceeds requester's permission. Please contact an administrator to make the requested change.",
+                "Requested permission of member:admin exceeds requester's permission. Please contact an administrator to make the requested change.",
+            ]
+        }
+
     def _post(self, **kwargs):
         body = {
             "name": "MyApp",
