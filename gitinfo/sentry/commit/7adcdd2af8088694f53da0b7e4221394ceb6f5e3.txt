commit 7adcdd2af8088694f53da0b7e4221394ceb6f5e3
Author: Ben Vinegar <ben@benv.ca>
Date:   Mon Sep 28 17:41:08 2015 -0700

    Convert tag filters to use select2

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 273a58755b..190f4b78ca 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -388,7 +388,7 @@ var Stream = React.createClass({
     let queryObj = _.inject(queryItems, (obj, item) => {
       let index = item.indexOf(':');
       let tagKey = item.slice(0, index);
-      let value = item.slice(index + 1);
+      let value = item.slice(index + 1).replace(/^"|"$/g, '');
       obj[tagKey] = value;
       return obj;
     }, {});
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 0d5bc6d4cb..97c9bc8897 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -29,7 +29,7 @@ var StreamSidebar = React.createClass({
 
   getQueryStr() {
     return _.map(this.state.currentQuery, (value, tagKey) => {
-      return `${tagKey}:${value}`;
+      return `${tagKey}:"${value}"`;
     }).join(' ');
   },
 
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 26912b7490..60abe550c3 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -1,15 +1,9 @@
 import React from "react";
 import Reflux from "reflux";
 import _ from "underscore";
-import DropdownLink from "../../components/dropdownLink";
-import MenuItem from "../../components/menuItem";
-import LoadingIndicator from "../../components/loadingIndicator";
 
-import {fetchTagValues} from "../../api/tags";
 import StreamTagStore from "../../stores/streamTagStore";
 
-var KEYUP_DEBOUNCE_MS = 300;
-
 var StreamTagFilter = React.createClass({
   mixins: [
     Reflux.listenTo(StreamTagStore, "onStreamTagChange")
@@ -35,54 +29,70 @@ var StreamTagFilter = React.createClass({
       tagValues: this.props.tag.values || [],
       query: '',
       loading: false,
-      selectedValue: this.props.initialValue
+      selectedValue: this.props.initialValue,
     };
   },
 
-  fetchTagValues: _.debounce(function() {
-    let query = this.state.query;
+  statics: {
+    tagValueToSelect2Format: (key) => {
+      return {
+        id: key,
+        text: key
+      };
+    }
+  },
 
-    this.setState({
-      loading: true
-    });
+  componentDidMount() {
+    let select = this.refs.select.getDOMNode();
 
-    let params = this.context.router.getCurrentParams();
-    fetchTagValues(params, this.props.tag.key, query, () => {
-      this.setState({ loading: false });
-    });
-  }, KEYUP_DEBOUNCE_MS),
+    let selectOpts = {
+      placeholder: `Select a value for ${this.props.tag.name.toLowerCase()}`,
+      allowClear: true
+    };
 
-  onFilterChange(evt) {
-    let query = evt.target.value;
-    this.setState({
-      query: query,
-    }, () => {
-      if (this.props.tag.predefined) {
-        return void this.filterTagValues();
-      }
-      this.fetchTagValues();
-    });
+    if (!this.props.tag.predefined) {
+      Object.assign(selectOpts, {
+        minimumInputLength: 1,
+        initSelection: (element, callback) => {
+          callback(StreamTagFilter.tagValueToSelect2Format(this.props.initialValue));
+        },
+        ajax: {
+          url: this.getTagValuesAPIEndpoint(),
+          dataType: 'json',
+          delay: 250,
+          data: (term, page) => {
+            return {
+              query: term
+            };
+          },
+          results: (data, page) => {
+            // parse the results into the format expected by Select2
+            return {
+              results: _.map(data, (val) => StreamTagFilter.tagValueToSelect2Format(val.value))
+            };
+          },
+          cache: true
+        }
+      });
+    }
+
+    $(select)
+      .select2(selectOpts)
+      .on('change', this.onSelectValue);
   },
 
-  filterTagValues() {
-    let query = this.state.query.toLowerCase();
-    let tag = this.props.tag;
-
-    this.setState({
-      tagValues: _.filter(tag.values || [], (val) => val.toLowerCase().indexOf(query) > -1)
-    });
+  componentWillUnount() {
+    let select = this.refs.select.getDOMNode();
+    $(select).select2('destroy');
   },
 
-  onStreamTagChange(tags) {
-    // The store broadcasts changes to *all* tags. We are only
-    // interested in changes to *this* tag.
-    let tag = _.find(tags, (t) => t.key === this.props.tag.key);
-    if (!tag) return;
-
-    this.filterTagValues();
+  getTagValuesAPIEndpoint() {
+    let params = this.context.router.getCurrentParams();
+    return `/api/0/projects/${params.orgId}/${params.projectId}/tags/${this.props.tag.key}/values/`;
   },
 
-  onSelectValue(val, evt) {
+  onSelectValue(evt) {
+    let val = evt.target.value;
     this.setState({
       selectedValue: val
     });
@@ -94,29 +104,22 @@ var StreamTagFilter = React.createClass({
     let tag = this.props.tag;
 
     return (
-      <div>
+      <div className="stream-tag-filter">
         <h6>{tag.name}</h6>
-        <DropdownLink
-          className="btn btn-default btn-sm"
-          title={this.state.selectedValue || 'Search for a ' + this.props.tag.name}>
-          <MenuItem noAnchor={true} key="filter">
-            <input type="text"
-              className="form-control input-sm"
-              placeholder={`Filter ${this.props.tag.name}`}
-              ref="filter"
-              onKeyUp={this.onFilterChange} />
-          </MenuItem>
-          {this.state.loading
-            ? <LoadingIndicator/>
-            : this.state.tagValues.map((val) => {
-                return (
-                  <MenuItem key={val} onSelect={this.onSelectValue.bind(this, val)}>
-                  {val}
-                  </MenuItem>
-                );
-              })
-          }
-        </DropdownLink>
+
+        {this.props.tag.predefined ?
+
+          <select ref="select" className="form-control" value={this.props.initialValue}>
+            <option></option>
+            {this.state.tagValues.map((val) => {
+              return (
+                <option key={val}>{val}</option>
+              );
+            })}
+          </select> :
+          <input type="hidden" ref="select" className="form-control" value={this.props.initialValue}/>
+        }
+
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index d28e717b60..1f7be4af6a 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -665,6 +665,10 @@
     opacity: 0;
     padding-left: 20px;
 
+    .stream-tag-filter {
+      margin-bottom: 1em;
+    }
+
     h6 {
       color: @gray-light;
       margin-bottom: 10px;
