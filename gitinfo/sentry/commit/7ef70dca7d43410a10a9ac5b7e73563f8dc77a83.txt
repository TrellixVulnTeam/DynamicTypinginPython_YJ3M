commit 7ef70dca7d43410a10a9ac5b7e73563f8dc77a83
Author: William Mak <william@wmak.io>
Date:   Fri Mar 27 14:47:54 2020 -0400

    feat(performance) - Adding is key transaction endpoint

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 6e1bcc625f..96ed44e2cc 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -2,8 +2,10 @@ from __future__ import absolute_import
 
 import six
 from rest_framework.exceptions import PermissionDenied
+from rest_framework.exceptions import ParseError
 
 
+from sentry import features
 from sentry_relay.consts import SPAN_STATUS_CODE_TO_NAME
 from sentry.api.bases import OrganizationEndpoint, OrganizationEventsError
 from sentry.api.event_search import get_filter, InvalidSearchQuery, get_json_meta_type
@@ -128,3 +130,15 @@ class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
                         del result[key]
 
         return results
+
+
+class KeyTransactionBase(OrganizationEventsV2EndpointBase):
+    def has_feature(self, request, organization):
+        return features.has("organizations:performance-view", organization, actor=request.user)
+
+    def get_project(self, request, organization):
+        projects = self.get_projects(request, organization)
+
+        if len(projects) != 1:
+            raise ParseError("Only 1 project per Key Transaction")
+        return projects[0]
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 66dd49b8ab..2d368f3ee1 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -287,7 +287,10 @@ from sentry.data_export.endpoints.data_export_details import DataExportDetailsEn
 from sentry.discover.endpoints.discover_query import DiscoverQueryEndpoint
 from sentry.discover.endpoints.discover_saved_queries import DiscoverSavedQueriesEndpoint
 from sentry.discover.endpoints.discover_saved_query_detail import DiscoverSavedQueryDetailEndpoint
-from sentry.discover.endpoints.discover_key_transactions import KeyTransactionEndpoint
+from sentry.discover.endpoints.discover_key_transactions import (
+    KeyTransactionEndpoint,
+    IsKeyTransactionEndpoint,
+)
 from sentry.incidents.endpoints.organization_alert_rule_available_action_index import (
     OrganizationAlertRuleAvailableActionIndexEndpoint,
 )
@@ -660,6 +663,11 @@ urlpatterns = [
                     KeyTransactionEndpoint.as_view(),
                     name="sentry-api-0-organization-key-transactions",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/is-key-transactions/$",
+                    IsKeyTransactionEndpoint.as_view(),
+                    name="sentry-api-0-organization-is-key-transactions",
+                ),
                 # Dashboards
                 url(
                     r"^(?P<organization_slug>[^\/]+)/dashboards/$",
diff --git a/src/sentry/discover/endpoints/discover_key_transactions.py b/src/sentry/discover/endpoints/discover_key_transactions.py
index 215c870cd0..84aa01dbc8 100644
--- a/src/sentry/discover/endpoints/discover_key_transactions.py
+++ b/src/sentry/discover/endpoints/discover_key_transactions.py
@@ -2,10 +2,8 @@ from __future__ import absolute_import
 
 from django.db import transaction
 from rest_framework.response import Response
-from rest_framework.exceptions import ParseError
 
-from sentry import features
-from sentry.api.bases import OrganizationEventsV2EndpointBase
+from sentry.api.bases import KeyTransactionBase
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.discover.models import KeyTransaction
@@ -13,18 +11,32 @@ from sentry.discover.endpoints.serializers import KeyTransactionSerializer
 from sentry.snuba.discover import query
 
 
-class KeyTransactionEndpoint(OrganizationEventsV2EndpointBase):
+class IsKeyTransactionEndpoint(KeyTransactionBase):
     permission_classes = (OrganizationPermission,)
 
-    def has_feature(self, request, organization):
-        return features.has("organizations:performance-view", organization, actor=request.user)
+    def get(self, request, organization):
+        """ Get the Key Transactions for a user """
+        if not self.has_feature(request, organization):
+            return self.response(status=404)
+
+        project = self.get_project(request, organization)
 
-    def get_project(self, request, organization):
-        projects = self.get_projects(request, organization)
+        transaction = request.GET.get("transaction")
 
-        if len(projects) != 1:
-            raise ParseError("Only 1 project per Key Transaction")
-        return projects[0]
+        try:
+            KeyTransaction.objects.get(
+                organization=organization,
+                owner=request.user,
+                project=project,
+                transaction=transaction,
+            )
+            return Response({"isKey": True}, status=200)
+        except KeyTransaction.DoesNotExist:
+            return Response({"isKey": False}, status=200)
+
+
+class KeyTransactionEndpoint(KeyTransactionBase):
+    permission_classes = (OrganizationPermission,)
 
     def post(self, request, organization):
         """ Create a Key Transaction """
diff --git a/tests/snuba/api/endpoints/test_discover_key_transactions.py b/tests/snuba/api/endpoints/test_discover_key_transactions.py
index b8c7f50bbb..79358c06d4 100644
--- a/tests/snuba/api/endpoints/test_discover_key_transactions.py
+++ b/tests/snuba/api/endpoints/test_discover_key_transactions.py
@@ -158,6 +158,42 @@ class KeyTransactionTest(APITestCase):
 
         assert response.status_code == 404
 
+    def test_is_key_transaciton(self):
+        event_data = load_data("transaction")
+        start_timestamp = iso_format(before_now(minutes=1))
+        end_timestamp = iso_format(before_now(minutes=1))
+        event_data.update({"start_timestamp": start_timestamp, "timestamp": end_timestamp})
+        KeyTransaction.objects.create(
+            owner=self.user,
+            organization=self.org,
+            transaction=event_data["transaction"],
+            project=self.project,
+        )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-is-key-transactions", args=[self.org.slug])
+            response = self.client.get(
+                url, {"project": [self.project.id], "transaction": event_data["transaction"]}
+            )
+
+        assert response.status_code == 200
+        assert response.data["isKey"]
+
+    def test_is_not_key_transaciton(self):
+        event_data = load_data("transaction")
+        start_timestamp = iso_format(before_now(minutes=1))
+        end_timestamp = iso_format(before_now(minutes=1))
+        event_data.update({"start_timestamp": start_timestamp, "timestamp": end_timestamp})
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-is-key-transactions", args=[self.org.slug])
+            response = self.client.get(
+                url, {"project": [self.project.id], "transaction": event_data["transaction"]}
+            )
+
+        assert response.status_code == 200
+        assert not response.data["isKey"]
+
     @patch("django.utils.timezone.now")
     def test_get_key_transactions(self, mock_now):
         mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
