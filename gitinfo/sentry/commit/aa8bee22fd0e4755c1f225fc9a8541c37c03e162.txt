commit aa8bee22fd0e4755c1f225fc9a8541c37c03e162
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 31 14:35:50 2015 +0200

    Move organizationList into organizationStore

diff --git a/src/sentry/static/sentry/app/mixins/appState.jsx b/src/sentry/static/sentry/app/mixins/appState.jsx
index e18510cace..0c3ae94aeb 100644
--- a/src/sentry/static/sentry/app/mixins/appState.jsx
+++ b/src/sentry/static/sentry/app/mixins/appState.jsx
@@ -2,15 +2,12 @@
 
 var React = require("react");
 
+var OrganizationStore = require("../stores/organizationStore");
 var PropTypes = require("../proptypes");
 
 var AppState = {
-  contextTypes: {
-    organizationList: React.PropTypes.arrayOf(PropTypes.Organization).isRequired,
-  },
-
   getOrganizationList() {
-    return this.context.organizationList;
+    return OrganizationStore.getAll();
   }
 };
 
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
new file mode 100644
index 0000000000..24f98bb3ba
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/organizationStore.jsx
@@ -0,0 +1,28 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var OrganizationStore = Reflux.createStore({
+  init() {
+    this.items = [];
+  },
+
+  get(slug) {
+    for (var i = 0; i < this.items.length; i++) {
+      if (this.items[i].slug === slug) {
+        return this.items[i];
+      }
+    }
+  },
+
+  getAll() {
+    return this.items;
+  },
+
+  load(items) {
+    this.items = items;
+    this.trigger(items);
+  }
+});
+
+module.exports = OrganizationStore;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index d81577e951..5c80a89e06 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -5,8 +5,10 @@ var React = require("react");
 var api = require("../api");
 var Alerts = require("../components/alerts");
 var ConfigStore = require("../stores/configStore");
+var Header = require("../components/header");
 var Indicators = require("../components/indicators");
 var LoadingIndicator = require("../components/loadingIndicator");
+var OrganizationStore = require("../stores/organizationStore");
 var PropTypes = require("../proptypes");
 
 var App = React.createClass({
@@ -14,21 +16,10 @@ var App = React.createClass({
     config: React.PropTypes.object.isRequired
   },
 
-  childContextTypes: {
-    organizationList: React.PropTypes.arrayOf(PropTypes.Organization).isRequired,
-  },
-
-  getChildContext() {
-    return {
-      organizationList: this.state.organizationList
-    };
-  },
-
   getInitialState() {
     return {
       loading: false,
-      error: false,
-      organizationList: []
+      error: false
     };
   },
 
@@ -37,9 +28,9 @@ var App = React.createClass({
 
     api.request('/organizations/', {
       success: (data) => {
+        OrganizationStore.load(data);
         this.setState({
           loading: false,
-          organizationList: data
         });
       },
       error: () => {
@@ -51,6 +42,10 @@ var App = React.createClass({
     });
   },
 
+  componentWillUnmount() {
+    OrganizationStore.load([]);
+  },
+
   render() {
     if (this.state.loading) {
       return <LoadingIndicator />;
