commit 1aa5cfb606c66cfe2700b6db281ee628aa254fb2
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 23 10:26:05 2018 -0700

    feat(ui): Add "busy" to AsyncView search input (#10223)
    
    This adds a loading indicator to AsyncView search input.
    Also makes sure search extends the existing URL parameters.

diff --git a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
index 19b1f83c23..63a1442464 100644
--- a/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponentSearchInput.jsx
@@ -1,20 +1,24 @@
 import {debounce} from 'lodash';
+import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import Input from 'app/views/settings/components/forms/controls/input';
+import LoadingIndicator from 'app/components/loadingIndicator';
 
 /**
  * This is a search input that can be easily used in AsyncComponent/Views.
  *
  * It probably doesn't make too much sense outside of an AsyncComponent atm.
  */
-export default class AsyncComponentSearchInput extends React.Component {
+class AsyncComponentSearchInput extends React.Component {
   static propTypes = {
     api: PropTypes.any.isRequired,
     url: PropTypes.string.isRequired,
     onSuccess: PropTypes.func.isRequired,
     onError: PropTypes.func.isRequired,
+    router: PropTypes.object.isRequired,
     placeholder: PropTypes.string,
     onSearchSubmit: PropTypes.func,
   };
@@ -27,16 +31,25 @@ export default class AsyncComponentSearchInput extends React.Component {
     super(props);
     this.state = {
       query: '',
+      busy: false,
     };
   }
 
   query = debounce(searchQuery => {
-    return this.props.api.request(`${this.props.url}?query=${searchQuery}`, {
+    let {router} = this.props;
+    this.setState({busy: true});
+    return this.props.api.request(`${this.props.url}`, {
       method: 'GET',
+      query: {
+        ...router.location.query,
+        query: searchQuery,
+      },
       success: (data, _, jqXHR) => {
+        this.setState({busy: false});
         this.props.onSuccess(data, jqXHR);
       },
       error: () => {
+        this.setState({busy: false});
         this.props.onError();
       },
     });
@@ -58,14 +71,27 @@ export default class AsyncComponentSearchInput extends React.Component {
   render() {
     let {placeholder, className} = this.props;
     return (
-      <form onSubmit={this.handleSearch}>
+      <Form onSubmit={this.handleSearch}>
         <Input
           value={this.state.query}
           onChange={this.handleChange}
           className={className}
           placeholder={placeholder}
         />
-      </form>
+        {this.state.busy && <StyledLoadingIndicator size="18px" mini />}
+      </Form>
     );
   }
 }
+
+const StyledLoadingIndicator = styled(LoadingIndicator)`
+  position: absolute;
+  right: -6px;
+  top: 3px;
+`;
+
+const Form = styled('form')`
+  position: relative;
+`;
+
+export default withRouter(AsyncComponentSearchInput);
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
index c2d904150a..1e03d74321 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
@@ -207,7 +207,7 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                         is={null}
                       >
                         Projects
-                        <AsyncComponentSearchInput
+                        <withRouter(AsyncComponentSearchInput)
                           api={Client {}}
                           className="search"
                           onError={[Function]}
@@ -217,24 +217,87 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                           stateKey="projectList"
                           url="/organizations/org-slug/projects/"
                         >
-                          <form
-                            onSubmit={[Function]}
+                          <AsyncComponentSearchInput
+                            api={Client {}}
+                            className="search"
+                            location={
+                              Object {
+                                "query": Object {},
+                              }
+                            }
+                            onError={[Function]}
+                            onSearchSubmit={[Function]}
+                            onSuccess={[Function]}
+                            placeholder="Search Projects"
+                            router={
+                              Object {
+                                "createHref": [MockFunction] {
+                                  "calls": Array [
+                                    Array [
+                                      "/organizations/org-slug/projects/new/",
+                                    ],
+                                    Array [
+                                      "/org-slug/project-slug/",
+                                    ],
+                                    Array [
+                                      "/settings/org-slug/project-slug/",
+                                    ],
+                                  ],
+                                  "results": Array [
+                                    Object {
+                                      "isThrow": false,
+                                      "value": undefined,
+                                    },
+                                    Object {
+                                      "isThrow": false,
+                                      "value": undefined,
+                                    },
+                                    Object {
+                                      "isThrow": false,
+                                      "value": undefined,
+                                    },
+                                  ],
+                                },
+                                "go": [MockFunction],
+                                "goBack": [MockFunction],
+                                "goForward": [MockFunction],
+                                "isActive": [MockFunction],
+                                "listen": [MockFunction],
+                                "location": Object {
+                                  "query": Object {},
+                                },
+                                "push": [MockFunction],
+                                "replace": [MockFunction],
+                                "setRouteLeaveHook": [MockFunction],
+                              }
+                            }
+                            stateKey="projectList"
+                            url="/organizations/org-slug/projects/"
                           >
-                            <Input
-                              className="search"
-                              onChange={[Function]}
-                              placeholder="Search Projects"
-                              value=""
+                            <Form
+                              onSubmit={[Function]}
                             >
-                              <input
-                                className="search css-ybupf9-Input-inputStyles e1xej46s0"
-                                onChange={[Function]}
-                                placeholder="Search Projects"
-                                value=""
-                              />
-                            </Input>
-                          </form>
-                        </AsyncComponentSearchInput>
+                              <form
+                                className="css-vfrmj7-Form et3a3ng1"
+                                onSubmit={[Function]}
+                              >
+                                <Input
+                                  className="search"
+                                  onChange={[Function]}
+                                  placeholder="Search Projects"
+                                  value=""
+                                >
+                                  <input
+                                    className="search css-ybupf9-Input-inputStyles e1xej46s0"
+                                    onChange={[Function]}
+                                    placeholder="Search Projects"
+                                    value=""
+                                  />
+                                </Input>
+                              </form>
+                            </Form>
+                          </AsyncComponentSearchInput>
+                        </withRouter(AsyncComponentSearchInput)>
                       </div>
                     </Base>
                   </Flex>
diff --git a/tests/js/spec/views/settings/organizationProjects.spec.jsx b/tests/js/spec/views/settings/organizationProjects.spec.jsx
index 0524e491df..b10eba661b 100644
--- a/tests/js/spec/views/settings/organizationProjects.spec.jsx
+++ b/tests/js/spec/views/settings/organizationProjects.spec.jsx
@@ -58,7 +58,7 @@ describe('OrganizationProjects', function() {
 
   it('should search organization projects', async function() {
     let searchMock = MockApiClient.addMockResponse({
-      url: `/organizations/${org.slug}/projects/?query=${project.slug}`,
+      url: `/organizations/${org.slug}/projects/`,
       body: [],
     });
     let wrapper = mount(
@@ -66,17 +66,17 @@ describe('OrganizationProjects', function() {
       routerContext
     );
 
-    expect(searchMock).not.toHaveBeenCalled();
-
     wrapper
       .find('AsyncComponentSearchInput Input')
       .simulate('change', {target: {value: `${project.slug}`}});
 
-    expect(searchMock).toHaveBeenCalled();
-    expect(searchMock).toHaveBeenCalledWith(
-      `/organizations/${org.slug}/projects/?query=${project.slug}`,
+    expect(searchMock).toHaveBeenLastCalledWith(
+      `/organizations/${org.slug}/projects/`,
       expect.objectContaining({
         method: 'GET',
+        query: {
+          query: project.slug,
+        },
       })
     );
 
