commit c212a9a0e0dc5342e9aa580c953492091b69114c
Author: Max Bittker <maxbittker@gmail.com>
Date:   Tue Jan 2 13:45:48 2018 -0800

    chore(Core-Frontend): Run create-react-class codemod (#6823)
    
    * add create-react-class to package.json
    
    * webpack and exports
    
    * proptypes codemod
    
    * run class codemod
    
    * fix tests by adding display names manually
    
    * update layout.html template

diff --git a/package.json b/package.json
index 3cd8fa25b9..19f80bfb5e 100644
--- a/package.json
+++ b/package.json
@@ -25,6 +25,7 @@
     "classnames": "2.2.0",
     "clipboard": "^1.7.1",
     "compression-webpack-plugin": "^1.0.0",
+    "create-react-class": "^15.6.2",
     "crypto-js": "3.1.5",
     "css-loader": "^0.28.2",
     "diff": "^3.3.0",
diff --git a/src/sentry/static/sentry/app/components/actionOverlay.jsx b/src/sentry/static/sentry/app/components/actionOverlay.jsx
index 4fcd30f2ac..2feed2c5c4 100644
--- a/src/sentry/static/sentry/app/components/actionOverlay.jsx
+++ b/src/sentry/static/sentry/app/components/actionOverlay.jsx
@@ -1,11 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import OrganizationState from '../mixins/organizationState';
 import {t} from '../locale';
 import requiredAdminActions from '../components/requiredAdminActions';
 import LoadingIndicator from '../components/loadingIndicator';
 
-const ActionOverlay = React.createClass({
+const ActionOverlay = createReactClass({
+  displayName: 'ActionOverlay',
+
   propTypes: {
     actionId: PropTypes.string.isRequired,
     isLoading: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/activity/feed.jsx b/src/sentry/static/sentry/app/components/activity/feed.jsx
index 0a5d0fc5c9..062cef5e9f 100644
--- a/src/sentry/static/sentry/app/components/activity/feed.jsx
+++ b/src/sentry/static/sentry/app/components/activity/feed.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import ActivityItem from './item';
 import LoadingError from '../loadingError';
@@ -9,7 +11,9 @@ import Pagination from '../pagination';
 import {t} from '../../locale';
 import {logException} from '../../utils/logging';
 
-const ActivityFeed = React.createClass({
+const ActivityFeed = createReactClass({
+  displayName: 'ActivityFeed',
+
   propTypes: {
     endpoint: PropTypes.string,
     query: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index bec96fd0a4..613754d93d 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import marked from 'marked';
 import {MentionsInput, Mention} from 'react-mentions';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
@@ -18,7 +19,9 @@ function makeDefaultErrorJson() {
   return {detail: t('Unknown error. Please try again.')};
 }
 
-const NoteInput = React.createClass({
+const NoteInput = createReactClass({
+  displayName: 'NoteInput',
+
   propTypes: {
     item: PropTypes.object,
     group: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/alerts.jsx b/src/sentry/static/sentry/app/components/alerts.jsx
index 7464149dac..d15a5c62aa 100644
--- a/src/sentry/static/sentry/app/components/alerts.jsx
+++ b/src/sentry/static/sentry/app/components/alerts.jsx
@@ -1,11 +1,13 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import AlertStore from '../stores/alertStore';
 import AlertMessage from './alertMessage';
 
-const Alerts = React.createClass({
+const Alerts = createReactClass({
+  displayName: 'Alerts',
   mixins: [PureRenderMixin, Reflux.connect(AlertStore, 'alerts')],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index f701b6ee5d..e4411403f5 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import classNames from 'classnames';
 
@@ -17,7 +18,9 @@ import MemberListStore from '../stores/memberListStore';
 import MenuItem from './menuItem';
 import TooltipMixin from '../mixins/tooltip';
 
-const AssigneeSelector = React.createClass({
+const AssigneeSelector = createReactClass({
+  displayName: 'AssigneeSelector',
+
   propTypes: {
     id: PropTypes.string.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/components/avatarRadio.jsx b/src/sentry/static/sentry/app/components/avatarRadio.jsx
index 67b234a71b..66d35ed18c 100644
--- a/src/sentry/static/sentry/app/components/avatarRadio.jsx
+++ b/src/sentry/static/sentry/app/components/avatarRadio.jsx
@@ -1,9 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {t} from '../locale';
 
-const AvatarRadio = React.createClass({
+const AvatarRadio = createReactClass({
+  displayName: 'AvatarRadio',
+
   propTypes: {
     user: PropTypes.object.isRequired,
     updateUser: PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app/components/broadcastModal.jsx b/src/sentry/static/sentry/app/components/broadcastModal.jsx
index 3eeb8166ad..3d0aeab338 100644
--- a/src/sentry/static/sentry/app/components/broadcastModal.jsx
+++ b/src/sentry/static/sentry/app/components/broadcastModal.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import IconCloseLg from '../icons/icon-close-lg';
 import ConfigStore from '../stores/configStore';
 import ApiMixin from '../mixins/apiMixin';
@@ -49,10 +50,13 @@ ReleaseAnnouncement.propTypes = {
   close: PropTypes.func.isRequired,
 };
 
-const BroadcastModal = React.createClass({
+const BroadcastModal = createReactClass({
+  displayName: 'BroadcastModal',
+
   propTypes: {
     closeBroadcast: PropTypes.func.isRequired,
   },
+
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
index 0763d81b61..1bc05aa026 100644
--- a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
+++ b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import LoadingIndicator from '../components/loadingIndicator';
 import LoadingError from '../components/loadingError';
 import Avatar from '../components/avatar';
@@ -10,21 +12,23 @@ import ApiMixin from '../mixins/apiMixin';
 
 import {t} from '../locale';
 
-const CommitBar = React.createClass({
-  propTypes: {
+class CommitBar extends React.Component {
+  static propTypes = {
     totalCommits: PropTypes.number.isRequired,
     authorCommits: PropTypes.number.isRequired,
-  },
+  };
 
   render() {
     let barStyle = {};
     barStyle.width = this.props.authorCommits / this.props.totalCommits * 100 + '%';
 
     return <div className="commit-bar" style={barStyle} />;
-  },
-});
+  }
+}
+
+const CommitAuthorStats = createReactClass({
+  displayName: 'CommitAuthorStats',
 
-const CommitAuthorStats = React.createClass({
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index e3dce3268f..ecd5c10fdb 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -11,14 +12,14 @@ import GroupStore from '../stores/groupStore';
 import Link from './link';
 import {t} from '../locale';
 
-const CompactIssueHeader = React.createClass({
-  propTypes: {
+class CompactIssueHeader extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
-  },
+  };
 
-  getTitle() {
+  getTitle = () => {
     let data = this.props.data;
     let metadata = data.metadata;
     switch (data.type) {
@@ -43,9 +44,9 @@ const CompactIssueHeader = React.createClass({
       default:
         return <span>{data.title}</span>;
     }
-  },
+  };
 
-  getMessage() {
+  getMessage = () => {
     let data = this.props.data;
     let metadata = data.metadata;
     switch (data.type) {
@@ -56,7 +57,7 @@ const CompactIssueHeader = React.createClass({
       default:
         return '';
     }
-  },
+  };
 
   render() {
     let {orgId, projectId, data} = this.props;
@@ -94,10 +95,12 @@ const CompactIssueHeader = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
+
+const CompactIssue = createReactClass({
+  displayName: 'CompactIssue',
 
-const CompactIssue = React.createClass({
   propTypes: {
     data: PropTypes.object,
     id: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index adba2b93c9..18147d67ca 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -70,18 +70,16 @@ function analyzeStringForRepr(value) {
   return rv;
 }
 
-const ContextData = React.createClass({
-  propTypes: {
+class ContextData extends React.Component {
+  static propTypes = {
     data: PropTypes.any,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      data: null,
-    };
-  },
+  static defaultProps = {
+    data: null,
+  };
 
-  renderValue(value) {
+  renderValue = value => {
     function toggle(evt) {
       jQuery(evt.target)
         .parent()
@@ -195,14 +193,14 @@ const ContextData = React.createClass({
       }
     }
     return walk(value, 0);
-  },
+  };
 
-  renderKeyPosValue(value) {
+  renderKeyPosValue = value => {
     if (_.isString(value)) {
       return <span className="val-string">{value}</span>;
     }
     return this.renderValue(value);
-  },
+  };
 
   render() {
     // XXX(dcramer): babel does not support this yet
@@ -218,7 +216,9 @@ const ContextData = React.createClass({
     other.className = 'val ' + (className || '');
 
     return <pre {...other}>{this.renderValue(data)}</pre>;
-  },
-});
+  }
+}
+
+ContextData.displayName = 'ContextData';
 
 export default ContextData;
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index 489f14b175..7be5183a42 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -1,7 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-export default React.createClass({
+import createReactClass from 'create-react-class';
+
+export default createReactClass({
+  displayName: 'count',
+
   propTypes: {
     value: PropTypes.any.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/components/duration.jsx b/src/sentry/static/sentry/app/components/duration.jsx
index 406e752399..36d2089f68 100644
--- a/src/sentry/static/sentry/app/components/duration.jsx
+++ b/src/sentry/static/sentry/app/components/duration.jsx
@@ -1,12 +1,12 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const Duration = React.createClass({
-  propTypes: {
+class Duration extends React.Component {
+  static propTypes = {
     seconds: PropTypes.number.isRequired,
-  },
+  };
 
-  getDuration() {
+  getDuration = () => {
     let value = Math.abs(this.props.seconds * 1000);
     let result = '';
 
@@ -32,11 +32,11 @@ const Duration = React.createClass({
     }
 
     return result;
-  },
+  };
 
   render() {
     return <span className={this.props.className}>{this.getDuration()}</span>;
-  },
-});
+  }
+}
 
 export default Duration;
diff --git a/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx b/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
index 24be67cadd..ff07ce3ae8 100644
--- a/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
+++ b/src/sentry/static/sentry/app/components/eventOrGroupExtraDetails.jsx
@@ -1,12 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 
 import ProjectState from '../mixins/projectState';
 import TimeSince from './timeSince';
 import ShortId from './shortId';
 
-const EventOrGroupExtraDetails = React.createClass({
+const EventOrGroupExtraDetails = createReactClass({
+  displayName: 'EventOrGroupExtraDetails',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 84b50e645d..41af0cdaf5 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {logException} from '../../utils/logging';
 import EventContexts from './contexts';
 import EventContextSummary from './contextSummary';
@@ -38,7 +40,9 @@ export const INTERFACES = {
   debugmeta: DebugMetaInterface,
 };
 
-const EventEntries = React.createClass({
+const EventEntries = createReactClass({
+  displayName: 'EventEntries',
+
   propTypes: {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
diff --git a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
index a4f4d623d1..269f18b04a 100644
--- a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {Link} from 'react-router';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -9,7 +11,8 @@ import OrganizationState from '../../mixins/organizationState';
 
 import {t} from '../../locale';
 
-const EventsPerHour = React.createClass({
+const EventsPerHour = createReactClass({
+  displayName: 'EventsPerHour',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
index f12c1ae9b9..b22f212cc0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
@@ -11,12 +11,12 @@ const CUSTOM_RENDERERS = {
   error: ErrorRenderer,
 };
 
-const Breadcrumb = React.createClass({
-  propTypes: {
+class Breadcrumb extends React.Component {
+  static propTypes = {
     crumb: PropTypes.object.isRequired,
-  },
+  };
 
-  getClassName() {
+  getClassName = () => {
     let {crumb} = this.props;
 
     // use Set to avoid duplicate crumb classes (was previously adding
@@ -37,13 +37,13 @@ const Breadcrumb = React.createClass({
       classes.add('crumb-last');
     }
     return [...classes].join(' ');
-  },
+  };
 
-  renderType() {
+  renderType = () => {
     let {crumb} = this.props;
     let Renderer = CUSTOM_RENDERERS[crumb.type] || DefaultRenderer;
     return <Renderer crumb={crumb} />;
-  },
+  };
 
   render() {
     let {crumb} = this.props;
@@ -58,7 +58,7 @@ const Breadcrumb = React.createClass({
         {this.renderType()}
       </li>
     );
-  },
-});
+  }
+}
 
 export default Breadcrumb;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
index 0516fad68e..5698b4b836 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
@@ -1,12 +1,12 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-const Category = React.createClass({
-  propTypes: {
+class Category extends React.Component {
+  static propTypes = {
     value: PropTypes.string,
     title: PropTypes.string,
     hideIfEmpty: PropTypes.bool,
-  },
+  };
 
   render() {
     let value = this.props.value;
@@ -27,7 +27,7 @@ const Category = React.createClass({
         {title}
       </span>
     );
-  },
-});
+  }
+}
 
 export default Category;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
index 27b7c281bb..36c147dfd7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
@@ -4,15 +4,15 @@ import _ from 'lodash';
 
 import Category from './category';
 
-const CrumbTable = React.createClass({
-  propTypes: {
+class CrumbTable extends React.Component {
+  static propTypes = {
     crumb: PropTypes.object,
     title: PropTypes.string,
     kvData: PropTypes.object,
     summary: PropTypes.object,
-  },
+  };
 
-  renderData() {
+  renderData = () => {
     if (!this.props.kvData) {
       return null;
     }
@@ -26,7 +26,7 @@ const CrumbTable = React.createClass({
         </tr>
       );
     });
-  },
+  };
 
   render() {
     return (
@@ -45,7 +45,7 @@ const CrumbTable = React.createClass({
         </tbody>
       </table>
     );
-  },
-});
+  }
+}
 
 export default CrumbTable;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
index fe0d463c13..0192aee227 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
@@ -4,13 +4,13 @@ import React from 'react';
 import CrumbTable from './crumbTable';
 import SummaryLine from './summaryLine';
 
-const DefaultRenderer = React.createClass({
-  propTypes: {
+class DefaultRenderer extends React.Component {
+  static propTypes = {
     crumb: PropTypes.object.isRequired,
     kvData: PropTypes.object,
-  },
+  };
 
-  getTitle() {
+  getTitle = () => {
     let crumb = this.props.crumb;
     if (crumb.type === 'default') {
       return null;
@@ -21,9 +21,9 @@ const DefaultRenderer = React.createClass({
         return word.substr(0, 1).toUpperCase() + word.substr(1);
       })
       .join(' ');
-  },
+  };
 
-  renderSummary() {
+  renderSummary = () => {
     let {crumb} = this.props;
 
     return (
@@ -35,7 +35,7 @@ const DefaultRenderer = React.createClass({
         )}
       </SummaryLine>
     );
-  },
+  };
 
   render() {
     return (
@@ -46,7 +46,7 @@ const DefaultRenderer = React.createClass({
         {...this.props}
       />
     );
-  },
-});
+  }
+}
 
 export default DefaultRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
index fff1775f45..773d64cd14 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
@@ -4,14 +4,14 @@ import React from 'react';
 import CrumbTable from './crumbTable';
 import SummaryLine from './summaryLine';
 
-const ErrorRenderer = React.createClass({
-  propTypes: {
+class ErrorRenderer extends React.Component {
+  static propTypes = {
     crumb: PropTypes.object.isRequired,
-  },
+  };
 
-  renderUrl(url) {
+  renderUrl = url => {
     return url.match(/^https?:\/\//) ? <a href={url}>{url}</a> : <em>{url}</em>;
-  },
+  };
 
   render() {
     let {crumb} = this.props;
@@ -37,7 +37,7 @@ const ErrorRenderer = React.createClass({
     );
 
     return <CrumbTable title="Error" summary={summary} kvData={extra} {...this.props} />;
-  },
-});
+  }
+}
 
 export default ErrorRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
index 63940b1f46..d2f1833369 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
@@ -4,14 +4,14 @@ import React from 'react';
 import CrumbTable from './crumbTable';
 import SummaryLine from './summaryLine';
 
-const HttpRenderer = React.createClass({
-  propTypes: {
+class HttpRenderer extends React.Component {
+  static propTypes = {
     crumb: PropTypes.object.isRequired,
-  },
+  };
 
-  renderUrl(url) {
+  renderUrl = url => {
     return url.match(/^https?:\/\//) ? <a href={url}>{url}</a> : <em>{url}</em>;
-  },
+  };
 
   render() {
     let {crumb} = this.props;
@@ -31,7 +31,7 @@ const HttpRenderer = React.createClass({
     return (
       <CrumbTable title="HTTP Request" summary={summary} kvData={extra} {...this.props} />
     );
-  },
-});
+  }
+}
 
 export default HttpRenderer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
index 48dbc97997..ba5a91e165 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
@@ -6,34 +6,32 @@ function isOverflowing(el) {
   return el.offsetHeight < el.scrollHeight - 1;
 }
 
-const SummaryLine = React.createClass({
-  propTypes: {
+class SummaryLine extends React.Component {
+  static propTypes = {
     crumb: PropTypes.object.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      expanded: false,
-      hasOverflow: false,
-    };
-  },
+  state = {
+    expanded: false,
+    hasOverflow: false,
+  };
 
   componentDidMount() {
     this.domElement = null;
     window.addEventListener('resize', this.respondToLayoutChanges);
-  },
+  }
 
   componentWillUnmount() {
     this.domElement = null;
     window.addEventListener('resize', this.respondToLayoutChanges);
-  },
+  }
 
-  makeSummariesGreatAgain(ref) {
+  makeSummariesGreatAgain = ref => {
     this.domElement = ref;
     this.respondToLayoutChanges();
-  },
+  };
 
-  respondToLayoutChanges() {
+  respondToLayoutChanges = () => {
     if (!this.domElement) {
       return;
     }
@@ -43,13 +41,13 @@ const SummaryLine = React.createClass({
         hasOverflow,
       });
     }
-  },
+  };
 
-  onToggle() {
+  onToggle = () => {
     this.setState({
       expanded: !this.state.expanded,
     });
-  },
+  };
 
   render() {
     let className = 'summary';
@@ -68,7 +66,7 @@ const SummaryLine = React.createClass({
         {this.props.children}
       </div>
     );
-  },
-});
+  }
+}
 
 export default SummaryLine;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index 41ea55a49a..ea22537256 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -1,10 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import SentryTypes from '../../../proptypes';
 import TooltipMixin from '../../../mixins/tooltip';
 import {t} from '../../../locale';
 
-const CrashHeader = React.createClass({
+const CrashHeader = createReactClass({
+  displayName: 'CrashHeader',
+
   propTypes: {
     title: PropTypes.string,
     beforeTitle: PropTypes.any,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 41200b8c4c..9b1582f38b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 import classNames from 'classnames';
 
@@ -20,7 +21,9 @@ export function trimPackage(pkg) {
   return (match && match[1]) || rv;
 }
 
-const Frame = React.createClass({
+const Frame = createReactClass({
+  displayName: 'Frame',
+
   propTypes: {
     data: PropTypes.object.isRequired,
     nextFrame: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
index 3a30e6a50a..b0d3b878ef 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
@@ -5,22 +5,20 @@ import _ from 'lodash';
 import ContextData from '../../contextData';
 import {deviceNameMapper} from '../../../utils';
 
-const KeyValueList = React.createClass({
-  propTypes: {
+class KeyValueList extends React.Component {
+  static propTypes = {
     data: PropTypes.any.isRequired,
     isContextData: PropTypes.bool,
     isSorted: PropTypes.bool,
     onClick: PropTypes.func,
     raw: PropTypes.bool,
-  },
+  };
 
-  getDefaultProps() {
-    return {
-      isContextData: false,
-      isSorted: true,
-      raw: false,
-    };
-  },
+  static defaultProps = {
+    isContextData: false,
+    isSorted: true,
+    raw: false,
+  };
 
   render() {
     // TODO(dcramer): use non-string keys as reserved words ("unauthorized")
@@ -63,7 +61,9 @@ const KeyValueList = React.createClass({
         </tbody>
       </table>
     );
-  },
-});
+  }
+}
+
+KeyValueList.displayName = 'KeyValueList';
 
 export default KeyValueList;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index 7a6fa804d3..c5874ef5f4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -1,12 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import rawStacktraceContent from './rawStacktraceContent';
 import ApiMixin from '../../../mixins/apiMixin';
 import LoadingIndicator from '../../loadingIndicator';
 import LoadingError from '../../loadingError';
 import ClippedBox from '../../clippedBox';
 
-const RawExceptionContent = React.createClass({
+const RawExceptionContent = createReactClass({
+  displayName: 'RawExceptionContent',
+
   propTypes: {
     type: PropTypes.oneOf(['original', 'minified']),
     platform: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 967321247b..ebda3e3650 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,11 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 //import GroupEventDataSection from "../eventDataSection";
 import Frame from './frame';
 import {t} from '../../../locale';
 import OrganizationState from '../../../mixins/organizationState';
 
-const StacktraceContent = React.createClass({
+const StacktraceContent = createReactClass({
+  displayName: 'StacktraceContent',
+
   propTypes: {
     data: PropTypes.object.isRequired,
     includeSystemFrames: PropTypes.bool,
@@ -13,6 +16,7 @@ const StacktraceContent = React.createClass({
     platform: PropTypes.string,
     newestFirst: PropTypes.bool,
   },
+
   mixins: [OrganizationState],
 
   getDefaultProps() {
diff --git a/src/sentry/static/sentry/app/components/fileChange.jsx b/src/sentry/static/sentry/app/components/fileChange.jsx
index 707c0b20b7..563d718916 100644
--- a/src/sentry/static/sentry/app/components/fileChange.jsx
+++ b/src/sentry/static/sentry/app/components/fileChange.jsx
@@ -1,12 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Avatar from '../components/avatar';
 import IconFileGeneric from '../icons/icon-file-generic';
 
 import TooltipMixin from '../mixins/tooltip';
 import ApiMixin from '../mixins/apiMixin';
 
-const FileChange = React.createClass({
+const FileChange = createReactClass({
+  displayName: 'FileChange',
+
   propTypes: {
     filename: PropTypes.string.isRequired,
     authors: PropTypes.array.isRequired,
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
index 6af91d6cef..37b0018232 100644
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Modal from 'react-bootstrap/lib/Modal';
 import ApiMixin from '../../mixins/apiMixin';
 import DropdownLink from '../../components/dropdownLink';
@@ -9,7 +10,9 @@ import plugins from '../../plugins';
 import {t} from '../../locale';
 import {toTitleCase} from '../../utils';
 
-const IssuePluginActions = React.createClass({
+const IssuePluginActions = createReactClass({
+  displayName: 'IssuePluginActions',
+
   propTypes: {
     plugin: PropTypes.object.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/components/group/participants.jsx b/src/sentry/static/sentry/app/components/group/participants.jsx
index 001924a8d5..4ea36bcbe3 100644
--- a/src/sentry/static/sentry/app/components/group/participants.jsx
+++ b/src/sentry/static/sentry/app/components/group/participants.jsx
@@ -1,11 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import Avatar from '../avatar';
 import TooltipMixin from '../../mixins/tooltip';
 import {userDisplayName} from '../../utils/formatters';
 
-const GroupParticipants = React.createClass({
+const GroupParticipants = createReactClass({
+  displayName: 'GroupParticipants',
+
   propTypes: {
     participants: PropTypes.array.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index 9d4d53a19b..82d5d8ab93 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -1,12 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import StackedBarChart from '../stackedBarChart';
 import SentryTypes from '../../proptypes';
 import {t} from '../../locale';
 import {defined, escape, intcomma} from '../../utils';
 
-const GroupReleaseChart = React.createClass({
+const GroupReleaseChart = createReactClass({
+  displayName: 'GroupReleaseChart',
+
   propTypes: {
     group: SentryTypes.Group.isRequired,
     release: PropTypes.shape({
diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index 0e87dd10f0..14da15d42d 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -26,7 +27,9 @@ const PRODUCTION_ENV_NAMES = new Set([
 
 // TODO(dcramer): this should listen to EnvironmentStore
 // changes
-const GroupReleaseStats = React.createClass({
+const GroupReleaseStats = createReactClass({
+  displayName: 'GroupReleaseStats',
+
   propTypes: {
     defaultEnvironment: PropTypes.string,
     group: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index b3566e5b93..0ea3b49b5a 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import DateTime from '../../components/dateTime';
 import TimeSince from '../../components/timeSince';
 import Version from '../../components/version';
@@ -9,7 +10,9 @@ import {defined, toTitleCase} from '../../utils';
 import componentToString from '../../utils/componentToString';
 import {t} from '../../locale';
 
-const SeenInfo = React.createClass({
+const SeenInfo = createReactClass({
+  displayName: 'SeenInfo',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index b8e94d9d18..ec54f8ce85 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import SuggestedOwners from './suggestedOwners';
 import GroupParticipants from './participants';
@@ -12,7 +14,9 @@ import TagDistributionMeter from './tagDistributionMeter';
 import LoadingError from '../../components/loadingError';
 import {t, tct} from '../../locale';
 
-const GroupSidebar = React.createClass({
+const GroupSidebar = createReactClass({
+  displayName: 'GroupSidebar',
+
   propTypes: {
     group: PropTypes.object,
     event: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 9622989dff..6745865be9 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import ReactDOMServer from 'react-dom/server';
 import moment from 'moment';
 
@@ -9,7 +10,9 @@ import ApiMixin from '../../mixins/apiMixin';
 import GroupState from '../../mixins/groupState';
 import {t} from '../../locale';
 
-const SuggestedOwners = React.createClass({
+const SuggestedOwners = createReactClass({
+  displayName: 'SuggestedOwners',
+
   propTypes: {
     event: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index b1e1da9c78..ae1f005821 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import ApiMixin from '../../mixins/apiMixin';
 import SentryTypes from '../../proptypes';
@@ -7,7 +8,9 @@ import TooltipMixin from '../../mixins/tooltip';
 import {escape, percent, deviceNameMapper} from '../../utils';
 import {t} from '../../locale';
 
-const TagDistributionMeter = React.createClass({
+const TagDistributionMeter = createReactClass({
+  displayName: 'TagDistributionMeter',
+
   propTypes: {
     group: SentryTypes.Group.isRequired,
     tag: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index 4b74de54fa..9e193af247 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import jQuery from 'jquery';
 
@@ -13,7 +14,9 @@ import StreamGroup from '../components/stream/group';
 import utils from '../utils';
 import {t} from '../locale';
 
-const GroupList = React.createClass({
+const GroupList = createReactClass({
+  displayName: 'GroupList',
+
   propTypes: {
     query: PropTypes.string.isRequired,
     canSelectGroups: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/groupTombstones.jsx b/src/sentry/static/sentry/app/components/groupTombstones.jsx
index cb99b5b285..ce7561f17a 100644
--- a/src/sentry/static/sentry/app/components/groupTombstones.jsx
+++ b/src/sentry/static/sentry/app/components/groupTombstones.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
 import Avatar from '../components/avatar';
@@ -13,7 +14,9 @@ import ApiMixin from '../mixins/apiMixin';
 
 import {t} from '../locale';
 
-const GroupTombstoneRow = React.createClass({
+const GroupTombstoneRow = createReactClass({
+  displayName: 'GroupTombstoneRow',
+
   propTypes: {
     data: PropTypes.object.isRequired,
     undiscard: PropTypes.func.isRequired,
@@ -71,7 +74,9 @@ const GroupTombstoneRow = React.createClass({
   },
 });
 
-const GroupTombstones = React.createClass({
+const GroupTombstones = createReactClass({
+  displayName: 'GroupTombstones',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index c8cd02ba02..62bc8c3bb8 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
 
@@ -7,7 +8,8 @@ import ToastIndicator from '../components/alerts/toastIndicator';
 
 import IndicatorStore from '../stores/indicatorStore';
 
-const Indicators = React.createClass({
+const Indicators = createReactClass({
+  displayName: 'Indicators',
   mixins: [Reflux.connect(IndicatorStore, 'items')],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/internalStatChart.jsx b/src/sentry/static/sentry/app/components/internalStatChart.jsx
index d02033f5a1..57fb8104c9 100644
--- a/src/sentry/static/sentry/app/components/internalStatChart.jsx
+++ b/src/sentry/static/sentry/app/components/internalStatChart.jsx
@@ -2,6 +2,7 @@
 import PropTypes from 'prop-types';
 
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -9,7 +10,9 @@ import BarChart from '../components/barChart';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'internalStatChart',
+
   propTypes: {
     since: PropTypes.number.isRequired,
     resolution: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/issueDiff.jsx b/src/sentry/static/sentry/app/components/issueDiff.jsx
index adfb8b0805..1d1482fb05 100644
--- a/src/sentry/static/sentry/app/components/issueDiff.jsx
+++ b/src/sentry/static/sentry/app/components/issueDiff.jsx
@@ -1,4 +1,5 @@
 import React, {PropTypes} from 'react';
+import createReactClass from 'create-react-class';
 import classNames from 'classnames';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -7,7 +8,9 @@ import rawStacktraceContent from './events/interfaces/rawStacktraceContent';
 
 import '../../less/components/issueDiff.less';
 
-const IssueDiff = React.createClass({
+const IssueDiff = createReactClass({
+  displayName: 'IssueDiff',
+
   propTypes: {
     baseIssueId: PropTypes.string.isRequired,
     targetIssueId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/issueLink.jsx b/src/sentry/static/sentry/app/components/issueLink.jsx
index 88bde25f64..e1bf5e1c4f 100644
--- a/src/sentry/static/sentry/app/components/issueLink.jsx
+++ b/src/sentry/static/sentry/app/components/issueLink.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -7,7 +8,9 @@ import Count from './count';
 import EventOrGroupTitle from './eventOrGroupTitle';
 import TimeSince from './timeSince';
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'issueLink',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index 5ecd18a0ad..0cf8a67702 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import CompactIssue from './compactIssue';
 import LoadingError from './loadingError';
@@ -8,7 +10,9 @@ import LoadingIndicator from './loadingIndicator';
 import Pagination from './pagination';
 import {t} from '../locale';
 
-const IssueList = React.createClass({
+const IssueList = createReactClass({
+  displayName: 'IssueList',
+
   propTypes: {
     endpoint: PropTypes.string.isRequired,
     query: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx b/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
index 6bfc3011b0..e221741cef 100644
--- a/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
+++ b/src/sentry/static/sentry/app/components/latestDeployOrReleaseTime.jsx
@@ -1,11 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import ApiMixin from '../mixins/apiMixin';
 import TooltipMixin from '../mixins/tooltip';
 import TimeSince from './timeSince';
 import {t} from '../locale';
 
-const LatestDeployOrReleaseTime = React.createClass({
+const LatestDeployOrReleaseTime = createReactClass({
+  displayName: 'LatestDeployOrReleaseTime',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     release: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/letterAvatar.jsx b/src/sentry/static/sentry/app/components/letterAvatar.jsx
index 8e939af8ec..12407b2e54 100644
--- a/src/sentry/static/sentry/app/components/letterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/letterAvatar.jsx
@@ -1,12 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 /**
  * Also see avatar.py. Anything changed in this file (how colors
  * are selected, the svg, etc) will also need to be changed there.
  */
 
-const LetterAvatar = React.createClass({
+const LetterAvatar = createReactClass({
+  displayName: 'LetterAvatar',
+
   propTypes: {
     identifier: PropTypes.string.isRequired,
     displayName: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index d98c5a5313..144d96ebcd 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -1,12 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import IndicatorStore from '../stores/indicatorStore';
 import {joinTeam} from '../actionCreators/teams';
 import ApiMixin from '../mixins/apiMixin';
 import {t} from '../locale';
 
-const MissingProjectMembership = React.createClass({
+const MissingProjectMembership = createReactClass({
+  displayName: 'MissingProjectMembership',
+
   propTypes: {
     organization: PropTypes.object.isRequired,
     team: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/modals/diffModal.jsx b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
index 12e4ca33d2..0f43e58c4f 100644
--- a/src/sentry/static/sentry/app/components/modals/diffModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/diffModal.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 import Reflux from 'reflux';
 import Modal from 'react-bootstrap/lib/Modal';
@@ -9,7 +10,8 @@ import ProjectModalStore from '../../stores/projectModalStore';
 import ProjectActions from '../../actions/projectActions';
 import '../../../less/components/modals/diffModal.less';
 
-const DiffModal = React.createClass({
+const DiffModal = createReactClass({
+  displayName: 'DiffModal',
   mixins: [Reflux.connect(ProjectModalStore, 'diffModal')],
 
   componentDidMount() {
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
index b75f6e64b9..a721317c9e 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
@@ -1,13 +1,16 @@
 import moment from 'moment';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import classNames from 'classnames';
 import {t, tct} from '../../locale';
 
 import OrganizationState from '../../mixins/organizationState';
 import Confirmation from './confirmation';
 
-const TodoItem = React.createClass({
+const TodoItem = createReactClass({
+  displayName: 'TodoItem',
+
   propTypes: {
     task: PropTypes.object.isRequired,
     onSkip: PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
index 23e622639c..cb18302e08 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/todos.jsx
@@ -1,12 +1,15 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {t} from '../../locale';
 
 import ApiMixin from '../../mixins/apiMixin';
 import OrganizationState from '../../mixins/organizationState';
 import TodoItem from './toDoItem';
 
-const TodoList = React.createClass({
+const TodoList = createReactClass({
+  displayName: 'TodoList',
   mixins: [ApiMixin, OrganizationState],
+
   statics: {
     TASKS: [
       {
@@ -20,7 +23,7 @@ const TodoList = React.createClass({
         prereq: [],
         featureLocation: 'organization',
         location: 'projects/new/',
-        display: true
+        display: true,
       },
       {
         task: 2,
@@ -31,7 +34,7 @@ const TodoList = React.createClass({
         prereq: [1],
         featureLocation: 'project',
         location: 'settings/install/',
-        display: true
+        display: true,
       },
       {
         task: 3,
@@ -45,7 +48,7 @@ const TodoList = React.createClass({
         prereq: [],
         featureLocation: 'organization',
         location: 'members/',
-        display: true
+        display: true,
       },
       {
         task: 4,
@@ -58,7 +61,7 @@ const TodoList = React.createClass({
         prereq: [1, 2],
         featureLocation: 'organization',
         location: 'projects/new/',
-        display: true
+        display: true,
       },
       {
         task: 5,
@@ -72,7 +75,7 @@ const TodoList = React.createClass({
         prereq: [1, 2],
         featureLocation: 'absolute',
         location: 'https://docs.sentry.io/hosted/learn/context/#capturing-the-user',
-        display: true
+        display: true,
       },
       {
         task: 6,
@@ -86,7 +89,7 @@ const TodoList = React.createClass({
         prereq: [1, 2],
         featureLocation: 'project',
         location: 'settings/release-tracking/',
-        display: true
+        display: true,
       },
       {
         task: 7,
@@ -100,7 +103,7 @@ const TodoList = React.createClass({
         prereq: [1, 2], // Is one of the platforms javascript?
         featureLocation: 'absolute',
         location: 'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/',
-        display: true
+        display: true,
       },
       {
         task: 8,
@@ -110,7 +113,7 @@ const TodoList = React.createClass({
         prereq: [1, 2, 5],
         featureLocation: 'project',
         location: 'settings/user-reports/',
-        display: false
+        display: false,
       },
       {
         task: 9,
@@ -120,7 +123,7 @@ const TodoList = React.createClass({
         prereq: [1, 2],
         featureLocation: 'project',
         location: 'settings/issue-tracking/',
-        display: false
+        display: false,
       },
       {
         task: 10,
@@ -130,7 +133,7 @@ const TodoList = React.createClass({
         prereq: [1, 2],
         featureLocation: 'project',
         location: 'settings/alerts/',
-        display: false
+        display: false,
       },
     ],
   },
diff --git a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 7ca585b54e..95a7e6091f 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import OrganizationHomeSidebar from './homeSidebar';
 import OrganizationState from '../../mixins/organizationState';
 import ProjectSelector from '../projectHeader/projectSelector';
@@ -8,7 +10,9 @@ import {t} from '../../locale';
 
 import Button from '../../components/buttons/button';
 
-const HomeContainer = React.createClass({
+const HomeContainer = createReactClass({
+  displayName: 'HomeContainer',
+
   mixins: [
     OrganizationState,
     TooltipMixin({
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 090a9ae31d..096691f8c4 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ListLink from '../listLink';
 import OrganizationState from '../../mixins/organizationState';
 import HookStore from '../../stores/hookStore';
@@ -85,7 +87,9 @@ OrgSettingsMenu.propTypes = {
   org: PropTypes.object,
 };
 
-const HomeSidebar = React.createClass({
+const HomeSidebar = createReactClass({
+  displayName: 'HomeSidebar',
+
   contextTypes: {
     location: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx b/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
index df843b3cff..50aa77b41f 100644
--- a/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
@@ -1,9 +1,12 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import OrganizationsStore from '../../stores/organizationsStore';
 
-const OrganizationsLoader = React.createClass({
+const OrganizationsLoader = createReactClass({
+  displayName: 'OrganizationsLoader',
   mixins: [ApiMixin],
 
   componentWillMount() {
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index 95ddea0b37..e2fe308582 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -8,7 +9,9 @@ import LoadingIndicator from '../components/loadingIndicator';
 import plugins from '../plugins';
 import {t} from '../locale';
 
-const PluginConfig = React.createClass({
+const PluginConfig = createReactClass({
+  displayName: 'PluginConfig',
+
   propTypes: {
     organization: PropTypes.object.isRequired,
     project: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/pluginList.jsx b/src/sentry/static/sentry/app/components/pluginList.jsx
index 5c5a822daf..3d42178c41 100644
--- a/src/sentry/static/sentry/app/components/pluginList.jsx
+++ b/src/sentry/static/sentry/app/components/pluginList.jsx
@@ -1,13 +1,17 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import InactivePlugins from './inactivePlugins';
 import IndicatorStore from '../stores/indicatorStore';
 import PluginConfig from './pluginConfig';
 import {t} from '../locale';
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'pluginList',
+
   propTypes: {
     organization: PropTypes.object.isRequired,
     project: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index e862b429c4..84955bf92f 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 import classNames from 'classnames';
 
@@ -13,7 +14,9 @@ import Link from '../link';
 import {sortArray} from '../../utils';
 import {t} from '../../locale';
 
-const ProjectSelector = React.createClass({
+const ProjectSelector = createReactClass({
+  displayName: 'ProjectSelector',
+
   propTypes: {
     // Accepts a project id (slug) and not a project *object* because ProjectSelector
     // is created from Django templates, and only organization is serialized
diff --git a/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx b/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
index 13c8a762a7..9fdab267cd 100644
--- a/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
+++ b/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
@@ -1,11 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 
 import {update as projectUpdate} from '../../actionCreators/projects';
 
-const BookmarkToggle = React.createClass({
+const BookmarkToggle = createReactClass({
+  displayName: 'BookmarkToggle',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     project: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
index 17ca826910..891e0b620a 100644
--- a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
+++ b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import {Sparklines, SparklinesLine} from 'react-sparklines';
 
@@ -10,7 +11,9 @@ import ApiMixin from '../mixins/apiMixin';
 
 import {t, tn} from '../locale';
 
-const ReleaseProjectStatSparkline = React.createClass({
+const ReleaseProjectStatSparkline = createReactClass({
+  displayName: 'ReleaseProjectStatSparkline',
+
   propTypes: {
     orgId: PropTypes.string,
     project: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/releaseStats.jsx b/src/sentry/static/sentry/app/components/releaseStats.jsx
index 63ed4b6f62..99e765e63c 100644
--- a/src/sentry/static/sentry/app/components/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/releaseStats.jsx
@@ -1,10 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Avatar from './avatar';
 import TooltipMixin from '../mixins/tooltip';
 import {t} from '../locale';
 
-const ReleaseStats = React.createClass({
+const ReleaseStats = createReactClass({
+  displayName: 'ReleaseStats',
+
   propTypes: {
     release: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
index 07577307ea..f96ce2684d 100644
--- a/src/sentry/static/sentry/app/components/resultGrid.jsx
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import $ from 'jquery';
 import {browserHistory} from 'react-router';
 
@@ -8,24 +9,24 @@ import DropdownLink from './dropdownLink';
 import MenuItem from './menuItem';
 import Pagination from './pagination';
 
-const Filter = React.createClass({
-  propTypes: {
+class Filter extends React.Component {
+  static propTypes = {
     name: PropTypes.string.isRequired,
     queryKey: PropTypes.string.isRequired,
     options: PropTypes.array.isRequired,
     path: PropTypes.string.isRequired,
     value: PropTypes.any,
-  },
+  };
 
-  getCurrentLabel() {
+  getCurrentLabel = () => {
     let selected = this.props.options.filter(item => {
       return item[0] === (this.props.value || '');
     })[0];
     if (selected) return this.props.name + ': ' + selected[1];
     return this.props.name + ': ' + 'Any';
-  },
+  };
 
-  getDefaultItem() {
+  getDefaultItem = () => {
     let query = $.extend({}, this.props.location.query, {
       cursor: '',
     });
@@ -41,9 +42,9 @@ const Filter = React.createClass({
         Any
       </MenuItem>
     );
-  },
+  };
 
-  getSelector() {
+  getSelector = () => {
     return (
       <DropdownLink title={this.getCurrentLabel()}>
         {this.getDefaultItem()}
@@ -65,7 +66,7 @@ const Filter = React.createClass({
         })}
       </DropdownLink>
     );
-  },
+  };
 
   render() {
     return (
@@ -77,24 +78,24 @@ const Filter = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
 
-const SortBy = React.createClass({
-  propTypes: {
+class SortBy extends React.Component {
+  static propTypes = {
     options: PropTypes.array.isRequired,
     path: PropTypes.string.isRequired,
     location: PropTypes.string.isRequired,
     value: PropTypes.any,
-  },
+  };
 
-  getCurrentSortLabel() {
+  getCurrentSortLabel = () => {
     return this.props.options.filter(item => {
       return item[0] === this.props.value;
     })[0][1];
-  },
+  };
 
-  getSortBySelector() {
+  getSortBySelector = () => {
     return (
       <DropdownLink title={this.getCurrentSortLabel()} className="sorted-by">
         {this.props.options.map(item => {
@@ -115,7 +116,7 @@ const SortBy = React.createClass({
         })}
       </DropdownLink>
     );
-  },
+  };
 
   render() {
     if (this.props.options.length === 0) return null;
@@ -130,10 +131,12 @@ const SortBy = React.createClass({
         )}
       </div>
     );
-  },
-});
+  }
+}
+
+const ResultGrid = createReactClass({
+  displayName: 'ResultGrid',
 
-const ResultGrid = React.createClass({
   propTypes: {
     columns: PropTypes.array,
     columnsForRow: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/components/shortId.jsx b/src/sentry/static/sentry/app/components/shortId.jsx
index 6e82124657..56e14668a7 100644
--- a/src/sentry/static/sentry/app/components/shortId.jsx
+++ b/src/sentry/static/sentry/app/components/shortId.jsx
@@ -1,11 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 import ProjectState from '../mixins/projectState';
 
 import AutoSelectText from './autoSelectText';
 
-const ShortId = React.createClass({
+const ShortId = createReactClass({
+  displayName: 'ShortId',
+
   propTypes: {
     shortId: PropTypes.string,
     project: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index aabd897182..7e16728948 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import LoadingIndicator from '../loadingIndicator';
 import {t} from '../../locale';
@@ -11,7 +13,9 @@ import SidebarPanelItem from '../sidebarPanelItem';
 const MARK_SEEN_DELAY = 1000;
 const POLLER_DELAY = 60000;
 
-const Broadcasts = React.createClass({
+const Broadcasts = createReactClass({
+  displayName: 'Broadcasts',
+
   propTypes: {
     showPanel: PropTypes.bool,
     currentPanel: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
index 78585d401f..6cc0cc8950 100644
--- a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import SidebarPanel from '../sidebarPanel';
@@ -7,7 +8,9 @@ import SidebarPanel from '../sidebarPanel';
 import IncidentStore from '../../stores/incidentStore';
 import {t} from '../../locale';
 
-const Incidents = React.createClass({
+const Incidents = createReactClass({
+  displayName: 'Incidents',
+
   propTypes: {
     showPanel: PropTypes.bool,
     currentPanel: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index cbeb26658a..19d2d11fd6 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import $ from 'jquery';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -18,14 +19,14 @@ import ConfigStore from '../../stores/configStore';
 
 import {t} from '../../locale';
 
-const OnboardingStatus = React.createClass({
-  propTypes: {
+class OnboardingStatus extends React.Component {
+  static propTypes = {
     org: PropTypes.object.isRequired,
     currentPanel: PropTypes.string,
     onShowPanel: PropTypes.func,
     showPanel: PropTypes.bool,
     hidePanel: PropTypes.func,
-  },
+  };
 
   render() {
     let org = this.props.org;
@@ -67,8 +68,8 @@ const OnboardingStatus = React.createClass({
           )}
       </li>
     );
-  },
-});
+  }
+}
 
 function getFirstRequiredAdminAction(org) {
   for (let key in requiredAdminActions) {
@@ -80,7 +81,9 @@ function getFirstRequiredAdminAction(org) {
   return null;
 }
 
-const Sidebar = React.createClass({
+const Sidebar = createReactClass({
+  displayName: 'Sidebar',
+
   contextTypes: {
     location: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
index 48cf07d72c..d79b3d4c0f 100644
--- a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Link from '../link';
 import SidebarPanel from '../sidebarPanel';
 import LetterAvatar from '../letterAvatar';
@@ -18,7 +19,9 @@ RouterOrBrowserLink.propTypes = {
   path: PropTypes.string.isRequired,
 };
 
-const OrganizationSelector = React.createClass({
+const OrganizationSelector = createReactClass({
+  displayName: 'OrganizationSelector',
+
   propTypes: {
     organization: PropTypes.object,
     showPanel: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/splitDiff.jsx b/src/sentry/static/sentry/app/components/splitDiff.jsx
index 1a9705a298..71be08a1ef 100644
--- a/src/sentry/static/sentry/app/components/splitDiff.jsx
+++ b/src/sentry/static/sentry/app/components/splitDiff.jsx
@@ -1,4 +1,5 @@
-import React, {PropTypes} from 'react';
+import PropTypes from 'prop-types';
+import React from 'react';
 import classNames from 'classnames';
 import {diffChars, diffWords, diffLines} from 'diff';
 
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index c7f5cfcf69..a7fef36e35 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import PropTypes from 'prop-types';
 import moment from 'moment';
 import _ from 'lodash';
@@ -7,7 +8,9 @@ import TooltipMixin from '../mixins/tooltip';
 import Count from './count';
 import ConfigStore from '../stores/configStore';
 
-const StackedBarChart = React.createClass({
+const StackedBarChart = createReactClass({
+  displayName: 'StackedBarChart',
+
   propTypes: {
     // TODO(dcramer): DEPRECATED, use series instead
     points: PropTypes.arrayOf(
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 9e0d3bd8eb..63edb7eede 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -1,6 +1,7 @@
 import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import AssigneeSelector from '../assigneeSelector';
@@ -15,7 +16,9 @@ import EventOrGroupExtraDetails from '../eventOrGroupExtraDetails';
 
 import {valueIsEqual} from '../../utils';
 
-const StreamGroup = React.createClass({
+const StreamGroup = createReactClass({
+  displayName: 'StreamGroup',
+
   propTypes: {
     id: PropTypes.string.isRequired,
     orgId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
index 2e7162f137..ce0dd755c6 100644
--- a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
@@ -1,11 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import SelectedGroupStore from '../../stores/selectedGroupStore';
 import Checkbox from '../checkbox';
 
-const GroupCheckBox = React.createClass({
+const GroupCheckBox = createReactClass({
+  displayName: 'GroupCheckBox',
+
   propTypes: {
     id: PropTypes.string.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index 481ab50cea..7038cd8754 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -6,30 +6,26 @@ import ConfigStore from '../stores/configStore';
 
 import {t, tct} from '../locale';
 
-const U2fInterface = React.createClass({
-  propTypes: {
+class U2fInterface extends React.Component {
+  static propTypes = {
     challengeData: PropTypes.object.isRequired,
     flowMode: PropTypes.string.isRequired,
     onTap: PropTypes.func,
     silentIfUnsupported: PropTypes.bool,
-  },
-
-  getDefaultProps() {
-    return {
-      silentIfUnsupported: false,
-    };
-  },
-
-  getInitialState() {
-    return {
-      isSupported: null,
-      formElement: null,
-      challengeElement: null,
-      hasBeenTapped: false,
-      deviceFailure: null,
-      responseElement: null,
-    };
-  },
+  };
+
+  static defaultProps = {
+    silentIfUnsupported: false,
+  };
+
+  state = {
+    isSupported: null,
+    formElement: null,
+    challengeElement: null,
+    hasBeenTapped: false,
+    deviceFailure: null,
+    responseElement: null,
+  };
 
   componentDidMount() {
     u2f.isSupported().then(supported => {
@@ -41,9 +37,9 @@ const U2fInterface = React.createClass({
       }
       this.invokeU2fFlow();
     });
-  },
+  }
 
-  onTryAgain() {
+  onTryAgain = () => {
     this.setState(
       {
         hasBeenTapped: false,
@@ -53,9 +49,9 @@ const U2fInterface = React.createClass({
         this.invokeU2fFlow();
       }
     );
-  },
+  };
 
-  invokeU2fFlow() {
+  invokeU2fFlow = () => {
     let promise;
     if (this.props.flowMode === 'sign') {
       promise = u2f.sign(this.props.challengeData.authenticateRequests);
@@ -72,6 +68,7 @@ const U2fInterface = React.createClass({
             hasBeenTapped: true,
           },
           () => {
+            //eslint-disable-next-line react/no-direct-mutation-state
             this.state.responseElement.value = JSON.stringify(data);
             if (!this.props.onTap || this.props.onTap()) {
               this.state.formElement.submit();
@@ -103,23 +100,23 @@ const U2fInterface = React.createClass({
           hasBeenTapped: false,
         });
       });
-  },
+  };
 
-  bindChallengeElement(ref) {
+  bindChallengeElement = ref => {
     this.setState({
       challengeElement: ref,
       formElement: ref.form,
     });
     ref.value = JSON.stringify(this.props.challengeData);
-  },
+  };
 
-  bindResponseElement(ref) {
+  bindResponseElement = ref => {
     this.setState({
       responseElement: ref,
     });
-  },
+  };
 
-  renderUnsupported() {
+  renderUnsupported = () => {
     if (this.props.silentIfUnsupported) {
       return null;
     }
@@ -138,13 +135,13 @@ const U2fInterface = React.createClass({
         </div>
       </div>
     );
-  },
+  };
 
-  canTryAgain() {
+  canTryAgain = () => {
     return this.state.deviceFailure !== 'BAD_APPID';
-  },
+  };
 
-  renderFailure() {
+  renderFailure = () => {
     let {deviceFailure} = this.state;
     let supportMail = ConfigStore.get('supportEmail');
     let support = supportMail ? (
@@ -185,17 +182,17 @@ const U2fInterface = React.createClass({
         )}
       </div>
     );
-  },
+  };
 
-  renderBody() {
+  renderBody = () => {
     if (this.state.deviceFailure) {
       return this.renderFailure();
     } else {
       return this.props.children;
     }
-  },
+  };
 
-  renderPrompt() {
+  renderPrompt = () => {
     return (
       <div
         className={
@@ -218,7 +215,7 @@ const U2fInterface = React.createClass({
         <div className="inner">{this.renderBody()}</div>
       </div>
     );
-  },
+  };
 
   render() {
     let {isSupported} = this.state;
@@ -231,7 +228,7 @@ const U2fInterface = React.createClass({
     } else {
       return this.renderPrompt();
     }
-  },
-});
+  }
+}
 
 export default U2fInterface;
diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.jsx b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
index 3ea7b34600..d7aad1c154 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.jsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
 import Avatar from './avatar';
@@ -15,7 +16,9 @@ import {t} from '../locale';
 
 import ApiMixin from '../mixins/apiMixin';
 
-const VersionHoverCard = React.createClass({
+const VersionHoverCard = createReactClass({
+  displayName: 'VersionHoverCard',
+
   propTypes: {
     version: PropTypes.string.isRequired,
     orgId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 85ead747b4..56ec73ed6e 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -4,6 +4,7 @@ import moment from 'moment';
 import Raven from 'raven-js';
 import React from 'react';
 import ReactDOM from 'react-dom';
+import createReactClass from 'create-react-class';
 import {AppContainer} from 'react-hot-loader';
 import PropTypes from 'prop-types';
 import {renderToStaticMarkup} from 'react-dom/server';
@@ -82,6 +83,7 @@ export default {
   ReactDOMServer: {
     renderToStaticMarkup,
   },
+  createReactClass,
   ReactBootstrap: {
     Modal: ReactBootstrapModal,
   },
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
index 47abd0fd95..f9ac775465 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
@@ -1,6 +1,9 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import PropTypes from 'prop-types';
 
+import SentryTypes from '../proptypes';
 import LatestContextStore from '../stores/latestContextStore';
 import withOrganizations from './withOrganizations';
 
@@ -9,8 +12,13 @@ import withOrganizations from './withOrganizations';
 // last accessed organization/project
 const withLatestContext = WrappedComponent =>
   withOrganizations(
-    React.createClass({
+    createReactClass({
+      displayName: 'withLatestContext',
+      propTypes: {
+        organizations: PropTypes.arrayOf(SentryTypes.Organization),
+      },
       mixins: [Reflux.connect(LatestContextStore, 'latestContext')],
+
       render() {
         let {organizations} = this.props;
         let {latestContext} = this.state;
diff --git a/src/sentry/static/sentry/app/utils/withOrganizations.jsx b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
index 4b87668063..ba23893d9d 100644
--- a/src/sentry/static/sentry/app/utils/withOrganizations.jsx
+++ b/src/sentry/static/sentry/app/utils/withOrganizations.jsx
@@ -1,11 +1,14 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import OrganizationsStore from '../stores/organizationsStore';
 
 const withOrganizations = WrappedComponent =>
-  React.createClass({
+  createReactClass({
+    displayName: 'withOrganizations',
     mixins: [Reflux.connect(OrganizationsStore, 'organizations')],
+
     render() {
       return (
         <WrappedComponent organizations={this.state.organizations} {...this.props} />
diff --git a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
index 001e39877a..25d95fdf31 100644
--- a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
+++ b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
@@ -1,12 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import AsyncView from './asyncView';
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import {t} from '../locale';
 
-const AuthorizationRow = React.createClass({
+const AuthorizationRow = createReactClass({
+  displayName: 'AuthorizationRow',
+
   propTypes: {
     authorization: PropTypes.object.isRequired,
     onRevoke: PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
index 288dc8c5a4..6e4ab043e7 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -1,12 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import StackedBarChart from '../../components/stackedBarChart';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'apiChart',
+
   propTypes: {
     since: PropTypes.number.isRequired,
     resolution: PropTypes.string.isRequired,
@@ -46,13 +50,13 @@ export default React.createClass({
           key: statName,
         },
         success: data => {
-          this.state.rawData[statName] = data;
-          this.setState(
-            {
-              rawData: this.state.rawData,
-            },
-            this.requestFinished
-          );
+          this.setState(prevState => {
+            let rawData = prevState.rawData;
+            rawData[statName] = data;
+            return {
+              rawData,
+            };
+          }, this.requestFinished);
         },
         error: data => {
           this.setState({
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
index 8d4e6d2d19..78aca7eea9 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -1,12 +1,16 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import StackedBarChart from '../../components/stackedBarChart';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'eventChart',
+
   propTypes: {
     since: PropTypes.number.isRequired,
     resolution: PropTypes.string.isRequired,
@@ -45,13 +49,13 @@ export default React.createClass({
           key: statName,
         },
         success: data => {
-          this.state.rawData[statName] = data;
-          this.setState(
-            {
-              rawData: this.state.rawData,
-            },
-            this.requestFinished
-          );
+          this.setState(prevState => {
+            let rawData = prevState.rawData;
+            rawData[statName] = data;
+            return {
+              rawData,
+            };
+          }, this.requestFinished);
         },
         error: data => {
           this.setState({
diff --git a/src/sentry/static/sentry/app/views/adminQueue.jsx b/src/sentry/static/sentry/app/views/adminQueue.jsx
index f960233541..ab199f5f90 100644
--- a/src/sentry/static/sentry/app/views/adminQueue.jsx
+++ b/src/sentry/static/sentry/app/views/adminQueue.jsx
@@ -1,13 +1,16 @@
 /*eslint getsentry/jsx-needs-il8n:0*/
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import InternalStatChart from '../components/internalStatChart';
 import {Select2Field} from '../components/forms';
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'adminQueue',
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
index fd559dfe12..6d3020eb1b 100644
--- a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import DocumentTitle from 'react-document-title';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -11,7 +12,9 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
-const ApiApplicationDetails = React.createClass({
+const ApiApplicationDetails = createReactClass({
+  displayName: 'ApiApplicationDetails',
+
   contextTypes: {
     router: PropTypes.object.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/apiApplications.jsx b/src/sentry/static/sentry/app/views/apiApplications.jsx
index 79792c9bf7..1a2b00eb73 100644
--- a/src/sentry/static/sentry/app/views/apiApplications.jsx
+++ b/src/sentry/static/sentry/app/views/apiApplications.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import DocumentTitle from 'react-document-title';
 import {Link} from 'react-router';
 
@@ -9,7 +10,9 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
-const ApiApplicationRow = React.createClass({
+const ApiApplicationRow = createReactClass({
+  displayName: 'ApiApplicationRow',
+
   propTypes: {
     app: PropTypes.object.isRequired,
     onRemove: PropTypes.func.isRequired,
@@ -83,7 +86,9 @@ const ApiApplicationRow = React.createClass({
   },
 });
 
-const ApiApplications = React.createClass({
+const ApiApplications = createReactClass({
+  displayName: 'ApiApplications',
+
   contextTypes: {
     router: PropTypes.object.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/apiTokens.jsx b/src/sentry/static/sentry/app/views/apiTokens.jsx
index 93cc86cf5e..95cc205427 100644
--- a/src/sentry/static/sentry/app/views/apiTokens.jsx
+++ b/src/sentry/static/sentry/app/views/apiTokens.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import DocumentTitle from 'react-document-title';
 import {Link} from 'react-router';
 
@@ -11,7 +12,9 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t, tct} from '../locale';
 
-const ApiTokenRow = React.createClass({
+const ApiTokenRow = createReactClass({
+  displayName: 'ApiTokenRow',
+
   propTypes: {
     token: PropTypes.object.isRequired,
     onRemove: PropTypes.func.isRequired,
@@ -89,7 +92,8 @@ const ApiTokenRow = React.createClass({
   },
 });
 
-const ApiTokens = React.createClass({
+const ApiTokens = createReactClass({
+  displayName: 'ApiTokens',
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 115a0086b9..36039f46da 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -2,6 +2,7 @@
 /*eslint no-native-reassign:0 */
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import $ from 'jquery';
 import Cookies from 'js-cookie';
 import {ThemeProvider} from 'emotion-theming';
@@ -30,7 +31,9 @@ function getAlertTypeForProblem(problem) {
   }
 }
 
-const App = React.createClass({
+const App = createReactClass({
+  displayName: 'App',
+
   childContextTypes: {
     location: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index bdc7bda4a6..8c6a51ed9a 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import GroupState from '../../mixins/groupState';
 
@@ -19,7 +21,9 @@ import MemberListStore from '../../stores/memberListStore';
 
 import {t, tct, tn} from '../../locale';
 
-const GroupActivity = React.createClass({
+const GroupActivity = createReactClass({
+  displayName: 'GroupActivity',
+
   // TODO(dcramer): only re-render on group/activity change
   propTypes: {
     group: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index d204389f88..d82762f016 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import {browserHistory} from 'react-router';
 import DocumentTitle from 'react-document-title';
@@ -16,7 +17,9 @@ let ERROR_TYPES = {
   GROUP_NOT_FOUND: 'GROUP_NOT_FOUND',
 };
 
-const GroupDetails = React.createClass({
+const GroupDetails = createReactClass({
+  displayName: 'GroupDetails',
+
   propTypes: {
     setProjectNavSection: PropTypes.func,
     memberList: PropTypes.array,
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index c98e551999..49f77160b3 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -2,6 +2,8 @@ import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {t} from '../../locale';
 import ApiMixin from '../../mixins/apiMixin';
 import DropdownLink from '../../components/dropdownLink';
@@ -18,26 +20,27 @@ import TooltipMixin from '../../mixins/tooltip';
 import ResolveActions from '../../components/actions/resolve';
 import IgnoreActions from '../../components/actions/ignore';
 
-const DeleteActions = React.createClass({
-  propTypes: {
+class DeleteActions extends React.Component {
+  static propTypes = {
     organization: PropTypes.object.isRequired,
     project: PropTypes.object.isRequired,
     onDelete: PropTypes.func.isRequired,
     onDiscard: PropTypes.func.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
+  constructor(...args) {
+    super(...args);
+    this.state = {
       hooksDisabled: HookStore.get('project:discard-groups:disabled'),
     };
-  },
+  }
 
-  renderDisabledDiscard() {
+  renderDisabledDiscard = () => {
     let {project, organization} = this.props;
     return this.state.hooksDisabled.map(hook => hook(organization, project));
-  },
+  };
 
-  renderDiscard() {
+  renderDiscard = () => {
     return (
       <DropdownLink caret={true} className="group-delete btn btn-default btn-sm">
         <li>
@@ -56,7 +59,7 @@ const DeleteActions = React.createClass({
         </li>
       </DropdownLink>
     );
-  },
+  };
 
   render() {
     let features = new Set(this.props.project.features);
@@ -77,10 +80,12 @@ const DeleteActions = React.createClass({
           : this.renderDisabledDiscard()}
       </div>
     );
-  },
-});
+  }
+}
+
+const GroupDetailsActions = createReactClass({
+  displayName: 'GroupDetailsActions',
 
-const GroupDetailsActions = React.createClass({
   mixins: [
     ApiMixin,
     GroupState,
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index 014584599b..99bbc81c87 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -3,6 +3,8 @@ import moment from 'moment';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ConfigStore from '../../stores/configStore';
 import SentryTypes from '../../proptypes';
 import DateTime from '../../components/dateTime';
@@ -31,7 +33,9 @@ let formatDateDelta = (reference, observed) => {
   return results.join(', ');
 };
 
-let GroupEventToolbar = React.createClass({
+let GroupEventToolbar = createReactClass({
+  displayName: 'GroupEventToolbar',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index a15bd9abc7..6d5744ccb4 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import ApiMixin from '../../mixins/apiMixin';
 import AssigneeSelector from '../../components/assigneeSelector';
@@ -14,7 +15,9 @@ import ProjectState from '../../mixins/projectState';
 import TooltipMixin from '../../mixins/tooltip';
 import {t} from '../../locale';
 
-const GroupHeader = React.createClass({
+const GroupHeader = createReactClass({
+  displayName: 'GroupHeader',
+
   propTypes: {
     group: PropTypes.object.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
index b09fba2d4c..56a5b6aad3 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import moment from 'moment';
 import _ from 'lodash';
 
@@ -9,7 +10,9 @@ import {userDisplayName} from '../../utils/formatters';
 import TooltipMixin from '../../mixins/tooltip';
 import {t} from '../../locale';
 
-const GroupSeenBy = React.createClass({
+const GroupSeenBy = createReactClass({
+  displayName: 'GroupSeenBy',
+
   mixins: [
     GroupState,
     TooltipMixin({
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index a480cf0fa6..f629e4a602 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import ApiMixin from '../mixins/apiMixin';
 import EventEntries from '../components/events/eventEntries';
 import GroupEventToolbar from './groupDetails/eventToolbar';
@@ -9,7 +10,8 @@ import GroupEventDetailsLoadingError from '../components/errors/groupEventDetail
 import LoadingIndicator from '../components/loadingIndicator';
 import ResolutionBox from '../components/resolutionBox';
 
-const GroupEventDetails = React.createClass({
+const GroupEventDetails = createReactClass({
+  displayName: 'GroupEventDetails',
   mixins: [ApiMixin, GroupState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index 74a84c3abe..ea3a7a8abb 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -10,7 +11,8 @@ import SearchBar from '../components/searchBar';
 import EventsTable from '../components/eventsTable/eventsTable';
 import {t} from '../locale';
 
-const GroupEvents = React.createClass({
+const GroupEvents = createReactClass({
+  displayName: 'GroupEvents',
   mixins: [ApiMixin, GroupState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx b/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx
index 57150e70a0..549a6f2a5d 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/groupMergedView.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {t} from '../../locale';
@@ -9,7 +10,8 @@ import GroupingStore from '../../stores/groupingStore';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
-const GroupMergedView = React.createClass({
+const GroupMergedView = createReactClass({
+  displayName: 'GroupMergedView',
   mixins: [ApiMixin, Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx b/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx
index fe850c3767..8fb9bbd76a 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/mergedItem.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import classNames from 'classnames';
 
@@ -12,7 +13,9 @@ import SpreadLayout from '../../components/spreadLayout';
 
 import '../../../less/components/mergedItem.less';
 
-const MergedItem = React.createClass({
+const MergedItem = createReactClass({
+  displayName: 'MergedItem',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx b/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx
index 8f8f573967..94b1b79be5 100644
--- a/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupMerged/mergedToolbar.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import _ from 'lodash';
 
@@ -11,7 +12,9 @@ import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import Toolbar from '../../components/toolbar';
 import SpreadLayout from '../../components/spreadLayout';
 
-const MergedToolbar = React.createClass({
+const MergedToolbar = createReactClass({
+  displayName: 'MergedToolbar',
+
   propTypes: {
     onUnmerge: PropTypes.func,
     groupId: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/views/groupSimilar/groupSimilarView.jsx b/src/sentry/static/sentry/app/views/groupSimilar/groupSimilarView.jsx
index b8741dc2f2..bb5be28dbe 100644
--- a/src/sentry/static/sentry/app/views/groupSimilar/groupSimilarView.jsx
+++ b/src/sentry/static/sentry/app/views/groupSimilar/groupSimilarView.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 import Reflux from 'reflux';
 
@@ -11,7 +12,9 @@ import LoadingIndicator from '../../components/loadingIndicator';
 import ProjectState from '../../mixins/projectState';
 import SimilarList from './similarList';
 
-const GroupGroupingView = React.createClass({
+const GroupGroupingView = createReactClass({
+  displayName: 'GroupGroupingView',
+
   propTypes: {
     query: PropTypes.string,
   },
diff --git a/src/sentry/static/sentry/app/views/groupSimilar/similarItem.jsx b/src/sentry/static/sentry/app/views/groupSimilar/similarItem.jsx
index fae2aba856..fcee7e9b0c 100644
--- a/src/sentry/static/sentry/app/views/groupSimilar/similarItem.jsx
+++ b/src/sentry/static/sentry/app/views/groupSimilar/similarItem.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import classNames from 'classnames';
 
@@ -19,7 +20,9 @@ import SimilarScoreCard from '../../components/similarScoreCard';
 
 const similarInterfaces = ['exception', 'message'];
 
-const SimilarIssueItem = React.createClass({
+const SimilarIssueItem = createReactClass({
+  displayName: 'SimilarIssueItem',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     groupId: PropTypes.string.isRequired,
@@ -50,6 +53,7 @@ const SimilarIssueItem = React.createClass({
       hideLevel: PropTypes.bool,
     }),
   },
+
   mixins: [Reflux.listenTo(GroupingStore, 'onGroupingUpdate')],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupSimilar/similarToolbar.jsx b/src/sentry/static/sentry/app/views/groupSimilar/similarToolbar.jsx
index b477f2f645..c7efd61be9 100644
--- a/src/sentry/static/sentry/app/views/groupSimilar/similarToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupSimilar/similarToolbar.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {t} from '../../locale';
@@ -11,7 +12,9 @@ import LinkWithConfirmation from '../../components/linkWithConfirmation';
 import Toolbar from '../../components/toolbar';
 import ToolbarHeader from '../../components/toolbarHeader';
 
-const SimilarToolbar = React.createClass({
+const SimilarToolbar = createReactClass({
+  displayName: 'SimilarToolbar',
+
   propTypes: {
     onMerge: PropTypes.func.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/groupTagValues.jsx b/src/sentry/static/sentry/app/views/groupTagValues.jsx
index 62e1080cf0..446416e3ae 100644
--- a/src/sentry/static/sentry/app/views/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/groupTagValues.jsx
@@ -1,5 +1,6 @@
 /*eslint react/jsx-key:0*/
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import jQuery from 'jquery';
 import ApiMixin from '../mixins/apiMixin';
@@ -11,7 +12,8 @@ import TimeSince from '../components/timeSince';
 import {isUrl, percent, deviceNameMapper} from '../utils';
 import {t} from '../locale';
 
-const GroupTagValues = React.createClass({
+const GroupTagValues = createReactClass({
+  displayName: 'GroupTagValues',
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupTags.jsx b/src/sentry/static/sentry/app/views/groupTags.jsx
index c5fb2a58ef..17cd4eded8 100644
--- a/src/sentry/static/sentry/app/views/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupTags.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import ApiMixin from '../mixins/apiMixin';
 import Count from '../components/count';
@@ -8,7 +9,8 @@ import LoadingIndicator from '../components/loadingIndicator';
 import {percent, deviceNameMapper} from '../utils';
 import {t} from '../locale';
 
-const GroupTags = React.createClass({
+const GroupTags = createReactClass({
+  displayName: 'GroupTags',
   mixins: [ApiMixin, GroupState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
index bd2612b21e..4b2a6490d6 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -1,5 +1,6 @@
 import $ from 'jquery';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import ApiMixin from '../mixins/apiMixin';
 import GroupState from '../mixins/groupState';
@@ -8,7 +9,8 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
-const GroupUserReports = React.createClass({
+const GroupUserReports = createReactClass({
+  displayName: 'GroupUserReports',
   mixins: [ApiMixin, GroupState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
index f20fdaac0f..e548fdc7f6 100644
--- a/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
+++ b/src/sentry/static/sentry/app/views/inviteMember/inviteMember.jsx
@@ -1,6 +1,8 @@
 import {browserHistory} from 'react-router';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import classNames from 'classnames';
+import PropTypes from 'prop-types';
 
 import {t} from '../../locale';
 import AlertActions from '../../actions/alertActions';
@@ -14,7 +16,11 @@ import TeamSelect from './teamSelect';
 import TextField from '../../components/forms/textField';
 import recreateRoute from '../../utils/recreateRoute';
 
-const InviteMember = React.createClass({
+const InviteMember = createReactClass({
+  displayName: 'InviteMember',
+  propTypes: {
+    routes: PropTypes.array,
+  },
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index abaed4f2c6..27766aa63c 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 import Raven from 'raven-js';
 
@@ -9,7 +10,8 @@ import ProjectDocsContext from '../../projectInstall/docsContext';
 import ProjectInstallPlatform from '../../projectInstall/platform';
 import HookStore from '../../../stores/hookStore';
 
-const Configure = React.createClass({
+const Configure = createReactClass({
+  displayName: 'Configure',
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
index 12a3a6cbd7..8b0e5de35c 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import Raven from 'raven-js';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory, Link} from 'react-router';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -12,7 +13,9 @@ import OnboardingProject from '../onboarding/project';
 
 import {t} from '../../locale';
 
-const CreateProject = React.createClass({
+const CreateProject = createReactClass({
+  displayName: 'CreateProject',
+
   propTypes: {
     getDocsUrl: PropTypes.func,
   },
diff --git a/src/sentry/static/sentry/app/views/onboarding/progress.jsx b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
index 75e0d1990b..12902eff9e 100644
--- a/src/sentry/static/sentry/app/views/onboarding/progress.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
@@ -1,10 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import classNames from 'classnames';
 import {onboardingSteps, stepDescriptions} from './utils';
 import ConfigStore from '../../stores/configStore';
 
-const ProgressNodes = React.createClass({
+const ProgressNodes = createReactClass({
+  displayName: 'ProgressNodes',
+
   propTypes: {
     params: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index 1e00b55f0d..f3a095f514 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import DocumentTitle from 'react-document-title';
 import moment from 'moment';
@@ -25,7 +26,9 @@ function getRequiredAdminActions(org) {
   return [];
 }
 
-const OrganizationContext = React.createClass({
+const OrganizationContext = createReactClass({
+  displayName: 'OrganizationContext',
+
   childContextTypes: {
     organization: SentryTypes.Organization,
   },
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
index 10a93bc73f..0dc2b47cc0 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import {Link} from 'react-router';
 import {Sparklines, SparklinesLine} from 'react-sparklines';
@@ -20,27 +21,27 @@ import OrganizationState from '../mixins/organizationState';
 import {t} from '../locale';
 import {sortArray} from '../utils';
 
-const AssignedIssues = React.createClass({
-  propTypes: {
+class AssignedIssues extends React.Component {
+  static propTypes = {
     statsPeriod: PropTypes.string,
     pageSize: PropTypes.number,
-  },
+  };
 
-  getEndpoint() {
+  getEndpoint = () => {
     return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/?`;
-  },
+  };
 
-  getViewMoreLink() {
+  getViewMoreLink = () => {
     return `/organizations/${this.props.params.orgId}/issues/assigned/`;
-  },
+  };
 
-  renderEmpty() {
+  renderEmpty = () => {
     return <div className="box empty">{t('No issues have been assigned to you.')}</div>;
-  },
+  };
 
-  refresh() {
+  refresh = () => {
     this.refs.issueList.remountComponent();
-  },
+  };
 
   render() {
     return (
@@ -72,30 +73,30 @@ const AssignedIssues = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
-const NewIssues = React.createClass({
-  propTypes: {
+class NewIssues extends React.Component {
+  static propTypes = {
     statsPeriod: PropTypes.string,
     pageSize: PropTypes.number,
-  },
+  };
 
-  getEndpoint() {
+  getEndpoint = () => {
     return `/organizations/${this.props.params.orgId}/issues/new/`;
-  },
+  };
 
-  renderEmpty() {
+  renderEmpty = () => {
     return (
       <div className="box empty">
         {t('No new issues have been seen in the last week.')}
       </div>
     );
-  },
+  };
 
-  refresh() {
+  refresh = () => {
     this.refs.issueList.remountComponent();
-  },
+  };
 
   render() {
     return (
@@ -124,8 +125,8 @@ const NewIssues = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
 function ProjectSparkline(props) {
   let values = props.data.map(tuple => tuple[1]);
@@ -143,7 +144,9 @@ ProjectSparkline.propTypes = {
   data: PropTypes.array.isRequired,
 };
 
-const ProjectList = React.createClass({
+const ProjectList = createReactClass({
+  displayName: 'ProjectList',
+
   propTypes: {
     teams: PropTypes.array,
     maxProjects: PropTypes.number,
@@ -224,14 +227,14 @@ const ProjectList = React.createClass({
   },
 });
 
-const Activity = React.createClass({
-  getEndpoint() {
+class Activity extends React.Component {
+  getEndpoint = () => {
     return `/organizations/${this.props.params.orgId}/activity/`;
-  },
+  };
 
-  refresh() {
+  refresh = () => {
     this.refs.activityFeed.remountComponent();
-  },
+  };
 
   render() {
     return (
@@ -257,10 +260,11 @@ const Activity = React.createClass({
         />
       </div>
     );
-  },
-});
+  }
+}
 
-const OrganizationDashboard = React.createClass({
+const OrganizationDashboard = createReactClass({
+  displayName: 'OrganizationDashboard',
   mixins: [ApiMixin, Reflux.listenTo(TeamStore, 'onTeamListChange')],
 
   getDefaultProps() {
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index 2637f8ff70..996d6812e5 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -1,10 +1,17 @@
 import React from 'react';
+import PropTypes from 'prop-types';
+
+import createReactClass from 'create-react-class';
 
 import OrganizationState from '../../mixins/organizationState';
 import LazyLoad from '../../components/lazyLoad';
 import getSettingsComponent from '../../utils/getSettingsComponent';
 
-const OrganizationRateLimits = React.createClass({
+const OrganizationRateLimits = createReactClass({
+  displayName: 'OrganizationRateLimits',
+  propTypes: {
+    routes: PropTypes.array,
+  },
   mixins: [OrganizationState],
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
index af544f97b3..6e2b5471f2 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/rateLimitView.old.jsx
@@ -1,18 +1,20 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import IndicatorStore from '../../stores/indicatorStore';
 import {RangeField} from '../../components/forms';
 import {t} from '../../locale';
 
-const AccountLimit = React.createClass({
-  propTypes: {
+class AccountLimit extends React.Component {
+  static propTypes = {
     value: PropTypes.number,
     onChange: PropTypes.func.isRequired,
-  },
+  };
 
-  getRateLimitValues() {
+  getRateLimitValues = () => {
     let steps = [];
     let i = 0;
     while (i <= 1000000) {
@@ -26,7 +28,7 @@ const AccountLimit = React.createClass({
       }
     }
     return steps;
-  },
+  };
 
   render() {
     return (
@@ -45,10 +47,12 @@ const AccountLimit = React.createClass({
         }}
       />
     );
-  },
-});
+  }
+}
+
+const RateLimitView = createReactClass({
+  displayName: 'RateLimitView',
 
-const RateLimitView = React.createClass({
   propTypes: {
     organization: PropTypes.object.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index ef33313ac7..ff117f990c 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -1,12 +1,18 @@
 import $ from 'jquery';
 import React from 'react';
+import createReactClass from 'create-react-class';
+import PropTypes from 'prop-types';
 import ApiMixin from '../../mixins/apiMixin';
 import OrganizationState from '../../mixins/organizationState';
 
 import LazyLoad from '../../components/lazyLoad';
 import getSettingsComponent from '../../utils/getSettingsComponent';
 
-const OrganizationStats = React.createClass({
+const OrganizationStats = createReactClass({
+  displayName: 'OrganizationStats',
+  propTypes: {
+    routes: PropTypes.array,
+  },
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
@@ -83,12 +89,12 @@ const OrganizationStats = React.createClass({
           projectMap[project.id] = project;
         });
 
-        this.state.projectsRequestsPending -= 1;
-
-        this.setState({
-          pageLinks: jqxhr.getResponseHeader('Link'),
-          projectMap,
-          projectsRequestsPending: this.state.projectsRequestsPending,
+        this.setState(prevState => {
+          return {
+            pageLinks: jqxhr.getResponseHeader('Link'),
+            projectMap,
+            projectsRequestsPending: prevState.projectsRequestsPending - 1,
+          };
         });
       },
       error: () => {
@@ -120,11 +126,14 @@ const OrganizationStats = React.createClass({
           stat: statName,
         },
         success: data => {
-          this.state.rawOrgData[statName] = data;
-          this.state.statsRequestsPending -= 1;
-          this.setState({
-            rawOrgData: this.state.rawOrgData,
-            statsRequestsPending: this.state.statsRequestsPending,
+          this.setState(prevState => {
+            let rawOrgData = prevState.rawOrgData;
+            rawOrgData[statName] = data;
+
+            return {
+              rawOrgData,
+              statsRequestsPending: prevState.statsRequestsPending - 1,
+            };
           });
         },
         error: () => {
@@ -144,11 +153,14 @@ const OrganizationStats = React.createClass({
           group: 'project',
         },
         success: data => {
-          this.state.rawProjectData[statName] = data;
-          this.state.projectsRequestsPending -= 1;
-          this.setState({
-            rawProjectData: this.state.rawProjectData,
-            projectsRequestsPending: this.state.projectsRequestsPending,
+          this.setState(prevState => {
+            let rawProjectData = prevState.rawProjectData;
+            rawProjectData[statName] = data;
+
+            return {
+              rawProjectData,
+              projectsRequestsPending: prevState.projectsRequestsPending - 1,
+            };
           });
         },
         error: () => {
diff --git a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
index a55fa73773..2ca45ddcd2 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
@@ -16,7 +17,9 @@ let getPercent = (item, total) => {
   return parseInt(item / total * 100, 10) + '%';
 };
 
-const ProjectTable = React.createClass({
+const ProjectTable = createReactClass({
+  displayName: 'ProjectTable',
+
   propTypes: {
     projectMap: PropTypes.object.isRequired,
     projectTotals: PropTypes.array.isRequired,
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
index f23495c066..b1ae019341 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -9,7 +10,9 @@ import {t} from '../../locale';
 
 // TODO(dcramer): this isnt great UX
 
-const AllTeamsRow = React.createClass({
+const AllTeamsRow = createReactClass({
+  displayName: 'AllTeamsRow',
+
   propTypes: {
     access: PropTypes.object.isRequired,
     organization: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index 63b3102ec8..df280fd6f1 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import LazyLoad from 'react-lazy-load';
 
@@ -14,7 +15,9 @@ import TooltipMixin from '../../mixins/tooltip';
 import {sortArray} from '../../utils';
 import {t, tct} from '../../locale';
 
-const ExpandedTeamList = React.createClass({
+const ExpandedTeamList = createReactClass({
+  displayName: 'ExpandedTeamList',
+
   propTypes: {
     access: PropTypes.object.isRequired,
     organization: SentryTypes.Organization.isRequired,
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
index 08cad20368..820362b823 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {loadStats} from '../../actionCreators/projects';
@@ -10,7 +11,9 @@ import OrganizationState from '../../mixins/organizationState';
 import TeamStore from '../../stores/teamStore';
 import getSettingsComponent from '../../utils/getSettingsComponent';
 
-const OrganizationTeams = React.createClass({
+const OrganizationTeams = createReactClass({
+  displayName: 'OrganizationTeams',
+
   propTypes: {
     routes: PropTypes.arrayOf(PropTypes.object),
   },
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
index bab49388ba..281b243fb1 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import classNames from 'classnames';
 
@@ -9,7 +10,9 @@ import OrganizationState from '../../mixins/organizationState';
 import {defined} from '../../utils';
 import {t} from '../../locale';
 
-const OrganizationStatOverview = React.createClass({
+const OrganizationStatOverview = createReactClass({
+  displayName: 'OrganizationStatOverview',
+
   propTypes: {
     orgId: PropTypes.string,
   },
diff --git a/src/sentry/static/sentry/app/views/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
index 1f9a66dc9f..8ac206ff7b 100644
--- a/src/sentry/static/sentry/app/views/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {t} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
 import Button from '../components/buttons/button';
@@ -12,7 +14,9 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import SpreadLayout from '../components/spreadLayout';
 
-const RuleRow = React.createClass({
+const RuleRow = createReactClass({
+  displayName: 'RuleRow',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -124,7 +128,8 @@ const RuleRow = React.createClass({
   },
 });
 
-const ProjectAlertRules = React.createClass({
+const ProjectAlertRules = createReactClass({
+  displayName: 'ProjectAlertRules',
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectChooser.jsx b/src/sentry/static/sentry/app/views/projectChooser.jsx
index 4419771cbd..cbab77c031 100644
--- a/src/sentry/static/sentry/app/views/projectChooser.jsx
+++ b/src/sentry/static/sentry/app/views/projectChooser.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 import $ from 'jquery';
 import {t} from '../locale';
@@ -6,7 +7,8 @@ import {t} from '../locale';
 import OrganizationState from '../mixins/organizationState';
 import TodoList from '../components/onboardingWizard/todos';
 
-const ProjectChooser = React.createClass({
+const ProjectChooser = createReactClass({
+  displayName: 'ProjectChooser',
   mixins: [OrganizationState],
 
   componentWillMount() {
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
index e3593949d6..d3b469ac98 100644
--- a/src/sentry/static/sentry/app/views/projectCspSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
@@ -1,13 +1,17 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import {FormState, TextareaField, BooleanField} from '../components/forms';
 import {t} from '../locale';
 
-const ProjectCspSettingsForm = React.createClass({
+const ProjectCspSettingsForm = createReactClass({
+  displayName: 'ProjectCspSettingsForm',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -123,7 +127,9 @@ const ProjectCspSettingsForm = React.createClass({
   },
 });
 
-const ProjectCspSettings = React.createClass({
+const ProjectCspSettings = createReactClass({
+  displayName: 'ProjectCspSettings',
+
   propTypes: {
     setProjectNavSection: PropTypes.func,
   },
diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index 45f0ced592..f99dc829e8 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -1,6 +1,7 @@
 import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 
 import EventList from './projectDashboard/eventList';
@@ -13,7 +14,9 @@ const PERIOD_DAY = '1d';
 const PERIOD_WEEK = '1w';
 const PERIODS = new Set([PERIOD_HOUR, PERIOD_DAY, PERIOD_WEEK]);
 
-const ProjectDashboard = React.createClass({
+const ProjectDashboard = createReactClass({
+  displayName: 'ProjectDashboard',
+
   propTypes: {
     defaultStatsPeriod: PropTypes.string,
     setProjectNavSection: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index dfef4e6587..24279285b0 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import moment from 'moment';
 import ApiMixin from '../../mixins/apiMixin';
 import BarChart from '../../components/barChart';
@@ -8,7 +9,9 @@ import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 import ProjectState from '../../mixins/projectState';
 
-const ProjectChart = React.createClass({
+const ProjectChart = createReactClass({
+  displayName: 'ProjectChart',
+
   propTypes: {
     dateSince: PropTypes.number.isRequired,
     resolution: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index e0d7b4b3c5..fa61a56b1a 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import ApiMixin from '../../mixins/apiMixin';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
@@ -7,7 +8,9 @@ import {t} from '../../locale';
 
 import EventNode from './eventNode';
 
-const EventList = React.createClass({
+const EventList = createReactClass({
+  displayName: 'EventList',
+
   propTypes: {
     title: PropTypes.string.isRequired,
     endpoint: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
index f317d24d60..49124085be 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
@@ -1,12 +1,16 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import Count from '../../components/count';
 import EventOrGroupExtraDetails from '../../components/eventOrGroupExtraDetails';
 import EventOrGroupHeader from '../../components/eventOrGroupHeader';
 import ProjectState from '../../mixins/projectState';
 import SentryTypes from '../../proptypes';
 
-const EventNode = React.createClass({
+const EventNode = createReactClass({
+  displayName: 'EventNode',
+
   propTypes: {
     group: SentryTypes.Group.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
index 69cc4ac36b..dd1e6cf8b9 100644
--- a/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
+++ b/src/sentry/static/sentry/app/views/projectDataForwarding.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import HookStore from '../stores/hookStore';
 import LoadingError from '../components/loadingError';
@@ -9,7 +11,8 @@ import ProjectState from '../mixins/projectState';
 import StackedBarChart from '../components/stackedBarChart';
 import {t} from '../locale';
 
-const DataForwardingStats = React.createClass({
+const DataForwardingStats = createReactClass({
+  displayName: 'DataForwardingStats',
   mixins: [ApiMixin],
 
   getInitialState() {
@@ -95,7 +98,8 @@ const DataForwardingStats = React.createClass({
   },
 });
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'projectDataForwarding',
   mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
index 841a4f2798..ea9875536d 100644
--- a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Modal from 'react-bootstrap/lib/Modal';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -10,7 +11,8 @@ import FileSize from '../components/fileSize';
 import TimeSince from '../components/timeSince';
 import {t} from '../locale';
 
-const ProjectDebugSymbols = React.createClass({
+const ProjectDebugSymbols = createReactClass({
+  displayName: 'ProjectDebugSymbols',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index d9b447d4a6..0109cca6be 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -1,10 +1,13 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import DiffModal from '../components/modals/diffModal';
 import ProjectHeader from '../components/projectHeader';
 import ProjectState from '../mixins/projectState';
 
-const ProjectDetailsLayout = React.createClass({
+const ProjectDetailsLayout = createReactClass({
+  displayName: 'ProjectDetailsLayout',
   mixins: [ProjectState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectEvents/index.jsx b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
index 903dc78680..88b230fe24 100644
--- a/src/sentry/static/sentry/app/views/projectEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
@@ -1,6 +1,7 @@
 import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link, browserHistory} from 'react-router';
 import ApiMixin from '../../mixins/apiMixin';
 import DateTime from '../../components/dateTime';
@@ -11,7 +12,9 @@ import Pagination from '../../components/pagination';
 import SearchBar from '../../components/searchBar';
 import {t} from '../../locale';
 
-const ProjectEvents = React.createClass({
+const ProjectEvents = createReactClass({
+  displayName: 'ProjectEvents',
+
   propTypes: {
     defaultQuery: PropTypes.string,
     setProjectNavSection: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index 6f26c4e5c2..d2259c998f 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 import ReactDOMServer from 'react-dom/server';
 import moment from 'moment';
@@ -36,25 +37,23 @@ FilterSwitch.propTypes = {
   size: PropTypes.string.isRequired,
 };
 
-const FilterRow = React.createClass({
-  propTypes: {
+class FilterRow extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     onToggle: PropTypes.func.isRequired,
     idx: PropTypes.number.isRequired,
-  },
+  };
 
-  getInitialState() {
-    return {
-      loading: false,
-      error: false,
-    };
-  },
+  state = {
+    loading: false,
+    error: false,
+  };
 
-  onToggleSubfilters(active) {
+  onToggleSubfilters = active => {
     this.props.onToggle(this.props.data.subFilters, active);
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -85,8 +84,8 @@ const FilterRow = React.createClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 const LEGACY_BROWSER_SUBFILTERS = {
   ie_pre_9: {
@@ -123,32 +122,34 @@ const LEGACY_BROWSER_SUBFILTERS = {
 
 const LEGACY_BROWSER_KEYS = Object.keys(LEGACY_BROWSER_SUBFILTERS);
 
-const LegacyBrowserFilterRow = React.createClass({
-  propTypes: {
+class LegacyBrowserFilterRow extends React.Component {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     data: PropTypes.object.isRequired,
     onToggle: PropTypes.func.isRequired,
     idx: PropTypes.number.isRequired,
-  },
+  };
 
-  getInitialState() {
+  constructor(props) {
+    super(props);
     let initialSubfilters;
-    if (this.props.data.active === true) {
+    if (props.data.active === true) {
       initialSubfilters = new Set(LEGACY_BROWSER_KEYS);
-    } else if (this.props.data.active === false) {
+    } else if (props.data.active === false) {
       initialSubfilters = new Set();
     } else {
-      initialSubfilters = new Set(this.props.data.active);
+      initialSubfilters = new Set(props.data.active);
     }
-    return {
+
+    this.state = {
       loading: false,
       error: false,
       subfilters: initialSubfilters,
     };
-  },
+  }
 
-  onToggleSubfilters(subfilter) {
+  onToggleSubfilters = subfilter => {
     let {subfilters} = this.state;
 
     if (subfilter === true) {
@@ -169,9 +170,9 @@ const LegacyBrowserFilterRow = React.createClass({
         this.props.onToggle(this.props.data, subfilters);
       }
     );
-  },
+  };
 
-  renderSubfilters() {
+  renderSubfilters = () => {
     let entries = LEGACY_BROWSER_KEYS.map(key => {
       let subfilter = LEGACY_BROWSER_SUBFILTERS[key];
       return (
@@ -198,7 +199,7 @@ const LegacyBrowserFilterRow = React.createClass({
         {row}
       </div>
     ));
-  },
+  };
 
   render() {
     let data = this.props.data;
@@ -236,10 +237,12 @@ const LegacyBrowserFilterRow = React.createClass({
         {this.renderSubfilters()}
       </div>
     );
-  },
-});
+  }
+}
+
+const ProjectFiltersSettingsForm = createReactClass({
+  displayName: 'ProjectFiltersSettingsForm',
 
-const ProjectFiltersSettingsForm = React.createClass({
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -404,7 +407,8 @@ const ProjectFiltersSettingsForm = React.createClass({
   },
 });
 
-const ProjectFilters = React.createClass({
+const ProjectFilters = createReactClass({
+  displayName: 'ProjectFilters',
   mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 062f8cef17..551c31617c 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 
 import {
@@ -27,7 +28,7 @@ class ListAsTextareaField extends TextareaField {
 
 export default class ProjectGeneralSettings extends AsyncView {
   static contextTypes = {
-    organization: React.PropTypes.object.isRequired,
+    organization: PropTypes.object.isRequired,
   };
 
   getEndpoint() {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
index e21af2a5b2..b70fbf42af 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
@@ -1,12 +1,15 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import ProjectState from '../../mixins/projectState';
 
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
-const ProjectDocsContext = React.createClass({
+const ProjectDocsContext = createReactClass({
+  displayName: 'ProjectDocsContext',
   mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
index 4a2cea59cb..4517507be0 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import DocumentTitle from 'react-document-title';
 
 import OrganizationState from '../../mixins/organizationState';
@@ -6,7 +7,8 @@ import OrganizationState from '../../mixins/organizationState';
 import CreateProject from '../onboarding/createProject';
 import ProjectSelector from '../../components/projectHeader/projectSelector';
 
-const NewProject = React.createClass({
+const NewProject = createReactClass({
+  displayName: 'NewProject',
   mixins: [OrganizationState],
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index 5c1a06adfb..15a4c096d2 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../../mixins/apiMixin';
 import LanguageNav from './languageNav';
 import LoadingError from '../../components/loadingError';
@@ -9,7 +11,9 @@ import NotFound from '../../components/errors/notFound';
 import Link from '../../components/link';
 import {t, tct} from '../../locale';
 
-const ProjectInstallPlatform = React.createClass({
+const ProjectInstallPlatform = createReactClass({
+  displayName: 'ProjectInstallPlatform',
+
   propTypes: {
     platformData: PropTypes.object.isRequired,
     linkPath: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
index 35754516ca..2d14e6075a 100644
--- a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
@@ -3,6 +3,7 @@ import {isEqual} from 'lodash';
 import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import idx from 'idx';
 
 import {
@@ -33,7 +34,8 @@ export const getRateLimitError = (obj, key) => {
   return !!obj.rateLimit.find(errorObj => errorObj[key] && errorObj[key].length);
 };
 
-const KeyStats = React.createClass({
+const KeyStats = createReactClass({
+  displayName: 'KeyStats',
   mixins: [ApiMixin],
 
   getInitialState() {
@@ -142,7 +144,9 @@ const KeyStats = React.createClass({
   },
 });
 
-const KeySettings = React.createClass({
+const KeySettings = createReactClass({
+  displayName: 'KeySettings',
+
   propTypes: {
     organization: PropTypes.object.isRequired,
     project: PropTypes.object.isRequired,
@@ -523,7 +527,8 @@ const KeySettings = React.createClass({
   },
 });
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'projectKeyDetails',
   mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectKeys.jsx b/src/sentry/static/sentry/app/views/projectKeys.jsx
index 9dd4562c38..60e4edf693 100644
--- a/src/sentry/static/sentry/app/views/projectKeys.jsx
+++ b/src/sentry/static/sentry/app/views/projectKeys.jsx
@@ -3,6 +3,8 @@ import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {t, tct} from '../locale';
 import ApiMixin from '../mixins/apiMixin';
 import AutoSelectText from '../components/autoSelectText';
@@ -16,7 +18,9 @@ import OrganizationState from '../mixins/organizationState';
 import Pagination from '../components/pagination';
 import ProjectState from '../mixins/projectState';
 
-const KeyRow = React.createClass({
+const KeyRow = createReactClass({
+  displayName: 'KeyRow',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -215,7 +219,8 @@ const KeyRow = React.createClass({
   },
 });
 
-export default React.createClass({
+export default createReactClass({
+  displayName: 'projectKeys',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
index f6875deabf..9e3d47cd03 100644
--- a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {fetchPlugins, enablePlugin, disablePlugin} from '../../actionCreators/plugins';
@@ -6,8 +7,10 @@ import ApiMixin from '../../mixins/apiMixin';
 import PluginsStore from '../../stores/pluginsStore';
 import ProjectPlugins from './projectPlugins';
 
-const ProjectPluginsContainer = React.createClass({
+const ProjectPluginsContainer = createReactClass({
+  displayName: 'ProjectPluginsContainer',
   mixins: [ApiMixin, Reflux.connect(PluginsStore, 'store')],
+
   componentDidMount() {
     this.fetchData();
   },
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 0bc9854282..6336676504 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import OrganizationState from '../mixins/organizationState';
 import TimeSince from '../components/timeSince';
@@ -31,7 +33,8 @@ const HELP_LINKS = {
   native_missing_symbol: 'https://docs.sentry.io/server/dsym/',
 };
 
-const ProjectProcessingIssues = React.createClass({
+const ProjectProcessingIssues = createReactClass({
+  displayName: 'ProjectProcessingIssues',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
index d2df8bb713..15df964748 100644
--- a/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleaseTracking.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -9,7 +10,9 @@ import PluginList from '../components/pluginList';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 
-const ProjectReleaseTracking = React.createClass({
+const ProjectReleaseTracking = createReactClass({
+  displayName: 'ProjectReleaseTracking',
+
   propTypes: {
     organization: PropTypes.object,
     project: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index 39ae1714e1..95bfd52a88 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -1,6 +1,7 @@
 import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 
 import ApiMixin from '../../mixins/apiMixin';
@@ -12,7 +13,9 @@ import {t} from '../../locale';
 
 import ReleaseList from './releaseList';
 
-const ProjectReleases = React.createClass({
+const ProjectReleases = createReactClass({
+  displayName: 'ProjectReleases',
+
   propTypes: {
     defaultQuery: PropTypes.string,
     setProjectNavSection: PropTypes.func,
diff --git a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
index 00e4ca85ac..409d73e880 100644
--- a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingError from '../components/loadingError';
@@ -9,7 +11,9 @@ import Confirm from '../components/confirm';
 import {t} from '../locale';
 import OrganizationState from '../mixins/organizationState';
 
-const SavedSearchRow = React.createClass({
+const SavedSearchRow = createReactClass({
+  displayName: 'SavedSearchRow',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -133,7 +137,8 @@ const SavedSearchRow = React.createClass({
   },
 });
 
-const ProjectSavedSearches = React.createClass({
+const ProjectSavedSearches = createReactClass({
+  displayName: 'ProjectSavedSearches',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 8ab88fa179..c60493d2b4 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {fetchPlugins} from '../../actionCreators/plugins';
 import {t} from '../../locale';
 import ApiMixin from '../../mixins/apiMixin';
@@ -11,7 +13,9 @@ import LoadingIndicator from '../../components/loadingIndicator';
 import OrganizationState from '../../mixins/organizationState';
 import PluginNavigation from './pluginNavigation';
 
-const ProjectSettings = React.createClass({
+const ProjectSettings = createReactClass({
+  displayName: 'ProjectSettings',
+
   propTypes: {
     setProjectNavSection: PropTypes.func,
   },
diff --git a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
index aa19684a50..15023c03da 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
@@ -1,10 +1,16 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import {Link} from 'react-router';
+import PropTypes from 'prop-types';
 
 import PluginsStore from '../../stores/pluginsStore';
 
-const PluginNavigation = React.createClass({
+const PluginNavigation = createReactClass({
+  displayName: 'PluginNavigation',
+  propTypes: {
+    urlRoot: PropTypes.string,
+  },
   mixins: [Reflux.connect(PluginsStore, 'store')],
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index 71bfa83be7..16d3f81994 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -1,13 +1,17 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
 import {FormState, BooleanField} from '../components/forms';
 import {t} from '../locale';
 
-const ProjectFeedbackSettingsForm = React.createClass({
+const ProjectFeedbackSettingsForm = createReactClass({
+  displayName: 'ProjectFeedbackSettingsForm',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -109,7 +113,9 @@ const ProjectFeedbackSettingsForm = React.createClass({
   },
 });
 
-const ProjectUserReportSettings = React.createClass({
+const ProjectUserReportSettings = createReactClass({
+  displayName: 'ProjectUserReportSettings',
+
   propTypes: {
     setProjectNavSection: PropTypes.func,
   },
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserReports.jsx
index c0e05c4376..2ba491d159 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReports.jsx
@@ -1,6 +1,7 @@
 import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {browserHistory, Link} from 'react-router';
 import ApiMixin from '../mixins/apiMixin';
 import GroupStore from '../stores/groupStore';
@@ -11,7 +12,9 @@ import CompactIssue from '../components/compactIssue';
 import EventUserReport from '../components/events/userReport';
 import {t} from '../locale';
 
-const ProjectUserReports = React.createClass({
+const ProjectUserReports = createReactClass({
+  displayName: 'ProjectUserReports',
+
   propTypes: {
     defaultQuery: PropTypes.string,
     defaultStatus: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index d065209123..76b19ec753 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import DocumentTitle from 'react-document-title';
 
@@ -29,7 +30,9 @@ const ERROR_TYPES = {
  * Additionally delays rendering of children until project XHR has finished
  * and context is populated.
  */
-const ProjectContext = React.createClass({
+const ProjectContext = createReactClass({
+  displayName: 'ProjectContext',
+
   propTypes: {
     projectId: PropTypes.string,
     orgId: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
index cf6f282e14..5a5273cdb5 100644
--- a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import ApiMixin from '../mixins/apiMixin';
 import OrganizationState from '../mixins/organizationState';
 import TooltipMixin from '../mixins/tooltip';
@@ -13,7 +15,9 @@ import LinkWithConfirmation from '../components/linkWithConfirmation';
 
 import {t} from '../locale';
 
-const ReleaseArtifacts = React.createClass({
+const ReleaseArtifacts = createReactClass({
+  displayName: 'ReleaseArtifacts',
+
   contextTypes: {
     release: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 5f64bca3e2..37fb12ad8d 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import DocumentTitle from 'react-document-title';
 
 import ApiMixin from '../mixins/apiMixin';
@@ -13,7 +14,9 @@ import TimeSince from '../components/timeSince';
 import Version from '../components/version';
 import {t} from '../locale';
 
-const ReleaseDetails = React.createClass({
+const ReleaseDetails = createReactClass({
+  displayName: 'ReleaseDetails',
+
   propTypes: {
     setProjectNavSection: PropTypes.func,
   },
diff --git a/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
index 508c7de530..dd62893219 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import LoadingIndicator from '../../components/loadingIndicator';
 import LoadingError from '../../components/loadingError';
 import Avatar from '../../components/avatar';
@@ -14,14 +16,14 @@ import IconBitbucket from '../../icons/icon-bitbucket';
 
 import {t} from '../../locale';
 
-const CommitLink = React.createClass({
-  propTypes: {
+class CommitLink extends React.Component {
+  static propTypes = {
     commitId: PropTypes.string,
     repository: PropTypes.object,
     inline: PropTypes.bool,
-  },
+  };
 
-  getCommitUrl() {
+  getCommitUrl = () => {
     // TODO(jess): move this to plugins
     if (this.props.repository.provider.id === 'github') {
       return this.props.repository.url + '/commit/' + this.props.commitId;
@@ -30,7 +32,7 @@ const CommitLink = React.createClass({
       return this.props.repository.url + '/commits/' + this.props.commitId;
     }
     return undefined;
-  },
+  };
 
   render() {
     let commitUrl = this.getCommitUrl();
@@ -55,19 +57,19 @@ const CommitLink = React.createClass({
     ) : (
       <span>{shortId}</span>
     );
-  },
-});
+  }
+}
 
-const ReleaseCommit = React.createClass({
-  propTypes: {
+class ReleaseCommit extends React.Component {
+  static propTypes = {
     commitId: PropTypes.string,
     commitMessage: PropTypes.string,
     commitDateCreated: PropTypes.string,
     author: PropTypes.object,
     repository: PropTypes.object,
-  },
+  };
 
-  renderMessage(message) {
+  renderMessage = message => {
     if (!message) {
       return t('No message provided');
     }
@@ -75,7 +77,7 @@ const ReleaseCommit = React.createClass({
     let firstLine = message.split(/\n/)[0];
 
     return firstLine;
-  },
+  };
 
   render() {
     let {commitMessage} = this.props;
@@ -99,10 +101,11 @@ const ReleaseCommit = React.createClass({
         </div>
       </li>
     );
-  },
-});
+  }
+}
 
-const ReleaseCommits = React.createClass({
+const ReleaseCommits = createReactClass({
+  displayName: 'ReleaseCommits',
   mixins: [ApiMixin],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
index f4eaf7d6f0..a5ac78a171 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import LoadingIndicator from '../../components/loadingIndicator';
 import LoadingError from '../../components/loadingError';
 import IconOpen from '../../icons/icon-open';
@@ -15,7 +17,9 @@ import ApiMixin from '../../mixins/apiMixin';
 
 import {t} from '../../locale';
 
-const ReleaseOverview = React.createClass({
+const ReleaseOverview = createReactClass({
+  displayName: 'ReleaseOverview',
+
   contextTypes: {
     release: PropTypes.object,
   },
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
index 53fca266e0..131583bdeb 100644
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import update from 'react-addons-update';
 import {browserHistory} from 'react-router';
 
@@ -47,7 +48,8 @@ function getProjectInfoForReview(org) {
   };
 }
 
-const SetCallsignsAction = React.createClass({
+const SetCallsignsAction = createReactClass({
+  displayName: 'SetCallsignsAction',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 17e6fb1568..6341870b2c 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import ReactDOM from 'react-dom';
 import $ from 'jquery';
 import ApiMixin from '../../mixins/apiMixin';
@@ -9,7 +10,9 @@ import {t, tct} from '../../locale';
 
 import RuleNodeList from './ruleNodeList';
 
-const RuleEditor = React.createClass({
+const RuleEditor = createReactClass({
+  displayName: 'RuleEditor',
+
   propTypes: {
     actions: PropTypes.array.isRequired,
     conditions: PropTypes.array.isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
index 1e3f293e65..9db3adf310 100644
--- a/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/avatar.jsx
@@ -1,6 +1,7 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
+import createReactClass from 'create-react-class';
 
 import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
@@ -13,7 +14,9 @@ import LoadingError from '../../../components/loadingError';
 import LoadingIndicator from '../../../components/loadingIndicator';
 import {t} from '../../../locale';
 
-const AvatarSettings = React.createClass({
+const AvatarSettings = createReactClass({
+  displayName: 'AvatarSettings',
+
   propTypes: {
     userId: PropTypes.number,
   },
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
index 4f9e281256..7201e30af4 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsActivity.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import styled from 'react-emotion';
 
@@ -33,7 +34,8 @@ const Undo = styled.div`
   }
 `;
 
-const SettingsActivity = React.createClass({
+const SettingsActivity = createReactClass({
+  displayName: 'SettingsActivity',
   mixins: [Reflux.connect(SettingsIndicatorStore, 'activity')],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
index 845c264619..04721e52ea 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationGeneralSettingsView.jsx
@@ -1,6 +1,7 @@
 import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {
@@ -17,7 +18,9 @@ import SettingsPageHeader from '../../components/settingsPageHeader';
 import getSettingsComponent from '../../../../utils/getSettingsComponent';
 import recreateRoute from '../../../../utils/recreateRoute';
 
-const OrganizationGeneralSettingsView = React.createClass({
+const OrganizationGeneralSettingsView = createReactClass({
+  displayName: 'OrganizationGeneralSettingsView',
+
   propTypes: {
     routes: PropTypes.arrayOf(PropTypes.object),
   },
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
index 5230ec0816..29c9804793 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -2,6 +2,8 @@ import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {
   addErrorMessage,
   addSuccessMessage,
@@ -13,7 +15,9 @@ import organizationSettingsFields from '../../../../data/forms/organizationGener
 
 const TOAST_DURATION = 10000;
 
-const NewOrganizationSettingsForm = React.createClass({
+const NewOrganizationSettingsForm = createReactClass({
+  displayName: 'NewOrganizationSettingsForm',
+
   propTypes: {
     location: PropTypes.object,
     orgId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
index 89d6acfb55..dddac73eca 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {extractMultilineFields} from '../../../../utils';
 import {t} from '../../../../locale';
 import ApiMixin from '../../../../mixins/apiMixin';
@@ -11,7 +13,9 @@ import Select2Field from '../../../../components/forms/select2Field';
 import TextField from '../../../../components/forms/textField';
 import TextareaField from '../../../../components/forms/textareaField';
 
-const OldOrganizationSettingsForm = React.createClass({
+const OldOrganizationSettingsForm = createReactClass({
+  displayName: 'OldOrganizationSettingsForm',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     access: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
index e1b12423f0..7bb2ed67a1 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/organizationSettingsNavigation.jsx
@@ -1,22 +1,17 @@
 import Reflux from 'reflux';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import HookStore from '../../../stores/hookStore';
 import OrganizationState from '../../../mixins/organizationState';
 import SettingsNavigation from '../components/settingsNavigation';
 import navigationConfiguration from './navigationConfiguration';
 
-const OrganizationSettingsNavigation = React.createClass({
+const OrganizationSettingsNavigation = createReactClass({
+  displayName: 'OrganizationSettingsNavigation',
   mixins: [OrganizationState, Reflux.listenTo(HookStore, 'handleHooks')],
 
-  handleHooks(name, hooks) {
-    let org = this.getOrganization();
-    if (name !== 'settings:organization-navigation-config') return;
-    this.setState(state => ({
-      hookConfigs: [...state.hookConfigs, ...hooks.map(cb => cb(org))],
-    }));
-  },
-
   getInitialState() {
     // Allow injection via getsentry et all
     let org = this.getOrganization();
@@ -29,6 +24,14 @@ const OrganizationSettingsNavigation = React.createClass({
     };
   },
 
+  handleHooks(name, hooks) {
+    let org = this.getOrganization();
+    if (name !== 'settings:organization-navigation-config') return;
+    this.setState(state => ({
+      hookConfigs: [...state.hookConfigs, ...hooks.map(cb => cb(org))],
+    }));
+  },
+
   render() {
     let access = this.getAccess();
     let features = this.getFeatures();
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
index bfacdcf4f7..4f1fd055c9 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/projects/components/projectListItem.jsx
@@ -2,6 +2,8 @@ import styled from 'react-emotion';
 import LazyLoad from 'react-lazy-load';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {update} from '../../../../../actionCreators/projects';
 import ApiMixin from '../../../../../mixins/apiMixin';
 import TooltipMixin from '../../../../../mixins/tooltip';
@@ -16,7 +18,9 @@ const StyledChartCell = styled.td`
   width: 200px;
 `;
 
-const ProjectListItem = React.createClass({
+const ProjectListItem = createReactClass({
+  displayName: 'ProjectListItem',
+
   propTypes: {
     project: SentryTypes.Project,
     organization: SentryTypes.Organization,
diff --git a/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx b/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
index 59fe96a1aa..d10ac8fac8 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/projects/organizationProjectsView.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {loadStats} from '../../../../actionCreators/projects';
@@ -48,7 +49,8 @@ class OrganizationProjectsView extends OrganizationSettingsView {
 }
 
 // reflux :(
-const OrganizationProjectsViewContainer = React.createClass({
+const OrganizationProjectsViewContainer = createReactClass({
+  displayName: 'OrganizationProjectsViewContainer',
   mixins: [ApiMixin, Reflux.listenTo(ProjectsStore, 'onProjectUpdate')],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
index acdbc09d58..3c5a27f749 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/rateLimit/rateLimitView.jsx
@@ -2,6 +2,7 @@ import {Box, Flex} from 'grid-emotion';
 import {withTheme} from 'emotion-theming';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import ApiMixin from '../../../../mixins/apiMixin';
@@ -13,13 +14,13 @@ import PanelHeader from '../../components/panelHeader';
 import SettingsPageHeader from '../../components/settingsPageHeader';
 import {t} from '../../../../locale';
 
-const AccountLimit = React.createClass({
-  propTypes: {
+class AccountLimit extends React.Component {
+  static propTypes = {
     value: PropTypes.number,
     onChange: PropTypes.func.isRequired,
-  },
+  };
 
-  getRateLimitValues() {
+  getRateLimitValues = () => {
     let steps = [];
     let i = 0;
     while (i <= 1000000) {
@@ -33,7 +34,7 @@ const AccountLimit = React.createClass({
       }
     }
     return steps;
-  },
+  };
 
   render() {
     return (
@@ -52,14 +53,16 @@ const AccountLimit = React.createClass({
         }}
       />
     );
-  },
-});
+  }
+}
 
 const OldFooter = withTheme(styled.div`
   bordertop: 1px solid ${p => p.theme.borderLight};
 `);
 
-const RateLimitView = React.createClass({
+const RateLimitView = createReactClass({
+  displayName: 'RateLimitView',
+
   propTypes: {
     organization: PropTypes.object.isRequired,
   },
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
index d3cbca580d..1095f2ec56 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectSettingsNavigation.jsx
@@ -1,11 +1,14 @@
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import HookStore from '../../../stores/hookStore';
 import ProjectState from '../../../mixins/projectState';
 import SettingsNavigation from '../components/settingsNavigation';
 import getConfiguration from './navigationConfiguration';
 
-const ProjectSettingsNavigation = React.createClass({
+const ProjectSettingsNavigation = createReactClass({
+  displayName: 'ProjectSettingsNavigation',
   mixins: [ProjectState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx
index 5e856d6ddf..174676d691 100644
--- a/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/allTeamsRow.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 import {Box} from 'grid-emotion';
 
@@ -11,7 +12,9 @@ import {t} from '../../../locale';
 
 // TODO(dcramer): this isnt great UX
 
-const AllTeamsRow = React.createClass({
+const AllTeamsRow = createReactClass({
+  displayName: 'AllTeamsRow',
+
   propTypes: {
     urlPrefix: PropTypes.string.isRequired,
     access: PropTypes.object.isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
index e75fd4ea72..3e1f455621 100644
--- a/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/expandedTeamList.jsx
@@ -2,6 +2,7 @@ import {Link} from 'react-router';
 import LazyLoad from 'react-lazy-load';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
 import {sortArray} from '../../../utils';
@@ -31,7 +32,9 @@ const ProjectTitle = styled.h5`
   padding: 2px 0;
 `;
 
-const ExpandedTeamList = React.createClass({
+const ExpandedTeamList = createReactClass({
+  displayName: 'ExpandedTeamList',
+
   propTypes: {
     access: PropTypes.object.isRequired,
     organization: SentryTypes.Organization.isRequired,
diff --git a/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
index ca72749051..7b5dc47198 100644
--- a/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/organizationStatOverview.jsx
@@ -1,6 +1,7 @@
 import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import classNames from 'classnames';
 
 import {defined} from '../../../utils';
@@ -8,7 +9,9 @@ import {t} from '../../../locale';
 import ApiMixin from '../../../mixins/apiMixin';
 import OrganizationState from '../../../mixins/organizationState';
 
-const OrganizationStatOverview = React.createClass({
+const OrganizationStatOverview = createReactClass({
+  displayName: 'OrganizationStatOverview',
+
   propTypes: {
     orgId: PropTypes.string,
   },
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx b/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx
index 592b84842a..62316c1bec 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamMembers.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
 
 import ApiMixin from '../../../mixins/apiMixin';
@@ -9,7 +10,8 @@ import LoadingIndicator from '../../../components/loadingIndicator';
 import OrganizationState from '../../../mixins/organizationState';
 import {t} from '../../../locale';
 
-const TeamMembers = React.createClass({
+const TeamMembers = createReactClass({
+  displayName: 'TeamMembers',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx b/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
index 52fbe54453..b05925a31b 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamMembers.old.jsx
@@ -1,6 +1,8 @@
 import {Link} from 'react-router';
 import React from 'react';
 
+import createReactClass from 'create-react-class';
+
 import {t} from '../../../locale';
 import ApiMixin from '../../../mixins/apiMixin';
 import Avatar from '../../../components/avatar';
@@ -8,7 +10,8 @@ import LoadingError from '../../../components/loadingError';
 import LoadingIndicator from '../../../components/loadingIndicator';
 import OrganizationState from '../../../mixins/organizationState';
 
-const TeamMembers = React.createClass({
+const TeamMembers = createReactClass({
+  displayName: 'TeamMembers',
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index 90547aefa5..831042803f 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -1,5 +1,6 @@
 import DocumentTitle from 'react-document-title';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import jQuery from 'jquery';
 
 import {t} from '../../locale';
@@ -12,7 +13,9 @@ import NotFound from '../../components/errors/notFound';
 import SentryTypes from '../../proptypes';
 import SharedGroupHeader from './sharedGroupHeader';
 
-const SharedGroupDetails = React.createClass({
+const SharedGroupDetails = createReactClass({
+  displayName: 'SharedGroupDetails',
+
   childContextTypes: {
     group: SentryTypes.Group,
   },
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 6bee6d1ada..ec1e1790fd 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 import {Link, browserHistory} from 'react-router';
 import Cookies from 'js-cookie';
@@ -28,7 +29,9 @@ import {t, tn, tct} from '../locale';
 
 const MAX_TAGS = 500;
 
-const Stream = React.createClass({
+const Stream = createReactClass({
+  displayName: 'Stream',
+
   propTypes: {
     defaultSort: PropTypes.string,
     defaultStatsPeriod: PropTypes.string,
@@ -625,6 +628,7 @@ const Stream = React.createClass({
       </div>
     );
   },
+
   renderGroupNodes(ids, statsPeriod) {
     let {orgId, projectId} = this.props.params;
     let groupNodes = ids.map(id => {
@@ -644,6 +648,7 @@ const Stream = React.createClass({
       </ul>
     );
   },
+
   renderAwaitingEvents() {
     let org = this.getOrganization();
     let project = this.getProject();
@@ -696,6 +701,7 @@ const Stream = React.createClass({
       </div>
     );
   },
+
   renderEmpty() {
     return (
       <div className="box empty-stream">
@@ -704,6 +710,7 @@ const Stream = React.createClass({
       </div>
     );
   },
+
   renderLoading() {
     return (
       <div className="box">
@@ -711,6 +718,7 @@ const Stream = React.createClass({
       </div>
     );
   },
+
   renderStreamBody() {
     let body;
     let project = this.getProject();
@@ -727,6 +735,7 @@ const Stream = React.createClass({
     }
     return body;
   },
+
   render() {
     // global loading
     if (this.state.loading) {
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 99af3064d0..d9ab419d4f 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 import Reflux from 'reflux';
 import {capitalize} from 'lodash';
@@ -98,7 +99,9 @@ ExtraDescription.propTypes = {
   query: PropTypes.string,
 };
 
-const StreamActions = React.createClass({
+const StreamActions = createReactClass({
+  displayName: 'StreamActions',
+
   propTypes: {
     allResultsVisible: PropTypes.bool,
     orgId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index 55fa758785..d25d231613 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Modal from 'react-bootstrap/lib/Modal';
 import {Link} from 'react-router';
 
@@ -11,7 +12,9 @@ import QueryCount from '../../components/queryCount';
 import MenuItem from '../../components/menuItem';
 import {BooleanField, FormState, TextField} from '../../components/forms';
 
-const SaveSearchButton = React.createClass({
+const SaveSearchButton = createReactClass({
+  displayName: 'SaveSearchButton',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
@@ -185,7 +188,9 @@ const SaveSearchButton = React.createClass({
   },
 });
 
-const SavedSearchSelector = React.createClass({
+const SavedSearchSelector = createReactClass({
+  displayName: 'SavedSearchSelector',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 8a595b6c93..f70cedadef 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import ReactDOM from 'react-dom';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 import Reflux from 'reflux';
@@ -14,7 +15,9 @@ import {t} from '../../locale';
 
 import SearchDropdown from './searchDropdown';
 
-const SearchBar = React.createClass({
+const SearchBar = createReactClass({
+  displayName: 'SearchBar',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 36e155a32e..2cd9bfce40 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import _ from 'lodash';
 import StreamTagFilter from './tagFilter';
 import LoadingIndicator from '../../components/loadingIndicator';
@@ -8,7 +9,9 @@ import {t} from '../../locale';
 
 let TEXT_FILTER_DEBOUNCE_IN_MS = 300;
 
-const StreamSidebar = React.createClass({
+const StreamSidebar = createReactClass({
+  displayName: 'StreamSidebar',
+
   propTypes: {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index d5c863acd3..b9a1ab18f6 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -1,6 +1,7 @@
 import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
 
 import {fetchTeamDetails} from '../actionCreators/teams';
@@ -15,7 +16,9 @@ import OrganizationState from '../mixins/organizationState';
 import TeamStore from '../stores/teamStore';
 import recreateRoute from '../utils/recreateRoute';
 
-const TeamDetails = React.createClass({
+const TeamDetails = createReactClass({
+  displayName: 'TeamDetails',
+
   propTypes: {
     routes: PropTypes.array,
   },
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index b803fee008..b8d0ad8ea5 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -77,7 +77,7 @@
         <div id="blk_sidebar"></div>
         <script>
         $(function(){
-          var SidebarWrapper = React.createClass({
+          var SidebarWrapper = createReactClass({
             propTypes: {
               organization: React.PropTypes.any.isRequired
             },
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index ef10d6fb30..5b38523b19 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -40,7 +40,7 @@ describe('RichHttpContent', function() {
         data: {foo: ['bar'], bar: ['baz']},
       });
 
-      // NOTE: ContextData is stubbed in tests; instead returns <div className="ContextData"/>
+      // NOTE: displayName is set manually in this class
       expect(out.type.displayName).toEqual('KeyValueList');
       expect(out.props.data).toEqual([['bar', 'baz'], ['foo', 'bar']]);
     });
@@ -51,7 +51,7 @@ describe('RichHttpContent', function() {
         data: {foo: 'bar'},
       });
 
-      // NOTE: ContextData is stubbed in tests; instead returns <div className="ContextData"/>
+      // NOTE: displayName is set manually in this class
       expect(out.type.displayName).toEqual('ContextData');
       expect(out.props.data).toEqual({
         foo: 'bar',
diff --git a/tests/js/spec/views/onboarding/createProject.spec.jsx b/tests/js/spec/views/onboarding/createProject.spec.jsx
index 3c5fb691d7..2fcfc1dc8a 100644
--- a/tests/js/spec/views/onboarding/createProject.spec.jsx
+++ b/tests/js/spec/views/onboarding/createProject.spec.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {shallow, mount} from 'enzyme';
 
@@ -40,8 +41,8 @@ describe('CreateProject', function() {
           location: {query: {}},
         },
         childContextTypes: {
-          organization: React.PropTypes.object,
-          location: React.PropTypes.object,
+          organization: PropTypes.object,
+          location: PropTypes.object,
         },
       });
       expect(wrapper).toMatchSnapshot();
@@ -63,9 +64,9 @@ describe('CreateProject', function() {
           location: {query: {}},
         },
         childContextTypes: {
-          router: React.PropTypes.object,
-          organization: React.PropTypes.object,
-          location: React.PropTypes.object,
+          router: PropTypes.object,
+          organization: PropTypes.object,
+          location: PropTypes.object,
         },
       });
 
@@ -103,9 +104,9 @@ describe('CreateProject', function() {
           location: {query: {platform: 'ruby'}},
         },
         childContextTypes: {
-          router: React.PropTypes.object,
-          organization: React.PropTypes.object,
-          location: React.PropTypes.object,
+          router: PropTypes.object,
+          organization: PropTypes.object,
+          location: PropTypes.object,
         },
       });
 
@@ -130,9 +131,9 @@ describe('CreateProject', function() {
           location: {query: {platform: 'XrubyROOLs'}},
         },
         childContextTypes: {
-          router: React.PropTypes.object,
-          organization: React.PropTypes.object,
-          location: React.PropTypes.object,
+          router: PropTypes.object,
+          organization: PropTypes.object,
+          location: PropTypes.object,
         },
       });
 
diff --git a/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx b/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
index b5ec54832b..876c2771cf 100644
--- a/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
+++ b/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {shallow, mount} from 'enzyme';
 
@@ -83,7 +84,7 @@ describe('PlatformPicker', function() {
           router: TestStubs.router(),
         },
         childContextTypes: {
-          router: React.PropTypes.object,
+          router: PropTypes.object,
         },
       });
 
diff --git a/tests/js/spec/views/organizationApiKeyDetailsView.spec.jsx b/tests/js/spec/views/organizationApiKeyDetailsView.spec.jsx
index f2050d57b7..676a53043f 100644
--- a/tests/js/spec/views/organizationApiKeyDetailsView.spec.jsx
+++ b/tests/js/spec/views/organizationApiKeyDetailsView.spec.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {mount} from 'enzyme';
 
@@ -7,9 +8,9 @@ import OrganizationApiKeyDetailsView from 'app/views/settings/organization/apiKe
 jest.mock('jquery');
 
 const childContextTypes = {
-  organization: React.PropTypes.object,
-  router: React.PropTypes.object,
-  location: React.PropTypes.object,
+  organization: PropTypes.object,
+  router: PropTypes.object,
+  location: PropTypes.object,
 };
 
 describe('OrganizationApiKeyDetailsView', function() {
diff --git a/tests/js/spec/views/organizationApiKeysList.spec.jsx b/tests/js/spec/views/organizationApiKeysList.spec.jsx
index 4b01383ad6..f13f591e66 100644
--- a/tests/js/spec/views/organizationApiKeysList.spec.jsx
+++ b/tests/js/spec/views/organizationApiKeysList.spec.jsx
@@ -1,12 +1,13 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {mount} from 'enzyme';
 
 import OrganizationApiKeysList from 'app/views/settings/organization/apiKeys/organizationApiKeysList';
 
 const childContextTypes = {
-  organization: React.PropTypes.object,
-  router: React.PropTypes.object,
-  location: React.PropTypes.object,
+  organization: PropTypes.object,
+  router: PropTypes.object,
+  location: PropTypes.object,
 };
 
 const routes = [
diff --git a/tests/js/spec/views/organizationApiKeysView.spec.jsx b/tests/js/spec/views/organizationApiKeysView.spec.jsx
index f50f2cff7d..107415a6c6 100644
--- a/tests/js/spec/views/organizationApiKeysView.spec.jsx
+++ b/tests/js/spec/views/organizationApiKeysView.spec.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {mount} from 'enzyme';
 
@@ -5,9 +6,9 @@ import {Client} from 'app/api';
 import OrganizationApiKeysView from 'app/views/settings/organization/apiKeys/organizationApiKeysView';
 
 const childContextTypes = {
-  organization: React.PropTypes.object,
-  router: React.PropTypes.object,
-  location: React.PropTypes.object,
+  organization: PropTypes.object,
+  router: PropTypes.object,
+  location: PropTypes.object,
 };
 
 const routes = [
diff --git a/tests/js/spec/views/organizationIntegrations.spec.jsx b/tests/js/spec/views/organizationIntegrations.spec.jsx
index 22fc1b3f1c..f50e36d4ef 100644
--- a/tests/js/spec/views/organizationIntegrations.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations.spec.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {mount, shallow} from 'enzyme';
 
@@ -5,8 +6,8 @@ import {Client} from 'app/api';
 import OrganizationIntegrations from 'app/views/organizationIntegrations';
 
 const childContextTypes = {
-  organization: React.PropTypes.object,
-  location: React.PropTypes.object,
+  organization: PropTypes.object,
+  location: PropTypes.object,
 };
 
 describe('OrganizationIntegrations', function() {
diff --git a/tests/js/spec/views/organizationRepositoriesView.spec.jsx b/tests/js/spec/views/organizationRepositoriesView.spec.jsx
index 346ceff3e1..b5e50e3cfa 100644
--- a/tests/js/spec/views/organizationRepositoriesView.spec.jsx
+++ b/tests/js/spec/views/organizationRepositoriesView.spec.jsx
@@ -1,3 +1,4 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {shallow} from 'enzyme';
 
@@ -5,8 +6,8 @@ import {Client} from 'app/api';
 import OrganizationRepositories from 'app/views/organizationRepositoriesView';
 
 const childContextTypes = {
-  organization: React.PropTypes.object,
-  location: React.PropTypes.object,
+  organization: PropTypes.object,
+  location: PropTypes.object,
 };
 
 describe('OrganizationRepositoriesView', function() {
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index 934aee19cd..e783a5b8a3 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -1,12 +1,13 @@
+import PropTypes from 'prop-types';
 import React from 'react';
 import {shallow} from 'enzyme';
 
 import TeamSettings from 'app/views/settings/team/teamSettings.old';
 
 const childContextTypes = {
-  organization: React.PropTypes.object,
-  router: React.PropTypes.object,
-  location: React.PropTypes.object,
+  organization: PropTypes.object,
+  router: PropTypes.object,
+  location: PropTypes.object,
 };
 
 describe('TeamSettings', function() {
diff --git a/webpack.config.js b/webpack.config.js
index c116ae54cc..478b0d2253 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -53,6 +53,7 @@ var appEntry = {
     'bootstrap/js/tab',
     'bootstrap/js/tooltip',
     'bootstrap/js/alert',
+    'create-react-class',
     'crypto-js/md5',
     'jed',
     'jquery',
diff --git a/yarn.lock b/yarn.lock
index 3aa0658975..bbdb758e6e 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2586,6 +2586,14 @@ create-react-class@^15.6.0, create-react-class@^15.6.2:
     loose-envify "^1.3.1"
     object-assign "^4.1.1"
 
+create-react-class@^15.6.2:
+  version "15.6.2"
+  resolved "https://registry.yarnpkg.com/create-react-class/-/create-react-class-15.6.2.tgz#cf1ed15f12aad7f14ef5f2dfe05e6c42f91ef02a"
+  dependencies:
+    fbjs "^0.8.9"
+    loose-envify "^1.3.1"
+    object-assign "^4.1.1"
+
 cross-spawn@^5.0.1, cross-spawn@^5.1.0:
   version "5.1.0"
   resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-5.1.0.tgz#e8bd0efee58fcff6f8f94510a0a554bbfa235449"
