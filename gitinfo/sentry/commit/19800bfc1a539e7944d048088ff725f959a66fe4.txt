commit 19800bfc1a539e7944d048088ff725f959a66fe4
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Mon Aug 27 15:20:54 2018 -0600

    perf: Get key info and top values info in 1 snuba query (#9522)
    
    * helper function to get top values and key info in same query
    
    * use new helper for get_tag_values and get_group_tag_values
    
    * use sets to pass tests

diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index 3a69224d31..8caad09405 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -56,8 +56,12 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint, EnvironmentMixin):
                 group.project_id, group.id, environment_id, lookup_key)
         else:
             total_values = group_tag_key.count
-        top_values = tagstore.get_top_group_tag_values(
-            group.project_id, group.id, environment_id, lookup_key, limit=9)
+
+        if group_tag_key.top_values is None:
+            top_values = tagstore.get_top_group_tag_values(
+                group.project_id, group.id, environment_id, lookup_key, limit=9)
+        else:
+            top_values = group_tag_key.top_values
 
         data = {
             'key': key,
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 8bef7ebdda..fe7d0aa7c2 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -297,7 +297,8 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def get_tag_value_paginator(self, project_id, environment_id, key, query=None, order_by='-last_seen'):
+    def get_tag_value_paginator(self, project_id, environment_id, key,
+                                query=None, order_by='-last_seen'):
         """
         >>> get_tag_value_paginator(1, 2, 'environment', query='prod')
         """
@@ -309,7 +310,8 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
-    def get_group_tag_value_paginator(self, project_id, group_id, environment_id, key, order_by='-id'):
+    def get_group_tag_value_paginator(self, project_id, group_id,
+                                      environment_id, key, order_by='-id'):
         """
         >>> get_group_tag_value_paginator(1, 2, 3, 'environment')
         """
@@ -400,8 +402,9 @@ class TagStorage(Service):
         tag_keys = self.get_group_tag_keys(project_id, group_id, environment_id)
 
         return [dict(
-            totalValues=self.get_group_tag_value_count(
-                project_id, group_id, environment_id, tk.key),
+            totalValues=(self.get_group_tag_value_count(
+                project_id, group_id, environment_id, tk.key)
+                if tk.count is None else tk.count),
             topValues=serialize(self.get_top_group_tag_values(
                 project_id, group_id, environment_id, tk.key, limit=10)),
             **serialize([tk])[0]
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index da4b783c2a..e33ae764e7 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -66,7 +66,7 @@ class SnubaTagStorage(TagStorage):
             filters['issue'] = [group_id]
         conditions = [[tag, '!=', '']]
         aggregations = [
-            ['uniq', tag, 'unique_values'],
+            ['uniq', tag, 'values_seen'],
             ['count()', '', 'count']
         ]
 
@@ -77,7 +77,7 @@ class SnubaTagStorage(TagStorage):
         else:
             data = {
                 'key': key,
-                'values_seen': result['unique_values'],
+                'values_seen': result['values_seen'],
                 'count': result['count'],
             }
             if group_id is None:
@@ -85,6 +85,55 @@ class SnubaTagStorage(TagStorage):
             else:
                 return GroupTagKey(group_id=group_id, **data)
 
+    def __get_tag_key_and_top_values(self, project_id, group_id, environment_id,
+                                     key, limit=3, raise_on_empty=True):
+        start, end = self.get_time_range()
+        tag = 'tags[{}]'.format(key)
+        filters = {
+            'project_id': [project_id],
+            'environment': [environment_id],
+        }
+        if group_id is not None:
+            filters['issue'] = [group_id]
+        conditions = [[tag, '!=', '']]
+        aggregations = [
+            ['uniq', tag, 'values_seen'],
+            ['count()', '', 'count'],
+            ['min', SEEN_COLUMN, 'first_seen'],
+            ['max', SEEN_COLUMN, 'last_seen'],
+        ]
+
+        result, totals = snuba.query(
+            start, end, [tag], conditions, filters, aggregations,
+            limit=limit, totals=True, referrer='tagstore.__get_tag_key_and_top_values'
+        )
+        if raise_on_empty and (result is None or totals['count'] == 0):
+            raise TagKeyNotFound if group_id is None else GroupTagKeyNotFound
+        else:
+            if group_id is None:
+                key_ctor = TagKey
+                value_ctor = TagValue
+            else:
+                key_ctor = functools.partial(GroupTagKey, group_id=group_id)
+                value_ctor = functools.partial(GroupTagValue, group_id=group_id)
+
+            top_values = [
+                value_ctor(
+                    key=key,
+                    value=value,
+                    times_seen=data['count'],
+                    first_seen=parse_datetime(data['first_seen']),
+                    last_seen=parse_datetime(data['last_seen']),
+                ) for value, data in six.iteritems(result)
+            ]
+
+            return key_ctor(
+                key=key,
+                values_seen=totals['values_seen'],
+                count=totals['count'],
+                top_values=top_values
+            )
+
     def __get_tag_keys(self, project_id, group_id, environment_id, limit=1000):
         start, end = self.get_time_range()
         filters = {
@@ -93,8 +142,13 @@ class SnubaTagStorage(TagStorage):
         }
         if group_id is not None:
             filters['issue'] = [group_id]
-        aggregations = [['uniq', 'tags_value', 'values_seen']]
+        aggregations = [
+            ['uniq', 'tags_value', 'values_seen'],
+            ['count()', '', 'count']
+        ]
 
+        # TODO should this be sorted by count() descending, rather than the
+        # number of unique values
         result = snuba.query(start, end, ['tags_key'], [], filters,
                              aggregations, limit=limit, orderby='-values_seen',
                              referrer='tagstore.__get_tag_keys')
@@ -104,8 +158,13 @@ class SnubaTagStorage(TagStorage):
         else:
             ctor = functools.partial(GroupTagKey, group_id=group_id)
 
-        return set([ctor(key=key, values_seen=values_seen)
-                    for key, values_seen in six.iteritems(result) if values_seen])
+        return set([
+            ctor(
+                key=key,
+                values_seen=data['values_seen'],
+                count=data['count'],
+            ) for key, data in six.iteritems(result) if data['values_seen']
+        ])
 
     def __get_tag_value(self, project_id, group_id, environment_id, key, value):
         start, end = self.get_time_range()
@@ -136,36 +195,9 @@ class SnubaTagStorage(TagStorage):
             else:
                 return GroupTagValue(group_id=group_id, **fix_tag_value_data(data))
 
-    def __get_tag_values(self, project_id, group_id, environment_id, key):
-        start, end = self.get_time_range()
-        tag = 'tags[{}]'.format(key)
-        filters = {
-            'project_id': [project_id],
-            'environment': [environment_id],
-        }
-        if group_id is not None:
-            filters['issue'] = [group_id]
-        conditions = [[tag, '!=', '']]
-        aggregations = [
-            ['count()', '', 'times_seen'],
-            ['min', SEEN_COLUMN, 'first_seen'],
-            ['max', SEEN_COLUMN, 'last_seen'],
-        ]
-
-        result = snuba.query(start, end, [tag], conditions, filters, aggregations,
-                             referrer='tagstore.__get_tag_values')
-
-        if group_id is None:
-            ctor = TagValue
-        else:
-            ctor = functools.partial(GroupTagValue, group_id=group_id)
-
-        return set([ctor(key=key, value=value, **fix_tag_value_data(data))
-                    for value, data in result.items()])
-
     def get_tag_key(self, project_id, environment_id, key, status=TagKeyStatus.VISIBLE):
         assert status is TagKeyStatus.VISIBLE
-        return self.__get_tag_key(project_id, None, environment_id, key)
+        return self.__get_tag_key_and_top_values(project_id, None, environment_id, key)
 
     def get_tag_keys(self, project_id, environment_id, status=TagKeyStatus.VISIBLE):
         assert status is TagKeyStatus.VISIBLE
@@ -175,10 +207,12 @@ class SnubaTagStorage(TagStorage):
         return self.__get_tag_value(project_id, None, environment_id, key, value)
 
     def get_tag_values(self, project_id, environment_id, key):
-        return self.__get_tag_values(project_id, None, environment_id, key)
+        key = self.__get_tag_key_and_top_values(project_id, None, environment_id, key,
+                                                limit=None, raise_on_empty=False)
+        return set(key.top_values)
 
     def get_group_tag_key(self, project_id, group_id, environment_id, key):
-        return self.__get_tag_key(project_id, group_id, environment_id, key)
+        return self.__get_tag_key_and_top_values(project_id, group_id, environment_id, key)
 
     def get_group_tag_keys(self, project_id, group_id, environment_id, limit=None):
         return self.__get_tag_keys(project_id, group_id, environment_id, limit=limit)
@@ -187,7 +221,9 @@ class SnubaTagStorage(TagStorage):
         return self.__get_tag_value(project_id, group_id, environment_id, key, value)
 
     def get_group_tag_values(self, project_id, group_id, environment_id, key):
-        return self.__get_tag_values(project_id, group_id, environment_id, key)
+        key = self.__get_tag_key_and_top_values(project_id, group_id, environment_id, key,
+                                                limit=None, raise_on_empty=False)
+        return set(key.top_values)
 
     def get_group_list_tag_value(self, project_id, group_id_list, environment_id, key, value):
         start, end = self.get_time_range()
@@ -233,31 +269,8 @@ class SnubaTagStorage(TagStorage):
                            referrer='tagstore.get_group_tag_value_count')
 
     def get_top_group_tag_values(self, project_id, group_id, environment_id, key, limit=3):
-        start, end = self.get_time_range()
-        tag = 'tags[{}]'.format(key)
-        filters = {
-            'project_id': [project_id],
-            'environment': [environment_id],
-            'issue': [group_id],
-        }
-        conditions = [[tag, '!=', '']]
-        aggregations = [
-            ['count()', '', 'times_seen'],
-            ['min', SEEN_COLUMN, 'first_seen'],
-            ['max', SEEN_COLUMN, 'last_seen'],
-        ]
-
-        result = snuba.query(start, end, [tag], conditions, filters,
-                             aggregations, limit=limit, orderby='-times_seen',
-                             referrer='tagstore.get_top_group_tag_values')
-        return [
-            GroupTagValue(
-                group_id=group_id,
-                key=key,
-                value=value,
-                **fix_tag_value_data(data)
-            ) for value, data in six.iteritems(result)
-        ]
+        tag = self.__get_tag_key_and_top_values(project_id, group_id, environment_id, key, limit)
+        return tag.top_values
 
     def __get_release(self, project_id, group_id, first=True):
         start, end = self.get_time_range()
diff --git a/src/sentry/tagstore/types.py b/src/sentry/tagstore/types.py
index b919f7e2cd..a4d66887af 100644
--- a/src/sentry/tagstore/types.py
+++ b/src/sentry/tagstore/types.py
@@ -30,10 +30,12 @@ class TagType(object):
 class TagKey(TagType):
     __slots__ = ['key', 'values_seen', 'status']
 
-    def __init__(self, key, values_seen, status=TagKeyStatus.VISIBLE):
+    def __init__(self, key, values_seen, status=TagKeyStatus.VISIBLE, count=None, top_values=None):
         self.key = key
         self.values_seen = values_seen
         self.status = status
+        self.count = count
+        self.top_values = top_values
 
 
 class TagValue(TagType):
@@ -50,11 +52,12 @@ class TagValue(TagType):
 class GroupTagKey(TagType):
     __slots__ = ['group_id', 'key', 'values_seen']
 
-    def __init__(self, group_id, key, values_seen, count=None):
+    def __init__(self, group_id, key, values_seen, count=None, top_values=None):
         self.group_id = group_id
         self.key = key
         self.values_seen = values_seen
         self.count = count
+        self.top_values = top_values
 
 
 class GroupTagValue(TagType):
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index b723bf2bff..32bae07e27 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -56,7 +56,8 @@ _snuba_pool = urllib3.connectionpool.connection_from_url(
 
 def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
               aggregations=None, rollup=None, arrayjoin=None, limit=None, orderby=None,
-              having=None, referrer=None, is_grouprelease=False, selected_columns=None,):
+              having=None, referrer=None, is_grouprelease=False, selected_columns=None,
+              totals=None):
     """
     Sends a query to snuba.
 
@@ -138,6 +139,7 @@ def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
         'conditions': conditions,
         'having': having,
         'groupby': groupby,
+        'totals': totals,
         'project': project_ids,
         'aggregations': aggregations,
         'granularity': rollup,
@@ -177,7 +179,8 @@ def raw_query(start, end, groupby=None, conditions=None, filter_keys=None,
 
 def query(start, end, groupby, conditions=None, filter_keys=None,
           aggregations=None, rollup=None, arrayjoin=None, limit=None, orderby=None,
-          having=None, referrer=None, is_grouprelease=False, selected_columns=None):
+          having=None, referrer=None, is_grouprelease=False, selected_columns=None,
+          totals=None):
 
     aggregations = aggregations or [['count()', '', 'aggregate']]
     filter_keys = filter_keys or {}
@@ -188,7 +191,7 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
             start, end, groupby=groupby, conditions=conditions, filter_keys=filter_keys,
             selected_columns=selected_columns, aggregations=aggregations, rollup=rollup,
             arrayjoin=arrayjoin, limit=limit, orderby=orderby, having=having,
-            referrer=referrer, is_grouprelease=is_grouprelease
+            referrer=referrer, is_grouprelease=is_grouprelease, totals=totals
         )
     except EntireQueryOutsideRetentionError:
         # this exception could also bubble up to the caller instead
@@ -202,7 +205,10 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
     assert expected_cols == got_cols
 
     with timer('process_result'):
-        return nest_groups(body['data'], groupby, aggregate_cols)
+        if totals:
+            return nest_groups(body['data'], groupby, aggregate_cols), body['totals']
+        else:
+            return nest_groups(body['data'], groupby, aggregate_cols)
 
 
 def nest_groups(data, groups, aggregate_cols):
