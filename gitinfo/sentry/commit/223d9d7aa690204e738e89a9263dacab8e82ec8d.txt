commit 223d9d7aa690204e738e89a9263dacab8e82ec8d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 28 15:10:20 2020 -0800

    feat(workflow): Add environment selector to Metric Alert Ruleâ€¦ (#16529)
    
    This adds an environment selector to the Metric Alert Rule editor.

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
index 72e7c08c42..feac33c7a9 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
@@ -1,7 +1,10 @@
 import React from 'react';
 
-import {Organization} from 'app/types';
+import {Client} from 'app/api';
+import {Environment, Organization} from 'app/types';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {defined} from 'app/utils';
 import {t} from 'app/locale';
 import FormField from 'app/views/settings/components/forms/formField';
 import SearchBar from 'app/views/events/searchBar';
@@ -10,11 +13,6 @@ import SelectField from 'app/views/settings/components/forms/selectField';
 import {AlertRuleAggregations, TimeWindow} from './types';
 import getMetricDisplayName from './utils/getMetricDisplayName';
 
-type Props = {
-  organization: Organization;
-  disabled: boolean;
-};
-
 type TimeWindowMapType = {[key in TimeWindow]: string};
 
 const TIME_WINDOW_MAP: TimeWindowMapType = {
@@ -29,7 +27,44 @@ const TIME_WINDOW_MAP: TimeWindowMapType = {
   [TimeWindow.ONE_DAY]: t('24 hours'),
 };
 
-class RuleConditionsForm extends React.PureComponent<Props> {
+type Props = {
+  api: Client;
+  organization: Organization;
+  projectSlug: string;
+  disabled: boolean;
+};
+
+type State = {
+  environments: Environment[] | null;
+};
+
+class RuleConditionsForm extends React.PureComponent<Props, State> {
+  state: State = {
+    environments: null,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  async fetchData() {
+    const {api, organization, projectSlug} = this.props;
+
+    try {
+      const environments = await api.requestPromise(
+        `/projects/${organization.slug}/${projectSlug}/environments/`,
+        {
+          query: {
+            visibility: 'visible',
+          },
+        }
+      );
+      this.setState({environments});
+    } catch (_err) {
+      addErrorMessage(t('Unable to fetch environments'));
+    }
+  }
+
   render() {
     const {organization, disabled} = this.props;
 
@@ -54,6 +89,18 @@ class RuleConditionsForm extends React.PureComponent<Props> {
             required
             disabled={disabled}
           />
+          <SelectField
+            name="environment"
+            label={t('Environment')}
+            help={t('Select an environment')}
+            placeholder={t('All environments')}
+            choices={
+              defined(this.state.environments)
+                ? this.state.environments.map((env: Environment) => [env.id, env.name])
+                : []
+            }
+            disabled={this.state.environments === null}
+          />
           <FormField
             name="query"
             label={t('Filter')}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index b3776fa58c..63dd462725 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -326,7 +326,12 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
               timeWindow={timeWindow}
             />
 
-            <RuleConditionsForm organization={organization} disabled={!hasAccess} />
+            <RuleConditionsForm
+              api={this.api}
+              projectSlug={params.projectId}
+              organization={organization}
+              disabled={!hasAccess}
+            />
 
             <Triggers
               disabled={!hasAccess}
diff --git a/tests/js/spec/views/settings/incidentRules/create.spec.jsx b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
index 376de33729..b7f102020d 100644
--- a/tests/js/spec/views/settings/incidentRules/create.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/create.spec.jsx
@@ -15,6 +15,10 @@ describe('Incident Rules Create', function() {
       url: '/organizations/org-slug/users/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/environments/',
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
       body: TestStubs.EventsStats(),
@@ -36,7 +40,7 @@ describe('Incident Rules Create', function() {
     const {organization, project, routerContext} = initializeOrg();
     mountWithTheme(
       <IncidentRulesCreate
-        params={{orgId: organization.slug}}
+        params={{orgId: organization.slug, projectId: project.slug}}
         organization={organization}
         project={project}
       />,
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index bf5dcd2c98..eeaf88465e 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -16,6 +16,10 @@ describe('Incident Rules Details', function() {
       url: '/organizations/org-slug/tags/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/environments/',
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
       body: null,
@@ -34,7 +38,7 @@ describe('Incident Rules Details', function() {
   });
 
   it('renders and adds and edits trigger', async function() {
-    const {organization, routerContext} = initializeOrg();
+    const {organization, project, routerContext} = initializeOrg();
     const rule = TestStubs.IncidentRule();
     const req = MockApiClient.addMockResponse({
       url: `/projects/${organization.slug}/project-slug/alert-rules/${rule.id}/`,
@@ -58,7 +62,7 @@ describe('Incident Rules Details', function() {
         <IncidentRulesDetails
           params={{
             orgId: organization.slug,
-            projectId: 'project-slug',
+            projectId: project.slug,
             incidentRuleId: rule.id,
           }}
           organization={organization}
diff --git a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
index ede35820fd..fc623ee786 100644
--- a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
@@ -27,6 +27,10 @@ describe('Incident Rules Form', function() {
       url: '/organizations/org-slug/users/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/environments/',
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
       body: TestStubs.EventsStats(),
