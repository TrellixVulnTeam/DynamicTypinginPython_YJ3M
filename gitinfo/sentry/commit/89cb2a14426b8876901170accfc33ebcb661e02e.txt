commit 89cb2a14426b8876901170accfc33ebcb661e02e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Fri Feb 26 15:18:27 2016 -0800

    Rename keys and change logic to reflect that the org settings are enforcements

diff --git a/src/sentry/templates/sentry/organization-settings.html b/src/sentry/templates/sentry/organization-settings.html
index 4fc8aadf84..d01e0d828a 100644
--- a/src/sentry/templates/sentry/organization-settings.html
+++ b/src/sentry/templates/sentry/organization-settings.html
@@ -33,10 +33,10 @@
 
         {{ form.allow_shared_issues|as_crispy_field }}
         {{ form.enhanced_privacy|as_crispy_field }}
-        {{ form.scrub_data|as_crispy_field }}
-        {{ form.scrub_defaults|as_crispy_field }}
+        {{ form.require_scrub_data|as_crispy_field }}
+        {{ form.require_scrub_defaults|as_crispy_field }}
         {{ form.sensitive_fields|as_crispy_field }}
-        {{ form.scrub_ip_address|as_crispy_field }}
+        {{ form.require_scrub_ip_address|as_crispy_field }}
 
         <fieldset class="form-actions">
           <button type="submit" class="btn btn-primary btn-lg">{% trans "Save Changes" %}</button>
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 65af7d6dc5..f71ee184e3 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -341,10 +341,10 @@ class StoreView(APIView):
 
         org_options = OrganizationOption.objects.get_all_values(project.organization_id)
 
-        scrub_ip_address_key = 'sentry:scrub_ip_address'
-        scrub_ip_address = org_options.get(scrub_ip_address_key, False)
-        if not scrub_ip_address:
-            scrub_ip_address = project.get_option(scrub_ip_address_key, False)
+        if org_options.get('sentry:require_scrub_ip_address', False):
+            scrub_ip_address = True
+        else:
+            scrub_ip_address = project.get_option('sentry:scrub_ip_address', False)
 
         # insert IP address if not available
         if auth.is_public and not scrub_ip_address:
@@ -359,10 +359,11 @@ class StoreView(APIView):
         if cache.get(cache_key) is not None:
             raise APIForbidden('An event with the same ID already exists (%s)' % (event_id,))
 
-        scrub_data_key = 'sentry:scrub_data'
-        scrub_data = org_options.get(scrub_data_key, False)
-        if not scrub_data:
-            scrub_data = project.get_option(scrub_data_key, True)
+        if org_options.get('sentry:require_scrub_data', False):
+            scrub_data = True
+        else:
+            scrub_data = project.get_option('sentry:scrub_data', True)
+
         if scrub_data:
             # We filter data immediately before it ever gets into the queue
             sensitive_fields_key = 'sentry:sensitive_fields'
@@ -371,10 +372,10 @@ class StoreView(APIView):
                 project.get_option(sensitive_fields_key, [])
             )
 
-            scrub_defaults_key = 'sentry:scrub_defaults'
-            scrub_defaults = org_options.get(scrub_defaults_key, False)
-            if not scrub_defaults:
-                scrub_defaults = project.get_option(scrub_defaults_key, True)
+            if org_options.get('sentry:require_scrub_defaults', False):
+                scrub_defaults = True
+            else:
+                scrub_defaults = project.get_option('sentry:scrub_defaults', True)
 
             inst = SensitiveDataFilter(
                 fields=sensitive_fields,
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index cc01e56502..3b43409cc2 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -40,19 +40,20 @@ class OrganizationSettingsForm(forms.ModelForm):
         help_text=_('Enable sharing of limited details on issues to anonymous users.'),
         required=False,
     )
-    scrub_data = forms.BooleanField(
-        label=_('Data Scrubber'),
-        help_text=_('Enable organization-wide server-side data scrubbing.'),
+    require_scrub_data = forms.BooleanField(
+        label=_('Require Data Scrubber'),
+        help_text=_('Require server-side data scrubbing be enabled for all projects.'),
         required=False
     )
-    scrub_defaults = forms.BooleanField(
-        label=_('Use Default Scrubbers'),
-        help_text=_('Apply organization-wide default scrubbers to prevent things like passwords and credit cards from being stored.'),
+    require_scrub_defaults = forms.BooleanField(
+        label=_('Require Using Default Scrubbers'),
+        help_text=_('Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.'),
         required=False
     )
     sensitive_fields = forms.CharField(
-        label=_('Additional sensitive fields'),
-        help_text=_('Additional organization-wide field names to match against when scrubbing data. Separate multiple entries with a newline.'),
+        label=_('Global additional sensitive fields'),
+        help_text=_('Additional field names to match against when scrubbing data for all projects. '
+                    'Separate multiple entries with a newline.<br /><strong>Note: These fields will be used in addition to project specific fields.</strong>'),
         widget=forms.Textarea(attrs={
             'placeholder': mark_safe(_('e.g. email')),
             'class': 'span8',
@@ -60,9 +61,9 @@ class OrganizationSettingsForm(forms.ModelForm):
         }),
         required=False,
     )
-    scrub_ip_address = forms.BooleanField(
-        label=_('Don\'t store IP Addresses'),
-        help_text=_('Prevent IP addresses from being stored for new events organization-wide.'),
+    require_scrub_ip_address = forms.BooleanField(
+        label=_('Require not storing IP Addresses'),
+        help_text=_('Require preventing IP addresses from being stored for new events on all projects.'),
         required=False
     )
 
@@ -90,10 +91,10 @@ class OrganizationSettingsView(OrganizationView):
                 'allow_joinleave': bool(organization.flags.allow_joinleave),
                 'enhanced_privacy': bool(organization.flags.enhanced_privacy),
                 'allow_shared_issues': bool(not organization.flags.disable_shared_issues),
-                'scrub_data': bool(organization.get_option('sentry:scrub_data', False)),
-                'scrub_defaults': bool(organization.get_option('sentry:scrub_defaults', False)),
+                'require_scrub_data': bool(organization.get_option('sentry:require_scrub_data', False)),
+                'require_scrub_defaults': bool(organization.get_option('sentry:require_scrub_defaults', False)),
                 'sensitive_fields': '\n'.join(organization.get_option('sentry:sensitive_fields', None) or []),
-                'scrub_ip_address': bool(organization.get_option('sentry:scrub_ip_address', False)),
+                'require_scrub_ip_address': bool(organization.get_option('sentry:require_scrub_ip_address', False)),
             }
         )
 
@@ -107,10 +108,10 @@ class OrganizationSettingsView(OrganizationView):
             organization.save()
 
             for opt in (
-                    'scrub_data',
-                    'scrub_defaults',
+                    'require_scrub_data',
+                    'require_scrub_defaults',
                     'sensitive_fields',
-                    'scrub_ip_address'):
+                    'require_scrub_ip_address'):
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     organization.delete_option('sentry:%s' % (opt,))
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 74c0cae3c5..198322821c 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -81,7 +81,7 @@ class EditProjectForm(forms.ModelForm):
         disabled = []
         if 'initial' in kwargs:
             for opt in self.org_overrides:
-                value = bool(organization.get_option('sentry:%s' % (opt,), False))
+                value = bool(organization.get_option('sentry:require_%s' % (opt,), False))
                 if value:
                     disabled.append(opt)
                     kwargs['initial'][opt] = value
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 3899b666cd..b3939d0f08 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -141,7 +141,7 @@ class StoreViewTest(TestCase):
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
     def test_scrubs_org_ip_address_override(self, mock_insert_data_to_database):
-        self.organization.update_option('sentry:scrub_ip_address', True)
+        self.organization.update_option('sentry:require_scrub_ip_address', True)
         self.project.update_option('sentry:scrub_ip_address', False)
         body = {
             "message": "foo bar",
@@ -238,9 +238,9 @@ class StoreViewTest(TestCase):
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
     def test_scrub_data_org_override(self, mock_insert_data_to_database):
-        self.organization.update_option('sentry:scrub_data', True)
+        self.organization.update_option('sentry:require_scrub_data', True)
         self.project.update_option('sentry:scrub_data', False)
-        self.organization.update_option('sentry:scrub_defaults', True)
+        self.organization.update_option('sentry:require_scrub_defaults', True)
         self.project.update_option('sentry:scrub_defaults', False)
         body = {
             "message": "foo bar",
@@ -259,8 +259,8 @@ class StoreViewTest(TestCase):
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
     def test_scrub_data_org_override_sensitive_fields(self, mock_insert_data_to_database):
-        self.organization.update_option('sentry:scrub_data', True)
-        self.organization.update_option('sentry:scrub_defaults', True)
+        self.organization.update_option('sentry:require_scrub_data', True)
+        self.organization.update_option('sentry:require_scrub_defaults', True)
         self.organization.update_option('sentry:sensitive_fields', ['baz'])
         self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])
         body = {
