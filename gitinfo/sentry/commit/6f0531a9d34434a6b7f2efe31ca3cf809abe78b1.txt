commit 6f0531a9d34434a6b7f2efe31ca3cf809abe78b1
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 20 16:33:54 2017 -0700

    Add basic OAuth2 provider (#4164)
    
    - Allows registration of OAuth applications
    - Supports both implicit and authorization code flows
    - Refresh token and token expiration have been added
    - Supports bypass of prompt when user has an existing authorization (containing the given scopes)

diff --git a/CHANGES b/CHANGES
index 710c54ea61..6559db6965 100644
--- a/CHANGES
+++ b/CHANGES
@@ -6,6 +6,7 @@ Version 8.15 (Unreleased)
 - Implemented ``--concurrency` on `sentry cleanup`
 - Added support for the new symbol server system to support native SDKs better.
 - Added deploy email
+- Added OAuth2 support to the web API.
 
 API Changes
 ~~~~~~~~~~~
@@ -19,6 +20,13 @@ Schema Changes
 ~~~~~~~~~~~~~~
 
 - Added ``Deploy`` model
+- Added ``ApiApplication`` model
+- Added ``ApiAuthorization`` model
+- Added ``ApiGrant`` model
+- Removed ``ApiToken.key`` column
+- Added ``ApiToken.application`` column
+- Added ``ApiToken.refresh_token`` column
+- Added ``ApiToken.expires_at`` column
 
 Security
 ~~~~~~~~
diff --git a/examples/oauth2_consumer_implicit/.gitignore b/examples/oauth2_consumer_implicit/.gitignore
new file mode 100644
index 0000000000..f06235c460
--- /dev/null
+++ b/examples/oauth2_consumer_implicit/.gitignore
@@ -0,0 +1,2 @@
+node_modules
+dist
diff --git a/examples/oauth2_consumer_implicit/index.html b/examples/oauth2_consumer_implicit/index.html
new file mode 100644
index 0000000000..e26f5aac33
--- /dev/null
+++ b/examples/oauth2_consumer_implicit/index.html
@@ -0,0 +1,8 @@
+<html>
+  <head>
+    <title>oauth2 client example</title>
+  </head>
+  <body>
+    <script src="dist/bundle.js"></script>
+  </body>
+</html>
diff --git a/examples/oauth2_consumer_implicit/index.js b/examples/oauth2_consumer_implicit/index.js
new file mode 100644
index 0000000000..f476bcfadf
--- /dev/null
+++ b/examples/oauth2_consumer_implicit/index.js
@@ -0,0 +1,10 @@
+import authorize from 'oauth2-implicit'
+
+const credentials = authorize({
+  auth_uri: 'http://dev.getsentry.net:8000/oauth/authorize',
+  client_id: '49ebdc3013aa4ac08c7e811201b3a0ac36bf8fe3bcb648cf976ed57a320bbd68',
+  scope: ['project:releases', 'event:read', 'org:read', 'org:write'],
+  state: {
+    location: window.location
+  },
+});
diff --git a/examples/oauth2_consumer_implicit/package.json b/examples/oauth2_consumer_implicit/package.json
new file mode 100644
index 0000000000..3f0c20a0d4
--- /dev/null
+++ b/examples/oauth2_consumer_implicit/package.json
@@ -0,0 +1,22 @@
+{
+  "name": "oauth2_consumer_implicit",
+  "version": "1.0.0",
+  "description": "",
+  "main": "index.js",
+  "scripts": {
+    "test": "echo \"Error: no test specified\" && exit 1",
+    "build": "webpack",
+    "prestart": "webpack",
+    "start": "http-server"
+  },
+  "author": "David Cramer <dcramer@gmail.com> (https://github.com/dcramer)",
+  "license": "ISC",
+  "dependencies": {
+    "babel-core": "^6.23.1",
+    "babel-loader": "^6.3.2",
+    "babel-preset-env": "^1.2.0",
+    "http-server": "^0.9.0",
+    "oauth2-implicit": "^0.7.0",
+    "webpack": "^2.2.1"
+  }
+}
diff --git a/examples/oauth2_consumer_implicit/webpack.config.js b/examples/oauth2_consumer_implicit/webpack.config.js
new file mode 100644
index 0000000000..85069d8616
--- /dev/null
+++ b/examples/oauth2_consumer_implicit/webpack.config.js
@@ -0,0 +1,21 @@
+var path = require('path');
+
+module.exports = {
+  entry: './index.js',
+  module: {
+    loaders: [
+      {
+        test: /\.js$/,
+        exclude: /(node_modules|bower_components)/,
+        loader: 'babel-loader',
+        query: {
+          presets: ['env']
+        }
+      }
+    ]
+  },
+  output: {
+    filename: 'bundle.js',
+    path: path.resolve(__dirname, 'dist')
+  }
+};
diff --git a/examples/oauth2_consumer_webserver/.gitignore b/examples/oauth2_consumer_webserver/.gitignore
new file mode 100644
index 0000000000..4c49bd78f1
--- /dev/null
+++ b/examples/oauth2_consumer_webserver/.gitignore
@@ -0,0 +1 @@
+.env
diff --git a/examples/oauth2_consumer_webserver/app.py b/examples/oauth2_consumer_webserver/app.py
new file mode 100644
index 0000000000..73fd20aca2
--- /dev/null
+++ b/examples/oauth2_consumer_webserver/app.py
@@ -0,0 +1,110 @@
+from __future__ import absolute_import
+
+import json
+import os
+import six
+
+from flask import Flask, redirect, url_for, request, session
+from flask_oauth import OAuth
+
+
+BASE_URL = os.environ.get('BASE_URL', 'http://localhost:8000')
+CLIENT_ID = os.environ.get('CLIENT_ID')
+CLIENT_SECRET = os.environ.get('CLIENT_SECRET')
+REDIRECT_URI = '/authorized'
+
+SECRET_KEY = 'development key'
+DEBUG = True
+
+app = Flask(__name__)
+app.debug = DEBUG
+app.secret_key = SECRET_KEY
+oauth = OAuth()
+
+sentry = oauth.remote_app(
+    'sentry',
+    base_url=BASE_URL,
+    authorize_url='{}/oauth/authorize/'.format(BASE_URL),
+    request_token_url=None,
+    request_token_params={
+        'scope': 'project:releases event:read org:read org:write',
+        'response_type': 'code'
+    },
+    access_token_url='{}/oauth/token/'.format(BASE_URL),
+    access_token_method='POST',
+    access_token_params={
+        'grant_type': 'authorization_code',
+    },
+    consumer_key=CLIENT_ID,
+    consumer_secret=CLIENT_SECRET,
+)
+
+
+@app.route('/')
+def index():
+    access_token = session.get('access_token')
+    if access_token is None:
+        return (
+            '<h1>Who are you?</h1>'
+            '<p><a href="{}">Login with Sentry</a></p>'
+        ).format(
+            url_for('login'),
+        )
+
+    from urllib2 import Request, urlopen, URLError
+    headers = {'Authorization': 'Bearer {}'.format(access_token)}
+    req = Request('{}/api/0/organizations/'.format(BASE_URL),
+                  None, headers)
+    try:
+        res = urlopen(req)
+    except URLError, e:
+        if e.code == 401:
+            # Unauthorized - bad token
+            session.pop('access_token', None)
+            return redirect(url_for('login'))
+        return '{}\n{}'.format(six.text_type(e), e.read())
+
+    return (
+        '<h1>Hi, {}!</h1>'
+        '<pre>{}</pre>'
+    ).format(
+        json.loads(session['user'])['email'],
+        json.dumps(json.loads(res.read()), indent=2),
+    )
+
+
+@app.route('/login')
+def login():
+    callback = url_for('authorized', _external=True)
+    return sentry.authorize(callback=callback)
+
+
+@app.route(REDIRECT_URI)
+@sentry.authorized_handler
+def authorized(resp):
+    if 'error' in request.args:
+        return (
+            '<h1>Error</h1>'
+            '<p>{}</p>'
+            '<p><a href="{}">Try again</a></p>'
+        ).format(
+            request.args['error'],
+            url_for('login'),
+        )
+    access_token = resp['access_token']
+    session['access_token'] = access_token
+    session['user'] = json.dumps(resp['user'])
+    return redirect(url_for('index'))
+
+
+@sentry.tokengetter
+def get_access_token():
+    return session.get('access_token')
+
+
+def main():
+    app.run()
+
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/oauth2_consumer_webserver/requirements.txt b/examples/oauth2_consumer_webserver/requirements.txt
new file mode 100644
index 0000000000..426663b020
--- /dev/null
+++ b/examples/oauth2_consumer_webserver/requirements.txt
@@ -0,0 +1,3 @@
+flask
+flask-oauth
+six
diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index a6cdc1cb1e..2404140e19 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -61,13 +61,21 @@ class TokenAuthentication(QuietBasicAuthentication):
 
     def authenticate_credentials(self, token):
         try:
-            token = ApiToken.objects.get(token=token)
+            token = ApiToken.objects.filter(
+                token=token,
+            ).select_related('user', 'application').get()
         except ApiToken.DoesNotExist:
             raise AuthenticationFailed('Invalid token')
 
+        if token.is_expired():
+            raise AuthenticationFailed('Token expired')
+
         if not token.user.is_active:
             raise AuthenticationFailed('User inactive or deleted')
 
+        if token.application and not token.application.is_active:
+            raise AuthenticationFailed('UserApplication inactive or deleted')
+
         raven.tags_context({
             'api_token': token.id,
         })
diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
index 9595aeb239..62ef8385e0 100644
--- a/src/sentry/api/bases/group.py
+++ b/src/sentry/api/bases/group.py
@@ -13,10 +13,10 @@ logger = logging.getLogger(__name__)
 
 class GroupPermission(ProjectPermission):
     scope_map = {
-        'GET': ['event:read', 'event:write', 'event:delete'],
-        'POST': ['event:write', 'event:delete'],
-        'PUT': ['event:write', 'event:delete'],
-        'DELETE': ['event:delete'],
+        'GET': ['event:read', 'event:write', 'event:admin'],
+        'POST': ['event:write', 'event:admin'],
+        'PUT': ['event:write', 'event:admin'],
+        'DELETE': ['event:admin'],
     }
 
     def has_object_permission(self, request, view, group):
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 8612f40dc5..d9e2a706a7 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -16,10 +16,10 @@ from sentry.utils import auth
 
 class OrganizationPermission(ScopedPermission):
     scope_map = {
-        'GET': ['org:read', 'org:write', 'org:delete'],
-        'POST': ['org:write', 'org:delete'],
-        'PUT': ['org:write', 'org:delete'],
-        'DELETE': ['org:delete'],
+        'GET': ['org:read', 'org:write', 'org:admin'],
+        'POST': ['org:write', 'org:admin'],
+        'PUT': ['org:write', 'org:admin'],
+        'DELETE': ['org:admin'],
     }
 
     def needs_sso(self, request, organization):
@@ -63,10 +63,10 @@ class OrganizationPermission(ScopedPermission):
 # associated with projects people have access to
 class OrganizationReleasePermission(OrganizationPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete', 'project:releases'],
-        'POST': ['project:write', 'project:delete', 'project:releases'],
-        'PUT': ['project:write', 'project:delete', 'project:releases'],
-        'DELETE': ['project:delete', 'project:releases'],
+        'GET': ['project:read', 'project:write', 'project:admin', 'project:releases'],
+        'POST': ['project:write', 'project:admin', 'project:releases'],
+        'PUT': ['project:write', 'project:admin', 'project:releases'],
+        'DELETE': ['project:admin', 'project:releases'],
     }
 
 
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 9f2a7a3ed2..742c38b310 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -10,10 +10,10 @@ from .team import TeamPermission
 
 class ProjectPermission(TeamPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete'],
-        'POST': ['project:write', 'project:delete'],
-        'PUT': ['project:write', 'project:delete'],
-        'DELETE': ['project:delete'],
+        'GET': ['project:read', 'project:write', 'project:admin'],
+        'POST': ['project:write', 'project:admin'],
+        'PUT': ['project:write', 'project:admin'],
+        'DELETE': ['project:admin'],
     }
 
     def has_object_permission(self, request, view, project):
@@ -23,28 +23,28 @@ class ProjectPermission(TeamPermission):
 
 class ProjectReleasePermission(ProjectPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete', 'project:releases'],
-        'POST': ['project:write', 'project:delete', 'project:releases'],
-        'PUT': ['project:write', 'project:delete', 'project:releases'],
-        'DELETE': ['project:delete', 'project:releases'],
+        'GET': ['project:read', 'project:write', 'project:admin', 'project:releases'],
+        'POST': ['project:write', 'project:admin', 'project:releases'],
+        'PUT': ['project:write', 'project:admin', 'project:releases'],
+        'DELETE': ['project:admin', 'project:releases'],
     }
 
 
 class ProjectEventPermission(ProjectPermission):
     scope_map = {
-        'GET': ['event:read', 'event:write', 'event:delete'],
-        'POST': ['event:write', 'event:delete'],
-        'PUT': ['event:write', 'event:delete'],
-        'DELETE': ['event:delete'],
+        'GET': ['event:read', 'event:write', 'event:admin'],
+        'POST': ['event:write', 'event:admin'],
+        'PUT': ['event:write', 'event:admin'],
+        'DELETE': ['event:admin'],
     }
 
 
 class ProjectSettingPermission(ProjectPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete'],
-        'POST': ['project:write', 'project:delete'],
-        'PUT': ['project:write', 'project:delete'],
-        'DELETE': ['project:write', 'project:delete'],
+        'GET': ['project:read', 'project:write', 'project:admin'],
+        'POST': ['project:write', 'project:admin'],
+        'PUT': ['project:write', 'project:admin'],
+        'DELETE': ['project:write', 'project:admin'],
 
     }
 
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 0c09238973..9b502d63bb 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -11,10 +11,10 @@ from .organization import OrganizationPermission
 
 class TeamPermission(OrganizationPermission):
     scope_map = {
-        'GET': ['team:read', 'team:write', 'team:delete'],
-        'POST': ['team:write', 'team:delete'],
-        'PUT': ['team:write', 'team:delete'],
-        'DELETE': ['team:delete'],
+        'GET': ['team:read', 'team:write', 'team:admin'],
+        'POST': ['team:write', 'team:admin'],
+        'PUT': ['team:write', 'team:admin'],
+        'DELETE': ['team:admin'],
     }
 
     def has_object_permission(self, request, view, team):
diff --git a/src/sentry/api/endpoints/api_application_details.py b/src/sentry/api/endpoints/api_application_details.py
new file mode 100644
index 0000000000..98349f2ca3
--- /dev/null
+++ b/src/sentry/api/endpoints/api_application_details.py
@@ -0,0 +1,129 @@
+from __future__ import absolute_import
+
+import logging
+
+from rest_framework import serializers
+from rest_framework.permissions import IsAuthenticated
+from rest_framework.response import Response
+from uuid import uuid4
+
+from sentry.api.base import Endpoint, SessionAuthentication
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import ListField
+from sentry.models import ApiApplication, ApiApplicationStatus
+from sentry.tasks.deletion import delete_api_application
+
+delete_logger = logging.getLogger('sentry.deletions.api')
+
+
+class ApiApplicationSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=64)
+    redirectUris = ListField(
+        child=serializers.URLField(max_length=255),
+        required=False,
+    )
+    allowedOrigins = ListField(
+        # TODO(dcramer): make this validate origins
+        child=serializers.CharField(max_length=255),
+        required=False,
+    )
+    homepageUrl = serializers.URLField(
+        max_length=255,
+        required=False,
+    )
+    termsUrl = serializers.URLField(
+        max_length=255,
+        required=False,
+    )
+    privacyUrl = serializers.URLField(
+        max_length=255,
+        required=False,
+    )
+
+
+class ApiApplicationDetailsEndpoint(Endpoint):
+    authentication_classes = (
+        SessionAuthentication,
+    )
+    permission_classes = (
+        IsAuthenticated,
+    )
+
+    def get(self, request, app_id):
+        try:
+            instance = ApiApplication.objects.get(
+                owner=request.user,
+                client_id=app_id,
+                status=ApiApplicationStatus.active,
+            )
+        except ApiApplication.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return Response(serialize(instance, request.user))
+
+    def put(self, request, app_id):
+        try:
+            instance = ApiApplication.objects.get(
+                owner=request.user,
+                client_id=app_id,
+                status=ApiApplicationStatus.active,
+            )
+        except ApiApplication.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = ApiApplicationSerializer(data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            result = serializer.object
+            kwargs = {}
+            if 'name' in result:
+                kwargs['name'] = result['name']
+            if 'allowedOrigins' in result:
+                kwargs['allowed_origins'] = '\n'.join(result['allowedOrigins'])
+            if 'redirectUris' in result:
+                kwargs['redirect_uris'] = '\n'.join(result['redirectUris'])
+            if 'homepageUrl' in result:
+                kwargs['homepage_url'] = result['homepageUrl']
+            if 'privacyUrl' in result:
+                kwargs['privacy_url'] = result['privacyUrl']
+            if 'termsUrl' in result:
+                kwargs['terms_url'] = result['termsUrl']
+            if kwargs:
+                instance.update(**kwargs)
+            return Response(serialize(instance, request.user), status=200)
+        return Response(serializer.errors, status=400)
+
+    def delete(self, request, app_id):
+        try:
+            instance = ApiApplication.objects.get(
+                owner=request.user,
+                client_id=app_id,
+                status=ApiApplicationStatus.active,
+            )
+        except ApiApplication.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        updated = ApiApplication.objects.filter(
+            id=instance.id,
+        ).update(
+            status=ApiApplicationStatus.pending_deletion,
+        )
+        if updated:
+            transaction_id = uuid4().hex
+
+            delete_api_application.apply_async(
+                kwargs={
+                    'object_id': instance.id,
+                    'transaction_id': transaction_id,
+                },
+                countdown=3600,
+            )
+
+            delete_logger.info('object.delete.queued', extra={
+                'object_id': instance.id,
+                'transaction_id': transaction_id,
+                'model': type(instance).__name__,
+            })
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/api_applications.py b/src/sentry/api/endpoints/api_applications.py
new file mode 100644
index 0000000000..0052e8be78
--- /dev/null
+++ b/src/sentry/api/endpoints/api_applications.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from rest_framework.permissions import IsAuthenticated
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint, SessionAuthentication
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.models import ApiApplication, ApiApplicationStatus
+
+
+class ApiApplicationsEndpoint(Endpoint):
+    authentication_classes = (
+        SessionAuthentication,
+    )
+    permission_classes = (
+        IsAuthenticated,
+    )
+
+    def get(self, request):
+        queryset = ApiApplication.objects.filter(
+            owner=request.user,
+            status=ApiApplicationStatus.active,
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='name',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    def post(self, request):
+        app = ApiApplication.objects.create(
+            owner=request.user,
+        )
+
+        return Response(serialize(app, request.user), status=201)
diff --git a/src/sentry/api/endpoints/api_authorizations.py b/src/sentry/api/endpoints/api_authorizations.py
new file mode 100644
index 0000000000..9fecea50d9
--- /dev/null
+++ b/src/sentry/api/endpoints/api_authorizations.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+from django.db import transaction
+
+from rest_framework.permissions import IsAuthenticated
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint, SessionAuthentication
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.models import ApiApplicationStatus, ApiAuthorization, ApiToken
+
+
+class ApiAuthorizationsEndpoint(Endpoint):
+    authentication_classes = (
+        SessionAuthentication,
+    )
+    permission_classes = (
+        IsAuthenticated,
+    )
+
+    def get(self, request):
+        queryset = ApiAuthorization.objects.filter(
+            user=request.user,
+            application__status=ApiApplicationStatus.active,
+        ).select_related('application')
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='application__name',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    def delete(self, request):
+        authorization = request.DATA.get('authorization')
+        if not authorization:
+            return Response({'authorization': ''}, status=400)
+
+        try:
+            auth = ApiAuthorization.objects.get(
+                user=request.user,
+                id=authorization,
+            )
+        except ApiAuthorization.DoesNotExist:
+            return Response(status=404)
+
+        with transaction.atomic():
+            ApiToken.objects.filter(
+                user=request.user,
+                application=auth.application_id,
+            ).delete()
+
+            auth.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/api_tokens.py b/src/sentry/api/endpoints/api_tokens.py
index c37e2bed8b..d7f0d28efe 100644
--- a/src/sentry/api/endpoints/api_tokens.py
+++ b/src/sentry/api/endpoints/api_tokens.py
@@ -29,8 +29,9 @@ class ApiTokensEndpoint(Endpoint):
 
     def get(self, request):
         token_list = list(ApiToken.objects.filter(
+            application__isnull=True,
             user=request.user,
-        ))
+        ).select_related('application'))
 
         return Response(serialize(token_list, request.user))
 
@@ -45,6 +46,8 @@ class ApiTokensEndpoint(Endpoint):
                 scopes=reduce(or_, (
                     getattr(ApiToken.scopes, k) for k in result['scopes']
                 )),
+                refresh_token=None,
+                expires_at=None,
             )
 
             return Response(serialize(token, request.user), status=201)
@@ -58,6 +61,7 @@ class ApiTokensEndpoint(Endpoint):
         ApiToken.objects.filter(
             user=request.user,
             token=token,
+            application__isnull=True,
         ).delete()
 
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/organization_access_request_details.py b/src/sentry/api/endpoints/organization_access_request_details.py
index 3e57395b4c..8add9226ad 100644
--- a/src/sentry/api/endpoints/organization_access_request_details.py
+++ b/src/sentry/api/endpoints/organization_access_request_details.py
@@ -19,8 +19,11 @@ class AccessRequestPermission(OrganizationPermission):
         'POST': [],
         'PUT': [
             'org:write',
+            'org:admin',
             'team:write',
+            'team:admin',
             'member:write',
+            'member:admin',
         ],
         'DELETE': [],
     }
@@ -35,10 +38,16 @@ class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
 
     # TODO(dcramer): this should go onto AccessRequestPermission
     def _can_access(self, request, access_request):
+        if request.access.has_scope('org:admin'):
+            return True
         if request.access.has_scope('org:write'):
             return True
+        if request.access.has_scope('member:admin'):
+            return True
         if request.access.has_scope('member:write'):
             return True
+        if request.access.has_team_scope(access_request.team, 'team:admin'):
+            return True
         if request.access.has_team_scope(access_request.team, 'team:write'):
             return True
         return False
diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index a7722b71b4..3ff40e73d1 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -198,7 +198,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
                             to be available and unique.
         :auth: required
         """
-        if request.access.has_scope('org:delete'):
+        if request.access.has_scope('org:admin'):
             serializer_cls = OwnerOrganizationSerializer
         else:
             serializer_cls = OrganizationSerializer
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 031d5fb1ce..4d8924e345 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -18,7 +18,7 @@ ERR_NO_AUTH = 'You cannot remove this member with an unauthenticated API request
 
 ERR_INSUFFICIENT_ROLE = 'You cannot remove a member who has more access than you.'
 
-ERR_INSUFFICIENT_SCOPE = 'You are missing the member:delete scope.'
+ERR_INSUFFICIENT_SCOPE = 'You are missing the member:admin scope.'
 
 ERR_ONLY_OWNER = 'You cannot remove the only remaining owner of the organization.'
 
@@ -31,13 +31,13 @@ class OrganizationMemberSerializer(serializers.Serializer):
 
 class RelaxedMemberPermission(OrganizationPermission):
     scope_map = {
-        'GET': ['member:read', 'member:write', 'member:delete'],
-        'POST': ['member:write', 'member:delete'],
-        'PUT': ['member:write', 'member:delete'],
+        'GET': ['member:read', 'member:write', 'member:admin'],
+        'POST': ['member:write', 'member:admin'],
+        'PUT': ['member:write', 'member:admin'],
 
         # DELETE checks for role comparison as you can either remove a member
         # with a lower access role, or yourself, without having the req. scope
-        'DELETE': ['member:read', 'member:write', 'member:delete'],
+        'DELETE': ['member:read', 'member:write', 'member:admin'],
     }
 
 
@@ -117,13 +117,13 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
                 return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
             else:
                 if acting_member != om:
-                    if not request.access.has_scope('member:delete'):
+                    if not request.access.has_scope('member:admin'):
                         return Response({'detail': ERR_INSUFFICIENT_SCOPE}, status=400)
                     elif not roles.can_manage(acting_member.role, om.role):
                         return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         # TODO(dcramer): do we even need this check?
-        elif not request.access.has_scope('member:delete'):
+        elif not request.access.has_scope('member:admin'):
             return Response({'detail': ERR_INSUFFICIENT_SCOPE}, status=400)
 
         if self._is_only_owner(om):
diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index a451564e74..94748a4f03 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -12,10 +12,10 @@ from sentry.models import OrganizationMember
 
 class MemberPermission(OrganizationPermission):
     scope_map = {
-        'GET': ['member:read', 'member:write', 'member:delete'],
-        'POST': ['member:write', 'member:delete'],
-        'PUT': ['member:write', 'member:delete'],
-        'DELETE': ['member:delete'],
+        'GET': ['member:read', 'member:write', 'member:admin'],
+        'POST': ['member:write', 'member:admin'],
+        'PUT': ['member:write', 'member:admin'],
+        'DELETE': ['member:admin'],
     }
 
 
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 7d40e47508..1a4a914fd9 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -24,8 +24,8 @@ class OrganizationMemberTeamSerializer(serializers.Serializer):
 
 class RelaxedOrganizationPermission(OrganizationPermission):
     _allowed_scopes = [
-        'org:read', 'org:write', 'org:delete',
-        'member:read', 'member:write', 'member:delete',
+        'org:read', 'org:write', 'org:admin',
+        'member:read', 'member:write', 'member:admin',
     ]
 
     scope_map = {
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index ca268df324..e5bd1b458c 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -94,11 +94,11 @@ class ProjectAdminSerializer(serializers.Serializer):
 
 class RelaxedProjectPermission(ProjectPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete'],
-        'POST': ['project:write', 'project:delete'],
+        'GET': ['project:read', 'project:write', 'project:admin'],
+        'POST': ['project:write', 'project:admin'],
         # PUT checks for permissions based on fields
-        'PUT': ['project:read', 'project:write', 'project:delete'],
-        'DELETE': ['project:delete'],
+        'PUT': ['project:read', 'project:write', 'project:admin'],
+        'DELETE': ['project:admin'],
     }
 
 
diff --git a/src/sentry/api/endpoints/project_search_details.py b/src/sentry/api/endpoints/project_search_details.py
index 3a593b8011..40c67e1e59 100644
--- a/src/sentry/api/endpoints/project_search_details.py
+++ b/src/sentry/api/endpoints/project_search_details.py
@@ -22,11 +22,11 @@ class SavedSearchSerializer(serializers.Serializer):
 
 class RelaxedSearchPermission(ProjectPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete'],
-        'POST': ['project:write', 'project:delete'],
+        'GET': ['project:read', 'project:write', 'project:admin'],
+        'POST': ['project:write', 'project:admin'],
         # members can do partial writes
-        'PUT': ['project:write', 'project:delete', 'project:read'],
-        'DELETE': ['project:delete'],
+        'PUT': ['project:write', 'project:admin', 'project:read'],
+        'DELETE': ['project:admin'],
     }
 
 
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index b707d4be64..7c2daf493c 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -48,10 +48,10 @@ class ProjectSerializer(serializers.Serializer):
 # as you are a member of that team and have project scoped permissions.
 class TeamProjectPermission(TeamPermission):
     scope_map = {
-        'GET': ['project:read', 'project:write', 'project:delete'],
-        'POST': ['project:write', 'project:delete'],
-        'PUT': ['project:write', 'project:delete'],
-        'DELETE': ['project:delete'],
+        'GET': ['project:read', 'project:write', 'project:admin'],
+        'POST': ['project:write', 'project:admin'],
+        'PUT': ['project:write', 'project:admin'],
+        'DELETE': ['project:admin'],
     }
 
 
diff --git a/src/sentry/api/serializers/models/apiapplication.py b/src/sentry/api/serializers/models/apiapplication.py
new file mode 100644
index 0000000000..3913f51bb5
--- /dev/null
+++ b/src/sentry/api/serializers/models/apiapplication.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from sentry.api.serializers import Serializer, register
+from sentry.models import ApiApplication
+
+
+@register(ApiApplication)
+class ApiApplicationSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        has_secret = obj.date_added > timezone.now() - timedelta(days=1)
+        return {
+            'id': obj.client_id,
+            'clientID': obj.client_id,
+            'clientSecret': obj.client_secret if has_secret else None,
+            'name': obj.name,
+            'homepageUrl': obj.homepage_url,
+            'privacyUrl': obj.privacy_url,
+            'termsUrl': obj.terms_url,
+            'allowedOrigins': obj.get_allowed_origins(),
+            'redirectUris': [o for o in obj.redirect_uris.splitlines() if o],
+        }
diff --git a/src/sentry/api/serializers/models/apiauthorization.py b/src/sentry/api/serializers/models/apiauthorization.py
new file mode 100644
index 0000000000..6634cefada
--- /dev/null
+++ b/src/sentry/api/serializers/models/apiauthorization.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import ApiAuthorization
+
+
+@register(ApiAuthorization)
+class ApiAuthorizationSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        apps = {
+            d['id']: d
+            for d in serialize(set(i.application for i in item_list if i.application_id), user)
+        }
+
+        attrs = {}
+        for item in item_list:
+            attrs[item] = {
+                'application': (
+                    apps.get(item.application.client_id)
+                    if item.application else None
+                ),
+            }
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'scopes': [k for k, v in six.iteritems(obj.scopes) if v],
+            'application': attrs['application'],
+            'dateCreated': obj.date_added,
+        }
diff --git a/src/sentry/api/serializers/models/apitoken.py b/src/sentry/api/serializers/models/apitoken.py
index b99d239367..0bc9c9a154 100644
--- a/src/sentry/api/serializers/models/apitoken.py
+++ b/src/sentry/api/serializers/models/apitoken.py
@@ -2,15 +2,36 @@ from __future__ import absolute_import
 
 import six
 
-from sentry.api.serializers import Serializer, register
+from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import ApiToken
 
 
 @register(ApiToken)
 class ApiTokenSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        apps = {
+            d['id']: d
+            for d in serialize(set(i.application for i in item_list if i.application_id), user)
+        }
+
+        attrs = {}
+        for item in item_list:
+            attrs[item] = {
+                'application': (
+                    apps.get(item.application.client_id)
+                    if item.application else None
+                ),
+            }
+        return attrs
+
     def serialize(self, obj, attrs, user):
-        return {
-            'token': obj.token,
+        data = {
+            'id': six.text_type(obj.id),
             'scopes': [k for k, v in six.iteritems(obj.scopes) if v],
+            'application': attrs['application'],
+            'expiresAt': obj.expires_at,
             'dateCreated': obj.date_added,
         }
+        if not attrs['application']:
+            data['token'] = obj.token
+        return data
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 1409933dbb..4653be32bc 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -2,6 +2,9 @@ from __future__ import absolute_import, print_function
 
 from django.conf.urls import include, patterns, url
 
+from .endpoints.api_applications import ApiApplicationsEndpoint
+from .endpoints.api_application_details import ApiApplicationDetailsEndpoint
+from .endpoints.api_authorizations import ApiAuthorizationsEndpoint
 from .endpoints.api_tokens import ApiTokensEndpoint
 from .endpoints.auth_index import AuthIndexEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
@@ -110,7 +113,16 @@ from .endpoints.user_organizations import UserOrganizationsEndpoint
 urlpatterns = patterns(
     '',
 
-    # Api Tokens
+    # Api Data
+    url(r'^api-applications/$',
+        ApiApplicationsEndpoint.as_view(),
+        name='sentry-api-0-api-applications'),
+    url(r'^api-applications/(?P<app_id>[^\/]+)/$',
+        ApiApplicationDetailsEndpoint.as_view(),
+        name='sentry-api-0-api-application-details'),
+    url(r'^api-authorizations/$',
+        ApiAuthorizationsEndpoint.as_view(),
+        name='sentry-api-0-api-authorizations'),
     url(r'^api-tokens/$',
         ApiTokensEndpoint.as_view(),
         name='sentry-api-0-api-tokens'),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 8b7b535398..cc24806e34 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -987,22 +987,53 @@ SENTRY_MANAGED_USER_FIELDS = ()
 SENTRY_SCOPES = set([
     'org:read',
     'org:write',
-    'org:delete',
+    'org:admin',
     'member:read',
     'member:write',
-    'member:delete',
+    'member:admin',
     'team:read',
     'team:write',
-    'team:delete',
+    'team:admin',
     'project:read',
     'project:write',
-    'project:delete',
+    'project:admin',
     'project:releases',
     'event:read',
     'event:write',
-    'event:delete',
+    'event:admin',
 ])
 
+SENTRY_SCOPE_SETS = (
+    (
+        ('org:admin', 'Read, write, and admin access to organization details.'),
+        ('org:write', 'Read and write access to organization details.'),
+        ('org:read', 'Read access to organization details.'),
+    ),
+    (
+        ('member:admin', 'Read, write, and admin access to organization members.'),
+        ('member:write', 'Read and write access to organization members.'),
+        ('member:read', 'Read access to organization members.'),
+    ),
+    (
+        ('team:admin', 'Read, write, and admin access to teams.'),
+        ('team:write', 'Read and write access to teams.'),
+        ('team:read', 'Read access to teams.'),
+    ),
+    (
+        ('project:admin', 'Read, write, and admin access to projects.'),
+        ('project:write', 'Read and write access to projects.'),
+        ('project:read', 'Read access to projects.'),
+    ),
+    (
+        ('project:releases', 'Read, write, and admin access to project releases.'),
+    ),
+    (
+        ('event:admin', 'Read, write, and admin access to events.'),
+        ('event:write', 'Read and write access to events.'),
+        ('event:read', 'Read access to events.'),
+    ),
+)
+
 SENTRY_DEFAULT_ROLE = 'member'
 
 # Roles are ordered, which represents a sort-of hierarchy, as well as how
@@ -1015,7 +1046,7 @@ SENTRY_ROLES = (
         'name': 'Member',
         'desc': 'Members can view and act on events, as well as view most other data within the organization.',
         'scopes': set([
-            'event:read', 'event:write', 'event:delete', 'project:releases',
+            'event:read', 'event:write', 'event:admin', 'project:releases',
             'project:read', 'org:read', 'member:read', 'team:read',
         ]),
     },
@@ -1024,10 +1055,10 @@ SENTRY_ROLES = (
         'name': 'Admin',
         'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on.',
         'scopes': set([
-            'event:read', 'event:write', 'event:delete',
+            'event:read', 'event:write', 'event:admin',
             'org:read', 'member:read',
-            'project:read', 'project:write', 'project:delete', 'project:releases',
-            'team:read', 'team:write', 'team:delete',
+            'project:read', 'project:write', 'project:admin', 'project:releases',
+            'team:read', 'team:write', 'team:admin',
         ]),
     },
     {
@@ -1036,10 +1067,10 @@ SENTRY_ROLES = (
         'desc': 'Gains admin access on all teams as well as the ability to add and remove members.',
         'is_global': True,
         'scopes': set([
-            'event:read', 'event:write', 'event:delete',
-            'member:read', 'member:write', 'member:delete',
-            'project:read', 'project:write', 'project:delete', 'project:releases',
-            'team:read', 'team:write', 'team:delete',
+            'event:read', 'event:write', 'event:admin',
+            'member:read', 'member:write', 'member:admin',
+            'project:read', 'project:write', 'project:admin', 'project:releases',
+            'team:read', 'team:write', 'team:admin',
             'org:read', 'org:write',
         ]),
     },
@@ -1049,11 +1080,11 @@ SENTRY_ROLES = (
         'desc': 'Gains full permission across the organization. Can manage members as well as perform catastrophic operations such as removing the organization.',
         'is_global': True,
         'scopes': set([
-            'org:read', 'org:write', 'org:delete',
-            'member:read', 'member:write', 'member:delete',
-            'team:read', 'team:write', 'team:delete',
-            'project:read', 'project:write', 'project:delete', 'project:releases',
-            'event:read', 'event:write', 'event:delete',
+            'org:read', 'org:write', 'org:admin',
+            'member:read', 'member:write', 'member:admin',
+            'team:read', 'team:write', 'team:admin',
+            'project:read', 'project:write', 'project:admin', 'project:releases',
+            'event:read', 'event:write', 'event:admin',
         ]),
     },
 )
diff --git a/src/sentry/models/apiapplication.py b/src/sentry/models/apiapplication.py
new file mode 100644
index 0000000000..4933564f68
--- /dev/null
+++ b/src/sentry/models/apiapplication.py
@@ -0,0 +1,97 @@
+from __future__ import absolute_import, print_function
+
+import petname
+
+from django.db import models
+from django.utils import timezone
+from django.utils.translation import ugettext_lazy as _
+from six.moves.urllib.parse import urlparse
+from uuid import uuid4
+
+from sentry.db.models import (
+    Model, BaseManager, BoundedPositiveIntegerField, EncryptedTextField,
+    FlexibleForeignKey, sane_repr
+)
+
+
+class ApiApplicationStatus(object):
+    active = 0
+    inactive = 1
+    pending_deletion = 2
+    deletion_in_progress = 3
+
+
+class ApiApplication(Model):
+    __core__ = True
+
+    client_id = models.CharField(
+        max_length=64, unique=True,
+        default=lambda: ApiApplication.generate_token())
+    client_secret = EncryptedTextField(
+        default=lambda: ApiApplication.generate_token())
+    owner = FlexibleForeignKey('sentry.User')
+    name = models.CharField(
+        max_length=64, blank=True,
+        default=lambda: petname.Generate(2, ' ').title())
+    status = BoundedPositiveIntegerField(default=0, choices=(
+        (ApiApplicationStatus.active, _('Active')),
+        (ApiApplicationStatus.inactive, _('Inactive')),
+    ), db_index=True)
+    allowed_origins = models.TextField(blank=True, null=True)
+    redirect_uris = models.TextField()
+
+    homepage_url = models.URLField(null=True)
+    privacy_url = models.URLField(null=True)
+    terms_url = models.URLField(null=True)
+
+    date_added = models.DateTimeField(default=timezone.now)
+
+    objects = BaseManager(cache_fields=(
+        'client_id',
+    ))
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_apiapplication'
+
+    __repr__ = sane_repr('name', 'owner_id')
+
+    def __unicode__(self):
+        return self.name
+
+    @classmethod
+    def generate_token(cls):
+        return uuid4().hex + uuid4().hex
+
+    @property
+    def is_active(self):
+        return self.status == ApiApplicationStatus.active
+
+    def is_allowed_response_type(self, value):
+        return value in ('code', 'token')
+
+    def is_valid_redirect_uri(self, value):
+        v_netloc = urlparse(value).netloc
+        for ruri in self.redirect_uris.split('\n'):
+            if v_netloc != urlparse(ruri).netloc:
+                continue
+            if value.startswith(ruri):
+                return True
+        return False
+
+    def get_default_redirect_uri(self):
+        return self.redirect_uris.split('\n', 1)[0]
+
+    def get_allowed_origins(self):
+        if not self.allowed_origins:
+            return []
+        return [a for a in self.allowed_origins.split('\n') if a]
+
+    def get_audit_log_data(self):
+        return {
+            'client_id': self.client_id,
+            'name': self.name,
+            'redirect_uris': self.redirect_uris,
+            'allowed_origins': self.allowed_origins,
+            'status': self.status,
+        }
diff --git a/src/sentry/models/apiauthorization.py b/src/sentry/models/apiauthorization.py
new file mode 100644
index 0000000000..885339b866
--- /dev/null
+++ b/src/sentry/models/apiauthorization.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import, print_function
+
+from bitfield import BitField
+from django.conf import settings
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import (
+    Model, FlexibleForeignKey, sane_repr
+)
+
+
+class ApiAuthorization(Model):
+    """
+    Tracks which scopes a user has authorized for a given application.
+
+    This is used to determine when we need re-prompt a user, as well as track
+    overall approved applications (vs individual tokens).
+    """
+    __core__ = True
+
+    # users can generate tokens without being application-bound
+    application = FlexibleForeignKey('sentry.ApiApplication', null=True)
+    user = FlexibleForeignKey('sentry.User')
+    scopes = BitField(flags=tuple((k, k) for k in settings.SENTRY_SCOPES))
+    date_added = models.DateTimeField(default=timezone.now)
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_apiauthorization'
+        unique_together = (('user', 'application'),)
+
+    __repr__ = sane_repr('user_id', 'application_id')
diff --git a/src/sentry/models/apigrant.py b/src/sentry/models/apigrant.py
new file mode 100644
index 0000000000..923a31a19d
--- /dev/null
+++ b/src/sentry/models/apigrant.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import, print_function
+
+from bitfield import BitField
+from datetime import timedelta
+from django.conf import settings
+from django.db import models
+from django.utils import timezone
+from uuid import uuid4
+
+from sentry.db.models import Model, FlexibleForeignKey
+
+DEFAULT_EXPIRATION = timedelta(minutes=10)
+
+
+class ApiGrant(Model):
+    """
+    A grant represents a token with a short lifetime that can
+    be swapped for an access token, as described in :rfc:`4.1.2`
+    of the OAuth 2 spec.
+    """
+    __core__ = False
+
+    user = FlexibleForeignKey('sentry.User')
+    application = FlexibleForeignKey('sentry.ApiApplication')
+    code = models.CharField(
+        max_length=64, db_index=True,
+        default=lambda: ApiGrant.generate_code())
+    expires_at = models.DateTimeField(
+        db_index=True,
+        default=lambda: timezone.now() + DEFAULT_EXPIRATION)
+    redirect_uri = models.CharField(max_length=255)
+    scopes = BitField(flags=tuple((k, k) for k in settings.SENTRY_SCOPES))
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_apigrant'
+
+    @classmethod
+    def generate_code(cls):
+        return uuid4().hex
+
+    def is_expired(self):
+        if not self.expires_at:
+            return True
+
+        return timezone.now() >= self.expires_at
+
+    def redirect_uri_allowed(self, uri):
+        return uri == self.redirect_uri
diff --git a/src/sentry/models/apikey.py b/src/sentry/models/apikey.py
index dd653f5174..7867e7e63d 100644
--- a/src/sentry/models/apikey.py
+++ b/src/sentry/models/apikey.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import, print_function
 import six
 
 from bitfield import BitField
+from django.conf import settings
 from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
@@ -33,24 +34,7 @@ class ApiKey(Model):
     organization = FlexibleForeignKey('sentry.Organization', related_name='key_set')
     label = models.CharField(max_length=64, blank=True, default='Default')
     key = models.CharField(max_length=32, unique=True)
-    scopes = BitField(flags=(
-        ('project:read', 'project:read'),
-        ('project:write', 'project:write'),
-        ('project:delete', 'project:delete'),
-        ('project:releases', 'project:releases'),
-        ('team:read', 'team:read'),
-        ('team:write', 'team:write'),
-        ('team:delete', 'team:delete'),
-        ('event:read', 'event:read'),
-        ('event:write', 'event:write'),
-        ('event:delete', 'event:delete'),
-        ('org:read', 'org:read'),
-        ('org:write', 'org:write'),
-        ('org:delete', 'org:delete'),
-        ('member:read', 'member:read'),
-        ('member:write', 'member:write'),
-        ('member:delete', 'member:delete'),
-    ))
+    scopes = BitField(flags=tuple((k, k) for k in settings.SENTRY_SCOPES))
     status = BoundedPositiveIntegerField(default=0, choices=(
         (ApiKeyStatus.ACTIVE, _('Active')),
         (ApiKeyStatus.INACTIVE, _('Inactive')),
diff --git a/src/sentry/models/apitoken.py b/src/sentry/models/apitoken.py
index d10ca9d10e..87392577f0 100644
--- a/src/sentry/models/apitoken.py
+++ b/src/sentry/models/apitoken.py
@@ -3,7 +3,9 @@ from __future__ import absolute_import, print_function
 import six
 
 from bitfield import BitField
-from django.db import models
+from datetime import timedelta
+from django.conf import settings
+from django.db import IntegrityError, models, transaction
 from django.utils import timezone
 from uuid import uuid4
 
@@ -11,32 +13,25 @@ from sentry.db.models import (
     Model, BaseManager, FlexibleForeignKey, sane_repr
 )
 
+DEFAULT_EXPIRATION = timedelta(days=30)
+
 
 class ApiToken(Model):
     __core__ = True
 
-    # users can generate tokens without being key-bound
-    key = FlexibleForeignKey('sentry.ApiKey', null=True)
+    # users can generate tokens without being application-bound
+    application = FlexibleForeignKey('sentry.ApiApplication', null=True)
     user = FlexibleForeignKey('sentry.User')
-    token = models.CharField(max_length=64, unique=True)
-    scopes = BitField(flags=(
-        ('project:read', 'project:read'),
-        ('project:write', 'project:write'),
-        ('project:delete', 'project:delete'),
-        ('project:releases', 'project:releases'),
-        ('team:read', 'team:read'),
-        ('team:write', 'team:write'),
-        ('team:delete', 'team:delete'),
-        ('event:read', 'event:read'),
-        ('event:write', 'event:write'),
-        ('event:delete', 'event:delete'),
-        ('org:read', 'org:read'),
-        ('org:write', 'org:write'),
-        ('org:delete', 'org:delete'),
-        ('member:read', 'member:read'),
-        ('member:write', 'member:write'),
-        ('member:delete', 'member:delete'),
-    ))
+    token = models.CharField(
+        max_length=64, unique=True,
+        default=lambda: ApiToken.generate_token())
+    refresh_token = models.CharField(
+        max_length=64, unique=True, null=True,
+        default=lambda: ApiToken.generate_token())
+    expires_at = models.DateTimeField(
+        null=True,
+        default=lambda: timezone.now() + DEFAULT_EXPIRATION)
+    scopes = BitField(flags=tuple((k, k) for k in settings.SENTRY_SCOPES))
     date_added = models.DateTimeField(default=timezone.now)
 
     objects = BaseManager(cache_fields=(
@@ -47,7 +42,7 @@ class ApiToken(Model):
         app_label = 'sentry'
         db_table = 'sentry_apitoken'
 
-    __repr__ = sane_repr('key_id', 'user_id', 'token')
+    __repr__ = sane_repr('user_id', 'token', 'application_id')
 
     def __unicode__(self):
         return six.text_type(self.token)
@@ -56,10 +51,28 @@ class ApiToken(Model):
     def generate_token(cls):
         return uuid4().hex + uuid4().hex
 
-    def save(self, *args, **kwargs):
-        if not self.token:
-            self.token = type(self).generate_token()
-        super(ApiToken, self).save(*args, **kwargs)
+    @classmethod
+    def from_grant(cls, grant):
+        try:
+            with transaction.atomic():
+                return cls.objects.create(
+                    application=grant.application,
+                    user=grant.user,
+                    scopes=grant.scopes,
+                )
+        except IntegrityError:
+            instance = cls.objects.get(
+                application=grant.application,
+                user=grant.user,
+            )
+            instance.update(scopes=grant.scopes)
+            return instance
+
+    def is_expired(self):
+        if not self.expires_at:
+            return True
+
+        return timezone.now() >= self.expires_at
 
     def get_audit_log_data(self):
         return {
@@ -73,6 +86,16 @@ class ApiToken(Model):
         return scope in self.scopes
 
     def get_allowed_origins(self):
-        if self.key:
+        if self.application:
             return self.key.get_allowed_origins()
         return ()
+
+    def refresh(self, expires_at=None):
+        if expires_at is None:
+            expires_at = timezone.now() + DEFAULT_EXPIRATION
+
+        self.update(
+            token=type(self).generate_token(),
+            refresh_token=type(self).generate_token(),
+            expires_at=expires_at,
+        )
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index 554cd8ad8d..85f31a3be8 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -65,11 +65,11 @@ class ProjectKey(Model):
     scopes = (
         'project:read',
         'project:write',
-        'project:delete',
+        'project:admin',
         'project:releases',
         'event:read',
         'event:write',
-        'event:delete',
+        'event:admin',
     )
 
     class Meta:
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 892222d397..4687a74b2b 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -320,7 +320,7 @@ class IPlugin(local, PluggableViewMixin, PluginConfigMixin):
             'group': group,
             'event': event,
             'can_admin_event': request.access.has_scope('event:write'),
-            'can_remove_event': request.access.has_scope('event:delete'),
+            'can_remove_event': request.access.has_scope('event:admin'),
         })
 
     def view(self, request, group, **kwargs):
diff --git a/src/sentry/runner/commands/cleanup.py b/src/sentry/runner/commands/cleanup.py
index 00006b8ccc..2e9fcda043 100644
--- a/src/sentry/runner/commands/cleanup.py
+++ b/src/sentry/runner/commands/cleanup.py
@@ -56,8 +56,8 @@ def cleanup(days, project, concurrency, silent, model):
     from sentry.app import nodestore
     from sentry.db.deletion import BulkDeleteQuery
     from sentry.models import (
-        Event, EventMapping, Group, GroupRuleStatus, GroupTagValue,
-        LostPasswordHash, TagValue, GroupEmailThread,
+        ApiGrant, ApiToken, Event, EventMapping, Group, GroupRuleStatus,
+        GroupTagValue, LostPasswordHash, TagValue, GroupEmailThread,
     )
 
     models = {m.lower() for m in model}
@@ -81,7 +81,7 @@ def cleanup(days, project, concurrency, silent, model):
     )
 
     if not silent:
-        click.echo("Removing expired values for LostPasswordHash")
+        click.echo('Removing expired values for LostPasswordHash')
 
     if is_filtered('LostPasswordHash'):
         if not silent:
@@ -91,6 +91,18 @@ def cleanup(days, project, concurrency, silent, model):
             date_added__lte=timezone.now() - timedelta(hours=48)
         ).delete()
 
+    for model in [ApiGrant, ApiToken]:
+        if not silent:
+            click.echo('Removing expired values for {}'.format(model.__name__))
+
+        if is_filtered(model.__name__):
+            if not silent:
+                click.echo('>> Skipping {}'.format(model.__name__))
+        else:
+            model.objects.filter(
+                expires_at__lt=timezone.now()
+            ).delete()
+
     project_id = None
     if project:
         click.echo("Bulk NodeStore deletion not available for project selection", err=True)
diff --git a/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py b/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py
new file mode 100644
index 0000000000..f429fd2612
--- /dev/null
+++ b/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py
@@ -0,0 +1,883 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'ApiGrant'
+        db.create_table('sentry_apigrant', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'])),
+            ('application', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.ApiApplication'])),
+            ('code', self.gf('django.db.models.fields.CharField')(default='8210fdc7a13a419b8329c26168bbc5a0', max_length=64, db_index=True)),
+            ('expires_at', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2017, 3, 18, 0, 0), db_index=True)),
+            ('redirect_uri', self.gf('django.db.models.fields.CharField')(max_length=255)),
+            ('scopes', self.gf('django.db.models.fields.BigIntegerField')(default=None)),
+        ))
+        db.send_create_signal('sentry', ['ApiGrant'])
+
+        # Adding model 'ApiAuthorization'
+        db.create_table('sentry_apiauthorization', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('application', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.ApiApplication'], null=True)),
+            ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'])),
+            ('scopes', self.gf('django.db.models.fields.BigIntegerField')(default=None)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['ApiAuthorization'])
+
+        # Adding unique constraint on 'ApiAuthorization', fields ['user', 'application']
+        db.create_unique('sentry_apiauthorization', ['user_id', 'application_id'])
+
+        # Adding model 'ApiApplication'
+        db.create_table('sentry_apiapplication', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('client_id', self.gf('django.db.models.fields.CharField')(default='d9b84dfa79bb4e32adcf81d7743040e892da7561b3e64f05976948ddb260aa4f', unique=True, max_length=64)),
+            ('client_secret', self.gf('sentry.db.models.fields.encrypted.EncryptedTextField')(default='7ed28a2a6ca74469a30b4b77a112323051e744b45b984b2689fa6370311742b2')),
+            ('owner', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'])),
+            ('name', self.gf('django.db.models.fields.CharField')(default='Hifalutin Malaysia', max_length=64, blank=True)),
+            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0, db_index=True)),
+            ('allowed_origins', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
+            ('redirect_uris', self.gf('django.db.models.fields.TextField')()),
+            ('homepage_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True)),
+            ('privacy_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True)),
+            ('terms_url', self.gf('django.db.models.fields.URLField')(max_length=200, null=True)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['ApiApplication'])
+
+        # Deleting field 'ApiToken.key'
+        db.delete_column(u'sentry_apitoken', 'key_id')
+
+        # Adding field 'ApiToken.application'
+        db.add_column('sentry_apitoken', 'application',
+                      self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.ApiApplication'], null=True),
+                      keep_default=False)
+
+        # Adding field 'ApiToken.refresh_token'
+        db.add_column('sentry_apitoken', 'refresh_token',
+                      self.gf('django.db.models.fields.CharField')(default='b9ea406c599a42a7a5860a6899a7a985879619ac763f49daa0de5322c3569b2f', max_length=64, unique=True, null=True),
+                      keep_default=False)
+
+        # Adding field 'ApiToken.expires_at'
+        db.add_column('sentry_apitoken', 'expires_at',
+                      self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime(2017, 4, 17, 0, 0), null=True),
+                      keep_default=False)
+
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'ApiAuthorization', fields ['user', 'application']
+        db.delete_unique('sentry_apiauthorization', ['user_id', 'application_id'])
+
+        # Deleting model 'ApiGrant'
+        db.delete_table('sentry_apigrant')
+
+        # Deleting model 'ApiAuthorization'
+        db.delete_table('sentry_apiauthorization')
+
+        # Deleting model 'ApiApplication'
+        db.delete_table('sentry_apiapplication')
+
+        # Adding field 'ApiToken.key'
+        db.add_column(u'sentry_apitoken', 'key',
+                      self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.ApiKey'], null=True),
+                      keep_default=False)
+
+        # Deleting field 'ApiToken.application'
+        db.delete_column('sentry_apitoken', 'application_id')
+
+        # Deleting field 'ApiToken.refresh_token'
+        db.delete_column('sentry_apitoken', 'refresh_token')
+
+        # Deleting field 'ApiToken.expires_at'
+        db.delete_column('sentry_apitoken', 'expires_at')
+
+
+    models = {
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.apiapplication': {
+            'Meta': {'object_name': 'ApiApplication'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'client_id': ('django.db.models.fields.CharField', [], {'default': "'2c93e16f1d9848ee971aad578c306c18c8c08f0a8c5b4000b4663eb07d14a3bf'", 'unique': 'True', 'max_length': '64'}),
+            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'cc6d47586c64453095aa3b91e51cb5d6165a907f57a24ead9f3a2133d61e1bac'"}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'homepage_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'default': "'Violety Elina'", 'max_length': '64', 'blank': 'True'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'privacy_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
+            'redirect_uris': ('django.db.models.fields.TextField', [], {}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'terms_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.apiauthorization': {
+            'Meta': {'unique_together': "(('user', 'application'),)", 'object_name': 'ApiAuthorization'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apigrant': {
+            'Meta': {'object_name': 'ApiGrant'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']"}),
+            'code': ('django.db.models.fields.CharField', [], {'default': "'51d84b7be94e412e876363fb3665d927'", 'max_length': '64', 'db_index': 'True'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 3, 18, 0, 0)', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'redirect_uri': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.apitoken': {
+            'Meta': {'object_name': 'ApiToken'},
+            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 4, 17, 0, 0)', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'5f8a636db521412f94405c0bf9395b2954a3c9954ff843b98b4adece64377948'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'token': ('django.db.models.fields.CharField', [], {'default': "'8f59b015ee624158b8b5ebea24afde845b0d7e115e1f469d83532ce3b573df48'", 'unique': 'True', 'max_length': '64'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
+            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
+            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.authenticator': {
+            'Meta': {'unique_together': "(('user', 'type'),)", 'object_name': 'Authenticator', 'db_table': "'auth_authenticator'"},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {}),
+            'created_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'last_used_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authidentity': {
+            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
+            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
+            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.authprovider': {
+            'Meta': {'object_name': 'AuthProvider'},
+            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 3, 25, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.broadcastseen': {
+            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
+            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
+            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.commit': {
+            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'Commit', 'index_together': "(('repository_id', 'date_added'),)"},
+            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.commitauthor': {
+            'Meta': {'unique_together': "(('organization_id', 'email'),)", 'object_name': 'CommitAuthor'},
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.commitfilechange': {
+            'Meta': {'unique_together': "(('commit', 'filename'),)", 'object_name': 'CommitFileChange'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'filename': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '1'})
+        },
+        'sentry.counter': {
+            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
+            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.deploy': {
+            'Meta': {'object_name': 'Deploy'},
+            'date_finished': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry.dsymbundle': {
+            'Meta': {'object_name': 'DSymBundle'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'sdk': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymSDK']"})
+        },
+        'sentry.dsymobject': {
+            'Meta': {'object_name': 'DSymObject'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_path': ('django.db.models.fields.TextField', [], {'db_index': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'}),
+            'vmaddr': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'vmsize': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'})
+        },
+        'sentry.dsymsdk': {
+            'Meta': {'object_name': 'DSymSDK', 'index_together': "[('version_major', 'version_minor', 'version_patchlevel', 'version_build')]"},
+            'dsym_type': ('django.db.models.fields.CharField', [], {'max_length': '20', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'sdk_name': ('django.db.models.fields.CharField', [], {'max_length': '20'}),
+            'version_build': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'version_major': ('django.db.models.fields.IntegerField', [], {}),
+            'version_minor': ('django.db.models.fields.IntegerField', [], {}),
+            'version_patchlevel': ('django.db.models.fields.IntegerField', [], {})
+        },
+        'sentry.dsymsymbol': {
+            'Meta': {'unique_together': "[('object', 'address')]", 'object_name': 'DSymSymbol'},
+            'address': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'symbol': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.environment': {
+            'Meta': {'unique_together': "(('project_id', 'name'),)", 'object_name': 'Environment'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'through': "orm['sentry.EnvironmentProject']", 'symmetrical': 'False'})
+        },
+        'sentry.environmentproject': {
+            'Meta': {'unique_together': "(('project', 'environment'),)", 'object_name': 'EnvironmentProject'},
+            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventprocessingissue': {
+            'Meta': {'unique_together': "(('raw_event', 'processing_issue'),)", 'object_name': 'EventProcessingIssue'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'processing_issue': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProcessingIssue']"}),
+            'raw_event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.RawEvent']"})
+        },
+        'sentry.eventtag': {
+            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag', 'index_together': "(('project_id', 'key_id', 'value_id'), ('group_id', 'key_id', 'value_id'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {'unique_together': "(('project', 'ident'), ('project', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
+        },
+        'sentry.file': {
+            'Meta': {'object_name': 'File'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
+            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True'}),
+            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.fileblob': {
+            'Meta': {'object_name': 'FileBlob'},
+            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
+        },
+        'sentry.fileblobindex': {
+            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
+            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.globaldsymfile': {
+            'Meta': {'object_name': 'GlobalDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'uuid': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '36'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'short_id'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'short_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupcommitresolution': {
+            'Meta': {'unique_together': "(('group_id', 'commit_id'),)", 'object_name': 'GroupCommitResolution'},
+            'commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.groupemailthread': {
+            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
+            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupredirect': {
+            'Meta': {'object_name': 'GroupRedirect'},
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'unique': 'True'})
+        },
+        'sentry.grouprelease': {
+            'Meta': {'unique_together': "(('group_id', 'release_id', 'environment'),)", 'object_name': 'GroupRelease'},
+            'environment': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.groupresolution': {
+            'Meta': {'object_name': 'GroupResolution'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.groupsnooze': {
+            'Meta': {'object_name': 'GroupSnooze'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'until': ('django.db.models.fields.DateTimeField', [], {})
+        },
+        'sentry.groupsubscription': {
+            'Meta': {'unique_together': "(('group', 'user'),)", 'object_name': 'GroupSubscription'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
+            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('group', 'key', 'value'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'", 'index_together': "(('project', 'key', 'value', 'last_seen'),)"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationavatar': {
+            'Meta': {'object_name': 'OrganizationAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.Organization']"})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.organizationonboardingtask': {
+            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.organizationoption': {
+            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.processingissue': {
+            'Meta': {'unique_together': "(('project', 'checksum', 'type'),)", 'object_name': 'ProcessingIssue'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '30'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'null': 'True'}),
+            'forced_color': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.projectdsymfile': {
+            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'ProjectDSymFile'},
+            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36'})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.projectplatform': {
+            'Meta': {'unique_together': "(('project_id', 'platform'),)", 'object_name': 'ProjectPlatform'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.rawevent': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'RawEvent'},
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('organization', 'version'),)", 'object_name': 'Release'},
+            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'through': "orm['sentry.ReleaseProject']", 'to': "orm['sentry.Project']"}),
+            'ref': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.releasecommit': {
+            'Meta': {'unique_together': "(('release', 'commit'), ('release', 'order'))", 'object_name': 'ReleaseCommit'},
+            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseenvironment': {
+            'Meta': {'unique_together': "(('project_id', 'release_id', 'environment_id'),)", 'object_name': 'ReleaseEnvironment', 'db_table': "'sentry_environmentrelease'"},
+            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
+            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
+        },
+        'sentry.releasefile': {
+            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.releaseproject': {
+            'Meta': {'unique_together': "(('project', 'release'),)", 'object_name': 'ReleaseProject', 'db_table': "'sentry_release_project'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
+        },
+        'sentry.repository': {
+            'Meta': {'unique_together': "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))", 'object_name': 'Repository'},
+            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
+            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
+        },
+        'sentry.reprocessingreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'ReprocessingReport'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.savedsearch': {
+            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.savedsearchuserdefault': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'SavedSearchUserDefault', 'db_table': "'sentry_savedsearch_userdefault'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'savedsearch': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.SavedSearch']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'session_nonce': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useravatar': {
+            'Meta': {'object_name': 'UserAvatar'},
+            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
+            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.useremail': {
+            'Meta': {'unique_together': "(('user', 'email'),)", 'object_name': 'UserEmail'},
+            'date_hash_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'GpzjUcZWuzsrugQjpG1EqbFz98s6GcyW'", 'max_length': '32'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 3e8a1e6221..62b1fd216f 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -68,10 +68,10 @@ const HomeSidebar = React.createClass({
                   </a>
                 </li>
               }
-              {features.has('sso') && access.has('org:delete') &&
+              {features.has('sso') && access.has('org:admin') &&
                 <li><a href={`/organizations/${orgId}/auth/`}>{t('Auth')}</a></li>
               }
-              {access.has('org:delete') && features.has('api-keys') &&
+              {access.has('org:admin') && features.has('api-keys') &&
                 <li><a href={`/organizations/${orgId}/api-keys/`}>{t('API Keys')}</a></li>
               }
               {access.has('org:write') &&
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 11c0ebe6f7..de233c1969 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -3,8 +3,13 @@ import {Redirect, Route, IndexRoute, IndexRedirect} from 'react-router';
 
 import HookStore from './stores/hookStore';
 
-import ApiDashboard from './views/apiDashboard';
+import AccountAuthorizations from './views/accountAuthorizations';
+import AccountLayout from './views/accountLayout';
+import ApiApplications from './views/apiApplications';
+import ApiApplicationDetails from './views/apiApplicationDetails';
+import ApiLayout from './views/apiLayout';
 import ApiNewToken from './views/apiNewToken';
+import ApiTokens from './views/apiTokens';
 import Admin from './views/admin';
 import AdminBuffer from './views/adminBuffer';
 import AdminOrganizations from './views/adminOrganizations';
@@ -94,7 +99,16 @@ function routes() {
 
   return (
     <Route path="/" component={errorHandler(App)}>
-      <Route path="/api/" component={errorHandler(ApiDashboard)} />
+      <Route path="/account/" component={errorHandler(AccountLayout)}>
+        <Route path="authorizations/" component={errorHandler(AccountAuthorizations)} />
+      </Route>
+
+      <Route path="/api/" component={errorHandler(ApiLayout)}>
+        <IndexRoute component={errorHandler(ApiTokens)} />
+        <Route path="applications/" component={errorHandler(ApiApplications)} />
+        <Route path="applications/:appId/" component={errorHandler(ApiApplicationDetails)} />
+      </Route>
+
       <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
 
       <Route path="/manage/" component={errorHandler(Admin)}>
diff --git a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
new file mode 100644
index 0000000000..9b335ca586
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
@@ -0,0 +1,186 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+
+import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const AuthorizationRow = React.createClass({
+  propTypes: {
+    authorization: React.PropTypes.object.isRequired,
+    onRevoke: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+    };
+  },
+
+  onRevoke() {
+    if (this.state.loading) return;
+
+    let {authorization} = this.props;
+
+    this.setState({
+      loading: true,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      this.api.request('/api-authorizations/', {
+        method: 'DELETE',
+        data: {authorization: authorization.id},
+        success: (data) => {
+          IndicatorStore.remove(loadingIndicator);
+          this.props.onRevoke();
+        },
+        error: () => {
+          IndicatorStore.remove(loadingIndicator);
+          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+        }
+      });
+    });
+  },
+
+  render() {
+    let authorization = this.props.authorization;
+
+    let btnClassName = 'btn btn-default';
+    if (this.state.loading)
+      btnClassName += ' disabled';
+
+    return (
+      <tr>
+        <td>
+          <h5 style={{marginBottom: 5}}>{authorization.application.name}</h5>
+          {authorization.homepageUrl &&
+            <div style={{marginBottom: 5}}>
+              <small><a href={authorization.homepageUrl}>{authorization.homepageUrl}</a></small>
+            </div>
+          }
+          <div>
+            <small style={{color: '#999'}}>{authorization.scopes.join(', ')}</small>
+          </div>
+        </td>
+        <td style={{width: 32}}>
+          <a onClick={this.onRevoke.bind(this, authorization)}
+             className={btnClassName}
+             disabled={this.state.loading}>
+            <span className="icon icon-trash" />
+          </a>
+        </td>
+      </tr>
+    );
+  }
+});
+
+const AccountAuthorizations = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      authorizationList: [],
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+    });
+
+    this.api.request('/api-authorizations/', {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          loading: false,
+          error: false,
+          authorizationList: data
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  onRevoke(authorization) {
+    this.setState({
+      authorizationList: this.state.authorizationList.filter(
+        (a) => a.id !== authorization.id
+      ),
+    });
+  },
+
+  renderResults() {
+    let {authorizationList} = this.state;
+    if (authorizationList.length === 0) {
+      return (
+        <table className="table">
+          <tbody>
+            <tr colSpan="2">
+              <td className="blankslate well">
+                {t('You haven\'t approved any third party applications.')}
+              </td>
+            </tr>
+          </tbody>
+        </table>
+      );
+    }
+
+    return (
+      <div>
+        <h4>Approved Applications</h4>
+        <table className="table">
+          <tbody>
+          {authorizationList.map((authorization) => {
+            return (
+              <AuthorizationRow
+                key={authorization.id}
+                authorization={authorization}
+                onRevoke={this.onRevoke.bind(this, authorization)} />
+            );
+          })}
+          </tbody>
+        </table>
+      </div>
+    );
+  },
+
+  getTitle() {
+    return 'Approved Applications - Sentry';
+  },
+
+  render() {
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        <div>
+          {(this.state.loading ?
+            <LoadingIndicator />
+          : (this.state.error ?
+            <LoadingError onRetry={this.fetchData} />
+          :
+            this.renderResults()
+          ))}
+          <p><small>You can manage your own applications via the <a href="/api/">API dashboard</a>.</small></p>
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
+
+export default AccountAuthorizations;
diff --git a/src/sentry/static/sentry/app/views/accountLayout.jsx b/src/sentry/static/sentry/app/views/accountLayout.jsx
new file mode 100644
index 0000000000..7fa51f7d32
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/accountLayout.jsx
@@ -0,0 +1,46 @@
+import React from 'react';
+
+import DropdownLink from '../components/dropdownLink';
+import MenuItem from '../components/menuItem';
+import NarrowLayout from '../components/narrowLayout';
+import {t} from '../locale';
+
+const AccountLayout = React.createClass({
+  render() {
+    let header = (
+      <div>
+        <div className="pull-right">
+          <a href="/account/logout/">{t('Sign out')}</a>
+        </div>
+        <a href="/">
+          <span className="icon-sentry-logo"></span>
+          <span className="back-to">{t('Back to organization')}</span>
+        </a>
+      </div>
+    );
+
+    return (
+      <NarrowLayout header={header}>
+        <h3>{t('My Settings')}</h3>
+        <DropdownLink topLevelClasses="anchor-right pull-right" title={t('More')}>
+          <MenuItem to="/account/authorizations/">{t('Authorized Applications')}</MenuItem>
+          <MenuItem href="/account/settings/identities/">{t('Identities')}</MenuItem>
+          <MenuItem href="/account/remove/">{t('Close Account')}</MenuItem>
+        </DropdownLink>
+        <ul className="nav nav-tabs border-bottom">
+          <li><a href="/account/settings/">{t('Account')}</a></li>
+          <li><a href="/account/settings/avatar/">{t('Avatar')}</a></li>
+          <li><a href="/account/settings/appearance/">{t('Appearance')}</a></li>
+          <li><a href="/account/settings/notifications/">{t('Notifications')}</a></li>
+          <li><a href="/account/settings/emails/">{t('Emails')}</a></li>
+          <li><a href="/account/settings/security/">{t('Security')}</a></li>
+          <li><a href="/account/settings/subscriptions/">{t('Subscriptions')}</a></li>
+        </ul>
+        {this.props.children}
+      </NarrowLayout>
+    );
+  }
+});
+
+export default AccountLayout;
+
diff --git a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
new file mode 100644
index 0000000000..3aa92e49ef
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
@@ -0,0 +1,260 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+
+import ApiMixin from '../mixins/apiMixin';
+import AutoSelectText from '../components/autoSelectText';
+import ConfigStore from '../stores/configStore';
+import {FormState, TextField, TextareaField} from '../components/forms';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const ApiApplicationDetails = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.object.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      app: null,
+      formData: null,
+      errors: {},
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  getFormData(app) {
+    return {
+      name: app.name,
+      homepageUrl: app.homepageUrl,
+      privacyUrl: app.privacyUrl,
+      termsUrl: app.termsUrl,
+      allowedOrigins: app.allowedOrigins.join('\n'),
+      redirectUris: app.redirectUris.join('\n'),
+    };
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+    });
+
+    this.api.request(`/api-applications/${this.props.params.appId}/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          loading: false,
+          error: false,
+          app: data,
+          formData: {...this.getFormData(data)},
+          errors: {},
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  onFieldChange(name, value) {
+    let formData = this.state.formData;
+    formData[name] = value;
+    this.setState({
+      formData: formData,
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      state: FormState.SAVING,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      let formData = this.state.formData;
+      this.api.request(`/api-applications/${this.props.params.appId}/`, {
+        method: 'PUT',
+        data: {
+          ...formData,
+          allowedOrigins: formData.allowedOrigins.split('\n').filter(v => v),
+          redirectUris: formData.redirectUris.split('\n').filter(v => v),
+        },
+        success: (data) => {
+          IndicatorStore.remove(loadingIndicator);
+          this.setState({
+            state: FormState.READY,
+            formData: {...this.getFormData(data)},
+            errors: {},
+          });
+          this.context.router.push('/api/applications/');
+        },
+        error: (error) => {
+          IndicatorStore.remove(loadingIndicator);
+          this.setState({
+            state: FormState.ERROR,
+            errors: error.responseJSON,
+          });
+        },
+      });
+    });
+  },
+
+  onRemoveApplication(app) {
+
+  },
+
+  getTitle() {
+    return 'Application Details - Sentry';
+  },
+
+  render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    let app = this.state.app;
+    let isSaving = this.state.state === FormState.SAVING;
+    let errors = this.state.errors;
+
+    let urlPrefix = ConfigStore.get('urlPrefix');
+
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        <div>
+          <form onSubmit={this.onSubmit} className="form-stacked">
+            <h4>Application Details</h4>
+            {this.state.state === FormState.ERROR &&
+              <div className="alert alert-error alert-block">
+                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
+              </div>
+            }
+            <fieldset>
+              <TextField
+                key="name"
+                name="name"
+                label={t('Name')}
+                placeholder={t('e.g. My Application')}
+                value={this.state.formData.name}
+                required={true}
+                error={errors.name}
+                onChange={this.onFieldChange.bind(this, 'name')} />
+              <TextField
+                key="homepageUrl"
+                name="homepageUrl"
+                label={t('Homepage')}
+                placeholder={t('e.g. http://example.com')}
+                value={this.state.formData.homepageUrl}
+                help="An optional link to your website's homepage"
+                required={false}
+                error={errors.homepageUrl}
+                onChange={this.onFieldChange.bind(this, 'homepageUrl')} />
+              <TextField
+                key="privacyUrl"
+                name="privacyUrl"
+                label={t('Privacy Policy')}
+                placeholder={t('e.g. http://example.com/privacy')}
+                value={this.state.formData.privacyUrl}
+                help="An optional link to your Privacy Policy"
+                required={false}
+                error={errors.privacyUrl}
+                onChange={this.onFieldChange.bind(this, 'privacyUrl')} />
+              <TextField
+                key="termsUrl"
+                name="termsUrl"
+                label={t('Terms of Service')}
+                placeholder={t('e.g. http://example.com/terms')}
+                value={this.state.formData.termsUrl}
+                help="An optional link to your Terms of Service"
+                required={false}
+                error={errors.termsUrl}
+                onChange={this.onFieldChange.bind(this, 'termsUrl')} />
+            </fieldset>
+            <fieldset>
+              <legend>Credentials</legend>
+              <div className="control-group">
+                <label htmlFor="api-key">Client ID</label>
+                <div className="form-control disabled">
+                  <AutoSelectText>{app.clientID}</AutoSelectText>
+                </div>
+              </div>
+              <div className="control-group">
+                <label htmlFor="api-key">Client Secret</label>
+                <div className="form-control disabled">
+                  {app.clientSecret ?
+                    <AutoSelectText>{app.clientSecret}</AutoSelectText>
+                  :
+                    <em>hidden</em>
+                  }
+                </div>
+                <p className="help-block">
+                  Your secret is only available briefly after application creation. Make sure to save this value!
+                </p>
+              </div>
+
+              <div className="control-group">
+                <label htmlFor="api-key">Authorization URL</label>
+                <div className="form-control disabled">
+                  <AutoSelectText>{`${urlPrefix}/oauth/authorize/`}</AutoSelectText>
+                </div>
+              </div>
+
+              <div className="control-group">
+                <label htmlFor="api-key">Token URL</label>
+                <div className="form-control disabled">
+                  <AutoSelectText>{`${urlPrefix}/oauth/token/`}</AutoSelectText>
+                </div>
+              </div>
+            </fieldset>
+            <fieldset>
+              <legend>Security</legend>
+              <TextareaField
+                key="redirectUris"
+                name="redirectUris"
+                label={t('Authorized Redirect URIs')}
+                value={this.state.formData.redirectUris}
+                required={false}
+                help={t('Separate multiple entries with a newline.')}
+                placeholder={t('e.g. https://example.com/oauth/complete')}
+                error={errors.redirectUris}
+                onChange={this.onFieldChange.bind(this, 'redirectUris')} />
+              <TextareaField
+                key="allowedOrigins"
+                name="allowedOrigins"
+                label={t('Authorized JavaScript Origins')}
+                value={this.state.formData.allowedOrigins}
+                required={false}
+                help={t('Separate multiple entries with a newline.')}
+                placeholder={t('e.g. example.com')}
+                error={errors.allowedOrigins}
+                onChange={this.onFieldChange.bind(this, 'allowedOrigins')} />
+            </fieldset>
+            <fieldset className="form-actions">
+              <button type="submit" className="btn btn-primary"
+                    disabled={isSaving}>{t('Save Changes')}</button>
+            </fieldset>
+          </form>
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
+
+export default ApiApplicationDetails;
diff --git a/src/sentry/static/sentry/app/views/apiApplications.jsx b/src/sentry/static/sentry/app/views/apiApplications.jsx
new file mode 100644
index 0000000000..d0419a5907
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/apiApplications.jsx
@@ -0,0 +1,194 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+import {Link} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const ApiApplicationRow = React.createClass({
+  propTypes: {
+    app: React.PropTypes.object.isRequired,
+    onRemove: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+    };
+  },
+
+  onRemove() {
+    if (this.state.loading) return;
+
+    let app = this.props.app;
+
+    this.setState({
+      loading: true,
+    }, () => {
+      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+      this.api.request(`/api-applications/${app.id}/`, {
+        method: 'DELETE',
+        success: (data) => {
+          IndicatorStore.remove(loadingIndicator);
+          this.props.onRemove();
+        },
+        error: () => {
+          IndicatorStore.remove(loadingIndicator);
+          IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error', {
+            duration: 3000
+          });
+        }
+      });
+    });
+  },
+
+  render() {
+    let app = this.props.app;
+
+    let btnClassName = 'btn btn-default';
+    if (this.state.loading)
+      btnClassName += ' disabled';
+
+    return (
+      <tr>
+        <td>
+          <h4 style={{marginBottom: 5}}>
+            <Link to={`/api/applications/${app.id}/`}>{app.name}</Link>
+          </h4>
+          <small style={{color: '#999'}}>{app.clientID}</small>
+        </td>
+        <td style={{width: 32}}>
+          <a onClick={this.onRemove.bind(this, app)}
+             className={btnClassName}
+             disabled={this.state.loading}>
+            <span className="icon icon-trash" />
+          </a>
+        </td>
+      </tr>
+    );
+  }
+});
+
+const ApiApplications = React.createClass({
+  contextTypes: {
+    router: React.PropTypes.object.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      appList: [],
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+    });
+
+    this.api.request('/api-applications/', {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          loading: false,
+          error: false,
+          appList: data
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  createApplication() {
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request('/api-applications/', {
+      method: 'POST',
+      success: (app) => {
+        IndicatorStore.remove(loadingIndicator);
+        this.context.router.push(`/api/applications/${app.id}/`);
+      },
+      error: (error) => {
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error');
+      }
+    });
+  },
+
+  onRemoveApplication(app) {
+    this.setState({
+      appList: this.state.appList.filter((a) => a.id !== app.id),
+    });
+  },
+
+  renderResults() {
+    if (this.state.appList.length === 0) {
+      return (
+        <tr colSpan="2">
+          <td className="blankslate well">
+            {t('You haven\'t created any applications yet.')}
+          </td>
+        </tr>
+      );
+    }
+
+    return this.state.appList.map((app) => {
+      return (
+        <ApiApplicationRow
+          key={app.id}
+          app={app}
+          onRemove={this.onRemoveApplication.bind(this, app)} />
+      );
+    });
+  },
+
+  getTitle() {
+    return 'API Applications - Sentry';
+  },
+
+  render() {
+    return (
+      <DocumentTitle title={this.getTitle()}>
+        <div>
+          <table className="table">
+            <tbody>
+              {(this.state.loading ?
+                <tr><td colSpan="2"><LoadingIndicator /></td></tr>
+              : (this.state.error ?
+                <tr><td colSpan="2"><LoadingError onRetry={this.fetchData} /></td></tr>
+              :
+                this.renderResults()
+              ))}
+            </tbody>
+          </table>
+
+          <div className="form-actions" style={{textAlign: 'right'}}>
+            <a className="btn btn-primary ref-create-application"
+               onClick={this.createApplication}>{t('Create New Application')}</a>
+          </div>
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
+
+export default ApiApplications;
diff --git a/src/sentry/static/sentry/app/views/apiLayout.jsx b/src/sentry/static/sentry/app/views/apiLayout.jsx
new file mode 100644
index 0000000000..2ca1f24555
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/apiLayout.jsx
@@ -0,0 +1,23 @@
+import React from 'react';
+
+import ListLink from '../components/listLink';
+import NarrowLayout from '../components/narrowLayout';
+import {t} from '../locale';
+
+const ApiDashboard = React.createClass({
+  render() {
+    return (
+      <NarrowLayout>
+        <h3>{t('Sentry Web API')}</h3>
+        <ul className="nav nav-tabs border-bottom">
+          <ListLink to="/api/" index={true}>{t('Auth Tokens')}</ListLink>
+          <ListLink to="/api/applications/">{t('Applications')}</ListLink>
+        </ul>
+        {this.props.children}
+      </NarrowLayout>
+    );
+  }
+});
+
+export default ApiDashboard;
+
diff --git a/src/sentry/static/sentry/app/views/apiNewToken.jsx b/src/sentry/static/sentry/app/views/apiNewToken.jsx
index 22e8d9f765..daba2839bc 100644
--- a/src/sentry/static/sentry/app/views/apiNewToken.jsx
+++ b/src/sentry/static/sentry/app/views/apiNewToken.jsx
@@ -11,25 +11,23 @@ import {t, tct} from '../locale';
 const SCOPES = new Set([
   'project:read',
   'project:write',
-  'project:delete',
+  'project:admin',
   'project:releases',
   'team:read',
   'team:write',
-  'team:delete',
+  'team:admin',
   'event:read',
-  'event:write',
-  'event:delete',
+  'event:admin',
   'org:read',
   'org:write',
-  'org:delete',
+  'org:admin',
   'member:read',
-  'member:write',
-  'member:delete'
+  'member:admin'
 ]);
 
 const DEFAULT_SCOPES = new Set([
   'event:read',
-  'event:write',
+  'event:admin',
   'project:read',
   'project:releases',
   'org:read',
diff --git a/src/sentry/static/sentry/app/views/apiDashboard.jsx b/src/sentry/static/sentry/app/views/apiTokens.jsx
similarity index 66%
rename from src/sentry/static/sentry/app/views/apiDashboard.jsx
rename to src/sentry/static/sentry/app/views/apiTokens.jsx
index 2d19389ff1..767875d0eb 100644
--- a/src/sentry/static/sentry/app/views/apiDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/apiTokens.jsx
@@ -4,11 +4,10 @@ import {Link} from 'react-router';
 
 import ApiMixin from '../mixins/apiMixin';
 import AutoSelectText from '../components/autoSelectText';
+import DateTime from '../components/dateTime';
 import IndicatorStore from '../stores/indicatorStore';
-import ListLink from '../components/listLink';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
-import NarrowLayout from '../components/narrowLayout';
 import {t, tct} from '../locale';
 
 const ApiTokenRow = React.createClass({
@@ -38,10 +37,12 @@ const ApiTokenRow = React.createClass({
         method: 'DELETE',
         data: {token: token.token},
         success: (data) => {
+          IndicatorStore.remove(loadingIndicator);
           this.props.onRemove();
         },
-        complete: () => {
+        error: () => {
           IndicatorStore.remove(loadingIndicator);
+          IndicatorStore.add(t('Unable to remove token. Please try again.'), 'error');
         }
       });
     });
@@ -57,8 +58,15 @@ const ApiTokenRow = React.createClass({
     return (
       <tr>
         <td>
-          <small><AutoSelectText>{token.token}</AutoSelectText></small>
-          <small style={{color: '#999'}}>{token.scopes.join(', ')}</small>
+          <div style={{marginBottom: 5}}>
+            <small><AutoSelectText>{token.token}</AutoSelectText></small>
+          </div>
+          <div style={{marginBottom: 5}}>
+            <small>Created <DateTime value={token.dateCreated} /></small>
+          </div>
+          <div>
+            <small style={{color: '#999'}}>{token.scopes.join(', ')}</small>
+          </div>
         </td>
         <td style={{width: 32}}>
           <a onClick={this.onRemove.bind(this, token)}
@@ -72,7 +80,7 @@ const ApiTokenRow = React.createClass({
   }
 });
 
-const ApiDashboard = React.createClass({
+const ApiTokens = React.createClass({
   mixins: [ApiMixin],
 
   getInitialState() {
@@ -120,38 +128,48 @@ const ApiDashboard = React.createClass({
   },
 
   renderResults() {
-    if (this.state.tokenList.length === 0) {
+    let {tokenList} = this.state;
+
+    if (tokenList.length === 0) {
       return (
-        <tr colSpan="2">
-          <td className="blankslate well">
-            {t('You haven\'t created any authentication tokens yet.')}
-          </td>
-        </tr>
+        <table className="table">
+          <tbody>
+            <tr colSpan="2">
+              <td className="blankslate well">
+                {t('You haven\'t created any authentication tokens yet.')}
+              </td>
+            </tr>
+          </tbody>
+        </table>
       );
     }
 
-    return this.state.tokenList.map((token) => {
-      return (
-        <ApiTokenRow
-          key={token.token}
-          token={token}
-          onRemove={this.onRemoveToken.bind(this, token)} />
-      );
-    });
+    return (
+      <div>
+        <table className="table">
+          <tbody>
+          {tokenList.map((token) => {
+            return (
+              <ApiTokenRow
+                key={token.token}
+                token={token}
+                onRemove={this.onRemoveToken.bind(this, token)} />
+            );
+          })}
+          </tbody>
+        </table>
+      </div>
+    );
   },
 
   getTitle() {
-    return 'Sentry API';
+    return 'API Tokens - Sentry';
   },
 
   render() {
     return (
       <DocumentTitle title={this.getTitle()}>
-        <NarrowLayout>
-          <h3>{t('Sentry Web API')}</h3>
-          <ul className="nav nav-tabs border-bottom">
-            <ListLink to="/api/">{t('Auth Tokens')}</ListLink>
-          </ul>
+        <div>
           <p>{t('Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They\'re the easiest way to get started using the API.')}</p>
           <p>{tct('For more information on how to use the web API, see our [link:documentation].', {
             link: <a href="https://docs.sentry.io/hosted/api/" />
@@ -159,26 +177,21 @@ const ApiDashboard = React.createClass({
 
           <p><small>psst. Looking for the <strong>DSN</strong> for an SDK? You'll find that under <strong>[Project] &raquo; Settings &raquo; Client Keys</strong>.</small></p>
 
-          <table className="table" style={{wordBreak: 'break-word'}}>
-            <tbody>
-              {(this.state.loading ?
-                <tr><td colSpan="2"><LoadingIndicator /></td></tr>
-              : (this.state.error ?
-                <tr><td colSpan="2"><LoadingError onRetry={this.fetchData} /></td></tr>
-              :
-                this.renderResults()
-              ))}
-            </tbody>
-          </table>
+          {(this.state.loading ?
+            <LoadingIndicator />
+          : (this.state.error ?
+            <LoadingError onRetry={this.fetchData} />
+          :
+            this.renderResults()
+          ))}
 
           <div className="form-actions" style={{textAlign: 'right'}}>
-            <Link to="/api/new-token/" className="btn btn-primary">{t('Create New Token')}</Link>
+            <Link to="/api/new-token/" className="btn btn-primary ref-create-token">{t('Create New Token')}</Link>
           </div>
-        </NarrowLayout>
+        </div>
       </DocumentTitle>
     );
   }
 });
 
-export default ApiDashboard;
-
+export default ApiTokens;
diff --git a/src/sentry/static/sentry/app/views/organizationSettings.jsx b/src/sentry/static/sentry/app/views/organizationSettings.jsx
index a2e051c777..950922fa28 100644
--- a/src/sentry/static/sentry/app/views/organizationSettings.jsx
+++ b/src/sentry/static/sentry/app/views/organizationSettings.jsx
@@ -48,7 +48,7 @@ const OrganizationSettingsForm = React.createClass({
       safeFields: data.safeFields.join('\n'),
       sensitiveFields: data.sensitiveFields.join('\n'),
     };
-    if (this.props.access.has('org:delete')) {
+    if (this.props.access.has('org:admin')) {
       result.defaultRole = data.defaultRole;
     }
     return result;
@@ -170,7 +170,7 @@ const OrganizationSettingsForm = React.createClass({
 
           <legend>{t('Membership')}</legend>
 
-          {access.has('org:delete') &&
+          {access.has('org:admin') &&
             <Select2Field
               key="defaultRole"
               name="defaultRole"
@@ -338,7 +338,7 @@ const OrganizationSettings = React.createClass({
           </div>
         </div>
 
-        {access.has('org:delete') && !data.isDefault &&
+        {access.has('org:admin') && !data.isDefault &&
           <div className="box">
             <div className="box-header">
               <h3>{t('Remove Organization')}</h3>
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index 4310d9c558..a1ed4cbe35 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -86,7 +86,7 @@ const TeamDetails = React.createClass({
       <OrganizationHomeContainer>
         <h3>{team.name}</h3>
 
-        {access.has('team:delete') &&
+        {access.has('team:admin') &&
           <DropdownLink topLevelClasses="pull-right anchor-right" className="dropdown-menu-right" title={t('More')}>
             <MenuItem href={`${routePrefix}/remove/`}>{t('Remove Team')}</MenuItem>
           </DropdownLink>
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index da6c9628be..41c3a5f7d8 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -320,6 +320,91 @@ def delete_tag_key(object_id, transaction_id=None, continuous=True, **kwargs):
     })
 
 
+@instrumented_task(name='sentry.tasks.deletion.delete_api_application', queue='cleanup',
+                   default_retry_delay=60 * 5, max_retries=None)
+@retry(exclude=(DeleteAborted,))
+def delete_api_application(object_id, transaction_id=None, continuous=True,
+                           **kwargs):
+    from sentry.models import ApiApplication, ApiApplicationStatus, ApiGrant
+
+    try:
+        app = ApiApplication.objects.get(id=object_id)
+    except ApiApplication.DoesNotExist:
+        return
+
+    if app.status == ApiApplicationStatus.active:
+        raise DeleteAborted
+
+    if app.status != ApiApplicationStatus.deletion_in_progress:
+        app.update(status=ApiApplicationStatus.deletion_in_progress)
+
+    has_more = revoke_api_tokens(object_id)
+    if has_more:
+        if continuous:
+            delete_api_application.apply_async(
+                kwargs={
+                    'object_id': object_id,
+                    'transaction_id': transaction_id,
+                },
+                countdown=15,
+            )
+        return
+
+    bulk_model_list = (ApiGrant,)
+    for model in bulk_model_list:
+        has_more = bulk_delete_objects(model, application_id=app.id,
+                                       logger=logger)
+        if has_more:
+            if continuous:
+                delete_api_application.apply_async(
+                    kwargs={
+                        'object_id': object_id,
+                        'transaction_id': transaction_id,
+                    },
+                    countdown=15,
+                )
+            return
+
+    app.delete()
+    logger.info('object.delete.executed', extra={
+        'object_id': object_id,
+        'transaction_id': transaction_id,
+        'model': ApiApplication.__name__,
+    })
+
+
+@instrumented_task(name='sentry.tasks.deletion.revoke_api_tokens', queue='cleanup',
+                   default_retry_delay=60 * 5, max_retries=None)
+@retry(exclude=(DeleteAborted,))
+def revoke_api_tokens(object_id, transaction_id=None, continuous=True,
+                      timestamp=None, **kwargs):
+    from sentry.models import ApiToken
+
+    queryset = ApiToken.objects.filter(
+        application=object_id,
+    )
+    if timestamp:
+        queryset = queryset.filter(date_added__lte=timestamp)
+
+    # we're using a slow deletion strategy to avoid a lot of custom code for
+    # mysql/postgres
+    has_more = False
+    for obj in queryset[:1000]:
+        obj.delete()
+        has_more = True
+
+    if has_more and continuous:
+        revoke_api_tokens.apply_async(
+            kwargs={
+                'object_id': object_id,
+                'transaction_id': transaction_id,
+                'timestamp': timestamp,
+            },
+            countdown=15,
+        )
+    return has_more
+
+
 @instrumented_task(name='sentry.tasks.deletion.generic_delete', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry(exclude=(DeleteAborted,))
diff --git a/src/sentry/templates/sentry/bases/account.html b/src/sentry/templates/sentry/bases/account.html
index a445f652f8..a1342df3bb 100644
--- a/src/sentry/templates/sentry/bases/account.html
+++ b/src/sentry/templates/sentry/bases/account.html
@@ -28,6 +28,8 @@
           More <i class="icon-arrow-down"></i>
         </a>
         <ul class="dropdown-menu dropdown-menu-right">
+          <li><a href="{% absolute_uri '/account/authorizations/' %}">{% trans "Authorized Applications" %}</a></li>
+          <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-identities' %}">{% trans "Identities" %}</a></li>
           <li><a href="{% url 'sentry-remove-account' %}">{% trans "Close Account" %}</a></li>
         </ul>
       </div>
@@ -37,9 +39,6 @@
         <li{% if page == 'appearance' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-appearance' %}">{% trans "Appearance" %}</a></li>
         <li{% if page == 'notifications' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-notifications' %}">{% trans "Notifications" %}</a></li>
         <li{% if page == 'emails' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-emails' %}">{% trans "Emails" %}</a></li>
-        {% if AUTH_PROVIDERS %}
-          <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-identities' %}">{% trans "Identities" %}</a></li>
-        {% endif %}
         <li{% if page == 'security' %} class="active"{% endif %}><a href="{% url 'sentry-account-security' %}">{% trans "Security" %}</a></li>
         {% if has_newsletters %}
           <li{% if page == 'subscriptions' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-subscriptions' %}">{% trans "Subscriptions" %}</a></li>
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index cb2d47613d..bdcce379c5 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -62,7 +62,7 @@
       </li>
       {% endfeature %}
     {% endif %}
-    {% if ACCESS.org_delete %}
+    {% if ACCESS.org_admin %}
       {% feature organizations:api-keys organization %}
         <li class="{% block org_apikeys_nav %}{% endblock %}">
           <a href="{% url 'sentry-organization-api-keys' organization.slug %}">
diff --git a/src/sentry/templates/sentry/oauth-authorize.html b/src/sentry/templates/sentry/oauth-authorize.html
new file mode 100644
index 0000000000..401ddca311
--- /dev/null
+++ b/src/sentry/templates/sentry/oauth-authorize.html
@@ -0,0 +1,40 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_auth %}
+{% load sentry_avatars %}
+
+{% block title %}{% trans "Authorize Application" %} | {{ block.super }}{% endblock %}
+
+{% block auth_main %}
+  <form class="form-stacked" action="." method="post" autocomplete="off">
+    {% csrf_token %}
+
+    <div>
+      <p><strong>{{ application.name }}</strong> is requesting access to your Sentry account ({{ user.username }}):</p>
+      <ul>
+        <li>Access to your account details, including your name and email address.</li>
+        {% for permission in permissions %}
+          <li>{{ permission }}</li>
+        {% endfor %}
+      </ul>
+      {% if application.terms_url or application.privacy_url %}
+        <p><small>
+          {% if application.terms_url %}
+            <a href="{{ application.terms_url }}">Terms of Use</a>
+            {% if application.privacy_url %} &mdash; {% endif %}
+          {% endif %}
+          {% if application.privacy_url %}
+            <a href="{{ application.privacy_url }}">Privacy Policy</a>
+          {% endif %}
+        </small></p>
+      {% endif %}
+    </div>
+
+    <fieldset class="form-actions">
+      <button type="submit" class="btn btn-primary" name="op" value="approve">{% trans "Approve" %}</button>
+      <button type="submit" class="btn btn-danger" name="op" value="deny">{% trans "Deny" %}</button>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/oauth-error.html b/src/sentry/templates/sentry/oauth-error.html
new file mode 100644
index 0000000000..c0cbd162cf
--- /dev/null
+++ b/src/sentry/templates/sentry/oauth-error.html
@@ -0,0 +1,20 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_auth %}
+
+{% block title %}{% trans "Authorization Error" %} | {{ block.super }}{% endblock %}
+
+{% block auth_main %}
+    <div style="font-size:24px;margin-bottom:10px">
+      <span class="icon-exclamation" style="font-size:20px;margin-right:10px;"></span>
+      <span>Authorization Error</span>
+    </div>
+
+    <p>We encountered the following error while trying to process your authorization:</p>
+
+    <ul>
+      <li>{{ error }}</li>
+    </ul>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 541b0c0199..b81678ff5a 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -94,7 +94,7 @@
         <h3>{% trans "Remove Project" %}</h3>
       </div>
       <div class="box-content with-padding">
-        {% if not ACCESS.project_delete %}
+        {% if not ACCESS.project_admin %}
         <p>{% trans "You do not have the required permission to remove this project." %}</p>
         {% elif project.is_internal_project %}
         <p>{% trans "This project cannot be removed. It is used internally by the Sentry server." %}</p>
diff --git a/src/sentry/utils/pytest/selenium.py b/src/sentry/utils/pytest/selenium.py
index b24c79706f..4d813d86fc 100644
--- a/src/sentry/utils/pytest/selenium.py
+++ b/src/sentry/utils/pytest/selenium.py
@@ -31,7 +31,7 @@ class Browser(object):
         """
         Return the absolute URI for a given route in Sentry.
         """
-        return '{}/{}'.format(self.live_server_url, path.strip('/').format(
+        return '{}/{}'.format(self.live_server_url, path.lstrip('/').format(
             *args, **kwargs
         ))
 
diff --git a/src/sentry/web/debug_urls.py b/src/sentry/web/debug_urls.py
new file mode 100644
index 0000000000..ca49c93df9
--- /dev/null
+++ b/src/sentry/web/debug_urls.py
@@ -0,0 +1,109 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, url
+from django.views.generic import TemplateView
+
+import sentry.web.frontend.debug.mail
+
+from sentry.web.frontend.debug.debug_assigned_email import (
+    DebugAssignedEmailView, DebugSelfAssignedEmailView
+)
+from sentry.web.frontend.debug.debug_trigger_error import (
+    DebugTriggerErrorView
+)
+from sentry.web.frontend.debug.debug_error_embed import (
+    DebugErrorPageEmbedView
+)
+from sentry.web.frontend.debug.debug_mfa_added_email import (
+    DebugMfaAddedEmailView
+)
+from sentry.web.frontend.debug.debug_mfa_removed_email import (
+    DebugMfaRemovedEmailView
+)
+from sentry.web.frontend.debug.debug_new_release_email import (
+    DebugNewReleaseEmailView
+)
+from sentry.web.frontend.debug.debug_note_email import DebugNoteEmailView
+from sentry.web.frontend.debug.debug_password_changed_email import (
+    DebugPasswordChangedEmailView
+)
+from sentry.web.frontend.debug.debug_regression_email import (
+    DebugRegressionEmailView, DebugRegressionReleaseEmailView
+)
+from sentry.web.frontend.debug.debug_resolved_email import (
+    DebugResolvedEmailView
+)
+from sentry.web.frontend.debug.debug_resolved_in_release_email import (
+    DebugResolvedInReleaseEmailView, DebugResolvedInReleaseUpcomingEmailView
+)
+from sentry.web.frontend.debug.debug_unassigned_email import (
+    DebugUnassignedEmailView
+)
+from sentry.web.frontend.debug import debug_auth_views
+from sentry.web.frontend.debug.debug_oauth_authorize import (
+    DebugOAuthAuthorizeView,
+    DebugOAuthAuthorizeErrorView,
+)
+
+
+urlpatterns = patterns(
+    '',
+    url(r'^debug/mail/alert/$',
+        sentry.web.frontend.debug.mail.alert),
+    url(r'^debug/mail/note/$',
+        DebugNoteEmailView.as_view()),
+    url(r'^debug/mail/new-release/$',
+        DebugNewReleaseEmailView.as_view()),
+    url(r'^debug/mail/assigned/$',
+        DebugAssignedEmailView.as_view()),
+    url(r'^debug/mail/assigned/self/$',
+        DebugSelfAssignedEmailView.as_view()),
+    url(r'^debug/mail/digest/$',
+        sentry.web.frontend.debug.mail.digest),
+    url(r'^debug/mail/report/$',
+        sentry.web.frontend.debug.mail.report),
+    url(r'^debug/mail/regression/$',
+        DebugRegressionEmailView.as_view()),
+    url(r'^debug/mail/regression/release/$',
+        DebugRegressionReleaseEmailView.as_view()),
+    url(r'^debug/mail/resolved/$',
+        DebugResolvedEmailView.as_view()),
+    url(r'^debug/mail/resolved-in-release/$',
+        DebugResolvedInReleaseEmailView.as_view()),
+    url(r'^debug/mail/resolved-in-release/upcoming/$',
+        DebugResolvedInReleaseUpcomingEmailView.as_view()),
+    url(r'^debug/mail/request-access/$',
+        sentry.web.frontend.debug.mail.request_access),
+    url(r'^debug/mail/access-approved/$',
+        sentry.web.frontend.debug.mail.access_approved),
+    url(r'^debug/mail/invitation/$',
+        sentry.web.frontend.debug.mail.invitation),
+    url(r'^debug/mail/confirm-email/$',
+        sentry.web.frontend.debug.mail.confirm_email),
+    url(r'^debug/mail/recover-account/$',
+        sentry.web.frontend.debug.mail.recover_account),
+    url(r'^debug/mail/unassigned/$',
+        DebugUnassignedEmailView.as_view()),
+    url(r'^debug/mail/org-delete-confirm/$',
+        sentry.web.frontend.debug.mail.org_delete_confirm),
+    url(r'^debug/mail/mfa-removed/$',
+        DebugMfaRemovedEmailView.as_view()),
+    url(r'^debug/mail/mfa-added/$',
+        DebugMfaAddedEmailView.as_view()),
+    url(r'^debug/mail/password-changed/$',
+        DebugPasswordChangedEmailView.as_view()),
+    url(r'^debug/embed/error-page/$',
+        DebugErrorPageEmbedView.as_view()),
+    url(r'^debug/trigger-error/$',
+        DebugTriggerErrorView.as_view()),
+    url(r'^debug/auth-confirm-identity/$',
+        debug_auth_views.DebugAuthConfirmIdentity.as_view()),
+    url(r'^debug/auth-confirm-link/$',
+        debug_auth_views.DebugAuthConfirmLink.as_view()),
+    url(r'^debug/oauth/authorize/$',
+        DebugOAuthAuthorizeView.as_view()),
+    url(r'^debug/oauth/authorize/error/$',
+        DebugOAuthAuthorizeErrorView.as_view()),
+    url(r'^debug/icons/$',
+        TemplateView.as_view(template_name='sentry/debug/icons.html')),
+)
diff --git a/src/sentry/web/frontend/account_notification.py b/src/sentry/web/frontend/account_notification.py
index f794da22c0..6ea9a2df36 100644
--- a/src/sentry/web/frontend/account_notification.py
+++ b/src/sentry/web/frontend/account_notification.py
@@ -7,7 +7,6 @@ from django.core.context_processors import csrf
 from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.views.decorators.cache import never_cache
-from django.views.decorators.csrf import csrf_protect
 from django.utils.decorators import method_decorator
 
 from sudo.decorators import sudo_required
@@ -30,7 +29,6 @@ from sentry.utils.safe import safe_execute
 class AccountNotificationView(BaseView):
     notification_settings_form = NotificationSettingsForm
 
-    @method_decorator(csrf_protect)
     @method_decorator(never_cache)
     @method_decorator(login_required)
     @method_decorator(sudo_required)
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index d42ec67fc8..8e5fe380d3 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -4,7 +4,6 @@ from django import forms
 from django.db import transaction
 from django.http import HttpResponseRedirect, Http404
 from django.core.urlresolvers import reverse
-from django.views.decorators.csrf import csrf_protect
 from django.views.decorators.cache import never_cache
 from django.utils.decorators import method_decorator
 from django.core.context_processors import csrf
@@ -38,7 +37,6 @@ class U2fForm(forms.Form):
 class TwoFactorSettingsView(BaseView):
     interface_id = None
 
-    @method_decorator(csrf_protect)
     @method_decorator(never_cache)
     @method_decorator(login_required)
     @method_decorator(sudo_required)
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 97328dad5d..5881e39574 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -379,7 +379,7 @@ class OrganizationView(BaseView):
         return (args, kwargs)
 
     def get_allowed_roles(self, request, organization, member=None):
-        can_admin = request.access.has_scope('member:delete')
+        can_admin = request.access.has_scope('member:admin')
 
         allowed_roles = []
         if can_admin and not request.is_superuser():
diff --git a/src/sentry/web/frontend/debug/debug_oauth_authorize.py b/src/sentry/web/frontend/debug/debug_oauth_authorize.py
new file mode 100644
index 0000000000..eed4cab633
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_oauth_authorize.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import, print_function
+
+from django.views.generic import View
+
+from sentry.models import ApiApplication
+from sentry.web.helpers import render_to_response
+
+
+class DebugOAuthAuthorizeView(View):
+    def get(self, request):
+        application = ApiApplication(
+            name='Example Application',
+            homepage_url='http://example.com',
+            terms_url='http://example.com/terms',
+            privacy_url='http://example.com/privacy',
+        )
+        return render_to_response('sentry/oauth-authorize.html', {
+            'user': request.user,
+            'application': application,
+            'scopes': ['org:read', 'project:write'],
+            'permissions': [
+                'Read access to organization details.',
+                'Read and write access to projects.',
+            ],
+        }, request)
+
+
+class DebugOAuthAuthorizeErrorView(View):
+    def get(self, request):
+        return render_to_response('sentry/oauth-error.html', {
+            'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
+        }, request)
diff --git a/src/sentry/web/frontend/debug/debuga_mfa_removed_email.py b/src/sentry/web/frontend/debug/debuga_mfa_removed_email.py
deleted file mode 100644
index 311b6c4a71..0000000000
--- a/src/sentry/web/frontend/debug/debuga_mfa_removed_email.py
+++ /dev/null
@@ -1,32 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.views.generic import View
-
-from sentry.models import Authenticator
-from sentry.security.emails import generate_security_email
-
-from .mail import MailPreview
-
-
-class DebugMfaRemovedEmailView(View):
-    def get(self, request):
-        authenticator = Authenticator(
-            id=0,
-            type=3,  # u2f
-            user=request.user,
-        )
-
-        email = generate_security_email(
-            account=request.user,
-            actor=request.user,
-            type='mfa-removed',
-            ip_address=request.META['REMOTE_ADDR'],
-            context={
-                'authenticator': authenticator,
-            },
-        )
-        return MailPreview(
-            html_template=email.html_template,
-            text_template=email.template,
-            context=email.context,
-        ).render(request)
diff --git a/src/sentry/web/frontend/oauth_authorize.py b/src/sentry/web/frontend/oauth_authorize.py
new file mode 100644
index 0000000000..3914276cb4
--- /dev/null
+++ b/src/sentry/web/frontend/oauth_authorize.py
@@ -0,0 +1,274 @@
+from __future__ import absolute_import, print_function
+
+import six
+
+from django.conf import settings
+from django.db import IntegrityError, transaction
+from django.db.models import F
+from django.utils import timezone
+from django.utils.safestring import mark_safe
+from django.views.decorators.cache import never_cache
+from operator import or_
+from six.moves import reduce
+from six.moves.urllib.parse import parse_qsl, urlencode, urlparse, urlunparse
+
+from sentry.models import (
+    ApiApplication, ApiApplicationStatus, ApiAuthorization, ApiGrant, ApiToken
+)
+from sentry.web.frontend.base import BaseView
+
+
+class OAuthAuthorizeView(BaseView):
+    @never_cache
+    def dispatch(self, request, *args, **kwargs):
+        with transaction.atomic():
+            return super(OAuthAuthorizeView, self).dispatch(
+                request, *args, **kwargs)
+
+    def redirect_response(self, response_type, redirect_uri, params):
+        if response_type == 'token':
+            return self.redirect('{}#{}'.format(
+                redirect_uri, urlencode([
+                    (k, v) for k, v in six.iteritems(params)
+                    if v is not None
+                ])
+            ))
+
+        parts = list(urlparse(redirect_uri))
+        query = parse_qsl(parts[4])
+        for key, value in six.iteritems(params):
+            if value is not None:
+                query.append((key, value))
+        parts[4] = urlencode(query)
+        return self.redirect(urlunparse(parts))
+
+    def error(self, response_type, redirect_uri, name, state=None):
+        return self.redirect_response(response_type, redirect_uri, {
+            'error': name,
+            'state': state,
+        })
+
+    def get(self, request):
+        response_type = request.GET.get('response_type')
+        client_id = request.GET.get('client_id')
+        redirect_uri = request.GET.get('redirect_uri')
+        scopes = request.GET.get('scope')
+        state = request.GET.get('state')
+        force_prompt = request.GET.get('force_prompt')
+
+        if not client_id:
+            return self.respond('sentry/oauth-error.html', {
+                'error': mark_safe('Missing or invalid <em>client_id</em> parameter.'),
+            })
+
+        try:
+            application = ApiApplication.objects.get(
+                client_id=client_id,
+                status=ApiApplicationStatus.active,
+            )
+        except ApiApplication.DoesNotExist:
+            return self.respond('sentry/oauth-error.html', {
+                'error': mark_safe('Missing or invalid <em>client_id</em> parameter.'),
+            })
+
+        if not redirect_uri:
+            redirect_uri = application.get_default_redirect_uri()
+        elif not application.is_valid_redirect_uri(redirect_uri):
+            return self.respond('sentry/oauth-error.html', {
+                'error': mark_safe('Missing or invalid <em>redirect_uri</em> parameter.'),
+            })
+
+        if not application.is_allowed_response_type(response_type):
+            return self.error(
+                response_type=response_type,
+                redirect_uri=redirect_uri,
+                name='unsupported_response_type',
+                state=state,
+            )
+
+        if scopes:
+            scopes = scopes.split(' ')
+            for scope in scopes:
+                if scope not in settings.SENTRY_SCOPES:
+                    return self.error(
+                        response_type=response_type,
+                        redirect_uri=redirect_uri,
+                        name='invalid_scope',
+                        state=state,
+                    )
+        else:
+            scopes = []
+
+        if not force_prompt:
+            try:
+                existing_auth = ApiAuthorization.objects.get(
+                    user=request.user,
+                    application=application,
+                )
+            except ApiAuthorization.DoesNotExist:
+                pass
+            else:
+                # if we've already approved all of the required scopes
+                # we can skip prompting the user
+                if all(getattr(existing_auth.scopes, s) for s in scopes):
+                    return self.approve(
+                        request=request,
+                        application=application,
+                        scopes=scopes,
+                        response_type=response_type,
+                        redirect_uri=redirect_uri,
+                        state=state,
+                    )
+
+        payload = {
+            'rt': response_type,
+            'cid': client_id,
+            'ru': redirect_uri,
+            'sc': scopes,
+            'st': state,
+            'uid': request.user.id,
+        }
+        request.session['oa2'] = payload
+
+        permissions = []
+        if scopes:
+            pending_scopes = set(scopes)
+            matched_sets = set()
+            for scope_set in settings.SENTRY_SCOPE_SETS:
+                for scope, description in scope_set:
+                    if scope_set in matched_sets:
+                        pending_scopes.remove(scope)
+                    elif scope in pending_scopes:
+                        permissions.append(description)
+                        matched_sets.add(scope_set)
+                        pending_scopes.remove(scope)
+
+            if pending_scopes:
+                raise NotImplementedError('{} scopes did not have descriptions'.format(pending_scopes))
+
+        context = {
+            'user': request.user,
+            'application': application,
+            'scopes': scopes,
+            'permissions': permissions,
+        }
+        return self.respond('sentry/oauth-authorize.html', context)
+
+    def post(self, request):
+        try:
+            payload = request.session['oa2']
+        except KeyError:
+            return self.respond('sentry/oauth-error.html', {
+                'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
+            })
+
+        if payload['uid'] != request.user.id:
+            return self.respond('sentry/oauth-error.html', {
+                'error': 'We were unable to complete your request. Please re-initiate the authorization flow.',
+            })
+
+        try:
+            application = ApiApplication.objects.get(
+                client_id=payload['cid'],
+                status=ApiApplicationStatus.active,
+            )
+        except ApiApplication.DoesNotExist:
+            return self.respond('sentry/oauth-error.html', {
+                'error': mark_safe('Missing or invalid <em>client_id</em> parameter.'),
+            })
+
+        response_type = payload['rt']
+        redirect_uri = payload['ru']
+        scopes = payload['sc']
+
+        op = request.POST.get('op')
+        if op == 'approve':
+            return self.approve(
+                request=request,
+                application=application,
+                scopes=scopes,
+                response_type=response_type,
+                redirect_uri=redirect_uri,
+                state=payload['st'],
+            )
+
+        elif op == 'deny':
+            return self.error(
+                response_type=response_type,
+                redirect_uri=redirect_uri,
+                name='access_denied',
+                state=payload['st'],
+            )
+        else:
+            raise NotImplementedError
+
+    def approve(self, request, application, **params):
+        try:
+            with transaction.atomic():
+                ApiAuthorization.objects.create(
+                    application=application,
+                    user=request.user,
+                    scopes=(
+                        reduce(or_, (
+                            getattr(ApiAuthorization.scopes, k)
+                            for k in params['scopes']
+                        ))
+                        if params['scopes']
+                        else 0
+                    ),
+                )
+        except IntegrityError:
+            if params['scopes']:
+                auth_scopes = F('scopes')
+                for s in params['scopes']:
+                    auth_scopes = auth_scopes.bitor(
+                        getattr(ApiAuthorization.scopes, s)
+                    )
+
+                ApiAuthorization.objects.filter(
+                    application=application,
+                    user=request.user,
+                ).update(
+                    scopes=auth_scopes,
+                )
+
+        if params['response_type'] == 'code':
+            grant = ApiGrant(
+                user=request.user,
+                application=application,
+                redirect_uri=params['redirect_uri'],
+            )
+            if params['scopes']:
+                for s in params['scopes']:
+                    setattr(grant.scopes, s, True)
+            grant.save()
+            return self.redirect_response(
+                params['response_type'],
+                params['redirect_uri'],
+                {
+                    'code': grant.code,
+                    'state': params['state'],
+                },
+            )
+        elif params['response_type'] == 'token':
+            token = ApiToken(
+                application=application,
+                user=request.user,
+                refresh_token=None,
+            )
+            for s in params['scopes']:
+                setattr(token.scopes, s, True)
+            token.save()
+
+            return self.redirect_response(
+                params['response_type'],
+                params['redirect_uri'],
+                {
+                    'access_token': token.token,
+                    'expires_in': (timezone.now() - token.expires_at).total_seconds(),
+                    'expires_at': token.expires_at.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+                    'token_type': 'bearer',
+                    'scope': ' '.join(k for k, v in token.scopes.iteritems() if v),  # NOQA
+                    'state': params['state'],
+                },
+            )
diff --git a/src/sentry/web/frontend/oauth_token.py b/src/sentry/web/frontend/oauth_token.py
new file mode 100644
index 0000000000..d12a1ca3fc
--- /dev/null
+++ b/src/sentry/web/frontend/oauth_token.py
@@ -0,0 +1,125 @@
+from __future__ import absolute_import, print_function
+
+import six
+
+from django.http import HttpResponse
+from django.utils import timezone
+from django.utils.crypto import constant_time_compare
+from django.views.decorators.cache import never_cache
+from django.views.decorators.csrf import csrf_exempt
+from django.views.generic.base import View
+
+from sentry.models import (
+    ApiApplication, ApiApplicationStatus, ApiGrant, ApiToken
+)
+from sentry.utils import json
+
+
+class OAuthTokenView(View):
+    @csrf_exempt
+    @never_cache
+    def dispatch(self, request, *args, **kwargs):
+        return super(OAuthTokenView, self).dispatch(request, *args, **kwargs)
+
+    def error(self, name, status=400):
+        return HttpResponse(json.dumps({
+            'error': name,
+        }), content_type='application/json', status=status)
+
+    @never_cache
+    def post(self, request):
+        grant_type = request.POST.get('grant_type')
+
+        if grant_type == 'authorization_code':
+            client_id = request.POST.get('client_id')
+            client_secret = request.POST.get('client_secret')
+            redirect_uri = request.POST.get('redirect_uri')
+            code = request.POST.get('code')
+
+            if not client_id:
+                return self.error('invalid_client')
+
+            if not client_secret:
+                return self.error('invalid_client')
+
+            try:
+                application = ApiApplication.objects.get(
+                    client_id=client_id,
+                    status=ApiApplicationStatus.active,
+                )
+            except ApiApplication.DoesNotExist:
+                return self.error('invalid_client')
+
+            if not constant_time_compare(client_secret, application.client_secret):
+                return self.error('invalid_client')
+
+            try:
+                grant = ApiGrant.objects.get(application=application, code=code)
+            except ApiGrant.DoesNotExist:
+                return self.error('invalid_grant')
+
+            if grant.is_expired():
+                return self.error('invalid_grant')
+
+            if not redirect_uri:
+                redirect_uri = application.get_default_redirect_uri()
+            elif grant.redirect_uri != redirect_uri:
+                return self.error('invalid_grant')
+
+            token = ApiToken.from_grant(grant)
+        elif grant_type == 'refresh_token':
+            refresh_token = request.POST.get('refresh_token')
+            scope = request.POST.get('scope')
+            client_id = request.POST.get('client_id')
+            client_secret = request.POST.get('client_secret')
+
+            if not refresh_token:
+                return self.error('invalid_request')
+
+            # TODO(dcramer): support scope
+            if scope:
+                return self.error('invalid_request')
+
+            if not client_id:
+                return self.error('invalid_client')
+
+            if not client_secret:
+                return self.error('invalid_client')
+
+            try:
+                application = ApiApplication.objects.get(
+                    client_id=client_id,
+                    status=ApiApplicationStatus.active,
+                )
+            except ApiApplication.DoesNotExist:
+                return self.error('invalid_client')
+
+            if not constant_time_compare(client_secret, application.client_secret):
+                return self.error('invalid_client')
+
+            try:
+                token = ApiToken.objects.get(
+                    application=application,
+                    refresh_token=refresh_token,
+                )
+            except ApiToken.DoesNotExist:
+                return self.error('invalid_grant')
+
+            token.refresh()
+        else:
+            return self.error('unsupported_grant_type')
+
+        return HttpResponse(json.dumps({
+            'access_token': token.token,
+            'refresh_token': token.refresh_token,
+            'expires_in': (timezone.now() - token.expires_at).total_seconds(),
+            'expires_at': token.expires_at,
+            'token_type': 'bearer',
+            'scope': ' '.join(k for k, v in token.scopes.iteritems() if v),  # NOQA
+            'user': {
+                'id': six.text_type(token.user.id),
+                # we might need these to become scope based
+                'name': token.user.name,
+                'email': token.user.email,
+            },
+        }), content_type='application/json')
diff --git a/src/sentry/web/frontend/organization_api_key_settings.py b/src/sentry/web/frontend/organization_api_key_settings.py
index f30ddf4f54..97e60f0db1 100644
--- a/src/sentry/web/frontend/organization_api_key_settings.py
+++ b/src/sentry/web/frontend/organization_api_key_settings.py
@@ -21,7 +21,7 @@ class ApiKeyForm(forms.ModelForm):
 
 
 class OrganizationApiKeySettingsView(OrganizationView):
-    required_scope = 'org:delete'
+    required_scope = 'org:admin'
 
     def handle(self, request, organization, key_id):
         key = get_object_or_404(ApiKey, organization=organization, id=key_id)
diff --git a/src/sentry/web/frontend/organization_api_keys.py b/src/sentry/web/frontend/organization_api_keys.py
index 638484ea7a..84cb90efd0 100644
--- a/src/sentry/web/frontend/organization_api_keys.py
+++ b/src/sentry/web/frontend/organization_api_keys.py
@@ -18,7 +18,7 @@ DEFAULT_SCOPES = [
 
 
 class OrganizationApiKeysView(OrganizationView):
-    required_scope = 'org:delete'
+    required_scope = 'org:admin'
 
     def handle(self, request, organization):
         if request.POST.get('op') == 'newkey':
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index cf2e12d99a..ca07331dae 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -39,9 +39,9 @@ class AuthProviderSettingsForm(forms.Form):
 
 
 class OrganizationAuthSettingsView(OrganizationView):
-    # We restrict auth settings to org:delete as it allows a non-owner to
+    # We restrict auth settings to org:admin as it allows a non-owner to
     # escalate members to own by disabling the default role.
-    required_scope = 'org:delete'
+    required_scope = 'org:admin'
 
     def _disable_provider(self, request, organization, auth_provider):
         self.create_audit_entry(
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
index e4273d2a85..e270be64e1 100644
--- a/src/sentry/web/frontend/organization_members.py
+++ b/src/sentry/web/frontend/organization_members.py
@@ -43,7 +43,7 @@ class OrganizationMembersView(OrganizationView):
         # TODO(dcramer): ideally member:write could approve
         can_approve_requests_globally = request.access.has_scope('org:write')
         can_add_members = request.access.has_scope('org:write')
-        can_remove_members = request.access.has_scope('member:delete')
+        can_remove_members = request.access.has_scope('member:admin')
 
         # pending requests
         if can_approve_requests_globally:
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index d3f7acd92b..c638ddf130 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -109,7 +109,7 @@ class OrganizationSettingsView(OrganizationView):
     required_scope = 'org:write'
 
     def get_form(self, request, organization):
-        has_delete = request.access.has_scope('org:delete')
+        has_delete = request.access.has_scope('org:admin')
 
         return OrganizationSettingsForm(
             has_delete=has_delete,
diff --git a/src/sentry/web/frontend/remove_organization.py b/src/sentry/web/frontend/remove_organization.py
index 23f61f7b13..cfd63ebc74 100644
--- a/src/sentry/web/frontend/remove_organization.py
+++ b/src/sentry/web/frontend/remove_organization.py
@@ -24,7 +24,7 @@ class RemoveOrganizationForm(forms.Form):
 
 
 class RemoveOrganizationView(OrganizationView):
-    required_scope = 'org:delete'
+    required_scope = 'org:admin'
     sudo_required = True
 
     def get_form(self, request, organization):
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
index 2e22fc53a8..adac15ea1e 100644
--- a/src/sentry/web/frontend/remove_project.py
+++ b/src/sentry/web/frontend/remove_project.py
@@ -15,7 +15,7 @@ class RemoveProjectForm(forms.Form):
 
 
 class RemoveProjectView(ProjectView):
-    required_scope = 'project:delete'
+    required_scope = 'project:admin'
     sudo_required = True
 
     def get_form(self, request):
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 4544b065c7..546dfe0739 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -15,7 +15,7 @@ class RemoveTeamForm(forms.Form):
 
 
 class RemoveTeamView(TeamView):
-    required_scope = 'team:delete'
+    required_scope = 'team:admin'
     sudo_required = True
 
     def get_form(self, request):
diff --git a/src/sentry/web/frontend/restore_organization.py b/src/sentry/web/frontend/restore_organization.py
index 9d94ad42e3..cb1542749c 100644
--- a/src/sentry/web/frontend/restore_organization.py
+++ b/src/sentry/web/frontend/restore_organization.py
@@ -23,7 +23,7 @@ delete_logger = logging.getLogger('sentry.deletions.ui')
 
 
 class RestoreOrganizationView(OrganizationView):
-    required_scope = 'org:delete'
+    required_scope = 'org:admin'
     sudo_required = True
 
     def get_active_organization(self, request, organization_slug):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index aa40ce9d93..b530064677 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -42,6 +42,8 @@ from sentry.web.frontend.group_tag_export import GroupTagExportView
 from sentry.web.frontend.home import HomeView
 from sentry.web.frontend.mailgun_inbound_webhook import \
     MailgunInboundWebhookView
+from sentry.web.frontend.oauth_authorize import OAuthAuthorizeView
+from sentry.web.frontend.oauth_token import OAuthTokenView
 from sentry.web.frontend.organization_api_key_settings import \
     OrganizationApiKeySettingsView
 from sentry.web.frontend.organization_api_keys import OrganizationApiKeysView
@@ -96,106 +98,14 @@ def init_all_applications():
 init_all_applications()
 
 # Only create one instance of the ReactPageView since it's duplicated errywhere
+generic_react_page_view = GenericReactPageView.as_view()
 react_page_view = ReactPageView.as_view()
 
 urlpatterns = patterns('')
 
 if getattr(settings, 'DEBUG_VIEWS', settings.DEBUG):
-    from django.views.generic import TemplateView
-    import sentry.web.frontend.debug.mail
-    from sentry.web.frontend.debug.debug_assigned_email import (
-        DebugAssignedEmailView, DebugSelfAssignedEmailView
-    )
-    from sentry.web.frontend.debug.debug_trigger_error import (
-        DebugTriggerErrorView
-    )
-    from sentry.web.frontend.debug.debug_error_embed import (
-        DebugErrorPageEmbedView
-    )
-    from sentry.web.frontend.debug.debug_mfa_added_email import (
-        DebugMfaAddedEmailView
-    )
-    from sentry.web.frontend.debug.debug_mfa_removed_email import (
-        DebugMfaRemovedEmailView
-    )
-    from sentry.web.frontend.debug.debug_new_release_email import (
-        DebugNewReleaseEmailView
-    )
-    from sentry.web.frontend.debug.debug_note_email import DebugNoteEmailView
-    from sentry.web.frontend.debug.debug_password_changed_email import (
-        DebugPasswordChangedEmailView
-    )
-    from sentry.web.frontend.debug.debug_regression_email import (
-        DebugRegressionEmailView, DebugRegressionReleaseEmailView
-    )
-    from sentry.web.frontend.debug.debug_resolved_email import (
-        DebugResolvedEmailView
-    )
-    from sentry.web.frontend.debug.debug_resolved_in_release_email import (
-        DebugResolvedInReleaseEmailView, DebugResolvedInReleaseUpcomingEmailView
-    )
-    from sentry.web.frontend.debug.debug_unassigned_email import (
-        DebugUnassignedEmailView
-    )
-    from sentry.web.frontend.debug import debug_auth_views
-
-    urlpatterns += patterns(
-        '',
-        url(r'^debug/mail/alert/$',
-            sentry.web.frontend.debug.mail.alert),
-        url(r'^debug/mail/note/$',
-            DebugNoteEmailView.as_view()),
-        url(r'^debug/mail/new-release/$',
-            DebugNewReleaseEmailView.as_view()),
-        url(r'^debug/mail/assigned/$',
-            DebugAssignedEmailView.as_view()),
-        url(r'^debug/mail/assigned/self/$',
-            DebugSelfAssignedEmailView.as_view()),
-        url(r'^debug/mail/digest/$',
-            sentry.web.frontend.debug.mail.digest),
-        url(r'^debug/mail/report/$',
-            sentry.web.frontend.debug.mail.report),
-        url(r'^debug/mail/regression/$',
-            DebugRegressionEmailView.as_view()),
-        url(r'^debug/mail/regression/release/$',
-            DebugRegressionReleaseEmailView.as_view()),
-        url(r'^debug/mail/resolved/$',
-            DebugResolvedEmailView.as_view()),
-        url(r'^debug/mail/resolved-in-release/$',
-            DebugResolvedInReleaseEmailView.as_view()),
-        url(r'^debug/mail/resolved-in-release/upcoming/$',
-            DebugResolvedInReleaseUpcomingEmailView.as_view()),
-        url(r'^debug/mail/request-access/$',
-            sentry.web.frontend.debug.mail.request_access),
-        url(r'^debug/mail/access-approved/$',
-            sentry.web.frontend.debug.mail.access_approved),
-        url(r'^debug/mail/invitation/$',
-            sentry.web.frontend.debug.mail.invitation),
-        url(r'^debug/mail/confirm-email/$',
-            sentry.web.frontend.debug.mail.confirm_email),
-        url(r'^debug/mail/recover-account/$',
-            sentry.web.frontend.debug.mail.recover_account),
-        url(r'^debug/mail/unassigned/$',
-            DebugUnassignedEmailView.as_view()),
-        url(r'^debug/mail/org-delete-confirm/$',
-            sentry.web.frontend.debug.mail.org_delete_confirm),
-        url(r'^debug/mail/mfa-removed/$',
-            DebugMfaRemovedEmailView.as_view()),
-        url(r'^debug/mail/mfa-added/$',
-            DebugMfaAddedEmailView.as_view()),
-        url(r'^debug/mail/password-changed/$',
-            DebugPasswordChangedEmailView.as_view()),
-        url(r'^debug/embed/error-page/$',
-            DebugErrorPageEmbedView.as_view()),
-        url(r'^debug/trigger-error/$',
-            DebugTriggerErrorView.as_view()),
-        url(r'^debug/auth-confirm-identity/$',
-            debug_auth_views.DebugAuthConfirmIdentity.as_view()),
-        url(r'^debug/auth-confirm-link/$',
-            debug_auth_views.DebugAuthConfirmLink.as_view()),
-        url(r'^debug/icons/$',
-            TemplateView.as_view(template_name='sentry/debug/icons.html')),
-    )
+    from sentry.web.debug_urls import urlpatterns as debug_urls
+    urlpatterns += debug_urls
 
 urlpatterns += patterns(
     '',
@@ -206,6 +116,8 @@ urlpatterns += patterns(
         name='sentry-api-store'),
     url(r'^api/(?P<project_id>\d+)/csp-report/$', api.CspReportView.as_view(),
         name='sentry-api-csp-report'),
+    url(r'^api/(?P<project_id>[\w_-]+)/crossdomain\.xml$', api.crossdomain_xml,
+        name='sentry-api-crossdomain-xml'),
 
     # The static version is either a 10 digit timestamp, a sha1, or md5 hash
     url(r'^_static/(?:(?P<version>\d{10}|[a-f0-9]{32,40})/)?(?P<module>[^/]+)/(?P<path>.*)$', generic.static_media,
@@ -220,6 +132,10 @@ urlpatterns += patterns(
     url(r'^api/embed/error-page/$', ErrorPageEmbedView.as_view(),
         name='sentry-error-page-embed'),
 
+    # OAuth
+    url(r'^oauth/authorize/$', OAuthAuthorizeView.as_view()),
+    url(r'^oauth/token/$', OAuthTokenView.as_view()),
+
     # Auth
     url(r'^auth/link/(?P<organization_slug>[^/]+)/$', AuthOrganizationLoginView.as_view(),
         name='sentry-auth-link-identity'),
@@ -303,6 +219,8 @@ urlpatterns += patterns(
         name='sentry-remove-account'),
     url(r'^account/settings/social/', include('social_auth.urls')),
 
+    url(r'^account/', generic_react_page_view),
+
     # Admin
     url(r'^manage/queue/$', AdminQueueView.as_view(),
         name='sentry-admin-queue'),
@@ -339,8 +257,8 @@ urlpatterns += patterns(
         RedirectView.as_view(url='https://docs.sentry.io/hosted/api/', permanent=False),
         name='sentry-api-docs-redirect'),
 
-    url(r'^api/$', react_page_view, name='sentry-api'),
-    url(r'^api/new-token/$', react_page_view),
+    url(r'^api/$', generic_react_page_view, name='sentry-api'),
+    url(r'^api/[^0]+/', generic_react_page_view),
 
     url(r'^out/$', OutView.as_view()),
 
@@ -461,8 +379,6 @@ urlpatterns += patterns(
     # crossdomain.xml
     url(r'^crossdomain\.xml$', api.crossdomain_xml_index,
         name='sentry-api-crossdomain-xml-index'),
-    url(r'^api/(?P<project_id>[\w_-]+)/crossdomain\.xml$', api.crossdomain_xml,
-        name='sentry-api-crossdomain-xml'),
 
     # plugins
     url(r'^plugins/', include('sentry.plugins.base.urls')),
diff --git a/tests/acceptance/test_api.py b/tests/acceptance/test_api.py
new file mode 100644
index 0000000000..85443892e2
--- /dev/null
+++ b/tests/acceptance/test_api.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class ApiTokensTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ApiTokensTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.login_as(self.user)
+        self.path = '/api/'
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('api tokens - no tokens')
+        self.browser.click('.ref-create-token')
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('api tokens - new token')
+        self.browser.click('.btn-primary')
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('api tokens - single token')
+
+
+class ApiApplicationTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ApiApplicationTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.login_as(self.user)
+        self.path = '/api/applications/'
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('api applications - no applications')
+        self.browser.click('.ref-create-application')
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('api applications - new application')
+        self.browser.click('.btn-primary')
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('api applications - single application')
diff --git a/tests/acceptance/test_oauth_authorize.py b/tests/acceptance/test_oauth_authorize.py
new file mode 100644
index 0000000000..63a3474de0
--- /dev/null
+++ b/tests/acceptance/test_oauth_authorize.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class OAuthAuthorizeTest(AcceptanceTestCase):
+    def setUp(self):
+        super(OAuthAuthorizeTest, self).setUp()
+        self.user = self.create_user('foo@example.com', is_superuser=True)
+        self.login_as(self.user)
+
+    def test_simple(self):
+        self.browser.get('/debug/oauth/authorize/')
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('oauth - authorize')
+        self.browser.get('/debug/oauth/authorize/error/')
+        self.browser.wait_until_not('.loading')
+        self.browser.snapshot('oauth - authorize error')
diff --git a/tests/sentry/api/endpoints/test_api_application_details.py b/tests/sentry/api/endpoints/test_api_application_details.py
new file mode 100644
index 0000000000..2bac094d41
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_api_application_details.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ApiApplication, ApiApplicationStatus
+from sentry.testutils import APITestCase
+
+
+class ApiApplicationDetailsTest(APITestCase):
+    def test_simple(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+            name='a',
+        )
+
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-application-details', args=[app.client_id])
+        response = self.client.get(url)
+        assert response.status_code == 200, (response.status_code, response.content)
+        assert response.data['id'] == app.client_id
+
+
+class ApiApplicationUpdateTest(APITestCase):
+    def test_simple(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+            name='a',
+        )
+
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-application-details', args=[app.client_id])
+        response = self.client.put(url, data={'name': 'foobaz'})
+        assert response.status_code == 200, (response.status_code, response.content)
+        assert response.data['id'] == app.client_id
+
+        app = ApiApplication.objects.get(id=app.id)
+        assert app.name == 'foobaz'
+
+
+class ApiApplicationDeleteTest(APITestCase):
+    def test_simple(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+            name='a',
+        )
+
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-application-details', args=[app.client_id])
+        response = self.client.delete(url)
+        assert response.status_code == 204, response.content
+
+        app = ApiApplication.objects.get(id=app.id)
+        assert app.status == ApiApplicationStatus.pending_deletion
diff --git a/tests/sentry/api/endpoints/test_api_applications.py b/tests/sentry/api/endpoints/test_api_applications.py
new file mode 100644
index 0000000000..67c52e6098
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_api_applications.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ApiApplication
+from sentry.testutils import APITestCase
+
+
+class ApiApplicationsListTest(APITestCase):
+    def test_simple(self):
+        app1 = ApiApplication.objects.create(
+            owner=self.user,
+            name='a',
+        )
+        app2 = ApiApplication.objects.create(
+            owner=self.user,
+            name='b',
+        )
+        ApiApplication.objects.create(
+            owner=self.create_user('foo@example.com'),
+        )
+
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-applications')
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0]['id'] == app1.client_id
+        assert response.data[1]['id'] == app2.client_id
+
+
+class ApiApplicationsCreateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-applications')
+        response = self.client.post(url, data={})
+        assert response.status_code == 201
+        assert ApiApplication.objects.get(
+            client_id=response.data['id'],
+            owner=self.user,
+        )
diff --git a/tests/sentry/api/endpoints/test_api_authorizations.py b/tests/sentry/api/endpoints/test_api_authorizations.py
new file mode 100644
index 0000000000..7eb3e6595f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_api_authorizations.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ApiApplication, ApiAuthorization, ApiToken
+from sentry.testutils import APITestCase
+
+
+class ApiAuthorizationsListTest(APITestCase):
+    def test_simple(self):
+        app = ApiApplication.objects.create(
+            name='test',
+            owner=self.user,
+        )
+        auth = ApiAuthorization.objects.create(
+            application=app,
+            user=self.user,
+            scopes=getattr(ApiAuthorization.scopes, 'event:read'),
+        )
+        ApiAuthorization.objects.create(
+            application=app,
+            user=self.create_user('example@example.com'),
+        )
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-authorizations')
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(auth.id)
+
+
+class ApiAuthorizationsDeleteTest(APITestCase):
+    def test_simple(self):
+        app = ApiApplication.objects.create(
+            name='test',
+            owner=self.user,
+        )
+        auth = ApiAuthorization.objects.create(
+            application=app,
+            user=self.user,
+        )
+        token = ApiToken.objects.create(
+            application=app,
+            user=self.user,
+        )
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-api-authorizations')
+        response = self.client.delete(url, data={'authorization': auth.id})
+        assert response.status_code == 204
+        assert not ApiAuthorization.objects.filter(id=auth.id).exists()
+        assert not ApiToken.objects.filter(id=token.id).exists()
diff --git a/tests/sentry/api/endpoints/test_api_tokens.py b/tests/sentry/api/endpoints/test_api_tokens.py
index b39ef90f03..9155d1f49b 100644
--- a/tests/sentry/api/endpoints/test_api_tokens.py
+++ b/tests/sentry/api/endpoints/test_api_tokens.py
@@ -35,6 +35,8 @@ class ApiTokensCreateTest(APITestCase):
         token = ApiToken.objects.get(
             user=self.user,
         )
+        assert not token.expires_at
+        assert not token.refresh_token
         scopes = [k for k, v in six.iteritems(token.scopes) if v]
         assert scopes == ['event:read']
 
diff --git a/tests/sentry/models/test_apiapplication.py b/tests/sentry/models/test_apiapplication.py
new file mode 100644
index 0000000000..8434e6f53c
--- /dev/null
+++ b/tests/sentry/models/test_apiapplication.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+from sentry.models import ApiApplication
+
+
+class ApiApplicationTest(TestCase):
+    def test_is_valid_redirect_uri(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+            redirect_uris='http://example.com\nhttp://sub.example.com/path',
+        )
+
+        assert app.is_valid_redirect_uri('http://example.com/')
+        assert app.is_valid_redirect_uri('http://example.com')
+        assert app.is_valid_redirect_uri('http://example.com/biz/baz')
+        assert not app.is_valid_redirect_uri('https://example.com/')
+        assert not app.is_valid_redirect_uri('http://foo.com')
+        assert not app.is_valid_redirect_uri('http://example.com.foo.com')
+
+        assert app.is_valid_redirect_uri('http://sub.example.com/path')
+        assert app.is_valid_redirect_uri('http://sub.example.com/path/bar')
+        assert not app.is_valid_redirect_uri('http://sub.example.com')
+        assert not app.is_valid_redirect_uri('https://sub.example.com')
+
+    def test_get_default_redirect_uri(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+            redirect_uris='http://example.com\nhttp://sub.example.com/path',
+        )
+
+        assert app.get_default_redirect_uri() == 'http://example.com'
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 276ba23cb0..3518ef9e95 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -1,19 +1,22 @@
 from __future__ import absolute_import
 
+from datetime import datetime, timedelta
+
 import pytest
 
 from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.models import (
-    Environment, EnvironmentProject, Event, EventMapping, EventTag,
-    Group, GroupAssignee, GroupMeta, GroupResolution, GroupRedirect, GroupStatus, GroupTagKey,
-    GroupTagValue, Organization, OrganizationStatus, Project, ProjectStatus,
-    Release, ReleaseCommit, ReleaseEnvironment, Repository,
-    TagKey, TagValue, Team, TeamStatus, Commit, CommitAuthor
+    ApiApplication, ApiApplicationStatus, ApiGrant, ApiToken, Commit,
+    CommitAuthor, Environment, EnvironmentProject, Event, EventMapping,
+    EventTag, Group, GroupAssignee, GroupMeta, GroupRedirect, GroupResolution,
+    GroupStatus, GroupTagKey, GroupTagValue, Organization, OrganizationStatus,
+    Project, ProjectStatus, Release, ReleaseCommit, ReleaseEnvironment,
+    Repository, TagKey, TagValue, Team, TeamStatus
 )
 from sentry.tasks.deletion import (
-    delete_group, delete_organization, delete_project, delete_tag_key,
-    delete_team, generic_delete
+    delete_api_application, delete_group, delete_organization, delete_project,
+    delete_tag_key, delete_team, generic_delete, revoke_api_tokens
 )
 from sentry.testutils import TestCase
 
@@ -271,6 +274,79 @@ class DeleteGroupTest(TestCase):
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
 
 
+class DeleteApplicationTest(TestCase):
+    def test_simple(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+            status=ApiApplicationStatus.pending_deletion,
+        )
+        ApiToken.objects.create(
+            application=app,
+            user=self.user,
+            scopes=0,
+        )
+        ApiGrant.objects.create(
+            application=app,
+            user=self.user,
+            scopes=0,
+            redirect_uri='http://example.com',
+        )
+
+        with self.tasks():
+            delete_api_application(object_id=app.id)
+
+        assert not ApiApplication.objects.filter(id=app.id).exists()
+        assert not ApiGrant.objects.filter(application=app).exists()
+        assert not ApiToken.objects.filter(application=app).exists()
+
+
+class RevokeApiTokensTest(TestCase):
+    def test_basic(self):
+        app = ApiApplication.objects.create(
+            owner=self.user,
+        )
+        token1 = ApiToken.objects.create(
+            application=app,
+            user=self.create_user('bar@example.com'),
+            scopes=0,
+        )
+        token2 = ApiToken.objects.create(
+            application=app,
+            user=self.create_user('foo@example.com'),
+            scopes=0,
+        )
+
+        with self.tasks():
+            revoke_api_tokens(object_id=app.id)
+
+        assert not ApiToken.objects.filter(id=token1.id).exists()
+        assert not ApiToken.objects.filter(id=token2.id).exists()
+
+    def test_with_timestamp(self):
+        cutoff = datetime(2017, 1, 1)
+        app = ApiApplication.objects.create(
+            owner=self.user,
+        )
+        token1 = ApiToken.objects.create(
+            application=app,
+            user=self.create_user('bar@example.com'),
+            scopes=0,
+            date_added=cutoff,
+        )
+        token2 = ApiToken.objects.create(
+            application=app,
+            user=self.create_user('foo@example.com'),
+            scopes=0,
+            date_added=cutoff + timedelta(days=1),
+        )
+
+        with self.tasks():
+            revoke_api_tokens(object_id=app.id, timestamp=cutoff)
+
+        assert not ApiToken.objects.filter(id=token1.id).exists()
+        assert ApiToken.objects.filter(id=token2.id).exists()
+
+
 class GenericDeleteTest(TestCase):
     def test_does_not_delete_visible(self):
         project = self.create_project(
diff --git a/tests/sentry/web/frontend/test_oauth_authorize.py b/tests/sentry/web/frontend/test_oauth_authorize.py
new file mode 100644
index 0000000000..3c07bde682
--- /dev/null
+++ b/tests/sentry/web/frontend/test_oauth_authorize.py
@@ -0,0 +1,346 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from six.moves.urllib.parse import parse_qs
+
+from sentry.models import ApiApplication, ApiAuthorization, ApiGrant, ApiToken
+from sentry.testutils import TestCase
+
+
+class OAuthAuthorizeCodeTest(TestCase):
+    @fixture
+    def path(self):
+        return '/oauth/authorize/'
+
+    def setUp(self):
+        super(OAuthAuthorizeCodeTest, self).setUp()
+        self.application = ApiApplication.objects.create(
+            owner=self.user,
+            redirect_uris='https://example.com',
+        )
+
+    def test_missing_response_type(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?redirect_uri={}&client_id={}'.format(
+            self.path,
+            'https://example.com',
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?error=unsupported_response_type'
+
+    def test_invalid_response_type(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=foobar&redirect_uri={}&client_id={}'.format(
+            self.path,
+            'https://example.com',
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?error=unsupported_response_type'
+
+    def test_missing_client_id(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=code&redirect_uri={}'.format(
+            self.path,
+            'https://example.com',
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-error.html')
+        assert resp.context['error'] == 'Missing or invalid <em>client_id</em> parameter.'
+
+    def test_invalid_scope(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=code&client_id={}&scope=foo'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?error=invalid_scope'
+
+    def test_invalid_redirect_uri(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=code&redirect_uri=https://google.com&client_id={}'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-error.html')
+        assert resp.context['error'] == 'Missing or invalid <em>redirect_uri</em> parameter.'
+
+    def test_minimal_params_approve_flow(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=code&client_id={}'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+        resp = self.client.post(self.path, {
+            'op': 'approve',
+        })
+
+        grant = ApiGrant.objects.get(user=self.user)
+        assert grant.redirect_uri == self.application.get_default_redirect_uri()
+        assert grant.application == self.application
+        assert not grant.scopes.mask
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?code={}'.format(
+            grant.code,
+        )
+
+        authorization = ApiAuthorization.objects.get(
+            user=self.user,
+            application=self.application,
+        )
+        assert authorization.scopes == grant.scopes
+
+    def test_minimal_params_deny_flow(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=code&client_id={}'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+        resp = self.client.post(self.path, {
+            'op': 'deny',
+        })
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?error=access_denied'
+
+        assert not ApiGrant.objects.filter(user=self.user).exists()
+        assert not ApiToken.objects.filter(user=self.user).exists()
+
+    def test_rich_params(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=code&client_id={}&scope=org%3Aread&state=foo'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+        resp = self.client.post(self.path, {
+            'op': 'approve',
+        })
+
+        grant = ApiGrant.objects.get(user=self.user)
+        assert grant.redirect_uri == self.application.get_default_redirect_uri()
+        assert grant.application == self.application
+        assert getattr(grant.scopes, 'org:read')
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?state=foo&code={}'.format(
+            grant.code,
+        )
+
+        assert not ApiToken.objects.filter(user=self.user).exists()
+
+    def test_approve_flow_bypass_prompt(self):
+        self.login_as(self.user)
+
+        ApiAuthorization.objects.create(
+            user=self.user,
+            application=self.application,
+        )
+
+        resp = self.client.get('{}?response_type=code&client_id={}'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        grant = ApiGrant.objects.get(user=self.user)
+        assert grant.redirect_uri == self.application.get_default_redirect_uri()
+        assert grant.application == self.application
+        assert not grant.scopes.mask
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?code={}'.format(
+            grant.code,
+        )
+
+    def test_approve_flow_force_prompt(self):
+        self.login_as(self.user)
+
+        ApiAuthorization.objects.create(
+            user=self.user,
+            application=self.application,
+        )
+
+        resp = self.client.get('{}?response_type=code&client_id={}&force_prompt=1'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+    def test_approve_flow_requires_prompt_new_scope(self):
+        self.login_as(self.user)
+
+        authorization = ApiAuthorization.objects.create(
+            user=self.user,
+            application=self.application,
+            scopes=getattr(ApiAuthorization.scopes, 'org:write', None),
+        )
+
+        resp = self.client.get('{}?response_type=code&client_id={}&scope=org:read'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+        resp = self.client.post(self.path, {
+            'op': 'approve',
+        })
+
+        authorization = ApiAuthorization.objects.get(id=authorization.id)
+        assert authorization.scopes.mask == (
+            getattr(ApiAuthorization.scopes, 'org:read') |
+            getattr(ApiAuthorization.scopes, 'org:write')
+        )
+
+
+class OAuthAuthorizeTokenTest(TestCase):
+    @fixture
+    def path(self):
+        return '/oauth/authorize/'
+
+    def setUp(self):
+        super(OAuthAuthorizeTokenTest, self).setUp()
+        self.application = ApiApplication.objects.create(
+            owner=self.user,
+            redirect_uris='https://example.com',
+        )
+
+    def test_missing_response_type(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?redirect_uri={}&client_id={}'.format(
+            self.path,
+            'https://example.com',
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?error=unsupported_response_type'
+
+    def test_invalid_response_type(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=foobar&redirect_uri={}&client_id={}'.format(
+            self.path,
+            'https://example.com',
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com?error=unsupported_response_type'
+
+    def test_missing_client_id(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=token&redirect_uri={}'.format(
+            self.path,
+            'https://example.com',
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-error.html')
+        assert resp.context['error'] == 'Missing or invalid <em>client_id</em> parameter.'
+
+    def test_invalid_scope(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=token&client_id={}&scope=foo'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 302
+        assert resp['Location'] == 'https://example.com#error=invalid_scope'
+
+    def test_minimal_params_approve_flow(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=token&client_id={}'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+        resp = self.client.post(self.path, {
+            'op': 'approve',
+        })
+
+        assert not ApiGrant.objects.filter(user=self.user).exists()
+
+        token = ApiToken.objects.get(user=self.user)
+        assert token.application == self.application
+        assert not token.scopes.mask
+        assert not token.refresh_token
+
+        assert resp.status_code == 302
+        location, fragment = resp['Location'].split('#', 1)
+        assert location == 'https://example.com'
+        fragment = parse_qs(fragment)
+        assert fragment['access_token'] == [token.token]
+        assert fragment['token_type'] == ['bearer']
+        assert 'refresh_token' not in fragment
+        assert fragment['expires_in']
+        assert fragment['token_type'] == ['bearer']
+
+    def test_minimal_params_code_deny_flow(self):
+        self.login_as(self.user)
+
+        resp = self.client.get('{}?response_type=token&client_id={}'.format(
+            self.path,
+            self.application.client_id,
+        ))
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/oauth-authorize.html')
+        assert resp.context['application'] == self.application
+
+        resp = self.client.post(self.path, {
+            'op': 'deny',
+        })
+
+        assert resp.status_code == 302
+        location, fragment = resp['Location'].split('#', 1)
+        assert location == 'https://example.com'
+        fragment = parse_qs(fragment)
+        assert fragment == {'error': ['access_denied']}
+
+        assert not ApiToken.objects.filter(user=self.user).exists()
diff --git a/tests/sentry/web/frontend/test_oauth_token.py b/tests/sentry/web/frontend/test_oauth_token.py
new file mode 100644
index 0000000000..0e0146898a
--- /dev/null
+++ b/tests/sentry/web/frontend/test_oauth_token.py
@@ -0,0 +1,285 @@
+from __future__ import absolute_import
+
+import six
+
+from django.utils import timezone
+from exam import fixture
+
+from sentry.models import ApiApplication, ApiGrant, ApiToken
+from sentry.testutils import TestCase
+from sentry.utils import json
+
+
+class OAuthTokenTest(TestCase):
+    @fixture
+    def path(self):
+        return '/oauth/token/'
+
+    def test_no_get(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 405
+
+    def test_missing_grant_type(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path)
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'unsupported_grant_type'}
+
+    def test_invalid_grant_type(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'foo',
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'unsupported_grant_type'}
+
+
+class OAuthTokenCodeTest(TestCase):
+    @fixture
+    def path(self):
+        return '/oauth/token/'
+
+    def setUp(self):
+        super(OAuthTokenCodeTest, self).setUp()
+        self.application = ApiApplication.objects.create(
+            owner=self.user,
+            redirect_uris='https://example.com',
+        )
+        self.grant = ApiGrant.objects.create(
+            user=self.user,
+            application=self.application,
+            redirect_uri='https://example.com',
+        )
+
+    def test_missing_client_id(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'client_secret': self.application.client_secret,
+            'code': self.grant.code,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_invalid_client_id(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'code': self.grant.code,
+            'client_id': 'def',
+            'client_secret': self.application.client_secret,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_missing_client_secret(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'client_id': self.application.client_id,
+            'code': self.grant.code,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_invalid_client_secret(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'client_id': self.application.client_id,
+            'client_secret': 'abc',
+            'code': self.grant.code,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_missing_code(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'client_id': self.application.client_id,
+            'client_secret': self.application.client_secret,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_grant'}
+
+    def test_invalid_code(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'code': 'abc',
+            'client_id': self.application.client_id,
+            'client_secret': self.application.client_secret,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_grant'}
+
+    def test_valid_params(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'authorization_code',
+            'redirect_uri': self.application.get_default_redirect_uri(),
+            'code': self.grant.code,
+            'client_id': self.application.client_id,
+            'client_secret': self.application.client_secret,
+        })
+
+        assert resp.status_code == 200
+        data = json.loads(resp.content)
+
+        token = ApiToken.objects.get(token=data['access_token'])
+        assert token.application == self.application
+        assert token.user == self.grant.user
+        assert token.scopes == self.grant.scopes
+
+        assert data['access_token'] == token.token
+        assert data['refresh_token'] == token.refresh_token
+        assert data['expires_in']
+        assert data['token_type'] == 'bearer'
+        assert data['user']['id'] == six.text_type(token.user_id)
+
+
+class OAuthTokenRefreshTokenTest(TestCase):
+    @fixture
+    def path(self):
+        return '/oauth/token/'
+
+    def setUp(self):
+        super(OAuthTokenRefreshTokenTest, self).setUp()
+        self.application = ApiApplication.objects.create(
+            owner=self.user,
+            redirect_uris='https://example.com',
+        )
+        self.grant = ApiGrant.objects.create(
+            user=self.user,
+            application=self.application,
+            redirect_uri='https://example.com',
+        )
+        self.token = ApiToken.objects.create(
+            application=self.application,
+            user=self.user,
+            expires_at=timezone.now(),
+        )
+
+    def test_missing_client_id(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_secret': self.application.client_secret,
+            'refresh_token': self.token.refresh_token,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_invalid_client_id(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_id': 'abc',
+            'client_secret': self.application.client_secret,
+            'refresh_token': self.token.refresh_token,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_missing_client_secret(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_id': self.application.client_id,
+            'refresh_token': self.token.refresh_token,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_invalid_client_secret(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_id': self.application.client_id,
+            'client_secret': 'abc',
+            'refresh_token': self.token.refresh_token,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_client'}
+
+    def test_missing_refresh_token(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_id': self.application.client_id,
+            'client_secret': self.application.client_secret,
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_request'}
+
+    def test_invalid_refresh_token(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_id': self.application.client_id,
+            'client_secret': self.application.client_secret,
+            'refresh_token': 'foo',
+        })
+
+        assert resp.status_code == 400
+        assert json.loads(resp.content) == {'error': 'invalid_grant'}
+
+    def test_valid_params(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
+            'grant_type': 'refresh_token',
+            'client_id': self.application.client_id,
+            'client_secret': self.application.client_secret,
+            'refresh_token': self.token.refresh_token,
+        })
+
+        assert resp.status_code == 200
+
+        token2 = ApiToken.objects.get(id=self.token.id)
+
+        assert token2.application == self.token.application
+        assert token2.user == self.token.user
+        assert token2.scopes == self.token.scopes
+        assert token2.expires_at > self.token.expires_at
+        assert token2.token != self.token.token
+        assert token2.refresh_token != self.token.refresh_token
+        assert token2.refresh_token
