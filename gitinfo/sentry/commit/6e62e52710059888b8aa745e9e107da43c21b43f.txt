commit 6e62e52710059888b8aa745e9e107da43c21b43f
Author: William Mak <william@wmak.io>
Date:   Thu Mar 12 19:46:13 2020 -0400

    fix(discover) - Allow user:* queries in Discover
    
    - This makes `user:` queries become an OR condition across all the user
      aliases.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 99174d617b..b1a26b8158 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -174,6 +174,7 @@ PROJECT_NAME_ALIAS = "project.name"
 PROJECT_ALIAS = "project"
 ISSUE_ALIAS = "issue"
 ISSUE_ID_ALIAS = "issue.id"
+USER_ALIAS = "user"
 
 
 class InvalidSearchQuery(Exception):
@@ -650,8 +651,8 @@ def convert_aggregate_filter_to_snuba_query(aggregate_filter, is_alias, params=N
     return condition
 
 
-def convert_search_filter_to_snuba_query(search_filter):
-    name = search_filter.key.name
+def convert_search_filter_to_snuba_query(search_filter, key=None):
+    name = search_filter.key.name if key is None else key
     value = search_filter.value.value
 
     if name in no_conversion:
@@ -819,6 +820,14 @@ def get_filter(query=None, params=None):
                         raise InvalidSearchQuery(
                             u"Invalid value '{}' for 'issue:' filter".format(term.value.value)
                         )
+            elif name == USER_ALIAS:
+                # If the key is user, do an OR across all the different possible user fields
+                kwargs["conditions"].append(
+                    [
+                        convert_search_filter_to_snuba_query(term, key=field)
+                        for field in FIELD_ALIASES[USER_ALIAS]["fields"]
+                    ]
+                )
             elif name in FIELD_ALIASES and name != PROJECT_ALIAS:
                 converted_filter = convert_aggregate_filter_to_snuba_query(term, True)
                 if converted_filter:
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 4ae1b7cd3e..6c0ed32a06 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1155,6 +1155,14 @@ class GetSnubaQueryArgsTest(TestCase):
         assert "Invalid value" in six.text_type(err)
         assert "cancelled," in six.text_type(err)
 
+    def test_general_user_field(self):
+        conditions = get_filter("user:123").conditions
+        assert len(conditions) == 1
+        assert ["user.id", "=", "123"] in conditions[0]
+        assert ["user.username", "=", "123"] in conditions[0]
+        assert ["user.email", "=", "123"] in conditions[0]
+        assert ["user.ip", "=", "123"] in conditions[0]
+
     def test_function_with_default_arguments(self):
         result = get_filter("rpm():>100", {"start": before_now(minutes=5), "end": before_now()})
         assert result.having == [["rpm", ">", 100]]
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 29152b85ee..a4b36dc9a9 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -298,6 +298,65 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             == "Invalid query. Project morty does not exist or is not an actively selected project."
         )
 
+    def test_user_search(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        data = load_data("transaction")
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        data["user"] = {
+            "email": "foo@example.com",
+            "id": "123",
+            "ip_address": "127.0.0.1",
+            "username": "foo",
+        }
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            for value in data["user"].values():
+                response = self.client.get(
+                    self.url,
+                    format="json",
+                    data={
+                        "field": ["project", "user"],
+                        "query": "user:{}".format(value),
+                        "statsPeriod": "14d",
+                    },
+                )
+
+                assert response.status_code == 200, response.content
+                assert len(response.data["data"]) == 1
+                assert response.data["data"][0]["user.email"] == data["user"]["email"]
+                assert response.data["data"][0]["user.id"] == data["user"]["id"]
+                assert response.data["data"][0]["user.ip"] == data["user"]["ip_address"]
+                assert response.data["data"][0]["user.username"] == data["user"]["username"]
+
+    def test_has_user(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        data = load_data("transaction")
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            for value in data["user"].values():
+                response = self.client.get(
+                    self.url,
+                    format="json",
+                    data={"field": ["project", "user"], "query": "has:user", "statsPeriod": "14d"},
+                )
+
+                assert response.status_code == 200, response.content
+                assert len(response.data["data"]) == 1
+                assert response.data["data"][0]["user.ip"] == data["user"]["ip_address"]
+
     def test_not_project_in_query(self):
         self.login_as(user=self.user)
         project1 = self.create_project()
