commit 75ef8739fe62c48132eac7b3301c300a7894489e
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Apr 8 16:18:47 2012 -0700

    Move validation logic into coreapi (validate_data) and remove support for legacy data

diff --git a/CHANGES b/CHANGES
index 0b861d82a5..31d1908195 100644
--- a/CHANGES
+++ b/CHANGES
@@ -11,6 +11,11 @@ This update also includes initial changes to how filters work. ServerName Filter
 no longer specified in the ``FILTERS`` setting, but instead are included automatically if you
 load the respective ``sentry_servers`` and ``sentry_sites`` plugins.
 
+Additional changes:
+
+- Legacy data format is no longer supported (pre-Raven 1.x)
+- API will now validate data before sending it into the queue, enabling better debugging for clients.
+
 Version 3.8.0
 -------------
 
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 84d644cc62..6ca033eda3 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -33,6 +33,10 @@ LOG_LEVELS = (
     (logging.FATAL, 'fatal'),
 )
 
+DEFAULT_LOG_LEVEL = 'error'
+
+DEFAULT_LOGGER_NAME = 'root'
+
 ADMINS = []
 
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 6ba0577b6f..daf12bf79c 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -19,8 +19,8 @@ import zlib
 from django.utils.encoding import smart_str
 
 from sentry.conf import settings
-# from sentry.exceptions import InvalidData, InvalidInterface
-from sentry.models import Project, ProjectKey, TeamMember, Team
+from sentry.exceptions import InvalidInterface, InvalidData, InvalidTimestamp
+from sentry.models import Group, Project, ProjectKey, TeamMember, Team
 from sentry.plugins import plugins
 from sentry.tasks.store import store_event
 from sentry.utils import is_float, json
@@ -29,9 +29,25 @@ from sentry.utils.queue import maybe_delay
 
 logger = logging.getLogger('sentry.errors.coreapi')
 
-
-class InvalidTimestamp(ValueError):
-    pass
+RESERVED_FIELDS = (
+    'project',
+    'event_id',
+    'message',
+    'checksum',
+    'culprit',
+    'level',
+    'time_spent',
+    'logger',
+    'server_name',
+    'site',
+    'timestamp',
+    'extra',
+    'modules',
+)
+
+REQUIRED_FIELDS = (
+    'message',
+)
 
 
 class APIError(Exception):
@@ -252,14 +268,51 @@ def process_data_timestamp(data):
     return data
 
 
-def validate_data(project, data):
+def validate_data(project, data, client=None):
+    for k in REQUIRED_FIELDS:
+        if not data.get(k):
+            raise InvalidData('Missing required parameter: %r' % k)
+
     ensure_valid_project_id(project, data)
 
     if 'event_id' not in data:
         data['event_id'] = uuid.uuid4().hex
 
     if 'timestamp' in data:
-        process_data_timestamp(data)
+        try:
+            process_data_timestamp(data)
+        except InvalidTimestamp:
+            # Log the error, remove the timestamp, and continue
+            logger.error('Client %r passed an invalid value for timestamp %r' % (
+                data['timestamp'],
+                client or '<unknown client>',
+            ))
+            del data['timestamp']
+
+    if data.get('modules') and type(data['modules']) != dict:
+        raise InvalidData('Invalid type for \'modules\': must be a mapping')
+
+    for k, v in data.iteritems():
+        if k in RESERVED_FIELDS:
+            continue
+
+        if '.' not in k:
+            raise InvalidInterface('%r is not a valid interface name' % k)
+
+        try:
+            interface = Group.objects.module_cache[k]
+        except (ImportError, AttributeError), e:
+            raise InvalidInterface('%r is not a valid interface name: %s' % (k, e))
+
+        try:
+            data[k] = interface(**v).serialize()
+        except Exception, e:
+            raise InvalidData('Unable to validate interface, %r: %s' % (k, e))
+
+    level = data.get('level') or settings.DEFAULT_LOG_LEVEL
+    if isinstance(level, basestring) and not level.isdigit():
+        # assume it's something like 'warn'
+        data['level'] = settings.LOG_LEVEL_REVERSE_MAP[level]
 
     return data
 
diff --git a/sentry/exceptions.py b/sentry/exceptions.py
index da76ebd286..926cbd2bf3 100644
--- a/sentry/exceptions.py
+++ b/sentry/exceptions.py
@@ -4,3 +4,7 @@ class InvalidData(Exception):
 
 class InvalidInterface(InvalidData):
     pass
+
+
+class InvalidTimestamp(InvalidData):
+    pass
diff --git a/sentry/manager.py b/sentry/manager.py
index d32bb67bcd..b67582fff9 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -23,7 +23,6 @@ from django.utils.encoding import force_unicode, smart_str
 
 from raven.utils.encoding import to_string
 from sentry.conf import settings
-from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.processors.base import send_group_processors
 from sentry.signals import regression_signal
 from sentry.tasks.index import index_event
@@ -285,77 +284,6 @@ class GroupManager(BaseManager, ChartMixin):
         super(GroupManager, self).__init__(*args, **kwargs)
         self.module_cache = ModuleProxyCache()
 
-    def convert_legacy_kwargs(self, kwargs):
-        from sentry.interfaces import Http, User, Exception, Stacktrace, Template
-        from sentry.utils.template_info import get_template_info
-
-        data = kwargs.pop('data', None) or {}
-        sentry = data.pop('__sentry__', None) or {}
-
-        result = {
-            'event_id': kwargs.pop('message_id', None),
-            'level': kwargs.pop('level', None),
-            'logger': kwargs.pop('logger', None),
-            'server_name': kwargs.pop('server_name', None),
-            'message': kwargs.pop('message', ''),
-            'culprit': kwargs.pop('view', None),
-            'timestamp': kwargs.pop('timestamp', None),
-        }
-
-        result = dict((k, v) for k, v in result.iteritems() if v is not None)
-
-        class_name = kwargs.pop('class_name', None)
-        if class_name:
-            result['message'] = '%s: %s' % (class_name, result['message'])
-
-        if 'url' in data or 'url' in kwargs and 'META' in data:
-            meta = data.pop('META', {})
-            if 'GET' in data:
-                del data['GET']
-            result['sentry.interfaces.Http'] = Http(
-                url=data.pop('url', None) or kwargs['url'],
-                method=meta.get('REQUEST_METHOD'),
-                query_string=meta.get('QUERY_STRING'),
-                data=data.pop('POST', None),
-                cookies=data.pop('COOKIES', None),
-                env=meta,
-            ).serialize()
-
-        if 'user' in sentry:
-            user = sentry['user']
-            result['sentry.interfaces.User'] = User(
-                **user
-            ).serialize()
-
-        if 'exception' in sentry:
-            exc = sentry['exception']
-            result['sentry.interfaces.Exception'] = Exception(
-                type=exc[0],
-                value=u' '.join(itertools.imap(unicode, exc[1])),
-            ).serialize()
-
-        if 'frames' in sentry:
-            frames = []
-            keys = ('filename', 'function', 'vars', 'pre_context', 'context_line', 'post_context', 'lineno')
-            for frame in sentry['frames']:
-                if 'vars' in frame:
-                    frame['vars'] = dict(frame['vars'])
-                frames.append(dict((k, v) for k, v in frame.iteritems() if k in keys))
-
-            if frames:
-                result['sentry.interfaces.Stacktrace'] = Stacktrace(
-                    frames=frames,
-                ).serialize()
-
-        if 'template' in sentry:
-            template = sentry['template']
-            result['sentry.interfaces.Template'] = Template(
-                **get_template_info(template)
-            ).serialize()
-
-        result['extra'] = data
-        return result
-
     @transaction.commit_on_success
     def from_kwargs(self, project, **kwargs):
         # TODO: this function is way too damn long and needs refactored
@@ -366,61 +294,23 @@ class GroupManager(BaseManager, ChartMixin):
 
         project = Project.objects.get_from_cache(pk=project)
 
-        if any(k in kwargs for k in ('view', 'message_id')):
-            # we must be passing legacy data, let's convert it
-            kwargs = self.convert_legacy_kwargs(kwargs)
-
         # First we pull out our top-level (non-data attr) kwargs
         event_id = kwargs.pop('event_id', None)
         message = kwargs.pop('message', None)
         culprit = kwargs.pop('culprit', None)
-        level = kwargs.pop('level', None) or logging.ERROR
+        level = kwargs.pop('level', None)
         time_spent = kwargs.pop('time_spent', None)
-        logger_name = kwargs.pop('logger', 'root')
+        logger_name = kwargs.pop('logger', None) or settings.DEFAULT_LOGGER_NAME
         server_name = kwargs.pop('server_name', None)
         site = kwargs.pop('site', None)
         date = kwargs.pop('timestamp', None) or datetime.datetime.utcnow()
-        extra = kwargs.pop('extra', None)
-        modules = kwargs.pop('modules', None)
-
-        if isinstance(level, basestring) and not level.isdigit():
-            # assume it's something like 'warn'
-            level = settings.LOG_LEVEL_REVERSE_MAP[level]
+        checksum = kwargs.pop('checksum', None)
 
         # We must convert date to local time so Django doesn't mess it up
         # based on TIME_ZONE
         date = utc_to_local(date)
-
-        if not message:
-            raise InvalidData('Missing required parameter: message')
-
-        checksum = kwargs.pop('checksum', None)
-
         data = kwargs
 
-        for k, v in kwargs.iteritems():
-            if '.' not in k:
-                raise InvalidInterface('%r is not a valid interface name' % k)
-            try:
-                interface = self.module_cache[k]
-            except ImportError, e:
-                raise InvalidInterface('%r is not a valid interface name: %s' % (k, e))
-
-            try:
-                data[k] = interface(**v).serialize()
-            except Exception, e:
-                raise InvalidData('Unable to validate interface, %r: %s' % (k, e))
-
-        if modules and type(modules) != dict:
-            raise InvalidData('Modules must be specified as a mapping')
-
-        data['modules'] = modules
-
-        # TODO: at this point we should validate what is left in kwargs (it should either
-        #       be an interface or it should be in ``extra``)
-        if extra:
-            data['extra'] = extra
-
         kwargs = {
             'level': level,
             'message': message,
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
index 686f35161e..1b598b097b 100644
--- a/sentry/services/udp.py
+++ b/sentry/services/udp.py
@@ -29,9 +29,11 @@ class SentryUDPServer(Service):
         self.port = port or settings.UDP_PORT
 
     def handle(self, data, address):
+        from sentry.exceptions import InvalidData
+        from sentry.coreapi import project_from_auth_vars, decode_and_decompress_data, safely_load_json_string, \
+          validate_data, insert_data_to_database, APIError
         from sentry.utils.auth import parse_auth_header
-        from sentry.coreapi import (project_from_auth_vars, decode_and_decompress_data, safely_load_json_string,
-                                    validate_data, insert_data_to_database, APIError, InvalidTimestamp)
+
         try:
             try:
                 auth_header, data = data.split("\n\n", 1)
@@ -48,15 +50,9 @@ class SentryUDPServer(Service):
             data = safely_load_json_string(data)
 
             try:
-                validate_data(project, data)
-            except InvalidTimestamp:
-                # Log the error, remove the timestamp, and revalidate
-                logger.error('Client %r passed an invalid value for timestamp %r' % (
-                    data['timestamp'],
-                    client or '<unknown client>',
-                ))
-                del data['timestamp']
-                validate_data(project, data)
+                validate_data(project, data, client)
+            except InvalidData, e:
+                raise APIError(unicode(e))
 
             return insert_data_to_database(data)
         except APIError, error:
diff --git a/sentry/web/api.py b/sentry/web/api.py
index 0473168539..c4799d97b1 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -13,10 +13,11 @@ from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.http import require_http_methods
 
 from sentry.conf import settings
+from sentry.exceptions import InvalidData, InvalidTimestamp
 from sentry.coreapi import project_from_auth_vars, project_from_api_key_and_id, \
   project_from_id, decode_and_decompress_data, safely_load_json_string, \
   validate_data, insert_data_to_database, APIError, APIUnauthorized, \
-  extract_auth_vars, InvalidTimestamp
+  extract_auth_vars
 from sentry.models import Group, GroupBookmark, Project, View, ProjectDomain
 from sentry.utils import json
 from sentry.utils.http import is_same_domain, apply_access_control_headers
@@ -100,15 +101,9 @@ def store(request):
             data = safely_load_json_string(data)
 
             try:
-                validate_data(project, data)
-            except InvalidTimestamp:
-                # Log the error, remove the timestamp, and revalidate
-                error_logger.error('Client %r passed an invalid value for timestamp %r' % (
-                    data['timestamp'],
-                    client or '<unknown client>',
-                ))
-                del data['timestamp']
-                validate_data(project, data)
+                validate_data(project, data, client)
+            except InvalidData, e:
+                raise APIError(unicode(e))
 
             insert_data_to_database(data)
     except APIError, error:
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index a02359fb49..797f4fef0a 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -9,10 +9,11 @@ import time
 from django.contrib.auth.models import User
 
 from sentry.models import Project
+from sentry.exceptions import InvalidTimestamp, InvalidInterface, InvalidData
 from sentry.coreapi import project_from_id, project_from_api_key_and_id, \
   extract_auth_vars, project_from_auth_vars, validate_hmac, APIUnauthorized, \
   APIForbidden, APITimestampExpired, APIError, process_data_timestamp, \
-  insert_data_to_database, InvalidTimestamp
+  insert_data_to_database, validate_data
 from sentry.utils.auth import get_signature
 
 from tests.base import TestCase
@@ -252,3 +253,57 @@ class InsertDataToDatabaseTest(BaseAPITest):
             'foo': 'bar'
         })
         from_kwargs.assert_called_once_with(foo='bar')
+
+
+class ValidateDataTest(BaseAPITest):
+    def test_missing_project_id(self):
+        self.assertRaises(APIForbidden, validate_data, self.project, {
+            'message': 'foo',
+        })
+
+    def test_invalid_project_id(self):
+        self.assertRaises(APIForbidden, validate_data, self.project, {
+            'project': self.project.id + 1,
+            'message': 'foo',
+        })
+
+    def test_missing_message(self):
+        self.assertRaises(InvalidData, validate_data, self.project, {
+            'project': self.project.id,
+        })
+
+    def test_invalid_interface_name(self):
+        self.assertRaises(InvalidInterface, validate_data, self.project, {
+            'project': self.project.id,
+            'message': 'foo',
+            'foo': 'bar',
+        })
+
+    def test_invalid_interface_import_path(self):
+        self.assertRaises(InvalidInterface, validate_data, self.project, {
+            'project': self.project.id,
+            'message': 'foo',
+            'sentry.interfaces.Exception2': 'bar',
+        })
+
+    def test_invalid_interface_args(self):
+        self.assertRaises(InvalidData, validate_data, self.project, {
+            'project': self.project.id,
+            'message': 'foo',
+            'tests.manager.tests.DummyInterface': {'foo': 'bar'}
+        })
+
+    def test_log_level_as_string(self):
+        data = validate_data(self.project, {
+            'project': self.project.id,
+            'message': 'foo',
+            'level': 'error',
+        })
+        self.assertEquals(data['level'], 40)
+
+    def test_invalid_modules(self):
+        self.assertRaises(InvalidData, validate_data, self.project, {
+            'project': self.project.id,
+            'message': 'foo',
+            'modules': [('foo', 'bar')],
+        })
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 08870dd85a..0eab886d89 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -5,7 +5,6 @@ from __future__ import absolute_import
 import datetime
 import mock
 
-from sentry.exceptions import InvalidInterface, InvalidData
 from sentry.interfaces import Interface
 from sentry.models import Event, Group, Project
 
@@ -37,24 +36,6 @@ class SentryManagerTest(TestCase):
     def test_invalid_project(self):
         self.assertRaises(Project.DoesNotExist, Group.objects.from_kwargs, 2, message='foo')
 
-    def test_invalid_interface_name(self):
-        self.assertRaises(InvalidInterface, Group.objects.from_kwargs, 1, message='foo', data={
-            'foo': 'bar',
-        })
-
-    def test_invalid_interface_import_path(self):
-        self.assertRaises(InvalidInterface, Group.objects.from_kwargs, 1, message='foo', data={
-            'sentry.interfaces.Exception2': 'bar',
-        })
-
-    def test_invalid_interface_args(self):
-        self.assertRaises(InvalidData, Group.objects.from_kwargs, 1, message='foo', data={
-            'tests.manager.tests.DummyInterface': {'foo': 'bar'}
-        })
-
-    def test_missing_required_args(self):
-        self.assertRaises(InvalidData, Group.objects.from_kwargs, 1)
-
     def test_valid_only_message(self):
         event = Group.objects.from_kwargs(1, message='foo')
         self.assertEquals(event.message, 'foo')
@@ -180,103 +161,6 @@ class SentryManagerTest(TestCase):
         self.assertEquals(res.value, 'bar')
         self.assertEquals(res.times_seen, 1)
 
-    def test_legacy_data(self):
-        result = Group.objects.convert_legacy_kwargs({'timestamp': '1234'})
-        self.assertEquals(result['timestamp'], '1234')
-
-        result = Group.objects.convert_legacy_kwargs({'message_id': '1234'})
-        self.assertEquals(result['event_id'], '1234')
-
-        result = Group.objects.convert_legacy_kwargs({'message': 'hello', 'class_name': 'ValueError'})
-        self.assertEquals(result['message'], 'ValueError: hello')
-
-        result = Group.objects.convert_legacy_kwargs({'view': 'foo.bar'})
-        self.assertEquals(result['culprit'], 'foo.bar')
-
-        result = Group.objects.convert_legacy_kwargs({'data': {
-            'url': 'http://foo.com',
-            'META': {
-                'REQUEST_METHOD': 'POST',
-                'QUERY_STRING': 'foo=bar'
-            }
-        }})
-        self.assertTrue('sentry.interfaces.Http' in result)
-        http = result['sentry.interfaces.Http']
-        self.assertEquals(http['url'], 'http://foo.com')
-        self.assertEquals(http['query_string'], 'foo=bar')
-        self.assertEquals(http['method'], 'POST')
-        self.assertEquals(http['data'], {})
-
-        result = Group.objects.convert_legacy_kwargs({'data': {
-            '__sentry__': {
-                'exception': ('TypeError', ('hello world', 1, 3, 'foo')),
-            }
-        }})
-        self.assertTrue('sentry.interfaces.Exception' in result)
-        exc = result['sentry.interfaces.Exception']
-        self.assertEquals(exc['type'], 'TypeError')
-        self.assertEquals(exc['value'], 'hello world 1 3 foo')
-
-        result = Group.objects.convert_legacy_kwargs({'data': {
-            '__sentry__': {
-                'frames': [
-                    {
-                        'filename': 'foo.py',
-                        'function': 'hello_world',
-                        'vars': {},
-                        'pre_context': ['before i did something'],
-                        'context_line': 'i did something',
-                        'post_context': ['after i did something'],
-                        'lineno': 15,
-                    },
-                ],
-            }
-        }})
-        self.assertTrue('sentry.interfaces.Stacktrace' in result)
-        stack = result['sentry.interfaces.Stacktrace']
-        self.assertEquals(len(stack['frames']), 1)
-        frame = stack['frames'][0]
-        self.assertEquals(frame['filename'], 'foo.py')
-        self.assertEquals(frame['function'], 'hello_world')
-
-        result = Group.objects.convert_legacy_kwargs({'data': {
-            '__sentry__': {
-                'user': {
-                    'is_authenticated': True,
-                    'id': 1,
-                },
-            }
-        }})
-        self.assertTrue('sentry.interfaces.User' in result)
-        user = result['sentry.interfaces.User']
-        self.assertTrue('is_authenticated' in user)
-        self.assertEquals(user['is_authenticated'], True)
-        self.assertTrue('id' in user)
-        self.assertEquals(user['id'], 1)
-
-        result = Group.objects.convert_legacy_kwargs({'data': {
-            '__sentry__': {
-                'template': [
-                    "foo\nbar\nbaz\nbiz\nbin",
-                    5,
-                    3,
-                    'foo.html',
-                ],
-            }
-        }})
-        self.assertTrue('sentry.interfaces.Template' in result)
-        user = result['sentry.interfaces.Template']
-        # 'post_context': [(2, 'bar\n'), (3, 'baz\n'), (4, 'biz\n')], 'pre_context': [(0, '')], 'lineno': 1, 'context_line': (1, 'foo\n'), 'filename': 'foo.html'}
-
-        self.assertTrue('pre_context' in user)
-        self.assertEquals(user['pre_context'], [(0, ''), (1, 'foo\n')])
-        self.assertTrue('post_context' in user)
-        self.assertEquals(user['post_context'], [(3, 'baz\n'), (4, 'biz\n'), (5, 'bin')])
-        self.assertTrue('lineno' in user)
-        self.assertEquals(user['lineno'], 2)
-        self.assertTrue('context_line' in user)
-        self.assertEquals(user['context_line'], 'bar\n')
-
     def test_dupe_message_id(self):
         event = Group.objects.from_kwargs(1, event_id=1, message='foo')
         self.assertEquals(event.message, 'foo')
@@ -286,10 +170,3 @@ class SentryManagerTest(TestCase):
         # ensure that calling it again doesnt raise a db error
         Group.objects.from_kwargs(1, event_id=1, message='foo')
         self.assertEquals(Event.objects.count(), 1)
-
-    def test_log_level_as_string(self):
-        event = Group.objects.from_kwargs(1, message='foo', level='error')
-        self.assertEquals(event.level, 40)
-
-    def test_invalid_modules(self):
-        self.assertRaises(InvalidData, Group.objects.from_kwargs, 1, message='foo', modules=[('foo', 'bar')])
