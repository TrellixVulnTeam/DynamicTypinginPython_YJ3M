commit 64be3b76fa0b259e708182df5ee3eea674a4e3a9
Author: William Mak <william@wmak.io>
Date:   Thu Dec 19 16:40:20 2019 -0500

    fix(search) - tag value performance (#16176)
    
    * fix(search) - add start/end dates to tagkey endpoint
    
    - Use start and end dates for tag value autocomplete, this way our snuba
      queries have a smaller time frame than the maximum
    - ref: Adding tests for the endpoint + snuba with start/end

diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
index 616e50d047..23782463c3 100644
--- a/src/sentry/api/endpoints/project_tagkey_values.py
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -4,6 +4,7 @@ from sentry import tagstore
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.utils import get_date_range_from_params
 from sentry.api.serializers import serialize
 from sentry.models import Environment
 
@@ -38,10 +39,14 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint, EnvironmentMixin):
         except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
+        start, end = get_date_range_from_params(request.GET)
+
         paginator = tagstore.get_tag_value_paginator(
             project.id,
             environment_id,
             tagkey.key,
+            start=start,
+            end=end,
             query=request.GET.get("query"),
             order_by="-last_seen",
         )
diff --git a/src/sentry/static/sentry/app/actionCreators/tags.jsx b/src/sentry/static/sentry/app/actionCreators/tags.jsx
index a5406bf05d..e8bf9206c7 100644
--- a/src/sentry/static/sentry/app/actionCreators/tags.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/tags.jsx
@@ -87,7 +87,14 @@ export function fetchOrganizationTags(api, orgId, projectIds = null) {
  * Fetch tag values for an organization.
  * The `projectIds` argument can be used to subset projects.
  */
-export function fetchTagValues(api, orgId, tagKey, search = null, projectIds = null) {
+export function fetchTagValues(
+  api,
+  orgId,
+  tagKey,
+  search = null,
+  projectIds = null,
+  endpointParams = null
+) {
   const url = `/organizations/${orgId}/tags/${tagKey}/values/`;
 
   const query = {};
@@ -97,6 +104,17 @@ export function fetchTagValues(api, orgId, tagKey, search = null, projectIds = n
   if (projectIds) {
     query.project = projectIds;
   }
+  if (endpointParams) {
+    if (endpointParams.start) {
+      query.start = endpointParams.start;
+    }
+    if (endpointParams.end) {
+      query.end = endpointParams.end;
+    }
+    if (endpointParams.statsPeriod) {
+      query.statsPeriod = endpointParams.statsPeriod;
+    }
+  }
 
   return api.requestPromise(url, {
     method: 'GET',
diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index 47abec2223..7ea8a6281b 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -35,6 +35,7 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
+import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 
 import SearchDropdown from './searchDropdown';
 
@@ -482,7 +483,10 @@ class SmartSearchBar extends React.Component {
       });
 
       try {
-        const values = await this.props.onGetTagValues(tag, query);
+        const {location} = this.context.router;
+        const endpointParams = getParams(location.query);
+
+        const values = await this.props.onGetTagValues(tag, query, endpointParams);
         this.setState({loading: false});
         return values.map(value => {
           // Wrap in quotes if there is a space
diff --git a/src/sentry/static/sentry/app/views/events/searchBar.jsx b/src/sentry/static/sentry/app/views/events/searchBar.jsx
index 2adfe31145..b7533c4573 100644
--- a/src/sentry/static/sentry/app/views/events/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/events/searchBar.jsx
@@ -66,10 +66,17 @@ class SearchBar extends React.PureComponent {
    * with data when ready
    */
   getEventFieldValues = memoize(
-    (tag, query) => {
+    (tag, query, endpointParams) => {
       const {api, organization, projectIds} = this.props;
 
-      return fetchTagValues(api, organization.slug, tag.key, query, projectIds).then(
+      return fetchTagValues(
+        api,
+        organization.slug,
+        tag.key,
+        query,
+        projectIds,
+        endpointParams
+      ).then(
         results =>
           flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),
         () => {
diff --git a/src/sentry/static/sentry/app/views/issueList/overview.jsx b/src/sentry/static/sentry/app/views/issueList/overview.jsx
index 94c7aee278..583e7094b6 100644
--- a/src/sentry/static/sentry/app/views/issueList/overview.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/overview.jsx
@@ -597,8 +597,9 @@ const IssueListOverview = createReactClass({
   tagValueLoader(key, search) {
     const {orgId} = this.props.params;
     const projectIds = this.getGlobalSearchProjects().map(p => p.id);
+    const endpointParams = this.getEndpointParams();
 
-    return fetchTagValues(this.api, orgId, key, search, projectIds);
+    return fetchTagValues(this.api, orgId, key, search, projectIds, endpointParams);
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/issueList/searchBar.jsx b/src/sentry/static/sentry/app/views/issueList/searchBar.jsx
index b650003a2b..200df9859b 100644
--- a/src/sentry/static/sentry/app/views/issueList/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/issueList/searchBar.jsx
@@ -88,9 +88,9 @@ class IssueListSearchBar extends React.Component {
    * with data when ready
    */
   getTagValues = (tag, query) => {
-    const {tagValueLoader} = this.props;
+    const {tagValueLoader, projectIds} = this.props;
 
-    return tagValueLoader(tag.key, query).then(
+    return tagValueLoader(tag.key, query, projectIds).then(
       values => values.map(({value}) => value),
       () => {
         throw new Error('Unable to fetch project tags');
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index ff0e570561..f62e75c29f 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -564,12 +564,21 @@ class SnubaTagStorage(TagStorage):
         return defaultdict(int, {k: v for k, v in result.items() if v})
 
     def get_tag_value_paginator(
-        self, project_id, environment_id, key, query=None, order_by="-last_seen"
+        self,
+        project_id,
+        environment_id,
+        key,
+        start=None,
+        end=None,
+        query=None,
+        order_by="-last_seen",
     ):
         return self.get_tag_value_paginator_for_projects(
             get_project_list(project_id),
             [environment_id] if environment_id else None,
             key,
+            start=start,
+            end=end,
             query=query,
             order_by=order_by,
         )
diff --git a/tests/js/spec/views/events/searchBar.spec.jsx b/tests/js/spec/views/events/searchBar.spec.jsx
index c4c2e3fdff..c3fa2d00e8 100644
--- a/tests/js/spec/views/events/searchBar.spec.jsx
+++ b/tests/js/spec/views/events/searchBar.spec.jsx
@@ -85,7 +85,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({query: {project: [1, 2]}})
+      expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
     );
 
     await tick();
@@ -116,7 +116,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({query: {project: [1, 2]}})
+      expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
     );
 
     await tick();
@@ -191,7 +191,7 @@ describe('SearchBar', function() {
 
     expect(tagValuesMock).toHaveBeenCalledWith(
       '/organizations/org-slug/tags/gpu/values/',
-      expect.objectContaining({query: {project: [1, 2]}})
+      expect.objectContaining({query: {project: [1, 2], statsPeriod: '14d'}})
     );
     selectFirstAutocompleteItem(wrapper);
     expect(wrapper.find('input').prop('value')).toBe('!gpu:*"Nvidia 1080ti" ');
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_values.py b/tests/sentry/api/endpoints/test_project_tagkey_values.py
index 72e8f8984e..ac6ccf9fe9 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_values.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_values.py
@@ -60,3 +60,70 @@ class ProjectTagKeyValuesTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200
         assert len(response.data) == 0
+
+    def test_statperiod_query(self):
+        project = self.create_project()
+        self.store_event(
+            data={"tags": {"foo": "bar"}, "timestamp": iso_format(before_now(days=15))},
+            project_id=project.id,
+        )
+
+        self.login_as(user=self.user)
+
+        url = reverse(
+            "sentry-api-0-project-tagkey-values",
+            kwargs={
+                "organization_slug": project.organization.slug,
+                "project_slug": project.slug,
+                "key": "foo",
+            },
+        )
+        response = self.client.get(url + "?query=bar&statsPeriod=14d")
+
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+        response = self.client.get(url + "?query=bar&statsPeriod=30d")
+
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]["value"] == "bar"
+
+    def test_start_end_query(self):
+        project = self.create_project()
+        self.store_event(
+            data={"tags": {"foo": "bar"}, "timestamp": iso_format(before_now(days=15))},
+            project_id=project.id,
+        )
+
+        self.login_as(user=self.user)
+
+        url = reverse(
+            "sentry-api-0-project-tagkey-values",
+            kwargs={
+                "organization_slug": project.organization.slug,
+                "project_slug": project.slug,
+                "key": "foo",
+            },
+        )
+
+        response = self.client.get(
+            url
+            + "?query=bar&start={}&end={}".format(
+                iso_format(before_now(days=14)), iso_format(before_now(seconds=1))
+            )
+        )
+
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+        response = self.client.get(
+            url
+            + "?query=bar&start={}&end={}".format(
+                iso_format(before_now(days=16)), iso_format(before_now(days=14))
+            )
+        )
+
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]["value"] == "bar"
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index cc57470e49..04dc75dba3 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -451,6 +451,42 @@ class TagStorageTest(TestCase, SnubaTestCase):
             )
         ]
 
+    def test_get_tag_value_paginator_with_dates(self):
+        from sentry.tagstore.types import TagValue
+
+        day_ago = self.now - timedelta(days=1)
+        two_days_ago = self.now - timedelta(days=2)
+        assert list(
+            self.ts.get_tag_value_paginator(
+                self.proj1.id, self.proj1env1.id, "sentry:user", start=day_ago, end=self.now
+            ).get_result(10)
+        ) == [
+            TagValue(
+                key="sentry:user",
+                value="id:user1",
+                times_seen=2,
+                first_seen=self.now - timedelta(seconds=2),
+                last_seen=self.now - timedelta(seconds=1),
+            ),
+            TagValue(
+                key="sentry:user",
+                value="id:user2",
+                times_seen=1,
+                first_seen=self.now - timedelta(seconds=2),
+                last_seen=self.now - timedelta(seconds=2),
+            ),
+        ]
+
+        day_ago = self.now - timedelta(days=1)
+        assert (
+            list(
+                self.ts.get_tag_value_paginator(
+                    self.proj1.id, self.proj1env1.id, "sentry:user", start=two_days_ago, end=day_ago
+                ).get_result(10)
+            )
+            == []
+        )
+
     def test_get_group_tag_value_iter(self):
         from sentry.tagstore.types import GroupTagValue
 
