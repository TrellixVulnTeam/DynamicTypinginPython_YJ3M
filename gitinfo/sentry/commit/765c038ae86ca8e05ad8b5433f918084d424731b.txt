commit 765c038ae86ca8e05ad8b5433f918084d424731b
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 17 09:20:08 2015 -0800

    Correct continuous cascade on delete team/organization tasks

diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index ddd1b7044e..936e531aaa 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -17,7 +17,7 @@ from sentry.utils import db
 @instrumented_task(name='sentry.tasks.deletion.delete_organization', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
-def delete_organization(object_id, **kwargs):
+def delete_organization(object_id, continuous=True, **kwargs):
     from sentry.models import (
         Organization, OrganizationMember, OrganizationStatus, Team
     )
@@ -33,15 +33,17 @@ def delete_organization(object_id, **kwargs):
     logger = delete_organization.get_logger()
     for team in Team.objects.filter(organization=o).order_by('id')[:1]:
         logger.info('Removing Team id=%s where organization=%s', team.id, o.id)
-        delete_team(team.id)
-        delete_organization.delay(object_id=object_id, countdown=15)
+        delete_team(team.id, continuous=False)
+        if continuous:
+            delete_organization.delay(object_id=object_id, countdown=15)
         return
 
     model_list = (OrganizationMember,)
 
     has_more = delete_objects(model_list, relation={'organization': o}, logger=logger)
     if has_more:
-        delete_organization.delay(object_id=object_id, countdown=15)
+        if continuous:
+            delete_organization.delay(object_id=object_id, countdown=15)
         return
     o.delete()
 
@@ -49,7 +51,7 @@ def delete_organization(object_id, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_team', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
-def delete_team(object_id, **kwargs):
+def delete_team(object_id, continuous=True, **kwargs):
     from sentry.models import (
         Team, TeamStatus, Project, AccessGroup,
     )
@@ -67,15 +69,17 @@ def delete_team(object_id, **kwargs):
     # Delete 1 project at a time since this is expensive by itself
     for project in Project.objects.filter(team=t).order_by('id')[:1]:
         logger.info('Removing Project id=%s where team=%s', project.id, t.id)
-        delete_project(project.id)
-        delete_team.delay(object_id=object_id, countdown=15)
+        delete_project(project.id, continuous=False)
+        if continuous:
+            delete_team.delay(object_id=object_id, countdown=15)
         return
 
     model_list = (AccessGroup,)
 
     has_more = delete_objects(model_list, relation={'team': t}, logger=logger)
     if has_more:
-        delete_team.delay(object_id=object_id, countdown=15)
+        if continuous:
+            delete_team.delay(object_id=object_id, countdown=15)
         return
     t.delete()
 
@@ -83,7 +87,7 @@ def delete_team(object_id, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_project', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
-def delete_project(object_id, **kwargs):
+def delete_project(object_id, continuous=True, **kwargs):
     from sentry.models import (
         Project, ProjectKey, ProjectStatus, TagKey, TagValue, GroupTagKey,
         GroupTagValue, Activity, EventMapping, Group, GroupRuleStatus,
@@ -108,19 +112,22 @@ def delete_project(object_id, **kwargs):
     for model in model_list:
         has_more = bulk_delete_objects(model, project_id=p.id, logger=logger)
         if has_more:
-            delete_project.delay(object_id=object_id, countdown=15)
+            if continuous:
+                delete_project.delay(object_id=object_id, countdown=15)
             return
 
     has_more = delete_events(relation={'project_id': p.id}, logger=logger)
     if has_more:
-        delete_project.delay(object_id=object_id, countdown=15)
+        if continuous:
+            delete_project.delay(object_id=object_id, countdown=15)
         return
 
     model_list = (Group,)
     for model in model_list:
         has_more = bulk_delete_objects(model, project_id=p.id, logger=logger)
         if has_more:
-            delete_project.delay(object_id=object_id, countdown=15)
+            if continuous:
+                delete_project.delay(object_id=object_id, countdown=15)
             return
     p.delete()
 
@@ -128,7 +135,7 @@ def delete_project(object_id, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_group', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
-def delete_group(object_id, **kwargs):
+def delete_group(object_id, continuous=True, **kwargs):
     from sentry.models import (
         Group, GroupHash, GroupRuleStatus, GroupTagKey, GroupTagValue,
         EventMapping
@@ -147,12 +154,14 @@ def delete_group(object_id, **kwargs):
     for model in bulk_model_list:
         has_more = bulk_delete_objects(model, group_id=object_id, logger=logger)
         if has_more:
-            delete_group.delay(object_id=object_id, countdown=15)
+            if continuous:
+                delete_group.delay(object_id=object_id, countdown=15)
             return
 
     has_more = delete_events(relation={'group_id': object_id}, logger=logger)
     if has_more:
-        delete_group.delay(object_id=object_id, countdown=15)
+        if continuous:
+            delete_group.delay(object_id=object_id, countdown=15)
         return
     group.delete()
 
@@ -160,7 +169,7 @@ def delete_group(object_id, **kwargs):
 @instrumented_task(name='sentry.tasks.deletion.delete_tag_key', queue='cleanup',
                    default_retry_delay=60 * 5, max_retries=None)
 @retry
-def delete_tag_key(object_id, **kwargs):
+def delete_tag_key(object_id, continuous=True, **kwargs):
     from sentry.models import (
         GroupTagKey, GroupTagValue, TagKey, TagKeyStatus, TagValue
     )
@@ -181,12 +190,14 @@ def delete_tag_key(object_id, **kwargs):
     for model in bulk_model_list:
         has_more = bulk_delete_objects(model, key=tagkey.key, logger=logger)
         if has_more:
-            delete_tag_key.delay(object_id=object_id, countdown=15)
+            if continuous:
+                delete_tag_key.delay(object_id=object_id, countdown=15)
             return
 
     has_more = delete_events(relation={'group_id': object_id}, logger=logger)
     if has_more:
-        delete_tag_key.delay(object_id=object_id, countdown=15)
+        if continuous:
+            delete_tag_key.delay(object_id=object_id, countdown=15)
         return
     tagkey.delete()
 
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 2b54cbe0cf..563b14a55d 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -1,15 +1,14 @@
 from mock import patch
 
 from sentry.models import (
-    GroupTagKey, GroupTagValue, Project, TagKey, TagValue, Team, TeamStatus
+    GroupTagKey, GroupTagValue, TagKey, TagValue, Team
 )
 from sentry.tasks.deletion import delete_tag_key, delete_team
 from sentry.testutils import TestCase
 
 
 class DeleteTeamTest(TestCase):
-    @patch.object(delete_team, 'delay')
-    def test_simple(self, delete_team_delay):
+    def test_simple(self):
         team = self.create_team(name='test', slug='test')
         project1 = self.create_project(team=team, name='test1', slug='test1')
         project2 = self.create_project(team=team, name='test2', slug='test2')
@@ -17,29 +16,7 @@ class DeleteTeamTest(TestCase):
         with self.settings(CELERY_ALWAYS_EAGER=True):
             delete_team(object_id=team.id)
 
-            team = Team.objects.get(id=team.id)
-
-            assert team.status == TeamStatus.DELETION_IN_PROGRESS
-
-            assert not Project.objects.filter(id=project1.id).exists()
-
-            delete_team_delay.assert_called_once_with(object_id=team.id, countdown=15)
-
-            delete_team_delay.reset_mock()
-
-            delete_team(object_id=team.id)
-
-            assert not Project.objects.filter(id=project2.id).exists()
-
-            delete_team_delay.assert_called_once_with(object_id=team.id, countdown=15)
-
-            delete_team_delay.reset_mock()
-
-            delete_team(object_id=team.id)
-
-            assert not delete_team_delay.called
-
-            assert not Team.objects.filter(id=team.id).exists()
+        assert not Team.objects.filter(id=team.id).exists()
 
 
 class DeleteTagKeyTest(TestCase):
