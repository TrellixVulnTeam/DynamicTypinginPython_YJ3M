commit cb843dfcc9d5f9f4b61ede9b709f67927cfc7ed3
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Apr 19 10:50:22 2017 +0200

    Added distribution support to legacy project release endpoints

diff --git a/src/sentry/api/endpoints/project_release_file_details.py b/src/sentry/api/endpoints/project_release_file_details.py
index 708d8698e5..6f424077fa 100644
--- a/src/sentry/api/endpoints/project_release_file_details.py
+++ b/src/sentry/api/endpoints/project_release_file_details.py
@@ -8,7 +8,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
-from sentry.models import Release, ReleaseFile
+from sentry.models import Release, ReleaseFile, Distribution
 from sentry.utils.apidocs import scenario, attach_scenarios
 try:
     from django.http import (
@@ -104,6 +104,7 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
                                      file of.
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to retrieve.
+        :param string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -115,10 +116,22 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
         except Release.DoesNotExist:
             raise ResourceDoesNotExist
 
+        dist_name = request.GET.get('distribution')
+        dist = None
+        if dist_name:
+            try:
+                dist = Distribution.objects.get(
+                    release=release,
+                    name=dist_name,
+                )
+            except Distribution.DoesNotExist:
+                raise ResourceDoesNotExist
+
         try:
             releasefile = ReleaseFile.objects.get(
                 release=release,
                 id=file_id,
+                distribution=dist,
             )
         except ReleaseFile.DoesNotExist:
             raise ResourceDoesNotExist
@@ -147,6 +160,7 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to update.
         :param string name: the new name of the file.
+        :param string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -158,10 +172,16 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
         except Release.DoesNotExist:
             raise ResourceDoesNotExist
 
+        dist_name = request.DATA.get('distribution')
+        dist = None
+        if dist_name:
+            dist = Distribution.get_or_create(release, dist_name)
+
         try:
             releasefile = ReleaseFile.objects.get(
                 release=release,
                 id=file_id,
+                distribution=dist,
             )
         except ReleaseFile.DoesNotExist:
             raise ResourceDoesNotExist
@@ -195,6 +215,7 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
                                      file of.
         :pparam string version: the version identifier of the release.
         :pparam string file_id: the ID of the file to delete.
+        :param string distribution: the name of the distribution.
         :auth: required
         """
         try:
@@ -206,10 +227,22 @@ class ProjectReleaseFileDetailsEndpoint(ProjectEndpoint):
         except Release.DoesNotExist:
             raise ResourceDoesNotExist
 
+        dist_name = request.GET.get('distribution')
+        dist = None
+        if dist_name:
+            try:
+                dist = Distribution.objects.get(
+                    release=release,
+                    name=dist_name,
+                )
+            except Distribution.DoesNotExist:
+                raise ResourceDoesNotExist
+
         try:
             releasefile = ReleaseFile.objects.get(
                 release=release,
                 id=file_id,
+                distribution=dist,
             )
         except ReleaseFile.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/project_release_files.py b/src/sentry/api/endpoints/project_release_files.py
index 2981fa596b..6238a47419 100644
--- a/src/sentry/api/endpoints/project_release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -11,7 +11,7 @@ from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.models import File, Release, ReleaseFile
+from sentry.models import File, Release, ReleaseFile, Distribution
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 ERR_FILE_EXISTS = 'A file matching this name already exists for the given release'
@@ -112,6 +112,7 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
                                      release of.
         :pparam string version: the version identifier of the release.
         :param string name: the name (full path) of the file.
+        :param string distribution: the name of the distribution.
         :param file file: the multipart encoded file.
         :param string header: this parameter can be supplied multiple times
                               to attach headers to the file.  Each header
@@ -143,6 +144,11 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
         if _filename_re.search(name):
             return Response({'detail': 'File name must not contain special whitespace characters'}, status=400)
 
+        dist_name = request.DATA.get('distribution')
+        dist = None
+        if dist_name:
+            dist = Distribution.get_or_create(release, dist_name)
+
         headers = {
             'Content-Type': fileobj.content_type,
         }
@@ -170,6 +176,7 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
                     release=release,
                     file=file,
                     name=full_name,
+                    distribution=dist
                 )
         except IntegrityError:
             file.delete()
