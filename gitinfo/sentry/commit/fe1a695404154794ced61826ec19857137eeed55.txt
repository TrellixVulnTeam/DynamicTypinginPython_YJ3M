commit fe1a695404154794ced61826ec19857137eeed55
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Feb 11 14:35:07 2018 -0800

    feat(settings): Add service hook settings
    
    - Make 'events' optional for service hook endpoints
    - Add service hook stats endpoint
    - Add service hook list
    - Add service hook creation
    - Add service hook details (and edit)

diff --git a/src/sentry/api/endpoints/project_servicehook_details.py b/src/sentry/api/endpoints/project_servicehook_details.py
index 1af98dd90c..8cc2b54a49 100644
--- a/src/sentry/api/endpoints/project_servicehook_details.py
+++ b/src/sentry/api/endpoints/project_servicehook_details.py
@@ -8,6 +8,7 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.api.validators import ServiceHookValidator
+from sentry.constants import ObjectStatus
 from sentry.models import AuditLogEntryEvent, ServiceHook
 
 
@@ -67,12 +68,16 @@ class ProjectServiceHookDetailsEndpoint(ProjectEndpoint):
         result = validator.object
 
         updates = {}
-        if result.get('events'):
+        if result.get('events') is not None:
             updates['events'] = result['events']
         if result.get('url'):
             updates['url'] = result['url']
         if result.get('version') is not None:
             updates['version'] = result['version']
+        if result.get('isActive') is True:
+            updates['status'] = ObjectStatus.ACTIVE
+        elif result.get('isActive') is False:
+            updates['status'] = ObjectStatus.DISABLED
 
         with transaction.atomic():
             hook.update(**updates)
diff --git a/src/sentry/api/endpoints/project_servicehook_stats.py b/src/sentry/api/endpoints/project_servicehook_stats.py
new file mode 100644
index 0000000000..078f4ed566
--- /dev/null
+++ b/src/sentry/api/endpoints/project_servicehook_stats.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+import six
+
+from collections import OrderedDict
+
+from sentry import tsdb
+from sentry.api.base import StatsMixin
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.models import ServiceHook
+
+
+class ProjectServiceHookStatsEndpoint(ProjectEndpoint, StatsMixin):
+    def get(self, request, project, hook_id):
+        try:
+            hook = ServiceHook.objects.get(
+                project_id=project.id,
+                guid=hook_id,
+            )
+        except ServiceHook.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        stat_args = self._parse_args(request)
+
+        stats = OrderedDict()
+        for model, name in (
+            (tsdb.models.servicehook_fired, 'total'),
+        ):
+            result = tsdb.get_range(model=model, keys=[hook.id], **stat_args)[hook.id]
+            for ts, count in result:
+                stats.setdefault(int(ts), {})[name] = count
+
+        return self.respond([
+            {
+                'ts': ts,
+                'total': data['total'],
+            } for ts, data in six.iteritems(stats)
+        ])
diff --git a/src/sentry/api/serializers/models/servicehook.py b/src/sentry/api/serializers/models/servicehook.py
index 95f6258182..e4a390c093 100644
--- a/src/sentry/api/serializers/models/servicehook.py
+++ b/src/sentry/api/serializers/models/servicehook.py
@@ -12,5 +12,6 @@ class ServiceHookSerializer(Serializer):
             'url': obj.url,
             'secret': obj.secret,
             'status': obj.get_status_display(),
+            'events': sorted(obj.events),
             'dateCreated': obj.date_added,
         }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 2e6ab99318..14f82bd0db 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -121,6 +121,7 @@ from .endpoints.project_processingissues import ProjectProcessingIssuesEndpoint,
 from .endpoints.project_reprocessing import ProjectReprocessingEndpoint
 from .endpoints.project_servicehooks import ProjectServiceHooksEndpoint
 from .endpoints.project_servicehook_details import ProjectServiceHookDetailsEndpoint
+from .endpoints.project_servicehook_stats import ProjectServiceHookStatsEndpoint
 from .endpoints.project_user_details import ProjectUserDetailsEndpoint
 from .endpoints.project_user_reports import ProjectUserReportsEndpoint
 from .endpoints.project_user_stats import ProjectUserStatsEndpoint
@@ -639,6 +640,10 @@ urlpatterns = patterns(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/hooks/(?P<hook_id>[^\/]+)/$',
         ProjectServiceHookDetailsEndpoint.as_view(),
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/hooks/(?P<hook_id>[^\/]+)/stats/$',
+        ProjectServiceHookStatsEndpoint.as_view(),
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:issues|groups)/$',
         ProjectGroupIndexEndpoint.as_view(),
diff --git a/src/sentry/api/validators/servicehook.py b/src/sentry/api/validators/servicehook.py
index c9b520461f..40da6c985f 100644
--- a/src/sentry/api/validators/servicehook.py
+++ b/src/sentry/api/validators/servicehook.py
@@ -11,11 +11,12 @@ class ServiceHookValidator(serializers.Serializer):
     url = serializers.URLField(required=True)
     events = ListField(
         child=serializers.CharField(max_length=255),
-        required=True,
+        required=False,
     )
     version = serializers.ChoiceField(choices=(
         (0, '0'),
     ), required=False, default=0)
+    isActive = serializers.BooleanField(required=False, default=True)
 
     def validate_events(self, attrs, source):
         value = attrs[source]
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 9983a21c9e..7c4ab376b1 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -248,7 +248,6 @@ const projectSettingsRoutes = (
         import(/*webpackChunkName: "ProjectTeams"*/ './views/settings/project/projectTeams')}
       component={errorHandler(LazyLoad)}
     />
-
     <Route name="Alerts" path="alerts/">
       <IndexRoute component={errorHandler(ProjectAlertSettings)} />
       <Route path="rules/" name="Rules" component={null}>
@@ -261,7 +260,6 @@ const projectSettingsRoutes = (
         />
       </Route>
     </Route>
-
     <Route
       name="Environments"
       path="environments/"
@@ -325,6 +323,30 @@ const projectSettingsRoutes = (
       <IndexRedirect to="data-filters/" />
       <Route path=":filterType/" />
     </Route>
+    <Route
+      key="hooks/"
+      path="hooks/"
+      name="Service Hooks"
+      componentPromise={() =>
+        import(/*webpackChunkName: "ProjectServiceHooks"*/ './views/settings/project/projectServiceHooks')}
+      component={errorHandler(LazyLoad)}
+    />
+    <Route
+      key="hooks/new/"
+      path="hooks/new/"
+      name="Create Service Hook"
+      componentPromise={() =>
+        import(/*webpackChunkName: "ProjectCreateServiceHook"*/ './views/settings/project/projectCreateServiceHook')}
+      component={errorHandler(LazyLoad)}
+    />
+    <Route
+      key="hooks/:hookId/"
+      path="hooks/:hookId/"
+      name="Service Hook Details"
+      componentPromise={() =>
+        import(/*webpackChunkName: "ProjectServiceHookDetails"*/ './views/settings/project/projectServiceHookDetails')}
+      component={errorHandler(LazyLoad)}
+    />
     <Route path="keys/" name="Client Keys">
       <IndexRoute
         componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/settings/account/apiNewToken.jsx b/src/sentry/static/sentry/app/views/settings/account/apiNewToken.jsx
index 6f12cf70a1..96df8b974d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/apiNewToken.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/apiNewToken.jsx
@@ -13,7 +13,7 @@ import TextBlock from '../components/text/textBlock';
 
 const SORTED_DEFAULT_API_SCOPES = DEFAULT_API_SCOPES.sort();
 const API_CHOICES = API_SCOPES.map(s => [s, s]);
-const API_INDEX_ROUTE = '/settings/account/api/auth-tokens';
+const API_INDEX_ROUTE = '/settings/account/api/auth-tokens/';
 
 export default class ApiNewToken extends React.Component {
   onCancel = () => {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index ee533b1fd9..8f78a9c850 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -23,6 +23,7 @@ export default class FieldFromConfig extends React.Component {
         'radio',
         'choice',
         'select',
+        'multichoice',
         'range',
       ]),
       required: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx b/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx
new file mode 100644
index 0000000000..68c65ac017
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectCreateServiceHook.jsx
@@ -0,0 +1,24 @@
+import React from 'react';
+
+import {t} from '../../../locale';
+import AsyncView from '../../asyncView';
+import SettingsPageHeader from '../components/settingsPageHeader';
+
+import ServiceHookSettingsForm from './serviceHookSettingsForm';
+
+export default class ProjectCreateServiceHook extends AsyncView {
+  renderBody() {
+    let {orgId, projectId} = this.props.params;
+    return (
+      <div className="ref-project-create-service-hook">
+        <SettingsPageHeader title={t('Create Service Hook')} />
+        <ServiceHookSettingsForm
+          {...this.props}
+          orgId={orgId}
+          projectId={projectId}
+          initialData={{events: []}}
+        />
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
new file mode 100644
index 0000000000..9eb56f1f04
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHookDetails.jsx
@@ -0,0 +1,189 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from '../../../locale';
+import AsyncComponent from '../../../components/asyncComponent';
+import AsyncView from '../../asyncView';
+import {Panel, PanelAlert, PanelBody, PanelHeader} from '../../../components/panels';
+import Button from '../../../components/buttons/button';
+import EmptyMessage from '../components/emptyMessage';
+import ErrorBoundary from '../../../components/errorBoundary';
+import Field from '../components/forms/field';
+import getDynamicText from '../../../utils/getDynamicText';
+import IndicatorStore from '../../../stores/indicatorStore';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import StackedBarChart from '../../../components/stackedBarChart';
+import TextBlock from '../components/text/textBlock';
+import TextCopyInput from '../components/forms/textCopyInput';
+
+import ServiceHookSettingsForm from './serviceHookSettingsForm';
+
+// TODO(dcramer): this is duplicated in ProjectKeyDetails
+const EmptyHeader = styled.div`
+  font-size: 1.3em;
+`;
+
+class HookStats extends AsyncComponent {
+  getEndpoints() {
+    let until = Math.floor(new Date().getTime() / 1000);
+    let since = until - 3600 * 24 * 30;
+    let {hookId, orgId, projectId} = this.props.params;
+    return [
+      [
+        'stats',
+        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,
+        {
+          query: {
+            since,
+            until,
+            resolution: '1d',
+          },
+        },
+      ],
+    ];
+  }
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = chart.getTimeLabel(point);
+    let [total] = point.y;
+
+    let value = `${total.toLocaleString()} events`;
+
+    return (
+      '<div style="width:150px">' +
+      `<div class="time-label">${timeLabel}</div>` +
+      `<div class="value-label">${value}</div>` +
+      '</div>'
+    );
+  }
+
+  renderBody() {
+    let emptyStats = true;
+    let stats = this.state.stats.map(p => {
+      if (p.total) emptyStats = false;
+      return {
+        x: p.ts,
+        y: [p.accepted, p.dropped],
+      };
+    });
+
+    return (
+      <Panel>
+        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>
+        <PanelBody>
+          {!emptyStats ? (
+            <StackedBarChart
+              points={stats}
+              height={150}
+              label="events"
+              barClasses={['total']}
+              className="standard-barchart"
+              style={{border: 'none'}}
+              tooltip={this.renderTooltip}
+            />
+          ) : (
+            <EmptyMessage css={{flexDirection: 'column', alignItems: 'center'}}>
+              <EmptyHeader>{t('Nothing recorded in the last 30 days.')}</EmptyHeader>
+              <TextBlock css={{marginBottom: 0}}>
+                {t('Total webhooks fired for this configuration.')}
+              </TextBlock>
+            </EmptyMessage>
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default class ProjectServiceHookDetails extends AsyncView {
+  getEndpoints() {
+    let {orgId, projectId, hookId} = this.props.params;
+    return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];
+  }
+
+  onDelete = () => {
+    let {orgId, projectId, hookId} = this.props.params;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {
+      method: 'DELETE',
+      success: () => {
+        IndicatorStore.remove(loadingIndicator);
+        browserHistory.push(`/settings/${orgId}/${projectId}/hooks/`);
+      },
+      error: () => {
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(
+          t('Unable to remove application. Please try again.'),
+          'error',
+          {
+            duration: 3000,
+          }
+        );
+      },
+    });
+  };
+
+  renderBody() {
+    let {orgId, projectId, hookId} = this.props.params;
+    let {hook} = this.state;
+    return (
+      <div>
+        <SettingsPageHeader title={t('Service Hook Details')} />
+
+        <ErrorBoundary>
+          <HookStats params={this.props.params} />
+        </ErrorBoundary>
+
+        <ServiceHookSettingsForm
+          {...this.props}
+          orgId={orgId}
+          projectId={projectId}
+          hookId={hookId}
+          initialData={{
+            ...hook,
+            isActive: hook.status != 'disabled',
+          }}
+        />
+        <Panel>
+          <PanelHeader>{t('Event Validation')}</PanelHeader>
+          <PanelBody>
+            <PanelAlert type="info" icon="icon-circle-exclamation" m={0} mb={0}>
+              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}
+              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify
+              this signature before trusting the information provided in the webhook.
+            </PanelAlert>
+            <Field
+              label={t('Secret')}
+              flexibleControlStateSize
+              inline={false}
+              help={t('The shared secret used for generating event HMAC signatures.')}
+            >
+              <TextCopyInput>
+                {getDynamicText({
+                  value: hook.secret,
+                  fixed: 'a dynamic secret value',
+                })}
+              </TextCopyInput>
+            </Field>
+          </PanelBody>
+        </Panel>
+        <Panel>
+          <PanelHeader>{t('Delete Hook')}</PanelHeader>
+          <PanelBody>
+            <Field
+              label={t('Delete Hook')}
+              help={t('Removing this hook is immediate and permanent.')}
+            >
+              <div>
+                <Button priority="danger" onClick={this.onDelete}>
+                  Delete Hook
+                </Button>
+              </div>
+            </Field>
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
new file mode 100644
index 0000000000..53ceb1c72c
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectServiceHooks.jsx
@@ -0,0 +1,170 @@
+import PropTypes from 'prop-types';
+import {Link} from 'react-router';
+import React from 'react';
+import createReactClass from 'create-react-class';
+
+import {t} from '../../../locale';
+import ApiMixin from '../../../mixins/apiMixin';
+import AsyncView from '../../asyncView';
+import Button from '../../../components/buttons/button';
+import EmptyMessage from '../components/emptyMessage';
+import Field from '../components/forms/field';
+import IndicatorStore from '../../../stores/indicatorStore';
+import {Panel, PanelAlert, PanelBody, PanelHeader} from '../../../components/panels';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import Switch from '../../../components/switch';
+
+const ServiceHookRow = createReactClass({
+  displayName: 'ServiceHookRow',
+
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    hook: PropTypes.object.isRequired,
+    onToggleActive: PropTypes.func.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  render() {
+    let {orgId, projectId, hook} = this.props;
+    return (
+      <Field
+        label={
+          <Link to={`/settings/${orgId}/${projectId}/hooks/${hook.id}/`}>{hook.url}</Link>
+        }
+        help={
+          hook.events.length !== 0 ? (
+            <small>{hook.events.join(', ')}</small>
+          ) : (
+            <small>
+              <em>no events configured</em>
+            </small>
+          )
+        }
+      >
+        <Switch
+          isActive={hook.status === 'active'}
+          size="lg"
+          toggle={this.props.onToggleActive}
+        />
+      </Field>
+    );
+  },
+});
+
+export default class ProjectServiceHooks extends AsyncView {
+  static contextTypes = {
+    organization: PropTypes.object.isRequired,
+  };
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [['hookList', `/projects/${orgId}/${projectId}/hooks/`]];
+  }
+
+  onToggleActive = hook => {
+    let {orgId, projectId} = this.props.params;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hook.id}/`, {
+      method: 'PUT',
+      data: {
+        isActive: hook.status !== 'active',
+      },
+      success: data => {
+        IndicatorStore.remove(loadingIndicator);
+        let hookList = this.state.hookList.map(h => {
+          if (h.id === data.id) {
+            return {
+              ...h,
+              ...data,
+            };
+          }
+          return h;
+        });
+        this.setState({hookList});
+      },
+      error: () => {
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(
+          t('Unable to remove application. Please try again.'),
+          'error',
+          {
+            duration: 3000,
+          }
+        );
+      },
+    });
+  };
+
+  renderEmpty() {
+    return (
+      <EmptyMessage>
+        {t('There are no service hooks associated with this project.')}
+      </EmptyMessage>
+    );
+  }
+
+  renderResults() {
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <React.Fragment>
+        <PanelHeader key={'header'}>{t('Service Hook')}</PanelHeader>
+        <PanelBody key={'body'}>
+          <PanelAlert type="info" icon="icon-circle-exclamation" m={0} mb={0}>
+            Service Hooks are an early adopter preview feature and will change in the
+            future.
+          </PanelAlert>
+          {this.state.hookList.map(hook => {
+            return (
+              <ServiceHookRow
+                key={hook.id}
+                orgId={orgId}
+                projectId={projectId}
+                hook={hook}
+                onToggleActive={this.onToggleActive.bind(this, hook)}
+              />
+            );
+          })}
+        </PanelBody>
+      </React.Fragment>
+    );
+  }
+
+  renderBody() {
+    let body;
+    if (this.state.hookList.length > 0) body = this.renderResults();
+    else body = this.renderEmpty();
+
+    let {orgId, projectId} = this.props.params;
+    let access = new Set(this.context.organization.access);
+
+    return (
+      <div className="ref-project-service-hooks">
+        <SettingsPageHeader
+          title={t('Service Hooks')}
+          action={
+            access.has('project:write') ? (
+              <Button
+                to={`/settings/${orgId}/${projectId}/hooks/new/`}
+                size="small"
+                priority="primary"
+              >
+                <span className="icon-plus" />&nbsp;{t('Create New Hook')}
+              </Button>
+            ) : null
+          }
+        />
+        <Panel>{body}</Panel>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
new file mode 100644
index 0000000000..284aa0d20d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/serviceHookSettingsForm.jsx
@@ -0,0 +1,81 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+import PropTypes from 'prop-types';
+import createReactClass from 'create-react-class';
+
+import {t} from '../../../locale';
+import ApiForm from '../components/forms/apiForm';
+import BooleanField from '../components/forms/booleanField';
+import FormField from '../components/forms/formField';
+import TextField from '../components/forms/textField';
+import MultipleCheckbox from '../components/forms/controls/multipleCheckbox';
+import {Panel, PanelBody, PanelHeader} from '../../../components/panels';
+
+const EVENT_CHOICES = ['event.alert', 'event.created'].map(e => [e, e]);
+
+export default createReactClass({
+  displayName: 'ServiceHookSettingsForm',
+
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    hookId: PropTypes.string,
+    initialData: PropTypes.object.isRequired,
+  },
+
+  onSubmitSuccess() {
+    let {orgId, projectId} = this.props;
+    browserHistory.push(`/settings/${orgId}/${projectId}/hooks/`);
+  },
+
+  render() {
+    let {initialData, orgId, projectId, hookId} = this.props;
+
+    let endpoint = hookId
+      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`
+      : `/projects/${orgId}/${projectId}/hooks/`;
+
+    return (
+      <Panel>
+        <ApiForm
+          apiMethod={hookId ? 'PUT' : 'POST'}
+          apiEndpoint={endpoint}
+          initialData={initialData}
+          onSubmitSuccess={this.onSubmitSuccess}
+          onCancel={this.onCancel}
+          footerStyle={{
+            marginTop: 0,
+            paddingRight: 20,
+          }}
+          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}
+        >
+          <PanelHeader>{t('Hook Configuration')}</PanelHeader>
+          <PanelBody>
+            <BooleanField name="isActive" label={t('Active')} />
+            <TextField
+              name="url"
+              label={t('URL')}
+              required
+              help={t('The URL which will receive events.')}
+            />
+            <FormField
+              name="events"
+              choices={EVENT_CHOICES}
+              label={t('Events')}
+              inline={false}
+              help={t('The event types you wish to subscribe to.')}
+            >
+              {({value, onChange}) => (
+                <MultipleCheckbox
+                  onChange={onChange}
+                  value={value.peek()}
+                  choices={EVENT_CHOICES}
+                />
+              )}
+            </FormField>
+          </PanelBody>
+        </ApiForm>
+      </Panel>
+    );
+  },
+});
diff --git a/tests/acceptance/test_project_servicehooks.py b/tests/acceptance/test_project_servicehooks.py
new file mode 100644
index 0000000000..f9f8ed3d36
--- /dev/null
+++ b/tests/acceptance/test_project_servicehooks.py
@@ -0,0 +1,68 @@
+from __future__ import absolute_import
+
+from sentry.models import ServiceHook
+from sentry.testutils import AcceptanceTestCase
+
+
+class ProjectTagsServiceHooksTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ProjectTagsServiceHooksTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.project = self.create_project(
+            organization=self.org,
+            teams=[self.team],
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+
+        self.login_as(self.user)
+        self.list_hooks_path = '/settings/{}/{}/hooks/'.format(self.org.slug, self.project.slug)
+        self.new_hook_path = '/settings/{}/{}/hooks/new/'.format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.list_hooks_path)
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.wait_until('.ref-project-service-hooks')
+        self.browser.snapshot('project settings - service hooks - empty list')
+        # click "New"
+        self.browser.click('.ref-project-service-hooks .button-primary')
+
+        self.browser.wait_until_not('.loading-indicator')
+        assert self.browser.current_url == '{}{}'.format(
+            self.browser.live_server_url,
+            self.new_hook_path,
+        )
+        self.browser.snapshot('project settings - service hooks - create')
+        self.browser.element('input[name="url"]').send_keys('https://example.com/hook')
+        # click "Save Changes"
+        self.browser.click('.ref-project-create-service-hook .button-primary')
+
+        self.browser.wait_until_not('.loading-indicator')
+        assert self.browser.current_url == '{}{}'.format(
+            self.browser.live_server_url,
+            self.list_hooks_path,
+        )
+        self.browser.snapshot('project settings - service hooks - list with entries')
+
+        hook = ServiceHook.objects.get(project_id=self.project.id)
+        assert hook.url == 'https://example.com/hook'
+        assert not hook.events
+
+        # hopefully click the first service hook
+        self.browser.click('.ref-project-service-hooks label a')
+        self.browser.wait_until_not('.loading-indicator')
+        assert self.browser.current_url == '{}{}'.format(
+            self.browser.live_server_url,
+            '/settings/{}/{}/hooks/{}/'.format(self.org.slug, self.project.slug, hook.guid),
+        )
+        self.browser.snapshot('project settings - service hooks - details')
diff --git a/tests/sentry/api/endpoints/test_project_servicehook_stats.py b/tests/sentry/api/endpoints/test_project_servicehook_stats.py
new file mode 100644
index 0000000000..2313e6af26
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_servicehook_stats.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from sentry import tsdb
+from sentry.models import ServiceHook
+from sentry.testutils import APITestCase
+
+
+class ProjectServiceHookStatsTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+        hook = ServiceHook.objects.get_or_create(
+            project_id=project.id,
+            actor_id=self.user.id,
+            url='http://example.com',
+        )[0]
+        self.login_as(user=self.user)
+        path = '/api/0/projects/{}/{}/hooks/{}/stats/'.format(
+            project.organization.slug,
+            project.slug,
+            hook.guid,
+        )
+
+        tsdb.incr(tsdb.models.servicehook_fired, hook.id, count=3)
+
+        response = self.client.get(path)
+        assert response.status_code == 200
+
+        assert response.status_code == 200, response.content
+        assert response.data[-1]['total'] == 3, response.data
+        for point in response.data[:-1]:
+            assert point['total'] == 0
+        assert len(response.data) == 24
