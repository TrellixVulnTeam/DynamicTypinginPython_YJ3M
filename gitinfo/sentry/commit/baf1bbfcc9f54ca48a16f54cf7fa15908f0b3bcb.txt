commit baf1bbfcc9f54ca48a16f54cf7fa15908f0b3bcb
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Oct 2 13:05:21 2018 -0700

    ref(discover): Extract handling of result data to resultManager function (#9965)
    
    Extract a resultManager function that handles fetching and storing data for visualisations

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 1824afe085..b492c09866 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -15,6 +15,7 @@ import EarlyAdopterMessage from './earlyAdopterMessage';
 import QueryEdit from './sidebar/queryEdit';
 import SavedQueryList from './sidebar/savedQueryList';
 
+import createResultManager from './resultManager';
 import {getQueryStringFromQuery, getQueryFromQueryString} from './utils';
 import {isValidCondition} from './conditions/utils';
 import {isValidAggregation} from './aggregations/utils';
@@ -36,13 +37,12 @@ export default class OrganizationDiscover extends React.Component {
     queryBuilder: PropTypes.object,
   };
 
-  constructor() {
-    super();
+  constructor(props) {
+    super(props);
+    const resultManager = createResultManager(props.queryBuilder);
     this.state = {
-      data: null,
-      query: null,
-      chartData: null,
-      chartQuery: null,
+      resultManager,
+      data: resultManager.getAll(),
       isFetchingQuery: false,
       view: 'query',
     };
@@ -51,6 +51,7 @@ export default class OrganizationDiscover extends React.Component {
   componentWillReceiveProps(nextProps) {
     const {queryBuilder, location: {search}} = nextProps;
     const currentSearch = this.props.location.search;
+    const {resultManager} = this.state;
 
     if (currentSearch === search) {
       return;
@@ -60,12 +61,9 @@ export default class OrganizationDiscover extends React.Component {
     if (!search) {
       const newQuery = getQueryFromQueryString(search);
       queryBuilder.reset(newQuery);
-
+      resultManager.reset();
       this.setState({
-        data: null,
-        query: null,
-        chartData: null,
-        chartQuery: null,
+        data: resultManager.getAll(),
       });
     }
   }
@@ -91,6 +89,7 @@ export default class OrganizationDiscover extends React.Component {
 
   runQuery = () => {
     const {queryBuilder, organization} = this.props;
+    const {resultManager} = this.state;
 
     // Track query for analytics
     trackQuery(organization, queryBuilder.getExternal());
@@ -117,41 +116,20 @@ export default class OrganizationDiscover extends React.Component {
 
     clearIndicators();
 
-    const externalQuery = queryBuilder.getExternal();
-    const baseQuery = queryBuilder.getQueryByType(externalQuery, 'baseQuery');
-
-    queryBuilder.fetch(baseQuery).then(
-      data => {
-        const query = queryBuilder.getInternal();
-        const queryCopy = {...query};
-        this.setState({data, query: queryCopy, isFetchingQuery: false});
+    resultManager
+      .fetchAll()
+      .then(data => {
+        this.setState({data, isFetchingQuery: false});
 
         browserHistory.push({
           pathname: `/organizations/${organization.slug}/discover/`,
-          search: getQueryStringFromQuery(query),
+          search: getQueryStringFromQuery(queryBuilder.getInternal()),
         });
-      },
-      err => {
+      })
+      .catch(err => {
         addErrorMessage(err.message);
-        this.setState({data: null, query: null, isFetchingQuery: false});
-      }
-    );
-
-    // If there are aggregations, get data for chart
-    if (externalQuery.aggregations.length > 0) {
-      const chartQuery = queryBuilder.getQueryByType(externalQuery, 'byDayQuery');
-
-      queryBuilder.fetch(chartQuery).then(
-        chartData => {
-          this.setState({chartData, chartQuery});
-        },
-        () => {
-          this.setState({chartData: null, chartQuery: null});
-        }
-      );
-    } else {
-      this.setState({chartData: null, chartQuery: null});
-    }
+        this.setState({data: null, isFetchingQuery: false});
+      });
   };
 
   renderSidebarNav() {
@@ -179,11 +157,13 @@ export default class OrganizationDiscover extends React.Component {
   };
 
   render() {
-    const {data, query, chartData, chartQuery, isFetchingQuery, view} = this.state;
+    const {data, isFetchingQuery, view, resultManager} = this.state;
     const {queryBuilder, organization} = this.props;
 
     const currentQuery = queryBuilder.getInternal();
 
+    const shouldDisplayResult = resultManager.shouldDisplayResult();
+
     return (
       <Discover>
         <Sidebar>
@@ -220,16 +200,8 @@ export default class OrganizationDiscover extends React.Component {
             />
           </TopBar>
           <BodyContent>
-            {data && (
-              <Result
-                flex="1"
-                data={data}
-                query={query}
-                chartData={chartData}
-                chartQuery={chartQuery}
-              />
-            )}
-            {!data && <Intro updateQuery={this.updateFields} />}
+            {shouldDisplayResult && <Result flex="1" data={data} />}
+            {!shouldDisplayResult && <Intro updateQuery={this.updateFields} />}
             <EarlyAdopterMessage />
           </BodyContent>
         </Body>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index 62b2f9c3ab..0ac3af6a16 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -17,9 +17,6 @@ import {NUMBER_OF_SERIES_BY_DAY} from '../data';
 export default class Result extends React.Component {
   static propTypes = {
     data: PropTypes.object,
-    query: PropTypes.object,
-    chartData: PropTypes.object,
-    chartQuery: PropTypes.object,
   };
 
   constructor() {
@@ -30,14 +27,16 @@ export default class Result extends React.Component {
   }
 
   componentWillReceiveProps(nextProps) {
-    if (!nextProps.chartData && ['line-by-day', 'bar-by-day'].includes(this.state.view)) {
+    const {baseQuery, byDayQuery} = nextProps.data;
+
+    if (!byDayQuery.data && ['line-by-day', 'bar-by-day'].includes(this.state.view)) {
       this.setState({
         view: 'table',
       });
     }
 
     if (
-      !nextProps.query.aggregations.length &&
+      !baseQuery.query.aggregations.length &&
       ['line', 'bar'].includes(this.state.view)
     ) {
       this.setState({
@@ -47,15 +46,15 @@ export default class Result extends React.Component {
   }
 
   renderToggle() {
-    const {data, query, chartData} = this.props;
+    const {baseQuery, byDayQuery} = this.props.data;
 
     const options = [{id: 'table', name: t('Table')}];
 
-    if (query.aggregations.length) {
+    if (baseQuery.query.aggregations.length) {
       options.push({id: 'line', name: t('Line')}, {id: 'bar', name: t('Bar')});
     }
 
-    if (chartData) {
+    if (byDayQuery.data) {
       options.push(
         {id: 'line-by-day', name: t('Line by Day')},
         {id: 'bar-by-day', name: t('Bar by Day')}
@@ -83,7 +82,7 @@ export default class Result extends React.Component {
           })}
         </div>
         <Box ml={1}>
-          <Link className={linkClasses} onClick={() => downloadAsCsv(data)}>
+          <Link className={linkClasses} onClick={() => downloadAsCsv(baseQuery.data)}>
             {t('Export CSV')}
           </Link>
         </Box>
@@ -92,9 +91,11 @@ export default class Result extends React.Component {
   }
 
   renderSummary() {
-    const {data, chartData} = this.props;
+    const {baseQuery, byDayQuery} = this.props.data;
     const baseViews = ['table', 'line', 'bar'];
-    const summaryData = baseViews.includes(this.state.view) ? data : chartData;
+    const summaryData = baseViews.includes(this.state.view)
+      ? baseQuery.data
+      : byDayQuery.chartData;
 
     return (
       <ResultSummary>
@@ -110,12 +111,13 @@ export default class Result extends React.Component {
   }
 
   render() {
-    const {data, query, chartQuery, chartData} = this.props;
+    const {baseQuery, byDayQuery} = this.props.data;
     const {view} = this.state;
 
-    const basicChartData = getChartData(data.data, query);
+    const basicChartData = getChartData(baseQuery.data.data, baseQuery.query);
 
-    const byDayChartData = chartData && getChartDataByDay(chartData.data, chartQuery);
+    const byDayChartData =
+      byDayQuery.data && getChartDataByDay(byDayQuery.data.data, byDayQuery.query);
 
     const legendData = byDayChartData
       ? {data: byDayChartData.map(entry => entry.seriesName)}
@@ -135,14 +137,14 @@ export default class Result extends React.Component {
           {this.renderToggle()}
         </Flex>
 
-        {view === 'table' && <Table data={data} query={query} />}
+        {view === 'table' && <Table data={baseQuery.data} query={baseQuery.query} />}
         {view === 'line' && (
           <ChartWrapper>
             <LineChart
               series={basicChartData}
               height={300}
               tooltip={tooltipOptions}
-              legend={{data: [query.aggregations[0][2]]}}
+              legend={{data: [baseQuery.aggregations[0][2]]}}
               renderer="canvas"
             />
           </ChartWrapper>
@@ -153,7 +155,7 @@ export default class Result extends React.Component {
               series={basicChartData}
               height={300}
               tooltip={tooltipOptions}
-              legend={{data: [query.aggregations[0][2]]}}
+              legend={{data: [baseQuery.aggregations[0][2]]}}
               renderer="canvas"
             />
           </ChartWrapper>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
new file mode 100644
index 0000000000..77341e47c3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/resultManager.jsx
@@ -0,0 +1,83 @@
+/*eslint no-use-before-define: ["error", { "functions": false }]*/
+
+/**
+ * This function is responsible for fetching and storing result data for
+ * result tables and visualizations.
+ */
+export default function createResultManager(queryBuilder) {
+  const data = {
+    baseQuery: {query: null, data: null},
+    byDayQuery: {query: null, data: null},
+  };
+
+  return {
+    getAll,
+    fetchAll,
+    reset,
+    shouldDisplayResult,
+  };
+
+  /**
+   * Returns data for all relevant visuzlizations.
+   *
+   * @returns {Promise<Object>}
+   */
+  function getAll() {
+    return data;
+  }
+
+  /**
+   * Fetches data for all relevant visuzlizations.
+   * Always fetches base query data, and fetches by-day data only if the
+   * current query contains an aggregation.
+   *
+   * @returns {Promise<Object>}
+   */
+  function fetchAll() {
+    const query = queryBuilder.getExternal();
+    const baseQuery = queryBuilder.getQueryByType(query, 'baseQuery');
+    const byDayQuery = queryBuilder.getQueryByType(query, 'byDayQuery');
+
+    const promises = [queryBuilder.fetch(baseQuery)];
+
+    const hasAggregations = query.aggregations.length > 0;
+
+    // If there are aggregations, get by-day data
+    if (hasAggregations) {
+      promises.push(queryBuilder.fetch(byDayQuery));
+    }
+
+    return Promise.all(promises).then(resp => {
+      data.baseQuery.query = baseQuery;
+      data.baseQuery.data = resp[0];
+
+      if (hasAggregations) {
+        data.byDayQuery.query = byDayQuery;
+        data.byDayQuery.data = resp[1];
+      }
+
+      return data;
+    });
+  }
+
+  /**
+   * Resets data for all visualizations.
+   *
+   * @returns {Void}
+   */
+  function reset() {
+    for (let key in data) {
+      data[key] = {query: null, data: null};
+    }
+  }
+
+  /**
+   * Returns a boolean indicating whether the result whould be displayed.
+   * If there is base data available this is true.
+   *
+   * @returns {Boolean}
+   */
+  function shouldDisplayResult() {
+    return data.baseQuery.data !== null;
+  }
+}
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 4b78c79987..a2e0180329 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -25,7 +25,7 @@ describe('Discover', function() {
       await tick();
       expect(queryBuilder.fetch).toHaveBeenCalledTimes(1);
       expect(queryBuilder.fetch).toHaveBeenCalledWith(queryBuilder.getExternal());
-      expect(wrapper.state().data).toEqual(mockResponse);
+      expect(wrapper.state().data.baseQuery.data).toEqual(mockResponse);
     });
 
     it('always requests event_id and project_id for basic queries', async function() {
@@ -38,7 +38,7 @@ describe('Discover', function() {
           fields: ['message', 'event_id', 'project_id'],
         })
       );
-      expect(wrapper.state().data).toEqual(mockResponse);
+      expect(wrapper.state().data.baseQuery.data).toEqual(mockResponse);
     });
 
     it('removes incomplete conditions', async function() {
@@ -75,18 +75,18 @@ describe('Discover', function() {
   describe('reset()', function() {
     let wrapper, queryBuilder;
     beforeEach(function() {
+      const mockResponse = {timing: {}, data: [], meta: []};
       browserHistory.push.mockImplementation(function({search}) {
         wrapper.setProps({
           location: {
             search: search || '',
-            action: 'PUSH',
           },
         });
       });
 
       const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
       queryBuilder = createQueryBuilder({}, organization);
-      queryBuilder.fetch = jest.fn(() => Promise.resolve());
+      queryBuilder.fetch = jest.fn(() => Promise.resolve(mockResponse));
       queryBuilder.reset = jest.fn(queryBuilder.reset);
 
       wrapper = mount(
@@ -109,11 +109,11 @@ describe('Discover', function() {
     it('resets query builder and state', function() {
       wrapper.instance().reset();
       expect(queryBuilder.reset).toHaveBeenCalled();
-      const {data, query, chartData, chartQuery} = wrapper.instance().state;
-      expect(data).toBeNull();
-      expect(query).toBeNull();
-      expect(chartData).toBeNull();
-      expect(chartQuery).toBeNull();
+      const {data: {baseQuery, byDayQuery}} = wrapper.instance().state;
+      expect(baseQuery.query).toBeNull();
+      expect(baseQuery.data).toBeNull();
+      expect(byDayQuery.query).toBeNull();
+      expect(byDayQuery.data).toBeNull();
     });
 
     it('resets "fields"', function() {
@@ -142,7 +142,6 @@ describe('Discover', function() {
       wrapper.setProps({
         location: {
           search: '?fields=[]',
-          action: 'REPLACE',
         },
       });
       expect(queryBuilder.reset.mock.calls).toHaveLength(prevCallCount);
diff --git a/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx b/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
new file mode 100644
index 0000000000..e9cc212530
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/resultManager.spec.jsx
@@ -0,0 +1,82 @@
+import createResultManager from 'app/views/organizationDiscover/resultManager';
+import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+
+describe('Result manager', function() {
+  let resultManager, queryBuilder, discoverMock;
+  beforeEach(function() {
+    queryBuilder = createQueryBuilder(
+      {},
+      TestStubs.Organization({projects: [TestStubs.Project()]})
+    );
+
+    resultManager = createResultManager(queryBuilder);
+
+    discoverMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/discover/query/',
+      method: 'POST',
+      body: {
+        data: [],
+      },
+    });
+  });
+
+  describe('getAll()', function() {
+    it('returns defaults', function() {
+      const data = resultManager.getAll();
+      expect(data.baseQuery.query).toBeNull();
+      expect(data.baseQuery.data).toBeNull();
+      expect(data.byDayQuery.query).toBeNull();
+      expect(data.byDayQuery.data).toBeNull();
+    });
+  });
+
+  describe('fetchAll()', function() {
+    it('handles raw data', async function() {
+      queryBuilder.updateField('fields', ['event_id', 'project_id', 'message']);
+      await resultManager.fetchAll();
+      expect(discoverMock).toHaveBeenCalledTimes(1);
+      expect(discoverMock).toHaveBeenCalledWith(
+        '/organizations/org-slug/discover/query/',
+        expect.objectContaining({
+          data: expect.objectContaining({
+            fields: ['event_id', 'project_id', 'message'],
+          }),
+        })
+      );
+    });
+
+    it('handles aggregations', async function() {
+      queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
+      await resultManager.fetchAll();
+      expect(discoverMock).toHaveBeenCalledTimes(2);
+      expect(discoverMock).toHaveBeenCalledWith(
+        '/organizations/org-slug/discover/query/',
+        expect.objectContaining({
+          data: expect.objectContaining({
+            aggregations: [['count()', null, 'count']],
+          }),
+        })
+      );
+    });
+  });
+
+  describe('reset()', function() {
+    it('resets', async function() {
+      await resultManager.fetchAll();
+      expect(resultManager.getAll().baseQuery.data).not.toBeNull();
+      resultManager.reset();
+      expect(resultManager.getAll().baseQuery.data).toBeNull();
+    });
+  });
+
+  describe('shouldDisplayResult()', function() {
+    it('is initially false', function() {
+      expect(resultManager.shouldDisplayResult()).toBe(false);
+    });
+
+    it('is true after data is fetched', async function() {
+      await resultManager.fetchAll();
+      expect(resultManager.shouldDisplayResult()).toBe(true);
+    });
+  });
+});
