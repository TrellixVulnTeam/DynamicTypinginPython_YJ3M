commit 9b37b5267ae176ecc6bead1d657602c88557c4f2
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jun 19 10:04:17 2018 -0700

    feat(ui): Allow SelectControl to support "choices" (#8723)
    
    This allows SelectControl to be a bit more compatible with select2 components

diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index 9042ac1278..f836bd6c7d 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -1,11 +1,18 @@
-import React from 'react';
 import PropTypes from 'prop-types';
+import React from 'react';
 import ReactSelect, {Async} from 'react-select';
 import styled from 'react-emotion';
 
+import convertFromSelect2Choices from 'app/utils/convertFromSelect2Choices';
+
 export default class SelectControl extends React.Component {
   static propTypes = {
     async: PropTypes.bool,
+    options: PropTypes.array,
+    choices: PropTypes.oneOfType([
+      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array])),
+      PropTypes.func,
+    ]),
   };
 
   renderArrow = () => {
@@ -13,9 +20,22 @@ export default class SelectControl extends React.Component {
   };
 
   render() {
-    let {async, ...props} = this.props;
+    let {async, options, choices, ...props} = this.props;
+
+    // Compatibility with old select2 API
+    let choicesOrOptions =
+      convertFromSelect2Choices(
+        typeof choices === 'function' ? choices(this.props) : choices
+      ) || options;
 
-    return <StyledSelect arrowRenderer={this.renderArrow} async={async} {...props} />;
+    return (
+      <StyledSelect
+        arrowRenderer={this.renderArrow}
+        async={async}
+        {...props}
+        options={choicesOrOptions}
+      />
+    );
   }
 }
 
diff --git a/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx b/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx
new file mode 100644
index 0000000000..2976a40012
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/convertFromSelect2Choices.jsx
@@ -0,0 +1,14 @@
+// Converts arg from a `select2` choices array to a `react-select` `options` array
+const convertFromSelect2Choices = choices => {
+  if (!Array.isArray(choices)) return null;
+
+  // Accepts an array of strings or an array of tuples
+  return choices.map(
+    choice =>
+      Array.isArray(choice)
+        ? {value: choice[0], label: choice[1]}
+        : {value: choice, label: choice}
+  );
+};
+
+export default convertFromSelect2Choices;
diff --git a/tests/js/spec/components/forms/selectControl.spec.jsx b/tests/js/spec/components/forms/selectControl.spec.jsx
new file mode 100644
index 0000000000..7d42bfc424
--- /dev/null
+++ b/tests/js/spec/components/forms/selectControl.spec.jsx
@@ -0,0 +1,74 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+
+import SelectControl from 'app/components/forms/selectControl';
+
+describe('SelectControl', function() {
+  it('renders with react-select "options"', function() {
+    let wrapper = shallow(<SelectControl options={[{value: 'foo', label: 'Foo'}]} />);
+
+    expect(wrapper.find('StyledSelect').prop('options')).toEqual([
+      {value: 'foo', label: 'Foo'},
+    ]);
+  });
+
+  it('renders with select2 flat "choices"', function() {
+    let wrapper = shallow(<SelectControl choices={['a', 'b', 'c']} name="fieldName" />);
+    expect(wrapper.find('StyledSelect').prop('options')).toEqual([
+      {value: 'a', label: 'a'},
+      {value: 'b', label: 'b'},
+      {value: 'c', label: 'c'},
+    ]);
+  });
+
+  it('renders with select2 paired "choices"', function() {
+    let wrapper = shallow(
+      <SelectControl
+        choices={[['a', 'abc'], ['b', 'bcd'], ['c', 'cde']]}
+        name="fieldName"
+      />
+    );
+    expect(wrapper.find('StyledSelect').prop('options')).toEqual([
+      {value: 'a', label: 'abc'},
+      {value: 'b', label: 'bcd'},
+      {value: 'c', label: 'cde'},
+    ]);
+  });
+
+  it('renders with complex objects with paired "choices"', function() {
+    let mock = jest.fn();
+    let Foo = <div>Foo</div>;
+    let Bar = <div>Bar</div>;
+
+    let wrapper = mount(
+      <SelectControl
+        choices={[[{id: 'foo', name: 'Foo'}, Foo], [{id: 'bar', name: 'Bar'}, Bar]]}
+        name="fieldName"
+        onChange={mock}
+      />
+    );
+    expect(wrapper.find('StyledSelect').prop('options')).toEqual([
+      {value: {id: 'foo', name: 'Foo'}, label: Foo},
+      {value: {id: 'bar', name: 'Bar'}, label: Bar},
+    ]);
+
+    wrapper.find('input').simulate('focus');
+    wrapper.find('.Select-control').simulate('mouseDown', {button: 0});
+    expect(
+      wrapper
+        .find('div.Select-option')
+        .first()
+        .prop('children')
+    ).toEqual(Foo);
+
+    wrapper
+      .find('Option')
+      .first()
+      .simulate('mouseDown');
+
+    expect(mock).toHaveBeenCalledWith({
+      value: {id: 'foo', name: 'Foo'},
+      label: Foo,
+    });
+  });
+});
diff --git a/tests/js/spec/utils/convertFromSelect2Choices.spec.jsx b/tests/js/spec/utils/convertFromSelect2Choices.spec.jsx
new file mode 100644
index 0000000000..b9081378ad
--- /dev/null
+++ b/tests/js/spec/utils/convertFromSelect2Choices.spec.jsx
@@ -0,0 +1,44 @@
+import convertFromSelect2Choices from 'app/utils/convertFromSelect2Choices';
+
+describe('convertFromSelect2Choices', function() {
+  it('changes a flat array of strings into array of {label, value}', function() {
+    expect(convertFromSelect2Choices(['a', 'b', 'c'])).toEqual([
+      {
+        label: 'a',
+        value: 'a',
+      },
+      {
+        label: 'b',
+        value: 'b',
+      },
+      {
+        label: 'c',
+        value: 'c',
+      },
+    ]);
+  });
+
+  it('changes a paired array of strings into array of {label, value}', function() {
+    expect(convertFromSelect2Choices([['a', 'A'], ['b', 'B'], ['c', 'C']])).toEqual([
+      {
+        label: 'A',
+        value: 'a',
+      },
+      {
+        label: 'B',
+        value: 'b',
+      },
+      {
+        label: 'C',
+        value: 'c',
+      },
+    ]);
+  });
+
+  it('returns null on invalid values', function() {
+    expect(convertFromSelect2Choices('test')).toEqual(null);
+    expect(convertFromSelect2Choices(1)).toEqual(null);
+    expect(convertFromSelect2Choices({})).toEqual(null);
+    expect(convertFromSelect2Choices(undefined)).toEqual(null);
+  });
+});
