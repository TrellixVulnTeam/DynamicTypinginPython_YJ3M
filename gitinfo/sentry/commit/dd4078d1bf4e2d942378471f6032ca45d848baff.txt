commit dd4078d1bf4e2d942378471f6032ca45d848baff
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 18 11:27:32 2015 -0700

    Handle Java-8 lambda expressions
    
    Refs getsentry/raven-java#134

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 76ca368ed7..eb30dffa42 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -206,6 +206,16 @@ class Frame(Interface):
         # values (see raven-java#125)
         return self.filename.startswith('Caused by: ')
 
+    def is_unhashable_module(self):
+        # TODO(dcramer): this is Java specific
+        return '$$Lambda$' in self.module
+
+    def is_unhashable_function(self):
+        # TODO(dcramer): lambda$ is Java specific
+        # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
+        # queries and JSON data)
+        return self.function.startswith(('lambda$', '[Anonymous'))
+
     def get_hash(self):
         """
         The hash of the frame varies depending on the data available.
@@ -218,7 +228,10 @@ class Frame(Interface):
         """
         output = []
         if self.module:
-            output.append(self.module)
+            if self.is_unhashable_module():
+                output.append('<module>')
+            else:
+                output.append(self.module)
         elif self.filename and not self.is_url() and not self.is_caused_by():
             output.append(remove_filename_outliers(self.filename))
 
@@ -226,9 +239,7 @@ class Frame(Interface):
             can_use_context = False
         elif len(self.context_line) > 120:
             can_use_context = False
-        # XXX: deal with PHP anonymous functions (used for things like SQL
-        # queries and JSON data)
-        elif self.function and self.function.startswith('[Anonymous'):
+        elif self.function and self.is_unhashable_function():
             can_use_context = True
         else:
             can_use_context = True
@@ -242,7 +253,10 @@ class Frame(Interface):
             # bail on recording this frame
             return output
         elif self.function:
-            output.append(remove_function_outliers(self.function))
+            if self.is_unhashable_function():
+                output.append('<function>')
+            else:
+                output.append(remove_function_outliers(self.function))
         elif self.lineno is not None:
             output.append(self.lineno)
         return output
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 8c2904f2ec..eca363f094 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -166,6 +166,28 @@ class StacktraceTest(TestCase):
             '<% if @hotels.size > 0 %>',
         ])
 
+    def test_get_hash_ignores_java8_lambda_module(self):
+        interface = Frame.to_python({
+            'module': 'foo.bar.Baz$$Lambda$40/1673859467',
+            'function': 'call',
+        })
+        result = interface.get_hash()
+        self.assertEquals(result, [
+            '<module>',
+            'call',
+        ])
+
+    def test_get_hash_ignores_java8_lambda_function(self):
+        interface = Frame.to_python({
+            'module': 'foo.bar.Baz',
+            'function': 'lambda$work$1',
+        })
+        result = interface.get_hash()
+        self.assertEquals(result, [
+            'foo.bar.Baz',
+            '<function>',
+        ])
+
     def test_get_hash_sanitizes_erb_templates(self):
         # This is Ruby specific
         interface = Frame.to_python({
