commit 68048b3c7fb52fd821dde18c1af2a9f4727bb8d6
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 1 11:14:55 2016 -0700

    Standardize project membership endpoint
    
    This updates the project members endpoint to return memberships instead of users.
    
    @getsentry/api

diff --git a/src/sentry/api/endpoints/project_member_index.py b/src/sentry/api/endpoints/project_member_index.py
index a0b666af4c..bfc547beb0 100644
--- a/src/sentry/api/endpoints/project_member_index.py
+++ b/src/sentry/api/endpoints/project_member_index.py
@@ -4,20 +4,21 @@ from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import OrganizationMember, User
+from sentry.models import OrganizationMember
 
 
 class ProjectMemberIndexEndpoint(ProjectEndpoint):
     def get(self, request, project):
-        member_list = sorted(set(User.objects.filter(
-            is_active=True,
-            sentry_orgmember_set__organization=project.organization,
-            sentry_orgmember_set__id__in=OrganizationMember.objects.filter(
-                organizationmemberteam__is_active=True,
-                organizationmemberteam__team=project.team,
-            ).values('id')
-        ).distinct()[:1000]), key=lambda x: x.email)
+        queryset = OrganizationMember.objects.filter(
+            organization=project.organization,
+            teams=project.team,
+        ).select_related('user')
 
-        member_list = serialize(member_list, request.user)
+        member_list = sorted(
+            queryset,
+            key=lambda x: x.user.get_display_name() if x.user_id else x.email
+        )
 
-        return Response(member_list)
+        context = serialize(member_list, request.user)
+
+        return Response(context)
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 8140d2a214..492da50350 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -1,22 +1,30 @@
 from __future__ import absolute_import
 
-from sentry.api.serializers import Serializer, register
+from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import OrganizationMember
 
 
 @register(OrganizationMember)
 class OrganizationMemberSerializer(Serializer):
-    def serialize(self, obj, attrs, user):
-        if obj.user:
-            user_data = {'id': obj.user.id}
-        else:
-            user_data = None
+    def get_attrs(self, item_list, user):
+        # TODO(dcramer): assert on relations
+        users = {
+            d['id']: d
+            for d in serialize(set(i.user for i in item_list if i.user_id), user)
+        }
 
+        return {
+            item: {
+                'user': users[str(item.user_id)] if item.user_id else None,
+            } for item in item_list
+        }
+
+    def serialize(self, obj, attrs, user):
         d = {
             'id': str(obj.id),
             'email': obj.get_email(),
             'name': obj.user.get_display_name() if obj.user else obj.get_email(),
-            'user': user_data,
+            'user': attrs['user'],
             'role': obj.role,
             'roleName': obj.get_role_display(),
             'pending': obj.is_pending,
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 7548d880e0..5cb5ec70cd 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -125,7 +125,7 @@ const ProjectDetails = React.createClass({
       // TODO(dcramer): move member list to organization level
       this.api.request(this.getMemberListEndpoint(), {
         success: (data) => {
-          MemberListStore.loadInitialData(data);
+          MemberListStore.loadInitialData(data.filter((m) => m.user).map((m) => m.user));
         }
       });
 
