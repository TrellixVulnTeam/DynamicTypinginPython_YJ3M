commit a8ecedb85276ed4d4b6635416effc4f815c3ebe0
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri May 10 10:14:46 2019 +0200

    feat(grouping): Improve JavaScript grouping (#13121)

diff --git a/requirements-base.txt b/requirements-base.txt
index 69c048d940..9eb8c87cc2 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.141.0
-semaphore>=0.4.32,<0.5.0
+semaphore>=0.4.34,<0.5.0
 sentry-sdk>=0.7.14
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 737afa7513..21e7b3741b 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -343,6 +343,7 @@ class EventManager(object):
         key=None,
         content_encoding=None,
         is_renormalize=False,
+        remove_other=None
     ):
         self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
@@ -355,6 +356,7 @@ class EventManager(object):
         self._auth = auth
         self._key = key
         self._is_renormalize = is_renormalize
+        self._remove_other = remove_other
         self._normalized = False
 
     def process_csp_report(self):
@@ -445,7 +447,8 @@ class EventManager(object):
             max_secs_in_future=MAX_SECS_IN_FUTURE,
             max_secs_in_past=MAX_SECS_IN_PAST,
             enable_trimming=True,
-            is_renormalize=self._is_renormalize
+            is_renormalize=self._is_renormalize,
+            remove_other=self._remove_other,
         )
 
         self._data = CanonicalKeyDict(
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 7b6c999ef4..745d5467dd 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -102,9 +102,34 @@ register_strategy_config(
     changelog='''
         * messages are now preprocessed to increase change of grouping together
         * exceptions without stacktraces are now grouped by a trimmed message
+    '''
+)
 
-        *This algorithm is currently work in progress and will continue to
-        evolve based on feedback*
+register_strategy_config(
+    id='newstyle:2019-05-08',
+    strategies=[
+        'expect-ct:v1',
+        'expect-staple:v1',
+        'hpkp:v1',
+        'csp:v1',
+        'threads:v1',
+        'stacktrace:v1',
+        'chained-exception:v1',
+        'template:v1',
+        'message:v2',
+    ],
+    delegates=[
+        'frame:v3',
+        'stacktrace:v1',
+        'single-exception:v2',
+    ],
+    changelog='''
+        * context lines are honored again for platforms with reliable source
+          code information (JavaScript, Python, PHP and Ruby)
+        * JavaScript stacktraces are better deduplicated across browser
+          versions.
+        * JavaScript stacktraces involving source maps are likely to group
+          better.
     '''
 )
 
diff --git a/src/sentry/grouping/strategies/legacy.py b/src/sentry/grouping/strategies/legacy.py
index f8584108d6..fb6c905f26 100644
--- a/src/sentry/grouping/strategies/legacy.py
+++ b/src/sentry/grouping/strategies/legacy.py
@@ -5,7 +5,8 @@ import posixpath
 
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
-from sentry.grouping.strategies.utils import remove_non_stacktrace_variants
+from sentry.grouping.strategies.utils import remove_non_stacktrace_variants, \
+    has_url_origin
 
 
 _ruby_anon_func = re.compile(r'_\d{2,}')
@@ -55,21 +56,6 @@ RECURSION_COMPARISON_FIELDS = [
 ]
 
 
-def is_url_legacy(filename):
-    return filename.startswith(('file:', 'http:', 'https:', 'applewebdata:'))
-
-
-def is_url_frame_legacy(frame):
-    if not frame.abs_path:
-        return False
-    # URLs can be generated such that they are:
-    #   blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0
-    # https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
-    if frame.abs_path.startswith('blob:'):
-        return True
-    return is_url_legacy(frame.abs_path)
-
-
 def is_unhashable_module_legacy(frame, platform):
     # Fix for the case where module is a partial copy of the URL
     # and should not be hashed
@@ -285,7 +271,7 @@ def frame_legacy(frame, event, **meta):
         contributes = False
         hint = 'native code indicated by filename'
     elif frame.filename:
-        if is_url_frame_legacy(frame):
+        if has_url_origin(frame.abs_path):
             filename_component.update(
                 contributes=False,
                 values=[frame.filename],
@@ -341,7 +327,7 @@ def frame_legacy(frame, event, **meta):
     if frame.context_line is not None:
         if len(frame.context_line) > 120:
             context_line_component.update(hint='discarded because line too long')
-        elif is_url_frame_legacy(frame) and not func:
+        elif has_url_origin(frame.abs_path) and not func:
             context_line_component.update(hint='discarded because from URL origin')
         else:
             context_line_component.update(values=[frame.context_line])
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 96d823b9e9..14e2b21b42 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -5,7 +5,8 @@ import re
 
 from sentry.grouping.component import GroupingComponent
 from sentry.grouping.strategies.base import strategy
-from sentry.grouping.strategies.utils import remove_non_stacktrace_variants
+from sentry.grouping.strategies.utils import remove_non_stacktrace_variants, \
+    has_url_origin
 from sentry.grouping.strategies.message import trim_message_for_grouping
 from sentry.stacktraces.platform import get_behavior_family_for_platform
 
@@ -50,13 +51,6 @@ RECURSION_COMPARISON_FIELDS = [
 ]
 
 
-def abs_path_is_url_v1(abs_path):
-    if not abs_path:
-        return False
-    return abs_path.startswith((
-        'blob:', 'file:', 'http:', 'https:', 'applewebdata:'))
-
-
 def is_recursion_v1(frame1, frame2):
     "Returns a boolean indicating whether frames are recursive calls."
     for field in RECURSION_COMPARISON_FIELDS:
@@ -66,7 +60,8 @@ def is_recursion_v1(frame1, frame2):
     return True
 
 
-def get_filename_component_v1(abs_path, filename, platform):
+def get_filename_component(abs_path, filename, platform,
+                           allow_file_origin=False):
     """Attempt to normalize filenames by detecing special filenames and by
     using the basename only.
     """
@@ -81,7 +76,7 @@ def get_filename_component_v1(abs_path, filename, platform):
         values=[filename],
     )
 
-    if abs_path_is_url_v1(abs_path):
+    if has_url_origin(abs_path, allow_file_origin=allow_file_origin):
         filename_component.update(
             contributes=False,
             hint='ignored because frame points to a URL',
@@ -151,7 +146,8 @@ def get_module_component_v1(abs_path, module, platform):
 
 
 def get_function_component(function, platform, legacy_function_logic,
-                           raw_function=None):
+                           sourcemap_used=False, context_line_available=False,
+                           raw_function=None, javascript_fuzzing=False):
     """
     Attempt to normalize functions by removing common platform outliers.
 
@@ -165,6 +161,7 @@ def get_function_component(function, platform, legacy_function_logic,
     or a trimmed version (of the truncated one) for native.
     """
     from sentry.stacktraces.functions import trim_function_name
+    behavior_family = get_behavior_family_for_platform(platform)
 
     if legacy_function_logic:
         func = raw_function or function
@@ -209,7 +206,7 @@ def get_function_component(function, platform, legacy_function_logic,
                 hint='ignored lambda function'
             )
 
-    elif get_behavior_family_for_platform(platform) == 'native':
+    elif behavior_family == 'native':
         if func in ('<redacted>', '<unknown>'):
             function_component.update(
                 contributes=False,
@@ -223,6 +220,27 @@ def get_function_component(function, platform, legacy_function_logic,
                     hint='isolated function'
                 )
 
+    elif javascript_fuzzing and behavior_family == 'javascript':
+        # This changes Object.foo or Foo.foo into foo so that we can
+        # resolve some common cross browser differences
+        new_function = func.rsplit('.', 1)[-1]
+        if new_function != func:
+            function_component.update(
+                values=[new_function],
+                hint='trimmed javascript function'
+            )
+
+        # if a sourcemap was used for this frame and we know that we can
+        # use the context line information we no longer want to use the
+        # function name.  The reason for this is that function names in
+        # sourcemaps are unreliable by the nature of sourcemaps and thus a
+        # bad indicator for grouping.
+        if sourcemap_used and context_line_available:
+            function_component.update(
+                contributes=False,
+                hint='ignored because sourcemap used and context line available'
+            )
+
     return function_component
 
 
@@ -246,14 +264,58 @@ def frame_v2(frame, event, **meta):
                                legacy_function_logic=False)
 
 
-def get_frame_component(frame, event, meta, legacy_function_logic=False):
+@strategy(
+    id='frame:v3',
+    interfaces=['frame'],
+    variants=['!system', 'app'],
+)
+def frame_v3(frame, event, **meta):
+    platform = frame.platform or event.platform
+    # These are platforms that we know have always source available and
+    # where the source is of good quality for grouping.  For javascript
+    # this assumes that we have sourcemaps available.
+    good_source = platform in ('javascript', 'node', 'python', 'php', 'ruby')
+    return get_frame_component(frame, event, meta,
+                               legacy_function_logic=False,
+                               use_contextline=good_source,
+                               javascript_fuzzing=True)
+
+
+def get_contextline_component(frame, platform):
+    """Returns a contextline component.  The caller's responsibility is to
+    make sure context lines are only used for platforms where we trust the
+    quality of the sourcecode.  It does however protect against some bad
+    JavaScript environments based on origin checks.
+    """
+    component = GroupingComponent(id='context-line')
+
+    if not frame.context_line:
+        return component
+
+    line = ' '.join(frame.context_line.expandtabs(2).split())
+    if line:
+        if len(frame.context_line) > 120:
+            component.update(hint='discarded because line too long')
+        elif get_behavior_family_for_platform(platform) == 'javascript' \
+                and has_url_origin(frame.abs_path, allow_file_origin=True):
+            component.update(hint='discarded because from URL origin')
+        else:
+            component.update(values=[line])
+
+    return component
+
+
+def get_frame_component(frame, event, meta, legacy_function_logic=False,
+                        use_contextline=False,
+                        javascript_fuzzing=False):
     platform = frame.platform or event.platform
 
     # Safari throws [native code] frames in for calls like ``forEach``
     # whereas Chrome ignores these. Let's remove it from the hashing algo
     # so that they're more likely to group together
-    filename_component = get_filename_component_v1(
-        frame.abs_path, frame.filename, platform)
+    filename_component = get_filename_component(
+        frame.abs_path, frame.filename, platform,
+        allow_file_origin=javascript_fuzzing)
 
     # if we have a module we use that for grouping.  This will always
     # take precedence over the filename if it contributes
@@ -265,22 +327,55 @@ def get_frame_component(frame, event, meta, legacy_function_logic=False):
             hint='module takes precedence'
         )
 
+    context_line_component = None
+
+    # If we are allowed to use the contextline we add it now.
+    if use_contextline:
+        context_line_component = get_contextline_component(frame, platform)
+
     function_component = get_function_component(
         function=frame.function,
         raw_function=frame.raw_function,
         platform=platform,
-        legacy_function_logic=legacy_function_logic
+        sourcemap_used=frame.data and frame.data.get('sourcemap') is not None,
+        context_line_available=context_line_component and context_line_component.contributes,
+        legacy_function_logic=legacy_function_logic,
+        javascript_fuzzing=javascript_fuzzing,
     )
 
-    return GroupingComponent(
+    values = [
+        module_component,
+        filename_component,
+        function_component,
+    ]
+    if context_line_component is not None:
+        values.append(context_line_component)
+
+    rv = GroupingComponent(
         id='frame',
-        values=[
-            module_component,
-            filename_component,
-            function_component,
-        ],
+        values=values,
     )
 
+    # if we are in javascript fuzzing mode we want to disregard some
+    # frames consistently.  These force common bad stacktraces together
+    # to have a common hash at the cost of maybe skipping over frames that
+    # would otherwise be useful.
+    if javascript_fuzzing \
+       and get_behavior_family_for_platform(platform) == 'javascript':
+        func = frame.raw_function or frame.function
+        if func:
+            func = func.rsplit('.', 1)[-1]
+        if func in (None, '?', '<anonymous function>', '<anonymous>',
+                    'Anonymous function', 'eval') or \
+           func.endswith('/<') or \
+           frame.abs_path in ('[native code]', 'native code', 'eval code', '<anonymous>'):
+            rv.update(
+                contributes=False,
+                hint='ignored low quality javascript frame'
+            )
+
+    return rv
+
 
 @strategy(
     id='stacktrace:v1',
diff --git a/src/sentry/grouping/strategies/utils.py b/src/sentry/grouping/strategies/utils.py
index 2343b13435..14f226331d 100644
--- a/src/sentry/grouping/strategies/utils.py
+++ b/src/sentry/grouping/strategies/utils.py
@@ -44,3 +44,16 @@ def remove_non_stacktrace_variants(variants):
             )
 
     return variants
+
+
+def has_url_origin(path, allow_file_origin=False):
+    # URLs can be generated such that they are:
+    #   blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0
+    # https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
+    if not path:
+        return False
+    if path.startswith(('http:', 'https:', 'applewebdata:', 'blob:')):
+        return True
+    if path.startswith('file:'):
+        return not allow_file_origin
+    return False
diff --git a/tests/sentry/grouping/grouping_inputs/frame-ignores-module-if-page-url-2.json b/tests/sentry/grouping/grouping_inputs/frame-ignores-module-if-page-url-2.json
index c92ff98c07..e13ad89280 100644
--- a/tests/sentry/grouping/grouping_inputs/frame-ignores-module-if-page-url-2.json
+++ b/tests/sentry/grouping/grouping_inputs/frame-ignores-module-if-page-url-2.json
@@ -4,7 +4,8 @@
       {
         "abs_path": "https://sentry.io/foo/bar/baz",
         "module": "foo/bar/baz",
-        "filename": "foo.py"
+        "filename": "foo.py",
+        "function": "a"
       }
     ]
   },
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-chrome.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-chrome.json
new file mode 100644
index 0000000000..72bf22d769
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-chrome.json
@@ -0,0 +1,98 @@
+{
+  "culprit": "Object.aha(/tmp/test.html)",
+  "event_id": "6b8b408a6efa4d95955e51f2b3c9a168",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 49,
+              "colno": 19,
+              "in_app": false
+            },
+            {
+              "function": "Foo.testMethod",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 43,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 38,
+              "colno": 5,
+              "in_app": false
+            },
+            {
+              "function": "eval",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 1,
+              "colno": 1,
+              "in_app": false
+            },
+            {
+              "function": "test",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 32,
+              "colno": 23,
+              "in_app": false
+            },
+            {
+              "function": "Array.map",
+              "abs_path": "<anonymous>",
+              "in_app": false,
+              "filename": "<anonymous>"
+            },
+            {
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 33,
+              "colno": 17,
+              "in_app": false
+            },
+            {
+              "function": "Object.callback",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 24,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 19,
+              "colno": 16,
+              "in_app": false
+            },
+            {
+              "function": "Object.aha",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 18,
+              "colno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-edge.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-edge.json
new file mode 100644
index 0000000000..9fd1fcfdf8
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-edge.json
@@ -0,0 +1,100 @@
+{
+  "culprit": "aha(/Home/Desktop/test.html)",
+  "event_id": "e58aee200c8a486385bf5e1346b44865",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "Anonymous function",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 49,
+              "colno": 8,
+              "in_app": false
+            },
+            {
+              "function": "Foo.prototype.testMethod",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 43,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 38,
+              "colno": 5,
+              "in_app": false
+            },
+            {
+              "function": "eval code",
+              "abs_path": "eval code",
+              "filename": "eval code",
+              "lineno": 1,
+              "colno": 1,
+              "in_app": false
+            },
+            {
+              "function": "test",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 32,
+              "colno": 5,
+              "in_app": false
+            },
+            {
+              "function": "Array.prototype.map",
+              "abs_path": "native code",
+              "in_app": false,
+              "filename": "native code"
+            },
+            {
+              "function": "Anonymous function",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 33,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "callback",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 24,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 17,
+              "colno": 6,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "file://mac/Home/Desktop/test.html",
+              "filename": "/Home/Desktop/test.html",
+              "lineno": 18,
+              "colno": 7,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-firefox.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-firefox.json
new file mode 100644
index 0000000000..ae70d932c0
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-firefox.json
@@ -0,0 +1,92 @@
+{
+  "culprit": "aha(/private/tmp/test.html)",
+  "event_id": "52aeea2ece28426596fa82799418215c",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 49,
+              "colno": 19,
+              "in_app": false
+            },
+            {
+              "function": "testMethod",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 43,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 38,
+              "colno": 5,
+              "in_app": false
+            },
+            {
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 1,
+              "colno": 1,
+              "in_app": false
+            },
+            {
+              "function": "test",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 32,
+              "colno": 23,
+              "in_app": false
+            },
+            {
+              "function": "test/<",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 33,
+              "colno": 17,
+              "in_app": false
+            },
+            {
+              "function": "callback",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 24,
+              "colno": 7,
+              "in_app": false
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 19,
+              "colno": 16,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "file:///private/tmp/test.html",
+              "filename": "/private/tmp/test.html",
+              "lineno": 18,
+              "colno": 13,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-chrome.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-chrome.json
new file mode 100644
index 0000000000..b6e8083a71
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-chrome.json
@@ -0,0 +1,107 @@
+{
+  "culprit": "Object.aha(test)",
+  "event_id": "db095fe3e5d4494ea2917d4f89442fd1",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "filename": "/test.html",
+              "lineno": 49,
+              "colno": 19,
+              "in_app": false
+            },
+            {
+              "function": "Foo.testMethod",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 43,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 38,
+              "colno": 5,
+              "filename": "/test.html"
+            },
+            {
+              "function": "eval",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 1,
+              "colno": 1,
+              "filename": "/test.html"
+            },
+            {
+              "function": "test",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 32,
+              "colno": 23,
+              "filename": "/test.html"
+            },
+            {
+              "function": "Array.map",
+              "abs_path": "<anonymous>",
+              "in_app": false,
+              "filename": "<anonymous>"
+            },
+            {
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "filename": "/test.html",
+              "lineno": 33,
+              "colno": 17,
+              "in_app": false
+            },
+            {
+              "function": "Object.callback",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 24,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 19,
+              "colno": 16,
+              "filename": "/test.html"
+            },
+            {
+              "function": "Object.aha",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 18,
+              "colno": 13,
+              "filename": "/test.html"
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-edge.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-edge.json
new file mode 100644
index 0000000000..449da712bf
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-edge.json
@@ -0,0 +1,109 @@
+{
+  "culprit": "aha(test)",
+  "event_id": "d60107d3e8cf4e779612e57852162861",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "Anonymous function",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 49,
+              "colno": 8,
+              "filename": "/test.html"
+            },
+            {
+              "function": "Foo.prototype.testMethod",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 43,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 38,
+              "colno": 5,
+              "filename": "/test.html"
+            },
+            {
+              "function": "eval code",
+              "abs_path": "eval code",
+              "filename": "eval code",
+              "lineno": 1,
+              "colno": 1,
+              "in_app": false
+            },
+            {
+              "function": "test",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 32,
+              "colno": 5,
+              "filename": "/test.html"
+            },
+            {
+              "function": "Array.prototype.map",
+              "abs_path": "native code",
+              "in_app": false,
+              "module": "test",
+              "filename": "native code"
+            },
+            {
+              "function": "Anonymous function",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 33,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "callback",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 24,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 17,
+              "colno": 6,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://argus.local:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 18,
+              "colno": 7,
+              "filename": "/test.html"
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-firefox.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-firefox.json
new file mode 100644
index 0000000000..8558d179f7
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-firefox.json
@@ -0,0 +1,101 @@
+{
+  "culprit": "aha(test)",
+  "event_id": "1182d977c38d435fbecdb7fc61c27be9",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "filename": "/test.html",
+              "lineno": 49,
+              "colno": 19,
+              "in_app": false
+            },
+            {
+              "function": "testMethod",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 43,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 38,
+              "colno": 5,
+              "filename": "/test.html"
+            },
+            {
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "filename": "/test.html",
+              "lineno": 1,
+              "colno": 1,
+              "in_app": false
+            },
+            {
+              "function": "test",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 32,
+              "colno": 23,
+              "filename": "/test.html"
+            },
+            {
+              "function": "test/<",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 33,
+              "colno": 17,
+              "filename": "/test.html"
+            },
+            {
+              "function": "callback",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 24,
+              "colno": 7,
+              "filename": "/test.html"
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 19,
+              "colno": 16,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 18,
+              "colno": 13,
+              "filename": "/test.html"
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-safari.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-safari.json
new file mode 100644
index 0000000000..542bbee06a
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-http-safari.json
@@ -0,0 +1,110 @@
+{
+  "culprit": "aha(test)",
+  "event_id": "1681423f1d224701a900633267818086",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "filename": "/test.html",
+              "lineno": 49,
+              "colno": 29,
+              "in_app": false
+            },
+            {
+              "function": "testMethod",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 43,
+              "colno": 10,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 38,
+              "colno": 9,
+              "filename": "/test.html"
+            },
+            {
+              "function": "eval",
+              "abs_path": "[native code]",
+              "in_app": false,
+              "filename": "[native code]"
+            },
+            {
+              "function": "test",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 32,
+              "colno": 26,
+              "filename": "/test.html"
+            },
+            {
+              "function": "map",
+              "abs_path": "[native code]",
+              "in_app": false,
+              "filename": "[native code]"
+            },
+            {
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "filename": "/test.html",
+              "lineno": 33,
+              "colno": 25,
+              "in_app": false
+            },
+            {
+              "function": "callback",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 24,
+              "colno": 23,
+              "filename": "/test.html"
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 19,
+              "colno": 16,
+              "filename": "/test.html"
+            },
+            {
+              "function": "aha",
+              "abs_path": "[native code]",
+              "in_app": false,
+              "filename": "[native code]"
+            },
+            {
+              "function": "aha",
+              "abs_path": "http://localhost:4001/test.html",
+              "module": "test",
+              "in_app": false,
+              "lineno": 18,
+              "colno": 22,
+              "filename": "/test.html"
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-safari.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-safari.json
new file mode 100644
index 0000000000..966ab45239
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-safari.json
@@ -0,0 +1,102 @@
+{
+  "culprit": "aha(/tmp/test.html)",
+  "event_id": "7170c9982ba44c2eaa79b1d5b8d7390f",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 49,
+              "colno": 29,
+              "in_app": false
+            },
+            {
+              "function": "testMethod",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 43,
+              "colno": 10,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 38,
+              "colno": 9,
+              "in_app": false
+            },
+            {
+              "function": "eval",
+              "abs_path": "[native code]",
+              "in_app": false,
+              "filename": "[native code]"
+            },
+            {
+              "function": "test",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 32,
+              "colno": 26,
+              "in_app": false
+            },
+            {
+              "function": "map",
+              "abs_path": "[native code]",
+              "in_app": false,
+              "filename": "[native code]"
+            },
+            {
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 33,
+              "colno": 25,
+              "in_app": false
+            },
+            {
+              "function": "callback",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 24,
+              "colno": 23,
+              "in_app": false
+            },
+            {
+              "function": "callAnotherThing",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 19,
+              "colno": 16,
+              "in_app": false
+            },
+            {
+              "function": "aha",
+              "abs_path": "[native code]",
+              "in_app": false,
+              "filename": "[native code]"
+            },
+            {
+              "function": "aha",
+              "abs_path": "file:///tmp/test.html",
+              "filename": "/tmp/test.html",
+              "lineno": 18,
+              "colno": 22,
+              "in_app": false
+            }
+          ]
+        },
+        "type": "Error",
+        "value": "bad"
+      }
+    ]
+  },
+  "release": null
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-sentryui-firefox.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-sentryui-firefox.json
new file mode 100644
index 0000000000..ad7e064803
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-sentryui-firefox.json
@@ -0,0 +1,888 @@
+{
+  "culprit": "/organizations/:orgId/issues/:groupId/",
+  "event_id": "58ccfd9da72f4a88b6f2084f2fdf1f2a",
+  "environment": "prod",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "M",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask.js",
+              "pre_context": [
+                "    if (isNode && (parent = process.domain)) parent.exit();",
+                "    while (head) {",
+                "      fn = head.fn;",
+                "      head = head.next;",
+                "      try {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask.js",
+              "post_context": [
+                "      } catch (e) {",
+                "        if (head) notify();",
+                "        else last = undefined;",
+                "        throw e;",
+                "      }"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "        fn();",
+              "lineno": 18
+            },
+            {
+              "function": "fn",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js",
+              "pre_context": [
+                "      } catch (e) {",
+                "        if (domain && !exited) domain.exit();",
+                "        reject(e);",
+                "      }",
+                "    };"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js",
+              "post_context": [
+                "    promise._c = [];",
+                "    promise._n = false;",
+                "    if (isReject && !promise._h) onUnhandled(promise);",
+                "  });",
+                "};"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach",
+              "lineno": 92
+            },
+            {
+              "function": "run",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js",
+              "pre_context": [
+                "            promise._h = 1;",
+                "          }",
+                "          if (handler === true) result = value;",
+                "          else {",
+                "            if (domain) domain.enter();"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js",
+              "post_context": [
+                "            if (domain) {",
+                "              domain.exit();",
+                "              exited = true;",
+                "            }",
+                "          }"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "            result = handler(value); // may throw",
+              "lineno": 75
+            },
+            {
+              "function": "_next",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "pre_context": [
+                "        args = arguments;",
+                "    return new Promise(function (resolve, reject) {",
+                "      var gen = fn.apply(self, args);",
+                "",
+                "      function _next(value) {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "post_context": [
+                "      }",
+                "",
+                "      function _throw(err) {",
+                "        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);",
+                "      }"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);",
+              "lineno": 25
+            },
+            {
+              "function": "asyncGeneratorStep",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "pre_context": [
+                "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {",
+                "  try {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "post_context": [
+                "    var value = info.value;",
+                "  } catch (error) {",
+                "    reject(error);",
+                "    return;",
+                "  }"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "    var info = gen[key](arg);",
+              "lineno": 3
+            },
+            {
+              "function": "key",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "pre_context": [
+                "  // Helper for defining the .next, .throw, and .return methods of the",
+                "  // Iterator interface in terms of a single ._invoke method.",
+                "  function defineIteratorMethods(prototype) {",
+                "    [\"next\", \"throw\", \"return\"].forEach(function(method) {",
+                "      prototype[method] = function(arg) {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "post_context": [
+                "      };",
+                "    });",
+                "  }",
+                "",
+                "  runtime.isGeneratorFunction = function(genFun) {"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "        return this._invoke(method, arg);",
+              "lineno": 114
+            },
+            {
+              "function": "this",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "pre_context": [
+                "          context.abrupt(\"return\", context.arg);",
+                "        }",
+                "",
+                "        state = GenStateExecuting;",
+                ""
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "post_context": [
+                "        if (record.type === \"normal\") {",
+                "          // If an exception is thrown from innerFn, we leave state ===",
+                "          // GenStateExecuting and loop back for another invocation.",
+                "          state = context.done",
+                "            ? GenStateCompleted"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "        var record = tryCatch(innerFn, self, context);",
+              "lineno": 288
+            },
+            {
+              "function": "tryCatch",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "pre_context": [
+                "  // in every case, so we don't have to touch the arguments object. The",
+                "  // only additional allocation required is the completion record, which",
+                "  // has a stable shape and so hopefully should be cheap to allocate.",
+                "  function tryCatch(fn, obj, arg) {",
+                "    try {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "post_context": [
+                "    } catch (err) {",
+                "      return { type: \"throw\", arg: err };",
+                "    }",
+                "  }",
+                ""
+              ],
+              "colno": 15,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "      return { type: \"normal\", arg: fn.call(obj, arg) };",
+              "lineno": 62
+            },
+            {
+              "function": "fn",
+              "abs_path": "webpack:///./app/components/lazyLoad.jsx",
+              "pre_context": [
+                "  async fetchComponent() {",
+                "    const getComponent = this.getComponentGetter();",
+                "",
+                "    try {",
+                "      const Component = await retryableImport(getComponent);"
+              ],
+              "module": "app/components/lazyLoad",
+              "filename": "./app/components/lazyLoad.jsx",
+              "post_context": [
+                "        Component: Component.default || Component,",
+                "      });",
+                "    } catch (err) {",
+                "      this.handleFetchError(err);",
+                "    }"
+              ],
+              "colno": 7,
+              "in_app": true,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js.map"
+              },
+              "context_line": "      this.setState({",
+              "lineno": 100
+            },
+            {
+              "function": "this",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js",
+              "pre_context": [
+                " */",
+                "",
+                "'use strict';var m=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"r {snip}",
+                "var z=\"function\"===typeof Symbol&&Symbol.iterator;function A(a,b,d,c,e,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error(\"Minified exception occu {snip}",
+                "function B(a){for(var b=arguments.length-1,d=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=0;c<b;c++)d+=\"&args[]=\"+encodeURIC {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js",
+              "post_context": [
+                "H.constructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={ {snip}",
+                "function L(a,b,d){var c=void 0,e={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)J.call(b,c)&& {snip}",
+                "function M(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return\"object\"===typeof a&&null!= {snip}",
+                "function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}",
+                "function S(a,b,d,c){var e=typeof a;if(\"undefined\"===e||\"boolean\"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case \"string\":case \"num {snip}"
+              ],
+              "colno": 211,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} !==typeof a&&\"function\"!==typeof a&&null!=a?B(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=functi {snip}",
+              "lineno": 13
+            },
+            {
+              "function": "this",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "function lf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedU {snip}",
+                "function nf(a,b){return{value:a,source:b,stack:mc(b)}}var of={current:null},pf=null,qf=null,rf=null;function sf(a,b){var c=a.type._context;H {snip}",
+                "function vf(a,b){if(rf!==a&&!1!==b&&0!==b){if(\"number\"!==typeof b||1073741823===b)rf=a,b=1073741823;b={context:a,observedBits:b,next:null};n {snip}",
+                "function Af(a,b){H(yf,b,a);H(xf,a,a);H(L,wf,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:le(null,\"\"); {snip}",
+                "function Ff(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirat {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "b&&null!==b&&(d.callback=b);ff(a,d);If(a,c)}};function Kf(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.s {snip}",
+                "function Mf(a,b,c,d){var e=a.stateNode,f=K(b)?Ge:I.current;e.props=c;e.state=a.memoizedState;e.refs=Ef;e.context=He(a,f);f=a.updateQueue;nul {snip}",
+                "e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jf.enqueueReplaceState(e, {snip}",
+                "function Of(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(2!==c.tag&&3!== {snip}",
+                "function Pf(a,b){\"textarea\"!==a.type&&t(\"31\",\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join( {snip}"
+              ],
+              "colno": 223,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} );e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d {snip}",
+              "lineno": 130
+            },
+            {
+              "function": "If",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e>d||0!==f&&f>d||0!==g&&g>d){a.didError=!1;c=a.latestPingedTime;0!==c&&c<=d&&(a.lates {snip}",
+                "!c){a.didError=!0;a.nextExpirationTimeToWorkOn=d;d=a.expirationTime=1;a.expirationTime=d;return}}a.pendingCommitExpirationTime=d;a.finishedWork=b}}",
+                "function wg(a,b){var c;a:{Lg&&!Og?t(\"263\"):void 0;for(c=a.return;null!==c;){switch(c.tag){case 2:case 3:var d=c.stateNode;if(\"function\"===ty {snip}",
+                "function Hf(a,b){0!==Kg?a=Kg:Lg?a=Og?1:O:b.mode&1?(a=Ug?2+10*(((a-2+15)/10|0)+1):2+25*(((a-2+500)/25|0)+1),null!==Mg&&a===O&&(a+=1)):a=1;Ug& {snip}",
+                "function If(a,b){a:{if(0===a.expirationTime||a.expirationTime>b)a.expirationTime=b;var c=a.alternate;null!==c&&(0===c.expirationTime||c.expi {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}",
+                "function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t(\"244\"):void 0;if(d {snip}",
+                "c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExp {snip}",
+                "function Yg(a,b){hh=b;qh();if(null!==hh)for(oh(),lh=kh;null!==Y&&0!==Z&&(0===a||a>=Z)&&(!eh||kh>=Z);)Xg(Y,Z,kh>=Z),qh(),oh(),lh=kh;else for( {snip}",
+                "function Xg(a,b,c){V?t(\"245\"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}"
+              ],
+              "colno": 270,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} );else if(c=b.expirationTime,0===c||a<c)b.expirationTime=a;V||(W?Wg&&(Y=b,Z=1,Xg(b,1,!0)):1===a?Yg(1,null):Zg(b,a))}$g>ah&&($g=0,t(\"185\"))}} {snip}",
+              "lineno": 200
+            },
+            {
+              "function": "Yg",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "function If(a,b){a:{if(0===a.expirationTime||a.expirationTime>b)a.expirationTime=b;var c=a.alternate;null!==c&&(0===c.expirationTime||c.expi {snip}",
+                "a){!Lg&&0!==O&&b<O&&Pg();Ze(a,b);if(!Lg||Og||Mg!==a){b=a;a=a.expirationTime;if(null===b.nextScheduledRoot)b.expirationTime=a,null===T?(U=T=b {snip}",
+                "var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}",
+                "function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t(\"244\"):void 0;if(d {snip}",
+                "c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExp {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "function Xg(a,b,c){V?t(\"245\"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}",
+                "function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}",
+                "0,a.latestPingedTime=0):(e=a.latestPendingTime,0!==e&&(e<d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime<d&&(a.earliestP {snip}",
+                "{start:e.selectionStart,end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g {snip}",
+                "e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start: {snip}"
+              ],
+              "colno": 173,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} ),qh(),oh(),lh=kh;else for(;null!==Y&&0!==Z&&(0===a||a>=Z);)Xg(Y,Z,!0),qh();null!==hh&&(ch=0,dh=null);0!==Z&&Zg(Y,Z);hh=null;eh=!1;$g=0;mh=n {snip}",
+              "lineno": 204
+            },
+            {
+              "function": "Xg",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "a){!Lg&&0!==O&&b<O&&Pg();Ze(a,b);if(!Lg||Og||Mg!==a){b=a;a=a.expirationTime;if(null===b.nextScheduledRoot)b.expirationTime=a,null===T?(U=T=b {snip}",
+                "var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}",
+                "function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t(\"244\"):void 0;if(d {snip}",
+                "c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExp {snip}",
+                "function Yg(a,b){hh=b;qh();if(null!==hh)for(oh(),lh=kh;null!==Y&&0!==Z&&(0===a||a>=Z)&&(!eh||kh>=Z);)Xg(Y,Z,kh>=Z),qh(),oh(),lh=kh;else for( {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}",
+                "0,a.latestPingedTime=0):(e=a.latestPendingTime,0!==e&&(e<d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime<d&&(a.earliestP {snip}",
+                "{start:e.selectionStart,end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g {snip}",
+                "e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start: {snip}",
+                "x);R.__reactInternalSnapshotBeforeUpdate=yh}break a;case 5:case 7:case 8:case 6:break a;default:t(\"163\")}}Q=Q.nextEffect}}catch(Xa){e=!0,f=X {snip}"
+              ],
+              "colno": 81,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} t(\"245\"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finishedWork,null!==d&&rh( {snip}",
+              "lineno": 205
+            },
+            {
+              "function": "rh",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "{start:e.selectionStart,end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g {snip}",
+                "e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start: {snip}",
+                "x);R.__reactInternalSnapshotBeforeUpdate=yh}break a;case 5:case 7:case 8:case 6:break a;default:t(\"163\")}}Q=Q.nextEffect}}catch(Xa){e=!0,f=X {snip}",
+                "Q);break;case 4:Bg(Q.alternate,Q);break;case 8:x=Q,yg(x),x.return=null,x.child=null,x.alternate&&(x.alternate.child=null,x.alternate.return= {snip}",
+                "(p=w.ownerDocument||document,y=(p?p.defaultView:window).getSelection(),x=w.textContent.length,q=Math.min(u.start,x),u=void 0===u.end?q:Math. {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "Jh=oc.memoizedState;X.props=q.memoizedProps;X.state=q.memoizedState;X.componentDidUpdate(Ih,Jh,X.__reactInternalSnapshotBeforeUpdate)}var kg {snip}",
+                "case 8:break;case 6:break;case 15:break;case 16:break;default:t(\"163\")}}if(Sa&128){var Ac=Q.ref;if(null!==Ac){var mg=Q.stateNode;switch(Q.ta {snip}",
+                "b;a.finishedWork=null}function Tg(){return eh?!0:null===hh||hh.timeRemaining()>nh?!1:eh=!0}function Dg(a){null===Y?t(\"246\"):void 0;Y.expirat {snip}",
+                "function vh(a){if(!a)return Fe;a=a._reactInternalFiber;a:{2!==jd(a)||2!==a.tag&&3!==a.tag?t(\"170\"):void 0;var b=a;do{switch(b.tag){case 5:b= {snip}",
+                "c,b);return b}function wh(a,b,c,d,e){var f=b.current;c=vh(c);null===b.context?b.context=c:b.pendingContext=c;b=e;e=df(d);e.payload={element: {snip}"
+              ],
+              "colno": 384,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} nate;q=Q;p=y;switch(q.tag){case 2:case 3:var X=q.stateNode;if(q.effectTag&4)if(null===oc)X.props=q.memoizedProps,X.state=q.memoizedState,X.c {snip}",
+              "lineno": 213
+            },
+            {
+              "function": "X",
+              "abs_path": "webpack:///./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "pre_context": [
+                "      eventNavLinks: '',",
+                "    };",
+                "  }",
+                "",
+                "  componentDidMount() {"
+              ],
+              "module": "app/views/groupDetails/shared/groupEventDetails",
+              "filename": "./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "post_context": [
+                "  }",
+                "",
+                "  componentDidUpdate(prevProps, prevState) {",
+                "    const {environments, params, location} = this.props;",
+                ""
+              ],
+              "colno": 5,
+              "in_app": true,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js.map"
+              },
+              "context_line": "    this.fetchData();",
+              "lineno": 42
+            },
+            {
+              "function": "this",
+              "abs_path": "webpack:///./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "pre_context": [
+                "      error: false,",
+                "    });",
+                "",
+                "    const envNames = environments.map(e => e.name);",
+                ""
+              ],
+              "module": "app/views/groupDetails/shared/groupEventDetails",
+              "in_app": true,
+              "post_context": [
+                "      .then(data => {",
+                "        this.setState({",
+                "          event: data,",
+                "          error: false,",
+                "          loading: false,"
+              ],
+              "colno": 5,
+              "filename": "./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js.map"
+              },
+              "context_line": "    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)",
+              "lineno": 96
+            },
+            {
+              "function": "fetchGroupEventAndMarkSeen",
+              "abs_path": "webpack:///./app/api.jsx",
+              "pre_context": [
+                "    // that we have a helpful stacktrace if it errors",
+                "    //",
+                "    // This *should* get logged to Sentry only if the promise rejection is not handled",
+                "    // (since SDK captures unhandled rejections). Ideally we explicitly ignore rejection",
+                "    // or handle with a user friendly error message"
+              ],
+              "module": "app/api",
+              "filename": "./app/api.jsx",
+              "post_context": [
+                "",
+                "    return new Promise((resolve, reject) => {",
+                "      this.request(path, {",
+                "        ...options,",
+                "        preservedError,"
+              ],
+              "colno": 28,
+              "in_app": true,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js.map"
+              },
+              "context_line": "    const preservedError = new Error();",
+              "lineno": 276
+            }
+          ]
+        },
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "function": "M",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " * @overview es6-promise - a tiny implementation of Promises/A+.",
+                " * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)",
+                " * @license   Licensed under MIT license",
+                " *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE",
+                " * @version   v4.2.5+7f2b526d"
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * react-dom-server.browser.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 188,
+              "colno": 38154,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip}  o,r;for(b&&(o=i.domain)&&o.exit();t;){r=t.fn,t=t.next;try{r()}catch(o){throw t?n():e=void 0,o}}e=void 0,o&&o.enter()};if(b)n=function(){i.n {snip}"
+            },
+            {
+              "function": "x/<",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "post_context": [
+                "/*!",
+                "  Copyright (c) 2015 Jed Watson.",
+                "  Based on code that is Copyright 2013-2015, Facebook, Inc.",
+                "  All rights reserved.",
+                "*/"
+              ],
+              "in_app": false,
+              "lineno": 163,
+              "colno": 6164,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} ,M):b(n)):M(o)}catch(t){a&&!i&&a.exit(),M(t)}};n.length>p;)i(n[p++]);t._c=[],t._n=!1,e&&!t._h&&_(t)})}},_=function(t){d.call(b,function(){va {snip}"
+            },
+            {
+              "function": "i",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "post_context": [
+                "/*!",
+                "  Copyright (c) 2015 Jed Watson.",
+                "  Based on code that is Copyright 2013-2015, Facebook, Inc.",
+                "  All rights reserved.",
+                "*/"
+              ],
+              "in_app": false,
+              "lineno": 163,
+              "colno": 6019,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} ry{c?(r||(2==t._h&&E(t),t._h=1),!0===c?n=o:(a&&a.enter(),n=c(o),a&&(a.exit(),i=!0)),n===e.promise?M(y(\"Promise-chain cycle\")):(p=N(n))?p.cal {snip}"
+            },
+            {
+              "function": "c",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                "MERCHANTABLITY OR NON-INFRINGEMENT.",
+                "",
+                "See the Apache Version 2.0 License for specific language governing permissions",
+                "and limitations under the License.",
+                "***************************************************************************** */"
+              ],
+              "post_context": [
+                "/*!",
+                "  Copyright (c) 2017 Jed Watson.",
+                "  Licensed under the MIT License (MIT), see",
+                "  http://jedwatson.github.io/classnames",
+                "*/"
+              ],
+              "in_app": false,
+              "lineno": 66,
+              "colno": 59539,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,\"next\",t)}function b(t){n(i,r,p,c,b,\"throw\",t)}c(void 0)})}}},functio {snip}"
+            },
+            {
+              "function": "n",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                "MERCHANTABLITY OR NON-INFRINGEMENT.",
+                "",
+                "See the Apache Version 2.0 License for specific language governing permissions",
+                "and limitations under the License.",
+                "***************************************************************************** */"
+              ],
+              "post_context": [
+                "/*!",
+                "  Copyright (c) 2017 Jed Watson.",
+                "  Licensed under the MIT License (MIT), see",
+                "  http://jedwatson.github.io/classnames",
+                "*/"
+              ],
+              "in_app": false,
+              "lineno": 66,
+              "colno": 59329,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} t}},,function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}"
+            },
+            {
+              "function": "g/</t[e]",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
+                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
+                " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
+                " * SOFTWARE.",
+                " */"
+              ],
+              "post_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "in_app": false,
+              "lineno": 157,
+              "colno": 28530,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} row\",\"return\"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}"
+            },
+            {
+              "function": "q/p._invoke</<",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
+                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
+                " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
+                " * SOFTWARE.",
+                " */"
+              ],
+              "post_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "in_app": false,
+              "lineno": 157,
+              "colno": 28144,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} lse\"return\"===n.method&&n.abrupt(\"return\",n.arg);o=s;var b=W(t,e,n);if(\"normal\"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}"
+            },
+            {
+              "function": "W",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
+                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
+                " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
+                " * SOFTWARE.",
+                " */"
+              ],
+              "post_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "in_app": false,
+              "lineno": 157,
+              "colno": 28354,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:\"normal\",arg:t.call(e,n)}}catch(t){return{type:\"throw\",arg:t}}}function v(){}function y(){}fun {snip}"
+            },
+            {
+              "function": "e/<",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 36820,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "context_line": "{snip} etComponentGetter(),e.prev=1,e.next=4,I(t);case 4:n=e.sent,this.setState({Component:n.default||n}),e.next=11;break;case 8:e.prev=8,e.t0=e.ca {snip}"
+            },
+            {
+              "function": "A.prototype.setState",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * react-dom.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 204,
+              "colno": 1578,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} \"object\"!=typeof t&&\"function\"!=typeof t&&null!=t&&l(\"85\"),this.updater.enqueueSetState(this,t,e,\"setState\")},A.prototype.forceUpdate=functi {snip}"
+            },
+            {
+              "function": "enqueueSetState",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 46383,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} =Jo(o=xp(o,t));r.payload=e,null!=n&&(r.callback=n),$o(t,r),_p(t,o)},enqueueReplaceState:function(t,e,n){t=t._reactInternalFiber;var o=ci(),r {snip}"
+            },
+            {
+              "function": "_p",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 77354,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} expirationTime=t),Dp||(Kp?Yp&&(Fp=e,Ip=1,ui(e,1,!0)):1===t?ai(1,null):ii(e,t))),ni>ei&&(ni=0,i(\"185\")))}function Tp(t,e,n,o,r){var p=hp;hp=1 {snip}"
+            },
+            {
+              "function": "ai",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 78842,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} (),pi(),ti=$p;else for(;null!==Fp&&0!==Ip&&(0===t||t>=Ip);)ui(Fp,Ip,!0),bi();if(null!==Gp&&(Hp=0,Pp=null),0!==Ip&&ii(Fp,Ip),Gp=null,jp=!1,ni {snip}"
+            },
+            {
+              "function": "ui",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 79226,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} (t.finishedWork=null,Sp(t,!1,n),null!==(o=t.finishedWork)&&zi(t,o,e))}else null!==(o=t.finishedWork)?zi(t,o,e):(t.finishedWork=null,Sp(t,!0, {snip}"
+            },
+            {
+              "function": "zi",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 83607,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/vendor.js",
+              "context_line": "{snip} f(null===B)X.props=g.memoizedProps,X.state=g.memoizedState,X.componentDidMount();else{var w=B.memoizedProps,L=B.memoizedState;X.props=g.memo {snip}"
+            },
+            {
+              "function": "value",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 940494,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "context_line": "{snip}  p()(t,e),o()(t,[{key:\"componentDidMount\",value:function(){this.fetchData()}},{key:\"componentDidUpdate\",value:function(e,t){var n=this.props {snip}"
+            },
+            {
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 940031,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "context_line": "{snip} ding:!0,error:!1});var m=s.map(function(e){return e.name});Object(Cn.a)(t,u,d,l,c,m).then(function(e){n.setState({event:e,error:!1,loading:! {snip}"
+            },
+            {
+              "function": "value",
+              "abs_path": "https://s1.sentry-cdn.com/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 54023,
+              "filename": "/_static/6561974731a99a09341b7a8c97c5e0f0/sentry/dist/app.js",
+              "context_line": "{snip} nts[1]:{},a=n.includeAllArgs,i=o()(n,[\"includeAllArgs\"]),s=new Error;return new Promise(function(n,o){t.request(e,r()({},i,{preservedError:s {snip}"
+            }
+          ]
+        },
+        "mechanism": {
+          "data": {
+            "message": "GET /issues/1017871644/events/latest/ 404",
+            "mode": "stack",
+            "name": "NotFoundError"
+          },
+          "type": "onunhandledrejection",
+          "handled": false
+        },
+        "value": "GET /issues/1017871644/events/latest/ 404",
+        "type": "NotFoundError"
+      }
+    ]
+  },
+  "release": "30808c27b8e8f2ac672499e43e16dcba452e9f5a"
+}
diff --git a/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-sentryui-safari.json b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-sentryui-safari.json
new file mode 100644
index 0000000000..4b6b7679e3
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/javascript-xbrowser-sentryui-safari.json
@@ -0,0 +1,690 @@
+{
+  "culprit": "/organizations/:orgId/issues/:groupId/",
+  "event_id": "b7cd1cd6f0be4c19a5d8e931d935d837",
+  "environment": "prod",
+  "platform": "javascript",
+  "logger": "",
+  "fingerprint": [
+    "{{ default }}"
+  ],
+  "exception": {
+    "values": [
+      {
+        "stacktrace": {
+          "frames": [
+            {
+              "function": "promiseReactionJob",
+              "abs_path": "[native code]",
+              "in_app": true,
+              "filename": "[native code]"
+            },
+            {
+              "function": "_next",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "pre_context": [
+                "        args = arguments;",
+                "    return new Promise(function (resolve, reject) {",
+                "      var gen = fn.apply(self, args);",
+                "",
+                "      function _next(value) {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "post_context": [
+                "      }",
+                "",
+                "      function _throw(err) {",
+                "        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);",
+                "      }"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);",
+              "lineno": 25
+            },
+            {
+              "function": "asyncGeneratorStep",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "pre_context": [
+                "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {",
+                "  try {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
+              "post_context": [
+                "    var value = info.value;",
+                "  } catch (error) {",
+                "    reject(error);",
+                "    return;",
+                "  }"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "    var info = gen[key](arg);",
+              "lineno": 3
+            },
+            {
+              "function": "key",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "pre_context": [
+                "          context.abrupt(\"return\", context.arg);",
+                "        }",
+                "",
+                "        state = GenStateExecuting;",
+                ""
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime",
+              "in_app": false,
+              "post_context": [
+                "        if (record.type === \"normal\") {",
+                "          // If an exception is thrown from innerFn, we leave state ===",
+                "          // GenStateExecuting and loop back for another invocation.",
+                "          state = context.done",
+                "            ? GenStateCompleted"
+              ],
+              "colno": 1,
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "        var record = tryCatch(innerFn, self, context);",
+              "lineno": 288
+            },
+            {
+              "function": "tryCatch",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "pre_context": [
+                "  // in every case, so we don't have to touch the arguments object. The",
+                "  // only additional allocation required is the completion record, which",
+                "  // has a stable shape and so hopefully should be cheap to allocate.",
+                "  function tryCatch(fn, obj, arg) {",
+                "    try {"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js",
+              "post_context": [
+                "    } catch (err) {",
+                "      return { type: \"throw\", arg: err };",
+                "    }",
+                "  }",
+                ""
+              ],
+              "colno": 15,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "      return { type: \"normal\", arg: fn.call(obj, arg) };",
+              "lineno": 62
+            },
+            {
+              "function": "call",
+              "abs_path": "webpack:///./app/components/lazyLoad.jsx",
+              "pre_context": [
+                "  async fetchComponent() {",
+                "    const getComponent = this.getComponentGetter();",
+                "",
+                "    try {",
+                "      const Component = await retryableImport(getComponent);"
+              ],
+              "module": "app/components/lazyLoad",
+              "in_app": true,
+              "post_context": [
+                "        Component: Component.default || Component,",
+                "      });",
+                "    } catch (err) {",
+                "      this.handleFetchError(err);",
+                "    }"
+              ],
+              "colno": 12,
+              "filename": "./app/components/lazyLoad.jsx",
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js.map"
+              },
+              "context_line": "      this.setState({",
+              "lineno": 100
+            },
+            {
+              "function": "setState",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js",
+              "pre_context": [
+                "",
+                "'use strict';var m=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"r {snip}",
+                "var z=\"function\"===typeof Symbol&&Symbol.iterator;function A(a,b,d,c,e,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error(\"Minified exception occu {snip}",
+                "function B(a){for(var b=arguments.length-1,d=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=0;c<b;c++)d+=\"&args[]=\"+encodeURIC {snip}",
+                "function E(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}E.prototype.isReactComponent={};E.prototype.setState=function(a, {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js",
+              "post_context": [
+                "function L(a,b,d){var c=void 0,e={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)J.call(b,c)&& {snip}",
+                "function M(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return\"object\"===typeof a&&null!= {snip}",
+                "function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}",
+                "function S(a,b,d,c){var e=typeof a;if(\"undefined\"===e||\"boolean\"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case \"string\":case \"num {snip}",
+                "0;!(e=a.next()).done;)e=e.value,f=b+T(e,h++),g+=S(e,f,d,c);else\"object\"===e&&(d=\"\"+a,B(\"31\",\"[object Object]\"===d?\"object with keys {\"+Objec {snip}"
+              ],
+              "colno": 67,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} ructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0, {snip}",
+              "lineno": 14
+            },
+            {
+              "function": "enqueueSetState",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "function lf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedU {snip}",
+                "function nf(a,b){return{value:a,source:b,stack:mc(b)}}var of={current:null},pf=null,qf=null,rf=null;function sf(a,b){var c=a.type._context;H {snip}",
+                "function vf(a,b){if(rf!==a&&!1!==b&&0!==b){if(\"number\"!==typeof b||1073741823===b)rf=a,b=1073741823;b={context:a,observedBits:b,next:null};n {snip}",
+                "function Af(a,b){H(yf,b,a);H(xf,a,a);H(L,wf,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:le(null,\"\"); {snip}",
+                "function Ff(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirat {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "b&&null!==b&&(d.callback=b);ff(a,d);If(a,c)}};function Kf(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.s {snip}",
+                "function Mf(a,b,c,d){var e=a.stateNode,f=K(b)?Ge:I.current;e.props=c;e.state=a.memoizedState;e.refs=Ef;e.context=He(a,f);f=a.updateQueue;nul {snip}",
+                "e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jf.enqueueReplaceState(e, {snip}",
+                "function Of(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(2!==c.tag&&3!== {snip}",
+                "function Pf(a,b){\"textarea\"!==a.type&&t(\"31\",\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join( {snip}"
+              ],
+              "colno": 489,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} &(e.callback=c);ff(a,e);If(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gf();c=Hf(c,a);var d=df(c);d.tag=2;void 0!==",
+              "lineno": 130
+            },
+            {
+              "function": "tag",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "!c){a.didError=!0;a.nextExpirationTimeToWorkOn=d;d=a.expirationTime=1;a.expirationTime=d;return}}a.pendingCommitExpirationTime=d;a.finishedWork=b}}",
+                "function wg(a,b){var c;a:{Lg&&!Og?t(\"263\"):void 0;for(c=a.return;null!==c;){switch(c.tag){case 2:case 3:var d=c.stateNode;if(\"function\"===ty {snip}",
+                "function Hf(a,b){0!==Kg?a=Kg:Lg?a=Og?1:O:b.mode&1?(a=Ug?2+10*(((a-2+15)/10|0)+1):2+25*(((a-2+500)/25|0)+1),null!==Mg&&a===O&&(a+=1)):a=1;Ug& {snip}",
+                "function If(a,b){a:{if(0===a.expirationTime||a.expirationTime>b)a.expirationTime=b;var c=a.alternate;null!==c&&(0===c.expirationTime||c.expi {snip}",
+                "a){!Lg&&0!==O&&b<O&&Pg();Ze(a,b);if(!Lg||Og||Mg!==a){b=a;a=a.expirationTime;if(null===b.nextScheduledRoot)b.expirationTime=a,null===T?(U=T=b {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t(\"244\"):void 0;if(d {snip}",
+                "c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExp {snip}",
+                "function Yg(a,b){hh=b;qh();if(null!==hh)for(oh(),lh=kh;null!==Y&&0!==Z&&(0===a||a>=Z)&&(!eh||kh>=Z);)Xg(Y,Z,kh>=Z),qh(),oh(),lh=kh;else for( {snip}",
+                "function Xg(a,b,c){V?t(\"245\"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}",
+                "function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}",
+              "lineno": 201
+            },
+            {
+              "function": "Yg",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "a){!Lg&&0!==O&&b<O&&Pg();Ze(a,b);if(!Lg||Og||Mg!==a){b=a;a=a.expirationTime;if(null===b.nextScheduledRoot)b.expirationTime=a,null===T?(U=T=b {snip}",
+                "var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}",
+                "function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t(\"244\"):void 0;if(d {snip}",
+                "c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExp {snip}",
+                "function Yg(a,b){hh=b;qh();if(null!==hh)for(oh(),lh=kh;null!==Y&&0!==Z&&(0===a||a>=Z)&&(!eh||kh>=Z);)Xg(Y,Z,kh>=Z),qh(),oh(),lh=kh;else for( {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}",
+                "0,a.latestPingedTime=0):(e=a.latestPendingTime,0!==e&&(e<d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime<d&&(a.earliestP {snip}",
+                "{start:e.selectionStart,end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g {snip}",
+                "e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start: {snip}",
+                "x);R.__reactInternalSnapshotBeforeUpdate=yh}break a;case 5:case 7:case 8:case 6:break a;default:t(\"163\")}}Q=Q.nextEffect}}catch(Xa){e=!0,f=X {snip}"
+              ],
+              "colno": 1,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "function Xg(a,b,c){V?t(\"245\"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}",
+              "lineno": 205
+            },
+            {
+              "function": "Xg",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}",
+                "function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t(\"244\"):void 0;if(d {snip}",
+                "c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExp {snip}",
+                "function Yg(a,b){hh=b;qh();if(null!==hh)for(oh(),lh=kh;null!==Y&&0!==Z&&(0===a||a>=Z)&&(!eh||kh>=Z);)Xg(Y,Z,kh>=Z),qh(),oh(),lh=kh;else for( {snip}",
+                "function Xg(a,b,c){V?t(\"245\"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "0,a.latestPingedTime=0):(e=a.latestPendingTime,0!==e&&(e<d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime<d&&(a.earliestP {snip}",
+                "{start:e.selectionStart,end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g {snip}",
+                "e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start: {snip}",
+                "x);R.__reactInternalSnapshotBeforeUpdate=yh}break a;case 5:case 7:case 8:case 6:break a;default:t(\"163\")}}Q=Q.nextEffect}}catch(Xa){e=!0,f=X {snip}",
+                "Q);break;case 4:Bg(Q.alternate,Q);break;case 8:x=Q,yg(x),x.return=null,x.child=null,x.alternate&&(x.alternate.child=null,x.alternate.return= {snip}"
+              ],
+              "colno": 39,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}",
+              "lineno": 206
+            },
+            {
+              "function": "ih",
+              "abs_path": "webpack:////usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "pre_context": [
+                "e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start: {snip}",
+                "x);R.__reactInternalSnapshotBeforeUpdate=yh}break a;case 5:case 7:case 8:case 6:break a;default:t(\"163\")}}Q=Q.nextEffect}}catch(Xa){e=!0,f=X {snip}",
+                "Q);break;case 4:Bg(Q.alternate,Q);break;case 8:x=Q,yg(x),x.return=null,x.child=null,x.alternate&&(x.alternate.child=null,x.alternate.return= {snip}",
+                "(p=w.ownerDocument||document,y=(p?p.defaultView:window).getSelection(),x=w.textContent.length,q=Math.min(u.start,x),u=void 0===u.end?q:Math. {snip}",
+                "q.nodeType&&y.push({element:q,left:q.scrollLeft,top:q.scrollTop});\"function\"===typeof w.focus&&w.focus();for(w=0;w<y.length;w++)q=y[w],q.ele {snip}"
+              ],
+              "module": "usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production",
+              "filename": "/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js",
+              "post_context": [
+                "case 8:break;case 6:break;case 15:break;case 16:break;default:t(\"163\")}}if(Sa&128){var Ac=Q.ref;if(null!==Ac){var mg=Q.stateNode;switch(Q.ta {snip}",
+                "b;a.finishedWork=null}function Tg(){return eh?!0:null===hh||hh.timeRemaining()>nh?!1:eh=!0}function Dg(a){null===Y?t(\"246\"):void 0;Y.expirat {snip}",
+                "function vh(a){if(!a)return Fe;a=a._reactInternalFiber;a:{2!==jd(a)||2!==a.tag&&3!==a.tag?t(\"170\"):void 0;var b=a;do{switch(b.tag){case 5:b= {snip}",
+                "c,b);return b}function wh(a,b,c,d,e){var f=b.current;c=vh(c);null===b.context?b.context=c:b.pendingContext=c;b=e;e=df(d);e.payload={element: {snip}",
+                "function Ah(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ac,key:null==d?null:\"\"+d,children:a,con {snip}"
+              ],
+              "colno": 156,
+              "in_app": false,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js.map"
+              },
+              "context_line": "{snip} .__reactInternalSnapshotBeforeUpdate)}var kg=q.updateQueue;null!==kg&&(X.props=q.memoizedProps,X.state=q.memoizedState,lf(q,kg,X,p));break;c {snip}",
+              "lineno": 214
+            },
+            {
+              "function": "q",
+              "abs_path": "webpack:///./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "pre_context": [
+                "      eventNavLinks: '',",
+                "    };",
+                "  }",
+                "",
+                "  componentDidMount() {"
+              ],
+              "module": "app/views/groupDetails/shared/groupEventDetails",
+              "filename": "./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "post_context": [
+                "  }",
+                "",
+                "  componentDidUpdate(prevProps, prevState) {",
+                "    const {environments, params, location} = this.props;",
+                ""
+              ],
+              "colno": 10,
+              "in_app": true,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js.map"
+              },
+              "context_line": "    this.fetchData();",
+              "lineno": 42
+            },
+            {
+              "function": "fetchData",
+              "abs_path": "webpack:///./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "pre_context": [
+                "      error: false,",
+                "    });",
+                "",
+                "    const envNames = environments.map(e => e.name);",
+                ""
+              ],
+              "module": "app/views/groupDetails/shared/groupEventDetails",
+              "filename": "./app/views/groupDetails/shared/groupEventDetails.jsx",
+              "post_context": [
+                "      .then(data => {",
+                "        this.setState({",
+                "          event: data,",
+                "          error: false,",
+                "          loading: false,"
+              ],
+              "colno": 5,
+              "in_app": true,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js.map"
+              },
+              "context_line": "    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)",
+              "lineno": 96
+            },
+            {
+              "function": "fetchGroupEventAndMarkSeen",
+              "abs_path": "webpack:///./app/api.jsx",
+              "pre_context": [
+                "    // that we have a helpful stacktrace if it errors",
+                "    //",
+                "    // This *should* get logged to Sentry only if the promise rejection is not handled",
+                "    // (since SDK captures unhandled rejections). Ideally we explicitly ignore rejection",
+                "    // or handle with a user friendly error message"
+              ],
+              "module": "app/api",
+              "filename": "./app/api.jsx",
+              "post_context": [
+                "",
+                "    return new Promise((resolve, reject) => {",
+                "      this.request(path, {",
+                "        ...options,",
+                "        preservedError,"
+              ],
+              "colno": 32,
+              "in_app": true,
+              "data": {
+                "sourcemap": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js.map"
+              },
+              "context_line": "    const preservedError = new Error();",
+              "lineno": 276
+            }
+          ]
+        },
+        "type": "NotFoundError",
+        "value": "GET /issues/1018239786/events/latest/ 404",
+        "raw_stacktrace": {
+          "frames": [
+            {
+              "function": "promiseReactionJob",
+              "abs_path": "[native code]",
+              "in_app": true,
+              "filename": "[native code]"
+            },
+            {
+              "function": "c",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                "MERCHANTABLITY OR NON-INFRINGEMENT.",
+                "",
+                "See the Apache Version 2.0 License for specific language governing permissions",
+                "and limitations under the License.",
+                "***************************************************************************** */"
+              ],
+              "post_context": [
+                "/*!",
+                "  Copyright (c) 2017 Jed Watson.",
+                "  Licensed under the MIT License (MIT), see",
+                "  http://jedwatson.github.io/classnames",
+                "*/"
+              ],
+              "in_app": false,
+              "lineno": 66,
+              "colno": 59540,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} ew Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,\"next\",t)}function b(t){n(i,r,p,c,b,\"throw\",t)}c(void 0)})}}},function {snip}"
+            },
+            {
+              "function": "n",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                "MERCHANTABLITY OR NON-INFRINGEMENT.",
+                "",
+                "See the Apache Version 2.0 License for specific language governing permissions",
+                "and limitations under the License.",
+                "***************************************************************************** */"
+              ],
+              "post_context": [
+                "/*!",
+                "  Copyright (c) 2017 Jed Watson.",
+                "  Licensed under the MIT License (MIT), see",
+                "  http://jedwatson.github.io/classnames",
+                "*/"
+              ],
+              "in_app": false,
+              "lineno": 66,
+              "colno": 59329,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} t}},,function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}"
+            },
+            {
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
+                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
+                " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
+                " * SOFTWARE.",
+                " */"
+              ],
+              "post_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "in_app": false,
+              "lineno": 157,
+              "colno": 28145,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} se\"return\"===n.method&&n.abrupt(\"return\",n.arg);o=s;var b=W(t,e,n);if(\"normal\"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b.a {snip}"
+            },
+            {
+              "function": "W",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
+                " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
+                " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
+                " * SOFTWARE.",
+                " */"
+              ],
+              "post_context": [
+                "/*!",
+                " * parseurl",
+                " * Copyright(c) 2014 Jonathan Ong",
+                " * Copyright(c) 2014-2017 Douglas Christopher Wilson",
+                " * MIT Licensed"
+              ],
+              "in_app": false,
+              "lineno": 157,
+              "colno": 28360,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} ,i),p}function W(t,e,n){try{return{type:\"normal\",arg:t.call(e,n)}}catch(t){return{type:\"throw\",arg:t}}}function v(){}function y(){}function  {snip}"
+            },
+            {
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 36638,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "context_line": "{snip} tter(),e.prev=1,e.next=4,I(t);case 4:n=e.sent,this.setState({Component:n.default||n}),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),this.h {snip}"
+            },
+            {
+              "function": "setState",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * react-dom.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 204,
+              "colno": 1844,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} (W,A.prototype),W.isPureReactComponent=!0;var v={current:null,currentDispatcher:null},y=Object.prototype.hasOwnProperty,m={key:!0,ref:!0,__s {snip}"
+            },
+            {
+              "function": "enqueueSetState",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 46627,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} t,e){t=t._reactInternalFiber;var n=ci(),o=Jo(n=xp(n,t));o.tag=2,null!=e&&(o.callback=e),$o(t,o),_p(t,n)}};function Br(t,e,n,o,r,p,i){return\" {snip}"
+            },
+            {
+              "function": "_p",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 77598,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} =!1,Vp=null,Gp=null,Kp=!1,Yp=!1,Qp=!1,Jp=null,Zp=p.unstable_now(),$p=2+(Zp/10|0),ti=$p,ei=50,ni=0,oi=null,ri=1;function pi(){$p=2+((p.unstab {snip}"
+            },
+            {
+              "function": "ai",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 79086,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} p=!0,Vp=t)}}if(Up)throw t=Vp,Vp=null,Up=!1,t}function ui(t,e,n){if(Dp&&i(\"245\"),Dp=!0,null===Gp||n){var o=t.finishedWork;null!==o?zi(t,o,e): {snip}"
+            },
+            {
+              "function": "ui",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 79470,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} atch;if(null!==o&&o._expirationTime<=n&&(null===Jp?Jp=[o]:Jp.push(o),o._defer))return t.finishedWork=e,void(t.expirationTime=0);t.finishedWo {snip}"
+            },
+            {
+              "function": "zi",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "pre_context": [
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *",
+                " * This source code is licensed under the MIT license found in the",
+                " * LICENSE file in the root directory of this source tree."
+              ],
+              "post_context": [
+                "/** @license React v16.5.1",
+                " * schedule.production.min.js",
+                " *",
+                " * Copyright (c) Facebook, Inc. and its affiliates.",
+                " *"
+              ],
+              "in_app": false,
+              "lineno": 212,
+              "colno": 83868,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/vendor.js",
+              "context_line": "{snip} l!==S&&(X.props=g.memoizedProps,X.state=g.memoizedState,rr(0,S,X));break;case 5:var N=g.updateQueue;if(null!==N){if(h=null,null!==g.child)sw {snip}"
+            },
+            {
+              "function": "value",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 939965,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "context_line": "{snip} t,[{key:\"componentDidMount\",value:function(){this.fetchData()}},{key:\"componentDidUpdate\",value:function(e,t){var n=this.props,a=n.environme {snip}"
+            },
+            {
+              "function": "fetchData",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 939500,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "context_line": "{snip} r:!1});var m=s.map(function(e){return e.name});Object(Cn.a)(t,u,d,l,c,m).then(function(e){n.setState({event:e,error:!1,loading:!1})}).catch( {snip}"
+            },
+            {
+              "function": "value",
+              "abs_path": "https://s1.sentry-cdn.com/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "post_context": [
+                "//# sourceMappingURL=app.js.map"
+              ],
+              "in_app": true,
+              "lineno": 1,
+              "colno": 53837,
+              "filename": "/_static/7a033b44f91f10112b4d329aff9531b5/sentry/dist/app.js",
+              "context_line": "{snip} ,a=n.includeAllArgs,i=o()(n,[\"includeAllArgs\"]),s=new Error;return new Promise(function(n,o){t.request(e,r()({},i,{preservedError:s,success: {snip}"
+            }
+          ]
+        }
+      }
+    ]
+  },
+  "release": "24bf3a5a4c66048c0f674c26ea9a3a50c334d278"
+}
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/frame_ignores_module_if_page_url_2.pysnap
index feab78e0f6..480799c10a 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/frame_ignores_module_if_page_url_2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/frame_ignores_module_if_page_url_2.pysnap
@@ -1,31 +1,32 @@
 ---
-created: '2019-04-07T10:03:31.228497Z'
+created: '2019-05-08T07:33:27.994271Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app
-      stacktrace (ignored single frame stack)
-        frame (non app frame)
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
           module* (ignored module)
             salt* (normalized generated module name)
               '<module>'
           filename (module takes precedence)
             u'foo.py'
---------------------------------------------------------------------------
-fallback:
-  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+          function*
+            u'a'
 --------------------------------------------------------------------------
 system:
-  hash: None
+  hash: '37a2dbfebce02591474d46b7485e9923'
   component:
-    system
-      stacktrace (ignored single frame stack)
+    system*
+      stacktrace*
         frame*
           module* (ignored module)
             salt* (normalized generated module name)
               '<module>'
           filename (module takes precedence)
             u'foo.py'
+          function*
+            u'a'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_chrome.pysnap
new file mode 100644
index 0000000000..0417bba596
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_chrome.pysnap
@@ -0,0 +1,154 @@
+---
+created: '2019-05-08T19:13:29.272686Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'eval'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'be36642f41f047346396f018f62375d3'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'eval'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_edge.pysnap
new file mode 100644
index 0000000000..cb8fb1b9f7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_edge.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-08T19:13:29.285780Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.prototype.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '7abcb72eb9800b9f38b37f448697a673'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.prototype.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame*
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_firefox.pysnap
new file mode 100644
index 0000000000..9c9b2c9638
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_firefox.pysnap
@@ -0,0 +1,144 @@
+---
+created: '2019-05-08T19:13:29.297921Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test/<'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'be36642f41f047346396f018f62375d3'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test/<'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_chrome.pysnap
new file mode 100644
index 0000000000..4d2bdd1bac
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_chrome.pysnap
@@ -0,0 +1,190 @@
+---
+created: '2019-05-08T19:44:33.382733Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'eval'
+            lineno (function takes precedence)
+              1
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'a06d7f718dc06157e7b8391cc5e56f10'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'eval'
+            lineno (function takes precedence)
+              1
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_edge.pysnap
new file mode 100644
index 0000000000..5015896e07
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_edge.pysnap
@@ -0,0 +1,198 @@
+---
+created: '2019-05-08T19:44:33.395858Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.prototype.testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              17
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'e834aba6bf7b758128da092a68a18e9a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.prototype.testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              17
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_firefox.pysnap
new file mode 100644
index 0000000000..e2f5a69013
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_firefox.pysnap
@@ -0,0 +1,180 @@
+---
+created: '2019-05-08T19:44:33.408562Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              1
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test/<'
+            lineno (function takes precedence)
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '76257a5880699cfcb33257b10f7808c0'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              1
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test/<'
+            lineno (function takes precedence)
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_safari.pysnap
new file mode 100644
index 0000000000..4c1b48ae64
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_http_safari.pysnap
@@ -0,0 +1,180 @@
+---
+created: '2019-05-08T19:44:33.421886Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '1ff8b3514536db084acc996865d7efd6'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_safari.pysnap
new file mode 100644
index 0000000000..503be6a842
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_safari.pysnap
@@ -0,0 +1,148 @@
+---
+created: '2019-05-08T19:13:29.310096Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'be36642f41f047346396f018f62375d3'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_sentryui_firefox.pysnap
new file mode 100644
index 0000000000..e8b3ef154a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_sentryui_firefox.pysnap
@@ -0,0 +1,410 @@
+---
+created: '2019-05-08T21:58:32.681533Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '7e5b9ebe8c869ab99af044367bf7d347'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask.js'
+            context-line*
+              u'        fn();'
+            function (function name is used only if module or filename are available)
+              u'M'
+            lineno (line number is used only if module or filename are available)
+              18
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u"    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              92
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u'            result = handler(value); // may throw'
+            function (function name is used only if module or filename are available)
+              u'run'
+            lineno (line number is used only if module or filename are available)
+              75
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        return this._invoke(method, arg);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              114
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              13
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              130
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'If'
+            lineno (function takes precedence)
+              200
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              204
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              205
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'rh'
+            lineno (function takes precedence)
+              213
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'X'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1017871644/events/latest/ 404'
+--------------------------------------------------------------------------
+system:
+  hash: 'e8f6c1a30ea99526223c0bba1bcd8c13'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask.js'
+            context-line*
+              u'        fn();'
+            function (function name is used only if module or filename are available)
+              u'M'
+            lineno (line number is used only if module or filename are available)
+              18
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u"    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              92
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u'            result = handler(value); // may throw'
+            function (function name is used only if module or filename are available)
+              u'run'
+            lineno (line number is used only if module or filename are available)
+              75
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        return this._invoke(method, arg);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              114
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              13
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              130
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'If'
+            lineno (function takes precedence)
+              200
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              204
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              205
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'rh'
+            lineno (function takes precedence)
+              213
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'X'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1017871644/events/latest/ 404'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_sentryui_safari.pysnap
new file mode 100644
index 0000000000..92af51a88d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined:2019_04_07/javascript_xbrowser_sentryui_safari.pysnap
@@ -0,0 +1,328 @@
+---
+created: '2019-05-08T21:58:32.702883Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '7e5b9ebe8c869ab99af044367bf7d347'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'promiseReactionJob'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'call'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'setState'
+            lineno (function takes precedence)
+              14
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'enqueueSetState'
+            lineno (function takes precedence)
+              130
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'tag'
+            lineno (function takes precedence)
+              201
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              205
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              206
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'ih'
+            lineno (function takes precedence)
+              214
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'q'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'fetchData'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1018239786/events/latest/ 404'
+--------------------------------------------------------------------------
+system:
+  hash: '6e03a501145e36faab4fa152bb3b6a62'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'promiseReactionJob'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'call'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'setState'
+            lineno (function takes precedence)
+              14
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'enqueueSetState'
+            lineno (function takes precedence)
+              130
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'tag'
+            lineno (function takes precedence)
+              201
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              205
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              206
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'ih'
+            lineno (function takes precedence)
+              214
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'q'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'fetchData'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1018239786/events/latest/ 404'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url_2.pysnap
index c3f61eda3f..996ef8200f 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url_2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/frame_ignores_module_if_page_url_2.pysnap
@@ -1,31 +1,32 @@
 ---
-created: '2019-03-14T17:12:37.159488Z'
+created: '2019-05-08T07:33:29.046132Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app
-      stacktrace (ignored single frame stack)
-        frame (non app frame)
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
           module* (ignored module)
             salt* (normalized generated module name)
               '<module>'
           filename (module takes precedence)
             u'foo.py'
---------------------------------------------------------------------------
-fallback:
-  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+          function*
+            u'a'
 --------------------------------------------------------------------------
 system:
-  hash: None
+  hash: '37a2dbfebce02591474d46b7485e9923'
   component:
-    system
-      stacktrace (ignored single frame stack)
+    system*
+      stacktrace*
         frame*
           module* (ignored module)
             salt* (normalized generated module name)
               '<module>'
           filename (module takes precedence)
             u'foo.py'
+          function*
+            u'a'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_chrome.pysnap
new file mode 100644
index 0000000000..edd44e2995
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_chrome.pysnap
@@ -0,0 +1,154 @@
+---
+created: '2019-05-08T19:13:30.287453Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'eval'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'be36642f41f047346396f018f62375d3'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'eval'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'Object.aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_edge.pysnap
new file mode 100644
index 0000000000..1c3888a680
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_edge.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-08T19:13:30.299340Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.prototype.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '7abcb72eb9800b9f38b37f448697a673'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Foo.prototype.testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame*
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'Anonymous function'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              17
+          frame
+            filename (ignored because filename is a URL)
+              u'/Home/Desktop/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_firefox.pysnap
new file mode 100644
index 0000000000..3ee39db105
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_firefox.pysnap
@@ -0,0 +1,144 @@
+---
+created: '2019-05-08T19:13:30.311148Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test/<'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'be36642f41f047346396f018f62375d3'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              1
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test/<'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame
+            filename (ignored because filename is a URL)
+              u'/private/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_chrome.pysnap
new file mode 100644
index 0000000000..f150e0d420
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_chrome.pysnap
@@ -0,0 +1,190 @@
+---
+created: '2019-05-08T19:44:34.467623Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'eval'
+            lineno (function takes precedence)
+              1
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'a06d7f718dc06157e7b8391cc5e56f10'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'eval'
+            lineno (function takes precedence)
+              1
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function (function name is used only if module or filename are available)
+              u'Array.map'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Object.aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_edge.pysnap
new file mode 100644
index 0000000000..cccf2ee591
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_edge.pysnap
@@ -0,0 +1,198 @@
+---
+created: '2019-05-08T19:44:34.480250Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.prototype.testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              17
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'e834aba6bf7b758128da092a68a18e9a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Foo.prototype.testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+            lineno (function takes precedence)
+              1
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'Anonymous function'
+            lineno (function takes precedence)
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              17
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_firefox.pysnap
new file mode 100644
index 0000000000..549fde544b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_firefox.pysnap
@@ -0,0 +1,180 @@
+---
+created: '2019-05-08T19:44:34.492469Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              1
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test/<'
+            lineno (function takes precedence)
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '76257a5880699cfcb33257b10f7808c0'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              1
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test/<'
+            lineno (function takes precedence)
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_safari.pysnap
new file mode 100644
index 0000000000..328a174f5a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_http_safari.pysnap
@@ -0,0 +1,180 @@
+---
+created: '2019-05-08T19:44:34.505161Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace*
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame* (frame considered in-app because no frame is in-app)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '1ff8b3514536db084acc996865d7efd6'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              49
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'testMethod'
+            lineno (function takes precedence)
+              43
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              38
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'test'
+            lineno (function takes precedence)
+              32
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            lineno*
+              33
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callback'
+            lineno (function takes precedence)
+              24
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'callAnotherThing'
+            lineno (function takes precedence)
+              19
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'/test.html'
+            function*
+              u'aha'
+            lineno (function takes precedence)
+              18
+        type*
+          u'Error'
+        value (stacktrace and type take precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_safari.pysnap
new file mode 100644
index 0000000000..ddee9bb3a0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_safari.pysnap
@@ -0,0 +1,148 @@
+---
+created: '2019-05-08T19:13:30.322788Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        stacktrace
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (frame considered in-app because no frame is in-app)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame (frame considered in-app because no frame is in-app)
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'be36642f41f047346396f018f62375d3'
+  component:
+    system*
+      exception*
+        stacktrace
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              49
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'testMethod'
+            lineno (line number is used only if module or filename are available)
+              43
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              38
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'eval'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'test'
+            lineno (line number is used only if module or filename are available)
+              32
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'map'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            lineno (line number is used only if module or filename are available)
+              33
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callback'
+            lineno (line number is used only if module or filename are available)
+              24
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'callAnotherThing'
+            lineno (line number is used only if module or filename are available)
+              19
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'aha'
+          frame
+            filename (ignored because filename is a URL)
+              u'/tmp/test.html'
+            function (function name is used only if module or filename are available)
+              u'aha'
+            lineno (line number is used only if module or filename are available)
+              18
+        type*
+          u'Error'
+        value*
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_sentryui_firefox.pysnap
new file mode 100644
index 0000000000..e8b414428f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_sentryui_firefox.pysnap
@@ -0,0 +1,410 @@
+---
+created: '2019-05-08T21:58:33.806947Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '7e5b9ebe8c869ab99af044367bf7d347'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask.js'
+            context-line*
+              u'        fn();'
+            function (function name is used only if module or filename are available)
+              u'M'
+            lineno (line number is used only if module or filename are available)
+              18
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u"    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              92
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u'            result = handler(value); // may throw'
+            function (function name is used only if module or filename are available)
+              u'run'
+            lineno (line number is used only if module or filename are available)
+              75
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        return this._invoke(method, arg);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              114
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              13
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              130
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'If'
+            lineno (function takes precedence)
+              200
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              204
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              205
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'rh'
+            lineno (function takes precedence)
+              213
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'X'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1017871644/events/latest/ 404'
+--------------------------------------------------------------------------
+system:
+  hash: 'e8f6c1a30ea99526223c0bba1bcd8c13'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask.js'
+            context-line*
+              u'        fn();'
+            function (function name is used only if module or filename are available)
+              u'M'
+            lineno (line number is used only if module or filename are available)
+              18
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u"    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              92
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise.js'
+            context-line*
+              u'            result = handler(value); // may throw'
+            function (function name is used only if module or filename are available)
+              u'run'
+            lineno (line number is used only if module or filename are available)
+              75
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        return this._invoke(method, arg);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              114
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'fn'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              13
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'this'
+            lineno (function takes precedence)
+              130
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'If'
+            lineno (function takes precedence)
+              200
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              204
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              205
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'rh'
+            lineno (function takes precedence)
+              213
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'X'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'this'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1017871644/events/latest/ 404'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_sentryui_safari.pysnap
new file mode 100644
index 0000000000..851b18a455
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy:2019_03_12/javascript_xbrowser_sentryui_safari.pysnap
@@ -0,0 +1,328 @@
+---
+created: '2019-05-08T21:58:33.873193Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '7e5b9ebe8c869ab99af044367bf7d347'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'promiseReactionJob'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'call'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'setState'
+            lineno (function takes precedence)
+              14
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'enqueueSetState'
+            lineno (function takes precedence)
+              130
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'tag'
+            lineno (function takes precedence)
+              201
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              205
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              206
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'ih'
+            lineno (function takes precedence)
+              214
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'q'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'fetchData'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1018239786/events/latest/ 404'
+--------------------------------------------------------------------------
+system:
+  hash: '6e03a501145e36faab4fa152bb3b6a62'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (native code indicated by filename)
+            function (function name is used only if module or filename are available)
+              u'promiseReactionJob'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+            function (function name is used only if module or filename are available)
+              u'_next'
+            lineno (line number is used only if module or filename are available)
+              25
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator.js'
+            context-line*
+              u'    var info = gen[key](arg);'
+            function (function name is used only if module or filename are available)
+              u'asyncGeneratorStep'
+            lineno (line number is used only if module or filename are available)
+              3
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'        var record = tryCatch(innerFn, self, context);'
+            function (function name is used only if module or filename are available)
+              u'key'
+            lineno (line number is used only if module or filename are available)
+              288
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime.js'
+            context-line*
+              u'      return { type: "normal", arg: fn.call(obj, arg) };'
+            function (function name is used only if module or filename are available)
+              u'tryCatch'
+            lineno (line number is used only if module or filename are available)
+              62
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'./app/components/lazyLoad.jsx'
+            context-line*
+              u'      this.setState({'
+            function (function name is used only if module or filename are available)
+              u'call'
+            lineno (line number is used only if module or filename are available)
+              100
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'setState'
+            lineno (function takes precedence)
+              14
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'enqueueSetState'
+            lineno (function takes precedence)
+              130
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'tag'
+            lineno (function takes precedence)
+              201
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Yg'
+            lineno (function takes precedence)
+              205
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'Xg'
+            lineno (function takes precedence)
+              206
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'/usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production.min.js'
+            context-line (discarded because line too long)
+            function*
+              u'ih'
+            lineno (function takes precedence)
+              214
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    this.fetchData();'
+            function (function name is used only if module or filename are available)
+              u'q'
+            lineno (line number is used only if module or filename are available)
+              42
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'./app/views/groupDetails/shared/groupEventDetails.jsx'
+            context-line*
+              u'    fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+            function (function name is used only if module or filename are available)
+              u'fetchData'
+            lineno (line number is used only if module or filename are available)
+              96
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'./app/api.jsx'
+            context-line*
+              u'    const preservedError = new Error();'
+            function (function name is used only if module or filename are available)
+              u'fetchGroupEventAndMarkSeen'
+            lineno (line number is used only if module or filename are available)
+              276
+        type*
+          u'NotFoundError'
+        value (stacktrace and type take precedence)
+          u'GET /issues/1018239786/events/latest/ 404'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/frame_ignores_module_if_page_url_2.pysnap
index 0f664ef43a..4d4c91855b 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/frame_ignores_module_if_page_url_2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/frame_ignores_module_if_page_url_2.pysnap
@@ -1,29 +1,30 @@
 ---
-created: '2019-03-19T22:59:40.838060Z'
+created: '2019-05-08T07:33:29.941068Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app
+    app (stacktrace of system takes precedence)
       stacktrace
         frame (non app frame)
           module (ignored bad javascript module)
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
---------------------------------------------------------------------------
-fallback:
-  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+          function*
+            u'a'
 --------------------------------------------------------------------------
 system:
-  hash: None
+  hash: '0cc175b9c0f1b6a831c399e269772661'
   component:
-    system
-      stacktrace
-        frame
+    system*
+      stacktrace*
+        frame*
           module (ignored bad javascript module)
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
+          function*
+            u'a'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_chrome.pysnap
new file mode 100644
index 0000000000..50a88accbc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_chrome.pysnap
@@ -0,0 +1,114 @@
+---
+created: '2019-05-08T19:13:31.245118Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: 'f1eafcdff05ffb12bb43880c5d0da248'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_edge.pysnap
new file mode 100644
index 0000000000..53bad36574
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_edge.pysnap
@@ -0,0 +1,122 @@
+---
+created: '2019-05-08T19:13:31.256675Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '11b10a754e6caa4f763377efecb5505e'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_firefox.pysnap
new file mode 100644
index 0000000000..834f679ca6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_firefox.pysnap
@@ -0,0 +1,104 @@
+---
+created: '2019-05-08T19:13:31.268322Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '10a56c6cae9b8877c1267ece4b9a1dcf'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_chrome.pysnap
new file mode 100644
index 0000000000..5ec9360384
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_chrome.pysnap
@@ -0,0 +1,150 @@
+---
+created: '2019-05-08T19:44:35.503850Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: 'ae807192d4f922c3f0513ce4df585ce6'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_edge.pysnap
new file mode 100644
index 0000000000..2aa9238dab
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_edge.pysnap
@@ -0,0 +1,158 @@
+---
+created: '2019-05-08T19:44:35.515454Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: 'e834aba6bf7b758128da092a68a18e9a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_firefox.pysnap
new file mode 100644
index 0000000000..c8917fb827
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_firefox.pysnap
@@ -0,0 +1,140 @@
+---
+created: '2019-05-08T19:44:35.526386Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '605738cf134b9fca3ff91d6ebb31125b'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_safari.pysnap
new file mode 100644
index 0000000000..ec00b691cc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_http_safari.pysnap
@@ -0,0 +1,156 @@
+---
+created: '2019-05-08T19:44:35.537132Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: '1c374ace6b13add91c6824b945dce4c3'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_safari.pysnap
new file mode 100644
index 0000000000..bc9330ab30
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_safari.pysnap
@@ -0,0 +1,124 @@
+---
+created: '2019-05-08T19:13:31.280258Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+--------------------------------------------------------------------------
+system:
+  hash: 'fc72313a47981f6b86536e727d84c2d4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_sentryui_firefox.pysnap
new file mode 100644
index 0000000000..aaab98e309
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_sentryui_firefox.pysnap
@@ -0,0 +1,274 @@
+---
+created: '2019-05-08T21:58:34.922612Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '9a671640bcd8830976947f4975a79427'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function*
+              u'M'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'fn'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'this'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'fn'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'X'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'this'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
+--------------------------------------------------------------------------
+system:
+  hash: '272b303fa2cd65124456c87f30cdf3d5'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function*
+              u'M'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'fn'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'run'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'fn'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'X'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'this'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_sentryui_safari.pysnap
new file mode 100644
index 0000000000..971c34e2ef
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_05/javascript_xbrowser_sentryui_safari.pysnap
@@ -0,0 +1,228 @@
+---
+created: '2019-05-08T21:58:34.939916Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '503cd0a69d1bdcfb9bdc7fa560201d73'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'call'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'q'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'fetchData'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
+--------------------------------------------------------------------------
+system:
+  hash: '6404c9ce987071526293aa0b5456e60b'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'call'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'q'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'fetchData'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap
index c52d7e31d5..d68c696e75 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/frame_ignores_module_if_page_url_2.pysnap
@@ -1,29 +1,30 @@
 ---
-created: '2019-04-17T20:02:28.475095Z'
+created: '2019-05-08T07:33:30.841461Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app
+    app (stacktrace of system takes precedence)
       stacktrace
         frame (non app frame)
           module (ignored bad javascript module)
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
---------------------------------------------------------------------------
-fallback:
-  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+          function*
+            u'a'
 --------------------------------------------------------------------------
 system:
-  hash: None
+  hash: '0cc175b9c0f1b6a831c399e269772661'
   component:
-    system
-      stacktrace
-        frame
+    system*
+      stacktrace*
+        frame*
           module (ignored bad javascript module)
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
+          function*
+            u'a'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_chrome.pysnap
new file mode 100644
index 0000000000..ceef786e59
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_chrome.pysnap
@@ -0,0 +1,118 @@
+---
+created: '2019-05-08T19:13:32.221404Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'f1eafcdff05ffb12bb43880c5d0da248'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_edge.pysnap
new file mode 100644
index 0000000000..60d3c9b6b6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_edge.pysnap
@@ -0,0 +1,126 @@
+---
+created: '2019-05-08T19:13:32.233022Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '11b10a754e6caa4f763377efecb5505e'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename*
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_firefox.pysnap
new file mode 100644
index 0000000000..7a0e38c3f3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_firefox.pysnap
@@ -0,0 +1,108 @@
+---
+created: '2019-05-08T19:13:32.244466Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '10a56c6cae9b8877c1267ece4b9a1dcf'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_chrome.pysnap
new file mode 100644
index 0000000000..3c5c3eafc0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_chrome.pysnap
@@ -0,0 +1,154 @@
+---
+created: '2019-05-08T19:44:36.504663Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'ae807192d4f922c3f0513ce4df585ce6'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function*
+              u'Array.map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Object.aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_edge.pysnap
new file mode 100644
index 0000000000..8da7cd5337
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_edge.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-08T19:44:36.516776Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'e834aba6bf7b758128da092a68a18e9a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Foo.prototype.testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function*
+              u'Array.prototype.map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_firefox.pysnap
new file mode 100644
index 0000000000..f423a376bc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_firefox.pysnap
@@ -0,0 +1,144 @@
+---
+created: '2019-05-08T19:44:36.528296Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '605738cf134b9fca3ff91d6ebb31125b'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_safari.pysnap
new file mode 100644
index 0000000000..b7badd1fa8
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_http_safari.pysnap
@@ -0,0 +1,160 @@
+---
+created: '2019-05-08T19:44:36.540489Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '1c374ace6b13add91c6824b945dce4c3'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_safari.pysnap
new file mode 100644
index 0000000000..732b7bed7c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_safari.pysnap
@@ -0,0 +1,128 @@
+---
+created: '2019-05-08T19:13:32.255912Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'fc72313a47981f6b86536e727d84c2d4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_sentryui_firefox.pysnap
new file mode 100644
index 0000000000..c98ec57b68
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_sentryui_firefox.pysnap
@@ -0,0 +1,278 @@
+---
+created: '2019-05-08T21:58:35.987471Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '9a671640bcd8830976947f4975a79427'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function*
+              u'M'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'fn'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'this'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'fn'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'X'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'this'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
+--------------------------------------------------------------------------
+system:
+  hash: '272b303fa2cd65124456c87f30cdf3d5'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function*
+              u'M'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'fn'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function*
+              u'run'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'fn'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'X'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'this'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_sentryui_safari.pysnap
new file mode 100644
index 0000000000..d1f9df038d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_04_17/javascript_xbrowser_sentryui_safari.pysnap
@@ -0,0 +1,232 @@
+---
+created: '2019-05-08T21:58:36.005336Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '503cd0a69d1bdcfb9bdc7fa560201d73'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'call'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'q'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'fetchData'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
+--------------------------------------------------------------------------
+system:
+  hash: '6404c9ce987071526293aa0b5456e60b'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'_next'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function*
+              u'asyncGeneratorStep'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'key'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function*
+              u'tryCatch'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function*
+              u'call'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'q'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function*
+              u'fetchData'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function*
+              u'fetchGroupEventAndMarkSeen'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/actix.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/actix.pysnap
new file mode 100644
index 0000000000..265fc783e4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/actix.pysnap
@@ -0,0 +1,788 @@
+---
+created: '2019-05-08T07:29:41.964392Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '3abe7858e37e8eb76c484efa7c7ba121'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame (non app frame)
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame*
+            filename*
+              u'boxed.rs'
+            function*
+              u'<F as alloc::boxed::FnBox<T>>::call_box'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame (non app frame)
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            filename*
+              u'panic.rs'
+            function*
+              u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Entered<T>>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Entered<T>>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Borrow<T>>::enter'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'mod.rs'
+            function*
+              u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function*
+              u'<futures::future::then::Then<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function*
+              u'<futures::future::chain::Chain<T>>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function*
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function*
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function*
+              u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function*
+              u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function*
+              u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function*
+              u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            filename*
+              u'log.rs'
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame (non app frame)
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+        value (ignored because stacktrace takes precedence)
+          u'Error occurred during request handling, status: <int> Internal Server Error Something went really wrong here'
+--------------------------------------------------------------------------
+system:
+  hash: '7f12fecf89ac9e64cdfa36b08e634681'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame*
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame*
+            filename*
+              u'boxed.rs'
+            function*
+              u'<F as alloc::boxed::FnBox<T>>::call_box'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame*
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            filename*
+              u'panic.rs'
+            function*
+              u'<std::panic::AssertUnwindSafe<T> as core::ops::function::FnOnce<T>>::call_once'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Entered<T>>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Entered<T>>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Borrow<T>>::enter'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'<tokio_current_thread::Borrow<T>>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'<tokio_current_thread::scheduler::Scheduler<T>>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'<tokio_current_thread::scheduler::Scheduled<T>>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'<alloc::boxed::Box<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function*
+              u'<futures::future::then::Then<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function*
+              u'<futures::future::chain::Chain<T>>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function*
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function*
+              u'<futures::future::either::Either<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function*
+              u'<actix_net::service::and_then::AndThenFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function*
+              u'<actix_net::service::map_err::MapErrFuture<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'<actix_web::server::channel::HttpChannel<T> as futures::future::Future>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'<actix_web::server::h1::Http1Dispatcher<T>>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function*
+              u'<actix_web::pipeline::Pipeline<T> as actix_web::server::handler::HttpHandlerTask>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function*
+              u'<actix_web::pipeline::ProcessResponse<T>>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame*
+            filename*
+              u'log.rs'
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'<std::thread::local::LocalKey<T>>::try_with'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+        value (ignored because stacktrace takes precedence)
+          u'Error occurred during request handling, status: <int> Internal Server Error Something went really wrong here'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/aspnetcore.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/aspnetcore.pysnap
new file mode 100644
index 0000000000..c791405cbd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/aspnetcore.pysnap
@@ -0,0 +1,347 @@
+---
+created: '2019-05-08T07:29:41.980976Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '228c649a3aa0901622c0a0e66ab0522c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame (non app frame)
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+        value (ignored because stacktrace takes precedence)
+          u'sync exception'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'An unhandled exception has occurred while executing the request.'
+--------------------------------------------------------------------------
+system:
+  hash: '4ccd0f1953483581ba360c7518f90332'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+        value (ignored because stacktrace takes precedence)
+          u'sync exception'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/connection_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/connection_error.pysnap
new file mode 100644
index 0000000000..49393eeac7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/connection_error.pysnap
@@ -0,0 +1,231 @@
+---
+created: '2019-05-08T07:31:17.178420Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '6b059b9febc815ac18ac4d2082e38a9b'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+            context-line*
+              u'context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'return super(SubscriptionQuota, self).is_rate_limited(project, key=key)'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'rejections = is_rate_limited(client, keys, args)'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+            context-line*
+              u'return script(keys, args, client)'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+            context-line*
+              u'return client.evalsha(self.sha, len(keys), *args)'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+            context-line*
+              u"return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)"
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+            context-line*
+              u'return self.parse_response(connection, command_name, **options)'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+            context-line*
+              u'response = connection.read_response()'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'response = self._parser.read_response()'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'(e.args,))'
+        type*
+          u'ConnectionError'
+        value (ignored because stacktrace takes precedence)
+          u"Error while reading from socket: ('Connection closed by server.',)"
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '013d3477a774fe20c468dc8accd516f1'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+            context-line*
+              u'context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'return super(SubscriptionQuota, self).is_rate_limited(project, key=key)'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'rejections = is_rate_limited(client, keys, args)'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+            context-line*
+              u'return script(keys, args, client)'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+            context-line*
+              u'return client.evalsha(self.sha, len(keys), *args)'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+            context-line*
+              u"return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)"
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+            context-line*
+              u'return self.parse_response(connection, command_name, **options)'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+            context-line*
+              u'response = connection.read_response()'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'response = self._parser.read_response()'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'(e.args,))'
+        type*
+          u'ConnectionError'
+        value (ignored because stacktrace takes precedence)
+          u"Error while reading from socket: ('Connection closed by server.',)"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp.pysnap
new file mode 100644
index 0000000000..dd2093ea30
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-05-08T07:29:42.002642Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '666766514295bb52812324097cdaf53e'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'YYY'
+      message (csp takes precedence)
+        u"Blocked 'script' from 'YYY'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_img_src.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_img_src.pysnap
new file mode 100644
index 0000000000..d82a399ecd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_img_src.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.010851Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1742101e08eb1608f569751dfedd0062'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'ftp://example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_no_blocked_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_no_blocked_uri.pysnap
new file mode 100644
index 0000000000..8a2753861d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_no_blocked_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.017119Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'efddf1cde918097259aa7d4904fb1942'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          "'self'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_script_data_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_script_data_uri.pysnap
new file mode 100644
index 0000000000..95ef30eb10
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_script_data_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.024939Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4e6f2bce9d121aa89f4dc5e5da08afb5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'data:'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_script_src_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_script_src_uri.pysnap
new file mode 100644
index 0000000000..caf6d13917
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_script_src_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.031984Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '223cdacfe5b4b830dc700b5c18cc21b4'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_style_src_elem.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_style_src_elem.pysnap
new file mode 100644
index 0000000000..1009bad119
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/csp_style_src_elem.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-05-08T07:29:42.039516Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '537a973f594c364842893e9a72af62a5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'style-src-elem'
+        violation (not a local script violation)
+        uri*
+          u'use.fontawesome.com'
+      message (csp takes precedence)
+        u"Blocked 'style' from 'use.fontawesome.com'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/custom_fingerprint.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/custom_fingerprint.pysnap
new file mode 100644
index 0000000000..18bef30cdb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/custom_fingerprint.pysnap
@@ -0,0 +1,8 @@
+---
+created: '2019-05-08T07:29:42.048653Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+custom-fingerprint:
+  hash: 'f30afa00b85f5cac5ee0bce01b31f08d'
+  values: [u'celery', u'SoftTimeLimitExceeded', u'sentry.tasks.store.process_event']
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/empty.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/empty.pysnap
new file mode 100644
index 0000000000..304efa6a24
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/empty.pysnap
@@ -0,0 +1,7 @@
+---
+created: '2019-05-08T07:29:42.056458Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_comput_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_comput_hashes.pysnap
new file mode 100644
index 0000000000..0e64a9ea45
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_comput_hashes.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-05-08T07:29:42.065046Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'b23ee1963904c2ca87b145febf94b66c'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes.pysnap
new file mode 100644
index 0000000000..b33c41eef0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes.pysnap
@@ -0,0 +1,32 @@
+---
+created: '2019-05-08T07:29:42.073921Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value (ignored because stacktrace takes precedence)
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes_2.pysnap
new file mode 100644
index 0000000000..718df996a4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes_2.pysnap
@@ -0,0 +1,32 @@
+---
+created: '2019-05-08T07:29:42.082698Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value (ignored because stacktrace takes precedence)
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes_3.pysnap
new file mode 100644
index 0000000000..fa55228f41
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_compute_hashes_3.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-05-08T07:29:42.092362Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'b4c29e2a2a2681fbaf9fd8f5b09e4154'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_javascript_no_in_app.pysnap
new file mode 100644
index 0000000000..ebeec7fa9c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_javascript_no_in_app.pysnap
@@ -0,0 +1,58 @@
+---
+created: '2019-05-08T22:36:43.422914Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+            context-line*
+              u'onError(err);'
+          frame (non app frame)
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'onError'
+            context-line*
+              u'this.model.submitError(error);'
+        type*
+          u'TypeError'
+        value*
+          u"Cannot read property 'submitError' of null"
+--------------------------------------------------------------------------
+system:
+  hash: '2f2dc85b9b0cd1e3be91984802c7b1b7'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+            context-line*
+              u'onError(err);'
+          frame*
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'onError'
+            context-line*
+              u'this.model.submitError(error);'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"Cannot read property 'submitError' of null"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_without_type.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_without_type.pysnap
new file mode 100644
index 0000000000..9a642bad73
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_without_type.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-05-08T07:29:42.110803Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      exception*
+        value*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_without_value.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_without_value.pysnap
new file mode 100644
index 0000000000..6f87de617d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/exception_without_value.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-05-08T07:29:42.118745Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/expectct.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/expectct.pysnap
new file mode 100644
index 0000000000..d153799bdd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/expectct.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-05-08T07:29:42.127596Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '3d2933f4b5ec459ec8d569a398fd328c'
+  component:
+    default*
+      expect-ct*
+        salt* (a static salt)
+          'expect-ct'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..d46642a406
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.135625Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '526b64456c48836a46ec1a89544fd412'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..78f06178b9
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.143860Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: '45c0b0a8c777e7a7040d7c39233a08a5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_extra_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..f17d7fd2cb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.152945Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '353e05904b48bd3ae4fa9623934a70d0'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_extra_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_extra_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..2715a734d1
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_extra_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.161510Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: 'be15ca3d511b96918e087c4f42503ca2'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_abs_path_is_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_abs_path_is_http.pysnap
new file mode 100644
index 0000000000..ed70404561
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_abs_path_is_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.169865Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_blob.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_blob.pysnap
new file mode 100644
index 0000000000..765d027e7e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_blob.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-05-08T07:29:42.178177Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_http.pysnap
new file mode 100644
index 0000000000..c723402eec
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.186423Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_https.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_https.pysnap
new file mode 100644
index 0000000000..04ecc10bd6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_filename_if_https.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.194465Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_java8_lambda_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_java8_lambda_function.pysnap
new file mode 100644
index 0000000000..8be3c1e7b0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_java8_lambda_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.203242Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo.bar.Baz'
+          function (ignored lambda function)
+            u'lambda$work$1'
+--------------------------------------------------------------------------
+system:
+  hash: 'be7f1b8b4014de623c533a8218dba5bd'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo.bar.Baz'
+          function (ignored lambda function)
+            u'lambda$work$1'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_java8_lambda_module.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_java8_lambda_module.pysnap
new file mode 100644
index 0000000000..2b7179dea3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_java8_lambda_module.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.212235Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
+          function*
+            u'call'
+--------------------------------------------------------------------------
+system:
+  hash: '53b9e9679a8ea25880376080b76f98ad'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
+          function*
+            u'call'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist.pysnap
new file mode 100644
index 0000000000..f48514c291
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.220823Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist_2.pysnap
new file mode 100644
index 0000000000..d069f640e7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.229148Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist_3.pysnap
new file mode 100644
index 0000000000..8f11227a35
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_javassist_3.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.237627Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename* (cleaned javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: 'dc3d511120ce04996b1eef3496516e5c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (cleaned javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_module_if_page_url.pysnap
new file mode 100644
index 0000000000..21aab3a06f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_module_if_page_url.pysnap
@@ -0,0 +1,29 @@
+---
+created: '2019-05-08T07:33:31.722343Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame (ignored low quality javascript frame)
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_module_if_page_url_2.pysnap
new file mode 100644
index 0000000000..f87f0eea03
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_module_if_page_url_2.pysnap
@@ -0,0 +1,30 @@
+---
+created: '2019-05-08T07:33:31.730952Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'a'
+--------------------------------------------------------------------------
+system:
+  hash: '0cc175b9c0f1b6a831c399e269772661'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'a'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_safari_native_code.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_safari_native_code.pysnap
new file mode 100644
index 0000000000..48b40b692b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_safari_native_code.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.263032Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (native code indicated by filename)
+            u'[native code]'
+          function*
+            u'forEach'
+--------------------------------------------------------------------------
+system:
+  hash: '30eb5001914d29dd8461898b5b8094fe'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (native code indicated by filename)
+            u'[native code]'
+          function*
+            u'forEach'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_constructors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_constructors.pysnap
new file mode 100644
index 0000000000..18e58ac5d5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_constructors.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.272169Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '07d1a8e5728b3c4c7aa8b8273fd0e753'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_constructors_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_constructors_2.pysnap
new file mode 100644
index 0000000000..66b46815bb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_constructors_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.280719Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '09e0efcab18f545166318118ed4e0292'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_methods.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_methods.pysnap
new file mode 100644
index 0000000000..3e1eb43f73
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_ignores_sun_java_generated_methods.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.288933Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: 'df0a8233b314c542a0b98a4e8865c7b5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_block_functions.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_block_functions.pysnap
new file mode 100644
index 0000000000..4881acdc35
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_block_functions.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.297875Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
+--------------------------------------------------------------------------
+system:
+  hash: '27eed4125fc13d42163ddb0b8f357b48'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_erb_templates.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_erb_templates.pysnap
new file mode 100644
index 0000000000..8df7e5ae00
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_erb_templates.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.306583Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+          function* (removed generated erb template suffix)
+            u'_foo_html_erb'
+--------------------------------------------------------------------------
+system:
+  hash: '4067a71d7098866f87c746a57a77b2bb'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
+          function* (removed generated erb template suffix)
+            u'_foo_html_erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_versioned_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_versioned_filenames.pysnap
new file mode 100644
index 0000000000..3318555c57
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_versioned_filenames.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-04-17T20:02:28.542399Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_versioned_filenames_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_versioned_filenames_2.pysnap
new file mode 100644
index 0000000000..7fed522973
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_sanitizes_versioned_filenames_2.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-05-08T07:29:42.323867Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_skips_symbol_if_unknown.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_skips_symbol_if_unknown.pysnap
new file mode 100644
index 0000000000..6327b2dbfd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_skips_symbol_if_unknown.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.332442Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'main'
+--------------------------------------------------------------------------
+system:
+  hash: 'a972f399399f5566f39b14a7afdd24ff'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_context_line_over_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_context_line_over_function.pysnap
new file mode 100644
index 0000000000..1fe67ea181
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_context_line_over_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.340686Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_function_over_lineno.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_function_over_lineno.pysnap
new file mode 100644
index 0000000000..7b56ea05a3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_function_over_lineno.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.349235Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_module_over_filename.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_module_over_filename.pysnap
new file mode 100644
index 0000000000..acb115f768
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_module_over_filename.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.357628Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_symbol_instead_of_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_symbol_instead_of_function.pysnap
new file mode 100644
index 0000000000..0259e459ce
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_uses_symbol_instead_of_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.365989Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
+--------------------------------------------------------------------------
+system:
+  hash: '23db4a9e73800923f345d2b868993345'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_with_only_required_vars.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_with_only_required_vars.pysnap
new file mode 100644
index 0000000000..d82984f372
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/frame_with_only_required_vars.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-05-08T07:29:42.374452Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/hpkp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/hpkp.pysnap
new file mode 100644
index 0000000000..727b31bb1e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/hpkp.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-05-08T07:29:42.382950Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1e37a374cb33572622d02ff7a6237c44'
+  component:
+    default*
+      hpkp*
+        salt* (a static salt)
+          'hpkp'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/java_chained.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/java_chained.pysnap
new file mode 100644
index 0000000000..f20dd86a9b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/java_chained.pysnap
@@ -0,0 +1,787 @@
+---
+created: '2019-05-08T07:29:42.412753Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '750486b8d8c51500fa0dfbb6f1577af0'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame (non app frame)
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+          value*
+            u'Address already in use'
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+          value*
+            u'service.getName(): "Tomcat";  Protocol handler start failed'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'Failed to start component [Connector[HTTP/<float><int>]]'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'Failed to start connector [Connector[HTTP/<float><int>]]'
+--------------------------------------------------------------------------
+system:
+  hash: '8924849495809d42431719c2b9ab65c8'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame*
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+          value (ignored because stacktrace takes precedence)
+            u'Address already in use'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'service.getName(): "Tomcat";  Protocol handler start failed'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'Failed to start component [Connector[HTTP/<float><int>]]'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/java_minimal.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/java_minimal.pysnap
new file mode 100644
index 0000000000..41fa52a755
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/java_minimal.pysnap
@@ -0,0 +1,803 @@
+---
+created: '2019-05-08T07:29:42.493256Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame (non app frame)
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame (non app frame)
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+        value*
+          u'/ by zero'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of system takes precedence)
+      message (exception of system takes precedence)
+        u'Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause'
+--------------------------------------------------------------------------
+system:
+  hash: 'ec87dd10e4f7512ecccb4a068c5774ae'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame*
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame*
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+        value (ignored because stacktrace takes precedence)
+          u'/ by zero'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_fallback_to_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_fallback_to_message.pysnap
new file mode 100644
index 0000000000..4031d4c1b2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_fallback_to_message.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-05-08T07:29:42.503455Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'Loading chunk <int> failed.\n(timeout: <url>'
+--------------------------------------------------------------------------
+system:
+  hash: '10dfd81e2df31e96fae451b9e205ad81'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'Loading chunk <int> failed.\n(timeout: <url>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_fallback_to_message_whistles.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_fallback_to_message_whistles.pysnap
new file mode 100644
index 0000000000..23bf117145
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_fallback_to_message_whistles.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-05-08T07:29:42.514078Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'<date>: <email> logged in (error <int>) time spent <float> --- correlation id <uuid>, checksum <sha1> (md5 <md5>); payload timestamp <date> (submitted from <ip> via <ip> via <ip>)'
+--------------------------------------------------------------------------
+system:
+  hash: '0bbe78766de9b3b64a5cc115018bec46'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'<date>: <email> logged in (error <int>) time spent <float> --- correlation id <uuid>, checksum <sha1> (md5 <md5>); payload timestamp <date> (submitted from <ip> via <ip> via <ip>)'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_no_in_app.pysnap
new file mode 100644
index 0000000000..91f769b157
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_exception_no_in_app.pysnap
@@ -0,0 +1,146 @@
+---
+created: '2019-05-08T07:33:31.998496Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'invokeGuardedCallbackDev'
+          frame (non app frame)
+            filename*
+              u'index.js'
+            function* (trimmed javascript function)
+              u'sentryWrapped'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'callCallback'
+        type*
+          u'ReferenceError'
+        value*
+          u'varant is not defined'
+--------------------------------------------------------------------------
+system:
+  hash: 'c0f3f7d6deb17aec9d07259ac684fad0'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'invokeGuardedCallbackDev'
+          frame*
+            filename*
+              u'index.js'
+            function* (trimmed javascript function)
+              u'sentryWrapped'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'callCallback'
+        type*
+          u'ReferenceError'
+        value (ignored because stacktrace takes precedence)
+          u'varant is not defined'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_message.pysnap
new file mode 100644
index 0000000000..1121c14c84
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.537223Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4119639092e62c55ea8be348e4d9260d'
+  component:
+    default*
+      message*
+        u'event'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_chrome.pysnap
new file mode 100644
index 0000000000..827dc5b92f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_chrome.pysnap
@@ -0,0 +1,118 @@
+---
+created: '2019-05-08T19:13:33.261561Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '992d9978c56ad65c987156d1a9dd528a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_edge.pysnap
new file mode 100644
index 0000000000..1bfdc799dc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_edge.pysnap
@@ -0,0 +1,126 @@
+---
+created: '2019-05-08T19:13:33.273801Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename*
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '992d9978c56ad65c987156d1a9dd528a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_firefox.pysnap
new file mode 100644
index 0000000000..8933330f7b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_firefox.pysnap
@@ -0,0 +1,108 @@
+---
+created: '2019-05-08T19:13:33.285957Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test/<'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '992d9978c56ad65c987156d1a9dd528a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+            function*
+              u'test/<'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_chrome.pysnap
new file mode 100644
index 0000000000..7c7715a63e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_chrome.pysnap
@@ -0,0 +1,154 @@
+---
+created: '2019-05-08T19:44:37.521495Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'a40b332d0f8a51220c57733fe759fd28'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_edge.pysnap
new file mode 100644
index 0000000000..86420f85db
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_edge.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-08T19:44:37.533792Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'a40b332d0f8a51220c57733fe759fd28'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_firefox.pysnap
new file mode 100644
index 0000000000..9ad2bbfc57
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_firefox.pysnap
@@ -0,0 +1,144 @@
+---
+created: '2019-05-08T19:44:37.545007Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'a40b332d0f8a51220c57733fe759fd28'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test/<'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_safari.pysnap
new file mode 100644
index 0000000000..c1acd2850d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_http_safari.pysnap
@@ -0,0 +1,160 @@
+---
+created: '2019-05-08T19:44:37.556286Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'a40b332d0f8a51220c57733fe759fd28'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_safari.pysnap
new file mode 100644
index 0000000000..0b200825b1
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_safari.pysnap
@@ -0,0 +1,128 @@
+---
+created: '2019-05-08T19:13:33.298272Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: '992d9978c56ad65c987156d1a9dd528a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap
new file mode 100644
index 0000000000..9ae5cff923
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap
@@ -0,0 +1,338 @@
+---
+created: '2019-05-08T22:36:44.020808Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '4a3cf3893b6485428dd02da116c8370e'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function (ignored because sourcemap used and context line available)
+              u'M'
+            context-line*
+              u'fn();'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u"while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'run'
+            context-line*
+              u'result = handler(value); // may throw'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'return this._invoke(method, arg);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'this.setState({'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'X'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
+--------------------------------------------------------------------------
+system:
+  hash: 'd5456487ea8dccfe96c1968b19870978'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function (ignored because sourcemap used and context line available)
+              u'M'
+            context-line*
+              u'fn();'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u"while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'run'
+            context-line*
+              u'result = handler(value); // may throw'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'return this._invoke(method, arg);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'this.setState({'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'X'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_sentryui_safari.pysnap
new file mode 100644
index 0000000000..60ec64857c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/javascript_xbrowser_sentryui_safari.pysnap
@@ -0,0 +1,276 @@
+---
+created: '2019-05-08T22:36:44.046229Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '4a3cf3893b6485428dd02da116c8370e'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'call'
+            context-line*
+              u'this.setState({'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'q'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchData'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
+--------------------------------------------------------------------------
+system:
+  hash: '0b81da6ea3d7cc82b1d4825b7aac0b8d'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'call'
+            context-line*
+              u'this.setState({'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'q'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchData'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/laravel.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/laravel.pysnap
new file mode 100644
index 0000000000..29386623d2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/laravel.pysnap
@@ -0,0 +1,722 @@
+---
+created: '2019-05-08T07:33:32.041454Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '4665d486184740231357ab63f4543a8d'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+            context-line*
+              u"require_once __DIR__.'/public/index.php';"
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+            context-line*
+              u'$request = Illuminate\\Http\\Request::capture()'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+            context-line*
+              u'$response = $this->sendRequestThroughRouter($request);'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+            context-line*
+              u'->then($this->dispatchToRouter());'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+            context-line*
+              u'return $this->router->dispatch($request);'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+            context-line*
+              u'return $this->dispatchToRoute($request);'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+            context-line*
+              u'return $this->runRoute($request, $this->findRoute($request));'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+            context-line*
+              u'$this->runRouteWithinStack($route, $request)'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+            context-line*
+              u'});'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+            context-line*
+              u'return $this->encrypt($next($this->decrypt($request)));'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+            context-line*
+              u'$response = $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+            context-line*
+              u'$response = $next($request), $session'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+            context-line*
+              u'return tap($next($request), function ($response) use ($request) {'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'$request, $route->run()'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+            context-line*
+              u'return $this->runCallable();'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+            context-line*
+              u"$this->parametersWithoutNulls(), new ReflectionFunction($this->action['uses'])"
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+            context-line*
+              u"throw new Exception('LARAVEL TEST');"
+        type*
+          u'Exception'
+        value (ignored because stacktrace takes precedence)
+          u'LARAVEL TEST'
+--------------------------------------------------------------------------
+system:
+  hash: '107ed03036d901157372f260bc3df446'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+            context-line*
+              u"require_once __DIR__.'/public/index.php';"
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+            context-line*
+              u'$request = Illuminate\\Http\\Request::capture()'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+            context-line*
+              u'$response = $this->sendRequestThroughRouter($request);'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+            context-line*
+              u'->then($this->dispatchToRouter());'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+            context-line*
+              u'return $this->router->dispatch($request);'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+            context-line*
+              u'return $this->dispatchToRoute($request);'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+            context-line*
+              u'return $this->runRoute($request, $this->findRoute($request));'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+            context-line*
+              u'$this->runRouteWithinStack($route, $request)'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+            context-line*
+              u'});'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+            context-line*
+              u'return $this->encrypt($next($this->decrypt($request)));'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+            context-line*
+              u'$response = $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+            context-line*
+              u'$response = $next($request), $session'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+            context-line*
+              u'return tap($next($request), function ($response) use ($request) {'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'$request, $route->run()'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+            context-line*
+              u'return $this->runCallable();'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+            context-line*
+              u"$this->parametersWithoutNulls(), new ReflectionFunction($this->action['uses'])"
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+            context-line*
+              u"throw new Exception('LARAVEL TEST');"
+        type*
+          u'Exception'
+        value (ignored because stacktrace takes precedence)
+          u'LARAVEL TEST'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/logentry_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/logentry_prefers_message.pysnap
new file mode 100644
index 0000000000..5e036c1661
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/logentry_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.577620Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/logentry_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/logentry_uses_formatted.pysnap
new file mode 100644
index 0000000000..b823795fce
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/logentry_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.584879Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '329b29efcf1f77067a063e34f56e7791'
+  component:
+    default*
+      message*
+        u'Hello there world!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/message_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/message_prefers_message.pysnap
new file mode 100644
index 0000000000..b7265213e2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/message_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.592184Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/message_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/message_uses_formatted.pysnap
new file mode 100644
index 0000000000..3b86ef421f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/message_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.599996Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'd3f5e52d24e9c1eae5abe6c866cced63'
+  component:
+    default*
+      message*
+        u'Hello there Peter!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/minified_javascript.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/minified_javascript.pysnap
new file mode 100644
index 0000000000..45a4898898
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/minified_javascript.pysnap
@@ -0,0 +1,374 @@
+---
+created: '2019-05-08T07:33:32.089211Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'S/<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/</a</<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'exports/<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'exports/</<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function* (trimmed javascript function)
+              u'e'
+            context-line (discarded because line too long)
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'wrapTimeFunction/<'
+            context-line (discarded because line too long)
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
+--------------------------------------------------------------------------
+system:
+  hash: '229ba965d8c77f776bcc01d92969615e'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'S/<'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/</a</<'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'exports/<'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'exports/</<'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'e/<'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+            context-line (discarded because line too long)
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function* (trimmed javascript function)
+              u'e'
+            context-line (discarded because line too long)
+          frame (ignored low quality javascript frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function* (trimmed javascript function)
+              u'wrapTimeFunction/<'
+            context-line (discarded because line too long)
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap
new file mode 100644
index 0000000000..89f6946296
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_complex_function_names.pysnap
@@ -0,0 +1,38 @@
+---
+created: '2019-05-08T07:29:42.628861Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9b78cced1eefcd0c655a0a3d8ce2cdd2'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_no_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_no_filenames.pysnap
new file mode 100644
index 0000000000..c7979ec751
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_no_filenames.pysnap
@@ -0,0 +1,110 @@
+---
+created: '2019-05-08T07:29:42.652574Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '418120a66f7031923031f5c52aca0724'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+          frame (non app frame)
+            function (ignored unknown function)
+              u'<unknown>'
+          frame (non app frame)
+            function (ignored unknown function)
+              u'<redacted>'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '06f8f02638bc75df5a5c88712055ee5f'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame*
+            function*
+              u'<sentry::integrations::log::Logger as log::Log>::log'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+          frame
+            function (ignored unknown function)
+              u'<unknown>'
+          frame
+            function (ignored unknown function)
+              u'<redacted>'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_with_function_name.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_with_function_name.pysnap
new file mode 100644
index 0000000000..2291d48c5d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/native_with_function_name.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-05-08T07:29:42.664783Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::start'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::crash'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::something::nested::Foo<T>::crash'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value*
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
+--------------------------------------------------------------------------
+system:
+  hash: 'c29439027eafcf7642f641554ab0f0ef'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::start'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::crash'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::something::nested::Foo<T>::crash'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value (ignored because stacktrace takes precedence)
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/node_exception_weird.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/node_exception_weird.pysnap
new file mode 100644
index 0000000000..0dd343e9d1
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/node_exception_weird.pysnap
@@ -0,0 +1,198 @@
+---
+created: '2019-05-08T07:39:46.454178Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '280318c52af37d73af6668b1b911e01d'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'withScope'
+            context-line*
+              u'*/'
+          frame (ignored low quality javascript frame)
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function* (trimmed javascript function)
+              u'<anonymous>'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'mockConstructor [as captureException]'
+            context-line*
+              u'return fn.apply(this, arguments);'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'<anonymous>'
+            context-line*
+              u'})();'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+            context-line*
+              u'return specificMockImpl.apply(this, arguments);'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'<anonymous>'
+            context-line*
+              u'return original.apply(this, arguments);'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'if (maxBreadcrumbs <= 0) {'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'invokeClient'
+            context-line*
+              u'* @returns Scope, the new cloned scope'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'promisedEvent'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function* (trimmed javascript function)
+              u'eventFromException'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bla'
+--------------------------------------------------------------------------
+system:
+  hash: '149f3f2fba7318d20804b50c70fcaa37'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'withScope'
+            context-line*
+              u'*/'
+          frame (ignored low quality javascript frame)
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function* (trimmed javascript function)
+              u'<anonymous>'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'mockConstructor [as captureException]'
+            context-line*
+              u'return fn.apply(this, arguments);'
+          frame (ignored low quality javascript frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'<anonymous>'
+            context-line*
+              u'})();'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+            context-line*
+              u'return specificMockImpl.apply(this, arguments);'
+          frame (ignored low quality javascript frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'<anonymous>'
+            context-line*
+              u'return original.apply(this, arguments);'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'if (maxBreadcrumbs <= 0) {'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'invokeClient'
+            context-line*
+              u'* @returns Scope, the new cloned scope'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'promisedEvent'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function* (trimmed javascript function)
+              u'eventFromException'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bla'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_exception_base.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_exception_base.pysnap
new file mode 100644
index 0000000000..400e5eea95
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_exception_base.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-05-08T07:29:42.684400Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'b4c29e2a2a2681fbaf9fd8f5b09e4154'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_http_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_http_error.pysnap
new file mode 100644
index 0000000000..0c7a9dfd8d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/python_http_error.pysnap
@@ -0,0 +1,87 @@
+---
+created: '2019-05-08T07:33:32.167071Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'd59239f5aad3304d60beb1fde3369b78'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+            context-line*
+              u'resp.raise_for_status()'
+          frame (non app frame)
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+            context-line*
+              u'raise HTTPError(http_error_msg, response=self)'
+        type*
+          u'HTTPError'
+        value (ignored because stacktrace takes precedence)
+          u'<int> Client Error: Too Many Requests for url: <url>'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '133db3f366b1327dab4e661f66dfb961'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+            context-line*
+              u'resp.raise_for_status()'
+          frame*
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+            context-line*
+              u'raise HTTPError(http_error_msg, response=self)'
+        type*
+          u'HTTPError'
+        value (ignored because stacktrace takes precedence)
+          u'<int> Client Error: Too Many Requests for url: <url>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/react_native.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/react_native.pysnap
new file mode 100644
index 0000000000..c9ed099570
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/react_native.pysnap
@@ -0,0 +1,410 @@
+---
+created: '2019-05-08T22:36:44.224971Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '73470e545e51eea9cff8a6c006f68f57'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'value'
+            context-line*
+              u'return this.flushedQueue();'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._inCall--;'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'_inCall'
+            context-line*
+              u'return this.flushedQueue();'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._lastFlush = new Date().getTime();'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_lastFlush'
+            context-line*
+              u'_receiveRootNodeIDEvent(index, eventTopLevelType, i);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveRootNodeIDEvent'
+            context-line*
+              u'batchedUpdates(function() {'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'batchedUpdates'
+            context-line*
+              u'return _batchedUpdates(fn, bookkeeping);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_batchedUpdates'
+            context-line*
+              u'return fn(a);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'(forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'forEachAccumulated'
+            context-line*
+              u'Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);'
+          frame (non app frame)
+            function*
+              u'[native code] forEach'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'D'
+            context-line*
+              u'executeDispatch(e, !1, dispatchListeners, dispatchInstances);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'executeDispatch'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError('
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'invokeGuardedCallbackAndCatchFirstError'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'invokeGuardedCallback.apply(ReactErrorUtils, arguments);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'var funcArgs = Array.prototype.slice.call(arguments, 3);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'arguments'
+            context-line*
+              u'touchableHandleResponderRelease: function(e) {'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveSignal'
+            context-line*
+              u'this._performSideEffectsForTransition(curState, nextState, signal, e);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_performSideEffectsForTransition'
+            context-line*
+              u'this.touchableHandlePress(e);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'this.props.onPress && this.props.onPress(e);'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'onPress'
+            context-line*
+              u'<Button'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'Button'
+            context-line*
+              u'<Button'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"undefined is not a function (evaluating '({}).invalidFunction()')"
+--------------------------------------------------------------------------
+system:
+  hash: 'ecd413627f0d90a5a25cb28d1ba9c39f'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'value'
+            context-line*
+              u'return this.flushedQueue();'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._inCall--;'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'_inCall'
+            context-line*
+              u'return this.flushedQueue();'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._lastFlush = new Date().getTime();'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_lastFlush'
+            context-line*
+              u'_receiveRootNodeIDEvent(index, eventTopLevelType, i);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveRootNodeIDEvent'
+            context-line*
+              u'batchedUpdates(function() {'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'batchedUpdates'
+            context-line*
+              u'return _batchedUpdates(fn, bookkeeping);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_batchedUpdates'
+            context-line*
+              u'return fn(a);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'(forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'forEachAccumulated'
+            context-line*
+              u'Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);'
+          frame*
+            function*
+              u'[native code] forEach'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'D'
+            context-line*
+              u'executeDispatch(e, !1, dispatchListeners, dispatchInstances);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'executeDispatch'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError('
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'invokeGuardedCallbackAndCatchFirstError'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'invokeGuardedCallback.apply(ReactErrorUtils, arguments);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'var funcArgs = Array.prototype.slice.call(arguments, 3);'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'arguments'
+            context-line*
+              u'touchableHandleResponderRelease: function(e) {'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveSignal'
+            context-line*
+              u'this._performSideEffectsForTransition(curState, nextState, signal, e);'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_performSideEffectsForTransition'
+            context-line*
+              u'this.touchableHandlePress(e);'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'this.props.onPress && this.props.onPress(e);'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'onPress'
+            context-line*
+              u'<Button'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'Button'
+            context-line*
+              u'<Button'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"undefined is not a function (evaluating '({}).invalidFunction()')"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_cocoa.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_cocoa.pysnap
new file mode 100644
index 0000000000..508240b676
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_cocoa.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-05-08T07:29:42.727072Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb416f98479efa56a77c524602dc9979'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame (non app frame)
+          filename*
+            u'baz.m'
+--------------------------------------------------------------------------
+system:
+  hash: '1df786c8c266506e1acb6669c8df5154'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame*
+          filename*
+            u'baz.m'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_collapse_recursion.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_collapse_recursion.pysnap
new file mode 100644
index 0000000000..cb5390e92c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_collapse_recursion.pysnap
@@ -0,0 +1,114 @@
+---
+created: '2019-05-08T07:29:42.737426Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
+--------------------------------------------------------------------------
+system:
+  hash: '894c3489e2ade384dc107bca6829d134'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_compute_hashes.pysnap
new file mode 100644
index 0000000000..60fe9ef13c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-05-08T07:29:42.746009Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_discards_seemingly_useless_stack.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_discards_seemingly_useless_stack.pysnap
new file mode 100644
index 0000000000..9e92eaeb83
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_discards_seemingly_useless_stack.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-05-08T07:29:42.754535Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_does_not_discard_non_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_does_not_discard_non_urls.pysnap
new file mode 100644
index 0000000000..18a4b823ef
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_does_not_discard_non_urls.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-05-08T07:29:42.762763Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_does_not_group_different_js_errors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_does_not_group_different_js_errors.pysnap
new file mode 100644
index 0000000000..340c08039d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_does_not_group_different_js_errors.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-05-08T07:29:42.770977Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'index.js'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'index.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_excludes_single_frame_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_excludes_single_frame_urls.pysnap
new file mode 100644
index 0000000000..01f2adff52
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_excludes_single_frame_urls.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.779313Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
+--------------------------------------------------------------------------
+system:
+  hash: 'cd2a9fd0cdaa8cd55ed22b101fc65882'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_hash_without_system_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_hash_without_system_frames.pysnap
new file mode 100644
index 0000000000..6d37131ffb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_hash_without_system_frames.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-05-08T07:29:42.787707Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap
new file mode 100644
index 0000000000..f665c72a09
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap
@@ -0,0 +1,42 @@
+---
+created: '2019-05-08T19:13:33.547540Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame (non app frame)
+          filename*
+            u'dojo.js'
+          function*
+            u'c'
+        frame (non app frame)
+          filename*
+            u'dojo.js'
+          function* (trimmed javascript function)
+            u'_createDocumentViewModel'
+--------------------------------------------------------------------------
+system:
+  hash: 'c5da56c71b31f34c5880d734cbc8f5bb'
+  component:
+    system*
+      stacktrace*
+        frame (ignored low quality javascript frame)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame*
+          filename*
+            u'dojo.js'
+          function*
+            u'c'
+        frame*
+          filename*
+            u'dojo.js'
+          function* (trimmed javascript function)
+            u'_createDocumentViewModel'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_rust.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_rust.pysnap
new file mode 100644
index 0000000000..0508d4bdde
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_rust.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-05-08T07:29:42.835417Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb87c1031dba55b67df86fb9fff59dc6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::*))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::*))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_rust2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_rust2.pysnap
new file mode 100644
index 0000000000..2aa0fe1491
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_rust2.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-05-02T18:53:32.201919Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb87c1031dba55b67df86fb9fff59dc6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (non app frame)
+            function*
+              u'std::panicking::try::do_call'
+          frame (non app frame)
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::*))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9b33b65a645c66239cafcd276fcd0659'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame (ignored by grouping enhancement rule (family:native function:__*))
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::*))
+            function*
+              u'log_demo::main'
+          frame (ignored by grouping enhancement rule (family:native function:*::__*))
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_with_minimal_app_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_with_minimal_app_frames.pysnap
new file mode 100644
index 0000000000..7edfa161a2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/stacktrace_with_minimal_app_frames.pysnap
@@ -0,0 +1,88 @@
+---
+created: '2019-05-08T07:29:42.883513Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/template_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/template_compute_hashes.pysnap
new file mode 100644
index 0000000000..bb82589faa
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/template_compute_hashes.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-05-08T07:29:42.889892Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '826f66ef602835f68030c04c634df320'
+  component:
+    default*
+      template*
+        filename*
+          u'foo.html'
+        context-line*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/threads_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/threads_compute_hashes.pysnap
new file mode 100644
index 0000000000..7e7d2501bd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/threads_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-04-17T20:02:29.122896Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (threads of system takes precedence)
+      threads (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.c'
+            function*
+              u'main'
+--------------------------------------------------------------------------
+system:
+  hash: '1a11687556cf74559f0ae90b1c87e2fd'
+  component:
+    system*
+      threads*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.c'
+            function*
+              u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/threads_no_hash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/threads_no_hash.pysnap
new file mode 100644
index 0000000000..2dd67d9889
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle:2019_05_08/threads_no_hash.pysnap
@@ -0,0 +1,19 @@
+---
+created: '2019-05-08T07:29:42.906320Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      threads (ignored because contains 2 threads)
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      threads (ignored because contains 2 threads)
