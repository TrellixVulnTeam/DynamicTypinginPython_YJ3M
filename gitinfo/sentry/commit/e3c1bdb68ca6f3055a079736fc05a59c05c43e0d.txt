commit e3c1bdb68ca6f3055a079736fc05a59c05c43e0d
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Jun 12 14:38:31 2020 -0700

    feat(vercel): creates MVP of project mapping ui (#19326)

diff --git a/src/sentry/integrations/vercel/client.py b/src/sentry/integrations/vercel/client.py
index 2a46d7ec33..cf07d60dc5 100644
--- a/src/sentry/integrations/vercel/client.py
+++ b/src/sentry/integrations/vercel/client.py
@@ -10,18 +10,28 @@ class VercelClient(ApiClient):
 
     TEAMS_URL = "/v1/teams/%s"
     USER_URL = "/www/user"
+    PROJECTS_URL = "/v4/projects/"
 
-    def __init__(self, access_token):
-        # TODO(Steve): we might need a constructor arg to denote if this is a team installation when we do API calls
+    def __init__(self, access_token, team_id=None):
         super(VercelClient, self).__init__()
         self.access_token = access_token
+        self.team_id = team_id
 
     def request(self, method, path, data=None, params=None):
+        if self.team_id:
+            # always need to use the team_id as a param for requests
+            params = params or {}
+            params["teamId"] = self.team_id
         headers = {"Authorization": u"Bearer {}".format(self.access_token)}
-        return self._request(method, path, headers=headers, data=data, params=params,)
+        return self._request(method, path, headers=headers, data=data, params=params)
 
-    def get_team(self, team_id):
-        return self.get_cached(self.TEAMS_URL % team_id, params={"teamId": team_id})
+    def get_team(self):
+        assert self.team_id
+        return self.get_cached(self.TEAMS_URL % self.team_id)
 
     def get_user(self):
         return self.get_cached(self.USER_URL)["user"]
+
+    def get_projects(self):
+        # TODO: we will need pagination since we are limited to 20
+        return self.get(self.PROJECTS_URL)["projects"]
diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index 170c95b314..32e559ab19 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -13,6 +13,8 @@ from sentry.integrations import (
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.utils.http import absolute_uri
+from sentry.models import Project
+from sentry.utils.compat import map
 
 from .client import VercelClient
 
@@ -23,9 +25,9 @@ VERCEL DESC
 FEATURES = [
     FeatureDescription(
         """
-        COMMIT DESCRIPTION
+        DEPLOYMENT DESCRIPTION
         """,
-        IntegrationFeatures.COMMITS,
+        IntegrationFeatures.DEPLOYMENT,
     ),
 ]
 
@@ -42,7 +44,37 @@ metadata = IntegrationMetadata(
 
 
 class VercelIntegration(IntegrationInstallation):
-    pass
+    def get_organization_config(self):
+        metadata = self.model.metadata
+        vercel_client = VercelClient(metadata["access_token"], metadata.get("team_id"))
+        # TODO: add try/catch if we get API failure
+        vercel_projects = [
+            {"value": p["id"], "label": p["name"]} for p in vercel_client.get_projects()
+        ]
+
+        proj_fields = ["id", "platform", "name", "slug"]
+        sentry_projects = map(
+            lambda proj: {key: proj[key] for key in proj_fields},
+            (
+                Project.objects.filter(organization_id=self.organization_id)
+                .order_by("slug")
+                .values(*proj_fields)
+            ),
+        )
+
+        fields = [
+            {
+                "name": "project_mappings",
+                "type": "project_mapper",
+                "mappedDropdown": {
+                    "items": vercel_projects,
+                    "placeholder": "Select a Vercel Project",  # TOOD: add translation
+                },
+                "sentryProjects": sentry_projects,
+            }
+        ]
+
+        return fields
 
 
 class VercelIntegrationProvider(IntegrationProvider):
@@ -51,7 +83,7 @@ class VercelIntegrationProvider(IntegrationProvider):
     requires_feature_flag = True
     metadata = metadata
     integration_cls = VercelIntegration
-    features = frozenset([IntegrationFeatures.COMMITS])
+    features = frozenset([IntegrationFeatures.DEPLOYMENT])
     oauth_redirect_url = "/extensions/vercel/configure/"
 
     def get_pipeline_views(self):
@@ -69,12 +101,13 @@ class VercelIntegrationProvider(IntegrationProvider):
     def build_integration(self, state):
         data = state["identity"]["data"]
         access_token = data["access_token"]
-        client = VercelClient(access_token)
+        team_id = data.get("team_id")
+        client = VercelClient(access_token, team_id)
 
-        if data.get("team_id"):
-            external_id = data["team_id"]
+        if team_id:
+            external_id = team_id
             installation_type = "team"
-            team = client.get_team(external_id)
+            team = client.get_team()
             name = team["name"]
         else:
             external_id = data["user_id"]
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
index 384ed79bd8..20744dae19 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
@@ -17,6 +17,7 @@ import InputField from './inputField';
 import ChoiceMapperField from './choiceMapperField';
 import RichListField from './richListField';
 import FieldSeparator from './fieldSeparator';
+import ProjectMapperField from './projectMapperField';
 import {Field} from './type';
 
 type Props = {
@@ -55,6 +56,7 @@ export default class FieldFromConfig extends React.Component<Props> {
         'textarea',
         'url',
         'table',
+        'project_mapper',
       ]),
       required: PropTypes.bool,
       multiline: PropTypes.bool,
@@ -135,6 +137,8 @@ export default class FieldFromConfig extends React.Component<Props> {
         return <RichListField {...props} />;
       case 'table':
         return <TableField {...props} />;
+      case 'project_mapper':
+        return <ProjectMapperField {...props} />;
       case 'custom':
         return field.Component(props);
       default:
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx
new file mode 100644
index 0000000000..d0473a0f7a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/projectMapperField.tsx
@@ -0,0 +1,167 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {components} from 'react-select';
+
+import InputField from 'app/views/settings/components/forms/inputField';
+import {ProjectMapperType} from 'app/views/settings/components/forms/type';
+import SelectControl from 'app/components/forms/selectControl';
+import IdBadge from 'app/components/idBadge';
+import Button from 'app/components/button';
+import {IconAdd} from 'app/icons';
+import {t} from 'app/locale';
+
+type Props = InputField['props'];
+type RenderProps = Props & ProjectMapperType;
+
+export class RenderField extends React.Component<RenderProps> {
+  sentryProjectRef = React.createRef<typeof SelectControl>();
+  mappedRef = React.createRef<typeof SelectControl>();
+
+  render() {
+    const {
+      onChange,
+      onBlur,
+      value,
+      mappedDropdown,
+      sentryProjects,
+      mappedDropdown: {items: mappedDropdownItems},
+    } = this.props;
+    const existingValues: Array<[number, string | number]> = value || [];
+
+    // create maps by the project id for constant time lookups
+    const sentryProjectsById = Object.fromEntries(
+      sentryProjects.map(project => [project.id, project])
+    );
+
+    const mappedItemsByValue = Object.fromEntries(
+      mappedDropdownItems.map(item => [item.value, item])
+    );
+
+    //build sets of values used so we don't let the user select them twice
+    const projectIdsUsed = new Set(existingValues.map(tuple => tuple[0]));
+    const mappedValuesUsed = new Set(existingValues.map(tuple => tuple[1]));
+
+    const projectOptions = sentryProjects
+      .filter(project => !projectIdsUsed.has(project.id))
+      .map(({slug, id}) => ({label: slug, value: id}));
+
+    const mappedItemsToShow = mappedDropdownItems.filter(
+      item => !mappedValuesUsed.has(item.value)
+    );
+
+    const handleAdd = () => {
+      const {value: sentryProjectId} = this.sentryProjectRef.current.state.value;
+      const {value: mappedValue} = this.mappedRef.current.state.value;
+      //add the new value to the list of existing values
+      const projectMappings = [...existingValues, [sentryProjectId, mappedValue]];
+      //trigger events so we save the value and show the check mark
+      onChange?.(projectMappings, []);
+      onBlur?.(projectMappings, []);
+    };
+
+    const renderItem = (itemTuple: [number, any]) => {
+      const [projectId, mappedValue] = itemTuple;
+      const {slug} = sentryProjectsById[projectId];
+      const {label: itemLabel} = mappedItemsByValue[mappedValue];
+      return (
+        <Item key={projectId}>
+          <ItemValue>{slug}</ItemValue> <ItemValue>{itemLabel}</ItemValue>
+        </Item>
+      );
+    };
+
+    const customValueContainer = containerProps => {
+      const valueList = containerProps.getValue();
+      //if no value set, we want to return the default component that is rendered
+      if (valueList.length === 0) {
+        return <components.ValueContainer {...containerProps} />;
+      }
+      const projectId = valueList[0].value;
+      const project = sentryProjectsById[projectId];
+      if (!project) {
+        return <components.ValueContainer {...containerProps} />;
+      }
+      return (
+        <components.ValueContainer {...containerProps}>
+          <IdBadge
+            project={project}
+            avatarSize={20}
+            displayName={project.slug}
+            avatarProps={{consistentWidth: true}}
+          />
+        </components.ValueContainer>
+      );
+    };
+
+    const customOptionProject = projectProps => {
+      const project = sentryProjectsById[projectProps.value];
+      if (!project) {
+        return null;
+      }
+      return (
+        <components.Option {...projectProps}>
+          <IdBadge
+            project={project}
+            avatarSize={20}
+            displayName={project.slug}
+            avatarProps={{consistentWidth: true}}
+          />
+        </components.Option>
+      );
+    };
+
+    return (
+      <Wrapper>
+        {existingValues.map(renderItem)}
+        <SelectContainer>
+          <StyledSelectControl
+            placeholder={t('Select a Project')}
+            name="project"
+            openMenuOnFocus
+            options={projectOptions}
+            components={{
+              Option: customOptionProject,
+              ValueContainer: customValueContainer,
+            }}
+            ref={this.sentryProjectRef}
+          />
+          <StyledSelectControl
+            placeholder={mappedDropdown.placeholder}
+            name="mappedDropwdown"
+            openMenuOnFocus
+            options={mappedItemsToShow}
+            ref={this.mappedRef}
+          />
+          <Button size="small" label={t('Add')} icon={<IconAdd />} onClick={handleAdd} />
+        </SelectContainer>
+      </Wrapper>
+    );
+  }
+}
+
+const ProjectMapperField = (props: Props) => (
+  <InputField
+    {...props}
+    field={(renderProps: RenderProps) => <RenderField {...renderProps} />}
+  />
+);
+
+export default ProjectMapperField;
+
+const StyledSelectControl = styled(SelectControl)`
+  width: 50%;
+`;
+
+const SelectContainer = styled('div')`
+  display: flex;
+`;
+
+const Wrapper = styled('div')``;
+
+const Item = styled('div')`
+  padding: 5px;
+`;
+
+const ItemValue = styled('span')`
+  padding: 5px;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
index 4ec34a3c6e..c50fbe7b6b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -27,16 +27,15 @@ const defaultProps = {
 };
 
 type DefaultProps = Readonly<typeof defaultProps>;
-
-//Maybe not the best way of getting the props from TableType but it works
-type Props = DefaultProps & InputField['props'] & Omit<TableType, 'type'>;
+type Props = InputField['props'];
+type RenderProps = Props & DefaultProps & TableType;
 
 export default class TableField extends React.Component<Props> {
   static defaultProps = defaultProps;
 
   hasValue = value => defined(value) && !objectIsEmpty(value);
 
-  renderField = (props: Props) => {
+  renderField = (props: RenderProps) => {
     const {
       onChange,
       onBlur,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 8e1c5a0f58..3f8d3875b3 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -2,6 +2,7 @@ import React from 'react';
 
 import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
 import Alert from 'app/components/alert';
+import {AvatarProject} from 'app/types';
 
 export const FieldType = [
   'array',
@@ -20,6 +21,7 @@ export const FieldType = [
   'text',
   'url',
   'table',
+  'project_mapper',
 ] as const;
 
 export type FieldValue = any;
@@ -113,12 +115,12 @@ export type TableType = {
   /**
    * An object with of column labels (headers) for the table.
    */
-  columnLabels?: object;
+  columnLabels: object;
   /**
    * A list of column keys for the table, in the order that you want
    * the columns to appear - order doesn't matter in columnLabels
    */
-  columnKeys?: string[];
+  columnKeys: string[];
   /**
    * The confirmation message before a a row is deleted
    */
@@ -126,6 +128,15 @@ export type TableType = {
   //TODO(TS): Should we have addButtonText and allowEmpty here as well?
 };
 
+export type ProjectMapperType = {
+  type: 'project_mapper';
+  mappedDropdown: {
+    items: Array<{value: string | number; label: string}>;
+    placeholder: string;
+  };
+  sentryProjects: Array<AvatarProject & {id: number; name: string}>;
+};
+
 export type Field = (
   | CustomType
   | SelectControlType
@@ -134,6 +145,7 @@ export type Field = (
   | RangeType
   | {type: typeof FieldType[number]}
   | TableType
+  | ProjectMapperType
 ) &
   BaseField;
 
diff --git a/tests/js/spec/components/forms/projectMapperField.spec.jsx b/tests/js/spec/components/forms/projectMapperField.spec.jsx
new file mode 100644
index 0000000000..fa14140f19
--- /dev/null
+++ b/tests/js/spec/components/forms/projectMapperField.spec.jsx
@@ -0,0 +1,57 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import {RenderField} from 'app/views/settings/components/forms/projectMapperField';
+
+describe('ProjectMapperField', () => {
+  let wrapper;
+  const mappedDropdown = {
+    placholder: 'hi',
+    items: [
+      {value: '1', label: 'label 1'},
+      {value: '2', label: 'label 2'},
+      {value: '3', label: 'label 3'},
+    ],
+  };
+
+  const sentryProjects = [
+    {id: 23, slug: 'cool', platform: 'javascript', name: 'Cool'},
+    {id: 24, slug: 'beans', platform: 'python', name: 'Beans'},
+  ];
+  const existingValues = [[23, '2']];
+  let onBlur, onChange;
+
+  beforeEach(() => {
+    onBlur = jest.fn();
+    onChange = jest.fn();
+    const props = {
+      mappedDropdown,
+      sentryProjects,
+      value: existingValues,
+      onChange,
+      onBlur,
+    };
+    wrapper = mountWithTheme(<RenderField {...props} />, {disableLifecycleMethods: true});
+  });
+
+  it('clicking add updates values with current dropdown values', () => {
+    wrapper.instance().sentryProjectRef.current = {state: {value: {value: 24}}};
+    wrapper.instance().mappedRef.current = {state: {value: {value: '1'}}};
+    wrapper.find('button').simulate('click');
+    expect(onBlur).toHaveBeenCalledWith(
+      [
+        [23, '2'],
+        [24, '1'],
+      ],
+      []
+    );
+    expect(onChange).toHaveBeenCalledWith(
+      [
+        [23, '2'],
+        [24, '1'],
+      ],
+      []
+    );
+  });
+});
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index 591195a320..5089e94855 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -25,13 +25,15 @@ class VercelIntegrationTest(IntegrationTestCase):
         }
 
         if is_team:
+            team_query = "?teamId=my_team_id"
             access_json["team_id"] = "my_team_id"
             responses.add(
                 responses.GET,
-                "https://api.vercel.com/v1/teams/my_team_id?teamId=my_team_id",
+                "https://api.vercel.com/v1/teams/my_team_id%s" % team_query,
                 json={"name": "my_team_name"},
             )
         else:
+            team_query = ""
             responses.add(
                 responses.GET,
                 "https://api.vercel.com/www/user",
@@ -42,6 +44,12 @@ class VercelIntegrationTest(IntegrationTestCase):
             responses.POST, "https://api.vercel.com/v2/oauth/access_token", json=access_json
         )
 
+        responses.add(
+            responses.GET,
+            "https://api.vercel.com/v4/projects/%s" % team_query,
+            json={"projects": []},
+        )
+
         resp = self.client.get(u"{}?{}".format(self.setup_path, urlencode({"code": "oauth-code"}),))
 
         mock_request = responses.calls[0].request
