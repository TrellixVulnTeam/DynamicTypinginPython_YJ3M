commit 26f4feaa4ae50cfd2b869b40a825ebc422fdc12f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Sep 20 13:28:09 2018 -0700

    ref(discover): Extract getOrderByOptions function to utils file (#9834)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 1ed8481214..7f607ebff0 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -21,6 +21,11 @@ import Intro from './intro';
 import EarlyAdopterMessage from './earlyAdopterMessage';
 import SavedQueries from './savedQueries';
 
+import {
+  getQueryStringFromQuery,
+  getQueryFromQueryString,
+  getOrderByOptions,
+} from './utils';
 import {isValidCondition} from './conditions/utils';
 import {isValidAggregation} from './aggregations/utils';
 import {
@@ -38,7 +43,6 @@ import {
   ButtonSpinner,
 } from './styles';
 
-import {getQueryStringFromQuery, getQueryFromQueryString} from './utils';
 import {trackQuery} from './analytics';
 
 export default class OrganizationDiscover extends React.Component {
@@ -177,49 +181,6 @@ export default class OrganizationDiscover extends React.Component {
     }
   };
 
-  getOrderbyOptions = () => {
-    const {queryBuilder} = this.props;
-    const columns = queryBuilder.getColumns();
-    const query = queryBuilder.getInternal();
-
-    // If there are valid aggregations, only allow summarized fields and aggregations in orderby
-    const validAggregations = query.aggregations.filter(agg =>
-      isValidAggregation(agg, columns)
-    );
-
-    const hasAggregations = validAggregations.length > 0;
-
-    const hasFields = query.fields.length > 0;
-
-    const columnOptions = columns.reduce((acc, {name}) => {
-      if (hasAggregations) {
-        const isInvalidField = hasFields && !query.fields.includes(name);
-        if (!hasFields || isInvalidField) {
-          return acc;
-        }
-      }
-
-      return [
-        ...acc,
-        {value: name, label: `${name} asc`},
-        {value: `-${name}`, label: `${name} desc`},
-      ];
-    }, []);
-
-    const aggregationOptions = [
-      // Ensure aggregations are unique (since users might input duplicates)
-      ...new Set(validAggregations.map(aggregation => aggregation[2])),
-    ].reduce((acc, agg) => {
-      return [
-        ...acc,
-        {value: agg, label: `${agg} asc`},
-        {value: `-${agg}`, label: `${agg} desc`},
-      ];
-    }, []);
-
-    return [...columnOptions, ...aggregationOptions];
-  };
-
   getSummarizePlaceholder = () => {
     const {queryBuilder} = this.props;
     const query = queryBuilder.getInternal();
@@ -325,7 +286,7 @@ export default class OrganizationDiscover extends React.Component {
                   name="orderby"
                   label={t('Order By')}
                   placeholder={<PlaceholderText>{t('Order by...')}</PlaceholderText>}
-                  options={this.getOrderbyOptions()}
+                  options={getOrderByOptions(queryBuilder)}
                   value={currentQuery.orderby}
                   onChange={val => this.updateField('orderby', val.value)}
                 />
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 4eca096550..abce34696b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -1,3 +1,5 @@
+import {isValidAggregation} from './aggregations/utils';
+
 export function getQueryFromQueryString(queryString) {
   if (!queryString) {
     return {};
@@ -23,3 +25,45 @@ export function getQueryStringFromQuery(query) {
 
   return `?${queryProperties.join('&')}`;
 }
+
+export function getOrderByOptions(queryBuilder) {
+  const columns = queryBuilder.getColumns();
+  const query = queryBuilder.getInternal();
+
+  // If there are valid aggregations, only allow summarized fields and aggregations in orderby
+  const validAggregations = query.aggregations.filter(agg =>
+    isValidAggregation(agg, columns)
+  );
+
+  const hasAggregations = validAggregations.length > 0;
+
+  const hasFields = query.fields.length > 0;
+
+  const columnOptions = columns.reduce((acc, {name}) => {
+    if (hasAggregations) {
+      const isInvalidField = hasFields && !query.fields.includes(name);
+      if (!hasFields || isInvalidField) {
+        return acc;
+      }
+    }
+
+    return [
+      ...acc,
+      {value: name, label: `${name} asc`},
+      {value: `-${name}`, label: `${name} desc`},
+    ];
+  }, []);
+
+  const aggregationOptions = [
+    // Ensure aggregations are unique (since users might input duplicates)
+    ...new Set(validAggregations.map(aggregation => aggregation[2])),
+  ].reduce((acc, agg) => {
+    return [
+      ...acc,
+      {value: agg, label: `${agg} asc`},
+      {value: `-${agg}`, label: `${agg} desc`},
+    ];
+  }, []);
+
+  return [...columnOptions, ...aggregationOptions];
+}
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 76cd37a2c3..afad78d8bb 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -4,50 +4,8 @@ import {browserHistory} from 'react-router';
 
 import Discover from 'app/views/organizationDiscover/discover';
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
-import {COLUMNS} from 'app/views/organizationDiscover/data';
 
 describe('Discover', function() {
-  describe('getOrderbyOptions()', function() {
-    let wrapper;
-
-    beforeEach(function() {
-      const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
-      const queryBuilder = createQueryBuilder({}, organization);
-
-      wrapper = mount(
-        <Discover queryBuilder={queryBuilder} organization={organization} />,
-        TestStubs.routerContext()
-      );
-    });
-
-    it('allows ordering by all fields when no aggregations', function() {
-      expect(wrapper.instance().getOrderbyOptions()).toHaveLength(COLUMNS.length * 2);
-    });
-
-    it('allows ordering by aggregations with aggregations and no fields', function() {
-      wrapper.instance().updateField('aggregations', [['count()', null, 'count']]);
-      const options = wrapper.instance().getOrderbyOptions();
-      expect(options).toHaveLength(2);
-      expect(options).toEqual([
-        {label: 'count asc', value: 'count'},
-        {label: 'count desc', value: '-count'},
-      ]);
-    });
-
-    it('allows ordering by aggregations and fields', function() {
-      wrapper.instance().updateField('fields', ['message']);
-      wrapper.instance().updateField('aggregations', [['count()', null, 'count']]);
-      const options = wrapper.instance().getOrderbyOptions();
-      expect(options).toHaveLength(4);
-      expect(options).toEqual([
-        {label: 'message asc', value: 'message'},
-        {label: 'message desc', value: '-message'},
-        {label: 'count asc', value: 'count'},
-        {label: 'count desc', value: '-count'},
-      ]);
-    });
-  });
-
   describe('runQuery()', function() {
     const mockResponse = {timing: {}, data: [], meta: []};
     let wrapper, queryBuilder;
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index bc4c44303e..8e0e81d84a 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -1,8 +1,12 @@
 import {
   getQueryFromQueryString,
   getQueryStringFromQuery,
+  getOrderByOptions,
 } from 'app/views/organizationDiscover/utils';
 
+import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import {COLUMNS} from 'app/views/organizationDiscover/data';
+
 const queryString =
   '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
 
@@ -17,7 +21,7 @@ const query = {
   start: '2018-06-26T01:18:04',
 };
 
-describe('get query from URL query string', function() {
+describe('getQueryFromQueryString()', function() {
   it('returns empty object if empty query string', function() {
     expect(getQueryFromQueryString('')).toEqual({});
   });
@@ -27,8 +31,42 @@ describe('get query from URL query string', function() {
   });
 });
 
-describe('get query URL string from query', function() {
+describe('getQueryStringFromQuery()', function() {
   it('parses query from query string', function() {
     expect(getQueryStringFromQuery(query)).toEqual(queryString);
   });
 });
+
+describe('getOrderByOptions()', function() {
+  const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
+  const queryBuilder = createQueryBuilder({}, organization);
+
+  it('allows ordering by all fields when no aggregations', function() {
+    expect(getOrderByOptions(queryBuilder)).toHaveLength(COLUMNS.length * 2);
+  });
+
+  it('allows ordering by aggregations with aggregations and no fields', function() {
+    queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
+
+    const options = getOrderByOptions(queryBuilder);
+    expect(options).toHaveLength(2);
+    expect(options).toEqual([
+      {label: 'count asc', value: 'count'},
+      {label: 'count desc', value: '-count'},
+    ]);
+  });
+
+  it('allows ordering by aggregations and fields', function() {
+    queryBuilder.updateField('fields', ['message']);
+    queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
+
+    const options = getOrderByOptions(queryBuilder);
+    expect(options).toHaveLength(4);
+    expect(options).toEqual([
+      {label: 'message asc', value: 'message'},
+      {label: 'message desc', value: '-message'},
+      {label: 'count asc', value: 'count'},
+      {label: 'count desc', value: '-count'},
+    ]);
+  });
+});
