commit 5463deb4050196d19d08c6ec03fd172f195f4d2f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 29 13:39:00 2015 -0700

    Initial work on moving platform listing to backend

diff --git a/src/sentry/api/endpoints/project_docs.py b/src/sentry/api/endpoints/project_docs.py
new file mode 100644
index 0000000000..871783591a
--- /dev/null
+++ b/src/sentry/api/endpoints/project_docs.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.constants import PLATFORM_LIST
+from sentry.models import ProjectKey
+
+
+class ProjectDocsEndpoint(ProjectEndpoint):
+    def get(self, request, project):
+        project_key = ProjectKey.get_default(project)
+
+        context = {
+            'platforms': [
+                {
+                    'id': platform,
+                }
+                for platform in PLATFORM_LIST
+            ],
+        }
+        if project_key:
+            context['dsn'] = project_key.dsn_private
+            context['dsnPublic'] = project_key.dsn_public
+
+        return Response(context)
diff --git a/src/sentry/api/endpoints/project_platform_docs.py b/src/sentry/api/endpoints/project_docs_platform.py
similarity index 60%
rename from src/sentry/api/endpoints/project_platform_docs.py
rename to src/sentry/api/endpoints/project_docs_platform.py
index a2cfaad6be..f12973dd31 100644
--- a/src/sentry/api/endpoints/project_platform_docs.py
+++ b/src/sentry/api/endpoints/project_docs_platform.py
@@ -6,40 +6,12 @@ from rest_framework.response import Response
 from sentry import http
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import ProjectKey, ProjectKeyStatus
+from sentry.constants import PLATFORM_LIST
+from sentry.models import ProjectKey
 
 DOC_URL = 'https://docs.getsentry.com/hosted/_wizards/{platform}.json'
 
-PLATFORMS = set([
-    'python',
-    'python-bottle',
-    'python-celery',
-    'python-django',
-    'python-flask',
-    'python-pylons',
-    'python-pyramid',
-    'python-tornado',
-    'javascript',
-    'node',
-    'node-express',
-    'node-koa',
-    'node-connect',
-    'php',
-    'php-laravel',
-    'php-monolog',
-    'php-symfony2',
-    'ruby',
-    'ruby-rack',
-    'ruby-rails',
-    'objective-c',
-    'java',
-    'java-log4j',
-    'java-log4j2',
-    'java-logback',
-    'java-appengine',
-    'c-sharp',
-    'go',
-])
+PLATFORM_SET = frozenset(PLATFORM_LIST)
 
 
 def replace_keys(html, project_key):
@@ -53,9 +25,9 @@ def replace_keys(html, project_key):
     return html
 
 
-class ProjectPlatformDocsEndpoint(ProjectEndpoint):
+class ProjectDocsPlatformEndpoint(ProjectEndpoint):
     def get(self, request, project, platform):
-        if platform not in PLATFORMS:
+        if platform not in PLATFORM_SET:
             raise ResourceDoesNotExist
 
         cache_key = 'docs:{}'.format(platform)
@@ -65,16 +37,10 @@ class ProjectPlatformDocsEndpoint(ProjectEndpoint):
             result = session.get(DOC_URL.format(platform=platform)).json()
             cache.set(cache_key, result, 3600)
 
-        try:
-            project_key = ProjectKey.objects.filter(
-                project=project,
-                roles=ProjectKey.roles.store,
-                status=ProjectKeyStatus.ACTIVE
-            )[0]
-        except IndexError:
-            project_key = None
+        project_key = ProjectKey.get_default(project)
 
         return Response({
+            'id': platform,
             'name': result['name'],
             'html': replace_keys(result['body'], project_key),
             'sdk': result['client_lib'],
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d638da890b..8a35c73cb2 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -30,6 +30,8 @@ from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
+from .endpoints.project_docs import ProjectDocsEndpoint
+from .endpoints.project_docs_platform import ProjectDocsPlatformEndpoint
 from .endpoints.project_events import ProjectEventsEndpoint
 from .endpoints.project_event_details import ProjectEventDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
@@ -40,7 +42,6 @@ from .endpoints.project_member_index import ProjectMemberIndexEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_rules import ProjectRulesEndpoint
 from .endpoints.project_rule_details import ProjectRuleDetailsEndpoint
-from .endpoints.project_platform_docs import ProjectPlatformDocsEndpoint
 from .endpoints.project_searches import ProjectSearchesEndpoint
 from .endpoints.project_search_details import ProjectSearchDetailsEndpoint
 from .endpoints.project_stats import ProjectStatsEndpoint
@@ -133,9 +134,12 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/$',
         ProjectDetailsEndpoint.as_view(),
         name='sentry-api-0-project-details'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/docs/$',
+        ProjectDocsEndpoint.as_view(),
+        name='sentry-api-0-project-docs'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/docs/(?P<platform>[\w-]+)/$',
-        ProjectPlatformDocsEndpoint.as_view(),
-        name='sentry-api-0-project-platform-docs'),
+        ProjectDocsPlatformEndpoint.as_view(),
+        name='sentry-api-0-project-docs-platform'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/$',
         ProjectEventsEndpoint.as_view(),
         name='sentry-api-0-project-events'),
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 833a6c2213..e5cb1d85c2 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -75,66 +75,36 @@ MEMBER_TYPES = (
 # a User instance.
 EMPTY_PASSWORD_VALUES = ('!', '', '$')
 
-PLATFORM_LIST = (
-    'csharp',
-    'connect',
-    'django',
-    'express',
-    'flask',
-    'go',
-    'ios',
-    'java',
-    'java_log4j',
-    'java_log4j2',
-    'java_logback',
-    'java_logging',
+PLATFORM_LIST = sorted([
+    'python',
+    'python-bottle',
+    'python-celery',
+    'python-django',
+    'python-flask',
+    'python-pylons',
+    'python-pyramid',
+    'python-tornado',
     'javascript',
-    'node.js',
+    'node',
+    'node-express',
+    'node-koa',
+    'node-connect',
     'php',
-    'pyramid',
-    'python',
-    'r',
+    'php-laravel',
+    'php-monolog',
+    'php-symfony2',
     'ruby',
-    'rails3',
-    'rails4',
-    'sidekiq',
-    'sinatra',
-    'tornado',
-)
-
-PLATFORM_ROOTS = {
-    'rails3': 'ruby',
-    'rails4': 'ruby',
-    'sinatra': 'ruby',
-    'sidekiq': 'ruby',
-    'django': 'python',
-    'flask': 'python',
-    'pyramid': 'python',
-    'tornado': 'python',
-    'express': 'node.js',
-    'connect': 'node.js',
-    'java_log4j': 'java',
-    'java_log4j2': 'java',
-    'java_logback': 'java',
-    'java_logging': 'java',
-}
-
-PLATFORM_TITLES = {
-    'rails3': 'Rails 3 (Ruby)',
-    'rails4': 'Rails 4 (Ruby)',
-    'php': 'PHP',
-    'ios': 'iOS',
-    'express': 'Express (Node.js)',
-    'connect': 'Connect (Node.js)',
-    'django': 'Django (Python)',
-    'flask': 'Flask (Python)',
-    'pyramid': 'Pyramid (Python)',
-    'csharp': 'C#',
-    'java_log4j': 'Log4j (Java)',
-    'java_log4j2': 'Log4j 2.x (Java)',
-    'java_logback': 'Logback (Java)',
-    'java_logging': 'java.util.logging',
-}
+    'ruby-rack',
+    'ruby-rails',
+    'objective-c',
+    'java',
+    'java-log4j',
+    'java-log4j2',
+    'java-logback',
+    'java-appengine',
+    'c-sharp',
+    'go',
+])
 
 # Normalize counts to the 15 minute marker. This value MUST be less than 60. A
 # value of 0 would store counts for every minute, and is the lowest level of
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index e843ac43f4..4e8dc50f8f 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -17,7 +17,7 @@ from django.db.models import F, Q
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.constants import PLATFORM_TITLES, PLATFORM_LIST
+from sentry.constants import PLATFORM_LIST
 from sentry.db.models import (
     BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey, Model,
     sane_repr
@@ -75,7 +75,7 @@ class Project(Model):
     are the top level entry point for all data.
     """
     PLATFORM_CHOICES = tuple(
-        (p, PLATFORM_TITLES.get(p, p.title()))
+        (p, p)
         for p in PLATFORM_LIST
     ) + (('other', 'Other'),)
 
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index d4861b3541..7180af62f3 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -89,6 +89,17 @@ class ProjectKey(Model):
             project=project_id,
         )
 
+    @classmethod
+    def get_default(cls, project):
+        try:
+            return cls.objects.filter(
+                project=project,
+                roles=cls.roles.store,
+                status=ProjectKeyStatus.ACTIVE
+            )[0]
+        except IndexError:
+            return None
+
     @property
     def is_active(self):
         return self.status == ProjectKeyStatus.ACTIVE
diff --git a/src/sentry/static/sentry/app/views/projectInstall/index.jsx b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
index 4e2a27d5d8..87cbf1dd66 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
@@ -1,6 +1,10 @@
 import React from "react";
 import {Link} from "react-router";
 
+import api from "../../api";
+import LoadingError from "../../components/loadingError";
+import LoadingIndicator from "../../components/loadingIndicator";
+
 var ProjectInstall = React.createClass({
   contextTypes: {
     router: React.PropTypes.func
@@ -14,7 +18,35 @@ var ProjectInstall = React.createClass({
     this.props.setProjectNavSection('settings');
   },
 
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  getInitialState() {
+    return {
+      loading: true,
+      platformList: null
+    };
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.context.router.getCurrentParams();
+    api.request(`/projects/${orgId}/${projectId}/docs/`, {
+      success: (data) => {
+        this.setState({
+          loading: false,
+          data: data
+        });
+      }
+    });
+  },
+
   render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
     let params = Object.assign({}, this.context.router.getCurrentParams());
 
     return (
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index 3bf16d7a3a..237cd156a5 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -3,6 +3,7 @@ import {Link} from "react-router";
 
 import api from "../../api";
 import LanguageNav from "./languageNav";
+import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
 import jQuery from "jquery";
 import RouteMixin from "../../mixins/routeMixin";
@@ -14,103 +15,10 @@ var ProjectInstallPlatform = React.createClass({
 
   mixins: [RouteMixin],
 
-  static: {
-    platforms: {
-      python: {
-        display: "Python"
-      },
-      "python-bottle": {
-        display: "Bottle"
-      },
-      "python-celery": {
-        display: "Celery",
-      },
-      "python-django": {
-        display: "Django",
-      },
-      "python-flask": {
-        display: "Flask"
-      },
-      "python-pylons": {
-        display: "Pylons"
-      },
-      "python-pyramid": {
-        display: "Pyramid"
-      },
-      "python-tornado": {
-        display: "Tornado"
-      },
-      javascript: {
-        display: "JavaScript"
-      },
-      node: {
-        display: "Node JS"
-      },
-      "node-express": {
-        display: "Express"
-      },
-      "node-koa": {
-        display: "Koa"
-      },
-      "node-connect": {
-        display: "Connect"
-      },
-      php: {
-        display: "PHP"
-      },
-      "php-laravel": {
-        display: "Laravel"
-      },
-      "php-monolog": {
-        display: "Monolog"
-      },
-      "php-symfony2": {
-        display: "Symfony2"
-      },
-      ruby: {
-        display: "Ruby"
-      },
-      "ruby-rack": {
-        display: "Rack"
-      },
-      "ruby-rails": {
-        display: "Rails"
-      },
-      "objective-c": {
-        display: "Objective-C"
-      },
-      java: {
-        display: "Java"
-      },
-      "java-log4j": {
-        display: "Log4j"
-      },
-      "java-log4j2": {
-        display: "Log4j 2"
-      },
-      "java-logback": {
-        display: "Logback"
-      },
-      "java-appengine": {
-        display: "App Engine"
-      },
-      "c-sharp": {
-        display: "C#"
-      },
-      go: {
-        display: "Go"
-      }
-    }
-  },
-
   getInitialState() {
     return {
-      isFramework: null,
-      link: null,
-      name: null,
-      sdk: null,
-      html: '',
       loading: true,
+      data: null
     };
   },
 
@@ -136,51 +44,59 @@ var ProjectInstallPlatform = React.createClass({
     let {orgId, projectId, platform} = this.context.router.getCurrentParams();
     api.request(`/projects/${orgId}/${projectId}/docs/${platform}/`, {
       success: (data) => {
-        this.setState(Object.assign({loading:false}, data));
+        this.setState({
+          loading: false,
+          error: false,
+          data: data
+        });
+      },
+      error: () => {
+        this.setSTate({
+          loading: false,
+          error: true
+        });
       }
     });
   },
 
   getPlatformLink(platform, display) {
     let params = this.context.router.getCurrentParams();
-    if (typeof display === "undefined") {
-      display = this.static.platforms[platform].display;
-    }
     return (
       <Link
         to="projectInstallPlatform"
         className="list-group-item"
         params={Object.assign({}, params, {platform: platform})}>
-          {display}
+          {display || platform}
       </Link>
     );
   },
 
   render() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
     let params = this.context.router.getCurrentParams();
     let {platform} = params;
+    let data = this.state.data;
 
     return (
       <div className="install row">
         <div className="install-content col-md-10">
           <div className="pull-right">
-            <a href={this.state.link} className="btn btn-default">Full Documentation</a>
+            <a href={data.link} className="btn btn-default">Full Documentation</a>
           </div>
 
-          <h1>Configure {this.static.platforms[platform].display}</h1>
-
-          {this.state.loading
-            ? <LoadingIndicator/>
-            : (
-              <div>
-                <p>
-                  This is a quick getting started guide. For in-depth instructions on integrating Sentry with {this.state.name}, view <a href={this.state.link}>our complete documentation</a>.
-                </p>
-                <div dangerouslySetInnerHTML={{__html: this.state.html}}/>
-                <Link to="stream" params={params} className="btn btn-primary btn-lg">Continue</Link>
-              </div>
-            )
-          }
+          <h1>Configure {data.name}</h1>
+
+          <div>
+            <p>
+              This is a quick getting started guide. For in-depth instructions on integrating Sentry with {data.name}, view <a href={data.link}>our complete documentation</a>.
+            </p>
+            <div dangerouslySetInnerHTML={{__html: data.html}}/>
+            <Link to="stream" params={params} className="btn btn-primary btn-lg">Continue</Link>
+          </div>
         </div>
         <div className="install-sidebar col-md-2">
           <LanguageNav name="Python" active={platform.indexOf('python') !== -1}>
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 1dabcabe97..767e9a1803 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -65,16 +65,16 @@ const ProjectSettings = React.createClass({
 
   render() {
     // TODO(dcramer): move sidebar into component
-    let urlPrefix = ConfigStore.get('urlPrefix');
-    let params = this.context.router.getCurrentParams();
-    let settingsUrlRoot = `${urlPrefix}/${params.orgId}/${params.projectId}/settings`;
-    let project = this.state.project;
-
     if (this.state.loading)
       return <LoadingIndicator />;
     else if (this.state.error)
       return <LoadingError onRetry={this.fetchData} />;
 
+    let urlPrefix = ConfigStore.get('urlPrefix');
+    let params = this.context.router.getCurrentParams();
+    let settingsUrlRoot = `${urlPrefix}/${params.orgId}/${params.projectId}/settings`;
+    let project = this.state.project;
+
     return (
       <div className="row">
         <div className="col-md-2">
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index a7593b981b..c14dd29f35 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import, print_function
 from celery.utils.log import get_task_logger
 from django.db import IntegrityError, transaction
 
-from sentry.constants import PLATFORM_LIST, PLATFORM_ROOTS
+from sentry.constants import PLATFORM_LIST
 from sentry.plugins import plugins
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
@@ -25,7 +25,7 @@ def _capture_stats(event, is_new):
     platform = group.platform
     if not platform:
         return
-    platform = PLATFORM_ROOTS.get(platform, platform)
+    platform = platform.split('-', 1)[0].split('_', 1)[0]
     if platform not in PLATFORM_LIST:
         return
 
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index fd346851e6..500f35464a 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import
 
 import os.path
 
-from sentry.constants import DATA_ROOT, PLATFORM_ROOTS, PLATFORM_TITLES
+from sentry.constants import DATA_ROOT
 from sentry.event_manager import EventManager
 from sentry.utils import json
 
@@ -33,8 +33,7 @@ def load_data(platform, default=None):
         return
 
     data['platform'] = platform
-    data['message'] = 'This is an example %s exception' % (
-        PLATFORM_TITLES.get(platform, platform.title()),)
+    data['message'] = 'This is an example %s exception' % (platform,)
     data['sentry.interfaces.User'] = {
         "username": "getsentry",
         "id": "1671",
@@ -75,7 +74,7 @@ def create_sample_event(project, platform=None, default=None, raw=True,
     if not platform and not default:
         return
 
-    platform = PLATFORM_ROOTS.get(platform, platform)
+    platform = platform.split('-', 1)[0].split('_', 1)[0]
 
     data = load_data(platform, default)
 
