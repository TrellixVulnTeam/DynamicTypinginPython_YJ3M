commit 1fcc598de36461c7d6223abcf39cdada8ba1acce
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Mar 20 11:33:31 2019 -0700

    feat(grouping): Add project option to force grouping and persist it (#12432)
    
    * feat(grouping): Add project option to force grouping and persit it
    
    * feat(grouping): Expose the grouping config forcing through the api
    
    * ref: Improved grouping config selectiong
    
    * feat(grouping): Add grouping config to the UI (feature flagged)
    
    * meta: Bump semaphore to 0.4.20
    
    * ref: Move grouping config freeze into normalize and change apis
    
    * ref: Cleaned up config code
    
    * ref: Add config ID to the grouping info output
    
    * fix(api): Fix bug where parser didn't allow dates ending in `Z`, and didn't correctly report the parse fail to the user (ISSUE-376)
    
    Our parser didn't allow for dates with `Z` at the end, so updated the regex to allow. Also fixed a
    bug where if a date started with a valid date but ended with invalid input then we'd create a search
    filter from the valid input, then shove the invalid input into `message` rather than raising a parse
    error.
    
    Fixes (ISSUE-376)
    
    * Add enhanced privacy to feedback (#12418)
    
    * feat(app-platform): Issue Link UI (#12345)
    
    This change takes care of dynamically rendering the Link and Create
    forms for Sentry Apps that support Issue Link components.
    
    * add project to payload (#12407)
    
    * feat: Added grouping selector on grouping info page
    
    * feat: Added tooltip
    
    * test: Improve test coverage for grouping
    
    * ref: Slightly improved native grouping
    
    * ref: More cleanup in new grouping algorithm
    
    * ref: rename a misnamed function

diff --git a/requirements-base.txt b/requirements-base.txt
index eee5bff8eb..f6de59c3ad 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.141.0
-semaphore>=0.4.19,<0.5.0
+semaphore>=0.4.20,<0.5.0
 sentry-sdk>=0.7.0
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/api/endpoints/event_grouping_info.py b/src/sentry/api/endpoints/event_grouping_info.py
index 7be5aa670d..ec2b0a0259 100644
--- a/src/sentry/api/endpoints/event_grouping_info.py
+++ b/src/sentry/api/endpoints/event_grouping_info.py
@@ -7,6 +7,7 @@ from django.http import HttpResponse
 from sentry.api.base import Endpoint
 from sentry.api.bases.group import GroupPermission
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.grouping.api import ConfigNotFoundException
 from sentry.models import Event
 from sentry.utils import json
 
@@ -31,9 +32,19 @@ class EventGroupingInfoEndpoint(Endpoint):
         Event.objects.bind_nodes([event], 'data')
 
         rv = {}
+        config_name = request.GET.get('config') or None
+
+        # We always fetch the stored hashes here.  The reason for this is
+        # that we want to show in the UI if the forced grouping algorithm
+        # produced hashes that would normally also appear in the event.
         hashes = event.get_hashes()
 
-        for (key, variant) in six.iteritems(event.get_grouping_variants()):
+        try:
+            variants = event.get_grouping_variants(config_name)
+        except ConfigNotFoundException:
+            raise ResourceDoesNotExist(detail='Unknown grouping config')
+
+        for (key, variant) in six.iteritems(variants):
             d = variant.as_dict()
             # Since the hashes are generated on the fly and might no
             # longer match the stored ones we indicate if the hash
diff --git a/src/sentry/api/endpoints/grouping_configs.py b/src/sentry/api/endpoints/grouping_configs.py
new file mode 100644
index 0000000000..b5c73f87ec
--- /dev/null
+++ b/src/sentry/api/endpoints/grouping_configs.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.base import Endpoint
+from sentry.api.serializers import serialize
+from sentry.grouping.strategies.configurations import CONFIGURATIONS
+
+
+class GroupingConfigsEndpoint(Endpoint):
+    permission_classes = ()
+
+    def get(self, request):
+        return Response(serialize([
+            config().as_dict() for config in sorted(CONFIGURATIONS.values(),
+                                                    key=lambda x: x.id)
+        ]))
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index dc869d1e06..5317d66253 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -96,6 +96,7 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
     storeCrashReports = serializers.BooleanField(required=False)
     relayPiiConfig = serializers.CharField(required=False)
     scrubIPAddresses = serializers.BooleanField(required=False)
+    groupingConfig = serializers.CharField(required=False)
     scrapeJavaScript = serializers.BooleanField(required=False)
     allowedDomains = ListField(child=OriginField(), required=False)
     resolveAge = serializers.IntegerField(required=False)
@@ -347,6 +348,9 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         if result.get('scrubIPAddresses') is not None:
             if project.update_option('sentry:scrub_ip_address', result['scrubIPAddresses']):
                 changed_proj_settings['sentry:scrub_ip_address'] = result['scrubIPAddresses']
+        if result.get('groupingConfig') is not None:
+            if project.update_option('sentry:grouping_config', result['groupingConfig']):
+                changed_proj_settings['sentry:grouping_config'] = result['groupingConfig']
         if result.get('securityToken') is not None:
             if project.update_option('sentry:token', result['securityToken']):
                 changed_proj_settings['sentry:token'] = result['securityToken']
@@ -444,6 +448,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     'sentry:scrub_ip_address',
                     bool(options['sentry:scrub_ip_address']),
                 )
+            if 'sentry:grouping_config' in options:
+                project.update_option(
+                    'sentry:grouping_config',
+                    options['sentry:grouping_config'],
+                )
             if 'mail:subject_prefix' in options:
                 project.update_option(
                     'mail:subject_prefix',
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 392e127c14..90f61cde78 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -264,6 +264,7 @@ class EventSerializer(Serializer):
             'dateReceived': received,
             'errors': errors,
             'fingerprints': obj.get_hashes(),
+            'groupingConfig': obj.get_grouping_config(),
             '_meta': {
                 'entries': attrs['_meta']['entries'],
                 'message': message_meta,
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 70b177853c..c6b36292d5 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -20,6 +20,7 @@ from sentry.models import (
     EnvironmentProject, Project, ProjectAvatar, ProjectBookmark, ProjectOption, ProjectPlatform,
     ProjectStatus, ProjectTeam, Release, ReleaseProjectEnvironment, Deploy, UserOption, DEFAULT_SUBJECT_TEMPLATE
 )
+from sentry.grouping.strategies.configurations import DEFAULT_CONFIG as DEFAULT_GROUPING_CONFIG
 from sentry.utils.data_filters import FilterTypes
 from sentry.utils.db import is_postgres
 
@@ -423,6 +424,7 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
             'sentry:token_header',
             'sentry:verify_ssl',
             'sentry:scrub_ip_address',
+            'sentry:grouping_config',
             'sentry:relay_pii_config',
             'feedback:branding',
             'digests:mail:minimum_delay',
@@ -540,6 +542,7 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                 'verifySSL': bool(attrs['options'].get('sentry:verify_ssl', False)),
                 'scrubIPAddresses': bool(attrs['options'].get('sentry:scrub_ip_address', False)),
                 'scrapeJavaScript': bool(attrs['options'].get('sentry:scrape_javascript', True)),
+                'groupingConfig': attrs['options'].get('sentry:grouping_config') or DEFAULT_GROUPING_CONFIG,
                 'organization':
                 attrs['org'],
                 'plugins':
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index eb4fa8d11c..31bfbd8aa4 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -212,6 +212,7 @@ from .endpoints.user_social_identity_details import UserSocialIdentityDetailsEnd
 from .endpoints.user_subscriptions import UserSubscriptionsEndpoint
 from .endpoints.event_file_committers import EventFileCommittersEndpoint
 from .endpoints.setup_wizard import SetupWizard
+from .endpoints.grouping_configs import GroupingConfigsEndpoint
 
 
 urlpatterns = patterns(
@@ -1262,6 +1263,12 @@ urlpatterns = patterns(
         name='sentry-api-0-sentry-app-authorizations'
     ),
 
+    # Grouping configs
+    url(
+        r'^grouping-configs/$', GroupingConfigsEndpoint.as_view(),
+        name='sentry-api-0-grouping-configs'
+    ),
+
     # Internal
     url(r'^internal/health/$', SystemHealthEndpoint.as_view(),
         name='sentry-api-0-system-health'),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 01d3b8989c..e009e431fb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -808,6 +808,8 @@ SENTRY_FEATURES = {
     'organizations:global-views': False,
     # Turns on grouping info.
     'organizations:grouping-info': False,
+    # Lets organizations manage grouping configs
+    'organizations:set-grouping-config': False,
     # Enable integration functionality to create and link groups to issues on
     # external services.
     'organizations:integrations-issue-basic': False,
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index ffd35352aa..dcc30f7d26 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -20,6 +20,7 @@ from sentry import buffer, eventtypes, eventstream, features, tagstore, tsdb, fi
 from sentry.constants import (
     LOG_LEVELS, LOG_LEVELS_MAP, VALID_PLATFORMS, MAX_TAG_VALUE_LENGTH,
 )
+from sentry.grouping.api import get_grouping_config_dict_for_project
 from sentry.coreapi import (
     APIError,
     APIForbidden,
@@ -338,6 +339,7 @@ class EventManager(object):
         data,
         version='5',
         project=None,
+        grouping_config=None,
         client_ip=None,
         user_agent=None,
         auth=None,
@@ -348,6 +350,9 @@ class EventManager(object):
         self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
         self._project = project
+        if grouping_config is None and project is not None:
+            grouping_config = get_grouping_config_dict_for_project(self._project)
+        self._grouping_config = grouping_config
         self._client_ip = client_ip
         self._user_agent = user_agent
         self._auth = auth
@@ -435,6 +440,7 @@ class EventManager(object):
             client_ip=self._client_ip,
             client=self._auth.client if self._auth else None,
             key_id=six.text_type(self._key.id) if self._key else None,
+            grouping_config=self._grouping_config,
             protocol_version=six.text_type(self.version) if self.version is not None else None,
             stacktrace_frames_hard_limit=settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT,
             max_stacktrace_frames=settings.SENTRY_MAX_STACKTRACE_FRAMES,
@@ -626,7 +632,6 @@ class EventManager(object):
 
         transaction_name = data.get('transaction')
         logger_name = data.get('logger')
-        fingerprint = data.get('fingerprint') or ['{{ default }}']
         release = data.get('release')
         dist = data.get('dist')
         environment = data.get('environment')
@@ -702,9 +707,12 @@ class EventManager(object):
             if iface.ephemeral:
                 data.pop(iface.path, None)
 
-        # Put the actual fingerprint back
-        data['fingerprint'] = fingerprint
-
+        # The active grouping config was put into the event in the
+        # normalize step before.  We now also make sure that the
+        # fingerprint was set to `'{{ default }}' just in case someone
+        # removed it from the payload.  The call to get_hashes will then
+        # look at `grouping_config` to pick the right paramters.
+        data['fingerprint'] = data.get('fingerprint') or ['{{ default }}']
         hashes = event.get_hashes()
         data['hashes'] = hashes
 
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index c9cc668b56..ba687016e9 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -84,6 +84,7 @@ default_manager.add('organizations:sso-saml2', OrganizationFeature)  # NOQA
 default_manager.add('organizations:suggested-commits', OrganizationFeature)  # NOQA
 default_manager.add('organizations:unreleased-changes', OrganizationFeature)  # NOQA
 default_manager.add('organizations:grouping-info', OrganizationFeature)  # NOQA
+default_manager.add('organizations:set-grouping-config', OrganizationFeature)  # NOQA
 
 # Project scoped features
 default_manager.add('projects:custom-inbound-filters', ProjectFeature)  # NOQA
diff --git a/src/sentry/grouping/api.py b/src/sentry/grouping/api.py
index c2327db369..95aa0e8f22 100644
--- a/src/sentry/grouping/api.py
+++ b/src/sentry/grouping/api.py
@@ -13,17 +13,61 @@ from sentry.grouping.utils import DEFAULT_FINGERPRINT_VALUES, hash_from_values
 HASH_RE = re.compile(r'^[0-9a-f]{32}$')
 
 
-def get_calculated_grouping_variants_for_event(event, config_name=None):
-    """Given an event this returns a dictionary of the matching grouping
-    variants.  Checksum and fingerprinting logic are not handled by this
-    function which is handled by `get_grouping_variants_for_event`.
+class ConfigNotFoundException(LookupError):
+    pass
+
+
+def get_grouping_config_dict_for_project(project, silent=True):
+    """Fetches all the information necessary for grouping from the project
+    settings.  The return value of this is persisted with the event on
+    ingestion so that the grouping algorithm can be re-run later.
+
+    This is called early on in normalization so that everything that is needed
+    to group the project is pulled into the event.
     """
+    config_id = project.get_option('sentry:grouping_config')
+    if config_id is None:
+        config_id = DEFAULT_CONFIG
+    else:
+        try:
+            CONFIGURATIONS[config_id]
+        except KeyError:
+            if not silent:
+                raise ConfigNotFoundException(config_id)
+            config_id = DEFAULT_CONFIG
+
+    # At a later point we might want to store additional information here
+    # such as frames that mark the end of a stacktrace and more.
+    return {
+        'id': config_id,
+    }
+
+
+def get_default_grouping_config_dict():
+    """Returns the default grouping config."""
+    return {
+        'id': DEFAULT_CONFIG,
+    }
+
+
+def load_grouping_config(config_dict=None):
+    """Loads the given grouping config."""
+    if config_dict is None:
+        config_dict = get_default_grouping_config_dict()
+    elif 'id' not in config_dict:
+        raise ValueError('Malformed configuration dictionary')
+    config_dict = dict(config_dict)
+    config_id = config_dict.pop('id')
+    if config_id not in CONFIGURATIONS:
+        raise ConfigNotFoundException(config_id)
+    return CONFIGURATIONS[config_id](**config_dict)
+
+
+def _get_calculated_grouping_variants_for_event(event, config):
     winning_strategy = None
     precedence_hint = None
     per_variant_components = {}
 
-    config = CONFIGURATIONS[config_name or DEFAULT_CONFIG]
-
     for strategy in config.iter_strategies():
         rv = strategy.get_grouping_component_variants(event, config=config)
         for (variant, component) in six.iteritems(rv):
@@ -56,7 +100,7 @@ def get_calculated_grouping_variants_for_event(event, config_name=None):
     return rv
 
 
-def get_grouping_variants_for_event(event, config_name=None):
+def get_grouping_variants_for_event(event, config=None):
     """Returns a dict of all grouping variants for this event."""
     # If a checksum is set the only variant that comes back from this
     # event is the checksum variant.
@@ -84,18 +128,19 @@ def get_grouping_variants_for_event(event, config_name=None):
 
     # At this point we need to calculate the default event values.  If the
     # fingerprint is salted we will wrap it.
-    components = get_calculated_grouping_variants_for_event(event, config_name)
+    config = load_grouping_config(config)
+    components = _get_calculated_grouping_variants_for_event(event, config)
     rv = {}
 
     # If the fingerprints are unsalted, we can return them right away.
     if defaults_referenced == 1 and len(fingerprint) == 1:
         for (key, component) in six.iteritems(components):
-            rv[key] = ComponentVariant(component)
+            rv[key] = ComponentVariant(component, config)
 
     # Otherwise we need to salt each of the components.
     else:
         for (key, component) in six.iteritems(components):
-            rv[key] = SaltedComponentVariant(fingerprint, component)
+            rv[key] = SaltedComponentVariant(fingerprint, component, config)
 
     # Ensure we have a fallback hash if nothing else works out
     if not any(x.contributes for x in six.itervalues(rv)):
diff --git a/src/sentry/grouping/strategies/base.py b/src/sentry/grouping/strategies/base.py
index c2a3359438..6ef157d8ff 100644
--- a/src/sentry/grouping/strategies/base.py
+++ b/src/sentry/grouping/strategies/base.py
@@ -68,8 +68,6 @@ class Strategy(object):
         # function always access its metadata and directly forward it to
         # subcomponents without having to filter out strategy.
         kwargs['strategy'] = self
-        if kwargs.get('config') is None:
-            kwargs['config'] = NOTHING_CONFIG
         return func(*args, **kwargs)
 
     def __call__(self, *args, **kwargs):
@@ -82,7 +80,7 @@ class Strategy(object):
         self.variant_processor_func = func
         return func
 
-    def get_grouping_component(self, event, variant, config=None):
+    def get_grouping_component(self, event, variant, config):
         """Given a specific variant this calculates the grouping component.
         """
         args = []
@@ -93,7 +91,7 @@ class Strategy(object):
             args.append(iface)
         return self(event=event, variant=variant, config=config, *args)
 
-    def get_grouping_component_variants(self, event, config=None):
+    def get_grouping_component_variants(self, event, config):
         """This returns a dictionary of all components by variant that this
         strategy can produce.
         """
@@ -159,28 +157,16 @@ class Strategy(object):
 
 
 class StrategyConfiguration(object):
+    id = None
+    config_class = None
+    strategies = {}
+    delegates = {}
+    changelog = None
 
-    def __init__(self, id, strategies, delegates=None, changelog=None):
-        self.id = id
-        self.strategies = {}
-        self.delegates = {}
-        self.changelog = inspect.cleandoc(changelog or '')
-
-        for strategy_id in strategies:
-            strategy = lookup_strategy(strategy_id)
-            if strategy.score is None:
-                raise RuntimeError('Unscored strategy %s added to %s' %
-                                   (strategy_id, id))
-            self.strategies[strategy_id] = strategy
-
-        for strategy_id in delegates or ():
-            strategy = lookup_strategy(strategy_id)
-            for interface in strategy.interfaces:
-                if interface in self.delegates:
-                    raise RuntimeError('duplicate interface match for '
-                                       'delegate %r (conflict on %r)' %
-                                       (self.id, interface))
-                self.delegates[interface] = strategy
+    def __init__(self, options=None):
+        if options is None:
+            options = {}
+        self.options = options
 
     def __repr__(self):
         return '<%s %r>' % (
@@ -206,6 +192,39 @@ class StrategyConfiguration(object):
             hint='grouping algorithm does not consider this value',
         )
 
-
-# A noop config that is passed by default
-NOTHING_CONFIG = StrategyConfiguration('nothing', {})
+    def as_dict(self):
+        return {
+            'id': self.id,
+            'options': self.options,
+            'strategies': sorted(self.strategies),
+            'delegates': sorted(x.id for x in self.delegates.values()),
+        }
+
+
+def create_strategy_configuration(id, strategies=None, delegates=None, changelog=None):
+    class NewStrategyConfiguration(StrategyConfiguration):
+        pass
+    NewStrategyConfiguration.id = id
+    NewStrategyConfiguration.config_class = id.split(':', 1)[0]
+    NewStrategyConfiguration.strategies = {}
+    NewStrategyConfiguration.delegates = {}
+
+    for strategy_id in strategies or {}:
+        strategy = lookup_strategy(strategy_id)
+        if strategy.score is None:
+            raise RuntimeError('Unscored strategy %s added to %s' %
+                               (strategy_id, id))
+        NewStrategyConfiguration.strategies[strategy_id] = strategy
+
+    for strategy_id in delegates or ():
+        strategy = lookup_strategy(strategy_id)
+        for interface in strategy.interfaces:
+            if interface in NewStrategyConfiguration.delegates:
+                raise RuntimeError('duplicate interface match for '
+                                   'delegate %r (conflict on %r)' %
+                                   (id, interface))
+            NewStrategyConfiguration.delegates[interface] = strategy
+
+    NewStrategyConfiguration.changelog = inspect.cleandoc(changelog or '')
+    NewStrategyConfiguration.__name__ = 'StrategyConfiguration(%s)' % id
+    return NewStrategyConfiguration
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 6195b06c3c..6b864bf207 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.grouping.strategies.base import StrategyConfiguration
+from sentry.grouping.strategies.base import create_strategy_configuration
 
 
 # The latest version of the default config that should be used
@@ -14,10 +14,9 @@ CONFIGURATIONS = {}
 
 
 def register_strategy_config(id, **kwargs):
-    rv = StrategyConfiguration(id, **kwargs)
-    cls = id.split(':', 1)[0]
-    if cls not in CLASSES:
-        CLASSES.append(cls)
+    rv = create_strategy_configuration(id, **kwargs)
+    if rv.config_class not in CLASSES:
+        CLASSES.append(rv.config_class)
     CONFIGURATIONS[rv.id] = rv
     return rv
 
diff --git a/src/sentry/grouping/strategies/exception.py b/src/sentry/grouping/strategies/exception.py
index da8f455f50..7616c94cbe 100644
--- a/src/sentry/grouping/strategies/exception.py
+++ b/src/sentry/grouping/strategies/exception.py
@@ -10,17 +10,17 @@ from sentry.grouping.strategies.base import strategy
     variants=['!system', 'app'],
 )
 def single_exception_v1(exception, config, **meta):
-    type_component = GroupingComponent(
-        id='type',
-        values=[exception.type] if exception.type else [],
-    )
-
     if exception.stacktrace is not None:
         stacktrace_component = config.get_grouping_component(
             exception.stacktrace, **meta)
     else:
         stacktrace_component = GroupingComponent(id='stacktrace')
 
+    type_component = GroupingComponent(
+        id='type',
+        values=[exception.type] if exception.type else [],
+    )
+
     return GroupingComponent(
         id='exception',
         values=[
@@ -43,10 +43,9 @@ def chained_exception_v1(chained_exception, config, **meta):
     if len(exceptions) == 1:
         return config.get_grouping_component(exceptions[0], **meta)
 
-    values = []
-    for exception in exceptions:
-        values.append(config.get_grouping_component(exception, **meta))
-
+    # Case 2: produce a component for each chained exception
+    values = [config.get_grouping_component(exception, **meta)
+              for exception in exceptions]
     return GroupingComponent(
         id='chained-exception',
         values=values,
diff --git a/src/sentry/grouping/strategies/stacktrace.py b/src/sentry/grouping/strategies/stacktrace.py
index ec04ec96e1..a9ae37e272 100644
--- a/src/sentry/grouping/strategies/stacktrace.py
+++ b/src/sentry/grouping/strategies/stacktrace.py
@@ -53,37 +53,11 @@ RECURSION_COMPARISON_FIELDS = [
 ]
 
 
-def is_url_v1(filename):
-    return filename.startswith(('file:', 'http:', 'https:', 'applewebdata:'))
-
-
-def is_url_frame_v1(frame):
-    if not frame.abs_path:
+def abs_path_is_url_v1(abs_path):
+    if not abs_path:
         return False
-    # URLs can be generated such that they are:
-    #   blob:http://example.com/7f7aaadf-a006-4217-9ed5-5fbf8585c6c0
-    # https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
-    if frame.abs_path.startswith('blob:'):
-        return True
-    return is_url_v1(frame.abs_path)
-
-
-def is_unhashable_module_v1(frame, platform):
-    # Fix for the case where module is a partial copy of the URL
-    # and should not be hashed
-    if (platform == 'javascript' and '/' in frame.module
-            and frame.abs_path and frame.abs_path.endswith(frame.module)):
-        return True
-    elif platform == 'java' and '$$Lambda$' in frame.module:
-        return True
-    return False
-
-
-def is_unhashable_function_v1(frame):
-    # TODO(dcramer): lambda$ is Java specific
-    # TODO(dcramer): [Anonymous is PHP specific (used for things like SQL
-    # queries and JSON data)
-    return frame.function.startswith(('lambda$', '[Anonymous'))
+    return abs_path.startswith((
+        'blob:', 'file:', 'http:', 'https:', 'applewebdata:'))
 
 
 def is_recursion_v1(frame1, frame2):
@@ -95,41 +69,88 @@ def is_recursion_v1(frame1, frame2):
     return True
 
 
-def remove_module_outliers_v1(module, platform):
-    """Remove things that augment the module but really should not."""
-    if platform == 'java':
-        if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
-            return 'sun.reflect.GeneratedMethodAccessor', 'removed reflection marker'
-        old_module = module
-        module = _java_reflect_enhancer_re.sub(r'\1<auto>', module)
-        module = _java_cglib_enhancer_re.sub(r'\1<auto>', module)
-        module = _java_assist_enhancer_re.sub(r'\1<auto>', module)
-        module = _clojure_enhancer_re.sub(r'\1<auto>', module)
-        if old_module != module:
-            return module, 'removed codegen marker'
-    return module, None
-
-
-def remove_filename_outliers_v1(filename, platform):
+def get_filename_component_v1(abs_path, filename, platform):
+    """Attempt to normalize filenames by detecing special filenames and by
+    using the basename only.
     """
-    Attempt to normalize filenames by removing common platform outliers.
+    if filename is None:
+        return GroupingComponent(id='filename')
 
-    - Sometimes filename paths contain build numbers
-    """
     # Only use the platform independent basename for grouping and
     # lowercase it
     filename = _basename_re.split(filename)[-1].lower()
+    filename_component = GroupingComponent(
+        id='filename',
+        values=[filename],
+    )
 
-    removed = []
-    if platform == 'java':
+    if abs_path_is_url_v1(abs_path):
+        filename_component.update(
+            contributes=False,
+            hint='ignored because frame points to a URL',
+        )
+    elif filename == '<anonymous>':
+        filename_component.update(
+            contributes=False,
+            hint='anonymous filename discarded'
+        )
+    elif filename == '[native code]':
+        filename_component.update(
+            contributes=False,
+            hint='native code indicated by filename'
+        )
+    elif platform == 'java':
         new_filename = _java_assist_enhancer_re.sub(r'\1<auto>', filename)
         if new_filename != filename:
-            removed.append('javassist parts')
-            filename = new_filename
+            filename_component.update(
+                values=[new_filename],
+                hint='cleaned javassist parts'
+            )
 
-    if removed:
-        return filename, 'removed %s' % ' and '.join(removed)
-    return filename, None
+    return filename_component
+
+
+def get_module_component_v1(abs_path, module, platform):
+    """Given an absolute path, module and platform returns the module component
+    with some necessary cleaning performed.
+    """
+    if module is None:
+        return GroupingComponent(id='module')
+
+    module_component = GroupingComponent(
+        id='module',
+        values=[module]
+    )
+
+    if platform == 'javascript' and '/' in module and abs_path and abs_path.endswith(module):
+        module_component.update(
+            contributes=False,
+            hint='ignored bad javascript module',
+        )
+    elif platform == 'java':
+        if '$$Lambda$' in module:
+            module_component.update(
+                contributes=False,
+                hint='ignored java lambda',
+            )
+        if module[:35] == 'sun.reflect.GeneratedMethodAccessor':
+            module_component.update(
+                values=['sun.reflect.GeneratedMethodAccessor'],
+                hint='removed reflection marker',
+            )
+        else:
+            old_module = module
+            module = _java_reflect_enhancer_re.sub(r'\1<auto>', module)
+            module = _java_cglib_enhancer_re.sub(r'\1<auto>', module)
+            module = _java_assist_enhancer_re.sub(r'\1<auto>', module)
+            module = _clojure_enhancer_re.sub(r'\1<auto>', module)
+            if module != old_module:
+                module_component.update(
+                    values=[module],
+                    hint='removed codegen marker'
+                )
+
+    return module_component
 
 
 def isolate_native_function_v1(function):
@@ -181,7 +202,7 @@ def isolate_native_function_v1(function):
     return original_function
 
 
-def remove_function_outliers_v1(function, platform):
+def get_function_component_v1(function, platform):
     """
     Attempt to normalize functions by removing common platform outliers.
 
@@ -189,19 +210,51 @@ def remove_function_outliers_v1(function, platform):
       such as in erb and the active_support library.
     - Block functions have metadata that we don't care about.
     """
+    if not function:
+        return GroupingComponent(id='function')
+
+    function_component = GroupingComponent(
+        id='function',
+        values=[function],
+    )
+
     if platform == 'ruby':
         if function.startswith('block '):
-            return 'block', 'ruby block'
-        new_function = _ruby_anon_func.sub('_<anon>', function)
-        if new_function != function:
-            return new_function, 'trimmed integer suffix'
+            function_component.update(
+                values=['block'],
+                hint='ruby block'
+            )
+        else:
+            new_function = _ruby_anon_func.sub('_<anon>', function)
+            if new_function != function:
+                function_component.update(
+                    values=[new_function],
+                    hint='removed integer suffix'
+                )
+
+    elif platform == 'php':
+        if function.startswith('[Anonymous'):
+            function_component.update(
+                contributes=False,
+                hint='ignored anonymous function'
+            )
 
-    if platform in ('objc', 'cocoa', 'native'):
+    elif platform == 'java':
+        if function.startswith('lambda$'):
+            function_component.update(
+                contributes=False,
+                hint='ignored lambda function'
+            )
+
+    elif platform in ('objc', 'cocoa', 'native'):
         new_function = isolate_native_function_v1(function)
         if new_function != function:
-            return new_function, 'isolated function'
+            function_component.update(
+                values=[new_function],
+                hint='isolated function'
+            )
 
-    return function, None
+    return function_component
 
 
 @strategy(
@@ -212,81 +265,24 @@ def remove_function_outliers_v1(function, platform):
 def frame_v1(frame, event, **meta):
     platform = frame.platform or event.platform
 
-    # In certain situations we want to disregard the entire frame.
-    contributes = None
-    hint = None
-
     # Safari throws [native code] frames in for calls like ``forEach``
     # whereas Chrome ignores these. Let's remove it from the hashing algo
     # so that they're more likely to group together
-    filename_component = GroupingComponent(id='filename')
-    if frame.filename == '<anonymous>':
+    filename_component = get_filename_component_v1(
+        frame.abs_path, frame.filename, platform)
+
+    # if we have a module we use that for grouping.  This will always
+    # take precedence over the filename if it contributes
+    module_component = get_module_component_v1(
+        frame.abs_path, frame.module, platform)
+    if module_component.contributes and filename_component.contributes:
         filename_component.update(
             contributes=False,
-            values=[frame.filename],
-            hint='anonymous filename discarded'
+            hint='module takes precedence'
         )
-    elif frame.filename == '[native code]':
-        contributes = False
-        hint = 'native code indicated by filename'
-    elif frame.filename:
-        hashable_filename, hashable_filename_hint = \
-            remove_filename_outliers_v1(frame.filename, platform)
-        if is_url_frame_v1(frame):
-            filename_component.update(
-                contributes=False,
-                values=[hashable_filename],
-                hint='ignored because frame points to a URL',
-            )
-        else:
-            filename_component.update(
-                values=[hashable_filename],
-                hint=hashable_filename_hint
-            )
-
-    # if we have a module we use that for grouping.  This will always
-    # take precedence over the filename, even if the module is
-    # considered unhashable.
-    module_component = GroupingComponent(id='module')
-    if frame.module:
-        if is_unhashable_module_v1(frame, platform):
-            module_component.update(
-                values=[GroupingComponent(
-                    id='salt',
-                    values=['<module>'],
-                    hint='normalized generated module name'
-                )],
-                hint='ignored module',
-            )
-        else:
-            module_name, module_hint = \
-                remove_module_outliers_v1(frame.module, platform)
-            module_component.update(
-                values=[module_name],
-                hint=module_hint
-            )
-        if filename_component.contributes:
-            filename_component.update(
-                contributes=False,
-                hint='module takes precedence'
-            )
-
-    function_component = GroupingComponent(id='function')
 
-    if frame.function:
-        function, function_hint = remove_function_outliers_v1(
-            frame.function, platform)
-        if is_unhashable_function_v1(frame):
-            function_component.update(
-                values=[function],
-                contributes=False,
-                hint='normalized lambda function name ignored'
-            )
-        else:
-            function_component.update(
-                values=[function],
-                hint=function_hint
-            )
+    function_component = get_function_component_v1(
+        frame.function, platform)
 
     return GroupingComponent(
         id='frame',
@@ -295,8 +291,6 @@ def frame_v1(frame, event, **meta):
             filename_component,
             function_component,
         ],
-        contributes=contributes,
-        hint=hint,
     )
 
 
diff --git a/src/sentry/grouping/strategies/template.py b/src/sentry/grouping/strategies/template.py
index 539ab74006..d7b5fddb93 100644
--- a/src/sentry/grouping/strategies/template.py
+++ b/src/sentry/grouping/strategies/template.py
@@ -10,7 +10,7 @@ from sentry.grouping.strategies.base import strategy
     variants=['default'],
     score=1100,
 )
-def message_v1(template, **meta):
+def template_v1(template, **meta):
     filename_component = GroupingComponent(id='filename')
     if template.filename is not None:
         filename_component.update(values=[template.filename])
diff --git a/src/sentry/grouping/variants.py b/src/sentry/grouping/variants.py
index f371c0e2c8..e0abe89f44 100644
--- a/src/sentry/grouping/variants.py
+++ b/src/sentry/grouping/variants.py
@@ -69,8 +69,9 @@ class ComponentVariant(BaseVariant):
     """
     type = 'component'
 
-    def __init__(self, component):
+    def __init__(self, component, config):
         self.component = component
+        self.config = config
 
     @property
     def description(self):
@@ -86,6 +87,7 @@ class ComponentVariant(BaseVariant):
     def _get_metadata_as_dict(self):
         return {
             'component': self.component.as_dict(),
+            'config': self.config.as_dict(),
         }
 
 
@@ -109,22 +111,18 @@ class CustomFingerprintVariant(BaseVariant):
         }
 
 
-class SaltedComponentVariant(BaseVariant):
+class SaltedComponentVariant(ComponentVariant):
     """A salted version of a component."""
     type = 'salted-component'
 
-    def __init__(self, values, component):
+    def __init__(self, values, component, config):
+        ComponentVariant.__init__(self, component, config)
         self.values = values
-        self.component = component
 
     @property
     def description(self):
         return 'modified ' + self.component.description
 
-    @property
-    def contributes(self):
-        return self.component.contributes
-
     def get_hash(self):
         if not self.component.contributes:
             return None
@@ -137,7 +135,6 @@ class SaltedComponentVariant(BaseVariant):
         return hash_from_values(final_values)
 
     def _get_metadata_as_dict(self):
-        return {
-            'values': self.values,
-            'component': self.component.as_dict(),
-        }
+        rv = ComponentVariant._get_metadata_as_dict(self)
+        rv['values'] = self.values
+        return rv
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 1209914208..85146144fb 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -148,18 +148,28 @@ class EventCommon(object):
         # further.
         return self.data.get('metadata') or {}
 
-    def get_hashes(self):
+    def get_grouping_config(self):
+        """Returns the event grouping config."""
+        from sentry.grouping.api import get_grouping_config_dict_for_project
+        return self.data.get('grouping_config') \
+            or get_grouping_config_dict_for_project(self.project)
+
+    def get_hashes(self, force_config=None):
         """
         Returns the calculated hashes for the event.  This uses the stored
         information if available.  Grouping hashes will take into account
         fingerprinting and checksums.
         """
         # If we have hashes stored in the data we use them, otherwise we
-        # fall back to generating new ones from the data
-        hashes = self.data.get('hashes')
-        if hashes is not None:
-            return hashes
-        return filter(None, [x.get_hash() for x in self.get_grouping_variants().values()])
+        # fall back to generating new ones from the data.  We can only use
+        # this if we do not force a dfferent config.
+        if force_config is None:
+            hashes = self.data.get('hashes')
+            if hashes is not None:
+                return hashes
+
+        return filter(None, [
+            x.get_hash() for x in self.get_grouping_variants(force_config).values()])
 
     def get_grouping_variants(self, force_config=None):
         """
@@ -167,7 +177,25 @@ class EventCommon(object):
         grouping components for each variant in a dictionary.
         """
         from sentry.grouping.api import get_grouping_variants_for_event
-        return get_grouping_variants_for_event(self, config_name=force_config)
+
+        # Forcing configs has two separate modes.  One is where just the
+        # config ID is given in which case it's merged with the stored or
+        # default config dictionary
+        if force_config is not None:
+            if isinstance(force_config, six.string_types):
+                stored_config = self.get_grouping_config()
+                config = dict(stored_config)
+                config['id'] = force_config
+            else:
+                config = force_config
+
+        # Otherwise we just use the same grouping config as stored.  if
+        # this is None the `get_grouping_variants_for_event` will fill in
+        # the default.
+        else:
+            config = self.data.get('grouping_config')
+
+        return get_grouping_variants_for_event(self, config)
 
     def get_primary_hash(self):
         # TODO: This *might* need to be protected from an IndexError?
diff --git a/src/sentry/runner/commands/devservices.py b/src/sentry/runner/commands/devservices.py
index 6a2c835a69..fc9e1fcbe4 100644
--- a/src/sentry/runner/commands/devservices.py
+++ b/src/sentry/runner/commands/devservices.py
@@ -84,10 +84,16 @@ def up(project, exclude):
     if 'kafka' in settings.SENTRY_EVENTSTREAM:
         pass
     elif 'snuba' in settings.SENTRY_EVENTSTREAM:
-        click.secho('! Skipping kafka and zookeeper since your eventstream backend does not require it', err=True, fg='cyan')
+        click.secho(
+            '! Skipping kafka and zookeeper since your eventstream backend does not require it',
+            err=True,
+            fg='cyan')
         exclude |= {'kafka', 'zookeeper'}
     else:
-        click.secho('! Skipping kafka, zookeeper, snuba, and clickhouse since your eventstream backend does not require it', err=True, fg='cyan')
+        click.secho(
+            '! Skipping kafka, zookeeper, snuba, and clickhouse since your eventstream backend does not require it',
+            err=True,
+            fg='cyan')
         exclude |= {'kafka', 'zookeeper', 'snuba', 'clickhouse'}
 
     get_or_create(client, 'network', project)
@@ -160,7 +166,9 @@ def down(project, service):
 def rm(project, service):
     "Delete all services and associated data."
 
-    click.confirm('Are you sure you want to continue?\nThis will delete all of your Sentry related data!', abort=True)
+    click.confirm(
+        'Are you sure you want to continue?\nThis will delete all of your Sentry related data!',
+        abort=True)
 
     import docker
     client = get_docker_client()
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
index 32355427ea..f0b87a15f1 100644
--- a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
@@ -3,6 +3,9 @@ import PropTypes from 'prop-types';
 import styled from 'react-emotion';
 import {isObject} from 'lodash';
 import AsyncComponent from 'app/components/asyncComponent';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import Tooltip from 'app/components/tooltip';
 
 import EventDataSection from 'app/components/events/eventDataSection';
 import SentryTypes from 'app/sentryTypes';
@@ -22,7 +25,6 @@ const GroupVariantList = styled('ul')`
 const GroupVariantListItem = styled(({contributes, ...props}) => <li {...props} />)`
   padding: 15px 0 20px 0;
   margin-top: 15px;
-  border-top: 1px solid ${p => p.theme.borderLighter};
   ${p => (p.contributes ? '' : 'color:' + p.theme.gray6)};
 `;
 
@@ -34,7 +36,6 @@ const GroupVariantTitle = styled('h5')`
 `;
 
 const GroupingComponentBox = styled('div')`
-  border-top: 1px solid ${p => p.theme.borderLighter};
   padding: 10px 0 0 0;
   margin-top: -10px;
 `;
@@ -138,22 +139,27 @@ class GroupVariant extends React.Component {
 
   renderVariantDetails() {
     const {variant} = this.props;
-    const data = [['Algorithm', variant.type]];
+    const data = [['Type', variant.type]];
     let component = null;
 
     if (variant.hash !== null) {
       data.push(['Hash', variant.hash]);
     }
     if (variant.hashMismatch) {
-      data.push(['Hash mismatch', 'hashing algorithm changed after event generation']);
+      data.push([
+        'Hash mismatch',
+        'hashing algorithm produced a hash that does not match the event',
+      ]);
     }
 
     switch (variant.type) {
       case 'component':
         component = variant.component;
+        data.push(['Grouping Config', variant.config.id]);
         break;
       case 'custom-fingerprint':
         data.push(['Fingerprint values', variant.values]);
+        data.push(['Grouping Config', variant.config.id]);
         break;
       case 'salted-component':
         data.push(['Fingerprint values', variant.values]);
@@ -196,6 +202,48 @@ class GroupVariant extends React.Component {
   }
 }
 
+class GroupingConfigSelect extends AsyncComponent {
+  static propTypes = {
+    eventConfigId: PropTypes.string,
+    configId: PropTypes.string,
+  };
+
+  getEndpoints() {
+    return [['data', '/grouping-configs/']];
+  }
+
+  renderBody() {
+    const {configId, eventConfigId, ...props} = this.props;
+    props.value = configId;
+
+    function renderIdLabel(id) {
+      return <code>{eventConfigId === id ? <strong>{id}</strong> : id}</code>;
+    }
+
+    return (
+      <DropdownAutoComplete
+        {...props}
+        alignMenu="left"
+        selectedItem={configId}
+        items={this.state.data.map(item => {
+          return {
+            value: item.id,
+            label: renderIdLabel(item.id),
+          };
+        })}
+      >
+        {({isOpen}) => (
+          <Tooltip title="Click here to experiment with other grouping configs">
+            <DropdownButton isOpen={isOpen} size="small" style={{fontWeight: 'inherit'}}>
+              {renderIdLabel(configId)}
+            </DropdownButton>
+          </Tooltip>
+        )}
+      </DropdownAutoComplete>
+    );
+  }
+}
+
 class EventGroupingInfo extends AsyncComponent {
   static propTypes = {
     api: PropTypes.object,
@@ -204,24 +252,34 @@ class EventGroupingInfo extends AsyncComponent {
   };
 
   getEndpoints() {
-    return [['groupInfo', `/events/${this.props.event.id}/grouping-info/`]];
+    let path = `/events/${this.props.event.id}/grouping-info/`;
+    if (this.state && this.state.configOverride) {
+      path = `${path}?config=${this.state.configOverride}`;
+    }
+    return [['groupInfo', path]];
   }
 
   getInitialState() {
     return {
       isOpen: false,
+      configOverride: null,
       ...super.getInitialState(),
     };
   }
 
   toggle = () => {
-    this.setState({isOpen: !this.state.isOpen});
+    if (this.state.isOpen) {
+      this.setState({
+        isOpen: false,
+        configOverride: null,
+      });
+    } else {
+      this.setState({
+        isOpen: true,
+      });
+    }
   };
 
-  getEndpoint() {
-    return `/events/${this.props.event.id}/grouping-info/`;
-  }
-
   renderGroupInfoSummary() {
     if (this.state.groupInfo === null) {
       return null;
@@ -253,8 +311,29 @@ class EventGroupingInfo extends AsyncComponent {
       return a.description.toLowerCase().localeCompare(b.description.toLowerCase());
     });
 
+    const eventConfigId = this.props.event.groupingConfig.id;
+    let configId = this.state.configOverride || null;
+    if (configId === null) {
+      configId = eventConfigId;
+    }
+
     return (
       <GroupVariantList>
+        <div style={{float: 'right'}}>
+          <GroupingConfigSelect
+            name="groupingConfig"
+            eventConfigId={eventConfigId}
+            configId={configId}
+            onSelect={selection => {
+              this.setState(
+                {
+                  configOverride: selection.value,
+                },
+                () => this.reloadData()
+              );
+            }}
+          />
+        </div>
         {variants.map(variant => <GroupVariant variant={variant} key={variant.key} />)}
       </GroupVariantList>
     );
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index c8fdfe5451..8516d7ac97 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -110,6 +110,16 @@ export const fields = {
     saveMessageAlertType: 'warning',
   },
 
+  groupingConfig: {
+    name: 'groupingConfig',
+    type: 'array',
+    label: t('Grouping Config'),
+    choices: ({groupingConfigs}) => {
+      return groupingConfigs.map(({id}) => [id.toString(), <code key={id}>{id}</code>]);
+    },
+    help: t('Sets the grouping algorithm to be used for new events.'),
+  },
+
   dataScrubber: {
     name: 'dataScrubber',
     type: 'boolean',
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index 990aaaf35f..4589c6dc45 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -49,7 +49,10 @@ class ProjectGeneralSettings extends AsyncView {
 
   getEndpoints() {
     const {orgId, projectId} = this.props.params;
-    return [['data', `/projects/${orgId}/${projectId}/`]];
+    return [
+      ['data', `/projects/${orgId}/${projectId}/`],
+      ['groupingConfigs', `/grouping-configs/`],
+    ];
   }
 
   handleTransferFieldChange = (id, value) => {
@@ -225,7 +228,7 @@ class ProjectGeneralSettings extends AsyncView {
     const endpoint = `/projects/${orgId}/${projectId}/`;
     const access = new Set(organization.access);
     const jsonFormProps = {
-      additionalFieldProps: {organization},
+      additionalFieldProps: {organization, groupingConfigs: this.state.groupingConfigs},
       features: new Set(organization.features),
       access,
       disabled: !access.has('project:write'),
@@ -273,6 +276,23 @@ class ProjectGeneralSettings extends AsyncView {
             fields={[fields.resolveAge]}
           />
 
+          {jsonFormProps.features.has('set-grouping-config') && (
+            <JsonForm
+              {...jsonFormProps}
+              title={t('Grouping Settings')}
+              fields={[fields.groupingConfig]}
+              renderHeader={() => (
+                <PanelAlert type="warning">
+                  <TextBlock noMargin>
+                    {t(
+                      'This is an experimental feature. Changing the value here will only apply to future events and is likely to cause events to create different groups than before.'
+                    )}
+                  </TextBlock>
+                </PanelAlert>
+              )}
+            />
+          )}
+
           <JsonForm
             {...jsonFormProps}
             title={t('Data Privacy')}
diff --git a/tests/js/fixtures/groupingConfigs.js b/tests/js/fixtures/groupingConfigs.js
new file mode 100644
index 0000000000..2db853b9a6
--- /dev/null
+++ b/tests/js/fixtures/groupingConfigs.js
@@ -0,0 +1,7 @@
+export function GroupingConfigs(params) {
+  return [
+    {
+      id: 'default:XXXX',
+    },
+  ];
+}
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index 91a82a5b07..dd274d3736 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -13,6 +13,7 @@ jest.mock('jquery');
 describe('projectGeneralSettings', function() {
   const org = TestStubs.Organization();
   const project = TestStubs.ProjectDetails();
+  const groupingConfigs = TestStubs.GroupingConfigs();
   let routerContext;
   let putMock;
 
@@ -30,6 +31,11 @@ describe('projectGeneralSettings', function() {
     ]);
 
     MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/grouping-configs/`,
+      method: 'GET',
+      body: groupingConfigs,
+    });
     MockApiClient.addMockResponse({
       url: `/projects/${org.slug}/${project.slug}/`,
       method: 'GET',
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index aa6f20abc4..32192adfa8 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -227,6 +227,7 @@ class ProjectUpdateTest(APITestCase):
             'sentry:relay_pii_config': '{"applications": {"freeform": []}}',
             'sentry:csp_ignored_sources_defaults': False,
             'sentry:csp_ignored_sources': 'foo\nbar',
+            'sentry:grouping_config': 'some-config',
             'filters:blacklisted_ips': '127.0.0.1\n198.51.100.0',
             'filters:releases': '1.*\n2.1.*',
             'filters:error_messages': 'TypeError*\n*: integer division by modulo or zero',
@@ -268,6 +269,9 @@ class ProjectUpdateTest(APITestCase):
         assert project.get_option(
             'sentry:relay_pii_config',
             '') == options['sentry:relay_pii_config']
+        assert project.get_option(
+            'sentry:grouping_config',
+            '') == options['sentry:grouping_config']
         assert AuditLogEntry.objects.filter(
             organization=project.organization,
             event=AuditLogEntryEvent.PROJECT_EDIT,
diff --git a/tests/sentry/grouping/inputs/frame-ignores-java8-lambda-function.json b/tests/sentry/grouping/inputs/frame-ignores-java8-lambda-function.json
index 1b5a190c17..a296bbfc9e 100644
--- a/tests/sentry/grouping/inputs/frame-ignores-java8-lambda-function.json
+++ b/tests/sentry/grouping/inputs/frame-ignores-java8-lambda-function.json
@@ -1,4 +1,5 @@
 {
+  "platform": "java",
   "stacktrace": {
     "frames": [
       {
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap
index bd815060fa..518d7b1e00 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_function.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-15T18:36:59.667498Z'
+created: '2019-03-19T23:02:04.755730Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -11,7 +11,7 @@ app:
         frame (non app frame)
           module*
             u'foo.bar.Baz'
-          function (normalized lambda function name ignored)
+          function (ignored lambda function)
             u'lambda$work$1'
 --------------------------------------------------------------------------
 system:
@@ -22,5 +22,5 @@ system:
         frame*
           module*
             u'foo.bar.Baz'
-          function (normalized lambda function name ignored)
+          function (ignored lambda function)
             u'lambda$work$1'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap
index e60c2f9db7..f9eeb8853d 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_java8_lambda_module.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-15T11:58:32.934180Z'
+created: '2019-03-19T22:59:40.767479Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -9,20 +9,18 @@ app:
     app (stacktrace of system takes precedence)
       stacktrace
         frame (non app frame)
-          module* (ignored module)
-            salt* (normalized generated module name)
-              '<module>'
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
           function*
             u'call'
 --------------------------------------------------------------------------
 system:
-  hash: '5fd1358271b3a3dba3287e135029688d'
+  hash: '53b9e9679a8ea25880376080b76f98ad'
   component:
     system*
       stacktrace*
         frame*
-          module* (ignored module)
-            salt* (normalized generated module name)
-              '<module>'
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
           function*
             u'call'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap
index 6ff8995386..1f03ba5e5e 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_javassist_3.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-15T11:58:32.958103Z'
+created: '2019-03-19T22:59:40.810787Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -9,7 +9,7 @@ app:
     app (stacktrace of system takes precedence)
       stacktrace
         frame (non app frame)
-          filename* (removed javassist parts)
+          filename* (cleaned javassist parts)
             u'entriesresource_$$_javassist<auto>.java'
           function*
             u'fn'
@@ -20,7 +20,7 @@ system:
     system*
       stacktrace*
         frame*
-          filename* (removed javassist parts)
+          filename* (cleaned javassist parts)
             u'entriesresource_$$_javassist<auto>.java'
           function*
             u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap
index 0dfcd7a61b..0f664ef43a 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_module_if_page_url_2.pysnap
@@ -1,28 +1,29 @@
 ---
-created: '2019-03-16T15:38:20.747855Z'
+created: '2019-03-19T22:59:40.838060Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app (stacktrace of system takes precedence)
+    app
       stacktrace
         frame (non app frame)
-          module* (ignored module)
-            salt* (normalized generated module name)
-              '<module>'
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
 --------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
 system:
-  hash: '3334b29258653e8ccc2ee7806e9747e7'
+  hash: None
   component:
-    system*
-      stacktrace*
-        frame*
-          module* (ignored module)
-            salt* (normalized generated module name)
-              '<module>'
+    system
+      stacktrace
+        frame
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap
index a05b96f838..601b9ade6c 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_ignores_safari_native_code.pysnap
@@ -1,25 +1,26 @@
 ---
-created: '2019-03-15T18:36:59.770189Z'
+created: '2019-03-19T22:59:40.852252Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
 app:
   hash: None
   component:
-    app
+    app (stacktrace of system takes precedence)
       stacktrace
         frame (non app frame)
+          filename (native code indicated by filename)
+            u'[native code]'
           function*
             u'forEach'
 --------------------------------------------------------------------------
-fallback:
-  hash: 'd41d8cd98f00b204e9800998ecf8427e'
---------------------------------------------------------------------------
 system:
-  hash: None
+  hash: '30eb5001914d29dd8461898b5b8094fe'
   component:
-    system
-      stacktrace
-        frame (native code indicated by filename)
+    system*
+      stacktrace*
+        frame*
+          filename (native code indicated by filename)
+            u'[native code]'
           function*
             u'forEach'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap
index 85c6ee6a1a..0d499875a6 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/new:wip/frame_sanitizes_erb_templates.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-03-15T11:58:33.034297Z'
+created: '2019-03-19T22:59:40.922214Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -11,7 +11,7 @@ app:
         frame (non app frame)
           filename*
             u'foo.html.erb'
-          function* (trimmed integer suffix)
+          function* (removed integer suffix)
             u'_foo_html_erb__<anon>_<anon>'
 --------------------------------------------------------------------------
 system:
@@ -22,5 +22,5 @@ system:
         frame*
           filename*
             u'foo.html.erb'
-          function* (trimmed integer suffix)
+          function* (removed integer suffix)
             u'_foo_html_erb__<anon>_<anon>'
diff --git a/tests/sentry/grouping/test_variants.py b/tests/sentry/grouping/test_variants.py
index 769dbc9d07..01b95c23c3 100644
--- a/tests/sentry/grouping/test_variants.py
+++ b/tests/sentry/grouping/test_variants.py
@@ -36,6 +36,9 @@ def dump_variant(variant, lines=None, indent=0):
         if isinstance(value, GroupingComponent):
             lines.append('%s%s:' % ('  ' * indent, key))
             _dump_component(value, indent + 1)
+        elif key == 'config':
+            # We do not want to dump the config
+            continue
         else:
             lines.append('%s%s: %r' % ('  ' * indent, key, value))
 
@@ -68,13 +71,16 @@ def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
     with open(os.path.join(_fixture_path, test_name + '.json')) as f:
         input = json.load(f)
 
-    mgr = EventManager(data=input)
+    grouping_config = {
+        'id': config_name,
+    }
+    mgr = EventManager(data=input, grouping_config=grouping_config)
     mgr.normalize()
     data = mgr.get_data()
     evt = Event(data=data, platform=data['platform'])
 
     rv = []
-    for (key, value) in sorted(evt.get_grouping_variants(force_config=config_name).items()):
+    for (key, value) in sorted(evt.get_grouping_variants().items()):
         if rv:
             rv.append('-' * 74)
         rv.append('%s:' % key)
@@ -82,4 +88,6 @@ def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
     output = '\n'.join(rv)
     log(repr(evt.get_hashes()))
 
+    assert evt.get_grouping_config() == grouping_config
+
     insta_snapshot(output)
