commit 39183cd9e862debae65140a1e91736a84f7e9e92
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Sep 4 11:31:47 2018 -0700

    fix(discover): Improve getDisplayValue() and getTextValue() functions (#9590)
    
    Fix bug in getTextValue() function which was handling arrays incorrectly
    (inserting too many commas)
    Add tests for getDisplayValue() and getTextValue()

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
index 4350ac8630..da6d0852d6 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/utils.jsx
@@ -163,9 +163,13 @@ function getLabel(value) {
 }
 
 /**
- * Takes any value and returns a display version of that value for
- * rendering in the "discover" result table. Handles only the 3 types
- * that we would expect to be present in Snuba data - string, null and array
+ * Takes any value and returns a display version of that value for rendering in
+ * the "discover" result table. Only expected to handle the 4 types that we
+ * would expect to be present in Snuba data - string, number, null and array
+ *
+ * @param {*} val Value to display in table cell
+ * @param {Number} idx Index if part of array
+ * @returns {Object} Formatted cell contents
  */
 export function getDisplayValue(val, idx) {
   if (typeof val === 'string') {
@@ -191,9 +195,19 @@ export function getDisplayValue(val, idx) {
     );
   }
 
-  return val;
+  return <span>{val}</span>;
 }
 
+/**
+ * Takes any value and returns the text-only version of that value that will be
+ * rendered in the table. Only expected to handle the 4 types that we would
+ * expect to be present in Snuba data - string, number, null and array. This
+ * function is required for dynamically calculating column width based on cell
+ * contents.
+ *
+ * @param {*} val Value to display in table cell
+ * @returns {String} Cell contents as string
+ */
 export function getDisplayText(val) {
   if (typeof val === 'string') {
     return `"${val}"`;
@@ -204,17 +218,10 @@ export function getDisplayText(val) {
   }
 
   if (Array.isArray(val)) {
-    return `[
-        ${val.map(getDisplayValue).reduce((acc, curr, arrayIdx) => {
-          if (arrayIdx !== 0) {
-            return [...acc, ',', curr];
-          }
-          return [...acc, curr];
-        }, [])}
-        ]`;
+    return `[${val.map(getDisplayText)}]`;
   }
 
-  return val;
+  return `${val}`;
 }
 
 const LightGray = styled.span`
diff --git a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
index 40cee7a52e..075d4ef1f3 100644
--- a/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/utils.spec.jsx
@@ -1,6 +1,10 @@
+import {mount} from 'enzyme';
+
 import {
   getChartData,
   getChartDataByDay,
+  getDisplayValue,
+  getDisplayText,
 } from 'app/views/organizationDiscover/result/utils';
 
 describe('Utils', function() {
@@ -135,4 +139,48 @@ describe('Utils', function() {
 
     expect(getChartDataByDay(raw, query)).toEqual(expected);
   });
+
+  it('getDisplayValue()', function() {
+    const testData = [
+      {input: null, expectedText: 'null'},
+      {
+        input: 'some thing',
+        expectedText: '"some thing"',
+      },
+      {
+        input: 12,
+        expectedText: '12',
+      },
+      {
+        input: ['one', 'two', 'three'],
+        expectedText: '["one","two","three"]',
+      },
+    ];
+
+    testData.forEach(({input, expectedText}) => {
+      expect(mount(getDisplayValue(input)).text()).toBe(expectedText);
+    });
+  });
+
+  it('getTextValue()', function() {
+    const testData = [
+      {input: null, expectedText: 'null'},
+      {
+        input: 'some thing',
+        expectedText: '"some thing"',
+      },
+      {
+        input: 12,
+        expectedText: '12',
+      },
+      {
+        input: ['one', 'two', 'three'],
+        expectedText: '["one","two","three"]',
+      },
+    ];
+
+    testData.forEach(({input, expectedText}) => {
+      expect(getDisplayText(input)).toBe(expectedText);
+    });
+  });
 });
