commit 4f0195174a02b351ac6953d48b2ad30211940c54
Author: Jerzy Kozera <jerzy.kozera@gmail.com>
Date:   Thu Apr 21 12:10:21 2011 +0200

    sentry.helpers.transform - transform __sentry__ result, fixed RuntimeError on cycles

diff --git a/sentry/helpers.py b/sentry/helpers.py
index a20e0d53f5..0f9d6013a9 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -63,16 +63,19 @@ def varmap(func, var):
     else:
         return func(var)
 
-def transform(value):
+def transform(value, stack=[]):
     # TODO: make this extendable
     # TODO: include some sane defaults, like UUID
     # TODO: dont coerce strings to unicode, leave them as strings
+    if any(value is s for s in stack):
+        return 'cycle'
+    transform_rec = lambda o: transform(o, stack + [value])
     if isinstance(value, (tuple, list, set, frozenset)):
-        return type(value)(transform(o) for o in value)
+        return type(value)(transform_rec(o) for o in value)
     elif isinstance(value, uuid.UUID):
         return repr(value)
     elif isinstance(value, dict):
-        return dict((k, transform(v)) for k, v in value.iteritems())
+        return dict((k, transform_rec(v)) for k, v in value.iteritems())
     elif isinstance(value, unicode):
         return to_unicode(value)
     elif isinstance(value, str):
@@ -82,7 +85,7 @@ def transform(value):
             return to_unicode(value)
     elif not isinstance(value, (ClassType, TypeType)) and \
             callable(getattr(value, '__sentry__', None)):
-        return value.__sentry__()
+        return transform_rec(value.__sentry__())
     elif not isinstance(value, (int, bool)) and value is not None:
         # XXX: we could do transform(repr(value)) here
         return to_unicode(value)
