commit 32abb6ea7af92f739c30f7d078aed1dbb67a48c6
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 21 13:12:42 2016 -0800

    DRY tag key handling

diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index 613fc1fb7a..cae11f10bf 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -24,16 +24,12 @@ class GroupTagsEndpoint(GroupEndpoint):
         for tag_key in tag_keys:
             total_values = GroupTagValue.get_value_count(group.id, tag_key.key)
             top_values = GroupTagValue.get_top_values(group.id, tag_key.key, limit=10)
-            if tag_key.key.startswith('sentry:'):
-                key = tag_key.key.split('sentry:', 1)[-1]
-            else:
-                key = tag_key.key
 
             all_top_values.extend(top_values)
 
             data.append({
                 'id': str(tag_key.id),
-                'key': key,
+                'key': TagKey.get_standardized_key(tag_key.key),
                 'name': tag_key.get_label(),
                 'uniqueValues': tag_key.values_seen,
                 'totalValues': total_values,
diff --git a/src/sentry/api/endpoints/project_tags.py b/src/sentry/api/endpoints/project_tags.py
index e596f334f2..bf9231192b 100644
--- a/src/sentry/api/endpoints/project_tags.py
+++ b/src/sentry/api/endpoints/project_tags.py
@@ -15,14 +15,9 @@ class ProjectTagsEndpoint(ProjectEndpoint):
 
         data = []
         for tag_key in tag_keys:
-            if tag_key.key.startswith('sentry:'):
-                key = tag_key.key.split('sentry:', 1)[-1]
-            else:
-                key = tag_key.key
-
             data.append({
                 'id': str(tag_key.id),
-                'key': key,
+                'key': TagKey.get_standardized_key(tag_key.key),
                 'name': tag_key.get_label(),
                 'uniqueValues': tag_key.values_seen,
             })
diff --git a/src/sentry/api/serializers/models/grouptagkey.py b/src/sentry/api/serializers/models/grouptagkey.py
index 470ed9d582..a4475dfab1 100644
--- a/src/sentry/api/serializers/models/grouptagkey.py
+++ b/src/sentry/api/serializers/models/grouptagkey.py
@@ -17,26 +17,20 @@ class GroupTagKeySerializer(Serializer):
 
         result = {}
         for item in item_list:
+            key = TagKey.get_standardized_key(item.key)
             try:
                 label = tag_labels[item.key]
             except KeyError:
-                if item.key.startswith('sentry:'):
-                    label = item.key.split('sentry:', 1)[-1]
-                else:
-                    label = item.key
+                label = key
             result[item] = {
                 'name': label,
+                'key': key,
             }
         return result
 
     def serialize(self, obj, attrs, user):
-        if obj.key.startswith('sentry:'):
-            key = obj.key.split('sentry:', 1)[-1]
-        else:
-            key = obj.key
-
         return {
             'name': attrs['name'],
-            'key': key,
+            'key': attrs['key'],
             'uniqueValues': obj.values_seen,
         }
diff --git a/src/sentry/api/serializers/models/grouptagvalue.py b/src/sentry/api/serializers/models/grouptagvalue.py
index 02e5437265..376c06e5f4 100644
--- a/src/sentry/api/serializers/models/grouptagvalue.py
+++ b/src/sentry/api/serializers/models/grouptagvalue.py
@@ -5,7 +5,7 @@ import operator
 from django.db.models import Q
 
 from sentry.api.serializers import Serializer, register
-from sentry.models import EventUser, GroupTagValue, TagValue
+from sentry.models import EventUser, GroupTagValue, TagKey, TagValue
 
 
 def parse_user_tag(value):
@@ -65,14 +65,9 @@ class GroupTagValueSerializer(Serializer):
         return result
 
     def serialize(self, obj, attrs, user):
-        if obj.key.startswith('sentry:'):
-            key = obj.key.split('sentry:', 1)[-1]
-        else:
-            key = obj.key
-
         return {
             'name': attrs['name'],
-            'key': key,
+            'key': TagKey.get_standardized_key(obj.key),
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index f18055f1f4..c60eda6540 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -5,7 +5,7 @@ import operator
 from django.db.models import Q
 
 from sentry.api.serializers import Serializer, register
-from sentry.models import EventUser, TagValue
+from sentry.models import EventUser, TagKey, TagValue
 
 
 def parse_user_tag(value):
@@ -48,13 +48,8 @@ class TagValueSerializer(Serializer):
         return result
 
     def serialize(self, obj, attrs, user):
-        if obj.key.startswith('sentry:'):
-            key = obj.key.split('sentry:', 1)[-1]
-        else:
-            key = obj.key
-
         return {
-            'key': key,
+            'key': TagKey.get_standardized_key(obj.key),
             'name': attrs['name'],
             'value': obj.value,
             'count': obj.times_seen,
diff --git a/src/sentry/models/tagkey.py b/src/sentry/models/tagkey.py
index c4679f6c3a..30d1c39341 100644
--- a/src/sentry/models/tagkey.py
+++ b/src/sentry/models/tagkey.py
@@ -78,6 +78,12 @@ class TagKey(Model):
     def is_valid_key(self, key):
         return TAG_KEY_RE.match(key)
 
+    @classmethod
+    def get_standardized_key(cls, key):
+        if key.startswith('sentry:'):
+            return key.split('sentry:', 1)[-1]
+        return key
+
     def get_label(self):
         return self.label \
             or TAG_LABELS.get(self.key) \
