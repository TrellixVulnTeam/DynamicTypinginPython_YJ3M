commit 3f8219b01e190069cac9f88bbe786d303232891f
Author: Mark Story <mark@sentry.io>
Date:   Fri Dec 13 08:21:33 2019 -0800

    fix(search) Fix negation on environment condition (#16092)
    
    When using the environment text condition we did not correctly handle
    negation, and now we do. I've removed an extra loop over the search
    terms and included a test to cover negation on project.name as that was
    reported as not working as well.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 848030c482..74a70efa88 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -540,18 +540,19 @@ def convert_search_filter_to_snuba_query(search_filter):
         # conditions added to env_conditions are OR'd
         env_conditions = []
 
-        _envs = set(value if isinstance(value, (list, tuple)) else [value])
+        values = set(value if isinstance(value, (list, tuple)) else [value])
         # the "no environment" environment is null in snuba
-        if "" in _envs:
-            _envs.remove("")
+        if "" in values:
+            values.remove("")
             operator = "IS NULL" if search_filter.operator == "=" else "IS NOT NULL"
             env_conditions.append(["environment", operator, None])
-
-        if _envs:
-            env_conditions.append(["environment", "IN", _envs])
-
+        if len(values) == 1:
+            operator = "=" if search_filter.operator == "=" else "!="
+            env_conditions.append(["environment", operator, values.pop()])
+        elif values:
+            operator = "IN" if search_filter.operator == "=" else "NOT IN"
+            env_conditions.append(["environment", operator, values])
         return env_conditions
-
     elif name == "message":
         if search_filter.value.is_wildcard():
             # XXX: We don't want the '^$' values at the beginning and end of
@@ -644,14 +645,12 @@ def get_filter(query=None, params=None):
 
     kwargs = {"start": None, "end": None, "conditions": [], "project_ids": [], "group_ids": []}
 
-    projects = {}
-    has_project_term = any(
-        isinstance(term, SearchFilter) and term.key.name == PROJECT_KEY for term in parsed_terms
-    )
-    if has_project_term:
-        projects = {
+    def get_projects(params):
+        return {
             p["slug"]: p["id"]
-            for p in Project.objects.filter(id__in=params["project_id"]).values("id", "slug")
+            for p in Project.objects.filter(id__in=params.get("project_id", [])).values(
+                "id", "slug"
+            )
         }
 
     def to_list(value):
@@ -659,10 +658,13 @@ def get_filter(query=None, params=None):
             return value
         return [value]
 
+    projects = None
     for term in parsed_terms:
         if isinstance(term, SearchFilter):
             name = term.key.name
             if name == PROJECT_KEY:
+                if projects is None:
+                    projects = get_projects(params)
                 condition = ["project_id", "=", projects.get(term.value.value)]
                 kwargs["conditions"].append(condition)
             elif name == "issue.id":
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 6225ed71c5..d8521dfde8 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1007,6 +1007,45 @@ class GetSnubaQueryArgsTest(TestCase):
         assert filter.filter_keys == {"group_id": [1]}
         assert filter.group_ids == [1]
 
+    def test_environment_param(self):
+        params = {"environment": ["", "prod"]}
+        filter = get_filter("", params)
+        # Should generate OR conditions
+        assert filter.conditions == [
+            [["environment", "IS NULL", None], ["environment", "=", "prod"]]
+        ]
+        assert filter.filter_keys == {}
+        assert filter.group_ids == []
+
+        params = {"environment": ["dev", "prod"]}
+        filter = get_filter("", params)
+        assert filter.conditions == [[["environment", "IN", {"dev", "prod"}]]]
+        assert filter.filter_keys == {}
+        assert filter.group_ids == []
+
+    def test_environment_condition_string(self):
+        filter = get_filter("environment:dev")
+        assert filter.conditions == [[["environment", "=", "dev"]]]
+        assert filter.filter_keys == {}
+        assert filter.group_ids == []
+
+        filter = get_filter("!environment:dev")
+        assert filter.conditions == [[["environment", "!=", "dev"]]]
+        assert filter.filter_keys == {}
+        assert filter.group_ids == []
+
+        filter = get_filter("environment:dev environment:prod")
+        # Will generate conditions that will never find anything
+        assert filter.conditions == [[["environment", "=", "dev"]], [["environment", "=", "prod"]]]
+        assert filter.filter_keys == {}
+        assert filter.group_ids == []
+
+        filter = get_filter("environment: ")
+        # The '' environment is Null in snuba
+        assert filter.conditions == [[["environment", "IS NULL", None]]]
+        assert filter.filter_keys == {}
+        assert filter.group_ids == []
+
     def test_project_name(self):
         p1 = self.create_project(organization=self.organization)
         p2 = self.create_project(organization=self.organization)
@@ -1017,6 +1056,12 @@ class GetSnubaQueryArgsTest(TestCase):
         filter.filter_keys == {"project_id": [p1.id, p2.id]}
         filter.project_ids == [p1.id, p2.id]
 
+        params = {"project_id": []}
+        filter = get_filter("!project.name:{}".format(p1.slug), params)
+        filter.conditions == [["project_id", "!=", p1.id]]
+        filter.filter_keys == {}
+        filter.project_ids == []
+
     def test_transaction_status(self):
         for (key, val) in SPAN_STATUS_CODE_TO_NAME.items():
             result = get_filter("transaction.status:{}".format(val))
