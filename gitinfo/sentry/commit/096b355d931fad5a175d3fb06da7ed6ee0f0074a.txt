commit 096b355d931fad5a175d3fb06da7ed6ee0f0074a
Author: mikellykels <kelly@sentry.io>
Date:   Mon Jun 15 11:10:03 2020 -0700

    fix(settings): Handle Manager access to configure auth provider (#19323)
    
    * fix(settings): Handle Manager access to configure auth provider
    
    Enable the configure button for Auth Providers for the Manager role. The Alert displays that Managers and Owners can edit these settings, but configure is disabled for Managers.
    
    Fixes ISSUE-854
    
    * update manager scope to include org:admin
    
    * update to use org:write instead
    
    * add tests

diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
index 2f670abcbd..d081295a67 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/index.jsx
@@ -16,7 +16,7 @@ class OrganizationAuth extends AsyncView {
   UNSAFE_componentWillUpdate(_nextProps, nextState) {
     const access = this.context.organization.access;
 
-    if (nextState.provider && access.includes('org:admin')) {
+    if (nextState.provider && access.includes('org:write')) {
       // If SSO provider is configured, keep showing loading while we redirect
       // to django configuration view
       window.location.assign(`/organizations/${this.props.params.orgId}/auth/configure/`);
@@ -95,7 +95,7 @@ class OrganizationAuth extends AsyncView {
     const {providerList, provider} = this.state;
     const access = this.context.organization.access;
 
-    if (access.includes('org:admin') && provider) {
+    if (access.includes('org:write') && provider) {
       // If SSO provider is configured, keep showing loading while we redirect
       // to django configuration view
       return this.renderLoading();
diff --git a/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx b/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx
index f8d5578520..02aa0b1893 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationAuth/providerItem.jsx
@@ -32,7 +32,7 @@ export default class ProviderItem extends React.PureComponent {
   renderDisabledLock = p => <LockedFeature provider={p.provider} features={p.features} />;
 
   renderInstallButton = ({provider, hasFeature}) => (
-    <Access access={['org:admin']}>
+    <Access access={['org:write']}>
       {({hasAccess}) => (
         <Button
           type="submit"
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index cf85b997dd..84abef51a7 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -44,9 +44,9 @@ class AuthProviderSettingsForm(forms.Form):
 
 
 class OrganizationAuthSettingsView(OrganizationView):
-    # We restrict auth settings to org:admin as it allows a non-owner to
+    # We restrict auth settings to org:write as it allows a non-owner to
     # escalate members to own by disabling the default role.
-    required_scope = "org:admin"
+    required_scope = "org:write"
 
     def _disable_provider(self, request, organization, auth_provider):
         self.create_audit_entry(
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 804426ab76..b0a9383a98 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -40,6 +40,17 @@ class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
         om.save()
         return user
 
+    def create_manager_and_attach_identity(self):
+        user = self.create_user(is_superuser=False)
+        self.create_member(
+            user=user, organization=self.organization, role="manager", teams=[self.team]
+        )
+        AuthIdentity.objects.create(user=user, ident="foo3", auth_provider=self.auth_provider)
+        om = OrganizationMember.objects.get(user=user, organization=self.organization)
+        setattr(om.flags, "sso:linked", True)
+        om.save()
+        return user
+
     def test_teamless_admin_cannot_load(self):
         with self.feature("organizations:sso-basic"):
             self.assert_teamless_admin_cannot_access(self.path)
@@ -52,6 +63,14 @@ class OrganizationAuthSettingsPermissionTest(PermissionTestCase):
         with self.feature("organizations:sso-basic"):
             self.assert_role_cannot_access(self.path, "manager")
 
+    def test_manager_can_load(self):
+        manager = self.create_manager_and_attach_identity()
+
+        self.login_as(manager, organization_id=self.organization.id)
+        with self.feature("organizations:sso-basic"):
+            resp = self.client.get(self.path)
+            assert resp.status_code == 200
+
     def test_owner_can_load(self):
         owner = self.create_owner_and_attach_identity()
 
