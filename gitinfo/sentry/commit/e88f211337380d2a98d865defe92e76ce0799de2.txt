commit e88f211337380d2a98d865defe92e76ce0799de2
Author: Mark Story <mark@mark-story.com>
Date:   Fri Jan 4 11:37:29 2019 -0500

    fix(releases) Fix integrity errors in release creation (#11014)
    
    I've found a few integrity errors coming out of release commit creation
    steps. Using `create_or_update` should yield less error prone code as
    integrity errors are handled and converted into updates.
    
    I've removed a bit of redundant update logic for commits. Only updating
    the commit message, author and date when the current values are none
    goes against expectations that PUT endpoints normally have.
    
    We don't need to update CommitFileChange records so we can catch any
    IntegrityErrors that are raised.
    
    Fixes SENTRY-8GT
    Fixes SENTRY-8KJ

diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 37546f84dd..a3a9868d17 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -401,61 +401,67 @@ class Release(Model):
                     if not author_email:
                         author = None
                     elif author_email not in authors:
-                        authors[author_email] = author = CommitAuthor.objects.get_or_create(
+                        author_data = {
+                            'name': data.get('author_name')
+                        }
+                        author, created = CommitAuthor.objects.create_or_update(
                             organization_id=self.organization_id,
                             email=author_email,
-                            defaults={
-                                'name': data.get('author_name'),
-                            }
-                        )[0]
-                        if data.get('author_name') and author.name != data['author_name']:
-                            author.update(name=data['author_name'])
+                            values=author_data)
+                        if not created:
+                            author = CommitAuthor.objects.get(
+                                organization_id=self.organization_id,
+                                email=author_email)
+                        authors[author_email] = author
                     else:
                         author = authors[author_email]
 
-                    defaults = {
+                    commit_data = {
                         'message': data.get('message'),
-                        'author': author,
                         'date_added': data.get('timestamp') or timezone.now(),
                     }
-                    commit, created = Commit.objects.get_or_create(
+                    # If we didn't get an author don't overwrite an existing one.
+                    if author is not None:
+                        commit_data['author'] = author
+
+                    commit, created = Commit.objects.create_or_update(
                         organization_id=self.organization_id,
                         repository_id=repo.id,
                         key=data['id'],
-                        defaults=defaults,
-                    )
+                        values=commit_data)
+                    if not created:
+                        commit = Commit.objects.get(
+                            organization_id=self.organization_id,
+                            repository_id=repo.id,
+                            key=data['id'])
+
                     if author is None:
                         author = commit.author
 
                     commit_author_by_commit[commit.id] = author
 
                     patch_set = data.get('patch_set', [])
-
                     for patched_file in patch_set:
-                        CommitFileChange.objects.get_or_create(
-                            organization_id=self.organization.id,
+                        try:
+                            CommitFileChange.objects.create(
+                                organization_id=self.organization.id,
+                                commit=commit,
+                                filename=patched_file['path'],
+                                type=patched_file['type'],
+                            )
+                        except IntegrityError:
+                            pass
+
+                    try:
+                        ReleaseCommit.objects.create(
+                            organization_id=self.organization_id,
+                            release=self,
                             commit=commit,
-                            filename=patched_file['path'],
-                            type=patched_file['type'],
+                            order=idx,
                         )
+                    except IntegrityError:
+                        pass
 
-                    if not created:
-                        update_kwargs = {}
-                        if commit.message is None and defaults['message'] is not None:
-                            update_kwargs['message'] = defaults['message']
-                        if commit.author_id is None and defaults['author'] is not None:
-                            update_kwargs['author'] = defaults['author']
-                        if defaults.get('date_added') is not None:
-                            update_kwargs['date_added'] = defaults['date_added']
-                        if update_kwargs:
-                            commit.update(**update_kwargs)
-
-                    ReleaseCommit.objects.create(
-                        organization_id=self.organization_id,
-                        release=self,
-                        commit=commit,
-                        order=idx,
-                    )
                     if latest_commit is None:
                         latest_commit = commit
 
