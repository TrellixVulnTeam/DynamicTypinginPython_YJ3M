commit 753440157953d47d22bf53c87770cc271c9fbe45
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue May 17 19:18:14 2016 +0200

    Added U2F support

diff --git a/package.json b/package.json
index 5a445ed813..abc839ebcc 100644
--- a/package.json
+++ b/package.json
@@ -42,6 +42,7 @@
     "style-loader": "0.12.4",
     "underscore": "1.8.3",
     "url-loader": "0.5.6",
+    "u2f-api": "0.0.8",
     "webpack": "1.12.4"
   },
   "private": true,
diff --git a/setup.py b/setup.py
index f4c2ab8556..da3fd9e4b2 100755
--- a/setup.py
+++ b/setup.py
@@ -134,6 +134,7 @@ install_requires = [
     'uwsgi>2.0.0,<2.1.0',
     'rb>=1.4.0,<2.0.0',
     'qrcode>=5.2.2,<6.0.0',
+    'python-u2flib-server>=4.0.1,<4.1.0',
 ]
 
 dsym_requires = [
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 7822f9648c..780085157d 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -12,7 +12,11 @@ import hmac
 import base64
 import hashlib
 
+from u2flib_server import u2f
+from u2flib_server import jsapi as u2f_jsapi
+
 from django.db import models
+from django.conf import settings
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 from django.utils.functional import cached_property
@@ -23,6 +27,25 @@ from sentry.utils.otp import generate_secret_key, TOTP
 from sentry.utils.sms import send_sms, sms_available
 
 
+class ActivationResult(object):
+    type = None
+
+
+class ActivationMessageResult(ActivationResult):
+
+    def __init__(self, message, type='info'):
+        assert type in ('error', 'warning', 'info')
+        self.type = type
+        self.message = message
+
+
+class ActivationChallengeResult(ActivationResult):
+    type = 'challenge'
+
+    def __init__(self, challenge):
+        self.challenge = challenge
+
+
 class AuthenticatorManager(BaseManager):
 
     def all_interfaces_for_user(self, user, return_missing=False):
@@ -95,9 +118,7 @@ class AuthenticatorManager(BaseManager):
         """
         for interface in self.all_interfaces_for_user(user):
             if interface.validate_otp(otp):
-                auth = interface.authenticator
-                auth.last_used_at = timezone.now()
-                auth.save()
+                interface.authenticator.mark_used()
                 return True
         return False
 
@@ -187,10 +208,25 @@ class AuthenticatorInterface(object):
 
     def validate_otp(self, otp):
         """This method is invoked for an OTP response and has to return
-        `True` or `False` based on the validity of the OTP response.
+        `True` or `False` based on the validity of the OTP response.  Note
+        that this can be called with otp responses from other interfaces.
         """
         return False
 
+    def validate_response(self, request, challenge, response):
+        """If the activation generates a challenge that needs to be
+        responded to this validates the response for that challenge.  This
+        is only ever called for challenges emitted by the activation of this
+        activation interface.
+        """
+        if self.validate_response_impl(request, challenge, response):
+            self.authenticator.mark_used()
+            return True
+        return False
+
+    def validate_response_impl(self, request, challenge, response):
+        return False
+
 
 @register_authenticator
 class RecoveryCodeInterface(AuthenticatorInterface):
@@ -319,10 +355,13 @@ class SmsInterface(OtpMixin, AuthenticatorInterface):
 
     def activate(self, request):
         if self.send_text(request=request):
-            return _('A confirmation code was sent to your phone. '
-                     'It is valid for %d seconds.') % self.code_ttl
-        return _('Error: we failed to send a text message to you. You '
-                 'can try again later or sign in with a different method.')
+            return ActivationMessageResult(
+                _('A confirmation code was sent to your phone. '
+                  'It is valid for %d seconds.') % self.code_ttl)
+        return ActivationMessageResult(
+            _('Error: we failed to send a text message to you. You '
+              'can try again later or sign in with a different method.'),
+            type='error')
 
     def send_text(self, for_enrollment=False, request=None):
         ctx = {'code': self.make_otp().generate_otp()}
@@ -341,6 +380,66 @@ class SmsInterface(OtpMixin, AuthenticatorInterface):
         return send_sms(text % ctx, to=self.phone_number)
 
 
+@register_authenticator
+class U2fInterface(AuthenticatorInterface):
+    type = 3
+    interface_id = 'u2f'
+    name = _('U2F (Universal 2nd Factor)')
+    description = _('Authenticate with a U2F hardware device. This is a '
+                    'device like a Yubikey or something similar which '
+                    'supports FIDO\'s U2F specification. This also requires '
+                    'a browser which supports this system (like Google '
+                    'Chrome).')
+
+    u2f_app_id = settings.SENTRY_URL_PREFIX
+    u2f_facets = [u2f_app_id]
+
+    def generate_new_config(self):
+        return {
+            'enrollment': dict(u2f.start_register(self.u2f_app_id, [])),
+        }
+
+    def _get_enrollment_data(self):
+        return self.config.get('enrollment')
+
+    def _set_enrollment_data(self, value):
+        if 'device' in self.config:
+            raise RuntimeError('Cannot set enrollment data if interface is '
+                               'already enrolled.')
+        self.config['enrollment'] = value
+
+    enrollment_data = property(_get_enrollment_data, _set_enrollment_data)
+    del _get_enrollment_data, _set_enrollment_data
+
+    def get_u2f_device(self):
+        device = self.config.get('device')
+        if device is None:
+            raise RuntimeError('This authenticator is not enrolled.')
+        return u2f_jsapi.DeviceRegistration(device)
+
+    def try_enroll(self, response_data):
+        # XXX: handle error
+        enrollment_data = self.config.get('enrollment')
+        if enrollment_data is None:
+            raise RuntimeError('This authenticator is not in a state that '
+                               'permits user enrollment.')
+        binding, cert = u2f.complete_register(enrollment_data, response_data,
+                                              self.u2f_facets)
+        self.config['device'] = dict(binding)
+
+    def activate(self, request):
+        return ActivationChallengeResult(
+            challenge=dict(u2f.start_authenticate([self.get_u2f_device()])),
+        )
+
+    def validate_response(self, request, challenge, response):
+        # XXX: handle error
+        counter, touch = u2f.verify_authenticate([self.get_u2f_device()],
+                                                 challenge, response,
+                                                 self.u2f_facets)
+        return True
+
+
 class Authenticator(BaseModel):
     id = BoundedAutoField(primary_key=True)
     user = FlexibleForeignKey('sentry.User', db_index=True)
@@ -361,6 +460,11 @@ class Authenticator(BaseModel):
     def interface(self):
         return AUTHENTICATOR_INTERFACES_BY_TYPE[self.type](self)
 
+    def mark_used(self, save=True):
+        self.last_used_at = timezone.now()
+        if save:
+            self.save()
+
     def __repr__(self):
         return '<Authenticator user=%r interface=%r>' % (
             self.user.email,
diff --git a/src/sentry/static/sentry/app/components/u2fenrollment.jsx b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
new file mode 100644
index 0000000000..b6773430af
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import u2f from 'u2f-api';
+
+import {t} from '../locale';
+
+const U2fEnrollment = React.createClass({
+  propTypes: {
+    enrollmentData: React.PropTypes.object
+  },
+
+  getInitialState() {
+    return {
+      isSupported: null,
+      formElement: null,
+      challengeElement: null,
+      responseElement: null
+    };
+  },
+
+  componentDidMount() {
+    u2f.isSupported().then((supported) => {
+      this.setState({
+        isSupported: supported
+      });
+      if (!supported) {
+        return;
+      }
+      let {registerRequests, authenticateRequests} = this.props.enrollmentData;
+      u2f.register(registerRequests, authenticateRequests).then((data) => {
+        this.state.responseElement.value = JSON.stringify(data);
+        this.state.formElement.submit();
+      }).catch((err) => {
+        //TOOD: handle this in UI
+        console.log('U2F Failure: ' + err);
+      });
+    });
+  },
+
+  bindChallengeElement(ref) {
+    this.setState({
+      challengeElement: ref,
+      formElement: ref.form
+    });
+    ref.value = JSON.stringify(this.props.enrollmentData);
+  },
+
+  bindResponseElement(ref) {
+    this.setState({
+      responseElement: ref
+    });
+  },
+
+  renderUnsupported() {
+    return (
+      <p className="error">
+        {t(`
+          Unfortunately your browser does not support U2F.  You need to add
+          a different authentication method or switch to a browser that
+          supports it (for instance Microsoft Edge or Google Chrome).
+        `)}
+      </p>
+    );
+  },
+
+  renderEnrollment() {
+    return (
+      <div className="enrollment">
+        <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
+        <input type="hidden" name="response" ref={this.bindResponseElement}/>
+        <p>
+          {t(`
+            To enroll your U2F device insert it now or tap the button on it
+            to activate it.
+          `)}
+        </p>
+      </div>
+    );
+  },
+
+  render() {
+    let {isSupported} = this.state;
+    if (isSupported === null) {
+      return null;
+    } else if (!isSupported) {
+      return this.renderUnsupported();
+    } else {
+      return this.renderEnrollment();
+    }
+  }
+});
+
+export default U2fEnrollment;
diff --git a/src/sentry/static/sentry/app/components/u2fsign.jsx b/src/sentry/static/sentry/app/components/u2fsign.jsx
new file mode 100644
index 0000000000..087e6f2888
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/u2fsign.jsx
@@ -0,0 +1,89 @@
+import React from 'react';
+import u2f from 'u2f-api';
+
+import {t} from '../locale';
+
+const U2fSign = React.createClass({
+  propTypes: {
+    challengeData: React.PropTypes.object
+  },
+
+  getInitialState() {
+    return {
+      isSupported: null,
+      formElement: null,
+      challengeElement: null,
+      responseElement: null
+    };
+  },
+
+  componentDidMount() {
+    u2f.isSupported().then((supported) => {
+      this.setState({
+        isSupported: supported
+      });
+      if (!supported) {
+        return;
+      }
+      u2f.sign(this.props.challengeData.authenticateRequests).then((data) => {
+        this.state.responseElement.value = JSON.stringify(data);
+        this.state.formElement.submit();
+      }).catch((err) => {
+        alert('Error: ' + err);
+      });
+    });
+  },
+
+  bindChallengeElement(ref) {
+    this.setState({
+      challengeElement: ref,
+      formElement: ref.form
+    });
+    ref.value = JSON.stringify(this.props.challengeData);
+  },
+
+  bindResponseElement(ref) {
+    this.setState({
+      responseElement: ref
+    });
+  },
+
+  renderUnsupported() {
+    return (
+      <p className="error">
+        {t(`
+          Unfortunately your browser does not support U2F so you need to use
+          a different sign in method.
+        `)}
+      </p>
+    );
+  },
+
+  renderPrompt() {
+    return (
+      <div>
+        <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
+        <input type="hidden" name="response" ref={this.bindResponseElement}/>
+        <p>
+          {t(`
+            Insert your U2F device or tap the button on it to confirm the
+            sign-in request.
+          `)}
+        </p>
+      </div>
+    );
+  },
+
+  render() {
+    let {isSupported} = this.state;
+    if (isSupported === null) {
+      return null;
+    } else if (!isSupported) {
+      return this.renderUnsupported();
+    } else {
+      return this.renderPrompt();
+    }
+  }
+});
+
+export default U2fSign;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 3ae84b8845..2ea3971eb2 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -50,6 +50,8 @@ export default {
       ApiMixin: require('./mixins/apiMixin'),
     },
     BarChart: require('./components/barChart'),
+    U2fEnrollment: require('./components/u2fenrollment'),
+    U2fSign: require('./components/u2fsign'),
     i18n: require('./locale'),
     ConfigStore: require('./stores/configStore'),
     DropdownLink: require('./components/dropdownLink'),
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html b/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
new file mode 100644
index 0000000000..f34d5ca03b
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
@@ -0,0 +1,24 @@
+{% extends "sentry/bases/twofactor_settings.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
+{% block twofactor_body %}
+  <form action="" method="post">
+    <div id="u2f-enrollment"></div>
+    {% csrf_token %}
+    <fieldset class="form-actions">
+      <input type="hidden" name="enroll">
+      <div>
+        <a href="{% url 'sentry-account-settings-2fa-u2f' %}" class="btn btn-default">{% trans "Cancel" %}</a>
+      </div>
+    </fieldset>
+  </form>
+  <script>
+    ReactDOM.render(React.createElement(Sentry.U2fEnrollment, {
+      enrollmentData: {{ auth.enrollment_data|to_json|safe }}
+    }), document.getElementById('u2f-enrollment'));
+  </script>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/twofactor.html b/src/sentry/templates/sentry/twofactor.html
index 4565b267f1..4f845313be 100644
--- a/src/sentry/templates/sentry/twofactor.html
+++ b/src/sentry/templates/sentry/twofactor.html
@@ -14,21 +14,27 @@
         with the sign-in you need to provide the access code from your
         authenticator or a recovery code if you have one.
       </p>
-      {% if activation_message %}
-        <p><em>{{ activation_message }}</em></p>
+      {% if activation %}
+        {% if activation.type == 'error' or activation.type == 'warning' or activation.type == 'info' %}
+          <p class="{{ activation.type }}">{{ activation.message }}</p>
+        {% endif %}
       {% endif %}
       <form class="form-stacked" action="" method="post" autocomplete="off">
         {% csrf_token %}
 
-        {{ form|as_crispy_errors }}
+        {% block twofactor_form_body %}
+          {{ form|as_crispy_errors }}
 
-        {% for field in form %}
-          {{ field|as_crispy_field }}
-        {% endfor %}
+          {% for field in form %}
+            {{ field|as_crispy_field }}
+          {% endfor %}
+        {% endblock %}
 
+        {% block twofactor_submit %}
         <fieldset class="form-actions">
           <button type="submit" class="btn btn-primary">{% trans "Continue" %}</button>
         </fieldset>
+        {% endblock %}
 
         {% if other_interfaces %}
           <p>Other authentication methods:
diff --git a/src/sentry/templates/sentry/twofactor_u2f.html b/src/sentry/templates/sentry/twofactor_u2f.html
new file mode 100644
index 0000000000..d35dab286e
--- /dev/null
+++ b/src/sentry/templates/sentry/twofactor_u2f.html
@@ -0,0 +1,13 @@
+{% extends "sentry/twofactor.html" %}
+{% load sentry_helpers %}
+{% block twofactor_form_body %}
+  <div id="u2f-container"></div>
+  <script>
+    ReactDOM.render(React.createElement(Sentry.U2fSign, {
+      challengeData: {{ activation.challenge|to_json|safe }}
+    }), document.getElementById('u2f-container'));
+  </script>
+{% endblock %}
+{% block twofactor_submit %}
+  {# get rid of submit button #}
+{% endblock %}
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index 5681b3df1c..85276a4a78 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -15,6 +15,7 @@ from sentry.web.frontend.base import BaseView
 from sentry.web.decorators import login_required
 from sentry.web.helpers import render_to_response
 from sentry.web.forms.accounts import TwoFactorForm
+from sentry.utils import json
 
 
 class SmsForm(forms.Form):
@@ -25,7 +26,6 @@ class SmsForm(forms.Form):
 
 class TwoFactorSettingsView(BaseView):
     interface_id = None
-    configure_template = 'sentry/account/twofactor/configure.html'
 
     @method_decorator(csrf_protect)
     @method_decorator(never_cache)
@@ -108,13 +108,14 @@ class TwoFactorSettingsView(BaseView):
             return self.enroll(request, interface,
                                insecure='enroll' not in request.POST)
         context = self.make_context(request, interface)
-        return render_to_response(self.configure_template,
+        return render_to_response(['sentry/account/twofactor/configure_%s.html'
+                                   % self.interface_id,
+                                   'sentry/account/twofactor/configure.html'],
                                   context, request)
 
 
 class RecoveryCodeSettingsView(TwoFactorSettingsView):
     interface_id = 'recovery'
-    configure_template = 'sentry/account/twofactor/configure_recovery.html'
 
 
 class TotpSettingsView(TwoFactorSettingsView):
@@ -145,7 +146,6 @@ class TotpSettingsView(TwoFactorSettingsView):
 
 class SmsSettingsView(TwoFactorSettingsView):
     interface_id = 'sms'
-    configure_template = 'sentry/account/twofactor/configure_sms.html'
 
     def enroll(self, request, interface, insecure=False):
         stage = request.POST.get('stage') or 'initial'
@@ -180,3 +180,21 @@ class SmsSettingsView(TwoFactorSettingsView):
         context['stage'] = stage
         return render_to_response('sentry/account/twofactor/enroll_sms.html',
                                   context, request)
+
+
+class U2fSettingsView(TwoFactorSettingsView):
+    interface_id = 'u2f'
+
+    def enroll(self, request, interface, insecure=False):
+        challenge = request.POST.get('challenge')
+        if challenge:
+            interface.enrollment_data = json.loads(challenge)
+
+        response = request.POST.get('response')
+        if response:
+            interface.try_enroll(json.loads(response))
+            return TwoFactorSettingsView.enroll(self, request, interface)
+
+        context = self.make_context(request, interface)
+        return render_to_response('sentry/account/twofactor/enroll_u2f.html',
+                                  context, request)
diff --git a/src/sentry/web/frontend/twofactor.py b/src/sentry/web/frontend/twofactor.py
index 9ee0665309..1435f2a726 100644
--- a/src/sentry/web/frontend/twofactor.py
+++ b/src/sentry/web/frontend/twofactor.py
@@ -8,7 +8,7 @@ from django.core.urlresolvers import reverse
 from sentry.web.frontend.base import BaseView
 from sentry.web.forms.accounts import TwoFactorForm
 from sentry.web.helpers import render_to_response
-from sentry.utils import auth
+from sentry.utils import auth, json
 from sentry.models import Authenticator
 
 
@@ -19,6 +19,11 @@ class TwoFactorAuthView(BaseView):
         auth.login(request, user, passed_2fa=True)
         return HttpResponseRedirect(auth.get_login_redirect(request))
 
+    def fail_signin(self, request, user):
+        # Ladies and gentlemen: he world's shittiest bruteforce
+        # prevention.
+        time.sleep(2.0)
+
     def negotiate_interface(self, request, interfaces):
         if len(interfaces) == 1:
             return interfaces[0]
@@ -50,23 +55,37 @@ class TwoFactorAuthView(BaseView):
         if not interfaces:
             return self.perform_signin(request, user)
 
+        challenge = activation = None
         interface = self.negotiate_interface(request, interfaces)
         if request.method == 'GET':
-            activation_message = interface.activate(request)
+            activation = interface.activate(request)
+            if activation is not None:
+                challenge = activation.challenge
+        elif 'challenge' in request.POST:
+            challenge = json.loads(request.POST.get('challenge'))
 
+        # If an OTP response was supplied, we try to make it pass.
         otp = request.POST.get('otp')
         if otp:
             if Authenticator.objects.validate_otp(user, otp):
                 return self.perform_signin(request, user)
-            else:
-                # Ladies and gentlemen: he world's shittiest bruteforce
-                # prevention.
-                time.sleep(2.0)
+            self.fail_signin(request, user)
+
+        # If a challenge and response exists, validate
+        if challenge:
+            response = request.POST.get('response')
+            if response:
+                response = json.loads(response)
+                if interface.validate_response(request, challenge, response):
+                    return self.perform_signin(request, user)
+                self.fail_signin(request, user)
 
         form = TwoFactorForm()
-        return render_to_response('sentry/twofactor.html', {
+        return render_to_response(['sentry/twofactor_%s.html' %
+                                   interface.interface_id,
+                                   'sentry/twofactor.html'], {
             'form': form,
             'interface': interface.interface_id,
             'other_interfaces': self.get_other_interfaces(interface, interfaces),
-            'activation_message': activation_message,
+            'activation': activation,
         }, request, status=200)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 5665d3d847..fe3a5f3171 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -197,6 +197,9 @@ urlpatterns += patterns(
     url(r'^account/settings/2fa/sms/$',
         accounts_twofactor.SmsSettingsView.as_view(),
         name='sentry-account-settings-2fa-sms'),
+    url(r'^account/settings/2fa/u2f/$',
+        accounts_twofactor.U2fSettingsView.as_view(),
+        name='sentry-account-settings-2fa-u2f'),
     url(r'^account/settings/avatar/$', accounts.avatar_settings,
         name='sentry-account-settings-avatar'),
     url(r'^account/settings/appearance/$', accounts.appearance_settings,
