commit 7b036390c64ce58149ee65d23871da910e162c1a
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 20 13:41:55 2014 +0200

    Various work towards removing Project.owner

diff --git a/bin/load-mocks b/bin/load-mocks
index 4ab71a5ce9..aacde8feeb 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -42,7 +42,6 @@ project, _ = Project.objects.get_or_create(
     team=team,
     name='Backend',
     slug='backend',
-    owner=team.owner,
 )
 
 event1 = create_sample_event(project, 'python')
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 43cf71f48c..800a128b42 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -12,8 +12,6 @@ from sentry.models import Project
 
 
 class ProjectSerializer(serializers.ModelSerializer):
-    owner = serializers.Field(source='owner.username')
-
     class Meta:
         model = Project
         fields = ('name', 'slug')
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
index 83531a2827..82b09d0ac3 100644
--- a/src/sentry/management/commands/repair.py
+++ b/src/sentry/management/commands/repair.py
@@ -29,13 +29,6 @@ class Command(BaseCommand):
         else:
             owner = None
 
-        if owner:
-            print("Assigning ownerless projects to %s" % owner.username)
-            # Assign unowned projects
-            for project in Project.objects.filter(owner__isnull=True):
-                update(project, owner=owner)
-                print("* Changed owner of %s" % project)
-
         # Create teams for any projects that are missing them
         print("Creating missing teams on projects")
         for project in Project.objects.filter(team__isnull=True, owner__isnull=False):
diff --git a/src/sentry/migrations/0134_auto__del_field_project_owner__chg_field_project_team.py b/src/sentry/migrations/0134_auto__del_field_project_owner__chg_field_project_team.py
new file mode 100644
index 0000000000..2e44a03320
--- /dev/null
+++ b/src/sentry/migrations/0134_auto__del_field_project_owner__chg_field_project_team.py
@@ -0,0 +1,337 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Deleting field 'Project.owner'
+        db.delete_column(u'sentry_project', 'owner_id')
+
+
+        # Changing field 'Project.team'
+        db.alter_column('sentry_project', 'team_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Team']))
+
+    def backwards(self, orm):
+        # Adding field 'Project.owner'
+        db.add_column(u'sentry_project', 'owner',
+                      self.gf('django.db.models.fields.related.ForeignKey')(related_name='sentry_owned_project_set', null=True, to=orm['sentry.User']),
+                      keep_default=False)
+
+
+        # Changing field 'Project.team'
+        db.alter_column('sentry_project', 'team_id', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.Team'], null=True))
+
+    models = {
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': "orm['sentry.AlertRelatedGroup']", 'to': "orm['sentry.Group']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Alert']"}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('django.db.models.fields.IntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'),)", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'type': ('django.db.models.fields.PositiveIntegerField', [], {'default': '50'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_orgmember_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'),)", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'values_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'team_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.TeamMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '50'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index aa10546e7f..c06b7319bd 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -29,9 +29,6 @@ class Project(Model):
     """
     Projects are permission based namespaces which generally
     are the top level entry point for all data.
-
-    A project may be owned by only a single team, and may or may not
-    have an owner (which is thought of as a project creator).
     """
     PLATFORM_CHOICES = tuple(
         (p, PLATFORM_TITLES.get(p, p.title()))
@@ -40,8 +37,7 @@ class Project(Model):
 
     slug = models.SlugField(null=True)
     name = models.CharField(max_length=200)
-    owner = models.ForeignKey(settings.AUTH_USER_MODEL, related_name="sentry_owned_project_set", null=True)
-    team = models.ForeignKey('sentry.Team', null=True)
+    team = models.ForeignKey('sentry.Team')
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
     status = BoundedPositiveIntegerField(default=0, choices=(
@@ -60,7 +56,7 @@ class Project(Model):
         db_table = 'sentry_project'
         unique_together = (('team', 'slug'),)
 
-    __repr__ = sane_repr('team_id', 'slug', 'owner_id')
+    __repr__ = sane_repr('team_id', 'slug')
 
     def __unicode__(self):
         return u'%s (%s)' % (self.name, self.slug)
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 64d8149714..0287fdb7b4 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -76,14 +76,12 @@ class User(Model, AbstractBaseUser):
     def merge_to(from_user, to_user):
         # TODO: we could discover relations automatically and make this useful
         from sentry.models import (
-            GroupBookmark, Project, ProjectKey, Team, TeamMember, UserOption)
+            GroupBookmark, ProjectKey, Team, TeamMember, UserOption)
 
         for obj in ProjectKey.objects.filter(user=from_user):
             obj.update(user=to_user)
         for obj in TeamMember.objects.filter(user=from_user):
             obj.update(user=to_user)
-        for obj in Project.objects.filter(owner=from_user):
-            obj.update(owner=to_user)
         for obj in Team.objects.filter(owner=from_user):
             obj.update(owner=to_user)
         for obj in GroupBookmark.objects.filter(user=from_user):
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index a16b4f07d0..48d9d4f7f5 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -77,7 +77,6 @@ def create_default_project(id, name, slug, verbosity=2, **kwargs):
         public=False,
         name=name,
         slug=slug,
-        owner=user,
         team=team,
         **kwargs
     )
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index e75dd786c1..92c0cdbf57 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -53,7 +53,6 @@ class Fixtures(object):
             name='Bar',
             slug='bar',
             team=self.team,
-            owner=self.user,
         )
 
     @fixture
@@ -96,8 +95,6 @@ class Fixtures(object):
             kwargs['slug'] = slugify(six.text_type(kwargs['name']))
         if not kwargs.get('team'):
             kwargs['team'] = self.team
-        if not kwargs.get('owner'):
-            kwargs['owner'] = kwargs['team'].owner
 
         return Project.objects.create(**kwargs)
 
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index e6a43daa89..1c5609e715 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -134,7 +134,6 @@ def create_new_user(request):
 
         if form.cleaned_data['create_project']:
             project = Project.objects.create(
-                owner=user,
                 name='%s\'s New Project' % user.username.capitalize()
             )
             member = project.team.member_set.get(user=user)
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 68effdbdec..bdf00baa03 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -90,9 +90,6 @@ class TeamSettingsView(TeamView):
                         'type': TeamMemberType.ADMIN,
                     }
                 )
-                team.project_set.update(
-                    owner=team.owner,
-                )
 
             messages.add_message(request, messages.SUCCESS,
                 _('Changes to your team were saved.'))
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 792cc865ef..59da41d807 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -15,7 +15,7 @@ from gzip import GzipFile
 from exam import fixture
 from raven import Client
 
-from sentry.models import Group, Event, User
+from sentry.models import Group, Event
 from sentry.testutils import TestCase
 from sentry.testutils.helpers import get_auth_header
 from sentry.utils.compat import StringIO
@@ -75,8 +75,7 @@ class RavenIntegrationTest(TestCase):
     happen between Raven <--> Sentry over HTTP communication.
     """
     def setUp(self):
-        self.user = User.objects.create(username='coreapi')
-        self.project = self.create_project(owner=self.user, slug='bar')
+        self.project = self.create_project(slug='bar')
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create(user=self.user)[0]
 
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index 828c68ca3a..76f29ee29b 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -9,8 +9,8 @@ class ProjectReleasesTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        project1 = self.create_project(owner=self.user, name='foo')
-        project2 = self.create_project(owner=self.user, name='bar')
+        project1 = self.create_project(name='foo')
+        project2 = self.create_project(name='bar')
 
         release1 = Release.objects.create(
             project=project1,
diff --git a/tests/sentry/api/endpoints/test_project_stats.py b/tests/sentry/api/endpoints/test_project_stats.py
index 0e76e2e697..1f1da47cf2 100644
--- a/tests/sentry/api/endpoints/test_project_stats.py
+++ b/tests/sentry/api/endpoints/test_project_stats.py
@@ -8,8 +8,8 @@ class ProjectStatsTest(APITestCase):
     def test_simple(self):
         self.login_as(user=self.user)
 
-        project1 = self.create_project(owner=self.user, name='foo')
-        project2 = self.create_project(owner=self.user, name='bar')
+        project1 = self.create_project(name='foo')
+        project2 = self.create_project(name='bar')
 
         tsdb.incr(tsdb.models.project, project1.id, count=3)
         tsdb.incr(tsdb.models.project, project2.id, count=5)
diff --git a/tests/sentry/api/endpoints/test_team_project_index.py b/tests/sentry/api/endpoints/test_team_project_index.py
index 4806c2638c..55524d6f38 100644
--- a/tests/sentry/api/endpoints/test_team_project_index.py
+++ b/tests/sentry/api/endpoints/test_team_project_index.py
@@ -37,5 +37,4 @@ class TeamProjectCreateTest(APITestCase):
         project = Project.objects.get(id=resp.data['id'])
         assert project.name == 'hello world'
         assert project.slug == 'foobar'
-        assert project.owner == self.user
         assert project.team == team
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 1a08cad023..c01c24a4c6 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -7,7 +7,6 @@ import mock
 from datetime import datetime
 from uuid import UUID
 
-from sentry.models import User
 from sentry.exceptions import InvalidTimestamp
 from sentry.coreapi import (
     extract_auth_vars, project_from_auth_vars, APIForbidden, ensure_has_ip,
@@ -18,8 +17,7 @@ from sentry.testutils import TestCase
 
 class BaseAPITest(TestCase):
     def setUp(self):
-        self.user = User.objects.create(username='coreapi')
-        self.project = self.create_project(owner=self.user, slug='bar')
+        self.project = self.create_project(slug='bar')
         self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
         self.pk = self.project.key_set.get_or_create(user=self.user)[0]
 
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 9e73e4096c..fa09aa2bc0 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -45,7 +45,7 @@ class ProjectManagerTest(TestCase):
     def setUp(self):
         self.project = Project.objects.get()
         self.project.update(public=True)
-        self.project2 = Project.objects.create(name='Test', slug='test', owner=self.user, public=False)
+        self.project2 = self.create_project(name='Test', slug='test', public=False)
 
     @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
     def test_does_not_include_public_projects(self):
@@ -75,7 +75,7 @@ class TeamManagerTest(TestCase):
         user = User.objects.create(username='foo')
         user2 = User.objects.create(username='bar')
         user3 = User.objects.create(username='baz')
-        team = Team.objects.create(name='Test', owner=user)
+        team = self.create_team(name='Test', owner=user)
         group = AccessGroup.objects.create(name='Test', type=MEMBER_USER, team=team)
         group.members.add(user2)
 
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index ffeb242adf..c6870910a4 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -13,7 +13,8 @@ from sentry.db.models.fields.node import NodeData
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
     GroupTagValue, TagValue, PendingTeamMember,
-    LostPasswordHash, User)
+    LostPasswordHash
+)
 from sentry.testutils import TestCase
 from sentry.utils.compat import pickle
 from sentry.utils.strings import compress
@@ -26,7 +27,7 @@ class ProjectTest(TestCase):
         self.project = Project.objects.get(id=1)
 
     def test_migrate(self):
-        project2 = Project.objects.create(name='Test')
+        project2 = self.create_project(name='Test')
         self.project.merge_to(project2)
 
         self.assertFalse(Project.objects.filter(pk=1).exists())
@@ -67,15 +68,9 @@ class ProjectKeyTest(TestCase):
         with self.settings(SENTRY_ENDPOINT='http://endpoint.com'):
             self.assertEquals(key.get_dsn(), 'http://public:secret@endpoint.com/1')
 
-    def test_key_is_created_for_project_with_existing_team(self):
-        user = User.objects.create(username='admin')
-        team = Team.objects.create(name='Test', slug='test', owner=user)
-        project = Project.objects.create(name='Test', slug='test', owner=user, team=team)
-        assert project.key_set.filter(user__isnull=True).exists() is True
-
-    def test_key_is_created_for_project_with_new_team(self):
-        user = User.objects.create(username='admin')
-        project = Project.objects.create(name='Test', slug='test', owner=user)
+    def test_key_is_created_for_project(self):
+        team = self.create_team(owner=self.user)
+        project = Project.objects.create(name='Test', slug='test', team=team)
         assert project.key_set.filter(user__isnull=True).exists() is True
 
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index be6c49e16c..9d2e2910c2 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -155,9 +155,9 @@ class MailPluginTest(TestCase):
             self.team.name, self.project.name)
 
     def test_get_sendable_users(self):
-        from sentry.models import Project, UserOption, User
+        from sentry.models import UserOption, User
 
-        user = User.objects.create(username='foo', email='foo@example.com', is_active=True)
+        user = self.user
         user2 = User.objects.create(username='baz', email='baz@example.com', is_active=True)
         user3 = User.objects.create(username='baz2', email='bar@example.com', is_active=True)
 
@@ -166,7 +166,7 @@ class MailPluginTest(TestCase):
         # user not in any groups
         User.objects.create(username='bar2', email='bar@example.com', is_active=True)
 
-        project = Project.objects.create(name='Test', slug='test', owner=user)
+        project = self.create_project(name='Test', slug='test')
         project.team.member_set.get_or_create(user=user)
         project.team.member_set.get_or_create(user=user2)
 
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index 7f04c09b8f..f587e87f7e 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -4,7 +4,9 @@ from __future__ import absolute_import
 
 from django.conf import settings
 
-from sentry.models import Organization, Project, ProjectKey, Team, User
+from sentry.models import (
+    Organization, Project, ProjectKey, Team, TeamMemberType, User
+)
 from sentry.receivers.core import create_default_projects
 from sentry.testutils import TestCase
 
@@ -21,7 +23,6 @@ class CreateDefaultProjectsTest(TestCase):
         create_default_projects(created_models=[Project])
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
-        assert project.owner == user
         assert project.public is False
         assert project.name == 'Backend'
         assert project.slug == 'backend'
@@ -47,7 +48,6 @@ class CreateDefaultProjectsTest(TestCase):
         user = User.objects.get(username='sentry')
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
-        assert project.owner == user
         assert project.public is False
         assert project.name == 'Backend'
         assert project.slug == 'backend'
@@ -62,3 +62,14 @@ class CreateDefaultProjectsTest(TestCase):
 
         # ensure that we dont hit an error here
         create_default_projects(created_models=[Project])
+
+
+class CreateTeamMemberForOwner(TestCase):
+    def test_simple(self):
+        user = User.objects.create(username='foo')
+        team = Team.objects.create(name='foo', slug='foo', owner=user,
+                                   organization=self.organization)
+        assert team.member_set.filter(
+            user=user,
+            type=TeamMemberType.ADMIN,
+        ).exists()
diff --git a/tests/sentry/signals/__init__.py b/tests/sentry/signals/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/signals/tests.py b/tests/sentry/signals/tests.py
deleted file mode 100644
index d36c2ace63..0000000000
--- a/tests/sentry/signals/tests.py
+++ /dev/null
@@ -1,19 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, Team, User
-from sentry.testutils import TestCase
-
-
-class SentrySignalTest(TestCase):
-    def test_create_team_for_project(self):
-        user = User.objects.create(username='foo')
-        project = Project.objects.create(name='foo', owner=user, slug='foo')
-        self.assertNotEquals(project.team, None)
-
-    def test_create_team_member_for_owner(self):
-        user = User.objects.create(username='foo')
-        team = Team.objects.create(name='foo', slug='foo', owner=user)
-        self.assertTrue(team.member_set.filter(user=user, type=MEMBER_OWNER).exists())
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 9c50e0806e..4583def1bb 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -8,10 +8,9 @@ from sentry.testutils import TestCase
 class DeleteTeamTest(TestCase):
     @patch.object(delete_team, 'delay')
     def test_simple(self, delete_team_delay):
-        user = self.create_user(email='foo@example.com')
-        team = Team.objects.create(owner=user, name='test', slug='test')
-        project1 = Project.objects.create(team=team, name='test1', slug='test1')
-        project2 = Project.objects.create(team=team, name='test2', slug='test2')
+        team = self.create_team(name='test', slug='test')
+        project1 = self.create_project(team=team, name='test1', slug='test1')
+        project2 = self.create_project(team=team, name='test2', slug='test2')
 
         # remove relations from team so delete_team tests are faster
         team.member_set.all().delete()
diff --git a/tests/sentry/utils/query/tests.py b/tests/sentry/utils/query/tests.py
index 6e0ee55ec6..246f05b51a 100644
--- a/tests/sentry/utils/query/tests.py
+++ b/tests/sentry/utils/query/tests.py
@@ -9,10 +9,10 @@ class MergeIntoTest(TestCase):
     def test_all_the_things(self):
         user_1 = User.objects.create(username='original')
         user_2 = User.objects.create(username='new')
-        team_1 = Team.objects.create(owner=user_1)
-        team_2 = Team.objects.create(owner=user_2)
-        project_1 = Project.objects.create(owner=user_1, team=team_1)
-        project_2 = Project.objects.create(owner=user_2, team=team_2)
+        team_1 = self.create_team(owner=user_1, slug='t1')
+        team_2 = self.create_team(owner=user_2, slug='t2')
+        project_1 = Project.objects.create(team=team_1)
+        project_2 = Project.objects.create(team=team_2)
         ag = AccessGroup.objects.create(team=team_2)
         ag.members.add(user_1)
         ag.members.add(user_2)
@@ -21,8 +21,6 @@ class MergeIntoTest(TestCase):
 
         assert Team.objects.get(id=team_1.id).owner == user_2
         assert Team.objects.get(id=team_2.id).owner == user_2
-        assert Project.objects.get(id=project_1.id).owner == user_2
-        assert Project.objects.get(id=project_2.id).owner == user_2
         assert list(ag.members.all()) == [user_2]
 
         # make sure we didn't remove the instance
