commit 11d15f5ab0f36a171f226012079e51a247409670
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 23 17:19:52 2010 -0700

    Only show the 10 most common urls and servers. Add additional panes for viewing all urls/servers

diff --git a/sentry/media/styles/global.css b/sentry/media/styles/global.css
index 5da8b04d9d..4f0b2b3ec7 100644
--- a/sentry/media/styles/global.css
+++ b/sentry/media/styles/global.css
@@ -525,4 +525,5 @@ pre {
 }
 #group_nav .active a {
     background: #ddd;
-}
\ No newline at end of file
+}
+h2 .morelink { text-decoration: none; }
\ No newline at end of file
diff --git a/sentry/models.py b/sentry/models.py
index 43f6a31db8..a78706cfbc 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -12,6 +12,7 @@ import warnings
 from django.conf import settings as dj_settings
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models, transaction
+from django.db.models import Count
 from django.db.models.signals import post_syncdb
 from django.http import Http404
 from django.utils.encoding import smart_unicode
@@ -191,6 +192,22 @@ class GroupedMessage(MessageBase):
         send_mail(dj_settings.EMAIL_SUBJECT_PREFIX + subject, body,
                   dj_settings.SERVER_EMAIL, settings.ADMINS,
                   fail_silently=fail_silently)
+    
+    @property
+    def unique_urls(self):
+        return self.message_set.filter(url__isnull=False)\
+                   .values_list('url', 'logger', 'view', 'checksum')\
+                   .annotate(times_seen=Count('url'))\
+                   .values('url', 'times_seen')\
+                   .order_by('-times_seen')
+
+    @property
+    def unique_servers(self):
+        return self.message_set.filter(server_name__isnull=False)\
+                   .values_list('server_name', 'logger', 'view', 'checksum')\
+                   .annotate(times_seen=Count('server_name'))\
+                   .values('server_name', 'times_seen')\
+                   .order_by('-times_seen')
 
 class Message(MessageBase):
     group           = models.ForeignKey(GroupedMessage, blank=True, null=True, related_name="message_set")
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/group/details.html
index c760817776..f2f1b67c8b 100644
--- a/sentry/templates/sentry/group/details.html
+++ b/sentry/templates/sentry/group/details.html
@@ -9,10 +9,10 @@
 {% block content %}
 	<div id="sidebar">
 		<a href="{% url sentry %}">&laquo; back to list</a>
-		{% if chart_url %}
+		{% if group|can_chart %}
 			<h2>Last 24 Hours</h2>
 
-			<img src="{{ chart_url }}" class="chart" alt="chart"/>
+			<img src="{{ group|chart_url }}" class="chart" alt="chart"/>
 		{% endif %}
 	
 		<h2>Meta</h2>
@@ -26,25 +26,29 @@
 			<dd>{{ group.get_status_display|title }}</dd>
 		</dl>
 
-		{% if unique_servers %}
-			<h2>Servers</h2>
+		{% with group.unique_servers|slice:"10" as unique_servers %}
+			{% if unique_servers %}
+				<h2>Servers <a href="{% url sentry-group-servers group.pk %}" class="morelink">&raquo;</a></h2>
 
-			<ul class="server-list">
-				{% for server, priority in unique_servers|with_priority:"times_seen" %}
-					<li class="priority-{{ priority }}"><span class="count">{{ server.times_seen }}</span> {{ server.server_name }}</li>
-				{% endfor %}
-			</ul>
-		{% endif %}
+				<ul class="server-list">
+					{% for server, priority in unique_servers|with_priority:"times_seen" %}
+						<li class="priority-{{ priority }}"><span class="count">{{ server.times_seen }}</span> {{ server.server_name }}</li>
+					{% endfor %}
+				</ul>
+			{% endif %}
+		{% endwith %}
 
-		{% if unique_urls %}
-			<h2>URLs</h2>
+		{% with group.unique_urls|slice:"10" as unique_urls %}
+			{% if unique_urls %}
+				<h2>URLs <a href="{% url sentry-group-urls group.pk %}" class="morelink">&raquo;</a></h2>
 
-			<ul class="url-list">
-				{% for link, priority in unique_urls|with_priority:"times_seen" %}
-					<li class="priority-{{ priority }}"><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
-				{% endfor %}
-			</ul>
-		{% endif %}
+				<ul class="url-list">
+					{% for link, priority in unique_urls|with_priority:"times_seen" %}
+						<li class="priority-{{ priority }}"><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
+					{% endfor %}
+				</ul>
+			{% endif %}
+		{% endwith %}
 	</div>
 
 	<div id="body" class="with-sidebar">
@@ -64,6 +68,8 @@
 		<ul class="nav" id="group_nav">
 			<li{% if not page %} class="active"{% endif %}><a href="{% url sentry-group group.pk %}">Details</a></li>
 			<li{% ifequal page 'messages' %} class="active"{% endifequal %}><a href="{% url sentry-group-messages group.pk %}">Messages</a></li>
+			<li{% ifequal page 'urls' %} class="active"{% endifequal %}><a href="{% url sentry-group-urls group.pk %}">URLs</a></li>
+			<li{% ifequal page 'servers' %} class="active"{% endifequal %}><a href="{% url sentry-group-servers group.pk %}">Servers</a></li>
 		</ul>
 		
 		{% block inner %}
diff --git a/sentry/templates/sentry/group/server_list.html b/sentry/templates/sentry/group/server_list.html
new file mode 100644
index 0000000000..30529062ea
--- /dev/null
+++ b/sentry/templates/sentry/group/server_list.html
@@ -0,0 +1,19 @@
+{% extends "sentry/group/details.html" %}
+
+{% load paging_extras %}
+
+{% block inner %}
+	<h2>Server List</h2>
+	{% paginate group.unique_servers from request as server_list per_page 25 %}
+	<div class="clearfix">
+		{{ server_list.paging }}
+	</div>
+	<ul class="server-list">
+		{% for server in server_list.objects %}
+			<li><span class="count">{{ server.times_seen }}</span> {{ server.server_name }}</li>
+		{% endfor %}
+	</ul>
+	<div class="clearfix">
+		{{ server_list.paging }}
+	</div>
+{% endblock %}
\ No newline at end of file
diff --git a/sentry/templates/sentry/group/url_list.html b/sentry/templates/sentry/group/url_list.html
new file mode 100644
index 0000000000..b08252245b
--- /dev/null
+++ b/sentry/templates/sentry/group/url_list.html
@@ -0,0 +1,19 @@
+{% extends "sentry/group/details.html" %}
+
+{% load paging_extras %}
+
+{% block inner %}
+	<h2>URL List</h2>
+	{% paginate group.unique_urls from request as url_list per_page 25 %}
+	<div class="clearfix">
+		{{ url_list.paging }}
+	</div>
+	<ul class="url-list">
+		{% for link in url_list.objects %}
+			<li><span class="count">{{ link.times_seen }}</span> <a href="{{ link.url }}">{{ link.url }}</a></li>
+		{% endfor %}
+	</ul>
+	<div class="clearfix">
+		{{ url_list.paging }}
+	</div>
+{% endblock %}
\ No newline at end of file
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index d6c0dfe8d9..7ea018e17a 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -1,6 +1,14 @@
 from django import template
 from django.utils import simplejson
 
+from sentry.helpers import get_db_engine
+
+import datetime
+try:
+    from pygooglechart import SimpleLineChart
+except ImportError:
+    SimpleLineChart = None
+
 register = template.Library()
 
 def is_dict(value):
@@ -33,4 +41,35 @@ with_priority = register.filter(with_priority)
 
 def num_digits(value):
     return len(str(value))
-num_digits = register.filter(num_digits)
\ No newline at end of file
+num_digits = register.filter(num_digits)
+
+def can_chart(group):
+    engine = get_db_engine()
+    return SimpleLineChart and not engine.startswith('sqlite')
+can_chart = register.filter(can_chart)
+
+def chart_url(group):
+    today = datetime.datetime.now()
+
+    chart_qs = group.message_set.all()\
+                      .filter(datetime__gte=today - datetime.timedelta(hours=24))\
+                      .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
+                      .annotate(num=Count('id')).values_list('hour', 'num')
+
+    rows = dict(chart_qs)
+    if rows:
+        max_y = max(rows.values())
+    else:
+        max_y = 1
+
+    chart = SimpleLineChart(300, 80, y_range=[0, max_y])
+    chart.add_data([max_y]*30)
+    chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
+    chart.add_data([0]*30)
+    chart.fill_solid(chart.BACKGROUND, 'eeeeee')
+    chart.add_fill_range('eeeeee', 0, 1)
+    chart.add_fill_range('e0ebff', 1, 2)
+    chart.set_colours(['eeeeee', '999999', 'eeeeee'])
+    chart.set_line_style(1, 1)
+    return chart.get_url()
+chart_url = register.filter(chart_url)
\ No newline at end of file
diff --git a/sentry/urls.py b/sentry/urls.py
index b1613df330..fff3b8b03b 100644
--- a/sentry/urls.py
+++ b/sentry/urls.py
@@ -30,6 +30,8 @@ urlpatterns = patterns('',
     url(r'^group/(\d+)$', views.group, name='sentry-group'),
     url(r'^group/(\d+)/messages$', views.group_message_list, name='sentry-group-messages'),
     url(r'^group/(\d+)/messages/(\d+)$', views.group_message_details, name='sentry-group-message'),
+    url(r'^group/(\d+)/urls$', views.group_urls, name='sentry-group-urls'),
+    url(r'^group/(\d+)/servers$', views.group_servers, name='sentry-group-servers'),
 
     url(r'^$', views.index, name='sentry'),
 )
diff --git a/sentry/views.py b/sentry/views.py
index 5079300d79..015aabdd92 100644
--- a/sentry/views.py
+++ b/sentry/views.py
@@ -8,11 +8,6 @@ from math import log
 import logging
 import zlib
 
-try:
-    from pygooglechart import SimpleLineChart
-except ImportError:
-    SimpleLineChart = None
-
 from django.conf import settings as dj_settings
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
@@ -27,7 +22,6 @@ from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
 
 from sentry import settings
-from sentry.helpers import get_db_engine
 from sentry.models import GroupedMessage, Message
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.reporter import ImprovedExceptionReporter
@@ -221,10 +215,6 @@ def group(request, group_id):
     elif group.traceback:
         traceback = mark_safe('<pre>%s</pre>' % (group.traceback,))
     
-    unique_urls = message_list.filter(url__isnull=False).values_list('url', 'logger', 'view', 'checksum').annotate(times_seen=Count('url')).values('url', 'times_seen').order_by('-times_seen')
-    
-    unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen').order_by('-times_seen')
-
     def iter_data(obj):
         for k, v in obj.data.iteritems():
             if k.startswith('_') or k in ['url']:
@@ -233,32 +223,6 @@ def group(request, group_id):
     
     json_data = iter_data(obj)
     
-    # TODO: this should be a template tag
-    engine = get_db_engine()
-    if SimpleLineChart and not engine.startswith('sqlite'):
-        today = datetime.datetime.now()
-
-        chart_qs = message_list\
-                          .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                          .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                          .annotate(num=Count('id')).values_list('hour', 'num')
-
-        rows = dict(chart_qs)
-        if rows:
-            max_y = max(rows.values())
-        else:
-            max_y = 1
-
-        chart = SimpleLineChart(300, 80, y_range=[0, max_y])
-        chart.add_data([max_y]*30)
-        chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
-        chart.add_data([0]*30)
-        chart.fill_solid(chart.BACKGROUND, 'eeeeee')
-        chart.add_fill_range('eeeeee', 0, 1)
-        chart.add_fill_range('e0ebff', 1, 2)
-        chart.set_colours(['eeeeee', '999999', 'eeeeee'])
-        chart.set_line_style(1, 1)
-        chart_url = chart.get_url()
     
     return render_to_response('sentry/group/details.html', locals())
 
@@ -268,36 +232,6 @@ def group_message_list(request, group_id):
 
     message_list = group.message_set.all().order_by('-datetime')
     
-    unique_urls = message_list.filter(url__isnull=False).values_list('url', 'logger', 'view', 'checksum').annotate(times_seen=Count('url')).values('url', 'times_seen').order_by('-times_seen')
-    
-    unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen').order_by('-times_seen')
-    
-    engine = get_db_engine()
-    if SimpleLineChart and not engine.startswith('sqlite'):
-        today = datetime.datetime.now()
-
-        chart_qs = message_list\
-                          .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                          .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                          .annotate(num=Count('id')).values_list('hour', 'num')
-
-        rows = dict(chart_qs)
-        if rows:
-            max_y = max(rows.values())
-        else:
-            max_y = 1
-
-        chart = SimpleLineChart(300, 80, y_range=[0, max_y])
-        chart.add_data([max_y]*30)
-        chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
-        chart.add_data([0]*30)
-        chart.fill_solid(chart.BACKGROUND, 'eeeeee')
-        chart.add_fill_range('eeeeee', 0, 1)
-        chart.add_fill_range('e0ebff', 1, 2)
-        chart.set_colours(['eeeeee', '999999', 'eeeeee'])
-        chart.set_line_style(1, 1)
-        chart_url = chart.get_url()
-    
     page = 'messages'
     
     return render_to_response('sentry/group/message_list.html', locals())
@@ -310,10 +244,6 @@ def group_message_details(request, group_id, message_id):
 
     message = get_object_or_404(group.message_set, pk=message_id)
     
-    unique_urls = message_list.filter(url__isnull=False).values_list('url', 'logger', 'view', 'checksum').annotate(times_seen=Count('url')).values('url', 'times_seen').order_by('-times_seen')
-    
-    unique_servers = message_list.filter(server_name__isnull=False).values_list('server_name', 'logger', 'view', 'checksum').annotate(times_seen=Count('server_name')).values('server_name', 'times_seen').order_by('-times_seen')
-    
     if '__sentry__' in message.data:
         module, args, frames = message.data['__sentry__']['exc']
         message.class_name = str(message.class_name)
@@ -336,36 +266,26 @@ def group_message_details(request, group_id, message_id):
     
     json_data = iter_data(message)
     
-    engine = get_db_engine()
-    if SimpleLineChart and not engine.startswith('sqlite'):
-        today = datetime.datetime.now()
-
-        chart_qs = message_list\
-                          .filter(datetime__gte=today - datetime.timedelta(hours=24))\
-                          .extra(select={'hour': 'extract(hour from datetime)'}).values('hour')\
-                          .annotate(num=Count('id')).values_list('hour', 'num')
-
-        rows = dict(chart_qs)
-        if rows:
-            max_y = max(rows.values())
-        else:
-            max_y = 1
-
-        chart = SimpleLineChart(300, 80, y_range=[0, max_y])
-        chart.add_data([max_y]*30)
-        chart.add_data([rows.get((today-datetime.timedelta(hours=d)).hour, 0) for d in range(0, 24)][::-1])
-        chart.add_data([0]*30)
-        chart.fill_solid(chart.BACKGROUND, 'eeeeee')
-        chart.add_fill_range('eeeeee', 0, 1)
-        chart.add_fill_range('e0ebff', 1, 2)
-        chart.set_colours(['eeeeee', '999999', 'eeeeee'])
-        chart.set_line_style(1, 1)
-        chart_url = chart.get_url()
-    
     page = 'messages'
     
     return render_to_response('sentry/group/message.html', locals())
 
+@login_required
+def group_urls(request, group_id):
+    group = get_object_or_404(GroupedMessage, pk=group_id)
+
+    page = 'urls'
+    
+    return render_to_response('sentry/group/url_list.html', locals())
+
+@login_required
+def group_servers(request, group_id):
+    group = get_object_or_404(GroupedMessage, pk=group_id)
+
+    page = 'servers'
+    
+    return render_to_response('sentry/group/server_list.html', locals())
+
 @csrf_exempt
 def store(request):
     key = request.POST.get('key')
