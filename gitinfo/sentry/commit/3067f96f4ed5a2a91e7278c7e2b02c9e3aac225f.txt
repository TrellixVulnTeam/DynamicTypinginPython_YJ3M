commit 3067f96f4ed5a2a91e7278c7e2b02c9e3aac225f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 22 21:29:15 2011 -0800

    Pep8

diff --git a/sentry/conf/server.py b/sentry/conf/server.py
index 84d6c77144..23adfd1eb6 100644
--- a/sentry/conf/server.py
+++ b/sentry/conf/server.py
@@ -19,9 +19,7 @@ import sys
 DEBUG = False
 TEMPLATE_DEBUG = True
 
-ADMINS = (
-    # ('Your Name', 'your_email@domain.com'),
-)
+ADMINS = ()
 
 INTERNAL_IPS = ('127.0.0.1',)
 
@@ -33,12 +31,12 @@ sys.path.insert(0, os.path.abspath(os.path.join(PROJECT_ROOT, '..')))
 
 DATABASES = {
     'default': {
-        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
-        'NAME': 'sentry.db',                      # Or path to database file if using sqlite3.
-        'USER': '',                      # Not used with sqlite3.
-        'PASSWORD': '',                  # Not used with sqlite3.
-        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
-        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'sentry.db',
+        'USER': '',
+        'PASSWORD': '',
+        'HOST': '',
+        'PORT': '',
     }
 }
 
diff --git a/sentry/conf/settings.py b/sentry/conf/settings.py
index 310df91aeb..2a6fd3a6d3 100644
--- a/sentry/conf/settings.py
+++ b/sentry/conf/settings.py
@@ -36,6 +36,7 @@ if locals().get('REMOTE_URL'):
 if locals().get('REMOTE_TIMEOUT'):
     TIMEOUT = REMOTE_TIMEOUT
 
+
 def configure(**kwargs):
     for k, v in kwargs.iteritems():
         if k.upper() != k:
diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index 5378fea7c5..5f67218475 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -9,6 +9,7 @@ sentry.plugins
 # Based on http://martyalchin.com/2008/jan/10/simple-plugin-framework/
 from django.core.urlresolvers import reverse
 
+
 class PluginMount(type):
     def __init__(cls, name, bases, attrs):
         if not hasattr(cls, 'plugins'):
@@ -24,7 +25,8 @@ class PluginMount(type):
             cls.slug = getattr(cls, 'slug', None) or cls.title.replace(' ', '-').lower()
             cls.plugins[cls.slug] = cls
 
-class ActionProvider:
+
+class ActionProvider(object):
     """
     Base interface for adding action providers.
 
@@ -52,7 +54,8 @@ class ActionProvider:
 
         return self.perform(request)
 
-class GroupActionProvider:
+
+class GroupActionProvider(object):
     # TODO: should be able to specify modal support
 
     __metaclass__ = PluginMount
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 8830acbf9a..5279b79f99 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -23,14 +23,17 @@ import base64
 import urllib
 import urllib2
 
+
 class RedmineIssue(models.Model):
     group = models.ForeignKey(Group)
     issue_id = models.PositiveIntegerField()
 
+
 class RedmineIssueForm(forms.Form):
     subject = forms.CharField(max_length=200)
     description = forms.CharField(widget=forms.Textarea())
 
+
 class CreateRedmineIssue(GroupActionProvider):
     title = 'Create Redmine Issue'
 
@@ -93,11 +96,13 @@ class CreateRedmineIssue(GroupActionProvider):
                 'description': description,
             })
 
-        global_errors = form.errors.get('__all__')
-
-        BASE_TEMPLATE = "sentry/groups/details.html"
-
-        context = locals()
+        context = {
+            'request': request,
+            'group': group,
+            'form': form,
+            'global_errors': form.errors.get('__all__'),
+            'BASE_TEMPLATE': 'sentry/groups/details.html',
+        }
         context.update(csrf(request))
 
         return render_to_response('sentry/plugins/redmine/create_issue.html', context)
diff --git a/sentry/plugins/sentry_redmine/tests/__init__.py b/sentry/plugins/sentry_redmine/tests/__init__.py
index 119a664ff4..60af91c22c 100644
--- a/sentry/plugins/sentry_redmine/tests/__init__.py
+++ b/sentry/plugins/sentry_redmine/tests/__init__.py
@@ -17,6 +17,7 @@ from sentry.models import Group
 from sentry.plugins.sentry_redmine import conf
 from sentry.plugins.sentry_redmine.models import CreateRedmineIssue, RedmineIssue
 
+
 class CreateIssueTest(TestCase):
     fixtures = ['sentry/plugins/sentry_redmine/tests/fixtures/regression.json']
     urls = 'sentry.web.urls'
@@ -71,4 +72,4 @@ class CreateIssueTest(TestCase):
         self.assertTrue(RedmineIssue.objects.filter(group=group).exists())
 
         group = Group.objects.get(pk=group.pk)
-        self.assertTrue(group.data['redmine']['issue_id'] > 0)
\ No newline at end of file
+        self.assertTrue(group.data['redmine']['issue_id'] > 0)
diff --git a/sentry/plugins/sentry_servers/models.py b/sentry/plugins/sentry_servers/models.py
index 22f01b0129..4bcbbc96fa 100644
--- a/sentry/plugins/sentry_servers/models.py
+++ b/sentry/plugins/sentry_servers/models.py
@@ -11,13 +11,14 @@ from django.template.loader import render_to_string
 
 from sentry.plugins import GroupActionProvider
 
+
 class ServerGroupPanel(GroupActionProvider):
     """Adds additional support for showing information about servers including:
-    
+
     * A panel which shows all servers a message was seen on.
     * A sidebar module which shows the servers most actively seen on.
     """
-    
+
     title = 'Servers'
 
     def panels(self, request, panel_list, project, group):
@@ -25,7 +26,15 @@ class ServerGroupPanel(GroupActionProvider):
         return panel_list
 
     def view(self, request, project, group):
-        return render_to_response('sentry/plugins/sentry_servers/index.html', locals())
-    
+        return render_to_response('sentry/plugins/sentry_servers/index.html', {
+            'request': request,
+            'project': project,
+            'group': group,
+        })
+
     def widget(self, request, project, group):
-        return render_to_string('sentry/plugins/sentry_servers/widget.html', locals())
\ No newline at end of file
+        return render_to_string('sentry/plugins/sentry_servers/widget.html', {
+            'request': request,
+            'project': project,
+            'group': group,
+        })
diff --git a/sentry/plugins/sentry_sites/models.py b/sentry/plugins/sentry_sites/models.py
index 80539679a4..abe565a02e 100644
--- a/sentry/plugins/sentry_sites/models.py
+++ b/sentry/plugins/sentry_sites/models.py
@@ -11,13 +11,14 @@ from django.template.loader import render_to_string
 
 from sentry.plugins import GroupActionProvider
 
+
 class SiteGroupPanel(GroupActionProvider):
     """Adds additional support for showing information about sites including:
-    
+
     * A panel which shows all sites a message was seen on.
     * A sidebar module which shows the sites most actively seen on.
     """
-    
+
     title = 'Sites'
 
     def panels(self, request, panel_list, project, group):
@@ -25,7 +26,15 @@ class SiteGroupPanel(GroupActionProvider):
         return panel_list
 
     def view(self, request, project, group):
-        return render_to_response('sentry/plugins/sentry_sites/index.html', locals())
-    
+        return render_to_response('sentry/plugins/sentry_sites/index.html', {
+            'request': request,
+            'project': project,
+            'group': group,
+        })
+
     def widget(self, request, project, group):
-        return render_to_string('sentry/plugins/sentry_sites/widget.html', locals())
\ No newline at end of file
+        return render_to_string('sentry/plugins/sentry_sites/widget.html', {
+            'request': request,
+            'project': project,
+            'group': group,
+        })
diff --git a/sentry/plugins/sentry_urls/models.py b/sentry/plugins/sentry_urls/models.py
index 70662531c7..3cb2c5d7a2 100644
--- a/sentry/plugins/sentry_urls/models.py
+++ b/sentry/plugins/sentry_urls/models.py
@@ -11,13 +11,14 @@ from django.template.loader import render_to_string
 
 from sentry.plugins import GroupActionProvider
 
+
 class ServerUrlsPanel(GroupActionProvider):
     """Adds additional support for showing information about urls including:
-    
+
     * A panel which shows all urls a message was seen on.
     * A sidebar module which shows the urls most actively seen on.
     """
-    
+
     title = 'URLs'
 
     def panels(self, request, panel_list, project, group):
@@ -25,7 +26,15 @@ class ServerUrlsPanel(GroupActionProvider):
         return panel_list
 
     def view(self, request, project, group):
-        return render_to_response('sentry/plugins/sentry_urls/index.html', locals())
-    
+        return render_to_response('sentry/plugins/sentry_urls/index.html', {
+            'request': request,
+            'project': project,
+            'group': group,
+        })
+
     def widget(self, request, project, group):
-        return render_to_string('sentry/plugins/sentry_urls/widget.html', locals())
\ No newline at end of file
+        return render_to_string('sentry/plugins/sentry_urls/widget.html', {
+            'request': request,
+            'project': project,
+            'group': group,
+        })
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index 7e9d8c4a09..b673ada365 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -16,6 +16,7 @@ import datetime
 
 register = template.Library()
 
+
 @register.filter
 def pprint(value, break_after=10):
     """A wrapper around pprint.pprint -- for debugging, really."""
@@ -23,13 +24,15 @@ def pprint(value, break_after=10):
 
     value = pformat(value).decode('utf-8', 'replace')
 
-    return u'\u200B'.join([value[i:i+break_after] for i in xrange(0, len(value), break_after)])
+    return u'\u200B'.join([value[i:(i + break_after)] for i in xrange(0, len(value), break_after)])
+
 
 # seriously Django?
 @register.filter
 def subtract(value, amount):
     return int(value) - int(amount)
 
+
 @register.filter
 def has_charts(group):
     from sentry.utils.charts import has_charts
@@ -39,14 +42,17 @@ def has_charts(group):
         db = 'default'
     return has_charts(db)
 
+
 @register.filter
 def as_sorted(value):
     return sorted(value)
 
+
 @register.filter
 def is_dict(value):
     return isinstance(value, dict)
 
+
 @register.filter
 def small_count(v):
     z = [
@@ -63,6 +69,7 @@ def small_count(v):
             return '%.1f%s' % (v / float(x), y)
     return v
 
+
 @register.filter
 def with_priority(result_list, key='score'):
     if result_list:
@@ -87,19 +94,23 @@ def with_priority(result_list, key='score'):
                 priority = 'verylow'
             yield result, priority
 
+
 @register.filter
 def num_digits(value):
     return len(str(value))
 
+
 @register.filter
 def to_json(data):
     return json.dumps(data)
 
+
 @register.simple_tag
 def sentry_version():
     import sentry
     return sentry.VERSION
 
+
 @register.filter
 def get_actions(group, request):
     action_list = []
@@ -109,6 +120,7 @@ def get_actions(group, request):
     for action in action_list:
         yield action[0], action[1], request.path == action[1]
 
+
 @register.filter
 def get_panels(group, request):
     panel_list = []
@@ -118,6 +130,7 @@ def get_panels(group, request):
     for panel in panel_list:
         yield panel[0], panel[1], request.path == panel[1]
 
+
 @register.filter
 def get_widgets(group, request):
     for cls in GroupActionProvider.plugins.itervalues():
@@ -126,6 +139,7 @@ def get_widgets(group, request):
         if resp:
             yield resp
 
+
 @register.filter
 def get_tags(group, request):
     tag_list = []
@@ -135,6 +149,7 @@ def get_tags(group, request):
     for tag in tag_list:
         yield tag
 
+
 @register.filter
 def timesince(value):
     from django.template.defaultfilters import timesince
@@ -149,6 +164,7 @@ def timesince(value):
         return _('Yesterday')
     return value + _(' ago')
 
+
 @register.filter(name='truncatechars')
 @stringfilter
 def truncatechars(value, arg):
@@ -159,13 +175,14 @@ def truncatechars(value, arg):
     """
     try:
         length = int(arg)
-    except ValueError: # Invalid literal for int().
-        return value # Fail silently.
+    except ValueError:  # Invalid literal for int().
+        return value  # Fail silently.
     if len(value) > length:
         return value[:length] + '...'
     return value
 truncatechars.is_safe = True
 
+
 # XXX: this is taken from django-paging so that we may render
 #      a custom template, and not worry about INSTALLED_APPS
 @tag(register, [Variable('queryset_or_list'),
@@ -183,4 +200,4 @@ def paginate(context, queryset_or_list, request, asvar, per_page=25, is_endless=
     if asvar:
         context[asvar] = result
         return ''
-    return result
\ No newline at end of file
+    return result
diff --git a/sentry/utils/manager.py b/sentry/utils/manager.py
index 39c1835cc6..b510a6a32e 100644
--- a/sentry/utils/manager.py
+++ b/sentry/utils/manager.py
@@ -23,6 +23,7 @@ from sentry.utils.compat.db import connections
 
 logger = logging.getLogger('sentry.errors')
 
+
 class ScoreClause(object):
     def __init__(self, group):
         self.group = group
@@ -49,21 +50,22 @@ class ScoreClause(object):
 def count_limit(count):
     # TODO: could we do something like num_to_store = max(math.sqrt(100*count)+59, 200) ?
     # ~ 150 * ((log(n) - 1.5) ^ 2 - 0.25)
-    if count <= 50: # 200
+    if count <= 50:  # 200
         return 1
-    if count <= 1000: # 400
+    if count <= 1000:  # 400
         return 2
-    if count <= 10000: # 900
+    if count <= 10000:  # 900
         return 10
-    if count <= 100000: # 1800
+    if count <= 100000:  # 1800
         return 50
-    if count <= 1000000: # 3000
+    if count <= 1000000:  # 3000
         return 300
-    if count <= 10000000: # 4500
+    if count <= 10000000:  # 4500
         return 2000
     return 10000
 
-def time_limit(silence): # ~ 3600 per hour
+
+def time_limit(silence):  # ~ 3600 per hour
     if silence >= 3600:
         return 1
     if silence >= 360:
@@ -72,6 +74,7 @@ def time_limit(silence): # ~ 3600 per hour
         return 60
     return 10000
 
+
 class ModuleProxyCache(dict):
     def __missing__(self, key):
         module, class_name = key.rsplit('.', 1)
@@ -82,6 +85,7 @@ class ModuleProxyCache(dict):
 
         return handler
 
+
 class GroupManager(models.Manager):
     use_for_related_fields = True
 
@@ -357,7 +361,7 @@ class GroupManager(models.Manager):
         if not has_charts(db):
             return []
 
-        hours = max_days*24
+        hours = max_days * 24
         today = datetime.datetime.now().replace(microsecond=0, second=0, minute=0)
         min_date = today - datetime.timedelta(hours=hours)
 
@@ -379,7 +383,7 @@ class GroupManager(models.Manager):
         while not rows.get(today - datetime.timedelta(hours=first_seen)) and first_seen > 24:
             first_seen -= 1
 
-        return [rows.get(today-datetime.timedelta(hours=d), 0) for d in xrange(first_seen, -1, -1)]
+        return [rows.get(today - datetime.timedelta(hours=d), 0) for d in xrange(first_seen, -1, -1)]
 
     def get_accelerated(self, queryset=None, minutes=15):
         # mintues should
@@ -405,12 +409,13 @@ class GroupManager(models.Manager):
             before_where=before_where,
             before_group=before_group,
             after_group=after_group,
-            min_time=minutes+1,
-            max_time=minutes*4,
+            min_time=minutes + 1,
+            max_time=minutes * 4,
         )
 
         return RawQuerySet(self, query, params)
 
+
 class RawQuerySet(object):
     def __init__(self, queryset, query, params):
         self.queryset = queryset
