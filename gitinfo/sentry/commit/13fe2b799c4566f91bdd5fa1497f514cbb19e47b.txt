commit 13fe2b799c4566f91bdd5fa1497f514cbb19e47b
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Oct 25 12:40:56 2018 -0700

    feat(discover): Scale visible table results with viewport size (#10243)
    
    Apply a maximum of 24 rows

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index f6775fd5d6..c9201cd26c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -17,6 +17,8 @@ import Pagination from './pagination';
 import {
   Heading,
   ResultSummary,
+  ResultContainer,
+  ResultInnerContainer,
   ChartWrapper,
   ChartNote,
   SavedQueryAction,
@@ -165,76 +167,81 @@ export default class Result extends React.Component {
     };
 
     return (
-      <Box flex="1">
+      <ResultContainer>
         <Flex align="center" mb={space(2)}>
           <Box flex="1">
             {savedQuery ? this.renderSavedQueryHeader() : this.renderQueryResultHeader()}
           </Box>
           {this.renderToggle()}
         </Flex>
-
-        {view === 'table' && (
-          <div>
-            <Table data={baseQuery.data} query={baseQuery.query} />
-            {!baseQuery.query.aggregations.length && (
-              <Pagination
-                previous={baseQuery.previous}
-                next={baseQuery.next}
-                getNextPage={() => onFetchPage('next')}
-                getPreviousPage={() => onFetchPage('previous')}
+        <ResultInnerContainer innerRef={ref => (this.container = ref)}>
+          {view === 'table' && (
+            <React.Fragment>
+              <Table
+                data={baseQuery.data}
+                query={baseQuery.query}
+                height={this.container && this.container.clientHeight}
+              />
+              {!baseQuery.query.aggregations.length && (
+                <Pagination
+                  previous={baseQuery.previous}
+                  next={baseQuery.next}
+                  getNextPage={() => onFetchPage('next')}
+                  getPreviousPage={() => onFetchPage('previous')}
+                />
+              )}
+            </React.Fragment>
+          )}
+          {view === 'line' && (
+            <ChartWrapper>
+              <LineChart
+                series={basicChartData}
+                height={300}
+                tooltip={tooltipOptions}
+                legend={{data: [baseQuery.query.aggregations[0][2]], truncate: 80}}
+                renderer="canvas"
+              />
+            </ChartWrapper>
+          )}
+          {view === 'bar' && (
+            <ChartWrapper>
+              <BarChart
+                series={basicChartData}
+                height={300}
+                tooltip={tooltipOptions}
+                legend={{data: [baseQuery.query.aggregations[0][2]], truncate: 80}}
+                renderer="canvas"
+              />
+            </ChartWrapper>
+          )}
+          {view === 'line-by-day' && (
+            <ChartWrapper>
+              <LineChart
+                series={byDayChartData}
+                height={300}
+                tooltip={tooltipOptions}
+                legend={legendData}
+                renderer="canvas"
+              />
+              {this.renderNote()}
+            </ChartWrapper>
+          )}
+          {view === 'bar-by-day' && (
+            <ChartWrapper>
+              <BarChart
+                series={byDayChartData}
+                stacked={true}
+                height={300}
+                tooltip={tooltipOptions}
+                legend={legendData}
+                renderer="canvas"
               />
-            )}
-          </div>
-        )}
-        {view === 'line' && (
-          <ChartWrapper>
-            <LineChart
-              series={basicChartData}
-              height={300}
-              tooltip={tooltipOptions}
-              legend={{data: [baseQuery.query.aggregations[0][2]], truncate: 80}}
-              renderer="canvas"
-            />
-          </ChartWrapper>
-        )}
-        {view === 'bar' && (
-          <ChartWrapper>
-            <BarChart
-              series={basicChartData}
-              height={300}
-              tooltip={tooltipOptions}
-              legend={{data: [baseQuery.query.aggregations[0][2]], truncate: 80}}
-              renderer="canvas"
-            />
-          </ChartWrapper>
-        )}
-        {view === 'line-by-day' && (
-          <ChartWrapper>
-            <LineChart
-              series={byDayChartData}
-              height={300}
-              tooltip={tooltipOptions}
-              legend={legendData}
-              renderer="canvas"
-            />
-            {this.renderNote()}
-          </ChartWrapper>
-        )}
-        {view === 'bar-by-day' && (
-          <ChartWrapper>
-            <BarChart
-              series={byDayChartData}
-              stacked={true}
-              height={300}
-              tooltip={tooltipOptions}
-              legend={legendData}
-              renderer="canvas"
-            />
-            {this.renderNote()}
-          </ChartWrapper>
-        )}
-        {this.renderSummary()}
-      </Box>
+              {this.renderNote()}
+            </ChartWrapper>
+          )}
+          {this.renderSummary()}
+        </ResultInnerContainer>
+      </ResultContainer>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
index 5c74135f83..2095f7510f 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/table.jsx
@@ -19,7 +19,9 @@ const MIN_COL_WIDTH = 100;
 const MAX_COL_WIDTH = 500;
 const LINK_COL_WIDTH = 40;
 const CELL_PADDING = 20;
-const VISIBLE_ROWS = 12;
+const MIN_VISIBLE_ROWS = 12;
+const MAX_VISIBLE_ROWS = 24;
+const OTHER_ELEMENTS_HEIGHT = 70; // pagination buttons, query summary
 
 /**
  * Renders results in a table as well as a query summary (timing, rows returned)
@@ -29,6 +31,7 @@ export default class ResultTable extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
     query: PropTypes.object.isRequired,
+    height: PropTypes.number,
   };
 
   static contextTypes = {
@@ -195,8 +198,22 @@ export default class ResultTable extends React.Component {
     return Math.ceil(context.measureText(text).width) + 1;
   };
 
+  getMaxVisibleRows = elementHeight => {
+    if (!elementHeight) {
+      return MIN_VISIBLE_ROWS;
+    }
+
+    // subtract header row, pagination buttons and query summary
+    const height = elementHeight - TABLE_ROW_HEIGHT_WITH_BORDER - OTHER_ELEMENTS_HEIGHT;
+
+    const visibleRows = Math.floor(height / TABLE_ROW_HEIGHT_WITH_BORDER);
+
+    // Apply min/max
+    return Math.max(Math.min(visibleRows, MAX_VISIBLE_ROWS), MIN_VISIBLE_ROWS);
+  };
+
   renderTable() {
-    const {query, data: {data}} = this.props;
+    const {query, data: {data}, height} = this.props;
 
     const cols = this.getColumnList();
 
@@ -205,13 +222,13 @@ export default class ResultTable extends React.Component {
     // Add one column at the end to make sure table spans full width
     const colCount = cols.length + (showEventLinks ? 1 : 0) + 1;
 
-    const maxVisibleResults = Math.min(data.length, VISIBLE_ROWS);
+    const visibleRows = this.getMaxVisibleRows(height);
 
     return (
-      <GridContainer visibleRows={maxVisibleResults + 1}>
+      <GridContainer visibleRows={Math.min(data.length, visibleRows) + 1}>
         <AutoSizer>
-          {({width, height}) => {
-            const columnWidths = this.getColumnWidths(width);
+          {size => {
+            const columnWidths = this.getColumnWidths(size.width);
 
             // Since calculating row height might be expensive, we'll only
             // perform the check against a subset of columns (where col width
@@ -226,8 +243,8 @@ export default class ResultTable extends React.Component {
             return (
               <MultiGrid
                 ref={ref => (this.grid = ref)}
-                width={width - 1}
-                height={height}
+                width={size.width - 1}
+                height={size.height}
                 rowCount={data.length + 1}
                 columnCount={colCount}
                 fixedRowCount={1}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 584e1eb965..0427ae3791 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -146,9 +146,19 @@ export const ButtonSpinner = styled.div`
 export const ResultSummary = styled(Box)`
   color: ${p => p.theme.gray6};
   font-size: ${p => p.theme.fontSizeSmall};
+`;
+
+export const ResultContainer = styled('div')`
+  display: flex;
+  flex: 1;
+  flex-direction: column;
   margin-bottom: ${space(3)};
 `;
 
+export const ResultInnerContainer = styled('div')`
+  flex: 1;
+`;
+
 export const ChartWrapper = styled(Panel)`
   padding: ${space(3)} ${space(2)};
 `;
