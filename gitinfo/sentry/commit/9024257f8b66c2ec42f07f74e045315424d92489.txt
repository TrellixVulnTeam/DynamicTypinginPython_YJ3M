commit 9024257f8b66c2ec42f07f74e045315424d92489
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 24 09:47:15 2015 -0700

    Clean up logic around per-project configuration
    
    - Remove dual abstraction (retain only can configure)
    - Add PluginManager.configurable_for_project
    - Ensure plugin list hides unconfigurable plugins

diff --git a/src/sentry/plugins/base/manager.py b/src/sentry/plugins/base/manager.py
index 3103f31e30..e6b1b629a2 100644
--- a/src/sentry/plugins/base/manager.py
+++ b/src/sentry/plugins/base/manager.py
@@ -30,6 +30,12 @@ class PluginManager(InstanceManager):
                 continue
             yield plugin
 
+    def configurable_for_project(self, project, version=1):
+        for plugin in self.all(version=version):
+            if not safe_execute(plugin.can_configure_for_project, project):
+                continue
+            yield plugin
+
     def for_project(self, project, version=1):
         for plugin in self.all(version=version):
             if not safe_execute(plugin.is_enabled, project):
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 28dce2e84c..2408393837 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -92,10 +92,6 @@ class IPlugin(local, PluggableViewMixin):
 
         >>> plugin.is_enabled()
         """
-        if project is not None:
-            if self.can_enable_for_projects() and \
-               not self.can_configure_for_project(project):
-                return False
         if not self.enabled:
             return False
         if not self.can_disable:
@@ -228,15 +224,31 @@ class IPlugin(local, PluggableViewMixin):
         return self.project_conf_form is not None
 
     def can_enable_for_projects(self):
-        """Returns a boolean describing whether this plugin can be enabled on
-        a per project basis
+        """
+        Returns a boolean describing whether this plugin can be enabled for
+        projects.
         """
         return True
 
     def can_configure_for_project(self, project):
-        """Checks if the plugin can be configured for a specific project."""
+        """
+        Returns a boolean describing whether this plugin can be enabled on
+        a per project basis
+        """
         from sentry import features
-        return features.has('projects:plugins', project, self, actor=None)
+
+        if not self.enabled:
+            return False
+        if not self.can_enable_for_projects():
+            return False
+
+        if not features.has('projects:plugins', project, self, actor=None):
+            return False
+
+        if not self.can_disable:
+            return True
+
+        return True
 
     def get_form_initial(self, project=None):
         return {}
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 64bd5fae4a..c2542c9096 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -86,16 +86,11 @@ class IPlugin2(local):
 
         >>> plugin.is_enabled()
         """
-        if project is not None:
-            if self.can_enable_for_projects() and \
-               not self.can_configure_for_project(project):
-                return False
         if not self.enabled:
             return False
+
         if not self.can_disable:
             return True
-        if not self.can_enable_for_projects():
-            return True
 
         if project:
             project_enabled = self.get_option('enabled', project)
@@ -213,16 +208,22 @@ class IPlugin2(local):
     def has_project_conf(self):
         return self.project_conf_form is not None
 
-    def can_enable_for_projects(self):
+    def can_configure_for_project(self, project):
         """
-        Returns a boolean describing whether this plugin can be enabled on a per project basis
+        Checks if the plugin can be configured for a specific project.
         """
-        return True
-
-    def can_configure_for_project(self, project):
-        """Checks if the plugin can be configured for a specific project."""
         from sentry import features
-        return features.has('projects:plugins', project, self, actor=None)
+
+        if not self.enabled:
+            return False
+
+        if not features.has('projects:plugins', project, self, actor=None):
+            return False
+
+        if not self.can_disable:
+            return True
+
+        return True
 
     # Response methods
 
diff --git a/src/sentry/templates/sentry/projects/plugins/list.html b/src/sentry/templates/sentry/projects/plugins/list.html
index 894081c154..2979dac475 100644
--- a/src/sentry/templates/sentry/projects/plugins/list.html
+++ b/src/sentry/templates/sentry/projects/plugins/list.html
@@ -30,11 +30,7 @@
                             </p>
                         </td>
                         <td class="align-right">
-                            {% if plugin.can_disable and plugin.can_enable_for_projects %}
-                                <input type="checkbox" name="plugin" value="{{ plugin.slug }}"{% if is_enabled %} checked="checked"{% endif %}/>
-                            {% else %}
-                                <em>{% trans "n/a" %}</em>
-                            {% endif %}
+                            <input type="checkbox" name="plugin" value="{{ plugin.slug }}"{% if is_enabled %} checked="checked"{% endif %}/>
                         </td>
                     </tr>
                 {% endfor %}
diff --git a/src/sentry/templatetags/sentry_plugins.py b/src/sentry/templatetags/sentry_plugins.py
index d72c248b28..48e1701b3b 100644
--- a/src/sentry/templatetags/sentry_plugins.py
+++ b/src/sentry/templatetags/sentry_plugins.py
@@ -126,6 +126,5 @@ def get_plugins(project):
 def get_plugins_with_status(project):
     return [
         (plugin, safe_execute(plugin.is_enabled, project))
-        for plugin in plugins.all(version=None)
-        if plugin.can_enable_for_projects()
+        for plugin in plugins.configurable_for_project(project, version=None)
     ]
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index b4f5f5a06b..eddf3d1990 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -59,8 +59,7 @@ class ProjectIssueTrackingView(ProjectView):
                 elif content:
                     enabled_plugins.append((plugin, mark_safe(content)))
                 enabled_plugins.append((plugin, mark_safe(content + view)))
-            elif (plugin.can_enable_for_projects() and
-                  plugin.can_configure_for_project(project)):
+            elif plugin.can_configure_for_project(project):
                 other_plugins.append(plugin)
 
         context = {
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index e78acca724..7eda132e22 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -88,8 +88,7 @@ class ProjectNotificationsView(ProjectView):
                     enabled_plugins.append((plugin, mark_safe(content + view)))
                 elif content:
                     enabled_plugins.append((plugin, mark_safe(content)))
-            elif (plugin.can_enable_for_projects() and
-                  plugin.can_configure_for_project(project)):
+            elif plugin.can_configure_for_project(project):
                 other_plugins.append(plugin)
 
         context = {
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
index 2d31471272..08a991b89e 100644
--- a/src/sentry/web/frontend/project_release_tracking.py
+++ b/src/sentry/web/frontend/project_release_tracking.py
@@ -92,8 +92,7 @@ class ProjectReleaseTrackingView(ProjectView):
                 }))
                 content = plugin.get_release_doc_html(hook_url=hook_url)
                 enabled_plugins.append((plugin, mark_safe(content)))
-            elif (plugin.can_enable_for_projects() and
-                  plugin.can_configure_for_project(project)):
+            elif plugin.can_configure_for_project(project):
                 other_plugins.append(plugin)
 
         context = {
diff --git a/src/sentry/web/frontend/projects/plugins.py b/src/sentry/web/frontend/projects/plugins.py
index 74306124ac..adc7a67218 100644
--- a/src/sentry/web/frontend/projects/plugins.py
+++ b/src/sentry/web/frontend/projects/plugins.py
@@ -25,13 +25,11 @@ from sentry.web.helpers import render_to_response
 def manage_plugins(request, organization, project):
     if request.POST:
         enabled = set(request.POST.getlist('plugin'))
-        for plugin in plugins.all(version=None):
-            if plugin.can_enable_for_projects() and \
-               plugin.can_configure_for_project(project):
-                if plugin.slug in enabled:
-                    plugin.enable(project)
-                else:
-                    plugin.disable(project)
+        for plugin in plugins.configurable_for_project(project, version=None):
+            if plugin.slug in enabled:
+                plugin.enable(project)
+            else:
+                plugin.disable(project)
 
         messages.add_message(
             request, messages.SUCCESS,
@@ -58,7 +56,7 @@ def configure_project_plugin(request, organization, project, slug):
     except KeyError:
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
-    if not plugin.can_enable_for_projects():
+    if not plugin.can_configure_for_project(project):
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
     view = plugin.configure(request, project=project)
