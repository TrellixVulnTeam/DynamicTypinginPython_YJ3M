commit 01cead68fff54cdff7b332b0e4f779538c5e7863
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Dec 13 21:41:13 2016 +0100

    Updated UI for reprocessing information

diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 972a38b03e..807b294dbf 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -22,9 +22,17 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
             issue__project=project
         ).values('release').distinct().count()
 
-        return Response(serialize({
+        data = {
             'hasIssues': num_issues > 0 and num_groups > 0,
             'affectedIssues': num_issues,
             'affectedGroups': num_groups,
             'affectedReleases': num_releases,
-        }, request.user))
+        }
+
+        if request.GET.get('detailed') == '1':
+            q = ProcessingIssue.objects.with_num_groups().filter(
+                project=project
+            ).order_by('type')
+            data['issues'] = [serialize(x, request.user) for x in q]
+
+        return Response(serialize(data, request.user))
diff --git a/src/sentry/api/serializers/models/processingissue.py b/src/sentry/api/serializers/models/processingissue.py
new file mode 100644
index 0000000000..d928091a1f
--- /dev/null
+++ b/src/sentry/api/serializers/models/processingissue.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import register, Serializer
+from sentry.models import ProcessingIssue
+
+
+@register(ProcessingIssue)
+class ProcessingIssueSerializer(Serializer):
+    def get_attrs(self, item_list, user):
+        counts = dict((i.id, getattr(i, 'num_groups', None))
+                      for i in item_list)
+
+        missing_counts = []
+        for pk, groups in six.iteritems(counts):
+            if groups is None:
+                missing_counts.append(pk)
+
+        if missing_counts:
+            extra_counts = ProcessingIssue.objects.with_num_groups().filter(
+                pk__in=list(missing_counts)).values('id', 'num_groups')
+            for d in extra_counts:
+                counts[d['id']] = d['num_groups']
+
+        result = {}
+        for item in item_list:
+            result[item] = {
+                'num_groups': counts.get(item.id) or 0,
+            }
+
+        return result
+
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'affectedGroups': attrs['num_groups'],
+            'type': obj.type,
+            'key': obj.key,
+            'data': obj.data,
+        }
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
index 5c41825b3d..9318e9fac4 100644
--- a/src/sentry/models/processingissue.py
+++ b/src/sentry/models/processingissue.py
@@ -9,8 +9,16 @@ sentry.models.processingissue
 from __future__ import absolute_import
 
 from django.db import models
+from django.db.models import Count
 
-from sentry.db.models import FlexibleForeignKey, Model, GzippedDictField
+from sentry.db.models import FlexibleForeignKey, Model, GzippedDictField, \
+    BaseManager
+
+
+class ProcessingIssueManager(BaseManager):
+
+    def with_num_groups(self):
+        return self.annotate(num_groups=Count('processingissuegroup'))
 
 
 class ProcessingIssue(Model):
@@ -20,6 +28,8 @@ class ProcessingIssue(Model):
     key = models.CharField(max_length=256)
     data = GzippedDictField()
 
+    objects = ProcessingIssueManager()
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_processingissue'
