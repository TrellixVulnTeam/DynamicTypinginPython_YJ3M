commit cb6dbe954adb2051f518800eae01d692557b50c6
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri May 31 13:05:17 2019 -0700

    chore(sentry10): Move all users to Sentry 10 (#13022)
    
    This PR forces all users onto Sentry 10 and turns off support for the
    deprecated single project based views. It will be merged and take effect
    on May 17th.
    
    It removes the "disable new visibility features" option for hosted
    users.
    
    From that point on, open source users who are not running the Snuba service
    should use the releases/9.1.x branch until the next major version of Sentry
    version is released.
    
    Needs to be deployed together with https://github.com/getsentry/getsentry/pull/2882

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index a2903b9220..83b2db1b77 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -96,7 +96,6 @@ class OrganizationSerializer(serializers.Serializer):
     scrapeJavaScript = serializers.BooleanField(required=False)
     isEarlyAdopter = serializers.BooleanField(required=False)
     require2FA = serializers.BooleanField(required=False)
-    disableNewVisibilityFeatures = serializers.BooleanField(required=False)
     trustedRelays = ListField(child=serializers.CharField(), required=False)
 
     @memoize
@@ -242,8 +241,6 @@ class OrganizationSerializer(serializers.Serializer):
             org.flags.enhanced_privacy = self.init_data['enhancedPrivacy']
         if 'isEarlyAdopter' in self.init_data:
             org.flags.early_adopter = self.init_data['isEarlyAdopter']
-        if 'disableNewVisibilityFeatures' in self.init_data:
-            org.flags.disable_new_visibility_features = self.init_data['disableNewVisibilityFeatures']
         if 'require2FA' in self.init_data:
             org.flags.require_2fa = self.init_data['require2FA']
         if 'name' in self.init_data:
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 3eab68f336..9a7659f42d 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -99,7 +99,6 @@ class OrganizationSerializer(Serializer):
             'name': obj.name or obj.slug,
             'dateCreated': obj.date_added,
             'isEarlyAdopter': bool(obj.flags.early_adopter),
-            'disableNewVisibilityFeatures': bool(obj.flags.disable_new_visibility_features),
             'require2FA': bool(obj.flags.require_2fa),
             'avatar': avatar,
             'features': feature_list
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 1b5954f5d4..d4986dc788 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -855,7 +855,7 @@ SENTRY_FEATURES = {
     # DEPCREATED: pending removal.
     'organizations:require-2fa': False,
     # Sentry 10 - multi project interfaces.
-    'organizations:sentry10': False,
+    'organizations:sentry10': True,
     # Enable basic SSO functionality, providing configurable single signon
     # using services like GitHub / Google. This is *not* the same as the signup
     # and login with Github / Azure DevOps that sentry.io provides.
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 3e338fc74d..b963564e7a 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -38,12 +38,6 @@ const formGroups = [
         label: t('Early Adopter'),
         help: t("Opt-in to new features before they're released to the public"),
       },
-      {
-        name: 'disableNewVisibilityFeatures',
-        type: 'boolean',
-        label: t('Disable New Product Features'),
-        help: t('Temporarily opt-out of new product changes'),
-      },
     ],
   },
 
diff --git a/tests/acceptance/test_project_issues.py b/tests/acceptance/test_project_issues.py
deleted file mode 100644
index d93d3749e2..0000000000
--- a/tests/acceptance/test_project_issues.py
+++ /dev/null
@@ -1,47 +0,0 @@
-from __future__ import absolute_import
-
-from django.utils import timezone
-
-from sentry.testutils import AcceptanceTestCase
-
-
-class ProjectIssuesTest(AcceptanceTestCase):
-    def setUp(self):
-        super(ProjectIssuesTest, self).setUp()
-        self.user = self.create_user('foo@example.com')
-        self.org = self.create_organization(owner=self.user, name='Rowdy Tiger')
-        self.team = self.create_team(organization=self.org, name='Mariachi Band')
-        self.project = self.create_project(
-            organization=self.org,
-            teams=[self.team],
-            name='Bengal',
-        )
-        self.environment = self.create_environment(name="staging")
-        self.login_as(self.user)
-        self.path = u'/{}/{}/'.format(self.org.slug, self.project.slug)
-
-    # TODO(dcramer): abstract fixtures into a basic set that is present for
-    # all acceptance tests
-    def test_not_setup(self):
-        # TODO(dcramer): we should add basic assertions around "i wanted this
-        # URL but was sent somewhere else"
-        self.browser.get(self.path)
-        self.browser.wait_until_test_id('awaiting-events')
-        self.browser.snapshot('project issues not configured')
-
-    def test_with_issues(self):
-        self.project.update(first_event=timezone.now())
-        self.create_group(
-            project=self.project,
-            message='Foo bar',
-        )
-        self.browser.get(self.path)
-        self.browser.wait_until('.ref-group-list')
-        self.browser.wait_until('.barchart')
-        self.browser.snapshot('project issues with issues')
-
-    def test_with_no_issues(self):
-        self.project.update(first_event=timezone.now())
-        self.browser.get(self.path)
-        self.browser.wait_until_test_id('empty-state')
-        self.browser.snapshot('project issues without issues')
diff --git a/tests/acceptance/test_project_releases.py b/tests/acceptance/test_project_releases.py
index 9293cadb65..836cad2850 100644
--- a/tests/acceptance/test_project_releases.py
+++ b/tests/acceptance/test_project_releases.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import json
+import pytest
 
 from django.conf import settings
 from django.utils import timezone
@@ -25,6 +26,7 @@ class ProjectReleasesTest(AcceptanceTestCase):
         self.path = u'/{}/{}/releases/'.format(
             self.org.slug, self.project.slug)
 
+    @pytest.mark.skip(reason="Sentry 9 only")
     def test_with_releases(self):
         release = self.create_release(
             project=self.project,
@@ -41,6 +43,7 @@ class ProjectReleasesTest(AcceptanceTestCase):
         self.browser.wait_until('.ref-project-releases')
         self.browser.snapshot('project releases with releases')
 
+    @pytest.mark.skip(reason="Sentry 9 only")
     def test_with_no_releases(self):
         self.dismiss_assistant()
         self.browser.get(self.path)
@@ -86,6 +89,7 @@ class ProjectReleaseDetailsTest(AcceptanceTestCase):
         self.path = u'/{}/{}/releases/{}/'.format(
             self.org.slug, self.project.slug, self.release.version)
 
+    @pytest.mark.skip(reason="Sentry 9 only")
     def test_release_details_no_commits_no_deploys(self):
         self.browser.get(self.path)
         self.browser.wait_until_not('.loading')
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 73766b8014..c79b87e6ab 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -305,36 +305,6 @@ class OrganizationUpdateTest(APITestCase):
         assert u'to {}'.format(data['scrubIPAddresses']) in log.data['scrubIPAddresses']
         assert u'to {}'.format(data['scrapeJavaScript']) in log.data['scrapeJavaScript']
 
-    def test_disable_new_visibility_features(self):
-        org = self.create_organization(owner=self.user)
-        assert not org.flags.disable_new_visibility_features
-        self.login_as(user=self.user)
-        url = reverse(
-            'sentry-api-0-organization-details', kwargs={
-                'organization_slug': org.slug,
-            }
-        )
-
-        response = self.client.put(
-            url,
-            data={
-                'disableNewVisibilityFeatures': True,
-            }
-        )
-        assert response.status_code == 200, response.content
-        org = Organization.objects.get(id=org.id)
-        assert org.flags.disable_new_visibility_features
-
-        response = self.client.put(
-            url,
-            data={
-                'disableNewVisibilityFeatures': False,
-            }
-        )
-        assert response.status_code == 200, response.content
-        org = Organization.objects.get(id=org.id)
-        assert not org.flags.disable_new_visibility_features
-
     def test_setting_trusted_relays_forbidden(self):
         org = self.create_organization(owner=self.user)
         self.login_as(user=self.user)
diff --git a/tests/sentry/api/serializers/test_organization.py b/tests/sentry/api/serializers/test_organization.py
index 09ece56155..54324b0098 100644
--- a/tests/sentry/api/serializers/test_organization.py
+++ b/tests/sentry/api/serializers/test_organization.py
@@ -12,8 +12,6 @@ class OrganizationSerializerTest(TestCase):
     def test_simple(self):
         user = self.create_user()
         organization = self.create_organization(owner=user)
-        organization.flags.disable_new_visibility_features = True
-        organization.save()
 
         result = serialize(organization, user)
 
@@ -27,5 +25,5 @@ class OrganizationSerializerTest(TestCase):
             'invite-members',
             'sso-saml2',
             'sso-basic',
+            'sentry10',
         ])
-        assert result['disableNewVisibilityFeatures']
