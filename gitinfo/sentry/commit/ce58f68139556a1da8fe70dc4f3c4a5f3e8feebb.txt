commit ce58f68139556a1da8fe70dc4f3c4a5f3e8feebb
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Mar 4 17:48:47 2020 -0500

    fix(snuba): Snuba timeseries serializer was adding an extra entry to the payload response (#17450)

diff --git a/src/sentry/api/serializers/snuba.py b/src/sentry/api/serializers/snuba.py
index ba457126dc..b3018b5f35 100644
--- a/src/sentry/api/serializers/snuba.py
+++ b/src/sentry/api/serializers/snuba.py
@@ -126,7 +126,7 @@ def value_from_row(row, tagkey):
 
 def zerofill(data, start, end, rollup):
     rv = []
-    start = ((int(to_timestamp(start)) // rollup) * rollup) - rollup
+    start = (int(to_timestamp(start)) // rollup) * rollup
     end = ((int(to_timestamp(end)) // rollup) * rollup) + rollup
     i = 0
     for key in six.moves.xrange(start, end, rollup):
diff --git a/tests/sentry/api/serializers/test_incident.py b/tests/sentry/api/serializers/test_incident.py
index 3141b01f4e..2481e21268 100644
--- a/tests/sentry/api/serializers/test_incident.py
+++ b/tests/sentry/api/serializers/test_incident.py
@@ -35,8 +35,8 @@ class IncidentSerializerTest(TestCase):
         assert result["dateDetected"] == incident.date_detected
         assert result["dateCreated"] == incident.date_added
         assert result["dateClosed"] == incident.date_closed
-        assert len(result["eventStats"]["data"]) == 62
-        assert [data[1] for data in result["eventStats"]["data"]] == [[]] * 62
+        assert len(result["eventStats"]["data"]) == 61
+        assert [data[1] for data in result["eventStats"]["data"]] == [[]] * 61
         assert result["totalEvents"] == 0
         assert result["uniqueUsers"] == 0
 
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index ecb7d38090..19008c50e8 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -64,7 +64,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             self.url,
             data={
                 "start": iso_format(self.day_ago),
-                "end": iso_format(self.day_ago + timedelta(hours=1, minutes=59)),
+                "end": iso_format(self.day_ago + timedelta(hours=2)),
                 "interval": "1h",
             },
             format="json",
@@ -72,9 +72,9 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert [attrs for time, attrs in response.data["data"]] == [
-            [],
             [{"count": 1}],
             [{"count": 2}],
+            [{"count": 0}],
         ]
 
     def test_no_projects(self):
@@ -132,11 +132,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             format="json",
         )
         assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data["data"]] == [
-            [],
-            [{"count": 2}],
-            [{"count": 1}],
-        ]
+        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 2}], [{"count": 1}]]
 
     def test_discover2_backwards_compatibility(self):
         with self.feature("organizations:discover-basic"):
@@ -180,11 +176,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
         )
 
         assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data["data"]] == [
-            [],
-            [{"count": 1}],
-            [{"count": 2}],
-        ]
+        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 2}]]
 
     def test_aggregate_function_count(self):
         with self.feature("organizations:discover-basic"):
@@ -199,11 +191,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 },
             )
         assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data["data"]] == [
-            [],
-            [{"count": 1}],
-            [{"count": 2}],
-        ]
+        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 2}]]
 
     def test_invalid_aggregate(self):
         with self.feature("organizations:discover-basic"):
@@ -232,11 +220,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 },
             )
         assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data["data"]] == [
-            [],
-            [{"count": 1}],
-            [{"count": 1}],
-        ]
+        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 1}]]
 
     def test_aggregate_invalid(self):
         with self.feature("organizations:discover-basic"):
@@ -285,9 +269,9 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 200, response.content
         data = response.data["data"]
-        assert len(data) == 8
+        assert len(data) == 7
 
-        rows = data[1:7]
+        rows = data[0:6]
         for test in zip(event_counts, rows):
             assert test[1][1][0]["count"] == test[0] / (3600.0 / 60.0)
 
@@ -324,8 +308,9 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 200, response.content
         data = response.data["data"]
-        assert len(data) == 2
-        assert data[1][1][0]["count"] == sum(event_counts) / (86400.0 / 60.0)
+        assert len(data) == 1
+
+        assert data[0][1][0]["count"] == sum(event_counts) / (86400.0 / 60.0)
 
     def test_throughput_rps_minute_rollup(self):
         project = self.create_project()
@@ -360,9 +345,9 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 200, response.content
         data = response.data["data"]
-        assert len(data) == 8
+        assert len(data) == 7
 
-        rows = data[1:7]
+        rows = data[0:6]
         for test in zip(event_counts, rows):
             assert test[1][1][0]["count"] == test[0] / 60.0
 
@@ -399,9 +384,12 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 200, response.content
         data = response.data["data"]
-        assert len(data) == 62
 
-        rows = data[1:7]
+        # expect 61 data points between time span of 0 and 60 seconds
+        assert len(data) == 61
+
+        rows = data[0:6]
+
         for row in rows:
             assert row[1][0]["count"] == 1
 
@@ -447,11 +435,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 200, response.content
         # Because we didn't send fields, the reference event is not applied
-        assert [attrs for time, attrs in response.data["data"]] == [
-            [],
-            [{"count": 2}],
-            [{"count": 2}],
-        ]
+        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 2}], [{"count": 2}]]
 
     def test_field_and_reference_event(self):
         # Create a new event that message matches events made in setup
@@ -479,11 +463,7 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 },
             )
         assert response.status_code == 200, response.content
-        assert [attrs for time, attrs in response.data["data"]] == [
-            [],
-            [{"count": 1}],
-            [{"count": 1}],
-        ]
+        assert [attrs for time, attrs in response.data["data"]] == [[{"count": 1}], [{"count": 1}]]
 
     def test_transaction_events(self):
         prototype = {
@@ -553,12 +533,10 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert [attrs for time, attrs in response.data["user_count"]["data"]] == [
-            [],
             [{"count": 1}],
             [{"count": 1}],
         ]
         assert [attrs for time, attrs in response.data["event_count"]["data"]] == [
-            [],
             [{"count": 1}],
             [{"count": 2}],
         ]
