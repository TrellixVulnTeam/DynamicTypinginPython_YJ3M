commit 7b483783e7c9ba17491f16fa185bdccd1178379f
Author: Eric Feng <erichfeng@gmail.com>
Date:   Wed Feb 17 13:53:46 2016 -0800

    fixing tests and renaming arguments to be more consistent

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 9793a0f54b..0989bccea5 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -511,7 +511,7 @@ class EventManager(object):
         if not raw:
             if not project.first_event:
                 project.update(first_event=date)
-                first_event_received.send(instance=project, group=group, sender=Project)
+                first_event_received.send(project=project, group=group, sender=Project)
 
             post_process_group.delay(
                 group=group,
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 1835adfca6..2ab29b5f60 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -35,55 +35,47 @@ def record_new_project(project, user, **kwargs):
         try:
             with transaction.atomic():
                 OrganizationOnboardingTask.objects.create(
-                    organization=instance.organization,
+                    organization=project.organization,
                     task=OnboardingTask.SECOND_PLATFORM,
                     user=user,
                     status=OnboardingTaskStatus.PENDING,
-                    project=instance,
+                    project=project,
                     date_completed=timezone.now(),
                 )
         except IntegrityError:
             pass
 
 @first_event_pending.connect(weak=False)
-def record_raven_installed(instance, user, **kwargs):
-    """
-    Args:
-        instance (sentry.models.Project)
-        user (sentry.models.user)
-    """
+def record_raven_installed(project, user, **kwargs):
     oot, created = OrganizationOnboardingTask.objects.get_or_create(
-        organization=instance.organization,
+        organization=project.organization,
         task=OnboardingTask.FIRST_EVENT,
         status=OnboardingTaskStatus.PENDING,
         defaults={
             'user': user,
-            'project': instance,
+            'project': project,
             'date_completed': timezone.now()
         }
     )
 
 @first_event_received.connect(weak=False)
-def record_first_event(instance, group, **kwargs):
+def record_first_event(project, group, **kwargs):
     """
     Requires up to 2 database calls, but should only run with the first event in
     any project, so performance should not be a huge bottleneck.
-
-    Args:
-        instance (sentry.models.Project)
-        group (sentry.models.Group)
     """
+
     # If complete, pass (creation fails due to organization, task unique constraint)
     # If pending, update.
     # If does not exist, create.
     rows_affected, created = OrganizationOnboardingTask.objects.create_or_update(
-        organization=instance.organization,
+        organization=project.organization,
         task=OnboardingTask.FIRST_EVENT,
         status=OnboardingTaskStatus.PENDING,
         values={
             'status': OnboardingTaskStatus.COMPLETE,
-            'project': instance,
-            'date_completed': instance.first_event,
+            'project': project,
+            'date_completed': project.first_event,
             'data': { 'platform': group.platform },
         }
     )
@@ -91,20 +83,20 @@ def record_first_event(instance, group, **kwargs):
     # If first_event task is complete
     if not rows_affected and not created:
         oot = OrganizationOnboardingTask.objects.filter(
-            organization=instance.organization,
+            organization=project.organization,
             task=OnboardingTask.FIRST_EVENT
         ).first()
 
         # Only counts if it's a new project and platform
-        if oot.project != instance and oot.data['platform'] != group.platform:
+        if oot.project != project and oot.data['platform'] != group.platform:
             OrganizationOnboardingTask.objects.create_or_update(
-                organization=instance.organization,
+                organization=project.organization,
                 task=OnboardingTask.SECOND_PLATFORM,
                 status=OnboardingTaskStatus.PENDING,
                 values={
                     'status': OnboardingTaskStatus.COMPLETE,
-                    'project': instance,
-                    'date_completed': instance.first_event,
+                    'project': project,
+                    'date_completed': project.first_event,
                     'data': { 'platform': group.platform },
                 }
             )
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index fe48efd8eb..712ecb6b47 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -31,8 +31,8 @@ event_processed = BetterSignal(providing_args=['project', 'group', 'event'])
 
 # Organization Onboarding Signals
 project_created = BetterSignal(providing_args=["project", "user"])
-first_event_pending = BetterSignal(providing_args=["instance", "user"])
-first_event_received = BetterSignal(providing_args=["instance", "group"])
+first_event_pending = BetterSignal(providing_args=["project", "user"])
+first_event_received = BetterSignal(providing_args=["project", "group"])
 member_invited = BetterSignal(providing_args=["member", "user"])
 member_joined = BetterSignal(providing_args=["member"])
 issue_tracker_used = BetterSignal(providing_args=["plugin", "project", "user"])
diff --git a/src/sentry/web/frontend/react_page.py b/src/sentry/web/frontend/react_page.py
index 8fd6c273b9..938ad8c19b 100644
--- a/src/sentry/web/frontend/react_page.py
+++ b/src/sentry/web/frontend/react_page.py
@@ -33,7 +33,7 @@ class ReactPageView(OrganizationView, ReactMixin):
     def handle(self, request, **kwargs):
         if 'project_id' in kwargs and request.GET.get('onboarding'):
             project = Project.objects.filter(slug=kwargs['project_id']).first()
-            first_event_pending.send(instance=project, user=request.user, sender=self)
+            first_event_pending.send(project=project, user=request.user, sender=self)
         return self.handle_react(request)
 
 class GenericReactPageView(BaseView, ReactMixin):
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index cac21eeca6..ef709c0e9e 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -5,15 +5,14 @@ from django.utils import timezone
 from sentry.models import (
     OnboardingTask, OnboardingTaskStatus, OrganizationOnboardingTask
 )
-from sentry.signals import first_event_received
+from sentry.signals import first_event_pending, first_event_received
 from sentry.testutils import TestCase
 
 
-class RecordFirstEventTest(TestCase):
+class OrganizationOnboardingTaskTest(TestCase):
     def test_no_existing_task(self):
         project = self.create_project(first_event=timezone.now())
-
-        first_event_received.send(instance=project, sender=type(project))
+        first_event_received.send(project=project, group=self.group, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
             organization=project.organization,
@@ -21,32 +20,41 @@ class RecordFirstEventTest(TestCase):
         )
         assert task.status == OnboardingTaskStatus.COMPLETE
         assert task.project == project
-        assert task.date == project.first_seen
+        assert task.date_completed == project.first_event
 
     def test_existing_pending_task(self):
         project = self.create_project(first_event=timezone.now())
-        task = OrganizationOnboardingTask.objects.create(
+
+        first_event_pending.send(project=project, user=self.user, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
             organization=project.organization,
             task=OnboardingTask.FIRST_EVENT,
-            status=OnboardingTaskStatus.PENDING,
         )
 
-        first_event_received.send(instance=project, sender=type(project))
+        assert task.status == OnboardingTaskStatus.PENDING
+        assert task.project == project
+
+        first_event_received.send(project=project, group=self.group, sender=type(project))
+
+        task = OrganizationOnboardingTask.objects.get(
+            organization=project.organization,
+            task=OnboardingTask.FIRST_EVENT,
+        )
 
-        task = OrganizationOnboardingTask.objects.get(id=task.id)
         assert task.status == OnboardingTaskStatus.COMPLETE
         assert task.project == project
-        assert task.date == project.first_seen
+        assert task.date_completed == project.first_event
 
     def test_existing_complete_task(self):
         project = self.create_project(first_event=timezone.now())
         task = OrganizationOnboardingTask.objects.create(
             organization=project.organization,
-            task=OnboardingTask.FIRST_EVENT,
+            task=OnboardingTask.FIRST_PROJECT,
             status=OnboardingTaskStatus.COMPLETE,
         )
 
-        first_event_received.send(instance=project, sender=type(project))
+        first_event_received.send(project=project, group=self.group, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(id=task.id)
         assert task.status == OnboardingTaskStatus.COMPLETE
