commit d4b70a3ed06ec366e1cbd0d5f764ee5a14cb588c
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Apr 14 12:23:53 2013 -0700

    Correct unserialize behavior on Exception

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index cb0429e293..19fa596dce 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -760,7 +760,7 @@ class Exception(Interface):
     def unserialize(self, data):
         if 'values' not in data:
             data = {'values': [data]}
-        data['values'] = unserialize(SingleException, data['values'])
+        data['values'] = [unserialize(SingleException, v) for v in data['values']]
         return data
 
     def get_hash(self):
diff --git a/tests/sentry/interfaces/exception/tests.py b/tests/sentry/interfaces/exception/tests.py
index 435e675bca..18061ce17a 100644
--- a/tests/sentry/interfaces/exception/tests.py
+++ b/tests/sentry/interfaces/exception/tests.py
@@ -3,9 +3,26 @@
 from __future__ import absolute_import
 
 from sentry.testutils import TestCase, fixture
+from sentry.interfaces import unserialize
 
 
 class ExceptionTest(TestCase):
+    @fixture
+    def interface(self):
+        from sentry.interfaces import Exception
+
+        return Exception([{
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': []},
+        }, {
+            'type': 'ValueError',
+            'value': 'hello world',
+            'module': 'foo.bar',
+            'stacktrace': {'frames': []},
+        }])
+
     def test_args_as_list(self):
         from sentry.interfaces import SingleException, Exception
 
@@ -45,6 +62,10 @@ class ExceptionTest(TestCase):
         assert inst.values[0].value == 'hello world'
         assert inst.values[0].module == 'foo.bar'
 
+    def test_serialize_unserialize_behavior(self):
+        result = unserialize(type(self.interface), self.interface.serialize())
+        assert self.interface.serialize() == result.serialize()
+
 
 class SingleExceptionTest(TestCase):
     @fixture
@@ -55,6 +76,7 @@ class SingleExceptionTest(TestCase):
             type='ValueError',
             value='hello world',
             module='foo.bar',
+            stacktrace={'frames': []},
         )
 
     def test_serialize_behavior(self):
@@ -62,7 +84,7 @@ class SingleExceptionTest(TestCase):
             'type': self.interface.type,
             'value': self.interface.value,
             'module': self.interface.module,
-            'stacktrace': None,
+            'stacktrace': self.interface.stacktrace.serialize(),
         }
 
     def test_get_hash(self):
@@ -82,3 +104,7 @@ class SingleExceptionTest(TestCase):
         assert self.interface.get_hash() == [
             self.interface.type,
         ]
+
+    def test_serialize_unserialize_behavior(self):
+        result = unserialize(type(self.interface), self.interface.serialize())
+        assert self.interface.serialize() == result.serialize()
