commit b98b6b00c7bd1d1541530dc4761892e35979b893
Author: Mark Story <mark@sentry.io>
Date:   Wed Mar 25 10:43:26 2020 -0400

    ref(discover) Refactor and clean up EventView and related functions (#17886)
    
    Move EventView and its related functions out of views/eventsV2 as they
    are used in far more places than just those views. I've moved a few
    functions onto the EventView as passing the eventView parameter into
    a function implies a bit of 'feature envy'.
    
    I've removed exports for the field rendering maps and added more
    functions as I'd like to make interfaces based on functions instead of
    object maps.
    
    I've tried to consolidate some of the types so there are fewer cyclic
    references between modules, but there is still more to do as this change
    is already large.
    
    There were a few remaining references around FIELD_ALIASES which I've
    removed.

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
index d2b0342296..79a04d8335 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/index.tsx
@@ -7,7 +7,7 @@ import SearchBar from 'app/components/searchBar';
 import SentryTypes from 'app/sentryTypes';
 import {Panel} from 'app/components/panels';
 import space from 'app/styles/space';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 import {SentryTransactionEvent} from './types';
 import TraceView from './traceView';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 12ca61c771..ce18b6d1aa 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -9,7 +9,7 @@ import space from 'app/styles/space';
 import Count from 'app/components/count';
 import Tooltip from 'app/components/tooltip';
 import InlineSvg from 'app/components/inlineSvg';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 import {
   toPercent,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index fa62adbae4..00a7997aab 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -16,7 +16,7 @@ import {
   generateEventSlug,
   generateEventDetailsRoute,
 } from 'app/views/eventsV2/eventDetails/utils';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import getDynamicText from 'app/utils/getDynamicText';
 import {assert} from 'app/types/utils';
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
index 279dd57bd2..576fc8af71 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 import {SpanBoundsType, SpanGeneratedBoundsType} from './utils';
 import {ProcessedSpanType, ParsedTraceType} from './types';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index 2cc5ec0556..2aeac0f3ef 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -3,7 +3,7 @@ import styled from '@emotion/styled';
 import get from 'lodash/get';
 
 import {t} from 'app/locale';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 import {
   ProcessedSpanType,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index 09fa9595c9..d9a812525a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -7,7 +7,7 @@ import isNumber from 'lodash/isNumber';
 import {t} from 'app/locale';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 import DragManager, {DragManagerChildrenProps} from './dragManager';
 import SpanTree from './spanTree';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
similarity index 94%
rename from src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
rename to src/sentry/static/sentry/app/utils/discover/eventView.tsx
index ab8f8ecced..96c0125cab 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -11,18 +11,24 @@ import {DEFAULT_PER_PAGE} from 'app/constants';
 import {SavedQuery, NewQuery, SelectValue} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
+import {TableColumn, TableColumnSort} from 'app/views/eventsV2/table/types';
+import {EventQuery, decodeColumnOrder, decodeScalar} from 'app/views/eventsV2/utils';
 
-import {SPECIAL_FIELDS, FIELD_FORMATTERS, CHART_AXIS_OPTIONS} from './data';
 import {
-  MetaType,
-  EventQuery,
+  Sort,
+  Field,
+  Column,
+  ColumnType,
   isAggregateField,
   getAggregateAlias,
-  decodeColumnOrder,
-  decodeScalar,
-} from './utils';
-import {Aggregation, AggregationRefinement} from './eventQueryParams';
-import {TableColumn, TableColumnSort} from './table/types';
+} from './fields';
+import {getSortField} from './fieldRenderers';
+
+// Metadata mapping for discover results.
+export type MetaType = Record<string, ColumnType>;
+
+// Data in discover results.
+export type EventData = Record<string, any>;
 
 type LocationQuery = {
   start?: string | string[];
@@ -39,37 +45,17 @@ const EXTERNAL_QUERY_STRING_KEYS: Readonly<Array<keyof LocationQuery>> = [
   'cursor',
 ];
 
-export type Sort = {
-  kind: 'asc' | 'desc';
-  field: string;
-};
+// default list of yAxis options
+export const CHART_AXIS_OPTIONS = [
+  {label: 'count()', value: 'count()'},
+  {label: 'count_unique(users)', value: 'count_unique(user)'},
+];
 
 const reverseSort = (sort: Sort): Sort => ({
   kind: sort.kind === 'desc' ? 'asc' : 'desc',
   field: sort.field,
 });
 
-// Contains the URL field value & the related table column width.
-// Can be parsed into a Column using explodeField()
-export type Field = {
-  field: string;
-  width?: number;
-};
-
-// The parsed result of a Field.
-// Functions and Fields are handled as subtypes to enable other
-// code to work more simply.
-// This type can be converted into a Field.field using generateFieldAsString()
-export type Column =
-  | {
-      kind: 'field';
-      field: string;
-    }
-  | {
-      kind: 'function';
-      function: [Aggregation, string, AggregationRefinement];
-    };
-
 const isSortEqualToField = (
   sort: Sort,
   field: Field,
@@ -92,29 +78,12 @@ const fieldToSort = (field: Field, tableMeta: MetaType | undefined): Sort | unde
   };
 };
 
-function getSortKeyFromField(
-  field: Field,
-  tableMeta: MetaType | undefined
-): string | null {
+function getSortKeyFromField(field: Field, tableMeta?: MetaType): string | null {
   const alias = getAggregateAlias(field.field);
-  if (SPECIAL_FIELDS.hasOwnProperty(alias)) {
-    return SPECIAL_FIELDS[alias as keyof typeof SPECIAL_FIELDS].sortField;
-  }
-
-  if (!tableMeta) {
-    return alias;
-  }
-
-  if (FIELD_FORMATTERS.hasOwnProperty(tableMeta[alias])) {
-    return FIELD_FORMATTERS[tableMeta[alias] as keyof typeof FIELD_FORMATTERS].sortField
-      ? alias
-      : null;
-  }
-
-  return null;
+  return getSortField(alias, tableMeta);
 }
 
-export function isFieldSortable(field: Field, tableMeta: MetaType | undefined): boolean {
+export function isFieldSortable(field: Field, tableMeta?: MetaType): boolean {
   return !!getSortKeyFromField(field, tableMeta);
 }
 
@@ -556,6 +525,10 @@ class EventView {
     return this.fields.filter(field => isAggregateField(field.field));
   }
 
+  hasAggregateField() {
+    return this.fields.some(field => isAggregateField(field.field));
+  }
+
   numOfColumns(): number {
     return this.fields.length;
   }
diff --git a/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx b/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
index 2a0feb8142..080d8526ef 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventsv2/index.tsx
@@ -4,7 +4,7 @@ import {Location} from 'history';
 import {Organization} from 'app/types';
 import {Client} from 'app/api';
 import withApi from 'app/utils/withApi';
-import EventView, {isAPIPayloadSimilar} from 'app/views/eventsV2/eventView';
+import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 import {TableData} from 'app/views/eventsV2/table/types';
 
 type ChildrenProps = {
diff --git a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
new file mode 100644
index 0000000000..dce0997b21
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
@@ -0,0 +1,264 @@
+import React from 'react';
+import {Location} from 'history';
+import partial from 'lodash/partial';
+
+import {Organization} from 'app/types';
+import {t} from 'app/locale';
+import Count from 'app/components/count';
+import ProjectBadge from 'app/components/idBadge/projectBadge';
+import UserBadge from 'app/components/idBadge/userBadge';
+import getDynamicText from 'app/utils/getDynamicText';
+import Duration from 'app/components/duration';
+import ShortId from 'app/components/shortId';
+import floatFormat from 'app/utils/floatFormat';
+import Version from 'app/components/version';
+import {getAggregateAlias} from 'app/utils/discover/fields';
+
+import {
+  Container,
+  NumberContainer,
+  OverflowLink,
+  StyledDateTime,
+  VersionContainer,
+} from './styles';
+import {MetaType, EventData} from './eventView';
+
+/**
+ * Types, functions and definitions for rendering fields in discover results.
+ */
+type RenderFunctionBaggage = {
+  organization: Organization;
+  location: Location;
+};
+
+type FieldFormatterRenderFunction = (
+  field: string,
+  data: EventData,
+  baggage: RenderFunctionBaggage
+) => React.ReactNode;
+
+export type FieldFormatterRenderFunctionPartial = (
+  data: EventData,
+  baggage: RenderFunctionBaggage
+) => React.ReactNode;
+
+type FieldFormatter = {
+  sortField: boolean;
+  renderFunc: FieldFormatterRenderFunction;
+};
+
+type FieldFormatters = {
+  boolean: FieldFormatter;
+  integer: FieldFormatter;
+  number: FieldFormatter;
+  date: FieldFormatter;
+  string: FieldFormatter;
+  duration: FieldFormatter;
+};
+
+export type FieldTypes = keyof FieldFormatters;
+
+const emptyValue = <span>{t('n/a')}</span>;
+
+/**
+ * A mapping of field types to their rendering function.
+ * This mapping is used when a field is not defined in SPECIAL_FIELDS
+ * and the field is not being coerced to a link.
+ *
+ * This mapping should match the output sentry.utils.snuba:get_json_type
+ */
+const FIELD_FORMATTERS: FieldFormatters = {
+  boolean: {
+    sortField: true,
+    renderFunc: (field, data) => {
+      const value = data[field] ? t('yes') : t('no');
+      return <Container>{value}</Container>;
+    },
+  },
+  integer: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <NumberContainer>
+        {typeof data[field] === 'number' ? <Count value={data[field]} /> : emptyValue}
+      </NumberContainer>
+    ),
+  },
+  number: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <NumberContainer>
+        {typeof data[field] === 'number' ? floatFormat(data[field], 5) : emptyValue}
+      </NumberContainer>
+    ),
+  },
+  date: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <Container>
+        {data[field]
+          ? getDynamicText({
+              value: <StyledDateTime date={data[field]} />,
+              fixed: 'timestamp',
+            })
+          : emptyValue}
+      </Container>
+    ),
+  },
+  string: {
+    sortField: true,
+    renderFunc: (field, data) => {
+      // Some fields have long arrays in them, only show the tail of the data.
+      const value = Array.isArray(data[field]) ? data[field].slice(-1) : data[field];
+      return <Container>{value}</Container>;
+    },
+  },
+  duration: {
+    sortField: true,
+    renderFunc: (field, data) => (
+      <NumberContainer>
+        {typeof data[field] === 'number' ? (
+          <Duration seconds={data[field] / 1000} fixedDigits={2} abbreviation />
+        ) : (
+          emptyValue
+        )}
+      </NumberContainer>
+    ),
+  },
+};
+
+type SpecialFieldRenderFunc = (
+  data: EventData,
+  baggage: RenderFunctionBaggage
+) => React.ReactNode;
+
+type SpecialField = {
+  sortField: string | null;
+  renderFunc: SpecialFieldRenderFunc;
+};
+
+type SpecialFields = {
+  project: SpecialField;
+  user: SpecialField;
+  'issue.id': SpecialField;
+  issue: SpecialField;
+  release: SpecialField;
+};
+
+/**
+ * "Special fields" do not map 1:1 to an single column in the event database,
+ * they are a UI concept that combines the results of multiple fields and
+ * displays with a custom render function.
+ */
+const SPECIAL_FIELDS: SpecialFields = {
+  'issue.id': {
+    sortField: 'issue.id',
+    renderFunc: (data, {organization}) => {
+      const target = `/organizations/${organization.slug}/issues/${data['issue.id']}/`;
+      return (
+        <Container>
+          <OverflowLink to={target} aria-label={data['issue.id']}>
+            {data['issue.id']}
+          </OverflowLink>
+        </Container>
+      );
+    },
+  },
+  issue: {
+    sortField: null,
+    renderFunc: (data, {organization}) => {
+      const target = `/organizations/${organization.slug}/issues/${data['issue.id']}/`;
+      return (
+        <Container>
+          <OverflowLink to={target} aria-label={data['issue.id']}>
+            <ShortId shortId={`${data.issue}`} />
+          </OverflowLink>
+        </Container>
+      );
+    },
+  },
+  project: {
+    sortField: 'project',
+    renderFunc: (data, {organization}) => {
+      const project = organization.projects.find(p => p.slug === data.project);
+      return (
+        <Container>
+          {project ? <ProjectBadge project={project} avatarSize={16} /> : data.project}
+        </Container>
+      );
+    },
+  },
+  user: {
+    sortField: 'user.id',
+    renderFunc: data => {
+      const userObj = {
+        id: data['user.id'],
+        name: data['user.name'],
+        email: data['user.email'],
+        username: data['user.username'],
+        ip_address: data['user.ip'],
+      };
+
+      const badge = <UserBadge user={userObj} hideEmail avatarSize={16} />;
+
+      return <Container>{badge}</Container>;
+    },
+  },
+  release: {
+    sortField: 'release',
+    renderFunc: data =>
+      data.release && (
+        <VersionContainer>
+          <Version version={data.release} anchor={false} tooltipRawVersion truncate />
+        </VersionContainer>
+      ),
+  },
+};
+
+/**
+ * Get the sort field name for a given field if it is special or fallback
+ * to the generic type formatter.
+ */
+export function getSortField(
+  field: string,
+  tableMeta: MetaType | undefined
+): string | null {
+  if (SPECIAL_FIELDS.hasOwnProperty(field)) {
+    return SPECIAL_FIELDS[field as keyof typeof SPECIAL_FIELDS].sortField;
+  }
+
+  if (!tableMeta) {
+    return field;
+  }
+
+  const fieldType = tableMeta[field];
+  if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
+    return FIELD_FORMATTERS[fieldType as keyof typeof FIELD_FORMATTERS].sortField
+      ? field
+      : null;
+  }
+
+  return null;
+}
+
+/**
+ * Get the field renderer for the named field and metadata
+ *
+ * @param {String} field name
+ * @param {object} metadata mapping.
+ * @returns {Function}
+ */
+export function getFieldRenderer(
+  field: string,
+  meta: MetaType
+): FieldFormatterRenderFunctionPartial {
+  if (SPECIAL_FIELDS.hasOwnProperty(field)) {
+    return SPECIAL_FIELDS[field].renderFunc;
+  }
+  const fieldName = getAggregateAlias(field);
+  const fieldType = meta[fieldName];
+
+  if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
+    return partial(FIELD_FORMATTERS[fieldType].renderFunc, fieldName);
+  }
+  return partial(FIELD_FORMATTERS.string.renderFunc, fieldName);
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx b/src/sentry/static/sentry/app/utils/discover/fields.tsx
similarity index 76%
rename from src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
rename to src/sentry/static/sentry/app/utils/discover/fields.tsx
index c235223236..e1aa35984d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventQueryParams.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fields.tsx
@@ -1,7 +1,18 @@
 import {assert} from 'app/types/utils';
 
+export type Sort = {
+  kind: 'asc' | 'desc';
+  field: string;
+};
+
+// Contains the URL field value & the related table column width.
+// Can be parsed into a Column using explodeField()
+export type Field = {
+  field: string;
+  width?: number;
+};
+
 export type ColumnType =
-  | '*' // Matches to everything TODO(mark) remove this in favour of explicit type lists.
   | 'string'
   | 'integer'
   | 'number'
@@ -25,6 +36,22 @@ export type AggregateParameter =
       required: boolean;
     };
 
+export type AggregationRefinement = string | undefined;
+
+// The parsed result of a Field.
+// Functions and Fields are handled as subtypes to enable other
+// code to work more simply.
+// This type can be converted into a Field.field using generateFieldAsString()
+export type Column =
+  | {
+      kind: 'field';
+      field: string;
+    }
+  | {
+      kind: 'function';
+      function: [Aggregation, string, AggregationRefinement];
+    };
+
 // Refer to src/sentry/api/event_search.py
 export const AGGREGATIONS = {
   count: {
@@ -183,7 +210,6 @@ assert(
 );
 
 export type Aggregation = keyof typeof AGGREGATIONS | '';
-export type AggregationRefinement = string | undefined;
 
 /**
  * Refer to src/sentry/snuba/events.py, search for Columns
@@ -261,7 +287,7 @@ export const FIELDS = {
 } as const;
 assert(FIELDS as Readonly<{[key in keyof typeof FIELDS]: ColumnType}>);
 
-export type Field = keyof typeof FIELDS | string | '';
+export type Fields = keyof typeof FIELDS | string | '';
 
 // This list should be removed with the tranaction-events feature flag.
 export const TRACING_FIELDS = [
@@ -280,3 +306,49 @@ export const TRACING_FIELDS = [
   'rps',
   'rpm',
 ];
+
+const AGGREGATE_PATTERN = /^([^\(]+)\((.*?)(?:\s*,\s*(.*))?\)$/;
+
+export function explodeFieldString(field: string): Column {
+  const results = field.match(AGGREGATE_PATTERN);
+
+  if (results && results.length >= 3) {
+    return {
+      kind: 'function',
+      function: [
+        results[1] as Aggregation,
+        results[2],
+        results[3] as AggregationRefinement,
+      ],
+    };
+  }
+
+  return {kind: 'field', field};
+}
+
+export function explodeField(field: Field): Column {
+  const results = explodeFieldString(field.field);
+
+  return results;
+}
+
+/**
+ * Get the alias that the API results will have for a given aggregate function name
+ */
+export function getAggregateAlias(field: string): string {
+  if (!field.match(AGGREGATE_PATTERN)) {
+    return field;
+  }
+  return field
+    .replace(AGGREGATE_PATTERN, '$1_$2_$3')
+    .replace(/\./g, '_')
+    .replace(/\,/g, '_')
+    .replace(/_+$/, '');
+}
+
+/**
+ * Check if a field name looks like an aggregate function or known aggregate alias.
+ */
+export function isAggregateField(field: string): boolean {
+  return field.match(AGGREGATE_PATTERN) !== null;
+}
diff --git a/src/sentry/static/sentry/app/utils/discover/styles.tsx b/src/sentry/static/sentry/app/utils/discover/styles.tsx
new file mode 100644
index 0000000000..1f5ea17dc3
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/discover/styles.tsx
@@ -0,0 +1,34 @@
+import styled from '@emotion/styled';
+
+import DateTime from 'app/components/dateTime';
+import Link from 'app/components/links/link';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+
+/**
+ * Styled components used to render discover result sets.
+ */
+
+export const Container = styled('div')`
+  ${overflowEllipsis};
+`;
+
+export const VersionContainer = styled('div')`
+  ${overflowEllipsis};
+  max-width: 100%;
+  width: auto;
+  display: inline-block;
+`;
+
+export const NumberContainer = styled('div')`
+  text-align: right;
+  ${overflowEllipsis};
+`;
+
+export const StyledDateTime = styled(DateTime)`
+  color: ${p => p.theme.gray2};
+  ${overflowEllipsis};
+`;
+
+export const OverflowLink = styled(Link)`
+  ${overflowEllipsis};
+`;
diff --git a/src/sentry/static/sentry/app/views/alerts/details/body.tsx b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
index 28545678e3..28d28d9967 100644
--- a/src/sentry/static/sentry/app/views/alerts/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/details/body.tsx
@@ -15,7 +15,7 @@ import {getDisplayForAlertRuleAggregation} from 'app/views/alerts/utils';
 import {getUtcDateString, intervalToMilliseconds} from 'app/utils/dates';
 import {t} from 'app/locale';
 import Duration from 'app/components/duration';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import Feature from 'app/components/acl/feature';
 import Link from 'app/components/links/link';
 import NavTabs from 'app/components/navTabs';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
index b1fd1de4a5..cc22a92245 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -7,8 +7,8 @@ import {Event, Organization} from 'app/types';
 import Link from 'app/components/links/link';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
+import EventView from 'app/utils/discover/eventView';
 
-import EventView from './eventView';
 import {getDiscoverLandingUrl} from './utils';
 
 type DefaultProps = {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index c19a16dedb..35a9afa895 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -1,43 +1,8 @@
-import React from 'react';
-import {Location} from 'history';
-
 import {t} from 'app/locale';
-import Count from 'app/components/count';
-import ProjectBadge from 'app/components/idBadge/projectBadge';
-import UserBadge from 'app/components/idBadge/userBadge';
-import getDynamicText from 'app/utils/getDynamicText';
 import pinIcon from 'app/../images/graph/icon-location-filled.svg';
-import {Organization, NewQuery} from 'app/types';
-import Duration from 'app/components/duration';
-import ShortId from 'app/components/shortId';
-import floatFormat from 'app/utils/floatFormat';
-import Version from 'app/components/version';
-
-import {
-  Container,
-  NumberContainer,
-  OverflowLink,
-  StyledDateTime,
-  VersionContainer,
-} from './styles';
+import {NewQuery} from 'app/types';
 
 export const PIN_ICON = `image://${pinIcon}`;
-export const AGGREGATE_ALIASES = [
-  'apdex',
-  'impact',
-  'p75',
-  'p95',
-  'p99',
-  'last_seen',
-  'latest_event',
-  'error_rate',
-];
-
-// default list of yAxis options
-export const CHART_AXIS_OPTIONS = [
-  {label: 'count()', value: 'count()'},
-  {label: 'count_unique(users)', value: 'count_unique(user)'},
-];
 
 export const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {
   id: undefined,
@@ -93,192 +58,3 @@ export const ALL_VIEWS: Readonly<Array<NewQuery>> = [
     range: '24h',
   },
 ];
-
-export type EventData = {[key: string]: any};
-
-type RenderFunctionBaggage = {
-  organization: Organization;
-  location: Location;
-};
-
-type FieldFormatterRenderFunction = (
-  field: string,
-  data: EventData,
-  baggage: RenderFunctionBaggage
-) => React.ReactNode;
-
-export type FieldFormatterRenderFunctionPartial = (
-  data: EventData,
-  baggage: RenderFunctionBaggage
-) => React.ReactNode;
-
-type FieldFormatter = {
-  sortField: boolean;
-  renderFunc: FieldFormatterRenderFunction;
-};
-
-type FieldFormatters = {
-  boolean: FieldFormatter;
-  integer: FieldFormatter;
-  number: FieldFormatter;
-  date: FieldFormatter;
-  string: FieldFormatter;
-  duration: FieldFormatter;
-};
-
-export type FieldTypes = keyof FieldFormatters;
-
-const emptyValue = <span>{t('n/a')}</span>;
-/**
- * A mapping of field types to their rendering function.
- * This mapping is used when a field is not defined in SPECIAL_FIELDS
- * and the field is not being coerced to a link.
- *
- * This mapping should match the output sentry.utils.snuba:get_json_type
- */
-export const FIELD_FORMATTERS: FieldFormatters = {
-  boolean: {
-    sortField: true,
-    renderFunc: (field, data) => {
-      const value = data[field] ? t('yes') : t('no');
-      return <Container>{value}</Container>;
-    },
-  },
-  integer: {
-    sortField: true,
-    renderFunc: (field, data) => (
-      <NumberContainer>
-        {typeof data[field] === 'number' ? <Count value={data[field]} /> : emptyValue}
-      </NumberContainer>
-    ),
-  },
-  number: {
-    sortField: true,
-    renderFunc: (field, data) => (
-      <NumberContainer>
-        {typeof data[field] === 'number' ? floatFormat(data[field], 5) : emptyValue}
-      </NumberContainer>
-    ),
-  },
-  date: {
-    sortField: true,
-    renderFunc: (field, data) => (
-      <Container>
-        {data[field]
-          ? getDynamicText({
-              value: <StyledDateTime date={data[field]} />,
-              fixed: 'timestamp',
-            })
-          : emptyValue}
-      </Container>
-    ),
-  },
-  string: {
-    sortField: true,
-    renderFunc: (field, data) => {
-      // Some fields have long arrays in them, only show the tail of the data.
-      const value = Array.isArray(data[field]) ? data[field].slice(-1) : data[field];
-      return <Container>{value}</Container>;
-    },
-  },
-  duration: {
-    sortField: true,
-    renderFunc: (field, data) => (
-      <NumberContainer>
-        {typeof data[field] === 'number' ? (
-          <Duration seconds={data[field] / 1000} fixedDigits={2} abbreviation />
-        ) : (
-          emptyValue
-        )}
-      </NumberContainer>
-    ),
-  },
-};
-
-type SpecialFieldRenderFunc = (
-  data: EventData,
-  baggage: RenderFunctionBaggage
-) => React.ReactNode;
-
-type SpecialField = {
-  sortField: string | null;
-  renderFunc: SpecialFieldRenderFunc;
-};
-
-type SpecialFields = {
-  project: SpecialField;
-  user: SpecialField;
-  'issue.id': SpecialField;
-  issue: SpecialField;
-  release: SpecialField;
-};
-
-/**
- * "Special fields" do not map 1:1 to an single column in the event database,
- * they are a UI concept that combines the results of multiple fields and
- * displays with a custom render function.
- */
-export const SPECIAL_FIELDS: SpecialFields = {
-  'issue.id': {
-    sortField: 'issue.id',
-    renderFunc: (data, {organization}) => {
-      const target = `/organizations/${organization.slug}/issues/${data['issue.id']}/`;
-      return (
-        <Container>
-          <OverflowLink to={target} aria-label={data['issue.id']}>
-            {data['issue.id']}
-          </OverflowLink>
-        </Container>
-      );
-    },
-  },
-  issue: {
-    sortField: null,
-    renderFunc: (data, {organization}) => {
-      const target = `/organizations/${organization.slug}/issues/${data['issue.id']}/`;
-      return (
-        <Container>
-          <OverflowLink to={target} aria-label={data['issue.id']}>
-            <ShortId shortId={`${data.issue}`} />
-          </OverflowLink>
-        </Container>
-      );
-    },
-  },
-  project: {
-    sortField: 'project',
-    renderFunc: (data, {organization}) => {
-      const project = organization.projects.find(p => p.slug === data.project);
-      return (
-        <Container>
-          {project ? <ProjectBadge project={project} avatarSize={16} /> : data.project}
-        </Container>
-      );
-    },
-  },
-  user: {
-    sortField: 'user.id',
-    renderFunc: data => {
-      const userObj = {
-        id: data['user.id'],
-        name: data['user.name'],
-        email: data['user.email'],
-        username: data['user.username'],
-        ip_address: data['user.ip'],
-      };
-
-      const badge = <UserBadge user={userObj} hideEmail avatarSize={16} />;
-
-      return <Container>{badge}</Container>;
-    },
-  },
-  release: {
-    sortField: 'release',
-    renderFunc: data =>
-      data.release && (
-        <VersionContainer>
-          <Version version={data.release} anchor={false} tooltipRawVersion truncate />
-        </VersionContainer>
-      ),
-  },
-};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index 88e6a51df9..04ef26796c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -25,9 +25,9 @@ import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import EventEntries from 'app/components/events/eventEntries';
 import {DataSection} from 'app/components/events/styles';
 import Projects from 'app/utils/projects';
+import EventView from 'app/utils/discover/eventView';
 
-import EventView from '../eventView';
-import {hasAggregateField, EventQuery, generateTitle} from '../utils';
+import {EventQuery, generateTitle} from '../utils';
 import Pagination from './pagination';
 import LineGraph from './lineGraph';
 import TagsTable from '../tagsTable';
@@ -126,7 +126,7 @@ class EventDetailsContent extends AsyncComponent<Props, State> {
     });
 
     // Having an aggregate field means we want to show pagination/graphs
-    const isGroupedView = hasAggregateField(eventView);
+    const isGroupedView = eventView.hasAggregateField();
     const {isSidebarVisible} = this.state;
 
     return (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
index 795222fb10..4a37b45bef 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/index.tsx
@@ -12,9 +12,9 @@ import NoProjectMessage from 'app/components/noProjectMessage';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SentryTypes from 'app/sentryTypes';
 import withOrganization from 'app/utils/withOrganization';
+import EventView from 'app/utils/discover/eventView';
 
 import EventDetailsContent from './content';
-import EventView from '../eventView';
 
 type Props = {
   organization: Organization;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
index cc6db16a99..035c4b3f78 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
@@ -22,10 +22,10 @@ import withGlobalSelection from 'app/utils/withGlobalSelection';
 import {tokenizeSearch, stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import theme from 'app/utils/theme';
 import {Event, Organization, GlobalSelection} from 'app/types';
+import EventView from 'app/utils/discover/eventView';
 
 import {generateEventDetailsRoute, generateEventSlug} from './utils';
 import {PIN_ICON} from '../data';
-import EventView from '../eventView';
 
 /**
  * Generate the data to display a vertical line for the current
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
index 06b5acba4d..832749f169 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
@@ -7,9 +7,9 @@ import Link from 'app/components/links/link';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
 import {Event, Organization} from 'app/types';
+import EventView from 'app/utils/discover/eventView';
 
 import {generateEventDetailsRoute} from './utils';
-import EventView from '../eventView';
 
 type LinksType = {
   oldest: null;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
index 4e0744d45a..1a9731732f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/utils.tsx
@@ -1,5 +1,4 @@
-import {EventData} from '../data';
-import EventView from '../eventView';
+import EventView, {EventData} from 'app/utils/discover/eventView';
 
 export function generateEventDetailsRoute({
   eventSlug,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
index 8d0b2d694d..5ec3a2bcfc 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -9,9 +9,9 @@ import {Organization, SavedQuery} from 'app/types';
 import withApi from 'app/utils/withApi';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import InlineInput from 'app/components/inputInline';
+import EventView from 'app/utils/discover/eventView';
 
 import {handleUpdateQueryName} from './savedQuery/utils';
-import EventView from './eventView';
 
 type Props = {
   api: Client;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index 2c0a7972a6..428e206a91 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -24,10 +24,10 @@ import SentryTypes from 'app/sentryTypes';
 import localStorage from 'app/utils/localStorage';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
+import EventView from 'app/utils/discover/eventView';
 
 import {DEFAULT_EVENT_VIEW} from './data';
 import {getPrebuiltQueries, decodeScalar} from './utils';
-import EventView from './eventView';
 import QueryList from './queryList';
 import backgroundSpace from '../../../images/spot/background-space.svg';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
index 601a25bc2d..d74de5d2a9 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/miniGraph.tsx
@@ -14,8 +14,7 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import LoadingContainer from 'app/components/loading/loadingContainer';
 import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
-
-import EventView from './eventView';
+import EventView from 'app/utils/discover/eventView';
 
 type Props = {
   organization: Organization;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
index 7c94e90af5..d7d9500697 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -16,8 +16,8 @@ import Pagination from 'app/components/pagination';
 import {IconEllipsis} from 'app/icons/iconEllipsis';
 import withApi from 'app/utils/withApi';
 import parseLinkHeader from 'app/utils/parseLinkHeader';
+import EventView from 'app/utils/discover/eventView';
 
-import EventView from './eventView';
 import QueryCard from './querycard';
 import MiniGraph from './miniGraph';
 import {getPrebuiltQueries} from './utils';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/results.tsx b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
index eb4c69e5ca..de1505737d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/results.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/results.tsx
@@ -20,6 +20,7 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
+import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 import Alert from 'app/components/alert';
 
 import {DEFAULT_EVENT_VIEW} from './data';
@@ -27,7 +28,6 @@ import Table from './table';
 import Tags from './tags';
 import ResultsHeader from './resultsHeader';
 import ResultsChart from './resultsChart';
-import EventView, {isAPIPayloadSimilar} from './eventView';
 import {generateTitle, fetchTotalCount} from './utils';
 import {ContentBox} from './styles';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index ebd67e9cbc..5a94d57a9b 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -11,9 +11,9 @@ import {getParams} from 'app/components/organizations/globalSelectionHeader/getP
 import {Panel} from 'app/components/panels';
 import getDynamicText from 'app/utils/getDynamicText';
 import {EventsChart} from 'app/views/events/eventsChart';
+import EventView from 'app/utils/discover/eventView';
 
 import ChartFooter from './chartFooter';
-import EventView from './eventView';
 
 type ResultsChartProps = {
   api: Client;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
index 9123654be0..bbf012fb3c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -9,10 +9,10 @@ import FeatureDisabled from 'app/components/acl/featureDisabled';
 import Hovercard from 'app/components/hovercard';
 import {t} from 'app/locale';
 import withApi from 'app/utils/withApi';
+import EventView from 'app/utils/discover/eventView';
 
 import DiscoverBreadcrumb from './breadcrumb';
 import EventInputName from './eventInputName';
-import EventView from './eventView';
 import SavedQueryButtonGroup from './savedQuery';
 import {HeaderBox, HeaderControls} from './styles';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 68eca64346..fa4d4ac9dc 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -14,8 +14,8 @@ import Input from 'app/components/forms/input';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import {IconBookmark, IconDelete} from 'app/icons';
+import EventView from 'app/utils/discover/eventView';
 
-import EventView from '../eventView';
 import {getDiscoverLandingUrl} from '../utils';
 import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
index 11ad2cf3fe..812e1e689d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
@@ -8,8 +8,7 @@ import {
   updateSavedQuery,
 } from 'app/actionCreators/discoverSavedQueries';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
-
-import EventView from '../eventView';
+import EventView from 'app/utils/discover/eventView';
 
 export function handleCreateQuery(
   api: Client,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx b/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
index 50c3d531aa..7e85da249e 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/sortLink.tsx
@@ -5,9 +5,8 @@ import omit from 'lodash/omit';
 
 import {IconArrow} from 'app/icons/iconArrow';
 import Link from 'app/components/links/link';
-
-import EventView, {Field, Sort, isFieldSortable} from './eventView';
-import {MetaType} from './utils';
+import {Field, Sort} from 'app/utils/discover/fields';
+import EventView, {MetaType, isFieldSortable} from 'app/utils/discover/eventView';
 
 export type Alignments = 'left' | 'right' | undefined;
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
index 7a55f7255d..ad062fda1c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
@@ -1,8 +1,5 @@
 import styled from '@emotion/styled';
 
-import DateTime from 'app/components/dateTime';
-import Link from 'app/components/links/link';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
 export const SectionHeading = styled('h4')`
@@ -19,31 +16,6 @@ export const SectionValue = styled('span')`
   margin-right: ${space(1)};
 `;
 
-export const Container = styled('div')`
-  ${overflowEllipsis};
-`;
-
-export const VersionContainer = styled('div')`
-  ${overflowEllipsis};
-  max-width: 100%;
-  width: auto;
-  display: inline-block;
-`;
-
-export const NumberContainer = styled('div')`
-  text-align: right;
-  ${overflowEllipsis};
-`;
-
-export const StyledDateTime = styled(DateTime)`
-  color: ${p => p.theme.gray2};
-  ${overflowEllipsis};
-`;
-
-export const OverflowLink = styled(Link)`
-  ${overflowEllipsis};
-`;
-
 export const ChartControls = styled('div')`
   display: flex;
   justify-content: space-between;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
index 2cf01d79da..b3240070cd 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditCollection.tsx
@@ -12,10 +12,9 @@ import {t} from 'app/locale';
 import {SelectValue, OrganizationSummary} from 'app/types';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
+import {Column, AGGREGATIONS, FIELDS, TRACING_FIELDS} from 'app/utils/discover/fields';
 
 import {SectionHeading} from '../styles';
-import {AGGREGATIONS, FIELDS, TRACING_FIELDS} from '../eventQueryParams';
-import {Column} from '../eventView';
 import {FieldValue, FieldValueKind} from './types';
 import {ColumnEditRow} from './columnEditRow';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
index 3375952ab0..3b762e5225 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditModal.tsx
@@ -8,8 +8,8 @@ import {ModalRenderProps} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import {OrganizationSummary} from 'app/types';
 import space from 'app/styles/space';
+import {Column} from 'app/utils/discover/fields';
 
-import {Column} from '../eventView';
 import ColumnEditCollection from './columnEditCollection';
 
 type Props = {
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
index 744be2e27d..c8e9a688bb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/columnEditRow.tsx
@@ -8,10 +8,9 @@ import SelectControl from 'app/components/forms/selectControl';
 import {SelectValue} from 'app/types';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
+import {Column, ColumnType, AggregateParameter} from 'app/utils/discover/fields';
 
 import {FieldValueKind, FieldValue} from './types';
-import {ColumnType, AggregateParameter} from '../eventQueryParams';
-import {Column} from '../eventView';
 
 type FieldOptions = Record<string, SelectValue<FieldValue>>;
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
index d5fe96d988..38481befb2 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
-import {getAggregateAlias} from '../utils';
-import {ColumnValueType} from '../eventQueryParams';
+import {ColumnValueType, getAggregateAlias} from 'app/utils/discover/fields';
+
 import {Alignments} from '../sortLink';
 import {TableColumn, TableData, TableDataRow} from './types';
 
@@ -22,7 +22,7 @@ function HeaderCell(props: Props) {
   const alignedTypes: ColumnValueType[] = ['number', 'duration', 'integer'];
   let align: Alignments = alignedTypes.includes(column.type) ? 'right' : 'left';
 
-  if (column.type === 'never' || column.type === '*') {
+  if (column.type === 'never') {
     // fallback to align the column based on the table metadata
     const maybeType =
       tableData && tableData.meta
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 2839d3f41f..ae64719d2f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -8,8 +8,8 @@ import {metric} from 'app/utils/analytics';
 import withApi from 'app/utils/withApi';
 import withTags from 'app/utils/withTags';
 import Pagination from 'app/components/pagination';
+import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 
-import EventView, {isAPIPayloadSimilar} from '../eventView';
 import TableView from './tableView';
 import {TableData} from './types';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 95f9cbd770..a0dd4f0ed5 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -12,15 +12,14 @@ import {assert} from 'app/types/utils';
 import {openModal} from 'app/actionCreators/modal';
 import Link from 'app/components/links/link';
 import Tooltip from 'app/components/tooltip';
-
-import {
-  downloadAsCsv,
-  getFieldRenderer,
-  getExpandedResults,
-  pushEventViewToLocation,
+import EventView, {
   MetaType,
-} from '../utils';
-import EventView, {Column, pickRelevantLocationQueryStrings} from '../eventView';
+  pickRelevantLocationQueryStrings,
+} from 'app/utils/discover/eventView';
+import {Column} from 'app/utils/discover/fields';
+import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
+
+import {downloadAsCsv, getExpandedResults, pushEventViewToLocation} from '../utils';
 import SortLink from '../sortLink';
 import {generateEventSlug, eventDetailsRouteWithEventView} from '../eventDetails/utils';
 import ColumnEditModal from './columnEditModal';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/types.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/types.tsx
index 28fa275b2d..28fbc3bfb9 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/types.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/types.tsx
@@ -1,8 +1,11 @@
 import {GridColumnOrder, GridColumnSortBy} from 'app/components/gridEditable';
-
-import {ColumnType, ColumnValueType, AggregateParameter} from '../eventQueryParams';
-import {Column} from '../eventView';
-import {MetaType} from '../utils';
+import {MetaType} from 'app/utils/discover/eventView';
+import {
+  Column,
+  ColumnType,
+  ColumnValueType,
+  AggregateParameter,
+} from 'app/utils/discover/fields';
 
 /**
  * It is assumed that `aggregation` and `field` have the same ColumnValueType
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
index cd39324f92..f960ae7fd8 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tags.tsx
@@ -17,10 +17,10 @@ import withApi from 'app/utils/withApi';
 import {Organization} from 'app/types';
 import {generateQueryWithTag} from 'app/utils';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
+import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 
 import {SectionHeading} from './styles';
 import {fetchTagFacets, Tag} from './utils';
-import EventView, {isAPIPayloadSimilar} from './eventView';
 
 type Props = {
   api: Client;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
index 2f03fa5460..883f5b3d84 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
@@ -9,8 +9,8 @@ import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import {Event, OrganizationSummary} from 'app/types';
 import Version from 'app/components/version';
+import EventView from 'app/utils/discover/eventView';
 
-import EventView from './eventView';
 import {getExpandedResults} from './utils';
 import {SectionHeading} from './styles';
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 96634af7c3..cd005ea153 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -1,5 +1,4 @@
 import Papa from 'papaparse';
-import partial from 'lodash/partial';
 import pick from 'lodash/pick';
 import isString from 'lodash/isString';
 import {Location, Query} from 'history';
@@ -15,23 +14,17 @@ import {TagSegment} from 'app/components/tagDistributionMeter';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
 import {disableMacros} from 'app/views/discover/result/utils';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
-
-import {
-  AGGREGATE_ALIASES,
-  SPECIAL_FIELDS,
-  FIELD_FORMATTERS,
-  FieldTypes,
-  FieldFormatterRenderFunctionPartial,
-  ALL_VIEWS,
-  TRANSACTION_VIEWS,
-} from './data';
-import EventView, {Field, Column} from './eventView';
+import EventView from 'app/utils/discover/eventView';
 import {
-  Aggregation,
-  AggregationRefinement,
+  Field,
+  Column,
   AGGREGATIONS,
   FIELDS,
-} from './eventQueryParams';
+  explodeFieldString,
+  getAggregateAlias,
+} from 'app/utils/discover/fields';
+
+import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
 import {TableColumn, TableDataRow} from './table/types';
 
 export type EventQuery = {
@@ -43,54 +36,6 @@ export type EventQuery = {
   referrer?: string;
 };
 
-const AGGREGATE_PATTERN = /^([^\(]+)\((.*?)(?:\s*,\s*(.*))?\)$/;
-
-function explodeFieldString(field: string): Column {
-  const results = field.match(AGGREGATE_PATTERN);
-
-  if (results && results.length >= 3) {
-    return {
-      kind: 'function',
-      function: [
-        results[1] as Aggregation,
-        results[2],
-        results[3] as AggregationRefinement,
-      ],
-    };
-  }
-
-  return {kind: 'field', field};
-}
-
-export function explodeField(field: Field): Column {
-  const results = explodeFieldString(field.field);
-
-  return results;
-}
-
-/**
- * Takes a view and determines if there are any aggregate fields in it.
- *
- * @param {Object} view
- * @returns {Boolean}
- */
-export function hasAggregateField(eventView: EventView): boolean {
-  return eventView
-    .getFields()
-    .some(
-      field => AGGREGATE_ALIASES.includes(field as any) || field.match(AGGREGATE_PATTERN)
-    );
-}
-
-/**
- * Check if a field name looks like an aggregate function or known aggregate alias.
- */
-export function isAggregateField(field: string): boolean {
-  return (
-    AGGREGATE_ALIASES.includes(field as any) || field.match(AGGREGATE_PATTERN) !== null
-  );
-}
-
 export type Tag = {
   key: string;
   topValues: Array<TagSegment>;
@@ -146,45 +91,6 @@ export function fetchTotalCount(
     .then((res: Response) => res.count);
 }
 
-export type MetaType = Record<string, FieldTypes>;
-
-/**
- * Get the field renderer for the named field and metadata
- *
- * @param {String} field name
- * @param {object} metadata mapping.
- * @returns {Function}
- */
-export function getFieldRenderer(
-  field: string,
-  meta: MetaType
-): FieldFormatterRenderFunctionPartial {
-  if (SPECIAL_FIELDS.hasOwnProperty(field)) {
-    return SPECIAL_FIELDS[field].renderFunc;
-  }
-  const fieldName = getAggregateAlias(field);
-  const fieldType = meta[fieldName];
-
-  if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
-    return partial(FIELD_FORMATTERS[fieldType].renderFunc, fieldName);
-  }
-  return partial(FIELD_FORMATTERS.string.renderFunc, fieldName);
-}
-
-/**
- * Get the alias that the API results will have for a given aggregate function name
- */
-export function getAggregateAlias(field: string): string {
-  if (!field.match(AGGREGATE_PATTERN)) {
-    return field;
-  }
-  return field
-    .replace(AGGREGATE_PATTERN, '$1_$2_$3')
-    .replace(/\./g, '_')
-    .replace(/\,/g, '_')
-    .replace(/_+$/, '');
-}
-
 export type QueryWithColumnState =
   | Query
   | {
@@ -203,13 +109,15 @@ const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   width: COL_WIDTH_UNDEFINED,
 };
 
+// TODO(mark) these types are coupled to the gridEditable component types and
+// I'd prefer the types to be more general purpose but that will require a second pass.
 export function decodeColumnOrder(
   fields: Readonly<Field[]>
 ): TableColumn<React.ReactText>[] {
   return fields.map((f: Field) => {
     const column: TableColumn<React.ReactText> = {...TEMPLATE_TABLE_COLUMN};
 
-    const col = explodeField(f);
+    const col = explodeFieldString(f.field);
     column.key = f.field;
     column.name = f.field;
     column.width = f.width || COL_WIDTH_UNDEFINED;
@@ -333,16 +241,16 @@ export function downloadAsCsv(tableData, columnOrder, filename) {
   return encodedDataUrl;
 }
 
-// A map between a field alias to a transform function to convert the aggregated field alias into
-// its un-aggregated form
-const TRANSFORM_AGGREGATES: {[field: string]: string | undefined} = {
+// A map between aggregate function names and its un-aggregated form
+const TRANSFORM_AGGREGATES: {[field: string]: string} = {
   p99: 'transaction.duration',
   p95: 'transaction.duration',
   p75: 'transaction.duration',
   last_seen: 'timestamp',
   latest_event: 'id',
-  apdex: undefined,
-  impact: undefined,
+  apdex: '',
+  impact: '',
+  error_rate: '',
 };
 
 /**
@@ -359,11 +267,8 @@ export function getExpandedResults(
   // Find aggregate fields and flag them for updates.
   const fieldsToUpdate: number[] = [];
   eventView.fields.forEach((field: Field, index: number) => {
-    const column = explodeField(field);
-    if (
-      column.kind === 'function' ||
-      (column.kind === 'field' && AGGREGATE_ALIASES.includes(column.field))
-    ) {
+    const column = explodeFieldString(field.field);
+    if (column.kind === 'function') {
       fieldsToUpdate.push(index);
     }
   });
@@ -375,18 +280,23 @@ export function getExpandedResults(
   // make a best effort to replace aggregated columns with their non-aggregated form
   fieldsToUpdate.forEach((indexToUpdate: number) => {
     const currentField: Field = nextView.fields[indexToUpdate];
-    const exploded = explodeField(currentField);
+    const exploded = explodeFieldString(currentField.field);
 
     let fieldNameAlias: string = '';
-    if (exploded.kind === 'function' && TRANSFORM_AGGREGATES[exploded.function[0]]) {
+    if (
+      exploded.kind === 'function' &&
+      TRANSFORM_AGGREGATES.hasOwnProperty(exploded.function[0])
+    ) {
       fieldNameAlias = exploded.function[0];
     } else if (exploded.kind === 'field') {
       fieldNameAlias = exploded.field;
     }
 
-    if (fieldNameAlias && TRANSFORM_AGGREGATES.hasOwnProperty(fieldNameAlias)) {
+    if (
+      fieldNameAlias !== undefined &&
+      TRANSFORM_AGGREGATES.hasOwnProperty(fieldNameAlias)
+    ) {
       const nextFieldName = TRANSFORM_AGGREGATES[fieldNameAlias];
-
       if (!nextFieldName || transformedFields.has(nextFieldName)) {
         // this field is either duplicated in another column, or nextFieldName is undefined.
         // in either case, we remove this column
@@ -455,13 +365,10 @@ function generateAdditionalConditions(
   }
 
   eventView.fields.forEach((field: Field) => {
-    const column = explodeField(field);
+    const column = explodeFieldString(field.field);
 
     // Skip aggregate fields
-    if (
-      column.kind === 'function' ||
-      (column.kind === 'field' && AGGREGATE_ALIASES.includes(column.field))
-    ) {
+    if (column.kind === 'function') {
       return;
     }
 
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
index 7f45db8a04..da4054c423 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/actions.jsx
@@ -14,7 +14,7 @@ import {t} from 'app/locale';
 import {uniqueId} from 'app/utils/guid';
 import Button from 'app/components/button';
 import DropdownLink from 'app/components/dropdownLink';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import Feature from 'app/components/acl/feature';
 import FeatureDisabled from 'app/components/acl/featureDisabled';
 import GroupActions from 'app/actions/groupActions';
diff --git a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
index f981bfd547..3d02150c63 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/footer.tsx
@@ -5,7 +5,7 @@ import {Location} from 'history';
 import {t} from 'app/locale';
 import {Client} from 'app/api';
 import {fetchTotalCount} from 'app/views/eventsV2/utils';
-import EventView, {isAPIPayloadSimilar} from 'app/views/eventsV2/eventView';
+import EventView, {isAPIPayloadSimilar} from 'app/utils/discover/eventView';
 import {Organization} from 'app/types';
 
 import {ChartControls, SectionHeading, SectionValue} from './styles';
diff --git a/src/sentry/static/sentry/app/views/performance/charts/index.tsx b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
index ffaf8839a5..f6bb986f3b 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/index.tsx
@@ -11,7 +11,7 @@ import LoadingPanel from 'app/views/events/loadingPanel';
 import getDynamicText from 'app/utils/getDynamicText';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {Panel} from 'app/components/panels';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {IconWarning} from 'app/icons';
diff --git a/src/sentry/static/sentry/app/views/performance/data.tsx b/src/sentry/static/sentry/app/views/performance/data.tsx
index d7e7a1e2a6..f31564d52e 100644
--- a/src/sentry/static/sentry/app/views/performance/data.tsx
+++ b/src/sentry/static/sentry/app/views/performance/data.tsx
@@ -2,7 +2,7 @@ import {Location} from 'history';
 
 import {t} from 'app/locale';
 import {NewQuery} from 'app/types';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {decodeScalar} from 'app/views/eventsV2/utils';
 import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
 
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 13790b7155..0d2fed13b2 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -10,7 +10,7 @@ import GlobalSelectionHeader from 'app/components/organizations/globalSelectionH
 import {PageContent} from 'app/styles/organization';
 import NoProjectMessage from 'app/components/noProjectMessage';
 import Alert from 'app/components/alert';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {StyledPageHeader} from 'app/views/eventsV2/landing';
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index fbd0028f21..308eec08e6 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -13,20 +13,16 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import Pagination from 'app/components/pagination';
 import Link from 'app/components/links/link';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView, {MetaType, EventData} from 'app/utils/discover/eventView';
 import SortLink from 'app/views/eventsV2/sortLink';
 import {TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
-import {
-  getFieldRenderer,
-  MetaType,
-  getAggregateAlias,
-  decodeScalar,
-} from 'app/views/eventsV2/utils';
-import {EventData} from 'app/views/eventsV2/data';
+import {decodeScalar} from 'app/views/eventsV2/utils';
 import withProjects from 'app/utils/withProjects';
 import EventsV2 from 'app/utils/discover/eventsv2';
 import SearchBar from 'app/components/searchBar';
+import {getAggregateAlias} from 'app/utils/discover/fields';
+import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 
 import {transactionSummaryRouteWithEventView} from './transactionSummary/utils';
 import {
@@ -119,6 +115,7 @@ class Table extends React.Component<Props> {
 
     return columnOrder.map((column, index) => {
       const field = String(column.key);
+      // TODO(mark) add a better abstraction for this.
       const fieldName = getAggregateAlias(field);
       const fieldType = tableMeta[fieldName];
 
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
index 72e859c0a5..5a73501358 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
@@ -7,7 +7,7 @@ import {Organization} from 'app/types';
 import Link from 'app/components/links/link';
 import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 import {getPerformanceLandingUrl} from '../utils';
 import {transactionSummaryRouteWithEventView} from './utils';
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index 40f2fb6c1c..c6b7295d24 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -4,7 +4,7 @@ import styled from '@emotion/styled';
 
 import {Organization} from 'app/types';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {ContentBox, HeaderBox} from 'app/views/eventsV2/styles';
 import Tags from 'app/views/eventsV2/tags';
 import EventsV2 from 'app/utils/discover/eventsv2';
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index 1f4ed09892..afaf0147bb 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -11,7 +11,7 @@ import withProjects from 'app/utils/withProjects';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import {PageContent} from 'app/styles/organization';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {decodeScalar} from 'app/views/eventsV2/utils';
 import {stringifyQueryObject} from 'app/utils/tokenizeSearch';
 import NoProjectMessage from 'app/components/noProjectMessage';
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
index 9cdae187cd..dce77a8ffe 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/latencyChart.tsx
@@ -19,7 +19,7 @@ import {
 } from 'app/views/eventsV2/styles';
 import {OrganizationSummary} from 'app/types';
 import LoadingPanel from 'app/views/events/loadingPanel';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import {getDuration} from 'app/utils/formatters';
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
index 9ac57c4544..3f9e16fc9c 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
@@ -12,10 +12,11 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import Link from 'app/components/links/link';
 import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
-import EventView from 'app/views/eventsV2/eventView';
 import SortLink from 'app/views/eventsV2/sortLink';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
-import {getFieldRenderer, MetaType, getAggregateAlias} from 'app/views/eventsV2/utils';
+import EventView, {MetaType} from 'app/utils/discover/eventView';
+import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
+import {getAggregateAlias} from 'app/utils/discover/fields';
 import {
   generateEventSlug,
   eventDetailsRouteWithEventView,
@@ -123,6 +124,7 @@ class SummaryContentTable extends React.Component<Props> {
 
     return columnOrder.map((column, index) => {
       const field = String(column.key);
+      // TODO add a better abstraction for this in fieldRenderers.
       const fieldName = getAggregateAlias(field);
       const fieldType = tableMeta[fieldName];
 
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
index adbae244dd..943456bac8 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
@@ -4,9 +4,9 @@ import styled from '@emotion/styled';
 
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {t} from 'app/locale';
-import {getFieldRenderer} from 'app/views/eventsV2/utils';
+import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import {assert} from 'app/types/utils';
 import EventsV2 from 'app/utils/discover/eventsv2';
 
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx
index 87a2c610cd..635622f847 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/overview/issues.tsx
@@ -9,7 +9,7 @@ import Button from 'app/components/button';
 import GroupList from 'app/views/releases/detail/groupList';
 import space from 'app/styles/space';
 import {Panel, PanelBody} from 'app/components/panels';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {formatVersion} from 'app/utils/formatters';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import {DEFAULT_RELATIVE_PERIODS} from 'app/constants';
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
similarity index 99%
rename from tests/js/spec/views/eventsV2/eventView.spec.jsx
rename to tests/js/spec/utils/discover/eventView.spec.jsx
index 80bb72cf16..50b86d5c9d 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -1,9 +1,9 @@
 import EventView, {
+  CHART_AXIS_OPTIONS,
   isAPIPayloadSimilar,
   pickRelevantLocationQueryStrings,
-} from 'app/views/eventsV2/eventView';
+} from 'app/utils/discover/eventView';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
-import {CHART_AXIS_OPTIONS} from 'app/views/eventsV2/data';
 
 const generateFields = fields =>
   fields.map(field => ({
@@ -1816,7 +1816,6 @@ describe('EventView.sortOnField()', function() {
     const field = state.fields[1];
 
     const eventView2 = eventView.sortOnField(field, meta);
-
     expect(eventView2 === eventView).toBe(true);
   });
 
@@ -2136,6 +2135,30 @@ describe('EventView.getYAxis', function() {
   });
 });
 
+describe('EventView.hasAggregateField', function() {
+  it('ensures an eventview has an aggregate field', function() {
+    let eventView = new EventView({
+      fields: [{field: 'foobar'}],
+      sorts: [],
+      query: '',
+      project: [],
+      environment: [],
+    });
+
+    expect(eventView.hasAggregateField()).toBe(false);
+
+    eventView = new EventView({
+      fields: [{field: 'count(foo.bar.is-Enterprise_42)'}],
+      sorts: [],
+      query: '',
+      project: [],
+      environment: [],
+    });
+
+    expect(eventView.hasAggregateField()).toBe(true);
+  });
+});
+
 describe('isAPIPayloadSimilar', function() {
   const state = {
     id: '1234',
diff --git a/tests/js/spec/utils/discover/fieldRenderer.spec.jsx b/tests/js/spec/utils/discover/fieldRenderer.spec.jsx
new file mode 100644
index 0000000000..a039d2156c
--- /dev/null
+++ b/tests/js/spec/utils/discover/fieldRenderer.spec.jsx
@@ -0,0 +1,88 @@
+import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
+import {mount, mountWithTheme} from 'sentry-test/enzyme';
+import {initializeOrg} from 'sentry-test/initializeOrg';
+
+describe('getFieldRenderer', function() {
+  let location, context, project, organization, data;
+  beforeEach(function() {
+    context = initializeOrg({
+      project: TestStubs.Project(),
+    });
+    organization = context.organization;
+    project = context.project;
+
+    location = {
+      pathname: '/events',
+      query: {},
+    };
+    data = {
+      title: 'ValueError: something bad',
+      transaction: 'api.do_things',
+      boolValue: 1,
+      numeric: 1.23,
+      createdAt: new Date(2019, 9, 3, 12, 13, 14),
+      url: '/example',
+      latest_event: 'deadbeef',
+      project: project.slug,
+    };
+  });
+
+  it('can render string fields', function() {
+    const renderer = getFieldRenderer('url', {url: 'string'});
+    expect(renderer).toBeInstanceOf(Function);
+    const wrapper = mount(renderer(data, {location, organization}));
+    const text = wrapper.find('Container');
+    expect(text.text()).toEqual(data.url);
+  });
+
+  it('can render boolean fields', function() {
+    const renderer = getFieldRenderer('boolValue', {boolValue: 'boolean'});
+    expect(renderer).toBeInstanceOf(Function);
+    const wrapper = mount(renderer(data, {location, organization}));
+    const text = wrapper.find('Container');
+    expect(text.text()).toEqual('yes');
+  });
+
+  it('can render integer fields', function() {
+    const renderer = getFieldRenderer('numeric', {numeric: 'integer'});
+    expect(renderer).toBeInstanceOf(Function);
+    const wrapper = mount(renderer(data, {location, organization}));
+
+    const value = wrapper.find('Count');
+    expect(value).toHaveLength(1);
+    expect(value.props().value).toEqual(data.numeric);
+  });
+
+  it('can render date fields', function() {
+    const renderer = getFieldRenderer('createdAt', {createdAt: 'date'});
+    expect(renderer).toBeInstanceOf(Function);
+    const wrapper = mount(renderer(data, {location, organization}));
+
+    const value = wrapper.find('StyledDateTime');
+    expect(value).toHaveLength(1);
+    expect(value.props().date).toEqual(data.createdAt);
+  });
+
+  it('can render null date fields', function() {
+    const renderer = getFieldRenderer('nope', {nope: 'date'});
+    expect(renderer).toBeInstanceOf(Function);
+    const wrapper = mount(renderer(data, {location, organization}));
+
+    const value = wrapper.find('StyledDateTime');
+    expect(value).toHaveLength(0);
+    expect(wrapper.text()).toEqual('n/a');
+  });
+
+  it('can render project as an avatar', function() {
+    const renderer = getFieldRenderer('project', {project: 'string'});
+    expect(renderer).toBeInstanceOf(Function);
+    const wrapper = mountWithTheme(
+      renderer(data, {location, organization}),
+      context.routerContext
+    );
+
+    const value = wrapper.find('ProjectBadge');
+    expect(value).toHaveLength(1);
+    expect(value.props().project).toEqual(project);
+  });
+});
diff --git a/tests/js/spec/utils/discover/fields.spec.jsx b/tests/js/spec/utils/discover/fields.spec.jsx
new file mode 100644
index 0000000000..71e0802d73
--- /dev/null
+++ b/tests/js/spec/utils/discover/fields.spec.jsx
@@ -0,0 +1,89 @@
+import {
+  getAggregateAlias,
+  isAggregateField,
+  explodeField,
+} from 'app/utils/discover/fields';
+
+describe('getAggregateAlias', function() {
+  it('no-ops simple fields', function() {
+    expect(getAggregateAlias('field')).toEqual('field');
+    expect(getAggregateAlias('under_field')).toEqual('under_field');
+    expect(getAggregateAlias('foo.bar.is-Enterprise_42')).toEqual(
+      'foo.bar.is-Enterprise_42'
+    );
+  });
+
+  it('handles 0 arg functions', function() {
+    expect(getAggregateAlias('count()')).toEqual('count');
+    expect(getAggregateAlias('count_unique()')).toEqual('count_unique');
+  });
+
+  it('handles 1 arg functions', function() {
+    expect(getAggregateAlias('count(id)')).toEqual('count_id');
+    expect(getAggregateAlias('count_unique(user)')).toEqual('count_unique_user');
+    expect(getAggregateAlias('count_unique(issue.id)')).toEqual('count_unique_issue_id');
+    expect(getAggregateAlias('count(foo.bar.is-Enterprise_42)')).toEqual(
+      'count_foo_bar_is-Enterprise_42'
+    );
+  });
+
+  it('handles 2 arg functions', function() {
+    expect(getAggregateAlias('percentile(transaction.duration,0.81)')).toEqual(
+      'percentile_transaction_duration_0_81'
+    );
+    expect(getAggregateAlias('percentile(transaction.duration,  0.11)')).toEqual(
+      'percentile_transaction_duration_0_11'
+    );
+  });
+});
+
+describe('isAggregateField', function() {
+  it('detects aliases', function() {
+    expect(isAggregateField('p888')).toBe(false);
+    expect(isAggregateField('other_field')).toBe(false);
+    expect(isAggregateField('foo.bar.is-Enterprise_42')).toBe(false);
+  });
+
+  it('detects functions', function() {
+    expect(isAggregateField('count()')).toBe(true);
+    expect(isAggregateField('p75()')).toBe(true);
+    expect(isAggregateField('percentile(transaction.duration, 0.55)')).toBe(true);
+    expect(isAggregateField('last_seen()')).toBe(true);
+    expect(isAggregateField('thing(')).toBe(false);
+    expect(isAggregateField('unique_count(user)')).toBe(true);
+    expect(isAggregateField('unique_count(foo.bar.is-Enterprise_42)')).toBe(true);
+  });
+});
+
+describe('explodeField', function() {
+  it('explodes fields', function() {
+    expect(explodeField({field: 'foobar'})).toEqual({
+      kind: 'field',
+      field: 'foobar',
+    });
+
+    // has width
+    expect(explodeField({field: 'foobar', width: 123})).toEqual({
+      kind: 'field',
+      field: 'foobar',
+    });
+
+    // has aggregation
+    expect(explodeField({field: 'count(foobar)', width: 123})).toEqual({
+      kind: 'function',
+      function: ['count', 'foobar', undefined],
+    });
+
+    // custom tag
+    expect(explodeField({field: 'foo.bar.is-Enterprise_42', width: 123})).toEqual({
+      kind: 'field',
+      field: 'foo.bar.is-Enterprise_42',
+    });
+
+    // custom tag with aggregation
+    expect(explodeField({field: 'count(foo.bar.is-Enterprise_42)', width: 123})).toEqual({
+      kind: 'function',
+      function: ['count', 'foo.bar.is-Enterprise_42', undefined],
+    });
+  });
+});
diff --git a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
index a153432add..5629853ba7 100644
--- a/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventDetails.spec.jsx
@@ -4,7 +4,7 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import EventDetails from 'app/views/eventsV2/eventDetails';
 import {ALL_VIEWS, DEFAULT_EVENT_VIEW} from 'app/views/eventsV2/data';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 
 describe('EventsV2 > EventDetails', function() {
   const allEventsView = EventView.fromSavedQuery(DEFAULT_EVENT_VIEW);
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 85a23d6c1e..a01aafb836 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import SavedQueryButtonGroup from 'app/views/eventsV2/savedQuery';
 import {ALL_VIEWS} from 'app/views/eventsV2/data';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import * as utils from 'app/views/eventsV2/savedQuery/utils';
 
 const SELECTOR_BUTTON_SAVE_AS = 'ButtonSaveAs';
diff --git a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
index fb0c314ee2..0c96557c05 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/utils.spec.jsx
@@ -1,5 +1,5 @@
 import {ALL_VIEWS} from 'app/views/eventsV2/data';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {
   handleCreateQuery,
   handleUpdateQuery,
diff --git a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx b/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
deleted file mode 100644
index c4541193b4..0000000000
--- a/tests/js/spec/views/eventsV2/table/columnEditModal.spec.jsx
+++ /dev/null
@@ -1,245 +0,0 @@
-import React from 'react';
-
-import {mountWithTheme} from 'sentry-test/enzyme';
-import {initializeOrg} from 'sentry-test/initializeOrg';
-import {selectByLabel, openMenu} from 'sentry-test/select-new';
-import ColumnEditModal from 'app/views/eventsV2/table/columnEditModal';
-
-const stubEl = props => <div>{props.children}</div>;
-
-function mountModal({tagKeys, columns, onApply}, initialData) {
-  return mountWithTheme(
-    <ColumnEditModal
-      Header={stubEl}
-      Footer={stubEl}
-      Body={stubEl}
-      organization={initialData.organization}
-      tagKeys={tagKeys}
-      columns={columns}
-      onApply={onApply}
-      closeModal={() => void 0}
-    />,
-    initialData.routerContext
-  );
-}
-
-describe('EventsV2 -> ColumnEditModal', function() {
-  const initialData = initializeOrg({
-    organization: {features: ['transaction-events']},
-  });
-  const tagKeys = ['browser.name', 'custom-field'];
-  const columns = [
-    {
-      kind: 'field',
-      field: 'event.type',
-    },
-    {
-      kind: 'field',
-      field: 'browser.name',
-    },
-    {
-      kind: 'function',
-      function: ['count', 'id'],
-    },
-    {
-      kind: 'function',
-      function: ['count_unique', 'title'],
-    },
-    {
-      kind: 'function',
-      function: ['p95', ''],
-    },
-    {
-      kind: 'field',
-      field: 'issue.id',
-    },
-    {
-      kind: 'function',
-      function: ['count_unique', 'issue.id'],
-    },
-  ];
-
-  describe('basic rendering', function() {
-    const wrapper = mountModal(
-      {
-        columns,
-        onApply: () => void 0,
-        tagKeys,
-      },
-      initialData
-    );
-
-    it('renders fields and basic controls', function() {
-      // Should have fields equal to the columns.
-      expect(wrapper.find('ColumnEditRow')).toHaveLength(columns.length);
-
-      expect(wrapper.find('button[aria-label="Apply"]')).toHaveLength(1);
-      expect(wrapper.find('button[aria-label="Add a Column"]')).toHaveLength(1);
-    });
-
-    it('renders delete and grab buttons', function() {
-      expect(
-        wrapper.find('RowContainer button[aria-label="Remove column"]').length
-      ).toEqual(columns.length);
-      expect(
-        wrapper.find('RowContainer button[aria-label="Drag to reorder"]').length
-      ).toEqual(columns.length);
-    });
-  });
-
-  describe('rendering unknown fields', function() {
-    const wrapper = mountModal(
-      {
-        columns: [
-          {kind: 'function', function: ['count_unique', 'user-defined']},
-          {kind: 'field', field: 'user-def'},
-        ],
-        onApply: () => void 0,
-        tagKeys,
-      },
-      initialData
-    );
-
-    it('renders unknown fields in field and field parameter controls', function() {
-      const funcRow = wrapper.find('ColumnEditRow').first();
-      expect(funcRow.find('SelectControl[name="field"] SingleValue').text()).toBe(
-        'count_unique(\u2026)'
-      );
-      expect(funcRow.find('SelectControl[name="parameter"] SingleValue').text()).toBe(
-        'user-defined'
-      );
-
-      const fieldRow = wrapper.find('ColumnEditRow').last();
-      expect(fieldRow.find('SelectControl[name="field"] SingleValue').text()).toBe(
-        'user-def'
-      );
-      expect(fieldRow.find('StyledInput[disabled]')).toHaveLength(1);
-    });
-  });
-
-  describe('rendering functions', function() {
-    const wrapper = mountModal(
-      {
-        columns: [
-          {kind: 'function', function: ['count', 'id']},
-          {kind: 'function', function: ['count_unique', 'title']},
-          {kind: 'function', function: ['percentile', 'transaction.duration', '0.66']},
-        ],
-        onApply: () => void 0,
-        tagKeys,
-      },
-      initialData
-    );
-
-    it('renders three columns when needed', function() {
-      const countRow = wrapper.find('ColumnEditRow').first();
-      // Has a select and 2 disabled inputs
-      expect(countRow.find('SelectControl')).toHaveLength(1);
-      expect(countRow.find('StyledInput[disabled]')).toHaveLength(2);
-
-      const percentileRow = wrapper.find('ColumnEditRow').last();
-      // two select fields, and one number input.
-      expect(percentileRow.find('SelectControl')).toHaveLength(2);
-      expect(percentileRow.find('StyledInput[disabled]')).toHaveLength(0);
-      expect(percentileRow.find('StyledInput[inputMode="numeric"]')).toHaveLength(1);
-    });
-  });
-
-  describe('function & column selection', function() {
-    const wrapper = mountModal(
-      {
-        columns: [columns[0]],
-        onApply: () => void 0,
-        tagKeys,
-      },
-      initialData
-    );
-
-    it('restricts column choices', function() {
-      selectByLabel(wrapper, 'avg(\u2026)', {name: 'field', at: 0, control: true});
-
-      openMenu(wrapper, {name: 'parameter', at: 0, control: true});
-      const options = wrapper
-        .find('ColumnEditRow SelectControl[name="parameter"] Option')
-        .map(option => option.props().label);
-
-      expect(options).not.toContain('title');
-      expect(options).toContain('transaction.duration');
-    });
-
-    it('shows no options for parameterless functions', function() {
-      selectByLabel(wrapper, 'p95()', {name: 'field', at: 0, control: true});
-
-      const parameter = wrapper.find('ColumnEditRow StyledInput[disabled]');
-      expect(parameter).toHaveLength(1);
-    });
-
-    it('shows additional inputs for multi-parameter functions', function() {
-      selectByLabel(wrapper, 'percentile(\u2026)', {name: 'field', at: 0, control: true});
-
-      // Parameter select should display and use the default value.
-      const field = wrapper.find('ColumnEditRow SelectControl[name="parameter"]');
-      expect(field.find('SingleValue').text()).toBe('transaction.duration');
-
-      // Input should show and have default value.
-      const refinement = wrapper.find('ColumnEditRow input[inputMode="numeric"]');
-      expect(refinement.props().value).toBe('0.5');
-    });
-  });
-
-  describe('removing rows', function() {
-    const wrapper = mountModal(
-      {
-        columns: [columns[0], columns[1]],
-        onApply: () => void 0,
-        tagKeys,
-      },
-      initialData
-    );
-    it('allows rows to be removed, but not the last one', function() {
-      expect(wrapper.find('ColumnEditRow')).toHaveLength(2);
-      wrapper
-        .find('RowContainer button[aria-label="Remove column"]')
-        .first()
-        .simulate('click');
-
-      expect(wrapper.find('ColumnEditRow')).toHaveLength(1);
-
-      // Last row cannot be removed or dragged.
-      expect(
-        wrapper.find('RowContainer button[aria-label="Remove column"]')
-      ).toHaveLength(0);
-      expect(
-        wrapper.find('RowContainer button[aria-label="Drag to reorder"]')
-      ).toHaveLength(0);
-    });
-  });
-
-  describe('apply action', function() {
-    const onApply = jest.fn();
-    const wrapper = mountModal(
-      {
-        columns: [columns[0], columns[1]],
-        onApply,
-        tagKeys,
-      },
-      initialData
-    );
-    it('reflects added and removed columns', function() {
-      // Remove a column, then add a blank one an select a value in it.
-      wrapper
-        .find('button[aria-label="Remove column"]')
-        .first()
-        .simulate('click');
-
-      wrapper.find('button[aria-label="Add a Column"]').simulate('click');
-      wrapper.update();
-
-      selectByLabel(wrapper, 'title', {name: 'field', at: 1, control: true});
-
-      wrapper.find('button[aria-label="Apply"]').simulate('click');
-
-      expect(onApply).toHaveBeenCalledWith([columns[1], {kind: 'field', field: 'title'}]);
-    });
-  });
-});
diff --git a/tests/js/spec/views/eventsV2/tags.spec.jsx b/tests/js/spec/views/eventsV2/tags.spec.jsx
index b6910f045a..1b0442c705 100644
--- a/tests/js/spec/views/eventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/eventsV2/tags.spec.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {mount} from 'sentry-test/enzyme';
 import {Client} from 'app/api';
 import {Tags} from 'app/views/eventsV2/tags';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 
 describe('Tags', function() {
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 5744515d22..8384acfbe5 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -1,140 +1,15 @@
 import {browserHistory} from 'react-router';
 
-import {mount, mountWithTheme} from 'sentry-test/enzyme';
-import {initializeOrg} from 'sentry-test/initializeOrg';
-import EventView from 'app/views/eventsV2/eventView';
+import EventView from 'app/utils/discover/eventView';
 import {
-  getAggregateAlias,
-  isAggregateField,
   decodeColumnOrder,
   pushEventViewToLocation,
   getExpandedResults,
-  getFieldRenderer,
   getDiscoverLandingUrl,
-  explodeField,
-  hasAggregateField,
   downloadAsCsv,
 } from 'app/views/eventsV2/utils';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 
-describe('getAggregateAlias', function() {
-  it('no-ops simple fields', function() {
-    expect(getAggregateAlias('field')).toEqual('field');
-    expect(getAggregateAlias('under_field')).toEqual('under_field');
-    expect(getAggregateAlias('foo.bar.is-Enterprise_42')).toEqual(
-      'foo.bar.is-Enterprise_42'
-    );
-  });
-
-  it('handles 0 arg functions', function() {
-    expect(getAggregateAlias('count()')).toEqual('count');
-    expect(getAggregateAlias('count_unique()')).toEqual('count_unique');
-  });
-
-  it('handles 1 arg functions', function() {
-    expect(getAggregateAlias('count(id)')).toEqual('count_id');
-    expect(getAggregateAlias('count_unique(user)')).toEqual('count_unique_user');
-    expect(getAggregateAlias('count_unique(issue.id)')).toEqual('count_unique_issue_id');
-    expect(getAggregateAlias('count(foo.bar.is-Enterprise_42)')).toEqual(
-      'count_foo_bar_is-Enterprise_42'
-    );
-  });
-
-  it('handles 2 arg functions', function() {
-    expect(getAggregateAlias('percentile(transaction.duration,0.81)')).toEqual(
-      'percentile_transaction_duration_0_81'
-    );
-    expect(getAggregateAlias('percentile(transaction.duration,  0.11)')).toEqual(
-      'percentile_transaction_duration_0_11'
-    );
-  });
-});
-
-describe('getFieldRenderer', function() {
-  let location, context, project, organization, data;
-  beforeEach(function() {
-    context = initializeOrg({
-      project: TestStubs.Project(),
-    });
-    organization = context.organization;
-    project = context.project;
-
-    location = {
-      pathname: '/events',
-      query: {},
-    };
-    data = {
-      title: 'ValueError: something bad',
-      transaction: 'api.do_things',
-      boolValue: 1,
-      numeric: 1.23,
-      createdAt: new Date(2019, 9, 3, 12, 13, 14),
-      url: '/example',
-      latest_event: 'deadbeef',
-      project: project.slug,
-    };
-  });
-
-  it('can render string fields', function() {
-    const renderer = getFieldRenderer('url', {url: 'string'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-    const text = wrapper.find('Container');
-    expect(text.text()).toEqual(data.url);
-  });
-
-  it('can render boolean fields', function() {
-    const renderer = getFieldRenderer('boolValue', {boolValue: 'boolean'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-    const text = wrapper.find('Container');
-    expect(text.text()).toEqual('yes');
-  });
-
-  it('can render integer fields', function() {
-    const renderer = getFieldRenderer('numeric', {numeric: 'integer'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-
-    const value = wrapper.find('Count');
-    expect(value).toHaveLength(1);
-    expect(value.props().value).toEqual(data.numeric);
-  });
-
-  it('can render date fields', function() {
-    const renderer = getFieldRenderer('createdAt', {createdAt: 'date'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-
-    const value = wrapper.find('StyledDateTime');
-    expect(value).toHaveLength(1);
-    expect(value.props().date).toEqual(data.createdAt);
-  });
-
-  it('can render null date fields', function() {
-    const renderer = getFieldRenderer('nope', {nope: 'date'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-
-    const value = wrapper.find('StyledDateTime');
-    expect(value).toHaveLength(0);
-    expect(wrapper.text()).toEqual('n/a');
-  });
-
-  it('can render project as an avatar', function() {
-    const renderer = getFieldRenderer('project', {project: 'string'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mountWithTheme(
-      renderer(data, {location, organization}),
-      context.routerContext
-    );
-
-    const value = wrapper.find('ProjectBadge');
-    expect(value).toHaveLength(1);
-    expect(value.props().project).toEqual(project);
-  });
-});
-
 describe('decodeColumnOrder', function() {
   it('can decode 0 elements', function() {
     const results = decodeColumnOrder([]);
@@ -298,30 +173,13 @@ describe('pushEventViewToLocation', function() {
   });
 });
 
-describe('isAggregateField', function() {
-  it('detects aliases', function() {
-    expect(isAggregateField('p888')).toBe(false);
-    expect(isAggregateField('other_field')).toBe(false);
-    expect(isAggregateField('foo.bar.is-Enterprise_42')).toBe(false);
-    expect(isAggregateField('p75')).toBe(true);
-    expect(isAggregateField('last_seen')).toBe(true);
-  });
-
-  it('detects functions', function() {
-    expect(isAggregateField('thing(')).toBe(false);
-    expect(isAggregateField('count()')).toBe(true);
-    expect(isAggregateField('unique_count(user)')).toBe(true);
-    expect(isAggregateField('unique_count(foo.bar.is-Enterprise_42)')).toBe(true);
-  });
-});
-
 describe('getExpandedResults()', function() {
   const state = {
     id: '1234',
     name: 'best query',
     fields: [
       {field: 'count()'},
-      {field: 'last_seen'},
+      {field: 'last_seen()'},
       {field: 'title'},
       {field: 'custom_tag'},
     ],
@@ -351,7 +209,7 @@ describe('getExpandedResults()', function() {
       ...state,
       fields: [
         {field: 'count()'},
-        {field: 'last_seen'},
+        {field: 'last_seen()'},
         {field: 'title'},
         {field: 'custom_tag'},
         {field: 'count(id)'},
@@ -370,23 +228,18 @@ describe('getExpandedResults()', function() {
     view = new EventView({
       ...state,
       fields: [
-        {field: 'last_seen'}, // expect this to be transformed to transaction.duration
-        {field: 'latest_event'},
+        {field: 'last_seen()'}, // expect this to be transformed to timestamp
+        {field: 'latest_event()'},
         {field: 'title'},
         {field: 'avg(transaction.duration)'}, // expect this to be dropped
         {field: 'p75()'},
         {field: 'p95()'},
         {field: 'p99()'},
-        // legacy parameterless functions
-        {field: 'p75'},
-        {field: 'p95'},
-        {field: 'p99'},
         {field: 'custom_tag'},
         {field: 'title'}, // not expected to be dropped
         {field: 'unique_count(id)'},
-        // expect these aliases to be dropped
-        {field: 'apdex'},
-        {field: 'impact'},
+        {field: 'apdex()'}, // should be dropped
+        {field: 'impact()'}, // should be dropped
       ],
     });
 
@@ -515,63 +368,6 @@ describe('getDiscoverLandingUrl', function() {
   });
 });
 
-describe('explodeField', function() {
-  it('explodes fields', function() {
-    expect(explodeField({field: 'foobar'})).toEqual({
-      kind: 'field',
-      field: 'foobar',
-    });
-
-    // has width
-    expect(explodeField({field: 'foobar', width: 123})).toEqual({
-      kind: 'field',
-      field: 'foobar',
-    });
-
-    // has aggregation
-    expect(explodeField({field: 'count(foobar)', width: 123})).toEqual({
-      kind: 'function',
-      function: ['count', 'foobar', undefined],
-    });
-
-    // custom tag
-    expect(explodeField({field: 'foo.bar.is-Enterprise_42', width: 123})).toEqual({
-      kind: 'field',
-      field: 'foo.bar.is-Enterprise_42',
-    });
-
-    // custom tag with aggregation
-    expect(explodeField({field: 'count(foo.bar.is-Enterprise_42)', width: 123})).toEqual({
-      kind: 'function',
-      function: ['count', 'foo.bar.is-Enterprise_42', undefined],
-    });
-  });
-});
-
-describe('hasAggregateField', function() {
-  it('ensures an eventview has an aggregate field', function() {
-    let eventView = new EventView({
-      fields: [{field: 'foobar'}],
-      sorts: [],
-      query: '',
-      project: [],
-      environment: [],
-    });
-
-    expect(hasAggregateField(eventView)).toBe(false);
-
-    eventView = new EventView({
-      fields: [{field: 'count(foo.bar.is-Enterprise_42)'}],
-      sorts: [],
-      query: '',
-      project: [],
-      environment: [],
-    });
-
-    expect(hasAggregateField(eventView)).toBe(true);
-  });
-});
-
 describe('downloadAsCsv', function() {
   const messageColumn = {name: 'message'};
   const environmentColumn = {name: 'environment'};
