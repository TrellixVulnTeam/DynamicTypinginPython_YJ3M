commit cc7fa2f0400005dd95fb57d4bba7896b1d86653d
Author: maxbittker <maxbittker@gmail.com>
Date:   Tue Mar 28 15:09:05 2017 -0700

    feature flag and populate suggested owners
    
    grab first release always
    
    prevent fetch multiplication
    
    fix tests and get first release with more robust fallbacks
    
    smarter same-check
    
    move last and first release logic to group class
    
    reformat commiter api data, fix tooltip
    
    fix test for new data shape
    
    clean up formatting
    
    add unit test to new group methods
    
    cover one more branch
    
    smarter tooltip logic
    
    fix frontend feature flag
    
    jess review

diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index 02f2b378e3..f0e88f71ef 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -7,7 +7,7 @@ import operator
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
 from sentry.models import (
-    Release, ReleaseCommit, Commit, CommitFileChange, Event
+    Release, ReleaseCommit, Commit, CommitFileChange, Event, Group
 )
 from sentry.api.serializers.models.release import get_users_for_commits
 
@@ -74,13 +74,12 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
 
         return list(commit_file_change_matches)
 
-    def _match_commits_frame(self, commit_file_changes, frame):
+    def _match_commits_path(self, commit_file_changes, path):
         #  find commits that match the run time path the best.
-
         matching_commits = {}
         best_score = 0
         for file_change in commit_file_changes:
-            score = score_path_match_length(file_change.filename, frame['abs_path'])
+            score = score_path_match_length(file_change.filename, path)
             if score > best_score:
                 # reset matches for better match.
                 best_score = score
@@ -91,6 +90,17 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
 
         return matching_commits.values()
 
+    def _get_commits_committer(self, commits, author_id):
+        committer_commit_list = [
+            serialize(commit)
+            for commit in commits if commit.author.id == author_id
+        ]
+
+        # filter out the author data
+        for c in committer_commit_list:
+            del c['author']
+        return committer_commit_list
+
     def _get_committers(self, annotated_frames, commits):
         # extract the unique committers and return their serialized sentry accounts
         committers = defaultdict(int)
@@ -109,7 +119,12 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
         sorted_committers = sorted(committers, key=committers.get)
         sentry_user_dict = get_users_for_commits(commits)
 
-        return [sentry_user_dict[author_id] for author_id in sorted_committers]
+        user_dicts = [{
+            'author': sentry_user_dict[author_id],
+            'commits': self._get_commits_committer(commits, author_id)
+        } for author_id in sorted_committers]
+
+        return user_dicts
 
     def get(self, _, project, event_id):
         """
@@ -135,7 +150,10 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
         # populate event data
         Event.objects.bind_nodes([event], 'data')
 
-        commits = self._get_commits(event.project, event.get_tag('sentry:release'))
+        group = Group.objects.get(id=event.group_id)
+
+        commits = self._get_commits(event.project, group.get_first_release())
+
         if not commits:
             return Response({'detail': 'No Commits found for Release'}, status=404)
 
@@ -150,12 +168,23 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
         if path_set:
             file_changes = self._get_commit_file_changes(commits, path_set)
 
+        commit_path_matches = {
+            path: self._match_commits_path(file_changes, path)
+            for path in path_set
+        }
+
         annotated_frames = [{
             'frame': frame,
-            'commits': self._match_commits_frame(file_changes, frame)
+            'commits': commit_path_matches[frame['abs_path']]
         } for frame in app_frames]
 
-        committers = self._get_committers(annotated_frames, commits)
+        relevant_commits = list({
+            commit
+            for match in commit_path_matches
+            for commit in commit_path_matches[match]
+        })
+
+        committers = self._get_committers(annotated_frames, relevant_commits)
 
         # serialize the commit objects
         serialized_annotated_frames = [{
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index c73ce65cdb..48b1e8e078 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -17,7 +17,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import (
     Activity, Group, GroupHash, GroupSeen, GroupStatus, GroupTagKey,
-    GroupTagValue, Release, User, UserReport,
+    Release, User, UserReport,
 )
 from sentry.plugins import IssueTrackingPlugin2, plugins
 from sentry.utils.safe import safe_execute
@@ -186,31 +186,10 @@ class GroupDetailsEndpoint(GroupEndpoint):
         activity = self._get_activity(request, group, num=100)
         seen_by = self._get_seen_by(request, group)
 
-        # find first seen release
-        if group.first_release is None:
-            try:
-                first_release = GroupTagValue.objects.filter(
-                    group=group,
-                    key__in=('sentry:release', 'release'),
-                ).order_by('first_seen')[0]
-            except IndexError:
-                first_release = None
-            else:
-                first_release = first_release.value
-        else:
-            first_release = group.first_release.version
+        first_release = group.get_first_release()
 
         if first_release is not None:
-            # find last seen release
-            try:
-                last_release = GroupTagValue.objects.filter(
-                    group=group,
-                    key__in=('sentry:release', 'release'),
-                ).order_by('-last_seen')[0]
-            except IndexError:
-                last_release = None
-            else:
-                last_release = last_release.value
+            last_release = group.get_last_release()
         else:
             last_release = None
 
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 37aeb95414..6dcdbebb0f 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -379,6 +379,33 @@ class Group(Model):
 
         return self._tag_cache
 
+    def get_first_release(self):
+        from sentry.models import GroupTagValue
+        if self.first_release_id is None:
+            try:
+                first_release = GroupTagValue.objects.filter(
+                    group=self,
+                    key__in=('sentry:release', 'release'),
+                ).order_by('first_seen')[0]
+            except IndexError:
+                return None
+            else:
+                return first_release.value
+
+        return self.first_release.version
+
+    def get_last_release(self):
+        from sentry.models import GroupTagValue
+        try:
+            last_release = GroupTagValue.objects.filter(
+                group=self,
+                key__in=('sentry:release', 'release'),
+            ).order_by('-last_seen')[0]
+        except IndexError:
+            return None
+
+        return last_release.value
+
     def get_event_type(self):
         """
         Return the type of this issue.
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 5183129c10..059f6e32b5 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -12,6 +12,7 @@ import {t, tct} from '../../locale';
 const GroupSidebar = React.createClass({
   propTypes: {
     group: React.PropTypes.object,
+    event: React.PropTypes.object,
   },
 
   contextTypes: {
@@ -108,7 +109,9 @@ const GroupSidebar = React.createClass({
 
     return (
       <div className="group-stats">
-        <SuggestedOwners />
+        {(new Set(this.context.organization.features)).has('release-commits') &&
+         <SuggestedOwners event={this.props.event}/>
+        }
 
         <GroupReleaseStats
             group={group}
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 6bad59d575..d0e9855604 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -1,35 +1,101 @@
 import React from 'react';
+import ReactDOMServer from 'react-dom/server';
+import moment from 'moment';
 
-import Avatar from '../Avatar';
+import Avatar from '../avatar';
 import TooltipMixin from '../../mixins/tooltip';
+import ApiMixin from '../../mixins/apiMixin';
+import GroupState from '../../mixins/groupState';
+
 import {t} from '../../locale';
 
 const SuggestedOwners = React.createClass({
+  propTypes: {
+    event: React.PropTypes.object,
+  },
+
   mixins: [
+    ApiMixin,
+    GroupState,
     TooltipMixin({
-      html: true,
       selector: '.tip',
+      html: true,
       container: 'body'
     })
   ],
+
+  getInitialState() {
+      return {owners: undefined};
+  },
+
+  componentDidMount() {
+    this.fetchData(this.props.event);
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (this.props.event && nextProps.event) {
+      if (this.props.event.id !== nextProps.event.id) {
+        //two events, with different IDs
+        this.fetchData(nextProps.event);
+      }
+    } else if (nextProps.event) {
+      //going from having no event to having an event
+      this.fetchData(nextProps.event);
+    }
+  },
+
+  componentDidUpdate(_, nextState) {
+    //this shallow equality should be OK because it's being mutated fetchData as a new object
+    if (this.state.owners !== nextState.owners) {
+      this.removeTooltips();
+      this.attachTooltips();
+    }
+  },
+
+  fetchData(event) {
+    if (!event) return;
+    let org = this.getOrganization();
+    let project = this.getProject();
+    this.api.request(`/projects/${org.slug}/${project.slug}/events/${event.id}/committers/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          owners: data.committers,
+        });
+      },
+      error: (error) => {
+        this.setState({
+          owners: undefined,
+        });
+      }
+    });
+  },
+
+  renderCommitter({author, commits}) {
+    return (
+      <span key={author.id} className="avatar-grid-item tip" title={
+        ReactDOMServer.renderToStaticMarkup(
+          <div>
+            <strong>
+              {`${author.name}:`}
+            </strong><br/>
+            <ul>
+              {commits.map(c=><li key={c.id}>{c.message} - {moment(c.dateCreated).fromNow()}</li>)}
+            </ul>
+          </div>)
+        }>
+        <Avatar user={author}/>
+      </span>);
+  },
+
   render() {
+    if (!this.state.owners) {
+      return null;
+    }
     return(
       <div className="m-b-1">
         <h6><span>{t('Suggested Owners')}</span></h6>
-
         <div className="avatar-grid">
-          <span className="avatar-grid-item tip"
-               title="<div><strong>Click to assign dcramer</strong></div> <small>Reason: Last touched 1 day ago</small>">
-            <Avatar user={1}/>
-          </span>
-          <span className="avatar-grid-item tip"
-               title="Reason: ">
-            <Avatar user={1}/>
-          </span>
-          <span className="avatar-grid-item tip"
-               title="Reason: ">
-            <Avatar user={1}/>
-          </span>
+          {this.state.owners.map(c => this.renderCommitter(c))}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index 572b73543d..c5c7b2ae23 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -124,7 +124,7 @@ const GroupEventDetails = React.createClass({
             )}
           </div>
           <div className="secondary">
-            <GroupSidebar group={group} />
+            <GroupSidebar group={group} event={evt} />
           </div>
         </div>
       </div>
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
index 0399587e89..fabe4b800e 100644
--- a/tests/sentry/api/endpoints/test_event_committers.py
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -12,13 +12,16 @@ class EventCommittersTest(APITestCase):
 
         project = self.create_project()
 
-        group = self.create_group(project=project)
-
         release = self.create_release(
             project,
             self.user
         )
 
+        group = self.create_group(
+            project=project,
+            first_release=release
+        )
+
         event = self.create_event(
             event_id='a',
             group=group,
@@ -35,7 +38,9 @@ class EventCommittersTest(APITestCase):
         response = self.client.get(url, format='json')
         assert response.status_code == 200, response.content
         assert len(response.data['committers']) == 1
-        assert response.data['committers'][0]['username'] == 'admin@localhost'
+        assert response.data['committers'][0]['author']['username'] == 'admin@localhost'
+        assert len(response.data['committers'][0]['commits']) == 1
+        assert response.data['committers'][0]['commits'][0]['message'] == 'placeholder commit message'
 
         assert len(response.data['annotatedFrames']) == 1
         assert len(response.data['annotatedFrames'][0]['commits']) == 1
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index c9b75a9fda..a5d9f42b97 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -10,7 +10,7 @@ from django.utils import timezone
 
 from sentry.models import (
     Group, GroupRedirect, GroupSnooze, GroupStatus, Release,
-    get_group_with_redirect
+    get_group_with_redirect, GroupTagValue
 )
 from sentry.testutils import TestCase
 
@@ -165,3 +165,66 @@ class GroupTest(TestCase):
         group2 = Group.objects.by_qualified_short_id(group.organization.id, short_id)
 
         assert group2 == group
+
+    def test_first_last_release(self):
+        project = self.create_project()
+        release = Release.objects.create(
+            version='a',
+            organization_id=project.organization_id,
+        )
+        release.add_project(project)
+
+        group = self.create_group(
+            project=project,
+            first_release=release,
+        )
+
+        GroupTagValue.objects.create(
+            project=project,
+            group=group,
+            key='sentry:release',
+            value=release.version
+        )
+
+        assert group.first_release == release
+        assert group.get_first_release() == release.version
+        assert group.get_last_release() == release.version
+
+    def test_first_release_from_tag(self):
+        project = self.create_project()
+        release = Release.objects.create(
+            version='a',
+            organization_id=project.organization_id,
+        )
+        release.add_project(project)
+
+        group = self.create_group(
+            project=project,
+        )
+
+        GroupTagValue.objects.create(
+            project=project,
+            group=group,
+            key='sentry:release',
+            value=release.version
+        )
+
+        assert group.first_release is None
+        assert group.get_first_release() == release.version
+        assert group.get_last_release() == release.version
+
+    def test_first_last_release_miss(self):
+        project = self.create_project()
+        release = Release.objects.create(
+            version='a',
+            organization_id=project.organization_id,
+        )
+        release.add_project(project)
+
+        group = self.create_group(
+            project=project,
+        )
+
+        assert group.first_release is None
+        assert group.get_first_release() is None
+        assert group.get_last_release() is None
