commit d6d149f0b8d2244ca7c03de0dfd55bece7d71653
Author: Evan Hicks <evan.hicks@sentry.io>
Date:   Tue Dec 10 15:29:32 2019 -0500

    Revert "fix(app) Ensure rule owners are consistently sorted"
    
    This reverts commit 3fd18f1d0a9e46fc7c943bbff33aea4c83d24710.

diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
index 30c0b80d37..615a18b3d5 100644
--- a/src/sentry/api/endpoints/event_owners.py
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -1,7 +1,5 @@
 from __future__ import absolute_import
 
-import logging
-
 from rest_framework.response import Response
 
 from sentry import eventstore
@@ -11,8 +9,6 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.actor import ActorSerializer
 from sentry.models import ProjectOwnership
 
-logger = logging.getLogger(__name__)
-
 
 class EventOwnersEndpoint(ProjectEndpoint):
     def get(self, request, project, event_id):
@@ -39,31 +35,11 @@ class EventOwnersEndpoint(ProjectEndpoint):
         if owners == ProjectOwnership.Everyone:
             owners = []
 
-        serialized_owners = serialize(Actor.resolve_many(owners), request.user, ActorSerializer())
-        # We do so many dict/set casts on these owners that the order is not preserved at all.
-        # Re-order the results according to how the rules are ordered.
-        owner_map = {o["name"]: o for o in serialized_owners}
-        ordered_owners = []
-        for rule in rules:
-            for o in rule.owners:
-                found = owner_map.get(o.identifier)
-                if found:
-                    ordered_owners.append(found)
-
-        if len(serialized_owners) != len(ordered_owners):
-            logger.error(
-                "unexpected owners in response",
-                extra={
-                    "project_id": project.id,
-                    "event_id": event_id,
-                    "expected_length": len(ordered_owners),
-                    "calculated_length": len(serialized_owners),
-                },
-            )
-
         return Response(
             {
-                "owners": ordered_owners,
+                "owners": serialize(Actor.resolve_many(owners), request.user, ActorSerializer()),
+                # TODO(mattrobenolt): We need to change the API here to return
+                # all rules, just keeping this way currently for API compat
                 "rule": rules[0].matcher if rules else None,
                 "rules": rules or [],
             }
