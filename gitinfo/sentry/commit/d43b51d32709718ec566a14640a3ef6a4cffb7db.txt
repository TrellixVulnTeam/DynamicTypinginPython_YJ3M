commit d43b51d32709718ec566a14640a3ef6a4cffb7db
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Mon Feb 10 14:43:47 2020 -0800

    feat: Show unpublished and internal integrations in directory (#16910)
    
    Problem
    Cannot see unpublished and internal integrations in the new integration directory.
    
    Solution
    We now show unpublished and internal integrations in the new directory. Where we list the number of configurations for first-party integrations, internal and unpublished sentry apps will say “internal” or “unpublished” respectively. The rows in the list should look the same as Sentry Apps other than that.

diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/integrationDirectoryApplicationRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/IntegrationDirectorySentryAppRow.tsx
similarity index 62%
rename from src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/integrationDirectoryApplicationRow.tsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/IntegrationDirectorySentryAppRow.tsx
index 578cf7c2fb..86fcc50a2e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/integrationDirectoryApplicationRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/IntegrationDirectorySentryAppRow.tsx
@@ -1,11 +1,8 @@
 import React from 'react';
 import {Link} from 'react-router';
 import capitalize from 'lodash/capitalize';
-import omit from 'lodash/omit';
 import styled from '@emotion/styled';
-import PropTypes from 'prop-types';
 
-import SentryTypes from 'app/sentryTypes';
 import {PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
@@ -22,42 +19,28 @@ type Props = {
   app: SentryApp;
   organization: Organization;
   install?: SentryAppInstallation;
-  isOnIntegrationPage: boolean;
   ['data-test-id']?: string;
 };
 
-export default class SentryApplicationRow extends React.PureComponent<Props> {
-  static propTypes = {
-    app: SentryTypes.SentryApplication,
-    organization: SentryTypes.Organization.isRequired,
-    install: PropTypes.object,
-    isOnIntegrationPage: PropTypes.bool,
-  };
-
+export default class IntegrationDirectorySentryAppRow extends React.PureComponent<Props> {
   get isInternal() {
     return this.props.app.status === 'internal';
   }
 
-  hideStatus() {
-    //no publishing for internal apps so hide the status on the developer settings page
-    return this.isInternal && !this.props.isOnIntegrationPage;
+  get isPublished() {
+    return this.props.app.status === 'published';
   }
 
   renderStatus() {
-    const {app, isOnIntegrationPage} = this.props;
-    const isInternal = this.isInternal;
+    const {app} = this.props;
     const status = this.installationStatus;
-    if (this.hideStatus()) {
-      return null;
-    }
-    if (isOnIntegrationPage) {
-      return (
-        <React.Fragment>
-          <StatusIndicator status={status} isInternal={isInternal} />
-        </React.Fragment>
-      );
-    }
-    return <PublishStatus status={app.status} />;
+
+    return (
+      <React.Fragment>
+        <StatusIndicator status={status} />
+        {!this.isPublished && <PublishStatus status={app.status} />}
+      </React.Fragment>
+    );
   }
 
   get installationStatus() {
@@ -69,33 +52,26 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
   }
 
   linkToEdit() {
-    const {isOnIntegrationPage} = this.props;
+    const {app, organization} = this.props;
+
+    if (this.isInternal) {
+      return `/settings/${organization.slug}/developer-settings/${app.slug}/`;
+    }
+
+    return `/settings/${organization.slug}/sentry-apps/${app.slug}/`;
     // show the link if the app is internal or we are on the developer settings page
     // We don't want to show the link to edit on the main integrations list unless the app is internal
-    return this.isInternal || !isOnIntegrationPage;
   }
 
   render() {
-    const {app, organization} = this.props;
+    const {app} = this.props;
     return (
       <SentryAppItem data-test-id={app.slug}>
         <StyledFlex>
           <PluginIcon size={36} pluginId={app.slug} />
           <SentryAppBox>
-            <SentryAppName hideStatus={this.hideStatus()}>
-              {this.linkToEdit() ? (
-                <SentryAppLink
-                  to={`/settings/${organization.slug}/developer-settings/${app.slug}/`}
-                >
-                  {app.name}
-                </SentryAppLink>
-              ) : (
-                <SentryAppLink
-                  to={`/settings/${organization.slug}/sentry-apps/${app.slug}/`}
-                >
-                  {app.name}
-                </SentryAppLink>
-              )}
+            <SentryAppName>
+              <SentryAppLink to={this.linkToEdit()}>{app.name}</SentryAppLink>
             </SentryAppName>
             <SentryAppDetails>{this.renderStatus()}</SentryAppDetails>
           </SentryAppBox>
@@ -129,9 +105,9 @@ const SentryAppDetails = styled('div')`
   font-size: 0.8em;
 `;
 
-const SentryAppName = styled('div')<{hideStatus: boolean}>`
+const SentryAppName = styled('div')`
   font-weight: bold;
-  margin-top: ${p => (p.hideStatus ? '10px' : '0px')};
+  margin-top: 0px;
 `;
 
 const SentryAppLink = styled(Link)`
@@ -148,15 +124,13 @@ const color = {
   [PENDING]: 'yellowOrange',
 };
 
-type StatusIndicatorProps = {status: string; theme?: any; isInternal: boolean};
+type StatusIndicatorProps = {status: string; theme?: any};
 
 const StatusIndicator = styled(({status, ...props}: StatusIndicatorProps) => {
-  //need to omit isInternal
-  const propsToPass = omit(props, ['isInternal']);
   return (
     <FlexContainer>
       <CircleIndicator size={6} color={theme[color[status]]} />
-      <div {...propsToPass}>{t(`${status}`)}</div>
+      <div {...props}>{t(`${status}`)}</div>
     </FlexContainer>
   );
 })`
@@ -179,4 +153,11 @@ const PublishStatus = styled(({status, ...props}: PublishStatusProps) => {
     props.status === 'published' ? props.theme.success : props.theme.gray2};
   font-weight: light;
   margin-right: ${space(0.75)};
+  text-transform: capitalize;
+  &:before {
+    content: '|';
+    color: ${p => p.theme.gray1};
+    margin-right: ${space(0.75)};
+    font-weight: normal;
+  }
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 01c9fd154e..461ec47a86 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -25,8 +25,7 @@ import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarni
 import PermissionAlert from 'app/views/settings/organization/permissionAlert';
 import ProviderRow from 'app/views/organizationIntegrations/integrationProviderRow';
 import PluginRow from 'app/views/organizationIntegrations/integrationPluginRow';
-import IntegrationDirectoryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow/integrationDirectoryApplicationRow';
-import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
+import IntegrationDirectorySentryAppRow from 'app/views/organizationIntegrations/IntegrationDirectorySentryAppRow';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -339,32 +338,16 @@ class OrganizationIntegrations extends AsyncComponent<
   //render either an internal or non-internal app
   renderSentryApp = (app: SentryApp) => {
     const {organization} = this.props;
-    if (app.status === 'internal') {
-      return (
-        <SentryApplicationRow
-          key={`sentry-app-row-${app.slug}`}
-          data-test-id="internal-integration-row"
-          onRemoveApp={() => this.handleRemoveInternalSentryApp(app)}
-          organization={organization}
-          install={this.getAppInstall(app)}
-          app={app}
-          isOnIntegrationPage
-        />
-      );
-    }
-    if (app.status === 'published') {
-      return (
-        <IntegrationDirectoryApplicationRow
-          key={`sentry-app-row-${app.slug}`}
-          data-test-id="integration-row"
-          organization={organization}
-          install={this.getAppInstall(app)}
-          app={app}
-          isOnIntegrationPage
-        />
-      );
-    }
-    return null;
+
+    return (
+      <IntegrationDirectorySentryAppRow
+        key={`sentry-app-row-${app.slug}`}
+        data-test-id="integration-row"
+        organization={organization}
+        install={this.getAppInstall(app)}
+        app={app}
+      />
+    );
   };
 
   renderIntegration = (integration: AppOrProviderOrPlugin) => {
