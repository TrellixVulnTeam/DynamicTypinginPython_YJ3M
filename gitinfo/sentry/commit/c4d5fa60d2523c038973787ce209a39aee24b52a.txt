commit c4d5fa60d2523c038973787ce209a39aee24b52a
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 1 12:18:08 2018 -0700

    feat(api): Move permissions and isSuperuser attributes to user details

diff --git a/src/sentry/api/endpoints/auth_index.py b/src/sentry/api/endpoints/auth_index.py
index 7667340288..d6cb7d80dc 100644
--- a/src/sentry/api/endpoints/auth_index.py
+++ b/src/sentry/api/endpoints/auth_index.py
@@ -8,7 +8,7 @@ from rest_framework.response import Response
 
 from sentry.api.authentication import QuietBasicAuthentication
 from sentry.api.base import Endpoint
-from sentry.api.serializers import serialize
+from sentry.api.serializers import DetailedUserSerializer, serialize
 from sentry.api.validators import AuthVerifyValidator
 from sentry.models import Authenticator
 from sentry.utils import auth, json
@@ -40,14 +40,7 @@ class AuthIndexEndpoint(Endpoint):
             return Response(status=status.HTTP_400_BAD_REQUEST)
 
         user = extract_lazy_object(request._request.user)
-        data = serialize(user, user)
-        # XXX(dcramer): we dont use is_active_superuser here as we simply
-        # want to tell the UI that we're an authenticated superuser, and
-        # for requests that require an *active* session, they should prompt
-        # on-demand. This ensures things like links to the Sentry admin can
-        # still easily be rendered.
-        data['isSuperuser'] = user.is_superuser
-        return Response(data)
+        return Response(serialize(user, user, DetailedUserSerializer()))
 
     def post(self, request):
         """
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 2d3ab446a2..34c6469707 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -20,6 +20,15 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.utils.avatar import get_gravatar_url
 
 
+def manytoone_to_dict(queryset, key, filter=None):
+    result = defaultdict(list)
+    for row in queryset:
+        if filter and not filter(row):
+            continue
+        result[getattr(row, key)].append(row)
+    return result
+
+
 @register(User)
 class UserSerializer(Serializer):
     def _get_identities(self, item_list, user):
@@ -35,21 +44,11 @@ class UserSerializer(Serializer):
             results[item.user_id].append(item)
         return results
 
-    def _get_useremails(self, item_list, user):
-        queryset = UserEmail.objects.filter(
-            user__in=item_list,
-        )
-
-        results = {i.id: [] for i in item_list}
-        for item in queryset:
-            results[item.user_id].append(item)
-        return results
-
     def get_attrs(self, item_list, user):
         avatars = {a.user_id: a for a in UserAvatar.objects.filter(user__in=item_list)}
         identities = self._get_identities(item_list, user)
-        emails = self._get_useremails(item_list, user)
 
+        emails = manytoone_to_dict(UserEmail.objects.filter(user__in=item_list), 'user_id')
         authenticators = Authenticator.objects.bulk_users_have_2fa([i.id for i in item_list])
 
         data = {}
@@ -95,8 +94,6 @@ class UserSerializer(Serializer):
                 'seenReleaseBroadcast': options.get('seen_release_broadcast'),
             }
 
-            d['permissions'] = list(UserPermission.for_user(obj.id))
-
             d['flags'] = {
                 'newsletter_consent_prompt': bool(obj.flags.newsletter_consent_prompt),
             }
@@ -110,6 +107,7 @@ class UserSerializer(Serializer):
             avatar = {'avatarType': 'letter_avatar', 'avatarUuid': None}
         d['avatar'] = avatar
 
+        # TODO(dcramer): move this to DetailedUserSerializer
         if attrs['identities'] is not None:
             d['identities'] = [
                 {
@@ -143,23 +141,30 @@ class DetailedUserSerializer(UserSerializer):
     def get_attrs(self, item_list, user):
         attrs = super(DetailedUserSerializer, self).get_attrs(item_list, user)
 
-        authenticators = defaultdict(list)
-        queryset = Authenticator.objects.filter(
+        # ignore things that aren't user controlled (like recovery codes)
+        authenticators = manytoone_to_dict(Authenticator.objects.filter(
+            user__in=item_list,
+        ), 'user_id', lambda x: not x.interface.is_backup_interface)
+
+        permissions = manytoone_to_dict(UserPermission.objects.filter(
             user__in=item_list,
-        )
-        for auth in queryset:
-            # ignore things that aren't user controlled (like recovery codes)
-            if auth.interface.is_backup_interface:
-                continue
-            authenticators[auth.user_id].append(auth)
+        ), 'user_id')
 
         for item in item_list:
             attrs[item]['authenticators'] = authenticators[item.id]
+            attrs[item]['permissions'] = permissions[item.id]
 
         return attrs
 
     def serialize(self, obj, attrs, user):
         d = super(DetailedUserSerializer, self).serialize(obj, attrs, user)
+        # XXX(dcramer): we dont use is_active_superuser here as we simply
+        # want to tell the UI that we're an authenticated superuser, and
+        # for requests that require an *active* session, they should prompt
+        # on-demand. This ensures things like links to the Sentry admin can
+        # still easily be rendered.
+        d['isSuperuser'] = obj.is_superuser
+        d['permissions'] = [up.permission for up in attrs['permissions']]
         d['authenticators'] = [
             {
                 'id': six.text_type(a.id),
diff --git a/tests/sentry/api/serializers/test_user.py b/tests/sentry/api/serializers/test_user.py
index 91702ecac0..4b1a417221 100644
--- a/tests/sentry/api/serializers/test_user.py
+++ b/tests/sentry/api/serializers/test_user.py
@@ -40,18 +40,11 @@ class UserSerializerTest(TestCase):
         result = serialize(user)
         assert len(result['emails']) == 0
 
-    def test_self_permissions(self):
-        user = self.create_user()
-        UserPermission.objects.create(user=user, permission='foo')
-
-        result = serialize(user, user)
-        assert result['id'] == six.text_type(user.id)
-        assert result['permissions'] == ['foo']
-
 
 class DetailedUserSerializerTest(TestCase):
     def test_simple(self):
         user = self.create_user()
+        UserPermission.objects.create(user=user, permission='foo')
 
         org = self.create_organization(owner=user)
 
@@ -82,3 +75,4 @@ class DetailedUserSerializerTest(TestCase):
         assert 'authenticators' in result
         assert len(result['authenticators']) == 1
         assert result['authenticators'][0]['id'] == six.text_type(auth.id)
+        assert result['permissions'] == ['foo']
