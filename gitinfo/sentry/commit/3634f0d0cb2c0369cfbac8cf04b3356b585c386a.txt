commit 3634f0d0cb2c0369cfbac8cf04b3356b585c386a
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 1 10:40:42 2015 -0700

    Load React config on all pages
    
    - Fixes lack of urlPrefix with project selector (fixes GH-1869)

diff --git a/src/sentry/static/sentry/app/stores/configStore.jsx b/src/sentry/static/sentry/app/stores/configStore.jsx
index 4978870476..a51425e288 100644
--- a/src/sentry/static/sentry/app/stores/configStore.jsx
+++ b/src/sentry/static/sentry/app/stores/configStore.jsx
@@ -1,4 +1,4 @@
-
+import moment from "moment-timezone";
 import Reflux from "reflux";
 
 var ConfigStore = Reflux.createStore({
@@ -24,6 +24,12 @@ var ConfigStore = Reflux.createStore({
   loadInitialData(config) {
     config.features = new Set(config.features || []);
     this.config = config;
+
+    // TODO(dcramer): abstract this out of ConfigStore
+    if (config.user) {
+      moment.tz.setDefault(config.user.options.timezone);
+    }
+
     this.trigger(config);
   }
 });
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index d53fbbd1f6..49a9ec4519 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -1,19 +1,13 @@
 import React from "react";
 import api from "../api";
 import Router from "react-router";
-import moment from "moment-timezone";
 import Alerts from "../components/alerts";
 import AlertActions from "../actions/alertActions.jsx";
-import ConfigStore from "../stores/configStore";
 import Indicators from "../components/indicators";
 import LoadingIndicator from "../components/loadingIndicator";
 import OrganizationStore from "../stores/organizationStore";
 
 var App = React.createClass({
-  propTypes: {
-    config: React.PropTypes.object.isRequired
-  },
-
   getInitialState() {
     return {
       loading: false,
@@ -22,14 +16,6 @@ var App = React.createClass({
   },
 
   componentWillMount() {
-    ConfigStore.loadInitialData(this.props.config);
-
-    // Configure global timezone
-    var user = ConfigStore.get('user');
-    if (user) {
-      moment.tz.setDefault(user.options.timezone);
-    }
-
     api.request('/organizations/', {
       success: (data) => {
         OrganizationStore.load(data);
diff --git a/src/sentry/templates/sentry/bases/react.html b/src/sentry/templates/sentry/bases/react.html
index 70f15e5bac..2a30a08483 100644
--- a/src/sentry/templates/sentry/bases/react.html
+++ b/src/sentry/templates/sentry/bases/react.html
@@ -15,24 +15,6 @@
   $(function(){
     Router.run(Sentry.routes, Router.HistoryLocation, function(Handler) {
       React.render(React.createFactory(Handler)({
-        config: {
-          singleOrganization: {% if SINGLE_ORGANIZATION %}true{% else %}false{% endif %},
-          urlPrefix: '{{ URL_PREFIX }}',
-          version: {
-            current: '{{ sentry_version.current }}',
-            latest: '{{ sentry_version.latest }}',
-            upgradeAvailable: {% if sentry_version.upgrade_available %}true{% else %}false{% endif %}
-          },
-          features: {{ features }},
-          mediaUrl: '{% url 'sentry-media' "sentry" '' %}',
-        {% if request.user.is_authenticated %}
-          isAuthenticated: true,
-          user: {% serialize request.user %}
-        {% else %}
-          isAuthenticated: false,
-          user: null
-        {% endif %}
-        }
       }), document.getElementById('blk_router'));
     });
   });
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 6dbfbf0220..c2fa9a4322 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -3,6 +3,7 @@
 {% load sentry_dsn %}
 {% load sentry_features %}
 {% load sentry_helpers %}
+{% load sentry_react %}
 
 {% load sentry_status %}
 {% get_sentry_version %}
@@ -38,6 +39,8 @@
 
       window.moment.locale({{ request.LANGUAGE_CODE|to_json|safe }});
     }());
+
+    Sentry.ConfigStore.loadInitialData({% get_react_config %});
   </script>
 
   {% include "sentry/includes/ravenjs.html" %}
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
new file mode 100644
index 0000000000..3844d1ad68
--- /dev/null
+++ b/src/sentry/templatetags/sentry_react.py
@@ -0,0 +1,67 @@
+from __future__ import absolute_import
+
+import sentry
+
+from django import template
+from django.conf import settings
+from django.core.urlresolvers import reverse
+from django.utils.html import mark_safe
+from pkg_resources import parse_version
+
+from sentry import features, options
+from sentry.api.serializers.base import serialize
+from sentry.utils import json
+from sentry.utils.functional import extract_lazy_object
+
+register = template.Library()
+
+
+def _get_version_info():
+    current = sentry.VERSION
+
+    latest = options.get('sentry:latest_version') or current
+    upgrade_available = parse_version(latest) > parse_version(current)
+    build = sentry.__build__ or current
+
+    return {
+        'current': current,
+        'latest': latest,
+        'build': build,
+        'upgradeAvailable': upgrade_available,
+    }
+
+
+@register.simple_tag(takes_context=True)
+def get_react_config(context):
+    if 'request' in context:
+        user = context['request'].user
+    else:
+        user = None
+
+    if user:
+        user = extract_lazy_object(user)
+
+    enabled_features = []
+    if features.has('organizations:create', actor=user):
+        enabled_features.append('organizations:create')
+    if features.has('auth:register', actor=user):
+        enabled_features.append('auth:register')
+
+    context = {
+        'singleOrganization': settings.SENTRY_SINGLE_ORGANIZATION,
+        'urlPrefix': settings.SENTRY_URL_PREFIX,
+        'version': _get_version_info(),
+        'features': enabled_features,
+        'mediaUrl': reverse('sentry-media', args=['sentry', '']),
+    }
+    if user and user.is_authenticated():
+        context.update({
+            'isAuthenticated': True,
+            'user': serialize(user, user),
+        })
+    else:
+        context.update({
+            'isAuthenticated': False,
+            'user': None,
+        })
+    return mark_safe(json.dumps(context))
diff --git a/src/sentry/web/frontend/react_page.py b/src/sentry/web/frontend/react_page.py
index e7584fda43..0798ee0619 100644
--- a/src/sentry/web/frontend/react_page.py
+++ b/src/sentry/web/frontend/react_page.py
@@ -1,29 +1,11 @@
 from __future__ import absolute_import
 
-from sentry import features
 from sentry.web.frontend.base import BaseView, OrganizationView
-from sentry.utils import json
-from sentry.utils.functional import extract_lazy_object
-from django.utils.safestring import mark_safe
 
 
 class ReactMixin(object):
     def handle_react(self, request):
-        if request.user.is_authenticated():
-            # remove lazy eval
-            request.user = extract_lazy_object(request.user)
-
-        enabled_features = []
-        if features.has('organizations:create', actor=request.user):
-            enabled_features.append('organizations:create')
-        if features.has('auth:register', actor=request.user):
-            enabled_features.append('auth:register')
-
-        context = {
-            'features': mark_safe(json.dumps(enabled_features)),
-        }
-
-        return self.respond('sentry/bases/react.html', context)
+        return self.respond('sentry/bases/react.html')
 
 
 # TODO(dcramer): once we implement basic auth hooks in React we can make this
