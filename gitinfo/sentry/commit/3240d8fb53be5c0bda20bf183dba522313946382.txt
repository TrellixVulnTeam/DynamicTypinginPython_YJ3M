commit 3240d8fb53be5c0bda20bf183dba522313946382
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Aug 5 11:57:39 2016 -0700

    Python 3 compatibility

diff --git a/bin/load-mocks b/bin/load-mocks
index 488ffb7f24..7cbad45c65 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -9,7 +9,7 @@ from datetime import datetime, timedelta
 from django.conf import settings
 from django.db import IntegrityError, transaction
 from django.utils import timezone
-from hashlib import md5, sha1
+from hashlib import sha1
 from pytz import utc
 from random import randint
 from uuid import uuid4
@@ -21,7 +21,7 @@ from sentry.models import (
     OrganizationMember, Project, Release, ReleaseFile, Team, User, UserReport,
     GroupRelease, Environment, ReleaseEnvironment
 )
-from sentry.utils.hashlib import sha1, md5
+from sentry.utils.hashlib import md5_text
 from sentry.utils.samples import create_sample_event
 
 PLATFORMS = itertools.cycle([
@@ -264,7 +264,7 @@ def main(num_events=1):
             )
 
             release = Release.objects.get_or_create(
-                version=sha1(uuid4().hex).hexdigest(),
+                version=sha1(uuid4().bytes).hexdigest(),
                 project=project,
             )[0]
 
@@ -300,7 +300,7 @@ def main(num_events=1):
                     level=LEVELS.next(),
                     environment=ENVIRONMENTS.next(),
                     message='This is a mostly useless example %s exception' % platform,
-                    checksum=md5(platform + six.text_type(_)).hexdigest(),
+                    checksum=md5_text(platform + six.text_type(_)).hexdigest(),
                 )
 
             for _ in range(num_events):
diff --git a/src/sentry/api/endpoints/release_files.py b/src/sentry/api/endpoints/release_files.py
index 30d4799f47..306e481089 100644
--- a/src/sentry/api/endpoints/release_files.py
+++ b/src/sentry/api/endpoints/release_files.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from django.db import IntegrityError, transaction
-from six import StringIO
+from six import BytesIO
 from rest_framework.negotiation import DefaultContentNegotiation
 from rest_framework.parsers import FormParser, MultiPartParser
 from rest_framework.response import Response
@@ -27,7 +27,7 @@ def upload_file_scenario(runner):
         data={
             'header': 'Content-Type:text/plain; encoding=utf-8',
             'name': '/demo/hello.py',
-            'file': ('hello.py', StringIO('print "Hello World!"')),
+            'file': ('hello.py', BytesIO(b'print "Hello World!"')),
         },
         format='multipart'
     )
diff --git a/src/sentry/api/endpoints/system_health.py b/src/sentry/api/endpoints/system_health.py
index 1996e442f9..d0fd716ae5 100644
--- a/src/sentry/api/endpoints/system_health.py
+++ b/src/sentry/api/endpoints/system_health.py
@@ -16,14 +16,15 @@ class SystemHealthEndpoint(Endpoint):
     def get(self, request):
         results = status_checks.check_all()
         return Response({
-            'problems': map(
-                lambda problem: {
+            'problems': [
+                {
                     'id': md5_text(problem.message).hexdigest(),
                     'message': problem.message,
                     'severity': problem.severity,
                     'url': problem.url,
-                },
-                sorted(itertools.chain.from_iterable(results.values()), reverse=True),
-            ),
+                }
+                for problem in sorted(itertools.chain.from_iterable(results.values()),
+                                     reverse=True)
+            ],
             'healthy': {type(check).__name__: not problems for check, problems in results.items()},
         })
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index c644d46039..8625eceb29 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -60,11 +60,11 @@ class TeamStatsEndpoint(TeamEndpoint, StatsMixin):
         if not projects:
             return Response([])
 
-        data = tsdb.get_range(
+        data = list(tsdb.get_range(
             model=tsdb.models.project,
             keys=[p.id for p in projects],
             **self._parse_args(request)
-        ).values()
+        ).values())
 
         summarized = []
         for n in range(len(data[0])):
diff --git a/src/sentry/api/endpoints/useravatar.py b/src/sentry/api/endpoints/useravatar.py
index 26211a8694..224ecfcabe 100644
--- a/src/sentry/api/endpoints/useravatar.py
+++ b/src/sentry/api/endpoints/useravatar.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
+import base64
+
 from django.conf import settings
 from PIL import Image
 from rest_framework import status
 from rest_framework.response import Response
-from six import StringIO
+from six import BytesIO
 from uuid import uuid4
 
 from sentry.api.bases.user import UserEndpoint
@@ -39,12 +41,12 @@ class UserAvatarEndpoint(UserEndpoint):
         photo_string = request.DATA.get('avatar_photo')
         photo = None
         if photo_string:
-            photo_string = photo_string.decode('base64')
+            photo_string = base64.b64decode(photo_string)
             if len(photo_string) > settings.SENTRY_MAX_AVATAR_SIZE:
                 return Response({'error': 'Image too large.'},
                                 status=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE)
             try:
-                with Image.open(StringIO(photo_string)) as img:
+                with Image.open(BytesIO(photo_string)) as img:
                     width, height = img.size
                     if not self.is_valid_size(width, height):
                         return Response({'error': 'Image invalid size.'},
@@ -54,7 +56,7 @@ class UserAvatarEndpoint(UserEndpoint):
                                 status=status.HTTP_400_BAD_REQUEST)
             file_name = '%s.png' % user.id
             photo = File.objects.create(name=file_name, type=self.FILE_TYPE)
-            photo.putfile(StringIO(photo_string))
+            photo.putfile(BytesIO(photo_string))
 
         avatar, _ = UserAvatar.objects.get_or_create(user=user)
         if avatar.file and photo:
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index af70877d1e..844713f2e7 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -14,7 +14,7 @@ from sentry.utils.avatar import get_gravatar_url
 class UserSerializer(Serializer):
     def _get_identities(self, item_list, user):
         if not (env.request and env.request.is_superuser()):
-            item_list = filter(lambda x: x == user, item_list)
+            item_list = [x for x in item_list if x == user]
 
         queryset = AuthIdentity.objects.filter(
             user__in=item_list,
diff --git a/src/sentry/api/serializers/rest_framework/list.py b/src/sentry/api/serializers/rest_framework/list.py
index fdc0fa8291..3700983f83 100644
--- a/src/sentry/api/serializers/rest_framework/list.py
+++ b/src/sentry/api/serializers/rest_framework/list.py
@@ -20,4 +20,4 @@ class ListField(WritableField):
             msg = 'Incorrect type. Expected a mapping, but got %s'
             raise ValidationError(msg % type(data).__name__)
 
-        return map(self.child.from_native, data)
+        return [self.child.from_native(x) for x in data]
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 17df7e07f1..1353ba6ac9 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -18,9 +18,8 @@ import zlib
 
 from datetime import datetime, timedelta
 from django.utils.crypto import constant_time_compare
-from django.utils.encoding import smart_bytes
 from gzip import GzipFile
-from six import StringIO
+from six import BytesIO
 from time import time
 
 from sentry.app import env
@@ -221,7 +220,7 @@ class ClientApiHelper(object):
 
     def decompress_deflate(self, encoded_data):
         try:
-            return zlib.decompress(encoded_data)
+            return zlib.decompress(encoded_data).decode('utf-8')
         except Exception as e:
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
@@ -232,10 +231,10 @@ class ClientApiHelper(object):
 
     def decompress_gzip(self, encoded_data):
         try:
-            fp = StringIO(encoded_data)
+            fp = BytesIO(encoded_data)
             try:
                 f = GzipFile(fileobj=fp)
-                return f.read()
+                return f.read().decode('utf-8')
             finally:
                 f.close()
         except Exception as e:
@@ -249,9 +248,9 @@ class ClientApiHelper(object):
     def decode_and_decompress_data(self, encoded_data):
         try:
             try:
-                return decompress(encoded_data)
+                return decompress(encoded_data).decode('utf-8')
             except zlib.error:
-                return base64.b64decode(encoded_data)
+                return base64.b64decode(encoded_data).decode('utf-8')
         except Exception as e:
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
@@ -262,6 +261,8 @@ class ClientApiHelper(object):
 
     def safely_load_json_string(self, json_string):
         try:
+            if isinstance(json_string, six.binary_type):
+                json_string = json_string.decode('utf-8')
             obj = json.loads(json_string)
             assert isinstance(obj, dict)
         except Exception as e:
@@ -271,9 +272,7 @@ class ClientApiHelper(object):
             raise APIError('Bad data reconstructing object (%s, %s)' %
                 (type(e).__name__, e)
             )
-
-        # XXX: ensure keys are coerced to strings
-        return dict((smart_bytes(k), v) for k, v in six.iteritems(obj))
+        return obj
 
     def _process_data_timestamp(self, data, current_datetime=None):
         value = data['timestamp']
@@ -525,7 +524,7 @@ class ClientApiHelper(object):
                 tags.append((k, v))
             data['tags'] = tags
 
-        for k in data.keys():
+        for k in list(iter(data)):
             if k in CLIENT_RESERVED_ATTRS:
                 continue
 
diff --git a/src/sentry/db/postgres/decorators.py b/src/sentry/db/postgres/decorators.py
index f8f96a5716..ad66d82ed6 100644
--- a/src/sentry/db/postgres/decorators.py
+++ b/src/sentry/db/postgres/decorators.py
@@ -89,7 +89,7 @@ def less_shitty_error_messages(func):
         except Exception as e:
             exc_info = sys.exc_info()
             msg = '{}\nSQL: {}'.format(
-                getattr(e, 'message', getattr(e, 'args', [None])[0]),
+                repr(e),
                 sql,
             )
             six.reraise(exc_info[0], exc_info[0](msg), exc_info[2])
diff --git a/src/sentry/digests/backends/redis.py b/src/sentry/digests/backends/redis.py
index 3e2f7daeaf..7d44d23828 100644
--- a/src/sentry/digests/backends/redis.py
+++ b/src/sentry/digests/backends/redis.py
@@ -286,17 +286,19 @@ class RedisBackend(Backend):
         maximum_iterations = 1000
         for i in range(maximum_iterations):
             fetch_size = chunk + extra
-            entries = map(
-                lambda x: ScheduleEntry(*x),
-                connection.zrangebyscore(
-                    make_schedule_key(self.namespace, SCHEDULE_STATE_READY),
-                    min=start,
-                    max=deadline,
-                    withscores=True,
-                    start=0,
-                    num=fetch_size,
+            entries = [
+                ScheduleEntry(*x)
+                for x in (
+                    connection.zrangebyscore(
+                        make_schedule_key(self.namespace, SCHEDULE_STATE_READY),
+                        min=start,
+                        max=deadline,
+                        withscores=True,
+                        start=0,
+                        num=fetch_size,
+                    )
                 )
-            )
+            ]
 
             def try_lock(entry):
                 """
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index cb5497836c..4bfe76a2ad 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -112,7 +112,7 @@ class Pipeline(object):
 
     def filter(self, function):
         def operation(sequence):
-            result = filter(function, sequence)
+            result = [s for s in sequence if function(s)]
             logger.debug('%r filtered %s items to %s.', function, len(sequence), len(result))
             return result
         self.operations.append(operation)
@@ -120,7 +120,7 @@ class Pipeline(object):
 
     def map(self, function):
         def operation(sequence):
-            result = map(function, sequence)
+            result = [function(s) for s in sequence]
             logger.debug('%r applied to %s items.', function, len(sequence))
             return result
         self.operations.append(operation)
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 2188bd0a18..b5917345a7 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -476,11 +476,17 @@ class EventManager(object):
         # prioritize fingerprint over checksum as its likely the client defaulted
         # a checksum whereas the fingerprint was explicit
         if fingerprint:
-            hashes = map(md5_from_hash, get_hashes_from_fingerprint(event, fingerprint))
+            hashes = [
+                md5_from_hash(h)
+                for h in get_hashes_from_fingerprint(event, fingerprint)
+            ]
         elif checksum:
             hashes = [checksum]
         else:
-            hashes = map(md5_from_hash, get_hashes_for_event(event))
+            hashes = [
+                md5_from_hash(h)
+                for h in get_hashes_for_event(event)
+            ]
 
         # TODO(dcramer): temp workaround for complexity
         data['message'] = message
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 4029524655..04fb9a41c7 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -107,5 +107,5 @@ class Breadcrumbs(Interface):
                 'event_id': x.get('event_id'),
             }
         return {
-            'values': map(_convert, self.values),
+            'values': [_convert(v) for v in self.values],
         }
diff --git a/src/sentry/interfaces/csp.py b/src/sentry/interfaces/csp.py
index b8df871eaa..e0bc8b04d8 100644
--- a/src/sentry/interfaces/csp.py
+++ b/src/sentry/interfaces/csp.py
@@ -43,21 +43,21 @@ SELF = "'self'"
 
 DIRECTIVE_TO_MESSAGES = {
     # 'base-uri': '',
-    'child-src': ("Blocked 'child' from {uri!r}", "Blocked inline 'child'"),
-    'connect-src': ("Blocked 'connect' from {uri!r}", "Blocked inline 'connect'"),
+    'child-src': (u"Blocked 'child' from '{uri}'", "Blocked inline 'child'"),
+    'connect-src': (u"Blocked 'connect' from '{uri}'", "Blocked inline 'connect'"),
     # 'default-src': '',
-    'font-src': ("Blocked 'font' from {uri!r}", "Blocked inline 'font'"),
-    'form-action': ("Blocked 'form' action to {uri!r}",),  # no inline option
+    'font-src': (u"Blocked 'font' from '{uri}'", "Blocked inline 'font'"),
+    'form-action': (u"Blocked 'form' action to '{uri}'",),  # no inline option
     # 'frame-ancestors': '',
-    'img-src': ("Blocked 'image' from {uri!r}", "Blocked inline 'image'"),
-    'manifest-src': ("Blocked 'manifest' from {uri!r}", "Blocked inline 'manifest'"),
-    'media-src': ("Blocked 'media' from {uri!r}", "Blocked inline 'media'"),
-    'object-src': ("Blocked 'object' from {uri!r}", "Blocked inline 'object'"),
+    'img-src': (u"Blocked 'image' from '{uri}'", "Blocked inline 'image'"),
+    'manifest-src': (u"Blocked 'manifest' from '{uri}'", "Blocked inline 'manifest'"),
+    'media-src': (u"Blocked 'media' from '{uri}'", "Blocked inline 'media'"),
+    'object-src': (u"Blocked 'object' from '{uri}'", "Blocked inline 'object'"),
     # 'plugin-types': '',
     # 'referrer': '',
     # 'reflected-xss': '',
-    'script-src': ("Blocked 'script' from {uri!r}", "Blocked unsafe (eval() or inline) 'script'"),
-    'style-src': ("Blocked 'style' from {uri!r}", "Blocked inline 'style'"),
+    'script-src': (u"Blocked 'script' from '{uri}'", "Blocked unsafe (eval() or inline) 'script'"),
+    'style-src': (u"Blocked 'style' from '{uri}'", "Blocked inline 'style'"),
     # 'upgrade-insecure-requests': '',
 }
 
@@ -150,7 +150,7 @@ class Csp(Interface):
 
     def _normalize_directive(self, directive):
         bits = [d for d in directive.split(' ') if d]
-        return ' '.join([bits[0]] + map(self._normalize_value, bits[1:]))
+        return ' '.join([bits[0]] + list(map(self._normalize_value, bits[1:])))
 
     def _normalize_value(self, value):
         # > If no scheme is specified, the same scheme as the one used to
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 198c5cad57..19416a2baa 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -149,7 +149,7 @@ class SingleException(Interface):
             if output and self.type:
                 output.append(self.type)
         if not output:
-            output = filter(bool, [self.type, self.value])
+            output = [s for s in [self.type, self.value] if s]
         return output
 
 
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index ad28a14417..0784e56ebe 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -70,7 +70,7 @@ def format_cookies(value):
         value = value.items()
 
     return [
-        map(fix_broken_encoding, (k.strip(), v))
+        list(map(fix_broken_encoding, (k.strip(), v)))
         for k, v in value
     ]
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index ad9cf455df..b2b74d87ae 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -146,7 +146,7 @@ def get_source_context(source, lineno, colno, context=LINES_OF_CONTEXT):
     upper_bound = min(lineno + 1 + context, len(source))
 
     try:
-        pre_context = map(trim_line, source[lower_bound:lineno])
+        pre_context = [trim_line(x) for x in source[lower_bound:lineno]]
     except IndexError:
         pre_context = []
 
@@ -156,7 +156,7 @@ def get_source_context(source, lineno, colno, context=LINES_OF_CONTEXT):
         context_line = ''
 
     try:
-        post_context = map(trim_line, source[(lineno + 1):upper_bound])
+        post_context = [trim_line(x) for x in source[(lineno + 1):upper_bound]]
     except IndexError:
         post_context = []
 
@@ -419,14 +419,16 @@ def fetch_sourcemap(url, project=None, release=None, allow_scraping=True):
                             allow_scraping=allow_scraping)
         body = result.body
 
-    # According to various specs[1][2] a SourceMap may be prefixed to force
-    # a Javascript load error.
-    # [1] https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.h7yy76c5il9v
-    # [2] http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-xssi
-    if body.startswith((")]}'\n", ")]}\n")):
-        body = body.split('\n', 1)[1]
-
     try:
+        body = body.decode('utf-8')
+
+        # According to various specs[1][2] a SourceMap may be prefixed to force
+        # a Javascript load error.
+        # [1] https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.h7yy76c5il9v
+        # [2] http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-xssi
+        if body.startswith((")]}'\n", ")]}\n")):
+            body = body.split('\n', 1)[1]
+
         return sourcemap_to_index(body)
     except Exception as exc:
         # This is in debug because the product shows an error already.
diff --git a/src/sentry/middleware/health.py b/src/sentry/middleware/health.py
index 99e953bf34..a2e18ddb70 100644
--- a/src/sentry/middleware/health.py
+++ b/src/sentry/middleware/health.py
@@ -28,6 +28,6 @@ class HealthCheck(object):
         problems = list(itertools.chain.from_iterable(results.values()))
 
         return HttpResponse(json.dumps({
-            'problems': map(six.text_type, problems),
+            'problems': [six.text_type(p) for p in problems],
             'healthy': {type(check).__name__: not p for check, p in results.items()},
         }), content_type='application/json', status=(500 if problems else 200))
diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index da097b79d8..fbbfcc4e84 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -295,8 +295,13 @@ class RecoveryCodeInterface(AuthenticatorInterface):
         return rv
 
     def generate_new_config(self):
+        if six.PY3:
+            salt = int(os.urandom(16).decode('utf-8'), 16)
+        else:
+            salt = os.urandom(16).encode('hex')
+
         return {
-            'salt': os.urandom(16).encode('hex'),
+            'salt': salt,
             'used': 0,
         }
 
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 52c6d31ebc..dee3193301 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -268,7 +268,7 @@ class Group(Model):
     def get_share_id(self):
         return b16encode(
             ('{}.{}'.format(self.project_id, self.id)).encode('utf-8')
-        ).lower()
+        ).lower().decode('utf-8')
 
     @classmethod
     def from_share_id(cls, share_id):
diff --git a/src/sentry/models/useravatar.py b/src/sentry/models/useravatar.py
index dc46942b37..f0be6fbb19 100644
--- a/src/sentry/models/useravatar.py
+++ b/src/sentry/models/useravatar.py
@@ -4,7 +4,7 @@ import uuid
 
 from django.db import models
 from PIL import Image
-from six import StringIO
+from six import BytesIO
 
 from sentry.db.models import FlexibleForeignKey, Model
 from sentry.utils.cache import cache
@@ -48,7 +48,7 @@ class UserAvatar(Model):
         return 'avatar:%s:%s' % (self.user_id, size)
 
     def clear_cached_photos(self):
-        cache.delete_many(map(self.get_cache_key, self.ALLOWED_SIZES))
+        cache.delete_many([self.get_cache_key(x) for x in self.ALLOWED_SIZES])
 
     def get_cached_photo(self, size):
         if not self.file:
@@ -61,7 +61,7 @@ class UserAvatar(Model):
             photo_file = self.file.getfile()
             with Image.open(photo_file) as image:
                 image = image.resize((size, size))
-                image_file = StringIO()
+                image_file = BytesIO()
                 image.save(image_file, 'PNG')
                 photo = image_file.getvalue()
                 cache.set(cache_key, photo)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index d7829d59d1..79b0d9bbb8 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -129,7 +129,7 @@ class NotificationPlugin(Plugin):
                 value='0',
                 user__in=members_to_check,
             ).values_list('user', flat=True))
-            member_set = filter(lambda x: x not in disabled, member_set)
+            member_set = [x for x in member_set if x not in disabled]
 
         return member_set
 
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 0cb5e9a8e2..2377cee45e 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -117,7 +117,7 @@ class MailPlugin(NotificationPlugin):
         cache_key = '%s:send_to:%s' % (self.get_conf_key(), project.pk)
         send_to_list = cache.get(cache_key)
         if send_to_list is None:
-            send_to_list = filter(bool, self.get_sendable_users(project))
+            send_to_list = [s for s in self.get_sendable_users(project) if s]
             cache.set(cache_key, send_to_list, 60)  # 1 minute cache
 
         return send_to_list
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index f6416552cb..d421202716 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -48,11 +48,12 @@ class RedisQuota(Quota):
     def is_rate_limited(self, project):
         timestamp = time()
 
-        quotas = filter(
+        quotas = [
+            (key, limit, interval)
+            for key, limit, interval in self.get_quotas(project)
             # x = (key, limit, interval)
-            lambda x: x[1] and x[1] > 0,  # a zero limit means "no limit", not "reject all"
-            self.get_quotas(project),
-        )
+            if limit and limit > 0  # a zero limit means "no limit", not "reject all"
+        ]
 
         # If there are no quotas to actually check, skip the trip to the database.
         if not quotas:
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index e3a257f767..3cd8cb4fe7 100755
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -51,7 +51,7 @@ def cli(ctx, config):
 
 
 # TODO(mattrobenolt): Autodiscover commands?
-map(lambda cmd: cli.add_command(import_string(cmd)), (
+list(map(lambda cmd: cli.add_command(import_string(cmd)), (
     'sentry.runner.commands.backup.export',
     'sentry.runner.commands.backup.import_',
     'sentry.runner.commands.cleanup.cleanup',
@@ -71,7 +71,7 @@ map(lambda cmd: cli.add_command(import_string(cmd)), (
     'sentry.runner.commands.tsdb.tsdb',
     'sentry.runner.commands.upgrade.upgrade',
     'sentry.runner.commands.dsym.dsym',
-))
+)))
 
 
 def make_django_command(name, django_command=None, help=None):
@@ -96,10 +96,10 @@ def make_django_command(name, django_command=None, help=None):
     return inner
 
 
-map(cli.add_command, (
+list(map(cli.add_command, (
     make_django_command('shell', help='Run a Python interactive interpreter.'),
     make_django_command('celery', help='DEPRECATED see `sentry run` instead.'),
-))
+)))
 
 
 def configure():
diff --git a/src/sentry/status_checks/base.py b/src/sentry/status_checks/base.py
index ecd5360944..79d6cc7390 100644
--- a/src/sentry/status_checks/base.py
+++ b/src/sentry/status_checks/base.py
@@ -2,7 +2,10 @@ from __future__ import absolute_import
 
 import six
 
+from sentry.utils.compat import implements_to_string
 
+
+@implements_to_string
 class Problem(object):
 
     # Used for issues that may render the system inoperable or have effects on
@@ -39,9 +42,6 @@ class Problem(object):
         )
 
     def __str__(self):
-        return self.message.encode('utf-8')
-
-    def __unicode__(self):
         return self.message
 
     @classmethod
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 5825e3ecfb..36a000cba9 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -132,10 +132,10 @@ class BaseTestCase(Fixtures, Exam):
         super(BaseTestCase, self)._post_teardown()
 
     def _makeMessage(self, data):
-        return json.dumps(data)
+        return json.dumps(data).encode('utf-8')
 
     def _makePostMessage(self, data):
-        return base64.b64encode(self._makeMessage(data).encode('utf-8'))
+        return base64.b64encode(self._makeMessage(data))
 
     def _postWithHeader(self, data, key=None, secret=None, protocol=None):
         if key is None:
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 1dace0927a..dc7a974dac 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -132,6 +132,8 @@ class RedisTSDB(BaseTSDB):
         if isinstance(model_key, six.integer_types):
             vnode = model_key % self.vnodes
         else:
+            if isinstance(model_key, six.text_type):
+                model_key = model_key.encode('utf-8')
             vnode = crc32(model_key) % self.vnodes
 
         return '{0}{1}:{2}:{3}'.format(self.prefix, model.value, epoch, vnode)
@@ -310,7 +312,9 @@ class RedisTSDB(BaseTSDB):
             """
             Return a list containing all keys for each interval in the series for a key.
             """
-            return [self.make_key(model, rollup, timestamp, key) for timestamp in series]
+            return [
+                self.make_key(model, rollup, timestamp, key)
+                for timestamp in series]
 
         router = self.cluster.get_router()
 
@@ -346,7 +350,10 @@ class RedisTSDB(BaseTSDB):
             Calculate the cardinality of the provided HyperLogLog values.
             """
             destination = make_temporary_key('a')  # all values will be merged into this key
-            aggregates = {make_temporary_key('a:{}'.format(host)): value for host, value in values}
+            aggregates = {
+                make_temporary_key('a:{}'.format(host)): value
+                for host, value in values
+            }
 
             # Choose a random host to execute the reduction on. (We use a host
             # here that we've already accessed as part of this process -- this
@@ -367,14 +374,14 @@ class RedisTSDB(BaseTSDB):
         # MSET and PFMERGE operations entirely.
 
         return merge_aggregates(
-            map(
-                get_partition_aggregate,
-                reduce(
+            [
+                get_partition_aggregate(x)
+                for x in reduce(
                     map_key_to_host,
                     keys,
                     defaultdict(set),
-                ).items(),
-            )
+                ).items()
+            ]
         )
 
     def make_frequency_table_keys(self, model, rollup, timestamp, key):
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 6cdefc49cf..8725149777 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -338,7 +338,7 @@ class MessageBuilder(object):
 
         html_body = self.__render_html_body()
         if html_body:
-            msg.attach_alternative(html_body, 'text/html')
+            msg.attach_alternative(html_body.decode('utf-8'), 'text/html')
 
         return msg
 
diff --git a/src/sentry/utils/html.py b/src/sentry/utils/html.py
index ffeb2b34c7..2c5763e9b7 100644
--- a/src/sentry/utils/html.py
+++ b/src/sentry/utils/html.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 try:
-    from html import escape as html_escape  # NOQA
+    from html import escape  # NOQA
 except ImportError:
     from cgi import escape as _escape  # NOQA
 
diff --git a/src/sentry/utils/integrationdocs.py b/src/sentry/utils/integrationdocs.py
index 4a2fc240c0..40054298fc 100644
--- a/src/sentry/utils/integrationdocs.py
+++ b/src/sentry/utils/integrationdocs.py
@@ -52,7 +52,8 @@ def get_integration_id(platform_id, integration_id):
 
 def sync_docs():
     print('syncing documentation (platform index)')
-    data = json.load(urlopen(BASE_URL.format('_index.json')))
+    body = urlopen(BASE_URL.format('_index.json')).read().decode('utf-8')
+    data = json.loads(body)
     platform_list = []
     for platform_id, integrations in six.iteritems(data['platforms']):
         platform_list.append({
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index 91ecddeaf3..891628a0e3 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -105,7 +105,7 @@ def trim_pairs(iterable, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwarg
 
 def trim_dict(value, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
     max_items -= 1
-    for idx, key in enumerate(value.keys()):
+    for idx, key in enumerate(list(iter(value))):
         value[key] = trim(value[key], **kwargs)
         if idx > max_items:
             del value[key]
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 1417c858a1..4d79c178e9 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -329,12 +329,12 @@ class StoreView(APIView):
 
         content_encoding = request.META.get('HTTP_CONTENT_ENCODING', '')
 
-        if isinstance(data, six.string_types):
+        if isinstance(data, (six.binary_type, six.text_type)):
             if content_encoding == 'gzip':
                 data = helper.decompress_gzip(data)
             elif content_encoding == 'deflate':
                 data = helper.decompress_deflate(data)
-            elif not data.startswith('{'):
+            elif data[0] != b'{':
                 data = helper.decode_and_decompress_data(data)
             data = helper.safely_load_json_string(data)
 
diff --git a/src/sentry/web/frontend/group_tag_export.py b/src/sentry/web/frontend/group_tag_export.py
index 44a8f8b486..551c4e3cd6 100644
--- a/src/sentry/web/frontend/group_tag_export.py
+++ b/src/sentry/web/frontend/group_tag_export.py
@@ -79,10 +79,7 @@ class GroupTagExportView(ProjectView):
                 yield get_row(row)
 
         pseudo_buffer = Echo()
-        if six.PY3:
-            writer = csv.writer(pseudo_buffer, encoding='utf-8')
-        else:
-            writer = csv.writer(pseudo_buffer)
+        writer = csv.writer(pseudo_buffer)
         response = StreamingHttpResponse(
             (writer.writerow(r) for r in row_iter()),
             content_type='text/csv',
diff --git a/src/sentry/web/frontend/project_rules.py b/src/sentry/web/frontend/project_rules.py
index 5d8e0ba32b..48e2063fa3 100644
--- a/src/sentry/web/frontend/project_rules.py
+++ b/src/sentry/web/frontend/project_rules.py
@@ -27,12 +27,12 @@ class ProjectRulesView(ProjectView):
             conditions = []
             for data in rule.data['conditions']:
                 conditions.append(_generate_rule_label(project, rule, data))
-            conditions = filter(bool, conditions)
+            conditions = list(filter(bool, conditions))
 
             actions = []
             for data in rule.data['actions']:
                 actions.append(_generate_rule_label(project, rule, data))
-            actions = filter(bool, actions)
+            actions = list(filter(bool, actions))
 
             rule_list.append({
                 'id': rule.id,
diff --git a/tests/sentry/api/endpoints/test_release_files.py b/tests/sentry/api/endpoints/test_release_files.py
index 87ca8e67ed..47041c327f 100644
--- a/tests/sentry/api/endpoints/test_release_files.py
+++ b/tests/sentry/api/endpoints/test_release_files.py
@@ -63,7 +63,7 @@ class ReleaseFileCreateTest(APITestCase):
         response = self.client.post(url, {
             'name': 'http://example.com/application.js',
             'header': 'X-SourceMap: http://example.com',
-            'file': SimpleUploadedFile('application.js', 'function() { }',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
                                        content_type='application/javascript'),
         }, format='multipart')
 
@@ -117,7 +117,7 @@ class ReleaseFileCreateTest(APITestCase):
 
         response = self.client.post(url, {
             'header': 'X-SourceMap: http://example.com',
-            'file': SimpleUploadedFile('', 'function() { }',
+            'file': SimpleUploadedFile('', b'function() { }',
                                        content_type='application/javascript'),
         }, format='multipart')
 
@@ -142,7 +142,7 @@ class ReleaseFileCreateTest(APITestCase):
         response = self.client.post(url, {
             'name': 'http://example.com/application.js',
             'header': 'lol',
-            'file': SimpleUploadedFile('application.js', 'function() { }',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
                                        content_type='application/javascript'),
         }, format='multipart')
 
@@ -167,7 +167,7 @@ class ReleaseFileCreateTest(APITestCase):
         data = {
             'name': 'http://example.com/application.js',
             'header': 'X-SourceMap: http://example.com',
-            'file': SimpleUploadedFile('application.js', 'function() { }',
+            'file': SimpleUploadedFile('application.js', b'function() { }',
                                        content_type='application/javascript'),
         }
 
diff --git a/tests/sentry/api/test_base.py b/tests/sentry/api/test_base.py
index 3b498fea38..d37a89c9d2 100644
--- a/tests/sentry/api/test_base.py
+++ b/tests/sentry/api/test_base.py
@@ -30,7 +30,9 @@ class EndpointTest(APITestCase):
         request = HttpRequest()
         request.method = 'GET'
         request.META['HTTP_ORIGIN'] = 'http://example.com'
-        request.META['HTTP_AUTHORIZATION'] = 'Basic {}'.format(base64.b64encode(apikey.key))
+        request.META['HTTP_AUTHORIZATION'] = 'Basic {}'.format(
+            base64.b64encode(apikey.key).decode('utf-8')
+        )
 
         response = _dummy_endpoint(request)
         response.render()
diff --git a/tests/sentry/digests/backends/test_redis.py b/tests/sentry/digests/backends/test_redis.py
index 3c72a5e955..3508289639 100644
--- a/tests/sentry/digests/backends/test_redis.py
+++ b/tests/sentry/digests/backends/test_redis.py
@@ -187,7 +187,7 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
 
         with self.assertChanges(get_waiting_set_size, before=n, after=0), \
                 self.assertChanges(get_ready_set_size, before=n, after=n * 2):
-            results = zip(range(n), list(backend.schedule(n, chunk=5)))
+            results = list(zip(range(n), list(backend.schedule(n, chunk=5))))
             assert len(results) is n
 
             # Ensure scheduled entries are returned earliest first.
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 80a2daefe4..dc835452ac 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -23,16 +23,19 @@ def test_is_rate_limited_script():
     client = cluster.get_local_client(six.next(iter(cluster.hosts)))
 
     # The item should not be rate limited by either key.
-    assert map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120))) == [False, False]
+    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120)))) == \
+        [False, False]
 
     # The item should be rate limited by the first key (1).
-    assert map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120))) == [True, False]
+    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120)))) == \
+        [True, False]
 
     # The item should still be rate limited by the first key (1), but *not*
     # rate limited by the second key (2) even though this is the third time
     # we've checked the quotas. This ensures items that are rejected by a lower
     # quota don't affect unrelated items that share a parent quota.
-    assert map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120))) == [True, False]
+    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120)))) == \
+        [True, False]
 
     assert client.get('foo') == '1'
     assert 59 <= client.ttl('foo') <= 60
diff --git a/tests/sentry/utils/json/tests.py b/tests/sentry/utils/json/tests.py
index 967fdf66fa..3d5b299c9c 100644
--- a/tests/sentry/utils/json/tests.py
+++ b/tests/sentry/utils/json/tests.py
@@ -20,12 +20,12 @@ class JSONTest(TestCase):
         self.assertEquals(json.dumps(res), '"2011-01-01T01:01:01.000000Z"')
 
     def test_set(self):
-        res = set(['foo', 'bar'])
-        self.assertEquals(json.dumps(res), '["foo","bar"]')
+        res = set(['foo'])
+        self.assertEquals(json.dumps(res), '["foo"]')
 
     def test_frozenset(self):
-        res = frozenset(['foo', 'bar'])
-        self.assertEquals(json.dumps(res), '["foo","bar"]')
+        res = frozenset(['foo'])
+        self.assertEquals(json.dumps(res), '["foo"]')
 
     def test_escape(self):
         res = '<script>alert(1);</script>'
diff --git a/tests/sentry/utils/locking/backends/test_redis.py b/tests/sentry/utils/locking/backends/test_redis.py
index 8a4d2bf984..7841f9ec03 100644
--- a/tests/sentry/utils/locking/backends/test_redis.py
+++ b/tests/sentry/utils/locking/backends/test_redis.py
@@ -25,7 +25,7 @@ class RedisLockBackendTestCase(TestCase):
         client = self.backend.get_client(key)
 
         self.backend.acquire(key, duration)
-        assert client.get(full_key) == self.backend.uuid
+        assert client.get(full_key) == self.backend.uuid.encode('utf-8')
         assert duration - 2 < float(client.ttl(full_key)) <= duration
 
         self.backend.release(key)
diff --git a/tests/sentry/utils/test_numbers.py b/tests/sentry/utils/test_numbers.py
index c29ba8a953..ea83c70079 100644
--- a/tests/sentry/utils/test_numbers.py
+++ b/tests/sentry/utils/test_numbers.py
@@ -20,7 +20,7 @@ def test_base36():
         '3I', '3J'
     ]
 
-    assert [base36_decode(base36_encode(x)) for x in range(128)] == map(int, range(128))
+    assert [base36_decode(base36_encode(x)) for x in range(128)] == list(map(int, range(128)))
 
 
 def test_base32():
@@ -39,4 +39,4 @@ def test_base32():
         '3Y', '3Z'
     ]
 
-    assert [base32_decode(base32_encode(x)) for x in range(128)] == map(int, range(128))
+    assert [base32_decode(base32_encode(x)) for x in range(128)] == list(map(int, range(128)))
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 6b52ac0654..31bbffabbe 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -310,7 +310,7 @@ class CrossDomainXmlTest(TestCase):
         assert resp.status_code == 200, resp.content
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')
-        assert '<allow-access-from domain="*" secure="false" />' in resp.content
+        assert '<allow-access-from domain="*" secure="false" />' in resp.content.decode('utf-8')
 
     @mock.patch('sentry.web.api.get_origins')
     def test_output_with_whitelist(self, get_origins):
@@ -320,8 +320,8 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')
-        assert '<allow-access-from domain="disqus.com" secure="false" />' in resp.content
-        assert '<allow-access-from domain="www.disqus.com" secure="false" />' in resp.content
+        assert '<allow-access-from domain="disqus.com" secure="false" />' in resp.content.decode('utf-8')
+        assert '<allow-access-from domain="www.disqus.com" secure="false" />' in resp.content.decode('utf-8')
 
     @mock.patch('sentry.web.api.get_origins')
     def test_output_with_no_origins(self, get_origins):
@@ -331,14 +331,14 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')
-        assert '<allow-access-from' not in resp.content
+        assert '<allow-access-from' not in resp.content.decode('utf-8')
 
     def test_output_allows_x_sentry_auth(self):
         resp = self.client.get(self.path)
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')
-        assert '<allow-http-request-headers-from domain="*" headers="*" secure="false" />' in resp.content
+        assert '<allow-http-request-headers-from domain="*" headers="*" secure="false" />' in resp.content.decode('utf-8')
 
 
 class CrossDomainXmlIndexTest(TestCase):
@@ -351,7 +351,7 @@ class CrossDomainXmlIndexTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain_index.xml')
-        assert '<site-control permitted-cross-domain-policies="all" />' in resp.content
+        assert '<site-control permitted-cross-domain-policies="all" />' in resp.content.decode('utf-8')
 
 
 class RobotsTxtTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_auth_logout.py b/tests/sentry/web/frontend/test_auth_logout.py
index f64c77eb9e..2a8c4f76ab 100644
--- a/tests/sentry/web/frontend/test_auth_logout.py
+++ b/tests/sentry/web/frontend/test_auth_logout.py
@@ -16,9 +16,9 @@ class AuthLogoutTest(TestCase):
 
         resp = self.client.get(self.path)
         assert resp.status_code == 302
-        assert self.client.session.keys() == []
+        assert list(self.client.session.keys()) == []
 
     def test_same_behavior_with_anonymous_user(self):
         resp = self.client.get(self.path)
         assert resp.status_code == 302
-        assert self.client.session.keys() == []
+        assert list(self.client.session.keys()) == []
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index bdf8da0183..713b516dc1 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -53,7 +53,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
             resp = self.client.post(path, {'provider': 'dummy'})
 
         assert resp.status_code == 200
-        assert resp.content == self.provider.TEMPLATE
+        assert resp.content.decode('utf-8') == self.provider.TEMPLATE
 
     def test_basic_flow(self):
         user = self.create_user('bar@example.com')
