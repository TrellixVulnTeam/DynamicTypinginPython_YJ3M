commit 056e8ae295a635a2b95ade6cf5cfcc4ad48f7ade
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Feb 16 11:58:05 2018 -0800

    Revert "ref: Refactor alert rules API to return object instead of HTML (#7179)" (#7289)
    
    This reverts commit b4856f0a0a65d82f22b13885705232356a2ef95f.

diff --git a/src/sentry/api/endpoints/project_rules_configuration.py b/src/sentry/api/endpoints/project_rules_configuration.py
index 8cc42e777e..49fc8325fd 100644
--- a/src/sentry/api/endpoints/project_rules_configuration.py
+++ b/src/sentry/api/endpoints/project_rules_configuration.py
@@ -23,11 +23,9 @@ class ProjectRulesConfigurationEndpoint(ProjectEndpoint):
             context = {
                 'id': node.id,
                 'label': node.label,
+                'html': node.render_form(),
             }
 
-            if hasattr(node, 'form_fields'):
-                context['formFields'] = node.form_fields
-
             if not node.is_enabled():
                 continue
 
diff --git a/src/sentry/rules/actions/notify_event_service.py b/src/sentry/rules/actions/notify_event_service.py
index ca1ab77e14..79ad47e762 100644
--- a/src/sentry/rules/actions/notify_event_service.py
+++ b/src/sentry/rules/actions/notify_event_service.py
@@ -29,16 +29,8 @@ class NotifyEventServiceForm(forms.Form):
 
 
 class NotifyEventServiceAction(EventAction):
-    def __init__(self, *args, **kwargs):
-        super(NotifyEventServiceAction, self).__init__(*args, **kwargs)
-        self.label = 'Send a notification via {service}'
-        self.form_cls = NotifyEventServiceForm
-        self.form_fields = {
-            'service': {
-                'type': 'choice',
-                'choices': [[i.slug, i.title] for i in self.get_plugins()]
-            }
-        }
+    form_cls = NotifyEventServiceForm
+    label = 'Send a notification via {service}'
 
     def after(self, event, state):
         service = self.get_option('service')
diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index e1994a8e78..f7ca8dbc5d 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -38,9 +38,13 @@ by the rule's logic. Each rule condition may be associated with a form.
 from __future__ import absolute_import
 
 import logging
+import re
 import six
 
 from collections import namedtuple
+from django.utils.safestring import mark_safe
+
+from sentry.utils.html import escape
 
 CallbackFuture = namedtuple('CallbackFuture', ['callback', 'kwargs'])
 
@@ -81,6 +85,18 @@ class RuleBase(object):
     def render_label(self):
         return self.label.format(**self.data)
 
+    def render_form(self):
+        if not self.form_cls:
+            return self.label
+
+        form = self.get_form_instance()
+
+        def replace_field(match):
+            field = match.group(1)
+            return six.text_type(form[field])
+
+        return mark_safe(re.sub(r'{([^}]+)}', replace_field, escape(self.label)))
+
     def validate_form(self):
         if not self.form_cls:
             return True
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index 3b83fbbf3c..1882e763a7 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -69,6 +69,8 @@ class FixedTypeaheadInput(forms.TextInput):
 class EventAttributeForm(forms.Form):
     attribute = forms.CharField(
         widget=FixedTypeaheadInput(
+            attrs={'style': 'width:200px',
+                   'placeholder': 'i.e. exception.type'},
             choices=[{
                 'id': a,
                 'text': a
@@ -76,7 +78,9 @@ class EventAttributeForm(forms.Form):
         )
     )
     match = forms.ChoiceField(
-        MATCH_CHOICES.items(), widget=forms.Select()
+        MATCH_CHOICES.items(), widget=forms.Select(
+            attrs={'style': 'width:150px'},
+        )
     )
     value = forms.CharField(
         widget=forms.TextInput(
@@ -101,22 +105,7 @@ class EventAttributeCondition(EventCondition):
     """
     # TODO(dcramer): add support for stacktrace.vars.[name]
 
-    form_fields = {
-        'attribute': {
-            'type': 'choice',
-            'placeholder': 'i.e. exception.type',
-            'choices': [[a, a] for a in ATTR_CHOICES]
-        },
-        'match': {
-            'type': 'choice',
-            'choices': MATCH_CHOICES.items()
-        },
-        'value': {
-            'type': 'string',
-            'placeholder': 'value'
-        }
-    }
-
+    form_cls = EventAttributeForm
     label = u'An event\'s {attribute} value {match} {value}'
 
     def _get_attribute_values(self, event, attr):
diff --git a/src/sentry/rules/conditions/event_frequency.py b/src/sentry/rules/conditions/event_frequency.py
index 63314f1a39..c240ee83fa 100644
--- a/src/sentry/rules/conditions/event_frequency.py
+++ b/src/sentry/rules/conditions/event_frequency.py
@@ -33,22 +33,13 @@ class EventFrequencyForm(forms.Form):
         ]
     )
     value = forms.IntegerField(
-        widget=forms.TextInput(attrs={'type': 'number'})
+        widget=forms.TextInput(attrs={'placeholder': '100',
+                                      'type': 'number'})
     )
 
 
 class BaseEventFrequencyCondition(EventCondition):
     form_cls = EventFrequencyForm
-    form_fields = {
-        'value': {'type': 'number', 'placeholder': 100},
-        'interval': {
-            'type': 'choice',
-            'choices': [
-                (key, label) for key, (label, duration) in sorted(intervals.items(), key=lambda key____label__duration: key____label__duration[1][1])
-            ]
-        }
-    }
-
     label = NotImplemented  # subclass must implement
 
     def __init__(self, *args, **kwargs):
diff --git a/src/sentry/rules/conditions/level.py b/src/sentry/rules/conditions/level.py
index 89674493af..925d724986 100644
--- a/src/sentry/rules/conditions/level.py
+++ b/src/sentry/rules/conditions/level.py
@@ -48,16 +48,6 @@ class LevelEventForm(forms.Form):
 class LevelCondition(EventCondition):
     form_cls = LevelEventForm
     label = 'An event\'s level is {match} {level}'
-    form_fields = {
-        'level': {
-            'type': 'choice',
-            'choices': LEVEL_CHOICES.items()
-        },
-        'match': {
-            'type': 'choice',
-            'choices': MATCH_CHOICES.items()
-        }
-    }
 
     def passes(self, event, state, **kwargs):
         desired_level = self.get_option('level')
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index d1f7b0182b..da53e5b9de 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -37,30 +37,18 @@ MATCH_CHOICES = OrderedDict(
 
 
 class TaggedEventForm(forms.Form):
-    key = forms.CharField(widget=forms.TextInput())
+    key = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'key'}))
     match = forms.ChoiceField(
-        MATCH_CHOICES.items(), widget=forms.Select()
+        MATCH_CHOICES.items(), widget=forms.Select(
+            attrs={'style': 'width:150px'},
+        )
     )
-    value = forms.CharField(widget=forms.TextInput())
+    value = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'value'}))
 
 
 class TaggedEventCondition(EventCondition):
-    label = u'An event\'s tags match {key} {match} {value}'
     form_cls = TaggedEventForm
-    form_fields = {
-        'key': {
-            'type': 'string',
-            'placeholder': 'key'
-        },
-        'match': {
-            'type': 'choice',
-            'choices': MATCH_CHOICES.items()
-        },
-        'value': {
-            'type': 'string',
-            'placeholder': 'value',
-        }
-    }
+    label = u'An event\'s tags match {key} {match} {value}'
 
     def passes(self, event, state, **kwargs):
         key = self.get_option('key')
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
index 74645c4766..4ec2300f1f 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
@@ -3,14 +3,11 @@ import React from 'react';
 import ReactDOM from 'react-dom';
 import $ from 'jquery';
 
-import * as utils from './utils';
-
 class RuleNode extends React.Component {
   static propTypes = {
     data: PropTypes.object.isRequired,
     node: PropTypes.shape({
-      label: PropTypes.string.isRequired,
-      formFields: PropTypes.object,
+      html: PropTypes.string.isRequired,
     }).isRequired,
     onDelete: PropTypes.func.isRequired,
   };
@@ -27,17 +24,31 @@ class RuleNode extends React.Component {
       $el.attr('id', '');
       $el.val(this.props.data[el.name]);
     });
+
+    $html.find('select').select2();
+
+    $html.find('input.typeahead').each((_, el) => {
+      let $el = $(el);
+      $el.select2({
+        initSelection: function(option, callback) {
+          let $option = $(option);
+          callback({id: $option.val(), text: $option.val()});
+        },
+        data: $el.data('choices'),
+        createSearchChoice: function(term) {
+          return {id: $.trim(term), text: $.trim(term)};
+        },
+      });
+    });
   }
 
   render() {
     let {data, node} = this.props;
-    let html = utils.getComponent(node);
-
     return (
       <tr>
         <td className="rule-form">
           <input type="hidden" name="id" value={data.id} />
-          <span style={{display: 'flex', alignItems: 'center'}}>{html}</span>
+          <span ref="html" dangerouslySetInnerHTML={{__html: node.html}} />
         </td>
         <td className="align-right">
           <a onClick={this.props.onDelete}>
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/utils.jsx b/src/sentry/static/sentry/app/views/ruleEditor/utils.jsx
deleted file mode 100644
index 6b1552b836..0000000000
--- a/src/sentry/static/sentry/app/views/ruleEditor/utils.jsx
+++ /dev/null
@@ -1,48 +0,0 @@
-import React from 'react';
-import {Select2Field} from '../../components/forms';
-
-function getChoiceField(name, data) {
-  return (
-    <Select2Field
-      name={name}
-      choices={data.choices}
-      key={name}
-      style={{marginBottom: 0}}
-    />
-  );
-}
-
-function getInputField(type, name, data) {
-  return (
-    <input
-      name={name}
-      type={type}
-      placeholder={data.placeholder}
-      key={name}
-      style={{height: 37}}
-    />
-  );
-}
-
-const getFieldTypes = {
-  choice: getChoiceField,
-  number: getInputField.bind(null, 'number'),
-  string: getInputField.bind(null, 'text'),
-};
-
-function getField(name, data) {
-  return getFieldTypes[data.type](name, data);
-}
-
-export function getComponent(node) {
-  const {label, formFields} = node;
-
-  return label.split(/({\w+})/).map(part => {
-    if (!/^{\w+}$/.test(part)) {
-      return part;
-    }
-
-    const key = part.slice(1, -1);
-    return formFields[key] ? getField(key, formFields[key]) : part;
-  });
-}
diff --git a/src/sentry/static/sentry/less/project-settings.less b/src/sentry/static/sentry/less/project-settings.less
index b140446453..15a184fbf3 100644
--- a/src/sentry/static/sentry/less/project-settings.less
+++ b/src/sentry/static/sentry/less/project-settings.less
@@ -207,6 +207,20 @@
   }
 }
 
+.rule-action-list,
+.rule-condition-list {
+  .select2-container {
+    max-width: 40%;
+  }
+
+  .node-selector .select2-container {
+    width: 100%;
+    max-width: 100%;
+  }
+
+  margin-bottom: 20px;
+}
+
 /**
  * Install
  * ============================================================================
