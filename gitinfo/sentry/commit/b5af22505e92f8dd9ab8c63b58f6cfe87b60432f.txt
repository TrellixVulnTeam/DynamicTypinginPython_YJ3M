commit b5af22505e92f8dd9ab8c63b58f6cfe87b60432f
Author: Chris Fuller <cfuller@sentry.io>
Date:   Wed Jul 1 12:44:36 2020 -0400

    feat(workflow): Ignore subscription updates if org doesn't have access to incidents (#19604)
    
    * Adding feature and dataset check to subscription updates

diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index 3e2d5f07f3..493d7f7f6f 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -9,6 +9,7 @@ from datetime import timedelta
 from django.conf import settings
 from django.db import transaction
 
+from sentry import features
 from sentry.incidents.logic import create_incident, update_incident_status
 from sentry.incidents.endpoints.serializers import WARNING_TRIGGER_LABEL, CRITICAL_TRIGGER_LABEL
 from sentry.incidents.models import (
@@ -106,6 +107,20 @@ class SubscriptionProcessor(object):
         return incident_trigger is not None and incident_trigger.status == status.value
 
     def process_update(self, subscription_update):
+        dataset = self.subscription.snuba_query.dataset
+        if dataset == "events" and not features.has(
+            "organizations:incidents", self.subscription.project.organization
+        ):
+            # They have downgraded since these subscriptions have been created. So we just ignore updates for now.
+            metrics.incr("incidents.alert_rules.ignore_update_missing_incidents")
+            return
+        elif dataset == "transactions" and not features.has(
+            "organizations:incidents-performance", self.subscription.project.organization
+        ):
+            # They have downgraded since these subscriptions have been created. So we just ignore updates for now.
+            metrics.incr("incidents.alert_rules.ignore_update_missing_incidents_performance")
+            return
+
         if not hasattr(self, "alert_rule"):
             # If the alert rule has been removed then just skip
             metrics.incr("incidents.alert_rules.no_alert_rule_for_subscription")
diff --git a/tests/sentry/incidents/test_subscription_processor.py b/tests/sentry/incidents/test_subscription_processor.py
index a9c7cc0986..7ce9dfe487 100644
--- a/tests/sentry/incidents/test_subscription_processor.py
+++ b/tests/sentry/incidents/test_subscription_processor.py
@@ -131,7 +131,8 @@ class ProcessUpdateTest(TestCase):
             subscription = self.sub
         processor = SubscriptionProcessor(subscription)
         message = self.build_subscription_update(subscription, value=value, time_delta=time_delta)
-        processor.process_update(message)
+        with self.feature(["organizations:incidents", "organizations:incidents-performance"]):
+            processor.process_update(message)
         return processor
 
     def assert_trigger_exists_with_status(self, incident, trigger, status):
@@ -210,12 +211,29 @@ class ProcessUpdateTest(TestCase):
     def test_removed_alert_rule(self):
         message = self.build_subscription_update(self.sub)
         self.rule.delete()
-        SubscriptionProcessor(self.sub).process_update(message)
+        with self.feature(["organizations:incidents", "organizations:incidents-performance"]):
+            SubscriptionProcessor(self.sub).process_update(message)
         self.metrics.incr.assert_called_once_with(
             "incidents.alert_rules.no_alert_rule_for_subscription"
         )
         # TODO: Check subscription is deleted once we start doing that
 
+    def test_no_feature(self):
+        message = self.build_subscription_update(self.sub)
+        SubscriptionProcessor(self.sub).process_update(message)
+        self.metrics.incr.assert_called_once_with(
+            "incidents.alert_rules.ignore_update_missing_incidents"
+        )
+
+    def test_no_feature_performance(self):
+        self.sub.snuba_query.dataset = "transactions"
+        message = self.build_subscription_update(self.sub)
+        with self.feature("organizations:incidents"):
+            SubscriptionProcessor(self.sub).process_update(message)
+        self.metrics.incr.assert_called_once_with(
+            "incidents.alert_rules.ignore_update_missing_incidents_performance"
+        )
+
     def test_skip_already_processed_update(self):
         self.send_update(self.rule, self.trigger.alert_threshold)
         self.metrics.incr.reset_mock()
diff --git a/tests/snuba/incidents/test_tasks.py b/tests/snuba/incidents/test_tasks.py
index bd7d92de80..9465124fb1 100644
--- a/tests/snuba/incidents/test_tasks.py
+++ b/tests/snuba/incidents/test_tasks.py
@@ -90,7 +90,6 @@ class HandleSnubaQueryUpdateTest(TestCase):
         # Full integration test to ensure that when a subscription receives an update
         # the `QuerySubscriptionConsumer` successfully retries the subscription and
         # calls the correct callback, which should result in an incident being created.
-
         callback = subscriber_registry[INCIDENTS_SNUBA_SUBSCRIPTION_TYPE]
 
         def exception_callback(*args, **kwargs):
@@ -118,10 +117,11 @@ class HandleSnubaQueryUpdateTest(TestCase):
             ).exclude(status=IncidentStatus.CLOSED.value)
 
         consumer = QuerySubscriptionConsumer("hi", topic=self.topic)
-        with self.assertChanges(
-            lambda: active_incident().exists(), before=False, after=True
-        ), self.tasks():
-            consumer.run()
+        with self.feature(["organizations:incidents", "organizations:incidents-performance"]):
+            with self.assertChanges(
+                lambda: active_incident().exists(), before=False, after=True
+            ), self.tasks():
+                consumer.run()
 
         assert len(mail.outbox) == 1
         handler = EmailActionHandler(self.action, active_incident().get(), self.project)
