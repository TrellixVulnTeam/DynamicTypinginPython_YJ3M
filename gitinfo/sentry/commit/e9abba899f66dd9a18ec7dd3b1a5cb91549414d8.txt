commit e9abba899f66dd9a18ec7dd3b1a5cb91549414d8
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Thu Oct 3 11:45:49 2019 -0700

    feat(ui): Add request join modal (#14810)

diff --git a/src/sentry/static/sentry/app/components/narrowLayout.jsx b/src/sentry/static/sentry/app/components/narrowLayout.jsx
index 9a11ed3daf..b26ebb4e08 100644
--- a/src/sentry/static/sentry/app/components/narrowLayout.jsx
+++ b/src/sentry/static/sentry/app/components/narrowLayout.jsx
@@ -9,6 +9,7 @@ import styled from 'react-emotion';
 class NarrowLayout extends React.Component {
   static propTypes = {
     showLogout: PropTypes.bool,
+    maxWidth: PropTypes.string,
   };
 
   componentWillMount() {
@@ -29,7 +30,7 @@ class NarrowLayout extends React.Component {
     return (
       <div className="app">
         <div className="pattern-bg" />
-        <div className="container">
+        <div className="container" style={{maxWidth: this.props.maxWidth}}>
           <div className="box box-modal">
             <div className="box-header">
               <a href="/">
diff --git a/src/sentry/static/sentry/app/icons/icon-megaphone.svg b/src/sentry/static/sentry/app/icons/icon-megaphone.svg
new file mode 100644
index 0000000000..f2683c04ff
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-megaphone.svg
@@ -0,0 +1,17 @@
+<svg width="37" height="31" viewBox="0 0 37 31" fill="none" xmlns="http://www.w3.org/2000/svg">
+<g clip-path="url(#clip0)">
+<rect width="36" height="31" transform="translate(0.262695)" fill="white"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M25.0029 9.9302C24.5547 8.25773 22.8356 7.26521 21.1631 7.71335L20.6455 5.78149C23.3849 5.04747 26.2007 6.67316 26.9347 9.41256C27.6687 12.152 26.043 14.9677 23.3036 15.7018L22.786 13.7699C24.4585 13.3218 25.451 11.6027 25.0029 9.9302Z" fill="#302839"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M2.52864 15.9521C2.67312 16.4913 3.22735 16.8113 3.76654 16.6668L4.28418 18.5986C2.67805 19.029 1.02715 18.0758 0.596792 16.4697C0.166431 14.8636 1.11958 13.2127 2.72571 12.7823L3.24334 14.7142C2.70415 14.8587 2.38417 15.4129 2.52864 15.9521Z" fill="#302839"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M9.31756 29.0904L6.875 19.9746L8.80685 19.457L11.1469 28.1903L12.9937 27.6955L12.2281 24.838C12.1606 24.586 12.1555 24.3215 12.2133 24.0672L12.8689 21.1837L12.1651 18.5571L14.097 18.0395L14.8261 20.7607C14.8936 21.0126 14.8987 21.2772 14.8409 21.5315L14.1853 24.415L15.0281 27.5602C15.2574 28.416 14.7495 29.2956 13.8938 29.5248L11.2822 30.2246C10.4264 30.4539 9.54685 29.9461 9.31756 29.0904Z" fill="#302839"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M17.5998 4.07355L13.8132 8.53283C13.6228 8.75713 13.3773 8.92808 13.1009 9.02892L4.48516 12.1717L6.11329 18.2479L15.1461 16.6618C15.4359 16.6109 15.734 16.6362 16.0111 16.7352L21.52 18.7038L23.8831 18.0706L19.9629 3.44036L17.5998 4.07355ZM16.1363 2.70714C16.3596 2.44413 16.6578 2.2554 16.9911 2.1661L19.7371 1.43031C20.6428 1.18762 21.5738 1.72513 21.8165 2.63089L25.8931 17.8448C26.1358 18.7506 25.5983 19.6816 24.6925 19.9243L21.9465 20.6601C21.6133 20.7494 21.2607 20.735 20.9358 20.6189L15.4133 18.6455L6.1867 20.2657C5.32007 20.4178 4.48077 19.8827 4.25304 19.0328L2.4817 12.4221C2.25397 11.5722 2.71327 10.6891 3.53988 10.3876L12.3404 7.1774L16.1363 2.70714Z" fill="#302839"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M28.3174 12.5909C28.5935 12.1126 29.2051 11.9487 29.6834 12.2249L33.3668 14.3515C33.8451 14.6276 34.009 15.2392 33.7328 15.7175C33.4567 16.1958 32.8451 16.3597 32.3668 16.0835L28.6834 13.9569C28.2051 13.6808 28.0412 13.0692 28.3174 12.5909Z" fill="#302839"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M28.8018 8.91246C28.6588 8.37899 28.9754 7.83066 29.5089 7.68771L34.4512 6.36341C34.9847 6.22047 35.533 6.53706 35.676 7.07052C35.8189 7.60399 35.5024 8.15232 34.9689 8.29527L30.0265 9.61957C29.4931 9.76251 28.9447 9.44593 28.8018 8.91246Z" fill="#302839"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M26.5438 5.96826C26.0655 5.69212 25.9016 5.08053 26.1777 4.60224L28.3043 0.91885C28.5805 0.440558 29.1921 0.276683 29.6704 0.552825C30.1487 0.828967 30.3125 1.44056 30.0364 1.91885L27.9098 5.60224C27.6336 6.08053 27.0221 6.2444 26.5438 5.96826Z" fill="#302839"/>
+</g>
+<defs>
+<clipPath id="clip0">
+<rect width="36" height="31" fill="white" transform="translate(0.262695)"/>
+</clipPath>
+</defs>
+</svg>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 0a59d51d5c..6faeb748a2 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -850,6 +850,14 @@ function routes() {
         component={errorHandler(LazyLoad)}
       />
 
+      <Route
+        path="/join-request/:orgId/"
+        componentPromise={() =>
+          import(/* webpackChunkName: "OrganizationJoinRequest" */ 'app/views/organizationJoinRequest')
+        }
+        component={errorHandler(LazyLoad)}
+      />
+
       <Route path="/onboarding/:orgId/" component={errorHandler(OrganizationContext)}>
         <IndexRedirect to="welcome/" />
         <Route
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 2fe64e5a2e..a819ac3cd9 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -30,7 +30,12 @@ import withApi from 'app/utils/withApi';
 import withConfig from 'app/utils/withConfig';
 
 // TODO: Need better way of identifying anonymous pages that don't trigger redirect
-const ALLOWED_ANON_PAGES = [/^\/accept\//, /^\/share\//, /^\/auth\/login\//];
+const ALLOWED_ANON_PAGES = [
+  /^\/accept\//,
+  /^\/share\//,
+  /^\/auth\/login\//,
+  /^\/join-request\//,
+];
 
 function getAlertTypeForProblem(problem) {
   switch (problem.severity) {
diff --git a/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx b/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx
new file mode 100644
index 0000000000..3e86138cb7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationJoinRequest.tsx
@@ -0,0 +1,119 @@
+import React from 'react';
+import styled from 'react-emotion';
+import {Params} from 'react-router/lib/Router';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t, tct} from 'app/locale';
+import EmailField from 'app/views/settings/components/forms/emailField';
+import Form from 'app/views/settings/components/forms/form';
+import InlineSvg from 'app/components/inlineSvg';
+import NarrowLayout from 'app/components/narrowLayout';
+import space from 'app/styles/space';
+
+type Props = {
+  params: Params;
+};
+
+type State = {
+  submitSuccess: boolean | null;
+};
+
+class OrganizationJoinRequest extends React.Component<Props, State> {
+  state: State = {
+    submitSuccess: null,
+  };
+
+  handleSubmitSuccess = () => {
+    this.setState({submitSuccess: true});
+  };
+
+  handleSubmitError() {
+    addErrorMessage(t('Access request failed'));
+  }
+
+  handleCancel = e => {
+    e.preventDefault();
+
+    const {orgId} = this.props.params;
+    window.location.assign(`/auth/login/${orgId}/`);
+  };
+
+  render() {
+    const {orgId} = this.props.params;
+    const {submitSuccess} = this.state;
+
+    if (submitSuccess) {
+      return (
+        <NarrowLayout maxWidth="550px">
+          <SuccessModal>
+            <MegaphoneIcon src="icon-megaphone" size="5em" />
+            <StyledHeader>{t('Request Sent')}</StyledHeader>
+            <StyledText>{t('Your access request has been sent.')}</StyledText>
+            <ReceiveEmailMessage>
+              {tct('You will receive an email when your request is approved.', {orgId})}
+            </ReceiveEmailMessage>
+          </SuccessModal>
+        </NarrowLayout>
+      );
+    }
+
+    return (
+      <NarrowLayout maxWidth="650px">
+        <MegaphoneIcon src="icon-megaphone" size="5em" />
+        <StyledHeader>{t('Request Access')}</StyledHeader>
+        <StyledText>
+          {tct('Ask the admins if you can join the [orgId] organization.', {
+            orgId,
+          })}
+        </StyledText>
+        <Form
+          requireChanges
+          apiEndpoint={`/organizations/${orgId}/join-request/`}
+          apiMethod="POST"
+          submitLabel={t('Request Access')}
+          onSubmitSuccess={this.handleSubmitSuccess}
+          onSubmitError={this.handleSubmitError}
+          onCancel={this.handleCancel}
+        >
+          <StyledEmailField
+            name="email"
+            inline={false}
+            label={t('Email Address')}
+            placeholder="name@example.com"
+          />
+        </Form>
+      </NarrowLayout>
+    );
+  }
+}
+
+const SuccessModal = styled('div')`
+  display: grid;
+  justify-items: center;
+  text-align: center;
+  padding-top: 10px;
+  padding-bottom: ${space(4)};
+`;
+
+const MegaphoneIcon = styled(InlineSvg)`
+  padding-bottom: ${space(3)};
+`;
+
+const StyledHeader = styled('h3')`
+  margin-bottom: ${space(1)};
+`;
+
+const StyledText = styled('p')`
+  margin-bottom: 0;
+`;
+
+const ReceiveEmailMessage = styled(StyledText)`
+  max-width: 250px;
+`;
+
+const StyledEmailField = styled(EmailField)`
+  padding-top: ${space(2)};
+  padding-left: 0;
+`;
+
+export default OrganizationJoinRequest;
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e77d7085a5..1844062c36 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -647,6 +647,11 @@ urlpatterns += patterns(
         GenericReactPageView.as_view(auth_required=False),
         name="sentry-group-shared",
     ),
+    url(
+        r"^join-request/(?P<organization_slug>[\w_-]+)/$",
+        GenericReactPageView.as_view(auth_required=False),
+        name="sentry-join-request",
+    ),
     # Keep named URL for for things using reverse
     url(
         r"^(?P<organization_slug>[\w_-]+)/issues/(?P<short_id>[\w_-]+)/$",
diff --git a/tests/js/spec/views/organizationJoinRequest.spec.jsx b/tests/js/spec/views/organizationJoinRequest.spec.jsx
new file mode 100644
index 0000000000..aecc978e84
--- /dev/null
+++ b/tests/js/spec/views/organizationJoinRequest.spec.jsx
@@ -0,0 +1,92 @@
+import {mount} from 'enzyme';
+import React from 'react';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import OrganizationJoinRequest from 'app/views/organizationJoinRequest';
+
+jest.mock('app/actionCreators/indicator');
+
+describe('OrganizationJoinRequest', function() {
+  const org = TestStubs.Organization({slug: 'test-org'});
+  const endpoint = `/organizations/${org.slug}/join-request/`;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('renders', function() {
+    const wrapper = mount(
+      <OrganizationJoinRequest params={{orgId: org.slug}} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('h3').text()).toBe('Request Access');
+    expect(wrapper.find('EmailField').exists()).toBe(true);
+    expect(wrapper.find('button[aria-label="Request Access"]').exists()).toBe(true);
+  });
+
+  it('submits', async function() {
+    const postMock = MockApiClient.addMockResponse({
+      url: endpoint,
+      method: 'POST',
+    });
+
+    const wrapper = mount(
+      <OrganizationJoinRequest params={{orgId: org.slug}} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('input[id="email"]')
+      .simulate('change', {target: {value: 'email@example.com'}});
+
+    wrapper.find('form').simulate('submit');
+    expect(postMock).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('h3').text()).toBe('Request Sent');
+    expect(wrapper.find('EmailField').exists()).toBe(false);
+    expect(wrapper.find('button[aria-label="Request Access"]').exists()).toBe(false);
+  });
+
+  it('errors', async function() {
+    const postMock = MockApiClient.addMockResponse({
+      url: endpoint,
+      method: 'POST',
+      statusCode: 400,
+    });
+
+    const wrapper = mount(
+      <OrganizationJoinRequest params={{orgId: org.slug}} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('input[id="email"]')
+      .simulate('change', {target: {value: 'email@example.com'}});
+
+    wrapper.find('form').simulate('submit');
+    expect(postMock).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    expect(addErrorMessage).toHaveBeenCalled();
+    expect(wrapper.find('h3').text()).toBe('Request Access');
+    expect(wrapper.find('EmailField').exists()).toBe(true);
+    expect(wrapper.find('button[aria-label="Request Access"]').exists()).toBe(true);
+  });
+
+  it('cancels', function() {
+    const spy = jest.spyOn(window.location, 'assign').mockImplementation(() => {});
+    const wrapper = mount(
+      <OrganizationJoinRequest params={{orgId: org.slug}} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.find('button[aria-label="Cancel"]').simulate('click');
+    expect(spy).toHaveBeenCalledWith(`/auth/login/${org.slug}/`);
+  });
+});
