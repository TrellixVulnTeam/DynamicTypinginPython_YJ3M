commit d417b44292ec026fc83e23cb8b171ec803fd03f7
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jul 1 14:36:39 2019 -0700

    feat(events-v2): Mark events v1 behavior as legacy (#13865)
    
    Rename v1 -> legacy, v2 -> v1, update endpoints to use v2 functions

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index f6e6eeb979..fbc2159167 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -35,47 +35,7 @@ class Direction(Enum):
 
 
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
-
-    def get_snuba_query_args(self, request, organization):
-        params = self.get_filter_params(request, organization)
-
-        group_ids = request.GET.getlist('group')
-        if group_ids:
-            try:
-                group_ids = set(map(int, filter(None, group_ids)))
-            except ValueError:
-                raise OrganizationEventsError('Invalid group parameter. Values must be numbers')
-
-            projects = Project.objects.filter(
-                organization=organization,
-                group__id__in=group_ids,
-            ).distinct()
-            if any(p for p in projects if not request.access.has_project_access(p)):
-                raise PermissionDenied
-            params['issue.id'] = list(group_ids)
-            params['project_id'] = list(set([p.id for p in projects] + params['project_id']))
-
-        query = request.GET.get('query')
-        try:
-            snuba_args = get_snuba_query_args(query=query, params=params)
-        except InvalidSearchQuery as exc:
-            raise OrganizationEventsError(exc.message)
-
-        # Filter out special aggregates.
-        self._filter_unspecified_special_fields_in_conditions(snuba_args, set())
-
-        # TODO(lb): remove once boolean search is fully functional
-        has_boolean_op_flag = features.has(
-            'organizations:boolean-search',
-            organization,
-            actor=request.user
-        )
-        if snuba_args.pop('has_boolean_terms', False) and not has_boolean_op_flag:
-            raise OrganizationEventsError(
-                'Boolean search operator OR and AND not allowed in this search.')
-        return snuba_args
-
-    def get_snuba_query_args_v2(self, request, organization, params):
+    def get_snuba_query_args(self, request, organization, params):
         query = request.GET.get('query')
         try:
             snuba_args = get_snuba_query_args(query=query, params=params)
@@ -128,6 +88,45 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
                 'Boolean search operator OR and AND not allowed in this search.')
         return snuba_args
 
+    def get_snuba_query_args_legacy(self, request, organization):
+        params = self.get_filter_params(request, organization)
+
+        group_ids = request.GET.getlist('group')
+        if group_ids:
+            try:
+                group_ids = set(map(int, filter(None, group_ids)))
+            except ValueError:
+                raise OrganizationEventsError('Invalid group parameter. Values must be numbers')
+
+            projects = Project.objects.filter(
+                organization=organization,
+                group__id__in=group_ids,
+            ).distinct()
+            if any(p for p in projects if not request.access.has_project_access(p)):
+                raise PermissionDenied
+            params['issue.id'] = list(group_ids)
+            params['project_id'] = list(set([p.id for p in projects] + params['project_id']))
+
+        query = request.GET.get('query')
+        try:
+            snuba_args = get_snuba_query_args(query=query, params=params)
+        except InvalidSearchQuery as exc:
+            raise OrganizationEventsError(exc.message)
+
+        # Filter out special aggregates.
+        self._filter_unspecified_special_fields_in_conditions(snuba_args, set())
+
+        # TODO(lb): remove once boolean search is fully functional
+        has_boolean_op_flag = features.has(
+            'organizations:boolean-search',
+            organization,
+            actor=request.user
+        )
+        if snuba_args.pop('has_boolean_terms', False) and not has_boolean_op_flag:
+            raise OrganizationEventsError(
+                'Boolean search operator OR and AND not allowed in this search.')
+        return snuba_args
+
     def next_event_id(self, *args):
         """
         Returns the next event ID if there is a subsequent event matching the
diff --git a/src/sentry/api/endpoints/organization_event_details.py b/src/sentry/api/endpoints/organization_event_details.py
index 428770f0a6..77192f5870 100644
--- a/src/sentry/api/endpoints/organization_event_details.py
+++ b/src/sentry/api/endpoints/organization_event_details.py
@@ -24,7 +24,7 @@ class OrganizationEventDetailsEndpoint(OrganizationEventsEndpointBase):
 
         try:
             params = self.get_filter_params(request, organization)
-            snuba_args = self.get_snuba_query_args_v2(request, organization, params)
+            snuba_args = self.get_snuba_query_args(request, organization, params)
         except OrganizationEventsError as exc:
             return Response({'detail': exc.message}, status=400)
         except NoProjects:
@@ -61,7 +61,7 @@ class OrganizationEventsLatestOrOldest(OrganizationEventsEndpointBase):
 
         try:
             params = self.get_filter_params(request, organization)
-            snuba_args = self.get_snuba_query_args_v2(request, organization, params)
+            snuba_args = self.get_snuba_query_args(request, organization, params)
         except OrganizationEventsError as exc:
             return Response({'detail': exc.message}, status=400)
         except NoProjects:
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 2e58b28c85..1e43a26935 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -25,57 +25,12 @@ logger = logging.getLogger(__name__)
 class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
 
     def get(self, request, organization):
-        if features.has('organizations:events-v2', organization, actor=request.user):
-            return self.get_v2(request, organization)
+        if not features.has('organizations:events-v2', organization, actor=request.user):
+            return self.get_legacy(request, organization)
 
-        # Check for a direct hit on event ID
-        query = request.GET.get('query', '').strip()
-
-        try:
-            direct_hit_resp = get_direct_hit_response(
-                request,
-                query,
-                self.get_filter_params(request, organization),
-                'api.organization-events'
-            )
-        except (OrganizationEventsError, NoProjects):
-            pass
-        else:
-            if direct_hit_resp:
-                return direct_hit_resp
-
-        full = request.GET.get('full', False)
-        try:
-            snuba_args = self.get_snuba_query_args(request, organization)
-        except OrganizationEventsError as exc:
-            return Response({'detail': exc.message}, status=400)
-        except NoProjects:
-            # return empty result if org doesn't have projects
-            # or user doesn't have access to projects in org
-            data_fn = lambda *args, **kwargs: []
-        else:
-            snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
-            data_fn = partial(
-                # extract 'data' from raw_query result
-                lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
-                selected_columns=snuba_cols,
-                orderby='-timestamp',
-                referrer='api.organization-events',
-                **snuba_args
-            )
-
-        serializer = EventSerializer() if full else SimpleEventSerializer()
-        return self.paginate(
-            request=request,
-            on_results=lambda results: serialize(
-                [SnubaEvent(row) for row in results], request.user, serializer),
-            paginator=GenericOffsetPaginator(data_fn=data_fn)
-        )
-
-    def get_v2(self, request, organization):
         try:
             params = self.get_filter_params(request, organization)
-            snuba_args = self.get_snuba_query_args_v2(request, organization, params)
+            snuba_args = self.get_snuba_query_args(request, organization, params)
             fields = snuba_args.get('selected_columns')
             groupby = snuba_args.get('groupby', [])
 
@@ -129,6 +84,51 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
                 'detail': 'Invalid query.'
             }, status=400)
 
+    def get_legacy(self, request, organization):
+        # Check for a direct hit on event ID
+        query = request.GET.get('query', '').strip()
+
+        try:
+            direct_hit_resp = get_direct_hit_response(
+                request,
+                query,
+                self.get_filter_params(request, organization),
+                'api.organization-events'
+            )
+        except (OrganizationEventsError, NoProjects):
+            pass
+        else:
+            if direct_hit_resp:
+                return direct_hit_resp
+
+        full = request.GET.get('full', False)
+        try:
+            snuba_args = self.get_snuba_query_args_legacy(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+        except NoProjects:
+            # return empty result if org doesn't have projects
+            # or user doesn't have access to projects in org
+            data_fn = lambda *args, **kwargs: []
+        else:
+            snuba_cols = SnubaEvent.minimal_columns if full else SnubaEvent.selected_columns
+            data_fn = partial(
+                # extract 'data' from raw_query result
+                lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
+                selected_columns=snuba_cols,
+                orderby='-timestamp',
+                referrer='api.organization-events',
+                **snuba_args
+            )
+
+        serializer = EventSerializer() if full else SimpleEventSerializer()
+        return self.paginate(
+            request=request,
+            on_results=lambda results: serialize(
+                [SnubaEvent(row) for row in results], request.user, serializer),
+            paginator=GenericOffsetPaginator(data_fn=data_fn)
+        )
+
     def handle_results(self, request, organization, project_ids, results):
         projects = {p['id']: p['slug'] for p in Project.objects.filter(
             organization=organization,
diff --git a/src/sentry/api/endpoints/organization_events_distribution.py b/src/sentry/api/endpoints/organization_events_distribution.py
index 454824e759..de1724d966 100644
--- a/src/sentry/api/endpoints/organization_events_distribution.py
+++ b/src/sentry/api/endpoints/organization_events_distribution.py
@@ -17,7 +17,8 @@ PROJECT_KEY = 'project.name'
 class OrganizationEventsDistributionEndpoint(OrganizationEventsEndpointBase):
     def get(self, request, organization):
         try:
-            snuba_args = self.get_snuba_query_args(request, organization)
+            params = self.get_filter_params(request, organization)
+            snuba_args = self.get_snuba_query_args(request, organization, params)
         except OrganizationEventsError as exc:
             return Response({'detail': exc.message}, status=400)
         except NoProjects:
diff --git a/src/sentry/api/endpoints/organization_events_meta.py b/src/sentry/api/endpoints/organization_events_meta.py
index 8f281f8c2e..a40bf85b51 100644
--- a/src/sentry/api/endpoints/organization_events_meta.py
+++ b/src/sentry/api/endpoints/organization_events_meta.py
@@ -10,7 +10,8 @@ class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
 
     def get(self, request, organization):
         try:
-            snuba_args = self.get_snuba_query_args(request, organization)
+            params = self.get_filter_params(request, organization)
+            snuba_args = self.get_snuba_query_args(request, organization, params)
         except OrganizationEventsError as exc:
             return Response({'detail': exc.message}, status=400)
         except NoProjects:
diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index 358be22663..f77c62bdd6 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -16,7 +16,7 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
 
     def get(self, request, organization):
         try:
-            snuba_args = self.get_snuba_query_args(request, organization)
+            snuba_args = self.get_snuba_query_args_legacy(request, organization)
         except OrganizationEventsError as exc:
             return Response({'detail': exc.message}, status=400)
         except NoProjects:
