commit 7783b5e7e476e55e31656748b2ecdd8ea05f009b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 24 09:54:28 2019 -0700

    feat(ui): Connect edit/delete Incident comments to API [SEN-657] (#13362)
    
    * feat(ui): Connect edit/delete Incident comments to API
    
    * add tests
    
    * fix "insert" -> "replace" ... use splice

diff --git a/src/sentry/static/sentry/app/actionCreators/incident.jsx b/src/sentry/static/sentry/app/actionCreators/incident.jsx
index e25c44b966..3d2ebf116b 100644
--- a/src/sentry/static/sentry/app/actionCreators/incident.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/incident.jsx
@@ -79,13 +79,19 @@ export async function createIncidentNote(api, orgId, incidentId, note) {
 /**
  * Deletes a note for an incident
  */
-export async function deleteIncidentNote(api, incidentId, item) {
+export async function deleteIncidentNote(api, orgId, incidentId, noteId) {
   addLoadingMessage(t('Removing comment...'));
 
   try {
-    // TODO: Implement me
+    const result = await api.requestPromise(
+      `/organizations/${orgId}/incidents/${incidentId}/comments/${noteId}/`,
+      {
+        method: 'DELETE',
+      }
+    );
 
     clearIndicators();
+    return result;
   } catch (err) {
     addErrorMessage(t('Failed to delete comment'));
     throw err;
@@ -95,12 +101,21 @@ export async function deleteIncidentNote(api, incidentId, item) {
 /**
  * Updates a note for an incident
  */
-export async function updateIncidentNote(api, incidentId, item, note) {
+export async function updateIncidentNote(api, orgId, incidentId, noteId, note) {
   addLoadingMessage(t('Updating comment...'));
 
   try {
-    // TODO: Implement me
+    const result = await api.requestPromise(
+      `/organizations/${orgId}/incidents/${incidentId}/comments/${noteId}/`,
+      {
+        method: 'PUT',
+        data: {
+          comment: note.text,
+        },
+      }
+    );
     clearIndicators();
+    return result;
   } catch (err) {
     addErrorMessage(t('Unable to update comment'));
     throw err;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
index 8ad2e75bae..5aa24865ad 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
@@ -49,54 +49,18 @@ class Activity extends React.Component {
     createBusy: PropTypes.bool,
     createErrorJSON: PropTypes.object,
     onCreateNote: PropTypes.func.isRequired,
+    onUpdateNote: PropTypes.func.isRequired,
+    onDeleteNote: PropTypes.func.isRequired,
   };
 
-  state = {
-    updateBusy: false,
-    requestError: false,
-    errorJSON: null,
+  handleUpdateNote = (note, {activity}) => {
+    const {onUpdateNote} = this.props;
+    onUpdateNote(note, activity);
   };
 
-  /**
-   * Note: This is nearly the same logic as `app/views/groupDetails/shared/groupActivity`
-   * This can be abstracted a bit if we create more objects that can have activities
-   */
-  handleCreateNote = async note => {
-    const {onCreateNote} = this.props;
-
-    onCreateNote(note);
-  };
-
-  handleDeleteNote = async item => {
-    const {api, incidentId} = this.props;
-
-    try {
-      await deleteIncidentNote(api, incidentId, item);
-    } catch (error) {
-      // TODO: Optimistic update
-    }
-  };
-
-  handleUpdateNote = async (note, item) => {
-    const {api, incidentId} = this.props;
-
-    this.setState({
-      updateBusy: true,
-    });
-
-    try {
-      await updateIncidentNote(api, incidentId, item, note);
-      this.setState({
-        updateBusy: false,
-      });
-    } catch (error) {
-      this.setState({
-        updateBusy: false,
-        requestError: true,
-        errorJSON: error.responseJSON || makeDefaultErrorJson(),
-      });
-      // TODO: Optimistic update
-    }
+  handleDeleteNote = ({activity}) => {
+    const {onDeleteNote} = this.props;
+    onDeleteNote(activity);
   };
 
   render() {
@@ -109,6 +73,7 @@ class Activity extends React.Component {
       createBusy,
       createError,
       createErrorJSON,
+      onCreateNote,
     } = this.props;
 
     const noteProps = {
@@ -128,7 +93,7 @@ class Activity extends React.Component {
             <NoteInputWithStorage
               storageKey="incidentIdinput"
               itemKey={incidentId}
-              onCreate={this.handleCreateNote}
+              onCreate={onCreateNote}
               busy={createBusy}
               error={createError}
               errorJSON={createErrorJSON}
@@ -177,10 +142,10 @@ class Activity extends React.Component {
                             user={activity.user}
                             modelId={activity.id}
                             text={activity.comment}
+                            activity={activity}
                             authorName={authorName}
                             onDelete={this.handleDeleteNote}
                             onUpdate={this.handleUpdateNote}
-                            busy={this.state.updateBusy}
                             {...noteProps}
                           />
                         </ErrorBoundary>
@@ -291,6 +256,53 @@ class ActivityContainer extends React.Component {
     }
   };
 
+  getIndexAndActivityFromState = activity => {
+    // `index` should probably be found, if not let error hit Sentry
+    const index = this.state.activities.findIndex(({id}) => id === activity.id);
+    return [index, this.state.activities[index]];
+  };
+
+  handleDeleteNote = async activity => {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
+
+    this.setState(state => ({
+      activities: removeFromArrayIndex(state.activities, index),
+    }));
+
+    try {
+      await deleteIncidentNote(api, orgId, incidentId, activity.id);
+    } catch (error) {
+      this.setState(state => ({
+        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
+      }));
+    }
+  };
+
+  handleUpdateNote = async (note, activity) => {
+    const {api, params} = this.props;
+    const {incidentId, orgId} = params;
+
+    const [index, oldActivity] = this.getIndexAndActivityFromState(activity);
+
+    this.setState(state => ({
+      activities: replaceAtArrayIndex(state.activities, index, {
+        ...oldActivity,
+        comment: note.text,
+      }),
+    }));
+
+    try {
+      await updateIncidentNote(api, orgId, incidentId, activity.id, note);
+    } catch (error) {
+      this.setState(state => ({
+        activities: replaceAtArrayIndex(state.activities, index, oldActivity),
+      }));
+    }
+  };
+
   render() {
     const {api, params, ...props} = this.props;
     const {incidentId, orgId} = params;
@@ -304,6 +316,8 @@ class ActivityContainer extends React.Component {
         api={api}
         {...this.state}
         onCreateNote={this.handleCreateNote}
+        onUpdateNote={this.handleUpdateNote}
+        onDeleteNote={this.handleDeleteNote}
         {...props}
       />
     );
@@ -312,6 +326,18 @@ class ActivityContainer extends React.Component {
 
 export default withApi(ActivityContainer);
 
+function removeFromArrayIndex(array, index) {
+  const newArray = [...array];
+  newArray.splice(index, 1);
+  return newArray;
+}
+
+function replaceAtArrayIndex(array, index, obj) {
+  const newArray = [...array];
+  newArray.splice(index, 1, obj);
+  return newArray;
+}
+
 const StyledTimeSince = styled(TimeSince)`
   color: ${p => p.theme.gray2};
   font-size: ${p => p.theme.fontSizeSmall};
diff --git a/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx b/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
index 7487ac3780..21961fedf2 100644
--- a/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/details/activity.spec.jsx
@@ -8,8 +8,17 @@ import changeReactMentionsInput from 'app-test/helpers/changeReactMentionsInput'
 describe('IncidentDetails -> Activity', function() {
   const incident = TestStubs.Incident();
   const {organization, routerContext} = initializeOrg();
+  const activity = TestStubs.IncidentActivity();
+  let activitiesList;
 
-  beforeAll(function() {});
+  beforeAll(function() {
+    activitiesList = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/incidents/${
+        incident.identifier
+      }/activity/`,
+      body: [activity],
+    });
+  });
 
   afterAll(function() {
     MockApiClient.clearMockResponses();
@@ -24,14 +33,34 @@ describe('IncidentDetails -> Activity', function() {
       routerContext
     );
 
-  it.todo('fetches and renders activities');
+  it('fetches and renders activities', async function() {
+    const wrapper = createWrapper();
+
+    expect(activitiesList).toHaveBeenCalled();
+
+    // loading
+    expect(wrapper.find('Placeholder').length).toBeGreaterThan(0);
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('Placeholder')).toHaveLength(0);
+    expect(
+      wrapper
+        .find('NoteBody')
+        .text()
+        .trim()
+    ).toEqual('incident activity comment');
+  });
+
   it('creates a new note', async function() {
-    const createNote = MockApiClient.addMockResponse({
+    const createComment = MockApiClient.addMockResponse({
       url: `/organizations/${organization.slug}/incidents/${
         incident.identifier
       }/comments/`,
       method: 'POST',
       body: TestStubs.IncidentActivity({
+        id: '234',
         comment: 'new incident comment',
       }),
     });
@@ -39,19 +68,156 @@ describe('IncidentDetails -> Activity', function() {
     const wrapper = createWrapper();
 
     changeReactMentionsInput(wrapper, 'new incident comment');
-    // wrapper.find('NoteInput Button[type="submit"]').simulate('click');
     wrapper.find('textarea').simulate('keyDown', {key: 'Enter', ctrlKey: true});
 
     await tick();
-    expect(createNote).toHaveBeenCalledWith(
+    expect(createComment).toHaveBeenCalledWith(
       `/organizations/${organization.slug}/incidents/${incident.identifier}/comments/`,
       expect.objectContaining({data: {comment: 'new incident comment'}})
     );
   });
 
   it.todo('fails to create a new note');
-  it.todo('updates an existing note');
-  it.todo('fails to update an existing note');
-  it.todo('deletes a note');
-  it.todo('fails to delete a note');
+
+  it('updates an existing note', async function() {
+    const newComment = 'edited comment';
+    const updateComment = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/incidents/${
+        incident.identifier
+      }/comments/${activity.id}/`,
+      method: 'PUT',
+      body: {
+        ...activity,
+        comment: newComment,
+      },
+    });
+
+    const wrapper = createWrapper();
+
+    await tick();
+    // unfortunately edit/delete items are hidden until hover (using emotion)
+    // so we can't simulate this in jest?
+    wrapper.find('Activity').prop('onUpdateNote')(
+      {
+        text: newComment,
+      },
+      activity
+    );
+
+    await tick();
+
+    expect(updateComment).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        data: {
+          comment: newComment,
+        },
+      })
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(
+      wrapper
+        .find('NoteBody')
+        .text()
+        .trim()
+    ).toEqual(newComment);
+  });
+
+  it('fails to update an existing note', async function() {
+    const newComment = 'edited comment';
+    const updateComment = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/incidents/${
+        incident.identifier
+      }/comments/${activity.id}/`,
+      method: 'PUT',
+      statusCode: 400,
+    });
+
+    const wrapper = createWrapper();
+
+    await tick();
+    // unfortunately edit/delete items are hidden until hover (using emotion)
+    // so we can't simulate this in jest?
+    wrapper.find('Activity').prop('onUpdateNote')(
+      {
+        text: newComment,
+      },
+      activity
+    );
+
+    await tick();
+
+    expect(updateComment).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    expect(
+      wrapper
+        .find('NoteBody')
+        .text()
+        .trim()
+    ).toEqual('incident activity comment');
+  });
+
+  it('deletes a note', async function() {
+    const deleteComment = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/incidents/${
+        incident.identifier
+      }/comments/${activity.id}/`,
+      method: 'DELETE',
+      body: {},
+    });
+
+    const wrapper = createWrapper();
+
+    await tick();
+    // unfortunately edit/delete items are hidden until hover (using emotion)
+    // so we can't simulate this in jest?
+    wrapper.find('Activity').prop('onDeleteNote')(activity);
+
+    await tick();
+
+    expect(deleteComment).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    expect(wrapper.find('NoteBody')).toHaveLength(0);
+  });
+
+  it('fails to delete a note', async function() {
+    const deleteComment = MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/incidents/${
+        incident.identifier
+      }/comments/${activity.id}/`,
+      method: 'DELETE',
+      statusCode: 400,
+    });
+
+    const wrapper = createWrapper();
+
+    await tick();
+    // unfortunately edit/delete items are hidden until hover (using emotion)
+    // so we can't simulate this in jest?
+    wrapper.find('Activity').prop('onDeleteNote')(activity);
+
+    await tick();
+
+    expect(deleteComment).toHaveBeenCalled();
+
+    await tick();
+    wrapper.update();
+
+    // old note is displayed
+    expect(
+      wrapper
+        .find('NoteBody')
+        .text()
+        .trim()
+    ).toEqual('incident activity comment');
+  });
 });
