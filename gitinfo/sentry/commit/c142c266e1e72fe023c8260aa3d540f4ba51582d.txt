commit c142c266e1e72fe023c8260aa3d540f4ba51582d
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 31 18:36:12 2020 -0700

    feat(newProject): Use withExperiment HoC (#18006)

diff --git a/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
index 81e990ad14..595231c657 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/createProject.jsx
@@ -22,15 +22,16 @@ import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 import withTeams from 'app/utils/withTeams';
 import IssueAlertOptions from 'app/views/projectInstall/issueAlertOptions';
-import {trackAnalyticsEvent, logExperiment} from 'app/utils/analytics';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {IconAdd} from 'app/icons/iconAdd';
+import withExperiment from 'app/utils/withExperiment';
 
 class CreateProject extends React.Component {
   static propTypes = {
     api: PropTypes.object,
     teams: PropTypes.arrayOf(SentryTypes.Team),
     organization: SentryTypes.Organization,
-    hasIssueAlertOptionsEnabled: PropTypes.bool,
+    experimentAssignment: PropTypes.string,
   };
 
   static contextTypes = {
@@ -55,7 +56,7 @@ class CreateProject extends React.Component {
       inFlight: false,
     };
 
-    if (this.props.hasIssueAlertOptionsEnabled) {
+    if (this.issueAlertOptionsEnabled) {
       this.state = {
         ...this.state,
         ...{
@@ -66,47 +67,31 @@ class CreateProject extends React.Component {
   }
 
   componentDidMount() {
-    const {organization} = this.props;
-    const alertDefaultsExperimentVariant =
-      organization.experiments?.AlertDefaultsExperiment;
-    const isInAlertDefaultsExperiment = [
-      '2OptionsV1',
-      '3OptionsV2',
-      'controlV1',
-    ].includes(alertDefaultsExperimentVariant);
-
-    if (isInAlertDefaultsExperiment) {
-      logExperiment({
-        organization,
-        key: 'AlertDefaultsExperiment',
-      });
-    }
+    const {organization, experimentAssignment} = this.props;
 
-    const analyticsEventOptions = {
+    trackAnalyticsEvent({
       eventKey: 'new_project.visited',
       eventName: 'New Project Page Visited',
-      organization_id: parseInt(this.props.organization.id, 10),
-    };
-    if (isInAlertDefaultsExperiment) {
-      analyticsEventOptions.alert_defaults_experiment_variant = alertDefaultsExperimentVariant;
-    }
-    trackAnalyticsEvent(analyticsEventOptions);
+      organization_id: organization.id,
+      alert_defaults_experiment_variant: experimentAssignment,
+    });
+  }
+
+  get issueAlertOptionsEnabled() {
+    return ['2OptionsV1', '3OptionsV2'].includes(this.props.experimentAssignment);
   }
 
-  renderProjectForm = (
-    projectName,
-    team,
-    teams,
-    platform,
-    hasIssueAlertOptionsEnabled,
-    organization,
-    canSubmitForm
-  ) => {
-    const createProjectFormCaptured = (
+  renderProjectForm() {
+    const {organization} = this.props;
+    const {projectName, platform, team} = this.state;
+
+    const teams = this.props.teams.filter(filterTeam => filterTeam.hasAccess);
+
+    const createProjectForm = (
       <CreateProjectForm onSubmit={this.createProject}>
         <div>
           <FormLabel>
-            {hasIssueAlertOptionsEnabled
+            {this.issueAlertOptionsEnabled
               ? t('Project name')
               : t('Give your project a name')}
           </FormLabel>
@@ -125,7 +110,7 @@ class CreateProject extends React.Component {
         </div>
         <div>
           <FormLabel>
-            {hasIssueAlertOptionsEnabled ? t('Team') : t('Assign a Team')}
+            {this.issueAlertOptionsEnabled ? t('Team') : t('Assign a Team')}
           </FormLabel>
           <TeamSelectInput>
             <SelectControl
@@ -160,29 +145,34 @@ class CreateProject extends React.Component {
           <Button
             data-test-id="create-project"
             priority="primary"
-            disabled={!canSubmitForm}
+            disabled={!this.canSubmitForm}
           >
             {t('Create Project')}
           </Button>
         </div>
       </CreateProjectForm>
     );
-    return hasIssueAlertOptionsEnabled ? (
-      <React.Fragment>
-        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>
-        {createProjectFormCaptured}
-      </React.Fragment>
-    ) : (
-      <StickyWrapper>{createProjectFormCaptured}</StickyWrapper>
-    );
-  };
 
-  canSubmitForm(inFlight, team, projectName, dataFragment, hasIssueAlertOptionsEnabled) {
+    if (this.issueAlertOptionsEnabled) {
+      return (
+        <React.Fragment>
+          <PageHeading withMargins>{t('Give your project a name')}</PageHeading>
+          {createProjectForm}
+        </React.Fragment>
+      );
+    }
+
+    return <StickyWrapper>{createProjectForm}</StickyWrapper>;
+  }
+
+  get canSubmitForm() {
+    const {projectName, team, inFlight, dataFragment} = this.state;
+
     return (
       !inFlight &&
       team &&
       projectName !== '' &&
-      (!hasIssueAlertOptionsEnabled ||
+      (!this.issueAlertOptionsEnabled ||
         !dataFragment?.shouldCreateCustomRule ||
         dataFragment?.conditions?.every?.(condition => condition.value))
     );
@@ -190,7 +180,7 @@ class CreateProject extends React.Component {
 
   createProject = async e => {
     e.preventDefault();
-    const {organization, api, hasIssueAlertOptionsEnabled} = this.props;
+    const {organization, api} = this.props;
     const {projectName, platform, team, dataFragment} = this.state;
     const {slug} = organization;
     const {
@@ -201,7 +191,7 @@ class CreateProject extends React.Component {
       actionMatch,
       frequency,
       defaultRules,
-    } = hasIssueAlertOptionsEnabled ? dataFragment : {};
+    } = this.issueAlertOptionsEnabled ? dataFragment : {};
 
     this.setState({inFlight: true});
 
@@ -241,11 +231,9 @@ class CreateProject extends React.Component {
         ruleId = ruleData.id;
       }
       this.trackIssueAlertOptionSelectedEvent(
-        organization,
         projectData,
         defaultRules,
         shouldCreateCustomRule,
-        platform,
         ruleId
       );
 
@@ -274,17 +262,18 @@ class CreateProject extends React.Component {
   };
 
   trackIssueAlertOptionSelectedEvent(
-    organization,
     projectData,
     isDefaultRules,
     shouldCreateCustomRule,
     ruleId
   ) {
+    const {organization} = this.props;
+
     let data = {
       eventKey: 'new_project.alert_rule_selected',
       eventName: 'New Project Alert Rule Selected',
-      organization_id: parseInt(organization.id, 10),
-      project_id: parseInt(projectData.id, 10),
+      organization_id: organization.id,
+      project_id: projectData.id,
       rule_type: isDefaultRules
         ? 'Default'
         : shouldCreateCustomRule
@@ -309,16 +298,8 @@ class CreateProject extends React.Component {
     }));
 
   render() {
-    const {organization, hasIssueAlertOptionsEnabled} = this.props;
-    const {projectName, team, platform, error, inFlight, dataFragment} = this.state;
-    const teams = this.props.teams.filter(filterTeam => filterTeam.hasAccess);
-    const canSubmitForm = this.canSubmitForm(
-      inFlight,
-      team,
-      projectName,
-      dataFragment,
-      hasIssueAlertOptionsEnabled
-    );
+    const {platform, error} = this.state;
+
     return (
       <React.Fragment>
         {error && <Alert type="error">{error}</Alert>}
@@ -332,33 +313,29 @@ class CreateProject extends React.Component {
                for your API server and frontend client.`
             )}
           </HelpText>
-          {hasIssueAlertOptionsEnabled && (
+          {this.issueAlertOptionsEnabled && (
             <PageHeading withMargins>{t('Choose a platform')}</PageHeading>
           )}
           <PlatformPicker platform={platform} setPlatform={this.setPlatform} showOther />
-          {hasIssueAlertOptionsEnabled && (
+          {this.issueAlertOptionsEnabled && (
             <IssueAlertOptions
               onChange={updatedData => {
                 this.setState({dataFragment: updatedData});
               }}
             />
           )}
-          {this.renderProjectForm(
-            projectName,
-            team,
-            teams,
-            platform,
-            hasIssueAlertOptionsEnabled,
-            organization,
-            canSubmitForm
-          )}
+          {this.renderProjectForm()}
         </div>
       </React.Fragment>
     );
   }
 }
 
-export default withApi(withTeams(withOrganization(CreateProject)));
+const CreateProjectWithExperiment = withExperiment(CreateProject, {
+  experiment: 'AlertDefaultsExperiment',
+});
+
+export default withApi(withTeams(withOrganization(CreateProjectWithExperiment)));
 export {CreateProject};
 
 const CreateProjectForm = styled('form')`
diff --git a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
index 95fdd0e07f..44db0d7f38 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/newProject.jsx
@@ -3,29 +3,19 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import CreateProject from 'app/views/projectInstall/createProject';
-import withOrganization from 'app/utils/withOrganization';
 import space from 'app/styles/space';
-import SentryTypes from 'app/sentryTypes';
 
-const NewProject = ({organization}) => (
+const NewProject = () => (
   <Container>
     <div className="container">
       <Content>
         <DocumentTitle title="Sentry" />
-        <CreateProject
-          hasIssueAlertOptionsEnabled={['2OptionsV1', '3OptionsV2'].includes(
-            organization.experiments?.AlertDefaultsExperiment
-          )}
-        />
+        <CreateProject />
       </Content>
     </div>
   </Container>
 );
 
-NewProject.propTypes = {
-  organization: SentryTypes.Organization,
-};
-
 const Container = styled('div')`
   flex: 1;
   background: #fff;
@@ -36,4 +26,4 @@ const Content = styled('div')`
   margin-top: ${space(3)};
 `;
 
-export default withOrganization(NewProject);
+export default NewProject;
diff --git a/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap b/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
index 77e180d7b7..27cf82efa8 100644
--- a/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
+++ b/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
@@ -1,17 +1,16 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`NewProjectPlatform render() should render 1`] = `
-<NewProject
-  organization={
-    Object {
-      "id": "1337",
-      "slug": "testOrg",
-      "teams": Array [
-        Array [
-          "testProject",
-        ],
-      ],
-    }
-  }
-/>
+<Container>
+  <div
+    className="container"
+  >
+    <Content>
+      <SideEffect(DocumentTitle)
+        title="Sentry"
+      />
+      <withApi(withTeams(WithOrganizationMockWrapper)) />
+    </Content>
+  </div>
+</Container>
 `;
diff --git a/tests/js/spec/views/projectInstall/createProject.spec.jsx b/tests/js/spec/views/projectInstall/createProject.spec.jsx
index 2d93dbf4d2..b0cb277e33 100644
--- a/tests/js/spec/views/projectInstall/createProject.spec.jsx
+++ b/tests/js/spec/views/projectInstall/createProject.spec.jsx
@@ -153,7 +153,7 @@ describe('CreateProject', function() {
     beforeEach(() => {
       props = {
         ...baseProps,
-        hasIssueAlertOptionsEnabled: true,
+        experimentAssignment: '2OptionsV1',
       };
       props.organization.teams = [{slug: 'test', id: '1', name: 'test', hasAccess: true}];
       MockApiClient.addMockResponse({
