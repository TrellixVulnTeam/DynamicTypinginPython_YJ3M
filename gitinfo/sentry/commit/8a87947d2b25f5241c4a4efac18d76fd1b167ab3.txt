commit 8a87947d2b25f5241c4a4efac18d76fd1b167ab3
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Nov 27 14:51:26 2018 -0800

    feat(settings): Expose disabled project key settings to members (#10789)

diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
index ea50946137..813bbf251b 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/index.jsx
@@ -115,39 +115,34 @@ const KeyRow = createReactClass({
   render() {
     let {access, data} = this.props;
     let editUrl = recreateRoute(`${data.id}/`, this.props);
+    let controlActive = access.has('project:write') && !this.state.loading;
+
     let controls = [
       <Button key="edit" to={editUrl} size="small">
         {t('Configure')}
       </Button>,
+      <Button
+        key="toggle"
+        size="small"
+        onClick={data.isActive ? this.handleDisable : this.handleEnable}
+        disabled={!controlActive}
+      >
+        {data.isActive ? t('Disable') : t('Enable')}
+      </Button>,
+      <Confirm
+        key="remove"
+        priority="danger"
+        disabled={!controlActive}
+        onConfirm={this.handleRemove}
+        confirmText={t('Remove Key')}
+        message={t(
+          'Are you sure you want to remove this key? This action is irreversible.'
+        )}
+      >
+        <Button size="small" disabled={!controlActive} icon="icon-trash" />
+      </Confirm>,
     ];
 
-    if (access.has('project:write')) {
-      controls.push(
-        <Button
-          key="toggle"
-          size="small"
-          onClick={data.isActive ? this.handleDisable : this.handleEnable}
-          disabled={this.state.loading}
-        >
-          {data.isActive ? t('Disable') : t('Enable')}
-        </Button>
-      );
-      controls.push(
-        <Confirm
-          key="remove"
-          priority="danger"
-          disabled={this.state.loading}
-          onConfirm={this.handleRemove}
-          confirmText={t('Remove Key')}
-          message={t(
-            'Are you sure you want to remove this key? This action is irreversible.'
-          )}
-        >
-          <Button size="small" disabled={this.state.loading} icon="icon-trash" />
-        </Confirm>
-      );
-    }
-
     return (
       <ClientKeyItemPanel disabled={!data.isActive}>
         <PanelHeader hasButtons>
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
index 9af1eabbdc..cf235d0c41 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyDetails.jsx
@@ -168,6 +168,7 @@ const KeyStats = createReactClass({
 class KeyRateLimitsForm extends React.Component {
   static propTypes = {
     data: SentryTypes.ProjectKey.isRequired,
+    disabled: PropTypes.bool,
   };
 
   handleChangeWindow = (onChange, onBlur, currentValueObj, value, e) => {
@@ -189,7 +190,7 @@ class KeyRateLimitsForm extends React.Component {
   };
 
   render() {
-    let {data} = this.props;
+    let {data, disabled} = this.props;
     let {keyId, orgId, projectId} = this.props.params;
     let apiEndpoint = `/projects/${orgId}/${projectId}/keys/${keyId}/`;
 
@@ -226,7 +227,7 @@ class KeyRateLimitsForm extends React.Component {
                   className="rate-limit-group"
                   name="rateLimit"
                   label={t('Rate Limit')}
-                  disabled={!hasFeature}
+                  disabled={disabled || !hasFeature}
                   validate={({id, form, model}) => {
                     let isValid =
                       form &&
@@ -254,7 +255,7 @@ class KeyRateLimitsForm extends React.Component {
                           min={0}
                           value={value && value.count}
                           placeholder={t('Count')}
-                          disabled={!hasFeature}
+                          disabled={disabled || !hasFeature}
                           onChange={this.handleChangeCount.bind(this, onChange, value)}
                           onBlur={this.handleChangeCount.bind(this, onBlur, value)}
                         />
@@ -269,7 +270,7 @@ class KeyRateLimitsForm extends React.Component {
                           value={value && value.window}
                           placeholder={t('Window')}
                           formatLabel={formatRateLimitWindow}
-                          disabled={!hasFeature}
+                          disabled={disabled || !hasFeature}
                           onChange={this.handleChangeWindow.bind(
                             this,
                             onChange,
@@ -337,119 +338,138 @@ const KeySettings = createReactClass({
     });
 
     return (
-      <React.Fragment>
-        <Form
-          saveOnBlur
-          allowUndo
-          apiEndpoint={apiEndpoint}
-          apiMethod="PUT"
-          initialData={data}
-        >
-          <Panel>
-            <PanelHeader>{t('Details')}</PanelHeader>
-
-            <PanelBody>
-              <TextField name="name" label={t('Name')} required={false} />
-
-              <BooleanField
-                name="isActive"
-                label={t('Enabled')}
-                required={false}
-                help={
-                  'Accept events from this key? This may be used to temporarily suspend a key.'
-                }
-              />
-              <Field label={t('Created')}>
-                <div className="controls">
-                  <DateTime date={data.dateCreated} />
-                </div>
-              </Field>
-            </PanelBody>
-          </Panel>
-        </Form>
-
-        <KeyRateLimitsForm params={this.props.params} data={data} />
-
-        <Feature features={['organizations:js-loader']}>
-          <Form saveOnBlur apiEndpoint={apiEndpoint} apiMethod="PUT" initialData={data}>
+      <Access access={['project:write']}>
+        {({hasAccess}) => (
+          <React.Fragment>
+            <Form
+              saveOnBlur
+              allowUndo
+              apiEndpoint={apiEndpoint}
+              apiMethod="PUT"
+              initialData={data}
+            >
+              <Panel>
+                <PanelHeader>{t('Details')}</PanelHeader>
+
+                <PanelBody>
+                  <TextField
+                    name="name"
+                    label={t('Name')}
+                    disabled={!hasAccess}
+                    required={false}
+                  />
+                  <BooleanField
+                    name="isActive"
+                    label={t('Enabled')}
+                    required={false}
+                    disabled={!hasAccess}
+                    help={
+                      'Accept events from this key? This may be used to temporarily suspend a key.'
+                    }
+                  />
+                  <Field label={t('Created')}>
+                    <div className="controls">
+                      <DateTime date={data.dateCreated} />
+                    </div>
+                  </Field>
+                </PanelBody>
+              </Panel>
+            </Form>
+
+            <KeyRateLimitsForm
+              params={this.props.params}
+              data={data}
+              disabled={!hasAccess}
+            />
+
+            <Feature features={['organizations:js-loader']}>
+              <Form
+                saveOnBlur
+                apiEndpoint={apiEndpoint}
+                apiMethod="PUT"
+                initialData={data}
+              >
+                <Panel>
+                  <PanelHeader>{t('CDN')}</PanelHeader>
+                  <PanelBody>
+                    <Field
+                      help={tct(
+                        'Copy this script into your website to setup our JavaScript SDK without any additional configuration. [link]',
+                        {
+                          link: (
+                            <ExternalLink href="https://docs.sentry.io/platforms/javascript/browser/">
+                              What does the script provide?
+                            </ExternalLink>
+                          ),
+                        }
+                      )}
+                      inline={false}
+                      flexibleControlStateSize
+                    >
+                      <TextCopyInput
+                      >{`<script src='${loaderLink}' crossorigin="anonymous"></script>`}</TextCopyInput>
+                    </Field>
+                    <SelectField
+                      name="browserSdkVersion"
+                      choices={data.browserSdk ? data.browserSdk.choices : []}
+                      placeholder={t('4.x')}
+                      allowClear={false}
+                      enabled={!hasAccess}
+                      help={t('Select the version of the SDK that should be loaded')}
+                    />
+                  </PanelBody>
+                </Panel>
+              </Form>
+            </Feature>
+
             <Panel>
-              <PanelHeader>{t('CDN')}</PanelHeader>
+              <PanelHeader>{t('Credentials')}</PanelHeader>
               <PanelBody>
-                <Field
-                  help={tct(
-                    'Copy this script into your website to setup our JavaScript SDK without any additional configuration. [link]',
-                    {
-                      link: (
-                        <ExternalLink href="https://docs.sentry.io/platforms/javascript/browser/">
-                          What does the script provide?
-                        </ExternalLink>
-                      ),
-                    }
+                <PanelAlert type="info" icon="icon-circle-exclamation">
+                  {t(
+                    'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
                   )}
-                  inline={false}
-                  flexibleControlStateSize
-                >
-                  <TextCopyInput
-                  >{`<script src='${loaderLink}' crossorigin="anonymous"></script>`}</TextCopyInput>
-                </Field>
-                <SelectField
-                  name="browserSdkVersion"
-                  choices={data.browserSdk ? data.browserSdk.choices : []}
-                  placeholder={t('4.x')}
-                  allowClear={false}
-                  help={t('Select the version of the SDK that should be loaded')}
+                </PanelAlert>
+
+                <ProjectKeyCredentials
+                  projectId={`${data.projectId}`}
+                  data={data}
+                  showPublicKey
+                  showSecretKey
+                  showProjectId
                 />
               </PanelBody>
             </Panel>
-          </Form>
-        </Feature>
 
-        <Panel>
-          <PanelHeader>{t('Credentials')}</PanelHeader>
-          <PanelBody>
-            <PanelAlert type="info" icon="icon-circle-exclamation">
-              {t(
-                'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
-              )}
-            </PanelAlert>
-
-            <ProjectKeyCredentials
-              projectId={`${data.projectId}`}
-              data={data}
-              showPublicKey
-              showSecretKey
-              showProjectId
-            />
-          </PanelBody>
-        </Panel>
-
-        <Access access={['project:admin']}>
-          <Panel>
-            <PanelHeader>{t('Revoke Key')}</PanelHeader>
-            <PanelBody>
-              <Field
-                label={t('Revoke Key')}
-                help={t(
-                  'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
-                )}
-              >
-                <div>
-                  <Confirm
-                    priority="danger"
-                    message={t(
-                      'Are you sure you want to revoke this key? This will immediately remove and suspend the credentials.'
+            <Access access={['project:admin']}>
+              <Panel>
+                <PanelHeader>{t('Revoke Key')}</PanelHeader>
+                <PanelBody>
+                  <Field
+                    label={t('Revoke Key')}
+                    help={t(
+                      'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
                     )}
-                    onConfirm={this.handleRemove}
-                    confirmText={t('Revoke Key')}
                   >
-                    <Button priority="danger">{t('Revoke Key')}</Button>
-                  </Confirm>
-                </div>
-              </Field>
-            </PanelBody>
-          </Panel>
-        </Access>
-      </React.Fragment>
+                    <div>
+                      <Confirm
+                        priority="danger"
+                        message={t(
+                          'Are you sure you want to revoke this key? This will immediately remove and suspend the credentials.'
+                        )}
+                        onConfirm={this.handleRemove}
+                        confirmText={t('Revoke Key')}
+                      >
+                        <Button priority="danger">{t('Revoke Key')}</Button>
+                      </Confirm>
+                    </div>
+                  </Field>
+                </PanelBody>
+              </Panel>
+            </Access>
+          </React.Fragment>
+        )}
+      </Access>
     );
   },
 });
