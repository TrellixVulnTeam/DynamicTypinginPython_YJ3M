commit d0ba8afad56a47d77b066e88e5a0cb06ac3efd49
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Wed Aug 17 14:19:09 2016 -0700

    Breadcrumbs filter (#3920)
    
    /cc @getsentry/team

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index ac5f588f2c..e37a242f00 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -1,9 +1,8 @@
 import React from 'react';
-
 import GroupEventDataSection from '../eventDataSection';
 import PropTypes from '../../../proptypes';
-
 import Breadcrumb from './breadcrumbs/breadcrumb';
+import {t} from '../../../locale';
 
 function Collapsed(props) {
   return (
@@ -52,7 +51,8 @@ const BreadcrumbsInterface = React.createClass({
 
   getInitialState() {
     return {
-      collapsed: true
+      collapsed: true,
+      queryValue: ''
     };
   },
 
@@ -70,6 +70,14 @@ const BreadcrumbsInterface = React.createClass({
     }).reverse(); // un-reverse rendered result
   },
 
+  renderNoMatch() {
+    return (
+      <li className="crumb-empty">
+        <p><span className="icon icon-exclamation" /> {t('Sorry, no breadcrumbs match your search query.')}</p>
+      </li>
+    );
+  },
+
   getVirtualCrumb() {
     let evt = this.props.event;
     let crumb;
@@ -87,7 +95,7 @@ const BreadcrumbsInterface = React.createClass({
         }
       };
     } else if (evt.message) {
-      let levelTag = (evt.tags || []).find(t => t.key === 'level');
+      let levelTag = (evt.tags || []).find(tag => tag.key === 'level');
       let level = levelTag && levelTag.value;
       crumb = {
         type: 'message',
@@ -107,6 +115,50 @@ const BreadcrumbsInterface = React.createClass({
     return crumb;
   },
 
+  setQuery(evt) {
+    this.setState({
+      queryValue: evt.target.value
+    });
+  },
+
+  filterCrumbs(crumbs, queryValue) {
+    return crumbs.filter(item => {
+      // return true if any of category, message, or level contain queryValue
+      return !!['category', 'message', 'level'].find(prop => {
+        let propValue = (item[prop] || '').toLowerCase();
+        return propValue.includes(queryValue);
+      });
+    });
+  },
+
+  clearSearch() {
+    this.setState({
+      queryValue: '',
+      collapsed: true
+    });
+  },
+
+  getSearchField() {
+    return (
+      <div className="breadcrumb-filter">
+        <input type="text" className="search-input form-control"
+          placeholder={t('Search breadcrumbs...')}
+          autoComplete="off"
+          value={this.state.queryValue}
+          onChange={this.setQuery}
+          />
+        <span className="icon-search" />
+        {this.state.queryValue &&
+          <div>
+            <a className="search-clear-form" onClick={this.clearSearch}>
+              <span className="icon-circle-cross" />
+            </a>
+          </div>
+        }
+      </div>
+    );
+  },
+
   render() {
     let group = this.props.group;
     let evt = this.props.event;
@@ -117,6 +169,7 @@ const BreadcrumbsInterface = React.createClass({
         <h3>
           <strong>{'Breadcrumbs'}</strong>
         </h3>
+        {this.getSearchField()}
       </div>
     );
 
@@ -129,15 +182,27 @@ const BreadcrumbsInterface = React.createClass({
       all = all.slice(0).concat([virtualCrumb]);
     }
 
+    // filter breadcrumbs on text input
+    let {queryValue} = this.state;
+    let filtered = queryValue
+      ? this.filterCrumbs(all, queryValue.toLowerCase())
+        : all;
+
     // cap max number of breadcrumbs to show
-    let crumbs = all;
     const MAX = BreadcrumbsInterface.MAX_CRUMBS_WHEN_COLLAPSED;
-    if (this.state.collapsed && crumbs.length > MAX) {
-      crumbs = all.slice(-MAX);
+    let crumbs = filtered;
+    if (this.state.collapsed && filtered.length > MAX) {
+      crumbs = filtered.slice(-MAX);
     }
 
-    let numCollapsed = all.length - crumbs.length;
+    let numCollapsed = filtered.length - crumbs.length;
 
+    let crumbContent;
+    if (crumbs.length) {
+      crumbContent = this.renderBreadcrumbs(crumbs);
+    } else if (all.length) {
+      crumbContent = this.renderNoMatch();
+    }
     return (
       <GroupEventDataSection
           className="breadcrumb-box"
@@ -148,7 +213,7 @@ const BreadcrumbsInterface = React.createClass({
           wrapTitle={false}>
         <ul className="crumbs">
           {numCollapsed > 0 && <Collapsed onClick={this.onCollapseToggle} count={numCollapsed}/>}
-          {this.renderBreadcrumbs(crumbs)}
+          {crumbContent}
         </ul>
       </GroupEventDataSection>
     );
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 921ebd47a9..d8c71cffe6 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1847,6 +1847,38 @@ pre.val, span.val {
   .box-content {
     padding: 0 !important;
   }
+
+  h3 {
+    display: inline;
+    float: left;
+  }
+
+  .breadcrumb-filter {
+    float: right;
+    position: relative;
+
+    input {
+      width:  100%;
+      height: 28px;
+      display: inline;
+      padding: 8px 26px;
+    }
+
+    .icon-search {
+      position: absolute;
+      color: #9ba5b5;
+      font-size: 14px;
+      top: 7px;
+      left: 8px;
+    }
+
+    .search-clear-form {
+      position: absolute;
+      color: #c7cdd5;
+      top: 6px;
+      right: 6px;
+    }
+  }
 }
 
 ul.crumbs {
@@ -2224,6 +2256,21 @@ ul.crumbs {
       }
     }
 
+    &.crumb-empty {
+      text-align: center;
+      padding: 14px 0;
+
+      &:before {
+        display: none;
+      }
+
+      .icon {
+        opacity: .4;
+        margin-right: 4px;
+        vertical-align: text-bottom;
+      }
+    }
+
     &.crumb-last {
       &:before {
          bottom: auto;
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
new file mode 100644
index 0000000000..5be7c48022
--- /dev/null
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
@@ -0,0 +1,72 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs';
+import Breadcrumb from 'app/components/events/interfaces/breadcrumbs/breadcrumb';
+
+describe('BreadcrumbsInterface', function() {
+  const PROPS = {
+    group: {
+      id: '1'
+    },
+    event: {
+      entries: [],
+      id: '4'
+    },
+    type: 'blah',
+    data: {
+      values: [{message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'hey', category: 'error', level: 'info'},
+               {message: 'hello', category: 'default', level: 'extreme'},
+               {message: 'bye', category: 'default', level: 'extreme'},
+               {message: 'ok', category: 'error', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'},
+               {message: 'sup', category: 'default', level: 'extreme'}]
+    }
+  };
+  describe('filterCrumbs', function() {
+    it('should filter crumbs based on crumb message', function() {
+      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS}/>).instance();
+      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).to.have.length(0);
+      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'up')).to.have.length(13);
+    });
+
+    it('should filter crumbs based on crumb level', function() {
+      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS}/>).instance();
+      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).to.have.length(0);
+      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'ext')).to.have.length(16);
+    });
+
+    it('should filter crumbs based on crumb category', function() {
+      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS}/>).instance();
+      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).to.have.length(0);
+      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'error')).to.have.length(2);
+    });
+
+  });
+
+
+  describe('render', function() {
+    it('should display the correct number of crumbs with no filter', function() {
+      const wrapper = shallow(<BreadcrumbsInterface {...PROPS}/>);
+      expect(wrapper.find(Breadcrumb)).to.have.length(10);
+    });
+
+    it('should display the correct number of crumbs with a filter', function() {
+      const wrapper = shallow(<BreadcrumbsInterface {...PROPS}/>);
+      wrapper.setState({queryValue: 'sup'});
+      expect(wrapper.find(Breadcrumb)).to.have.length(10);
+      wrapper.setState({queryValue: 'sup', collapsed: false});
+      expect(wrapper.find(Breadcrumb)).to.have.length(13);
+    });
+  });
+});
