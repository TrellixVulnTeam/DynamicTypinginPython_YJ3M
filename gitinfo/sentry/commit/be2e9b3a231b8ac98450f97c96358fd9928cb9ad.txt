commit be2e9b3a231b8ac98450f97c96358fd9928cb9ad
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu May 7 12:59:52 2020 +0200

    feat(ownership): Added support for tag ownership rules (#18459)

diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index 14b14d83ec..7d9ee386d3 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -20,9 +20,11 @@ line = _ (comment / rule / empty) newline?
 
 rule = _ matcher owners
 
-matcher      = _ matcher_tag identifier
+matcher      = _ matcher_tag any_identifier
 matcher_tag  = (matcher_type sep)?
-matcher_type = "url" / "path"
+matcher_type = "url" / "path" / event_tag
+
+event_tag   = ~r"tags.[^:]+"
 
 owners       = _ owner+
 owner        = _ team_prefix identifier
@@ -31,7 +33,9 @@ team_prefix  = "#"?
 comment = ~r"#[^\r\n]*"
 
 # TODO: make more specific
+any_identifier = quoted_identifier / identifier
 identifier = ~r"\S+"
+quoted_identifier = ~r'"([^"\\]*(?:\\.[^"\\]*)*)"'
 
 sep     = ":"
 space   = " "
@@ -83,7 +87,13 @@ class Matcher(namedtuple("Matcher", "type pattern")):
         return cls(data["type"], data["pattern"])
 
     def test(self, data):
-        return getattr(self, "test_%s" % self.type)(data)
+        if self.type == "url":
+            return self.test_url(data)
+        elif self.type == "path":
+            return self.test_path(data)
+        elif self.type.startswith("tags."):
+            return self.test_tag(data)
+        return False
 
     def test_url(self, data):
         try:
@@ -104,6 +114,13 @@ class Matcher(namedtuple("Matcher", "type pattern")):
 
         return False
 
+    def test_tag(self, data):
+        tag = self.type[5:]
+        for k, v in data.get("tags"):
+            if k == tag and glob_match(v, self.pattern):
+                return True
+        return False
+
 
 class Owner(namedtuple("Owner", "type identifier")):
     """
@@ -167,9 +184,15 @@ class OwnershipVisitor(NodeVisitor):
     def visit_team_prefix(self, node, children):
         return bool(children)
 
+    def visit_any_identifier(self, node, children):
+        return children[0]
+
     def visit_identifier(self, node, children):
         return node.text
 
+    def visit_quoted_identifier(self, node, children):
+        return node.text[1:-1].encode("ascii", "backslashreplace").decode("unicode-escape")
+
     def generic_visit(self, node, children):
         return children or node
 
diff --git a/tests/sentry/ownership/test_grammar.py b/tests/sentry/ownership/test_grammar.py
index b59e065e35..77be08914b 100644
--- a/tests/sentry/ownership/test_grammar.py
+++ b/tests/sentry/ownership/test_grammar.py
@@ -10,6 +10,9 @@ fixture_data = """
 
   url:http://google.com/* #backend
 path:src/sentry/*       david@sentry.io
+
+tags.foo:bar             tagperson@sentry.io
+tags.foo:"bar baz"       tagperson@sentry.io
 """
 
 
@@ -18,6 +21,8 @@ def test_parse_rules():
         Rule(Matcher("path", "*.js"), [Owner("team", "frontend"), Owner("user", "m@robenolt.com")]),
         Rule(Matcher("url", "http://google.com/*"), [Owner("team", "backend")]),
         Rule(Matcher("path", "src/sentry/*"), [Owner("user", "david@sentry.io")]),
+        Rule(Matcher("tags.foo", "bar"), [Owner("user", "tagperson@sentry.io")]),
+        Rule(Matcher("tags.foo", "bar baz"), [Owner("user", "tagperson@sentry.io")]),
     ]
 
 
@@ -102,3 +107,13 @@ def test_matcher_test_stacktrace():
     assert not Matcher("path", "*.jsx").test(data)
     assert not Matcher("url", "*.py").test(data)
     assert not Matcher("path", "*.py").test({})
+
+
+def test_matcher_test_tags():
+    data = {
+        "tags": [["foo", "foo_value"], ["bar", "barval"]],
+    }
+
+    assert Matcher("tags.foo", "foo_value").test(data)
+    assert Matcher("tags.bar", "barval").test(data)
+    assert not Matcher("tags.barz", "barval").test(data)
