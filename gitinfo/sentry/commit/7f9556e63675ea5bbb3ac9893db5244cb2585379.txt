commit 7f9556e63675ea5bbb3ac9893db5244cb2585379
Author: William Mak <william@wmak.io>
Date:   Mon Jun 15 14:05:33 2020 -0400

    fix(discover): Add support for negated aggregates (#19302)
    
    * fix(discover): Add support for negated aggregates
    
    - This allows aggregates to be negated, this also flips `<` to `>=` and
      `>` to `<=` and vice versa

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 11e7568b1e..da618ea2be 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -32,6 +32,13 @@ from sentry.utils.compat import zip
 from sentry.utils.compat import filter
 
 WILDCARD_CHARS = re.compile(r"[\*]")
+NEGATION_MAP = {
+    "=": "!=",
+    "<": ">=",
+    "<=": ">",
+    ">": "<=",
+    ">=": "<",
+}
 
 
 def translate(pat):
@@ -120,9 +127,9 @@ specific_time_filter = search_key sep (date_format / alt_date_format)
 # Numeric comparison filter
 numeric_filter       = search_key sep operator? numeric_value
 # Aggregate numeric filter
-aggregate_filter          = aggregate_key sep operator? (numeric_value / duration_format)
-aggregate_date_filter     = aggregate_key sep operator? (date_format / alt_date_format)
-aggregate_rel_date_filter = aggregate_key sep operator? rel_date_format
+aggregate_filter          = negation? aggregate_key sep operator? (numeric_value / duration_format)
+aggregate_date_filter     = negation? aggregate_key sep operator? (date_format / alt_date_format)
+aggregate_rel_date_filter = negation? aggregate_key sep operator? rel_date_format
 
 # has filter for not null type checks
 has_filter           = negation? "has" sep (search_key / search_value)
@@ -396,9 +403,15 @@ class SearchVisitor(NodeVisitor):
             )
             return self._handle_basic_filter(search_key, "=", search_value)
 
-    def visit_aggregate_filter(self, node, children):
-        (search_key, _, operator, search_value) = children
+    def handle_negation(self, negation, operator):
         operator = operator[0] if not isinstance(operator, Node) else "="
+        if self.is_negated(negation):
+            return NEGATION_MAP.get(operator, "!=")
+        return operator
+
+    def visit_aggregate_filter(self, node, children):
+        (negation, search_key, _, operator, search_value) = children
+        operator = self.handle_negation(negation, operator)
         search_value = search_value[0] if not isinstance(search_value, RegexNode) else search_value
 
         try:
@@ -420,9 +433,9 @@ class SearchVisitor(NodeVisitor):
         return AggregateFilter(search_key, operator, SearchValue(aggregate_value))
 
     def visit_aggregate_date_filter(self, node, children):
-        (search_key, _, operator, search_value) = children
+        (negation, search_key, _, operator, search_value) = children
         search_value = search_value[0]
-        operator = operator[0] if not isinstance(operator, Node) else "="
+        operator = self.handle_negation(negation, operator)
         is_date_aggregate = any(key in search_key.name for key in self.date_keys)
         if is_date_aggregate:
             try:
@@ -435,8 +448,8 @@ class SearchVisitor(NodeVisitor):
             return AggregateFilter(search_key, "=", SearchValue(search_value))
 
     def visit_aggregate_rel_date_filter(self, node, children):
-        (search_key, _, operator, search_value) = children
-        operator = operator[0] if not isinstance(operator, Node) else "="
+        (negation, search_key, _, operator, search_value) = children
+        operator = self.handle_negation(negation, operator)
         is_date_aggregate = any(key in search_key.name for key in self.date_keys)
         if is_date_aggregate:
             try:
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 34189d654e..186584903e 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1312,6 +1312,22 @@ class GetSnubaQueryArgsTest(TestCase):
         assert [[["isNull", ["user.ip"]], "=", 1], ["user.ip", "!=", "123"]] == conditions[2]
         assert [[["isNull", ["user.id"]], "=", 1], ["user.id", "!=", "123"]] == conditions[3]
 
+    def test_function_negation(self):
+        result = get_filter("!p95():5s")
+        assert result.having == [["p95", "!=", 5000.0]]
+
+        result = get_filter("!p95():>5s")
+        assert result.having == [["p95", "<=", 5000.0]]
+
+        result = get_filter("!p95():>=5s")
+        assert result.having == [["p95", "<", 5000.0]]
+
+        result = get_filter("!p95():<5s")
+        assert result.having == [["p95", ">=", 5000.0]]
+
+        result = get_filter("!p95():<=5s")
+        assert result.having == [["p95", ">", 5000.0]]
+
     def test_function_with_default_arguments(self):
         result = get_filter("epm():>100", {"start": before_now(minutes=5), "end": before_now()})
         assert result.having == [["epm", ">", 100]]
@@ -1336,6 +1352,22 @@ class GetSnubaQueryArgsTest(TestCase):
         result = get_filter("last_seen():2020-04-01T19:34:52+00:00")
         assert result.having == [["last_seen", "=", 1585769692]]
 
+    def test_function_with_date_negation(self):
+        result = get_filter("!last_seen():2020-04-01T19:34:52+00:00")
+        assert result.having == [["last_seen", "!=", 1585769692]]
+
+        result = get_filter("!last_seen():>2020-04-01T19:34:52+00:00")
+        assert result.having == [["last_seen", "<=", 1585769692]]
+
+        result = get_filter("!last_seen():>=2020-04-01T19:34:52+00:00")
+        assert result.having == [["last_seen", "<", 1585769692]]
+
+        result = get_filter("!last_seen():<2020-04-01T19:34:52+00:00")
+        assert result.having == [["last_seen", ">=", 1585769692]]
+
+        result = get_filter("!last_seen():<=2020-04-01T19:34:52+00:00")
+        assert result.having == [["last_seen", ">", 1585769692]]
+
     @pytest.mark.xfail(reason="this breaks issue search so needs to be redone")
     def test_trace_id(self):
         result = get_filter("trace:{}".format("a0fa8803753e40fd8124b21eeb2986b5"))
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 0b54f54889..32286921d4 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -1871,6 +1871,44 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
             assert len(data) == 1
             assert data[0]["count_id"] == 0
 
+    def test_aggregate_negation(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+        data = load_data("transaction")
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(data, project_id=project.id)
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["event.type", "p99()"],
+                    "query": "event.type:transaction p99():5s",
+                    "statsPeriod": "24h",
+                },
+            )
+            assert response.status_code == 200, response.content
+            data = response.data["data"]
+            assert len(data) == 1
+
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["event.type", "p99()"],
+                    "query": "event.type:transaction !p99():5s",
+                    "statsPeriod": "24h",
+                },
+            )
+            assert response.status_code == 200, response.content
+            data = response.data["data"]
+            assert len(data) == 0
+
     def test_all_aggregates_in_columns(self):
         self.login_as(user=self.user)
 
