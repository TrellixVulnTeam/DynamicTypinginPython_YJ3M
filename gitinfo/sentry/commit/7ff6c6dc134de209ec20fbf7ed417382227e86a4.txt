commit 7ff6c6dc134de209ec20fbf7ed417382227e86a4
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Jan 29 13:32:56 2019 -0800

    feat(releases): Filter release issues by global selections (#11730)
    
    Filters all / new issues in this release by global selections.
    Introduces a GlobalSelectionLink component that preserves global
    selections on navigation.

diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index fb79131192..a5a903612c 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -78,6 +78,7 @@ class CompactIssueHeader extends React.Component {
     if (data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned') {
       styles = {color: '#57be8c'};
     }
+
     return (
       <React.Fragment>
         <Flex align="center">
diff --git a/src/sentry/static/sentry/app/components/globalSelectionLink.jsx b/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
new file mode 100644
index 0000000000..55e49cbcb1
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/globalSelectionLink.jsx
@@ -0,0 +1,51 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {Link as RouterLink} from 'react-router';
+
+import {extractSelectionParameters} from 'app/components/organizations/globalSelectionHeader/utils';
+
+/**
+ * A modified link used for navigating between organization level pages that
+ * will keep the global selection values (projects, environments, time) in the
+ * querystring when navigating if it's present
+ *
+ * Falls back to <a> if there is no router present.
+ */
+export default class GlobalSelectionLink extends React.Component {
+  static propTypes = {
+    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+  };
+
+  render() {
+    const {location} = this.context;
+
+    const query = extractSelectionParameters(location.query);
+
+    if (location) {
+      const hasQuery = Object.keys(query).length > 0;
+
+      let {to} = this.props;
+
+      if (hasQuery) {
+        if (typeof to === 'string') {
+          to = {pathname: to, query};
+        }
+      }
+
+      const routerProps = to ? {...this.props, to} : {...this.props};
+
+      return <RouterLink {...routerProps}>{this.props.children}</RouterLink>;
+    } else {
+      let {to, ...props} = this.props;
+      return (
+        <a {...props} href={to}>
+          {this.props.children}
+        </a>
+      );
+    }
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
index b47ce8a857..8202a32416 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/index.jsx
@@ -1,5 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import {pick} from 'lodash';
 
 import SentryTypes from 'app/sentryTypes';
 import Feature from 'app/components/acl/feature';
@@ -8,6 +9,7 @@ import Alert from 'app/components/alert';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import {URL_PARAM} from 'app/components/organizations/globalSelectionHeader/constants';
 import withOrganization from 'app/utils/withOrganization';
 import AsyncView from 'app/views/asyncView';
 import {PageContent} from 'app/styles/organization';
@@ -34,10 +36,7 @@ class OrganizationReleaseDetailsContainer extends React.Component {
         organization={this.props.organization}
         renderDisabled={this.renderNoAccess}
       >
-        <GlobalSelectionHeader
-          organization={this.props.organization}
-          hasCustomRouting={true}
-        />
+        <GlobalSelectionHeader organization={this.props.organization} />
         <OrganizationReleaseDetails {...this.props} />
       </Feature>
     );
@@ -72,8 +71,10 @@ class OrganizationReleaseDetails extends AsyncView {
   }
 
   renderBody() {
-    const release = this.state.release;
-    const {orgId} = this.props.params;
+    const {location, params: {orgId}} = this.props;
+    const {release} = this.state;
+
+    const query = pick(location.query, Object.values(URL_PARAM));
 
     if (this.state.loading) return <LoadingIndicator />;
     if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
@@ -83,6 +84,7 @@ class OrganizationReleaseDetails extends AsyncView {
         <ReleaseHeader release={release} orgId={orgId} />
         {React.cloneElement(this.props.children, {
           release,
+          query,
         })}
       </PageContent>
     );
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx
index 4ae366a65f..171c6652a3 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseAllEvents.jsx
@@ -7,7 +7,7 @@ import GroupList from 'app/components/groupList';
 import {t} from 'app/locale';
 
 export default class ReleaseAllEvents extends React.Component {
-  static contextTypes = {
+  static propTypes = {
     release: SentryTypes.Release,
   };
 
@@ -19,7 +19,7 @@ export default class ReleaseAllEvents extends React.Component {
           <Link
             to={{
               pathname: `/organizations/${orgId}/issues/`,
-              query: {query: 'release:' + this.context.release.version},
+              query: {query: 'release:' + this.props.release.version},
             }}
           >
             {t('View all issues seen in this release in the stream')}
@@ -27,7 +27,7 @@ export default class ReleaseAllEvents extends React.Component {
         </Alert>
         <GroupList
           orgId={orgId}
-          query={'release:"' + this.context.release.version + '"'}
+          query={'release:"' + this.props.release.version + '"'}
           canSelectGroups={false}
         />
       </div>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx
index e0e6bd5303..b688596b89 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseNewEvents.jsx
@@ -7,7 +7,7 @@ import GroupList from 'app/components/groupList';
 import {t} from 'app/locale';
 
 export default class OrganizationReleaseNewEvents extends React.Component {
-  static contextTypes = {
+  static propTypes = {
     release: SentryTypes.Release,
   };
 
@@ -19,7 +19,7 @@ export default class OrganizationReleaseNewEvents extends React.Component {
           <Link
             to={{
               pathname: `/organizations/${orgId}/issues/`,
-              query: {query: 'first-release:' + this.context.release.version},
+              query: {query: 'first-release:' + this.props.release.version},
             }}
           >
             {t('View new issues seen in this release in the stream')}
@@ -27,7 +27,7 @@ export default class OrganizationReleaseNewEvents extends React.Component {
         </Alert>
         <GroupList
           orgId={orgId}
-          query={'first-release:"' + this.context.release.version + '"'}
+          query={'first-release:"' + this.props.release.version + '"'}
           canSelectGroups={false}
         />
       </div>
diff --git a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx
index 6d6b728dca..9158b50912 100644
--- a/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/detail/organization/releaseOverview.jsx
@@ -1,21 +1,23 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 
 import SentryTypes from 'app/sentryTypes';
-
 import LastCommit from 'app/components/lastCommit';
 import CommitAuthorStats from 'app/components/commitAuthorStats';
 import ReleaseProjectStatSparkline from 'app/components/releaseProjectStatSparkline';
 import RepositoryFileSummary from 'app/components/repositoryFileSummary';
 import AsyncComponent from 'app/components/asyncComponent';
 import {t} from 'app/locale';
+
 import {getFilesByRepository} from '../shared/utils';
 import ReleaseDeploys from '../shared/releaseDeploys';
 import ReleaseEmptyState from '../shared/releaseEmptyState';
 import ReleaseIssues from '../shared/releaseIssues';
 
 export default class OrganizationReleaseOverview extends AsyncComponent {
-  static contextTypes = {
+  static propTypes = {
     release: SentryTypes.Release,
+    query: PropTypes.object,
   };
 
   getEndpoints() {
@@ -33,8 +35,7 @@ export default class OrganizationReleaseOverview extends AsyncComponent {
   }
 
   renderBody() {
-    const {orgId, version} = this.props.params;
-    const {release} = this.context;
+    const {release, query, params: {orgId, version}} = this.props;
 
     const {fileList, repos} = this.state;
 
@@ -42,11 +43,6 @@ export default class OrganizationReleaseOverview extends AsyncComponent {
 
     const filesByRepository = getFilesByRepository(fileList);
 
-    // Unlike project releases) which filter issue lists on environment, we
-    // do not apply any of the global selection filters (project, environment,
-    // or time) to the organization release
-    const query = {};
-
     return (
       <div>
         <div className="row" style={{paddingTop: 10}}>
diff --git a/tests/js/spec/components/__snapshots__/globalSelectionLink.spec.jsx.snap b/tests/js/spec/components/__snapshots__/globalSelectionLink.spec.jsx.snap
new file mode 100644
index 0000000000..40e7048d7c
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/globalSelectionLink.spec.jsx.snap
@@ -0,0 +1,32 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GlobalSelectionLink does not have global selection values in query 1`] = `
+<Link
+  onlyActiveOnIndex={false}
+  style={Object {}}
+  to="http://some.url/"
+>
+  Go somewhere!
+</Link>
+`;
+
+exports[`GlobalSelectionLink has global selection values in query 1`] = `
+<Link
+  onlyActiveOnIndex={false}
+  style={Object {}}
+  to={
+    Object {
+      "pathname": "http://some.url/",
+      "query": Object {
+        "environment": "staging",
+        "project": Array [
+          "foo",
+          "bar",
+        ],
+      },
+    }
+  }
+>
+  Go somewhere!
+</Link>
+`;
diff --git a/tests/js/spec/components/globalSelectionLink.spec.jsx b/tests/js/spec/components/globalSelectionLink.spec.jsx
new file mode 100644
index 0000000000..687a6dad0c
--- /dev/null
+++ b/tests/js/spec/components/globalSelectionLink.spec.jsx
@@ -0,0 +1,50 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import GlobalSelectionLink from 'app/components/globalSelectionLink';
+
+const path = 'http://some.url/';
+
+describe('GlobalSelectionLink', function() {
+  it('has global selection values in query', function() {
+    const query = {
+      project: ['foo', 'bar'],
+      environment: 'staging',
+    };
+
+    const wrapper = shallow(
+      <GlobalSelectionLink to={path}>Go somewhere!</GlobalSelectionLink>,
+      {
+        context: {
+          location: {
+            query,
+          },
+        },
+      }
+    );
+
+    const updatedToProp = wrapper.find('Link').prop('to');
+
+    expect(updatedToProp).toEqual({pathname: path, query});
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('does not have global selection values in query', function() {
+    const wrapper = shallow(
+      <GlobalSelectionLink to={path}>Go somewhere!</GlobalSelectionLink>,
+      {
+        context: {
+          location: {
+            query: {},
+          },
+        },
+      }
+    );
+
+    const updatedToProp = wrapper.find('Link').prop('to');
+
+    expect(updatedToProp).toEqual(path);
+
+    expect(wrapper).toMatchSnapshot();
+  });
+});
