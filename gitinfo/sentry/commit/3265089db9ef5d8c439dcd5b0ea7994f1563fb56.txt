commit 3265089db9ef5d8c439dcd5b0ea7994f1563fb56
Author: Taylan Gocmen <taylangocmen@users.noreply.github.com>
Date:   Fri May 8 10:35:52 2020 -0700

    fix(ui): Use slug and selected, bookmarked, alphabetical in sequence for project sort order (#18691)
    
    * use slug for project sort, move selected projects to the top
    
    * sort nonmember projects by slug only
    
    * add unit test for basic alpha sort
    
    * exhaustive list of the sort order for the member projects
    
    * add test for nonmber project sort order

diff --git a/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
index de7741692a..dbac74dc27 100644
--- a/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/projectSelector.jsx
@@ -99,11 +99,15 @@ class ProjectSelector extends React.Component {
   }
 
   getProjects() {
-    const {multiProjects, nonMemberProjects} = this.props;
+    const {multiProjects, nonMemberProjects, selectedProjects} = this.props;
 
     return [
-      sortBy(multiProjects, project => [!project.isBookmarked, project.name]),
-      nonMemberProjects || [],
+      sortBy(multiProjects, project => [
+        !(selectedProjects || []).includes(project),
+        !project.isBookmarked,
+        project.slug,
+      ]),
+      sortBy(nonMemberProjects || [], project => [project.slug]),
     ];
   }
 
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 612c455a63..02cdfa613b 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -35,6 +35,7 @@ describe('GlobalSelectionHeader', function() {
     projects: [
       {
         id: 2,
+        slug: 'project-2',
       },
       {
         id: 3,
@@ -168,7 +169,7 @@ describe('GlobalSelectionHeader', function() {
     await tick();
     wrapper.update();
     expect(wrapper.find('MultipleProjectSelector Content').text()).toBe(
-      'project-slug, project-3'
+      'project-2, project-3'
     );
 
     // Select environment
diff --git a/tests/js/spec/components/organizations/projectSelector.spec.jsx b/tests/js/spec/components/organizations/projectSelector.spec.jsx
index 47e16ff77d..632f8882e7 100644
--- a/tests/js/spec/components/organizations/projectSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/projectSelector.spec.jsx
@@ -216,4 +216,174 @@ describe('ProjectSelector', function() {
     expect(wrapper.text()).toContain("Projects I don't belong to");
     expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
   });
+
+  it('displays projects in alphabetical order partitioned by project membership', function() {
+    const projectA = TestStubs.Project({id: '1', slug: 'a-project'});
+    const projectB = TestStubs.Project({id: '2', slug: 'b-project'});
+    const projectANonM = TestStubs.Project({id: '3', slug: 'a-non-m-project'});
+    const projectBNonM = TestStubs.Project({id: '4', slug: 'b-non-m-project'});
+
+    const multiProjectProps = {
+      ...props,
+      multiProjects: [projectB, projectA],
+      nonMemberProjects: [projectBNonM, projectANonM],
+      selectedProjects: [],
+    };
+
+    const wrapper = mountWithTheme(
+      <ProjectSelector {...multiProjectProps} />,
+      routerContext
+    );
+    openMenu(wrapper);
+
+    const positionA = wrapper.text().indexOf(projectA.slug);
+    const positionB = wrapper.text().indexOf(projectB.slug);
+
+    const positionANonM = wrapper.text().indexOf(projectANonM.slug);
+    const positionBNonM = wrapper.text().indexOf(projectBNonM.slug);
+
+    expect(wrapper.text()).toContain("Projects I don't belong to");
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(4);
+
+    [positionA, positionB, positionANonM, positionBNonM].forEach(position =>
+      expect(position).toBeGreaterThan(-1)
+    );
+
+    expect(positionA).toBeLessThan(positionB);
+    expect(positionB).toBeLessThan(positionANonM);
+    expect(positionANonM).toBeLessThan(positionBNonM);
+  });
+
+  it('displays multi projects in sort order rules: selected, bookmarked, alphabetical', function() {
+    const projectA = TestStubs.Project({id: '1', slug: 'a-project'});
+    const projectBBookmarked = TestStubs.Project({
+      id: '2',
+      slug: 'b-project',
+      isBookmarked: true,
+    });
+    const projectCBookmarked = TestStubs.Project({
+      id: '3',
+      slug: 'c-project',
+      isBookmarked: true,
+    });
+    const projectDSelected = TestStubs.Project({id: '4', slug: 'd-project'});
+    const projectESelected = TestStubs.Project({id: '5', slug: 'e-project'});
+    const projectFSelectedBookmarked = TestStubs.Project({
+      id: '6',
+      slug: 'f-project',
+      isBookmarked: true,
+    });
+    const projectGSelectedBookmarked = TestStubs.Project({
+      id: '7',
+      slug: 'g-project',
+      isBookmarked: true,
+    });
+    const projectH = TestStubs.Project({id: '8', slug: 'h-project'});
+    const multiProjectProps = {
+      ...props,
+      multiProjects: [
+        projectA,
+        projectBBookmarked,
+        projectCBookmarked,
+        projectDSelected,
+        projectESelected,
+        projectFSelectedBookmarked,
+        projectGSelectedBookmarked,
+        projectH,
+      ],
+      nonMemberProjects: [],
+      selectedProjects: [
+        projectESelected,
+        projectDSelected,
+        projectGSelectedBookmarked,
+        projectFSelectedBookmarked,
+      ],
+    };
+
+    const wrapper = mountWithTheme(
+      <ProjectSelector {...multiProjectProps} />,
+      routerContext
+    );
+    openMenu(wrapper);
+
+    const positionA = wrapper.text().indexOf(projectA.slug);
+    const positionB = wrapper.text().indexOf(projectBBookmarked.slug);
+    const positionC = wrapper.text().indexOf(projectCBookmarked.slug);
+    const positionD = wrapper.text().indexOf(projectDSelected.slug);
+    const positionE = wrapper.text().indexOf(projectESelected.slug);
+    const positionF = wrapper.text().indexOf(projectFSelectedBookmarked.slug);
+    const positionG = wrapper.text().indexOf(projectGSelectedBookmarked.slug);
+    const positionH = wrapper.text().indexOf(projectH.slug);
+
+    expect(wrapper.text()).not.toContain("Projects I don't belong to");
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(8);
+
+    [
+      positionA,
+      positionB,
+      positionC,
+      positionD,
+      positionE,
+      positionF,
+      positionG,
+      positionH,
+    ].forEach(position => expect(position).toBeGreaterThan(-1));
+
+    expect(positionF).toBeLessThan(positionG);
+    expect(positionG).toBeLessThan(positionD);
+    expect(positionD).toBeLessThan(positionE);
+    expect(positionE).toBeLessThan(positionB);
+    expect(positionB).toBeLessThan(positionC);
+    expect(positionC).toBeLessThan(positionA);
+    expect(positionA).toBeLessThan(positionH);
+  });
+
+  it('displays non member projects in alphabetical sort order', function() {
+    const projectA = TestStubs.Project({id: '1', slug: 'a-project'});
+    const projectBBookmarked = TestStubs.Project({
+      id: '2',
+      slug: 'b-project',
+      isBookmarked: true,
+    });
+    const projectCSelected = TestStubs.Project({id: '3', slug: 'c-project'});
+    const projectDSelectedBookmarked = TestStubs.Project({
+      id: '4',
+      slug: 'd-project',
+      isBookmarked: true,
+    });
+
+    const multiProjectProps = {
+      ...props,
+      multiProjects: [],
+      nonMemberProjects: [
+        projectCSelected,
+        projectA,
+        projectDSelectedBookmarked,
+        projectBBookmarked,
+      ],
+      selectedProjects: [projectCSelected, projectDSelectedBookmarked],
+    };
+
+    const wrapper = mountWithTheme(
+      <ProjectSelector {...multiProjectProps} />,
+      routerContext
+    );
+    openMenu(wrapper);
+
+    const positionA = wrapper.text().indexOf(projectA.slug);
+    const positionB = wrapper.text().indexOf(projectBBookmarked.slug);
+    const positionC = wrapper.text().indexOf(projectCSelected.slug);
+    const positionD = wrapper.text().indexOf(projectDSelectedBookmarked.slug);
+
+    expect(wrapper.text()).toContain("Projects I don't belong to");
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(4);
+
+    [positionA, positionB, positionC, positionD].forEach(position =>
+      expect(position).toBeGreaterThan(-1)
+    );
+
+    expect(positionA).toBeLessThan(positionB);
+    expect(positionB).toBeLessThan(positionC);
+    expect(positionC).toBeLessThan(positionD);
+  });
 });
diff --git a/tests/js/spec/views/events/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
index 2715665e1b..cc1ce45b15 100644
--- a/tests/js/spec/views/events/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -309,8 +309,8 @@ describe('EventsContainer', function() {
 
   const {organization, router, routerContext} = initializeOrg({
     projects: [
-      {isMember: true, isBookmarked: true},
-      {isMember: true, slug: 'new-project', id: 3},
+      {isMember: true, slug: 'new-project-2', id: 2, isBookmarked: true},
+      {isMember: true, slug: 'new-project-3', id: 3},
     ],
     organization: {
       features: ['events', 'internal-catchall'],
@@ -414,14 +414,11 @@ describe('EventsContainer', function() {
   });
 
   it('updates when changing projects', async function() {
-    // Project id = 3 should be first selected because of ProjectsStore.getAll sorting by slug
-    expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([3]);
+    // Project id = 2 should be first selected because of ProjectsStore.getAll sorting by slug
+    expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([2]);
 
     wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
-    // TODO(billy): Fix this sorting, 2 gets moved up
-    // because the component (ProjectSelector) sorts it and
-    // orders isBookmarked to the top
     wrapper
       .find('MultipleProjectSelector AutoCompleteItem ProjectSelectorItem')
       .at(0)
