commit 7a19265f68189331de2bd0a812ed57c950bd0148
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 16 00:09:47 2015 -0700

    Handle sampling in Datadog incr

diff --git a/src/sentry/metrics/datadog.py b/src/sentry/metrics/datadog.py
index 81c5347b5b..b2cf371680 100644
--- a/src/sentry/metrics/datadog.py
+++ b/src/sentry/metrics/datadog.py
@@ -10,6 +10,13 @@ from sentry.utils.cache import memoize
 from .base import MetricsBackend
 
 
+# XXX(dcramer): copied from sentry.utils.metrics
+def _sampled_value(value, sample_rate):
+    if sample_rate < 1:
+        value = int(value * (1.0 / sample_rate))
+    return value
+
+
 class DatadogMetricsBackend(MetricsBackend):
     def __init__(self, prefix=None, **kwargs):
         # TODO(dcramer): it'd be nice if the initialize call wasn't a global
@@ -39,8 +46,9 @@ class DatadogMetricsBackend(MetricsBackend):
             tags['instance'] = instance
         if tags:
             tags = ['{}:{}'.format(*i) for i in tags.items()]
+        # datadog does not implement sampling here
+        amount = _sampled_value(amount, sample_rate)
         self.stats.increment(self._get_key(key), amount,
-                             sample_rate=sample_rate,
                              tags=tags,
                              host=self.host)
 
