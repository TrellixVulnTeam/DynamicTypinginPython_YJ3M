commit 6ec150eaafc426f8827f46d334afaeacb2f75620
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Feb 8 20:27:45 2017 +0100

    Hacked the symbolication tests together to pass again

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 8b9444f565..792ed092bf 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -436,7 +436,10 @@ class NativeStacktraceProcessor(StacktraceProcessor):
         try:
             symbolicated_frames = self.sym.symbolize_frame(
                 sym_input_frame, self.sdk_info, symbolize_inlined=True)
+            if not symbolicated_frames:
+                return None, [raw_frame], []
         except SymbolicationFailed as e:
+            errors = []
             if e.is_user_fixable or e.is_sdk_failure:
                 errors.append({
                     'type': e.type,
@@ -479,13 +482,11 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                 or new_frame.get('package')
             new_frame['symbol_addr'] = '0x%x' % \
                 parse_addr(sfrm['symbol_addr'])
-            new_frame['instruction_addr'] = '0x%x' % parse_addr(
-                frame['instruction_addr'])
 
             new_frame['in_app'] = in_app
             new_frames.append(new_frame)
 
-        return new_frames, [raw_frame], errors
+        return new_frames, [raw_frame], []
 
 
 class NativePlugin(Plugin2):
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index a21783485e..1876bb2938 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -7,6 +7,8 @@ from sentry.testutils import TestCase
 from sentry.lang.native.symbolizer import Symbolizer
 from sentry.lang.native.plugin import convert_stacktrace
 
+from symsynd.utils import parse_addr
+
 
 def test_legacy_stacktrace_converter():
     addr = {'foo': 'bar'}
@@ -60,7 +62,7 @@ class BasicResolvingIntegrationTest(TestCase):
             "SentryTest.app/SentryTest"
         )
 
-        symbolize_frame.return_value = {
+        symbolize_frame.return_value = [{
             'filename': 'Foo.swift',
             'line': 42,
             'column': 23,
@@ -68,7 +70,7 @@ class BasicResolvingIntegrationTest(TestCase):
             'symbol_name': 'real_main',
             'symbol_addr': '0x1000262a0',
             "instruction_addr": '0x100026330',
-        }
+        }]
 
         event_data = {
             "sentry.interfaces.User": {
@@ -111,14 +113,11 @@ class BasicResolvingIntegrationTest(TestCase):
                                     "filename": None,
                                     "symbol_addr": "0x002ac28b4",
                                     "lineno": None,
-                                    "in_app": False,
                                     "instruction_addr": "0x002ac28b8"
                                 },
                                 {
                                     "function": "main",
-                                    "instruction_addr": 4295123760,
-                                    "symbol_addr": 4295123616,
-                                    "image_addr": 4295098368
+                                    "instruction_addr": 4295123760
                                 },
                                 {
                                     "platform": "javascript",
@@ -177,7 +176,6 @@ class BasicResolvingIntegrationTest(TestCase):
                         'stacktrace': {
                             "frames": [
                                 {
-                                    "in_app": False,
                                     "platform": "apple",
                                     "package": "\/usr\/lib\/system\/libsystem_pthread.dylib",
                                     "symbol_addr": "0x00000001843a102c",
@@ -185,7 +183,6 @@ class BasicResolvingIntegrationTest(TestCase):
                                     "instruction_addr": "0x00000001843a1530"
                                 },
                                 {
-                                    "in_app": False,
                                     "platform": "apple",
                                     "package": "\/usr\/lib\/system\/libsystem_kernel.dylib",
                                     "symbol_addr": "0x00000001842d8b40",
@@ -233,14 +230,15 @@ class BasicResolvingIntegrationTest(TestCase):
 
         assert len(event.interfaces['threads'].values) == 1
 
-    def sym_app_frame(self, frame, img):
+    def sym_app_frame(self, frame, img, symbolize_inlined=False):
+        assert symbolize_inlined
         object_name = (
             "/var/containers/Bundle/Application/"
             "B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
             "SentryTest.app/SentryTest"
         )
-        if frame['instruction_addr'] == '0x1':
-            return {
+        if parse_addr(frame['instruction_addr']) != 4295098384:
+            return [{
                 'filename': 'Foo.swift',
                 'line': 82,
                 'column': 23,
@@ -248,8 +246,8 @@ class BasicResolvingIntegrationTest(TestCase):
                 'symbol_name': 'other_main',
                 'symbol_addr': '0x1',
                 "instruction_addr": '0x1',
-            }
-        return {
+            }]
+        return [{
             'filename': 'Foo.swift',
             'line': 42,
             'column': 23,
@@ -257,7 +255,7 @@ class BasicResolvingIntegrationTest(TestCase):
             'symbol_name': 'real_main',
             'symbol_addr': '0x1000262a0',
             "instruction_addr": '0x100026330',
-        }
+        }]
 
     @patch.object(Symbolizer, 'symbolize_app_frame', sym_app_frame)
     def test_frame_resolution_no_sdk_info(self):
@@ -307,20 +305,15 @@ class BasicResolvingIntegrationTest(TestCase):
                                     "filename": None,
                                     "symbol_addr": "0x002ac28b4",
                                     "lineno": None,
-                                    "in_app": False,
                                     "instruction_addr": "0x002ac28b8"
                                 },
                                 {
                                     "function": "main",
-                                    "instruction_addr": 4295123760,
-                                    "symbol_addr": 4295123616,
-                                    "image_addr": 4295098368
+                                    "instruction_addr": 4295098388,
                                 },
                                 {
                                     "function": "other_main",
-                                    "instruction_addr": 1,
-                                    "symbol_addr": 1,
-                                    "image_addr": 4295098368
+                                    "instruction_addr": 4295098396
                                 },
                                 {
                                     "platform": "javascript",
@@ -378,6 +371,7 @@ class BasicResolvingIntegrationTest(TestCase):
         assert resp.status_code == 200
 
         event = Event.objects.get()
+        print event.data['errors']
 
         bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
         frames = bt.frames
@@ -391,7 +385,7 @@ class BasicResolvingIntegrationTest(TestCase):
         assert frames[1].lineno == 42
         assert frames[1].colno == 23
         assert frames[1].package == object_name
-        assert frames[1].instruction_addr == '0x100026330'
+        assert frames[1].instruction_addr == '0x100020014'
         assert frames[1].instruction_offset is None
         assert frames[1].in_app
 
@@ -400,7 +394,7 @@ class BasicResolvingIntegrationTest(TestCase):
         assert frames[2].lineno == 82
         assert frames[2].colno == 23
         assert frames[2].package == object_name
-        assert frames[2].instruction_addr == '0x1'
+        assert frames[2].instruction_addr == '0x10002001c'
         assert frames[2].instruction_offset is None
         assert frames[2].in_app
 
@@ -416,5 +410,5 @@ class BasicResolvingIntegrationTest(TestCase):
         x = bt.get_api_context()
         long_frames = x['frames']
         assert long_frames[0]['instructionAddr'] == '0x002ac28b8'
-        assert long_frames[1]['instructionAddr'] == '0x100026330'
-        assert long_frames[2]['instructionAddr'] == '0x000000001'
+        assert long_frames[1]['instructionAddr'] == '0x100020014'
+        assert long_frames[2]['instructionAddr'] == '0x10002001c'
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index a2318e7de6..4e3533a99a 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -21,28 +21,29 @@ SDK_INFO = {
 }
 
 
-def patched_symbolize_app_frame(self, frame, img):
-    if frame['instruction_addr'] == 4295123760:
-        return {
-            'filename': 'Foo.swift',
-            'line': 42,
-            'column': 23,
-            'object_name': OBJECT_NAME,
-            'symbol_name': 'real_main',
-            'symbol_addr': '0x1000262a0',
-            'instruction_addr': '0x100026330',
-        }
-
-
-def patched_symbolize_system_frame(self, frame, img, sdk_info):
+def patched_symbolize_app_frame(self, frame, img, symbolize_inlined=False):
+    assert symbolize_inlined
+    return [{
+        'filename': 'Foo.swift',
+        'line': 42,
+        'column': 23,
+        'object_name': OBJECT_NAME,
+        'symbol_name': 'real_main',
+        'symbol_addr': '0x1000262a0',
+    }]
+
+
+def patched_symbolize_system_frame(self, frame, img, sdk_info,
+                                   symbolize_inlined=False):
+    assert symbolize_inlined
     assert sdk_info == SDK_INFO
-    if frame['instruction_addr'] == 4295123360:
-        return {
+    if frame['instruction_addr'] == 6016:
+        return [{
             'object_name': '/usr/lib/whatever.dylib',
             'symbol_name': 'whatever_system',
-            'symbol_addr': '0x100026110',
-            'instruction_addr': '0x1000261a0',
-        }
+            'symbol_addr': hex(6016),
+        }]
+    return []
 
 
 class BasicResolvingFileTest(TestCase):
@@ -66,7 +67,7 @@ class BasicResolvingFileTest(TestCase):
                         "cpu_subtype": 0,
                         "uuid": "C05B4DDD-69A7-3840-A649-32180D341587",
                         "image_vmaddr": 4294967296,
-                        "image_addr": 4295098368,
+                        "image_addr": 4295121760,
                         "cpu_type": 16777228,
                         "image_size": 32768,
                         "name": OBJECT_NAME,
@@ -77,7 +78,7 @@ class BasicResolvingFileTest(TestCase):
                         "cpu_type": 16777228,
                         "uuid": "B78CB4FB-3A90-4039-9EFD-C58932803AE5",
                         "image_vmaddr": 0,
-                        "image_addr": 4295092368,
+                        "image_addr": 6000,
                         "cpu_type": 16777228,
                         "image_size": 32768,
                         'name': '/usr/lib/whatever.dylib',
@@ -93,25 +94,19 @@ class BasicResolvingFileTest(TestCase):
                                 {
                                     "function": "<redacted>",
                                     "abs_path": None,
-                                    "instruction_offset": 4,
                                     "package": "/usr/lib/system/libdyld.dylib",
                                     "filename": None,
-                                    "symbol_addr": "0x002ac28b4",
                                     "lineno": None,
                                     "in_app": False,
-                                    "instruction_addr": "0x002ac28b8"
+                                    "instruction_addr": 6010,
                                 },
                                 {
                                     "function": "main",
-                                    "instruction_addr": 4295123760,
-                                    "symbol_addr": 4295123616,
-                                    "image_addr": 4295098368
+                                    "instruction_addr": 4295123760
                                 },
                                 {
                                     "function": "whatever_system",
-                                    "instruction_addr": 4295123360,
-                                    "symbol_addr": 4295123216,
-                                    "image_addr": 4295092368
+                                    "instruction_addr": 6020,
                                 },
                                 {
                                     "platform": "javascript",
@@ -174,16 +169,16 @@ class BasicResolvingFileTest(TestCase):
         frames = bt['frames']
 
         assert frames[0]['function'] == '<redacted>'
-        assert frames[0]['instruction_addr'] == '0x002ac28b8'
+        assert frames[0]['instruction_addr'] == 6010
 
         assert frames[1]['function'] == 'real_main'
         assert frames[1]['lineno'] == 42
         assert frames[1]['colno'] == 23
         assert frames[1]['package'] == OBJECT_NAME
-        assert frames[1]['instruction_addr'] == '0x100026330'
+        assert frames[1]['instruction_addr'] == 4295123760
         assert frames[1].get('instruction_offset') is None
 
         assert frames[2]['function'] == 'whatever_system'
         assert frames[2]['package'] == '/usr/lib/whatever.dylib'
-        assert frames[2]['instruction_addr'] == '0x1000261a0'
-        assert frames[2].get('instruction_offset') == 144
+        assert frames[2]['instruction_addr'] == 6020
+        assert frames[2].get('instruction_offset') == 4
