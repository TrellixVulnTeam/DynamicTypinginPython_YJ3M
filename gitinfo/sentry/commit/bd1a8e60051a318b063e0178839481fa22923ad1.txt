commit bd1a8e60051a318b063e0178839481fa22923ad1
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Sep 22 18:26:26 2015 -0700

    Fix tag value auto-completion if value has colon

diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index e34d2fb0e4..2c1cec57b8 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -292,8 +292,9 @@ var SearchBar = React.createClass({
     let autoCompleteItems;
     let matchValue;
     let tagName;
+    let index = last.indexOf(':');
 
-    if (last.indexOf(':') === -1) {
+    if (index === -1) {
       // No colon present; must still be deciding key
       matchValue = last;
       autoCompleteItems = this.getTagKeys(matchValue);
@@ -301,7 +302,8 @@ var SearchBar = React.createClass({
       this.setState({searchTerm: matchValue});
       this.updateAutoCompleteState(autoCompleteItems, matchValue);
     } else {
-      [tagName, query] = last.split(':');
+      tagName = last.slice(0, index);
+      query = last.slice(index + 1);
       this.setState({searchTerm: query});
 
       let tag = this.getTag(tagName);
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index bb801250df..8244a3bcc0 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -173,4 +173,63 @@ describe("SearchBar", function() {
 
   });
 
+  describe("updateAutoCompleteItems()", function() {
+    it("sets state when empty", function() {
+      var props = {
+        query: "",
+      };
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      wrapper.updateAutoCompleteItems();
+      expect(wrapper.state.searchTerm).to.eql('');
+      expect(wrapper.state.searchItems).to.eql(wrapper.props.defaultSearchItems);
+      expect(wrapper.state.activeSearchItem).to.eql(0);
+    });
+
+    it("sets state when incomplete tag", function() {
+      var props = {
+        query: "fu",
+      };
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      wrapper.updateAutoCompleteItems();
+      expect(wrapper.state.searchTerm).to.eql('fu');
+      expect(wrapper.state.searchItems).to.eql([]);
+      expect(wrapper.state.activeSearchItem).to.eql(0);
+    });
+
+    it("sets state with complete tag", function() {
+      var props = {
+        query: "url:\"fu\"",
+      };
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      wrapper.updateAutoCompleteItems();
+      expect(wrapper.state.searchTerm).to.eql('"fu"');
+      expect(wrapper.state.searchItems).to.eql([]);
+      expect(wrapper.state.activeSearchItem).to.eql(0);
+    });
+
+    it("sets state when incomplete tag as second input", function() {
+      var props = {
+        query: "is:unresolved fu",
+      };
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      wrapper.updateAutoCompleteItems();
+      expect(wrapper.state.searchTerm).to.eql('unresolved');
+      expect(wrapper.state.searchItems.length).to.eql(1);
+      expect(wrapper.state.searchItems[0].desc).to.eql('unresolved');
+      expect(wrapper.state.searchItems[0].value).to.eql('unresolved');
+      expect(wrapper.state.activeSearchItem).to.eql(0);
+    });
+
+    it("sets state when value has colon", function() {
+      var props = {
+        query: "url:\"http://example.com\"",
+      };
+      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      wrapper.updateAutoCompleteItems();
+      expect(wrapper.state.searchTerm).to.eql('"http://example.com"');
+      expect(wrapper.state.searchItems).to.eql([]);
+      expect(wrapper.state.activeSearchItem).to.eql(0);
+    });
+  });
+
 });
