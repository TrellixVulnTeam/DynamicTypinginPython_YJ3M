commit 9e60df1f20541acc39948b4f33f468e242f8d31c
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Mar 7 11:49:21 2019 -0800

    fix(api): Fix Access project/team membership checks for global roles (#12310)
    
    Also renames open_access_policy to has_global_access
    fixes SEN-241

diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index d90bc51113..6c58092c1b 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -66,9 +66,11 @@ class BaseAccess(object):
     teams = ()
     # projects with membership
     projects = ()
-    # if open access policy is specified, then any project
-    # matching organization_id is valid
-    open_access_policy = False
+    # if has_global_access is True, then any project
+    # matching organization_id is valid. This is used for
+    # both `organization.allow_joinleave` and to indicate
+    # that the role is global / a user is an active superuser
+    has_global_access = False
     scopes = frozenset()
     permissions = frozenset()
 
@@ -104,7 +106,7 @@ class BaseAccess(object):
         """
         if not self.is_active:
             return False
-        if self.open_access_policy and self.organization_id == team.organization_id:
+        if self.has_global_access and self.organization_id == team.organization_id:
             return True
         return team in self.teams
 
@@ -125,7 +127,7 @@ class BaseAccess(object):
         """
         if not self.is_active:
             return False
-        if self.open_access_policy and self.organization_id == project.organization_id:
+        if self.has_global_access and self.organization_id == project.organization_id:
             return True
         return project in self.projects
 
@@ -162,12 +164,12 @@ class Access(BaseAccess):
     # TODO(dcramer): this is still a little gross, and ideally backend access
     # would be based on the same scopes as API access so theres clarity in
     # what things mean
-    def __init__(self, scopes, is_active, organization_id, teams, projects, open_access_policy,
+    def __init__(self, scopes, is_active, organization_id, teams, projects, has_global_access,
                  sso_is_valid, requires_sso, permissions=None):
         self.organization_id = organization_id
         self.teams = teams
         self.projects = projects
-        self.open_access_policy = open_access_policy
+        self.has_global_access = has_global_access
         self.scopes = scopes
         if permissions is not None:
             self.permissions = permissions
@@ -181,7 +183,7 @@ class OrganizationGlobalAccess(BaseAccess):
     requires_sso = False
     sso_is_valid = True
     is_active = True
-    open_access_policy = True
+    has_global_access = True
     teams = ()
     projects = ()
     permissions = frozenset()
@@ -218,7 +220,7 @@ class NoAccess(BaseAccess):
     sso_is_valid = True
     is_active = False
     organization_id = None
-    open_access_policy = False
+    has_global_access = False
     teams = ()
     projects = ()
     memberships = ()
@@ -259,7 +261,7 @@ def from_request(request, organization=None, scopes=None):
             projects=project_list,
             sso_is_valid=sso_is_valid,
             requires_sso=requires_sso,
-            open_access_policy=True,
+            has_global_access=True,
             permissions=UserPermission.for_user(request.user.id),
         )
 
@@ -290,7 +292,7 @@ def from_sentry_app(user, organization=None):
         teams=team_list,
         projects=project_list,
         permissions=(),
-        open_access_policy=False,
+        has_global_access=False,
         sso_is_valid=True,
         requires_sso=False,
     )
@@ -342,7 +344,8 @@ def from_member(member, scopes=None):
         organization_id=member.organization_id,
         teams=team_list,
         projects=project_list,
-        open_access_policy=bool(member.organization.flags.allow_joinleave),
+        has_global_access=bool(member.organization.flags.allow_joinleave) or
+        roles.get(member.role).is_global,
         permissions=UserPermission.for_user(member.user_id),
     )
 
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index b42b781cfe..1740137f26 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -297,9 +297,6 @@ class OrganizationMember(Model):
     def get_teams(self):
         from sentry.models import Team
 
-        if roles.get(self.role).is_global:
-            return self.organization.team_set.all()
-
         return Team.objects.filter(
             id__in=OrganizationMemberTeam.objects.filter(
                 organizationmember=self,
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 0af7976b12..021f611e26 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -206,8 +206,16 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         self.run_test([])
         # Should get everything if super user
         self.run_test([self.project_1, self.project_2], user=self.user, active_superuser=True)
+
+        # owner does not see projects they aren't members of if not included in query params
+        self.run_test([], user=self.owner)
+
         # owner sees projects they have access to if they're included as query params
-        self.run_test([self.project_1, self.project_2], user=self.owner)
+        self.run_test(
+            [self.project_1, self.project_2],
+            user=self.owner,
+            project_ids=[self.project_1.id, self.project_2.id],
+        )
         # Should get everything if org is public and ids are specified
         self.org.flags.allow_joinleave = True
         self.org.save()
diff --git a/tests/sentry/auth/test_access.py b/tests/sentry/auth/test_access.py
index 37cfece42d..e98f51f593 100644
--- a/tests/sentry/auth/test_access.py
+++ b/tests/sentry/auth/test_access.py
@@ -63,7 +63,8 @@ class FromUserTest(TestCase):
         assert result.has_project_access(project)
         assert result.has_projects_access([project])
         assert result.has_project_scope(project, 'project:read')
-        assert result.has_project_membership(project)
+        # owners should have access but not membership
+        assert result.has_project_membership(project) is False
 
     def test_member_no_teams_closed_membership(self):
         user = self.create_user()
