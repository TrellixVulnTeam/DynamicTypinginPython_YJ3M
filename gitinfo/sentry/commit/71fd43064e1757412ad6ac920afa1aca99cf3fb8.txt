commit 71fd43064e1757412ad6ac920afa1aca99cf3fb8
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Oct 12 09:45:32 2014 -0700

    Move assign into group update

diff --git a/src/sentry/api/endpoints/group_assign.py b/src/sentry/api/endpoints/group_assign.py
deleted file mode 100644
index e76abd1050..0000000000
--- a/src/sentry/api/endpoints/group_assign.py
+++ /dev/null
@@ -1,62 +0,0 @@
-from django.utils import timezone
-from rest_framework import serializers, status
-from rest_framework.response import Response
-
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.db.models import create_or_update
-from sentry.models import Group, GroupAssignee, Activity
-
-
-class GroupAssigneeSerializer(serializers.ModelSerializer):
-    user = serializers.SlugRelatedField(slug_field='username')
-
-    class Meta:
-        model = GroupAssignee
-        fields = ('user',)
-
-
-class GroupAssignEndpoint(Endpoint):
-    def post(self, request, group_id):
-        group = Group.objects.get(
-            id=group_id,
-        )
-
-        assert_perm(group, request.user, request.auth)
-
-        serializer = GroupAssigneeSerializer(data=request.DATA)
-
-        if serializer.is_valid():
-            user = serializer.object.user
-            now = timezone.now()
-
-            assignee, created = GroupAssignee.objects.get_or_create(
-                group=group,
-                defaults={
-                    'project': group.project,
-                    'user': user,
-                    'date_added': now,
-                }
-            )
-
-            if not created:
-                affected = GroupAssignee.objects.filter(
-                    group=group,
-                ).exclude(user=user).update(
-                    user=user, date_added=now
-                )
-            else:
-                affected = True
-
-            if affected:
-                create_or_update(
-                    Activity,
-                    project=group.project,
-                    group=group,
-                    type=Activity.ASSIGNED,
-                    user=request.user,
-                )
-
-            return Response()
-
-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 83d8e01573..b0bbc31c85 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -6,10 +6,13 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection, Endpoint
 from sentry.api.permissions import assert_perm
+from sentry.api.fields import UserField
 from sentry.api.serializers import serialize
 from sentry.db.models.query import create_or_update
 from sentry.constants import STATUS_CHOICES
-from sentry.models import Activity, Group, GroupBookmark, GroupSeen, GroupStatus
+from sentry.models import (
+    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupStatus, Project
+)
 
 
 class GroupSerializer(serializers.Serializer):
@@ -17,6 +20,7 @@ class GroupSerializer(serializers.Serializer):
         STATUS_CHOICES.keys(), STATUS_CHOICES.keys()
     ))
     isBookmarked = serializers.BooleanField()
+    assignedTo = UserField()
 
 
 class GroupDetailsEndpoint(Endpoint):
@@ -77,7 +81,7 @@ class GroupDetailsEndpoint(Endpoint):
 
         return Response(data)
 
-    def post(self, request, group_id):
+    def put(self, request, group_id):
         group = Group.objects.get(
             id=group_id,
         )
@@ -89,6 +93,10 @@ class GroupDetailsEndpoint(Endpoint):
             return Response(status=400)
 
         result = serializer.object
+
+        if result.get('assignedTo') and group.project not in Project.objects.get_for_user(result['assignedTo']):
+            return Response(status=400)
+
         if result.get('status') == 'resolved':
             now = timezone.now()
 
@@ -126,6 +134,47 @@ class GroupDetailsEndpoint(Endpoint):
                 user=request.user,
             ).delete()
 
+        if 'assignedTo' in result:
+            now = timezone.now()
+
+            if result['assignedTo']:
+                assignee, created = GroupAssignee.objects.get_or_create(
+                    group=group,
+                    defaults={
+                        'project': group.project,
+                        'user': result['assignedTo'],
+                        'date_added': now,
+                    }
+                )
+
+                if not created:
+                    affected = GroupAssignee.objects.filter(
+                        group=group,
+                    ).exclude(
+                        user=result['assignedTo'],
+                    ).update(
+                        user=result['assignedTo'],
+                        date_added=now
+                    )
+                else:
+                    affected = True
+            else:
+                affected = GroupAssignee.objects.filter(
+                    group=group,
+                ).delete()
+
+            if affected:
+                create_or_update(
+                    Activity,
+                    project=group.project,
+                    group=group,
+                    type=Activity.ASSIGNED,
+                    user=request.user,
+                    data={
+                        'assignee': result['assignedTo'].id,
+                    }
+                )
+
         return Response(serialize(group, request.user))
 
     def delete(self, request, group_id):
diff --git a/src/sentry/api/endpoints/team_index.py b/src/sentry/api/endpoints/team_index.py
index 0438f3b785..3b19e991b2 100644
--- a/src/sentry/api/endpoints/team_index.py
+++ b/src/sentry/api/endpoints/team_index.py
@@ -1,26 +1,15 @@
+from __future__ import absolute_import, print_function
+
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
-from sentry.models import Team, User
+from sentry.api.fields import UserField
+from sentry.models import Team
 from sentry.permissions import can_create_teams
 
 
-class UserField(serializers.WritableField):
-    def to_native(self, obj):
-        return obj.username
-
-    def from_native(self, data):
-        if not data:
-            return None
-
-        try:
-            return User.objects.get(username__iexact=data)
-        except User.DoesNotExist:
-            raise serializers.ValidationError('Unable to find user')
-
-
 class TeamSerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=True)
     slug = serializers.CharField(max_length=200, required=False)
diff --git a/src/sentry/api/fields/__init__.py b/src/sentry/api/fields/__init__.py
new file mode 100644
index 0000000000..488216ed55
--- /dev/null
+++ b/src/sentry/api/fields/__init__.py
@@ -0,0 +1,3 @@
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/api/fields/user.py b/src/sentry/api/fields/user.py
new file mode 100644
index 0000000000..ed543c9565
--- /dev/null
+++ b/src/sentry/api/fields/user.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import, print_function
+
+from rest_framework import serializers
+
+from sentry.models import User
+
+
+class UserField(serializers.WritableField):
+    def to_native(self, obj):
+        return obj.username
+
+    def from_native(self, data):
+        if not data:
+            return None
+
+        try:
+            return User.objects.get(username__iexact=data)
+        except User.DoesNotExist:
+            raise serializers.ValidationError('Unable to find user')
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 5b6abd415f..04dbef1a1e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -6,7 +6,6 @@ from .endpoints.auth_index import AuthIndexEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
-from .endpoints.group_assign import GroupAssignEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_markseen import GroupMarkSeenEndpoint
 from .endpoints.group_events import GroupEventsEndpoint
@@ -99,9 +98,6 @@ urlpatterns = patterns(
     url(r'^groups/(?P<group_id>\d+)/$',
         GroupDetailsEndpoint.as_view(),
         name='sentry-api-0-group-details'),
-    url(r'^groups/(?P<group_id>\d+)/assign/$',
-        GroupAssignEndpoint.as_view(),
-        name='sentry-api-0-group-assign'),
     url(r'^groups/(?P<group_id>\d+)/markseen/$',
         GroupMarkSeenEndpoint.as_view(),
         name='sentry-api-0-group-markseen'),
diff --git a/tests/sentry/api/endpoints/test_group_assign.py b/tests/sentry/api/endpoints/test_group_assign.py
deleted file mode 100644
index 7803be4b55..0000000000
--- a/tests/sentry/api/endpoints/test_group_assign.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from django.core.urlresolvers import reverse
-
-from sentry.models import Activity, GroupAssignee
-from sentry.testutils import APITestCase
-
-
-class GroupAssignTest(APITestCase):
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-
-        url = reverse('sentry-api-0-group-assign', kwargs={
-            'group_id': group.id
-        })
-
-        response = self.client.post(url, format='json')
-
-        assert response.status_code == 400, response.content
-
-        response = self.client.post(url, data={'user': self.user.username}, format='json')
-
-        assert response.status_code == 200, response.content
-
-        assert GroupAssignee.objects.filter(
-            group=group, user=self.user
-        ).exists()
-
-        assert Activity.objects.filter(
-            group=group, user=self.user, type=Activity.ASSIGNED,
-        ).count() == 1
-
-        response = self.client.post(url, data={'user': self.user.username}, format='json')
-
-        assert response.status_code == 200, response.content
-
-        assert Activity.objects.filter(
-            group=group, user=self.user, type=Activity.ASSIGNED,
-        ).count() == 1
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index e3937de88f..6a57d926aa 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -2,7 +2,9 @@ from __future__ import absolute_import, print_function
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import Group, GroupBookmark, GroupStatus
+from sentry.models import (
+    Activity, Group, GroupAssignee, GroupBookmark, GroupStatus
+)
 from sentry.testutils import APITestCase
 
 
@@ -20,6 +22,8 @@ class GroupDetailsTest(APITestCase):
         assert response.status_code == 200, response.content
         assert response.data['id'] == str(group.id)
 
+
+class GroupUpdateTest(APITestCase):
     def test_resolve(self):
         self.login_as(user=self.user)
 
@@ -28,7 +32,7 @@ class GroupDetailsTest(APITestCase):
         url = reverse('sentry-api-0-group-details', kwargs={
             'group_id': group.id,
         })
-        response = self.client.post(url, data={
+        response = self.client.put(url, data={
             'status': 'resolved',
         }, format='json')
         assert response.status_code == 200, response.content
@@ -47,7 +51,7 @@ class GroupDetailsTest(APITestCase):
         url = reverse('sentry-api-0-group-details', kwargs={
             'group_id': group.id
         })
-        response = self.client.post(url, data={
+        response = self.client.put(url, data={
             'isBookmarked': '1',
         }, format='json')
 
@@ -57,6 +61,48 @@ class GroupDetailsTest(APITestCase):
         assert GroupBookmark.objects.filter(
             group=group, user=self.user).exists()
 
+    def test_assign(self):
+        self.login_as(user=self.user)
+
+        group = self.create_group()
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id
+        })
+        response = self.client.put(url, data={
+            'assignedTo': self.user.username,
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(
+            group=group, user=self.user
+        ).exists()
+
+        assert Activity.objects.filter(
+            group=group, user=self.user, type=Activity.ASSIGNED,
+        ).count() == 1
+
+        response = self.client.put(url, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert GroupAssignee.objects.filter(
+            group=group, user=self.user
+        ).exists()
+
+        response = self.client.put(url, data={
+            'assignedTo': '',
+        }, format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert not GroupAssignee.objects.filter(
+            group=group, user=self.user
+        ).exists()
+
+
+class GroupDeleteTest(APITestCase):
     def test_delete(self):
         self.login_as(user=self.user)
 
