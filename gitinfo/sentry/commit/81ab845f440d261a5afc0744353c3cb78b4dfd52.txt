commit 81ab845f440d261a5afc0744353c3cb78b4dfd52
Author: Chris Fuller <cfuller@sentry.io>
Date:   Thu May 7 17:24:47 2020 -0400

    feat(workflow): Implementing metric alert rule signal + receiver to track creation (#18674)
    
    * Implementing metric alert rule signal + receiver

diff --git a/src/sentry/analytics/events/metric_alert_created.py b/src/sentry/analytics/events/metric_alert_created.py
new file mode 100644
index 0000000000..e451376792
--- /dev/null
+++ b/src/sentry/analytics/events/metric_alert_created.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from sentry import analytics
+
+
+class MetricAlertCreatedEvent(analytics.Event):
+    type = "metric_alert.created"
+
+    attributes = (
+        analytics.Attribute("user_id", required=False),
+        analytics.Attribute("default_user_id"),
+        analytics.Attribute("organization_id"),
+        analytics.Attribute("rule_id"),
+    )
+
+
+analytics.register(MetricAlertCreatedEvent)
diff --git a/src/sentry/incidents/endpoints/project_alert_rule_index.py b/src/sentry/incidents/endpoints/project_alert_rule_index.py
index f216f46beb..5c97e647b7 100644
--- a/src/sentry/incidents/endpoints/project_alert_rule_index.py
+++ b/src/sentry/incidents/endpoints/project_alert_rule_index.py
@@ -13,6 +13,7 @@ from sentry.api.serializers import serialize, CombinedRuleSerializer
 from sentry.incidents.endpoints.serializers import AlertRuleSerializer
 from sentry.incidents.models import AlertRule
 from sentry.models import Rule, RuleStatus
+from sentry.signals import metric_alert_rule_created
 
 
 class ProjectCombinedRuleIndexEndpoint(ProjectEndpoint):
@@ -68,6 +69,9 @@ class ProjectAlertRuleIndexEndpoint(ProjectEndpoint):
 
         if serializer.is_valid():
             alert_rule = serializer.save()
+            metric_alert_rule_created.send_robust(
+                user=request.user, project=project, rule=alert_rule, sender=self
+            )
             return Response(serialize(alert_rule, request.user), status=status.HTTP_201_CREATED)
 
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/models/featureadoption.py b/src/sentry/models/featureadoption.py
index 3f42a2e7c9..126dc028f0 100644
--- a/src/sentry/models/featureadoption.py
+++ b/src/sentry/models/featureadoption.py
@@ -106,6 +106,8 @@ manager.add(81, "data_scrubbers", "Data Scrubbers", "admin", prerequisite=["firs
 manager.add(90, "release_created", "Create Release Using API", "api")
 manager.add(91, "deploy_created", "Create Deploy Using API", "api")
 
+manager.add(92, "metric_alert_rules", "Metric Alert Rules", "web", prerequisite=["first_event"])
+
 
 class FeatureAdoptionManager(BaseManager):
     def in_cache(self, organization_id, feature_id):
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index e63d53f548..107121f503 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -13,6 +13,7 @@ from sentry.signals import (
     advanced_search,
     advanced_search_feature_gated,
     alert_rule_created,
+    metric_alert_rule_created,
     data_scrubber_enabled,
     deploy_created,
     event_processed,
@@ -278,6 +279,27 @@ def record_alert_rule_created(user, project, rule, **kwargs):
     )
 
 
+@metric_alert_rule_created.connect(weak=False)
+def record_metric_alert_rule_created(user, project, rule, **kwargs):
+    FeatureAdoption.objects.record(
+        organization_id=project.organization_id, feature_slug="metric_alert_rules", complete=True
+    )
+
+    if user and user.is_authenticated():
+        user_id = default_user_id = user.id
+    else:
+        user_id = None
+        default_user_id = project.organization.get_default_owner().id
+
+    analytics.record(
+        "metric_alert.created",
+        user_id=user_id,
+        default_user_id=default_user_id,
+        organization_id=project.organization_id,
+        rule_id=rule.id,
+    )
+
+
 @plugin_enabled.connect(weak=False)
 def record_plugin_enabled(plugin, project, user, **kwargs):
     if isinstance(plugin, (IssueTrackingPlugin, IssueTrackingPlugin2)):
diff --git a/src/sentry/signals.py b/src/sentry/signals.py
index 41e899c994..4aaa12c5bb 100644
--- a/src/sentry/signals.py
+++ b/src/sentry/signals.py
@@ -86,6 +86,7 @@ inbound_filter_toggled = BetterSignal(providing_args=["project"])
 sso_enabled = BetterSignal(providing_args=["organization", "user", "provider"])
 data_scrubber_enabled = BetterSignal(providing_args=["organization"])
 alert_rule_created = BetterSignal(providing_args=["project", "rule", "user"])
+metric_alert_rule_created = BetterSignal(providing_args=["project", "alert_rule", "user"])
 repo_linked = BetterSignal(providing_args=["repo", "user"])
 release_created = BetterSignal(providing_args=["release"])
 deploy_created = BetterSignal(providing_args=["deploy"])
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 4b106ec9f6..ebf142875a 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -6,6 +6,7 @@ from sentry.models import FeatureAdoption, GroupAssignee, GroupTombstone, Rule
 from sentry.plugins.bases import IssueTrackingPlugin2, NotificationPlugin
 from sentry.signals import (
     alert_rule_created,
+    metric_alert_rule_created,
     event_processed,
     first_event_received,
     project_created,
@@ -533,6 +534,17 @@ class FeatureAdoptionTest(TestCase, SnubaTestCase):
         )
         assert feature_complete
 
+    def test_metric_alert_rules(self):
+        alert_rule = self.create_alert_rule()
+
+        metric_alert_rule_created.send(
+            user=self.owner, project=self.project, rule=alert_rule, sender=type(self.project)
+        )
+        feature_complete = FeatureAdoption.objects.get_by_slug(
+            organization=self.organization, slug="metric_alert_rules"
+        )
+        assert feature_complete
+
     def test_issue_tracker_plugin(self):
         plugin_enabled.send(
             plugin=IssueTrackingPlugin2(),
