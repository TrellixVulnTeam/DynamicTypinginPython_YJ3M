commit 4746d583cb365a713ff84d2e7dd741bfbf0445c8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 28 10:24:37 2018 -0700

    feat(ui): Add "Create Team Modal" (#7790)
    
    * Wrap form children so that last-child works when there is a footer
    * Add `addTeamToProject` action creator
    * Add `createTeam` action creator
    * Add `bypass` prop to `<Confirm>` modal to skip modal
    * ref(ui): "NarryLayout" --> "NarrowLayout"
    * refactor form from `teamCreate`, change browser direct to use react-router
    * feat(ui): Add "create team modal" + action creator
    * refactor `<AllTeamsList>` to be able to use create team modal if necessary
    * Change Organization Teams View to use create team modal flow
    * Change "project teams" view to use create team modal flow and to add team to project after creation
    * rename "projectTeamSettings" --> "projectTeams

diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index ca576a20cc..ab0e18b16a 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -105,6 +105,13 @@ storiesOf('Forms/Fields/New', module)
           placeholder="Type here to show the return button"
           showReturnButton
         />
+        <TextField
+          name="textfieldflexiblecontrol"
+          label="Text Field With Flexible Control State Size"
+          placeholder="Type text and then delete it"
+          required
+          flexibleControlStateSize
+        />
       </Form>
     ))
   )
diff --git a/src/sentry/static/sentry/app/actionCreators/modal.jsx b/src/sentry/static/sentry/app/actionCreators/modal.jsx
index 81f69fb1af..49dee6ec3a 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.jsx
@@ -33,3 +33,19 @@ export function openDiffModal(options) {
       })
     );
 }
+
+/**
+ * @param Object options
+ * @param Object options.organization The organization to create a team for
+ * @param Object options.project (optional) An initial project to add the team to. This may be deprecated soon as
+ * we may add a project selection inside of the modal flow
+ */
+export function openCreateTeamModal(options = {}) {
+  import(/* webpackChunkName: "CreateTeamModal" */ '../components/modals/createTeamModal')
+    .then(mod => mod.default)
+    .then(Modal => {
+      openModal(deps => <Modal {...deps} {...options} />, {
+        modalClassName: 'create-team-modal',
+      });
+    });
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 3c6f5326e9..81caa1fb01 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -84,3 +84,38 @@ export function transferProject(api, orgId, project, email) {
       }
     );
 }
+
+/**
+ * Associate a team with a project
+ */
+export function addTeamToProject(api, orgSlug, projectSlug, teamSlug) {
+  let endpoint = `/projects/${orgSlug}/${projectSlug}/teams/${teamSlug}/`;
+
+  return api
+    .requestPromise(endpoint, {
+      method: 'POST',
+    })
+    .then(
+      () => {
+        addSuccessMessage(
+          tct('[team] has been added to the [project] project', {
+            team: `#${teamSlug}`,
+            project: projectSlug,
+          }),
+          undefined,
+          {append: true}
+        );
+      },
+      err => {
+        addErrorMessage(
+          tct('Unable to add [team] to the [project] project', {
+            team: `#${teamSlug}`,
+            project: projectSlug,
+          }),
+          undefined,
+          {append: true}
+        );
+        throw err;
+      }
+    );
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/teams.jsx b/src/sentry/static/sentry/app/actionCreators/teams.jsx
index d2afce803f..8b8f66b5d6 100644
--- a/src/sentry/static/sentry/app/actionCreators/teams.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/teams.jsx
@@ -96,6 +96,38 @@ export function leaveTeam(api, params, options) {
   });
 }
 
+export function createTeam(api, team, params, options) {
+  TeamActions.createTeam(team);
+
+  return api
+    .requestPromise(`/organizations/${params.orgId}/teams/`, {
+      method: 'POST',
+      data: team,
+    })
+    .then(
+      data => {
+        TeamActions.createTeamSuccess(data);
+        addSuccessMessage(
+          tct('[team] has been add to the [organization] organization', {
+            team: `#${data.slug}`,
+            organization: params.orgId,
+          })
+        );
+        return data;
+      },
+      err => {
+        TeamActions.createTeamError(team.slug || team.name, err);
+        addErrorMessage(
+          tct('Unable to create [team] in the [organization] organization', {
+            team: `#${team.slug || team.name}`,
+            organization: params.orgId,
+          })
+        );
+        throw err;
+      }
+    );
+}
+
 export function removeTeam(api, params, options) {
   TeamActions.removeTeam(params.teamId);
 
@@ -107,7 +139,7 @@ export function removeTeam(api, params, options) {
       data => {
         TeamActions.removeTeamSuccess(params.teamId, data);
         addSuccessMessage(
-          tct('[team] has been removed from [organization]', {
+          tct('[team] has been removed from the [organization] organization', {
             team: `#${params.teamId}`,
             organization: params.orgId,
           })
@@ -117,7 +149,7 @@ export function removeTeam(api, params, options) {
       err => {
         TeamActions.removeTeamError(params.teamId, err);
         addErrorMessage(
-          tct('Unable to remove [team] from [organization]', {
+          tct('Unable to remove [team] from the [organization] organization', {
             team: `#${params.teamId}`,
             organization: params.orgId,
           })
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index 16b925b5a2..b8806d6385 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -10,6 +10,9 @@ let TeamActions = Reflux.createActions([
   'fetchDetails',
   'fetchDetailsSuccess',
   'fetchDetailsError',
+  'createTeam',
+  'createTeamSuccess',
+  'createTeamError',
   'removeTeam',
   'removeTeamSuccess',
   'removeTeamError',
diff --git a/src/sentry/static/sentry/app/components/confirm.jsx b/src/sentry/static/sentry/app/components/confirm.jsx
index 1832c3b23e..0d73d460ae 100644
--- a/src/sentry/static/sentry/app/components/confirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirm.jsx
@@ -11,6 +11,10 @@ class Confirm extends React.PureComponent {
     confirmText: PropTypes.string.isRequired,
     cancelText: PropTypes.string.isRequired,
     priority: PropTypes.oneOf(['primary', 'danger']).isRequired,
+    /**
+     * If true, will skip the confirmation modal and call `onConfirm`
+     */
+    bypass: PropTypes.bool,
     message: PropTypes.node,
     /**
      * Renderer that passes:
@@ -84,9 +88,14 @@ class Confirm extends React.PureComponent {
   };
 
   handleToggle = e => {
-    let {disabled} = this.props;
+    let {disabled, bypass} = this.props;
     if (disabled) return;
 
+    if (bypass) {
+      this.props.onConfirm();
+      return;
+    }
+
     // Current state is closed, means it will toggle open
     if (!this.state.isModalOpen) {
       this.openModal();
@@ -107,7 +116,6 @@ class Confirm extends React.PureComponent {
     } = this.props;
 
     let confirmMessage;
-
     if (typeof renderMessage === 'function') {
       confirmMessage = renderMessage({
         confirm: this.handleConfirm,
diff --git a/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx b/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx
new file mode 100644
index 0000000000..10c8cb0f04
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/createTeam/createTeamForm.jsx
@@ -0,0 +1,68 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {addSuccessMessage} from '../../actionCreators/indicator';
+import {t, tct} from '../../locale';
+import Form from '../../views/settings/components/forms/form';
+import SentryTypes from '../../proptypes';
+import TextField from '../../views/settings/components/forms/textField';
+
+export default class CreateTeamForm extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    onSuccess: PropTypes.func.isRequired,
+    onSubmit: PropTypes.func,
+  };
+
+  handleCreateTeamSuccess = data => {
+    addSuccessMessage(tct('Added team [team]', {team: `#${data.slug}`}));
+    this.props.onSuccess(data);
+  };
+
+  render() {
+    let {organization} = this.props;
+    let features = new Set(organization.features);
+
+    return (
+      <React.Fragment>
+        <p>
+          {t(
+            "Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects."
+          )}
+        </p>
+
+        <Form
+          submitLabel={t('Create Team')}
+          apiEndpoint={`/organizations/${organization.slug}/teams/`}
+          apiMethod="POST"
+          onSubmit={this.props.onSubmit}
+          onSubmitSuccess={this.handleCreateTeamSuccess}
+          requireChanges
+        >
+          {features.has('new-teams') ? (
+            <TextField
+              name="slug"
+              label={t('Team Slug')}
+              placeholder={t('e.g. operations, web-frontend, desktop')}
+              help={t('May contain letters, numbers, dashes and underscores.')}
+              required
+              flexibleControlStateSize
+              inline={false}
+              p={0}
+            />
+          ) : (
+            <TextField
+              name="name"
+              label={t('Team Name')}
+              placeholder={t('e.g. Operations, Web, Desktop')}
+              required
+              flexibleControlStateSize
+              inline={false}
+              p={0}
+            />
+          )}
+        </Form>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index 555276c3ba..b81ff3598c 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -66,7 +66,7 @@ class LazyLoad extends React.Component {
   handleFetchError = error => {
     // eslint-disable-next-line no-console
     console.error(error);
-    Raven.captureException(error);
+    Raven.captureException(error, {fingerprint: ['webpack', 'error loading chunk']});
     this.setState({
       error,
     });
diff --git a/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx b/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx
new file mode 100644
index 0000000000..0b38ce0350
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/modals/createTeamModal.jsx
@@ -0,0 +1,54 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {Client} from '../../api';
+import {createTeam} from '../../actionCreators/teams';
+import {t} from '../../locale';
+import CreateTeamForm from '../createTeam/createTeamForm';
+import SentryTypes from '../../proptypes';
+
+class CreateTeamModal extends React.Component {
+  static propTypes = {
+    closeModal: PropTypes.func,
+    onClose: PropTypes.func,
+    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    project: SentryTypes.Project,
+  };
+
+  handleSubmit = data => {
+    createTeam(new Client(), data, {orgId: this.props.organization.slug}).then(
+      this.handleSuccess
+    );
+  };
+
+  handleSuccess = data => {
+    if (this.props.onClose) {
+      this.props.onClose(data);
+    }
+
+    this.props.closeModal();
+  };
+
+  render() {
+    let {Body, Header, closeModal, ...props} = this.props;
+
+    return (
+      <React.Fragment>
+        <Header closeButton onHide={closeModal}>
+          {t('Create Team')}
+        </Header>
+        <Body>
+          <CreateTeamForm
+            {...props}
+            onSubmit={this.handleSubmit}
+            onSuccess={this.handleSuccess}
+          />
+        </Body>
+      </React.Fragment>
+    );
+  }
+}
+
+export default CreateTeamModal;
diff --git a/src/sentry/static/sentry/app/components/narrowLayout.jsx b/src/sentry/static/sentry/app/components/narrowLayout.jsx
index 9c3bede9aa..e3856f8621 100644
--- a/src/sentry/static/sentry/app/components/narrowLayout.jsx
+++ b/src/sentry/static/sentry/app/components/narrowLayout.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 
 import Footer from '../components/footer';
 
-class NarryLayout extends React.Component {
+class NarrowLayout extends React.Component {
   componentWillMount() {
     jQuery(document.body).addClass('narrow');
   }
@@ -32,4 +32,4 @@ class NarryLayout extends React.Component {
   }
 }
 
-export default NarryLayout;
+export default NarrowLayout;
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index f015800b3f..17a8cdc255 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -9,6 +9,7 @@ const TeamStore = Reflux.createStore({
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
     this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
     this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);
+    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);
   },
 
   reset() {
@@ -51,6 +52,10 @@ const TeamStore = Reflux.createStore({
     this.loadInitialData(this.items.filter(team => team.slug !== slug));
   },
 
+  onCreateSuccess(team) {
+    this.loadInitialData([...this.items, team]);
+  },
+
   getById(id) {
     return this.items.find(item => item.id.toString() === id.toString()) || null;
   },
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
index 2ff768d37d..138a47aade 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControl.jsx
@@ -45,13 +45,13 @@ class FieldControl extends React.Component {
     alignRight: PropTypes.bool,
     disabled: PropTypes.bool,
     disabledReason: PropTypes.node,
-    hideControlState: PropTypes.bool,
+    flexibleControlStateSize: PropTypes.bool,
     controlState: PropTypes.node,
     errorState: PropTypes.node,
   };
 
   static defaultProps = {
-    hideControlState: false,
+    flexibleControlStateSize: false,
   };
 
   render() {
@@ -60,7 +60,7 @@ class FieldControl extends React.Component {
       alignRight,
       disabled,
       disabledReason,
-      hideControlState,
+      flexibleControlStateSize,
       errorState,
       controlState,
       children,
@@ -80,7 +80,9 @@ class FieldControl extends React.Component {
               </Tooltip>
             )}
 
-          {!hideControlState && <FieldControlState>{controlState}</FieldControlState>}
+          <FieldControlState flexibleControlStateSize={flexibleControlStateSize}>
+            {controlState}
+          </FieldControlState>
         </FieldControlWrapper>
 
         {errorState}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx
index 3e7f89b72a..96af69c25b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldControlState.jsx
@@ -1,10 +1,13 @@
+import React from 'react';
 import styled from 'react-emotion';
 import {Flex} from 'grid-emotion';
 
 const width = '36px';
-const FieldControlState = styled(Flex)`
+const FieldControlState = styled(({flexibleControlStateSize, ...props}) => (
+  <Flex {...props} />
+))`
   position: relative;
-  width: ${width};
+  ${p => !p.flexibleControlStateSize && `width: ${width}`};
   flex-shrink: 0;
   justify-content: center;
   align-items: center;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
index 4f9368bad5..91a96bff9d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/fieldWrapper.jsx
@@ -19,13 +19,20 @@ const highlightedStyle = p =>
       `
     : '';
 
+const getPadding = props => {
+  if (typeof props.p !== 'undefined') {
+    return `padding: ${props.p};`;
+  }
+  return `padding: 0.9em ${props.hasControlState ? '0' : '1.3em'} 0.9em 1.3em;`;
+};
+
 /**
  * `hasControlState` - adds padding to right if this is false
  */
-const FieldWrapper = styled(({highlighted, inline, hasControlState, ...props}) => (
+const FieldWrapper = styled(({highlighted, inline, hasControlState, p, ...props}) => (
   <Flex {...props} />
 ))`
-  padding: 0.9em ${p => (p.hasControlState ? '0' : '1.3em')} 0.9em 1.3em;
+  ${getPadding};
   border-bottom: 1px solid ${p => p.theme.borderLight};
   transition: background 0.15s;
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
index 2e6f2f143e..bd9f4309de 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/field/index.jsx
@@ -27,6 +27,11 @@ class Field extends React.Component {
      */
     highlighted: PropTypes.bool,
 
+    /**
+     * Padding
+     */
+    p: PropTypes.number,
+
     /**
      * Show "required" indicator
      */
@@ -50,7 +55,7 @@ class Field extends React.Component {
     /**
      * Hide ControlState component
      */
-    hideControlState: PropTypes.bool,
+    flexibleControlStateSize: PropTypes.bool,
 
     /**
      * User-facing field name
@@ -95,10 +100,11 @@ class Field extends React.Component {
       visible,
       disabled,
       disabledReason,
-      hideControlState,
+      flexibleControlStateSize,
       label,
       help,
       id,
+      p,
       children,
     } = this.props;
     let isDisabled = typeof disabled === 'function' ? disabled(this.props) : disabled;
@@ -109,33 +115,30 @@ class Field extends React.Component {
       return null;
     }
 
+    let controlProps = {
+      inline,
+      alignRight,
+      disabled: isDisabled,
+      disabledReason,
+      flexibleControlStateSize,
+    };
+
     // See comments in prop types
     if (typeof children === 'function') {
       Control = children({
         ...this.props,
-        alignRight,
-        disabled: isDisabled,
-        disabledReason,
+        ...controlProps,
       });
     } else {
-      Control = (
-        <FieldControl
-          inline={inline}
-          alignRight={alignRight}
-          disabled={isDisabled}
-          disabledReason={disabledReason}
-          hideControlState={hideControlState}
-        >
-          {children}
-        </FieldControl>
-      );
+      Control = <FieldControl {...controlProps}>{children}</FieldControl>;
     }
 
     return (
       <FieldWrapper
+        p={p}
         inline={inline}
         highlighted={highlighted}
-        hasControlState={!hideControlState}
+        hasControlState={!flexibleControlStateSize}
       >
         <FieldDescription inline={inline} htmlFor={id}>
           {label && (
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
index ab866714a3..5d224e05bf 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
@@ -134,7 +134,7 @@ export default class Form extends React.Component {
 
     return (
       <form onSubmit={this.onSubmit} className={className}>
-        {children}
+        <div>{children}</div>
 
         {shouldShowFooter && (
           <div className={footerClass} style={{marginTop: 25, ...footerStyle}}>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index 2376f36478..9729fea332 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -67,6 +67,10 @@ const getValueFromEvent = (valueOrEvent, e) => {
   };
 };
 
+const ControlStateWrapper = styled('div')`
+  padding: 0 8px;
+`;
+
 /**
  * ControlState (i.e. loading/error icons) for connected form components
  */
@@ -87,12 +91,18 @@ class ControlState extends React.Component {
             let isSaved = model.getFieldState(name, FormState.READY);
 
             if (isSaving) {
-              return <FormSpinner />;
+              return (
+                <ControlStateWrapper>
+                  <FormSpinner />
+                </ControlStateWrapper>
+              );
             } else if (isSaved) {
               return (
-                <FormFieldIsSaved>
-                  <InlineSvg src="icon-checkmark-sm" size="18px" />
-                </FormFieldIsSaved>
+                <ControlStateWrapper>
+                  <FormFieldIsSaved>
+                    <InlineSvg src="icon-checkmark-sm" size="18px" />
+                  </FormFieldIsSaved>
+                </ControlStateWrapper>
               );
             }
 
@@ -107,9 +117,11 @@ class ControlState extends React.Component {
             if (!error) return null;
 
             return (
-              <FormFieldError>
-                <InlineSvg src="icon-warning-sm" size="18px" />
-              </FormFieldError>
+              <ControlStateWrapper>
+                <FormFieldError>
+                  <InlineSvg src="icon-warning-sm" size="18px" />
+                </FormFieldError>
+              </ControlStateWrapper>
             );
           }}
         </Observer>
@@ -134,6 +146,10 @@ class FormField extends React.Component {
      * Should hide error message?
      */
     hideErrorMessage: PropTypes.bool,
+    /**
+     * Hides control state component
+     */
+    flexibleControlStateSize: PropTypes.bool,
 
     // the following should only be used without form context
     onChange: PropTypes.func,
@@ -145,6 +161,7 @@ class FormField extends React.Component {
 
   static defaultProps = {
     hideErrorMessage: false,
+    flexibleControlStateSize: false,
   };
 
   static contextTypes = {
@@ -241,7 +258,13 @@ class FormField extends React.Component {
   };
 
   render() {
-    let {name, showReturnButton, hideErrorMessage, ...props} = this.props;
+    let {
+      name,
+      showReturnButton,
+      hideErrorMessage,
+      flexibleControlStateSize,
+      ...props
+    } = this.props;
     let id = this.getId();
     let model = this.getModel();
 
@@ -253,6 +276,7 @@ class FormField extends React.Component {
             disabledReason={disabledReason}
             inline={inline}
             alignRight={alignRight}
+            flexibleControlStateSize={flexibleControlStateSize}
             controlState={<ControlState model={model} name={name} />}
             errorState={
               <Observer>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
index ab106eea0b..8b5613eb6c 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/inputField.jsx
@@ -7,7 +7,7 @@ import Input from './controls/input';
 export default class InputField extends React.Component {
   static propTypes = {
     ...FormField.propTypes,
-    field: PropTypes.func.isRequired,
+    field: PropTypes.func,
   };
 
   static defaultProps = {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx
index 3613ec4f3a..99bc2e1557 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/textField.jsx
@@ -2,6 +2,10 @@ import React from 'react';
 import InputField from './inputField';
 
 export default class TextField extends React.Component {
+  static propTypes = {
+    ...InputField.propTypes,
+  };
+
   render() {
     return <InputField {...this.props} type="text" />;
   }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
index 9fca53729f..3bfc57a8ce 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectKeys/projectKeyCredentials.jsx
@@ -50,7 +50,7 @@ class ProjectKeyCredentials extends React.Component {
     return (
       <React.Fragment>
         {showDsn && (
-          <Field label={t('DSN')} inline={false} hideControlState>
+          <Field label={t('DSN')} inline={false} flexibleControlStateSize>
             <TextCopyInput>
               {getDynamicText({
                 value: data.dsn.secret,
@@ -77,7 +77,7 @@ class ProjectKeyCredentials extends React.Component {
               }
             )}
             inline={false}
-            hideControlState
+            flexibleControlStateSize
           >
             <TextCopyInput>
               {getDynamicText({
@@ -102,7 +102,7 @@ class ProjectKeyCredentials extends React.Component {
               }
             )}
             inline={false}
-            hideControlState
+            flexibleControlStateSize
           >
             <TextCopyInput>
               {getDynamicText({
@@ -127,7 +127,7 @@ class ProjectKeyCredentials extends React.Component {
                 }
               )}
               inline={false}
-              hideControlState
+              flexibleControlStateSize
             >
               <TextCopyInput>
                 {getDynamicText({
@@ -142,7 +142,7 @@ class ProjectKeyCredentials extends React.Component {
           )}
 
         {showPublicKey && (
-          <Field label={t('Public Key')} inline={true} hideControlState>
+          <Field label={t('Public Key')} inline={true} flexibleControlStateSize>
             <TextCopyInput>
               {getDynamicText({
                 value: data.public,
@@ -153,7 +153,7 @@ class ProjectKeyCredentials extends React.Component {
         )}
 
         {showSecretKey && (
-          <Field label={t('Secret Key')} inline={true} hideControlState>
+          <Field label={t('Secret Key')} inline={true} flexibleControlStateSize>
             <TextCopyInput>
               {getDynamicText({
                 value: data.secret,
@@ -164,7 +164,7 @@ class ProjectKeyCredentials extends React.Component {
         )}
 
         {showProjectId && (
-          <Field label={t('Project ID')} inline={true} hideControlState>
+          <Field label={t('Project ID')} inline={true} flexibleControlStateSize>
             <TextCopyInput>
               {getDynamicText({
                 value: projectId,
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
index f4de5260fe..4829c13caf 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -9,15 +9,18 @@ import {
   addSuccessMessage,
   removeIndicator,
 } from '../../../actionCreators/indicator';
+import {addTeamToProject} from '../../../actionCreators/projects';
+import {getOrganizationState} from '../../../mixins/organizationState';
+import {openCreateTeamModal} from '../../../actionCreators/modal';
 import {t} from '../../../locale';
 import ApiMixin from '../../../mixins/apiMixin';
 import AsyncView from '../../asyncView';
 import Button from '../../../components/buttons/button';
 import Confirm from '../../../components/confirm';
-import InlineSvg from '../../../components/inlineSvg';
 import DropdownAutoComplete from '../../../components/dropdownAutoComplete';
 import DropdownButton from '../../../components/dropdownButton';
 import EmptyMessage from '../components/emptyMessage';
+import InlineSvg from '../../../components/inlineSvg';
 import Link from '../../../components/link';
 import Panel from '../components/panel';
 import PanelBody from '../components/panelBody';
@@ -92,6 +95,7 @@ const TeamRow = createReactClass({
                   )
                 : t('Are you sure you want to remove this team?')
             }
+            bypass={this.props.teamCount > 1}
             onConfirm={this.handleRemove}
             disabled={this.state.loading}
           >
@@ -114,7 +118,7 @@ class ProjectTeams extends AsyncView {
     ];
   }
 
-  handleRemovedTeam(removedTeam) {
+  handleRemovedTeam = removedTeam => {
     this.setState(prevState => {
       return {
         projectTeams: this.state.projectTeams.filter(team => {
@@ -122,43 +126,53 @@ class ProjectTeams extends AsyncView {
         }),
       };
     });
-  }
+  };
 
-  handleAddedTeam(team) {
+  handleAddedTeam = team => {
     this.setState(prevState => {
       return {
         projectTeams: this.state.projectTeams.concat([team]),
       };
     });
-  }
+  };
 
   handleAdd = selection => {
     if (this.state.loading) return;
 
     let team = this.state.allTeams.find(tm => tm.id === selection.value);
 
-    let loadingIndicator = addLoadingMessage(t('Saving changes...'));
     let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/teams/${team.slug}/`, {
-      method: 'POST',
-      success: (d, _, jqXHR) => {
+
+    addTeamToProject(this.api, orgId, projectId, team.slug).then(
+      () => {
         this.handleAddedTeam(team);
-        addSuccessMessage(t(`#${team.slug} has been added to project`));
-        removeIndicator(loadingIndicator);
       },
-      error: () => {
+      () => {
         this.setState({
           error: true,
           loading: false,
         });
-        addErrorMessage(t(`Unable to add #${team.slug} to project`));
-        removeIndicator(loadingIndicator);
+      }
+    );
+  };
+
+  handleCreateTeam = e => {
+    let {project, organization} = this.props;
+    e.stopPropagation();
+    e.preventDefault();
+    openCreateTeamModal({
+      project,
+      organization,
+      onClose: data => {
+        addTeamToProject(this.api, organization.slug, project.slug, data.slug).then(
+          this.remountComponent,
+          this.remountComponent
+        );
       },
     });
   };
 
-  renderAddTeamButton() {
-    let {orgId} = this.props.params;
+  renderAddTeamToProject() {
     let projectTeams = new Set(this.state.projectTeams.map(team => team.slug));
     let teamsToAdd = this.state.allTeams
       .filter(team => {
@@ -173,7 +187,7 @@ class ProjectTeams extends AsyncView {
     let menuHeader = (
       <StyledTeamsLabel>
         {t('Teams')}
-        <StyledCreateTeamLink to={`/organizations/${orgId}/teams/new/`}>
+        <StyledCreateTeamLink onClick={this.handleCreateTeam}>
           {t('Create Team')}
         </StyledCreateTeamLink>
       </StyledTeamsLabel>
@@ -229,13 +243,36 @@ class ProjectTeams extends AsyncView {
     if (this.state.projectTeams.length > 0) body = this.renderResults();
     else body = this.renderEmpty();
 
+    let {organization} = this.props;
+    let canCreateTeams = getOrganizationState(organization)
+      .getAccess()
+      .has('project:admin');
+
     return (
       <div>
-        <SettingsPageHeader title={t('Teams')} />
+        <SettingsPageHeader
+          title={t('Teams')}
+          action={
+            <Button
+              priority="primary"
+              size="small"
+              disabled={!canCreateTeams}
+              title={
+                !canCreateTeams
+                  ? t('You do not have permission to create teams')
+                  : undefined
+              }
+              onClick={this.handleCreateTeam}
+              icon="icon-circle-add"
+            >
+              {t('Create Team')}
+            </Button>
+          }
+        />
         <Panel>
           <PanelHeader hasButtons={true}>
             <div>{t('Team')}</div>
-            <div>{this.renderAddTeamButton()}</div>
+            <div>{this.renderAddTeamToProject()}</div>
           </PanelHeader>
           {body}
         </Panel>
diff --git a/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx b/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
index dfd6258671..24c6c48223 100644
--- a/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/allTeamsList.jsx
@@ -2,6 +2,7 @@ import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {openCreateTeamModal} from '../../../actionCreators/modal';
 import {tct} from '../../../locale';
 import AllTeamsRow from './allTeamsRow';
 import EmptyMessage from '../components/emptyMessage';
@@ -15,10 +16,24 @@ class AllTeamsList extends React.Component {
     organization: SentryTypes.Organization,
     teamList: PropTypes.arrayOf(SentryTypes.Team),
     openMembership: PropTypes.bool,
+    useCreateModal: PropTypes.bool,
+  };
+
+  handleCreateTeam = e => {
+    let {useCreateModal, organization} = this.props;
+
+    if (!useCreateModal) return;
+
+    e.preventDefault();
+
+    openCreateTeamModal({
+      organization,
+      onClose: () => {},
+    });
   };
 
   render() {
-    let {access, organization, urlPrefix, openMembership} = this.props;
+    let {access, organization, urlPrefix, openMembership, useCreateModal} = this.props;
     let teamNodes = this.props.teamList.map((team, teamIdx) => {
       return (
         <AllTeamsRow
@@ -36,13 +51,12 @@ class AllTeamsList extends React.Component {
       return teamNodes;
     }
 
-    // TODO(jess): update this link to use url prefix when create team
-    // has been moved to new settings
+    let to = useCreateModal ? '#' : `/organizations/${organization.slug}/teams/new/`;
     return (
       <EmptyMessage>
         {tct('No teams here. You can always [link:create one].', {
           root: <TextBlock noMargin />,
-          link: <Link to={`/organizations/${organization.slug}/teams/new/`} />,
+          link: <Link to={to} onClick={this.handleCreateTeam} />,
         })}
       </EmptyMessage>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx b/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
index 421ea25a6a..0226aa1a70 100644
--- a/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/organizationTeamsView.jsx
@@ -1,16 +1,17 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import SentryTypes from '../../../proptypes';
+import {getOrganizationState} from '../../../mixins/organizationState';
+import {openCreateTeamModal} from '../../../actionCreators/modal';
 import {t} from '../../../locale';
 import AllTeamsList from './allTeamsList';
-import {getOrganizationState} from '../../../mixins/organizationState';
+import Button from '../../../components/buttons/button';
 import Panel from '../components/panel';
-import PanelHeader from '../components/panelHeader';
 import PanelBody from '../components/panelBody';
-import Button from '../../../components/buttons/button';
-import recreateRoute from '../../../utils/recreateRoute';
+import PanelHeader from '../components/panelHeader';
+import SentryTypes from '../../../proptypes';
 import SettingsPageHeader from '../components/settingsPageHeader';
+import recreateRoute from '../../../utils/recreateRoute';
 
 class OrganizationTeamsView extends React.Component {
   static propTypes = {
@@ -49,7 +50,10 @@ class OrganizationTeamsView extends React.Component {
         title={
           !canCreateTeams ? t('You do not have permission to create teams') : undefined
         }
-        to={`/organizations/${organization.slug}/teams/new/`}
+        onClick={() =>
+          openCreateTeamModal({
+            organization,
+          })}
         icon="icon-circle-add"
       >
         {t('Create Team')}
@@ -69,6 +73,7 @@ class OrganizationTeamsView extends React.Component {
           <PanelHeader>{t('Your Teams')}</PanelHeader>
           <PanelBody>
             <AllTeamsList
+              useCreateModal
               urlPrefix={urlPrefix}
               organization={org}
               teamList={activeTeams}
@@ -81,6 +86,7 @@ class OrganizationTeamsView extends React.Component {
           <PanelHeader>{t('Other Teams')}</PanelHeader>
           <PanelBody>
             <AllTeamsList
+              useCreateModal
               urlPrefix={urlPrefix}
               organization={org}
               teamList={otherTeams}
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
index f9d5c17ee9..8315d69f7a 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.jsx
@@ -41,6 +41,10 @@ export default class TeamSettings extends AsyncView {
     return 'Team Settings';
   }
 
+  getEndpoints() {
+    return [];
+  }
+
   handleSubmitSuccess = (resp, model, id, change) => {
     if (id === 'slug') {
       addLoadingMessage(t('Slug changed, refreshing page...'));
@@ -53,6 +57,7 @@ export default class TeamSettings extends AsyncView {
       this.setState({loading: true});
     }
   };
+
   handleRemoveTeam = () => {
     removeTeam(this.api, this.props.params).then(data => {
       this.props.router.push(`/settings/${this.props.params.orgId}/teams/`);
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx b/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx
index f8d362c3f7..0a5a5cbef0 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamSettings.old.jsx
@@ -16,6 +16,10 @@ export default class TeamSettings extends AsyncView {
     return 'Team Settings';
   }
 
+  getEndpoints() {
+    return [];
+  }
+
   renderBody() {
     let {orgId, teamId} = this.props.params;
     let team = this.props.team;
diff --git a/src/sentry/static/sentry/app/views/teamCreate.jsx b/src/sentry/static/sentry/app/views/teamCreate.jsx
index 970e28f3d3..751fdc3d25 100644
--- a/src/sentry/static/sentry/app/views/teamCreate.jsx
+++ b/src/sentry/static/sentry/app/views/teamCreate.jsx
@@ -1,17 +1,26 @@
+import {withRouter} from 'react-router';
 import React from 'react';
 
+import {t} from '../locale';
 import AsyncView from './asyncView';
+import CreateTeamForm from '../components/createTeam/createTeamForm';
 import NarrowLayout from '../components/narrowLayout';
-import {ApiForm, TextField} from '../components/forms';
 import SentryTypes from '../proptypes';
-import {t} from '../locale';
 
-export default class TeamCreate extends AsyncView {
+class TeamCreate extends AsyncView {
   static contextTypes = {
     organization: SentryTypes.Organization,
   };
 
-  onSubmitSuccess = data => {
+  getTitle() {
+    return 'Create Team';
+  }
+
+  getEndpoints() {
+    return [];
+  }
+
+  handleSubmitSuccess = data => {
     let features = new Set(this.context.organization.features);
 
     let {orgId} = this.props.params;
@@ -22,55 +31,22 @@ export default class TeamCreate extends AsyncView {
       // New behavior: redirect to team settings page
       redirectUrl = `/settings/${orgId}/teams/${data.slug}/`;
     }
-    window.location.assign(redirectUrl);
+    this.props.router.push(redirectUrl);
   };
 
-  getTitle() {
-    return 'Create Team';
-  }
-
-  renderField() {
-    let features = new Set(this.context.organization.features);
-    return features.has('new-teams') ? (
-      <TextField
-        name="slug"
-        label={t('Team Slug')}
-        placeholder={t('e.g. operations, web-frontend, desktop')}
-        help={t('May contain letters, numbers, dashes and underscores.')}
-        required={true}
-      />
-    ) : (
-      <TextField
-        name="name"
-        label={t('Team Name')}
-        placeholder={t('e.g. Operations, Web, Desktop')}
-        required={true}
-      />
-    );
-  }
-
   renderBody() {
-    let {orgId} = this.props.params;
     return (
       <NarrowLayout>
         <h3>{t('Create a New Team')}</h3>
 
-        <p>
-          {t(
-            "Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects."
-          )}
-        </p>
-
-        <ApiForm
-          submitLabel={t('Save Changes')}
-          apiEndpoint={`/organizations/${orgId}/teams/`}
-          apiMethod="POST"
-          onSubmitSuccess={this.onSubmitSuccess}
-          requireChanges={true}
-        >
-          {this.renderField()}
-        </ApiForm>
+        <CreateTeamForm
+          onSuccess={this.handleSubmitSuccess}
+          organization={this.context.organization}
+        />
       </NarrowLayout>
     );
   }
 }
+
+export {TeamCreate};
+export default withRouter(TeamCreate);
diff --git a/tests/js/spec/components/modals/createTeamModal.spec.jsx b/tests/js/spec/components/modals/createTeamModal.spec.jsx
new file mode 100644
index 0000000000..704c1db6df
--- /dev/null
+++ b/tests/js/spec/components/modals/createTeamModal.spec.jsx
@@ -0,0 +1,44 @@
+import {Modal} from 'react-bootstrap';
+import React from 'react';
+
+import {createTeam} from 'app/actionCreators/teams';
+import {mount} from 'enzyme';
+import CreateTeamModal from 'app/components/modals/createTeamModal';
+
+jest.mock('app/actionCreators/teams', () => ({
+  createTeam: jest.fn((...args) => new Promise(resolve => resolve(...args))),
+}));
+
+describe('CreateTeamModal', function() {
+  let org = TestStubs.Organization({features: ['new-teams']});
+  let closeModal = jest.fn();
+  let onClose = jest.fn();
+
+  beforeEach(function() {});
+
+  afterEach(function() {});
+
+  it('calls createTeam action creator on submit', async function() {
+    let wrapper = mount(
+      <CreateTeamModal
+        Body={Modal.Body}
+        Header={Modal.Header}
+        organization={org}
+        closeModal={closeModal}
+        onClose={onClose}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('CreateTeamForm Input[name="slug"]')
+      .simulate('change', {e: {target: {value: 'new-team'}}});
+
+    wrapper.find('CreateTeamForm Form').simulate('submit');
+
+    expect(createTeam).toHaveBeenCalled();
+    await tick();
+    expect(onClose).toHaveBeenCalled();
+    expect(closeModal).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/sudoModal.spec.jsx b/tests/js/spec/components/modals/sudoModal.spec.jsx
similarity index 100%
rename from tests/js/spec/sudoModal.spec.jsx
rename to tests/js/spec/components/modals/sudoModal.spec.jsx
diff --git a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
index 606c5136f6..8c24862bd3 100644
--- a/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/apiNewToken.spec.jsx.snap
@@ -4,7 +4,7 @@ exports[`ApiNewToken render() renders 1`] = `
 <SideEffect(DocumentTitle)
   title="Create API Token - Sentry"
 >
-  <NarryLayout>
+  <NarrowLayout>
     <h3>
       Create New Token
     </h3>
@@ -134,6 +134,6 @@ exports[`ApiNewToken render() renders 1`] = `
         required={true}
       />
     </ApiForm>
-  </NarryLayout>
+  </NarrowLayout>
 </SideEffect(DocumentTitle)>
 `;
diff --git a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
index 82df239002..4acacbac94 100644
--- a/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationCreate.spec.jsx.snap
@@ -4,7 +4,7 @@ exports[`OrganizationCreate render() renders with terms 1`] = `
 <SideEffect(DocumentTitle)
   title="Create Organization - Sentry"
 >
-  <NarryLayout>
+  <NarrowLayout>
     <h3>
       Create a New Organization
     </h3>
@@ -70,7 +70,7 @@ exports[`OrganizationCreate render() renders with terms 1`] = `
         required={true}
       />
     </ApiForm>
-  </NarryLayout>
+  </NarrowLayout>
 </SideEffect(DocumentTitle)>
 `;
 
@@ -78,7 +78,7 @@ exports[`OrganizationCreate render() renders without terms 1`] = `
 <SideEffect(DocumentTitle)
   title="Create Organization - Sentry"
 >
-  <NarryLayout>
+  <NarrowLayout>
     <h3>
       Create a New Organization
     </h3>
@@ -113,6 +113,6 @@ exports[`OrganizationCreate render() renders without terms 1`] = `
         required={true}
       />
     </ApiForm>
-  </NarryLayout>
+  </NarrowLayout>
 </SideEffect(DocumentTitle)>
 `;
diff --git a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap
similarity index 84%
rename from tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
rename to tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap
index 91436fce8d..72620eb7cc 100644
--- a/tests/js/spec/views/__snapshots__/projectTeamSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectTeams.spec.jsx.snap
@@ -1,11 +1,23 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`ProjectTeamsSettings render() renders 1`] = `
+exports[`ProjectTeams renders 1`] = `
 <SideEffect(DocumentTitle)
   title="Sentry"
 >
   <div>
     <SettingsPageHeading
+      action={
+        <Button
+          disabled={false}
+          icon="icon-circle-add"
+          onClick={[Function]}
+          priority="primary"
+          size="small"
+          title={undefined}
+        >
+          Create Team
+        </Button>
+      }
       title="Teams"
     />
     <Panel>
@@ -34,7 +46,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
               <StyledTeamsLabel>
                 Teams
                 <StyledCreateTeamLink
-                  to="/organizations/org-slug/teams/new/"
+                  onClick={[Function]}
                 >
                   Create Team
                 </StyledCreateTeamLink>
diff --git a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
index f8d08c7f05..01d7d00387 100644
--- a/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/teamCreate.spec.jsx.snap
@@ -4,36 +4,39 @@ exports[`TeamCreate render() renders correctly 1`] = `
 <SideEffect(DocumentTitle)
   title="Create Team - Sentry"
 >
-  <NarryLayout>
+  <NarrowLayout>
     <h3>
       Create a New Team
     </h3>
-    <p>
-      Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.
-    </p>
-    <ApiForm
-      apiEndpoint="/organizations/org/teams/"
-      apiMethod="POST"
-      cancelLabel="Cancel"
-      className="form-stacked"
-      errorMessage="Unable to save your changes. Please ensure all fields are valid and try again."
-      footerClass="form-actions align-right"
-      hideErrors={false}
-      onSubmitSuccess={[Function]}
-      requireChanges={true}
-      resetOnError={false}
-      submitDisabled={false}
-      submitLabel="Save Changes"
-    >
-      <TextField
-        disabled={false}
-        hideErrorMessage={false}
-        label="Team Name"
-        name="name"
-        placeholder="e.g. Operations, Web, Desktop"
-        required={true}
-      />
-    </ApiForm>
-  </NarryLayout>
+    <CreateTeamForm
+      onSuccess={[Function]}
+      organization={
+        Object {
+          "access": Array [
+            "org:read",
+            "org:write",
+            "org:admin",
+            "project:read",
+            "project:write",
+            "project:admin",
+            "team:read",
+            "team:write",
+            "team:admin",
+          ],
+          "features": Array [],
+          "id": "3",
+          "name": "Organization Name",
+          "onboardingTasks": Array [],
+          "projects": Array [],
+          "slug": "org-slug",
+          "status": Object {
+            "id": "active",
+            "name": "active",
+          },
+          "teams": Array [],
+        }
+      }
+    />
+  </NarrowLayout>
 </SideEffect(DocumentTitle)>
 `;
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index 407571a8be..e9acdca7e2 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -12,7 +12,10 @@ describe('GroupActivity', function() {
   beforeEach(function() {
     sandbox = sinon.sandbox.create();
 
-    sandbox.stub(ConfigStore, 'get').withArgs('user').returns({});
+    sandbox
+      .stub(ConfigStore, 'get')
+      .withArgs('user')
+      .returns({});
   });
 
   afterEach(function() {
@@ -23,7 +26,7 @@ describe('GroupActivity', function() {
     let wrapper = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
       context: {
         group: {id: '1337'},
-        project: {id: 'foo', slug: 'foo', name: 'Foo'},
+        project: TestStubs.Project(),
         team: {id: '1'},
         organization: {id: 'bar'},
       },
@@ -38,7 +41,7 @@ describe('GroupActivity', function() {
       instance = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
         context: {
           group: {id: '1337'},
-          project: {id: 'foo', slug: 'foo', name: 'Foo'},
+          project: TestStubs.Project(),
           team: {id: '1'},
           organization: {id: 'bar'},
         },
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index 7e96cf25aa..a8aaddb096 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -1,10 +1,18 @@
 import React from 'react';
-import {shallow} from 'enzyme';
+import {mount, shallow} from 'enzyme';
 
 import {Client} from 'app/api';
 import OrganizationTeams from 'app/views/organizationTeams';
+import OrganizationTeamsView from 'app/views/settings/team/organizationTeamsView';
+import {openCreateTeamModal} from 'app/actionCreators/modal';
+
+jest.mock('app/actionCreators/modal', () => ({
+  openCreateTeamModal: jest.fn(),
+}));
 
 describe('OrganizationTeams', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
   let sandbox;
   let stubbedApiRequest;
 
@@ -34,4 +42,33 @@ describe('OrganizationTeams', function() {
       expect(stubbedApiRequest.getCall(0).args[0]).toEqual('/organizations/123/stats/');
     });
   });
+
+  describe('New Settings', function() {
+    it('opens "create team modal" when creating a new team from header', function() {
+      let wrapper = mount(
+        <OrganizationTeamsView
+          params={{orgId: org.slug, projectId: project.slug}}
+          routes={[]}
+          allTeams={[TestStubs.Team()]}
+          access={new Set(['org:write'])}
+          features={new Set([])}
+          activeTeams={[]}
+          organization={org}
+        />,
+        TestStubs.routerContext()
+      );
+
+      // Click "Create Team" in Panel Header
+      wrapper.find('SettingsPageHeading Button').simulate('click');
+
+      // action creator to open "create team modal" is called
+      expect(openCreateTeamModal).toHaveBeenCalledWith(
+        expect.objectContaining({
+          organization: expect.objectContaining({
+            slug: org.slug,
+          }),
+        })
+      );
+    });
+  });
 });
diff --git a/tests/js/spec/views/projectTeamSettings.spec.jsx b/tests/js/spec/views/projectTeamSettings.spec.jsx
deleted file mode 100644
index d730ef694b..0000000000
--- a/tests/js/spec/views/projectTeamSettings.spec.jsx
+++ /dev/null
@@ -1,139 +0,0 @@
-import React from 'react';
-import {shallow, mount} from 'enzyme';
-
-import {Client} from 'app/api';
-import ProjectTeams from 'app/views/settings/project/projectTeams';
-
-describe('ProjectTeamsSettings', function() {
-  let org;
-  let project;
-  let team;
-  let team2 = {
-    id: '2',
-    slug: 'team-slug-2',
-    name: 'Team Name 2',
-    hasAccess: true,
-  };
-
-  beforeEach(function() {
-    org = TestStubs.Organization();
-    project = TestStubs.ProjectDetails();
-    team = TestStubs.Team();
-
-    Client.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/`,
-      method: 'GET',
-      body: project,
-    });
-    Client.addMockResponse({
-      url: `/projects/${org.slug}/${project.slug}/teams/`,
-      method: 'GET',
-      body: [team],
-    });
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/teams/`,
-      method: 'GET',
-      body: [team, team2],
-    });
-  });
-
-  describe('render()', function() {
-    it('renders', function() {
-      let wrapper = shallow(
-        <ProjectTeams
-          params={{orgId: org.slug, projectId: project.slug}}
-          organization={org}
-        />,
-        {
-          context: {
-            router: TestStubs.router(),
-          },
-        }
-      );
-      expect(wrapper).toMatchSnapshot();
-    });
-  });
-
-  describe('TeamRow.handleRemove()', function() {
-    it('can remove a team', function() {
-      let endpoint = `/projects/${org.slug}/${project.slug}/teams/${team.slug}/`;
-      let mock = Client.addMockResponse({
-        url: endpoint,
-        method: 'DELETE',
-        statusCode: 200,
-      });
-
-      let wrapper = mount(
-        <ProjectTeams
-          params={{orgId: org.slug, projectId: project.slug}}
-          organization={org}
-        />,
-        {
-          context: {
-            router: TestStubs.router(),
-          },
-        }
-      );
-
-      expect(mock).not.toHaveBeenCalled();
-
-      // open modal
-      wrapper
-        .find('Button')
-        .at(1)
-        .simulate('click');
-
-      // click confirm
-      wrapper
-        .find('.modal-footer')
-        .find('button.button-primary')
-        .simulate('click');
-
-      expect(mock).toHaveBeenCalledWith(
-        endpoint,
-        expect.objectContaining({
-          method: 'DELETE',
-        })
-      );
-    });
-  });
-
-  describe('ProjectTeams.handleAdd()', function() {
-    it('can add a team', function() {
-      let endpoint = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
-      let mock = Client.addMockResponse({
-        url: endpoint,
-        method: 'POST',
-        statusCode: 200,
-      });
-
-      let wrapper = mount(
-        <ProjectTeams
-          params={{orgId: org.slug, projectId: project.slug}}
-          organization={org}
-        />,
-        {
-          context: {
-            router: TestStubs.router(),
-          },
-        }
-      );
-
-      expect(mock).not.toHaveBeenCalled();
-
-      // open dropdown
-      wrapper.find('DropdownButton').simulate('click');
-
-      // click a team
-      let el = wrapper.find('AutoCompleteItem').first();
-      el.simulate('click');
-
-      expect(mock).toHaveBeenCalledWith(
-        endpoint,
-        expect.objectContaining({
-          method: 'POST',
-        })
-      );
-    });
-  });
-});
diff --git a/tests/js/spec/views/projectTeams.spec.jsx b/tests/js/spec/views/projectTeams.spec.jsx
new file mode 100644
index 0000000000..3cefc2b398
--- /dev/null
+++ b/tests/js/spec/views/projectTeams.spec.jsx
@@ -0,0 +1,209 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import ProjectTeams from 'app/views/settings/project/projectTeams';
+import {openCreateTeamModal} from 'app/actionCreators/modal';
+
+jest.mock('app/actionCreators/modal', () => ({
+  openCreateTeamModal: jest.fn(),
+}));
+
+describe('ProjectTeams', function() {
+  let org;
+  let project;
+  let team;
+  let team2 = {
+    id: '2',
+    slug: 'team-slug-2',
+    name: 'Team Name 2',
+    hasAccess: true,
+  };
+
+  beforeEach(function() {
+    org = TestStubs.Organization();
+    project = TestStubs.ProjectDetails();
+    team = TestStubs.Team();
+
+    Client.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'GET',
+      body: project,
+    });
+    Client.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/teams/`,
+      method: 'GET',
+      body: [team],
+    });
+    Client.addMockResponse({
+      url: `/organizations/${org.slug}/teams/`,
+      method: 'GET',
+      body: [team, team2],
+    });
+  });
+
+  afterEach(function() {
+    Client.clearMockResponses();
+  });
+
+  it('renders', function() {
+    let wrapper = shallow(
+      <ProjectTeams
+        params={{orgId: org.slug, projectId: project.slug}}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('can remove a team from project', async function() {
+    Client.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/teams/`,
+      method: 'GET',
+      body: [team, team2],
+    });
+
+    let endpoint = `/projects/${org.slug}/${project.slug}/teams/${team.slug}/`;
+    let mock = Client.addMockResponse({
+      url: endpoint,
+      method: 'DELETE',
+      statusCode: 200,
+    });
+
+    let endpoint2 = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
+    let mock2 = Client.addMockResponse({
+      url: endpoint2,
+      method: 'DELETE',
+      statusCode: 200,
+    });
+
+    let wrapper = mount(
+      <ProjectTeams
+        params={{orgId: org.slug, projectId: project.slug}}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // Click "Remove"
+    wrapper
+      .find('PanelBody Button')
+      .first()
+      .simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      endpoint,
+      expect.objectContaining({
+        method: 'DELETE',
+      })
+    );
+
+    // Remove second team
+    wrapper
+      .find('PanelBody Button')
+      .first()
+      .simulate('click');
+
+    // Modal opens because this is the last team in project
+    // Click confirm
+    wrapper.find('ModalDialog Button[priority="primary"]').simulate('click');
+
+    expect(mock2).toHaveBeenCalledWith(
+      endpoint2,
+      expect.objectContaining({
+        method: 'DELETE',
+      })
+    );
+  });
+
+  it('can associate a team with project', function() {
+    let endpoint = `/projects/${org.slug}/${project.slug}/teams/${team2.slug}/`;
+    let mock = Client.addMockResponse({
+      url: endpoint,
+      method: 'POST',
+      statusCode: 200,
+    });
+
+    let wrapper = mount(
+      <ProjectTeams
+        params={{orgId: org.slug, projectId: project.slug}}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    expect(mock).not.toHaveBeenCalled();
+
+    // open dropdown
+    wrapper.find('DropdownButton').simulate('click');
+
+    // click a team
+    let el = wrapper.find('AutoCompleteItem').first();
+    el.simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      endpoint,
+      expect.objectContaining({
+        method: 'POST',
+      })
+    );
+  });
+
+  it('opens "create team modal" when creating a new team from header', function() {
+    let wrapper = mount(
+      <ProjectTeams
+        params={{orgId: org.slug, projectId: project.slug}}
+        project={project}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    // Click "Create Team" in Panel Header
+    wrapper.find('SettingsPageHeading Button').simulate('click');
+
+    // action creator to open "create team modal" is called
+    expect(openCreateTeamModal).toHaveBeenCalledWith(
+      expect.objectContaining({
+        project: expect.objectContaining({
+          slug: project.slug,
+        }),
+        organization: expect.objectContaining({
+          slug: org.slug,
+        }),
+      })
+    );
+  });
+
+  it('opens "create team modal" when creating a new team from dropdown', function() {
+    let wrapper = mount(
+      <ProjectTeams
+        params={{orgId: org.slug, projectId: project.slug}}
+        project={project}
+        organization={org}
+      />,
+      TestStubs.routerContext()
+    );
+
+    // open dropdown
+    wrapper.find('DropdownButton').simulate('click');
+
+    // Click "Create Team" inside of dropdown
+    wrapper.find('StyledCreateTeamLink').simulate('click');
+
+    // action creator to open "create team modal" is called
+    expect(openCreateTeamModal).toHaveBeenCalledWith(
+      expect.objectContaining({
+        project: expect.objectContaining({
+          slug: project.slug,
+        }),
+        organization: expect.objectContaining({
+          slug: org.slug,
+        }),
+      })
+    );
+  });
+});
diff --git a/tests/js/spec/views/teamCreate.spec.jsx b/tests/js/spec/views/teamCreate.spec.jsx
index e404297090..d2980f0348 100644
--- a/tests/js/spec/views/teamCreate.spec.jsx
+++ b/tests/js/spec/views/teamCreate.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {shallow} from 'enzyme';
 
-import TeamCreate from 'app/views/teamCreate';
+import {TeamCreate} from 'app/views/teamCreate';
 
 describe('TeamCreate', function() {
   describe('render()', function() {
@@ -20,13 +20,17 @@ describe('TeamCreate', function() {
     });
   });
 
-  describe('onSubmitSuccess()', function() {
+  describe('handleSubmitSuccess()', function() {
     let wrapper;
-    let locationAssignMock;
+    let redirectMock = jest.fn();
 
     beforeEach(function() {
+      redirectMock.mockReset();
       wrapper = shallow(
         <TeamCreate
+          router={{
+            push: redirectMock,
+          }}
           params={{
             orgId: 'org',
           }}
@@ -40,16 +44,13 @@ describe('TeamCreate', function() {
           },
         }
       );
-      locationAssignMock = jest.fn();
-      window.location.assign = locationAssignMock;
-      wrapper.instance().redirect = locationAssignMock;
     });
 
     it('redirects to legacy team settings', function() {
-      wrapper.instance().onSubmitSuccess({
+      wrapper.instance().handleSubmitSuccess({
         slug: 'new-team',
       });
-      expect(locationAssignMock).toBeCalledWith(
+      expect(redirectMock).toBeCalledWith(
         '/organizations/org/projects/new/?team=new-team'
       );
     });
@@ -61,10 +62,10 @@ describe('TeamCreate', function() {
           features: ['new-teams'],
         },
       });
-      wrapper.instance().onSubmitSuccess({
+      wrapper.instance().handleSubmitSuccess({
         slug: 'new-team',
       });
-      expect(locationAssignMock).toBeCalledWith('/settings/org/teams/new-team/');
+      expect(redirectMock).toBeCalledWith('/settings/org/teams/new-team/');
     });
   });
 });
