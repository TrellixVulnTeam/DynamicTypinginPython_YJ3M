commit cdb84720a07f4232bc91e8d95688059c640a03fe
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 29 16:41:03 2015 +0200

    Additional tweaks for new concepts

diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 8382128012..e4a7daf8bd 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -38,10 +38,13 @@ var GroupStore = Reflux.createStore({
     this.items = [];
     this.statuses = {};
     this.pendingChanges.clear();
+
+    var itemIds = new Set();
     items.forEach(item => {
+      itemIds.add(item.id);
       this.items.push(item);
     });
-    this.trigger();
+    this.trigger(itemIds);
   },
 
   add(items) {
@@ -54,29 +57,30 @@ var GroupStore = Reflux.createStore({
       itemsById[item.id] = item;
     });
 
-    for (var i = 0, item; (item = this.items[i]); i++) {
+    items.forEach((item, idx) => {
       if (itemsById[item.id]) {
-        this.items[i] = jQuery.extend(true, {}, this.items[i], itemsById[item.id]);
+        this.items[idx] = jQuery.extend(true, {}, item, itemsById[item.id]);
         delete itemsById[item.id];
       }
-    }
+    });
 
+    var itemIds = new Set();
     for (var itemId in itemsById) {
       this.items.push(itemsById[itemId]);
+      itemIds.add(itemId);
     }
 
-    this.trigger();
+    this.trigger(itemIds);
   },
 
   remove(itemId) {
-    for (var i = 0; i < this.items.length; i++) {
-      if (this.items[i].id === itemId) {
-        this.items.splice(i, i + 1);
-        return;
+    this.items.forEach((item, idx) => {
+      if (item.id === itemId) {
+        this.items.splice(idx, idx + 1);
       }
-    }
+    });
 
-    this.trigger();
+    this.trigger(new Set([itemId]));
   },
 
   addStatus(id, status) {
@@ -106,7 +110,7 @@ var GroupStore = Reflux.createStore({
       return;
     }
     group.activity.unshift(data);
-    this.trigger();
+    this.trigger(new Set([id]));
   },
 
   getItem(id) {
@@ -162,7 +166,7 @@ var GroupStore = Reflux.createStore({
 
   onAssignTo(changeId, itemId, data) {
     this.addStatus(itemId, 'assignTo');
-    this.trigger();
+    this.trigger(new Set([itemId]));
   },
 
   // TODO(dcramer): This is not really the best place for this
@@ -178,14 +182,14 @@ var GroupStore = Reflux.createStore({
     }
     item.assignedTo = response.assignedTo;
     this.clearStatus(itemId, 'assignTo');
-    this.trigger();
+    this.trigger(new Set([itemId]));
   },
 
   onDelete(changeId, itemIds) {
     itemIds.forEach(itemId => {
       this.addStatus(itemId, 'delete');
     });
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onDeleteError(changeId, itemIds, response) {
@@ -193,7 +197,7 @@ var GroupStore = Reflux.createStore({
       this.clearStatus(itemId, 'delete');
     });
     AlertActions.addAlert(ERR_SCHEDULE_DELETE, 'error');
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onDeleteSuccess(changeId, itemIds, response) {
@@ -204,13 +208,14 @@ var GroupStore = Reflux.createStore({
     });
     this.items = this.items.filter((item) => !itemIdSet.has(item.id));
     AlertActions.addAlert(OK_SCHEDULE_DELETE, 'success');
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onMerge(changeId, itemIds) {
     itemIds.forEach(itemId => {
       this.addStatus(itemId, 'merge');
     });
+    this.trigger(new Set(itemIds));
   },
 
   onMergeError(changeId, itemIds, response) {
@@ -218,7 +223,7 @@ var GroupStore = Reflux.createStore({
       this.clearStatus(itemId, 'merge');
     });
     AlertActions.addAlert(ERR_SCHEDULE_MERGE, 'error');
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onMergeSuccess(changeId, itemIds, response) {
@@ -226,7 +231,7 @@ var GroupStore = Reflux.createStore({
       this.clearStatus(itemId, 'merge');
     });
     AlertActions.addAlert(OK_SCHEDULE_MERGE, 'success');
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onUpdate(changeId, itemIds, data) {
@@ -235,7 +240,7 @@ var GroupStore = Reflux.createStore({
       this.addStatus(itemId, 'update');
       this.pendingChanges.push(changeId, itemId, data);
     });
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onUpdateError(changeId, itemIds, error, failSilently) {
@@ -246,7 +251,7 @@ var GroupStore = Reflux.createStore({
     if (failSilently) {
       AlertActions.addAlert(ERR_UPDATE, 'error');
     }
-    this.trigger();
+    this.trigger(new Set(itemIds));
   },
 
   onUpdateSuccess(changeId, itemIds, response) {
@@ -261,7 +266,7 @@ var GroupStore = Reflux.createStore({
       }
     });
     this.pendingChanges.remove(changeId);
-    this.trigger();
+    this.trigger(new Set(itemIds));
   }
 });
 
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 9aebd076d8..532843e589 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -46,29 +46,36 @@ var objectMatchesSubset = function(obj, other, deep){
   }
 
   for (k in other) {
-    if (obj[k] === other[k]) {
-      continue;
+    if (!valueIsEqual(obj[k], other[k], deep)) {
+      return false;
     }
+  }
+  return true;
+};
 
-    if (obj[k] instanceof Array || other[k] instanceof Array) {
-      if (!arrayIsEqual(obj[k], other[k])) {
-        return false;
-      }
-      continue;
+var valueIsEqual = function(value, other, deep) {
+  if (value === other) {
+    return true;
+  } else if (!deep) {
+    return false;
+  } else if (value instanceof Array || other instanceof Array) {
+    if (arrayIsEqual(value, other, deep)) {
+      return true;
     }
-
-    if (obj[k] instanceof Object || other[k] instanceof Object) {
-      if (!objectMatchesSubset(obj[k], other[k])) {
-        return false;
-      }
-      continue;
+  } else if (value instanceof Object || other instanceof Object) {
+    if (objectMatchesSubset(value, other, deep)) {
+      return true;
     }
   }
-  return true;
+  return false;
 };
 
-var arrayIsEqual = function(arr, other) {
+var arrayIsEqual = function(arr, other, deep) {
   // if the other array is a falsy value, return
+  if (!arr && !other) {
+    return true;
+  }
+
   if (!arr || !other) {
     return false;
   }
@@ -78,13 +85,9 @@ var arrayIsEqual = function(arr, other) {
     return false;
   }
 
-  for (var i = 0, l = arr.length; i < l; i++) {
-    // Warning - two different object instances will never be equal: {x:20} != {x:20}
-    if (arr[i] != other[i]) {
-      return false;
-    }
+  for (var i = 0, l = Math.max(arr.length, other.length); i < l; i++) {
+    return valueIsEqual(arr[i], other[i], deep);
   }
-  return true;
 };
 
 module.exports = {
@@ -164,6 +167,7 @@ module.exports = {
   arrayIsEqual: arrayIsEqual,
   objectMatchesSubset: objectMatchesSubset,
   compareArrays: compareArrays,
+  valueIsEqual: valueIsEqual,
   parseLinkHeader: require('./utils/parseLinkHeader'),
 
   Collection: require('./utils/collection'),
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index b44b28df5f..ee8e5509dc 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -46,8 +46,12 @@ var Stream = React.createClass({
 
   shouldComponentUpdate(nextProps, nextState) {
     var curState = this.state;
-    if (!utils.objectMatchesSubset(curState, nextState)) {
-      return true;
+    var keys = ['selectAllActive', 'multiSelected', 'anySelected', 'statsPeriod',
+                'realtimeActive', 'pageLinks', 'loading', 'error'];
+    for (var i = 0; i < keys.length; i++) {
+      if (curState[keys[i]] !== nextState[keys[i]]) {
+        return true;
+      }
     }
     if (curState.groupList.length != nextState.groupList.length) {
       return true;
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index c077ca0fea..7ec2469b4f 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -10,7 +10,7 @@ var Count = require("../../components/count");
 var GroupStore = require("../../stores/groupStore");
 var SelectedGroupStore = require("../../stores/selectedGroupStore");
 var TimeSince = require("../../components/timeSince");
-var {compareArrays, objectMatchesSubset} = require("../../utils");
+var {compareArrays, valueIsEqual} = require("../../utils");
 
 var StreamGroup = React.createClass({
   contextTypes: {
@@ -18,7 +18,8 @@ var StreamGroup = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
+    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange"),
+    Reflux.listenTo(GroupStore, "onGroupChange")
   ],
 
   propTypes: {
@@ -30,20 +31,17 @@ var StreamGroup = React.createClass({
   getInitialState() {
     return {
       isSelected: false,
-      data: null
-    };
-  },
-
-  componentWillMount() {
-    this.setState({
       data: GroupStore.getItem(this.props.id)
-    });
+    };
   },
 
   componentWillReceiveProps(nextProps) {
-    this.setState({
-      data: GroupStore.getItem(this.props.id)
-    });
+    if (nextProps.id != this.props.id) {
+      this.setState({
+        data: GroupStore.getItem(this.props.id),
+        isSelected: SelectedGroupStore.isSelected(id)
+      });
+    }
   },
 
   shouldComponentUpdate(nextProps, nextState) {
@@ -53,7 +51,7 @@ var StreamGroup = React.createClass({
     if (nextState.isSelected !== this.state.isSelected) {
       return true;
     }
-    if (!objectMatchesSubset(this.state.data, nextState.data, true)) {
+    if (!valueIsEqual(this.state.data, nextState.data, true)) {
       return true;
     }
     var memberListEqual = compareArrays(this.props.memberList, nextProps.memberList, (obj, other) => {
@@ -63,7 +61,7 @@ var StreamGroup = React.createClass({
   },
 
   onSelectedGroupChange() {
-    var id = this.state.data.id;
+    var id = this.props.id;
     var isSelected = SelectedGroupStore.isSelected(id);
     if (isSelected !== this.state.isSelected) {
       this.setState({
@@ -72,6 +70,17 @@ var StreamGroup = React.createClass({
     }
   },
 
+  onGroupChange(itemIds) {
+    if (!itemIds.has(this.props.id)) {
+      return;
+    }
+    var id = this.props.id;
+    var data = GroupStore.getItem(id);
+    this.setState({
+      data: data,
+    });
+  },
+
   onSelect() {
     var id = this.state.data.id;
     SelectedGroupStore.toggleSelect(id);
