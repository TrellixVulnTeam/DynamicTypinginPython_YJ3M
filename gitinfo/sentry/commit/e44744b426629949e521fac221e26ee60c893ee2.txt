commit e44744b426629949e521fac221e26ee60c893ee2
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Apr 5 14:07:45 2016 -0700

    Add `tsdb query organizations` command.

diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index dbd1a66282..64ead4957e 100755
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -59,6 +59,7 @@ map(lambda cmd: cli.add_command(import_string(cmd)), (
     'sentry.runner.commands.queues.queues',
     'sentry.runner.commands.repair.repair',
     'sentry.runner.commands.start.start',
+    'sentry.runner.commands.tsdb.tsdb',
     'sentry.runner.commands.upgrade.upgrade',
 ))
 
diff --git a/src/sentry/runner/commands/tsdb.py b/src/sentry/runner/commands/tsdb.py
new file mode 100644
index 0000000000..0392d54a01
--- /dev/null
+++ b/src/sentry/runner/commands/tsdb.py
@@ -0,0 +1,118 @@
+from __future__ import absolute_import
+
+from collections import OrderedDict
+from datetime import datetime, timedelta
+
+import click
+import pytz
+from dateutil.parser import parse
+
+from sentry.runner.decorators import configuration
+from sentry.utils.iterators import chunked
+
+
+class DateTimeParamType(click.ParamType):
+    name = 'datetime'
+
+    def convert(self, context, option, value):
+        if value is None:
+            return value
+        elif isinstance(value, datetime):
+            return value
+
+        try:
+            result = parse(value)
+        except Exception:
+            self.fail(
+                '{!r} is not a valid datetime'.format(value),
+                option,
+                context,
+            )
+
+        if result.tzinfo is None:
+            # TODO: We should probably warn about this? Also note that this
+            # doesn't use the Django specified timezone, since settings haven't
+            # been configured yet.
+            result = result.replace(tzinfo=pytz.utc)
+
+        return result
+
+
+@click.group()
+def tsdb():
+    """Tools for interacting with the time series database."""
+    pass
+
+
+@tsdb.group()
+def query():
+    """Execute queries against the time series database."""
+    pass
+
+
+@query.command()
+@click.argument(
+    'metrics',
+    nargs=-1,
+    type=click.Choice([
+        'organization_total_received',
+        'organization_total_rejected',
+        'organization_total_blacklisted',
+    ]),
+)
+@click.option('--since', callback=DateTimeParamType())
+@click.option('--until', callback=DateTimeParamType())
+@configuration
+def organizations(metrics, since, until):
+    """
+    Fetch metrics for organizations.
+    """
+    from django.utils import timezone
+    from sentry.app import tsdb
+    from sentry.models import Organization
+
+    stdout = click.get_text_stream('stdout')
+    stderr = click.get_text_stream('stderr')
+    aggregate = lambda series: sum(value for timestamp, value in series)
+
+    metrics = OrderedDict((name, getattr(tsdb.models, name)) for name in metrics)
+    if not metrics:
+        return
+
+    if until is None:
+        until = timezone.now()
+
+    if since is None:
+        since = until - timedelta(minutes=60)
+
+    assert until >= since
+
+    stderr.write(
+        'Dumping {} from {} to {}...\n'.format(
+            ', '.join(metrics.keys()),
+            since,
+            until,
+        ),
+    )
+
+    objects = Organization.objects.all()
+
+    for chunk in chunked(objects, 100):
+        instances = OrderedDict((instance.pk, instance) for instance in chunk)
+
+        results = {}
+        for metric in metrics.values():
+            results[metric] = tsdb.get_range(metric, instances.keys(), since, until)
+
+        for key, instance in instances.iteritems():
+            values = []
+            for metric in metrics.values():
+                values.append(aggregate(results[metric][key]))
+
+            stdout.write(
+                '{} {} {}\n'.format(
+                    instance.id,
+                    instance.slug,
+                    ' '.join(map(str, values)),
+                ),
+            )
diff --git a/src/sentry/utils/iterators.py b/src/sentry/utils/iterators.py
new file mode 100644
index 0000000000..351689307a
--- /dev/null
+++ b/src/sentry/utils/iterators.py
@@ -0,0 +1,8 @@
+def chunked(iterator, size):
+    chunk = []
+    for item in iterator:
+        chunk.append(item)
+        if len(chunk) == size:
+            yield chunk
+            del chunk[:]
+    yield chunk
