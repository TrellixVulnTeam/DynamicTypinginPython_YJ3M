commit 3d6e036c6cad968ebd82674fa480cc556d7395b4
Author: David Wang <davidw1339@gmail.com>
Date:   Tue Sep 24 00:52:02 2019 -0700

    feat(teams): Add endpoint to allow for retrieval of a user's teams within an org (#14801)
    
    Added an endpoint `organizations/{organization_slug}/user-teams/` which retrieves just an org's teams that a user belongs to. This is to pave the way for performance improvements on the projects page which currently fetches all organization details (all projects, all teams) even though only a subset of those teams/projects are shown. This can lead to 3-5+ seconds of load time (the initial sentry loading page) for larger enterprise customers.
    
    Refs SEN-1047

diff --git a/src/sentry/api/endpoints/organization_user_teams.py b/src/sentry/api/endpoints/organization_user_teams.py
new file mode 100644
index 0000000000..8e1086fa0e
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_user_teams.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.models import Team, TeamStatus
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.base import DocSection
+from sentry.api.serializers import serialize
+from sentry.auth.superuser import is_active_superuser
+
+
+class OrganizationUserTeamsEndpoint(OrganizationEndpoint):
+    doc_section = DocSection.TEAMS
+
+    def get(self, request, organization):
+        """
+        List your Teams In the Current Organization
+        ```````````````````````````````````````````
+
+        Return a list of the teams available to the authenticated session and
+        with the supplied organization. If the user is a super user, then all
+        teams within the organization are returned.
+        """
+        if is_active_superuser(request):
+            # retrieve all teams within the organization
+            queryset = Team.objects.filter(
+                organization=organization, status=TeamStatus.VISIBLE
+            ).order_by("slug")
+            return Response(serialize(list(queryset), request.user))
+        else:
+            return Response(serialize(list(request.access.teams), request.user))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 24cbee7d36..5911afaf66 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -157,6 +157,7 @@ from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_tagkey_values import OrganizationTagKeyValuesEndpoint
 from .endpoints.organization_tags import OrganizationTagsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
+from .endpoints.organization_user_teams import OrganizationUserTeamsEndpoint
 from .endpoints.organization_user_details import OrganizationUserDetailsEndpoint
 from .endpoints.organization_user_issues import OrganizationUserIssuesEndpoint
 from .endpoints.organization_user_issues_search import OrganizationUserIssuesSearchEndpoint
@@ -949,6 +950,11 @@ urlpatterns = patterns(
                     OrganizationTeamsEndpoint.as_view(),
                     name="sentry-api-0-organization-teams",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/user-teams/$",
+                    OrganizationUserTeamsEndpoint.as_view(),
+                    name="sentry-api-0-organization-user-teams",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/tags/$",
                     OrganizationTagsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_user_teams.py b/tests/sentry/api/endpoints/test_organization_user_teams.py
new file mode 100644
index 0000000000..e9dda90ca3
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_user_teams.py
@@ -0,0 +1,57 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase
+
+
+class OrganizationUserTeamsTest(APITestCase):
+    def setUp(self):
+        self.foo = self.create_user("foo@example.com")
+        self.bar = self.create_user("bar@example.com", is_superuser=True)
+        self.org = self.create_organization(owner=self.user)
+        self.team1 = self.create_team(organization=self.org)
+        self.team2 = self.create_team(organization=self.org)
+        self.team3 = self.create_team(organization=self.org)
+        self.create_member(organization=self.org, user=self.foo, teams=[self.team1, self.team2])
+        self.create_member(organization=self.org, user=self.bar, teams=[self.team2])
+
+        self.url = reverse(
+            "sentry-api-0-organization-user-teams", kwargs={"organization_slug": self.org.slug}
+        )
+
+    def test_simple(self):
+        self.login_as(user=self.foo)
+
+        response = self.client.get(self.url)
+        assert response.status_code == 200
+
+        # Verify that only teams that the user is a member of, are returned
+        assert len(response.data) == 2
+
+        # Sort teams so there is a guaranteed ordering
+        response.data.sort(key=lambda x: x["id"])
+        assert response.data[0]["id"] == six.text_type(self.team1.id)
+        assert response.data[0]["isMember"]
+        assert response.data[1]["id"] == six.text_type(self.team2.id)
+        assert response.data[1]["isMember"]
+
+    def test_super_user(self):
+        self.login_as(user=self.bar, superuser=True)
+
+        response = self.client.get(self.url)
+        assert response.status_code == 200
+
+        # Verify that all teams are returned
+        assert len(response.data) == 3
+
+        # Sort teams so there is a guaranteed ordering
+        response.data.sort(key=lambda x: x["id"])
+        assert response.data[0]["id"] == six.text_type(self.team1.id)
+        assert not response.data[0]["isMember"]
+        assert response.data[1]["id"] == six.text_type(self.team2.id)
+        assert response.data[1]["isMember"]
+        assert response.data[2]["id"] == six.text_type(self.team3.id)
+        assert not response.data[2]["isMember"]
