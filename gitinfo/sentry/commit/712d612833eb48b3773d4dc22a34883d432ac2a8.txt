commit 712d612833eb48b3773d4dc22a34883d432ac2a8
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Jul 10 11:42:46 2019 -0400

    fix: Pass the correct query to the /organizations/:org-slug/events-meta/ endpoint (#13917)
    
    This ensures tags on the right-hand side correctly reflect the active view/tab (e.g. CSP or Errors).

diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 3f47a12852..67f0258bcf 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -12,6 +12,10 @@ const respond = (isAsync, fn, ...args) => {
   }
 };
 
+const DEFAULT_MOCK_RESPONSE_OPTIONS = {
+  predicate: () => true,
+};
+
 class Client {
   static mockResponses = [];
 
@@ -20,7 +24,7 @@ class Client {
   }
 
   // Returns a jest mock that represents Client.request calls
-  static addMockResponse(response) {
+  static addMockResponse(response, options = DEFAULT_MOCK_RESPONSE_OPTIONS) {
     const mock = jest.fn();
     Client.mockResponses.unshift([
       {
@@ -32,14 +36,19 @@ class Client {
         headers: response.headers || {},
       },
       mock,
+      options.predicate,
     ]);
 
     return mock;
   }
 
   static findMockResponse(url, options) {
-    return Client.mockResponses.find(([response]) => {
-      return url === response.url && (options.method || 'GET') === response.method;
+    return Client.mockResponses.find(([response, mock, predicate]) => {
+      const matchesURL = url === response.url;
+      const matchesMethod = (options.method || 'GET') === response.method;
+      const matchesPredicate = predicate(url, options);
+
+      return matchesURL && matchesMethod && matchesPredicate;
     });
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx
index 196c18fe31..680a378c7e 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/tags.jsx
@@ -8,7 +8,12 @@ import SentryTypes from 'app/sentryTypes';
 import Placeholder from 'app/components/placeholder';
 import TagDistributionMeter from 'app/components/tagDistributionMeter';
 import withApi from 'app/utils/withApi';
-import {fetchTagDistribution, fetchTotalCount, getEventTagSearchUrl} from './utils';
+import {
+  fetchTagDistribution,
+  fetchTotalCount,
+  getEventTagSearchUrl,
+  getQuery,
+} from './utils';
 import {MODAL_QUERY_KEYS} from './data';
 
 class Tags extends React.Component {
@@ -61,7 +66,11 @@ class Tags extends React.Component {
     });
 
     try {
-      const totalValues = await fetchTotalCount(api, organization.slug, location.query);
+      const totalValues = await fetchTotalCount(
+        api,
+        organization.slug,
+        getQuery(view, location)
+      );
       this.setState({totalValues});
     } catch (err) {
       Sentry.captureException(err);
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
index 20d7bb08bd..5e97e79f94 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/utils.jsx
@@ -1,4 +1,4 @@
-import {pick} from 'lodash';
+import {pick, get} from 'lodash';
 
 import {DEFAULT_PER_PAGE} from 'app/constants';
 import {URL_PARAM} from 'app/constants/globalSelectionHeader';
@@ -25,7 +25,9 @@ export function getQuery(view, location) {
   const fields = [];
   const groupby = view.data.groupby ? [...view.data.groupby] : [];
 
-  view.data.fields.forEach(field => {
+  const viewFields = get(view, 'data.fields', []);
+
+  viewFields.forEach(field => {
     if (SPECIAL_FIELDS.hasOwnProperty(field)) {
       const specialField = SPECIAL_FIELDS[field];
 
diff --git a/tests/js/spec/views/organizationEventsV2/tags.spec.jsx b/tests/js/spec/views/organizationEventsV2/tags.spec.jsx
index 6fe914b736..43dfad776b 100644
--- a/tests/js/spec/views/organizationEventsV2/tags.spec.jsx
+++ b/tests/js/spec/views/organizationEventsV2/tags.spec.jsx
@@ -7,15 +7,39 @@ import {Tags} from 'app/views/organizationEventsV2/tags';
 describe('Tags', function() {
   const org = TestStubs.Organization();
   beforeEach(function() {
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/events-distribution/`,
-      body: {
-        key: 'release',
-        name: 'Release',
-        totalValues: 2,
-        topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
+    Client.addMockResponse(
+      {
+        url: `/organizations/${org.slug}/events-distribution/`,
+        body: {
+          key: 'release',
+          name: 'Release',
+          totalValues: 2,
+          topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
+        },
       },
-    });
+      {
+        predicate: (url, options) => {
+          return options.query.key === 'release';
+        },
+      }
+    );
+
+    Client.addMockResponse(
+      {
+        url: `/organizations/${org.slug}/events-distribution/`,
+        body: {
+          key: 'environment',
+          name: 'Environment',
+          totalValues: 2,
+          topValues: [{count: 2, value: 'abcd123', name: 'abcd123'}],
+        },
+      },
+      {
+        predicate: (url, options) => {
+          return options.query.key === 'environment';
+        },
+      }
+    );
 
     Client.addMockResponse({
       url: `/organizations/${org.slug}/events-meta/`,
@@ -47,9 +71,13 @@ describe('Tags', function() {
       />
     );
 
+    // component is in loading state
     expect(wrapper.find('StyledPlaceholder')).toHaveLength(2);
+
     await tick();
     wrapper.update();
+
+    // component has loaded
     expect(wrapper.find('StyledPlaceholder')).toHaveLength(0);
   });
 });
