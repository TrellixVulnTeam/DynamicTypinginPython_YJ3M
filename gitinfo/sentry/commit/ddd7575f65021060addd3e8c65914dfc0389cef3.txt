commit ddd7575f65021060addd3e8c65914dfc0389cef3
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 23 04:28:49 2014 -0800

    Remove invalid tests

diff --git a/tests/sentry/web/frontend/generic/__init__.py b/tests/sentry/web/frontend/generic/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/web/frontend/generic/tests.py b/tests/sentry/web/frontend/generic/tests.py
deleted file mode 100644
index 46012b1724..0000000000
--- a/tests/sentry/web/frontend/generic/tests.py
+++ /dev/null
@@ -1,82 +0,0 @@
-import mock
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry import options
-from sentry.models import Team
-from sentry.testutils import TestCase
-
-
-class DashboardTest(TestCase):
-    def setUp(self):
-        super(DashboardTest, self).setUp()
-        self.login_as(self.user)
-
-    @fixture
-    def path(self):
-        return reverse('sentry')
-
-    @mock.patch('sentry.web.frontend.generic.can_create_teams')
-    def test_redirects_to_new_team_when_possible(self, can_create_teams):
-        can_create_teams.return_value = True
-
-        resp = self.client.get(self.path)
-
-        can_create_teams.assert_called_once_with(self.user)
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-create-team')
-
-    @mock.patch('sentry.web.frontend.generic.can_create_teams', mock.Mock(return_value=True))
-    def test_shows_team_selector_with_single(self):
-        Team.objects.create(name='test', owner=self.user)
-
-        resp = self.client.get(self.path)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/select_team.html')
-
-    @mock.patch('sentry.web.frontend.generic.can_create_teams', mock.Mock(return_value=True))
-    def test_renders_team_selector_with_multiple(self):
-        Team.objects.create(name='test', owner=self.user)
-        Team.objects.create(name='test2', owner=self.user)
-
-        resp = self.client.get(self.path)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/select_team.html')
-
-    @mock.patch('sentry.web.frontend.generic.can_create_teams', mock.Mock(return_value=False))
-    def test_shows_error_when_no_teams_and_cannot_create(self):
-        resp = self.client.get(self.path)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/generic_error.html')
-        assert 'title' in resp.context
-        assert 'message' in resp.context
-
-
-class UpdateAvailableTest(TestCase):
-
-    UPDATE_MESSAGE = "You're running a year old version of Sentry"
-
-    def setUp(self):
-        super(UpdateAvailableTest, self).setUp()
-        Team.objects.create(name='test', owner=self.user)
-        self.login_as(self.user)
-
-    @fixture
-    def path(self):
-        return reverse('sentry')
-
-    def test_update_is_available(self):
-        resp = self.client.get(self.path)
-        assert self.UPDATE_MESSAGE not in resp.content
-
-    def test_update_is_not_available(self):
-        options.set('sentry:latest_version', '5.5.1')
-
-        with mock.patch('sentry.get_version') as get_version:
-            get_version.return_value = '5.5.0'
-            resp = self.client.get(self.path)
-            assert self.UPDATE_MESSAGE in resp.content
