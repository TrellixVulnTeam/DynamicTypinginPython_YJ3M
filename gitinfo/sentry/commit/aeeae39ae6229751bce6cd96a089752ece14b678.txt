commit aeeae39ae6229751bce6cd96a089752ece14b678
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jun 7 10:21:17 2018 -0700

    chore(ui): Remove old Sidebar (#8676)
    
    Also fixes new Sidebar on django views (e.g. issue notification unsubscribe).

diff --git a/src/sentry/static/sentry/app/components/sidebar.old/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar.old/broadcasts.jsx
deleted file mode 100644
index 7af0becd78..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/broadcasts.jsx
+++ /dev/null
@@ -1,158 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import createReactClass from 'create-react-class';
-
-import ApiMixin from 'app/mixins/apiMixin';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t} from 'app/locale';
-
-import SidebarPanel from 'app/components/sidebar.old/sidebarPanel';
-import SidebarPanelItem from 'app/components/sidebar.old/sidebarPanelItem';
-
-const MARK_SEEN_DELAY = 1000;
-const POLLER_DELAY = 60000;
-
-const Broadcasts = createReactClass({
-  displayName: 'Broadcasts',
-
-  propTypes: {
-    showPanel: PropTypes.bool,
-    currentPanel: PropTypes.string,
-    hidePanel: PropTypes.func,
-    onShowPanel: PropTypes.func.isRequired,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      broadcasts: [],
-      loading: true,
-      error: false,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillUnmount() {
-    if (this.timer) {
-      window.clearTimeout(this.timer);
-      this.timer = null;
-    }
-    if (this.poller) {
-      window.clearTimeout(this.poller);
-      this.poller = null;
-    }
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  fetchData() {
-    if (this.poller) {
-      window.clearTimeout(this.poller);
-    }
-    this.api.request('/broadcasts/', {
-      method: 'GET',
-      success: data => {
-        this.setState({
-          broadcasts: data || [],
-          loading: false,
-        });
-        this.poller = window.setTimeout(this.fetchData, POLLER_DELAY);
-      },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true,
-        });
-        this.poller = window.setTimeout(this.fetchData, POLLER_DELAY);
-      },
-    });
-  },
-
-  onShowPanel() {
-    this.timer = window.setTimeout(this.markSeen, MARK_SEEN_DELAY);
-    this.props.onShowPanel();
-  },
-
-  getUnseenIds() {
-    return this.state.broadcasts
-      .filter(item => {
-        return !item.hasSeen;
-      })
-      .map(item => {
-        return item.id;
-      });
-  },
-
-  markSeen() {
-    let unseenBroadcastIds = this.getUnseenIds();
-    if (unseenBroadcastIds.length === 0) return;
-
-    this.api.request('/broadcasts/', {
-      method: 'PUT',
-      query: {id: unseenBroadcastIds},
-      data: {
-        hasSeen: '1',
-      },
-      success: () => {
-        this.setState({
-          broadcasts: this.state.broadcasts.map(item => {
-            item.hasSeen = true;
-            return item;
-          }),
-        });
-      },
-    });
-  },
-
-  render() {
-    let {broadcasts, loading} = this.state;
-    return (
-      <li className={this.props.currentPanel == 'broadcasts' ? 'active' : null}>
-        <a
-          className="broadcasts-toggle"
-          onClick={this.onShowPanel}
-          title={t('Updates from Sentry')}
-        >
-          <span className="icon icon-globe" />
-          {this.getUnseenIds() > 0 && <span className="activity-indicator" />}
-        </a>
-        {this.props.showPanel &&
-          this.props.currentPanel == 'broadcasts' && (
-            <SidebarPanel
-              title={t('Recent updates from Sentry')}
-              hidePanel={this.props.hidePanel}
-            >
-              {loading ? (
-                <LoadingIndicator />
-              ) : broadcasts.length === 0 ? (
-                <div className="sidebar-panel-empty">
-                  {t('No recent updates from the Sentry team.')}
-                </div>
-              ) : (
-                broadcasts.map(item => {
-                  return (
-                    <SidebarPanelItem
-                      key={item.id}
-                      className={!item.hasSeen && 'unseen'}
-                      title={item.title}
-                      message={item.message}
-                      link={item.link}
-                    />
-                  );
-                })
-              )}
-            </SidebarPanel>
-          )}
-      </li>
-    );
-  },
-});
-
-export default Broadcasts;
diff --git a/src/sentry/static/sentry/app/components/sidebar.old/incidents.jsx b/src/sentry/static/sentry/app/components/sidebar.old/incidents.jsx
deleted file mode 100644
index b2b1718626..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/incidents.jsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import Reflux from 'reflux';
-
-import SidebarPanel from 'app/components/sidebar.old/sidebarPanel';
-
-import IncidentStore from 'app/stores/incidentStore';
-import {t} from 'app/locale';
-
-const Incidents = createReactClass({
-  displayName: 'Incidents',
-
-  propTypes: {
-    showPanel: PropTypes.bool,
-    currentPanel: PropTypes.string,
-    hidePanel: PropTypes.func,
-    onShowPanel: PropTypes.func.isRequired,
-  },
-
-  mixins: [Reflux.listenTo(IncidentStore, 'onIncidentChange')],
-
-  getInitialState() {
-    return {
-      status: null,
-    };
-  },
-
-  onIncidentChange(status) {
-    this.setState({
-      status: {...status},
-    });
-  },
-
-  render() {
-    let {status} = this.state;
-    if (!status) return null;
-
-    return (
-      status &&
-      status.incidents.length > 0 && (
-        <li className={this.props.currentPanel == 'statusupdate' ? 'active' : null}>
-          <a onClick={this.props.onShowPanel}>
-            <span className="icon icon-alert animated pulse infinite" />
-          </a>
-          {this.props.showPanel &&
-            this.props.currentPanel == 'statusupdate' &&
-            status && (
-              <SidebarPanel
-                title={t('Recent status updates')}
-                hidePanel={this.props.hidePanel}
-              >
-                <ul className="incident-list list-unstyled">
-                  {status.incidents.map(incident => (
-                    <li className="incident-item" key={incident.id}>
-                      <h4>{incident.title}</h4>
-                      {incident.updates ? (
-                        <div>
-                          <h6>Latest updates:</h6>
-                          <ul className="status-list list-unstyled">
-                            {incident.updates.map((update, key) => (
-                              <li className="status-item" key={key}>
-                                <p>{update}</p>
-                              </li>
-                            ))}
-                          </ul>
-                        </div>
-                      ) : null}
-                      <p>
-                        <a href={incident.url} className="btn btn-default btn-sm">
-                          Learn more
-                        </a>
-                      </p>
-                    </li>
-                  ))}
-                </ul>
-              </SidebarPanel>
-            )}
-        </li>
-      )
-    );
-  },
-});
-
-export default Incidents;
diff --git a/src/sentry/static/sentry/app/components/sidebar.old/index.jsx b/src/sentry/static/sentry/app/components/sidebar.old/index.jsx
deleted file mode 100644
index 1ebdb5b756..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/index.jsx
+++ /dev/null
@@ -1,332 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-import $ from 'jquery';
-
-import ApiMixin from 'app/mixins/apiMixin';
-import OrganizationState from 'app/mixins/organizationState';
-import {load as loadIncidents} from 'app/actionCreators/incidents';
-
-import Broadcasts from 'app/components/sidebar.old/broadcasts';
-import Incidents from 'app/components/sidebar.old/incidents';
-import UserNav from 'app/components/sidebar.old/userNav';
-import OrganizationSelector from 'app/components/sidebar.old/organizationSelector';
-import SidebarPanel from 'app/components/sidebar.old/sidebarPanel';
-import TodoList from 'app/components/onboardingWizard/todos';
-import IssueList from 'app/components/issueList';
-import ConfigStore from 'app/stores/configStore';
-
-import {t} from 'app/locale';
-
-class OnboardingStatus extends React.Component {
-  static propTypes = {
-    org: PropTypes.object.isRequired,
-    currentPanel: PropTypes.string,
-    onShowPanel: PropTypes.func,
-    showPanel: PropTypes.bool,
-    hidePanel: PropTypes.func,
-  };
-
-  render() {
-    let org = this.props.org;
-    if (org.features.indexOf('onboarding') === -1) return null;
-
-    let doneTasks = (org.onboardingTasks || []).filter(
-      task => task.status === 'complete' || task.status === 'skipped'
-    );
-
-    let percentage = Math.round(
-      doneTasks.length / TodoList.TASKS.length * 100
-    ).toString();
-
-    let style = {
-      height: percentage + '%',
-    };
-
-    if (doneTasks.length >= TodoList.TASKS.filter(task => task.display).length) {
-      return null;
-    }
-
-    return (
-      <li
-        className={
-          this.props.currentPanel == 'todos' ? 'onboarding active' : 'onboarding'
-        }
-      >
-        <div className="onboarding-progress-bar" onClick={this.props.onShowPanel}>
-          <div className="slider" style={style} />
-        </div>
-        {this.props.showPanel &&
-          this.props.currentPanel == 'todos' && (
-            <SidebarPanel
-              title="Getting Started with Sentry"
-              hidePanel={this.props.hidePanel}
-            >
-              <TodoList />
-            </SidebarPanel>
-          )}
-      </li>
-    );
-  }
-}
-
-const Sidebar = createReactClass({
-  displayName: 'Sidebar',
-
-  contextTypes: {
-    location: PropTypes.object,
-  },
-
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState: function() {
-    return {
-      showTodos: location.hash === '#welcome',
-    };
-  },
-
-  componentDidMount() {
-    $(window).on('hashchange', this.hashChangeHandler);
-    $(document).on('click', this.documentClickHandler);
-
-    loadIncidents();
-  },
-
-  componentWillReceiveProps(nextProps, nextContext) {
-    let {location} = this.context;
-    let nextLocation = nextContext.location;
-
-    // Close active panel if we navigated anywhere
-    if (location.pathname != nextLocation.pathname) {
-      this.hidePanel();
-    }
-  },
-
-  componentWillUnmount() {
-    $(window).off('hashchange', this.hashChangeHandler);
-    $(document).off('click', this.documentClickHandler);
-  },
-
-  documentClickHandler(evt) {
-    // If click occurs outside of sidebar, close any
-    // active panel
-    if (!this.refs.navbar.contains(evt.target)) {
-      this.hidePanel();
-    }
-  },
-
-  hashChangeHandler() {
-    if (location.hash == '#welcome') {
-      this.setState({showTodos: true});
-    }
-  },
-
-  toggleTodos(e) {
-    this.setState({showTodos: !this.state.showTodos});
-  },
-
-  hidePanel() {
-    this.setState({
-      showPanel: false,
-      currentPanel: '',
-    });
-  },
-
-  showPanel(panel) {
-    this.setState({
-      showPanel: true,
-      currentPanel: panel,
-    });
-  },
-
-  togglePanel(panel) {
-    if (this.state.currentPanel === panel) this.hidePanel();
-    else this.showPanel(panel);
-  },
-
-  renderBody() {
-    let org = this.getOrganization();
-    let config = ConfigStore.getConfig();
-
-    if (!org) {
-      // When no organization, just render Sentry logo at top
-      return (
-        <ul className="navbar-nav">
-          <li>
-            <a className="logo" href="/">
-              <span className="icon-sentry-logo" />
-            </a>
-          </li>
-        </ul>
-      );
-    }
-
-    return (
-      <div>
-        <OrganizationSelector
-          organization={org}
-          showPanel={this.state.showPanel}
-          currentPanel={this.state.currentPanel}
-          togglePanel={() => this.togglePanel('org-selector')}
-          hidePanel={() => this.hidePanel()}
-        />
-
-        {/* Top nav links */}
-        <ul className="navbar-nav divider-bottom">
-          <li className={this.state.currentPanel == 'assigned' ? 'active' : null}>
-            <a title="Assigned to me">
-              <span
-                className="icon icon-user"
-                onClick={() => this.togglePanel('assigned')}
-              />
-            </a>
-          </li>
-          <li className={this.state.currentPanel == 'bookmarks' ? 'active' : null}>
-            <a title="My Bookmarks">
-              <span
-                className="icon icon-star-solid"
-                onClick={() => this.togglePanel('bookmarks')}
-              />
-            </a>
-          </li>
-          <li className={this.state.currentPanel == 'history' ? 'active' : null}>
-            <a title="Recently Viewed">
-              <span
-                className="icon icon-av_timer"
-                onClick={() => this.togglePanel('history')}
-              />
-            </a>
-          </li>
-        </ul>
-        <ul className="navbar-nav">
-          <Broadcasts
-            showPanel={this.state.showPanel}
-            currentPanel={this.state.currentPanel}
-            onShowPanel={() => this.togglePanel('broadcasts')}
-            hidePanel={() => this.hidePanel()}
-          />
-          <Incidents
-            showPanel={this.state.showPanel}
-            currentPanel={this.state.currentPanel}
-            onShowPanel={() => this.togglePanel('statusupdate')}
-            hidePanel={() => this.hidePanel()}
-          />
-          <li>
-            <a
-              title="Support"
-              href={
-                !config.isOnPremise
-                  ? `/organizations/${org.slug}/support/`
-                  : 'https://forum.sentry.io/'
-              }
-            >
-              <span className="icon icon-support" />
-            </a>
-          </li>
-        </ul>
-
-        {/* Panel bodies */}
-        {this.state.showPanel &&
-          this.state.currentPanel == 'assigned' && (
-            <SidebarPanel title={t('Assigned to me')} hidePanel={() => this.hidePanel()}>
-              <IssueList
-                endpoint={`/organizations/${org.slug}/members/me/issues/assigned/`}
-                query={{
-                  statsPeriod: '24h',
-                  per_page: 10,
-                  status: 'unresolved',
-                }}
-                pagination={false}
-                renderEmpty={() => (
-                  <div className="sidebar-panel-empty" key="none">
-                    {t('No issues have been assigned to you.')}
-                  </div>
-                )}
-                ref="issueList"
-                showActions={false}
-                params={{orgId: org.slug}}
-              />
-            </SidebarPanel>
-          )}
-        {this.state.showPanel &&
-          this.state.currentPanel == 'bookmarks' && (
-            <SidebarPanel title={t('My Bookmarks')} hidePanel={() => this.hidePanel()}>
-              <IssueList
-                endpoint={`/organizations/${org.slug}/members/me/issues/bookmarked/`}
-                query={{
-                  statsPeriod: '24h',
-                  per_page: 10,
-                  status: 'unresolved',
-                }}
-                pagination={false}
-                renderEmpty={() => (
-                  <div className="sidebar-panel-empty" key="no">
-                    {t('You have no bookmarked issues.')}
-                  </div>
-                )}
-                ref="issueList"
-                showActions={false}
-                params={{orgId: org.slug}}
-                noBorder
-              />
-            </SidebarPanel>
-          )}
-        {this.state.showPanel &&
-          this.state.currentPanel == 'history' && (
-            <SidebarPanel title={t('Recently Viewed')} hidePanel={() => this.hidePanel()}>
-              <IssueList
-                endpoint={`/organizations/${org.slug}/members/me/issues/viewed/`}
-                query={{
-                  statsPeriod: '24h',
-                  per_page: 10,
-                  status: 'unresolved',
-                }}
-                pagination={false}
-                renderEmpty={() => (
-                  <div className="sidebar-panel-empty" key="none">
-                    {t('No recently viewed issues.')}
-                  </div>
-                )}
-                ref="issueList"
-                showActions={false}
-                params={{orgId: org.slug}}
-                noBorder
-              />
-            </SidebarPanel>
-          )}
-      </div>
-    );
-  },
-
-  render() {
-    let org = this.getOrganization();
-
-    // NOTE: this.props.orgId not guaranteed to be specified
-    return (
-      <nav className="navbar" role="navigation" ref="navbar">
-        <div className="anchor-top">{this.renderBody()}</div>
-
-        {/* Bottom nav links */}
-        <div className="anchor-bottom">
-          <ul className="navbar-nav">
-            {org && (
-              <OnboardingStatus
-                org={org}
-                showPanel={this.state.showPanel}
-                currentPanel={this.state.currentPanel}
-                onShowPanel={() => this.togglePanel('todos')}
-                hidePanel={() => this.hidePanel()}
-              />
-            )}
-
-            <li>
-              <UserNav className="user-settings" />
-            </li>
-          </ul>
-        </div>
-      </nav>
-    );
-  },
-});
-
-export default Sidebar;
diff --git a/src/sentry/static/sentry/app/components/sidebar.old/organizationSelector.jsx b/src/sentry/static/sentry/app/components/sidebar.old/organizationSelector.jsx
deleted file mode 100644
index ef3cb262bf..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/organizationSelector.jsx
+++ /dev/null
@@ -1,132 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import {t} from 'app/locale';
-import AppState from 'app/mixins/appState';
-import Avatar from 'app/components/avatar';
-import ConfigStore from 'app/stores/configStore';
-import Link from 'app/components/link';
-import OrganizationsStore from 'app/stores/organizationsStore';
-import SidebarPanel from 'app/components/sidebar.old/sidebarPanel';
-
-let RouterOrBrowserLink = ({isRouter, path, ...props}) =>
-  isRouter ? <Link to={path} {...props} /> : <a href={path} {...props} />;
-
-RouterOrBrowserLink.propTypes = {
-  isRouter: PropTypes.bool,
-  path: PropTypes.string.isRequired,
-};
-
-const OrganizationSelector = createReactClass({
-  displayName: 'OrganizationSelector',
-
-  propTypes: {
-    organization: PropTypes.object,
-    showPanel: PropTypes.bool,
-    togglePanel: PropTypes.func,
-    hidePanel: PropTypes.func,
-    currentPanel: PropTypes.string,
-  },
-
-  contextTypes: {
-    location: PropTypes.object,
-  },
-
-  mixins: [AppState],
-
-  getLinkNode(org, child, className) {
-    let url = `/${org.slug}/`;
-    if (!this.context.location) {
-      return (
-        <a className={className} href={url}>
-          {child}
-        </a>
-      );
-    }
-    return (
-      <Link className={className} to={`/${org.slug}/`}>
-        {child}
-      </Link>
-    );
-  },
-
-  render() {
-    let isSingleOrg = ConfigStore.get('singleOrganization');
-    let activeOrg = this.props.organization;
-
-    // Single-org accounts can't create new orgs/select between them
-    if (isSingleOrg || !activeOrg) {
-      return null;
-    }
-
-    let features = ConfigStore.get('features');
-
-    let hasNewSettings = new Set(activeOrg.features).has('new-settings');
-    let settingsPrefix = `${hasNewSettings ? '/settings' : '/organizations'}`;
-
-    let classNames = 'org-selector divider-bottom';
-    if (this.props.currentPanel == 'org-selector') {
-      classNames += ' active';
-    }
-
-    return (
-      <div className={classNames}>
-        <a className="active-org" onClick={this.props.togglePanel}>
-          <Avatar size={32} organization={activeOrg} />
-        </a>
-
-        {this.props.showPanel &&
-          this.props.currentPanel == 'org-selector' && (
-            <SidebarPanel title={t('Organizations')} hidePanel={this.props.hidePanel}>
-              <ul className="org-list list-unstyled">
-                {OrganizationsStore.getAll().map(org => {
-                  return (
-                    <li
-                      className={activeOrg.id === org.id ? 'org active' : 'org'}
-                      key={org.slug}
-                    >
-                      {this.getLinkNode(
-                        org,
-                        <Avatar
-                          style={{verticalAlign: 'inherit'}}
-                          size={36}
-                          organization={org}
-                        />,
-                        'org-avatar'
-                      )}
-                      <h5>{this.getLinkNode(org, org.name)}</h5>
-                      <p>
-                        <RouterOrBrowserLink
-                          isRouter={hasNewSettings}
-                          path={`${settingsPrefix}/${org.slug}/`}
-                        >
-                          <span className="icon-settings" /> {t('Settings')}
-                        </RouterOrBrowserLink>
-                        <RouterOrBrowserLink
-                          isRouter={hasNewSettings}
-                          path={`${settingsPrefix}/${org.slug}/members/`}
-                        >
-                          <span className="icon-users" /> {t('Members')}
-                        </RouterOrBrowserLink>
-                      </p>
-                    </li>
-                  );
-                })}
-
-                {features.has('organizations:create') && (
-                  <li className="org-create">
-                    <Link to="/organizations/new/" className="btn btn-default btn-block">
-                      {t('New Organization')}
-                    </Link>
-                  </li>
-                )}
-              </ul>
-            </SidebarPanel>
-          )}
-      </div>
-    );
-  },
-});
-
-export default OrganizationSelector;
diff --git a/src/sentry/static/sentry/app/components/sidebar.old/sidebarPanel.jsx b/src/sentry/static/sentry/app/components/sidebar.old/sidebarPanel.jsx
deleted file mode 100644
index 052af862b8..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/sidebarPanel.jsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import SidebarPanelItem from './sidebarPanelItem';
-
-class SidebarPanel extends React.Component {
-  static propTypes = {
-    title: PropTypes.string,
-    hidePanel: PropTypes.func,
-  };
-
-  render() {
-    return (
-      <div className="sidebar-panel">
-        <div className="sidebar-panel-header">
-          <a className="close pull-right" onClick={this.props.hidePanel}>
-            <span className="icon-close" />
-          </a>
-          <h2>{this.props.title}</h2>
-        </div>
-        <div className="sidebar-panel-body">
-          {!this.props.children && (
-            <div className="sidebar-panel-items">
-              <SidebarPanelItem />
-            </div>
-          )}
-          {this.props.children}
-        </div>
-      </div>
-    );
-  }
-}
-
-export default SidebarPanel;
diff --git a/src/sentry/static/sentry/app/components/sidebar.old/sidebarPanelItem.jsx b/src/sentry/static/sentry/app/components/sidebar.old/sidebarPanelItem.jsx
deleted file mode 100644
index c6444c890d..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/sidebarPanelItem.jsx
+++ /dev/null
@@ -1,42 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import {t} from 'app/locale';
-
-class SidebarPanelItem extends React.Component {
-  static propTypes = {
-    title: PropTypes.string,
-    image: PropTypes.string,
-    message: PropTypes.any,
-    link: PropTypes.string,
-    hasSeen: PropTypes.bool,
-  };
-
-  render() {
-    let className = 'sidebar-panel-item';
-    if (this.props.hasSeen) {
-      className += ' has-seen';
-    }
-
-    return (
-      <div className={className}>
-        {this.props.title && <h3>{this.props.title}</h3>}
-        {this.props.image && (
-          <div className="image">
-            <img src={this.props.image} />
-          </div>
-        )}
-        {this.props.message && <p className="message">{this.props.message}</p>}
-
-        {this.props.link && (
-          <p className="link">
-            <a href={this.props.link} target="_blank">
-              {t('Read More')}
-            </a>
-          </p>
-        )}
-      </div>
-    );
-  }
-}
-
-export default SidebarPanelItem;
diff --git a/src/sentry/static/sentry/app/components/sidebar.old/userNav.jsx b/src/sentry/static/sentry/app/components/sidebar.old/userNav.jsx
deleted file mode 100644
index 5b74e47412..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar.old/userNav.jsx
+++ /dev/null
@@ -1,56 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import ConfigStore from 'app/stores/configStore';
-import DropdownLink from 'app/components/dropdownLink';
-import Avatar from 'app/components/avatar';
-import MenuItem from 'app/components/menuItem';
-import {t} from 'app/locale';
-
-class UserNav extends React.Component {
-  static contextTypes = {
-    location: PropTypes.object,
-    organization: PropTypes.object,
-  };
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return false;
-  }
-
-  render() {
-    let user = ConfigStore.get('user');
-    let {organization} = this.context;
-
-    if (!user) {
-      // TODO
-      return null;
-    }
-
-    let title = <Avatar size={32} user={user} className="avatar" />;
-
-    // "to" attribute => in-app router
-    // "href" attribute => Django-powered views
-    let to = url => (this.context.location ? {to: url} : {href: url});
-    // #NEW-SETTINGS
-    let hasNewSettings =
-      organization && organization.features.indexOf('new-settings') > -1;
-
-    return (
-      <DropdownLink topLevelClasses={this.props.className} title={title} caret={false}>
-        {hasNewSettings ? (
-          <MenuItem {...to('/settings/account/')}>{t('Account')}</MenuItem>
-        ) : (
-          <MenuItem href="/account/settings/">{t('Account')}</MenuItem>
-        )}
-        {hasNewSettings ? (
-          <MenuItem {...to('/settings/account/api/')}>{t('API')}</MenuItem>
-        ) : (
-          <MenuItem {...to('/api/')}>{t('API')}</MenuItem>
-        )}
-        {user.isSuperuser && <MenuItem {...to('/manage/')}>{t('Admin')}</MenuItem>}
-        <MenuItem href="/auth/logout/">{t('Sign out')}</MenuItem>
-      </DropdownLink>
-    );
-  }
-}
-
-export default UserNav;
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 760c520e02..e654a1663c 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -1,4 +1,5 @@
 import {withRouter} from 'react-router';
+import {ThemeProvider} from 'emotion-theming';
 import $ from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
@@ -310,7 +311,11 @@ const SidebarContainer = withRouter(
     },
 
     render() {
-      return <Sidebar {...this.props} collapsed={this.state.collapsed} />;
+      return (
+        <ThemeProvider theme={theme}>
+          <Sidebar {...this.props} collapsed={this.state.collapsed} />
+        </ThemeProvider>
+      );
     },
   })
 );
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 8143d7d07d..80169ff230 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -157,8 +157,7 @@ export default {
     SettingsPageHeader: require('app/views/settings/components/settingsPageHeader')
       .default,
 
-    // #NEW-SETTINGS #SIDEBAR -- need to update this when we remove old sidebar
-    Sidebar: require('app/components/sidebar.old').default,
+    Sidebar: require('app/components/sidebar').default,
     StackedBarChart: require('app/components/stackedBarChart').default,
     TextBlock: require('app/views/settings/components/text/textBlock').default,
     TimeSince: require('app/components/timeSince').default,
diff --git a/src/sentry/static/sentry/less/layout.less b/src/sentry/static/sentry/less/layout.less
index 3eaad0a590..6c2aa148b7 100644
--- a/src/sentry/static/sentry/less/layout.less
+++ b/src/sentry/static/sentry/less/layout.less
@@ -45,13 +45,6 @@ body {
       padding-left: @sidebar-collapsed-width;
     }
 
-    /* This accounts for the old home icon, can be removed when old-#sidebar is */
-    .project-dropdown {
-      .dropdown-menu {
-        left: 0;
-      }
-    }
-
     /* This is for organization level views e.g. "Assigned to me" */
     .organization-home {
       .container {
