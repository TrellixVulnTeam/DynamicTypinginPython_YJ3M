commit 5386f6a830f8c04422cfcb3ed908393e691b596c
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue Mar 10 16:19:00 2020 -0700

    perf(subscriptions): Add various metrics to subscriptions and incidents.
    
    We want to build a dashboard to help monitor subscriptions and incidents, adding some more details
    stats and timings to help facilitate.

diff --git a/src/sentry/incidents/subscription_processor.py b/src/sentry/incidents/subscription_processor.py
index e9611f9744..c22f66e3d3 100644
--- a/src/sentry/incidents/subscription_processor.py
+++ b/src/sentry/incidents/subscription_processor.py
@@ -142,6 +142,7 @@ class SubscriptionProcessor(object):
             if alert_operator(
                 aggregation_value, trigger.alert_threshold
             ) and not self.check_trigger_status(trigger, TriggerStatus.ACTIVE):
+                metrics.incr("incidents.alert_rules.threshold", tags={"type": "alert"})
                 with transaction.atomic():
                     self.trigger_alert_threshold(trigger)
             elif (
@@ -149,6 +150,7 @@ class SubscriptionProcessor(object):
                 and resolve_operator(aggregation_value, trigger.resolve_threshold)
                 and self.check_trigger_status(trigger, TriggerStatus.ACTIVE)
             ):
+                metrics.incr("incidents.alert_rules.threshold", tags={"type": "resolve"})
                 with transaction.atomic():
                     self.trigger_resolve_threshold(trigger)
             else:
@@ -173,6 +175,7 @@ class SubscriptionProcessor(object):
         """
         self.trigger_alert_counts[trigger.id] += 1
         if self.trigger_alert_counts[trigger.id] >= self.alert_rule.threshold_period:
+            metrics.incr("incidents.alert_rules.trigger", tags={"type": "fire"})
             # Only create a new incident if we don't already have an active one
             if not self.active_incident:
                 detected_at = self.last_update
@@ -235,6 +238,7 @@ class SubscriptionProcessor(object):
         """
         self.trigger_resolve_counts[trigger.id] += 1
         if self.trigger_resolve_counts[trigger.id] >= self.alert_rule.threshold_period:
+            metrics.incr("incidents.alert_rules.trigger", tags={"type": "resolve"})
             incident_trigger = self.incident_triggers[trigger.id]
             incident_trigger.status = TriggerStatus.RESOLVED.value
             incident_trigger.save()
diff --git a/src/sentry/incidents/tasks.py b/src/sentry/incidents/tasks.py
index d4a3795c22..fb9abd3b06 100644
--- a/src/sentry/incidents/tasks.py
+++ b/src/sentry/incidents/tasks.py
@@ -147,7 +147,8 @@ def handle_snuba_query_update(subscription_update, subscription):
     """
     from sentry.incidents.subscription_processor import SubscriptionProcessor
 
-    SubscriptionProcessor(subscription).process_update(subscription_update)
+    with metrics.timer("incidents.subscription_procesor.process_update"):
+        SubscriptionProcessor(subscription).process_update(subscription_update)
 
 
 @instrumented_task(
@@ -162,18 +163,23 @@ def handle_trigger_action(action_id, incident_id, project_id, method):
             "alert_rule_trigger", "alert_rule_trigger__alert_rule"
         ).get(id=action_id)
     except AlertRuleTriggerAction.DoesNotExist:
-        metrics.incr("incidents.alert_rules.skipping_missing_action")
+        metrics.incr("incidents.alert_rules.action.skipping_missing_action")
         return
     try:
         incident = Incident.objects.select_related("organization").get(id=incident_id)
     except Incident.DoesNotExist:
-        metrics.incr("incidents.alert_rules.skipping_missing_incident")
+        metrics.incr("incidents.alert_rules.action.skipping_missing_incident")
         return
 
     try:
         project = Project.objects.get(id=project_id)
     except Project.DoesNotExist:
-        metrics.incr("incidents.alert_rules.skipping_missing_project")
+        metrics.incr("incidents.alert_rules.action.skipping_missing_project")
         return
 
+    metrics.incr(
+        "incidents.alert_rules.action.{}.{}".format(
+            AlertRuleTriggerAction.Type(action.type).name.lower(), method
+        )
+    )
     getattr(action, method)(incident, project)
diff --git a/src/sentry/snuba/query_subscription_consumer.py b/src/sentry/snuba/query_subscription_consumer.py
index b57a3bd811..fec69386e1 100644
--- a/src/sentry/snuba/query_subscription_consumer.py
+++ b/src/sentry/snuba/query_subscription_consumer.py
@@ -102,7 +102,7 @@ class QuerySubscriptionConsumer(object):
                         transaction="query_subscription_consumer_process_message",
                         sampled=True,
                     )
-                ):
+                ), metrics.timer("snuba_query_subscriber.handle_message"):
                     self.handle_message(message)
 
                 # Track latest completed message here, for use in `shutdown` handler.
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
index 665ec4421e..11b53bda3c 100644
--- a/tests/sentry/incidents/test_tasks.py
+++ b/tests/sentry/incidents/test_tasks.py
@@ -159,18 +159,24 @@ class HandleTriggerActionTest(TestCase):
     def test_missing_trigger_action(self):
         with self.tasks():
             handle_trigger_action.delay(1000, 1001, self.project.id, "hello")
-        self.metrics.incr.assert_called_once_with("incidents.alert_rules.skipping_missing_action")
+        self.metrics.incr.assert_called_once_with(
+            "incidents.alert_rules.action.skipping_missing_action"
+        )
 
     def test_missing_incident(self):
         with self.tasks():
             handle_trigger_action.delay(self.action.id, 1001, self.project.id, "hello")
-        self.metrics.incr.assert_called_once_with("incidents.alert_rules.skipping_missing_incident")
+        self.metrics.incr.assert_called_once_with(
+            "incidents.alert_rules.action.skipping_missing_incident"
+        )
 
     def test_missing_project(self):
         incident = self.create_incident()
         with self.tasks():
             handle_trigger_action.delay(self.action.id, incident.id, 1002, "hello")
-        self.metrics.incr.assert_called_once_with("incidents.alert_rules.skipping_missing_project")
+        self.metrics.incr.assert_called_once_with(
+            "incidents.alert_rules.action.skipping_missing_project"
+        )
 
     def test(self):
         with patch.object(AlertRuleTriggerAction, "_type_registrations", new={}):
