commit fdc3fe86a60579e34d8dcfef61eed9308c1db0dd
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 4 04:45:18 2012 -0700

    Refactor get_team_list to be Team.objects.get_for_user and correct permissions display of can_admin_group

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 18cf7eb221..4c334856c8 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -23,6 +23,7 @@ from django.db.models import Sum
 from django.db.models.expressions import F, ExpressionNode
 from django.db.models.signals import post_save, post_delete, post_init, class_prepared
 from django.utils import timezone
+from django.utils.datastructures import SortedDict
 from django.utils.encoding import force_unicode, smart_str
 
 from raven.utils.encoding import to_string
@@ -1020,3 +1021,32 @@ class FilterKeyManager(BaseManager):
             result = list(self.filter(project=project).values_list('key', flat=True))
             cache.set(key, result, 60)
         return result
+
+
+class TeamManager(BaseManager):
+    def get_for_user(self, user, access=None):
+        """
+        Returns a SortedDict of all teams a user has some level of access to.
+
+        Each <Team> returned has a ``membership`` attribute which holds the
+        <TeamMember> instance.
+        """
+        from sentry.models import TeamMember
+
+        if access is None or not user.is_authenticated():
+            return SortedDict()
+
+        qs = TeamMember.objects.filter(
+            user=user,
+            is_active=True,
+        ).select_related('team')
+        if access is not None:
+            qs = qs.filter(type__lte=access)
+
+        results = SortedDict()
+        for tm in sorted(qs, key=lambda x: x.team.name):
+            team = tm.team
+            team.membership = tm
+            results[team.slug] = team
+
+        return results
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 4ca9035736..c40dce1b7a 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -37,7 +37,7 @@ from sentry.constants import STATUS_LEVELS, STATUS_RESOLVED, STATUS_UNRESOLVED,
   MEMBER_TYPES, MEMBER_OWNER, MEMBER_USER, MEMBER_SYSTEM  # NOQA
 from sentry.manager import GroupManager, ProjectManager, \
   MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager, \
-  UserOptionManager, FilterKeyManager
+  UserOptionManager, FilterKeyManager, TeamManager
 from sentry.utils import cached_property, \
   MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField, update
@@ -70,7 +70,7 @@ class Team(Model):
     name = models.CharField(max_length=64)
     owner = models.ForeignKey(User)
 
-    objects = BaseManager(cache_fields=(
+    objects = TeamManager(cache_fields=(
         'pk',
         'slug',
     ))
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 89d7a612c8..cab7191306 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -163,7 +163,24 @@ def can_remove_project(user, project):
         return False
 
     result = plugins.first('has_perm', user, 'remove_project', project)
-    if result is True:
-        return True
+    if result is False:
+        return False
+
+    return True
+
+
+@requires_login
+@perm_override('can_change_group')
+def can_admin_group(user, group):
+    from sentry.models import Team
+    # We make the assumption that we have a valid membership here
+    try:
+        Team.objects.get_for_user(user)[group.team.slug]
+    except KeyError:
+        return False
+
+    result = plugins.first('has_perm', user, 'admin_event', group)
+    if result is False:
+        return False
 
     return True
diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 83430e24d4..72602c224d 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -285,6 +285,8 @@ class IPlugin(local):
         return self.description
 
     def get_view_response(self, request, group):
+        from sentry.permissions import can_admin_group
+
         self.selected = request.path == self.get_url(group)
 
         if not self.selected:
@@ -305,6 +307,7 @@ class IPlugin(local):
             'plugin': self,
             'project': group.project,
             'group': group,
+            'can_admin_event': can_admin_group(request.user, group),
         })
 
     def view(self, request, group, **kwargs):
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 665e74886d..05f5be8083 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -6,7 +6,7 @@ from django.shortcuts import get_object_or_404
 from sentry.conf import settings
 from sentry.models import Project, Team, Group
 from sentry.web.helpers import get_project_list, render_to_response, \
-  get_login_url, get_team_list
+  get_login_url
 
 
 def has_access(group_or_func=None):
@@ -108,7 +108,7 @@ def has_team_access(group_or_func=None):
                     return HttpResponseRedirect(reverse('sentry'))
                 return func(request, team, *args, **kwargs)
 
-            team_list = get_team_list(request.user, group_or_func)
+            team_list = Team.objects.get_for_user(request.user, group_or_func)
             try:
                 team = team_list[team_slug]
             except KeyError:
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 56c9aeee9e..d55a1bc355 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -21,8 +21,9 @@ from sentry.conf import settings
 from sentry.constants import SORT_OPTIONS, SEARCH_SORT_OPTIONS, \
   SORT_CLAUSES, MYSQL_SORT_CLAUSES, SQLITE_SORT_CLAUSES
 from sentry.filters import get_filters
-from sentry.models import Group, Event, View, SearchDocument, TeamMember, MEMBER_OWNER, \
+from sentry.models import Group, Event, View, SearchDocument, \
   MEMBER_USER
+from sentry.permissions import can_admin_group
 from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.dates import parse_date
@@ -259,17 +260,6 @@ def group(request, project, group):
     # circumstances (such as a post_save signal failing)
     event = group.get_latest_event() or Event(group=group)
 
-    if request.user.is_authenticated():
-        if request.user.is_superuser:
-            access = MEMBER_OWNER
-        else:
-            try:
-                access = TeamMember.objects.get(team=project.team, user=request.user).type
-            except TeamMember.DoesNotExist:
-                access = None
-    else:
-        access = None
-
     return render_to_response('sentry/groups/details.html', {
         'project': project,
         'page': 'details',
@@ -278,7 +268,7 @@ def group(request, project, group):
         'interface_list': _get_rendered_interfaces(event),
         'json_data': event.data.get('extra', {}),
         'version_data': event.data.get('modules', None),
-        'can_admin_event': access is not None,
+        'can_admin_event': can_admin_group(request.user, group),
     }, request)
 
 
@@ -291,6 +281,7 @@ def group_event_list(request, project, group):
         'group': group,
         'event_list': event_list,
         'page': 'event_list',
+        'can_admin_event': can_admin_group(request.user, group),
     }, request)
 
 
@@ -321,6 +312,7 @@ def group_event_details(request, project, group, event_id):
         'interface_list': _get_rendered_interfaces(event),
         'json_data': event.data.get('extra', {}),
         'version_data': event.data.get('modules', None),
+        'can_admin_event': can_admin_group(request.user, group),
     }, request)
 
 
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index b4c1e71e5d..2704c5a726 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -23,7 +23,7 @@ from sentry.web.forms.projects import NewProjectForm, NewProjectAdminForm,\
   ProjectTagsForm
 from sentry.web.forms.teams import NewTeamForm, SelectTeamForm
 from sentry.web.helpers import render_to_response, get_project_list, \
-  plugin_config, get_team_list
+  plugin_config
 
 
 @login_required
@@ -55,7 +55,7 @@ def new_project(request):
         return HttpResponseRedirect(reverse('sentry'))
 
     allow_create_teams = can_create_teams(request.user)
-    team_list = get_team_list(request.user)
+    team_list = Team.objects.get_for_user(request.user)
 
     if request.user.has_perm('sentry.can_add_project') and User.objects.all()[0:2] == 2:
         project_form_cls = NewProjectAdminForm
@@ -147,7 +147,7 @@ def manage_project(request, project):
     if result is False and not request.user.has_perm('sentry.can_change_project'):
         return HttpResponseRedirect(reverse('sentry'))
 
-    team_list = get_team_list(request.user, MEMBER_OWNER)
+    team_list = Team.objects.get_for_user(request.user, MEMBER_OWNER)
 
     if request.user.has_perm('sentry.can_change_project'):
         form_cls = EditProjectAdminForm
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 22cacfd578..5a97afcbc5 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -7,6 +7,7 @@ sentry.web.views
 """
 
 import logging
+import warnings
 
 from django.conf import settings as dj_settings
 from django.core.urlresolvers import reverse, resolve
@@ -17,8 +18,8 @@ from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
 from sentry.conf import settings
-from sentry.models import Project, View, \
-  Option, ProjectOption, Team, MEMBER_USER
+from sentry.models import Project, View, Team, \
+  Option, ProjectOption, MEMBER_USER
 from sentry.permissions import can_create_projects, can_create_teams
 
 logger = logging.getLogger('sentry.errors')
@@ -43,7 +44,7 @@ def get_project_list(user=None, access=None, hidden=False, key='id'):
 
     # If the user is authenticated, include their memberships
     elif user and user.is_authenticated():
-        teams = get_team_list(user, access).values()
+        teams = Team.objects.get_for_user(user, access).values()
         if not teams:
             return SortedDict()
         filters |= Q(team__in=teams)
@@ -55,20 +56,10 @@ def get_project_list(user=None, access=None, hidden=False, key='id'):
         for p in base_qs.filter(filters).order_by('name'))
 
 
-def get_team_list(user, access=MEMBER_USER):
-    """
-    Returns a SortedDict of all teams a user has some level of access to.
-    """
-    if access is None or not user.is_authenticated():
-        return SortedDict()
-
-    qs = Team.objects.filter(
-        member_set__user=user,
-        member_set__is_active=True,
-        member_set__type__lte=access
-    ).order_by('name')
+def get_team_list(user, access=None):
+    warnings.warn('get_team_list is Deprecated. Use Team.objects.get_for_user instead.', DeprecationWarning)
+    return Team.objects.get_for_user(user, access)
 
-    return SortedDict((p.slug, p) for p in qs)
 
 _LOGIN_URL = None
 
@@ -120,7 +111,7 @@ def get_default_context(request, existing_context=None):
         if not existing_context or 'PROJECT_LIST' not in existing_context:
             context['PROJECT_LIST'] = get_project_list(request.user).values()
         if not existing_context or 'TEAM_LIST' not in existing_context:
-            context['TEAM_LIST'] = get_team_list(request.user).values()
+            context['TEAM_LIST'] = Team.objects.get_for_user(request.user).values()
 
     return context
 
