commit 7174eb059d5056123d1bc89ede0ff4917279ea7f
Author: Mark Story <mark@sentry.io>
Date:   Wed Jul 24 16:25:33 2019 -0400

    ref(events) Remove organization prefix from events views (#14134)
    
    There is no project level events view so we don't need an organization
    prefix to disambiguate the organization views.
    
    Fixes SEN-744

diff --git a/src/sentry/static/sentry/app/actionCreators/events.jsx b/src/sentry/static/sentry/app/actionCreators/events.jsx
index f788a43d73..bf25489daa 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.jsx
@@ -1,4 +1,4 @@
-import {canIncludePreviousPeriod} from 'app/views/organizationEvents/utils/canIncludePreviousPeriod';
+import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {getPeriod} from 'app/utils/getPeriod';
 
 const BASE_URL = org => `/organizations/${org.slug}/events-stats/`;
@@ -28,7 +28,6 @@ export const doEventsRequest = (
     end,
     interval,
     includePrevious,
-    limit,
     query,
     yAxis,
     groupId,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 538fea5a0c..9d0d710f60 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -955,13 +955,13 @@ function routes() {
           <Route
             path="/organizations/:orgId/events/"
             componentPromise={() =>
-              import(/* webpackChunkName: "OrganizationEventsContainer" */ 'app/views/organizationEvents')
+              import(/* webpackChunkName: "EventsContainer" */ 'app/views/events')
             }
             component={errorHandler(LazyLoad)}
           >
             <IndexRoute
               componentPromise={() =>
-                import(/* webpackChunkName: "OrganizationEvents" */ 'app/views/organizationEvents/events')
+                import(/* webpackChunkName: "Events" */ 'app/views/events/events')
               }
               component={errorHandler(LazyLoad)}
             />
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/events/events.jsx
similarity index 95%
rename from src/sentry/static/sentry/app/views/organizationEvents/events.jsx
rename to src/sentry/static/sentry/app/views/events/events.jsx
index 8db569f4e2..7a29fa6b67 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/events/events.jsx
@@ -58,11 +58,11 @@ class TotalEventCount extends AsyncComponent {
     ];
   }
 
-  onRequestError(error) {
+  onRequestError() {
     Sentry.captureException(new Error('Unable to fetch "total event count"'));
   }
 
-  renderError(error, disableLog = false, disableReport = false) {
+  renderError() {
     // Don't show an error message, handle it in `onRequestError`
     return null;
   }
@@ -75,7 +75,7 @@ class TotalEventCount extends AsyncComponent {
   }
 }
 
-class OrganizationEvents extends AsyncView {
+class Events extends AsyncView {
   static propTypes = {
     organization: SentryTypes.Organization,
   };
@@ -137,7 +137,7 @@ class OrganizationEvents extends AsyncView {
     }
   }
 
-  onRequestError(resp, args) {
+  onRequestError(resp) {
     // Allow children to implement this
     if (resp && resp.responseJSON && resp.responseJSON.detail) {
       addErrorMessage(resp.responseJSON.detail);
@@ -228,5 +228,5 @@ const RowDisplay = styled('div')`
   color: ${p => p.theme.gray6};
 `;
 
-export default withOrganization(OrganizationEvents);
-export {OrganizationEvents, parseRowFromLinks};
+export default withOrganization(Events);
+export {Events, parseRowFromLinks};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
similarity index 97%
rename from src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
rename to src/sentry/static/sentry/app/views/events/eventsChart.jsx
index ec28eff671..db8f0d1b68 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -7,7 +7,7 @@ import {getInterval} from 'app/components/charts/utils';
 import {t} from 'app/locale';
 import ChartZoom from 'app/components/charts/chartZoom';
 import LineChart from 'app/components/charts/lineChart';
-import LoadingPanel, {LoadingMask} from 'app/views/organizationEvents/loadingPanel';
+import LoadingPanel, {LoadingMask} from 'app/views/events/loadingPanel';
 import ReleaseSeries from 'app/components/charts/releaseSeries';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
@@ -138,7 +138,7 @@ class EventsChart extends React.Component {
         environments={environments}
         {...props}
       >
-        {({interval, ...zoomRenderProps}) => (
+        {({zoomRenderProps}) => (
           <EventsRequest
             {...props}
             api={api}
diff --git a/src/sentry/static/sentry/app/views/events/eventsTable.jsx b/src/sentry/static/sentry/app/views/events/eventsTable.jsx
new file mode 100644
index 0000000000..bbe7620233
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/events/eventsTable.jsx
@@ -0,0 +1,202 @@
+import {withRouter, Link} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import {PanelBody, Panel, PanelHeader} from 'app/components/panels';
+import DateTime from 'app/components/dateTime';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import IdBadge from 'app/components/idBadge';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import SentryTypes from 'app/sentryTypes';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import space from 'app/styles/space';
+
+class EventsTableBody extends React.PureComponent {
+  static propTypes = {
+    events: PropTypes.array,
+    organization: SentryTypes.Organization,
+    utc: PropTypes.bool,
+    projectsMap: PropTypes.object,
+  };
+
+  render() {
+    const {events, organization, utc, projectsMap} = this.props;
+
+    return events.map((event, eventIdx) => {
+      const project = projectsMap.get(event.projectID);
+      const trimmedMessage = event.title || event.message.split('\n')[0].substr(0, 100);
+      const eventLink = `/organizations/${organization.slug}/projects/${
+        project.slug
+      }/events/${event.eventID}/`;
+
+      return (
+        <TableRow key={`${project.slug}-${event.eventID}`} first={eventIdx === 0}>
+          <TableData>
+            <EventTitle>
+              <Link to={eventLink}>{trimmedMessage}</Link>
+            </EventTitle>
+          </TableData>
+
+          <TableData>{event['event.type']}</TableData>
+
+          <TableData>
+            <IdBadge
+              project={project}
+              avatarSize={16}
+              displayName={<span>{project.slug}</span>}
+              avatarProps={{consistentWidth: true}}
+            />
+          </TableData>
+
+          <TableData>
+            <IdBadge user={event.user} hideEmail avatarSize={16} />
+          </TableData>
+
+          <TableData>
+            <StyledDateTime utc={utc} date={new Date(event.dateCreated)} />
+          </TableData>
+        </TableRow>
+      );
+    });
+  }
+}
+
+class EventsTable extends React.Component {
+  static propTypes = {
+    // Initial loading state
+    loading: PropTypes.bool,
+
+    // When initial data has been loaded, but params have changed
+    reloading: PropTypes.bool,
+
+    // Special state when chart has been zoomed
+    zoomChanged: PropTypes.bool,
+
+    events: PropTypes.array,
+    organization: SentryTypes.Organization,
+    projects: PropTypes.arrayOf(SentryTypes.Project),
+    utc: PropTypes.bool,
+
+    // When Table is in loading state due to chart zoom but has
+    // completed its new API request
+    onUpdateComplete: PropTypes.func,
+  };
+
+  shouldComponentUpdate(nextProps) {
+    // Update if any of these "loading"-type props change so we can display loader
+    if (
+      this.props.reloading !== nextProps.reloading ||
+      this.props.zoomChanged !== nextProps.zoomChanged ||
+      this.props.loading !== nextProps.loading
+    ) {
+      return true;
+    }
+
+    // If org or events has not changed, then don't re-render
+    // Shallow compare events
+    if (
+      this.props.organization === nextProps.organization &&
+      this.props.events === nextProps.events
+    ) {
+      return false;
+    }
+
+    // Otherwise update
+    return true;
+  }
+
+  componentDidUpdate(prevProps) {
+    if (this.props.onUpdateComplete && prevProps.zoomChanged && this.props.reloading) {
+      this.props.onUpdateComplete();
+    }
+  }
+
+  get projectsMap() {
+    const {organization, projects} = this.props;
+    const projectList = projects || organization.projects;
+
+    return new Map(projectList.map(project => [project.id, project]));
+  }
+
+  render() {
+    const {events, organization, loading, reloading, zoomChanged, utc} = this.props;
+    const hasEvents = events && !!events.length;
+
+    return (
+      <Panel>
+        <PanelHeader>
+          <TableLayout>
+            <div>{t('Event')}</div>
+            <div>{t('Event Type')}</div>
+            <div>{t('Project')}</div>
+            <div>{t('User')}</div>
+            <div>{t('Time')}</div>
+          </TableLayout>
+        </PanelHeader>
+        {loading && <LoadingIndicator />}
+        {!loading && !hasEvents && (
+          <EmptyStateWarning>
+            <p>{t('No events')}</p>
+          </EmptyStateWarning>
+        )}
+        {hasEvents && (
+          <StyledPanelBody>
+            {(reloading || zoomChanged) && <StyledLoadingIndicator overlay />}
+            <EventsTableBody
+              projectsMap={this.projectsMap}
+              events={events}
+              organization={organization}
+              utc={utc}
+            />
+          </StyledPanelBody>
+        )}
+      </Panel>
+    );
+  }
+}
+
+export default withRouter(EventsTable);
+export {EventsTable};
+
+const StyledPanelBody = styled(PanelBody)`
+  overflow-x: auto;
+  padding: 0;
+`;
+
+const TableLayout = styled('div')`
+  display: grid;
+  grid-template-columns: 0.8fr 0.15fr 0.15fr 0.25fr 200px;
+  grid-column-gap: ${space(1.5)};
+  width: 100%;
+`;
+
+const StyledLoadingIndicator = styled(LoadingIndicator)`
+  padding-top: 10vh;
+  z-index: 1;
+  &.loading.overlay {
+    align-items: flex-start;
+  }
+`;
+
+const TableRow = styled(TableLayout)`
+  font-size: ${p => p.theme.fontSizeMedium};
+  border-top: 1px solid ${p => (p.first ? 'transparent' : p.theme.borderLight)};
+  align-items: center;
+  padding: ${space(1)} ${space(2)};
+`;
+
+const TableData = styled('div')`
+  overflow: hidden; /* enables overflow-ellipsis on child container */
+`;
+
+const EventTitle = styled(TableData)`
+  padding-right: ${space(2)};
+  ${overflowEllipsis};
+`;
+
+const StyledDateTime = styled(DateTime)`
+  color: ${p => p.theme.gray2};
+  ${overflowEllipsis};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/events/index.jsx
similarity index 89%
rename from src/sentry/static/sentry/app/views/organizationEvents/index.jsx
rename to src/sentry/static/sentry/app/views/events/index.jsx
index 1dce358c55..6c2d787537 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/events/index.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {getParams} from 'app/views/organizationEvents/utils/getParams';
+import {getParams} from 'app/views/events/utils/getParams';
 import {t} from 'app/locale';
 import BetaTag from 'app/components/betaTag';
 import Feature from 'app/components/acl/feature';
@@ -17,7 +17,7 @@ import LazyLoad from 'app/components/lazyLoad';
 
 import SearchBar from './searchBar';
 
-class OrganizationEventsContainer extends React.Component {
+class EventsContainer extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
     router: PropTypes.object,
@@ -49,7 +49,7 @@ class OrganizationEventsContainer extends React.Component {
       return (
         <LazyLoad
           component={() =>
-            import(/* webpackChunkName: "organizationEventsV2" */ 'app/views/organizationEventsV2').then(
+            import(/* webpackChunkName: "OrganizationEventsV2" */ 'app/views/organizationEventsV2').then(
               mod => mod.default
             )
           }
@@ -88,8 +88,8 @@ class OrganizationEventsContainer extends React.Component {
     );
   }
 }
-export default withOrganization(withGlobalSelection(OrganizationEventsContainer));
-export {OrganizationEventsContainer};
+export default withOrganization(withGlobalSelection(EventsContainer));
+export {EventsContainer};
 
 const Body = styled('div')`
   background-color: ${p => p.theme.whiteDark};
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx b/src/sentry/static/sentry/app/views/events/loadingPanel.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationEvents/loadingPanel.jsx
rename to src/sentry/static/sentry/app/views/events/loadingPanel.jsx
diff --git a/src/sentry/static/sentry/app/views/events/searchBar.jsx b/src/sentry/static/sentry/app/views/events/searchBar.jsx
new file mode 100644
index 0000000000..a5d679f9ba
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/events/searchBar.jsx
@@ -0,0 +1,99 @@
+import {css} from 'react-emotion';
+import {flatten, memoize} from 'lodash';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {defined} from 'app/utils';
+import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
+import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import SmartSearchBar from 'app/components/smartSearchBar';
+import withApi from 'app/utils/withApi';
+
+const tagToObjectReducer = (acc, name) => {
+  acc[name] = {
+    key: name,
+    name,
+  };
+  return acc;
+};
+
+const SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(
+  `^${NEGATION_OPERATOR}|\\${SEARCH_WILDCARD}`,
+  'g'
+);
+
+class SearchBar extends React.PureComponent {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization,
+  };
+
+  constructor() {
+    super();
+
+    this.state = {
+      tags: {},
+    };
+  }
+
+  componentDidMount() {
+    const {api, organization} = this.props;
+    fetchOrganizationTags(api, organization.slug).then(
+      results => {
+        this.setState({
+          tags: this.getAllTags(results.map(({key}) => key)),
+        });
+      },
+      () => addErrorMessage(t('There was a problem fetching tags'))
+    );
+  }
+
+  /**
+   * Returns array of tag values that substring match `query`; invokes `callback`
+   * with data when ready
+   */
+  getEventFieldValues = memoize(
+    (tag, query) => {
+      const {api, organization} = this.props;
+
+      return fetchTagValues(api, organization.slug, tag.key, query).then(
+        results =>
+          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),
+        () => {
+          throw new Error('Unable to fetch event field values');
+        }
+      );
+    },
+    ({key}, query) => `${key}-${query}`
+  );
+
+  getAllTags = (orgTags = []) => orgTags.sort().reduce(tagToObjectReducer, {});
+
+  /**
+   * Prepare query string (e.g. strip special characters like negation operator)
+   */
+  prepareQuery = query => {
+    return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');
+  };
+
+  render() {
+    return (
+      <SmartSearchBar
+        {...this.props}
+        onGetTagValues={this.getEventFieldValues}
+        supportedTags={this.state.tags}
+        prepareQuery={this.prepareQuery}
+        excludeEnvironment
+        dropdownClassName={css`
+          max-height: 300px;
+          overflow-y: auto;
+        `}
+      />
+    );
+  }
+}
+
+export default withApi(SearchBar);
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx b/src/sentry/static/sentry/app/views/events/utils/canIncludePreviousPeriod.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx
rename to src/sentry/static/sentry/app/views/events/utils/canIncludePreviousPeriod.jsx
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.jsx
similarity index 97%
rename from src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
rename to src/sentry/static/sentry/app/views/events/utils/eventsRequest.jsx
index 66eae0b8a6..e3b1029030 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.jsx
@@ -3,7 +3,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {addErrorMessage} from 'app/actionCreators/indicator';
-import {canIncludePreviousPeriod} from 'app/views/organizationEvents/utils/canIncludePreviousPeriod';
+import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {doEventsRequest} from 'app/actionCreators/events';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
@@ -12,7 +12,7 @@ import LoadingPanel from '../loadingPanel';
 
 const propNamesToIgnore = ['api', 'children', 'organization', 'loading'];
 const omitIgnoredProps = props =>
-  omitBy(props, (value, key) => propNamesToIgnore.includes(key));
+  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));
 
 class EventsRequest extends React.PureComponent {
   static propTypes = {
@@ -221,7 +221,7 @@ class EventsRequest extends React.PureComponent {
       seriesName: 'Previous Period',
       data: this.calculateTotalsPerTimestamp(
         previous,
-        (timestamp, countArray, i) => current[i][0] * 1000
+        (_timestamp, _countArray, i) => current[i][0] * 1000
       ),
     };
   };
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx b/src/sentry/static/sentry/app/views/events/utils/getParams.jsx
similarity index 96%
rename from src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
rename to src/sentry/static/sentry/app/views/events/utils/getParams.jsx
index b01165d49a..a573f3a6e1 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/getParams.jsx
+++ b/src/sentry/static/sentry/app/views/events/utils/getParams.jsx
@@ -35,7 +35,7 @@ export function getParams(params = {}) {
     utc: getUtcValue(utc),
     ...otherParams,
   })
-    .filter(([key, value]) => defined(value))
+    .filter(([_key, value]) => defined(value))
     .reduce(
       (acc, [key, value]) => ({
         ...acc,
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/yAxisSelector.jsx b/src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/organizationEvents/yAxisSelector.jsx
rename to src/sentry/static/sentry/app/views/events/yAxisSelector.jsx
diff --git a/src/sentry/static/sentry/app/views/monitors/monitors.jsx b/src/sentry/static/sentry/app/views/monitors/monitors.jsx
index 4ef3e356f6..1d10429cec 100644
--- a/src/sentry/static/sentry/app/views/monitors/monitors.jsx
+++ b/src/sentry/static/sentry/app/views/monitors/monitors.jsx
@@ -7,7 +7,7 @@ import {Box} from 'grid-emotion';
 import AsyncView from 'app/views/asyncView';
 import BetaTag from 'app/components/betaTag';
 import Button from 'app/components/button';
-import {getParams} from 'app/views/organizationEvents/utils/getParams';
+import {getParams} from 'app/views/events/utils/getParams';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import {PageHeader} from 'app/styles/organization';
 import PageHeading from 'app/components/pageHeading';
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
index 03e8b67802..9a8dc2ea6a 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/widget.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {LoadingMask} from 'app/views/organizationEvents/loadingPanel';
+import {LoadingMask} from 'app/views/events/loadingPanel';
 import {Panel, PanelBody} from 'app/components/panels';
 import {t} from 'app/locale';
 import ErrorBoundary from 'app/components/errorBoundary';
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
index bbe7620233..d2dad69c05 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsTable.jsx
@@ -1,202 +1,4 @@
-import {withRouter, Link} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
+// Temporary re-export shim for getsentry
+import EventsTable from 'app/views/events/eventsTable';
 
-import {t} from 'app/locale';
-import {PanelBody, Panel, PanelHeader} from 'app/components/panels';
-import DateTime from 'app/components/dateTime';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
-import IdBadge from 'app/components/idBadge';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import SentryTypes from 'app/sentryTypes';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import space from 'app/styles/space';
-
-class EventsTableBody extends React.PureComponent {
-  static propTypes = {
-    events: PropTypes.array,
-    organization: SentryTypes.Organization,
-    utc: PropTypes.bool,
-    projectsMap: PropTypes.object,
-  };
-
-  render() {
-    const {events, organization, utc, projectsMap} = this.props;
-
-    return events.map((event, eventIdx) => {
-      const project = projectsMap.get(event.projectID);
-      const trimmedMessage = event.title || event.message.split('\n')[0].substr(0, 100);
-      const eventLink = `/organizations/${organization.slug}/projects/${
-        project.slug
-      }/events/${event.eventID}/`;
-
-      return (
-        <TableRow key={`${project.slug}-${event.eventID}`} first={eventIdx === 0}>
-          <TableData>
-            <EventTitle>
-              <Link to={eventLink}>{trimmedMessage}</Link>
-            </EventTitle>
-          </TableData>
-
-          <TableData>{event['event.type']}</TableData>
-
-          <TableData>
-            <IdBadge
-              project={project}
-              avatarSize={16}
-              displayName={<span>{project.slug}</span>}
-              avatarProps={{consistentWidth: true}}
-            />
-          </TableData>
-
-          <TableData>
-            <IdBadge user={event.user} hideEmail avatarSize={16} />
-          </TableData>
-
-          <TableData>
-            <StyledDateTime utc={utc} date={new Date(event.dateCreated)} />
-          </TableData>
-        </TableRow>
-      );
-    });
-  }
-}
-
-class EventsTable extends React.Component {
-  static propTypes = {
-    // Initial loading state
-    loading: PropTypes.bool,
-
-    // When initial data has been loaded, but params have changed
-    reloading: PropTypes.bool,
-
-    // Special state when chart has been zoomed
-    zoomChanged: PropTypes.bool,
-
-    events: PropTypes.array,
-    organization: SentryTypes.Organization,
-    projects: PropTypes.arrayOf(SentryTypes.Project),
-    utc: PropTypes.bool,
-
-    // When Table is in loading state due to chart zoom but has
-    // completed its new API request
-    onUpdateComplete: PropTypes.func,
-  };
-
-  shouldComponentUpdate(nextProps) {
-    // Update if any of these "loading"-type props change so we can display loader
-    if (
-      this.props.reloading !== nextProps.reloading ||
-      this.props.zoomChanged !== nextProps.zoomChanged ||
-      this.props.loading !== nextProps.loading
-    ) {
-      return true;
-    }
-
-    // If org or events has not changed, then don't re-render
-    // Shallow compare events
-    if (
-      this.props.organization === nextProps.organization &&
-      this.props.events === nextProps.events
-    ) {
-      return false;
-    }
-
-    // Otherwise update
-    return true;
-  }
-
-  componentDidUpdate(prevProps) {
-    if (this.props.onUpdateComplete && prevProps.zoomChanged && this.props.reloading) {
-      this.props.onUpdateComplete();
-    }
-  }
-
-  get projectsMap() {
-    const {organization, projects} = this.props;
-    const projectList = projects || organization.projects;
-
-    return new Map(projectList.map(project => [project.id, project]));
-  }
-
-  render() {
-    const {events, organization, loading, reloading, zoomChanged, utc} = this.props;
-    const hasEvents = events && !!events.length;
-
-    return (
-      <Panel>
-        <PanelHeader>
-          <TableLayout>
-            <div>{t('Event')}</div>
-            <div>{t('Event Type')}</div>
-            <div>{t('Project')}</div>
-            <div>{t('User')}</div>
-            <div>{t('Time')}</div>
-          </TableLayout>
-        </PanelHeader>
-        {loading && <LoadingIndicator />}
-        {!loading && !hasEvents && (
-          <EmptyStateWarning>
-            <p>{t('No events')}</p>
-          </EmptyStateWarning>
-        )}
-        {hasEvents && (
-          <StyledPanelBody>
-            {(reloading || zoomChanged) && <StyledLoadingIndicator overlay />}
-            <EventsTableBody
-              projectsMap={this.projectsMap}
-              events={events}
-              organization={organization}
-              utc={utc}
-            />
-          </StyledPanelBody>
-        )}
-      </Panel>
-    );
-  }
-}
-
-export default withRouter(EventsTable);
-export {EventsTable};
-
-const StyledPanelBody = styled(PanelBody)`
-  overflow-x: auto;
-  padding: 0;
-`;
-
-const TableLayout = styled('div')`
-  display: grid;
-  grid-template-columns: 0.8fr 0.15fr 0.15fr 0.25fr 200px;
-  grid-column-gap: ${space(1.5)};
-  width: 100%;
-`;
-
-const StyledLoadingIndicator = styled(LoadingIndicator)`
-  padding-top: 10vh;
-  z-index: 1;
-  &.loading.overlay {
-    align-items: flex-start;
-  }
-`;
-
-const TableRow = styled(TableLayout)`
-  font-size: ${p => p.theme.fontSizeMedium};
-  border-top: 1px solid ${p => (p.first ? 'transparent' : p.theme.borderLight)};
-  align-items: center;
-  padding: ${space(1)} ${space(2)};
-`;
-
-const TableData = styled('div')`
-  overflow: hidden; /* enables overflow-ellipsis on child container */
-`;
-
-const EventTitle = styled(TableData)`
-  padding-right: ${space(2)};
-  ${overflowEllipsis};
-`;
-
-const StyledDateTime = styled(DateTime)`
-  color: ${p => p.theme.gray2};
-  ${overflowEllipsis};
-`;
+export default EventsTable;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
index a5d679f9ba..bb400946a0 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/searchBar.jsx
@@ -1,99 +1,4 @@
-import {css} from 'react-emotion';
-import {flatten, memoize} from 'lodash';
-import PropTypes from 'prop-types';
-import React from 'react';
+// Temporary re-export shim for getsentry
+import SearchBar from 'app/views/events/searchBar';
 
-import {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {defined} from 'app/utils';
-import {fetchOrganizationTags, fetchTagValues} from 'app/actionCreators/tags';
-import {t} from 'app/locale';
-import SentryTypes from 'app/sentryTypes';
-import SmartSearchBar from 'app/components/smartSearchBar';
-import withApi from 'app/utils/withApi';
-
-const tagToObjectReducer = (acc, name) => {
-  acc[name] = {
-    key: name,
-    name,
-  };
-  return acc;
-};
-
-const SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(
-  `^${NEGATION_OPERATOR}|\\${SEARCH_WILDCARD}`,
-  'g'
-);
-
-class SearchBar extends React.PureComponent {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization,
-  };
-
-  constructor() {
-    super();
-
-    this.state = {
-      tags: {},
-    };
-  }
-
-  componentDidMount() {
-    const {api, organization} = this.props;
-    fetchOrganizationTags(api, organization.slug).then(
-      results => {
-        this.setState({
-          tags: this.getAllTags(results.map(({key}) => key)),
-        });
-      },
-      () => addErrorMessage(t('There was a problem fetching tags'))
-    );
-  }
-
-  /**
-   * Returns array of tag values that substring match `query`; invokes `callback`
-   * with data when ready
-   */
-  getEventFieldValues = memoize(
-    (tag, query) => {
-      const {api, organization} = this.props;
-
-      return fetchTagValues(api, organization.slug, tag.key, query).then(
-        results =>
-          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),
-        () => {
-          throw new Error('Unable to fetch event field values');
-        }
-      );
-    },
-    ({key}, query) => `${key}-${query}`
-  );
-
-  getAllTags = (orgTags = []) => orgTags.sort().reduce(tagToObjectReducer, {});
-
-  /**
-   * Prepare query string (e.g. strip special characters like negation operator)
-   */
-  prepareQuery = query => {
-    return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');
-  };
-
-  render() {
-    return (
-      <SmartSearchBar
-        {...this.props}
-        onGetTagValues={this.getEventFieldValues}
-        supportedTags={this.state.tags}
-        prepareQuery={this.prepareQuery}
-        excludeEnvironment
-        dropdownClassName={css`
-          max-height: 300px;
-          overflow-y: auto;
-        `}
-      />
-    );
-  }
-}
-
-export default withApi(SearchBar);
+export default SearchBar;
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
index 3aa6d53608..478d7a04b8 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
@@ -4,14 +4,14 @@ import styled from 'react-emotion';
 import {omit, isEqual} from 'lodash';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
-import SearchBar from 'app/views/organizationEvents/searchBar';
+import SearchBar from 'app/views/events/searchBar';
 import AsyncComponent from 'app/components/asyncComponent';
 import Pagination from 'app/components/pagination';
 import {Panel} from 'app/components/panels';
-import EventsChart from 'app/views/organizationEvents/eventsChart';
+import EventsChart from 'app/views/events/eventsChart';
 import getDynamicText from 'app/utils/getDynamicText';
 
-import {getParams} from 'app/views/organizationEvents/utils/getParams';
+import {getParams} from 'app/views/events/utils/getParams';
 
 import Table from './table';
 import Tags from './tags';
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
index 51c72dd63b..d4d2b291cd 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
@@ -11,7 +11,7 @@ import {
   getUtcDateString,
   intervalToMilliseconds,
 } from 'app/utils/dates';
-import EventsRequest from 'app/views/organizationEvents/utils/eventsRequest';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
 import LineChart from 'app/components/charts/lineChart';
 import MarkLine from 'app/components/charts/components/markLine';
 import {Panel} from 'app/components/panels';
@@ -42,7 +42,7 @@ const getCurrentEventMarker = currentEvent => {
         },
       },
       tooltip: {
-        formatter: ({data}) => {
+        formatter: () => {
           return `<div>${getFormattedDate(eventTime, 'MMM D, YYYY LT')}</div>`;
         },
       },
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/events/events.spec.jsx
similarity index 88%
rename from tests/js/spec/views/organizationEvents/events.spec.jsx
rename to tests/js/spec/views/events/events.spec.jsx
index 29ae494b5b..7e52daf238 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/events/events.spec.jsx
@@ -1,13 +1,13 @@
 import {withRouter, browserHistory} from 'react-router';
 import React from 'react';
 
-import OrganizationEvents, {parseRowFromLinks} from 'app/views/organizationEvents/events';
+import Events, {parseRowFromLinks} from 'app/views/events/events';
 import {chart, doZoom} from 'app-test/helpers/charts';
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {mockRouterPush} from 'app-test/helpers/mockRouterPush';
 import {mount} from 'enzyme';
-import OrganizationEventsContainer from 'app/views/organizationEvents';
+import EventsContainer from 'app/views/events';
 import ProjectsStore from 'app/stores/projectsStore';
 
 jest.mock('app/utils/withLatestContext');
@@ -20,9 +20,9 @@ const pageTwoLinks =
   '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:0:1>; rel="previous"; results="true"; cursor="0:0:1", ' +
   '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:200:0>; rel="next"; results="false"; cursor="0:200:0"';
 
-const OrganizationEventsWithRouter = withRouter(OrganizationEvents);
+const EventsWithRouter = withRouter(Events);
 
-describe('OrganizationEventsErrors', function() {
+describe('EventsErrors', function() {
   const {organization, router, routerContext} = initializeOrg({
     projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
     organization: {
@@ -55,12 +55,12 @@ describe('OrganizationEventsErrors', function() {
     });
     eventsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events/',
-      body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
+      body: (_url, opts) => [TestStubs.OrganizationEvent(opts.query)],
       headers: {Link: pageOneLinks},
     });
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
-      body: (url, opts) => {
+      body: (_url, opts) => {
         return TestStubs.EventsStats(opts.query);
       },
     });
@@ -82,7 +82,7 @@ describe('OrganizationEventsErrors', function() {
       body: {details: 'Error'},
     });
     const wrapper = mount(
-      <OrganizationEvents organization={organization} location={{query: {}}} />,
+      <Events organization={organization} location={{query: {}}} />,
       routerContext
     );
     await tick();
@@ -95,7 +95,7 @@ describe('OrganizationEventsErrors', function() {
 
   it('renders events table', async function() {
     const wrapper = mount(
-      <OrganizationEvents organization={organization} location={{query: {}}} />,
+      <Events organization={organization} location={{query: {}}} />,
       routerContext
     );
     await tick();
@@ -111,10 +111,10 @@ describe('OrganizationEventsErrors', function() {
       ...organization,
       features: [...organization.features, 'internal-catchall'],
     });
-    const wrapper = mount(
-      <OrganizationEvents organization={newOrg} location={{query: {}}} />,
-      {...routerContext, context: {...routerContext.context, organization: newOrg}}
-    );
+    const wrapper = mount(<Events organization={newOrg} location={{query: {}}} />, {
+      ...routerContext,
+      context: {...routerContext.context, organization: newOrg},
+    });
     await tick();
     wrapper.update();
     expect(eventsMetaMock).toHaveBeenCalled();
@@ -125,7 +125,7 @@ describe('OrganizationEventsErrors', function() {
   // Use `search` to compare instead of `query` because that's what we check in `AsyncComponent`
   it('location.query changes updates events table', async function() {
     const wrapper = mount(
-      <OrganizationEventsWithRouter
+      <EventsWithRouter
         organization={organization}
         location={{
           search: '?statsPeriod=14d',
@@ -204,16 +204,13 @@ describe('OrganizationEventsErrors', function() {
       };
 
       wrapper = mount(
-        <OrganizationEventsContainer
+        <EventsContainer
           router={newRouter}
           organization={organization}
           location={newRouter.location}
         >
-          <OrganizationEventsWithRouter
-            location={newRouter.location}
-            organization={organization}
-          />
-        </OrganizationEventsContainer>,
+          <EventsWithRouter location={newRouter.location} organization={organization} />
+        </EventsContainer>,
         newRouterContext
       );
       mockRouterPush(wrapper, router);
@@ -269,7 +266,7 @@ describe('OrganizationEventsErrors', function() {
   });
 });
 
-describe('OrganizationEventsContainer', function() {
+describe('EventsContainer', function() {
   let wrapper;
   let eventsMock;
   let eventsStatsMock;
@@ -306,12 +303,12 @@ describe('OrganizationEventsContainer', function() {
     });
     eventsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events/',
-      body: (url, opts) => [TestStubs.OrganizationEvent(opts.query)],
+      body: (_url, opts) => [TestStubs.OrganizationEvent(opts.query)],
       headers: {Link: pageOneLinks},
     });
     eventsStatsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events-stats/',
-      body: (url, opts) => {
+      body: (_url, opts) => {
         return TestStubs.EventsStats(opts.query);
       },
     });
@@ -321,16 +318,13 @@ describe('OrganizationEventsContainer', function() {
     });
 
     wrapper = mount(
-      <OrganizationEventsContainer
+      <EventsContainer
         router={router}
         organization={organization}
         location={router.location}
       >
-        <OrganizationEventsWithRouter
-          location={router.location}
-          organization={organization}
-        />
-      </OrganizationEventsContainer>,
+        <EventsWithRouter location={router.location} organization={organization} />
+      </EventsContainer>,
       routerContext
     );
 
@@ -410,14 +404,14 @@ describe('OrganizationEventsContainer', function() {
     browserHistory.replace = jest.fn();
     eventsMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/events/',
-      body: (url, opts) => [
+      body: (_url, opts) => [
         TestStubs.OrganizationEvent({...opts.query, eventID: eventId}),
       ],
       headers: {'X-Sentry-Direct-Hit': '1'},
     });
 
     wrapper = mount(
-      <OrganizationEvents organization={organization} location={{query: eventId}} />,
+      <Events organization={organization} location={{query: eventId}} />,
       routerContext
     );
 
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/events/eventsChart.spec.jsx
similarity index 96%
rename from tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
rename to tests/js/spec/views/events/eventsChart.spec.jsx
index 8446a9eaa7..ff975bbd22 100644
--- a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
+++ b/tests/js/spec/views/events/eventsChart.spec.jsx
@@ -1,13 +1,13 @@
 import React from 'react';
 
-import {EventsChart} from 'app/views/organizationEvents/eventsChart';
+import {EventsChart} from 'app/views/events/eventsChart';
 import {chart, doZoom, mockZoomRange} from 'app-test/helpers/charts';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {mount} from 'enzyme';
 import {updateParams} from 'app/actionCreators/globalSelection';
 
-jest.mock('app/views/organizationEvents/utils/eventsRequest', () => jest.fn(() => null));
+jest.mock('app/views/events/utils/eventsRequest', () => jest.fn(() => null));
 
 jest.mock('app/actionCreators/globalSelection', () => ({
   updateParams: jest.fn(),
diff --git a/tests/js/spec/views/organizationEvents/eventsLineChart.spec.jsx b/tests/js/spec/views/events/eventsLineChart.spec.jsx
similarity index 96%
rename from tests/js/spec/views/organizationEvents/eventsLineChart.spec.jsx
rename to tests/js/spec/views/events/eventsLineChart.spec.jsx
index f4403bc29d..27f1bcb776 100644
--- a/tests/js/spec/views/organizationEvents/eventsLineChart.spec.jsx
+++ b/tests/js/spec/views/events/eventsLineChart.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
 import {Client} from 'app/api';
-import {EventsChart} from 'app/views/organizationEvents/eventsChart';
+import {EventsChart} from 'app/views/events/eventsChart';
 import {mockZoomRange} from 'app-test/helpers/charts';
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {mount} from 'enzyme';
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/events/index.spec.jsx
similarity index 98%
rename from tests/js/spec/views/organizationEvents/index.spec.jsx
rename to tests/js/spec/views/events/index.spec.jsx
index 131fe877d6..9297280626 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/events/index.spec.jsx
@@ -5,10 +5,10 @@ import {mockRouterPush} from 'app-test/helpers/mockRouterPush';
 import {mount} from 'enzyme';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
-import OrganizationEventsContainer from 'app/views/organizationEvents';
+import EventsContainer from 'app/views/events';
 import ProjectsStore from 'app/stores/projectsStore';
 
-describe('OrganizationEvents', function() {
+describe('EventsContainer', function() {
   let wrapper;
   const environments = ['production', 'staging'];
   const {organization, router, routerContext} = initializeOrg({
@@ -47,13 +47,13 @@ describe('OrganizationEvents', function() {
         query: {},
       };
       wrapper = mount(
-        <OrganizationEventsContainer
+        <EventsContainer
           router={router}
           organization={organization}
           location={router.location}
         >
           <div />
-        </OrganizationEventsContainer>,
+        </EventsContainer>,
         routerContext
       );
 
diff --git a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx b/tests/js/spec/views/events/searchBar.spec.jsx
similarity index 98%
rename from tests/js/spec/views/organizationEvents/searchBar.spec.jsx
rename to tests/js/spec/views/events/searchBar.spec.jsx
index 9cbea4b0df..c58d258dac 100644
--- a/tests/js/spec/views/organizationEvents/searchBar.spec.jsx
+++ b/tests/js/spec/views/events/searchBar.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import SearchBar from 'app/views/organizationEvents/searchBar';
+import SearchBar from 'app/views/events/searchBar';
 import TagStore from 'app/stores/tagStore';
 
 const focusInput = el => el.find('input[name="query"]').simulate('focus');
diff --git a/tests/js/spec/views/organizationEvents/utils/canIncludePreviousPeriod.spec.jsx b/tests/js/spec/views/events/utils/canIncludePreviousPeriod.spec.jsx
similarity index 86%
rename from tests/js/spec/views/organizationEvents/utils/canIncludePreviousPeriod.spec.jsx
rename to tests/js/spec/views/events/utils/canIncludePreviousPeriod.spec.jsx
index f2a63c3ddb..f63a4a5d5c 100644
--- a/tests/js/spec/views/organizationEvents/utils/canIncludePreviousPeriod.spec.jsx
+++ b/tests/js/spec/views/events/utils/canIncludePreviousPeriod.spec.jsx
@@ -1,4 +1,4 @@
-import {canIncludePreviousPeriod} from 'app/views/organizationEvents/utils/canIncludePreviousPeriod';
+import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 
 describe('canIncludePreviousPeriod', function() {
   it('does not include if `includePrevious` is false', function() {
diff --git a/tests/js/spec/views/organizationEvents/utils/eventsRequest.spec.jsx b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
similarity index 98%
rename from tests/js/spec/views/organizationEvents/utils/eventsRequest.spec.jsx
rename to tests/js/spec/views/events/utils/eventsRequest.spec.jsx
index 543081c8e8..efc7eeeeba 100644
--- a/tests/js/spec/views/organizationEvents/utils/eventsRequest.spec.jsx
+++ b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
@@ -2,7 +2,7 @@ import {mount} from 'enzyme';
 import React from 'react';
 
 import {doEventsRequest} from 'app/actionCreators/events';
-import EventsRequest from 'app/views/organizationEvents/utils/eventsRequest';
+import EventsRequest from 'app/views/events/utils/eventsRequest';
 
 const COUNT_OBJ = {
   count: 123,
