commit 1ba281b7a94b1c4a5149777d266fbf9f3e7e2804
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Nov 23 11:31:50 2018 +0100

    ref(javascript): Handle null values gracefully in the JS plugin (#10734)

diff --git a/src/sentry/lang/javascript/errorlocale.py b/src/sentry/lang/javascript/errorlocale.py
index 1e114f9c6d..a4ff49dc95 100644
--- a/src/sentry/lang/javascript/errorlocale.py
+++ b/src/sentry/lang/javascript/errorlocale.py
@@ -5,6 +5,8 @@ import os
 import io
 import re
 
+from sentry.utils.safe import get_path
+
 LOCALES_DIR = os.path.join(os.path.dirname(__file__), '../../data/error-locale')
 TARGET_LOCALE = 'en-US'
 
@@ -87,13 +89,16 @@ def translate_message(original_message):
 
 
 def translate_exception(data):
-    if 'logentry' in data:
-        data['logentry']['message'] = translate_message(
-            data['logentry']['message'])
-
-    if 'exception' in data:
-        for entry in data['exception']['values']:
-            if 'value' in entry:
-                entry['value'] = translate_message(entry['value'])
+    message = get_path(data, 'logentry', 'message')
+    if message:
+        data['logentry']['message'] = translate_message(message)
+
+    formatted = get_path(data, 'logentry', 'formatted')
+    if formatted:
+        data['logentry']['formatted'] = translate_message(formatted)
+
+    for entry in get_path(data, 'exception', 'values', filter=True, default=()):
+        if 'value' in entry:
+            entry['value'] = translate_message(entry['value'])
 
     return data
diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index 60d5f433d7..066c8e933a 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -12,6 +12,7 @@ from django.core.cache import cache
 from six.moves.urllib.parse import parse_qsl
 
 from sentry import http
+from sentry.utils.safe import get_path
 from sentry.utils.strings import count_sprintf_parameters
 
 logger = logging.getLogger(__name__)
@@ -66,7 +67,7 @@ class Processor(object):
         return data
 
     def try_process(self, exc):
-        if not exc['value']:
+        if not exc.get('value'):
             return False
         match = self.regex.search(exc['value'])
         if match is None:
@@ -115,12 +116,8 @@ def rewrite_exception(data):
     in place and returns `True` if a modification was performed or `False`
     otherwise.
     """
-    exc_data = data.get('exception')
-    if not exc_data:
-        return False
-
     rv = False
-    for exc in exc_data['values']:
+    for exc in get_path(data, 'exception', 'values', filter=True, default=()):
         for processor in six.itervalues(error_processors):
             try:
                 if processor.try_process(exc):
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 5d8ddee140..ccf0f10145 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 from sentry.plugins import Plugin2
 from sentry.stacktraces import find_stacktraces_in_data
 from sentry.utils.contexts_normalization import normalize_user_agent
+from sentry.utils.safe import get_path
 
 from .processor import JavaScriptStacktraceProcessor
 from .errormapping import rewrite_exception
@@ -23,7 +24,7 @@ def generate_modules(data):
     from sentry.lang.javascript.processor import generate_module
 
     for info in find_stacktraces_in_data(data):
-        for frame in info.stacktrace['frames']:
+        for frame in get_path(info.stacktrace, 'frames', filter=True, default=()):
             platform = frame.get('platform') or data['platform']
             if platform not in ('javascript', 'node') or frame.get('module'):
                 continue
@@ -33,8 +34,7 @@ def generate_modules(data):
 
 
 def fix_culprit(data):
-    exc = data.get('exception')
-    if not exc:
+    if not get_path(data, 'exception', 'values', filter=True):
         return
 
     from sentry.event_manager import generate_culprit
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 980c3ad036..cc4156f559 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -31,6 +31,7 @@ from sentry.utils.cache import cache
 from sentry.utils.files import compress_file
 from sentry.utils.hashlib import md5_text
 from sentry.utils.http import is_valid_origin
+from sentry.utils.safe import get_path
 from sentry.utils import metrics
 from sentry.stacktraces import StacktraceProcessor
 
@@ -489,13 +490,8 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
         self.dist = None
 
     def get_stacktraces(self, data):
-        try:
-            stacktraces = [
-                e['stacktrace'] for e in data['exception']['values']
-                if e.get('stacktrace')
-            ]
-        except KeyError:
-            stacktraces = []
+        exceptions = get_path(data, 'exception', 'values', filter=True, default=())
+        stacktraces = [e['stacktrace'] for e in exceptions if e.get('stacktrace')]
 
         if 'stacktrace' in data:
             stacktraces.append(data['stacktrace'])
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 7bfeb91aee..d6b64c73f0 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -8,18 +8,16 @@ sentry.utils.javascript
 from __future__ import absolute_import
 
 
+from sentry.utils.safe import get_path
+
+
 def has_sourcemap(event):
     if event.platform not in ('javascript', 'node'):
         return False
-    data = event.data
 
-    if 'exception' not in data:
-        return False
-    exception = data['exception']
-    for value in exception['values']:
-        stacktrace = value.get('stacktrace', {})
-        for frame in stacktrace.get('frames', []):
-            if 'sourcemap' in frame.get('data', {}):
+    for exception in get_path(event.data, 'exception', 'values', filter=True, default=()):
+        for frame in get_path(exception, 'stacktrace', 'frames', filter=True, default=()):
+            if 'sourcemap' in (frame.get('data') or ()):
                 return True
 
     return False
diff --git a/tests/sentry/lang/javascript/test_errorlocale.py b/tests/sentry/lang/javascript/test_errorlocale.py
index cdd4d5827a..693715811d 100644
--- a/tests/sentry/lang/javascript/test_errorlocale.py
+++ b/tests/sentry/lang/javascript/test_errorlocale.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import, unicode_literals
 
+from copy import deepcopy
+
 from sentry.testutils import TestCase
-from sentry.lang.javascript.errorlocale import translate_message
+from sentry.lang.javascript.errorlocale import translate_message, translate_exception
 
 
 class ErrorLocaleTest(TestCase):
@@ -63,3 +65,54 @@ class ErrorLocaleTest(TestCase):
         actual = translate_message(
             u'ReferenceError: Nie mo\u017cna zmodyfikowa\u0107 w\u0142a\u015bciwo\u015bci \u201efoo\u201d: warto\u015b\u0107 \u201elength\u201d jest niezapisywalna')
         assert actual == expected
+
+    def test_translate_exception(self):
+        data = {
+            'logentry': {
+                'message': 'Typenkonflikt',
+                'formatted': 'Typenkonflikt',
+            },
+            'exception': {
+                'values': [
+                    {'value': 'Typenkonflikt'},
+                    {'value': 'Typenkonflikt'},
+                ]
+            }
+        }
+
+        translate_exception(data)
+        assert data == {
+            'logentry': {
+                'message': 'Type mismatch',
+                'formatted': 'Type mismatch',
+            },
+            'exception': {
+                'values': [
+                    {'value': 'Type mismatch'},
+                    {'value': 'Type mismatch'},
+                ]
+            }
+        }
+
+    def test_translate_exception_missing(self):
+        data = {}
+        translate_exception(data)
+        assert data == {}
+
+    def test_translate_exception_none(self):
+        expected = {
+            'logentry': {
+                'message': None,
+                'formatted': None,
+            },
+            'exception': {
+                'values': [
+                    None,
+                    {'value': None},
+                ]
+            }
+        }
+
+        actual = deepcopy(expected)
+        translate_exception(actual)
+        assert actual == expected
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 3f93d37573..2c58edfa36 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -6,6 +6,7 @@ import responses
 import six
 from symbolic import SourceMapTokenMatch
 
+from copy import deepcopy
 from mock import patch
 from requests.exceptions import RequestException
 
@@ -533,76 +534,112 @@ class TrimLineTest(TestCase):
         ) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
 
 
-def test_get_culprit_is_patched():
-    from sentry.lang.javascript.plugin import fix_culprit, generate_modules
-
-    data = {
-        'message': 'hello',
-        'platform': 'javascript',
-        'exception': {
-            'values': [
-                {
-                    'type': 'Error',
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                                'function': 'thing',
-                            },
-                            {
-                                'abs_path': 'http://example.com/bar.js',
-                                'filename': 'bar.js',
-                                'lineno': 1,
-                                'colno': 0,
-                                'function': 'oops',
-                            },
-                        ],
-                    },
-                }
-            ],
+class GenerateModulesTest(TestCase):
+    def test_get_culprit_is_patched(self):
+        from sentry.lang.javascript.plugin import fix_culprit, generate_modules
+
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'http://example.com/foo.js',
+                                    'filename': 'foo.js',
+                                    'lineno': 4,
+                                    'colno': 0,
+                                    'function': 'thing',
+                                },
+                                {
+                                    'abs_path': 'http://example.com/bar.js',
+                                    'filename': 'bar.js',
+                                    'lineno': 1,
+                                    'colno': 0,
+                                    'function': 'oops',
+                                },
+                            ],
+                        },
+                    }
+                ],
+            }
         }
-    }
-    generate_modules(data)
-    fix_culprit(data)
-    assert data['culprit'] == 'bar in oops'
-
-
-def test_ensure_module_names():
-    from sentry.lang.javascript.plugin import generate_modules
-    data = {
-        'message': 'hello',
-        'platform': 'javascript',
-        'exception': {
-            'values': [
-                {
-                    'type': 'Error',
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                                'function': 'thing',
-                            },
-                            {
-                                'abs_path': 'http://example.com/foo/bar.js',
-                                'filename': 'bar.js',
-                                'lineno': 1,
-                                'colno': 0,
-                                'function': 'oops',
-                            },
-                        ],
+        generate_modules(data)
+        fix_culprit(data)
+        assert data['culprit'] == 'bar in oops'
+
+    def test_ensure_module_names(self):
+        from sentry.lang.javascript.plugin import generate_modules
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'filename': 'foo.js',
+                                    'lineno': 4,
+                                    'colno': 0,
+                                    'function': 'thing',
+                                },
+                                {
+                                    'abs_path': 'http://example.com/foo/bar.js',
+                                    'filename': 'bar.js',
+                                    'lineno': 1,
+                                    'colno': 0,
+                                    'function': 'oops',
+                                },
+                            ],
+                        },
+                    }
+                ],
+            }
+        }
+        generate_modules(data)
+        exc = data['exception']['values'][0]
+        assert exc['stacktrace']['frames'][1]['module'] == 'foo/bar'
+
+    def test_generate_modules_skips_none(self):
+        from sentry.lang.javascript.plugin import fix_culprit, generate_modules
+
+        expected = {
+            'culprit': '',
+            'exception': {
+                'values': [
+                    None,
+                    {},
+                    {
+                        'value': 'MyError',
+                        'stacktrace': None,
                     },
-                }
-            ],
+                    {
+                        'value': 'MyError',
+                        'stacktrace': {
+                            'frames': None,
+                        },
+                    },
+                    {
+                        'value': 'MyError',
+                        'stacktrace': {
+                            'frames': [
+                                None
+                            ],
+                        },
+                    },
+                ]
+            }
         }
-    }
-    generate_modules(data)
-    exc = data['exception']['values'][0]
-    assert exc['stacktrace']['frames'][1]['module'] == 'foo/bar'
+
+        actual = deepcopy(expected)
+        generate_modules(actual)
+        fix_culprit(actual)
+        assert actual == expected
 
 
 class ErrorMappingTest(TestCase):
@@ -759,3 +796,19 @@ class ErrorMappingTest(TestCase):
             '<redacted>.getChildContext(): key "<redacted>" is not defined in '
             'childContextTypes.'
         )
+
+    @responses.activate
+    def test_skip_none_values(self):
+        expected = {
+            'exception': {
+                'values': [
+                    None,
+                    {},
+                ]
+            }
+        }
+
+        actual = deepcopy(expected)
+        assert not rewrite_exception(actual)
+
+        assert actual == expected
