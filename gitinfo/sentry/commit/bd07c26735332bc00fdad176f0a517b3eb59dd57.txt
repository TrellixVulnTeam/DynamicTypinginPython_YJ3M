commit bd07c26735332bc00fdad176f0a517b3eb59dd57
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Mon Feb 10 10:59:32 2020 -0800

    ref(slack): minor clean up (#16882)

diff --git a/src/sentry/api/serializers/rest_framework/rule.py b/src/sentry/api/serializers/rest_framework/rule.py
index 27fb6005bb..d1a3f417f5 100644
--- a/src/sentry/api/serializers/rest_framework/rule.py
+++ b/src/sentry/api/serializers/rest_framework/rule.py
@@ -99,12 +99,12 @@ class RuleSerializer(serializers.Serializer):
         # we need to check if the channel_id needs to be looked up via an async task.
         # If the "pending_save" attribute is set we want to bubble that up to the
         # project_rule(_details) endpoints by setting it on attrs
-        actions = attrs.get("actions")
-        if actions:
-            for action in actions:
-                if action.pop("pending_save", None):
-                    attrs["pending_save"] = True
-                    break
+        actions = attrs.get("actions", tuple())
+        for action in actions:
+            # remove this attribute because we don't want it to be saved in the rule
+            if action.pop("pending_save", None):
+                attrs["pending_save"] = True
+                break
 
         return attrs
 
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index 253e018766..d4a83f1ae2 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -379,7 +379,7 @@ def get_channel_id_with_timeout(integration, name, timeout):
             items = session.get(
                 "https://slack.com/api/%s.list" % list_type,
                 # Slack limits the response of `<list_type>.list` to 1000 channels
-                params=dict(payload, **{"cursor": cursor, "limit": 1000}),
+                params=dict(payload, cursor=cursor, limit=1000),
             )
             items = items.json()
             if not items.get("ok"):
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
index 785e7d1b62..12812651af 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleEditor/index.jsx
@@ -40,6 +40,7 @@ const ACTION_MATCH_CHOICES = [
   ['none', t('none')],
 ];
 
+const POLLING_INTERVAL = 1000;
 const POLLING_MAX_TIME_LIMIT = 3 * 60000;
 
 const AlertRuleRow = styled('h6')`
@@ -130,7 +131,7 @@ class RuleEditor extends React.Component {
     if (status === 'pending') {
       setTimeout(() => {
         this.pollHandler(quitTime);
-      }, 1000);
+      }, POLLING_INTERVAL);
       return;
     }
 
@@ -154,7 +155,7 @@ class RuleEditor extends React.Component {
     const quitTime = Date.now() + POLLING_MAX_TIME_LIMIT;
     setTimeout(() => {
       this.pollHandler(quitTime);
-    }, 1000);
+    }, POLLING_INTERVAL);
   }
 
   handleRuleSuccess = (isNew, rule) => {
