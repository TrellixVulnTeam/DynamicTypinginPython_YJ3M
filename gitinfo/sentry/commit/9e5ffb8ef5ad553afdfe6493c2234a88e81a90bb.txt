commit 9e5ffb8ef5ad553afdfe6493c2234a88e81a90bb
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Feb 22 05:27:33 2013 -0800

    Move Query and Message interface tests

diff --git a/tests/sentry/interfaces/message/__init__.py b/tests/sentry/interfaces/message/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/interfaces/message/tests.py b/tests/sentry/interfaces/message/tests.py
new file mode 100644
index 0000000000..95600562de
--- /dev/null
+++ b/tests/sentry/interfaces/message/tests.py
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase, fixture
+from sentry.interfaces import Message
+
+
+class MessageTest(TestCase):
+    @fixture
+    def interface(self):
+        return Message(message='Hello there %s!', params=('world',))
+
+    def test_serialize_behavior(self):
+        assert self.interface.serialize() == {
+            'message': self.interface.message,
+            'params': self.interface.params,
+        }
+
+    def test_get_hash_uses_message(self):
+        assert self.interface.get_hash() == [self.interface.message]
+
+    def test_get_search_context_with_params_as_list(self):
+        interface = self.interface
+        interface.params = ['world']
+        assert interface.get_search_context(self.event) == {
+            'text': [interface.message] + list(interface.params)
+        }
+
+    def test_get_search_context_with_params_as_tuple(self):
+        assert self.interface.get_search_context(self.event) == {
+            'text': [self.interface.message] + list(self.interface.params)
+        }
+
+    def test_get_search_context_with_params_as_dict(self):
+        interface = self.interface
+        interface.params = {'who': 'world'}
+        interface.message = 'Hello there %(who)s!'
+        assert self.interface.get_search_context(self.event) == {
+            'text': [interface.message] + interface.params.values()
+        }
+
+    def test_get_search_context_with_unsupported_params(self):
+        interface = self.interface
+        interface.params = object()
+        interface.message = 'Hello there %(who)s!'
+        assert self.interface.get_search_context(self.event) == {
+            'text': [interface.message],
+        }
diff --git a/tests/sentry/interfaces/query/__init__.py b/tests/sentry/interfaces/query/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/interfaces/query/tests.py b/tests/sentry/interfaces/query/tests.py
new file mode 100644
index 0000000000..5a563c670f
--- /dev/null
+++ b/tests/sentry/interfaces/query/tests.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase, fixture
+from sentry.interfaces import Query
+
+
+class QueryTest(TestCase):
+    @fixture
+    def interface(self):
+        return Query(query='SELECT 1', engine='psycopg2')
+
+    def test_serialize_behavior(self):
+        assert self.interface.serialize() == {
+            'query': self.interface.query,
+            'engine': self.interface.engine,
+        }
+
+    def test_get_hash_uses_query(self):
+        assert self.interface.get_hash() == [self.interface.query]
+
+    def test_get_search_context(self):
+        assert self.interface.get_search_context(self.event) == {
+            'text': [self.interface.query],
+        }
diff --git a/tests/sentry/interfaces/tests.py b/tests/sentry/interfaces/tests.py
index a809b4dfa2..88746ba6e0 100644
--- a/tests/sentry/interfaces/tests.py
+++ b/tests/sentry/interfaces/tests.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 import mock
 import pickle
 
-from sentry.interfaces import Interface, Message, Query, get_context
+from sentry.interfaces import Interface, get_context
 from sentry.models import Event
 from sentry.testutils import TestCase, fixture
 
@@ -49,69 +49,6 @@ class InterfaceTest(InterfaceBase):
         self.interface.validate()
 
 
-class MessageTest(InterfaceBase):
-    @fixture
-    def interface(self):
-        return Message(message='Hello there %s!', params=('world',))
-
-    def test_serialize_behavior(self):
-        assert self.interface.serialize() == {
-            'message': self.interface.message,
-            'params': self.interface.params,
-        }
-
-    def test_get_hash_uses_message(self):
-        assert self.interface.get_hash() == [self.interface.message]
-
-    def test_get_search_context_with_params_as_list(self):
-        interface = self.interface
-        interface.params = ['world']
-        assert interface.get_search_context(self.event) == {
-            'text': [interface.message] + list(interface.params)
-        }
-
-    def test_get_search_context_with_params_as_tuple(self):
-        assert self.interface.get_search_context(self.event) == {
-            'text': [self.interface.message] + list(self.interface.params)
-        }
-
-    def test_get_search_context_with_params_as_dict(self):
-        interface = self.interface
-        interface.params = {'who': 'world'}
-        interface.message = 'Hello there %(who)s!'
-        assert self.interface.get_search_context(self.event) == {
-            'text': [interface.message] + interface.params.values()
-        }
-
-    def test_get_search_context_with_unsupported_params(self):
-        interface = self.interface
-        interface.params = object()
-        interface.message = 'Hello there %(who)s!'
-        assert self.interface.get_search_context(self.event) == {
-            'text': [interface.message],
-        }
-
-
-class QueryTest(InterfaceBase):
-    @fixture
-    def interface(self):
-        return Query(query='SELECT 1', engine='psycopg2')
-
-    def test_serialize_behavior(self):
-        assert self.interface.serialize() == {
-            'query': self.interface.query,
-            'engine': self.interface.engine,
-        }
-
-    def test_get_hash_uses_query(self):
-        assert self.interface.get_hash() == [self.interface.query]
-
-    def test_get_search_context(self):
-        assert self.interface.get_search_context(self.event) == {
-            'text': [self.interface.query],
-        }
-
-
 class GetContextTest(TestCase):
     def test_works_with_empty_filename(self):
         result = get_context(0, 'hello world')
