commit e3eb22dac563c757afb7458913f2bc031388b57f
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 5 12:02:30 2018 -0800

    fix(owners): Various fixes for suggested commits
    
    - Handle empty commit lists
    - Remove duplicate commits
    - Add suspect commits to plaintext emails

diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 8760cd07e4..5c2666db7d 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -162,7 +162,7 @@ class MailPlugin(NotificationPlugin):
         enhanced_privacy = org.flags.enhanced_privacy
 
         # lets identify possibly suspect commits and owners
-        commits = []
+        commits = {}
         if features.has('organizations:suggested-commits', org):
             try:
                 committers = get_event_file_committers(project, event)
@@ -170,12 +170,13 @@ class MailPlugin(NotificationPlugin):
                 logging.exception(six.text_type(exc))
             else:
                 for committer in committers:
-                    for commit, score in committer['commits']:
-                        commit_data = commit.copy()
-                        commit_data['shortId'] = commit_data['id'][:7]
-                        commit_data['author'] = committer['author']
-                        commit_data['subject'] = commit_data['message'].split('\n', 1)[0]
-                        commits.append(commit_data)
+                    for commit in committer['commits']:
+                        if commit['id'] not in commits:
+                            commit_data = commit.copy()
+                            commit_data['shortId'] = commit_data['id'][:7]
+                            commit_data['author'] = committer['author']
+                            commit_data['subject'] = commit_data['message'].split('\n', 1)[0]
+                            commits[commit['id']] = commit_data
 
         context = {
             'project_label': project.get_full_name(),
@@ -184,7 +185,7 @@ class MailPlugin(NotificationPlugin):
             'link': link,
             'rules': rules,
             'enhanced_privacy': enhanced_privacy,
-            'commits': commits,
+            'commits': sorted(commits.values(), key=lambda x: x['score'], reverse=True),
         }
 
         # if the organization has enabled enhanced privacy controls we dont send
diff --git a/src/sentry/static/sentry/app/components/events/eventCause.jsx b/src/sentry/static/sentry/app/components/events/eventCause.jsx
index 42a0aa7a9e..61e59eb845 100644
--- a/src/sentry/static/sentry/app/components/events/eventCause.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCause.jsx
@@ -63,14 +63,16 @@ export default createReactClass({
     }
 
     let commits = [];
+    let commitSet = new Set();
     this.state.committers.forEach(committer => {
       committer.commits.forEach(commit => {
-        commits.push(
-          {
+        if (!commitSet.has(commit.id)) {
+          commitSet.add(commit.id);
+          commits.push({
             ...commit,
             author: committer.author,
-          },
-        );
+          });
+        }
       });
     });
     return (
@@ -81,7 +83,7 @@ export default createReactClass({
           </h3>
         </div>
         <ul className="list-group list-group-lg commit-list">
-          {commits.map((commit) => {
+          {commits.map(commit => {
             return <CommitRow key={commit.id} commit={commit} />;
           })}
         </ul>
diff --git a/src/sentry/templates/sentry/emails/error.txt b/src/sentry/templates/sentry/emails/error.txt
index 21e93e6012..d791b6c482 100644
--- a/src/sentry/templates/sentry/emails/error.txt
+++ b/src/sentry/templates/sentry/emails/error.txt
@@ -13,6 +13,15 @@ Details
 -------
 
 {{ link }}
+
+{% if commits %}
+Suspect Commits
+---------------
+{% for commit in commits %}
+* {{ commit.subject }}
+  {{ commit.shortId }} - {% if commit.author %}{{ commit.author.name }}{% else %}Unknown Author{% endif %}
+{% endfor %}{% endif %}
+
 Tags
 ----
 {% for tag_key, tag_value in tags %}
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index c1ba62d96f..fbff6eca91 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -168,7 +168,7 @@ def get_event_file_committers(project, event, frame_limit=25):
     annotated_frames = [
         {
             'frame': frame,
-            'commits': commit_path_matches.get(frame.get('filename') or frame.get('abs_path'))
+            'commits': commit_path_matches.get(frame.get('filename') or frame.get('abs_path')) or []
         } for frame in app_frames
     ]
 
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 38e10a63fa..7939dd391a 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -370,10 +370,25 @@ window.TestStubs = {
     }
   },
 
+  Event: params => {
+    return {
+      id: '1',
+      message: 'ApiException',
+      groupID: '1',
+      eventID: '12345',
+      ...params,
+    };
+  },
+
   Events: () => {
     return [
-      {eventID: '12345', id: '1', message: 'ApiException', groupID: '1'},
-      {eventID: '12346', id: '2', message: 'TestException', groupID: '1'},
+      TestStubs.Event({eventID: '12345', id: '1', message: 'ApiException', groupID: '1'}),
+      TestStubs.Event({
+        eventID: '12346',
+        id: '2',
+        message: 'TestException',
+        groupID: '1',
+      }),
     ];
   },
 
diff --git a/tests/js/spec/components/events/eventCause.spec.jsx b/tests/js/spec/components/events/eventCause.spec.jsx
new file mode 100644
index 0000000000..72ac2f70ae
--- /dev/null
+++ b/tests/js/spec/components/events/eventCause.spec.jsx
@@ -0,0 +1,57 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import EventCause from 'app/components/events/eventCause';
+
+describe('EventCause', function() {
+  let wrapper, organization, project, event;
+
+  afterEach(function() {
+    Client.clearMockResponses();
+  });
+
+  beforeEach(function() {
+    event = TestStubs.Event();
+    organization = TestStubs.Organization();
+    project = TestStubs.Project();
+    Client.addMockResponse({
+      method: 'GET',
+      url: `/projects/${organization.slug}/${project.slug}/events/${event.id}/committers/`,
+      body: {
+        committers: {
+          commits: [
+            {
+              message:
+                'feat: Enhance suggested commits and add to alerts\n\n- Refactor components to use new shared CommitRow\n- Add Suspect Commits to alert emails\n- Refactor committers scanning code to handle various edge cases.',
+              score: 4,
+              id: 'ab2709293d0c9000829084ac7b1c9221fb18437c',
+              repository: TestStubs.Repository(),
+              dateCreated: '2018-03-02T18:30:26Z',
+            },
+          ],
+        },
+      },
+    });
+
+    wrapper = mount(
+      <EventCause event={event} orgId={organization.slug} projectId={project.slug} />,
+      {
+        context: {
+          organization,
+          project,
+          group: TestStubs.Group(),
+        },
+      }
+    );
+  });
+
+  it('renders', function(done) {
+    wrapper.update();
+
+    setTimeout(() => {
+      expect(wrapper.find('.commit-list').children).toHaveLength(1);
+      done();
+    });
+  });
+});
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 2578112898..9f52e89814 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -368,33 +368,29 @@ class MailPluginTest(TestCase):
         with self.tasks():
             self.plugin.notify_about_activity(activity)
 
-        assert len(mail.outbox) == 1
+        assert len(mail.outbox) >= 1
 
-        msg = mail.outbox[0]
+        msg = mail.outbox[-1]
 
         assert msg.subject == 'Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
 
-    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
-    def test_notify_does_not_error_with_suggested_commits(self, _send_mail):
-        group = Group(
-            id=2,
-            first_seen=timezone.now(),
-            last_seen=timezone.now(),
-            project=self.project,
-        )
-
-        event = Event()
-        event.group = group
-        event.project = self.project
-        event.message = 'hello world'
-        event.interfaces = {}
+    def test_notify_with_suspect_commits(self):
+        release = self.create_release(project=self.project, user=self.user)
+        group = self.create_group(project=self.project, first_release=release)
+        event = self.create_event(group=group, tags={'sentry:release': release.version})
 
         notification = Notification(event=event)
 
-        with self.options({'system.url-prefix': 'http://example.com'}), self.feature('organizations:suggested-commits'):
+        with self.tasks(), self.options({'system.url-prefix': 'http://example.com'}), self.feature('organizations:suggested-commits'):
             self.plugin.notify(notification)
 
+        assert len(mail.outbox) >= 1
+
+        msg = mail.outbox[-1]
+
+        assert 'Suspect Commits' in msg.body
+
 
 class MailPluginSignalsTest(TestCase):
     @fixture
diff --git a/tests/sentry/utils/test_committers.py b/tests/sentry/utils/test_committers.py
new file mode 100644
index 0000000000..2e9c3dcb64
--- /dev/null
+++ b/tests/sentry/utils/test_committers.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from sentry.utils.committers import score_path_match_length
+
+
+def test_score_path_match_length():
+    assert score_path_match_length('foo/bar/baz', 'foo/bar/baz') == 3
+    assert score_path_match_length('foo/bar/baz', 'bar/baz') == 2
+    assert score_path_match_length('foo/bar/baz', 'baz') == 1
+    assert score_path_match_length('foo/bar/baz', 'foo') == 0
+    assert score_path_match_length('./foo/bar/baz', 'foo/bar/baz') == 3
