commit 323fca30be2fd8603f1217c73b4efeb69f831f72
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Mon Nov 26 19:20:19 2018 +0100

    ref: Prune empty keys in stacktraces and exceptions (#10675)
    
    * ref: Prune empty keys in stacktraces and exceptions
    
    * fix: Fix tests
    
    * fix: Move stacktrace even if empty
    
    * fix: Make prune_empty_keys less aggressive
    
    * fix: Remove empty containers
    
    * fix: Dont crash when exception has no values
    
    * fix: Fix tests
    
    * fix: Remove useless setdefaults
    
    * fix: Coerce some empty strings
    
    * fix: Tests
    
    * fix: Prune empty toplevel keys
    
    * fix: Dont prune containers
    
    * fix: Tests
    
    * fix: Sort order of emails
    
    * fix: prune empty frame attrs
    
    * fix: Do not coerce params
    
    * doc: Explain decisions for prune_empty_keys
    
    * fix: Use get_path when possible
    
    * fix: Broken tests
    
    * fix: do not normalize params to array
    
    * Revert "fix: do not normalize params to array"
    
    This reverts commit 6c5c2db36a730a74406677c1aa5989b85ab03b6f.
    
    * Revert "fix: Broken tests"
    
    This reverts commit dd9adf8887596e9294ab9786b8f3825442bd48b3.
    
    * Revert "fix: Do not coerce params"
    
    This reverts commit 55802dab1a665125d62c0f39605f04c528252494.
    
    * fix: Normalize context_line to None

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 89c788f387..050d4a76ca 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -31,7 +31,7 @@ from sentry.coreapi import (
     decode_data,
     safely_load_json_string,
 )
-from sentry.interfaces.base import get_interface, InterfaceValidationError
+from sentry.interfaces.base import get_interface, prune_empty_keys, InterfaceValidationError
 from sentry.interfaces.exception import normalize_mechanism_meta
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.lang.native.utils import get_sdk_from_event
@@ -571,16 +571,9 @@ class EventManager(object):
             data['timestamp'] = timestamp
             data['received'] = float(timezone.now().strftime('%s'))
 
-            setdefault_path(data, 'checksum', value=None)
-            setdefault_path(data, 'culprit', value=None)
-            setdefault_path(data, 'dist', value=None)
-            setdefault_path(data, 'environment', value=None)
             setdefault_path(data, 'extra', value={})
-            setdefault_path(data, 'fingerprint', value=None)
             setdefault_path(data, 'logger', value=DEFAULT_LOGGER_NAME)
-            setdefault_path(data, 'platform', value=None)
             setdefault_path(data, 'tags', value=[])
-            setdefault_path(data, 'transaction', value=None)
 
             # Fix case where legacy apps pass 'environment' as a tag
             # instead of a top level key.
@@ -655,15 +648,17 @@ class EventManager(object):
         if server_name is not None:
             set_tag(data, 'server_name', server_name)
 
-        # Do not add errors unless there are for non store mode
-        if not self._for_store and not data.get('errors'):
-            data.pop('errors')
+        for key in ('errors', 'tags', 'extra', 'fingerprint'):
+            if not data.get(key):
+                data.pop(key, None)
 
         if meta.raw():
             data['_meta'] = meta.raw()
         elif '_meta' in data:
             del data['_meta']
 
+        self._data = prune_empty_keys(data)
+
     def should_filter(self):
         '''
         returns (result: bool, reason: string or None)
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 57a6403b58..5eb4f7139b 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -49,6 +49,23 @@ def get_interfaces(data):
     )
 
 
+def prune_empty_keys(obj):
+    if obj is None:
+        return None
+
+    # eliminate None values for serialization to compress the keyspace
+    # and save (seriously) ridiculous amounts of bytes
+    #
+    # Do not coerce empty arrays/dicts or other "falsy" values here to None,
+    # but rather deal with them case-by-case before calling `prune_empty_keys`
+    # (e.g. in `Interface.to_json`). Rarely, but sometimes, there's a slight
+    # semantic difference between empty containers and a missing value. One
+    # example would be `event.logenty.formatted`, where `{}` means "this
+    # message has no params" and `None` means "this message is already
+    # formatted".
+    return dict((k, v) for k, v in six.iteritems(obj) if v is not None)
+
+
 class InterfaceValidationError(Exception):
     pass
 
@@ -112,11 +129,7 @@ class Interface(object):
         return meta
 
     def to_json(self):
-        # eliminate empty values for serialization to compress the keyspace
-        # and save (seriously) ridiculous amounts of bytes
-        # XXX(dcramer): its important that we keep zero values here, but empty
-        # lists and strings get discarded as we've deemed them not important
-        return dict((k, v) for k, v in six.iteritems(self._data) if (v == 0 or v))
+        return prune_empty_keys(self._data)
 
     def get_hash(self):
         return []
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 6ce56ae02f..87f36b2b31 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -12,7 +12,7 @@ __all__ = ('Breadcrumbs', )
 
 import six
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.utils import json
 from sentry.utils.safe import get_path, trim
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
@@ -65,6 +65,9 @@ class Breadcrumbs(Interface):
 
         return cls(values=values)
 
+    def to_json(self):
+        return prune_empty_keys({'values': self.values or None})
+
     @classmethod
     def normalize_crumb(cls, crumb):
         ty = crumb.get('type') or 'default'
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index a91b21a39a..2a5540ddc2 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -5,7 +5,7 @@ import uuid
 
 __all__ = ('DebugMeta', )
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 
 from symbolic import parse_addr, normalize_debug_id
 
@@ -116,6 +116,13 @@ class DebugMeta(Interface):
             is_debug_build=is_debug_build,
         )
 
+    def to_json(self):
+        return prune_empty_keys({
+            'images': self.images or None,
+            'sdk_info': self.sdk_info or None,
+            'is_debug_build': self.is_debug_build
+        })
+
     @staticmethod
     def normalize_image(image):
         ty = image.get('type')
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 513271ec86..6bb942e82b 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -15,7 +15,7 @@ import six
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
 from sentry.utils import json
@@ -696,13 +696,6 @@ def upgrade_legacy_mechanism(data):
     return result
 
 
-def prune_empty_keys(obj):
-    if obj is None:
-        return None
-
-    return dict((k, v) for k, v in six.iteritems(obj) if (v == 0 or v is False or v))
-
-
 class Mechanism(Interface):
     """
     an optional field residing in the exception interface. It carries additional
@@ -788,8 +781,8 @@ class Mechanism(Interface):
             'description': self.description,
             'help_link': self.help_link,
             'handled': self.handled,
-            'data': self.data,
-            'meta': prune_empty_keys(self.meta),
+            'data': self.data or None,
+            'meta': prune_empty_keys(self.meta) or None,
         })
 
     def iter_tags(self):
@@ -1033,10 +1026,10 @@ class Exception(Interface):
     # methods below might throw if None exceptions are in ``values``.
 
     def to_json(self):
-        return {
-            'values': [v and v.to_json() for v in self.values],
+        return prune_empty_keys({
+            'values': [v and v.to_json() for v in self.values] or None,
             'exc_omitted': self.exc_omitted,
-        }
+        })
 
     def compute_hashes(self, platform):
         system_hash = self.get_hash(platform, system_frames=True)
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 7f860e1f21..bc5c96c39e 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -17,7 +17,7 @@ from django.conf import settings
 from django.utils.translation import ugettext as _
 from six.moves.urllib.parse import parse_qsl, urlencode, urlsplit, urlunsplit
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.utils.safe import trim, trim_dict, trim_pairs
 from sentry.utils.http import heuristic_decode
@@ -213,6 +213,19 @@ class Http(Interface):
 
         return cls(**kwargs)
 
+    def to_json(self):
+        return prune_empty_keys({
+            'method': self.method,
+            'url': self.url,
+            'query_string': self.query_string or None,
+            'fragment': self.fragment or None,
+            'cookies': self.cookies or None,
+            'headers': self.headers or None,
+            'data': self.data,
+            'env': self.env or None,
+            'inferred_content_type': self.inferred_content_type,
+        })
+
     @property
     def full_url(self):
         url = self.url
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index ba453ffc4b..ae8a267392 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -14,7 +14,7 @@ import six
 
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.utils import json
 from sentry.utils.safe import trim
 
@@ -92,6 +92,13 @@ class Message(Interface):
 
         return cls(**kwargs)
 
+    def to_json(self):
+        return prune_empty_keys({
+            'message': self.message,
+            'formatted': self.formatted,
+            'params': self.params or None
+        })
+
     def get_hash(self):
         return [self.message]
 
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index c31edd129e..b900918336 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -5,7 +5,7 @@ __all__ = ('Sdk', )
 from distutils.version import LooseVersion
 from django.conf import settings
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.utils.safe import trim
 
 
@@ -71,6 +71,14 @@ class Sdk(Interface):
 
         return cls(**kwargs)
 
+    def to_json(self):
+        return prune_empty_keys({
+            'name': self.name,
+            'version': self.version,
+            'integrations': self.integrations or None,
+            'packages': self.packages or None
+        })
+
     def get_api_context(self, is_public=False):
         newest_version = get_with_prefix(settings.SDK_VERSIONS, self.name)
         newest_name = get_with_prefix(settings.DEPRECATED_SDKS, self.name, self.name)
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 6f18ed2675..75eba02e08 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -20,7 +20,7 @@ from django.utils.translation import ugettext as _
 from six.moves.urllib.parse import urlparse
 
 from sentry.app import env
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.models import UserOption
 from sentry.utils.safe import trim, trim_dict
@@ -299,11 +299,11 @@ class Frame(Interface):
         package = data.get('package')
 
         # For legacy reasons
-        if function == '?':
+        if function in ('?', ''):
             function = None
 
         # For consistency reasons
-        if symbol == '?':
+        if symbol in ('?', ''):
             symbol = None
 
         # Some of this processing should only be done for non raw frames
@@ -371,8 +371,8 @@ class Frame(Interface):
             # TODO(dcramer): trim pre/post_context
             'pre_context': pre_context,
             'post_context': post_context,
-            'vars': context_locals,
-            'data': extra_data,
+            'vars': context_locals or None,
+            'data': extra_data or None,
             'errors': data.get('errors'),
         }
 
@@ -391,6 +391,30 @@ class Frame(Interface):
 
         return cls(**kwargs)
 
+    def to_json(self):
+        return prune_empty_keys({
+            'abs_path': self.abs_path or None,
+            'filename': self.filename or None,
+            'platform': self.platform or None,
+            'module': self.module or None,
+            'function': self.function or None,
+            'package': self.package or None,
+            'image_addr': self.image_addr,
+            'symbol': self.symbol,
+            'symbol_addr': self.symbol_addr,
+            'instruction_addr': self.instruction_addr,
+            'trust': self.trust,
+            'in_app': self.in_app,
+            'context_line': self.context_line or None,
+            'pre_context': self.pre_context or None,
+            'post_context': self.post_context or None,
+            'vars': self.vars or None,
+            'data': self.data or None,
+            'errors': self.errors or None,
+            'lineno': self.lineno,
+            'colno': self.colno
+        })
+
     def get_hash(self, platform=None):
         """
         The hash of the frame varies depending on the data available.
@@ -782,11 +806,11 @@ class Stacktrace(Interface):
         }
 
     def to_json(self):
-        return {
-            'frames': [f and f.to_json() for f in self.frames],
+        return prune_empty_keys({
+            'frames': [f and f.to_json() for f in self.frames] or None,
             'frames_omitted': self.frames_omitted,
             'registers': self.registers,
-        }
+        })
 
     def compute_hashes(self, platform):
         system_hash = self.get_hash(platform, system_frames=True)
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index bb5f56f4f9..2d436b263c 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -11,7 +11,7 @@ __all__ = ('User', )
 
 import six
 
-from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
 from sentry.interfaces.geo import Geo
 from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
@@ -50,6 +50,9 @@ class User(Interface):
     >>> }
     """
 
+    score = 1
+    display_score = 2020
+
     @classmethod
     def to_python(cls, data):
         data = data.copy()
@@ -96,18 +99,21 @@ class User(Interface):
             'ip_address': ip_address,
             'name': name,
             'geo': geo,
+            'data': trim_dict(extra_data)
         }
 
-        kwargs['data'] = trim_dict(extra_data)
         return cls(**kwargs)
 
     def to_json(self):
-        # geo needs to be JSON encoded if it exists
-        geo = self._data.pop('geo') if 'geo' in self._data else {}
-        json = super(User, self).to_json()
-        if geo:
-            json['geo'] = geo.to_json()
-        return json
+        return prune_empty_keys({
+            'id': self.id,
+            'email': self.email,
+            'username': self.username,
+            'ip_address': self.ip_address,
+            'name': self.name,
+            'geo': self.geo.to_json() if self.geo is not None else None,
+            'data': self.data or None
+        })
 
     def get_api_context(self, is_public=False):
         return {
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 66728ede22..6461b23c78 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -12,6 +12,7 @@ import six
 from six.moves.urllib.parse import urlsplit, urlunsplit
 
 from sentry.constants import DEFAULT_SCRUBBED_FIELDS, FILTER_MASK, NOT_SCRUBBED_VALUES
+from sentry.utils.safe import get_path
 
 
 def varmap(func, var, context=None, name=None):
@@ -78,8 +79,8 @@ class SensitiveDataFilter(object):
             self.filter_stacktrace(data['stacktrace'])
 
         if 'exception' in data:
-            for exc in data['exception']['values']:
-                if exc is not None and exc.get('stacktrace'):
+            for exc in get_path(data, 'exception', 'values', filter=True) or ():
+                if exc.get('stacktrace'):
                     self.filter_stacktrace(exc['stacktrace'])
 
         if 'breadcrumbs' in data:
diff --git a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
index f88bed14f5..b4c88c9deb 100644
--- a/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
+++ b/tests/integration/fixtures/csp/chrome_blocked_asset_output.json
@@ -13,7 +13,8 @@
       "violated_directive": "style-src cdn.example.com",
       "document_uri": "http://notlocalhost:8000/",
       "original_policy": "default-src 'none'; style-src cdn.example.com; report-uri http://requestb.in/1im8m061",
-      "effective_directive": "style-src"
+      "effective_directive": "style-src",
+      "referrer": ""
     },
     "sentry.interfaces.Http": {
       "url": "http://notlocalhost:8000/",
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 08b0286e29..21b6ea8d1e 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -506,7 +506,8 @@ class CspReportTest(TestCase):
         assert output['message'] == e.data['logentry']['message']
         for key, value in six.iteritems(output['tags']):
             assert e.get_tag(key) == value
-        self.assertDictContainsSubset(output['data'], e.data, e.data)
+        for key, value in six.iteritems(output['data']):
+            assert e.data[key] == value
 
     def assertReportRejected(self, input):
         resp = self._postCspWithHeader(input)
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index d6e74f0052..71e21030aa 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -28,7 +28,7 @@ def test_tags_none():
     manager.normalize()
     data = manager.get_data()
 
-    assert data['tags'] == []
+    assert not data.get('tags')
 
 
 def test_tags_as_list():
diff --git a/tests/sentry/event_manager/test_validate_csp.py b/tests/sentry/event_manager/test_validate_csp.py
index 0628c427d7..444b4a099e 100644
--- a/tests/sentry/event_manager/test_validate_csp.py
+++ b/tests/sentry/event_manager/test_validate_csp.py
@@ -35,9 +35,9 @@ def test_csp_validate_basic():
     assert result['logger'] == 'csp'
     assert result['release'] == 'abc123'
     assert result['environment'] == 'production'
-    assert result['errors'] == []
+    assert "errors" not in result
     assert 'logentry' in result
-    assert 'culprit' in result
+    assert result['culprit'] == "img-src 'self'"
     assert result['tags'] == [
         ('effective-directive', 'img-src'),
         ('blocked-uri', 'http://google.com'),
@@ -108,7 +108,7 @@ def test_csp_tag_value():
         ('effective-directive', 'img-src'),
         ('blocked-uri', 'http://google.com'),
     ]
-    assert len(result['errors']) == 0
+    assert 'errors' not in result
 
 
 def test_hpkp_validate_basic():
@@ -128,9 +128,9 @@ def test_hpkp_validate_basic():
     }
     result = validate_and_normalize(report)
     assert result['release'] == 'abc123'
-    assert result['errors'] == []
+    assert 'errors' not in result
     assert 'logentry' in result
-    assert 'culprit' in result
+    assert not result.get('culprit')
     assert sorted(result['tags']) == [
         ('hostname', 'www.example.com'),
         ('include-subdomains', 'false'),
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index 5e4df64bfa..0a89311f81 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -25,14 +25,14 @@ def test_timestamp():
     )
     with mock.patch("sentry.event_manager.process_timestamp", patched):
         data = validate_and_normalize({"timestamp": "2018-04-10T14:33:18Z"})
-        assert len(data["errors"]) == 0
+        assert "errors" not in data
 
     data = validate_and_normalize({"timestamp": "not-a-timestamp"})
     assert len(data["errors"]) == 1
 
     now = datetime.utcnow()
     data = validate_and_normalize({"timestamp": now.strftime("%Y-%m-%dT%H:%M:%SZ")})
-    assert len(data["errors"]) == 0
+    assert "errors" not in data
 
     future = now + timedelta(minutes=2)
     data = validate_and_normalize({"timestamp": future.strftime("%Y-%m-%dT%H:%M:%SZ")})
@@ -133,7 +133,7 @@ def test_invalid_log_level():
 
 def test_tags_as_string():
     data = validate_and_normalize({"message": "foo", "tags": "bar"})
-    assert data["tags"] == []
+    assert "tags" not in data
 
 
 def test_tags_with_spaces():
@@ -186,7 +186,7 @@ def test_tag_value():
 
 def test_extra_as_string():
     data = validate_and_normalize({"message": "foo", "extra": "bar"})
-    assert data["extra"] == {}
+    assert "extra" not in data
 
 
 def test_release_tag_max_len():
@@ -195,7 +195,7 @@ def test_release_tag_max_len():
     data = validate_and_normalize(
         {"message": "foo", "tags": [[release_key, release_value]]}
     )
-    assert not data["errors"]
+    assert "errors" not in data
     assert data["tags"] == [(release_key, release_value)]
 
 
@@ -345,15 +345,15 @@ def test_fingerprints():
         {"fingerprint": ["{{default}}", 1, "bar", 4.5, -2.7, True]}
     )
     assert data.get("fingerprint") == ["{{default}}", "1", "bar", "4", "-2", "True"]
-    assert len(data["errors"]) == 0
+    assert "errors" not in data
 
     data = validate_and_normalize({"fingerprint": ["{{default}}", 1e100, -1e100, 1e10]})
     assert data.get("fingerprint") == ["{{default}}", "10000000000"]
-    assert len(data["errors"]) == 0
+    assert "errors" not in data
 
     data = validate_and_normalize({"fingerprint": []})
-    assert data.get("fingerprint") == []
-    assert len(data["errors"]) == 0
+    assert "fingerprint" not in data
+    assert "errors" not in data
 
 
 def test_messages():
@@ -387,7 +387,7 @@ def test_messages():
         }
     )
     assert "message" not in data
-    assert len(data["errors"]) == 0
+    assert "errors" not in data
     assert data["logentry"] == {
         "message": "something else",
         "formatted": "something else formatted",
@@ -409,7 +409,7 @@ def test_messages_old_behavior():
         }
     )
     assert "message" not in data
-    assert len(data["errors"]) == 0
+    assert "errors" not in data
     assert data["logentry"] == {
         "message": "something else",
         "formatted": "foo is bar",
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index d82280f740..61e7894585 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -44,13 +44,12 @@ class ExceptionTest(TestCase):
         )
 
     def test_null_values(self):
-        sink = {'exc_omitted': None, 'values': []}
+        sink = {}
         assert Exception.to_python({}).to_json() == sink
         assert Exception.to_python({'exc_omitted': None}).to_json() == sink
         assert Exception.to_python({'values': None}).to_json() == sink
         assert Exception.to_python({'values': []}).to_json() == sink
-        assert Exception.to_python({'values': [None]}).to_json() == {
-            "exc_omitted": None, "values": [None]}
+        assert Exception.to_python({'values': [None]}).to_json() == {"values": [None]}
 
     def test_does_not_wrap_if_exception_omitted_present(self):
         input = {
@@ -59,10 +58,7 @@ class ExceptionTest(TestCase):
                 "handled": True, "type": "generic"
             }
         }
-        assert Exception.to_python(input).to_json() == {
-            "exc_omitted": None,
-            "values": [],
-        }
+        assert Exception.to_python(input).to_json() == {}
 
     def test_path(self):
         assert self.interface.get_path() == 'exception'
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 991191231f..2a2cfac57c 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -49,18 +49,17 @@ class StacktraceTest(TestCase):
         )
 
     def test_null_values(self):
-        sink = {'frames': [], 'frames_omitted': None, 'registers': None}
+        sink = {}
 
         assert Stacktrace.to_python({}).to_json() == sink
         assert Stacktrace.to_python({'frames': None}).to_json() == sink
         assert Stacktrace.to_python({'frames': []}).to_json() == sink
 
         # TODO(markus): Should eventually generate frames: [None]
-        assert Stacktrace.to_python({'frames': [None]}).to_json() == \
-            {'frames': [], 'frames_omitted': None, 'registers': None}
+        assert Stacktrace.to_python({'frames': [None]}).to_json() == {}
 
     def test_null_values_in_frames(self):
-        sink = {'frames': [{}], 'frames_omitted': None, 'registers': None}
+        sink = {'frames': [{}]}
 
         assert Stacktrace.to_python({'frames': [{}]}).to_json() == sink
         assert Stacktrace.to_python({'frames': [{'abs_path': None}]}).to_json() == sink
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 5601310768..76f46dafdc 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -519,7 +519,7 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert not event.data['errors']
+        assert 'errors' not in event.data
 
         exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -598,7 +598,7 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert not event.data['errors']
+        assert 'errors' not in event.data
 
         exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -770,7 +770,7 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert not event.data['errors']
+        assert 'errors' not in event.data
 
         exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -928,7 +928,7 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert not event.data['errors']
+        assert 'errors' not in event.data
 
         exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -1152,7 +1152,7 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code == 200
 
         event = Event.objects.get()
-        assert event.data['errors'] == []
+        assert 'errors' not in event.data
 
     @responses.activate
     def test_html_response_for_js(self):
