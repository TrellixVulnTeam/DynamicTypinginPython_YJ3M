commit 84c45c542c10414a4d441f71f6ddb4834f2cf94b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 15 11:09:29 2019 -0700

    feat(apm): Change/fix transaction name to account for page load (#15047)
    
    This changes the transaction name to have "PageLoad" when it is a fresh page load. The reason for this is because the set of API requests can be different vs in app navigation.

diff --git a/src/sentry/static/sentry/app/api.tsx b/src/sentry/static/sentry/app/api.tsx
index 9195e057c9..47627ceccf 100644
--- a/src/sentry/static/sentry/app/api.tsx
+++ b/src/sentry/static/sentry/app/api.tsx
@@ -253,9 +253,6 @@ export class Client {
     const id: string = uniqueId();
     metric.mark(`api-request-start-${id}`);
 
-    // notify apm utils that a request has started
-    startRequest(id);
-
     let fullUrl: string;
     if (path.indexOf(this.baseUrl) === -1) {
       fullUrl = this.baseUrl + path;
@@ -279,6 +276,9 @@ export class Client {
       description: `${method} ${fullUrl}`,
     }) as Sentry.Span;
 
+    // notify apm utils that a request has started
+    startRequest(id);
+
     const errorObject = new Error();
 
     this.activeRequests[id] = new Request(
diff --git a/src/sentry/static/sentry/app/utils/apm.jsx b/src/sentry/static/sentry/app/utils/apm.jsx
index 4d9f06df3d..a0f8176123 100644
--- a/src/sentry/static/sentry/app/utils/apm.jsx
+++ b/src/sentry/static/sentry/app/utils/apm.jsx
@@ -2,6 +2,14 @@ import * as Router from 'react-router';
 import * as Sentry from '@sentry/browser';
 
 let firstPageLoad = true;
+let flushTransactionTimeout = undefined;
+let wasInterrupted = false;
+
+const TRANSACTION_TIMEOUT = 5000;
+const requests = new Set([]);
+const renders = new Set([]);
+const hasActiveRequests = () => requests.size > 0;
+const hasActiveRenders = () => renders.size > 0;
 
 function startTransaction() {
   // We do set the transaction name in the router but we want to start it here
@@ -9,32 +17,31 @@ function startTransaction() {
   // times. This would result in losing the start of the transaction.
   Sentry.configureScope(scope => {
     if (firstPageLoad) {
-      firstPageLoad = false;
-    } else {
-      const prevTransactionSpan = scope.getSpan();
-      // If there is a transaction we set the name to the route
-      if (prevTransactionSpan && prevTransactionSpan.timestamp === undefined) {
-        prevTransactionSpan.finish();
-      }
-      scope.setSpan(
-        Sentry.startSpan({
-          op: 'navigation',
-          sampled: true,
-        })
-      );
+      return;
     }
-  });
 
-  finishTransaction(5000);
-}
+    // If there's a previous span open, finish it
+    // TODO(apm): I think this is wrong, we probably only want to finish the spans
+    // that we start in this function and in `startApm()`
+    //
+    // i.e. it could close out a span of an API request
+    const prevTransactionSpan = scope.getSpan();
+    if (prevTransactionSpan) {
+      prevTransactionSpan.finish();
+    }
 
-const requests = new Set([]);
-const renders = new Set([]);
-let flushTransactionTimeout = undefined;
-let wasInterrupted = false;
+    scope.setSpan(
+      Sentry.startSpan({
+        op: 'navigation',
+        sampled: true,
+      })
+    );
+    scope.setTag('ui.nav', 'navigation');
+  });
 
-const hasActiveRequests = () => requests.size > 0;
-const hasActiveRenders = () => renders.size > 0;
+  // Timeout a transaction if no other spans get started
+  finishTransaction(TRANSACTION_TIMEOUT);
+}
 
 /**
  * Postpone finishing the root span until all renders and requests are finished
@@ -53,7 +60,7 @@ function interruptFlush() {
   wasInterrupted = true;
 }
 
-export function finishTransaction(delay) {
+export function finishTransaction(delay = TRANSACTION_TIMEOUT) {
   if (flushTransactionTimeout || (hasActiveRenders() || hasActiveRequests())) {
     interruptFlush();
   }
@@ -63,30 +70,41 @@ export function finishTransaction(delay) {
       const span = scope.getSpan();
       if (span) {
         span.finish();
+        firstPageLoad = false;
       }
     });
-  }, delay || 5000);
+  }, delay);
 }
 
+/**
+ * These `start-` functions attempt to track the state of "actions".
+ *
+ * They interrupt the transaction flush (which times out), and
+ * requires the related `finish-` function to be called.
+ */
 export function startRequest(id) {
   requests.add(id);
   interruptFlush();
 }
+export function startRender(id) {
+  renders.add(id);
+  interruptFlush();
+}
 
+/**
+ * These `finish-` functions clean up the "active" state of an ongoing "action".
+ * If there are no other "actions" and we have interrupted a flush, we should
+ * finish the transaction
+ */
 export function finishRequest(id) {
   requests.delete(id);
+  // TODO(apm): Is this necessary? flush should be interrupted already from start()
   interruptFlush();
 
   if (wasInterrupted && !hasActiveRenders() && !hasActiveRequests()) {
     finishTransaction(1);
   }
 }
-
-export function startRender(id) {
-  renders.add(id);
-  interruptFlush();
-}
-
 export function finishRender(id) {
   renders.delete(id);
   interruptFlush();
@@ -96,6 +114,26 @@ export function finishRender(id) {
   }
 }
 
+/**
+ * Sets the transaction name
+ */
+export function setTransactionName(name) {
+  Sentry.configureScope(scope => {
+    const span = scope.getSpan();
+
+    if (!span) {
+      return;
+    }
+
+    span.transaction = firstPageLoad ? `PageLoad: ${name}` : name;
+    scope.setTag('ui.route', name);
+  });
+}
+
+/**
+ * This is called only when our application is initialized. Creates a root span
+ * and creates a router listener to create a new root span as user navigates.
+ */
 export function startApm() {
   Sentry.configureScope(scope => {
     scope.setSpan(
@@ -104,6 +142,7 @@ export function startApm() {
         sampled: true,
       })
     );
+    scope.setTag('ui.nav', 'pageload');
   });
   startTransaction();
   Router.browserHistory.listen(() => startTransaction());
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 34a81f988c..f4f61a050b 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -2,7 +2,6 @@ import $ from 'jquery';
 import {ThemeProvider} from 'emotion-theming';
 import {browserHistory} from 'react-router';
 import {get, isEqual} from 'lodash';
-import {getCurrentHub} from '@sentry/browser';
 import {injectGlobal} from 'emotion';
 import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
@@ -13,6 +12,7 @@ import {DEPLOY_PREVIEW_CONFIG, EXPERIMENTAL_SPA} from 'app/constants';
 import {displayDeployPreviewAlert} from 'app/actionCreators/deployPreview';
 import {fetchGuides} from 'app/actionCreators/guides';
 import {openCommandPalette} from 'app/actionCreators/modal';
+import {setTransactionName} from 'app/utils/apm';
 import {t} from 'app/locale';
 import AlertActions from 'app/actions/alertActions';
 import Alerts from 'app/components/alerts';
@@ -179,14 +179,7 @@ class App extends React.Component {
 
   updateTracing() {
     const route = getRouteStringFromRoutes(this.props.routes);
-    const scope = getCurrentHub().getScope();
-    if (scope) {
-      const transactionSpan = scope.getSpan();
-      // If there is a transaction we set the name to the route
-      if (transactionSpan) {
-        transactionSpan.transaction = route;
-      }
-    }
+    setTransactionName(route);
   }
 
   handleConfigStoreChange(config) {
