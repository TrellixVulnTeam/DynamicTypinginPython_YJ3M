commit 47a8a4d730da3e70a07b24f3ee686ec7df26fa51
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Apr 16 10:53:00 2020 +0200

    ref(breadcrumb): Converted Breadcrumb to Typescript (#18117)

diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 79648ffe56..9806db56b7 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -6,7 +6,7 @@ import {analytics} from 'app/utils/analytics';
 import {logException} from 'app/utils/logging';
 import {objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
-import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs';
+import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs/breadcrumbs';
 import CspInterface from 'app/components/events/interfaces/csp';
 import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
 import EventAttachments from 'app/components/events/eventAttachments';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
deleted file mode 100644
index 33df35d245..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ /dev/null
@@ -1,228 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import EventDataSection from 'app/components/events/eventDataSection';
-import SentryTypes from 'app/sentryTypes';
-import GuideAnchor from 'app/components/assistant/guideAnchor';
-import Breadcrumb from 'app/components/events/interfaces/breadcrumbs/breadcrumb';
-import {t, tct} from 'app/locale';
-import {PlatformContext} from 'app/components/events/interfaces/breadcrumbs/platformContext';
-
-function Collapsed(props) {
-  return (
-    <li className="crumbs-collapsed">
-      <a onClick={props.onClick}>
-        <span className="icon-container">
-          <span className="icon icon-ellipsis" />
-        </span>
-        {tct('Show [count] collapsed crumbs', {count: props.count})}
-      </a>
-    </li>
-  );
-}
-
-Collapsed.propTypes = {
-  onClick: PropTypes.func.isRequired,
-  count: PropTypes.number.isRequired,
-};
-
-function moduleToCategory(module) {
-  if (!module) {
-    return null;
-  }
-  const match = module.match(/^.*\/(.*?)(:\d+)/);
-  if (match) {
-    return match[1];
-  }
-  return module.split(/./)[0];
-}
-
-class BreadcrumbsInterface extends React.Component {
-  static propTypes = {
-    event: SentryTypes.Event.isRequired,
-    type: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-  };
-
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-    project: SentryTypes.Project,
-  };
-
-  constructor(...args) {
-    super(...args);
-    this.state = {
-      collapsed: true,
-      queryValue: '',
-    };
-  }
-
-  static MAX_CRUMBS_WHEN_COLLAPSED = 10;
-
-  onCollapseToggle = () => {
-    this.setState({
-      collapsed: !this.state.collapsed,
-    });
-  };
-
-  renderBreadcrumbs = crumbs =>
-    // reverse array to get consistent idx between collapsed/expanded state
-    // (indexes begin and increment from last breadcrumb)
-    crumbs
-      .reverse()
-      .map((item, idx) => <Breadcrumb key={idx} crumb={item} />)
-      .reverse(); // un-reverse rendered result
-
-  renderNoMatch = () => (
-    <li className="crumb-empty">
-      <p>
-        <span className="icon icon-exclamation" />{' '}
-        {t('Sorry, no breadcrumbs match your search query.')}
-      </p>
-    </li>
-  );
-
-  getVirtualCrumb = () => {
-    const evt = this.props.event;
-    let crumb;
-
-    const exception = evt.entries.find(entry => entry.type === 'exception');
-    if (exception) {
-      const {type, value, module} = exception.data.values[0];
-      crumb = {
-        type: 'error',
-        level: 'error',
-        category: moduleToCategory(module || null) || 'exception',
-        data: {
-          type,
-          value,
-        },
-      };
-    } else if (evt.message) {
-      const levelTag = (evt.tags || []).find(tag => tag.key === 'level');
-      const level = levelTag && levelTag.value;
-      crumb = {
-        type: 'message',
-        level,
-        category: 'message',
-        message: evt.message,
-      };
-    }
-
-    if (crumb) {
-      Object.assign(crumb, {
-        timestamp: evt.dateCreated,
-        last: true,
-      });
-    }
-
-    return crumb;
-  };
-
-  setQuery = evt => {
-    this.setState({
-      queryValue: evt.target.value,
-    });
-  };
-
-  filterCrumbs = (crumbs, queryValue) =>
-    crumbs.filter(
-      item =>
-        // return true if any of category, message, or level contain queryValue
-        !!['category', 'message', 'level'].find(prop => {
-          const propValue = (item[prop] || '').toLowerCase();
-          return propValue.includes(queryValue);
-        })
-    );
-
-  clearSearch = () => {
-    this.setState({
-      queryValue: '',
-      collapsed: true,
-    });
-  };
-
-  getSearchField = () => (
-    <div className="breadcrumb-filter">
-      <input
-        type="text"
-        className="search-input form-control"
-        placeholder={t('Search breadcrumbs...')}
-        autoComplete="off"
-        value={this.state.queryValue}
-        onChange={this.setQuery}
-      />
-      <span className="icon-search" />
-      {this.state.queryValue && (
-        <div>
-          <a className="search-clear-form" onClick={this.clearSearch}>
-            <span className="icon-circle-cross" />
-          </a>
-        </div>
-      )}
-    </div>
-  );
-
-  render() {
-    const evt = this.props.event;
-    const data = this.props.data;
-
-    const title = (
-      <h3>
-        <GuideAnchor target="breadcrumbs" position="bottom">
-          {t('Breadcrumbs')}
-        </GuideAnchor>
-      </h3>
-    );
-
-    let all = data.values;
-
-    // Add the error event as the final (virtual) breadcrumb
-    const virtualCrumb = this.getVirtualCrumb();
-    if (virtualCrumb) {
-      // make copy of values array / don't mutate props
-      all = all.slice(0).concat([virtualCrumb]);
-    }
-
-    // filter breadcrumbs on text input
-    const {queryValue} = this.state;
-    const filtered = queryValue ? this.filterCrumbs(all, queryValue.toLowerCase()) : all;
-
-    // cap max number of breadcrumbs to show
-    const MAX = BreadcrumbsInterface.MAX_CRUMBS_WHEN_COLLAPSED;
-    let crumbs = filtered;
-    if (this.state.collapsed && filtered.length > MAX) {
-      crumbs = filtered.slice(-MAX);
-    }
-
-    const numCollapsed = filtered.length - crumbs.length;
-
-    let crumbContent;
-    if (crumbs.length) {
-      crumbContent = this.renderBreadcrumbs(crumbs);
-    } else if (all.length) {
-      crumbContent = this.renderNoMatch();
-    }
-    return (
-      <EventDataSection
-        className="breadcrumb-box"
-        event={evt}
-        type={this.props.type}
-        title={title}
-        actions={this.getSearchField()}
-        wrapTitle={false}
-      >
-        <PlatformContext.Provider value={evt.platform}>
-          <ul className="crumbs">
-            {numCollapsed > 0 && (
-              <Collapsed onClick={this.onCollapseToggle} count={numCollapsed} />
-            )}
-            {crumbContent}
-          </ul>
-        </PlatformContext.Provider>
-      </EventDataSection>
-    );
-  }
-}
-
-export default BreadcrumbsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
deleted file mode 100644
index c75b2b0f3a..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
+++ /dev/null
@@ -1,96 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import moment from 'moment';
-
-import {defined} from 'app/utils';
-import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRenderer';
-import ErrorRenderer from 'app/components/events/interfaces/breadcrumbs/errorRenderer';
-import DefaultRenderer from 'app/components/events/interfaces/breadcrumbs/defaultRenderer';
-import ErrorBoundary from 'app/components/errorBoundary';
-import Tooltip from 'app/components/tooltip';
-import getDynamicText from 'app/utils/getDynamicText';
-
-class Breadcrumb extends React.Component {
-  static propTypes = {
-    crumb: PropTypes.object.isRequired,
-  };
-
-  getClassName = () => {
-    const {crumb} = this.props;
-
-    // use Set to avoid duplicate crumb classes (was previously adding
-    // values like "crumb-default" as many as three times)
-    const classes = new Set(['crumb', 'crumb-default', 'crumb-' + crumb.level]);
-
-    if (crumb.type !== 'default') {
-      classes.add('crumb-' + crumb.type.replace(/[\s_]+/g, '-').toLowerCase());
-    }
-
-    // special case for 'ui.' and `sentry.` category breadcrumbs
-    // TODO: find a better way to customize UI around non-schema data
-    const isDotSeparatedCategory = /.+\..+/.test(crumb.category);
-    if (isDotSeparatedCategory) {
-      const [category, subcategory] = crumb.category.split('.');
-      if (category === 'ui') {
-        classes.add('crumb-user');
-      } else if (category === 'sentry' && subcategory === 'transaction') {
-        // Warning has a precedence over other icons, so we want to force it.
-        classes.delete('crumb-warning');
-        classes.add('crumb-navigation');
-      }
-    }
-
-    if (crumb.last) {
-      classes.add('crumb-last');
-    }
-
-    return [...classes].join(' ');
-  };
-
-  getTooltipTitle = () => {
-    const {crumb} = this.props;
-    const parsedTimestamp = moment(crumb.timestamp);
-    const timestampFormat = parsedTimestamp.milliseconds() ? 'll H:mm:ss.SSS A' : 'lll';
-    return parsedTimestamp.format(timestampFormat);
-  };
-
-  renderType = () => {
-    const {crumb} = this.props;
-    switch (crumb.type) {
-      case 'error':
-        return <ErrorRenderer crumb={crumb} />;
-      case 'http':
-        return <HttpRenderer crumb={crumb} />;
-      default:
-        return <DefaultRenderer crumb={crumb} />;
-    }
-  };
-
-  render() {
-    const {crumb} = this.props;
-    return (
-      <li className={this.getClassName()}>
-        <ErrorBoundary mini css={{margin: 0, borderRadius: 0}}>
-          <span className="icon-container">
-            <span className="icon" />
-          </span>
-          {defined(crumb.timestamp) ? (
-            <Tooltip title={this.getTooltipTitle()}>
-              <span className="dt">
-                {getDynamicText({
-                  value: moment(crumb.timestamp).format('HH:mm:ss'),
-                  fixed: '00:00:00',
-                })}
-              </span>
-            </Tooltip>
-          ) : (
-            <span className="dt" />
-          )}
-          {this.renderType()}
-        </ErrorBoundary>
-      </li>
-    );
-  }
-}
-
-export default Breadcrumb;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbCollapsed.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbCollapsed.tsx
new file mode 100644
index 0000000000..51bbc22389
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbCollapsed.tsx
@@ -0,0 +1,31 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {tct} from 'app/locale';
+import {IconEllipsis} from 'app/icons/iconEllipsis';
+
+import {BreadCrumb, BreadCrumbIconWrapper} from './styles';
+
+type Props = {
+  onClick: () => void;
+  quantity: number;
+};
+
+const BreadcrumbCollapsed = ({quantity, onClick}: Props) => (
+  <StyledBreadCrumb data-test-id="breadcrumb-collapsed" onClick={onClick}>
+    <BreadCrumbIconWrapper>
+      <IconEllipsis />
+    </BreadCrumbIconWrapper>
+    {tct('Show [quantity] collapsed crumbs', {quantity})}
+  </StyledBreadCrumb>
+);
+
+export default BreadcrumbCollapsed;
+
+const StyledBreadCrumb = styled(BreadCrumb)`
+  cursor: pointer;
+  background: ${p => p.theme.whiteDark};
+  margin: 0 -1px;
+  border-right: 1px solid ${p => p.theme.borderLight};
+  border-left: 1px solid ${p => p.theme.borderLight};
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbTime.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbTime.tsx
new file mode 100644
index 0000000000..6336e948a2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbTime.tsx
@@ -0,0 +1,36 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import moment from 'moment';
+
+import {defined} from 'app/utils';
+import Tooltip from 'app/components/tooltip';
+import getDynamicText from 'app/utils/getDynamicText';
+
+const getBreadcrumbTimeTooltipTitle = (timestamp: string) => {
+  const parsedTimestamp = moment(timestamp);
+  const timestampFormat = parsedTimestamp.milliseconds() ? 'll H:mm:ss.SSS A' : 'lll';
+  return parsedTimestamp.format(timestampFormat);
+};
+
+type Props = {
+  timestamp?: string;
+};
+
+const BreadcrumbTime = ({timestamp}: Props) =>
+  defined(timestamp) ? (
+    <Tooltip title={getBreadcrumbTimeTooltipTitle(timestamp)}>
+      <Time>
+        {getDynamicText({
+          value: moment(timestamp).format('HH:mm:ss'),
+          fixed: '00:00:00',
+        })}
+      </Time>
+    </Tooltip>
+  ) : null;
+
+export default BreadcrumbTime;
+
+const Time = styled('div')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray4};
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx
new file mode 100644
index 0000000000..f8cb4067f5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbs.tsx
@@ -0,0 +1,247 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import EventDataSection from 'app/components/events/eventDataSection';
+import GuideAnchor from 'app/components/assistant/guideAnchor';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import {t} from 'app/locale';
+import {Event} from 'app/types';
+import space from 'app/styles/space';
+
+import {PlatformContextProvider} from './platformContext';
+import BreadCrumbsSearch from './breadcrumbsSearch';
+import BreadcrumbTime from './breadcrumbTime';
+import BreadcrumbCollapsed from './breadcrumbCollapsed';
+import convertBreadcrumbType from './convertBreadcrumbType';
+import getBreadcrumbDetails from './getBreadcrumbDetails';
+import {Breadcrumb} from './types';
+import {BreadCrumb, BreadCrumbIconWrapper} from './styles';
+
+const MAX_CRUMBS_WHEN_COLLAPSED = 10;
+
+type State = {
+  isCollapsed: boolean;
+  searchTerm: string;
+  breadcrumbs: Array<Breadcrumb>;
+  filteredBreadcrumbs: Array<Breadcrumb>;
+};
+
+type Props = {
+  event: Event;
+  type: string;
+  data: {
+    values: Array<Breadcrumb>;
+  };
+};
+
+class BreadcrumbsContainer extends React.Component<Props, State> {
+  state: State = {
+    isCollapsed: true,
+    searchTerm: '',
+    breadcrumbs: [],
+    filteredBreadcrumbs: [],
+  };
+
+  componentDidMount() {
+    this.loadCrumbs();
+  }
+
+  loadCrumbs = () => {
+    const {data} = this.props;
+    let breadcrumbs = data.values;
+
+    // Add the error event as the final (virtual) breadcrumb
+    const virtualCrumb = this.getVirtualCrumb();
+    if (virtualCrumb) {
+      breadcrumbs = [...data.values, virtualCrumb];
+    }
+
+    this.setState({
+      breadcrumbs,
+      filteredBreadcrumbs: breadcrumbs,
+    });
+  };
+
+  moduleToCategory = (module: any) => {
+    if (!module) {
+      return undefined;
+    }
+    const match = module.match(/^.*\/(.*?)(:\d+)/);
+    if (!match) {
+      return module.split(/./)[0];
+    }
+    return match[1];
+  };
+
+  getVirtualCrumb = (): Breadcrumb | undefined => {
+    const {event} = this.props;
+
+    const exception = event.entries.find(entry => entry.type === 'exception');
+
+    if (!exception && !event.message) {
+      return undefined;
+    }
+
+    if (exception) {
+      const {type, value, module: mdl} = exception.data.values[0];
+      return {
+        type: 'error',
+        level: 'error',
+        category: this.moduleToCategory(mdl) || 'exception',
+        data: {
+          type,
+          value,
+        },
+        timestamp: event.dateCreated,
+      };
+    }
+
+    const levelTag = (event.tags || []).find(tag => tag.key === 'level');
+
+    return {
+      type: 'message',
+      level: levelTag?.value as Breadcrumb['level'],
+      category: 'message',
+      message: event.message,
+      timestamp: event.dateCreated,
+    };
+  };
+
+  getCollapsedCrumbQuantity = (): {
+    filteredCollapsedBreadcrumbs: Array<Breadcrumb>;
+    collapsedQuantity: number;
+  } => {
+    const {isCollapsed, filteredBreadcrumbs} = this.state;
+
+    let filteredCollapsedBreadcrumbs = filteredBreadcrumbs;
+
+    if (isCollapsed && filteredCollapsedBreadcrumbs.length > MAX_CRUMBS_WHEN_COLLAPSED) {
+      filteredCollapsedBreadcrumbs = filteredCollapsedBreadcrumbs.slice(
+        -MAX_CRUMBS_WHEN_COLLAPSED
+      );
+    }
+
+    return {
+      filteredCollapsedBreadcrumbs,
+      collapsedQuantity: filteredBreadcrumbs.length - filteredCollapsedBreadcrumbs.length,
+    };
+  };
+
+  handleChangeSearchTerm = (searchTerm: string) => {
+    const {breadcrumbs} = this.state;
+
+    const filteredBreadcrumbs = breadcrumbs.filter(
+      item =>
+        // return true if any of category, message, or level contain queryValue
+        !!['category', 'message', 'level'].find(prop => {
+          const propValue = (item[prop] || '').toLowerCase();
+          return propValue.includes(searchTerm);
+        })
+    );
+
+    this.setState({
+      searchTerm,
+      filteredBreadcrumbs,
+    });
+  };
+
+  handleCollapseToggle = () => {
+    this.setState(prevState => ({
+      isCollapsed: !prevState.isCollapsed,
+    }));
+  };
+
+  handleCleanSearch = () => {
+    this.setState({
+      searchTerm: '',
+      isCollapsed: true,
+    });
+  };
+
+  render() {
+    const {event, type} = this.props;
+    const {searchTerm} = this.state;
+    const {
+      collapsedQuantity,
+      filteredCollapsedBreadcrumbs,
+    } = this.getCollapsedCrumbQuantity();
+
+    return (
+      <EventDataSection
+        type={type}
+        title={
+          <h3>
+            <GuideAnchor target="breadcrumbs" position="bottom">
+              {t('Breadcrumbs')}
+            </GuideAnchor>
+          </h3>
+        }
+        actions={
+          <BreadCrumbsSearch
+            searchTerm={searchTerm}
+            onChangeSearchTerm={this.handleChangeSearchTerm}
+            onClearSearchTerm={this.handleCleanSearch}
+          />
+        }
+        wrapTitle={false}
+      >
+        <Content>
+          {filteredCollapsedBreadcrumbs.length > 0 ? (
+            <PlatformContextProvider value={{platform: event.platform}}>
+              <BreadCrumbs className="crumbs">
+                {collapsedQuantity > 0 && (
+                  <BreadcrumbCollapsed
+                    onClick={this.handleCollapseToggle}
+                    quantity={collapsedQuantity}
+                  />
+                )}
+                {filteredCollapsedBreadcrumbs.map((crumb, idx) => {
+                  const convertedBreadcrumb = convertBreadcrumbType(crumb);
+                  const {color, borderColor, icon, renderer} = getBreadcrumbDetails(
+                    convertedBreadcrumb
+                  );
+
+                  return (
+                    <BreadCrumb
+                      data-test-id="breadcrumb"
+                      key={idx}
+                      error={
+                        convertedBreadcrumb.type === 'message' ||
+                        convertedBreadcrumb.type === 'error'
+                      }
+                    >
+                      <BreadCrumbIconWrapper color={color} borderColor={borderColor}>
+                        {icon}
+                      </BreadCrumbIconWrapper>
+                      {renderer}
+                      <BreadcrumbTime timestamp={crumb.timestamp} />
+                    </BreadCrumb>
+                  );
+                })}
+              </BreadCrumbs>
+            </PlatformContextProvider>
+          ) : (
+            <EmptyStateWarning small>
+              {t('Sorry, no breadcrumbs match your search query.')}
+            </EmptyStateWarning>
+          )}
+        </Content>
+      </EventDataSection>
+    );
+  }
+}
+
+export default BreadcrumbsContainer;
+
+const BreadCrumbs = styled('ul')`
+  padding-left: 0;
+  list-style: none;
+  margin-bottom: 0;
+`;
+
+const Content = styled('div')`
+  border: 1px solid ${p => p.theme.borderLight};
+  border-radius: 3px;
+  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
+  margin-bottom: ${space(3)};
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx
new file mode 100644
index 0000000000..6605a851ec
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumbsSearch.tsx
@@ -0,0 +1,68 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import TextField from 'app/components/forms/textField';
+import {IconSearch} from 'app/icons/iconSearch';
+import {t} from 'app/locale';
+import {IconClose} from 'app/icons/iconClose';
+import space from 'app/styles/space';
+
+type Props = {
+  searchTerm: string;
+  onChangeSearchTerm: TextField['props']['onChange'];
+  onClearSearchTerm: () => void;
+};
+
+const BreadCrumbsSearch = ({
+  searchTerm,
+  onChangeSearchTerm,
+  onClearSearchTerm,
+}: Props) => (
+  <Wrapper data-test-id="breadcumber-search">
+    <StyledTextField
+      name="breadcumber-search"
+      placeholder={t('Search breadcrumbs...')}
+      autoComplete="off"
+      value={searchTerm}
+      onChange={onChangeSearchTerm}
+    />
+    <StyledIconSearch />
+    <StyledIconClose show={!!searchTerm} onClick={onClearSearchTerm} circle />
+  </Wrapper>
+);
+
+export default BreadCrumbsSearch;
+
+const Wrapper = styled('div')`
+  position: relative;
+  display: flex;
+  align-items: center;
+`;
+
+const StyledTextField = styled(TextField)<TextField['props']>`
+  margin-bottom: 0;
+  input {
+    padding-left: ${space(4)};
+    padding-right: ${space(4)};
+    height: 28px;
+  }
+`;
+
+const StyledIconSearch = styled(IconSearch)`
+  position: absolute;
+  color: ${p => p.theme.gray2};
+  font-size: ${p => p.theme.fontSizeMedium};
+  left: ${space(1)};
+`;
+
+const StyledIconClose = styled(IconClose, {
+  shouldForwardProp: p => p !== 'show',
+})<{
+  show: boolean;
+}>`
+  position: absolute;
+  cursor: pointer;
+  color: ${p => p.theme.gray6};
+  right: ${space(0.75)};
+  visibility: ${p => (p.show ? 'visible' : 'hidden')};
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx
new file mode 100644
index 0000000000..231b2a6088
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/convertBreadcrumbType.tsx
@@ -0,0 +1,51 @@
+import {Breadcrumb} from './types';
+
+function convertBreadcrumbType(breadcrumb: Breadcrumb): Breadcrumb {
+  if (breadcrumb.level) {
+    if (breadcrumb.level === 'warning') {
+      return {
+        ...breadcrumb,
+        type: 'warning',
+      };
+    }
+
+    if (breadcrumb.level === 'error') {
+      return {
+        ...breadcrumb,
+        type: 'error',
+      };
+    }
+  }
+  // special case for 'ui.' and `sentry.` category breadcrumbs
+  // TODO: find a better way to customize UI around non-schema data
+  if ((!breadcrumb.type || breadcrumb.type === 'default') && breadcrumb.category) {
+    const [category, subcategory] = breadcrumb.category.split('.');
+    if (category === 'ui') {
+      return {
+        ...breadcrumb,
+        type: 'ui',
+      };
+    }
+
+    if (category === 'console' || category === 'navigation') {
+      return {
+        ...breadcrumb,
+        type: 'debug',
+      };
+    }
+
+    if (
+      category === 'sentry' &&
+      (subcategory === 'transaction' || subcategory === 'event')
+    ) {
+      return {
+        ...breadcrumb,
+        type: 'error',
+      };
+    }
+  }
+
+  return breadcrumb;
+}
+
+export default convertBreadcrumbType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx
index a5af37479c..1b49729050 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.tsx
@@ -3,13 +3,13 @@ import React from 'react';
 import Category from 'app/components/events/interfaces/breadcrumbs/category';
 import {getMeta} from 'app/components/events/meta/metaProxy';
 
-import {Crumb} from './types';
+import {Breadcrumb} from './types';
 import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
 
 type Props = {
-  crumb: Crumb;
+  breadcrumb: Breadcrumb;
   kvData?: KvData;
-  summary: React.ReactElement;
+  summary: React.ReactNode;
   children?: React.ReactNode;
 };
 
@@ -17,7 +17,7 @@ type KvData = {
   [key: string]: any;
 };
 
-const CrumbTable = ({children, kvData, crumb, summary}: Props) => {
+const CrumbTable = ({children, kvData, breadcrumb, summary}: Props) => {
   const renderData = () => {
     if (!kvData) {
       return null;
@@ -45,7 +45,7 @@ const CrumbTable = ({children, kvData, crumb, summary}: Props) => {
       <thead>
         <tr>
           <td className="key">
-            <Category value={crumb.category} />
+            <Category value={breadcrumb.category} />
           </td>
           <td className="value">{summary}</td>
         </tr>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx
index bbd493931a..00c160c5ad 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.tsx
@@ -3,33 +3,32 @@ import React from 'react';
 import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable';
 import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
 import {getMeta} from 'app/components/events/meta/metaProxy';
-import {defined} from 'app/utils';
 
 import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
-import {Crumb} from './types';
+import {BreadcrumbTypeDefault, BreadcrumbTypeNavigation} from './types';
 
 type Props = {
-  crumb: Crumb;
+  breadcrumb: BreadcrumbTypeDefault | BreadcrumbTypeNavigation;
 };
 
-const DefaultRenderer = ({crumb}: Props) => (
+const DefaultRenderer = ({breadcrumb}: Props) => (
   <CrumbTable
-    crumb={crumb}
+    breadcrumb={breadcrumb}
     summary={
       <SummaryLine>
-        {defined(crumb?.message) && (
+        {breadcrumb?.message && (
           <pre>
             <code>
               {getBreadcrumbCustomRendererValue({
-                value: crumb.message,
-                meta: getMeta(crumb, 'message'),
+                value: breadcrumb.message,
+                meta: getMeta(breadcrumb, 'message'),
               })}
             </code>
           </pre>
         )}
       </SummaryLine>
     }
-    kvData={crumb.data}
+    kvData={breadcrumb.data}
   />
 );
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx
index b70f8bee60..5a86f72c56 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.tsx
@@ -7,35 +7,36 @@ import {getMeta} from 'app/components/events/meta/metaProxy';
 import {defined} from 'app/utils';
 
 import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
-import {Crumb} from './types';
+import {BreadcrumbTypeDefault} from './types';
 
 type Props = {
-  crumb: Crumb;
+  breadcrumb: BreadcrumbTypeDefault;
 };
 
-const ErrorRenderer = ({crumb}: Props) => {
-  const {data} = crumb;
+const ErrorRenderer = ({breadcrumb}: Props) => {
+  const {data} = breadcrumb;
   return (
     <CrumbTable
-      crumb={crumb}
+      breadcrumb={breadcrumb}
       summary={
         <SummaryLine>
           <pre>
             <code>
-              {defined(data?.type) &&
+              {data?.type &&
                 getBreadcrumbCustomRendererValue({
                   value: <strong>{`${data.type}: `}</strong>,
                   meta: getMeta(data, 'type'),
                 })}
-              {defined(data?.value) &&
+              {defined(data) &&
+                defined(data?.value) &&
                 getBreadcrumbCustomRendererValue({
-                  value: crumb.message ? `${data.value}. ` : data.value,
+                  value: breadcrumb?.message ? `${data.value}. ` : data.value,
                   meta: getMeta(data, 'value'),
                 })}
-              {defined(crumb?.message) &&
+              {breadcrumb?.message &&
                 getBreadcrumbCustomRendererValue({
-                  value: crumb.message,
-                  meta: getMeta(crumb, 'message'),
+                  value: breadcrumb.message,
+                  meta: getMeta(breadcrumb, 'message'),
                 })}
             </code>
           </pre>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx
new file mode 100644
index 0000000000..6378edcf10
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/getBreadcrumbDetails.tsx
@@ -0,0 +1,78 @@
+import React from 'react';
+
+import {Color} from 'app/utils/theme';
+import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRenderer';
+import ErrorRenderer from 'app/components/events/interfaces/breadcrumbs/errorRenderer';
+import DefaultRenderer from 'app/components/events/interfaces/breadcrumbs/defaultRenderer';
+import {IconInfo} from 'app/icons/iconInfo';
+import {IconWarning} from 'app/icons/iconWarning';
+import {IconLocation} from 'app/icons/iconLocation';
+import {IconUser} from 'app/icons/iconUser';
+import {IconRefresh} from 'app/icons/iconRefresh';
+
+import {Breadcrumb} from './types';
+
+type Output = {
+  color: Color;
+  borderColor: Color;
+  icon: React.ReactElement;
+  renderer: React.ReactElement;
+};
+
+function getBreadcrumbDetails(breadcrumb: Breadcrumb): Partial<Output> {
+  switch (breadcrumb.type) {
+    case 'user':
+    case 'ui': {
+      return {
+        color: 'purple',
+        icon: <IconUser />,
+        renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
+      };
+    }
+    case 'navigation': {
+      return {
+        color: 'blue',
+        icon: <IconLocation />,
+        renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
+      };
+    }
+    case 'info': {
+      return {
+        color: 'blue',
+        icon: <IconInfo />,
+        renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
+      };
+    }
+    case 'warning': {
+      return {
+        color: 'yellowOrange',
+        borderColor: 'yellowOrangeDark',
+        icon: <IconWarning />,
+        renderer: <ErrorRenderer breadcrumb={breadcrumb} />,
+      };
+    }
+    case 'exception':
+    case 'message':
+    case 'error': {
+      return {
+        color: 'red',
+        icon: <IconWarning />,
+        renderer: <ErrorRenderer breadcrumb={breadcrumb} />,
+      };
+    }
+    case 'http': {
+      return {
+        color: 'green',
+        icon: <IconRefresh />,
+        renderer: <HttpRenderer breadcrumb={breadcrumb} />,
+      };
+    }
+    default:
+      return {
+        icon: <span className="icon-console" />,
+        renderer: <DefaultRenderer breadcrumb={breadcrumb} />,
+      };
+  }
+}
+
+export default getBreadcrumbDetails;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx
index 335c2ed70f..4154e46ad1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.tsx
@@ -5,18 +5,18 @@ import CrumbTable from 'app/components/events/interfaces/breadcrumbs/crumbTable'
 import SummaryLine from 'app/components/events/interfaces/breadcrumbs/summaryLine';
 import ExternalLink from 'app/components/links/externalLink';
 import {getMeta} from 'app/components/events/meta/metaProxy';
-import {defined} from 'app/utils';
 import {t} from 'app/locale';
+import {defined} from 'app/utils';
 
 import getBreadcrumbCustomRendererValue from './getBreadcrumbCustomRendererValue';
-import {Crumb} from './types';
+import {BreadcrumbTypeHTTP} from './types';
 
 type Props = {
-  crumb: Crumb;
+  breadcrumb: BreadcrumbTypeHTTP;
 };
 
-const HttpRenderer = ({crumb}: Props) => {
-  const {data} = crumb;
+const HttpRenderer = ({breadcrumb}: Props) => {
+  const {data} = breadcrumb;
 
   const renderUrl = (url: any) => {
     if (typeof url === 'string') {
@@ -31,29 +31,30 @@ const HttpRenderer = ({crumb}: Props) => {
 
     try {
       return JSON.stringify(url);
-    } catch (e) {
+    } catch {
       return t('Invalid URL');
     }
   };
 
   return (
     <CrumbTable
-      crumb={crumb}
+      breadcrumb={breadcrumb}
       summary={
         <SummaryLine>
           <pre>
             <code>
-              {defined(data?.method) &&
+              {data?.method &&
                 getBreadcrumbCustomRendererValue({
                   value: <strong>{`${data.method} `}</strong>,
                   meta: getMeta(data, 'method'),
                 })}
-              {defined(data?.url) &&
+              {data?.url &&
                 getBreadcrumbCustomRendererValue({
                   value: renderUrl(data.url),
                   meta: getMeta(data, 'url'),
                 })}
-              {defined(data?.status_code) &&
+              {defined(data) &&
+                defined(data.status_code) &&
                 getBreadcrumbCustomRendererValue({
                   value: (
                     <span data-test-id="http-renderer-status-code">{` [${data.status_code}]`}</span>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.tsx
index 026495d88d..e80bc91971 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/platformContext.tsx
@@ -1,5 +1,11 @@
 import React from 'react';
 
-export const PlatformContext = React.createContext<{platform: string} | undefined>(
+import {PlatformKey} from 'app/data/platformCategories';
+
+const PlatformContext = React.createContext<{platform?: PlatformKey} | undefined>(
   undefined
 );
+
+const PlatformContextProvider = PlatformContext.Provider;
+
+export {PlatformContext, PlatformContextProvider};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/styles.tsx
new file mode 100644
index 0000000000..70ed7c2132
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/styles.tsx
@@ -0,0 +1,54 @@
+import styled from '@emotion/styled';
+import {css} from '@emotion/core';
+
+import {Color} from 'app/utils/theme';
+import space from 'app/styles/space';
+
+// TODO(style): the color #fffcfb and  #e7c0bc are not yet in theme and no similar theme's color was found.
+const BreadCrumb = styled('li')<{error?: boolean}>`
+  font-size: ${p => p.theme.fontSizeMedium};
+  position: relative;
+  padding: ${space(1)} ${space(3)} ${space(0.75)} ${space(3)} !important;
+  display: grid;
+  grid-template-columns: 26px 1fr 50px;
+  grid-gap: ${space(1.5)};
+  :before {
+    content: '';
+    display: block;
+    width: 2px;
+    top: 0;
+    bottom: 0;
+    left: 32px;
+    background: ${p => p.theme.borderLight};
+    position: absolute;
+  }
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  :last-child:before {
+    bottom: 50%;
+  }
+  ${p =>
+    p.error &&
+    css`
+      background: #fffcfb;
+      border: 1px solid #e7c0bc;
+      margin: -1px;
+    `}
+`;
+
+const BreadCrumbIconWrapper = styled('div')<{color?: Color; borderColor?: Color}>`
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 26px;
+  height: 26px;
+  background: ${p => p.theme.white};
+  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
+  border-radius: 32px;
+  z-index: 1;
+  position: relative;
+  color: ${p => (p.color ? p.theme[p.color] : 'inherit')};
+  border-color: ${p => (p.borderColor ? p.theme[p.borderColor] : 'currentColor')};
+  border: 1px solid ${p => (p.color ? p.theme[p.color] : p.theme.gray2)};
+`;
+
+export {BreadCrumb, BreadCrumbIconWrapper};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
index 4709159bfb..349d33fbd2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
@@ -1,14 +1,67 @@
-export type Crumb = {
-  data: Data;
+type BreadcrumbCategory =
+  | 'started'
+  | 'UIViewController'
+  | 'touch'
+  | 'message'
+  | 'ui.click'
+  | 'xhr'
+  | 'console';
+
+type BreadcrumbLevel = 'fatal' | 'error' | 'warning' | 'info' | 'debug';
+
+type BreadcrumbTypeBase = {
+  timestamp?: string; //it's recommended
+  category?: BreadcrumbCategory;
   message?: string;
-  type: string;
-  category?: string;
+  level?: BreadcrumbLevel;
+  event_id?: string;
 };
 
-type Data = {
-  type?: string;
-  value?: string;
-  method?: string;
-  status_code?: number | string;
-  url?: any;
-};
+export type BreadcrumbTypeNavigation = {
+  type: 'navigation';
+  data?: {
+    to: string;
+    from: string;
+  };
+} & BreadcrumbTypeBase;
+
+export type BreadcrumbTypeHTTP = {
+  type: 'http';
+  data?: {
+    url?: string;
+    method?:
+      | 'POST'
+      | 'PUT'
+      | 'GET'
+      | 'HEAD'
+      | 'DELETE'
+      | 'CONNECT'
+      | 'OPTIONS'
+      | 'TRACE'
+      | 'PATCH';
+    status_code?: number;
+    reason?: string;
+  };
+} & BreadcrumbTypeBase;
+
+export type BreadcrumbTypeDefault = {
+  type:
+    | 'error'
+    | 'info'
+    | 'debug'
+    | 'message'
+    | 'default'
+    | 'query'
+    | 'ui'
+    | 'user'
+    | 'exception'
+    | 'warning';
+  data?: {[key: string]: any};
+} & BreadcrumbTypeBase;
+
+export type Breadcrumb =
+  | BreadcrumbTypeNavigation
+  | BreadcrumbTypeHTTP
+  | BreadcrumbTypeDefault;
+
+export type BreadcrumbType = Breadcrumb['type'];
diff --git a/src/sentry/static/sentry/app/components/forms/formField.tsx b/src/sentry/static/sentry/app/components/forms/formField.tsx
index 247cf49dab..e51058b261 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.tsx
@@ -7,6 +7,7 @@ import {defined} from 'app/utils';
 import InlineSvg from 'app/components/inlineSvg';
 import Tooltip from 'app/components/tooltip';
 import {Context} from 'app/components/forms/form';
+import {Meta} from 'app/types';
 
 type Value = string | number | boolean;
 
@@ -24,7 +25,7 @@ type FormFieldProps = {
   onChange?: (value: Value) => void;
   error?: string;
   value?: Value;
-  meta: any;
+  meta?: Meta;
 };
 
 type FormFieldState = {
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.tsx b/src/sentry/static/sentry/app/components/forms/inputField.tsx
index f5ae36932f..0effaeaaa5 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.tsx
@@ -13,7 +13,7 @@ type InputFieldProps = FormField['props'] & {
   autoComplete?: string;
 };
 
-export default class InputField<
+class InputField<
   Props extends InputFieldProps = InputFieldProps,
   State extends FormField['state'] = FormField['state']
 > extends FormField<Props, State> {
@@ -52,3 +52,5 @@ export default class InputField<
     throw new Error('Must be implemented by child.');
   }
 }
+
+export default InputField;
diff --git a/src/sentry/static/sentry/app/icons/iconTerminal.tsx b/src/sentry/static/sentry/app/icons/iconTerminal.tsx
new file mode 100644
index 0000000000..388d8d80e2
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/iconTerminal.tsx
@@ -0,0 +1,25 @@
+import React from 'react';
+
+import {IconProps} from 'app/types/iconProps';
+import theme from 'app/utils/theme';
+
+export const IconTerminal = React.forwardRef(function IconTerminal(
+  {color: providedColor = 'currentColor', size: providedSize = 'sm', ...props}: IconProps,
+  ref: React.Ref<SVGSVGElement>
+) {
+  const color = providedColor;
+  const size = theme.iconSizes[providedSize] ?? providedSize;
+
+  return (
+    <svg
+      viewBox="0 0 471.362 471.362"
+      fill={color}
+      height={size}
+      width={size}
+      {...props}
+      ref={ref}
+    >
+      <path d="M468.794 355.171c-1.707-1.718-3.897-2.57-6.563-2.57H188.145c-2.664 0-4.854.853-6.567 2.57-1.711 1.711-2.565 3.897-2.565 6.563v18.274c0 2.662.854 4.853 2.565 6.563 1.713 1.712 3.903 2.57 6.567 2.57h274.086c2.666 0 4.856-.858 6.563-2.57 1.711-1.711 2.567-3.901 2.567-6.563v-18.274c.004-2.666-.848-4.852-2.567-6.563zM30.259 85.075c-1.903-1.903-4.093-2.856-6.567-2.856s-4.661.953-6.563 2.856L2.852 99.353C.95 101.255 0 103.442 0 105.918c0 2.478.95 4.664 2.852 6.567L115.06 224.69 2.852 336.896C.95 338.799 0 340.989 0 343.46c0 2.478.95 4.665 2.852 6.567L17.128 364.3c1.903 1.906 4.089 2.854 6.563 2.854s4.665-.951 6.567-2.854l133.048-133.045c1.903-1.902 2.853-4.096 2.853-6.57 0-2.473-.95-4.663-2.853-6.565L30.259 85.075z" />
+    </svg>
+  );
+});
diff --git a/src/sentry/static/sentry/app/utils/theme.tsx b/src/sentry/static/sentry/app/utils/theme.tsx
index e4046b50a7..278498d8b4 100644
--- a/src/sentry/static/sentry/app/utils/theme.tsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -326,5 +326,6 @@ const theme = {
 } as const;
 
 export type Theme = typeof theme;
+export type Color = keyof typeof colors;
 
 export default theme;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index aeacc6c164..96847236eb 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1673,162 +1673,8 @@ span.val {
 * ============================================================================
 */
 
-.breadcrumb-box {
-  .box-content {
-    padding: 0 !important;
-  }
-
-  h3 {
-    display: inline;
-    float: left;
-  }
-
-  .breadcrumb-filter {
-    float: right;
-    position: relative;
-
-    input {
-      width: 100%;
-      height: 28px;
-      display: inline;
-      padding: 8px 26px;
-    }
-
-    .icon-search {
-      position: absolute;
-      color: #9ba5b5;
-      font-size: 14px;
-      top: 7px;
-      left: 8px;
-    }
-
-    .search-clear-form {
-      position: absolute;
-      color: #c7cdd5;
-      top: 6px;
-      right: 6px;
-    }
-  }
-}
-
 ul.crumbs {
-  .list-unstyled;
-  border: 1px solid @trim-dark;
-  border-radius: 3px;
-  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
-
   li {
-    margin: 0;
-    border-left: 1px solid transparent;
-    border-right: 1px solid transparent;
-    border-bottom: 1px solid lighten(@trim, 2);
-    padding: 6px 20px 3px 60px;
-    position: relative;
-    margin-left: -1px;
-    margin-right: -1px;
-
-    &:before {
-      display: block;
-      content: '';
-      width: 2px;
-      top: 0;
-      bottom: 0;
-      left: 30px;
-      background: #e7eaef;
-      position: absolute;
-    }
-
-    &:first-child {
-      border-top-right-radius: 2px;
-      border-top-left-radius: 2px;
-    }
-
-    &:last-child {
-      border-bottom: 0;
-      border-bottom-right-radius: 2px;
-      border-bottom-left-radius: 2px;
-    }
-
-    h5 {
-      font-size: 15px;
-      margin-bottom: 3px;
-      line-height: 24px;
-      text-transform: capitalize;
-    }
-
-    p {
-      margin: 0;
-      padding: 0;
-    }
-
-    .message-text {
-      font-size: 15px;
-      padding-top: 2px;
-    }
-
-    .icon-container {
-      display: block;
-      .square(26px);
-      background: #fff;
-      border: 1px solid @gray-light;
-      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
-      border-radius: 32px;
-      position: absolute;
-      top: 5px;
-      left: 18px;
-      z-index: 1;
-
-      .icon {
-        font-size: 14px;
-        position: absolute;
-        left: 5px;
-        top: 4px;
-        font-family: 'sentry-simple';
-        speak: none;
-        font-style: normal;
-        font-weight: normal;
-        font-variant: normal;
-        text-transform: none;
-        line-height: 1;
-
-        /* Better Font Rendering =========== */
-        -webkit-font-smoothing: antialiased;
-        -moz-osx-font-smoothing: grayscale;
-      }
-    }
-
-    time,
-    span.dt {
-      font-size: 12px;
-      color: @gray-dark;
-      position: absolute;
-      right: 20px;
-    }
-
-    em {
-      font-style: normal;
-    }
-
-    span.timing {
-      font-size: 90%;
-      padding-left: 6px;
-      font-weight: normal;
-      color: @gray;
-    }
-
-    span.crumb-level {
-      background: @gray;
-      border-radius: 2px;
-      font-size: 11px;
-      font-weight: bold;
-      color: white;
-      padding: 2px 4px;
-    }
-
-    * + span.crumb-level {
-      margin-left: 6px;
-    }
-
     .table.key-value {
       margin-bottom: 0;
       background: none;
@@ -1842,10 +1688,6 @@ ul.crumbs {
         font-weight: normal;
       }
 
-      td.value {
-        padding: 2px 60px 2px 0 !important;
-      }
-
       .key {
         width: 122px;
         max-width: 122px;
@@ -1913,218 +1755,6 @@ ul.crumbs {
         display: inline-block;
       }
     }
-
-    &.crumbs-collapsed {
-      background: @white-dark;
-      margin: 0;
-      min-height: 36px;
-
-      &:before {
-        left: 29px;
-      }
-
-      .icon-container {
-        left: 17px;
-      }
-
-      .icon {
-        color: @gray;
-        top: 6px;
-        left: 5.5px;
-      }
-
-      a {
-        color: @gray-dark;
-        display: block;
-        font-size: 15px;
-        padding: 6px 0 5px;
-        margin: -5px 0;
-
-        &:hover {
-          color: @gray-darkest;
-        }
-      }
-    }
-
-    .query {
-      display: inline;
-
-      .keyword {
-        font-weight: 600;
-      }
-
-      span {
-        display: inline;
-      }
-
-      span.param {
-        color: @gray-darker;
-        font-weight: bold;
-        padding: 2px 5px;
-        margin: -2px -3px;
-        background: @gray-lightest;
-        border-radius: 2px;
-      }
-    }
-
-    &.crumb-default {
-      padding-top: 7px;
-      clear: both;
-
-      .icon {
-        color: @gray-dark;
-        top: 5px;
-        left: 6px;
-
-        &:before {
-          content: '\e909';
-        }
-      }
-
-      span.logger {
-        padding-left: 8px;
-        color: @gray;
-      }
-    }
-
-    &.crumb-navigation {
-      .icon-container {
-        border-color: @blue-dark;
-
-        .icon {
-          top: 5px;
-          left: 5.5px;
-          color: @blue;
-
-          &:before {
-            content: '\e90b';
-          }
-        }
-      }
-    }
-
-    &.crumb-http {
-      .icon-container {
-        border-color: @green-dark;
-
-        .icon {
-          top: 5px;
-          left: 5.5px;
-          color: @green;
-
-          &:before {
-            content: '\e908';
-          }
-        }
-      }
-    }
-
-    &.crumb-user {
-      .icon-container {
-        border-color: @purple-dark;
-      }
-
-      .icon {
-        color: @purple;
-        left: 5.5px;
-      }
-
-      .icon:before {
-        content: '\e608';
-      }
-    }
-
-    &.crumb-warning {
-      .crumb-level {
-        background: @yellow-orange;
-      }
-
-      .icon-container {
-        border-color: @yellow-orange-dark;
-
-        .icon {
-          top: 4px;
-          left: 5.5px;
-          color: @yellow-orange;
-
-          &:before {
-            content: '\e906';
-          }
-        }
-      }
-    }
-
-    &.crumb-debug {
-      .crumb-level {
-        background: @blue;
-      }
-    }
-
-    &.crumb-error,
-    &.crumb-critical {
-      background: #fffcfb;
-      border: 1px solid #e7c0bc;
-      margin: -1px -1px;
-
-      .crumb-level {
-        background: @red;
-      }
-
-      .icon-container {
-        .icon {
-          color: @red;
-          top: 4px;
-          left: 5.5px;
-
-          &:before {
-            content: '\e906';
-          }
-        }
-      }
-
-      h5 {
-        color: #000 !important;
-      }
-
-      td,
-      pre,
-      time,
-      .dt {
-        color: #504140 !important;
-      }
-
-      .icon-container {
-        border-color: @red-dark;
-      }
-
-      &:before {
-        background: #f1d8d5;
-      }
-    }
-
-    &.crumb-empty {
-      text-align: center;
-      padding: 14px 0;
-
-      &:before {
-        display: none;
-      }
-
-      .icon {
-        opacity: 0.4;
-        margin-right: 4px;
-        vertical-align: text-bottom;
-      }
-    }
-
-    &.crumb-last {
-      border-radius: 0 0 3px 3px;
-
-      &:before {
-        bottom: auto;
-        height: 20px;
-      }
-    }
   }
 }
 
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
index add9447006..e264ccca71 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
@@ -1,8 +1,7 @@
 import React from 'react';
 
-import {shallow} from 'sentry-test/enzyme';
-import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs';
-import Breadcrumb from 'app/components/events/interfaces/breadcrumbs/breadcrumb';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs/breadcrumbs';
 
 describe('BreadcrumbsInterface', function() {
   let PROPS;
@@ -40,36 +39,60 @@ describe('BreadcrumbsInterface', function() {
 
   describe('filterCrumbs', function() {
     it('should filter crumbs based on crumb message', function() {
-      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS} />).instance();
-      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).toHaveLength(0);
-      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'up')).toHaveLength(13);
+      const breadcrumbs = mountWithTheme(<BreadcrumbsInterface {...PROPS} />);
+      const breadcrumbSearhInput = breadcrumbs.find('[id="id-breadcumber-search"]');
+
+      breadcrumbSearhInput.simulate('change', {target: {value: 'hi'}});
+      expect(breadcrumbs.state().searchTerm).toBe('hi');
+      expect(breadcrumbs.state().filteredBreadcrumbs).toHaveLength(0);
+
+      breadcrumbSearhInput.simulate('change', {target: {value: 'up'}});
+      expect(breadcrumbs.state().searchTerm).toBe('up');
+      expect(breadcrumbs.state().filteredBreadcrumbs).toHaveLength(13);
     });
 
     it('should filter crumbs based on crumb level', function() {
-      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS} />).instance();
-      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).toHaveLength(0);
-      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'ext')).toHaveLength(16);
+      const breadcrumbs = mountWithTheme(<BreadcrumbsInterface {...PROPS} />);
+      const breadcrumbSearhInput = breadcrumbs.find('[id="id-breadcumber-search"]');
+
+      breadcrumbSearhInput.simulate('change', {target: {value: 'ext'}});
+      expect(breadcrumbs.state().searchTerm).toBe('ext');
+      expect(breadcrumbs.state().filteredBreadcrumbs).toHaveLength(16);
     });
 
     it('should filter crumbs based on crumb category', function() {
-      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS} />).instance();
-      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).toHaveLength(0);
-      expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'error')).toHaveLength(2);
+      const breadcrumbs = mountWithTheme(<BreadcrumbsInterface {...PROPS} />);
+      const breadcrumbSearhInput = breadcrumbs.find('[id="id-breadcumber-search"]');
+
+      breadcrumbSearhInput.simulate('change', {target: {value: 'error'}});
+      expect(breadcrumbs.state().searchTerm).toBe('error');
+      expect(breadcrumbs.state().filteredBreadcrumbs).toHaveLength(2);
     });
   });
 
   describe('render', function() {
     it('should display the correct number of crumbs with no filter', function() {
-      const wrapper = shallow(<BreadcrumbsInterface {...PROPS} />);
-      expect(wrapper.find(Breadcrumb)).toHaveLength(10);
+      const breadcrumbs = mountWithTheme(<BreadcrumbsInterface {...PROPS} />);
+      expect(breadcrumbs.find('[data-test-id="breadcrumb"]').hostNodes()).toHaveLength(
+        10
+      );
     });
 
     it('should display the correct number of crumbs with a filter', function() {
-      const wrapper = shallow(<BreadcrumbsInterface {...PROPS} />);
-      wrapper.setState({queryValue: 'sup'});
-      expect(wrapper.find(Breadcrumb)).toHaveLength(10);
-      wrapper.setState({queryValue: 'sup', collapsed: false});
-      expect(wrapper.find(Breadcrumb)).toHaveLength(13);
+      const breadcrumbs = mountWithTheme(<BreadcrumbsInterface {...PROPS} />);
+      const breadcrumbSearhInput = breadcrumbs.find('[id="id-breadcumber-search"]');
+
+      breadcrumbSearhInput.simulate('change', {target: {value: 'sup'}});
+      expect(breadcrumbs.state().searchTerm).toBe('sup');
+      expect(breadcrumbs.find('[data-test-id="breadcrumb"]').hostNodes()).toHaveLength(
+        10
+      );
+
+      const collapsedBreadcrumb = breadcrumbs
+        .find('[data-test-id="breadcrumb-collapsed"]')
+        .hostNodes();
+      collapsedBreadcrumb.simulate('click');
+      expect(breadcrumbs.state().filteredBreadcrumbs).toHaveLength(13);
     });
 
     it('should not crash if data contains a toString attribute', () => {
@@ -77,8 +100,8 @@ describe('BreadcrumbsInterface', function() {
       // used to coerce breadcrumb data to string. This would cause a TypeError.
       const data = {nested: {toString: 'hello'}};
       PROPS.data.values = [{message: 'sup', category: 'default', level: 'info', data}];
-      const wrapper = shallow(<BreadcrumbsInterface {...PROPS} />);
-      expect(wrapper.find(Breadcrumb)).toHaveLength(1);
+      const breadcrumbs = mountWithTheme(<BreadcrumbsInterface {...PROPS} />);
+      expect(breadcrumbs.find('[data-test-id="breadcrumb"]').hostNodes()).toHaveLength(1);
     });
   });
 });
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
index 40d756ccf0..c37feb8d02 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 
-import {shallow, mount} from 'sentry-test/enzyme';
+import {shallow, mountWithTheme} from 'sentry-test/enzyme';
 import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRenderer';
 
 describe('HttpRenderer', function() {
@@ -8,7 +8,7 @@ describe('HttpRenderer', function() {
     it('should work', function() {
       const httpRendererWrapper = shallow(
         <HttpRenderer
-          crumb={{
+          breadcrumb={{
             data: {
               method: 'POST',
               url: 'http://example.com/foo',
@@ -35,9 +35,9 @@ describe('HttpRenderer', function() {
     });
 
     it("shouldn't blow up if crumb.data is missing", function() {
-      const httpRendererWrapper = mount(
+      const httpRendererWrapper = mountWithTheme(
         <HttpRenderer
-          crumb={{
+          breadcrumb={{
             category: 'xhr',
             type: 'http',
           }}
@@ -48,9 +48,9 @@ describe('HttpRenderer', function() {
     });
 
     it("shouldn't blow up if url is not a string", function() {
-      const httpRendererWrapper = mount(
+      const httpRendererWrapper = mountWithTheme(
         <HttpRenderer
-          crumb={{
+          breadcrumb={{
             category: 'xhr',
             type: 'http',
             data: {
