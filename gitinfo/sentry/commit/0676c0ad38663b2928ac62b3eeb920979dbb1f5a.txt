commit 0676c0ad38663b2928ac62b3eeb920979dbb1f5a
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 20 22:58:08 2012 -0700

    Initial work on dashboard rewrite for Backbone

diff --git a/Makefile b/Makefile
index 3f3edbb101..2e22d124fe 100644
--- a/Makefile
+++ b/Makefile
@@ -12,7 +12,7 @@ UGLIFY_JS ?= `which uglifyjs`
 COFFEE ?= `which coffee`
 WATCHR ?= `which watchr`
 
-build: static locale
+build: static coffee locale
 
 #
 # Compile language files
@@ -26,7 +26,7 @@ locale:
 # Build less files
 #
 
-static: coffee
+static:
 	@lessc ${BOOTSTRAP_LESS} > ${GLOBAL_CSS};
 	@lessc ${BOOTSTRAP_LESS} > ${GLOBAL_CSS_MIN} --compress;
 	@cat ${STATIC_DIR}/scripts/sentry.core.js ${STATIC_DIR}/scripts/sentry.realtime.js ${STATIC_DIR}/scripts/sentry.charts.js ${STATIC_DIR}/scripts/sentry.notifications.js ${STATIC_DIR}/scripts/sentry.stream.js > ${GLOBAL_JS};
diff --git a/src/sentry.less b/src/sentry.less
index 6a7b47b5f9..e817a9743a 100644
--- a/src/sentry.less
+++ b/src/sentry.less
@@ -578,8 +578,9 @@ footer {
         .opacity(50);
       }
     }
-
-    &.event-small, &.group-small {
+  }
+  &.small {
+    > li {
       min-height: 30px;
       padding: 10px 10px 10px 60px;
 
@@ -602,6 +603,10 @@ footer {
         .border-radius(36px);
       }
 
+      .actions {
+        display: none;
+      }
+
       .meta {
         right: 120px;
       }
diff --git a/src/sentry/static/sentry/coffee/app.coffee b/src/sentry/static/sentry/coffee/app.coffee
index 732e1d5982..79622dcff0 100644
--- a/src/sentry/static/sentry/coffee/app.coffee
+++ b/src/sentry/static/sentry/coffee/app.coffee
@@ -7,10 +7,123 @@ jQuery ->
         el: $('body')
 
         initialize: (data) ->
+            _.bindAll(@)
 
-            group_list = new app.GroupListView
+            @group_list = new app.OrderedElementsView
+                className: 'group-list'
                 id: 'event_list'
                 members: data.groups
+                maxItems: 50
+
+            @config =
+                realtime: data.realtime ? true
+
+            @cursor = null
+            @queue = new app.ScoredList
+            @poll();
+
+            window.setInterval(@tick, 300);
+
+        tick: ->
+            if !@queue.length
+                return
+
+            # ensure "no messages" is cleaned up
+            $('#no_messages').remove()
+
+            @group_list.addMember(@queue.pop())
+
+            # # shiny fx
+            # $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200);
+
+        getPollUrl: ->
+            app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/'
+
+        poll: ->
+            poll_url = @getPollUrl
+            if !@config.realtime
+                window.setTimeout(@poll, 1000);
+                return
+
+            data = app.utils.getQueryParams()
+            data.cursor = @cursor || undefined;
+
+            $.ajax
+                url: @getPollUrl()
+                type: 'get'
+                dataType: 'json'
+                data: data
+                success: (groups) =>
+                    if !groups.length
+                        setTimeout(@poll, 5000)
+                        return
+
+                    @cursor = groups[groups.length - 1].score || undefined
+
+                    for data in groups
+                        obj = @queue.get(data.id)
+                        if obj
+                            # TODO: this code is shared in updateMember above
+                            obj.set('count', data.count)
+                            obj.set('score', data.score)
+                            @queue.sort()
+                        else
+                            @queue.add(data)
+
+                    window.setTimeout(@poll, 1000)
+
+                error: =>
+                    # if an error happened lets give the server a bit of time before we poll again
+                    window.setTimeout(@poll, 10000)
+
+    app.DashboardView = class DashboardView extends Backbone.View
+        el: $('body')
+
+        getView: (id) ->
+            if !@views[id]
+                @views[id] = new app.OrderedElementsView
+                    className: 'group-list small'
+                    id: id
+                    maxItems: 5
+            return @views[id]
+
+
+        initialize: ->
+            _.bindAll(@)
+
+            @views = {}
+
+            Sentry.charts.render('#chart');
+
+            # load content for first tab and initialize
+            $('a[data-toggle=ajtab]').click (e) =>
+                $tab = $(e.target)
+                view_id = $tab.attr('href').substr(1)
+                uri = $tab.attr('data-uri')
+
+                if (!uri)
+                    return
+
+                view = @getView(view_id)
+                $cont = $(name)
+                $parent = $cont.parent()
+
+                $parent.css('opacity', .6)
+                e.preventDefault()
+
+                # load content for selected tab
+                $.ajax
+                    url: uri
+                    dataType: 'json'
+                    success: (data) =>
+                        for item in data
+                            view.addMember(data)
+                        $parent.css('opacity', 1)
+                        $tab.tab('show');
+                    # error: ->
+                    #     $cont.html('<p>{% trans "There was an error fetching data from the server." %}</p>');
+    
+            $('li.active a[data-toggle=ajtab]').click()
 
 
 # We're not talking to the server
diff --git a/src/sentry/static/sentry/coffee/utils.coffee b/src/sentry/static/sentry/coffee/utils.coffee
index f201388791..8036f02c51 100644
--- a/src/sentry/static/sentry/coffee/utils.coffee
+++ b/src/sentry/static/sentry/coffee/utils.coffee
@@ -13,7 +13,7 @@ jQuery ->
         for chunk in hashes
             hash = chunk.split('=')
             if !hash[0] && !hash[1]
-                return
+                continue
 
             vars[hash[0]] = if hash[1] then decodeURIComponent(hash[1]).replace(/\+/, ' ') else ''
 
diff --git a/src/sentry/static/sentry/coffee/views.coffee b/src/sentry/static/sentry/coffee/views.coffee
index 356e47f95c..794a5c8cd0 100644
--- a/src/sentry/static/sentry/coffee/views.coffee
+++ b/src/sentry/static/sentry/coffee/views.coffee
@@ -7,9 +7,16 @@ jQuery ->
 
             _.bindAll(@)
 
-            @$parent = $('#' + @id)
+            @$wrapper = $('#' + @id)
+            @$parent = $('<ul></ul>')
+            @$wrapper.html(@$parent)
 
-            @queue = new app.ScoredList
+            if data.className
+                @$parent.addClass(data.className)
+
+            # TODO: we can use bindAll to make this more sane
+            @config = 
+                maxItems: data.maxItems ? 50
 
             @collection = new app.ScoredList
             @collection.add(data.members || []);
@@ -19,11 +26,6 @@ jQuery ->
             @collection.on('reset', @reSortMembers)
             @collection.sort()
 
-            @realtimeEnabled = data.realtimeEnabled || true
-            @poll();
-            window.setInterval(@tick, 300);
-
-
         addMember: (member) ->
             if not @hasMember(member)
                 @collection.add(member)
@@ -42,7 +44,7 @@ jQuery ->
             @collection.sort()
 
         hasMember: (member) ->
-            if @collection.get(member.id) then true else false
+            @collection.get(member.id)?
 
         removeMember: (member) ->
             @collection.remove(member)
@@ -52,22 +54,31 @@ jQuery ->
 
             # create the element if it does not yet exist
             $el = $('#' + @id + member.id)
+
             if !$el.length
                 $el = @renderMember(member)
 
             # if the row was already present, ensure it moved
-            else if $el.index() == new_pos
+            else if $el.index() is new_pos
                 return
 
             # top item
-            if new_pos == 0
+            if new_pos is 0
                 @$parent.prepend($el)
             else
-                $rel = $('#' + @id + @collection.at(new_pos - 1))
+                # find existing item at new position
+                $rel = $('#' + @id + @collection.at(new_pos).id)
                 if !$rel.length
                     @$parent.append($el)
                 else
-                    @$parent.insertBefore($rel)
+                    $el.insertBefore($rel)
+
+            # $el.find('.sparkline').sparkline('html', {enableTagOptions: true})
+
+            # make sure we limit the number shown
+            while @collection.length > @config.maxItems
+                item = @collection.pop()
+
 
         renderMember: (member) ->
             view = new GroupView
@@ -80,63 +91,6 @@ jQuery ->
         unrenderMember: (member) ->
             $('#' + @id + member.id).remove()
 
-        tick: ->
-            if !@queue.length
-                return
-
-            # ensure "no messages" is cleaned up
-            $('#no_messages').remove();
-
-            @addMember(@queue.pop())
-
-            # $row.find('.sparkline').sparkline('html', {enableTagOptions: true});
-
-            # # shiny fx
-            # $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200);
-
-        getPollUrl: ->
-            app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/'
-
-        poll: ->
-            if (!@realtimeEnabled)
-                window.setTimeout(@poll, 1000);
-
-            data = app.utils.getQueryParams()
-            data.view_id = app.config.viewId || undefined;
-            data.cursor = @cursor || undefined;
-
-            $.ajax
-                url: @getPollUrl()
-                type: 'get'
-                dataType: 'json'
-                data: data
-                success: (groups) =>
-                    if !groups.length
-                        setTimeout(@poll, 5000)
-                        return
-
-                    @cursor = groups[groups.length - 1].score || undefined
-
-                    for data in groups
-                        obj = @queue.get(data.id)
-                        if obj
-                            # TODO: this code is shared in updateMember above
-                            obj.set('count', data.count)
-                            obj.set('score', data.score)
-                            @queue.sort()
-                        else
-                            @queue.add(data)
-
-                    window.setTimeout(@poll, 1000)
-
-                error: =>
-                    # if an error happened lets give the server a bit of time before we poll again
-                    window.setTimeout(@poll, 10000)
-
-            # make sure we limit the number shown
-            while @collection.length > 50
-                item = @collection.pop()
-
 
     app.GroupListView = class GroupListView extends OrderedElementsView
 
diff --git a/src/sentry/static/sentry/scripts/site.js b/src/sentry/static/sentry/scripts/site.js
index b9ebaff5a1..d71305761b 100644
--- a/src/sentry/static/sentry/scripts/site.js
+++ b/src/sentry/static/sentry/scripts/site.js
@@ -9,8 +9,8 @@
   app.config = app.config || {};
 
   jQuery(function() {
-    var StreamView;
-    return app.StreamView = StreamView = (function(_super) {
+    var DashboardView, StreamView;
+    app.StreamView = StreamView = (function(_super) {
 
       __extends(StreamView, _super);
 
@@ -21,16 +21,138 @@
       StreamView.prototype.el = $('body');
 
       StreamView.prototype.initialize = function(data) {
-        var group_list;
-        return group_list = new app.GroupListView({
+        var _ref;
+        _.bindAll(this);
+        this.group_list = new app.OrderedElementsView({
+          className: 'group-list',
           id: 'event_list',
-          members: data.groups
+          members: data.groups,
+          maxItems: 50
+        });
+        this.config = {
+          realtime: (_ref = data.realtime) != null ? _ref : true
+        };
+        this.cursor = null;
+        this.queue = new app.ScoredList;
+        this.poll();
+        return window.setInterval(this.tick, 300);
+      };
+
+      StreamView.prototype.tick = function() {
+        if (!this.queue.length) {
+          return;
+        }
+        $('#no_messages').remove();
+        return this.group_list.addMember(this.queue.pop());
+      };
+
+      StreamView.prototype.getPollUrl = function() {
+        return app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/';
+      };
+
+      StreamView.prototype.poll = function() {
+        var data, poll_url,
+          _this = this;
+        poll_url = this.getPollUrl;
+        if (!this.config.realtime) {
+          window.setTimeout(this.poll, 1000);
+          return;
+        }
+        data = app.utils.getQueryParams();
+        data.cursor = this.cursor || void 0;
+        return $.ajax({
+          url: this.getPollUrl(),
+          type: 'get',
+          dataType: 'json',
+          data: data,
+          success: function(groups) {
+            var obj, _i, _len;
+            if (!groups.length) {
+              setTimeout(_this.poll, 5000);
+              return;
+            }
+            _this.cursor = groups[groups.length - 1].score || void 0;
+            for (_i = 0, _len = groups.length; _i < _len; _i++) {
+              data = groups[_i];
+              obj = _this.queue.get(data.id);
+              if (obj) {
+                obj.set('count', data.count);
+                obj.set('score', data.score);
+                _this.queue.sort();
+              } else {
+                _this.queue.add(data);
+              }
+            }
+            return window.setTimeout(_this.poll, 1000);
+          },
+          error: function() {
+            return window.setTimeout(_this.poll, 10000);
+          }
         });
       };
 
       return StreamView;
 
     })(Backbone.View);
+    return app.DashboardView = DashboardView = (function(_super) {
+
+      __extends(DashboardView, _super);
+
+      function DashboardView() {
+        return DashboardView.__super__.constructor.apply(this, arguments);
+      }
+
+      DashboardView.prototype.el = $('body');
+
+      DashboardView.prototype.getView = function(id) {
+        if (!this.views[id]) {
+          this.views[id] = new app.OrderedElementsView({
+            className: 'group-list small',
+            id: id,
+            maxItems: 5
+          });
+        }
+        return this.views[id];
+      };
+
+      DashboardView.prototype.initialize = function() {
+        var _this = this;
+        _.bindAll(this);
+        this.views = {};
+        Sentry.charts.render('#chart');
+        $('a[data-toggle=ajtab]').click(function(e) {
+          var $cont, $parent, $tab, uri, view, view_id;
+          $tab = $(e.target);
+          view_id = $tab.attr('href').substr(1);
+          uri = $tab.attr('data-uri');
+          if (!uri) {
+            return;
+          }
+          view = _this.getView(view_id);
+          $cont = $(name);
+          $parent = $cont.parent();
+          $parent.css('opacity', .6);
+          e.preventDefault();
+          return $.ajax({
+            url: uri,
+            dataType: 'json',
+            success: function(data) {
+              var item, _i, _len;
+              for (_i = 0, _len = data.length; _i < _len; _i++) {
+                item = data[_i];
+                view.addMember(data);
+              }
+              $parent.css('opacity', 1);
+              return $tab.tab('show');
+            }
+          });
+        });
+        return $('li.active a[data-toggle=ajtab]').click();
+      };
+
+      return DashboardView;
+
+    })(Backbone.View);
   });
 
   Backbone.sync = function(method, model, success, error) {
@@ -145,7 +267,7 @@
         chunk = hashes[_i];
         hash = chunk.split('=');
         if (!hash[0] && !hash[1]) {
-          return;
+          continue;
         }
         vars[hash[0]] = hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '';
       }
@@ -194,18 +316,23 @@
       }
 
       OrderedElementsView.prototype.initialize = function(data) {
+        var _ref;
         _.bindAll(this);
-        this.$parent = $('#' + this.id);
-        this.queue = new app.ScoredList;
+        this.$wrapper = $('#' + this.id);
+        this.$parent = $('<ul></ul>');
+        this.$wrapper.html(this.$parent);
+        if (data.className) {
+          this.$parent.addClass(data.className);
+        }
+        this.config = {
+          maxItems: (_ref = data.maxItems) != null ? _ref : 50
+        };
         this.collection = new app.ScoredList;
         this.collection.add(data.members || []);
         this.collection.on('add', this.renderMemberInContainer);
         this.collection.on('remove', this.unrenderMember);
         this.collection.on('reset', this.reSortMembers);
-        this.collection.sort();
-        this.realtimeEnabled = data.realtimeEnabled || true;
-        this.poll();
-        return window.setInterval(this.tick, 300);
+        return this.collection.sort();
       };
 
       OrderedElementsView.prototype.addMember = function(member) {
@@ -232,11 +359,7 @@
       };
 
       OrderedElementsView.prototype.hasMember = function(member) {
-        if (this.collection.get(member.id)) {
-          return true;
-        } else {
-          return false;
-        }
+        return this.collection.get(member.id) != null;
       };
 
       OrderedElementsView.prototype.removeMember = function(member) {
@@ -244,7 +367,7 @@
       };
 
       OrderedElementsView.prototype.renderMemberInContainer = function(member) {
-        var $el, $rel, new_pos;
+        var $el, $rel, item, new_pos, _results;
         new_pos = this.collection.indexOf(member);
         $el = $('#' + this.id + member.id);
         if (!$el.length) {
@@ -253,15 +376,20 @@
           return;
         }
         if (new_pos === 0) {
-          return this.$parent.prepend($el);
+          this.$parent.prepend($el);
         } else {
-          $rel = $('#' + this.id + this.collection.at(new_pos - 1));
+          $rel = $('#' + this.id + this.collection.at(new_pos).id);
           if (!$rel.length) {
-            return this.$parent.append($el);
+            this.$parent.append($el);
           } else {
-            return this.$parent.insertBefore($rel);
+            $el.insertBefore($rel);
           }
         }
+        _results = [];
+        while (this.collection.length > this.config.maxItems) {
+          _results.push(item = this.collection.pop());
+        }
+        return _results;
       };
 
       OrderedElementsView.prototype.renderMember = function(member) {
@@ -278,63 +406,6 @@
         return $('#' + this.id + member.id).remove();
       };
 
-      OrderedElementsView.prototype.tick = function() {
-        if (!this.queue.length) {
-          return;
-        }
-        $('#no_messages').remove();
-        return this.addMember(this.queue.pop());
-      };
-
-      OrderedElementsView.prototype.getPollUrl = function() {
-        return app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/';
-      };
-
-      OrderedElementsView.prototype.poll = function() {
-        var data, item, _results,
-          _this = this;
-        if (!this.realtimeEnabled) {
-          window.setTimeout(this.poll, 1000);
-        }
-        data = app.utils.getQueryParams();
-        data.view_id = app.config.viewId || void 0;
-        data.cursor = this.cursor || void 0;
-        $.ajax({
-          url: this.getPollUrl(),
-          type: 'get',
-          dataType: 'json',
-          data: data,
-          success: function(groups) {
-            var obj, _i, _len;
-            if (!groups.length) {
-              setTimeout(_this.poll, 5000);
-              return;
-            }
-            _this.cursor = groups[groups.length - 1].score || void 0;
-            for (_i = 0, _len = groups.length; _i < _len; _i++) {
-              data = groups[_i];
-              obj = _this.queue.get(data.id);
-              if (obj) {
-                obj.set('count', data.count);
-                obj.set('score', data.score);
-                _this.queue.sort();
-              } else {
-                _this.queue.add(data);
-              }
-            }
-            return window.setTimeout(_this.poll, 1000);
-          },
-          error: function() {
-            return window.setTimeout(_this.poll, 10000);
-          }
-        });
-        _results = [];
-        while (this.collection.length > 50) {
-          _results.push(item = this.collection.pop());
-        }
-        return _results;
-      };
-
       return OrderedElementsView;
 
     })(Backbone.View);
diff --git a/src/sentry/static/sentry/styles/global.css b/src/sentry/static/sentry/styles/global.css
index 8bea6f36d0..c25c346a7d 100644
--- a/src/sentry/static/sentry/styles/global.css
+++ b/src/sentry/static/sentry/styles/global.css
@@ -6066,31 +6066,23 @@ footer a:hover {
   opacity: 0.5;
   filter: alpha(opacity=50);
 }
-.group-list > li.event-small,
-.events > li.event-small,
-.group-list > li.group-small,
-.events > li.group-small {
+.group-list.small > li,
+.events.small > li {
   min-height: 30px;
   padding: 10px 10px 10px 60px;
 }
-.group-list > li.event-small h3,
-.events > li.event-small h3,
-.group-list > li.group-small h3,
-.events > li.group-small h3 {
+.group-list.small > li h3,
+.events.small > li h3 {
   margin: 0;
   font-size: 14px;
   line-height: 16px;
 }
-.group-list > li.event-small .message,
-.events > li.event-small .message,
-.group-list > li.group-small .message,
-.events > li.group-small .message {
+.group-list.small > li .message,
+.events.small > li .message {
   font-size: 12px;
 }
-.group-list > li.event-small .count,
-.events > li.event-small .count,
-.group-list > li.group-small .count,
-.events > li.group-small .count {
+.group-list.small > li .count,
+.events.small > li .count {
   left: 10px;
   font-size: 12px;
   width: 36px;
@@ -6100,27 +6092,23 @@ footer a:hover {
   -moz-border-radius: 36px;
   border-radius: 36px;
 }
-.group-list > li.event-small .meta,
-.events > li.event-small .meta,
-.group-list > li.group-small .meta,
-.events > li.group-small .meta {
+.group-list.small > li .actions,
+.events.small > li .actions {
+  display: none;
+}
+.group-list.small > li .meta,
+.events.small > li .meta {
   right: 120px;
 }
-.group-list > li.event-small .sparkline,
-.events > li.event-small .sparkline,
-.group-list > li.group-small .sparkline,
-.events > li.group-small .sparkline {
+.group-list.small > li .sparkline,
+.events.small > li .sparkline {
   right: 10px;
   top: 18px;
 }
-.group-list > li.event-small .tag,
-.events > li.event-small .tag,
-.group-list > li.group-small .tag,
-.events > li.group-small .tag,
-.group-list > li.event-small .meta,
-.events > li.event-small .meta,
-.group-list > li.group-small .meta,
-.events > li.group-small .meta {
+.group-list.small > li .tag,
+.events.small > li .tag,
+.group-list.small > li .meta,
+.events.small > li .meta {
   font-size: 11px;
 }
 label {
diff --git a/src/sentry/static/sentry/styles/global.min.css b/src/sentry/static/sentry/styles/global.min.css
index 0c736c2714..9ac03bc0a0 100644
--- a/src/sentry/static/sentry/styles/global.min.css
+++ b/src/sentry/static/sentry/styles/global.min.css
@@ -956,12 +956,13 @@ footer a{color:#f4f4f4;font-weight:bold;}footer a:hover{color:#fff;}
 .group-list>li.level-fatal .count,.events>li.level-fatal .count{background:#f0431c;}
 .group-list>li.resolved h3,.events>li.resolved h3{text-decoration:line-through;}
 .group-list>li.resolved .count,.events>li.resolved .count{opacity:0.5;filter:alpha(opacity=50);}
-.group-list>li.event-small,.events>li.event-small,.group-list>li.group-small,.events>li.group-small{min-height:30px;padding:10px 10px 10px 60px;}.group-list>li.event-small h3,.events>li.event-small h3,.group-list>li.group-small h3,.events>li.group-small h3{margin:0;font-size:14px;line-height:16px;}
-.group-list>li.event-small .message,.events>li.event-small .message,.group-list>li.group-small .message,.events>li.group-small .message{font-size:12px;}
-.group-list>li.event-small .count,.events>li.event-small .count,.group-list>li.group-small .count,.events>li.group-small .count{left:10px;font-size:12px;width:36px;height:36px;line-height:38px;-webkit-border-radius:36px;-moz-border-radius:36px;border-radius:36px;}
-.group-list>li.event-small .meta,.events>li.event-small .meta,.group-list>li.group-small .meta,.events>li.group-small .meta{right:120px;}
-.group-list>li.event-small .sparkline,.events>li.event-small .sparkline,.group-list>li.group-small .sparkline,.events>li.group-small .sparkline{right:10px;top:18px;}
-.group-list>li.event-small .tag,.events>li.event-small .tag,.group-list>li.group-small .tag,.events>li.group-small .tag,.group-list>li.event-small .meta,.events>li.event-small .meta,.group-list>li.group-small .meta,.events>li.group-small .meta{font-size:11px;}
+.group-list.small>li,.events.small>li{min-height:30px;padding:10px 10px 10px 60px;}.group-list.small>li h3,.events.small>li h3{margin:0;font-size:14px;line-height:16px;}
+.group-list.small>li .message,.events.small>li .message{font-size:12px;}
+.group-list.small>li .count,.events.small>li .count{left:10px;font-size:12px;width:36px;height:36px;line-height:38px;-webkit-border-radius:36px;-moz-border-radius:36px;border-radius:36px;}
+.group-list.small>li .actions,.events.small>li .actions{display:none;}
+.group-list.small>li .meta,.events.small>li .meta{right:120px;}
+.group-list.small>li .sparkline,.events.small>li .sparkline{right:10px;top:18px;}
+.group-list.small>li .tag,.events.small>li .tag,.group-list.small>li .meta,.events.small>li .meta{font-size:11px;}
 label{font-weight:bold;}
 pre span,code span{display:inline-block;}
 code{border:0;background-color:inherit;color:#666666;}
diff --git a/src/sentry/templates/sentry/dashboard.html b/src/sentry/templates/sentry/dashboard.html
index 85191a126a..66120dfad9 100644
--- a/src/sentry/templates/sentry/dashboard.html
+++ b/src/sentry/templates/sentry/dashboard.html
@@ -80,53 +80,8 @@
 
 {% block content_after %}
     <script type="text/javascript">
-    $(document).ready(function() {
-        Sentry.charts.render('#chart');
-        //load content for first tab and initialize
-        $('a[data-toggle=ajtab]').each(function(){
-            var $el = $(this);
-
-            $el.bind('click', function(e) {
-                var $el = $(e.target);
-                var uri = $el.attr('data-uri');
-                if (!uri) {
-                    return;
-                }
-                var $tab = $(this);
-                var $cont = $($tab.attr('href'));
-                var $parent = $cont.parent();
-
-                $parent.css('opacity', .6)
-                e.preventDefault()
-
-                // load content for selected tab
-                $.ajax({
-                    url: uri,
-                    dataType: 'json',
-                    success: function(data){
-                        if (data.length) {
-                            var $ul = $('<ul class="events"></ul>');
-                            $.each(data, function(_, group){
-                                $ul.append($(group.html));
-                            });
-                            $cont.html($ul);
-                        } else {
-                            $cont.html('<p>{% trans "No unresolved events are listed in the time period selected." %}</p>');
-                        }
-                        $parent.css('opacity', 1)
-                        $tab.tab('show');
-                        $cont.find('.sparkline').sparkline('html', {enableTagOptions: true});
-                    },
-                    error: function(){
-                        $cont.html('<p>{% trans "There was an error fetching data from the server." %}</p>');
-                    }
-                });
-            });
-    
-            if ($el.parent().hasClass('active')) {
-                $el.click();
-            }
-        });
-    });
+    $(function(){
+        new app.DashboardView();
+    })
     </script>
 {% endblock %}
\ No newline at end of file
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index 07cede05c1..5a405ed6a0 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -8,16 +8,6 @@
 
 {% block meta %}
     {{ block.super }}
-    <script>
-    {% if has_realtime %}
-        app.config.hasRealtime = {{ hasRealtime|to_json|safe  }};
-        Sentry.realtime.config({
-            projectId: {{ project.slug|to_json|safe }},
-            viewId: {% if view %}{{ view.pk|to_json|safe }}{% else %}null{% endif %}
-        })
-        // Sentry.realtime.enable();
-    {% endif %}
-    </script>
 {% endblock %}
 
 {% block page_header %}
@@ -136,8 +126,7 @@
     </div>
 
     {% handle_before_events request event_list.paginator.objects %}
-    <ul class="group-list" id="event_list">
-    </ul>
+    <div id="event_list"></div>
 
     <div class="btn-toolbar">
         <div class="btn-group pull-right">
@@ -149,7 +138,8 @@
     <script>
     $(function(){
         new app.StreamView({
-            groups: {{ event_list.paginator.objects|to_json:request|safe }}
+            groups: {{ event_list.paginator.objects|to_json:request|safe }},
+            realtime: {{ has_realtime|to_json|safe }}
         });
     });
     </script>
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 0c56b12691..9d34746d22 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -431,9 +431,9 @@ def get_group_trends(request, project=None):
     for group in group_list:
         group._project_cache = project_dict.get(group.project_id)
 
-    data = transform_groups(request, group_list, template='sentry/partial/_group_small.html')
+    data = to_json(group_list, request)
 
-    response = HttpResponse(json.dumps(data))
+    response = HttpResponse(data)
     response['Content-Type'] = 'application/json'
 
     return response
@@ -454,18 +454,18 @@ def get_new_groups(request, project=None):
     cutoff = datetime.timedelta(minutes=minutes)
     cutoff_dt = timezone.now() - cutoff
 
-    group_list = Group.objects.filter(
+    group_list = list(Group.objects.filter(
         project__in=project_dict.keys(),
         status=0,
         active_at__gte=cutoff_dt,
-    ).order_by('-score')[:limit]
+    ).order_by('-score')[:limit])
 
     for group in group_list:
         group._project_cache = project_dict.get(group.project_id)
 
-    data = transform_groups(request, group_list, template='sentry/partial/_group_small.html')
+    data = to_json(group_list, request)
 
-    response = HttpResponse(json.dumps(data))
+    response = HttpResponse(data)
     response['Content-Type'] = 'application/json'
 
     return response
