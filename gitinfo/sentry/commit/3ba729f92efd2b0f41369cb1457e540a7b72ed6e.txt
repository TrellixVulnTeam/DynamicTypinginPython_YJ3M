commit 3ba729f92efd2b0f41369cb1457e540a7b72ed6e
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Apr 12 11:53:20 2018 -0700

    ref(releases): Remove ensure_release_exists signal post-save receiver (#7963)

diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 1179c9ac76..284cebe935 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -4,47 +4,11 @@ from django.db import IntegrityError, transaction
 from django.db.models.signals import post_save
 
 from sentry.models import (
-    Activity, Commit, GroupAssignee, GroupLink, Project, Release, PullRequest
+    Activity, Commit, GroupAssignee, GroupLink, Release, PullRequest
 )
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
 
 
-def ensure_release_exists(instance, created, **kwargs):
-    if not created:
-        return
-
-    if instance.key != 'sentry:release':
-        return
-
-    if instance.data and instance.data.get('release_id'):
-        return
-
-    project = Project.objects.get_from_cache(id=instance.project_id)
-
-    release, created = Release.objects.get_or_create(
-        organization_id=project.organization_id,
-        version=instance.value,
-        defaults={
-            'date_added': instance.first_seen,
-        },
-    )
-
-    if created:
-        type(instance).objects.filter(
-            id=instance.id,
-            project_id=instance.project_id,
-        ).update(data={
-            'release_id': release.id,
-        })
-    elif release.date_added > instance.first_seen:
-        Release.objects.filter(
-            id=release.id,
-            date_added__gt=instance.first_seen,
-        ).update(date_added=instance.first_seen)
-
-    release.add_project(project)
-
-
 def resolve_group_resolutions(instance, created, **kwargs):
     if not created:
         return
diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 3c50e7bbfb..a5770f3fe2 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -93,14 +93,6 @@ class TagStorage(Service):
             grouptagkey_model,
         ]
 
-    def setup_receivers(self, tagvalue_model, grouptagvalue_model):
-        from django.db.models.signals import post_save
-        from sentry.receivers.releases import ensure_release_exists
-
-        post_save.connect(
-            ensure_release_exists, sender=tagvalue_model, dispatch_uid="ensure_release_exists", weak=False
-        )
-
     def is_valid_key(self, key):
         return bool(TAG_KEY_RE.match(key))
 
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 172bfb4493..5fa9f9ab1c 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -43,10 +43,7 @@ class LegacyTagStorage(TagStorage):
             grouptagvalue_model=GroupTagValue,
         )
 
-        self.setup_receivers(
-            tagvalue_model=TagValue,
-            grouptagvalue_model=GroupTagValue,
-        )
+        self.setup_receivers()
 
     def setup_cleanup(self):
         from sentry.runner.commands import cleanup
@@ -122,9 +119,7 @@ class LegacyTagStorage(TagStorage):
 
         deletion_manager.register(TagKey, TagKeyDeletionTask)
 
-    def setup_receivers(self, **kwargs):
-        super(LegacyTagStorage, self).setup_receivers(**kwargs)
-
+    def setup_receivers(self):
         from sentry.signals import buffer_incr_complete
 
         # Legacy tag write flow:
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 068d9d7a06..0e6fea2c63 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -52,10 +52,7 @@ class V2TagStorage(TagStorage):
             grouptagvalue_model=GroupTagValue,
         )
 
-        self.setup_receivers(
-            tagvalue_model=TagValue,
-            grouptagvalue_model=GroupTagValue,
-        )
+        self.setup_receivers()
 
     def setup_cleanup(self):
         # TODO: fix for sharded DB
@@ -146,9 +143,7 @@ class V2TagStorage(TagStorage):
 
         deletion_manager.register(TagKey, TagKeyDeletionTask)
 
-    def setup_receivers(self, **kwargs):
-        super(V2TagStorage, self).setup_receivers(**kwargs)
-
+    def setup_receivers(self):
         from django.db.models.signals import post_save
 
         def record_project_tag_count(instance, created, **kwargs):
diff --git a/tests/sentry/receivers/test_releases.py b/tests/sentry/receivers/test_releases.py
index fec6da79b6..4c270eab44 100644
--- a/tests/sentry/receivers/test_releases.py
+++ b/tests/sentry/receivers/test_releases.py
@@ -1,13 +1,10 @@
 from __future__ import absolute_import
 
-import pytz
 import six
-from datetime import datetime
 from hashlib import sha1
 from mock import patch
 from uuid import uuid4
 
-from sentry import tagstore
 from sentry.models import (
     Activity, Commit, CommitAuthor, GroupAssignee, GroupLink, OrganizationMember,
     Release, Repository, UserEmail
@@ -15,53 +12,6 @@ from sentry.models import (
 from sentry.testutils import TestCase
 
 
-class EnsureReleaseExistsTest(TestCase):
-    def test_simple(self):
-        tv = tagstore.create_tag_value(
-            project_id=self.project.id,
-            environment_id=self.environment.id,
-            key='sentry:release',
-            value='1.0',
-            first_seen=datetime(2018, 2, 1, tzinfo=pytz.utc),
-        )
-
-        tv = tagstore.get_tag_value(self.project.id, self.environment.id, 'sentry:release', '1.0')
-        assert tv.data['release_id']
-
-        release = Release.objects.get(id=tv.data['release_id'])
-        assert release.version == tv.value
-        assert release.projects.first() == self.project
-        assert release.organization == self.project.organization
-        assert release.date_added == tv.first_seen
-
-        # ensure we dont hit some kind of error saving it again
-        tv.save()
-
-        tv2 = tagstore.create_tag_value(
-            project_id=self.create_project(
-                organization=self.project.organization,
-            ).id,
-            environment_id=self.environment.id,
-            key='sentry:release',
-            value='1.0',
-            first_seen=datetime(2018, 1, 1, tzinfo=pytz.utc),
-        )
-
-        assert Release.objects.get(id=release.id).date_added == tv2.first_seen
-
-        tagstore.create_tag_value(
-            project_id=self.create_project(
-                organization=self.project.organization,
-            ).id,
-            environment_id=self.environment.id,
-            key='sentry:release',
-            value='1.0',
-            first_seen=datetime(2018, 3, 1, tzinfo=pytz.utc),
-        )
-
-        assert Release.objects.get(id=release.id).date_added == tv2.first_seen
-
-
 class ResolveGroupResolutionsTest(TestCase):
     @patch('sentry.tasks.clear_expired_resolutions.clear_expired_resolutions.delay')
     def test_simple(self, mock_delay):
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index eac72617cf..cad3970554 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -272,6 +272,12 @@ class UnmergeTestCase(TestCase):
                 comments='Quack',
             )
 
+            Release.get_or_create(
+                project=project,
+                version=event.get_tag('sentry:release'),
+                date_added=event.datetime,
+            )
+
             features.record([event])
 
             return event
