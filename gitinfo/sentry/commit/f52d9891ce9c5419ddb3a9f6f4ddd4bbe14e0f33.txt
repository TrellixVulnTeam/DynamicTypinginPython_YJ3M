commit f52d9891ce9c5419ddb3a9f6f4ddd4bbe14e0f33
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 4 14:39:46 2010 -0700

    Add USE_LOGGING setting which will disable direct error creation in the middleware, and send it to the the dblog logger instead

diff --git a/README.rst b/README.rst
index 0861756dd5..e226913b38 100644
--- a/README.rst
+++ b/README.rst
@@ -26,7 +26,7 @@ Review the diff, then make any changes which appear necessary.
 Notable Changes
 ###############
 
-* 2.0 Added `checksum` column to Error. Several indexes were created. Checksum calculation slightly changed.
+* 2.0.0 Added `checksum` column to Error. Several indexes were created. Checksum calculation slightly changed.
 * 1.4.0 Added `logger` column to both Error and ErrorBatch. `traceback` and `class_name` are now nullable.
 * 1.3.0 Added `level` column to both Error and ErrorBatch.
 
@@ -111,6 +111,14 @@ Enables showing full embedded (enhanced) tracebacks within the administration fo
 
 * Note: Even if you disable displaying of enhanced tracebacks, dblog will still store the entire exception stacktrace.
 
+#############
+DBLOG_LOGGING
+#############
+
+Enabling this setting will turn off automatic database logging with the middleware, and instead send all exceptions to the named logger ``dblog``. Use this in conjuction with ``djangodblog.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
+
+A good example use case for this, is if you want to write to something like a syslog ahead of time, and later process that into the database with another tool.
+
 ############################
 Integration with ``logging``
 ############################
diff --git a/djangodblog/manager.py b/djangodblog/manager.py
index 7104f2411e..d11c688434 100644
--- a/djangodblog/manager.py
+++ b/djangodblog/manager.py
@@ -31,8 +31,8 @@ class DBLogManager(models.Manager):
 
     def get_query_set(self):
         qs = super(DBLogManager, self).get_query_set()
-        if DBLOG_DATABASE_USING:
-            qs = qs.using(DBLOG_DATABASE_USING)
+        if DATABASE_USING:
+            qs = qs.using(DATABASE_USING)
         return qs
 
     def _create(self, **defaults):
diff --git a/djangodblog/middleware.py b/djangodblog/middleware.py
index a28004a926..e28d8a3310 100644
--- a/djangodblog/middleware.py
+++ b/djangodblog/middleware.py
@@ -4,6 +4,8 @@ from django.http import Http404
 from djangodblog.models import Error
 from djangodblog.settings import *
 
+import logging
+
 __all__ = ('DBLogMiddleware',)
 
 class DBLogMiddleware(object):
@@ -19,9 +21,16 @@ class DBLogMiddleware(object):
         if transaction.is_dirty():
             transaction.rollback()
 
-        Error.objects.create_from_exception(url=request.build_absolute_uri(), data=dict(
-            META=request.META,
-            POST=request.POST,
-            GET=request.GET,
-            COOKIES=request.COOKIES,
-        ))
\ No newline at end of file
+        extra = dict(
+            url=request.build_absolute_uri(), data=dict(
+                META=request.META,
+                POST=request.POST,
+                GET=request.GET,
+                COOKIES=request.COOKIES,
+            )
+        )
+
+        if USE_LOGGING:
+            logging.getLogger('dblog').exception(exception, extra=extra)
+        else:
+            Error.objects.create_from_exception(**extra)        
diff --git a/djangodblog/settings.py b/djangodblog/settings.py
index 870188c0b7..176b98c6dc 100644
--- a/djangodblog/settings.py
+++ b/djangodblog/settings.py
@@ -4,4 +4,6 @@ CATCH_404_ERRORS = getattr(settings, 'DBLOG_CATCH_404_ERRORS', False)
 
 ENHANCED_TRACEBACKS = getattr(settings, 'DBLOG_ENHANCED_TRACEBACKS', True)
 
-DATABASE_USING = getattr(settings, 'DBLOG_DATABASE_USING', None)
\ No newline at end of file
+DATABASE_USING = getattr(settings, 'DBLOG_DATABASE_USING', None)
+
+USE_LOGGING = getattr(settings, 'DBLOG_USE_LOGGING', False)
\ No newline at end of file
