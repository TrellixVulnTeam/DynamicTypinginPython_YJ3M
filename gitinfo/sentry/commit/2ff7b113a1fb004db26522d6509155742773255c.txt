commit 2ff7b113a1fb004db26522d6509155742773255c
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 10 16:47:58 2016 -0700

    Initial pass at new stacktrace rendering
    
    - New cell-based stack rendering
    - Add PHP specific rendering
    - Remove legacy CSS
    - Left-truncate filenames (expand on hover)
    - Move message above exception
    - Add clipping to stack locals
    - Prevent propagation of clicks on ClippedBox
    - Dont collapse context on click (require header click)
    
    @getsentry/ui

diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index fc2f09569f..551e403bc2 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -35,7 +35,7 @@ class Message(Interface):
     >>> }
     """
     score = 0
-    display_score = 1050
+    display_score = 2050
 
     @classmethod
     def to_python(cls, data):
diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
index 41fc870045..f282667c89 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.jsx
@@ -35,7 +35,9 @@ const ClippedBox = React.createClass({
     }
   },
 
-  reveal() {
+  reveal(e) {
+    e.stopPropagation();
+
     this.setState({
       clipped: false
     });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index b2b9dbc051..218869da60 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,13 +1,16 @@
 import React from 'react';
 import _ from 'underscore';
 import classNames from 'classnames';
-import {defined, objectIsEmpty, isUrl} from '../../../utils';
 
+import ClippedBox from '../../../components/clippedBox';
 import TooltipMixin from '../../../mixins/tooltip';
-import FrameVariables from './frameVariables';
-import ContextLine from './contextLine';
 import StrictClick from '../../strictClick';
+import Truncate from '../../../components/truncate';
 import {t} from '../../../locale';
+import {defined, objectIsEmpty, isUrl} from '../../../utils';
+
+import ContextLine from './contextLine';
+import FrameVariables from './frameVariables';
 
 function trimPackage(pkg) {
   let pieces = pkg.split(/\//g);
@@ -33,17 +36,27 @@ const Frame = React.createClass({
     })
   ],
 
+  getDefaultProps() {
+    return {
+      isExpanded: false
+    };
+  },
+
   getInitialState() {
     // isExpanded can be initialized to true via parent component;
     // data synchronization is not important
     // https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html
     return {
-      isExpanded: defined(this.props.isExpanded) ? this.props.isExpanded : false
+      isExpanded: this.props.isExpanded
     };
   },
 
   toggleContext(evt) {
     evt && evt.preventDefault();
+    if (!this.isExpandable()) {
+      return null;
+    }
+
     this.setState({
       isExpanded: !this.state.isExpanded
     });
@@ -53,19 +66,14 @@ const Frame = React.createClass({
     return defined(this.props.data.context) && this.props.data.context.length;
   },
 
-  hasExtendedSource() {
-    return this.hasContextSource() && this.props.data.context.length > 1;
-  },
-
   hasContextVars() {
     return !objectIsEmpty(this.props.data.vars);
   },
 
   isExpandable() {
-    return this.hasExtendedSource() || this.hasContextVars();
+    return this.hasContextSource() || this.hasContextVars();
   },
 
-
   renderOriginalSourceInfo() {
     let data = this.props.data;
 
@@ -94,7 +102,11 @@ const Frame = React.createClass({
     // lazy to change this up right now.  This should be a format string
 
     if (defined(data.filename || data.module)) {
-      title.push(<code key="filename">{data.filename || data.module}</code>);
+      title.push((
+        <code key="filename" className="filename">
+          <Truncate value={data.filename || data.module} maxLength={100} leftTrim={true} />
+        </code>
+      ));
       if (isUrl(data.absPath)) {
         title.push(<a href={data.absPath} className="icon-open" key="share" target="_blank" />);
       }
@@ -104,26 +116,26 @@ const Frame = React.createClass({
     }
 
     if (defined(data.function)) {
-      title.push(<code key="function">{data.function}</code>);
+      title.push(<code key="function" className="function">{data.function}</code>);
     }
 
     // we don't want to render out zero line numbers which are used to
     // indicate lack of source information for native setups.  We could
     // TODO(mitsuhiko): only do this for events from native platforms?
-    if (defined(data.lineNo) && data.lineNo != 0) {
+    else if (defined(data.lineNo) && data.lineNo != 0) {
       // TODO(dcramer): we need to implement source mappings
       // title.push(<span className="pull-right blame"><a><span className="icon-mark-github"></span> View Code</a></span>);
       title.push(<span className="in-at" key="at"> {t('at line')} </span>);
       if (defined(data.colNo)) {
-        title.push(<code key="line">{data.lineNo}:{data.colNo}</code>);
+        title.push(<code key="line" className="lineno">{data.lineNo}:{data.colNo}</code>);
       } else {
-        title.push(<code key="line">{data.lineNo}</code>);
+        title.push(<code key="line" className="lineno">{data.lineNo}</code>);
       }
     }
 
     if (defined(data.package)) {
       title.push(<span className="within" key="within"> {t('within')} </span>);
-      title.push(<code title={data.package}>{trimPackage(data.package)}</code>);
+      title.push(<code title={data.package} className="package">{trimPackage(data.package)}</code>);
     }
 
     if (defined(data.origAbsPath)) {
@@ -134,35 +146,9 @@ const Frame = React.createClass({
       );
     }
 
-    if (data.inApp) {
-      title.push(<span key="in-app"><span className="divider"/>{t('application')}</span>);
-    }
     return title;
   },
 
-  renderContextLine(line, activeLineNo) {
-    let liClassName = 'expandable';
-    if (line[0] === activeLineNo) {
-      liClassName += ' active';
-    }
-
-    let lineWs;
-    let lineCode;
-    if (defined(line[1]) && line[1].match) {
-      [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
-    } else {
-      lineWs = '';
-      lineCode = '';
-    }
-    return (
-      <li className={liClassName} key={line[0]}>
-        <span className="ws">{
-        lineWs}</span><span className="contextline">{lineCode
-        }</span>
-      </li>
-    );
-  },
-
   renderContext() {
     let data = this.props.data;
     let context = '';
@@ -192,11 +178,11 @@ const Frame = React.createClass({
             }
 
             {data.context && contextLines.map((line, index) => {
-              return <ContextLine key={index} line={line} isActive={data.lineNo === line[0]}/>;
+              return <ContextLine key={index} line={line} isActive={data.lineNo === line[0]} />;
             })}
 
             {hasContextVars &&
-              <FrameVariables data={data.vars} key="vars" />
+              <ClippedBox clipHeight={100}><FrameVariables data={data.vars} key="vars" /></ClippedBox>
             }
           </ol>
         </StrictClick>
@@ -221,7 +207,7 @@ const Frame = React.createClass({
 
   renderDefaultLine() {
     return (
-      <p>
+      <p onClick={this.toggleContext}>
         {this.renderDefaultTitle()}
         {this.renderExpander()}
       </p>
@@ -273,6 +259,8 @@ const Frame = React.createClass({
 
     let className = classNames({
       'frame': true,
+      'is-expandable': this.isExpandable(),
+      'expanded': this.state.isExpanded,
       'system-frame': !data.inApp,
       'frame-errors': data.errors,
       'leads-to-app': !data.inApp && this.props.nextFrameInApp
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/oldFrame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/oldFrame.jsx
new file mode 100644
index 0000000000..934708ae75
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/oldFrame.jsx
@@ -0,0 +1,295 @@
+import React from 'react';
+import _ from 'underscore';
+import classNames from 'classnames';
+import PureRenderMixin from 'react-addons-pure-render-mixin';
+import {defined, objectIsEmpty, isUrl} from '../../../utils';
+
+import StrictClick from '../../strictClick';
+import TooltipMixin from '../../../mixins/tooltip';
+import FrameVariables from './frameVariables';
+import ContextLine from './contextLine';
+import {t} from '../../../locale';
+
+
+function trimPackage(pkg) {
+  let pieces = pkg.split(/\//g);
+  let rv = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
+  let match = rv.match(/^(.*?)\.(dylib|so|a)$/);
+  return match && match[1] || rv;
+}
+
+
+const OldFrame = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+    nextFrameInApp: React.PropTypes.bool,
+    platform: React.PropTypes.string,
+    isExpanded: React.PropTypes.bool,
+  },
+
+  mixins: [
+    TooltipMixin({
+      html: true,
+      selector: '.tip',
+      trigger: 'hover'
+    })
+  ],
+
+  getInitialState() {
+    // isExpanded can be initialized to true via parent component;
+    // data synchronization is not important
+    // https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html
+    return {
+      isExpanded: defined(this.props.isExpanded) ? this.props.isExpanded : false
+    };
+  },
+
+  toggleContext(evt) {
+    evt && evt.preventDefault();
+    this.setState({
+      isExpanded: !this.state.isExpanded
+    });
+  },
+
+  hasContextSource() {
+    return defined(this.props.data.context) && this.props.data.context.length;
+  },
+
+  hasExtendedSource() {
+    return this.hasContextSource() && this.props.data.context.length > 1;
+  },
+
+  hasContextVars() {
+    return !objectIsEmpty(this.props.data.vars);
+  },
+
+  isExpandable() {
+    return this.hasExtendedSource() || this.hasContextVars();
+  },
+
+
+  renderOriginalSourceInfo() {
+    let data = this.props.data;
+
+    let sourceMapText = t('Source Map');
+
+    let out = `
+    <div>
+      <strong>${sourceMapText}</strong><br/>`;
+
+    // mapUrl not always present; e.g. uploaded source maps
+    if (data.mapUrl)
+      out += `${_.escape(data.mapUrl)}<br/>`;
+    else
+      out += `${_.escape(data.map)}<br/>`;
+
+    out += '</div>';
+
+    return out;
+  },
+
+  renderDefaultTitle() {
+    let data = this.props.data;
+    let title = [];
+
+    // TODO(mitsuhiko): this is terrible for translators but i'm too
+    // lazy to change this up right now.  This should be a format string
+
+    if (defined(data.filename || data.module)) {
+      title.push(<code key="filename">{data.filename || data.module}</code>);
+      if (isUrl(data.absPath)) {
+        title.push(<a href={data.absPath} className="icon-open" key="share" target="_blank" />);
+      }
+      if (defined(data.function)) {
+        title.push(<span className="in-at" key="in"> {t('in')} </span>);
+      }
+    }
+
+    if (defined(data.function)) {
+      title.push(<code key="function">{data.function}</code>);
+    }
+
+    // we don't want to render out zero line numbers which are used to
+    // indicate lack of source information for native setups.  We could
+    // TODO(mitsuhiko): only do this for events from native platforms?
+    if (defined(data.lineNo) && data.lineNo != 0) {
+      // TODO(dcramer): we need to implement source mappings
+      // title.push(<span className="pull-right blame"><a><span className="icon-mark-github"></span> View Code</a></span>);
+      title.push(<span className="in-at" key="at"> {t('at line')} </span>);
+      if (defined(data.colNo)) {
+        title.push(<code key="line">{data.lineNo}:{data.colNo}</code>);
+      } else {
+        title.push(<code key="line">{data.lineNo}</code>);
+      }
+    }
+
+    if (defined(data.package)) {
+      title.push(<span className="within" key="within"> {t('within')} </span>);
+      title.push(<code title={data.package}>{trimPackage(data.package)}</code>);
+    }
+
+    if (defined(data.origAbsPath)) {
+      title.push(
+        <a key="original-src" className="in-at tip original-src" data-title={this.renderOriginalSourceInfo()}>
+          <span className="icon-question" />
+        </a>
+      );
+    }
+
+    if (data.inApp) {
+      title.push(<span key="in-app"><span className="divider"/>{t('application')}</span>);
+    }
+    return title;
+  },
+
+  renderContextLine(line, activeLineNo) {
+    let liClassName = 'expandable';
+    if (line[0] === activeLineNo) {
+      liClassName += ' active';
+    }
+
+    let lineWs;
+    let lineCode;
+    if (defined(line[1]) && line[1].match) {
+      [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
+    } else {
+      lineWs = '';
+      lineCode = '';
+    }
+    return (
+      <li className={liClassName} key={line[0]}>
+        <span className="ws">{
+        lineWs}</span><span className="contextline">{lineCode
+        }</span>
+      </li>
+    );
+  },
+
+  renderContext() {
+    let data = this.props.data;
+    let context = '';
+    let {isExpanded} = this.state;
+
+    let outerClassName = 'context';
+    if (isExpanded) {
+      outerClassName += ' expanded';
+    }
+
+    let hasContextSource = this.hasContextSource();
+    let hasContextVars = this.hasContextVars();
+    let expandable = this.isExpandable();
+
+    let contextLines = isExpanded
+      ? data.context
+      : data.context && data.context.filter(l => l[0] === data.lineNo);
+
+    if (hasContextSource || hasContextVars) {
+      let startLineNo = hasContextSource ? data.context[0][0] : '';
+      context = (
+        <StrictClick onClick={expandable ? this.toggleContext : null}>
+          <ol start={startLineNo} className={outerClassName}>
+            {defined(data.errors) &&
+            <li className={expandable ? 'expandable error' : 'error'}
+                key="errors">{data.errors.join(', ')}</li>
+            }
+
+            {data.context && contextLines.map((line, index) => {
+              return <ContextLine key={index} line={line} isActive={data.lineNo === line[0]}/>;
+            })}
+
+            {hasContextVars &&
+              <FrameVariables data={data.vars} key="vars" />
+            }
+          </ol>
+        </StrictClick>
+      );
+    }
+    return context;
+  },
+
+  renderExpander() {
+    if (!this.isExpandable()) {
+      return null;
+    }
+    return (
+      <a
+        title={t('Toggle context')}
+        onClick={this.toggleContext}
+        className="btn btn-sm btn-default btn-toggle">
+        <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'}/>
+      </a>
+    );
+  },
+
+  renderDefaultLine() {
+    return (
+      <p>
+        {this.renderDefaultTitle()}
+        {this.renderExpander()}
+      </p>
+    );
+  },
+
+  renderCocoaLine() {
+    let data = this.props.data;
+    let className = 'stacktrace-table';
+    return (
+      <div className={className}>
+        {defined(data.package)
+          ? (
+            <div className="trace-col package" title={data.package}>
+              {trimPackage(data.package)}
+            </div>
+          ) : (
+            <div className="trace-col package"/>
+          )
+        }
+        <div className="trace-col address">
+          {data.instructionAddr}
+        </div>
+        <div className="trace-col symbol">
+          <code>{data.function || '<unknown>'}</code>
+          {data.instructionOffset &&
+            <span className="offset">{' + ' + data.instructionOffset}</span>}
+          {data.filename &&
+            <span className="filename">{data.filename}
+              {data.lineNo ? ':' + data.lineNo : ''}</span>}
+          {this.renderExpander()}
+        </div>
+      </div>
+    );
+  },
+
+  renderLine() {
+    switch (this.props.platform) {
+      case 'objc':
+      case 'cocoa':
+        return this.renderCocoaLine();
+      default:
+        return this.renderDefaultLine();
+    }
+  },
+
+  render() {
+    let data = this.props.data;
+
+    let className = classNames({
+      'frame': true,
+      'system-frame': !data.inApp,
+      'frame-errors': data.errors,
+      'leads-to-app': !data.inApp && this.props.nextFrameInApp
+    });
+    let props = {className: className};
+
+    let context = this.renderContext();
+
+    return (
+      <li {...props}>
+        {this.renderLine()}
+        {context}
+      </li>
+    );
+  }
+});
+
+export default OldFrame;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index 0c51c2488c..9ac806b2ff 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -43,6 +43,11 @@ function getRubyFrame(frame) {
   return result;
 }
 
+export function getPHPFrame(frame, idx) {
+  let funcName = (frame.function === 'null' ? '{main}' : frame.function);
+  return `#${idx} ${frame.filename || frame.module}(${frame.lineNo}): ${funcName}`;
+}
+
 export function getPythonFrame(frame) {
   let result = '';
   if (defined(frame.filename)) {
@@ -132,21 +137,23 @@ function getPreamble(exception, platform) {
   }
 }
 
-function getFrame(frame, platform) {
+function getFrame(frame, frameIdx, platform) {
   switch (platform) {
     case 'javascript':
-      return getJavaScriptFrame(frame);
+      return getJavaScriptFrame(frame, frameIdx);
     case 'ruby':
-      return getRubyFrame(frame);
+      return getRubyFrame(frame, frameIdx);
+    case 'php':
+      return getPHPFrame(frame, frameIdx);
     case 'python':
-      return getPythonFrame(frame);
+      return getPythonFrame(frame, frameIdx);
     case 'java':
-      return getJavaFrame(frame);
+      return getJavaFrame(frame, frameIdx);
     case 'objc':
     case 'cocoa':
-      return getCocoaFrame(frame);
+      return getCocoaFrame(frame, frameIdx);
     default:
-      return getPythonFrame(frame);
+      return getPythonFrame(frame, frameIdx);
   }
 }
 
@@ -163,7 +170,7 @@ export default function render (data, platform, exception) {
   }
 
   data.frames.forEach((frame, frameIdx) => {
-    frames.push(getFrame(frame, platform));
+    frames.push(getFrame(frame, frameIdx, platform));
     if (frameIdx === firstFrameOmitted) {
       frames.push((
         '.. frames ' + firstFrameOmitted + ' until ' + lastFrameOmitted + ' were omitted and not available ..'
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 4083f3f763..daf0a03344 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -51,6 +51,14 @@ const StacktraceContent = React.createClass({
       lastFrameOmitted = null;
     }
 
+    let lastFrameIdx = null;
+    data.frames.forEach((frame, frameIdx) => {
+      if (frame.inApp) lastFrameIdx = frameIdx;
+    });
+    if (lastFrameIdx === null) {
+      lastFrameIdx = data.frames.length - 1;
+    }
+
     let frames = [];
     data.frames.forEach((frame, frameIdx) => {
       let nextFrame = data.frames[frameIdx + 1];
@@ -59,6 +67,7 @@ const StacktraceContent = React.createClass({
           <Frame
             key={frameIdx}
             data={frame}
+            isExpanded={lastFrameIdx === frameIdx}
             nextFrameInApp={nextFrame && nextFrame.inApp}
             platform={this.props.platform} />
         );
diff --git a/src/sentry/static/sentry/app/components/truncate.jsx b/src/sentry/static/sentry/app/components/truncate.jsx
new file mode 100644
index 0000000000..47922b4643
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/truncate.jsx
@@ -0,0 +1,71 @@
+import React from 'react';
+
+const Truncate = React.createClass({
+  propTypes: {
+    value: React.PropTypes.string.isRequired,
+    leftTrim: React.PropTypes.bool,
+    maxLength: React.PropTypes.number,
+  },
+
+  getDefaultProps() {
+    return {
+      leftTrim: false,
+      maxLength: 50,
+    };
+  },
+
+  getInitialState() {
+    return {
+      isExpanded: false,
+    };
+  },
+
+  onFocus(e) {
+    let {value, maxLength} = this.props;
+    if (value.length <= maxLength) return;
+    this.setState({isExpanded: true});
+  },
+
+  onBlur(e) {
+    if (this.state.isExpanded)
+      this.setState({isExpanded: false});
+  },
+
+  render() {
+    let {leftTrim, maxLength, value} = this.props;
+    let isTruncated = (value.length > maxLength);
+    let shortValue = '';
+
+    if (isTruncated) {
+      if (leftTrim) {
+        shortValue = <span>&hellip; {value.slice(value.length - (maxLength - 4), value.length)}</span>;
+      } else {
+        shortValue = <span>{value.slice(0, maxLength - 4)} &hellip;</span>;
+      }
+    } else {
+      shortValue = value;
+    }
+
+    let className = this.props.className || '';
+    className += ' truncated';
+    if (this.state.isExpanded)
+      className += ' expanded';
+
+    return (
+      <span
+        className={className}
+        onMouseOver={this.onFocus}
+        onMouseOut={this.onBlur}
+        onFocus={this.onFocus}
+        onBlur={this.onBlur}>
+        <span className="short-value">{shortValue}</span>
+        {isTruncated &&
+          <span className="full-value">{value}</span>
+        }
+      </span>
+    );
+  }
+});
+
+export default Truncate;
+
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 49e9858623..c208a58d81 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -831,51 +831,19 @@
 .traceback {
   list-style-type: none;
   padding-left: 0;
+  margin: 0 -20px;
 }
 
-.traceback > h3 {
-  margin-top: 0;
-  font-weight: normal;
-
-  span {
-    font-weight: 600;
-  }
-}
-
-.traceback > pre {
-  color: @gray-dark;
-  font-size: 12px;
-  padding: 0;
-  background: inherit;
-  margin: -10px 0 20px;
+// TODO(dcramer): we probably shouldnt overload these
+pre.traceback {
+  margin: 0 0 20px;
 }
 
-.traceback ul {
+div.traceback > ul {
   padding: 0;
-}
 
-.traceback > .traceback {
-  padding-bottom: 5px;
-}
-
-.subtraceback {
-  padding-left: 15px;
-  padding-right: 15px;
-  position: relative;
-
-  > h3 {
-    line-height: 26px;
-  }
-
-  > h3:before {
-    display: block;
-    content: "";
-    width: 20px;
-    height: 0;
-    border-bottom: 1px solid #E9EBEC;
-    position: absolute;
-    left: -15px;
-    top: 11px;
+  &:last-child {
+    margin-bottom: 0;
   }
 }
 
@@ -918,11 +886,12 @@
 .frame {
   list-style-type: none;
   position: relative;
-  margin-bottom: 0;
+  margin: 0;
+  border-top: 1px solid lighten(@trim, 4);
 
   &.frame-errors {}
 
-  &.system-frame {}
+  &.system-frame { }
 
   &.leads-to-app {}
 
@@ -930,10 +899,24 @@
     font-size: 22px;
   }
 
+  &.is-expandable p {
+    cursor: pointer;
+    &:hover {
+      background: lighten(@blue-light, 25);
+    }
+  }
+
+  &.system-frame.is-expandable p:hover {
+    background: darken(@white-dark, 5);
+  }
+
   p {
+    padding: 8px 20px;
     font-size: 12px;
-    margin-bottom: 12px;
+    margin: 0;
     line-height: 1.4;
+    color: @gray-darkest;
+    background: lighten(@blue-light, 30);
 
     a.annotation {
       &.trigger-popover {
@@ -946,6 +929,10 @@
     }
   }
 
+  &.system-frame p {
+    background: @white-dark;
+  }
+
   .original-src {
     font-size: 12px;
     padding-left: 3px;
@@ -962,7 +949,7 @@
   }
 
   .in-at {
-    opacity: .8;
+    opacity: .6;
     margin: 0 2px;
   }
 
@@ -997,17 +984,57 @@
 
   code {
     padding: 0;
-    background: #fff;
+    background: inherit;
     font-size: inherit;
     color: inherit;
   }
 
   .context {
-    margin-top: -5px;
-    margin-bottom: 15px;
+    display: none;
+    background: #fff;
+    margin: 0;
+    padding: 8px 0;
+
+    > li {
+      padding: 0 20px;
+      background: inherit;
+    }
 
     table.key-value {
-      margin-top: 20px;
+      border-top: 1px solid lighten(@trim, 4);
+      padding: 0 20px;
+      margin: 0 0 -8px;
+
+      td {
+        border-bottom: 1px solid lighten(@trim, 4) !important;
+
+        &.key {
+          width: 125px;
+          max-width: 125px;
+        }
+
+        &.value pre {
+          background: inherit;
+        }
+      }
+
+      tr:last-child {
+        td {
+          border-bottom: 0 !important;
+        }
+      }
+    }
+
+    &.expanded {
+      display: block;
+    }
+  }
+
+  .box-clippable {
+    margin-left: 0;
+    margin-right: 0;
+    &:first-of-type {
+      margin-top: 0;
     }
   }
 
@@ -1029,9 +1056,9 @@
   .btn-toggle {
     display: block;
     float: right;
-    .square(18px);
+    .square(16px);
     padding: 0;
-    line-height: 18px;
+    line-height: 16px;
     font-size: 9px;
     text-align: center;
   }
@@ -1041,7 +1068,6 @@
   }
 
   &.expanded {
-
     > p {
       color: #000;
     }
@@ -1116,7 +1142,6 @@ ol.context {
   }
 
   > li {
-    cursor: pointer;
     padding-left: 15px;
     font-family: @font-family-code;
     color: #222;
@@ -1126,13 +1151,20 @@ ol.context {
     white-space: pre;
     white-space: pre-wrap;
     word-wrap: break-word;
+    min-height: 24px;
   }
+
   > li.active {
     background-color: #f6f7f8;
-    min-height: 24px;
     list-style-type: none;
     border-radius: 2px;
 
+    &:first-child:last-child {
+      background-color: inherit;
+      color: inherit;
+      border-radius: 0;
+    }
+
     pre {
       color: @gray-dark;
     }
@@ -1172,18 +1204,6 @@ ol.context-line {
   }
 }
 
-.expanded {
-  ol.context {
-    > li {
-      min-height: 22px;
-    }
-    > li.active {
-      background-color: @blue;
-      color: #fff;
-    }
-  }
-}
-
 .stacktrace-table {
   display: flex;
   align-items: baseline;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 38ccc5b409..fb3553c22f 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -3294,6 +3294,28 @@ div.qrcode {
   background: @red;
 }
 
+/**
+ * Truncate component.
+ */
+.truncated {
+  position: relative;
+  .full-value {
+    display: none;
+    position: absolute;
+    background: @white;
+    left: -5px;
+    top: -5px;
+    padding: 4px;
+    border: 1px solid @trim;
+    white-space: nowrap;
+    border-radius: 4px;
+  }
+  &.expanded .full-value {
+    z-index: 10;
+    display: block;
+  }
+}
+
 /**
 * Responsive small screens
 * ============================================================================
