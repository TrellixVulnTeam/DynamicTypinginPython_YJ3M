commit 62d1ade039bd6a56c873afcd89d192b8cf67ad1e
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Jul 2 08:45:14 2020 +0200

    Ref(pii): Remove datascrubbers v2 feature flag (#19665)

diff --git a/src/sentry/datascrubbing.py b/src/sentry/datascrubbing.py
index 1112cd5b68..d1f1d9f71f 100644
--- a/src/sentry/datascrubbing.py
+++ b/src/sentry/datascrubbing.py
@@ -6,7 +6,6 @@ import six
 import sentry_relay
 from rest_framework import serializers
 
-from sentry import features
 from sentry.utils import metrics
 
 
@@ -86,12 +85,6 @@ def validate_pii_config_update(organization, value):
     if not value:
         return value
 
-    has_datascrubbers_v2 = features.has("organizations:datascrubbers-v2", organization)
-    if not has_datascrubbers_v2:
-        raise serializers.ValidationError(
-            "Organization does not have the datascrubbers-v2 feature enabled"
-        )
-
     try:
         sentry_relay.validate_pii_config(value)
     except ValueError as e:
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
index 0a63e5e916..84a95c9eb2 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.tsx
@@ -343,37 +343,6 @@ export const fields: {[key: string]: Field} = {
     formatLabel: formatStoreCrashReports,
     allowedValues: STORE_CRASH_REPORTS_VALUES,
   },
-  relayPiiConfig: {
-    name: 'relayPiiConfig',
-    type: 'string',
-    label: t('Advanced datascrubber configuration'),
-    placeholder: t('Paste a JSON configuration here.'),
-    multiline: true,
-    monospace: true,
-    autosize: true,
-    inline: false,
-    maxRows: 20,
-    help: tct(
-      'Advanced JSON-based configuration for datascrubbing. Applied in addition to the settings above. [learn_more:Learn more]',
-      {
-        learn_more: (
-          <a href="https://docs.sentry.io/data-management/advanced-datascrubbing/" />
-        ),
-      }
-    ),
-    visible: ({features}) => features.has('datascrubbers-v2'),
-    validate: ({id, form}) => {
-      if (form[id] === '') {
-        return [];
-      }
-      try {
-        JSON.parse(form[id]);
-      } catch (e) {
-        return [[id, e.toString().replace(/^SyntaxError: JSON.parse: /, '')]];
-      }
-      return [];
-    },
-  },
   allowedDomains: {
     name: 'allowedDomains',
     type: 'string',
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 8e0432c2d4..3a7237ed56 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -400,7 +400,7 @@ function routes() {
         component={errorHandler(LazyLoad)}
         componentPromise={() =>
           import(
-            /* webpackChunkName: "ProjectDataPrivacy" */ 'app/views/settings/projectDataPrivacy/projectDataPrivacy'
+            /* webpackChunkName: "ProjectSecurityAndPrivacy" */ 'app/views/settings/projectSecurityAndPrivacy'
           )
         }
       />
@@ -791,7 +791,7 @@ function routes() {
         path="security-and-privacy/"
         componentPromise={() =>
           import(
-            /* webpackChunkName: "OrganizationSecurityAndPrivacy" */ 'app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy'
+            /* webpackChunkName: "OrganizationSecurityAndPrivacy" */ 'app/views/settings/organizationSecurityAndPrivacy'
           )
         }
         component={errorHandler(LazyLoad)}
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index b200972386..bbd7f53657 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -164,6 +164,7 @@ export type Project = {
   // XXX: These are part of the DetailedProject serializer
   plugins: Plugin[];
   processingIssues: number;
+  relayPiiConfig: string;
   builtinSymbolSources?: string[];
 } & AvatarProject;
 
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
index 0d0a0055de..0ad44bdae5 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
@@ -27,7 +27,6 @@ const organizationNavigation: NavigationSection[] = [
           'Configuration related to dealing with sensitive data and other security settings. (Data Scrubbing, Data Privacy, Data Scrubbing)'
         ),
         id: 'security-and-privacy',
-        show: ({features}) => !!features?.has('datascrubbers-v2'),
         badge: () => 'new',
       },
       {
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
index 11cd311688..86e9f3c487 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
@@ -12,8 +12,6 @@ import organizationSettingsFields from 'app/data/forms/organizationGeneralSettin
 import withOrganization from 'app/utils/withOrganization';
 import Link from 'app/components/links/link';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
-import Feature from 'app/components/acl/feature';
 import {t} from 'app/locale';
 import {Panel, PanelHeader} from 'app/components/panels';
 
@@ -63,25 +61,17 @@ class OrganizationSettingsForm extends AsyncComponent {
       >
         <JsonForm {...jsonFormSettings} forms={organizationSettingsFields} />
 
-        <Feature features={['datascrubbers-v2']}>
-          {({hasFeature}) =>
-            hasFeature ? (
-              <Panel>
-                <PanelHeader>{t('Security & Privacy')}</PanelHeader>
-                <EmptyMessage
-                  title={t('Security & Privacy has moved')}
-                  description={
-                    <Link to={`/settings/${orgId}/security-and-privacy/`}>
-                      {t('Go to Security & Privacy')}
-                    </Link>
-                  }
-                />
-              </Panel>
-            ) : (
-              <JsonForm {...jsonFormSettings} forms={organizationSecurityAndPrivacy} />
-            )
-          }
-        </Feature>
+        <Panel>
+          <PanelHeader>{t('Security & Privacy')}</PanelHeader>
+          <EmptyMessage
+            title={t('Security & Privacy has moved')}
+            description={
+              <Link to={`/settings/${orgId}/security-and-privacy/`}>
+                {t('Go to Security & Privacy')}
+              </Link>
+            }
+          />
+        </Panel>
 
         <AvatarChooser
           type="organization"
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/index.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
rename to src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/index.tsx
index 11ca0ca7d2..64edc74b77 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/index.tsx
@@ -10,6 +10,7 @@ import {Organization} from 'app/types';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {updateOrganization} from 'app/actionCreators/organizations';
 import organizationSecurityAndPrivacy from 'app/data/forms/organizationSecurityAndPrivacy';
+import withOrganization from 'app/utils/withOrganization';
 
 import DataScrubbing from '../components/dataScrubbing';
 
@@ -20,10 +21,7 @@ type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
 class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
   getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
     const {orgId} = this.props.params;
-    return [
-      ['data', `/organizations/${orgId}/`],
-      ['authProvider', `/organizations/${orgId}/auth-provider/`],
-    ];
+    return [['authProvider', `/organizations/${orgId}/auth-provider/`]];
   }
 
   handleUpdateOrganization = (data: Organization) => {
@@ -35,12 +33,12 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
   renderBody() {
     const {organization} = this.props;
     const {orgId} = this.props.params;
-    const {authProvider} = this.state;
-    const initialData = this.props.organization;
+    const initialData = organization;
     const endpoint = `/organizations/${orgId}/`;
     const access = new Set(organization.access);
     const features = new Set(organization.features);
-    const relayPiiConfig = this.state.data?.relayPiiConfig;
+    const relayPiiConfig = organization.relayPiiConfig;
+    const {authProvider} = this.state;
 
     return (
       <React.Fragment>
@@ -77,4 +75,4 @@ class OrganizationSecurityAndPrivacyContent extends AsyncView<Props> {
   }
 }
 
-export default OrganizationSecurityAndPrivacyContent;
+export default withOrganization(OrganizationSecurityAndPrivacyContent);
diff --git a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy.tsx b/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy.tsx
deleted file mode 100644
index 7a19ffeced..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy.tsx
+++ /dev/null
@@ -1,30 +0,0 @@
-import React from 'react';
-
-import Feature from 'app/components/acl/feature';
-import FeatureDisabled from 'app/components/acl/featureDisabled';
-import {PanelAlert} from 'app/components/panels';
-import {t} from 'app/locale';
-import withOrganization from 'app/utils/withOrganization';
-
-import OrganizationSecurityAndPrivacyContent from './organizationSecurityAndPrivacyContent';
-
-const OrganizationSecurityAndPrivacy = ({
-  organization,
-  ...props
-}: OrganizationSecurityAndPrivacyContent['props']) => (
-  <Feature
-    features={['datascrubbers-v2']}
-    organization={organization}
-    renderDisabled={() => (
-      <FeatureDisabled
-        alert={PanelAlert}
-        features={organization.features}
-        featureName={t('Security & Privacy - new')}
-      />
-    )}
-  >
-    <OrganizationSecurityAndPrivacyContent {...props} organization={organization} />
-  </Feature>
-);
-
-export default withOrganization(OrganizationSecurityAndPrivacy);
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
index c45ba2f231..c0b6b66de9 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.tsx
@@ -78,7 +78,6 @@ export default function getConfiguration({
           description: t(
             'Configuration related to dealing with sensitive data and other security settings. (Data Scrubbing, Data Privacy, Data Scrubbing)'
           ),
-          show: () => organization.features?.includes('datascrubbers-v2'),
           badge: () => 'new',
         },
 
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx b/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
deleted file mode 100644
index 45d1bb8b02..0000000000
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacy.tsx
+++ /dev/null
@@ -1,28 +0,0 @@
-import React from 'react';
-
-import Feature from 'app/components/acl/feature';
-import FeatureDisabled from 'app/components/acl/featureDisabled';
-import {PanelAlert} from 'app/components/panels';
-import {t} from 'app/locale';
-
-import ProjectDataPrivacyContent from './projectDataPrivacyContent';
-
-type Props = ProjectDataPrivacyContent['props'];
-
-const ProjectDataPrivacy = ({organization, ...props}: Props) => (
-  <Feature
-    features={['datascrubbers-v2']}
-    organization={organization}
-    renderDisabled={() => (
-      <FeatureDisabled
-        alert={PanelAlert}
-        features={organization.features}
-        featureName={t('Security and Privacy - new')}
-      />
-    )}
-  >
-    <ProjectDataPrivacyContent {...props} organization={organization} />
-  </Feature>
-);
-
-export default ProjectDataPrivacy;
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index e3d9b065d6..e818110c34 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -33,7 +33,6 @@ import recreateRoute from 'app/utils/recreateRoute';
 import routeTitleGen from 'app/utils/routeTitle';
 import Link from 'app/components/links/link';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import Feature from 'app/components/acl/feature';
 
 class ProjectGeneralSettings extends AsyncView {
   static propTypes = {
@@ -474,41 +473,19 @@ class ProjectGeneralSettings extends AsyncView {
             />
           )}
 
-          <Feature features={['datascrubbers-v2']}>
-            {({hasFeature}) =>
-              hasFeature ? (
-                <Panel>
-                  <PanelHeader>{t('Data Privacy')}</PanelHeader>
-                  <EmptyMessage
-                    title={t('Data Privacy has moved')}
-                    description={
-                      <Link
-                        to={`/settings/${orgId}/projects/${projectId}/security-and-privacy/`}
-                      >
-                        {t('Go to Security & Privacy')}
-                      </Link>
-                    }
-                  />
-                </Panel>
-              ) : (
-                <JsonForm
-                  {...jsonFormProps}
-                  // Legacy use of the name Data Privacy... this codepath is
-                  // going to be gone if datascrubbersv2 goes GA
-                  title={t('Data Privacy')}
-                  fields={[
-                    fields.dataScrubber,
-                    fields.dataScrubberDefaults,
-                    fields.scrubIPAddresses,
-                    fields.sensitiveFields,
-                    fields.safeFields,
-                    fields.storeCrashReports,
-                    fields.relayPiiConfig,
-                  ]}
-                />
-              )
-            }
-          </Feature>
+          <Panel>
+            <PanelHeader>{t('Data Privacy')}</PanelHeader>
+            <EmptyMessage
+              title={t('Data Privacy has moved')}
+              description={
+                <Link
+                  to={`/settings/${orgId}/projects/${projectId}/security-and-privacy/`}
+                >
+                  {t('Go to Security & Privacy')}
+                </Link>
+              }
+            />
+          </Panel>
 
           <JsonForm
             {...jsonFormProps}
diff --git a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx b/src/sentry/static/sentry/app/views/settings/projectSecurityAndPrivacy/index.tsx
similarity index 86%
rename from src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
rename to src/sentry/static/sentry/app/views/settings/projectSecurityAndPrivacy/index.tsx
index 90f3e10242..74648cdfda 100644
--- a/src/sentry/static/sentry/app/views/settings/projectDataPrivacy/projectDataPrivacyContent.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityAndPrivacy/index.tsx
@@ -10,20 +10,19 @@ import {fields} from 'app/data/forms/projectGeneralSettings';
 import AsyncView from 'app/views/asyncView';
 import ProjectActions from 'app/actions/projectActions';
 import {Organization, Project} from 'app/types';
+import withProject from 'app/utils/withProject';
 
 import DataScrubbing from '../components/dataScrubbing';
 
-type Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {
+export type ProjectSecurityAndPrivacyProps = RouteComponentProps<
+  {orgId: string; projectId: string},
+  {}
+> & {
   organization: Organization;
   project: Project;
 };
 
-class ProjectDataPrivacyContent extends AsyncView<Props> {
-  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {
-    const {organization, project} = this.props;
-    return [['data', `/projects/${organization.slug}/${project.slug}/`]];
-  }
-
+class ProjectSecurityAndPrivacy extends AsyncView<ProjectSecurityAndPrivacyProps> {
   handleUpdateProject = (data: Project) => {
     // This will update our project global state
     ProjectActions.updateSuccess(data);
@@ -31,11 +30,11 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
 
   renderBody() {
     const {organization, project} = this.props;
-    const initialData = this.state.data;
+    const initialData = project;
     const endpoint = `/projects/${organization.slug}/${project.slug}/`;
     const access = new Set(organization.access);
     const features = new Set(organization.features);
-    const relayPiiConfig = initialData?.relayPiiConfig;
+    const relayPiiConfig = project.relayPiiConfig;
     const apiMethod = 'PUT';
 
     return (
@@ -101,4 +100,4 @@ class ProjectDataPrivacyContent extends AsyncView<Props> {
   }
 }
 
-export default ProjectDataPrivacyContent;
+export default withProject(ProjectSecurityAndPrivacy);
diff --git a/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx b/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
index b30b379843..e1b0c94a2b 100644
--- a/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
+++ b/tests/js/spec/views/settings/organizationSecurityAndPrivacy.spec.jsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import {mountWithTheme} from 'sentry-test/enzyme';
 
-import OrganizationSecurityAndPrivacy from 'app/views/settings/organizationSecurityAndPrivacy/organizationSecurityAndPrivacy';
+import OrganizationSecurityAndPrivacy from 'app/views/settings/organizationSecurityAndPrivacy';
 
 describe('OrganizationSecurityAndPrivacy', function() {
   let organization;
@@ -20,8 +20,6 @@ describe('OrganizationSecurityAndPrivacy', function() {
       url: `/organizations/${organization.slug}/`,
       method: 'GET',
     });
-
-    organization.features = ['datascrubbers-v2'];
   });
 
   it('shows require2fa switch', async function() {
diff --git a/tests/js/spec/views/settings/projectGeneralSettings.spec.jsx b/tests/js/spec/views/settings/projectGeneralSettings.spec.jsx
index be372a5aee..90eba799db 100644
--- a/tests/js/spec/views/settings/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/settings/projectGeneralSettings.spec.jsx
@@ -72,17 +72,6 @@ describe('projectGeneralSettings', function() {
     expect(wrapper.find('Input[name="slug"]').prop('value')).toBe('project-slug');
     expect(wrapper.find('Input[name="subjectPrefix"]').prop('value')).toBe('[my-org]');
     expect(wrapper.find('RangeSlider[name="resolveAge"]').prop('value')).toBe(48);
-    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBeFalsy();
-    expect(
-      wrapper.find('Switch[name="dataScrubberDefaults"]').prop('isActive')
-    ).toBeFalsy();
-    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isActive')).toBeFalsy();
-    expect(wrapper.find('TextArea[name="sensitiveFields"]').prop('value')).toBe(
-      'creditcard\nssn'
-    );
-    expect(wrapper.find('TextArea[name="safeFields"]').prop('value')).toBe(
-      'business-email\ncompany'
-    );
     expect(wrapper.find('TextArea[name="allowedDomains"]').prop('value')).toBe(
       'example.com\nhttps://example.com'
     );
@@ -99,21 +88,6 @@ describe('projectGeneralSettings', function() {
     expect(wrapper.find('Switch[name="verifySSL"]').prop('isActive')).toBeTruthy();
   });
 
-  it('disables field when equivalent org setting is true', function() {
-    routerContext.context.organization.dataScrubber = true;
-    routerContext.context.organization.scrubIPAddresses = false;
-    const wrapper = mountWithTheme(
-      <ProjectGeneralSettings params={{orgId: org.slug, projectId: project.slug}} />,
-      routerContext
-    );
-    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isDisabled')).toBe(
-      false
-    );
-    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isActive')).toBeFalsy();
-    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isDisabled')).toBe(true);
-    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBe(true);
-  });
-
   it('disables scrapeJavaScript when equivalent org setting is false', function() {
     routerContext.context.organization.scrapeJavaScript = false;
     const wrapper = mountWithTheme(
diff --git a/tests/js/spec/views/settings/projectSecurityAndPrivacy.spec.tsx b/tests/js/spec/views/settings/projectSecurityAndPrivacy.spec.tsx
new file mode 100644
index 0000000000..87a727f776
--- /dev/null
+++ b/tests/js/spec/views/settings/projectSecurityAndPrivacy.spec.tsx
@@ -0,0 +1,77 @@
+import React from 'react';
+
+import {mountWithTheme} from 'sentry-test/enzyme';
+
+import ProjectSecurityAndPrivacy, {
+  ProjectSecurityAndPrivacyProps,
+} from 'app/views/settings/projectSecurityAndPrivacy';
+
+// @ts-ignore
+const org = TestStubs.Organization();
+// @ts-ignore
+const project = TestStubs.ProjectDetails();
+// @ts-ignore
+const routerContext = TestStubs.routerContext([
+  {
+    // @ts-ignore
+    router: TestStubs.router({
+      params: {
+        projectId: project.slug,
+        orgId: org.slug,
+      },
+    }),
+  },
+]);
+
+function renderComponent(props: Partial<ProjectSecurityAndPrivacyProps>) {
+  const organization = props?.organization ?? org;
+  // @ts-ignore
+  MockApiClient.addMockResponse({
+    url: `/projects/${organization.slug}/${project.slug}/`,
+    method: 'GET',
+    body: project,
+  });
+
+  return mountWithTheme(
+    <ProjectSecurityAndPrivacy
+      project={project}
+      {...routerContext}
+      {...props}
+      organization={organization}
+    />
+  );
+}
+
+describe('projectSecurityAndPrivacy', function() {
+  it('renders form fields', function() {
+    const wrapper = renderComponent({});
+
+    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBeFalsy();
+    expect(
+      wrapper.find('Switch[name="dataScrubberDefaults"]').prop('isActive')
+    ).toBeFalsy();
+    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isActive')).toBeFalsy();
+    expect(wrapper.find('TextArea[name="sensitiveFields"]').prop('value')).toBe(
+      'creditcard\nssn'
+    );
+    expect(wrapper.find('TextArea[name="safeFields"]').prop('value')).toBe(
+      'business-email\ncompany'
+    );
+  });
+
+  it('disables field when equivalent org setting is true', function() {
+    const newOrganization = {...org};
+    newOrganization.dataScrubber = true;
+    newOrganization.scrubIPAddresses = false;
+
+    const wrapper = renderComponent({organization: newOrganization});
+
+    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isDisabled')).toBe(
+      false
+    );
+
+    expect(wrapper.find('Switch[name="scrubIPAddresses"]').prop('isActive')).toBeFalsy();
+    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isDisabled')).toBe(true);
+    expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBe(true);
+  });
+});
