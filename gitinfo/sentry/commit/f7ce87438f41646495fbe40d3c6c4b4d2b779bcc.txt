commit f7ce87438f41646495fbe40d3c6c4b4d2b779bcc
Author: Mark Story <mark@mark-story.com>
Date:   Thu Apr 4 09:59:35 2019 -0400

    feat(test) Add acceptance test that is backed by snuba (#12596)
    
    Add a `requires_snuba` pytest marker so that we can integrate snuba
    based tests into our acceptance tests and gracefully handle snuba not
    being available. I've refactored the other service availability checks
    to only make one connect call in an attempt to keep tests faster.
    
    Snuba does not share our acceptance test framework's mocked now. We need
    to use dates closer to the real time when interacting with snuba.
    
    Fixes SEN-246

diff --git a/.travis.yml b/.travis.yml
index b6411b9761..c0ad00e00b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -169,8 +169,9 @@ matrix:
 
     - python: 2.7
       name: 'Acceptance'
-      env: TEST_SUITE=acceptance
+      env: TEST_SUITE=acceptance USE_SNUBA=1
       services:
+        - docker
         - memcached
         - redis-server
         - postgresql
@@ -195,8 +196,9 @@ matrix:
     # XXX(markus): Remove after rust interfaces are done
     - python: 2.7
       name: 'Acceptance (Rust Interface Renormalization)'
-      env: TEST_SUITE=acceptance SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1 PERCY_ENABLE=0
+      env: TEST_SUITE=acceptance USE_SNUBA=1 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1 PERCY_ENABLE=0
       services:
+        - docker
         - memcached
         - redis-server
         - postgresql
@@ -268,7 +270,7 @@ matrix:
     # snuba in testing
     - python: 2.7
       name: 'Snuba Integration'
-      env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092
+      env: TEST_SUITE=snuba USE_SNUBA=1 SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092
       services:
         - docker
         - memcached
@@ -290,7 +292,7 @@ matrix:
     # XXX(markus): Remove after rust interfaces are done
     - python: 2.7
       name: 'Snuba Integration (Rust Interface Renormalization)'
-      env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
+      env: TEST_SUITE=snuba USE_SNUBA=1 SENTRY_ZOOKEEPER_HOSTS=localhost:2181 SENTRY_KAFKA_HOSTS=localhost:9092 SENTRY_TEST_USE_RUST_INTERFACE_RENORMALIZATION=1
       services:
         - docker
         - memcached
diff --git a/setup.cfg b/setup.cfg
index 0ed54e2be7..77a2ed2aba 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -4,6 +4,8 @@ addopts = --tb=native -p no:doctest -p no:warnings
 norecursedirs = bin dist docs htmlcov script hooks node_modules .* {args}
 looponfailroots = src tests
 selenium_driver = chrome
+markers =
+    snuba: mark a test as requiring snuba
 
 [flake8]
 ignore = F999,E501,E128,E124,E402,W503,E731,C901
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 600a01d1ee..dcf5d16bdb 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -11,7 +11,8 @@ from __future__ import absolute_import
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'TwoFactorAPITestCase', 'AuthProviderTestCase', 'RuleTestCase',
     'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'AcceptanceTestCase',
-    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase', 'IntegrationRepositoryTestCase',
+    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase',
+    'IntegrationRepositoryTestCase',
     'ReleaseCommitPatchTest', 'SetRefsTestCase', 'OrganizationDashboardWidgetTestCase'
 )
 
@@ -66,6 +67,8 @@ from sentry.utils import json
 from sentry.utils.auth import SSO_SESSION_KEY
 
 from .fixtures import Fixtures
+from .factories import Factories
+from .skips import requires_snuba
 from .helpers import (
     AuthProvider, Feature, get_auth_header, TaskRunner, override_options, parse_queries
 )
@@ -831,9 +834,20 @@ class IntegrationTestCase(TestCase):
         assert 'window.opener.postMessage(' in resp.content
 
 
-class SnubaTestCase(TestCase):
+@pytest.mark.snuba
+@requires_snuba
+class SnubaTestCase(BaseTestCase):
+    """
+    Mixin for enabling test case classes to talk to snuba
+    Useful when you are working on acceptance tests or integration
+    tests that require snuba.
+    """
+
     def setUp(self):
         super(SnubaTestCase, self).setUp()
+        self.init_snuba()
+
+    def init_snuba(self):
         self.snuba_eventstream = SnubaEventStream()
         self.snuba_tagstore = SnubaCompatibilityTagStorage()
         assert requests.post(settings.SENTRY_SNUBA + '/tests/drop').status_code == 200
@@ -849,7 +863,7 @@ class SnubaTestCase(TestCase):
             mock.patch('sentry.tagstore.incr_group_tag_value_times_seen',
                        self.snuba_tagstore.incr_group_tag_value_times_seen),
         ):
-            return super(SnubaTestCase, self).store_event(*args, **kwargs)
+            return Factories.store_event(*args, **kwargs)
 
     def __wrap_event(self, event, data, primary_hash):
         # TODO: Abstract and combine this with the stream code in
@@ -877,8 +891,7 @@ class SnubaTestCase(TestCase):
         world all test events would go through the full regular pipeline.
         """
         # XXX: Use `store_event` instead of this!
-
-        event = super(SnubaTestCase, self).create_event(*args, **kwargs)
+        event = Factories.create_event(*args, **kwargs)
 
         data = event.data.data
         tags = dict(data.get('tags', []))
diff --git a/src/sentry/testutils/skips.py b/src/sentry/testutils/skips.py
index db013f006f..46f97ae68d 100644
--- a/src/sentry/testutils/skips.py
+++ b/src/sentry/testutils/skips.py
@@ -7,30 +7,41 @@ sentry.testutils.skips
 """
 from __future__ import absolute_import
 
+from django.conf import settings
+from six.moves.urllib.parse import urlparse
 import os
 import socket
 import pytest
 
 
+_service_status = {}
+
+
 def riak_is_available():
+    if 'riak' in _service_status:
+        return _service_status['riak']
     try:
         socket.create_connection(('127.0.0.1', 8098), 1.0)
     except socket.error:
-        return False
+        _service_status['riak'] = False
     else:
-        return True
+        _service_status['riak'] = True
+    return _service_status['riak']
 
 
 requires_riak = pytest.mark.skipif(not riak_is_available(), reason="requires riak server running")
 
 
 def cassandra_is_available():
+    if 'cassandra' in _service_status:
+        return _service_status['cassandra']
     try:
         socket.create_connection(('127.0.0.1', 9042), 1.0)
     except socket.error:
-        return False
+        _service_status['cassandra'] = False
     else:
-        return True
+        _service_status['cassandra'] = True
+    return _service_status['cassandra']
 
 
 requires_cassandra = pytest.mark.skipif(
@@ -38,6 +49,24 @@ requires_cassandra = pytest.mark.skipif(
 )
 
 
+def snuba_is_available():
+    if 'snuba' in _service_status:
+        return _service_status['snuba']
+    try:
+        parsed = urlparse(settings.SENTRY_SNUBA)
+        socket.create_connection((parsed.host, parsed.port), 1.0)
+    except socket.error:
+        _service_status['snuba'] = False
+    else:
+        _service_status['snuba'] = True
+    return _service_status['snuba']
+
+
+requires_snuba = pytest.mark.skipif(
+    not snuba_is_available, reason='requires snuba server running'
+)
+
+
 def xfail_if_not_postgres(reason):
     def decorator(function):
         return pytest.mark.xfail(
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index c147aefe15..7a5b7467de 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -129,6 +129,12 @@ def pytest_configure(config):
         }
     }
 
+    if os.environ.get('USE_SNUBA', False):
+        settings.SENTRY_SEARCH = 'sentry.search.snuba.SnubaSearchBackend'
+        settings.SENTRY_TAGSTORE = 'sentry.tagstore.snuba.SnubaCompatibilityTagStorage'
+        settings.SENTRY_TSDB = 'sentry.tsdb.redissnuba.RedisSnubaTSDB'
+        settings.SENTRY_EVENTSTREAM = 'sentry.eventstream.snuba.SnubaEventStream'
+
     if not hasattr(settings, 'SENTRY_OPTIONS'):
         settings.SENTRY_OPTIONS = {}
 
@@ -241,9 +247,10 @@ def register_extensions():
 
 
 def pytest_runtest_teardown(item):
-    from sentry import tsdb
-    # TODO(dcramer): this only works if this is the correct tsdb backend
-    tsdb.flush()
+    if not os.environ.get('USE_SNUBA', False):
+        from sentry import tsdb
+        # TODO(dcramer): this only works if this is the correct tsdb backend
+        tsdb.flush()
 
     # XXX(dcramer): only works with DummyNewsletter
     from sentry import newsletter
diff --git a/tests/acceptance/test_dashboard.py b/tests/acceptance/test_dashboard.py
index 93f480a481..bbe51e0f38 100644
--- a/tests/acceptance/test_dashboard.py
+++ b/tests/acceptance/test_dashboard.py
@@ -2,13 +2,13 @@ from __future__ import absolute_import
 
 from django.utils import timezone
 
-from sentry.testutils import AcceptanceTestCase
+from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 from sentry.models import GroupAssignee, Release, Environment, Deploy, ReleaseProjectEnvironment, OrganizationOnboardingTask, OnboardingTask, OnboardingTaskStatus
-from sentry.utils.samples import create_sample_event
+from sentry.utils.samples import load_data
 from datetime import datetime
 
 
-class DashboardTest(AcceptanceTestCase):
+class DashboardTest(AcceptanceTestCase, SnubaTestCase):
     def setUp(self):
         super(DashboardTest, self).setUp()
         self.user = self.create_user('foo@example.com')
@@ -65,11 +65,15 @@ class DashboardTest(AcceptanceTestCase):
         self.browser.snapshot('org dash no issues')
 
     def test_one_issue(self):
-        event = create_sample_event(
-            project=self.project,
-            platform='python',
-            event_id='d964fdbd649a4cf8bfc35d18082b6b0e',
-            timestamp=1452683305,
+        self.init_snuba()
+
+        event_data = load_data('python')
+        event_data['event_id'] = 'd964fdbd649a4cf8bfc35d18082b6b0e'
+        event_data['timestamp'] = 1452683305
+        event = self.store_event(
+            project_id=self.project.id,
+            data=event_data,
+            assert_no_errors=False
         )
         event.group.update(
             first_seen=datetime(2018, 1, 12, 3, 8, 25, tzinfo=timezone.utc),
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 44d8dfc993..3a787bd229 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -6,19 +6,11 @@ from datetime import datetime
 from django.conf import settings
 from django.utils import timezone
 
-from sentry.testutils import AcceptanceTestCase
-from sentry.utils.samples import create_sample_event as _create_sample_event
+from sentry.testutils import AcceptanceTestCase, SnubaTestCase
+from sentry.utils.samples import load_data
 
 
-def create_sample_event(*args, **kwargs):
-    event = _create_sample_event(*args, **kwargs)
-    # Prevent Percy screenshot from constantly changing
-    event.datetime = datetime(2017, 9, 6, 0, 0)
-    event.save()
-    return event
-
-
-class IssueDetailsTest(AcceptanceTestCase):
+class IssueDetailsTest(AcceptanceTestCase, SnubaTestCase):
     def setUp(self):
         super(IssueDetailsTest, self).setUp()
         self.user = self.create_user('foo@example.com')
@@ -33,13 +25,15 @@ class IssueDetailsTest(AcceptanceTestCase):
         self.dismiss_assistant()
 
     def create_sample_event(self, platform, default=None, sample_name=None):
-        event = create_sample_event(
-            project=self.project,
-            platform=platform,
-            default=default,
-            sample_name=sample_name,
-            event_id='d964fdbd649a4cf8bfc35d18082b6b0e'
-        )
+        event_data = load_data(platform, default=default, sample_name=sample_name)
+        event_data['event_id'] = 'd964fdbd649a4cf8bfc35d18082b6b0e'
+        event = self.store_event(
+            data=event_data,
+            project_id=self.project.id,
+            assert_no_errors=False,
+        )
+        event.datetime = datetime(2017, 9, 6, 0, 0)
+        event.save()
         event.group.update(
             first_seen=datetime(2015, 8, 13, 3, 8, 25, tzinfo=timezone.utc),
             last_seen=datetime(2016, 1, 13, 3, 8, 25, tzinfo=timezone.utc),
diff --git a/tests/acceptance/test_organization_group_index.py b/tests/acceptance/test_organization_group_index.py
index 9c52624af3..14e6c3bad8 100644
--- a/tests/acceptance/test_organization_group_index.py
+++ b/tests/acceptance/test_organization_group_index.py
@@ -1,11 +1,18 @@
 from __future__ import absolute_import
 
+import pytz
+
+from datetime import datetime, timedelta
 from django.utils import timezone
 
-from sentry.testutils import AcceptanceTestCase
+from sentry.testutils import AcceptanceTestCase, SnubaTestCase
+from mock import patch
+
+
+event_time = (datetime.utcnow() - timedelta(days=3)).replace(tzinfo=pytz.utc)
 
 
-class OrganizationGroupIndexTest(AcceptanceTestCase):
+class OrganizationGroupIndexTest(AcceptanceTestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationGroupIndexTest, self).setUp()
         self.user = self.create_user('foo@example.com')
@@ -43,5 +50,37 @@ class OrganizationGroupIndexTest(AcceptanceTestCase):
             self.browser.wait_until_test_id('empty-state')
             self.browser.snapshot('organization issues no results')
 
+    @patch('django.utils.timezone.now')
+    def test_with_results(self, mock_now):
+        mock_now.return_value = datetime.utcnow().replace(tzinfo=pytz.utc)
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'oh no',
+                'timestamp': event_time.isoformat()[:19],
+                'fingerprint': ['group-1']
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'message': 'oh snap',
+                'timestamp': event_time.isoformat()[:19],
+                'fingerprint': ['group-2']
+            },
+            project_id=self.project.id
+        )
+        with self.feature(['organizations:sentry10', 'organizations:discover']):
+            self.browser.get(self.path)
+            self.wait_until_loaded()
+            self.browser.wait_until('.event-issue-header')
+            self.browser.snapshot('organization issues with issues')
+
+            groups = self.browser.find_elements_by_class_name('event-issue-header')
+            assert len(groups) == 2
+            assert 'oh snap' in groups[0].text
+            assert 'oh no' in groups[1].text
+
     def wait_until_loaded(self):
         self.browser.wait_until_not('.loading')
diff --git a/tests/acceptance/test_project_overview.py b/tests/acceptance/test_project_overview.py
index 3317a9cf82..021f7eb949 100644
--- a/tests/acceptance/test_project_overview.py
+++ b/tests/acceptance/test_project_overview.py
@@ -1,11 +1,15 @@
 from __future__ import absolute_import
 
+import pytz
+
+from datetime import datetime
 from django.utils import timezone
+from mock import patch
 
-from sentry.testutils import AcceptanceTestCase
+from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 
 
-class ProjectOverviewTest(AcceptanceTestCase):
+class ProjectOverviewTest(AcceptanceTestCase, SnubaTestCase):
     def setUp(self):
         super(ProjectOverviewTest, self).setUp()
         self.user = self.create_user('foo@example.com')
@@ -22,11 +26,18 @@ class ProjectOverviewTest(AcceptanceTestCase):
         self.path = u'/{}/{}/dashboard/'.format(
             self.org.slug, self.project.slug)
 
-    def test_with_issues(self):
-        self.project.update(first_event=timezone.now())
-        self.create_group(
-            project=self.project,
-            message='Foo bar',
+    @patch('django.utils.timezone.now')
+    def test_with_issues(self, mock_now):
+        mock_now.return_value = datetime.utcnow().replace(tzinfo=pytz.utc)
+
+        self.store_event(
+            data={
+                'message': 'Foo bar',
+                'level': 'error',
+                'timestamp': timezone.now().isoformat()[:19]
+            },
+            project_id=self.project.id,
+            assert_no_errors=False
         )
         self.browser.get(self.path)
         self.browser.wait_until('.chart-wrapper')
diff --git a/tests/acceptance/test_project_release_tracking_settings.py b/tests/acceptance/test_project_release_tracking_settings.py
index e8d1ff1754..b9a2453be0 100644
--- a/tests/acceptance/test_project_release_tracking_settings.py
+++ b/tests/acceptance/test_project_release_tracking_settings.py
@@ -1,10 +1,9 @@
 from __future__ import absolute_import
 
-from sentry import tagstore
-from sentry.testutils import AcceptanceTestCase
+from sentry.testutils import AcceptanceTestCase, SnubaTestCase
 
 
-class ProjectReleaseTrackingSettingsTest(AcceptanceTestCase):
+class ProjectReleaseTrackingSettingsTest(AcceptanceTestCase, SnubaTestCase):
     def setUp(self):
         super(ProjectReleaseTrackingSettingsTest, self).setUp()
         self.user = self.create_user('foo@example.com')
@@ -25,12 +24,20 @@ class ProjectReleaseTrackingSettingsTest(AcceptanceTestCase):
             teams=[self.team],
         )
 
-        tagstore.create_tag_key(project_id=self.project.id, environment_id=None, key="Foo")
-
         self.login_as(self.user)
         self.path1 = u'/{}/{}/settings/release-tracking/'.format(self.org.slug, self.project.slug)
 
     def test_tags_list(self):
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'oh no',
+                'environment': 'prod',
+                'release': 'first',
+                'tags': {'Foo': 'value'},
+            },
+            project_id=self.project.id,
+        )
         self.browser.get(self.path1)
         self.browser.wait_until_not('.loading-indicator')
         self.browser.snapshot('project settings - release tracking')
diff --git a/tests/acceptance/test_project_tags_settings.py b/tests/acceptance/test_project_tags_settings.py
index 505be35c31..ac5c8413c4 100644
--- a/tests/acceptance/test_project_tags_settings.py
+++ b/tests/acceptance/test_project_tags_settings.py
@@ -1,10 +1,14 @@
 from __future__ import absolute_import
 
-from sentry import tagstore
-from sentry.testutils import AcceptanceTestCase
+from datetime import datetime, timedelta
+from sentry.testutils import AcceptanceTestCase, SnubaTestCase
+from mock import patch
+import pytz
 
+event_time = (datetime.utcnow() - timedelta(days=3)).replace(tzinfo=pytz.utc)
 
-class ProjectTagsSettingsTest(AcceptanceTestCase):
+
+class ProjectTagsSettingsTest(AcceptanceTestCase, SnubaTestCase):
     def setUp(self):
         super(ProjectTagsSettingsTest, self).setUp()
         self.user = self.create_user('foo@example.com')
@@ -25,18 +29,32 @@ class ProjectTagsSettingsTest(AcceptanceTestCase):
             teams=[self.team],
         )
 
-        tagstore.create_tag_key(project_id=self.project.id, environment_id=None, key="Foo")
-
         self.login_as(self.user)
-        self.path1 = u'/settings/{}/projects/{}/tags/'.format(self.org.slug, self.project.slug)
+        self.path = u'/settings/{}/projects/{}/tags/'.format(self.org.slug, self.project.slug)
 
-    def test_tags_list(self):
-        self.browser.get(self.path1)
+    @patch('django.utils.timezone.now')
+    def test_tags_list(self, mock_now):
+        mock_now.return_value = event_time + timedelta(days=2)
+
+        self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'message': 'oh no',
+                'level': 'error',
+                'timestamp': event_time.isoformat()[:19],
+            },
+            project_id=self.project.id,
+            assert_no_errors=False,
+        )
+
+        self.browser.get(self.path)
         self.browser.wait_until_not('.loading-indicator')
         self.browser.snapshot('project settings - tags')
+
         self.browser.wait_until('.ref-tag-row')
         self.browser.click('.ref-tag-row [data-test-id="delete"]')
         self.browser.wait_until('.modal-footer [data-test-id="confirm-modal"]')
+
         self.browser.click('.modal-footer [data-test-id="confirm-modal"]')
         self.browser.wait_until_not('.ref-tag-row')
         self.browser.snapshot('project settings - tags - after remove')
diff --git a/tests/snuba/api/endpoints/test_organization_discover_query.py b/tests/snuba/api/endpoints/test_organization_discover_query.py
index cbc93652d7..121079cdf6 100644
--- a/tests/snuba/api/endpoints/test_organization_discover_query.py
+++ b/tests/snuba/api/endpoints/test_organization_discover_query.py
@@ -2,9 +2,8 @@ from __future__ import absolute_import
 
 from datetime import datetime, timedelta
 
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
 from django.core.urlresolvers import reverse
-from sentry.testutils import SnubaTestCase
 
 
 class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
diff --git a/tests/snuba/api/endpoints/test_organization_discover_saved_queries.py b/tests/snuba/api/endpoints/test_organization_discover_saved_queries.py
index 7d56598216..3f842226fc 100644
--- a/tests/snuba/api/endpoints/test_organization_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_organization_discover_saved_queries.py
@@ -1,8 +1,7 @@
 from __future__ import absolute_import
 
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
 from django.core.urlresolvers import reverse
-from sentry.testutils import SnubaTestCase
 
 from sentry.models import DiscoverSavedQuery
 
diff --git a/tests/snuba/api/endpoints/test_organization_discover_saved_query_detail.py b/tests/snuba/api/endpoints/test_organization_discover_saved_query_detail.py
index 6123b1b182..7123d4b623 100644
--- a/tests/snuba/api/endpoints/test_organization_discover_saved_query_detail.py
+++ b/tests/snuba/api/endpoints/test_organization_discover_saved_query_detail.py
@@ -1,9 +1,8 @@
 from __future__ import absolute_import
 
 import six
-from sentry.testutils import APITestCase
+from sentry.testutils import APITestCase, SnubaTestCase
 from django.core.urlresolvers import reverse
-from sentry.testutils import SnubaTestCase
 
 from sentry.models import DiscoverSavedQuery, DiscoverSavedQueryProject
 
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 39b2abfe0f..bd2350bd4e 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -27,8 +27,8 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         project2 = self.create_project()
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
-        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event('b' * 32, group=group2, datetime=self.min_ago)
+        event_1 = self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event(event_id='b' * 32, group=group2, datetime=self.min_ago)
 
         url = reverse(
             'sentry-api-0-organization-events',
@@ -50,8 +50,8 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         project2 = self.create_project()
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
-        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event('b' * 32, group=group2, datetime=self.min_ago)
+        event_1 = self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event(event_id='b' * 32, group=group2, datetime=self.min_ago)
 
         url = reverse(
             'sentry-api-0-organization-events',
@@ -70,9 +70,14 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
+        self.create_event(
+            event_id='x' * 32,
+            group=group,
+            message="how to make fast",
+            datetime=self.min_ago,
+        )
         event_2 = self.create_event(
-            'y' * 32,
+            event_id='y' * 32,
             group=group,
             message="Delet the Data",
             datetime=self.min_ago,
@@ -97,13 +102,13 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         project = self.create_project()
         group = self.create_group(project=project)
         event_1 = self.create_event(
-            'x' * 32,
+            event_id='x' * 32,
             group=group,
             message="how to make fast",
             datetime=self.min_ago,
         )
         event_2 = self.create_event(
-            'y' * 32,
+            event_id='y' * 32,
             group=group,
             message="Delet the Data",
             datetime=self.min_ago,
@@ -134,7 +139,11 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
+        self.create_event(
+            event_id='x' * 32,
+            group=group,
+            message="how to make fast",
+            datetime=self.min_ago)
 
         url = reverse(
             'sentry-api-0-organization-events',
@@ -164,9 +173,9 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
         group3 = self.create_group(project=project3)
-        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event('b' * 32, group=group2, datetime=self.min_ago)
-        self.create_event('c' * 32, group=group3, datetime=self.min_ago)
+        event_1 = self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event(event_id='b' * 32, group=group2, datetime=self.min_ago)
+        self.create_event(event_id='c' * 32, group=group3, datetime=self.min_ago)
 
         base_url = reverse(
             'sentry-api-0-organization-events',
@@ -208,8 +217,8 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         project2 = self.create_project()
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
-        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        self.create_event('b' * 32, group=group2, datetime=self.day_ago)
+        event_1 = self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        self.create_event(event_id='b' * 32, group=group2, datetime=self.day_ago)
 
         url = reverse(
             'sentry-api-0-organization-events',
@@ -231,8 +240,8 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         project2 = self.create_project()
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
-        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        self.create_event('b' * 32, group=group2, datetime=self.day_ago)
+        event_1 = self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        self.create_event(event_id='b' * 32, group=group2, datetime=self.day_ago)
 
         now = timezone.now()
 
@@ -365,10 +374,10 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         group = self.create_group(project=project)
 
         event_1 = self.create_event(
-            'a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
+            event_id='a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
         )
         event_2 = self.create_event(
-            'b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
+            event_id='b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
         )
 
         base_url = reverse(
@@ -399,17 +408,17 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         group = self.create_group(project=project)
 
         event_1 = self.create_event(
-            'a' * 32, group=group, datetime=self.min_ago, tags={'sentry:release': '3.1.2'}
+            event_id='a' * 32, group=group, datetime=self.min_ago, tags={'sentry:release': '3.1.2'}
         )
         event_2 = self.create_event(
-            'b' * 32, group=group, datetime=self.min_ago, tags={'sentry:release': '4.1.2'}
+            event_id='b' * 32, group=group, datetime=self.min_ago, tags={'sentry:release': '4.1.2'}
         )
         event_3 = self.create_event(
-            'c' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.com'}
+            event_id='c' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.com'}
         )
 
         event_4 = self.create_event(
-            'd' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.commmmmmmm'}
+            event_id='d' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.commmmmmmm'}
         )
 
         base_url = reverse(
@@ -460,10 +469,10 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         group = self.create_group(project=project)
 
         event_1 = self.create_event(
-            'a' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.com'},
+            event_id='a' * 32, group=group, datetime=self.min_ago, user={'email': 'foo@example.com'},
         )
         event_2 = self.create_event(
-            'b' * 32,
+            event_id='b' * 32,
             group=group,
             datetime=self.min_ago,
             tags={
@@ -523,7 +532,11 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
 
         project = self.create_project(organization=org, teams=[team])
         group = self.create_group(project=project)
-        self.create_event('a' * 32, group=group, message="best event", datetime=self.min_ago)
+        self.create_event(
+            event_id='a' * 32,
+            group=group,
+            message="best event",
+            datetime=self.min_ago)
 
         url = reverse(
             'sentry-api-0-organization-events',
@@ -572,17 +585,17 @@ class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
         self.create_event(
-            'a' * 32,
+            event_id='a' * 32,
             group=group,
             datetime=day_ago + timedelta(minutes=1)
         )
         self.create_event(
-            'b' * 32,
+            event_id='b' * 32,
             group=group2,
             datetime=day_ago + timedelta(hours=1, minutes=1)
         )
         self.create_event(
-            'c' * 32,
+            event_id='c' * 32,
             group=group2,
             datetime=day_ago + timedelta(hours=1, minutes=2)
         )
@@ -630,8 +643,8 @@ class OrganizationEventsMetaEndpoint(OrganizationEventsTestBase):
         project2 = self.create_project()
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
-        self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        self.create_event('m' * 32, group=group2, datetime=self.min_ago)
+        self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        self.create_event(event_id='m' * 32, group=group2, datetime=self.min_ago)
 
         url = reverse(
             'sentry-api-0-organization-events-meta',
@@ -650,9 +663,13 @@ class OrganizationEventsMetaEndpoint(OrganizationEventsTestBase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
         self.create_event(
-            'm' * 32,
+            event_id='x' * 32,
+            group=group,
+            message="how to make fast",
+            datetime=self.min_ago)
+        self.create_event(
+            event_id='m' * 32,
             group=group,
             message="Delet the Data",
             datetime=self.min_ago,
diff --git a/tests/snuba/api/endpoints/test_organization_health.py b/tests/snuba/api/endpoints/test_organization_health.py
index fe98e65ff4..d7dbecdc64 100644
--- a/tests/snuba/api/endpoints/test_organization_health.py
+++ b/tests/snuba/api/endpoints/test_organization_health.py
@@ -22,9 +22,9 @@ class OrganizationHealthTest(APITestCase, SnubaTestCase):
         project2 = self.create_project()
         group = self.create_group(project=project)
         group2 = self.create_group(project=project2)
-        self.create_event('a' * 32, group=group, datetime=self.min_ago,
+        self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago,
                           tags=[('sentry:user', 'id:%s' % (self.user.id,))])
-        self.create_event('b' * 32, group=group2, datetime=self.day_ago,
+        self.create_event(event_id='b' * 32, group=group2, datetime=self.day_ago,
                           tags=[('sentry:user', 'id:%s' % (self.user.id,))])
 
         now = timezone.now()
diff --git a/tests/snuba/api/endpoints/test_organization_tagkey_values.py b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
index 3b7e1b3396..75a6f25f0e 100644
--- a/tests/snuba/api/endpoints/test_organization_tagkey_values.py
+++ b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
@@ -38,16 +38,16 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
 
     def test_simple(self):
         self.create_event(
-            'a' * 32, group=self.group, datetime=self.day_ago, tags={'fruit': 'apple'}
+            event_id='a' * 32, group=self.group, datetime=self.day_ago, tags={'fruit': 'apple'}
         )
         self.create_event(
-            'b' * 32, group=self.group, datetime=self.min_ago, tags={'fruit': 'orange'}
+            event_id='b' * 32, group=self.group, datetime=self.min_ago, tags={'fruit': 'orange'}
         )
         self.create_event(
-            'c' * 32, group=self.group, datetime=self.min_ago, tags={'some_tag': 'some_value'}
+            event_id='c' * 32, group=self.group, datetime=self.min_ago, tags={'some_tag': 'some_value'}
         )
         self.create_event(
-            'd' * 32, group=self.group, datetime=self.min_ago, tags={'fruit': 'orange'}
+            event_id='d' * 32, group=self.group, datetime=self.min_ago, tags={'fruit': 'orange'}
         )
 
         url = reverse(
@@ -68,16 +68,16 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
 
     def test_snuba_column(self):
         self.create_event(
-            'a' * 32, group=self.group, datetime=self.day_ago, user={'email': 'foo@example.com'},
+            event_id='a' * 32, group=self.group, datetime=self.day_ago, user={'email': 'foo@example.com'},
         )
         self.create_event(
-            'b' * 32, group=self.group, datetime=self.min_ago, user={'email': 'bar@example.com'},
+            event_id='b' * 32, group=self.group, datetime=self.min_ago, user={'email': 'bar@example.com'},
         )
         self.create_event(
-            'c' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), user={'email': 'baz@example.com'},
+            event_id='c' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), user={'email': 'baz@example.com'},
         )
         self.create_event(
-            'd' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), user={'email': 'baz@example.com'},
+            event_id='d' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), user={'email': 'baz@example.com'},
         )
         self.run_test(
             'user.email',
@@ -86,31 +86,31 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
 
     def test_release(self):
         self.create_event(
-            'a' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:release': '3.1.2'},
+            event_id='a' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:release': '3.1.2'},
         )
         self.create_event(
-            'b' * 32, group=self.group, datetime=self.min_ago, tags={'sentry:release': '4.1.2'},
+            event_id='b' * 32, group=self.group, datetime=self.min_ago, tags={'sentry:release': '4.1.2'},
         )
         self.create_event(
-            'c' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:release': '3.1.2'},
+            event_id='c' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:release': '3.1.2'},
         )
         self.create_event(
-            'd' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), tags={'sentry:release': '5.1.2'},
+            event_id='d' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), tags={'sentry:release': '5.1.2'},
         )
         self.run_test('release', expected=[('5.1.2', 1), ('4.1.2', 1), ('3.1.2', 2)])
 
     def test_user_tag(self):
         self.create_event(
-            'a' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:user': '1'},
+            event_id='a' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:user': '1'},
         )
         self.create_event(
-            'b' * 32, group=self.group, datetime=self.min_ago, tags={'sentry:user': '2'},
+            event_id='b' * 32, group=self.group, datetime=self.min_ago, tags={'sentry:user': '2'},
         )
         self.create_event(
-            'c' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:user': '1'},
+            event_id='c' * 32, group=self.group, datetime=self.day_ago, tags={'sentry:user': '1'},
         )
         self.create_event(
-            'd' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), tags={'sentry:user': '3'},
+            event_id='d' * 32, group=self.group, datetime=timezone.now() - timedelta(seconds=10), tags={'sentry:user': '3'},
         )
         self.run_test('user', expected=[('3', 1), ('2', 1), ('1', 2)])
 
@@ -119,15 +119,15 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         other_project = self.create_project(organization=other_org)
         other_group = self.create_group(project=other_project)
 
-        self.create_event('a' * 32, group=self.group, datetime=self.day_ago)
-        self.create_event('b' * 32, group=self.group, datetime=self.min_ago)
-        self.create_event('c' * 32, group=other_group, datetime=self.day_ago)
+        self.create_event(event_id='a' * 32, group=self.group, datetime=self.day_ago)
+        self.create_event(event_id='b' * 32, group=self.group, datetime=self.min_ago)
+        self.create_event(event_id='c' * 32, group=other_group, datetime=self.day_ago)
         self.run_test('project.id', expected=[])
 
     def test_array_column(self):
-        self.create_event('a' * 32, group=self.group, datetime=self.day_ago)
-        self.create_event('b' * 32, group=self.group, datetime=self.min_ago)
-        self.create_event('c' * 32, group=self.group, datetime=self.day_ago)
+        self.create_event(event_id='a' * 32, group=self.group, datetime=self.day_ago)
+        self.create_event(event_id='b' * 32, group=self.group, datetime=self.min_ago)
+        self.create_event(event_id='c' * 32, group=self.group, datetime=self.day_ago)
         self.run_test('error.type', expected=[])
 
     def test_no_projects(self):
diff --git a/tests/snuba/api/endpoints/test_organization_tags.py b/tests/snuba/api/endpoints/test_organization_tags.py
index c165b3686d..f037367c5e 100644
--- a/tests/snuba/api/endpoints/test_organization_tags.py
+++ b/tests/snuba/api/endpoints/test_organization_tags.py
@@ -24,16 +24,16 @@ class OrganizationTagsTest(APITestCase, SnubaTestCase):
         group = self.create_group(project=project)
 
         self.create_event(
-            'a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
+            event_id='a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
         )
         self.create_event(
-            'b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
+            event_id='b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
         )
         self.create_event(
-            'c' * 32, group=group, datetime=self.min_ago, tags={'some_tag': 'some_value'}
+            event_id='c' * 32, group=group, datetime=self.min_ago, tags={'some_tag': 'some_value'}
         )
         self.create_event(
-            'd' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
+            event_id='d' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
         )
 
         url = reverse(
diff --git a/tests/snuba/api/endpoints/test_project_events.py b/tests/snuba/api/endpoints/test_project_events.py
index f403773a24..cf7377bce9 100644
--- a/tests/snuba/api/endpoints/test_project_events.py
+++ b/tests/snuba/api/endpoints/test_project_events.py
@@ -19,8 +19,8 @@ class ProjectEventsTest(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        event_1 = self.create_event('a' * 32, group=group, datetime=self.min_ago)
-        event_2 = self.create_event('b' * 32, group=group, datetime=self.min_ago)
+        event_1 = self.create_event(event_id='a' * 32, group=group, datetime=self.min_ago)
+        event_2 = self.create_event(event_id='b' * 32, group=group, datetime=self.min_ago)
 
         url = reverse(
             'sentry-api-0-project-events',
@@ -45,9 +45,13 @@ class ProjectEventsTest(APITestCase, SnubaTestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        self.create_event('x' * 32, group=group, message="how to make fast", datetime=self.min_ago)
+        self.create_event(
+            event_id='x' * 32,
+            group=group,
+            message="how to make fast",
+            datetime=self.min_ago)
         event_2 = self.create_event(
-            'y' * 32,
+            event_id='y' * 32,
             group=group,
             message="Delet the Data",
             datetime=self.min_ago)
@@ -72,8 +76,8 @@ class ProjectEventsTest(APITestCase, SnubaTestCase):
         project = self.create_project()
         group = self.create_group(project=project)
         two_days_ago = timezone.now() - timedelta(days=2)
-        self.create_event('c' * 32, group=group, datetime=two_days_ago)
-        event_2 = self.create_event('d' * 32, group=group, datetime=self.min_ago)
+        self.create_event(event_id='c' * 32, group=group, datetime=two_days_ago)
+        event_2 = self.create_event(event_id='d' * 32, group=group, datetime=self.min_ago)
 
         with self.options({'system.event-retention-days': 1}):
             url = reverse(
diff --git a/tests/snuba/api/endpoints/test_project_tags.py b/tests/snuba/api/endpoints/test_project_tags.py
index 8e204b7a41..3b05325d39 100644
--- a/tests/snuba/api/endpoints/test_project_tags.py
+++ b/tests/snuba/api/endpoints/test_project_tags.py
@@ -25,13 +25,13 @@ class ProjectTagsTest(APITestCase, SnubaTestCase):
         project = self.create_project(organization=org, teams=[team])
         group = self.create_group(project=project)
         self.create_event(
-            'a' * 32,
+            event_id='a' * 32,
             group=group,
             datetime=self.min_ago,
             tags={'foo': 'oof', 'bar': 'rab'},
         )
         self.create_event(
-            'b' * 32,
+            event_id='b' * 32,
             group=group,
             datetime=self.min_ago,
             tags={'bar': 'rab2'},
diff --git a/tests/snuba/eventstream/test_eventstream.py b/tests/snuba/eventstream/test_eventstream.py
index bf4a4ba62f..28c7404485 100644
--- a/tests/snuba/eventstream/test_eventstream.py
+++ b/tests/snuba/eventstream/test_eventstream.py
@@ -9,11 +9,11 @@ from mock import patch, Mock
 from sentry.event_manager import EventManager
 from sentry.eventstream.kafka import KafkaEventStream
 from sentry.eventstream.snuba import SnubaEventStream
-from sentry.testutils import SnubaTestCase
+from sentry.testutils import SnubaTestCase, TestCase
 from sentry.utils import snuba, json
 
 
-class SnubaEventStreamTest(SnubaTestCase):
+class SnubaEventStreamTest(TestCase, SnubaTestCase):
     def setUp(self):
         super(SnubaEventStreamTest, self).setUp()
 
diff --git a/tests/snuba/models/test_event.py b/tests/snuba/models/test_event.py
index f0516da09c..67d8cf457b 100644
--- a/tests/snuba/models/test_event.py
+++ b/tests/snuba/models/test_event.py
@@ -2,19 +2,16 @@ from __future__ import absolute_import
 
 import calendar
 from datetime import datetime, timedelta
-import requests
-
-from django.conf import settings
 
 from sentry.api.serializers import serialize
 from sentry.models.event import Event, SnubaEvent
-from sentry.testutils import SnubaTestCase
+from sentry.testutils import SnubaTestCase, TestCase
 from sentry import nodestore
 
 
-class SnubaEventTest(SnubaTestCase):
+class SnubaEventTest(TestCase, SnubaTestCase):
     def setUp(self):
-        assert requests.post(settings.SENTRY_SNUBA + '/tests/drop').status_code == 200
+        super(SnubaEventTest, self).setUp()
 
         self.event_id = 'f' * 32
         self.now = datetime.utcnow().replace(microsecond=0) - timedelta(seconds=10)
@@ -60,7 +57,9 @@ class SnubaEventTest(SnubaTestCase):
                 group=self.proj1group1,
                 data=data,
             )
-            nodestore_data = nodestore.get(SnubaEvent.generate_node_id(self.proj1.id, self.event_id))
+            nodestore_data = nodestore.get(
+                SnubaEvent.generate_node_id(
+                    self.proj1.id, self.event_id))
             assert data['event_id'] == nodestore_data['event_id']
         else:
             node_id = SnubaEvent.generate_node_id(self.proj1.id, self.event_id)
diff --git a/tests/snuba/models/test_group.py b/tests/snuba/models/test_group.py
index fde34086bb..d361895a1d 100644
--- a/tests/snuba/models/test_group.py
+++ b/tests/snuba/models/test_group.py
@@ -4,10 +4,10 @@ from datetime import timedelta
 from django.utils import timezone
 from sentry import options
 from sentry.models import Group
-from sentry.testutils import SnubaTestCase
+from sentry.testutils import SnubaTestCase, TestCase
 
 
-class GroupTestSnuba(SnubaTestCase):
+class GroupTestSnuba(TestCase, SnubaTestCase):
     def test_get_oldest_latest_for_environments(self):
         options.set('snuba.events-queries.enabled', True)
         project = self.create_project()
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index a3d3f22879..2440f60bf8 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -22,6 +22,7 @@ from sentry.search.base import ANY
 from sentry.search.snuba.backend import SnubaSearchBackend
 from sentry.testutils import (
     SnubaTestCase,
+    TestCase,
     xfail_if_not_postgres,
 )
 from sentry.utils.snuba import (
@@ -34,7 +35,7 @@ def date_to_query_format(date):
     return date.strftime('%Y-%m-%dT%H:%M:%S')
 
 
-class SnubaSearchTest(SnubaTestCase):
+class SnubaSearchTest(TestCase, SnubaTestCase):
     def setUp(self):
         super(SnubaSearchTest, self).setUp()
         self.backend = SnubaSearchBackend()
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index 0abb7258fa..163a4aa74c 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -18,10 +18,10 @@ from sentry.tagstore.exceptions import (
     TagValueNotFound,
 )
 from sentry.tagstore.snuba.backend import SnubaTagStorage
-from sentry.testutils import SnubaTestCase
+from sentry.testutils import SnubaTestCase, TestCase
 
 
-class TagStorageTest(SnubaTestCase):
+class TagStorageTest(TestCase, SnubaTestCase):
     def setUp(self):
         super(TagStorageTest, self).setUp()
 
diff --git a/tests/snuba/test_snuba.py b/tests/snuba/test_snuba.py
index 68e424069d..106d862b7d 100644
--- a/tests/snuba/test_snuba.py
+++ b/tests/snuba/test_snuba.py
@@ -5,12 +5,11 @@ import pytest
 import time
 import uuid
 
-from sentry.testutils import SnubaTestCase
+from sentry.testutils import SnubaTestCase, TestCase
 from sentry.utils import snuba
 
 
-class SnubaTest(SnubaTestCase):
-
+class SnubaTest(TestCase, SnubaTestCase):
     def _insert_event_for_time(self, ts, hash='a' * 32, group_id=None):
         self.snuba_insert({
             'event_id': uuid.uuid4().hex,
diff --git a/tests/snuba/test_util.py b/tests/snuba/test_util.py
index 43e96048d0..4b37b40a5a 100644
--- a/tests/snuba/test_util.py
+++ b/tests/snuba/test_util.py
@@ -3,11 +3,11 @@ from __future__ import absolute_import
 from datetime import datetime, timedelta
 
 from sentry.models import GroupHash
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, SnubaTestCase
 from sentry.utils import snuba
 
 
-class SnubaUtilTest(TestCase):
+class SnubaUtilTest(TestCase, SnubaTestCase):
     def test_filter_keys_set(self):
         snuba.raw_query(
             start=datetime.now(),
diff --git a/tests/snuba/tsdb/test_tsdb_backend.py b/tests/snuba/tsdb/test_tsdb_backend.py
index a5c2b6cc69..dc512440de 100644
--- a/tests/snuba/tsdb/test_tsdb_backend.py
+++ b/tests/snuba/tsdb/test_tsdb_backend.py
@@ -12,7 +12,7 @@ from django.conf import settings
 from sentry.models import GroupHash, GroupRelease, Release
 from sentry.tsdb.base import TSDBModel
 from sentry.tsdb.snuba import SnubaTSDB
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, SnubaTestCase
 from sentry.utils.dates import to_timestamp
 
 
@@ -51,9 +51,9 @@ def has_shape(data, shape, allow_empty=False):
         return True
 
 
-class SnubaTSDBTest(TestCase):
+class SnubaTSDBTest(TestCase, SnubaTestCase):
     def setUp(self):
-        assert requests.post(settings.SENTRY_SNUBA + '/tests/drop').status_code == 200
+        super(SnubaTSDBTest, self).setUp()
 
         self.db = SnubaTSDB()
         self.now = datetime.utcnow().replace(
