commit b2509cb24d567e6562a3c3a978aa62abe20517d0
Author: Lovepreet Sangha <lovepreetssangha@gmail.com>
Date:   Wed Jun 13 17:33:51 2018 -0700

    fix: Alert Rules Conditions and Actions (#8673)
    
    * fix(alerts)  Ensure Rules are required in Alert Rules
    
    Users will get an error if they leave an alert condition empty or deleted such as when an event is seen and take these actions.
    
    * added action required
    
    * fix: Alert Rules Conditions and Actions
    
    Users are notified with a 400 error when they are missing a condition or action when updating their alert rules.
    
    * now shows up U/I
    
    * Update rule.py
    
    Cleaned up the functions

diff --git a/src/sentry/api/serializers/rest_framework/rule.py b/src/sentry/api/serializers/rest_framework/rule.py
index 29e3bd3ea9..b6c4168ba0 100644
--- a/src/sentry/api/serializers/rest_framework/rule.py
+++ b/src/sentry/api/serializers/rest_framework/rule.py
@@ -88,6 +88,20 @@ class RuleSerializer(serializers.Serializer):
 
         return attrs
 
+    def validate_conditions(self, attrs, source):
+        name = attrs.get(source)
+        if not name:
+            raise serializers.ValidationError(u'Must select a condition')
+
+        return attrs
+
+    def validate_actions(self, attrs, source):
+        name = attrs.get(source)
+        if not name:
+            raise serializers.ValidationError(u'Must select an action')
+
+        return attrs
+
     def save(self, rule):
         rule.project = self.context['project']
         if 'environment' in self.data:
diff --git a/tests/sentry/api/endpoints/test_project_rule_details.py b/tests/sentry/api/endpoints/test_project_rule_details.py
index dc7da65216..548133816f 100644
--- a/tests/sentry/api/endpoints/test_project_rule_details.py
+++ b/tests/sentry/api/endpoints/test_project_rule_details.py
@@ -201,8 +201,12 @@ class UpdateProjectRuleTest(APITestCase):
                 'name': 'hello world',
                 'environment': 'production',
                 'actionMatch': 'any',
-                'actions': [],
-                'conditions': []
+                'actions': [{
+                    'id': 'sentry.rules.actions.notify_event.NotifyEventAction'
+                }],
+                'conditions': [{
+                    'id': 'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition'
+                }],
             },
             format='json'
         )
@@ -246,8 +250,12 @@ class UpdateProjectRuleTest(APITestCase):
                 'name': 'hello world',
                 'environment': None,
                 'actionMatch': 'any',
-                'actions': [],
-                'conditions': []
+                'actions': [{
+                    'id': 'sentry.rules.actions.notify_event.NotifyEventAction'
+                }],
+                'conditions': [{
+                    'id': 'sentry.rules.conditions.first_seen_event.FirstSeenEventCondition'
+                }],
             },
             format='json'
         )
@@ -283,6 +291,7 @@ class UpdateProjectRuleTest(APITestCase):
                 'conditions': [{
                     'id': 'sentry.rules.actions.notify_event.NotifyEventAction'
                 }],
+                'actions': []
             },
             format='json'
         )
@@ -309,9 +318,12 @@ class UpdateProjectRuleTest(APITestCase):
             data={
                 'name': 'hello world',
                 'actionMatch': 'any',
+                'conditions': [{
+                    'id': 'sentry.rules.actions.notify_event.NotifyEventAction'
+                }],
                 'actions': [{
                     'id': 'foo'
-                }],
+                }]
             },
             format='json'
         )
@@ -341,12 +353,73 @@ class UpdateProjectRuleTest(APITestCase):
                 'conditions': [{
                     'id': 'sentry.rules.conditions.tagged_event.TaggedEventCondition'
                 }],
+                'actions': []
             },
             format='json'
         )
 
         assert response.status_code == 400, response.content
 
+        def test_rule_form_missing_condition(self):
+            self.login_as(user=self.user)
+
+            project = self.create_project()
+
+            rule = Rule.objects.create(project=project, label='foo')
+
+            url = reverse(
+                'sentry-api-0-project-rule-details',
+                kwargs={
+                    'organization_slug': project.organization.slug,
+                    'project_slug': project.slug,
+                    'rule_id': rule.id,
+                }
+            )
+            response = self.client.put(
+                url,
+                data={
+                    'name': 'hello world',
+                    'actionMatch': 'any',
+                    'conditions': [],
+                    'actions': [{
+                        'id': 'sentry.rules.actions.notify_event.NotifyEventAction'
+                    }],
+                },
+                format='json'
+            )
+
+            assert response.status_code == 400, response.content
+
+        def test_rule_form_missing_action(self):
+            self.login_as(user=self.user)
+
+            project = self.create_project()
+
+            rule = Rule.objects.create(project=project, label='foo')
+
+            url = reverse(
+                'sentry-api-0-project-rule-details',
+                kwargs={
+                    'organization_slug': project.organization.slug,
+                    'project_slug': project.slug,
+                    'rule_id': rule.id,
+                }
+            )
+            response = self.client.put(
+                url,
+                data={
+                    'name': 'hello world',
+                    'actionMatch': 'any',
+                    'action': [],
+                    'conditions': [{
+                        'id': 'sentry.rules.conditions.tagged_event.TaggedEventCondition'
+                    }],
+                },
+                format='json'
+            )
+
+            assert response.status_code == 400, response.content
+
 
 class DeleteProjectRuleTest(APITestCase):
     def test_simple(self):
