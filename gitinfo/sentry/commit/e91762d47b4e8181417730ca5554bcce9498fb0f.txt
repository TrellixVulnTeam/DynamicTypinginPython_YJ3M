commit e91762d47b4e8181417730ca5554bcce9498fb0f
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Oct 11 11:37:52 2018 -0700

    test(discover): Add tests for result component (#10070)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index c0cf7b5bea..4a8e79186a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -28,9 +28,9 @@ import {NUMBER_OF_SERIES_BY_DAY} from '../data';
 
 export default class Result extends React.Component {
   static propTypes = {
-    organization: SentryTypes.Organization,
-    data: PropTypes.object,
-    queryBuilder: PropTypes.object,
+    organization: SentryTypes.Organization.isRequired,
+    data: PropTypes.object.isRequired,
+    queryBuilder: PropTypes.object.isRequired,
     savedQuery: SentryTypes.DiscoverSavedQuery, // Provided if it's a saved search
   };
 
@@ -184,16 +184,18 @@ export default class Result extends React.Component {
         {!isEditMode && (
           <Flex>
             <Heading>{t('Result')}</Heading>
-            <SavedQueryAction onClick={this.toggleEditMode}>{t('Save')}</SavedQueryAction>
+            <SavedQueryAction data-test-id="save" onClick={this.toggleEditMode}>
+              {t('Save')}
+            </SavedQueryAction>
           </Flex>
         )}
         {isEditMode && (
           <Flex>
             <EditableName value={savedQueryName} onChange={this.updateSavedQueryName} />
-            <SavedQueryAction onClick={this.confirmSave}>
+            <SavedQueryAction data-test-id="confirm" onClick={this.confirmSave}>
               {t('Confirm save')}
             </SavedQueryAction>
-            <SavedQueryAction onClick={this.toggleEditMode}>
+            <SavedQueryAction data-test-id="cancel" onClick={this.toggleEditMode}>
               {t('Cancel')}
             </SavedQueryAction>
           </Flex>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 669b1f8a70..22c80adf9c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -122,8 +122,8 @@ export function fetchSavedQueries(organization) {
 
 export function createSavedQuery(organization, data) {
   const api = new Client();
-  const endpoint = `/organizations/${organization.slug}/discover/saved/`;
 
+  const endpoint = `/organizations/${organization.slug}/discover/saved/`;
   return api.requestPromise(endpoint, {
     method: 'POST',
     data,
diff --git a/tests/js/fixtures/discover.js b/tests/js/fixtures/discover.js
new file mode 100644
index 0000000000..49f33bca8f
--- /dev/null
+++ b/tests/js/fixtures/discover.js
@@ -0,0 +1,9 @@
+export function DiscoverSavedQuery(params) {
+  return {
+    id: '1',
+    name: 'Saved query #1',
+    dateCreated: new Date().toString(),
+    dateUpdated: new Date().toString(),
+    fields: ['test'],
+  };
+}
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index d207c59920..903bafbfa0 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -24,21 +24,13 @@ describe('Discover', function() {
       queryBuilder.fetch = jest.fn(() => Promise.resolve(mockResponse));
     });
     it('auto-runs saved query', async function() {
-      const savedQuery = {
-        id: '1',
-        name: 'Saved query #1',
-        dateCreated: new Date().toString(),
-        dateUpdated: new Date().toString(),
-        fields: ['test'],
-      };
-
       wrapper = mount(
         <Discover
           queryBuilder={queryBuilder}
           organization={organization}
           params={{}}
           updateSavedQueryData={() => {}}
-          savedQuery={savedQuery}
+          savedQuery={TestStubs.DiscoverSavedQuery()}
         />,
         TestStubs.routerContext([{organization}])
       );
@@ -214,19 +206,12 @@ describe('Discover', function() {
 
     describe('saved query', function() {
       it('resets saved query', function() {
-        const savedQuery = {
-          id: '1',
-          name: 'Saved query #1',
-          dateCreated: new Date().toString(),
-          dateUpdated: new Date().toString(),
-          fields: ['test'],
-        };
         const wrapper = mount(
           <Discover
             queryBuilder={queryBuilder}
             organization={organization}
             params={{}}
-            savedQuery={savedQuery}
+            savedQuery={TestStubs.DiscoverSavedQuery()}
           />,
           TestStubs.routerContext()
         );
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
new file mode 100644
index 0000000000..4e9aef26a1
--- /dev/null
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -0,0 +1,103 @@
+import React from 'react';
+import {mount, shallow} from 'enzyme';
+
+import Result from 'app/views/organizationDiscover/result';
+import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+
+describe('Result', function() {
+  describe('New query', function() {
+    describe('Basic query', function() {
+      let wrapper, queryBuilder;
+      beforeEach(function() {
+        const organization = TestStubs.Organization();
+        queryBuilder = createQueryBuilder({}, organization);
+        queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
+
+        const data = {
+          baseQuery: {
+            query: queryBuilder.getInternal(),
+            data: {data: [], meta: [], timing: {duration_ms: 15}},
+          },
+          byDayQuery: {
+            query: null,
+            data: null,
+          },
+        };
+        wrapper = shallow(
+          <Result queryBuilder={queryBuilder} data={data} organization={organization} />
+        );
+      });
+
+      afterEach(function() {
+        MockApiClient.clearMockResponses();
+      });
+
+      it('displays options', function() {
+        const buttons = wrapper.find('.btn-group').find('a');
+        expect(buttons).toHaveLength(3);
+      });
+
+      it('toggles', function() {
+        expect(wrapper.find('ResultTable')).toHaveLength(1);
+        expect(wrapper.find('LineChart')).toHaveLength(0);
+        wrapper
+          .find('.btn-group')
+          .find('a')
+          .at('1')
+          .simulate('click');
+        wrapper.update();
+        expect(wrapper.find('ResultTable')).toHaveLength(0);
+        expect(wrapper.find('LineChart')).toHaveLength(1);
+      });
+
+      it('can be saved', async function() {
+        const createMock = MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/discover/saved/',
+          method: 'POST',
+        });
+
+        wrapper.find('SavedQueryAction[data-test-id="save"]').simulate('click');
+        wrapper.find('SavedQueryAction[data-test-id="confirm"]').simulate('click');
+        await tick();
+        expect(createMock).toHaveBeenCalledWith(
+          '/organizations/org-slug/discover/saved/',
+          expect.objectContaining({
+            data: expect.objectContaining(queryBuilder.getExternal()),
+          })
+        );
+      });
+    });
+  });
+
+  describe('Saved query', function() {
+    let wrapper, queryBuilder;
+    beforeEach(function() {
+      const organization = TestStubs.Organization();
+      queryBuilder = createQueryBuilder({}, organization);
+      queryBuilder.updateField('aggregations', [['count()', null, 'count']]);
+
+      const data = {
+        baseQuery: {
+          query: queryBuilder.getInternal(),
+          data: {data: [], meta: [], timing: {duration_ms: 15}},
+        },
+        byDayQuery: {
+          query: null,
+          data: null,
+        },
+      };
+      wrapper = mount(
+        <Result
+          queryBuilder={queryBuilder}
+          data={data}
+          organization={organization}
+          savedQuery={TestStubs.DiscoverSavedQuery()}
+        />
+      );
+    });
+
+    it('renders query name', function() {
+      expect(wrapper.find('Heading').text()).toBe('Saved query #1');
+    });
+  });
+});
