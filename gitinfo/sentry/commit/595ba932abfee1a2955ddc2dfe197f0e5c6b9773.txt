commit 595ba932abfee1a2955ddc2dfe197f0e5c6b9773
Author: Jess MacQueen <jess@getsentry.com>
Date:   Thu Jul 28 14:56:42 2016 -0700

    pr feedback

diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 75fa3ed6f2..304fb7322e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -283,6 +283,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/(?:user-feedback|user-reports)/$',
         ProjectUserReportsEndpoint.as_view(),
         name='sentry-api-0-project-user-reports'),
+    # Load plugin project urls
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugin/',
+        include('sentry.plugins.base.project_api_urls')),
 
     # Groups
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/$',
@@ -327,6 +330,9 @@ urlpatterns = patterns(
     url(r'^(?:issues|groups)/(?P<issue_id>\d+)/(?:user-feedback|user-reports)/$',
         GroupUserReportsEndpoint.as_view(),
         name='sentry-api-0-group-user-reports'),
+    # Load plugin group urls
+    url(r'^(?:issues|groups)/(?P<issue_id>\d+)/plugin/',
+        include('sentry.plugins.base.group_api_urls')),
 
     url(r'^shared/(?:issues|groups)/(?P<share_id>[^\/]+)/$',
         SharedGroupDetailsEndpoint.as_view(),
@@ -356,9 +362,6 @@ urlpatterns = patterns(
         InternalStatsEndpoint.as_view(),
         name='sentry-api-0-internal-stats'),
 
-    # Plugin api
-    url(r'^', include('sentry.plugins.base.api_urls')),
-
     url(r'^$',
         IndexEndpoint.as_view(),
         name='sentry-api-index'),
diff --git a/src/sentry/plugins/base/group_api_urls.py b/src/sentry/plugins/base/group_api_urls.py
new file mode 100644
index 0000000000..4fc83ee8c8
--- /dev/null
+++ b/src/sentry/plugins/base/group_api_urls.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, include, url
+
+from sentry.plugins import plugins, IssueTrackingPlugin2
+
+
+urlpatterns = patterns('')
+
+for _plugin in plugins.all():
+    if isinstance(_plugin, IssueTrackingPlugin2):
+        _plugin_group_urls = _plugin.get_group_urls()
+        if _plugin_group_urls:
+            urlpatterns += (url(r'^%s/' % _plugin.slug, include(_plugin_group_urls)),)
diff --git a/src/sentry/plugins/base/api_urls.py b/src/sentry/plugins/base/project_api_urls.py
similarity index 61%
rename from src/sentry/plugins/base/api_urls.py
rename to src/sentry/plugins/base/project_api_urls.py
index 3eb0efff20..b99c2e7c8d 100644
--- a/src/sentry/plugins/base/api_urls.py
+++ b/src/sentry/plugins/base/project_api_urls.py
@@ -9,9 +9,6 @@ urlpatterns = patterns('')
 
 for _plugin in plugins.all():
     if isinstance(_plugin, IssueTrackingPlugin2):
-        _plugin_group_urls = _plugin.get_group_urls()
-        if _plugin_group_urls:
-            urlpatterns += (url('^', include(_plugin_group_urls)),)
         _plugin_project_urls = _plugin.get_project_urls()
         if _plugin_project_urls:
-            urlpatterns += (url('^', include(_plugin_project_urls)),)
+            urlpatterns += (url(r'^%s/' % _plugin.slug, include(_plugin_project_urls)),)
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index e67a38d92c..c3717bebaf 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -62,8 +62,9 @@ class IssueTrackingPlugin2(Plugin):
         _urls = []
         for action in self.allowed_actions:
             view_method_name = 'view_%s' % action
-            _urls.append(url(r'^(?:issues|groups)/(?P<issue_id>\d+)/plugin/{action}/{slug}/'.format(action=action, slug=self.slug),
-                             IssueGroupActionEndpoint.as_view(view_method_name=view_method_name, plugin=self)))
+            _urls.append(url(r'^%s/' % action,
+                             IssueGroupActionEndpoint.as_view(view_method_name=view_method_name,
+                                                              plugin=self)))
 
         return patterns('', *_urls)
 
@@ -72,12 +73,13 @@ class IssueTrackingPlugin2(Plugin):
         # TODO: add enable here when moved to api
         for action in ('configure', 'disable'):
             view_method_name = 'view_%s' % action
-            _urls.append(url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/plugin/{action}/{slug}'.format(action=action, slug=self.slug),
-                             IssuePluginProjectEndpoint.as_view(view_method_name=view_method_name, plugin=self)))
+            _urls.append(url(r'^%s/' % action,
+                             IssuePluginProjectEndpoint.as_view(view_method_name=view_method_name,
+                                                                plugin=self)))
 
         return patterns('', *_urls)
 
-    def _get_group_body(self, request, group, event, **kwargs):
+    def get_group_body(self, request, group, event, **kwargs):
         result = []
         for interface in event.interfaces.itervalues():
             output = safe_execute(interface.to_string, event, _with_transaction=False)
@@ -85,11 +87,11 @@ class IssueTrackingPlugin2(Plugin):
                 result.append(output)
         return '\n\n'.join(result)
 
-    def _get_group_description(self, request, group, event):
+    def get_group_description(self, request, group, event):
         output = [
             absolute_uri(group.get_absolute_url()),
         ]
-        body = self._get_group_body(request, group, event)
+        body = self.get_group_body(request, group, event)
         if body:
             output.extend([
                 '',
@@ -99,7 +101,7 @@ class IssueTrackingPlugin2(Plugin):
             ])
         return '\n'.join(output)
 
-    def _get_group_title(self, request, group, event):
+    def get_group_title(self, request, group, event):
         return event.error()
 
     def is_configured(self, request, project, **kwargs):
@@ -130,7 +132,7 @@ class IssueTrackingPlugin2(Plugin):
         if not request.user.is_authenticated():
             return True
 
-        return bool(not UserSocialAuth.objects.filter(user=request.user, provider=self.auth_provider).exists())
+        return not UserSocialAuth.objects.filter(user=request.user, provider=self.auth_provider).exists()
 
     def get_new_issue_fields(self, request, group, event, **kwargs):
         """
@@ -139,12 +141,12 @@ class IssueTrackingPlugin2(Plugin):
         return [{
             'name': 'title',
             'label': 'Title',
-            'default': self._get_group_title(request, group, event),
+            'default': self.get_group_title(request, group, event),
             'type': 'text'
         }, {
             'name': 'description',
             'label': 'Description',
-            'default': self._get_group_description(request, group, event),
+            'default': self.get_group_description(request, group, event),
             'type': 'textarea'
         }]
 
@@ -235,7 +237,7 @@ class IssueTrackingPlugin2(Plugin):
             return Response({
                 'error_type': 'validation',
                 'errors': [{'__all__': e.message}]
-            })
+            }, status=400)
         GroupMeta.objects.set_value(group, '%s:tid' % self.get_conf_key(), issue_id)
 
         issue_information = {
@@ -290,7 +292,7 @@ class IssueTrackingPlugin2(Plugin):
             return Response({
                 'error_type': 'validation',
                 'errors': [{'__all__': e.message}]
-            })
+            }, status=400)
 
         issue_id = int(request.DATA['issue_id'])
         GroupMeta.objects.set_value(group, '%s:tid' % self.get_conf_key(), issue_id)
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
index 284f2bc6ff..df955ba77f 100644
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -45,17 +45,17 @@ const IssuePlugin = React.createClass({
 
   getPluginCreateEndpoint() {
     return ('/issues/' + this.getGroup().id +
-            '/plugin/create/' + this.props.plugin.slug + '/');
+            '/plugin/' + this.props.plugin.slug + '/create/');
   },
 
   getPluginLinkEndpoint() {
     return ('/issues/' + this.getGroup().id +
-            '/plugin/link/' + this.props.plugin.slug + '/');
+            '/plugin/' + this.props.plugin.slug + '/link/');
   },
 
   getPluginUnlinkEndpoint() {
     return ('/issues/' + this.getGroup().id +
-            '/plugin/unlink/' + this.props.plugin.slug + '/');
+            '/plugin/' + this.props.plugin.slug + '/unlink/');
   },
 
   setError(error, defaultMessage) {
@@ -204,7 +204,7 @@ const IssuePlugin = React.createClass({
       case 'select':
         if (field.has_autocomplete) {
           props.url = ('/api/0/issues/' + this.getGroup().id +
-                       '/plugin/autocomplete/' + this.props.plugin.slug);
+                       '/plugin/' + this.props.plugin.slug + '/autocomplete');
           el = <Select2FieldAutocomplete {...props} />;
         } else {
           props.choices = field.choices;
diff --git a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
index cd2889910d..a9f6841a63 100644
--- a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
+++ b/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
@@ -30,7 +30,7 @@ const IssuePluginConfigForm = React.createClass({
     let org = this.props.organization;
     let project = this.props.project;
     return ('/projects/' + org.slug + '/' + project.slug +
-            '/plugin/configure/' + this.props.plugin.slug + '/');
+            '/plugin/' + this.props.plugin.slug + '/configure/');
   },
 
   fetchData() {
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index 1aad06ad3d..0f3fecf4d3 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -17,7 +17,7 @@ const IssuePluginConfiguration = React.createClass({
     let org = this.props.organization;
     let project = this.props.project;
     return ('/projects/' + org.slug + '/' + project.slug +
-            '/plugin/disable/' + plugin.slug + '/');
+            '/plugin/' + plugin.slug + '/disable/');
   },
 
   disablePlugin(plugin) {
diff --git a/src/sentry/templates/sentry/project-issue-tracking.html b/src/sentry/templates/sentry/project-issue-tracking.html
index a4adf05bfa..96aa8c8f2d 100644
--- a/src/sentry/templates/sentry/project-issue-tracking.html
+++ b/src/sentry/templates/sentry/project-issue-tracking.html
@@ -64,7 +64,7 @@
 
   <script>
   $(function(){
-    React.render(React.createFactory(Sentry.IssuePluginConfiguration)({
+    ReactDOM.render(React.createFactory(Sentry.IssuePluginConfiguration)({
       project: {% serialize project %},
       organization: {% serialize organization %},
       plugins: {% serialize issue_v2_plugins %}
diff --git a/src/sentry/templates/sentry/projects/plugins/configure.html b/src/sentry/templates/sentry/projects/plugins/configure.html
index 3830609101..0f60887f2d 100644
--- a/src/sentry/templates/sentry/projects/plugins/configure.html
+++ b/src/sentry/templates/sentry/projects/plugins/configure.html
@@ -83,7 +83,7 @@
     {% if issue_v2_plugin %}
         <script>
         $(function(){
-            React.render(React.createFactory(Sentry.IssuePluginConfigForm)({
+            ReactDOM.render(React.createFactory(Sentry.IssuePluginConfigForm)({
                 project: {% serialize project %},
                 organization: {% serialize organization %},
                 plugin: {% serialize issue_v2_plugin %}
diff --git a/tests/sentry/plugins/bases/issue/tests.py b/tests/sentry/plugins/bases/issue/tests.py
index 09073f44b2..937c65ad31 100644
--- a/tests/sentry/plugins/bases/issue/tests.py
+++ b/tests/sentry/plugins/bases/issue/tests.py
@@ -79,7 +79,7 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_get_create(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/create/issuetrackingplugin2/' % self.group.id
+        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/create/' % self.group.id
         response = self.client.get(url, format='json')
         content = json.loads(response.content)
         field_names = [field['name'] for field in content]
@@ -91,7 +91,7 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_post_create_invalid(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/create/issuetrackingplugin2/' % self.group.id
+        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/create/' % self.group.id
         response = self.client.post(url, data={
             'title': '',
             'description': ''
@@ -105,7 +105,7 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.get_issue_url', return_value='')
     def test_post_create_valid(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/create/issuetrackingplugin2/' % self.group.id
+        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/create/' % self.group.id
         response = self.client.post(url, data={
             'title': 'test',
             'description': 'test'
@@ -117,14 +117,14 @@ class IssuePlugin2GroupAction(TestCase):
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_get_link(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/link/issuetrackingplugin2/' % self.group.id
+        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/link/' % self.group.id
         response = self.client.get(url, format='json')
         assert response.status_code == 200
 
     @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
     def test_get_unlink_invalid(self, *args):
         self.login_as(user=self.user)
-        url = '/api/0/issues/%s/plugin/unlink/issuetrackingplugin2/' % self.group.id
+        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/unlink/' % self.group.id
         response = self.client.get(url, format='json')
         assert response.status_code == 400
 
@@ -133,7 +133,7 @@ class IssuePlugin2GroupAction(TestCase):
         self.login_as(user=self.user)
         id_ = '%s:tid' % self.plugin_instance.get_conf_key()
         GroupMeta.objects.set_value(self.group, id_, 4)
-        url = '/api/0/issues/%s/plugin/unlink/issuetrackingplugin2/' % self.group.id
+        url = '/api/0/issues/%s/plugin/issuetrackingplugin2/unlink/' % self.group.id
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         GroupMeta.objects.populate_cache([self.group])
@@ -151,7 +151,7 @@ class IssuePlugin2ProjectAction(TestCase):
     def test_get_configure(self, *args):
         self.login_as(user=self.user)
         url = ('/api/0/projects/%s/%s/plugin/'
-               'configure/issuetrackingplugin2/') % (self.project.organization.slug,
+               'issuetrackingplugin2/configure/') % (self.project.organization.slug,
                                                      self.project.slug)
         response = self.client.get(url, format='json')
         assert response.status_code == 200
@@ -159,7 +159,7 @@ class IssuePlugin2ProjectAction(TestCase):
     def test_get_disable(self, *args):
         self.login_as(user=self.user)
         url = ('/api/0/projects/%s/%s/plugin/'
-               'disable/issuetrackingplugin2/') % (self.project.organization.slug,
+               'issuetrackingplugin2/disable/') % (self.project.organization.slug,
                                                    self.project.slug)
         response = self.client.get(url, format='json')
         assert response.status_code == 200
