commit 182f90f56e83fa0f7fe1a2e512e90841b29ba25d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 17 01:16:34 2017 +0100

    Restructured tests and module patching for JS platforms

diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 6b3ae2a4e0..df6111d7c6 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 from ua_parser.user_agent_parser import Parse
 
 from sentry.plugins import Plugin2
+from sentry.stacktraces import find_stacktraces_in_data
 
 from .processor import JavaScriptStacktraceProcessor
 from .errormapping import rewrite_exception
@@ -12,9 +13,23 @@ def preprocess_event(data):
     rewrite_exception(data)
     fix_culprit(data)
     inject_device_data(data)
+    generate_modules(data)
     return data
 
 
+def generate_modules(data):
+    from sentry.lang.javascript.processor import generate_module
+
+    for info in find_stacktraces_in_data(data):
+        for frame in info.stacktrace['frames']:
+            platform = frame.get('platform') or data['platform']
+            if platform != 'javascript' or platform.get('module'):
+                continue
+            abs_path = frame.get('abs_path')
+            if abs_path and abs_path.startswith(('http:', 'https:', 'webpack:')):
+                frame['module'] = generate_module(abs_path)
+
+
 def fix_culprit(data):
     exc = data.get('sentry.interfaces.Exception')
     if not exc:
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index a35200534f..104b4e025d 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -790,14 +790,8 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                 'source': new_frame['abs_path'],
             })
 
-        changed_module = False
-        if not new_frame.get('module') and frame['abs_path'].startswith(
-                ('http:', 'https:', 'webpack:')):
-            new_frame['module'] = generate_module(frame['abs_path'])
-            changed_module = True
-
         processed_raw_frame = sourcemap_applied and self.process_raw_frame(raw_frame)
-        if sourcemap_applied or changed_module or all_errors or processed_raw_frame:
+        if sourcemap_applied or all_errors or processed_raw_frame:
             if in_app is not None:
                 new_frame['in_app'] = in_app
                 raw_frame['in_app'] = in_app
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 0ea1681c04..1e6c5033c6 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -10,10 +10,9 @@ from libsourcemap import Token
 from mock import patch
 from requests.exceptions import RequestException
 
-from sentry.interfaces.stacktrace import Stacktrace
 from sentry.lang.javascript.processor import (
     BadSource, discover_sourcemap, fetch_sourcemap, fetch_file, generate_module,
-    SourceProcessor, trim_line, UrlResult, fetch_release_file, CannotFetchSource,
+    trim_line, UrlResult, fetch_release_file, CannotFetchSource,
     UnparseableSourcemap,
 )
 from sentry.lang.javascript.errormapping import (
@@ -304,130 +303,71 @@ class TrimLineTest(TestCase):
         assert trim_line(self.long_line, column=9999) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
 
 
-class SourceProcessorTest(TestCase):
-    def test_get_stacktraces_returns_stacktrace_interface(self):
-        data = {
-            'message': 'hello',
-            'platform': 'javascript',
-            'sentry.interfaces.Stacktrace': {
-                'frames': [
-                    {
-                        'abs_path': 'http://example.com/foo.js',
-                        'filename': 'foo.js',
-                        'lineno': 4,
-                        'colno': 0,
-                    },
-                    {
-                        'abs_path': 'http://example.com/foo.js',
-                        'filename': 'foo.js',
-                        'lineno': 1,
-                        'colno': 0,
-                    },
-                ],
-            },
-        }
-
-        processor = SourceProcessor(project=self.project)
-        result = processor.get_stacktraces(data)
-        assert len(result) == 1
-        assert type(result[0][1]) is Stacktrace
-
-    def test_get_stacktraces_returns_exception_interface(self):
-        data = {
-            'message': 'hello',
-            'platform': 'javascript',
-            'sentry.interfaces.Exception': {
-                'values': [{
-                    'type': 'Error',
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                            },
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 1,
-                                'colno': 0,
-                            },
-                        ],
-                    },
-                }],
-            }
-        }
-
-        processor = SourceProcessor(project=self.project)
-        result = processor.get_stacktraces(data)
-        assert len(result) == 1
-        assert type(result[0][1]) is Stacktrace
-
-    def test_get_culprit_is_patched(self):
-        data = {
-            'message': 'hello',
-            'platform': 'javascript',
-            'sentry.interfaces.Exception': {
-                'values': [{
-                    'type': 'Error',
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                                'function': 'thing',
-                            },
-                            {
-                                'abs_path': 'http://example.com/bar.js',
-                                'filename': 'bar.js',
-                                'lineno': 1,
-                                'colno': 0,
-                                'function': 'oops',
-                            },
-                        ],
-                    },
-                }],
-            }
+def test_get_culprit_is_patched():
+    from sentry.lang.javascript.plugin import fix_culprit
+
+    data = {
+        'message': 'hello',
+        'platform': 'javascript',
+        'sentry.interfaces.Exception': {
+            'values': [{
+                'type': 'Error',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            'abs_path': 'http://example.com/foo.js',
+                            'filename': 'foo.js',
+                            'lineno': 4,
+                            'colno': 0,
+                            'function': 'thing',
+                        },
+                        {
+                            'abs_path': 'http://example.com/bar.js',
+                            'filename': 'bar.js',
+                            'lineno': 1,
+                            'colno': 0,
+                            'function': 'oops',
+                        },
+                    ],
+                },
+            }],
         }
-
-        processor = SourceProcessor(project=self.project)
-        result = processor.process(data)
-        assert result['culprit'] == 'bar in oops'
-
-    def test_ensure_module_names(self):
-        data = {
-            'message': 'hello',
-            'platform': 'javascript',
-            'sentry.interfaces.Exception': {
-                'values': [{
-                    'type': 'Error',
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                                'function': 'thing',
-                            },
-                            {
-                                'abs_path': 'http://example.com/foo/bar.js',
-                                'filename': 'bar.js',
-                                'lineno': 1,
-                                'colno': 0,
-                                'function': 'oops',
-                            },
-                        ],
-                    },
-                }],
-            }
+    }
+    fix_culprit(data)
+    assert data['culprit'] == 'bar in oops'
+
+
+def test_ensure_module_names():
+    from sentry.lang.javascript.plugin import generate_modules
+    data = {
+        'message': 'hello',
+        'platform': 'javascript',
+        'sentry.interfaces.Exception': {
+            'values': [{
+                'type': 'Error',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            'filename': 'foo.js',
+                            'lineno': 4,
+                            'colno': 0,
+                            'function': 'thing',
+                        },
+                        {
+                            'abs_path': 'http://example.com/foo/bar.js',
+                            'filename': 'bar.js',
+                            'lineno': 1,
+                            'colno': 0,
+                            'function': 'oops',
+                        },
+                    ],
+                },
+            }],
         }
-        processor = SourceProcessor(project=self.project)
-        result = processor.process(data)
-        exc = result['sentry.interfaces.Exception']['values'][0]
-        assert exc['stacktrace']['frames'][1]['module'] == 'foo/bar'
+    }
+    generate_modules(data)
+    exc = data['sentry.interfaces.Exception']['values'][0]
+    assert exc['stacktrace']['frames'][1]['module'] == 'foo/bar'
 
 
 class ErrorMappingTest(TestCase):
diff --git a/tests/sentry/test_stacktraces.py b/tests/sentry/test_stacktraces.py
new file mode 100644
index 0000000000..33e625a8cf
--- /dev/null
+++ b/tests/sentry/test_stacktraces.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+
+from sentry.stacktraces import find_stacktraces_in_data
+
+
+def test_stacktraces_basics():
+    data = {
+        'message': 'hello',
+        'platform': 'javascript',
+        'sentry.interfaces.Stacktrace': {
+            'frames': [
+                {
+                    'abs_path': 'http://example.com/foo.js',
+                    'filename': 'foo.js',
+                    'lineno': 4,
+                    'colno': 0,
+                },
+                {
+                    'abs_path': 'http://example.com/foo.js',
+                    'filename': 'foo.js',
+                    'lineno': 1,
+                    'colno': 0,
+                },
+            ],
+        },
+    }
+
+    infos = find_stacktraces_in_data(data)
+    assert len(infos) == 1
+    assert len(infos[0].stacktrace['frames']) == 2
+    assert infos[0].platforms == set(['javascript'])
+
+
+def test_get_stacktraces_returns_exception_interface():
+    data = {
+        'message': 'hello',
+        'platform': 'javascript',
+        'sentry.interfaces.Exception': {
+            'values': [{
+                'type': 'Error',
+                'stacktrace': {
+                    'frames': [
+                        {
+                            'abs_path': 'http://example.com/foo.js',
+                            'filename': 'foo.js',
+                            'lineno': 4,
+                            'colno': 0,
+                        },
+                        {
+                            'abs_path': 'http://example.com/foo.js',
+                            'filename': 'foo.js',
+                            'lineno': 1,
+                            'colno': 0,
+                        },
+                    ],
+                },
+            }],
+        }
+    }
+
+    infos = find_stacktraces_in_data(data)
+    assert len(infos) == 1
+    assert len(infos[0].stacktrace['frames']) == 2
