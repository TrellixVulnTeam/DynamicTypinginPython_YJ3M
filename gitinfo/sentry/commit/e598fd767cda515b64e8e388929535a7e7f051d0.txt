commit e598fd767cda515b64e8e388929535a7e7f051d0
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue Mar 24 08:38:57 2020 -0700

    ref(ecosystem): remove old integration code (#17823)

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.tsx b/src/sentry/static/sentry/app/actionCreators/modal.tsx
index d41a6e9446..ada4a2b2be 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.tsx
@@ -3,13 +3,7 @@ import {css} from '@emotion/core';
 import {ModalHeader, ModalBody, ModalFooter} from 'react-bootstrap';
 
 import ModalActions from 'app/actions/modalActions';
-import {
-  Integration,
-  IntegrationProvider,
-  Organization,
-  SentryApp,
-  Project,
-} from 'app/types';
+import {Organization, SentryApp, Project} from 'app/types';
 
 export type ModalRenderProps = {
   closeModal: () => void;
@@ -156,23 +150,6 @@ export async function openTeamAccessRequestModal(options: TeamAccessRequestModal
   });
 }
 
-export type IntegrationDetailsModalOptions = {
-  onAddIntegration: (integration: Integration) => void;
-  provider: IntegrationProvider;
-  organization: Organization;
-  isInstalled: boolean; //used for analytics
-  onCloseModal?: () => void; //used for analytics
-};
-
-export async function openIntegrationDetails(options: IntegrationDetailsModalOptions) {
-  const mod = await import(
-    /* webpackChunkName: "IntegrationDetailsModal" */ 'app/components/modals/integrationDetailsModal'
-  );
-  const {default: Modal} = mod;
-
-  openModal(deps => <Modal {...deps} {...options} />);
-}
-
 export async function redirectToProject(newProjectSlug: string) {
   const mod = await import(
     /* webpackChunkName: "RedirectToProjectModal" */ 'app/components/modals/redirectToProject'
@@ -201,15 +178,6 @@ export type SentryAppDetailsModalOptions = {
   onCloseModal?: () => void; //used for analytics
 };
 
-export async function openSentryAppDetailsModal(options: SentryAppDetailsModalOptions) {
-  const mod = await import(
-    /* webpackChunkName: "SentryAppDetailsModal" */ 'app/components/modals/sentryAppDetailsModal'
-  );
-  const {default: Modal} = mod;
-
-  openModal(deps => <Modal {...deps} {...options} />);
-}
-
 export async function openDebugFileSourceModal(options: ModalOptions = {}) {
   const mod = await import(
     /* webpackChunkName: "DebugFileSourceModal" */ 'app/components/modals/debugFileSourceModal'
diff --git a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
deleted file mode 100644
index f7b925fdf6..0000000000
--- a/src/sentry/static/sentry/app/components/modals/integrationDetailsModal.tsx
+++ /dev/null
@@ -1,246 +0,0 @@
-import {Box, Flex} from 'reflexbox';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {
-  trackIntegrationEvent,
-  getIntegrationFeatureGate,
-} from 'app/utils/integrationUtil';
-import {t} from 'app/locale';
-import Access from 'app/components/acl/access';
-import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
-import Alert from 'app/components/alert';
-import Button from 'app/components/button';
-import ExternalLink from 'app/components/links/externalLink';
-import InlineSvg from 'app/components/inlineSvg';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import SentryTypes from 'app/sentryTypes';
-import Tag from 'app/views/settings/components/tag';
-import Tooltip from 'app/components/tooltip';
-import marked, {singleLineRenderer} from 'app/utils/marked';
-import space from 'app/styles/space';
-import {IntegrationDetailsModalOptions} from 'app/actionCreators/modal';
-import {Integration} from 'app/types';
-
-type Props = {
-  closeModal: () => void;
-} & IntegrationDetailsModalOptions;
-
-class IntegrationDetailsModal extends React.Component<Props> {
-  static propTypes = {
-    closeModal: PropTypes.func.isRequired,
-    onAddIntegration: PropTypes.func.isRequired,
-    provider: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-    onCloseModal: PropTypes.func,
-  };
-
-  componentDidMount() {
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.install_modal_opened',
-        eventName: 'Integrations: Install Modal Opened',
-        integration_type: 'first_party',
-        integration: this.props.provider.key,
-        already_installed: this.props.isInstalled,
-        view: 'integrations_page',
-      },
-      this.props.organization
-    );
-  }
-
-  componentWillUnmount() {
-    this.props.onCloseModal?.();
-  }
-
-  onAddIntegration = (integration: Integration) => {
-    this.props.closeModal();
-    this.props.onAddIntegration(integration);
-  };
-
-  handleExternalInstall = () => {
-    const {closeModal, provider, organization} = this.props;
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.installation_start',
-        eventName: 'Integrations: Installation Start',
-        integration: provider.key,
-        integration_type: 'first_party',
-        view: 'integrations_page',
-      },
-      organization
-    );
-    closeModal();
-  };
-
-  featureTags(features: string[]) {
-    return features.map(feature => (
-      <StyledTag key={feature}>{feature.replace(/-/g, ' ')}</StyledTag>
-    ));
-  }
-
-  render() {
-    const {provider, organization, closeModal} = this.props;
-    const {metadata} = provider;
-    const description = marked(metadata.description);
-
-    const alerts = metadata.aspects.alerts || [];
-
-    if (!provider.canAdd && metadata.aspects.externalInstall) {
-      alerts.push({
-        type: 'warning',
-        icon: 'icon-exit',
-        text: metadata.aspects.externalInstall.noticeText,
-      });
-    }
-
-    const buttonProps = {
-      style: {marginLeft: space(1)},
-      size: 'small',
-      priority: 'primary',
-    };
-
-    const AddButton = p =>
-      (provider.canAdd && (
-        <AddIntegrationButton
-          provider={provider}
-          onAddIntegration={this.onAddIntegration}
-          {...buttonProps}
-          {...p}
-        />
-      )) ||
-      (!provider.canAdd && metadata.aspects.externalInstall && (
-        <Button
-          icon="icon-exit"
-          href={metadata.aspects.externalInstall.url}
-          onClick={this.handleExternalInstall}
-          external
-          {...buttonProps}
-          {...p}
-        >
-          {metadata.aspects.externalInstall.buttonText}
-        </Button>
-      ));
-
-    // Prepare the features list
-    const features = metadata.features.map(f => ({
-      featureGate: f.featureGate,
-      description: (
-        <span dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}} />
-      ),
-    }));
-
-    const {FeatureList, IntegrationFeatures} = getIntegrationFeatureGate();
-    const featureProps = {organization, features};
-
-    return (
-      <React.Fragment>
-        <Flex alignItems="center" mb={2}>
-          <PluginIcon pluginId={provider.key} size={50} />
-          <Flex
-            pl={1}
-            alignItems="flex-start"
-            flexDirection="column"
-            justifyContent="center"
-          >
-            <ProviderName data-test-id="provider-name">
-              {t('%s Integration', provider.name)}
-            </ProviderName>
-            <Flex>{provider.features.length && this.featureTags(provider.features)}</Flex>
-          </Flex>
-        </Flex>
-        <Description dangerouslySetInnerHTML={{__html: description}} />
-        <FeatureList {...featureProps} provider={provider} />
-
-        <Metadata>
-          <AuthorName flex={1}>{t('By %s', provider.metadata.author)}</AuthorName>
-          <Box>
-            <ExternalLink href={metadata.source_url}>{t('View Source')}</ExternalLink>
-            <ExternalLink href={metadata.issue_url}>{t('Report Issue')}</ExternalLink>
-          </Box>
-        </Metadata>
-
-        {alerts.map((alert, i) => (
-          <Alert key={i} type={alert.type} icon={alert.icon}>
-            <span dangerouslySetInnerHTML={{__html: singleLineRenderer(alert.text)}} />
-          </Alert>
-        ))}
-
-        <IntegrationFeatures {...featureProps}>
-          {({disabled, disabledReason}) => (
-            <div className="modal-footer">
-              {disabled && <DisabledNotice reason={disabledReason} />}
-              <Button data-test-id="cancel-button" size="small" onClick={closeModal}>
-                {t('Cancel')}
-              </Button>
-              <Access organization={organization} access={['org:integrations']}>
-                {({hasAccess}) => (
-                  <Tooltip
-                    title={t(
-                      'You must be an organization owner, manager or admin to install this.'
-                    )}
-                    disabled={hasAccess}
-                  >
-                    <AddButton
-                      data-test-id="add-button"
-                      disabled={disabled || !hasAccess}
-                      organization={organization}
-                    />
-                  </Tooltip>
-                )}
-              </Access>
-            </div>
-          )}
-        </IntegrationFeatures>
-      </React.Fragment>
-    );
-  }
-}
-
-const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
-  <Flex alignItems="center" flex={1} {...p}>
-    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
-    <Box ml={1}>{reason}</Box>
-  </Flex>
-))`
-  color: ${p => p.theme.red};
-  font-size: 0.9em;
-`;
-
-const ProviderName = styled(p => <Box {...p} />)`
-  font-weight: bold;
-  font-size: 1.4em;
-  margin-bottom: ${space(1)};
-`;
-
-const Description = styled('div')`
-  font-size: 1.5rem;
-  line-height: 2.1rem;
-  margin-bottom: ${space(2)};
-
-  li {
-    margin-bottom: 6px;
-  }
-`;
-
-const Metadata = styled(Flex)`
-  font-size: 0.9em;
-  margin-bottom: ${space(2)};
-
-  a {
-    margin-left: ${space(1)};
-  }
-`;
-
-const AuthorName = styled(Box)`
-  color: ${p => p.theme.gray2};
-`;
-
-const StyledTag = styled(Tag)`
-  &:not(:first-child) {
-    margin-left: ${space(0.5)};
-  }
-`;
-
-export default IntegrationDetailsModal;
diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
index 4808beb333..9caf35760f 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppDetailsModal.tsx
@@ -1,12 +1,10 @@
 import {Box, Flex} from 'reflexbox';
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
 import Access from 'app/components/acl/access';
 import Button from 'app/components/button';
 import PluginIcon from 'app/plugins/components/pluginIcon';
-import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
@@ -15,8 +13,7 @@ import InlineSvg from 'app/components/inlineSvg';
 import Tag from 'app/views/settings/components/tag';
 import {toPermissions} from 'app/utils/consolidatedScopes';
 import CircleIndicator from 'app/components/circleIndicator';
-import {SentryAppDetailsModalOptions} from 'app/actionCreators/modal';
-import {IntegrationFeature} from 'app/types';
+import {IntegrationFeature, SentryApp, Organization} from 'app/types';
 import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
 import {
   trackIntegrationEvent,
@@ -24,30 +21,19 @@ import {
 } from 'app/utils/integrationUtil';
 
 type Props = {
-  view?: 'integrations_page' | 'external_install';
   closeModal: () => void;
-} & SentryAppDetailsModalOptions &
-  AsyncComponent['props'];
+  sentryApp: SentryApp;
+  isInstalled: boolean;
+  onInstall: () => Promise<void>;
+  organization: Organization;
+} & AsyncComponent['props'];
 
 type State = {
   featureData: IntegrationFeature[];
 } & AsyncComponent['state'];
 
+//No longer a modal anymore but yea :)
 export default class SentryAppDetailsModal extends AsyncComponent<Props, State> {
-  static propTypes = {
-    sentryApp: SentryTypes.SentryApplication.isRequired,
-    organization: SentryTypes.Organization.isRequired,
-    onInstall: PropTypes.func.isRequired,
-    isInstalled: PropTypes.bool.isRequired,
-    closeModal: PropTypes.func.isRequired,
-    onCloseModal: PropTypes.func,
-    view: PropTypes.string.isRequired,
-  };
-
-  static defaultProps = {
-    view: 'integrations_page',
-  };
-
   componentDidUpdate(prevProps: Props) {
     //if the user changes org, count this as a fresh event to track
     if (this.props.organization.id !== prevProps.organization.id) {
@@ -59,12 +45,8 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
     this.trackOpened();
   }
 
-  componentWillUnmount() {
-    this.props.onCloseModal?.();
-  }
-
   trackOpened() {
-    const {sentryApp, organization, isInstalled, view} = this.props;
+    const {sentryApp, organization, isInstalled} = this.props;
     recordInteraction(sentryApp.slug, 'sentry_app_viewed');
 
     trackIntegrationEvent(
@@ -74,11 +56,11 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
         integration_type: 'sentry_app',
         integration: sentryApp.slug,
         already_installed: isInstalled,
-        view,
+        view: 'external_install',
         integration_status: sentryApp.status,
       },
       organization,
-      {startSession: view === 'external_install'} //new session on external installs
+      {startSession: true}
     );
   }
 
@@ -99,7 +81,7 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
   }
 
   async onInstall() {
-    const {onInstall, closeModal, view} = this.props;
+    const {onInstall} = this.props;
     //we want to make sure install finishes before we close the modal
     //and we should close the modal if there is an error as well
     try {
@@ -107,8 +89,6 @@ export default class SentryAppDetailsModal extends AsyncComponent<Props, State>
     } catch (_err) {
       /* stylelint-disable-next-line no-empty-block */
     }
-    // let onInstall handle redirection post install on the external install flow
-    view !== 'external_install' && closeModal();
   }
 
   renderPermissions() {
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 05cd7ef86d..8561f75ce9 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -43,7 +43,7 @@ export const getSortIntegrationsByWeightActive = (organization?: Organization) =
 
 export type SingleIntegrationEvent = {
   eventKey:
-    | 'integrations.install_modal_opened'
+    | 'integrations.install_modal_opened' //TODO: remove
     | 'integrations.installation_start'
     | 'integrations.installation_complete'
     | 'integrations.integration_viewed' //for the integration overview
@@ -57,7 +57,7 @@ export type SingleIntegrationEvent = {
     | 'integrations.plugin_add_to_project_clicked'
     | 'integrations.upgrade_plan_modal_opened';
   eventName:
-    | 'Integrations: Install Modal Opened'
+    | 'Integrations: Install Modal Opened' //TODO: remove
     | 'Integrations: Installation Start'
     | 'Integrations: Installation Complete'
     | 'Integrations: Integration Viewed'
@@ -105,7 +105,6 @@ type IntegrationsEventParams = (
 ) & {
   view?:
     | 'external_install'
-    | 'integrations_page'
     | 'legacy_integrations'
     | 'plugin_details'
     | 'integrations_directory'
diff --git a/src/sentry/static/sentry/app/views/integrationInstallation.tsx b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
index cb1d6978c9..01d20dc274 100644
--- a/src/sentry/static/sentry/app/views/integrationInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/integrationInstallation.tsx
@@ -51,6 +51,7 @@ export default class IntegrationInstallation extends AsyncView<Props, State> {
       return;
     }
 
+    //TODO: Probably don't need this event anymore
     trackIntegrationEvent(
       {
         eventKey: 'integrations.install_modal_opened',
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
index 9c303f3ba6..d04f3002c1 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import {t} from 'app/locale';
@@ -6,7 +5,6 @@ import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
 import Button from 'app/components/button';
 import Tooltip from 'app/components/tooltip';
 import {IntegrationProvider, Integration, Organization} from 'app/types';
-import SentryTypes from 'app/sentryTypes';
 
 type Props = {
   provider: IntegrationProvider;
@@ -15,20 +13,12 @@ type Props = {
   reinstall?: boolean;
   organization?: Organization; //for analytics
   analyticsParams?: {
-    view: 'integrations_directory_integration_detail' | 'integrations_directory';
+    view: 'integrations_directory_integration_detail';
     already_installed: boolean;
   };
 } & React.ComponentProps<typeof Button>;
 
 export default class AddIntegrationButton extends React.Component<Props> {
-  static propTypes = {
-    provider: PropTypes.object.isRequired,
-    onAddIntegration: PropTypes.func.isRequired,
-    buttonText: PropTypes.string,
-    reinstall: PropTypes.bool,
-    organization: SentryTypes.Organization,
-  };
-
   render() {
     const {
       provider,
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
deleted file mode 100644
index d16e276dcb..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.tsx
+++ /dev/null
@@ -1,392 +0,0 @@
-import compact from 'lodash/compact';
-import groupBy from 'lodash/groupBy';
-import keyBy from 'lodash/keyBy';
-import React from 'react';
-import styled from '@emotion/styled';
-import {RouteComponentProps} from 'react-router/lib/Router';
-
-import {
-  Organization,
-  Integration,
-  Plugin,
-  SentryApp,
-  IntegrationProvider,
-  SentryAppInstallation,
-} from 'app/types';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {RequestOptions} from 'app/api';
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {trackIntegrationEvent} from 'app/utils/integrationUtil';
-import {removeSentryApp} from 'app/actionCreators/sentryApps';
-import {sortArray} from 'app/utils';
-import {t} from 'app/locale';
-import AsyncComponent from 'app/components/asyncComponent';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarnings';
-import PermissionAlert from 'app/views/settings/organization/permissionAlert';
-import ProviderRow from 'app/views/organizationIntegrations/providerRow';
-import SentryAppInstallationDetail from 'app/views/organizationIntegrations/sentryAppInstallationDetail';
-import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
-import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import SentryTypes from 'app/sentryTypes';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
-import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
-
-type AppOrProvider = SentryApp | IntegrationProvider;
-
-type Props = RouteComponentProps<{orgId: string}, {}> & {
-  organization: Organization;
-  hideHeader: boolean;
-};
-
-type State = {
-  integrations: Integration[];
-  newlyInstalledIntegrationId: string;
-  plugins: Plugin[];
-  appInstalls: SentryAppInstallation[];
-  orgOwnedApps: SentryApp[];
-  publishedApps: SentryApp[];
-  config: {providers: IntegrationProvider[]};
-  extraApp?: SentryApp;
-};
-
-function isSentryApp(integration: AppOrProvider): integration is SentryApp {
-  return (integration as SentryApp).uuid !== undefined;
-}
-
-class OrganizationIntegrations extends AsyncComponent<
-  Props & AsyncComponent['props'],
-  State & AsyncComponent['state']
-> {
-  // Some integrations require visiting a different website to add them. When
-  // we come back to the tab we want to show our integrations as soon as we can.
-  shouldReload = true;
-  reloadOnVisible = true;
-  shouldReloadOnVisible = true;
-
-  static propTypes = {
-    organization: SentryTypes.Organization,
-  };
-
-  onLoadAllEndpointsSuccess() {
-    this.recordIndexPageViewed();
-  }
-
-  recordIndexPageViewed = () => {
-    //count the number of installed apps
-    const {integrations, publishedApps} = this.state;
-    const integrationsInstalled = new Set();
-    //add installed integrations
-    integrations.forEach((integration: Integration) => {
-      integrationsInstalled.add(integration.provider.key);
-    });
-    //add sentry apps
-    publishedApps.filter(this.getAppInstall).forEach((sentryApp: SentryApp) => {
-      integrationsInstalled.add(sentryApp.slug);
-    });
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.index_viewed',
-        eventName: 'Integrations: Index Page Viewed',
-        integrations_installed: integrationsInstalled.size,
-        view: 'integrations_page',
-      },
-      this.props.organization,
-      {startSession: true}
-    );
-  };
-
-  getEndpoints(): ([string, string, any] | [string, string])[] {
-    const {orgId} = this.props.params;
-    const query = {plugins: ['vsts', 'github', 'bitbucket']};
-    const baseEndpoints: ([string, string, any] | [string, string])[] = [
-      ['config', `/organizations/${orgId}/config/integrations/`],
-      ['integrations', `/organizations/${orgId}/integrations/`],
-      ['plugins', `/organizations/${orgId}/plugins/`, {query}],
-      ['orgOwnedApps', `/organizations/${orgId}/sentry-apps/`],
-      ['publishedApps', '/sentry-apps/', {query: {status: 'published'}}],
-      ['appInstalls', `/organizations/${orgId}/sentry-app-installations/`],
-    ];
-    /**
-     * optional app to load for super users
-     * should only be done for unpublished integrations from another org
-     * but no checks are in place to ensure the above condition
-     */
-    const extraAppSlug = new URLSearchParams(this.props.location.search).get('extra_app');
-    if (extraAppSlug) {
-      baseEndpoints.push(['extraApp', `/sentry-apps/${extraAppSlug}/`]);
-    }
-
-    return baseEndpoints;
-  }
-
-  // State
-
-  get enabledPlugins() {
-    // List of slugs for each Plugin the Org/Project has currently enabled.
-    return compact(this.state.plugins.map(plugin => plugin.enabled && plugin.slug));
-  }
-
-  get unmigratableReposByOrg() {
-    // Group by [GitHub|BitBucket|VSTS] Org name
-    return groupBy(this.state.unmigratableRepos, repo => repo.name.split('/')[0]);
-  }
-
-  get providers(): IntegrationProvider[] {
-    return this.state.config.providers;
-  }
-
-  // Actions
-
-  onInstall = (integration: Integration) => {
-    // Merge the new integration into the list. If we're updating an
-    // integration overwrite the old integration.
-    const keyedItems = keyBy(this.state.integrations, i => i.id);
-
-    // Mark this integration as newlyAdded if it didn't already exist, allowing
-    // us to animate the element in.
-    if (!keyedItems.hasOwnProperty(integration.id)) {
-      this.setState({newlyInstalledIntegrationId: integration.id});
-    }
-
-    const integrations = sortArray(
-      Object.values({...keyedItems, [integration.id]: integration}),
-      i => i.name
-    );
-    this.setState({integrations});
-  };
-
-  onRemove = (integration: Integration) => {
-    const {orgId} = this.props.params;
-
-    const origIntegrations = [...this.state.integrations];
-
-    const integrations = this.state.integrations.filter(i => i.id !== integration.id);
-    this.setState({integrations});
-
-    const options: RequestOptions = {
-      method: 'DELETE',
-      error: () => {
-        this.setState({integrations: origIntegrations});
-        addErrorMessage(t('Failed to remove Integration'));
-      },
-    };
-
-    this.api.request(`/organizations/${orgId}/integrations/${integration.id}/`, options);
-  };
-
-  onDisable = (integration: Integration) => {
-    let url: string;
-    const [domainName, orgName] = integration.domainName.split('/');
-
-    if (integration.accountType === 'User') {
-      url = `https://${domainName}/settings/installations/`;
-    } else {
-      url = `https://${domainName}/organizations/${orgName}/settings/installations/`;
-    }
-
-    window.open(url, '_blank');
-  };
-
-  handleRemoveInternalSentryApp = (app: SentryApp): void => {
-    const apps = this.state.orgOwnedApps.filter(a => a.slug !== app.slug);
-    removeSentryApp(this.api, app).then(
-      () => {
-        this.setState({orgOwnedApps: apps});
-      },
-      () => {}
-    );
-  };
-
-  handleRemoveAppInstallation = (app: SentryApp): void => {
-    const appInstalls = this.state.appInstalls.filter(i => i.app.slug !== app.slug);
-    this.setState({appInstalls});
-  };
-
-  handleAppInstallation = (install: SentryAppInstallation): void => {
-    this.setState({appInstalls: [install, ...this.state.appInstalls]});
-  };
-
-  getAppInstall = (app: SentryApp) =>
-    this.state.appInstalls.find(i => i.app.slug === app.slug);
-
-  //Returns 0 if uninstalled, 1 if pending, and 2 if installed
-  getInstallValue(integration: AppOrProvider) {
-    const {integrations} = this.state;
-    if (isSentryApp(integration)) {
-      const install = this.getAppInstall(integration);
-      if (install) {
-        return install.status === 'pending' ? 1 : 2;
-      }
-      return 0;
-    }
-    return integrations.find(i => i.provider.key === integration.key) ? 2 : 0;
-  }
-
-  sortIntegrations(integrations: AppOrProvider[]) {
-    return integrations
-      .sort((a, b) => a.name.localeCompare(b.name))
-      .sort((a, b) => this.getInstallValue(b) - this.getInstallValue(a));
-  }
-
-  // Rendering
-  renderProvider = (provider: IntegrationProvider) => {
-    //find the integration installations for that provider
-    const integrations = this.state.integrations.filter(
-      i => i.provider.key === provider.key
-    );
-    return (
-      <ProviderRow
-        key={`row-${provider.key}`}
-        data-test-id="integration-row"
-        provider={provider}
-        orgId={this.props.params.orgId}
-        integrations={integrations}
-        onInstall={this.onInstall}
-        onRemove={this.onRemove}
-        onDisable={this.onDisable}
-        onReinstall={this.onInstall}
-        enabledPlugins={this.enabledPlugins}
-        newlyInstalledIntegrationId={this.state.newlyInstalledIntegrationId}
-        onCloseModal={this.recordIndexPageViewed}
-      />
-    );
-  };
-
-  //render either an internal or non-internal app
-  renderSentryApp = (app: SentryApp) => {
-    const {organization} = this.props;
-
-    if (app.status === 'internal') {
-      return (
-        <SentryApplicationRow
-          key={`sentry-app-row-${app.slug}`}
-          data-test-id="internal-integration-row"
-          onRemoveApp={() => this.handleRemoveInternalSentryApp(app)}
-          organization={organization}
-          install={this.getAppInstall(app)}
-          app={app}
-          isOnIntegrationPage
-        />
-      );
-    }
-
-    return (
-      <SentryAppInstallationDetail
-        key={`sentry-app-row-${app.slug}`}
-        data-test-id="integration-row"
-        api={this.api}
-        organization={organization}
-        install={this.getAppInstall(app)}
-        onAppUninstall={() => this.handleRemoveAppInstallation(app)}
-        onAppInstall={this.handleAppInstallation}
-        onCloseModal={this.recordIndexPageViewed}
-        app={app}
-      />
-    );
-  };
-
-  renderIntegration = (integration: AppOrProvider) => {
-    if (isSentryApp(integration)) {
-      return this.renderSentryApp(integration);
-    }
-    return this.renderProvider(integration);
-  };
-
-  renderBody() {
-    const {orgId} = this.props.params;
-    const {reloading, orgOwnedApps, publishedApps, extraApp} = this.state;
-    const published = publishedApps || [];
-    // If we have an extra app in state from query parameter, add it as org owned app
-    if (extraApp) {
-      orgOwnedApps.push(extraApp);
-    }
-
-    // we dont want the app to render twice if its the org that created
-    // the published app.
-    const orgOwned = orgOwnedApps.filter(
-      app => !published.find(p => p.slug === app.slug)
-    );
-
-    /**
-     * We should have three sections:
-     * 1. Public apps and integrations available to everyone
-     * 2. Unpublished apps available to that org
-     * 3. Internal apps available to that org
-     */
-
-    const publicApps = published.concat(orgOwned.filter(a => a.status === 'published'));
-    const publicIntegrations = this.sortIntegrations(
-      (publicApps as AppOrProvider[]).concat(this.providers)
-    );
-
-    const unpublishedApps = this.sortIntegrations(
-      orgOwned.filter(a => a.status === 'unpublished')
-    );
-
-    const orgOwnedInternal = this.sortIntegrations(
-      orgOwned.filter(a => a.status === 'internal')
-    );
-
-    const title = t('Integrations');
-
-    return (
-      <React.Fragment>
-        <SentryDocumentTitle title={title} objSlug={orgId} />
-        {!this.props.hideHeader && <SettingsPageHeader title={title} />}
-        <PermissionAlert access={['org:integrations']} />
-
-        <MigrationWarnings
-          orgId={this.props.params.orgId}
-          providers={this.providers}
-          onInstall={this.onInstall}
-        />
-
-        <Panel>
-          <PanelHeader disablePadding>
-            <Heading>{t('Integrations')}</Heading>
-            {reloading && <StyledLoadingIndicator mini />}
-          </PanelHeader>
-          <PanelBody>{publicIntegrations.map(this.renderIntegration)}</PanelBody>
-        </Panel>
-
-        {unpublishedApps.length > 0 && (
-          <Panel>
-            <PanelHeader disablePadding>
-              <Heading>{t('Unpublished Integrations')}</Heading>
-              {reloading && <StyledLoadingIndicator mini />}
-            </PanelHeader>
-            <PanelBody>{unpublishedApps.map(this.renderIntegration)}</PanelBody>
-          </Panel>
-        )}
-
-        {orgOwnedInternal.length > 0 && (
-          <Panel>
-            <PanelHeader disablePadding>
-              <Heading>{t('Internal Integrations')}</Heading>
-              {reloading && <StyledLoadingIndicator mini />}
-            </PanelHeader>
-            <PanelBody>{orgOwnedInternal.map(this.renderIntegration)}</PanelBody>
-          </Panel>
-        )}
-      </React.Fragment>
-    );
-  }
-}
-
-const StyledLoadingIndicator = styled(LoadingIndicator)`
-  position: absolute;
-  right: 7px;
-  top: 50%;
-  transform: translateY(-16px);
-`;
-
-const Heading = styled('div')`
-  flex: 1;
-  padding-left: ${space(2)};
-  padding-right: ${space(2)};
-`;
-
-export default withOrganization(OrganizationIntegrations);
-export {OrganizationIntegrations};
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.tsx
deleted file mode 100644
index 470499b13a..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.tsx
+++ /dev/null
@@ -1,67 +0,0 @@
-import React from 'react';
-import groupBy from 'lodash/groupBy';
-
-import {tct} from 'app/locale';
-import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
-import AlertLink from 'app/components/alertLink';
-import AsyncComponent from 'app/components/asyncComponent';
-import {IntegrationProvider, Integration, Repository} from 'app/types';
-
-type Props = {
-  orgId: string;
-  providers: IntegrationProvider[];
-  onInstall: (integration: Integration) => void;
-} & AsyncComponent['props'];
-
-type State = {
-  unmigratableRepos: Repository[];
-} & AsyncComponent['state'];
-
-export default class MigrationWarnings extends AsyncComponent<Props, State> {
-  getEndpoints(): ([string, string] | [string, string])[] {
-    const {orgId} = this.props;
-
-    return [['unmigratableRepos', `/organizations/${orgId}/repos/?status=unmigratable`]];
-  }
-
-  get unmigratableReposByOrg() {
-    // Group by [GitHub|BitBucket|VSTS] Org name
-    return groupBy(this.state.unmigratableRepos, repo => repo.name.split('/')[0]);
-  }
-
-  render() {
-    return Object.entries(this.unmigratableReposByOrg).map(
-      ([orgName, repos]: [string, Repository[]]) => {
-        // Repos use 'visualstudio', Integrations use 'vsts'. Normalize to 'vsts'.
-        const key =
-          repos[0].provider.id === 'visualstudio' ? 'vsts' : repos[0].provider.id;
-        const provider = this.props.providers.find(p => p.key === key);
-
-        // The Org might not have access to this Integration yet.
-        if (!provider) {
-          return '';
-        }
-
-        return (
-          <AddIntegration
-            key={provider.key}
-            provider={provider}
-            onInstall={this.props.onInstall}
-          >
-            {onClick => (
-              <AlertLink onClick={() => onClick()} href="#">
-                {tct(
-                  "Your [orgName] repositories can't send commit data to Sentry. Add a [orgName] [providerName] instance here.",
-                  {
-                    orgName,
-                    providerName: provider.name,
-                  }
-                )}
-              </AlertLink>
-            )}
-          </AddIntegration>
-        );
-      }
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
deleted file mode 100644
index ab93d3a19a..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/providerRow.tsx
+++ /dev/null
@@ -1,218 +0,0 @@
-import {Box, Flex} from 'reflexbox';
-import {withTheme} from 'emotion-theming';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {openIntegrationDetails} from 'app/actionCreators/modal';
-import {PanelItem} from 'app/components/panels';
-import {t} from 'app/locale';
-import Button from 'app/components/button';
-import CircleIndicator from 'app/components/circleIndicator';
-import InstalledIntegration, {
-  Props as InstalledIntegrationProps,
-} from 'app/views/organizationIntegrations/installedIntegration';
-import Link from 'app/components/links/link';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import {growDown, highlight} from 'app/styles/animations';
-import {IntegrationProvider, Integration} from 'app/types';
-import {IconAdd, IconUpgrade} from 'app/icons';
-
-type DefaultProps = {
-  enabledPlugins: string[];
-};
-
-type Props = DefaultProps & {
-  provider: IntegrationProvider;
-  orgId: string;
-  onInstall: (integration: Integration) => void;
-  onRemove: (integration: Integration) => void;
-  onDisable: (integration: Integration) => void;
-  onReinstall: (integration: Integration) => void;
-  onCloseModal?: () => void;
-  newlyInstalledIntegrationId: string;
-  integrations: Integration[];
-};
-
-export default class ProviderRow extends React.Component<Props> {
-  static propTypes = {
-    provider: PropTypes.object.isRequired,
-    integrations: PropTypes.array.isRequired,
-    orgId: PropTypes.string.isRequired,
-    onInstall: PropTypes.func.isRequired,
-    onRemove: PropTypes.func.isRequired,
-    onDisable: PropTypes.func.isRequired,
-    onReinstall: PropTypes.func.isRequired,
-    enabledPlugins: PropTypes.array,
-    newlyInstalledIntegrationId: PropTypes.string,
-    onCloseModal: PropTypes.func,
-  };
-
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-  };
-
-  static defaultProps: DefaultProps = {
-    enabledPlugins: [],
-  };
-
-  static upgradableIntegrations = ['vsts', 'bitbucket', 'github', 'github_enterprise'];
-
-  get integrations() {
-    return this.props.integrations;
-  }
-
-  get isEnabled() {
-    return this.integrations.length > 0;
-  }
-
-  get isEnabledPlugin() {
-    return this.props.enabledPlugins.includes(this.props.provider.key);
-  }
-
-  get isUpgradable() {
-    return ProviderRow.upgradableIntegrations.includes(this.props.provider.key);
-  }
-
-  // Actions
-
-  openModal = () => {
-    const organization = this.context.organization;
-    const provider = this.props.provider;
-    const onAddIntegration = this.props.onInstall;
-    openIntegrationDetails({
-      provider,
-      organization,
-      onAddIntegration,
-      isInstalled: this.isEnabled,
-      onCloseModal: this.props.onCloseModal,
-    });
-  };
-
-  // Rendering
-
-  get buttonProps() {
-    const upgradeable = !this.isEnabled && this.isEnabledPlugin && this.isUpgradable;
-
-    return {
-      icon: upgradeable ? <IconUpgrade size="xs" /> : <IconAdd size="xs" circle />,
-      children: this.isEnabled
-        ? t('Add Another')
-        : upgradeable
-        ? t('Update')
-        : t('Install'),
-    };
-  }
-
-  renderIntegrations() {
-    return this.integrations.map(integration => (
-      <StyledInstalledIntegration
-        key={integration.id}
-        organization={this.context.organization}
-        provider={this.props.provider}
-        integration={integration}
-        onRemove={this.props.onRemove}
-        onDisable={this.props.onDisable}
-        onReinstallIntegration={this.props.onReinstall}
-        data-test-id={integration.id}
-        newlyAdded={integration.id === this.props.newlyInstalledIntegrationId}
-      />
-    ));
-  }
-
-  render() {
-    return (
-      <PanelItem p={0} flexDirection="column" data-test-id={this.props.provider.key}>
-        <Flex alignItems="center" p={2}>
-          <PluginIcon size={36} pluginId={this.props.provider.key} />
-          <Box px={2} flex={1}>
-            <ProviderName>{this.props.provider.name}</ProviderName>
-            <ProviderDetails>
-              <Status enabled={this.isEnabled} />
-              <StyledLink onClick={this.openModal}>Learn More</StyledLink>
-            </ProviderDetails>
-          </Box>
-          <Box>
-            <Button size="small" onClick={this.openModal} {...this.buttonProps} />
-          </Box>
-        </Flex>
-        {this.renderIntegrations()}
-      </PanelItem>
-    );
-  }
-}
-
-const ProviderName = styled('div')`
-  font-weight: bold;
-`;
-
-const ProviderDetails = styled(Flex)`
-  align-items: center;
-  margin-top: 6px;
-  font-size: 0.8em;
-`;
-
-type StatusProps = {
-  enabled: boolean;
-  theme?: any; //TS complains if we don't make this optional
-};
-
-const Status = styled(
-  withTheme((props: StatusProps) => {
-    const {enabled, theme, ...p} = props;
-    return (
-      <StatusWrapper>
-        <CircleIndicator
-          enabled={enabled}
-          size={6}
-          color={enabled ? theme.success : theme.gray2}
-        />
-        <div {...p}>{enabled ? t('Installed') : t('Not Installed')}</div>
-      </StatusWrapper>
-    );
-  })
-)`
-  color: ${(p: StatusProps) => (p.enabled ? p.theme.success : p.theme.gray2)};
-  margin-left: ${space(0.5)};
-  &:after {
-    content: '|';
-    color: ${p => p.theme.gray1};
-    margin-left: ${space(0.75)};
-    font-weight: normal;
-  }
-  margin-right: ${space(0.75)};
-`;
-
-const StatusWrapper = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-
-const NewInstallation = styled('div')`
-  overflow: hidden;
-  transform-origin: 0 auto;
-  animation: ${growDown('59px')} 160ms 500ms ease-in-out forwards,
-    ${p => highlight(p.theme.yellowLightest)} 1000ms 500ms ease-in-out forwards;
-`;
-
-const StyledInstalledIntegration = styled(
-  (p: InstalledIntegrationProps & {newlyAdded: boolean}) =>
-    p.newlyAdded ? (
-      <NewInstallation>
-        <InstalledIntegration {...p} />
-      </NewInstallation>
-    ) : (
-      <InstalledIntegration {...p} />
-    )
-)`
-  padding: ${space(2)};
-  padding-left: 0;
-  margin-left: 68px;
-  border-top: 1px dashed ${p => p.theme.borderLight};
-`;
-
-const StyledLink = styled(Link)`
-  color: ${p => p.theme.gray2};
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
deleted file mode 100644
index ab81bd9225..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallationDetail.tsx
+++ /dev/null
@@ -1,160 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
-import SentryTypes from 'app/sentryTypes';
-import {t} from 'app/locale';
-import {
-  installSentryApp,
-  uninstallSentryApp,
-} from 'app/actionCreators/sentryAppInstallations';
-import {Client} from 'app/api';
-import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
-import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
-import {openModal} from 'app/actionCreators/modal';
-import SplitInstallationIdModal from 'app/views/organizationIntegrations/SplitInstallationIdModal';
-import {trackIntegrationEvent} from 'app/utils/integrationUtil';
-
-type Props = {
-  api: Client;
-  organization: Organization;
-  install?: SentryAppInstallation;
-  app: SentryApp;
-  onAppUninstall: () => void;
-  onAppInstall: (install: SentryAppInstallation) => void;
-  onCloseModal?: () => void; //used for analytics
-};
-
-class SentryAppInstallationDetail extends React.Component<Props> {
-  static propTypes = {
-    api: PropTypes.object,
-    organization: SentryTypes.Organization.isRequired,
-    install: PropTypes.object,
-    app: PropTypes.object.isRequired,
-    onAppUninstall: PropTypes.func.isRequired,
-    onAppInstall: PropTypes.func.isRequired,
-    onCloseModal: PropTypes.func,
-  };
-
-  redirectUser = (install: SentryAppInstallation) => {
-    const {organization, app} = this.props;
-    if (!app.redirectUrl) {
-      addSuccessMessage(t(`${app.slug} successfully installed.`));
-      this.props.onAppInstall(install);
-    } else {
-      const queryParams = {
-        installationId: install.uuid,
-        code: install.code,
-        orgSlug: organization.slug,
-      };
-      const redirectUrl = addQueryParamsToExistingUrl(app.redirectUrl, queryParams);
-      window.location.assign(redirectUrl);
-    }
-
-    //hack for split so we can show the install ID to users for them to copy
-    //Will remove once the proper fix is in place
-    if (['split', 'split-dev', 'split-testing'].includes(app.slug)) {
-      openModal(({closeModal}) => (
-        <SplitInstallationIdModal installationId={install.uuid} closeModal={closeModal} />
-      ));
-    }
-  };
-
-  handleInstall = async () => {
-    const {organization, api, app} = this.props;
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.installation_start',
-        eventName: 'Integrations: Installation Start',
-        integration_type: 'sentry_app',
-        integration: app.slug,
-        view: 'integrations_page',
-        integration_status: app.status,
-      },
-      organization
-    );
-
-    return installSentryApp(api, organization.slug, app).then(
-      install => {
-        //installation is complete if the status is installed
-        if (install.status === 'installed') {
-          trackIntegrationEvent(
-            {
-              eventKey: 'integrations.installation_complete',
-              eventName: 'Integrations: Installation Complete',
-              integration_type: 'sentry_app',
-              integration: app.slug,
-              view: 'integrations_page',
-              integration_status: app.status,
-            },
-            organization
-          );
-        }
-        this.redirectUser(install);
-      },
-      () => {}
-    );
-  };
-
-  handleUninstall = (install: SentryAppInstallation) => {
-    const {api, app, onCloseModal} = this.props;
-    uninstallSentryApp(api, install).then(
-      () => {
-        this.props.onAppUninstall();
-        trackIntegrationEvent(
-          {
-            eventKey: 'integrations.uninstall_completed',
-            eventName: 'Integrations: Uninstall Completed',
-            integration: app.slug,
-            integration_type: 'sentry_app',
-            integration_status: app.status,
-            view: 'integrations_page',
-          },
-          this.props.organization
-        );
-        onCloseModal?.();
-      },
-      () => {
-        addErrorMessage(t(`Unable to uninstall ${app.name}`));
-        onCloseModal?.();
-      }
-    );
-  };
-
-  recordUninstallClicked = () => {
-    const {app} = this.props;
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.uninstall_clicked',
-        eventName: 'Integrations: Uninstall Clicked',
-        integration: app.slug,
-        integration_type: 'sentry_app',
-        integration_status: app.status,
-        view: 'integrations_page',
-      },
-      this.props.organization
-    );
-  };
-
-  render() {
-    const {organization, install, app, onCloseModal} = this.props;
-
-    return (
-      <React.Fragment>
-        <SentryApplicationRow
-          app={app}
-          organization={organization}
-          onInstall={this.handleInstall}
-          onUninstall={this.handleUninstall}
-          onCloseModal={onCloseModal}
-          onUninstallModalOpen={this.recordUninstallClicked}
-          install={install}
-          isOnIntegrationPage
-        />
-      </React.Fragment>
-    );
-  }
-}
-
-export default SentryAppInstallationDetail;
diff --git a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
index 7d016c6eed..9a8dac8c08 100644
--- a/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
+++ b/src/sentry/static/sentry/app/views/sentryAppExternalInstallation.tsx
@@ -296,7 +296,6 @@ export default class SentryAppExternalInstallation extends AsyncView<Props, Stat
             onInstall={this.onInstall}
             closeModal={this.onClose}
             isInstalled={this.disableInstall}
-            view="external_install"
           />
         )}
       </div>
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.tsx
index 23e8ae39f8..30e9746a32 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/index.tsx
@@ -58,7 +58,6 @@ class OrganizationDeveloperSettings extends AsyncView<Props, State> {
         app={app}
         organization={organization}
         onRemoveApp={this.removeApp}
-        isOnIntegrationPage={false}
       />
     );
   };
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/actionButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/actionButtons.tsx
index deb76e280e..cd3778dbbf 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/actionButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/actionButtons.tsx
@@ -11,11 +11,10 @@ type Props = {
   org: LightWeightOrganization;
   app: SentryApp;
 
-  showDashboard: boolean;
   showPublish: boolean;
   showDelete: boolean;
   onPublish?: () => void;
-  onDelete?: (app: SentryApp) => void;
+  onDelete: (app: SentryApp) => void;
   // If you want to disable the publish or delete buttons, pass in a reason to display to the user in a tooltip
   disablePublishReason?: string;
   disableDeleteReason?: string;
@@ -24,7 +23,6 @@ type Props = {
 const ActionButtons = ({
   org,
   app,
-  showDashboard,
   showPublish,
   showDelete,
   onPublish,
@@ -32,7 +30,7 @@ const ActionButtons = ({
   disablePublishReason,
   disableDeleteReason,
 }: Props) => {
-  const appDashboardButton = showDashboard ? (
+  const appDashboardButton = (
     <StyledButton
       size="small"
       icon="icon-stats"
@@ -40,7 +38,7 @@ const ActionButtons = ({
     >
       {t('Dashboard')}
     </StyledButton>
-  ) : null;
+  );
 
   const publishRequestButton = showPublish ? (
     <StyledButton
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
index 402be62e60..ba86119081 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/index.tsx
@@ -1,151 +1,60 @@
 import React from 'react';
-import {Box, Flex} from 'reflexbox';
 import {Link} from 'react-router';
-import capitalize from 'lodash/capitalize';
-import omit from 'lodash/omit';
 import styled from '@emotion/styled';
-import PropTypes from 'prop-types';
 
-import SentryTypes from 'app/sentryTypes';
 import {PanelItem} from 'app/components/panels';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
-import CircleIndicator from 'app/components/circleIndicator';
 import PluginIcon from 'app/plugins/components/pluginIcon';
-import {openSentryAppDetailsModal, openModal} from 'app/actionCreators/modal';
+import {openModal} from 'app/actionCreators/modal';
 import SentryAppPublishRequestModal from 'app/components/modals/sentryAppPublishRequestModal';
-import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
-import theme from 'app/utils/theme';
+import {Organization, SentryApp} from 'app/types';
 
 import SentryApplicationRowButtons from './sentryApplicationRowButtons';
 
-const INSTALLED = 'Installed';
-const NOT_INSTALLED = 'Not Installed';
-const PENDING = 'Pending';
-
 type Props = {
   app: SentryApp;
   organization: Organization;
-  install?: SentryAppInstallation;
-  onInstall?: () => Promise<void>;
-  onUninstall?: (install: SentryAppInstallation) => void;
-  onRemoveApp?: (app: SentryApp) => void;
-  onCloseModal?: () => void; //used for analytics
-  onUninstallModalOpen?: () => void; //used for analytics
-  isOnIntegrationPage: boolean;
-  ['data-test-id']?: string;
+  onRemoveApp: (app: SentryApp) => void;
 };
 
 export default class SentryApplicationRow extends React.PureComponent<Props> {
-  static propTypes = {
-    app: SentryTypes.SentryApplication,
-    organization: SentryTypes.Organization.isRequired,
-    install: PropTypes.object,
-    onInstall: PropTypes.func,
-    onUninstall: PropTypes.func,
-    onRemoveApp: PropTypes.func,
-    onCloseModal: PropTypes.func,
-    onUninstallModalOpen: PropTypes.func,
-    isOnIntegrationPage: PropTypes.bool,
-  };
-
   get isInternal() {
     return this.props.app.status === 'internal';
   }
 
   hideStatus() {
     //no publishing for internal apps so hide the status on the developer settings page
-    return this.isInternal && !this.props.isOnIntegrationPage;
+    return this.isInternal;
   }
 
   renderStatus() {
-    const {app, isOnIntegrationPage} = this.props;
-    const isInternal = this.isInternal;
-    const status = this.installationStatus;
+    const {app} = this.props;
     if (this.hideStatus()) {
       return null;
     }
-    if (isOnIntegrationPage) {
-      //if internal and we show installation status, we don't show the learn more
-      if (isInternal) {
-        return <StatusIndicator status={status} isInternal={isInternal} />;
-      }
-      return (
-        <React.Fragment>
-          <StatusIndicator status={status} isInternal={false} />
-          <StyledLink to="" onClick={this.openLearnMore}>
-            {t('Learn More')}
-          </StyledLink>
-        </React.Fragment>
-      );
-    }
     return <PublishStatus status={app.status} />;
   }
 
-  get isInstalled() {
-    return !!this.props.install;
-  }
-
   handlePublish = () => {
     const {app} = this.props;
 
     openModal(deps => <SentryAppPublishRequestModal app={app} {...deps} />);
   };
 
-  get installationStatus() {
-    if (this.props.install) {
-      return capitalize(this.props.install.status);
-    }
-
-    return NOT_INSTALLED;
-  }
-
-  openLearnMore = () => {
-    const {app, onInstall, organization, onCloseModal} = this.props;
-    const isInstalled = !!this.isInstalled;
-
-    onInstall &&
-      openSentryAppDetailsModal({
-        sentryApp: app,
-        isInstalled,
-        onInstall,
-        organization,
-        onCloseModal,
-      });
-  };
-
-  linkToEdit() {
-    const {isOnIntegrationPage} = this.props;
-    // show the link if the app is internal or we are on the developer settings page
-    // We don't want to show the link to edit on the main integrations list unless the app is internal
-    return this.isInternal || !isOnIntegrationPage;
-  }
-
   render() {
-    const {
-      app,
-      organization,
-      install,
-      isOnIntegrationPage,
-      onUninstall,
-      onRemoveApp,
-      onUninstallModalOpen,
-    } = this.props;
+    const {app, organization, onRemoveApp} = this.props;
     return (
       <SentryAppItem data-test-id={app.slug}>
         <StyledFlex>
           <PluginIcon size={36} pluginId={app.slug} />
           <SentryAppBox>
             <SentryAppName hideStatus={this.hideStatus()}>
-              {this.linkToEdit() ? (
-                <SentryAppLink
-                  to={`/settings/${organization.slug}/developer-settings/${app.slug}/`}
-                >
-                  {app.name}
-                </SentryAppLink>
-              ) : (
-                app.name
-              )}
+              <SentryAppLink
+                to={`/settings/${organization.slug}/developer-settings/${app.slug}/`}
+              >
+                {app.name}
+              </SentryAppLink>
             </SentryAppName>
             <SentryAppDetails>{this.renderStatus()}</SentryAppDetails>
           </SentryAppBox>
@@ -154,13 +63,8 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
             <SentryApplicationRowButtons
               organization={organization}
               app={app}
-              install={install}
-              isOnIntegrationPage={isOnIntegrationPage}
-              onClickInstall={this.openLearnMore}
-              onClickUninstall={onUninstall}
               onClickRemove={onRemoveApp}
               onClickPublish={this.handlePublish}
-              onUninstallModalOpen={onUninstallModalOpen}
             />
           </Box>
         </StyledFlex>
@@ -169,6 +73,12 @@ export default class SentryApplicationRow extends React.PureComponent<Props> {
   }
 }
 
+const Flex = styled('div')`
+  display: flex;
+`;
+
+const Box = styled('div')``;
+
 const SentryAppItem = styled(PanelItem)`
   flex-direction: column;
   padding: 5px;
@@ -179,7 +89,7 @@ const StyledFlex = styled(Flex)`
   padding: 10px;
 `;
 
-const SentryAppBox = styled(Box)`
+const SentryAppBox = styled('div')`
   padding-left: 15px;
   padding-right: 15px;
   flex: 1;
@@ -196,50 +106,20 @@ const SentryAppName = styled('div')<{hideStatus: boolean}>`
   margin-top: ${p => (p.hideStatus ? '10px' : '0px')};
 `;
 
-const StyledLink = styled(Link)`
-  color: ${p => p.theme.gray2};
-`;
-
 const SentryAppLink = styled(Link)`
   color: ${props => props.theme.textColor};
 `;
 
-const color = {
-  [INSTALLED]: 'success',
-  [NOT_INSTALLED]: 'gray2',
-  [PENDING]: 'yellowOrange',
-};
-
-type StatusIndicatorProps = {status: string; theme?: any; isInternal: boolean};
-
-const StatusIndicator = styled(({status, ...props}: StatusIndicatorProps) => {
-  //need to omit isInternal
-  const propsToPass = omit(props, ['isInternal']);
-  return (
-    <Flex alignItems="center">
-      <CircleIndicator size={6} color={theme[color[status]]} />
-      <div {...propsToPass}>{t(`${status}`)}</div>
-    </Flex>
-  );
-})`
-  color: ${(props: StatusIndicatorProps) => props.theme[color[props.status]]};
-  margin-left: ${space(0.5)};
-  font-weight: light;
-  &:after {
-    content: '${props => (props.isInternal ? '' : '|')}';
-    color: ${p => p.theme.gray1};
-    margin-left: ${space(0.75)};
-    font-weight: normal;
-  }
-  margin-right: ${space(0.75)};
+const CenterFlex = styled(Flex)`
+  align-items: center;
 `;
 
 type PublishStatusProps = {status: SentryApp['status']; theme?: any};
 
 const PublishStatus = styled(({status, ...props}: PublishStatusProps) => (
-  <Flex alignItems="center">
+  <CenterFlex>
     <div {...props}>{t(`${status}`)}</div>
-  </Flex>
+  </CenterFlex>
 ))`
   color: ${(props: PublishStatusProps) =>
     props.status === 'published' ? props.theme.success : props.theme.gray2};
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
index e901f75965..005563628e 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
@@ -5,9 +5,11 @@ import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import {t, tct} from 'app/locale';
 import {SentryApp, SentryAppInstallation} from 'app/types';
-import {IconAdd, IconSubtract} from 'app/icons';
+import {IconSubtract} from 'app/icons';
 import space from 'app/styles/space';
 
+//TODO(Steve): Should move somewhere else
+
 type UninstallButtonProps = {
   install: SentryAppInstallation;
   app: SentryApp;
@@ -15,49 +17,6 @@ type UninstallButtonProps = {
   onUninstallModalOpen?: () => void; //used for analytics
   disabled?: boolean;
 };
-export const UninstallButton = ({
-  install,
-  app,
-  onClickUninstall,
-  onUninstallModalOpen,
-  disabled,
-}: UninstallButtonProps) => {
-  const message = tct('Are you sure you want to remove the [slug] installation?', {
-    slug: app.slug,
-  });
-
-  return (
-    <Confirm
-      message={message}
-      priority="danger"
-      onConfirm={() => onClickUninstall && install && onClickUninstall(install)} //called when the user confirms the action
-      onConfirming={onUninstallModalOpen} //called when the confirm modal opens
-      disabled={disabled}
-    >
-      <StyledButton borderless icon="icon-trash" data-test-id="sentry-app-uninstall">
-        {t('Uninstall')}
-      </StyledButton>
-    </Confirm>
-  );
-};
-
-type InstallButtonProps = {
-  onClickInstall?: () => void;
-};
-export const InstallButton = ({onClickInstall}: InstallButtonProps) => (
-  <Button
-    onClick={onClickInstall}
-    size="small"
-    icon={<IconAdd size="xs" circle />}
-    className="btn btn-default"
-  >
-    {t('Install')}
-  </Button>
-);
-
-const StyledButton = styled(Button)`
-  color: ${p => p.theme.gray2};
-`;
 
 export const UninstallAppButton = ({
   install,
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx
index f08ba993e9..efeddd82a8 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/sentryApplicationRowButtons.tsx
@@ -2,66 +2,26 @@ import React from 'react';
 
 import Access from 'app/components/acl/access';
 import {t} from 'app/locale';
-import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
+import {Organization, SentryApp} from 'app/types';
 
 import ActionButtons from './actionButtons';
-import {InstallButton, UninstallButton} from './installButtons';
 
 type Props = {
   organization: Organization;
   app: SentryApp;
-  install?: SentryAppInstallation;
 
-  isOnIntegrationPage: boolean;
-
-  onClickInstall?: () => void;
-  onClickUninstall?: (install: SentryAppInstallation) => void;
-
-  onClickRemove?: (app: SentryApp) => void;
+  onClickRemove: (app: SentryApp) => void;
   onClickPublish?: () => void;
-
-  onUninstallModalOpen?: () => void;
 };
 
 const SentryApplicationRowButtons = ({
   organization,
   app,
-  install,
-  isOnIntegrationPage,
-  onClickInstall,
-  onClickUninstall,
   onClickRemove,
   onClickPublish,
-  onUninstallModalOpen,
 }: Props) => {
   const isInternal = app.status === 'internal';
 
-  // On the Integrations page, we show the install/uninstall buttons
-  if (isOnIntegrationPage) {
-    //no installation buttons to show if internal
-    if (isInternal) {
-      return null;
-    }
-    //if installed, render the uninstall button and if installed, render install button
-    return !!install ? (
-      //only restrict uninstall for sentry apps by role since install popup will
-      <Access organization={organization} access={['org:integrations']}>
-        {({hasAccess}) => (
-          <UninstallButton
-            install={install}
-            app={app}
-            onClickUninstall={onClickUninstall}
-            onUninstallModalOpen={onUninstallModalOpen}
-            disabled={!hasAccess}
-          />
-        )}
-      </Access>
-    ) : (
-      <InstallButton onClickInstall={onClickInstall} />
-    );
-  }
-
-  // Otherwise, we are on the Developer Settings page and we want to show the action buttons
   return (
     <Access access={['org:admin']}>
       {({hasAccess}) => {
@@ -85,8 +45,6 @@ const SentryApplicationRowButtons = ({
           <ActionButtons
             org={organization}
             app={app}
-            // we only want to show the dashboard link on developer settings page
-            showDashboard={!isOnIntegrationPage}
             showPublish={!isInternal}
             showDelete
             onPublish={onClickPublish}
diff --git a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap b/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
deleted file mode 100644
index 789cee0d24..0000000000
--- a/tests/js/spec/components/modals/__snapshots__/integrationDetailsModal.spec.jsx.snap
+++ /dev/null
@@ -1,830 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`IntegrationDetailsModal renders simple integration 1`] = `
-<IntegrationDetailsModal
-  closeModal={[MockFunction]}
-  onAddIntegration={[MockFunction]}
-  organization={
-    Object {
-      "access": Array [
-        "org:read",
-        "org:write",
-        "org:admin",
-        "org:integrations",
-        "project:read",
-        "project:write",
-        "project:admin",
-        "team:read",
-        "team:write",
-        "team:admin",
-      ],
-      "features": Array [],
-      "id": "3",
-      "name": "Organization Name",
-      "onboardingTasks": Array [],
-      "projects": Array [],
-      "scrapeJavaScript": true,
-      "slug": "org-slug",
-      "status": Object {
-        "id": "active",
-        "name": "active",
-      },
-      "teams": Array [],
-    }
-  }
-  provider={
-    Object {
-      "canAdd": true,
-      "config": Array [],
-      "externalIssues": Array [],
-      "features": Array [],
-      "key": "github",
-      "metadata": Object {
-        "aspects": Object {
-          "alerts": Array [
-            Object {
-              "text": "This is a an alert example",
-              "type": "warning",
-            },
-          ],
-        },
-        "author": "Morty",
-        "description": "*markdown* formatted _description_",
-        "features": Array [
-          Object {
-            "description": "*markdown* feature description",
-          },
-        ],
-        "issue_url": "http://example.com/integration_issue_url",
-        "noun": "Installation",
-        "source_url": "http://example.com/integration_source_url",
-      },
-      "name": "GitHub",
-      "setupDialog": Object {
-        "height": 100,
-        "url": "/github-integration-setup-uri/",
-        "width": 100,
-      },
-      "slug": "github",
-    }
-  }
->
-  <Styled(div)
-    alignItems="center"
-    mb={2}
-  >
-    <div
-      className="css-15was0r"
-    >
-      <PluginIcon
-        pluginId="github"
-        size={50}
-      >
-        <div
-          className="css-1fxjk4u-PluginIcon e7e65lm0"
-          size={50}
-        />
-      </PluginIcon>
-      <Styled(div)
-        alignItems="flex-start"
-        flexDirection="column"
-        justifyContent="center"
-        pl={1}
-      >
-        <div
-          className="css-ivx1eb"
-        >
-          <ProviderName
-            data-test-id="provider-name"
-          >
-            <Component
-              className="css-1x4y9gk-ProviderName exuwfuv1"
-              data-test-id="provider-name"
-            >
-              <Styled(div)
-                className="css-1x4y9gk-ProviderName exuwfuv1"
-                data-test-id="provider-name"
-              >
-                <div
-                  className="exuwfuv1 css-1qwjpp2-ProviderName"
-                  data-test-id="provider-name"
-                >
-                  GitHub Integration
-                </div>
-              </Styled(div)>
-            </Component>
-          </ProviderName>
-          <Styled(div)>
-            <div
-              className="css-4cffwv"
-            >
-              0
-            </div>
-          </Styled(div)>
-        </div>
-      </Styled(div)>
-    </div>
-  </Styled(div)>
-  <Description
-    dangerouslySetInnerHTML={
-      Object {
-        "__html": "<p><em>markdown</em> formatted <em>description</em></p>
-",
-      }
-    }
-  >
-    <div
-      className="css-i3aitc-Description exuwfuv2"
-      dangerouslySetInnerHTML={
-        Object {
-          "__html": "<p><em>markdown</em> formatted <em>description</em></p>
-",
-        }
-      }
-    />
-  </Description>
-  <generateFeaturesList
-    features={
-      Array [
-        Object {
-          "description": <span
-            dangerouslySetInnerHTML={
-              Object {
-                "__html": "<em>markdown</em> feature description",
-              }
-            }
-          />,
-          "featureGate": undefined,
-        },
-      ]
-    }
-    organization={
-      Object {
-        "access": Array [
-          "org:read",
-          "org:write",
-          "org:admin",
-          "org:integrations",
-          "project:read",
-          "project:write",
-          "project:admin",
-          "team:read",
-          "team:write",
-          "team:admin",
-        ],
-        "features": Array [],
-        "id": "3",
-        "name": "Organization Name",
-        "onboardingTasks": Array [],
-        "projects": Array [],
-        "scrapeJavaScript": true,
-        "slug": "org-slug",
-        "status": Object {
-          "id": "active",
-          "name": "active",
-        },
-        "teams": Array [],
-      }
-    }
-    provider={
-      Object {
-        "canAdd": true,
-        "config": Array [],
-        "externalIssues": Array [],
-        "features": Array [],
-        "key": "github",
-        "metadata": Object {
-          "aspects": Object {
-            "alerts": Array [
-              Object {
-                "text": "This is a an alert example",
-                "type": "warning",
-              },
-            ],
-          },
-          "author": "Morty",
-          "description": "*markdown* formatted _description_",
-          "features": Array [
-            Object {
-              "description": "*markdown* feature description",
-            },
-          ],
-          "issue_url": "http://example.com/integration_issue_url",
-          "noun": "Installation",
-          "source_url": "http://example.com/integration_source_url",
-        },
-        "name": "GitHub",
-        "setupDialog": Object {
-          "height": 100,
-          "url": "/github-integration-setup-uri/",
-          "width": 100,
-        },
-        "slug": "github",
-      }
-    }
-  >
-    <ul>
-      <li
-        key="0"
-      >
-        <span
-          dangerouslySetInnerHTML={
-            Object {
-              "__html": "<em>markdown</em> feature description",
-            }
-          }
-        />
-      </li>
-    </ul>
-  </generateFeaturesList>
-  <Metadata>
-    <div
-      className="css-17nk6hv-Metadata exuwfuv3"
-    >
-      <AuthorName
-        flex={1}
-      >
-        <div
-          className="css-qvtq0x-AuthorName exuwfuv4"
-        >
-          By Morty
-        </div>
-      </AuthorName>
-      <Styled(div)>
-        <div
-          className="css-vurnku"
-        >
-          <ForwardRef
-            href="http://example.com/integration_source_url"
-          >
-            <a
-              href="http://example.com/integration_source_url"
-              rel="noreferrer noopener"
-              target="_blank"
-            >
-              View Source
-            </a>
-          </ForwardRef>
-          <ForwardRef
-            href="http://example.com/integration_issue_url"
-          >
-            <a
-              href="http://example.com/integration_issue_url"
-              rel="noreferrer noopener"
-              target="_blank"
-            >
-              Report Issue
-            </a>
-          </ForwardRef>
-        </div>
-      </Styled(div)>
-    </div>
-  </Metadata>
-  <Alert
-    iconSize="24px"
-    key="0"
-    type="warning"
-  >
-    <Component
-      className="css-bcq0ox-Alert ejthpj82"
-      iconSize="24px"
-      type="warning"
-    >
-      <div
-        className="ref-warning css-bcq0ox-Alert ejthpj82"
-      >
-        <StyledTextBlock>
-          <div
-            className="css-1n7zgo7-TextBlock-StyledTextBlock ejthpj81"
-          >
-            <span
-              dangerouslySetInnerHTML={
-                Object {
-                  "__html": "This is a an alert example",
-                }
-              }
-            />
-          </div>
-        </StyledTextBlock>
-      </div>
-    </Component>
-  </Alert>
-  <generateIntegrationFeatures
-    features={
-      Array [
-        Object {
-          "description": <span
-            dangerouslySetInnerHTML={
-              Object {
-                "__html": "<em>markdown</em> feature description",
-              }
-            }
-          />,
-          "featureGate": undefined,
-        },
-      ]
-    }
-    organization={
-      Object {
-        "access": Array [
-          "org:read",
-          "org:write",
-          "org:admin",
-          "org:integrations",
-          "project:read",
-          "project:write",
-          "project:admin",
-          "team:read",
-          "team:write",
-          "team:admin",
-        ],
-        "features": Array [],
-        "id": "3",
-        "name": "Organization Name",
-        "onboardingTasks": Array [],
-        "projects": Array [],
-        "scrapeJavaScript": true,
-        "slug": "org-slug",
-        "status": Object {
-          "id": "active",
-          "name": "active",
-        },
-        "teams": Array [],
-      }
-    }
-  >
-    <div
-      className="modal-footer"
-    >
-      <forwardRef<Button>
-        data-test-id="cancel-button"
-        onClick={[MockFunction]}
-        size="small"
-      >
-        <Button
-          align="center"
-          data-test-id="cancel-button"
-          disabled={false}
-          forwardRef={null}
-          onClick={[MockFunction]}
-          size="small"
-        >
-          <StyledButton
-            aria-disabled={false}
-            aria-label="Cancel"
-            data-test-id="cancel-button"
-            disabled={false}
-            forwardRef={null}
-            onClick={[Function]}
-            role="button"
-            size="small"
-          >
-            <Component
-              aria-disabled={false}
-              aria-label="Cancel"
-              className="css-12ogwys-StyledButton edwq9my0"
-              data-test-id="cancel-button"
-              forwardRef={null}
-              onClick={[Function]}
-              role="button"
-              size="small"
-            >
-              <button
-                aria-disabled={false}
-                aria-label="Cancel"
-                className="css-12ogwys-StyledButton edwq9my0"
-                data-test-id="cancel-button"
-                onClick={[Function]}
-                role="button"
-                size="small"
-              >
-                <ButtonLabel
-                  align="center"
-                  size="small"
-                >
-                  <span
-                    className="css-19gcr2f-ButtonLabel edwq9my1"
-                  >
-                    Cancel
-                  </span>
-                </ButtonLabel>
-              </button>
-            </Component>
-          </StyledButton>
-        </Button>
-      </forwardRef<Button>>
-      <WithOrganizationMockWrapper
-        access={
-          Array [
-            "org:integrations",
-          ]
-        }
-        organization={
-          Object {
-            "access": Array [
-              "org:read",
-              "org:write",
-              "org:admin",
-              "org:integrations",
-              "project:read",
-              "project:write",
-              "project:admin",
-              "team:read",
-              "team:write",
-              "team:admin",
-            ],
-            "features": Array [],
-            "id": "3",
-            "name": "Organization Name",
-            "onboardingTasks": Array [],
-            "projects": Array [],
-            "scrapeJavaScript": true,
-            "slug": "org-slug",
-            "status": Object {
-              "id": "active",
-              "name": "active",
-            },
-            "teams": Array [],
-          }
-        }
-      >
-        <withConfig(Access)
-          access={
-            Array [
-              "org:integrations",
-            ]
-          }
-          organization={
-            Object {
-              "access": Array [
-                "org:read",
-                "org:write",
-                "org:admin",
-                "org:integrations",
-                "project:read",
-                "project:write",
-                "project:admin",
-                "team:read",
-                "team:write",
-                "team:admin",
-              ],
-              "features": Array [],
-              "id": "3",
-              "name": "Organization Name",
-              "onboardingTasks": Array [],
-              "projects": Array [],
-              "scrapeJavaScript": true,
-              "slug": "org-slug",
-              "status": Object {
-                "id": "active",
-                "name": "active",
-              },
-              "teams": Array [],
-            }
-          }
-        >
-          <Access
-            access={
-              Array [
-                "org:integrations",
-              ]
-            }
-            config={
-              Object {
-                "features": Set {},
-                "messages": Array [],
-                "user": Object {
-                  "email": "foo@example.com",
-                  "flags": Object {
-                    "newsletter_consent_prompt": false,
-                  },
-                  "hasPasswordAuth": true,
-                  "id": "1",
-                  "isAuthenticated": true,
-                  "name": "Foo Bar",
-                  "options": Object {
-                    "timezone": "UTC",
-                  },
-                  "permissions": Set {},
-                  "username": "foo@example.com",
-                },
-              }
-            }
-            isSuperuser={false}
-            organization={
-              Object {
-                "access": Array [
-                  "org:read",
-                  "org:write",
-                  "org:admin",
-                  "org:integrations",
-                  "project:read",
-                  "project:write",
-                  "project:admin",
-                  "team:read",
-                  "team:write",
-                  "team:admin",
-                ],
-                "features": Array [],
-                "id": "3",
-                "name": "Organization Name",
-                "onboardingTasks": Array [],
-                "projects": Array [],
-                "scrapeJavaScript": true,
-                "slug": "org-slug",
-                "status": Object {
-                  "id": "active",
-                  "name": "active",
-                },
-                "teams": Array [],
-              }
-            }
-            renderNoAccessMessage={false}
-            requireAll={true}
-          >
-            <Tooltip
-              containerDisplayMode="inline-block"
-              disabled={true}
-              position="top"
-              title="You must be an organization owner, manager or admin to install this."
-            >
-              <AddButton
-                data-test-id="add-button"
-                disabled={false}
-                organization={
-                  Object {
-                    "access": Array [
-                      "org:read",
-                      "org:write",
-                      "org:admin",
-                      "org:integrations",
-                      "project:read",
-                      "project:write",
-                      "project:admin",
-                      "team:read",
-                      "team:write",
-                      "team:admin",
-                    ],
-                    "features": Array [],
-                    "id": "3",
-                    "name": "Organization Name",
-                    "onboardingTasks": Array [],
-                    "projects": Array [],
-                    "scrapeJavaScript": true,
-                    "slug": "org-slug",
-                    "status": Object {
-                      "id": "active",
-                      "name": "active",
-                    },
-                    "teams": Array [],
-                  }
-                }
-              >
-                <AddIntegrationButton
-                  data-test-id="add-button"
-                  disabled={false}
-                  onAddIntegration={[Function]}
-                  organization={
-                    Object {
-                      "access": Array [
-                        "org:read",
-                        "org:write",
-                        "org:admin",
-                        "org:integrations",
-                        "project:read",
-                        "project:write",
-                        "project:admin",
-                        "team:read",
-                        "team:write",
-                        "team:admin",
-                      ],
-                      "features": Array [],
-                      "id": "3",
-                      "name": "Organization Name",
-                      "onboardingTasks": Array [],
-                      "projects": Array [],
-                      "scrapeJavaScript": true,
-                      "slug": "org-slug",
-                      "status": Object {
-                        "id": "active",
-                        "name": "active",
-                      },
-                      "teams": Array [],
-                    }
-                  }
-                  priority="primary"
-                  provider={
-                    Object {
-                      "canAdd": true,
-                      "config": Array [],
-                      "externalIssues": Array [],
-                      "features": Array [],
-                      "key": "github",
-                      "metadata": Object {
-                        "aspects": Object {
-                          "alerts": Array [
-                            Object {
-                              "text": "This is a an alert example",
-                              "type": "warning",
-                            },
-                          ],
-                        },
-                        "author": "Morty",
-                        "description": "*markdown* formatted _description_",
-                        "features": Array [
-                          Object {
-                            "description": "*markdown* feature description",
-                          },
-                        ],
-                        "issue_url": "http://example.com/integration_issue_url",
-                        "noun": "Installation",
-                        "source_url": "http://example.com/integration_source_url",
-                      },
-                      "name": "GitHub",
-                      "setupDialog": Object {
-                        "height": 100,
-                        "url": "/github-integration-setup-uri/",
-                        "width": 100,
-                      },
-                      "slug": "github",
-                    }
-                  }
-                  size="small"
-                  style={
-                    Object {
-                      "marginLeft": "8px",
-                    }
-                  }
-                >
-                  <Tooltip
-                    containerDisplayMode="inline-block"
-                    disabled={true}
-                    position="top"
-                    title="Integration cannot be added on Sentry. Enable this integration via the GitHub instance."
-                  >
-                    <AddIntegration
-                      onInstall={[Function]}
-                      organization={
-                        Object {
-                          "access": Array [
-                            "org:read",
-                            "org:write",
-                            "org:admin",
-                            "org:integrations",
-                            "project:read",
-                            "project:write",
-                            "project:admin",
-                            "team:read",
-                            "team:write",
-                            "team:admin",
-                          ],
-                          "features": Array [],
-                          "id": "3",
-                          "name": "Organization Name",
-                          "onboardingTasks": Array [],
-                          "projects": Array [],
-                          "scrapeJavaScript": true,
-                          "slug": "org-slug",
-                          "status": Object {
-                            "id": "active",
-                            "name": "active",
-                          },
-                          "teams": Array [],
-                        }
-                      }
-                      provider={
-                        Object {
-                          "canAdd": true,
-                          "config": Array [],
-                          "externalIssues": Array [],
-                          "features": Array [],
-                          "key": "github",
-                          "metadata": Object {
-                            "aspects": Object {
-                              "alerts": Array [
-                                Object {
-                                  "text": "This is a an alert example",
-                                  "type": "warning",
-                                },
-                              ],
-                            },
-                            "author": "Morty",
-                            "description": "*markdown* formatted _description_",
-                            "features": Array [
-                              Object {
-                                "description": "*markdown* feature description",
-                              },
-                            ],
-                            "issue_url": "http://example.com/integration_issue_url",
-                            "noun": "Installation",
-                            "source_url": "http://example.com/integration_source_url",
-                          },
-                          "name": "GitHub",
-                          "setupDialog": Object {
-                            "height": 100,
-                            "url": "/github-integration-setup-uri/",
-                            "width": 100,
-                          },
-                          "slug": "github",
-                        }
-                      }
-                    >
-                      <forwardRef<Button>
-                        data-test-id="add-button"
-                        disabled={false}
-                        onClick={[Function]}
-                        priority="primary"
-                        size="small"
-                        style={
-                          Object {
-                            "marginLeft": "8px",
-                          }
-                        }
-                      >
-                        <Button
-                          align="center"
-                          data-test-id="add-button"
-                          disabled={false}
-                          forwardRef={null}
-                          onClick={[Function]}
-                          priority="primary"
-                          size="small"
-                          style={
-                            Object {
-                              "marginLeft": "8px",
-                            }
-                          }
-                        >
-                          <StyledButton
-                            aria-disabled={false}
-                            aria-label="Add Installation"
-                            data-test-id="add-button"
-                            disabled={false}
-                            forwardRef={null}
-                            onClick={[Function]}
-                            priority="primary"
-                            role="button"
-                            size="small"
-                            style={
-                              Object {
-                                "marginLeft": "8px",
-                              }
-                            }
-                          >
-                            <Component
-                              aria-disabled={false}
-                              aria-label="Add Installation"
-                              className="css-z8at1v-StyledButton edwq9my0"
-                              data-test-id="add-button"
-                              forwardRef={null}
-                              onClick={[Function]}
-                              role="button"
-                              size="small"
-                              style={
-                                Object {
-                                  "marginLeft": "8px",
-                                }
-                              }
-                            >
-                              <button
-                                aria-disabled={false}
-                                aria-label="Add Installation"
-                                className="css-z8at1v-StyledButton edwq9my0"
-                                data-test-id="add-button"
-                                onClick={[Function]}
-                                role="button"
-                                size="small"
-                                style={
-                                  Object {
-                                    "marginLeft": "8px",
-                                  }
-                                }
-                              >
-                                <ButtonLabel
-                                  align="center"
-                                  priority="primary"
-                                  size="small"
-                                >
-                                  <span
-                                    className="css-19gcr2f-ButtonLabel edwq9my1"
-                                  >
-                                    Add Installation
-                                  </span>
-                                </ButtonLabel>
-                              </button>
-                            </Component>
-                          </StyledButton>
-                        </Button>
-                      </forwardRef<Button>>
-                    </AddIntegration>
-                  </Tooltip>
-                </AddIntegrationButton>
-              </AddButton>
-            </Tooltip>
-          </Access>
-        </withConfig(Access)>
-      </WithOrganizationMockWrapper>
-    </div>
-  </generateIntegrationFeatures>
-</IntegrationDetailsModal>
-`;
diff --git a/tests/js/spec/components/modals/integrationDetailsModal.spec.jsx b/tests/js/spec/components/modals/integrationDetailsModal.spec.jsx
deleted file mode 100644
index b7aadac463..0000000000
--- a/tests/js/spec/components/modals/integrationDetailsModal.spec.jsx
+++ /dev/null
@@ -1,78 +0,0 @@
-import React from 'react';
-
-import {mountWithTheme} from 'sentry-test/enzyme';
-import IntegrationDetailsModal from 'app/components/modals/integrationDetailsModal';
-import HookStore from 'app/stores/hookStore';
-
-describe('IntegrationDetailsModal', function() {
-  const integrationAdded = jest.fn();
-  const org = TestStubs.Organization();
-  const routerContext = TestStubs.routerContext();
-
-  it('renders simple integration', function() {
-    const onClose = jest.fn();
-    const provider = TestStubs.GitHubIntegrationProvider();
-
-    const wrapper = mountWithTheme(
-      <IntegrationDetailsModal
-        provider={provider}
-        closeModal={onClose}
-        organization={org}
-        onAddIntegration={integrationAdded}
-      />,
-      routerContext
-    );
-
-    expect(wrapper).toMatchSnapshot();
-    wrapper
-      .find('Button')
-      .first()
-      .simulate('click');
-    expect(onClose).toHaveBeenCalled();
-  });
-
-  it('renders link for non-addable integration', function() {
-    const onClose = jest.fn();
-    const provider = TestStubs.JiraIntegrationProvider();
-
-    const wrapper = mountWithTheme(
-      <IntegrationDetailsModal
-        provider={provider}
-        closeModal={onClose}
-        organization={org}
-        onAddIntegration={integrationAdded}
-      />,
-      routerContext
-    );
-
-    expect(wrapper.find('Button[external]').exists()).toBe(true);
-  });
-
-  it('disables the button via a hookstore IntegrationFeatures component', function() {
-    HookStore.add('integrations:feature-gates', () => ({
-      FeatureList: () => null,
-      IntegrationFeatures: p =>
-        p.children({
-          disabled: true,
-          disabledReason: 'Integration disabled',
-          ungatedFeatures: p.features,
-          gatedFeatureGroups: [],
-        }),
-    }));
-
-    const provider = TestStubs.GitHubIntegrationProvider();
-
-    const wrapper = mountWithTheme(
-      <IntegrationDetailsModal
-        provider={provider}
-        onAddIntegration={integrationAdded}
-        organization={org}
-        closeModal={() => null}
-      />,
-      routerContext
-    );
-
-    expect(wrapper.find('Button[disabled]').exists()).toBe(true);
-    expect(wrapper.find('DisabledNotice').text()).toBe('Integration disabled');
-  });
-});
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
deleted file mode 100644
index 1486986ed4..0000000000
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallationDetail.spec.jsx.snap
+++ /dev/null
@@ -1,390 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`Sentry App Installations displays all Apps owned by the Org 1`] = `
-<SentryAppInstallationDetail
-  api={
-    Client {
-      "_chain": [Function],
-      "_wrapRequest": [Function],
-      "bulkUpdate": [Function],
-      "handleRequestError": [Function],
-      "hasProjectBeenRenamed": [Function],
-    }
-  }
-  app={
-    Object {
-      "author": "Sentry",
-      "clientId": "client-id",
-      "clientSecret": "client-secret",
-      "events": Array [],
-      "isAlertable": false,
-      "name": "Sample App",
-      "overview": "This is an app.",
-      "redirectUrl": "https://example/com/setup",
-      "schema": Object {},
-      "scopes": Array [
-        "project:read",
-      ],
-      "slug": "sample-app",
-      "status": "unpublished",
-      "uuid": "123456123456123456123456",
-      "webhookUrl": "https://example.com/webhook",
-    }
-  }
-  onAppInstall={[MockFunction]}
-  onAppUninstall={[MockFunction]}
-  organization={
-    Object {
-      "access": Array [
-        "org:read",
-        "org:write",
-        "org:admin",
-        "org:integrations",
-        "project:read",
-        "project:write",
-        "project:admin",
-        "team:read",
-        "team:write",
-        "team:admin",
-      ],
-      "features": Array [],
-      "id": "3",
-      "name": "Organization Name",
-      "onboardingTasks": Array [],
-      "projects": Array [],
-      "scrapeJavaScript": true,
-      "slug": "org-slug",
-      "status": Object {
-        "id": "active",
-        "name": "active",
-      },
-      "teams": Array [],
-    }
-  }
->
-  <SentryApplicationRow
-    app={
-      Object {
-        "author": "Sentry",
-        "clientId": "client-id",
-        "clientSecret": "client-secret",
-        "events": Array [],
-        "isAlertable": false,
-        "name": "Sample App",
-        "overview": "This is an app.",
-        "redirectUrl": "https://example/com/setup",
-        "schema": Object {},
-        "scopes": Array [
-          "project:read",
-        ],
-        "slug": "sample-app",
-        "status": "unpublished",
-        "uuid": "123456123456123456123456",
-        "webhookUrl": "https://example.com/webhook",
-      }
-    }
-    isOnIntegrationPage={true}
-    onInstall={[Function]}
-    onUninstall={[Function]}
-    onUninstallModalOpen={[Function]}
-    organization={
-      Object {
-        "access": Array [
-          "org:read",
-          "org:write",
-          "org:admin",
-          "org:integrations",
-          "project:read",
-          "project:write",
-          "project:admin",
-          "team:read",
-          "team:write",
-          "team:admin",
-        ],
-        "features": Array [],
-        "id": "3",
-        "name": "Organization Name",
-        "onboardingTasks": Array [],
-        "projects": Array [],
-        "scrapeJavaScript": true,
-        "slug": "org-slug",
-        "status": Object {
-          "id": "active",
-          "name": "active",
-        },
-        "teams": Array [],
-      }
-    }
-  >
-    <SentryAppItem
-      data-test-id="sample-app"
-      p={2}
-    >
-      <div
-        className="css-1gsw4j6-PanelItem-SentryAppItem e5fmmf40"
-        data-test-id="sample-app"
-      >
-        <StyledFlex>
-          <div
-            className="css-1dabis4-StyledFlex e5fmmf41"
-          >
-            <PluginIcon
-              pluginId="sample-app"
-              size={36}
-            >
-              <div
-                className="css-10qz5vf-PluginIcon e7e65lm0"
-                size={36}
-              />
-            </PluginIcon>
-            <SentryAppBox>
-              <div
-                className="css-u62khm-SentryAppBox e5fmmf42"
-              >
-                <SentryAppName
-                  hideStatus={false}
-                >
-                  <div
-                    className="css-1t6qztj-SentryAppName e5fmmf44"
-                  >
-                    Sample App
-                  </div>
-                </SentryAppName>
-                <SentryAppDetails>
-                  <div
-                    className="css-gd49ss-SentryAppDetails e5fmmf43"
-                  >
-                    <StatusIndicator
-                      isInternal={false}
-                      status="Not Installed"
-                    >
-                      <Component
-                        className="css-s3jjkg-StatusIndicator e5fmmf47"
-                        isInternal={false}
-                        status="Not Installed"
-                      >
-                        <Styled(div)
-                          alignItems="center"
-                        >
-                          <div
-                            className="css-zkfaav"
-                          >
-                            <CircleIndicator
-                              color="#9585A3"
-                              enabled={true}
-                              size={6}
-                            >
-                              <div
-                                className="css-8o8wlf-CircleIndicator exfjg1y0"
-                                color="#9585A3"
-                                size={6}
-                              />
-                            </CircleIndicator>
-                            <div
-                              className="css-s3jjkg-StatusIndicator e5fmmf47"
-                            >
-                              Not Installed
-                            </div>
-                          </div>
-                        </Styled(div)>
-                      </Component>
-                    </StatusIndicator>
-                    <StyledLink
-                      onClick={[Function]}
-                      onlyActiveOnIndex={false}
-                      style={Object {}}
-                      to=""
-                    >
-                      <Link
-                        className="css-fznx2k-StyledLink e5fmmf45"
-                        onClick={[Function]}
-                        onlyActiveOnIndex={false}
-                        style={Object {}}
-                        to=""
-                      >
-                        <a
-                          className="css-fznx2k-StyledLink e5fmmf45"
-                          onClick={[Function]}
-                          style={Object {}}
-                        >
-                          Learn More
-                        </a>
-                      </Link>
-                    </StyledLink>
-                  </div>
-                </SentryAppDetails>
-              </div>
-            </SentryAppBox>
-            <Styled(div)>
-              <div
-                className="css-vurnku"
-              >
-                <SentryApplicationRowButtons
-                  app={
-                    Object {
-                      "author": "Sentry",
-                      "clientId": "client-id",
-                      "clientSecret": "client-secret",
-                      "events": Array [],
-                      "isAlertable": false,
-                      "name": "Sample App",
-                      "overview": "This is an app.",
-                      "redirectUrl": "https://example/com/setup",
-                      "schema": Object {},
-                      "scopes": Array [
-                        "project:read",
-                      ],
-                      "slug": "sample-app",
-                      "status": "unpublished",
-                      "uuid": "123456123456123456123456",
-                      "webhookUrl": "https://example.com/webhook",
-                    }
-                  }
-                  isOnIntegrationPage={true}
-                  onClickInstall={[Function]}
-                  onClickPublish={[Function]}
-                  onClickUninstall={[Function]}
-                  onUninstallModalOpen={[Function]}
-                  organization={
-                    Object {
-                      "access": Array [
-                        "org:read",
-                        "org:write",
-                        "org:admin",
-                        "org:integrations",
-                        "project:read",
-                        "project:write",
-                        "project:admin",
-                        "team:read",
-                        "team:write",
-                        "team:admin",
-                      ],
-                      "features": Array [],
-                      "id": "3",
-                      "name": "Organization Name",
-                      "onboardingTasks": Array [],
-                      "projects": Array [],
-                      "scrapeJavaScript": true,
-                      "slug": "org-slug",
-                      "status": Object {
-                        "id": "active",
-                        "name": "active",
-                      },
-                      "teams": Array [],
-                    }
-                  }
-                >
-                  <InstallButton
-                    onClickInstall={[Function]}
-                  >
-                    <forwardRef<Button>
-                      className="btn btn-default"
-                      icon={
-                        <ForwardRef(IconAdd)
-                          circle={true}
-                          size="xs"
-                        />
-                      }
-                      onClick={[Function]}
-                      size="small"
-                    >
-                      <Button
-                        align="center"
-                        className="btn btn-default"
-                        disabled={false}
-                        forwardRef={null}
-                        icon={
-                          <ForwardRef(IconAdd)
-                            circle={true}
-                            size="xs"
-                          />
-                        }
-                        onClick={[Function]}
-                        size="small"
-                      >
-                        <StyledButton
-                          aria-disabled={false}
-                          aria-label="Install"
-                          className="btn btn-default"
-                          disabled={false}
-                          forwardRef={null}
-                          onClick={[Function]}
-                          role="button"
-                          size="small"
-                        >
-                          <Component
-                            aria-disabled={false}
-                            aria-label="Install"
-                            className="btn btn-default css-12ogwys-StyledButton edwq9my0"
-                            forwardRef={null}
-                            onClick={[Function]}
-                            role="button"
-                            size="small"
-                          >
-                            <button
-                              aria-disabled={false}
-                              aria-label="Install"
-                              className="btn btn-default css-12ogwys-StyledButton edwq9my0"
-                              onClick={[Function]}
-                              role="button"
-                              size="small"
-                            >
-                              <ButtonLabel
-                                align="center"
-                                size="small"
-                              >
-                                <span
-                                  className="css-19gcr2f-ButtonLabel edwq9my1"
-                                >
-                                  <Icon
-                                    hasChildren={true}
-                                    size="small"
-                                  >
-                                    <span
-                                      className="css-5zck09-Icon edwq9my2"
-                                      size="small"
-                                    >
-                                      <ForwardRef(IconAdd)
-                                        circle={true}
-                                        size="xs"
-                                      >
-                                        <svg
-                                          fill="currentColor"
-                                          height="12px"
-                                          viewBox="0 0 16 16"
-                                          width="12px"
-                                        >
-                                          <g>
-                                            <path
-                                              d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
-                                            />
-                                            <path
-                                              d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
-                                            />
-                                            <path
-                                              d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
-                                            />
-                                          </g>
-                                        </svg>
-                                      </ForwardRef(IconAdd)>
-                                    </span>
-                                  </Icon>
-                                  Install
-                                </span>
-                              </ButtonLabel>
-                            </button>
-                          </Component>
-                        </StyledButton>
-                      </Button>
-                    </forwardRef<Button>>
-                  </InstallButton>
-                </SentryApplicationRowButtons>
-              </div>
-            </Styled(div)>
-          </div>
-        </StyledFlex>
-      </div>
-    </SentryAppItem>
-  </SentryApplicationRow>
-</SentryAppInstallationDetail>
-`;
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
deleted file mode 100644
index eb7eb14707..0000000000
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ /dev/null
@@ -1,537 +0,0 @@
-/*global global*/
-import React from 'react';
-
-import {mountWithTheme} from 'sentry-test/enzyme';
-import {Client} from 'app/api';
-import {
-  openIntegrationDetails,
-  openSentryAppDetailsModal,
-} from 'app/actionCreators/modal';
-import {OrganizationIntegrations} from 'app/views/organizationIntegrations';
-
-jest.mock('app/actionCreators/modal', () => ({
-  openIntegrationDetails: jest.fn(),
-  openSentryAppDetailsModal: jest.fn(),
-}));
-
-describe('OrganizationIntegrations', () => {
-  let wrapper;
-
-  let org;
-  let sentryApp;
-
-  let githubProvider;
-  let jiraProvider;
-  let vstsProvider;
-
-  let githubIntegration;
-  let jiraIntegration;
-
-  let routerContext;
-
-  let publishedSentryAppsRequest;
-  let orgOwnedSentryAppsRequest;
-  let sentryInstallsRequest;
-
-  let focus;
-  let open;
-  let otherProps;
-
-  beforeEach(() => {
-    Client.clearMockResponses();
-
-    org = TestStubs.Organization();
-    sentryApp = TestStubs.SentryApp();
-
-    githubProvider = TestStubs.GitHubIntegrationProvider({
-      integrations: [],
-      isInstalled: false,
-    });
-
-    jiraProvider = TestStubs.JiraIntegrationProvider();
-    vstsProvider = TestStubs.VstsIntegrationProvider();
-
-    githubIntegration = TestStubs.GitHubIntegration();
-    jiraIntegration = TestStubs.JiraIntegration();
-
-    routerContext = TestStubs.routerContext();
-
-    focus = jest.fn();
-    open = jest.fn().mockReturnValue({focus});
-    global.open = open;
-
-    otherProps = {
-      location: {
-        search: '',
-      },
-      params: {orgId: org.slug},
-    };
-
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/integrations/`,
-      body: [],
-    });
-
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/config/integrations/`,
-      body: {providers: [githubProvider, jiraProvider]},
-    });
-
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/plugins/`,
-      body: [],
-    });
-
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/repos/?status=unmigratable`,
-      body: [],
-    });
-
-    publishedSentryAppsRequest = Client.addMockResponse({
-      url: '/sentry-apps/',
-      body: [],
-    });
-
-    orgOwnedSentryAppsRequest = Client.addMockResponse({
-      url: `/organizations/${org.slug}/sentry-apps/`,
-      body: [],
-    });
-
-    sentryInstallsRequest = Client.addMockResponse({
-      url: `/organizations/${org.slug}/sentry-app-installations/`,
-      body: [],
-    });
-
-    wrapper = mountWithTheme(
-      <OrganizationIntegrations organization={org} {...otherProps} />,
-      routerContext
-    );
-  });
-
-  describe('sorting', () => {
-    let installedSentryApp;
-    let sentryAppInstall;
-
-    beforeEach(() => {
-      installedSentryApp = TestStubs.SentryApp({
-        name: 'An Integration',
-        slug: 'an-integration',
-        status: 'published',
-      });
-
-      sentryAppInstall = TestStubs.SentryAppInstallation({
-        organization: {
-          slug: org.slug,
-        },
-        app: {
-          slug: installedSentryApp.slug,
-          uuid: installedSentryApp.uuid,
-        },
-      });
-
-      Client.addMockResponse({
-        url: `/organizations/${org.slug}/integrations/`,
-        body: [jiraIntegration],
-      });
-
-      Client.addMockResponse({
-        url: `/organizations/${org.slug}/sentry-apps/`,
-        body: [sentryApp, installedSentryApp],
-      });
-
-      Client.addMockResponse({
-        url: `/organizations/${org.slug}/sentry-app-installations/`,
-        body: [sentryAppInstall],
-      });
-
-      wrapper = mountWithTheme(
-        <OrganizationIntegrations organization={org} {...otherProps} />,
-        routerContext
-      );
-    });
-
-    it('places installed Integrations above uninstalled ones', () => {
-      // Installed apps are shown at the top of the list
-      const installed = wrapper.find('SentryAppInstallationDetail').at(0);
-      expect(installed.find('StatusIndicator').prop('status')).toBe('Installed');
-
-      // Uninstalled are shown lower.
-      const uninstalled = wrapper.find('SentryAppInstallationDetail').at(1);
-      expect(uninstalled.find('StatusIndicator').prop('status')).toBe('Not Installed');
-    });
-
-    it('sorts Sentry App Integrations among Integrations, alphabetically', () => {
-      const rows = wrapper.find('[data-test-id="integration-row"]');
-
-      expect(rows.length).toBe(4);
-
-      // Installed
-      expect(
-        rows
-          .at(0)
-          .find('SentryAppName')
-          .text()
-      ).toMatch(installedSentryApp.name);
-
-      // Uninstalled, alphabetically
-      expect(
-        rows
-          .at(1)
-          .find('ProviderName')
-          .text()
-      ).toMatch('Jira');
-      expect(
-        rows
-          .at(2)
-          .find('ProviderName')
-          .text()
-      ).toMatch('GitHub');
-      expect(
-        rows
-          .at(3)
-          .find('SentryAppName')
-          .text()
-      ).toMatch('Sample App');
-    });
-  });
-
-  describe('render()', () => {
-    describe('without integrations', () => {
-      it('renders sentry apps', () => {
-        orgOwnedSentryAppsRequest = Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-apps/`,
-          body: [sentryApp],
-        });
-
-        mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-
-        expect(publishedSentryAppsRequest).toHaveBeenCalled();
-        expect(orgOwnedSentryAppsRequest).toHaveBeenCalled();
-        expect(sentryInstallsRequest).toHaveBeenCalled();
-      });
-
-      it('renders a Learn More modal for Sentry Apps', () => {
-        orgOwnedSentryAppsRequest = Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-apps/`,
-          body: [sentryApp],
-        });
-
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-
-        wrapper.find('SentryApplicationRow Link').simulate('click');
-
-        expect(openSentryAppDetailsModal).toHaveBeenCalledWith({
-          sentryApp,
-          isInstalled: false,
-          onInstall: expect.any(Function),
-          onCloseModal: expect.any(Function),
-          organization: org,
-        });
-      });
-
-      it('Opens the integration dialog on install', function() {
-        const options = {
-          provider: githubProvider,
-          onAddIntegration: wrapper.instance().onInstall,
-          organization: routerContext.context.organization,
-          isInstalled: false,
-          onCloseModal: expect.any(Function),
-        };
-
-        wrapper
-          .find('Button')
-          .first()
-          .simulate('click');
-
-        expect(openIntegrationDetails).toHaveBeenCalledWith(options);
-      });
-    });
-
-    describe('published and org-owned apps are consolidated', () => {
-      it('renders sentry app once', () => {
-        const publishedApp = {...sentryApp, status: 'published'};
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-apps/`,
-          body: [publishedApp],
-        });
-        Client.addMockResponse({
-          url: '/sentry-apps/',
-          body: [publishedApp],
-        });
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-        expect(wrapper.find('SentryAppInstallationDetail').length).toBe(1);
-      });
-    });
-
-    describe('pending applications', () => {
-      it('renders the pending status', () => {
-        const installedSentryApp = TestStubs.SentryApp({
-          name: 'An Integration',
-          slug: 'an-integration',
-        });
-
-        const sentryAppInstall = TestStubs.SentryAppInstallation({
-          organization: {
-            slug: org.slug,
-          },
-          app: {
-            slug: installedSentryApp.slug,
-            uuid: installedSentryApp.uuid,
-          },
-          status: 'pending',
-        });
-
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-apps/`,
-          body: [installedSentryApp],
-        });
-
-        Client.addMockResponse({
-          url: '/sentry-apps/',
-          body: [installedSentryApp],
-        });
-
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-app-installations/`,
-          body: [sentryAppInstall],
-        });
-
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-        const pending = wrapper.find('SentryAppInstallationDetail').at(0);
-        expect(pending.find('StatusIndicator').prop('status')).toBe('Pending');
-      });
-    });
-
-    describe('internal apps are separate', () => {
-      it('renders internal sentry app', () => {
-        const internalApp = {...sentryApp, status: 'internal'};
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-apps/`,
-          body: [internalApp],
-        });
-        Client.addMockResponse({
-          url: '/sentry-apps/',
-          body: [],
-        });
-
-        const internalAppInstall = TestStubs.SentryAppInstallation({
-          organization: {
-            slug: org.slug,
-          },
-          app: {
-            slug: internalApp.slug,
-            uuid: internalApp.uuid,
-          },
-        });
-
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-app-installations/`,
-          body: [internalAppInstall],
-        });
-
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-        expect(
-          wrapper.find('Panel [data-test-id="internal-integration-row"]').exists()
-        ).toBe(true);
-        const appRow = wrapper.find('SentryApplicationRow').at(0);
-        expect(appRow.find('StatusIndicator').prop('status')).toBe('Installed');
-      });
-
-      it('removes an internal app', async function() {
-        const internalApp = {...sentryApp, status: 'internal'};
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/sentry-apps/`,
-          body: [internalApp],
-        });
-        Client.addMockResponse({
-          url: '/sentry-apps/',
-          body: [],
-        });
-        Client.addMockResponse({
-          url: `/sentry-apps/${internalApp.slug}/`,
-          method: 'DELETE',
-          statusCode: 200,
-        });
-
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-        wrapper.instance().handleRemoveInternalSentryApp(internalApp);
-        await tick();
-        wrapper.update();
-        expect(wrapper.instance().state.orgOwnedApps).toHaveLength(0);
-      });
-    });
-
-    describe('with installed integrations', () => {
-      let updatedIntegration;
-
-      beforeEach(() => {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/`,
-          body: [githubIntegration, jiraIntegration],
-        });
-
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-
-        updatedIntegration = Object.assign({}, githubIntegration, {
-          domain_name: 'updated-integration.github.com',
-          icon: 'http://example.com/updated-integration-icon.png',
-          name: 'Updated Integration',
-        });
-      });
-
-      it('Displays InstalledIntegration', function() {
-        const github = wrapper.find('ProviderRow').first();
-        expect(github.find('ProviderName').text()).toEqual(githubProvider.name);
-        expect(github.find('IntegrationItem IntegrationName').text()).toEqual(
-          githubIntegration.name
-        );
-      });
-
-      it('Merges installed integrations', () => {
-        wrapper.instance().onInstall(updatedIntegration);
-
-        expect(wrapper.instance().state.integrations).toHaveLength(2);
-        expect(wrapper.instance().state.integrations[1]).toBe(updatedIntegration);
-      });
-
-      it('Deletes an integration', () => {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/${jiraIntegration.id}/`,
-          method: 'DELETE',
-          statusCode: 200,
-        });
-
-        wrapper.instance().onRemove(jiraIntegration);
-
-        expect(wrapper.instance().state.integrations).toHaveLength(1);
-        expect(wrapper.instance().state.integrations[0]).toBe(githubIntegration);
-      });
-    });
-
-    describe('with matching plugins installed', () => {
-      beforeEach(() => {
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/integrations/`,
-          body: [githubIntegration],
-        });
-
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/config/integrations/`,
-          body: {providers: [githubProvider, jiraProvider, vstsProvider]},
-        });
-
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/plugins/`,
-          body: [
-            {
-              slug: 'github',
-              enabled: true,
-            },
-            {
-              slug: 'vsts',
-              enabled: true,
-            },
-            {
-              slug: 'jira',
-              enabled: true,
-            },
-          ],
-        });
-
-        Client.addMockResponse({
-          url: `/organizations/${org.slug}/repos/?status=unmigratable`,
-          body: [
-            {
-              provider: {
-                id: 'github',
-                name: 'GitHub',
-              },
-              name: 'Test-Org/foo',
-            },
-          ],
-        });
-
-        wrapper = mountWithTheme(
-          <OrganizationIntegrations organization={org} {...otherProps} />,
-          routerContext
-        );
-      });
-
-      it('displays an Update when the Plugin is enabled but a new Integration is not', () => {
-        expect(
-          wrapper
-            .find('ProviderRow PanelItem[data-test-id="vsts"] Button')
-            .first()
-            .text()
-        ).toBe('Update');
-      });
-
-      it('displays Add Another button when both Integration and Plugin are enabled', () => {
-        expect(
-          wrapper
-            .find('ProviderRow PanelItem[data-test-id="github"] Button')
-            .first()
-            .text()
-        ).toBe('Add Another');
-      });
-
-      it('display an Install button when its not an upgradable Integration', () => {
-        expect(
-          wrapper
-            .find('ProviderRow PanelItem[data-test-id="jira"] Button')
-            .first()
-            .text()
-        ).toBe('Install');
-      });
-    });
-  });
-  describe('extra_app query parameter defined', () => {
-    it('loads and renders extraApp', () => {
-      const appSlug = 'app2';
-      const extraApp = {
-        ...sentryApp,
-        status: 'unpublished',
-        slug: appSlug,
-        name: 'another app',
-        owner: {
-          id: 43,
-          slug: 'another',
-        },
-      };
-
-      otherProps.location.search = `?extra_app=${appSlug}`;
-      const loadExtraApp = Client.addMockResponse({
-        url: `/sentry-apps/${appSlug}/`,
-        body: extraApp,
-      });
-
-      wrapper = mountWithTheme(
-        <OrganizationIntegrations organization={org} {...otherProps} />,
-        routerContext
-      );
-      expect(loadExtraApp).toHaveBeenCalled();
-      expect(wrapper.find('SentryAppName').text()).toMatch('another app');
-    });
-  });
-});
diff --git a/tests/js/spec/views/settings/organizationIntegrations/migrationWarnings.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/migrationWarnings.spec.jsx
deleted file mode 100644
index c459c64e70..0000000000
--- a/tests/js/spec/views/settings/organizationIntegrations/migrationWarnings.spec.jsx
+++ /dev/null
@@ -1,82 +0,0 @@
-/*global global*/
-import React from 'react';
-
-import {Client} from 'app/api';
-import {mountWithTheme} from 'sentry-test/enzyme';
-import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarnings';
-
-jest.mock('app/actionCreators/modal', () => ({
-  openIntegrationDetails: jest.fn(),
-}));
-
-describe('MigrationWarnings', function() {
-  beforeEach(function() {
-    Client.clearMockResponses();
-  });
-
-  describe('render()', function() {
-    const org = TestStubs.Organization();
-    const routerContext = TestStubs.routerContext();
-
-    const jiraProvider = TestStubs.JiraIntegrationProvider();
-    const githubProvider = TestStubs.GitHubIntegrationProvider({
-      integrations: [],
-      isInstalled: false,
-    });
-
-    const focus = jest.fn();
-    const open = jest.fn().mockReturnValue({focus});
-    global.open = open;
-
-    Client.addMockResponse({
-      url: `/organizations/${org.slug}/repos/?status=unmigratable`,
-      body: [
-        {
-          provider: {
-            id: 'github',
-            name: 'GitHub',
-          },
-          name: 'Test-Org/foo',
-        },
-      ],
-    });
-
-    const wrapper = mountWithTheme(
-      <MigrationWarnings
-        orgId={org.slug}
-        providers={[githubProvider, jiraProvider]}
-        onInstall={() => {}}
-      />,
-      routerContext
-    );
-
-    it('fetches unmigratable repositories', function() {
-      expect(wrapper.instance().state.unmigratableRepos).toHaveLength(1);
-      expect(wrapper.instance().state.unmigratableRepos[0].name).toBe('Test-Org/foo');
-    });
-
-    it('displays a warning for each Org with unmigratable repos', () => {
-      // Use a regex because React/Enzyme/Jest/Whatever turns single quotes into
-      // apostrophes, so you can't match it explicitly.
-      expect(
-        wrapper
-          .find('AlertLink')
-          .first()
-          .text()
-      ).toMatch(/Your Test-Org repositories can.t send commit data to Sentry/);
-    });
-
-    it('opens the new Integration dialog when the warning is clicked', () => {
-      wrapper
-        .find('AlertLink')
-        .first()
-        .simulate('click');
-
-      expect(open.mock.calls).toHaveLength(1);
-      expect(focus.mock.calls).toHaveLength(1);
-      expect(open.mock.calls[0][2]).toBe(
-        'scrollbars=yes,width=100,height=100,top=334,left=462'
-      );
-    });
-  });
-});
diff --git a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
deleted file mode 100644
index 480bb54bd1..0000000000
--- a/tests/js/spec/views/settings/organizationIntegrations/sentryAppInstallationDetail.spec.jsx
+++ /dev/null
@@ -1,171 +0,0 @@
-import React from 'react';
-
-import {Client} from 'app/api';
-import {mountWithTheme} from 'sentry-test/enzyme';
-import {openSentryAppDetailsModal} from 'app/actionCreators/modal';
-import SentryAppInstallationDetail from 'app/views/organizationIntegrations/sentryAppInstallationDetail';
-
-jest.mock('app/actionCreators/modal', () => ({
-  openSentryAppDetailsModal: jest.fn(),
-}));
-
-describe('Sentry App Installations', function() {
-  const org = TestStubs.Organization();
-  const sentryApp = TestStubs.SentryApp();
-  const install = TestStubs.SentryAppInstallation({
-    organization: {slug: org.slug},
-    app: {slug: sentryApp.slug, uuid: 'f4d972ba-1177-4974-943e-4800fe8c7d05'},
-    code: '50624ecb-7aac-49d6-934a-83e53677560f',
-  });
-  const api = new Client();
-
-  const routerContext = TestStubs.routerContext();
-  let props, wrapper;
-
-  beforeEach(() => {
-    Client.clearMockResponses();
-    props = {
-      api,
-      organization: org,
-      app: sentryApp,
-      onAppInstall: jest.fn(),
-      onAppUninstall: jest.fn(),
-    };
-  });
-
-  it('displays all Apps owned by the Org', () => {
-    wrapper = mountWithTheme(<SentryAppInstallationDetail {...props} />, routerContext);
-
-    expect(wrapper).toMatchSnapshot();
-    expect(wrapper.find('SentryApplicationRow').prop('app').name).toBe('Sample App');
-  });
-
-  describe('when installing', () => {
-    beforeEach(() => {
-      Client.addMockResponse({
-        url: `/organizations/${org.slug}/sentry-app-installations/`,
-        method: 'POST',
-        body: install,
-      });
-    });
-
-    it('disallows installation when already installed', () => {
-      wrapper = mountWithTheme(
-        <SentryAppInstallationDetail {...props} install={install} />,
-        routerContext
-      );
-      expect(wrapper.find('UninstallButton').exists()).toBe(true);
-    });
-
-    it('install button opens permissions modal', () => {
-      wrapper = mountWithTheme(<SentryAppInstallationDetail {...props} />, routerContext);
-      wrapper.find('button[aria-label="Install"]').simulate('click');
-      expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
-        expect.objectContaining({
-          sentryApp,
-          organization: org,
-          onInstall: expect.any(Function),
-          isInstalled: false,
-        })
-      );
-    });
-
-    it('sentry app is shown as installed', async () => {
-      const app = TestStubs.SentryApp({redirectUrl: null});
-      wrapper = mountWithTheme(
-        <SentryAppInstallationDetail {...props} app={app} />,
-        routerContext
-      );
-      wrapper.instance().handleInstall(app);
-      await tick();
-      wrapper.update();
-      expect(props.onAppInstall).toHaveBeenCalledWith(install);
-    });
-
-    it('redirects the user to the App when a redirectUrl is set', async () => {
-      window.location.assign = jest.fn();
-      wrapper = mountWithTheme(<SentryAppInstallationDetail {...props} />, routerContext);
-
-      wrapper.find('button[aria-label="Install"]').simulate('click');
-      expect(openSentryAppDetailsModal).toHaveBeenCalledWith(
-        expect.objectContaining({
-          sentryApp,
-          organization: org,
-          onInstall: expect.any(Function),
-          isInstalled: false,
-        })
-      );
-      wrapper.instance().handleInstall(sentryApp);
-      await tick();
-      expect(window.location.assign).toHaveBeenCalledWith(
-        `${sentryApp.redirectUrl}?code=${install.code}&installationId=${install.uuid}&orgSlug=${org.slug}`
-      );
-    });
-
-    it('handles a redirectUrl with pre-existing query params', async () => {
-      window.location.assign = jest.fn();
-      const sentryAppWithQuery = TestStubs.SentryApp({
-        redirectUrl: 'https://example.com/setup?hello=1',
-      });
-
-      wrapper = mountWithTheme(
-        <SentryAppInstallationDetail {...props} app={sentryAppWithQuery} />,
-        routerContext
-      );
-
-      wrapper.find('button[aria-label="Install"]').simulate('click');
-      wrapper.instance().handleInstall(sentryAppWithQuery);
-      await tick();
-      expect(window.location.assign).toHaveBeenCalledWith(
-        `https://example.com/setup?code=${install.code}&hello=1&installationId=${install.uuid}&orgSlug=${org.slug}`
-      );
-    });
-  });
-
-  describe('when installing fails', () => {
-    it('allows for installation retry', async () => {
-      Client.addMockResponse({
-        url: `/organizations/${org.slug}/sentry-app-installations/`,
-        method: 'POST',
-        body: [],
-        statusCode: 400,
-      });
-
-      wrapper = mountWithTheme(<SentryAppInstallationDetail {...props} />, routerContext);
-      wrapper.instance().handleInstall(sentryApp);
-      await tick();
-      expect(wrapper.exists('[aria-label="Install"]')).toBe(true);
-      expect(props.onAppInstall).not.toHaveBeenCalled();
-    });
-  });
-
-  describe('when uninstalling', () => {
-    it('must confirm in order to uninstall', async () => {
-      const response = Client.addMockResponse({
-        url: `/sentry-app-installations/${install.uuid}/`,
-        method: 'DELETE',
-        body: [],
-      });
-
-      wrapper = mountWithTheme(
-        <SentryAppInstallationDetail {...props} install={install} />,
-        routerContext
-      );
-
-      wrapper
-        .find('[data-test-id="sentry-app-uninstall"]')
-        .first()
-        .simulate('click');
-      wrapper
-        .find('[data-test-id="confirm-button"]')
-        .first()
-        .simulate('click');
-      expect(response).toHaveBeenCalledWith(
-        `/sentry-app-installations/${install.uuid}/`,
-        expect.objectContaining({method: 'DELETE'})
-      );
-      await tick();
-      expect(props.onAppUninstall).toHaveBeenCalledWith();
-    });
-  });
-});
