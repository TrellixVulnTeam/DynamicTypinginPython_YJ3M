commit 1eefc2ae3d0bb67797a21a4c2380b726642464ed
Author: David Wang <davidw1339@gmail.com>
Date:   Thu Oct 10 13:25:09 2019 -0700

    ref(ui): Separate organization environments store from org context  (#15006)
    
    Organization context currently sets the initial data in the OrganizationEnvironmentsStore even though it is only required fro groupEventDetails.jsx. Moved code to fetch the environments into groupEventDetails so that it can be responsible for the data that it requires. This could potentially make the org context load faster since it only has to wait for the org details request.
    
    Refs: SEN-1145

diff --git a/src/sentry/static/sentry/app/actionCreators/environments.jsx b/src/sentry/static/sentry/app/actionCreators/environments.jsx
index 35c04260a5..e9b57174c4 100644
--- a/src/sentry/static/sentry/app/actionCreators/environments.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/environments.jsx
@@ -1,8 +1,24 @@
+import EnvironmentActions from 'app/actions/environmentActions';
+
 /**
  * Fetches all environments for an organization
  *
  * @param {String} organizationSlug The organization slug
  */
-export function fetchOrganizationEnvironments(api, organizationSlug) {
-  return api.requestPromise(`/organizations/${organizationSlug}/environments/`);
+export async function fetchOrganizationEnvironments(api, organizationSlug) {
+  EnvironmentActions.fetchEnvironments();
+  try {
+    const environments = await api.requestPromise(
+      `/organizations/${organizationSlug}/environments/`
+    );
+    if (!environments) {
+      EnvironmentActions.fetchEnvironmentsError(
+        new Error('retrieved environments is falsey')
+      );
+      return;
+    }
+    EnvironmentActions.fetchEnvironmentsSuccess(environments);
+  } catch (err) {
+    EnvironmentActions.fetchEnvironmentsError(err);
+  }
 }
diff --git a/src/sentry/static/sentry/app/actions/environmentActions.jsx b/src/sentry/static/sentry/app/actions/environmentActions.jsx
new file mode 100644
index 0000000000..6a25bcc522
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/environmentActions.jsx
@@ -0,0 +1,7 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions([
+  'fetchEnvironments',
+  'fetchEnvironmentsError',
+  'fetchEnvironmentsSuccess',
+]);
diff --git a/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx b/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx
index dd2b51c471..a5d7d7acd8 100644
--- a/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationEnvironmentsStore.jsx
@@ -1,12 +1,24 @@
 import Reflux from 'reflux';
 import {toTitleCase} from 'app/utils';
+import EnvironmentActions from 'app/actions/environmentActions';
 
 const DEFAULT_EMPTY_ENV_NAME = '(No Environment)';
 const DEFAULT_EMPTY_ROUTING_NAME = 'none';
 
 const OrganizationEnvironmentsStore = Reflux.createStore({
   init() {
-    this.items = [];
+    this.environments = null;
+    this.error = null;
+
+    this.listenTo(EnvironmentActions.fetchEnvironments, this.onFetchEnvironments);
+    this.listenTo(
+      EnvironmentActions.fetchEnvironmentsSuccess,
+      this.onFetchEnvironmentsSuccess
+    );
+    this.listenTo(
+      EnvironmentActions.fetchEnvironmentsError,
+      this.onFetchEnvironmentsError
+    );
   },
 
   makeEnvironment(item) {
@@ -22,12 +34,26 @@ const OrganizationEnvironmentsStore = Reflux.createStore({
     };
   },
 
-  loadInitialData(environments) {
-    this.items = environments.map(this.makeEnvironment);
+  onFetchEnvironments() {
+    this.environments = null;
+    this.error = null;
+    this.trigger(this.get());
+  },
+
+  onFetchEnvironmentsSuccess(environments) {
+    this.environments = environments.map(this.makeEnvironment);
+    this.error = null;
+    this.trigger(this.get());
+  },
+
+  onFetchEnvironmentsError(error) {
+    this.environments = null;
+    this.error = error;
+    this.trigger(this.get());
   },
 
-  getActive() {
-    return this.items;
+  get() {
+    return {environments: this.environments, error: this.error};
   },
 });
 
diff --git a/src/sentry/static/sentry/app/views/organizationContext.jsx b/src/sentry/static/sentry/app/views/organizationContext.jsx
index f4b44abb28..b58f33eb4e 100644
--- a/src/sentry/static/sentry/app/views/organizationContext.jsx
+++ b/src/sentry/static/sentry/app/views/organizationContext.jsx
@@ -6,7 +6,6 @@ import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 import * as Sentry from '@sentry/browser';
 
-import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
 import {openSudo} from 'app/actionCreators/modal';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
 import {t} from 'app/locale';
@@ -17,7 +16,6 @@ import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import HookStore from 'app/stores/hookStore';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
 import ProjectActions from 'app/actions/projectActions';
 import ProjectsStore from 'app/stores/projectsStore';
 import SentryTypes from 'app/sentryTypes';
@@ -124,13 +122,10 @@ const OrganizationContext = createReactClass({
     }
 
     metric.mark('organization-details-fetch-start');
-    const promises = [
-      this.props.api.requestPromise(this.getOrganizationDetailsEndpoint()),
-      fetchOrganizationEnvironments(this.props.api, this.getOrganizationSlug()),
-    ];
 
-    Promise.all(promises)
-      .then(([data, environments]) => {
+    this.props.api
+      .requestPromise(this.getOrganizationDetailsEndpoint())
+      .then(data => {
         // Allow injection via getsentry et all
         const hooks = [];
         HookStore.get('organization:header').forEach(cb => {
@@ -157,7 +152,6 @@ const OrganizationContext = createReactClass({
         ) {
           GlobalSelectionStore.loadInitialData(data, this.props.location.query);
         }
-        OrganizationEnvironmentsStore.loadInitialData(environments);
         this.setState(
           {
             organization: data,
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.jsx
similarity index 90%
rename from src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
rename to src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.jsx
index c8ef2ff3c3..028c3e3494 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/groupEventDetails.jsx
@@ -11,16 +11,12 @@ import GroupEventDetailsLoadingError from 'app/components/errors/groupEventDetai
 import GroupSidebar from 'app/components/group/sidebar';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import MutedBox from 'app/components/mutedBox';
-import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
 import ResolutionBox from 'app/components/resolutionBox';
 import SentryTypes from 'app/sentryTypes';
 import fetchSentryAppInstallations from 'app/utils/fetchSentryAppInstallations';
-import withApi from 'app/utils/withApi';
-import withGlobalSelection from 'app/utils/withGlobalSelection';
-import withOrganization from 'app/utils/withOrganization';
 
-import {fetchGroupEventAndMarkSeen, getEventEnvironment} from './utils';
-import GroupEventToolbar from './eventToolbar';
+import {fetchGroupEventAndMarkSeen, getEventEnvironment} from '../utils';
+import GroupEventToolbar from '../eventToolbar';
 
 class GroupEventDetails extends React.Component {
   static propTypes = {
@@ -215,17 +211,4 @@ class GroupEventDetails extends React.Component {
   }
 }
 
-export {GroupEventDetails};
-
-export default withApi(
-  withOrganization(
-    withGlobalSelection(props => {
-      const {selection, ...otherProps} = props;
-      const environments = OrganizationEnvironmentsStore.getActive().filter(env =>
-        selection.environments.includes(env.name)
-      );
-
-      return <GroupEventDetails {...otherProps} environments={environments} />;
-    })
-  )
-);
+export default GroupEventDetails;
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx
new file mode 100644
index 0000000000..af98a06201
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupEventDetails/index.tsx
@@ -0,0 +1,68 @@
+import React from 'react';
+
+import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
+import {t} from 'app/locale';
+import GroupEventDetails from 'app/views/organizationGroupDetails/groupEventDetails/groupEventDetails';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
+import {Client} from 'app/api';
+import {GlobalSelection, Organization, Environment} from 'app/types';
+import withApi from 'app/utils/withApi';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  selection: GlobalSelection;
+};
+
+type State = {
+  environments: Environment[];
+  error: Error;
+};
+
+export class GroupEventDetailsContainer extends React.Component<Props, State> {
+  state = OrganizationEnvironmentsStore.get();
+
+  componentDidMount() {
+    this.environmentSubscription = OrganizationEnvironmentsStore.listen(data =>
+      this.setState(data)
+    );
+    const {environments, error} = OrganizationEnvironmentsStore.get();
+    if (!environments && !error) {
+      fetchOrganizationEnvironments(this.props.api, this.props.organization.slug);
+    }
+  }
+
+  componentWillUnmount() {
+    if (this.environmentSubscription) {
+      this.environmentSubscription.unsubscribe();
+    }
+  }
+
+  // TODO(ts): reflux :(
+  environmentSubscription: any;
+
+  render() {
+    if (this.state.error) {
+      return (
+        <LoadingError
+          message={t("There was an error loading your organization's environments")}
+        />
+      );
+    }
+    // null implies loading state
+    if (!this.state.environments) {
+      return <LoadingIndicator />;
+    }
+    const {selection, ...otherProps} = this.props;
+    const environments = this.state.environments.filter(env =>
+      selection.environments.includes(env.name)
+    );
+    return <GroupEventDetails {...otherProps} environments={environments} />;
+  }
+}
+
+export default withApi(withOrganization(withGlobalSelection(GroupEventDetailsContainer)));
diff --git a/tests/js/fixtures/globalSelection.js b/tests/js/fixtures/globalSelection.js
new file mode 100644
index 0000000000..2d21e2c734
--- /dev/null
+++ b/tests/js/fixtures/globalSelection.js
@@ -0,0 +1,13 @@
+export function GlobalSelection(params = {}) {
+  return {
+    projects: [1],
+    environments: ['production', 'staging'],
+    datetime: {
+      start: '2019-10-09T11:18:59',
+      end: '2019-09-09T11:18:59',
+      period: '',
+      utc: 'true',
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx b/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx
index 9daa506e07..26edeb3c2c 100644
--- a/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx
+++ b/tests/js/spec/stores/organizationEnvironmentsStore.spec.jsx
@@ -5,19 +5,40 @@ describe('OrganizationEnvironmentsStore', function() {
     OrganizationEnvironmentsStore.init();
   });
 
-  it('getActive()', function() {
-    expect(OrganizationEnvironmentsStore.getActive()).toEqual([]);
+  it('get()', function() {
+    expect(OrganizationEnvironmentsStore.get()).toEqual({
+      environments: null,
+      error: null,
+    });
   });
 
-  it('loadInitialData()', async function() {
-    OrganizationEnvironmentsStore.loadInitialData(TestStubs.Environments());
+  it('loads data from a fetch', async function() {
+    OrganizationEnvironmentsStore.onFetchEnvironmentsSuccess(TestStubs.Environments());
 
     await tick();
 
-    const environments = OrganizationEnvironmentsStore.getActive();
+    const {environments} = OrganizationEnvironmentsStore.get();
 
     expect(environments.length).toBe(2);
     expect(environments.map(env => env.name)).toEqual(['production', 'staging']);
     expect(environments.map(env => env.displayName)).toEqual(['Production', 'Staging']);
   });
+
+  it('has the correct loading state', async function() {
+    OrganizationEnvironmentsStore.onFetchEnvironments();
+
+    const {environments, error} = OrganizationEnvironmentsStore.get();
+
+    expect(environments).toBeNull();
+    expect(error).toBeNull();
+  });
+
+  it('has the correct error state', async function() {
+    OrganizationEnvironmentsStore.onFetchEnvironmentsError(Error('bad'));
+
+    const {environments, error} = OrganizationEnvironmentsStore.get();
+
+    expect(environments).toBeNull();
+    expect(error).not.toBeNull();
+  });
 });
diff --git a/tests/js/spec/views/organizationContext.spec.jsx b/tests/js/spec/views/organizationContext.spec.jsx
index f105e20a90..31aa14cf0b 100644
--- a/tests/js/spec/views/organizationContext.spec.jsx
+++ b/tests/js/spec/views/organizationContext.spec.jsx
@@ -22,7 +22,6 @@ describe('OrganizationContext', function() {
     projects: [TestStubs.Project()],
   });
   let getOrgMock;
-  let getEnvironmentsMock;
 
   const createWrapper = props =>
     mount(
@@ -43,10 +42,6 @@ describe('OrganizationContext', function() {
       url: '/organizations/org-slug/',
       body: org,
     });
-    getEnvironmentsMock = MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/environments/',
-      body: TestStubs.Environments(),
-    });
     jest.spyOn(TeamStore, 'loadInitialData');
     jest.spyOn(ProjectsStore, 'loadInitialData');
     jest.spyOn(GlobalSelectionStore, 'loadInitialData');
@@ -113,7 +108,6 @@ describe('OrganizationContext', function() {
       '/organizations/org-slug/',
       expect.anything()
     );
-    expect(getEnvironmentsMock).toHaveBeenCalled();
   });
 
   it('shows loading error for non-superusers on 403s', async function() {
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
index e29121c056..f70056974d 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
@@ -3,7 +3,7 @@ import {mount} from 'enzyme';
 import {browserHistory} from 'react-router';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
-import {GroupEventDetails} from 'app/views/organizationGroupDetails/groupEventDetails';
+import GroupEventDetails from 'app/views/organizationGroupDetails/groupEventDetails/groupEventDetails';
 
 describe('groupEventDetails', () => {
   let org;
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetailsContainer.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetailsContainer.spec.jsx
new file mode 100644
index 0000000000..5f9fd29ca3
--- /dev/null
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetailsContainer.spec.jsx
@@ -0,0 +1,70 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import OrganizationEnvironmentsStore from 'app/stores/organizationEnvironmentsStore';
+import GroupEventDetailsContainer from 'app/views/organizationGroupDetails/groupEventDetails';
+
+jest.mock(
+  'app/views/organizationGroupDetails/groupEventDetails/groupEventDetails',
+  () => () => <div>GroupEventDetails</div>
+);
+
+describe('groupEventDetailsContainer', () => {
+  const org = TestStubs.Organization();
+
+  beforeEach(() => {
+    OrganizationEnvironmentsStore.init();
+  });
+
+  it('fetches environments', async function() {
+    const environmentsCall = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/environments/`,
+      body: TestStubs.Environments(),
+    });
+    const wrapper = mount(<GroupEventDetailsContainer organization={org} />);
+    // should be in loading state
+    expect(wrapper.find('LoadingIndicator').exists()).toBe(true);
+    await tick();
+    await tick();
+    wrapper.update();
+    // should be loaded
+    expect(wrapper.find('LoadingIndicator').exists()).toBe(false);
+    expect(wrapper.text('GroupEventDetails')).toBe('GroupEventDetails');
+
+    // remounting will not rerender
+    const wrapper2 = mount(<GroupEventDetailsContainer organization={org} />);
+    expect(wrapper2.find('LoadingIndicator').exists()).toBe(false);
+    expect(wrapper.text('GroupEventDetails')).toBe('GroupEventDetails');
+    expect(environmentsCall).toHaveBeenCalledTimes(1);
+  });
+
+  it('displays an error on error', async function() {
+    const environmentsCall = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/environments/`,
+      statusCode: 400,
+    });
+    const wrapper = mount(<GroupEventDetailsContainer organization={org} />);
+    expect(wrapper.find('LoadingIndicator').exists()).toBe(true);
+    await tick();
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator').exists()).toBe(false);
+    expect(wrapper.find('LoadingError').exists()).toBe(true);
+    expect(environmentsCall).toHaveBeenCalledTimes(1);
+  });
+
+  it('displays an error on falsey environment', async function() {
+    const environmentsCall = MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/environments/`,
+      body: null,
+    });
+    const wrapper = mount(<GroupEventDetailsContainer organization={org} />);
+    expect(wrapper.find('LoadingIndicator').exists()).toBe(true);
+    await tick();
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator').exists()).toBe(false);
+    expect(wrapper.find('LoadingError').exists()).toBe(true);
+    expect(environmentsCall).toHaveBeenCalledTimes(1);
+  });
+});
