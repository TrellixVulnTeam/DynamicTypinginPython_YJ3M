commit e3998e1b9880190605997874d5460fe05624877d
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 1 19:32:04 2015 -0800

    Implement barchart for stream

diff --git a/src/sentry/static/sentry/app-react/components/barChart.jsx b/src/sentry/static/sentry/app-react/components/barChart.jsx
new file mode 100644
index 0000000000..f5fca52c53
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/barChart.jsx
@@ -0,0 +1,68 @@
+/*** @jsx React.DOM */
+var React = require('react');
+
+var BarChart = React.createClass({
+  propTypes: {
+    points: React.PropTypes.arrayOf(React.PropTypes.shape({
+      x: React.PropTypes.number.isRequired,
+      y: React.PropTypes.number.isRequired,
+      label: React.PropTypes.string
+    })),
+    placement: React.PropTypes.string
+  },
+
+  getDefaultProps: function(){
+    return {
+      placement: 'bottom'
+    };
+  },
+
+  floatFormat: function(number, places) {
+      var multi = Math.pow(10, places);
+      return parseInt(number * multi, 10) / multi;
+  },
+
+  render: function(){
+    // TODO: maxval could default to # of hours since first_seen / times_seen
+    var points = this.props.points;
+
+    var maxval = 10;
+    points.forEach(function(point){
+      if (point.y > maxval) {
+        maxval = point.y;
+      }
+    });
+
+    var pointWidth = this.floatFormat(100.0 / points.length, 2) + '%';
+
+    var children = [];
+    points.forEach(function(point){
+      var pct = this.floatFormat(point.y / maxval * 99, 2) + '%';
+      var title = point.y + ' events';
+      if (point.label) {
+        title = title + '<br>(' + point.label + ')';
+      }
+
+      children.push((
+        <a style={{width: pointWidth}}
+           key={point.x}
+           title={title}>
+          <span style={{height: pct}}>{point.y}</span>
+        </a>
+      ));
+        // $('<a style="width:' + pointWidth + ';" rel="tooltip" title="' + title + '"><span style="height:' + pct + '">' + point.y + '</span></a>').tooltip({
+        //   placement: options.placement || 'bottom',
+        //   html: true,
+        //   container: 'body'
+        // }).appendTo($el);
+    }.bind(this));
+
+    return (
+      <figure className={this.props.className}>
+        {children}
+      </figure>
+    );
+  }
+});
+
+module.exports = BarChart;
diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index ece7f83595..7ab084b1f8 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -5,6 +5,7 @@ var $ = require("jquery");
 var utils = require("../utils");
 
 var joinClasses = require('react-bootstrap/utils/joinClasses');
+var BarChart = require("./barChart");
 var Count = require("./count");
 var DropdownLink = require("./dropdownLink");
 var MenuItem = require("./menuItem");
@@ -415,14 +416,18 @@ var Actions = React.createClass({
 var Aggregate = React.createClass({
   propTypes: {
     data: React.PropTypes.shape({
-      id: React.PropTypes.string
-    }),
+      id: React.PropTypes.string.isRequired
+    }).isRequired,
     isSelected: React.PropTypes.bool
   },
   render: function() {
     var data = this.props.data,
         userCount = 0;
 
+    var chartData = data.stats['24h'].map(function(point){
+      return {x: point[0], y: point[1]};
+    });
+
     if (data.tags["sentry:user"] !== undefined) {
       userCount = data.tags["sentry:user"].count;
     }
@@ -460,7 +465,7 @@ var Aggregate = React.createClass({
 
         </div>
         <div className="hidden-sm hidden-xs event-graph align-right event-cell">
-
+          <BarChart points={chartData} className="sparkline" />
         </div>
         <div className="hidden-xs event-occurrences align-center event-cell">
           <Count value={data.count} />
