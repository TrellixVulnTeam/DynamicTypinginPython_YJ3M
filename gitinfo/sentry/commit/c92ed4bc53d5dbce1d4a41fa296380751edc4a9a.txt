commit c92ed4bc53d5dbce1d4a41fa296380751edc4a9a
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Jun 12 18:54:21 2020 -0400

    feat(discover2): Revised navigation flow for Discover (#19332)
    
    
    Co-authored-by: Dora Chan <dora.lchan@gmail.com>

diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 28cf93121d..a050759559 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -396,6 +396,7 @@ class GridEditable<
 
 export default GridEditable;
 export {
+  COL_WIDTH_MINIMUM,
   COL_WIDTH_UNDEFINED,
   GridColumn,
   GridColumnHeader,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index d9b321a23c..9f453a3a4d 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -80,6 +80,10 @@ class Table extends React.PureComponent<TableProps, TableState> {
     if (!eventView.isValid()) {
       return;
     }
+
+    // note: If the eventView has no aggregates, the endpoint will automatically add the event id in
+    // the API payload response
+
     const url = `/organizations/${organization.slug}/eventsv2/`;
     const tableFetchID = Symbol('tableFetchID');
     const apiPayload = eventView.getEventsAPIPayload(location);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index d8a79870fb..37a3f17998 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -5,9 +5,12 @@ import {Location, LocationDescriptorObject} from 'history';
 
 import {Organization, OrganizationSummary} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
-import GridEditable, {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
+import GridEditable, {
+  COL_WIDTH_UNDEFINED,
+  COL_WIDTH_MINIMUM,
+} from 'app/components/gridEditable';
 import SortLink from 'app/components/gridEditable/sortLink';
-import {IconEvent, IconStack} from 'app/icons';
+import {IconStack} from 'app/icons';
 import {t} from 'app/locale';
 import {openModal} from 'app/actionCreators/modal';
 import Link from 'app/components/links/link';
@@ -80,29 +83,68 @@ class TableView extends React.Component<TableViewProps> {
     dataRow?: any,
     rowIndex?: number
   ): React.ReactNode[] => {
-    const {organization, eventView} = this.props;
+    const {organization, eventView, tableData, location} = this.props;
     const hasAggregates = eventView.getAggregateFields().length > 0;
+
     if (isHeader) {
+      if (!hasAggregates) {
+        return [
+          <PrependHeader key="header-event-id">
+            <SortLink
+              align="left"
+              title={t('Id')}
+              direction={undefined}
+              canSort={false}
+              generateSortLink={() => undefined}
+            />
+          </PrependHeader>,
+        ];
+      }
+
       return [
-        <HeaderIcon key="header-icon">
-          {hasAggregates ? <IconStack size="sm" /> : <IconEvent size="sm" />}
-        </HeaderIcon>,
+        <PrependHeader key="header-icon">
+          <IconStack size="sm" />
+        </PrependHeader>,
       ];
     }
 
-    const eventSlug = generateEventSlug(dataRow);
+    if (!hasAggregates) {
+      let value = dataRow.id;
 
-    const target = eventDetailsRouteWithEventView({
-      orgSlug: organization.slug,
-      eventSlug,
-      eventView,
-    });
+      if (tableData && tableData.meta) {
+        const fieldRenderer = getFieldRenderer('id', tableData.meta);
+        value = fieldRenderer(dataRow, {organization, location});
+      }
+
+      const eventSlug = generateEventSlug(dataRow);
+
+      const target = eventDetailsRouteWithEventView({
+        orgSlug: organization.slug,
+        eventSlug,
+        eventView,
+      });
+
+      return [
+        <Tooltip key={`eventlink${rowIndex}`} title={t('View Event')}>
+          <StyledLink data-test-id="view-event" to={target}>
+            {value}
+          </StyledLink>
+        </Tooltip>,
+      ];
+    }
+
+    const nextView = getExpandedResults(eventView, {}, dataRow);
+
+    const target = {
+      pathname: location.pathname,
+      query: nextView.generateQueryStringObject(),
+    };
 
     return [
-      <Tooltip key={`eventlink${rowIndex}`} title={t('View Details')}>
-        <IconLink to={target} data-test-id="view-events">
-          {hasAggregates ? <IconStack size="sm" /> : <IconEvent size="sm" />}
-        </IconLink>
+      <Tooltip key={`eventlink${rowIndex}`} title={t('Open Stack')}>
+        <Link to={target} data-test-id="open-stack">
+          <StyledIcon size="sm" />
+        </Link>
       </Tooltip>,
     ];
   };
@@ -260,6 +302,11 @@ class TableView extends React.Component<TableViewProps> {
     const columnOrder = eventView.getColumns();
     const columnSortBy = eventView.getSorts();
 
+    const hasAggregates = eventView.getAggregateFields().length > 0;
+    const prependColumnWidths = hasAggregates
+      ? ['40px']
+      : [`minmax(${COL_WIDTH_MINIMUM}px, max-content)`];
+
     return (
       <GridEditable
         isLoading={isLoading}
@@ -273,7 +320,7 @@ class TableView extends React.Component<TableViewProps> {
           renderBodyCell: this._renderGridBodyCell as any,
           onResizeColumn: this._resizeColumn as any,
           renderPrependColumns: this._renderPrependColumns as any,
-          prependColumnWidths: ['40px'],
+          prependColumnWidths,
         }}
         headerButtons={this.renderHeaderButtons}
         location={location}
@@ -303,22 +350,6 @@ function ExpandAggregateRow(props: {
     });
   }
 
-  // count(column) drilldown
-  if (aggregation === 'count') {
-    const nextView = getExpandedResults(eventView, {}, dataRow);
-
-    const target = {
-      pathname: location.pathname,
-      query: nextView.generateQueryStringObject(),
-    };
-
-    return (
-      <Link data-test-id="expand-count" to={target} onClick={handleClick}>
-        {children}
-      </Link>
-    );
-  }
-
   // count_unique(column) drilldown
   if (aggregation === 'count_unique') {
     // Drilldown into each distinct value and get a count() for each value.
@@ -342,18 +373,18 @@ function ExpandAggregateRow(props: {
   return <React.Fragment>{children}</React.Fragment>;
 }
 
-const HeaderIcon = styled('span')`
-  & > svg {
-    vertical-align: top;
-    color: ${p => p.theme.gray600};
+const PrependHeader = styled('span')`
+  color: ${p => p.theme.gray600};
+`;
+
+const StyledLink = styled(Link)`
+  > div {
+    display: inline;
   }
 `;
 
-// Fudge the icon down so it is center aligned with the table contents.
-const IconLink = styled(Link)`
-  position: relative;
-  display: inline-block;
-  top: 3px;
+const StyledIcon = styled(IconStack)`
+  vertical-align: middle;
 `;
 
 export default TableView;
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index f6c0707fa8..f34f62df7f 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -319,8 +319,8 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.browser.get(self.result_path + "?" + all_events_query())
             self.wait_until_loaded()
 
-            # Click the event link to open the events detail view
-            self.browser.element('[data-test-id="view-events"]').click()
+            # View Event
+            self.browser.find_elements_by_css_selector('[data-test-id="view-event"]')[0].click()
             self.wait_until_loaded()
 
             header = self.browser.element('[data-test-id="event-header"] span')
@@ -353,19 +353,15 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.browser.get(self.result_path + "?" + errors_query() + "&statsPeriod=24h")
             self.wait_until_loaded()
 
-            # Click the event link to open the event detail view
-            self.browser.element('[data-test-id="view-events"]').click()
+            # Open the stack
+            self.browser.element('[data-test-id="open-stack"]').click()
             self.wait_until_loaded()
 
-            self.browser.snapshot("events-v2 - grouped error event detail view")
-
-            # Check that the newest event is loaded first and that pagination
-            # controls display
-            display_id = self.browser.element('[data-test-id="event-id"]')
-            assert event_ids[0] in display_id.text
+            # View Event
+            self.browser.find_elements_by_css_selector('[data-test-id="view-event"]')[0].click()
+            self.wait_until_loaded()
 
-            assert self.browser.element_exists_by_test_id("older-event")
-            assert self.browser.element_exists_by_test_id("newer-event")
+            self.browser.snapshot("events-v2 - grouped error event detail view")
 
     @patch("django.utils.timezone.now")
     def test_event_detail_view_from_transactions_query(self, mock_now):
@@ -386,17 +382,18 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             # Get the list page
             self.browser.get(self.result_path + "?" + transactions_query())
             self.wait_until_loaded()
-            self.browser.save_screenshot("./index.png")
 
-            # Click the event link to open the event detail view
-            self.browser.find_elements_by_css_selector('[data-test-id="view-events"]')[0].click()
+            # Open the stack
+            self.browser.find_elements_by_css_selector('[data-test-id="open-stack"]')[0].click()
+            self.wait_until_loaded()
+
+            # View Event
+            self.browser.find_elements_by_css_selector('[data-test-id="view-event"]')[0].click()
             self.wait_until_loaded()
-            self.browser.save_screenshot("./details.png")
 
             # Open a span detail so we can check the search by trace link.
             # Click on the 6th one as a missing instrumentation span is inserted.
             self.browser.find_elements_by_css_selector('[data-test-id="span-row"]')[6].click()
-            self.browser.save_screenshot("./span.png")
 
             # Click on the child transaction.
             child_button = '[data-test-id="view-child-transaction"]'
@@ -459,7 +456,6 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             new_name = "Custom queryupdated!"
             new_card_selector = 'div[name="discover2-query-name"][value="{}"]'.format(new_name)
             self.browser.wait_until(new_card_selector)
-            self.browser.save_screenshot("./rename.png")
 
         # Assert the name was updated.
         assert DiscoverSavedQuery.objects.filter(name=new_name).exists()
