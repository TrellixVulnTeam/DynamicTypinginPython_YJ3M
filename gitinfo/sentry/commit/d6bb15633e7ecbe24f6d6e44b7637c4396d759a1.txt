commit d6bb15633e7ecbe24f6d6e44b7637c4396d759a1
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 14 11:02:02 2010 -0700

    Added SENTRY_NAME setting

diff --git a/README.rst b/README.rst
index 05cf6448d9..945e2d1e27 100644
--- a/README.rst
+++ b/README.rst
@@ -178,6 +178,12 @@ Default value is ``False``
 
 .. note:: Normally when Django DEBUG is enabled the Sentry exception handler is immediately skipped
 
+###########
+SENTRY_NAME
+###########
+
+This will override the ``server_name`` value for this installation. Defaults to ``socket.get_hostname()``.
+
 =====
 Usage
 =====
@@ -192,6 +198,10 @@ Set up a viewer server (or use your existing application server) and add sentry
 
 Now enjoy your beautiful new error tracking at ``/sentry/``.
 
+===
+API
+===
+
 For the technical, here's some further docs:
 
 If you wish to access these within your own views and models, you may do so via the standard model API::
diff --git a/sentry/client/base.py b/sentry/client/base.py
index 95a3cf04b5..13e66b2266 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -4,7 +4,6 @@ try:
 except ImportError:
     import pickle
 import logging
-import socket
 import sys
 import traceback as traceback_mod
 import urllib
@@ -29,7 +28,7 @@ class SentryClient(object):
             kwargs = filter_(None).process(kwargs) or kwargs
 
         kwargs.setdefault('level', logging.ERROR)
-        kwargs.setdefault('server_name', socket.gethostname())
+        kwargs.setdefault('server_name', settings.NAME)
 
         checksum = construct_checksum(**kwargs)
 
diff --git a/sentry/settings.py b/sentry/settings.py
index 0595e35e1f..e6bf853ab1 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -3,6 +3,7 @@ from django.utils.hashcompat import md5_constructor
 from django.utils.translation import ugettext_lazy as _
 
 import logging
+import socket
 
 # Allow local testing of Sentry even if DEBUG is enabled
 DEBUG = getattr(settings, 'DEBUG', False) and not getattr(settings, 'SENTRY_TESTING', False)
@@ -52,4 +53,6 @@ if USE_LOGGING:
 else:
     default_client = 'sentry.client.base.SentryClient'
 
-CLIENT = getattr(settings, 'SENTRY_CLIENT', default_client)
\ No newline at end of file
+CLIENT = getattr(settings, 'SENTRY_CLIENT', default_client)
+
+NAME = getattr(settings, 'SENTRY_NAME', socket.gethostname())
\ No newline at end of file
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 4c3adb5bee..158fbaa4ee 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -484,6 +484,24 @@ class SentryTestCase(TestCase):
         
         settings.MIDDLEWARE_CLASSES = orig
 
+    def testSettingName(self):
+        orig = settings.NAME
+        settings.NAME = 'foo'
+        
+        self.assertRaises(Exception, self.client.get, reverse('sentry-raise-exc'))
+
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        last = Message.objects.get()
+        self.assertEquals(last.logger, 'root')
+        self.assertEquals(last.class_name, 'Exception')
+        self.assertEquals(last.level, logging.ERROR)
+        self.assertEquals(last.message, 'view exception')
+        self.assertEquals(last.server_name, 'foo')
+        self.assertEquals(last.view, 'sentry.tests.views.raise_exc')
+        
+        settings.NAME = orig
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
