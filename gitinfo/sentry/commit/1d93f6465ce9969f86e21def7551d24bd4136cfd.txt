commit 1d93f6465ce9969f86e21def7551d24bd4136cfd
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 24 11:40:13 2015 -0800

    Bind request.is_superuser() API
    
    This replaces the arbitrary function call and binds superuser state
    to the request. This is more accurate with how things are treated as
    the permission is based on the authenticated user, not just a user
    object. It also simplifies things like sentry.api.client being able
    to control the is_superuser state.

diff --git a/src/sentry/api/bases/user.py b/src/sentry/api/bases/user.py
index ff3ecb6684..6f9e11c355 100644
--- a/src/sentry/api/bases/user.py
+++ b/src/sentry/api/bases/user.py
@@ -4,14 +4,13 @@ from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
 from sentry.models import User
-from sentry.auth.utils import is_active_superuser
 
 
 class UserPermission(ScopedPermission):
     def has_object_permission(self, request, view, user):
         if request.auth:
             return False
-        if is_active_superuser(request):
+        if request.is_superuser():
             return True
         return request.user == user
 
diff --git a/src/sentry/api/client.py b/src/sentry/api/client.py
index 5a4b2c16b1..8ea144c503 100644
--- a/src/sentry/api/client.py
+++ b/src/sentry/api/client.py
@@ -23,9 +23,11 @@ class ApiClient(object):
     ApiError = ApiError
 
     def request(self, method, path, user=None, auth=None, params=None, data=None,
-                is_sudo=False, request=None):
+                is_sudo=None, is_superuser=None, request=None):
         full_path = self.prefix + path
 
+        # we explicitly do not allow you to override the request *and* the user
+        # as then other checks like is_superuser would need overwritten
         assert not (request and (user or auth)), 'use either request or auth'
 
         resolver_match = resolve(full_path)
@@ -35,15 +37,27 @@ class ApiClient(object):
             # we encode to ensure compatibility
             data = json.loads(json.dumps(data))
 
-        if request:
-            user = request.user
-            auth = request.auth
-
         rf = APIRequestFactory()
         mock_request = getattr(rf, method.lower())(full_path, data)
-        mock_request.auth = auth
-        mock_request.user = user
-        mock_request.is_sudo = lambda: is_sudo
+
+        if request:
+            mock_request.auth = request.auth
+            mock_request.user = request.user
+
+            if is_sudo is None:
+                mock_request.is_sudo = lambda: request.is_sudo()
+            else:
+                mock_request.is_sudo = lambda: is_sudo
+
+            if is_superuser is None:
+                mock_request.is_superuser = lambda: request.is_superuser()
+            else:
+                mock_request.is_superuser = lambda: is_superuser
+        else:
+            mock_request.auth = auth
+            mock_request.user = user
+            mock_request.is_sudo = lambda: is_sudo
+            mock_request.is_superuser = lambda: is_superuser
 
         if request:
             # superuser checks require access to IP
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 2bf7f04058..8df629bcbc 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -9,7 +9,6 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     AuditLogEntryEvent, Organization, OrganizationMember, OrganizationStatus
 )
@@ -64,7 +63,7 @@ class OrganizationIndexEndpoint(Endpoint):
                 queryset = queryset.filter(
                     id=request.auth.organization.id
                 )
-        elif member_only or not is_active_superuser(request):
+        elif member_only or not request.is_superuser():
             queryset = queryset.filter(
                 id__in=OrganizationMember.objects.filter(
                     user=request.user,
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index 94929b0cf7..57e3a5b11f 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -10,7 +10,6 @@ from sentry.api.bases.organization import (
     OrganizationEndpoint, OrganizationPermission
 )
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     AuditLogEntryEvent, AuthIdentity, AuthProvider, OrganizationMember
 )
@@ -108,7 +107,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if request.user.is_authenticated() and not is_active_superuser(request):
+        if request.user.is_authenticated() and not request.is_superuser():
             try:
                 acting_member = OrganizationMember.objects.get(
                     organization=organization,
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 5040af5754..4f2c036789 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -10,7 +10,6 @@ from sentry.api.bases.organization import (
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.team import TeamWithProjectsSerializer
-from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     AuditLogEntryEvent, OrganizationAccessRequest,
     OrganizationMember, OrganizationMemberTeam, Team
@@ -45,7 +44,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
     def _can_access(self, request, member):
         # TODO(dcramer): ideally org owners/admins could perform these actions
-        if is_active_superuser(request):
+        if request.is_superuser():
             return True
 
         if not request.user.is_authenticated():
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 83f6801691..b7c90b96d4 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -6,7 +6,6 @@ from rest_framework.response import Response
 from sentry.api.bases.user import UserEndpoint
 from sentry.api.decorators import sudo_required
 from sentry.api.serializers import serialize
-from sentry.auth.utils import is_active_superuser
 from sentry.models import User
 
 
@@ -21,7 +20,7 @@ class UserSerializer(serializers.ModelSerializer):
 class UserDetailsEndpoint(UserEndpoint):
     def get(self, request, user):
         data = serialize(user, request.user)
-        data['isSuperuser'] = user == request.user and is_active_superuser(request)
+        data['isSuperuser'] = user == request.user and request.is_superuser()
         return Response(data)
 
     @sudo_required
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index 449e90efaa..5fae249084 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from rest_framework import permissions
 
-from sentry.auth.utils import is_active_superuser
 from sentry.models import ProjectKey
 
 
@@ -48,6 +47,6 @@ class ScopedPermission(permissions.BasePermission):
 
 class SuperuserPermission(permissions.BasePermission):
     def has_permission(self, request, view):
-        if is_active_superuser(request):
+        if request.is_superuser():
             return True
         return False
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 04ad94f389..72037b6338 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -7,7 +7,6 @@ from django.conf import settings
 
 from sentry.app import env
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     OrganizationAccessRequest, OrganizationMemberTeam, Project, ProjectStatus,
     Team
@@ -18,7 +17,7 @@ from sentry.models import (
 class TeamSerializer(Serializer):
     def get_attrs(self, item_list, user):
         request = env.request
-        if (is_active_superuser(request) and request.user == user) or settings.SENTRY_PUBLIC:
+        if (request.is_superuser() and request.user == user) or settings.SENTRY_PUBLIC:
             inactive_memberships = frozenset(
                 OrganizationMemberTeam.objects.filter(
                     team__in=item_list,
diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index df14ace787..b584cbf464 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -6,8 +6,6 @@ from django.conf import settings
 
 from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 
-from .utils import is_active_superuser
-
 
 class BaseAccess(object):
     is_active = False
@@ -51,7 +49,7 @@ def from_request(request, organization):
     if not organization:
         return DEFAULT
 
-    if is_active_superuser(request):
+    if request.is_superuser():
         return Access(
             scopes=settings.SENTRY_SCOPES,
             is_active=True,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index fe61ebe9a8..f0df853c87 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -202,6 +202,7 @@ MIDDLEWARE_CLASSES = (
     'django.middleware.csrf.CsrfViewMiddleware',
     'sentry.middleware.auth.AuthenticationMiddleware',
     'sentry.middleware.sudo.SudoMiddleware',
+    'sentry.middleware.superuser.SuperuserMiddleware',
     'sentry.middleware.locale.SentryLocaleMiddleware',
     'sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
diff --git a/src/sentry/debug/middleware.py b/src/sentry/debug/middleware.py
index 1b2dcc8d55..bbd0a73dcf 100644
--- a/src/sentry/debug/middleware.py
+++ b/src/sentry/debug/middleware.py
@@ -9,8 +9,6 @@ from django.conf import settings
 from django.template.loader import render_to_string
 from django.utils.encoding import force_text
 
-from sentry.auth.utils import is_active_superuser
-
 
 class ToolbarCache(object):
     def __init__(self):
@@ -37,7 +35,7 @@ class DebugMiddleware(object):
         # TODO(dcramer): support VPN via INTERNAL_IPS + ipaddr maps
         if not settings.SENTRY_DEBUGGER:
             return False
-        if not is_active_superuser(request):
+        if not request.is_superuser():
             return False
         if 'text/html' not in request.META.get('HTTP_ACCEPT', '*/*'):
             return False
diff --git a/src/sentry/django_admin.py b/src/sentry/django_admin.py
index 48efdce112..89e78de8d7 100644
--- a/src/sentry/django_admin.py
+++ b/src/sentry/django_admin.py
@@ -6,9 +6,7 @@ from django.contrib import admin
 
 class RestrictiveAdminSite(admin.AdminSite):
     def has_permission(self, request):
-        from sentry.auth.utils import is_active_superuser
-
-        return is_active_superuser(request)
+        return request.is_superuser()
 
 
 def make_site():
diff --git a/src/sentry/middleware/profiler.py b/src/sentry/middleware/profiler.py
index baacdeffa5..9bac4a47f3 100644
--- a/src/sentry/middleware/profiler.py
+++ b/src/sentry/middleware/profiler.py
@@ -12,7 +12,6 @@ import StringIO
 from django.conf import settings
 from django.http import HttpResponse
 
-from sentry.auth.utils import is_active_superuser
 
 words_re = re.compile(r'\s+')
 
@@ -40,7 +39,7 @@ class ProfileMiddleware(object):
             return False
         if settings.DEBUG:
             return True
-        if is_active_superuser(request):
+        if request.is_superuser():
             return True
         return False
 
diff --git a/src/sentry/middleware/superuser.py b/src/sentry/middleware/superuser.py
new file mode 100644
index 0000000000..bf9cf76966
--- /dev/null
+++ b/src/sentry/middleware/superuser.py
@@ -0,0 +1,8 @@
+from __future__ import absolute_import
+
+from sentry.auth.utils import is_active_superuser
+
+
+class SuperuserMiddleware(object):
+    def process_request(self, request):
+        request.is_superuser = lambda: is_active_superuser(request)
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index 4d1713a1f9..87435524c9 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -28,7 +28,6 @@ class TeamManager(BaseManager):
         """
         Returns a list of all teams a user has some level of access to.
         """
-        from sentry.auth.utils import is_active_superuser
         from sentry.models import (
             OrganizationMemberTeam, Project, ProjectStatus
         )
@@ -41,7 +40,7 @@ class TeamManager(BaseManager):
             status=TeamStatus.VISIBLE
         )
 
-        if is_active_superuser(env.request) or settings.SENTRY_PUBLIC:
+        if env.request.is_superuser() or settings.SENTRY_PUBLIC:
             team_list = list(base_team_qs)
 
         else:
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 2fa795f146..425fbba569 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -70,20 +70,11 @@ class User(BaseModel, AbstractBaseUser):
 
     def has_perm(self, perm_name):
         warnings.warn('User.has_perm is deprecated', DeprecationWarning)
-        return self._has_superuser_perm()
+        return self.is_superuser
 
     def has_module_perms(self, app_label):
         warnings.warn('User.has_module_perms is deprecated', DeprecationWarning)
-        return self._has_superuser_perm()
-
-    def _has_superuser_perm(self):
-        from sentry.auth.utils import is_active_superuser
-        from sentry.app import env
-        if not env.request:
-            return False
-        if env.request.user != self:
-            return False
-        return is_active_superuser(env.request)
+        return self.is_superuser
 
     def get_display_name(self):
         return self.first_name or self.email or self.username
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 2931f7df22..a88b032ded 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -53,7 +53,7 @@
 <body class="{% block wrapperclass %}{% endblock %}">
   {% block body %}
   <div class="app">
-    {% if request.user.is_superuser %}
+    {% if request.is_superuser %}
         {% show_system_status %}
     {% endif %}
 
@@ -168,7 +168,7 @@
       <div class="container">
         {% block footer %}
         <div class="pull-right">
-          {% if request.user.is_staff %}
+          {% if request.is_superuser %}
           <a href="{% url 'sentry-admin-status' %}">{% trans "Admin" %}</a>
           {% endif %}
           {% block support_link %}{% endblock %}
diff --git a/src/sentry/utils/debug.py b/src/sentry/utils/debug.py
index d82213f086..89ceb4da40 100644
--- a/src/sentry/utils/debug.py
+++ b/src/sentry/utils/debug.py
@@ -16,7 +16,6 @@ import StringIO
 from django.conf import settings
 from django.http import HttpResponse
 
-from sentry.auth.utils import is_active_superuser
 
 words_re = re.compile(r'\s+')
 
@@ -33,7 +32,7 @@ class ProfileMiddleware(object):
             return False
         if settings.DEBUG:
             return True
-        if hasattr(request, 'user') and is_active_superuser(request):
+        if hasattr(request, 'user') and request.is_superuser():
             return True
         return False
 
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 695b74c7b8..c6b26ef26a 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -25,7 +25,7 @@ def login_required(func):
 def requires_admin(func):
     @wraps(func)
     def wrapped(request, *args, **kwargs):
-        if not request.user.is_staff:
+        if not request.is_superuser():
             return render_to_response('sentry/missing_permissions.html', status=400)
         return func(request, *args, **kwargs)
     return login_required(wrapped)
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 1bff1de23b..968687ea9f 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -23,7 +23,6 @@ from django.http import HttpResponseRedirect, HttpResponse
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.app import env
-from sentry.auth.utils import is_active_superuser
 from sentry.models import Team, Project, User
 from sentry.plugins import plugins
 from sentry.utils.http import absolute_uri
@@ -114,7 +113,7 @@ def manage_users(request):
 @transaction.atomic
 @csrf_protect
 def create_new_user(request):
-    if not is_active_superuser(request):
+    if not request.is_superuser():
         return HttpResponseRedirect(reverse('sentry'))
 
     form = NewUserForm(request.POST or None, initial={
@@ -161,7 +160,7 @@ def create_new_user(request):
 @requires_admin
 @csrf_protect
 def edit_user(request, user_id):
-    if not is_active_superuser(request):
+    if not request.is_superuser():
         return HttpResponseRedirect(reverse('sentry'))
 
     try:
diff --git a/src/sentry/web/frontend/admin_queue.py b/src/sentry/web/frontend/admin_queue.py
index 314a2372e0..e9e820b11c 100644
--- a/src/sentry/web/frontend/admin_queue.py
+++ b/src/sentry/web/frontend/admin_queue.py
@@ -1,13 +1,12 @@
 from __future__ import absolute_import
 
-from sentry.auth.utils import is_active_superuser
 from sentry.celery import app
 from sentry.web.frontend.base import BaseView
 
 
 class AdminQueueView(BaseView):
     def has_permission(self, request):
-        return is_active_superuser(request)
+        return request.is_superuser()
 
     def handle(self, request):
         context = {
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 7a78f5dedf..2a655e1992 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -13,7 +13,6 @@ from django.views.generic import View
 from sudo.views import redirect_to_sudo
 
 from sentry.auth import access
-from sentry.auth.utils import is_active_superuser
 from sentry.models import (
     Organization, OrganizationMember, OrganizationStatus, Project, Team
 )
@@ -52,7 +51,7 @@ class OrganizationMixin(object):
             organization_slug = request.session.get('activeorg')
 
         if organization_slug is not None:
-            if is_active_superuser(request):
+            if request.is_superuser():
                 try:
                     active_organization = Organization.objects.get_from_cache(
                         slug=organization_slug,
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index 5af5d8bb04..6bd6c7533e 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -6,7 +6,6 @@ from django.db.models import Q
 from django.utils.translation import ugettext_lazy as _, ugettext
 
 from sentry import roles
-from sentry.auth.utils import is_active_superuser
 from sentry.models import OrganizationMember, OrganizationMemberTeam, Team
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.forms.edit_organization_member import EditOrganizationMemberForm
@@ -66,7 +65,7 @@ class OrganizationMemberSettingsView(OrganizationView):
 
         can_admin = request.access.has_scope('member:delete')
 
-        if can_admin and not is_active_superuser(request):
+        if can_admin and not request.is_superuser():
             acting_member = OrganizationMember.objects.get(
                 user=request.user,
                 organization=organization,
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 8682ddd44a..35f123ddf4 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -7,7 +7,6 @@ from django.db import IntegrityError
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.auth.utils import is_active_superuser
 from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
 from sentry.web.frontend.base import TeamView
 
@@ -66,7 +65,7 @@ class TeamSettingsView(TeamView):
 
             return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
 
-        if is_active_superuser(request):
+        if request.is_superuser():
             can_remove_team = True
         else:
             can_remove_team = request.access.has_team_scope(team, 'team:delete')
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index 4f596229f4..8f49d43772 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -12,23 +12,24 @@ class OrganizationPermissionBase(TestCase):
         self.org = self.create_organization()
         super(OrganizationPermissionBase, self).setUp()
 
-    def has_object_perm(self, auth, user, obj, method='GET'):
+    def has_object_perm(self, method, obj, auth=None, user=None, is_superuser=None):
         perm = OrganizationPermission()
         request = Mock()
         request.auth = auth
         request.user = user
         request.method = method
+        request.is_superuser = lambda: is_superuser if is_superuser is not None else user.is_superuser
         return perm.has_object_permission(request, None, obj)
 
 
 class OrganizationPermissionTest(OrganizationPermissionBase):
     def test_regular_user(self):
         user = self.create_user()
-        assert not self.has_object_perm(None, user, self.org)
+        assert not self.has_object_perm('GET', self.org, user=user)
 
     def test_superuser(self):
         user = self.create_user(is_superuser=True)
-        assert self.has_object_perm(None, user, self.org)
+        assert self.has_object_perm('GET', self.org, user=user)
 
     def test_org_member(self):
         user = self.create_user()
@@ -37,8 +38,8 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
             organization=self.org,
             role='member',
         )
-        assert self.has_object_perm(None, user, self.org, 'GET')
-        assert not self.has_object_perm(None, user, self.org, 'POST')
+        assert self.has_object_perm('GET', self.org, user=user)
+        assert not self.has_object_perm('POST', self.org, user=user)
 
     def test_project_key(self):
         key = ProjectKey.objects.create(
@@ -46,16 +47,16 @@ class OrganizationPermissionTest(OrganizationPermissionBase):
                 team=self.create_team(organization=self.org),
             ),
         )
-        assert not self.has_object_perm(key, None, self.org)
+        assert not self.has_object_perm('GET', self.org, auth=key)
 
     def test_api_key_with_org_access(self):
         key = ApiKey.objects.create(
             organization=self.org,
         )
-        assert self.has_object_perm(key, None, self.org)
+        assert self.has_object_perm('GET', self.org, auth=key)
 
     def test_api_key_without_org_access(self):
         key = ApiKey.objects.create(
             organization=self.create_organization(),
         )
-        assert not self.has_object_perm(key, None, self.org)
+        assert not self.has_object_perm('GET', self.org, auth=key)
diff --git a/tests/sentry/api/bases/test_project.py b/tests/sentry/api/bases/test_project.py
index 898a80d70e..fd0fc6d8f0 100644
--- a/tests/sentry/api/bases/test_project.py
+++ b/tests/sentry/api/bases/test_project.py
@@ -14,23 +14,24 @@ class ProjectPermissionBase(TestCase):
         self.project = self.create_project(organization=self.org)
         super(ProjectPermissionBase, self).setUp()
 
-    def has_object_perm(self, auth, user, obj, method='GET'):
+    def has_object_perm(self, method, obj, auth=None, user=None, is_superuser=None):
         perm = ProjectPermission()
         request = Mock()
         request.auth = auth
         request.user = user
         request.method = method
+        request.is_superuser = lambda: is_superuser if is_superuser is not None else user.is_superuser
         return perm.has_object_permission(request, None, obj)
 
 
 class ProjectPermissionTest(ProjectPermissionBase):
     def test_regular_user(self):
         user = self.create_user(is_superuser=False)
-        assert not self.has_object_perm(None, user, self.project)
+        assert not self.has_object_perm('GET', self.project, user=user)
 
     def test_superuser(self):
         user = self.create_user(is_superuser=True)
-        assert self.has_object_perm(None, user, self.project)
+        assert self.has_object_perm('GET', self.project, user=user)
 
     def test_member_for_project_read(self):
         user = self.create_user(is_superuser=False)
@@ -40,7 +41,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
             role='member',
             teams=[self.team],
         )
-        assert self.has_object_perm(None, user, self.project)
+        assert self.has_object_perm('GET', self.project, user=user)
 
     def test_member_for_project_write(self):
         user = self.create_user(is_superuser=False)
@@ -50,7 +51,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
             role='member',
             teams=[self.team],
         )
-        assert not self.has_object_perm(None, user, self.project, method='POST')
+        assert not self.has_object_perm('POST', self.project, user=user)
 
     def test_member_for_project_delete(self):
         user = self.create_user(is_superuser=False)
@@ -60,7 +61,7 @@ class ProjectPermissionTest(ProjectPermissionBase):
             role='member',
             teams=[self.team],
         )
-        assert not self.has_object_perm(None, user, self.project, method='DELETE')
+        assert not self.has_object_perm('DELETE', self.project, user=user)
 
     def test_member_with_team_access(self):
         user = self.create_user(is_superuser=False)
@@ -70,28 +71,28 @@ class ProjectPermissionTest(ProjectPermissionBase):
             role='member',
             teams=[self.team]
         )
-        assert self.has_object_perm(None, user, self.project)
+        assert self.has_object_perm('GET', self.project, user=user)
 
     def test_project_key_with_project_access(self):
         key = ProjectKey.objects.create(
             project=self.project,
         )
-        assert self.has_object_perm(key, None, self.project)
+        assert self.has_object_perm('GET', self.project, auth=key)
 
     def test_project_key_without_project_access(self):
         key = ProjectKey.objects.create(
             project=self.create_project(organization=self.org),
         )
-        assert not self.has_object_perm(key, None, self.project)
+        assert not self.has_object_perm('GET', self.project, auth=key)
 
     def test_api_key_with_org_access(self):
         key = ApiKey.objects.create(
             organization=self.org,
         )
-        assert self.has_object_perm(key, None, self.project)
+        assert self.has_object_perm('GET', self.project, auth=key)
 
     def test_api_key_without_org_access(self):
         key = ApiKey.objects.create(
             organization=self.create_organization(),
         )
-        assert not self.has_object_perm(key, None, self.project)
+        assert not self.has_object_perm('GET', self.project, auth=key)
diff --git a/tests/sentry/api/bases/test_team.py b/tests/sentry/api/bases/test_team.py
index 10fb620a16..61756d7746 100644
--- a/tests/sentry/api/bases/test_team.py
+++ b/tests/sentry/api/bases/test_team.py
@@ -13,23 +13,24 @@ class TeamPermissionBase(TestCase):
         self.team = self.create_team(organization=self.org)
         super(TeamPermissionBase, self).setUp()
 
-    def has_perm(self, method, obj, auth=None, user=None):
+    def has_object_perm(self, method, obj, auth=None, user=None, is_superuser=None):
         perm = TeamPermission()
         request = Mock()
         request.auth = auth
         request.user = user
         request.method = method
+        request.is_superuser = lambda: is_superuser if is_superuser is not None else user.is_superuser
         return perm.has_object_permission(request, None, obj)
 
 
 class TeamPermissionTest(TeamPermissionBase):
     def test_get_regular_user(self):
         user = self.create_user()
-        assert not self.has_perm('GET', self.team, user=user)
+        assert not self.has_object_perm('GET', self.team, user=user)
 
     def test_get_superuser(self):
         user = self.create_user(is_superuser=True)
-        assert self.has_perm('GET', self.team, user=user)
+        assert self.has_object_perm('GET', self.team, user=user)
 
     def test_get_without_team_membership(self):
         user = self.create_user()
@@ -39,7 +40,7 @@ class TeamPermissionTest(TeamPermissionBase):
             role='member',
             teams=[],
         )
-        assert not self.has_perm('GET', self.team, user=user)
+        assert not self.has_object_perm('GET', self.team, user=user)
 
     def test_get_with_team_membership(self):
         user = self.create_user()
@@ -49,22 +50,22 @@ class TeamPermissionTest(TeamPermissionBase):
             role='member',
             teams=[self.team],
         )
-        assert self.has_perm('GET', self.team, user=user)
+        assert self.has_object_perm('GET', self.team, user=user)
 
     def test_get_project_key(self):
         key = ProjectKey.objects.create(
             project=self.create_project(team=self.team),
         )
-        assert not self.has_perm('GET', self.team, auth=key)
+        assert not self.has_object_perm('GET', self.team, auth=key)
 
     def test_get_api_key_with_org_access(self):
         key = ApiKey.objects.create(
             organization=self.org,
         )
-        assert self.has_perm('GET', self.team, auth=key)
+        assert self.has_object_perm('GET', self.team, auth=key)
 
     def test_get_api_key_without_org_access(self):
         key = ApiKey.objects.create(
             organization=self.create_organization(),
         )
-        assert not self.has_perm('GET', self.team, auth=key)
+        assert not self.has_object_perm('GET', self.team, auth=key)
