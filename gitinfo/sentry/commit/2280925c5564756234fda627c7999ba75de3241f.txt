commit 2280925c5564756234fda627c7999ba75de3241f
Author: Anton Ovchinnikov <anton@tonyo.info>
Date:   Tue Apr 16 19:42:06 2019 +0200

    fix: Limit maximum number of release files per release (#12797)

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 5c7b2b832e..d1eaa77ea3 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -30,7 +30,7 @@ from sentry.utils import json
 
 
 from .authentication import ApiKeyAuthentication, TokenAuthentication
-from .paginator import Paginator
+from .paginator import BadPaginationError, Paginator
 from .permissions import NoPermission
 
 
@@ -239,10 +239,13 @@ class Endpoint(APIView):
         if not paginator:
             paginator = paginator_cls(**paginator_kwargs)
 
-        cursor_result = paginator.get_result(
-            limit=per_page,
-            cursor=input_cursor,
-        )
+        try:
+            cursor_result = paginator.get_result(
+                limit=per_page,
+                cursor=input_cursor,
+            )
+        except BadPaginationError as e:
+            return Response({'detail': e.message}, status=400)
 
         # map results based on callback
         if on_results:
diff --git a/src/sentry/api/endpoints/organization_release_files.py b/src/sentry/api/endpoints/organization_release_files.py
index 1dd872fbb7..7969103215 100644
--- a/src/sentry/api/endpoints/organization_release_files.py
+++ b/src/sentry/api/endpoints/organization_release_files.py
@@ -11,6 +11,7 @@ from sentry.api.content_negotiation import ConditionalContentNegotiation
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
+from sentry.constants import MAX_RELEASE_FILES_OFFSET
 from sentry.models import File, Release, ReleaseFile, Distribution
 
 ERR_FILE_EXISTS = 'A file matching this name already exists for the given release'
@@ -73,6 +74,7 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
             queryset=file_list,
             order_by='name',
             paginator_cls=OffsetPaginator,
+            max_offset=MAX_RELEASE_FILES_OFFSET,
             on_results=lambda r: serialize(load_dist(r), request.user),
         )
 
diff --git a/src/sentry/api/endpoints/project_release_files.py b/src/sentry/api/endpoints/project_release_files.py
index f60cf3fc98..2b3205e7b0 100644
--- a/src/sentry/api/endpoints/project_release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -13,6 +13,7 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.endpoints.organization_release_files import load_dist
+from sentry.constants import MAX_RELEASE_FILES_OFFSET
 from sentry.models import File, Release, ReleaseFile
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -88,6 +89,7 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
             queryset=file_list,
             order_by='name',
             paginator_cls=OffsetPaginator,
+            max_offset=MAX_RELEASE_FILES_OFFSET,
             on_results=lambda r: serialize(load_dist(r), request.user),
         )
 
diff --git a/src/sentry/api/paginator.py b/src/sentry/api/paginator.py
index deb3770888..0c5663fa28 100644
--- a/src/sentry/api/paginator.py
+++ b/src/sentry/api/paginator.py
@@ -25,6 +25,10 @@ MAX_LIMIT = 100
 MAX_HITS_LIMIT = 1000
 
 
+class BadPaginationError(Exception):
+    pass
+
+
 class BasePaginator(object):
     def __init__(self, queryset, order_by=None, max_limit=MAX_LIMIT, on_results=None):
         if order_by:
@@ -213,11 +217,13 @@ class DateTimePaginator(BasePaginator):
 # and are only useful for polling situations. The OffsetPaginator ignores them
 # entirely and uses standard paging
 class OffsetPaginator(object):
-    def __init__(self, queryset, order_by=None, max_limit=MAX_LIMIT, on_results=None):
+    def __init__(self, queryset, order_by=None, max_limit=MAX_LIMIT,
+                 max_offset=None, on_results=None):
         self.key = order_by if order_by is None or isinstance(
             order_by, (list, tuple, set)) else (order_by, )
         self.queryset = queryset
         self.max_limit = max_limit
+        self.max_offset = max_offset
         self.on_results = on_results
 
     def get_result(self, limit=100, cursor=None):
@@ -236,6 +242,9 @@ class OffsetPaginator(object):
         offset = cursor.offset * cursor.value
         stop = offset + (cursor.value or limit) + 1
 
+        if self.max_offset is not None and offset >= self.max_offset:
+            raise BadPaginationError('Pagination offset too large')
+
         results = list(queryset[offset:stop])
         if cursor.value != limit:
             results = results[-(limit + 1):]
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index a9d76edf07..2a442f433f 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -229,6 +229,13 @@ KNOWN_DIF_FORMATS = {
 
 NATIVE_UNKNOWN_STRING = '<unknown>'
 
+# Maximum number of release files that can be "skipped" (i.e., maximum paginator offset)
+# inside release files API endpoints.
+# If this number is too large, it may cause problems because of inefficient
+# LIMIT-OFFSET database queries.
+# These problems should be solved after we implement artifact bundles workflow.
+MAX_RELEASE_FILES_OFFSET = 20000
+
 # to go from an integration id (in _platforms.json) to the platform
 # data, such as documentation url or humanized name.
 # example: java-logback -> {"type": "framework",
diff --git a/tests/sentry/api/test_paginator.py b/tests/sentry/api/test_paginator.py
index 700ef04e2a..9fa970214d 100644
--- a/tests/sentry/api/test_paginator.py
+++ b/tests/sentry/api/test_paginator.py
@@ -5,6 +5,7 @@ from django.utils import timezone
 from unittest import TestCase as SimpleTestCase
 
 from sentry.api.paginator import (
+    BadPaginationError,
     Paginator,
     DateTimePaginator,
     OffsetPaginator,
@@ -142,6 +143,21 @@ class OffsetPaginatorTest(TestCase):
         assert result.next
         assert result.prev
 
+    def test_max_offset(self):
+        self.create_user('foo@example.com')
+        self.create_user('bar@example.com')
+        self.create_user('baz@example.com')
+
+        queryset = User.objects.all()
+
+        paginator = OffsetPaginator(queryset, max_offset=10)
+        result1 = paginator.get_result(cursor=None)
+        assert len(result1) == 3, result1
+
+        paginator = OffsetPaginator(queryset, max_offset=0)
+        with self.assertRaises(BadPaginationError):
+            paginator.get_result()
+
 
 class DateTimePaginatorTest(TestCase):
     def test_ascending(self):
