commit 191ef9d157380140d9ca51dc7b70736075b41a0d
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Nov 1 12:59:29 2017 -0700

    ref(tsdb): Add model/environment parameter validation to TSDB backends (#6484)

diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 6c079dc9d9..2de9c8b692 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -103,6 +103,14 @@ class BaseTSDB(Service):
 
     models = TSDBModel
 
+    models_with_environment_support = frozenset([
+        models.project,
+        models.group,
+        models.release,
+        models.users_affected_by_group,
+        models.users_affected_by_project,
+    ])
+
     def __init__(self, rollups=None, legacy_rollups=None):
         if rollups is None:
             rollups = settings.SENTRY_TSDB_ROLLUPS
@@ -118,6 +126,12 @@ class BaseTSDB(Service):
 
         self.__legacy_rollups = legacy_rollups
 
+    def validate_arguments(self, models, environment_ids):
+        if any(e is not None for e in environment_ids):
+            unsupported_models = set(models) - self.models_with_environment_support
+            if unsupported_models:
+                raise ValueError('not all models support environment parameters')
+
     def get_rollups(self):
         return self.rollups
 
diff --git a/src/sentry/tsdb/dummy.py b/src/sentry/tsdb/dummy.py
index 295b465e41..e5508c3a1f 100644
--- a/src/sentry/tsdb/dummy.py
+++ b/src/sentry/tsdb/dummy.py
@@ -16,55 +16,74 @@ class DummyTSDB(BaseTSDB):
     """
 
     def incr(self, model, key, timestamp=None, count=1, environment_id=None):
-        pass
+        self.validate_arguments([model], [environment_id])
 
     def merge(self, model, destination, sources, timestamp=None, environment_ids=None):
-        pass
+        environment_ids = (
+            set(environment_ids) if environment_ids is not None else set()).union(
+            [None])
+        self.validate_arguments([model], environment_ids)
 
     def delete(self, models, keys, start=None, end=None, timestamp=None, environment_ids=None):
-        pass
+        environment_ids = (
+            set(environment_ids) if environment_ids is not None else set()).union(
+            [None])
+        self.validate_arguments(models, environment_ids)
 
     def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         _, series = self.get_optimal_rollup_series(start, end, rollup)
         return {k: [(ts, 0) for ts in series] for k in keys}
 
     def record(self, model, key, values, timestamp=None, environment_id=None):
-        pass
+        self.validate_arguments([model], [environment_id])
 
     def get_distinct_counts_series(self, model, keys, start, end=None,
                                    rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         _, series = self.get_optimal_rollup_series(start, end, rollup)
         return {k: [(ts, 0) for ts in series] for k in keys}
 
     def get_distinct_counts_totals(self, model, keys, start, end=None,
                                    rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         return {k: 0 for k in keys}
 
     def get_distinct_counts_union(self, model, keys, start, end=None,
                                   rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         return 0
 
     def merge_distinct_counts(self, model, destination, sources,
                               timestamp=None, environment_ids=None):
-        pass
+        environment_ids = (
+            set(environment_ids) if environment_ids is not None else set()).union(
+            [None])
+        self.validate_arguments([model], environment_ids)
 
     def delete_distinct_counts(self, models, keys, start=None, end=None,
                                timestamp=None, environment_ids=None):
-        pass
+        environment_ids = (
+            set(environment_ids) if environment_ids is not None else set()).union(
+            [None])
+        self.validate_arguments(models, environment_ids)
 
     def record_frequency_multi(self, requests, timestamp=None, environment_id=None):
-        pass
+        self.validate_arguments([model for model, request in requests], [environment_id])
 
     def get_most_frequent(self, model, keys, start, end=None,
                           rollup=None, limit=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         return {key: [] for key in keys}
 
     def get_most_frequent_series(self, model, keys, start, end=None,
                                  rollup=None, limit=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
         return {key: [(timestamp, {}) for timestamp in series] for key in keys}
 
     def get_frequency_series(self, model, items, start, end=None, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         results = {}
@@ -76,14 +95,21 @@ class DummyTSDB(BaseTSDB):
         return results
 
     def get_frequency_totals(self, model, items, start, end=None, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
         results = {}
         for key, members in items.items():
             results[key] = {member: 0.0 for member in members}
         return results
 
     def merge_frequencies(self, model, destination, sources, timestamp=None, environment_ids=None):
-        pass
+        environment_ids = list(
+            (set(environment_ids) if environment_ids is not None else set()).union(
+                [None]))
+        self.validate_arguments([model], environment_ids)
 
     def delete_frequencies(self, models, keys, start=None, end=None,
                            timestamp=None, environment_ids=None):
-        pass
+        environment_ids = (
+            set(environment_ids) if environment_ids is not None else set()).union(
+            [None])
+        self.validate_arguments(models, environment_ids)
diff --git a/src/sentry/tsdb/inmemory.py b/src/sentry/tsdb/inmemory.py
index 24d164aea8..ac99893059 100644
--- a/src/sentry/tsdb/inmemory.py
+++ b/src/sentry/tsdb/inmemory.py
@@ -28,6 +28,8 @@ class InMemoryTSDB(BaseTSDB):
         self.flush()
 
     def incr(self, model, key, timestamp=None, count=1, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         environment_ids = set([environment_id, None])
 
         if timestamp is None:
@@ -43,6 +45,8 @@ class InMemoryTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments([model], environment_ids)
+
         for environment_id in environment_ids:
             destination = self.data[model][(destination, environment_id)]
             for source in sources:
@@ -54,6 +58,8 @@ class InMemoryTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments(models, environment_ids)
+
         rollups = self.get_active_series(start, end, timestamp)
 
         for rollup, series in rollups.items():
@@ -68,6 +74,8 @@ class InMemoryTSDB(BaseTSDB):
                             )
 
     def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         results = []
@@ -87,6 +95,8 @@ class InMemoryTSDB(BaseTSDB):
         return dict(results_by_key)
 
     def record(self, model, key, values, timestamp=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         environment_ids = set([environment_id, None])
 
         if timestamp is None:
@@ -99,6 +109,8 @@ class InMemoryTSDB(BaseTSDB):
 
     def get_distinct_counts_series(self, model, keys, start, end=None,
                                    rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         results = {}
@@ -113,6 +125,8 @@ class InMemoryTSDB(BaseTSDB):
 
     def get_distinct_counts_totals(self, model, keys, start, end=None,
                                    rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         results = {}
@@ -128,6 +142,8 @@ class InMemoryTSDB(BaseTSDB):
 
     def get_distinct_counts_union(self, model, keys, start, end=None,
                                   rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         values = set()
@@ -145,6 +161,8 @@ class InMemoryTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments([model], environment_ids)
+
         for environment_id in environment_ids:
             destination = self.sets[model][(destination, environment_id)]
             for source in sources:
@@ -157,6 +175,8 @@ class InMemoryTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments(models, environment_ids)
+
         rollups = self.get_active_series(start, end, timestamp)
 
         for rollup, series in rollups.items():
@@ -201,6 +221,8 @@ class InMemoryTSDB(BaseTSDB):
     def record_frequency_multi(self, requests, timestamp=None, environment_id=None):
         environment_ids = set([environment_id, None])
 
+        self.validate_arguments([model for model, request in requests], [environment_id])
+
         if timestamp is None:
             timestamp = timezone.now()
 
@@ -216,6 +238,8 @@ class InMemoryTSDB(BaseTSDB):
                           rollup=None, limit=None, environment_id=None):
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
+        self.validate_arguments([model], [environment_id])
+
         results = {}
         for key in keys:
             result = results[key] = Counter()
@@ -232,6 +256,8 @@ class InMemoryTSDB(BaseTSDB):
                                  rollup=None, limit=None, environment_id=None):
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
+        self.validate_arguments([model], [environment_id])
+
         results = {}
         for key in keys:
             result = results[key] = []
@@ -243,6 +269,8 @@ class InMemoryTSDB(BaseTSDB):
         return results
 
     def get_frequency_series(self, model, items, start, end=None, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         results = {}
@@ -256,6 +284,8 @@ class InMemoryTSDB(BaseTSDB):
         return results
 
     def get_frequency_totals(self, model, items, start, end=None, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         results = {}
 
         for key, series in six.iteritems(
@@ -273,6 +303,8 @@ class InMemoryTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments([model], environment_ids)
+
         for environment_id in environment_ids:
             destination = self.frequencies[model][(destination, environment_id)]
             for source in sources:
@@ -285,6 +317,8 @@ class InMemoryTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments(models, environment_ids)
+
         rollups = self.get_active_series(start, end, timestamp)
 
         for rollup, series in rollups.items():
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index e1c87e1741..5ac5972df9 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -174,6 +174,8 @@ class RedisTSDB(BaseTSDB):
         return key
 
     def incr(self, model, key, timestamp=None, count=1, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         self.incr_multi([(model, key)], timestamp, count, environment_id)
 
     def incr_multi(self, items, timestamp=None, count=1, environment_id=None):
@@ -182,6 +184,8 @@ class RedisTSDB(BaseTSDB):
 
         >>> incr_multi([(TimeSeriesModel.project, 1), (TimeSeriesModel.group, 5)])
         """
+        self.validate_arguments([model for model, _ in items], [environment_id])
+
         if timestamp is None:
             timestamp = timezone.now()
 
@@ -207,6 +211,8 @@ class RedisTSDB(BaseTSDB):
         >>>          start=now - timedelta(days=1),
         >>>          end=now)
         """
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
         series = map(to_datetime, series)
 
@@ -233,6 +239,8 @@ class RedisTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments([model], environment_ids)
+
         rollups = self.get_active_series(timestamp=timestamp)
 
         for cluster, environment_ids in self.get_cluster_groups(environment_ids):
@@ -287,6 +295,8 @@ class RedisTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments(models, environment_ids)
+
         rollups = self.get_active_series(start, end, timestamp)
 
         for cluster, environment_ids in self.get_cluster_groups(environment_ids):
@@ -310,12 +320,16 @@ class RedisTSDB(BaseTSDB):
                                     )
 
     def record(self, model, key, values, timestamp=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         self.record_multi(((model, key, values), ), timestamp, environment_id)
 
     def record_multi(self, items, timestamp=None, environment_id=None):
         """
         Record an occurence of an item in a distinct counter.
         """
+        self.validate_arguments([model for model, key, values in items], [environment_id])
+
         if timestamp is None:
             timestamp = timezone.now()
 
@@ -349,6 +363,8 @@ class RedisTSDB(BaseTSDB):
         """
         Fetch counts of distinct items for each rollup interval within the range.
         """
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         responses = {}
@@ -379,6 +395,8 @@ class RedisTSDB(BaseTSDB):
         """
         Count distinct items during a time range.
         """
+        self.validate_arguments([model], [environment_id])
+
         rollup, series = self.get_optimal_rollup_series(start, end, rollup)
 
         responses = {}
@@ -400,6 +418,8 @@ class RedisTSDB(BaseTSDB):
 
     def get_distinct_counts_union(self, model, keys, start, end=None,
                                   rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         if not keys:
             return 0
 
@@ -485,6 +505,8 @@ class RedisTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments([model], environment_ids)
+
         rollups = self.get_active_series(timestamp=timestamp)
 
         for cluster, environment_ids in self.get_cluster_groups(environment_ids):
@@ -550,6 +572,8 @@ class RedisTSDB(BaseTSDB):
 
     def delete_distinct_counts(self, models, keys, start=None, end=None,
                                timestamp=None, environment_ids=None):
+        self.validate_arguments(models, environment_ids)
+
         environment_ids = (
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
@@ -582,6 +606,8 @@ class RedisTSDB(BaseTSDB):
         )
 
     def record_frequency_multi(self, requests, timestamp=None, environment_id=None):
+        self.validate_arguments([model for model, request in requests], [environment_id])
+
         if not self.enable_frequency_sketches:
             return
 
@@ -625,6 +651,8 @@ class RedisTSDB(BaseTSDB):
 
     def get_most_frequent(self, model, keys, start, end=None,
                           rollup=None, limit=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         if not self.enable_frequency_sketches:
             raise NotImplementedError("Frequency sketches are disabled.")
 
@@ -655,6 +683,8 @@ class RedisTSDB(BaseTSDB):
 
     def get_most_frequent_series(self, model, keys, start, end=None,
                                  rollup=None, limit=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         if not self.enable_frequency_sketches:
             raise NotImplementedError("Frequency sketches are disabled.")
 
@@ -684,6 +714,8 @@ class RedisTSDB(BaseTSDB):
         return results
 
     def get_frequency_series(self, model, items, start, end=None, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         if not self.enable_frequency_sketches:
             raise NotImplementedError("Frequency sketches are disabled.")
 
@@ -724,6 +756,8 @@ class RedisTSDB(BaseTSDB):
         return results
 
     def get_frequency_totals(self, model, items, start, end=None, rollup=None, environment_id=None):
+        self.validate_arguments([model], [environment_id])
+
         if not self.enable_frequency_sketches:
             raise NotImplementedError("Frequency sketches are disabled.")
 
@@ -744,6 +778,8 @@ class RedisTSDB(BaseTSDB):
             (set(environment_ids) if environment_ids is not None else set()).union(
                 [None]))
 
+        self.validate_arguments([model], environment_ids)
+
         if not self.enable_frequency_sketches:
             return
 
@@ -813,6 +849,8 @@ class RedisTSDB(BaseTSDB):
             set(environment_ids) if environment_ids is not None else set()).union(
             [None])
 
+        self.validate_arguments(models, environment_ids)
+
         rollups = self.get_active_series(start, end, timestamp)
 
         for cluster, environment_ids in self.get_cluster_groups(environment_ids):
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 111b848a97..f9e11745d3 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -368,6 +368,11 @@ class RedisTSDBTest(TestCase):
         now = datetime.utcnow().replace(tzinfo=pytz.UTC)
         model = TSDBModel.frequent_projects_by_organization
 
+        # None of the registered frequency tables actually support
+        # environments, so we have to pretend like one actually does
+        self.db.models_with_environment_support = self.db.models_with_environment_support | set([
+                                                                                                model])
+
         rollup = 3600
 
         self.db.record_frequency_multi(
