commit e09acc4d1af5ef19fac030544bdeb6ebfe57d56b
Author: David Cramer <dcramer@gmail.com>
Date:   Mon May 15 14:49:17 2017 -0700

    [ui] convert project keys to react

diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
index d5d698b850..6f93dfe45f 100644
--- a/src/sentry/api/endpoints/project_key_details.py
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -36,11 +36,24 @@ def update_key_scenario(runner):
 
 class KeySerializer(serializers.Serializer):
     name = serializers.CharField(max_length=200, required=False)
+    isActive = serializers.BooleanField(required=False)
 
 
 class ProjectKeyDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.PROJECTS
 
+    def get(self, request, project, key_id):
+        try:
+            key = ProjectKey.objects.get(
+                project=project,
+                public_key=key_id,
+                roles=ProjectKey.roles.store,
+            )
+        except ProjectKey.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return Response(serialize(key, request.user), status=200)
+
     @attach_scenarios([update_key_scenario])
     def put(self, request, project, key_id):
         """
@@ -61,7 +74,6 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             key = ProjectKey.objects.get(
                 project=project,
                 public_key=key_id,
-                status=ProjectKeyStatus.ACTIVE,
                 roles=ProjectKey.roles.store,
             )
         except ProjectKey.DoesNotExist:
@@ -75,6 +87,11 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             if result.get('name'):
                 key.label = result['name']
 
+            if result.get('isActive') is True:
+                key.status = ProjectKeyStatus.ACTIVE
+            elif result.get('isActive') is False:
+                key.status = ProjectKeyStatus.INACTIVE
+
             key.save()
 
             self.create_audit_entry(
@@ -107,7 +124,6 @@ class ProjectKeyDetailsEndpoint(ProjectEndpoint):
             key = ProjectKey.objects.get(
                 project=project,
                 public_key=key_id,
-                status=ProjectKeyStatus.ACTIVE,
                 roles=ProjectKey.roles.store,
             )
         except ProjectKey.DoesNotExist:
diff --git a/src/sentry/api/serializers/models/project_key.py b/src/sentry/api/serializers/models/project_key.py
index 3f3f9bdd40..fbbcc941e4 100644
--- a/src/sentry/api/serializers/models/project_key.py
+++ b/src/sentry/api/serializers/models/project_key.py
@@ -7,11 +7,16 @@ from sentry.models import ProjectKey
 @register(ProjectKey)
 class ProjectKeySerializer(Serializer):
     def serialize(self, obj, attrs, user):
+        name = obj.label or obj.public_key[:14]
         d = {
             'id': obj.public_key,
-            'label': obj.label,
+            'name': name,
+            # label is here for compatibility
+            'label': name,
             'public': obj.public_key,
             'secret': obj.secret_key,
+            'projectId': obj.project_id,
+            'isActive': obj.is_active,
             'dsn': {
                 'secret': obj.dsn_private,
                 'public': obj.dsn_public,
diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
index c25c98b7ed..35d7e7b80b 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.jsx
@@ -6,14 +6,18 @@ const ClippedBox = React.createClass({
   propTypes: {
     title: React.PropTypes.string,
     defaultClipped: React.PropTypes.bool,
-    clipHeight: React.PropTypes.number
+    clipHeight: React.PropTypes.number,
+    btnClassName: React.PropTypes.string,
+    btnText: React.PropTypes.string
   },
 
   getDefaultProps() {
     return {
       defaultClipped: false,
       clipHeight: 200,
-      renderedHeight: null
+      renderedHeight: null,
+      btnClassName: 'btn btn-primary btn-xs show-more',
+      btnText: t('Show More')
     };
   },
 
@@ -27,7 +31,7 @@ const ClippedBox = React.createClass({
   componentDidMount() {
     let renderedHeight = ReactDOM.findDOMNode(this).offsetHeight;
 
-    if (renderedHeight > this.props.clipHeight) {
+    if (!this.state.clipped && renderedHeight > this.props.clipHeight) {
       /*eslint react/no-did-mount-set-state:0*/
       // okay if this causes re-render; cannot determine until
       // rendered first anyways
@@ -56,14 +60,16 @@ const ClippedBox = React.createClass({
     }
 
     return (
-      <div className={className}>
+      <div
+        className={className}
+        style={{maxHeight: this.state.clipped ? this.props.clipHeight : null}}>
         {this.props.title && <h5>{this.props.title}</h5>}
         {this.props.children}
 
         {this.state.clipped &&
           <div className="clip-fade">
-            <a onClick={this.reveal} className="show-more btn btn-primary btn-xs">
-              {t('Show more')}
+            <a onClick={this.reveal} className={this.props.btnClassName}>
+              {this.props.btnText}
             </a>
           </div>}
       </div>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index a2016b0ff3..4f979fd8bf 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -55,6 +55,8 @@ import ProjectInstallPlatform from './views/projectInstall/platform';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectDebugSymbols from './views/projectDebugSymbols';
+import ProjectKeys from './views/projectKeys';
+import ProjectKeyDetails from './views/projectKeyDetails';
 import ProjectProcessingIssues from './views/projectProcessingIssues';
 import ProjectSettings from './views/projectSettings';
 import ProjectUserReports from './views/projectUserReports';
@@ -225,12 +227,14 @@ function routes() {
               path="data-forwarding/"
               component={errorHandler(ProjectDataForwarding)}
             />
+            <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
             <Route path="filters/" component={errorHandler(ProjectFilters)} />
             <Route
               path="saved-searches/"
               component={errorHandler(ProjectSavedSearches)}
             />
-            <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
+            <Route path="keys/" component={errorHandler(ProjectKeys)} />
+            <Route path="keys/:keyId/" component={errorHandler(ProjectKeyDetails)} />
             <Route
               path="processing-issues/"
               component={errorHandler(ProjectProcessingIssues)}
diff --git a/src/sentry/static/sentry/app/views/projectKeyDetails.jsx b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
new file mode 100644
index 0000000000..5fbbed74e8
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectKeyDetails.jsx
@@ -0,0 +1,335 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+import underscore from 'underscore';
+import {browserHistory} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import AutoSelectText from '../components/autoSelectText';
+import DateTime from '../components/dateTime';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import OrganizationState from '../mixins/organizationState';
+import {BooleanField, FormState, TextField} from '../components/forms';
+import {t, tct} from '../locale';
+
+const KeySettings = React.createClass({
+  propTypes: {
+    access: React.PropTypes.object.isRequired,
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    initialData: React.PropTypes.object,
+    onRemove: React.PropTypes.func.isRequired,
+    onSave: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      formData: Object.assign({}, this.props.initialData),
+      errors: {}
+    };
+  },
+
+  onFieldChange(name, value) {
+    this.setState({
+      formData: {
+        ...this.state.formData,
+        [name]: value
+      }
+    });
+  },
+
+  onSubmit(e) {
+    e.preventDefault();
+
+    if (this.state.state == FormState.SAVING) {
+      return;
+    }
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: this.state.formData,
+          success: data => {
+            this.props.onSave(data);
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
+  },
+
+  onRemove(e) {
+    e.preventDefault();
+    if (this.state.loading) return;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+      method: 'DELETE',
+      success: (d, _, jqXHR) => {
+        this.props.onRemove();
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  render() {
+    let isSaving = this.state.state === FormState.SAVING;
+    let {errors, formData} = this.state;
+    let hasChanges = !underscore.isEqual(this.props.initialData, formData);
+    let {access, data} = this.props;
+
+    return (
+      <form onSubmit={this.onSubmit} className="form-stacked">
+        {this.state.state === FormState.ERROR &&
+          <div className="alert alert-error alert-block">
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
+        <div className="box">
+          <div className="box-header">
+            <h3>{t('Details')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <TextField
+              key="name"
+              name="name"
+              label={t('Name')}
+              value={formData.name}
+              required={false}
+              error={errors.name}
+              onChange={this.onFieldChange.bind(this, 'name')}
+            />
+            <BooleanField
+              key="isActive"
+              name="isActive"
+              label={t('Enabled')}
+              value={formData.isActive}
+              required={false}
+              error={errors.isActive}
+              help={
+                'Accept events from this key? This may be used to temporarily suspend a key.'
+              }
+              onChange={this.onFieldChange.bind(this, 'isActive')}
+            />
+            <div className="form-group">
+              <label>{t('Created')}</label>
+              <div className="controls">
+                <DateTime date={data.dateCreated} />
+              </div>
+            </div>
+
+            <fieldset className="form-actions">
+              <button
+                type="submit"
+                className="btn btn-primary"
+                disabled={isSaving || !hasChanges}>
+                {t('Save Changes')}
+              </button>
+            </fieldset>
+          </div>
+        </div>
+
+        <div className="box dsn-credentials">
+          <div className="box-header">
+            <h3>{t('Credentials')}</h3>
+          </div>
+          <div className="box-content with-padding">
+            <p>
+              {t(
+                'Your credentials are coupled to a public and secret key. Different clients will require different credentials, so make sure you check the documentation before plugging things in.'
+              )}
+            </p>
+            <div className="form-group">
+              <label>{t('DSN')}</label>
+              <AutoSelectText className="form-control disabled">
+                {data.dsn.secret}
+              </AutoSelectText>
+            </div>
+
+            <div className="form-group">
+              <label>{t('DSN (Public)')}</label>
+              <AutoSelectText className="form-control disabled">
+                {data.dsn.public}
+              </AutoSelectText>
+              <div className="help-block">
+                {tct('Use your public DSN with browser-based SDKs such as [raven-js].', {
+                  'raven-js': <a href="https://github.com/getsentry/raven-js">raven-js</a>
+                })}
+              </div>
+            </div>
+            <div className="form-group">
+              <label>{t('CSP Endpoint')}</label>
+              <AutoSelectText className="form-control disabled">
+                {data.dsn.csp}
+              </AutoSelectText>
+              <div className="help-block">
+                {tct(
+                  'Use your CSP endpoint in the [directive] directive in your [header] header.',
+                  {
+                    directive: <code>report-uri</code>,
+                    header: <code>Content-Security-Policy</code>
+                  }
+                )}
+              </div>
+            </div>
+            <div className="form-group">
+              <label>{t('Public Key')}</label>
+              <div className="controls">
+                <AutoSelectText className="form-control disabled">
+                  {data.public}
+                </AutoSelectText>
+              </div>
+            </div>
+            <div className="form-group">
+              <label>{t('Secret Key')}</label>
+              <div className="controls">
+                <AutoSelectText className="form-control disabled">
+                  {data.secret}
+                </AutoSelectText>
+              </div>
+            </div>
+            <div className="form-group">
+              <label>{t('Project ID')}</label>
+              <div className="controls">
+                <AutoSelectText className="form-control disabled">
+                  {data.projectId}
+                </AutoSelectText>
+              </div>
+            </div>
+          </div>
+        </div>
+
+        {access.has('project:admin') &&
+          <div className="box">
+            <div className="box-header">
+              <h3>{t('Revoke Key')}</h3>
+            </div>
+            <div className="box-content with-padding">
+              <p>
+                {t(
+                  'Revoking this key will immediately remove and suspend the credentials. This action is irreversible.'
+                )}
+              </p>
+
+              <fieldset className="form-actions">
+                <a onClick={this.onRemove} className="btn btn-danger">
+                  {t('Revoke Key')}
+                </a>
+              </fieldset>
+            </div>
+          </div>}
+
+      </form>
+    );
+  }
+});
+
+export default React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      data: null
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {keyId, orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${keyId}/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          data: data
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  handleRemove(data) {
+    let {orgId, projectId} = this.props.params;
+    browserHistory.push(null, `/${orgId}/${projectId}/settings/keys/`);
+  },
+
+  handleSave(data) {
+    this.setState({data: {...this.state.data, ...data}});
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  render() {
+    if (this.state.loading) return this.renderLoading();
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
+
+    let {data} = this.state;
+    let {orgId, projectId} = this.props.params;
+
+    return (
+      <DocumentTitle title={t('Key Details')}>
+        <div className="ref-key-details">
+          <h2>{t('Key Details')}</h2>
+          <KeySettings
+            access={this.getAccess()}
+            orgId={orgId}
+            projectId={projectId}
+            initialData={{
+              isActive: data.isActive,
+              name: data.name
+            }}
+            data={data}
+            onSave={this.handleSave}
+            onRemove={this.handleRemove}
+          />
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/views/projectKeys.jsx b/src/sentry/static/sentry/app/views/projectKeys.jsx
new file mode 100644
index 0000000000..465bcfd866
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectKeys.jsx
@@ -0,0 +1,334 @@
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+import {Link} from 'react-router';
+
+import ApiMixin from '../mixins/apiMixin';
+import AutoSelectText from '../components/autoSelectText';
+import ClippedBox from '../components/clippedBox';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t, tct} from '../locale';
+import OrganizationState from '../mixins/organizationState';
+
+const KeyRow = React.createClass({
+  propTypes: {
+    orgId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
+    data: React.PropTypes.object.isRequired,
+    access: React.PropTypes.object.isRequired,
+    onToggle: React.PropTypes.func.isRequired,
+    onRemove: React.PropTypes.func.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false
+    };
+  },
+
+  handleRemove(e) {
+    e.preventDefault();
+    if (this.state.loading) return;
+
+    /* eslint no-alert:0*/
+    if (
+      !window.confirm(
+        'Are you sure you want to remove this key? This action is irreversible.'
+      )
+    )
+      return;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+      method: 'DELETE',
+      success: (d, _, jqXHR) => {
+        this.props.onRemove();
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  handleUpdate(params, cb) {
+    if (this.state.loading) return;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId, data} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {
+      method: 'PUT',
+      data: params,
+      success: (d, _, jqXHR) => {
+        IndicatorStore.remove(loadingIndicator);
+        cb(d);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  handleEnable() {
+    this.handleUpdate(
+      {
+        isActive: true
+      },
+      this.props.onToggle
+    );
+  },
+
+  handleDisable() {
+    this.handleUpdate(
+      {
+        isActive: false
+      },
+      this.props.onToggle
+    );
+  },
+
+  render() {
+    let {access, data, orgId, projectId} = this.props;
+    let editUrl = `/${orgId}/${projectId}/settings/keys/${data.id}/`;
+    let controls = [
+      <Link key="edit" to={editUrl} className="btn btn-default btn-sm">
+        <span className="icon icon-settings" />
+      </Link>
+    ];
+    if (access.has('project:write')) {
+      controls.push(
+        <a
+          key="toggle"
+          className="btn btn-default btn-sm"
+          onClick={data.isActive ? this.handleDisable : this.handleEnable}
+          disabled={this.state.loading}>
+          {data.isActive ? t('Disable') : t('Enable')}
+        </a>
+      );
+      controls.push(
+        <a
+          key="remove"
+          className="btn btn-sm btn-default"
+          onClick={this.handleRemove}
+          disabled={this.state.loading}>
+          <span className="icon icon-trash" />
+        </a>
+      );
+    }
+
+    return (
+      <div className={`client-key-item ${!data.isActive ? 'disabled' : ''}`}>
+        <div className="pull-right" style={{marginTop: -10}}>
+          {controls.map((c, n) => <span key={n}> {c}</span>)}
+        </div>
+        <h5>
+          <Link to={editUrl}>{data.label}</Link>
+          {!data.isActive &&
+            <small> <i className="icon icon-ban" /> {t('Disabled')}</small>}
+        </h5>
+
+        <ClippedBox
+          clipHeight={150}
+          defaultClipped={true}
+          btnClassName="btn btn-default btn-sm"
+          btnText={t('Expand')}>
+          <div className="form-group">
+            <label>{t('DSN')}</label>
+            <AutoSelectText className="form-control disabled">
+              {data.dsn.secret}
+            </AutoSelectText>
+          </div>
+
+          <div className="form-group">
+            <label>{t('DSN (Public)')}</label>
+            <AutoSelectText className="form-control disabled">
+              {data.dsn.public}
+            </AutoSelectText>
+            <div className="help-block">
+              {tct('Use your public DSN with browser-based SDKs such as [raven-js].', {
+                'raven-js': <a href="https://github.com/getsentry/raven-js">raven-js</a>
+              })}
+            </div>
+          </div>
+          <div className="form-group">
+            <label>{t('CSP Endpoint')}</label>
+            <AutoSelectText className="form-control disabled">
+              {data.dsn.csp}
+            </AutoSelectText>
+            <div className="help-block">
+              {tct(
+                'Use your CSP endpoint in the [directive] directive in your [header] header.',
+                {
+                  directive: <code>report-uri</code>,
+                  header: <code>Content-Security-Policy</code>
+                }
+              )}
+            </div>
+          </div>
+        </ClippedBox>
+      </div>
+    );
+  }
+});
+
+export default React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      keyList: []
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          keyList: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  handleRemoveKey(data) {
+    this.setState(state => {
+      return {
+        keyList: state.keyList.filter(key => {
+          return key.id !== data.id;
+        })
+      };
+    });
+  },
+
+  handleToggleKey(data, newData) {
+    this.setState(state => {
+      let keyList = state.keyList;
+      keyList.forEach(key => {
+        key.isActive = newData.isActive;
+      });
+      return {keyList: keyList};
+    });
+  },
+
+  onCreateKey() {
+    let {orgId, projectId} = this.props.params;
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
+      method: 'POST',
+      success: (data, _, jqXHR) => {
+        this.setState(state => {
+          return {
+            keyList: [...state.keyList, data]
+          };
+        });
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        IndicatorStore.remove(loadingIndicator);
+        IndicatorStore.add(t('Unable to create new key. Please try again.'), 'error');
+      }
+    });
+  },
+
+  renderBody() {
+    let body;
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.keyList.length > 0) body = this.renderResults();
+    else body = this.renderEmpty();
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('There are no keys active for this project.')}</p>
+      </div>
+    );
+  },
+
+  renderResults() {
+    let {orgId, projectId} = this.props.params;
+    let access = this.getAccess();
+    return (
+      <div className="client-key-list">
+        {this.state.keyList.map(key => {
+          return (
+            <KeyRow
+              access={access}
+              key={key.id}
+              orgId={orgId}
+              projectId={projectId}
+              data={key}
+              onToggle={this.handleToggleKey.bind(this, key)}
+              onRemove={this.handleRemoveKey.bind(this, key)}
+            />
+          );
+        })}
+      </div>
+    );
+  },
+
+  render() {
+    let access = this.getAccess();
+    return (
+      <DocumentTitle title={t('Client Keys')}>
+        <div className="ref-keys">
+          {access.has('project:write') &&
+            <a onClick={this.onCreateKey} className="btn pull-right btn-primary btn-sm">
+              <span className="icon-plus" />&nbsp;{t('Generate New Key')}
+            </a>}
+          <h2>{t('Client Keys')}</h2>
+          <p>
+            To send data to Sentry you will need to configure an SDK with a client key (usually referred to as the
+            {' '}
+            <code>SENTRY_DSN</code>
+            {' '}
+            value). For more information on integrating Sentry with your application take a look at our
+            {' '}
+            <a href="https://docs.sentry.io/">documentation</a>
+            .
+          </p>
+          {this.renderBody()}
+        </div>
+      </DocumentTitle>
+    );
+  }
+});
diff --git a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
index 436e732b28..75dce29fe7 100644
--- a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
@@ -262,7 +262,7 @@ const ProjectSavedSearches = React.createClass({
     // TODO(dcramer): localize when language is final
     return (
       <div>
-        <h1>{t('Saved Searches')}</h1>
+        <h2>{t('Saved Searches')}</h2>
         {this.renderBody()}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 411f3b3501..34daa50e7a 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -143,7 +143,9 @@ const ProjectSettings = React.createClass({
             <ListLink to={`/${orgId}/${projectId}/settings/filters/`}>
               {t('Inbound Filters')}
             </ListLink>
-            <li><a href={`${settingsUrlRoot}/keys/`}>{t('Client Keys')} (DSN)</a></li>
+            <ListLink to={`/${orgId}/${projectId}/settings/keys/`}>
+              {t('Client Keys')} (DSN)
+            </ListLink>
           </ul>
           <h6 className="nav-header">{t('Integrations')}</h6>
           <ul className="nav nav-stacked">
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index ade54274e5..54411bd7b5 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1290,6 +1290,10 @@ div.traceback > ul {
     margin: 0;
     border-top: 1px solid @trim;
 
+    .box-clippable .clip-fade {
+      bottom: 0;
+    }
+
     &.frame-errors {}
 
     &.system-frame { }
@@ -1852,45 +1856,6 @@ div.commands {
   }
 }
 
-.box-clippable {
-  position: relative;
-  margin-left: -20px;
-  margin-right: -20px;
-  padding: 16px 20px 0;
-  border-top: 1px solid #f1f2f3;
-  .transition(all 5s ease-in-out);
-
-  &.revealed {
-    /* For "Show More" animation */
-    max-height: 50000px;
-  }
-
-  &:first-of-type {
-    margin-top: -20px;
-    border: 0;
-  }
-
-  h5 {
-    margin-bottom: 15px;
-  }
-
-  .clip-fade {
-    position: absolute;
-    left: 0;
-    right: 0;
-    bottom: 0;
-    padding: 40px 0 0;
-    #gradient > .vertical(rgba(255,255,255, .15), rgba(255,255,255, 1));
-    text-align: center;
-    border-bottom: 15px solid #fff;
-  }
-
-  &.clipped {
-    max-height: 200px;
-    overflow: hidden;
-  }
-}
-
 .box.errors {
   border-top: 1px solid @alert-danger-border-color !important;
   background: @alert-danger-bg-color;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 019009d88e..53622c4f42 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -2176,6 +2176,45 @@ ul.faces {
   }
 }
 
+.box-clippable {
+  position: relative;
+  margin-left: -20px;
+  margin-right: -20px;
+  padding: 16px 20px 0;
+  border-top: 1px solid #f1f2f3;
+  .transition(all 5s ease-in-out);
+
+  &.revealed {
+    /* For "Show More" animation */
+    max-height: 50000px;
+  }
+
+  &:first-of-type {
+    margin-top: -20px;
+    border: 0;
+  }
+
+  h5 {
+    margin-bottom: 15px;
+  }
+
+  .clip-fade {
+    position: absolute;
+    left: 0;
+    right: 0;
+    bottom: -15px;
+    padding: 40px 0 0;
+    #gradient > .vertical(rgba(255,255,255, .15), rgba(255,255,255, 1));
+    text-align: center;
+    border-bottom: 15px solid #fff;
+  }
+
+  &.clipped {
+    max-height: 200px;
+    overflow: hidden;
+  }
+}
+
 /**
  * Global Messages
  * ============================================================================
diff --git a/src/sentry/templates/sentry/projects/edit_key.html b/src/sentry/templates/sentry/projects/edit_key.html
deleted file mode 100644
index b6b1482103..0000000000
--- a/src/sentry/templates/sentry/projects/edit_key.html
+++ /dev/null
@@ -1,77 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Edit API Key" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-    <div class="page-header">
-        <h2>{% trans "Edit API Key" %}</h2>
-    </div>
-    <form class="form-stacked" action="" method="post">
-        {% csrf_token %}
-
-        {{ form|as_crispy_errors }}
-
-        <div class="box">
-            <div class="box-header">
-              <h3>Details</h3>
-            </div>
-            <div class="box-content with-padding">
-              {{ form.label|as_crispy_field }}
-              <div class="form-group">
-                  <label>{% trans "Created" %}</label>
-                  <div class="controls">
-                      {{ key.date_added|timesince }}
-                  </div>
-              </div>
-            </div>
-        </div>
-
-        <div class="box dsn-credentials">
-            <div class="box-header">
-              <h3>Credentials</h3>
-            </div>
-            <div class="box-content with-padding">
-              <p>{% blocktrans %}Your credentials are bound to public and secret key (though both should be considered semi-secret). Different clients will require different credentials, so make sure you check the documentation before plugging things in.{% endblocktrans %}</p>
-              <div class="form-group">
-                  <label>{% trans "DSN" %}</label>
-                  <div class="controls">
-                      <div class="form-control disabled auto-select">{{ key.dsn_private }}</div>
-                  </div>
-              </div>
-              <div class="form-group">
-                  <label>{% trans "DSN (Public)" %}</label>
-                  <div class="controls">
-                      <div class="form-control disabled auto-select">{{ key.dsn_public }}</div>
-                  </div>
-                  <div class="help-block">{% blocktrans with 'https://github.com/getsentry/raven-js' as link %}Use your public DSN with browser-based clients such as <a href="{{ link }}">raven-js</a>.{% endblocktrans %}</div>
-              </div>
-              <div class="form-group">
-                  <label>{% trans "Public Key" %}</label>
-                  <div class="controls">
-                      <div class="form-control disabled auto-select">{{ key.public_key }}</div>
-                  </div>
-              </div>
-              <div class="form-group">
-                  <label>{% trans "Secret Key" %}</label>
-                  <div class="controls">
-                      <div class="form-control disabled auto-select">{{ key.secret_key }}</div>
-                  </div>
-              </div>
-              <div class="form-group">
-                  <label>{% trans "Project ID" %}</label>
-                  <div class="controls">
-                      <div class="form-control disabled auto-select">{{ key.project_id }}</div>
-                  </div>
-              </div>
-            </div>
-        </div>
-
-        <div class="actions">
-            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </div>
-    </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/projects/keys.html b/src/sentry/templates/sentry/projects/keys.html
deleted file mode 100644
index 6c3627c87a..0000000000
--- a/src/sentry/templates/sentry/projects/keys.html
+++ /dev/null
@@ -1,73 +0,0 @@
-{% extends "sentry/projects/manage.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Client Keys" %} | {{ block.super }}{% endblock %}
-
-{% block main %}
-  {% if ACCESS.project_write %}
-  <form method="post" class="pull-right" action="{% url 'sentry-new-project-key' project.organization.slug project.slug %}">
-  {% csrf_token %}
-  <button type="submit" class="btn btn-primary" style="margin-top: -3px;">{% trans "Generate New Key" %}</button>
-  </form>
-  {% endif %}
-  <h2>{% trans "Client Keys" %}</h2>
-
-  <p>To send data to Sentry you will need to configure an SDK with a client key (usually referred to as the
-    <code>SENTRY_DSN</code> value). For more information on integrating Sentry with your application take
-    a look at our <a href="https://docs.sentry.io">documentation</a>.</p>
-
-    <div class="client-key-list">
-      {% for key in key_list|dictsortreversed:"is_active" %}
-        <div class="client-key-item{% if not key.is_active %} disabled{% endif %}">
-          <div class="pull-right">
-            <a class="btn btn-default btn-sm" href="{% url 'sentry-edit-project-key' project.organization.slug project.slug key.id %}">{% trans "Details" %}</a>
-            {% if ACCESS.project_write %}
-              {% if key.is_active %}
-              <form method="POST" action="{% url 'sentry-disable-project-key' project.organization.slug project.slug key.id %}" style="display:inline">
-                {% csrf_token %}
-                <input type="submit" class="btn btn-default btn-sm" value="{% trans "Disable" %}">
-              </form>
-              {% else %}
-              <form method="POST" action="{% url 'sentry-enable-project-key' project.organization.slug project.slug key.id %}" style="display:inline">
-                {% csrf_token %}
-                <input type="submit" class="btn btn-default btn-sm" value="{% trans "Enable" %}">
-              </form>
-              {% endif %}
-            {% endif %}
-            {% if ACCESS.project_write %}
-              <form method="POST" action="{% url 'sentry-remove-project-key' project.organization.slug project.slug key.id %}" style="display:inline">
-                {% csrf_token %}
-                <input type="submit" class="btn btn-default btn-sm btn-revoke" value="{% trans "Revoke" %}">
-              </form>
-            {% endif %}
-          </div>
-          {% if key.label %}
-            <h5><a href="{% url 'sentry-edit-project-key' project.organization.slug project.slug key.id %}">{{ key.label }}</a>{% if not key.is_active %} <small><i class="icon-ban"></i> Disabled</small>{% endif %}</h5>
-          {% else %}
-            <h5><a href="{% url 'sentry-edit-project-key' project.organization.slug project.slug key.id %}">{{ key.public_key }}</a>{% if not key.is_active %} <small><i class="icon-ban"></i> Disabled</small>{% endif %}</h5>
-          {% endif %}
-
-          <div class="form-group">
-            <label>{% trans "DSN" %}</label>
-            <div class="form-control disabled auto-select">{{ key.dsn_private }}</div>
-          </div>
-
-          <div class="form-group">
-            <label>{% trans "DSN (Public)" %}</label>
-            <div class="form-control disabled auto-select">{{ key.dsn_public }}</div>
-            <div class="help-block">{% blocktrans with 'https://github.com/getsentry/raven-js' as link %}Use your public DSN with browser-based clients such as <a href="{{ link }}">raven-js</a>.{% endblocktrans %}</div>
-          </div>
-
-          {% if organization.flags.early_adopter %}
-          <div class="form-group">
-            <label>{% trans "CSP Endpoint" %}</label>
-            <div class="form-control disabled auto-select">{{ key.csp_endpoint }}</div>
-            <div class="help-block">{% blocktrans %}Use your CSP endpoint in the <code>report-uri</code> directive in your <code>Content-Security-Policy</code> header.{% endblocktrans %}</div>
-          </div>
-          {% endif %}
-        </div>
-      {% endfor %}
-    </div>
-  {% endblock %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 0be6cddbb1..0b4900a3f9 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -237,8 +237,8 @@
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/filters/' project.organization.slug project.slug %}">{% trans "Inbound Filters" %}</a>
     </li>
-    <li{% if page == 'keys' %} class="active"{% endif %}>
-        <a href="{% url 'sentry-manage-project-keys' project.organization.slug project.slug %}">{% trans "Client Keys (DSN)" %}</a>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/keys/' project.organization.slug project.slug %}">{% trans "Client Keys (DSN)" %}</a>
     </li>
   </ul>
   {% with project|get_plugins as plugins %}
diff --git a/src/sentry/web/frontend/create_project_key.py b/src/sentry/web/frontend/create_project_key.py
deleted file mode 100644
index 401e4e2201..0000000000
--- a/src/sentry/web/frontend/create_project_key.py
+++ /dev/null
@@ -1,26 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-
-from sentry.models import AuditLogEntryEvent, ProjectKey
-from sentry.web.frontend.base import ProjectView
-
-
-class CreateProjectKeyView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project):
-        key = ProjectKey.objects.create(
-            project=project,
-        )
-
-        self.create_audit_entry(
-            request,
-            organization=organization,
-            target_object=key.id,
-            event=AuditLogEntryEvent.PROJECTKEY_ADD,
-            data=key.get_audit_log_data(),
-        )
-
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/disable_project_key.py b/src/sentry/web/frontend/disable_project_key.py
deleted file mode 100644
index a624d4d9c5..0000000000
--- a/src/sentry/web/frontend/disable_project_key.py
+++ /dev/null
@@ -1,37 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
-from sentry.web.frontend.base import ProjectView
-
-
-class DisableProjectKeyView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project, key_id):
-        try:
-            key = ProjectKey.objects.get(
-                project=project,
-                id=key_id,
-            )
-        except ProjectKey.DoesNotExist:
-            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-        key.update(status=ProjectKeyStatus.INACTIVE)
-
-        self.create_audit_entry(
-            request,
-            organization=organization,
-            target_object=key.id,
-            event=AuditLogEntryEvent.PROJECTKEY_DISABLE,
-            data=key.get_audit_log_data(),
-        )
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('The API key (%s) was disabled.') % (key.public_key,))
-
-        return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/edit_project_key.py b/src/sentry/web/frontend/edit_project_key.py
deleted file mode 100644
index c99fd5efa3..0000000000
--- a/src/sentry/web/frontend/edit_project_key.py
+++ /dev/null
@@ -1,47 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import AuditLogEntryEvent, ProjectKey
-from sentry.web.forms.projectkeys import EditProjectKeyForm
-from sentry.web.frontend.base import ProjectView
-
-
-class EditProjectKeyView(ProjectView):
-    required_scope = 'project:write'
-
-    def handle(self, request, organization, team, project, key_id):
-        try:
-            key = ProjectKey.objects.get(
-                id=key_id,
-                project=project,
-            )
-        except ProjectKey.DoesNotExist:
-            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-        form = EditProjectKeyForm(request.POST or None, instance=key)
-        if form.is_valid():
-            key = form.save()
-
-            self.create_audit_entry(
-                request,
-                organization=organization,
-                target_object=key.id,
-                event=AuditLogEntryEvent.PROJECTKEY_EDIT,
-                data=key.get_audit_log_data(),
-            )
-
-            messages.add_message(
-                request, messages.SUCCESS,
-                _('Changes to the API key (%s) were saved.') % (key.public_key,))
-            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-        context = {
-            'page': 'keys',
-            'key': key,
-            'form': form,
-        }
-
-        return self.respond('sentry/projects/edit_key.html', context)
diff --git a/src/sentry/web/frontend/enable_project_key.py b/src/sentry/web/frontend/enable_project_key.py
deleted file mode 100644
index 20c2b3aac7..0000000000
--- a/src/sentry/web/frontend/enable_project_key.py
+++ /dev/null
@@ -1,37 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
-from sentry.web.frontend.base import ProjectView
-
-
-class EnableProjectKeyView(ProjectView):
-    required_scope = 'project:write'
-
-    def post(self, request, organization, team, project, key_id):
-        try:
-            key = ProjectKey.objects.get(
-                project=project,
-                id=key_id,
-            )
-        except ProjectKey.DoesNotExist:
-            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-        key.update(status=ProjectKeyStatus.ACTIVE)
-
-        self.create_audit_entry(
-            request,
-            organization=organization,
-            target_object=key.id,
-            event=AuditLogEntryEvent.PROJECTKEY_ENABLE,
-            data=key.get_audit_log_data(),
-        )
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('The API key (%s) was enabled.') % (key.public_key,))
-
-        return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/frontend/project_keys.py b/src/sentry/web/frontend/project_keys.py
deleted file mode 100644
index 252cb4bda1..0000000000
--- a/src/sentry/web/frontend/project_keys.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import ProjectKey
-from sentry.web.frontend.base import ProjectView
-
-
-class ProjectKeysView(ProjectView):
-    def get(self, request, organization, team, project):
-        key_list = list(ProjectKey.objects.filter(
-            project=project,
-        ).order_by('-id'))
-
-        for key in key_list:
-            key.project = project
-
-        context = {
-            'page': 'keys',
-            'key_list': key_list,
-        }
-
-        return self.respond('sentry/projects/keys.html', context)
diff --git a/src/sentry/web/frontend/remove_project_key.py b/src/sentry/web/frontend/remove_project_key.py
deleted file mode 100644
index adb5ff5601..0000000000
--- a/src/sentry/web/frontend/remove_project_key.py
+++ /dev/null
@@ -1,39 +0,0 @@
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import AuditLogEntryEvent, ProjectKey
-from sentry.web.frontend.base import ProjectView
-
-
-class RemoveProjectKeyView(ProjectView):
-    required_scope = 'project:write'
-
-    def handle(self, request, organization, team, project, key_id):
-        try:
-            key = ProjectKey.objects.get(
-                id=key_id,
-                project=project,
-            )
-        except ProjectKey.DoesNotExist:
-            return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
-
-        data = key.get_audit_log_data()
-
-        key.delete()
-
-        self.create_audit_entry(
-            request,
-            organization=organization,
-            target_object=key.id,
-            event=AuditLogEntryEvent.PROJECTKEY_REMOVE,
-            data=data,
-        )
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('The API key (%s) was revoked.') % (key.public_key,))
-
-        return self.redirect(reverse('sentry-manage-project-keys', args=[project.organization.slug, project.slug]))
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index b530064677..975c8d752f 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -30,11 +30,7 @@ from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_organization_member import \
     CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
-from sentry.web.frontend.create_project_key import CreateProjectKeyView
 from sentry.web.frontend.create_team import CreateTeamView
-from sentry.web.frontend.disable_project_key import DisableProjectKeyView
-from sentry.web.frontend.edit_project_key import EditProjectKeyView
-from sentry.web.frontend.enable_project_key import EnableProjectKeyView
 from sentry.web.frontend.error_page_embed import ErrorPageEmbedView
 from sentry.web.frontend.group_event_json import GroupEventJsonView
 from sentry.web.frontend.group_plugin_action import GroupPluginActionView
@@ -54,7 +50,6 @@ from sentry.web.frontend.organization_member_settings import \
 from sentry.web.frontend.out import OutView
 from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
-from sentry.web.frontend.project_keys import ProjectKeysView
 from sentry.web.frontend.project_plugin_configure import \
     ProjectPluginConfigureView
 from sentry.web.frontend.project_plugin_disable import ProjectPluginDisableView
@@ -73,7 +68,6 @@ from sentry.web.frontend.remove_account import RemoveAccountView
 from sentry.web.frontend.remove_organization import RemoveOrganizationView
 from sentry.web.frontend.restore_organization import RestoreOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
-from sentry.web.frontend.remove_project_key import RemoveProjectKeyView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.sudo import SudoView
 from sentry.web.frontend.unsubscribe_issue_notifications import \
@@ -307,25 +301,6 @@ urlpatterns += patterns(
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/release-tracking/$',
         ProjectReleaseTrackingView.as_view(),
         name='sentry-project-release-tracking'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/$',
-        ProjectKeysView.as_view(),
-        name='sentry-manage-project-keys'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/new/$',
-        CreateProjectKeyView.as_view(),
-        name='sentry-new-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/edit/$',
-        EditProjectKeyView.as_view(),
-        name='sentry-edit-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/remove/$',
-        RemoveProjectKeyView.as_view(),
-        name='sentry-remove-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/disable/$',
-        DisableProjectKeyView.as_view(),
-        name='sentry-disable-project-key'),
-    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/keys/(?P<key_id>\d+)/enable/$',
-        EnableProjectKeyView.as_view(),
-        name='sentry-enable-project-key'),
-
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/plugins/$',
         ProjectPluginsView.as_view(),
         name='sentry-manage-project-plugins'),
diff --git a/tests/acceptance/test_project_keys.py b/tests/acceptance/test_project_keys.py
new file mode 100644
index 0000000000..09445b86e9
--- /dev/null
+++ b/tests/acceptance/test_project_keys.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+from sentry.models import ProjectKey
+from sentry.testutils import AcceptanceTestCase
+
+
+class ProjectKeysTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ProjectKeysTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+
+        self.login_as(self.user)
+        self.path = '/{}/{}/settings/keys/'.format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('project keys')
+        self.browser.wait_until('.ref-keys')
+
+
+class ProjectKeyDetailsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ProjectKeyDetailsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Mariachi Band'
+        )
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+
+        self.pk = ProjectKey.objects.create(project=self.project)
+
+        self.login_as(self.user)
+        self.path = '/{}/{}/settings/keys/{}/'.format(
+            self.org.slug, self.project.slug, self.pk.public_key,
+        )
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not('.loading-indicator')
+        self.browser.snapshot('project key details')
+        self.browser.wait_until('.ref-key-details')
diff --git a/tests/sentry/web/frontend/test_create_project_key.py b/tests/sentry/web/frontend/test_create_project_key.py
deleted file mode 100644
index 312f80e6fe..0000000000
--- a/tests/sentry/web/frontend/test_create_project_key.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import ProjectKey
-from sentry.testutils import TestCase
-
-
-class NewProjectKeyTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-new-project-key', args=[self.organization.slug, self.project.slug])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_generates_new_key_and_redirects(self):
-        keycount = ProjectKey.objects.filter(project=self.project).count()
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        newkeycount = ProjectKey.objects.filter(project=self.project).count()
-        assert newkeycount == keycount + 1
diff --git a/tests/sentry/web/frontend/test_disable_project_key.py b/tests/sentry/web/frontend/test_disable_project_key.py
deleted file mode 100644
index d504a7b771..0000000000
--- a/tests/sentry/web/frontend/test_disable_project_key.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import ProjectKey, ProjectKeyStatus
-from sentry.testutils import TestCase
-
-
-class DisableProjectKeyTest(TestCase):
-    def setUp(self):
-        super(DisableProjectKeyTest, self).setUp()
-        self.key = ProjectKey.objects.create(
-            project=self.project,
-            status=ProjectKeyStatus.ACTIVE,
-        )
-
-    @fixture
-    def path(self):
-        return reverse('sentry-disable-project-key', args=[self.organization.slug, self.project.slug, self.key.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_does_enable(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        key = ProjectKey.objects.get(id=self.key.id)
-        assert key.status == ProjectKeyStatus.INACTIVE
diff --git a/tests/sentry/web/frontend/test_enable_project_key.py b/tests/sentry/web/frontend/test_enable_project_key.py
deleted file mode 100644
index 7b114cfd76..0000000000
--- a/tests/sentry/web/frontend/test_enable_project_key.py
+++ /dev/null
@@ -1,31 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import ProjectKey, ProjectKeyStatus
-from sentry.testutils import TestCase
-
-
-class EnableProjectKeyTest(TestCase):
-    def setUp(self):
-        super(EnableProjectKeyTest, self).setUp()
-        self.key = ProjectKey.objects.create(
-            project=self.project,
-            status=ProjectKeyStatus.INACTIVE,
-        )
-
-    @fixture
-    def path(self):
-        return reverse('sentry-enable-project-key', args=[self.organization.slug, self.project.slug, self.key.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_does_enable(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        key = ProjectKey.objects.get(id=self.key.id)
-        assert key.status == ProjectKeyStatus.ACTIVE
diff --git a/tests/sentry/web/frontend/test_project_keys.py b/tests/sentry/web/frontend/test_project_keys.py
deleted file mode 100644
index 3d03bb8da3..0000000000
--- a/tests/sentry/web/frontend/test_project_keys.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-
-
-class ManageProjectKeysTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-project-keys', args=[self.organization.slug, self.project.slug])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_renders_with_required_context(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/projects/keys.html')
-        assert 'key_list' in resp.context
diff --git a/tests/sentry/web/frontend/test_remove_project_key.py b/tests/sentry/web/frontend/test_remove_project_key.py
deleted file mode 100644
index 01c6b0eadb..0000000000
--- a/tests/sentry/web/frontend/test_remove_project_key.py
+++ /dev/null
@@ -1,27 +0,0 @@
-from __future__ import absolute_import, print_function
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import ProjectKey
-from sentry.testutils import TestCase
-
-
-class RemoveProjectKeyTest(TestCase):
-    def setUp(self):
-        super(RemoveProjectKeyTest, self).setUp()
-        self.key = ProjectKey.objects.create(project=self.project)
-
-    @fixture
-    def path(self):
-        return reverse('sentry-remove-project-key', args=[self.organization.slug, self.project.slug, self.key.id])
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_removes_key_and_redirects(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        assert not ProjectKey.objects.filter(id=self.key.id).exists()
