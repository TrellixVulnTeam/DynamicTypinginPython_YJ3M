commit 2a01f263098b4d46c90fafff029cd5b05d1ac772
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 10 21:37:51 2012 -0800

    Improve team selection on manage project page

diff --git a/src/sentry/templates/sentry/account/appearance.html b/src/sentry/templates/sentry/account/appearance.html
index ca4f65be6d..83bf7fb143 100644
--- a/src/sentry/templates/sentry/account/appearance.html
+++ b/src/sentry/templates/sentry/account/appearance.html
@@ -45,7 +45,7 @@
     </form>
 
     <script>
-    $('#appearance_form select').select2({
+    $('.body select').select2({
         width: 'element'
     });
     </script>
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 52c76da91e..8da6bfa41c 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -101,6 +101,11 @@
         {% endif %}
     {% endblock %}
     </section>
+    <script>
+    $('.body select').select2({
+        width: 'element'
+    });
+    </script>
 {% endblock %}
 
 {% block sidebar %}
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 874e53a976..235663f4c4 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -11,7 +11,7 @@ from django.forms.widgets import RadioFieldRenderer, TextInput, Textarea
 from django.forms import CharField, ValidationError
 from django.utils.encoding import force_unicode
 from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
+from django.utils.translation import ugettext_lazy as _, ungettext
 
 
 class RadioFieldRenderer(RadioFieldRenderer):
@@ -78,3 +78,39 @@ class OriginsField(CharField):
             return False
 
         return True
+
+
+def get_team_label(team):
+    member_count = team.member_set.count()
+    project_count = team.project_set.count()
+
+    if member_count > 1 and project_count:
+        label = _('%(team)s (%(members)s, %(projects)s)')
+    elif project_count:
+        label = _('%(team)s (%(projects)s)')
+    else:
+        label = _('%(team)s (%(members)s)')
+
+    return label % dict(
+        team=team.name,
+        members=ungettext('%d member', '%d members', member_count) % (member_count,),
+        projects=ungettext('%d project', '%d projects', project_count) % (project_count,),
+    )
+
+
+def get_team_choices(team_list, default=None):
+    sorted_team_list = sorted(team_list.itervalues(), key=lambda x: x.name)
+
+    choices = []
+    for team in sorted_team_list:
+        # TODO: optimize queries
+        choices.append(
+            (team.id, get_team_label(team))
+        )
+
+    if default is None:
+        choices.insert(0, (-1, '-' * 8))
+    elif default not in sorted_team_list:
+        choices.insert(0, (team.id, get_team_label(default)))
+
+    return choices
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index 893f53bab4..33e60d4759 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -12,7 +12,8 @@ from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
 from sentry.models import Project, ProjectOption
 from sentry.permissions import can_set_public_projects
-from sentry.web.forms.fields import RadioFieldRenderer, UserField, OriginsField
+from sentry.web.forms.fields import RadioFieldRenderer, UserField, OriginsField, \
+  get_team_choices
 
 
 class ProjectTagsForm(forms.Form):
@@ -93,7 +94,7 @@ class RemoveProjectForm(forms.Form):
 
 class EditProjectForm(forms.ModelForm):
     public = forms.BooleanField(required=False, help_text=_('Allow anyone (even anonymous users) to view this project'))
-    team = forms.ChoiceField(choices=())
+    team = forms.TypedChoiceField(choices=(), coerce=int)
     origins = OriginsField(required=False)
 
     class Meta:
@@ -103,18 +104,14 @@ class EditProjectForm(forms.ModelForm):
     def __init__(self, request, team_list, data, instance, *args, **kwargs):
         super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
         self.team_list = dict((t.pk, t) for t in team_list.itervalues())
+
         if not can_set_public_projects(request.user):
             del self.fields['public']
         if len(team_list) == 1 and instance.team == team_list.values()[0]:
             del self.fields['team']
         else:
-            team_choices = [(t.pk, t) for t in sorted(self.team_list.values(), key=lambda x: x.name)]
-            if not instance.team:
-                team_choices.insert(0, ('', '-' * 8))
-            elif (instance.team.pk, instance.team) not in team_choices:
-                team_choices.insert(1, (instance.team.pk, instance.team))
-            self.fields['team'].choices = team_choices
-            self.fields['team'].widget.choices = team_choices
+            self.fields['team'].choices = get_team_choices(self.team_list, instance.team)
+            self.fields['team'].widget.choices = self.fields['team'].choices
 
     def clean_team(self):
         value = self.cleaned_data.get('team')
diff --git a/src/sentry/web/forms/teams.py b/src/sentry/web/forms/teams.py
index cfa9e67296..0a1f79699b 100644
--- a/src/sentry/web/forms/teams.py
+++ b/src/sentry/web/forms/teams.py
@@ -8,8 +8,8 @@ sentry.web.forms.teams
 from django import forms
 
 from sentry.models import Team, TeamMember, PendingTeamMember
-from sentry.web.forms.fields import UserField
-from django.utils.translation import ugettext_lazy as _, ungettext
+from sentry.web.forms.fields import UserField, get_team_choices
+from django.utils.translation import ugettext_lazy as _
 
 
 class RemoveTeamForm(forms.Form):
@@ -52,29 +52,7 @@ class SelectTeamForm(forms.Form):
     def __init__(self, team_list, data, *args, **kwargs):
         super(SelectTeamForm, self).__init__(data=data, *args, **kwargs)
         self.team_list = dict((t.pk, t) for t in team_list.itervalues())
-        choices = []
-        for team in self.team_list.itervalues():
-            # TODO: optimize queries
-            member_count = team.member_set.count()
-            project_count = team.project_set.count()
-
-            if member_count > 1 and project_count:
-                label = _('%(team)s (%(members)s, %(projects)s)')
-            elif project_count:
-                label = _('%(team)s (%(projects)s)')
-            else:
-                label = _('%(team)s (%(members)s)')
-
-            choices.append(
-                (team.id, label % dict(
-                    team=team.name,
-                    members=ungettext('%d member', '%d members', member_count) % (member_count,),
-                    projects=ungettext('%d project', '%d projects', project_count) % (project_count,),
-                ))
-            )
-
-        choices.insert(0, (-1, '-' * 8))
-        self.fields['team'].choices = choices
+        self.fields['team'].choices = get_team_choices(self.team_list)
         self.fields['team'].widget.choices = self.fields['team'].choices
 
     def clean_team(self):
