commit 6b22568ce6864d3fdf4e7ae1a331a484cd323631
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 25 13:53:53 2012 -0800

    Improve CORS support to better handle error conditions

diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 6514d5ba7a..6916daec50 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -84,8 +84,5 @@ def apply_access_control_headers(response, origin):
     """
     if origin:
         response['Access-Control-Allow-Origin'] = origin
-        response['Access-Control-Allow-Headers'] = 'X-Sentry-Auth, X-Requested-With, Origin, Accept, Content-Type, ' \
-            'Authentication'
-        response['Access-Control-Allow-Methods'] = 'HEAD, POST, OPTIONS'
 
     return response
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 73651404c7..136a1583e5 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -106,9 +106,17 @@ class APIView(BaseView):
     @csrf_exempt
     def dispatch(self, request, project_id=None, *args, **kwargs):
         response = self._dispatch(request, project_id=project_id, *args, **kwargs)
-        # Set X-Sentry-Error as in many cases it is easier to inspect the headers
         if response.status_code != 200:
+            # Set X-Sentry-Error as in many cases it is easier to inspect the headers
             response['X-Sentry-Error'] = response.content[:200]  # safety net on content length
+
+            # We allow all origins on errors
+            response['Access-Control-Allow-Origin'] = '*'
+
+        response['Access-Control-Allow-Headers'] = 'X-Sentry-Auth, X-Requested-With, Origin, Accept, Content-Type, ' \
+            'Authentication'
+        response['Access-Control-Allow-Methods'] = ', '.join(self._allowed_methods())
+
         return response
 
     def _dispatch(self, request, project_id=None, *args, **kwargs):
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 0907e26561..3113986786 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -38,10 +38,6 @@ class AccessControlTestCase(TestCase):
             response = apply_access_control_headers(HttpResponse(), None)
             self.assertEqual(response.get('Access-Control-Allow-Origin', None),
                              None)
-            self.assertEqual(response.get('Access-Control-Allow-Headers', None),
-                             None)
-            self.assertEqual(response.get('Access-Control-Allow-Methods', None),
-                             None)
 
     def test_allow_origin(self):
         with self.Settings(SENTRY_ALLOW_ORIGIN="http://foo.example"):
@@ -49,19 +45,6 @@ class AccessControlTestCase(TestCase):
             self.assertEqual(response.get('Access-Control-Allow-Origin', None),
                              "http://foo.example")
 
-            headers = response.get('Access-Control-Allow-Headers', None)
-            self.assertNotEquals(headers, None)
-            headers = headers.split(', ')
-            self.assertIn('X-Sentry-Auth', headers)
-            self.assertIn('Authentication', headers)
-
-            methods = response.get('Access-Control-Allow-Methods', None)
-            self.assertNotEquals(methods, None)
-            methods = methods.split(', ')
-            self.assertIn('POST', methods)
-            self.assertIn('HEAD', methods)
-            self.assertIn('OPTIONS', methods)
-
 
 class IsValidOriginTestCase(TestCase):
 
