commit a488047351ea9dc14746b813d31970a798092190
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Jun 16 23:04:50 2016 +0200

    Added multi device support to U2F

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index b04e313766..1e5b8854c7 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import
 
 import os
 import hmac
+import time
 import base64
 import hashlib
 
@@ -28,6 +29,7 @@ from sentry.db.models import BaseManager, BaseModel, BoundedAutoField, \
 from sentry.utils.decorators import classproperty
 from sentry.utils.otp import generate_secret_key, TOTP
 from sentry.utils.sms import send_sms, sms_available
+from sentry.utils.dates import to_datetime
 
 
 class ActivationResult(object):
@@ -165,6 +167,7 @@ class AuthenticatorInterface(object):
     configure_button = _('Info')
     remove_button = _('Remove')
     is_available = True
+    allow_multi_enrollment = False
 
     def __init__(self, authenticator=None):
         if authenticator is None:
@@ -206,6 +209,9 @@ class AuthenticatorInterface(object):
             return self.authenticator.config
         rv = getattr(self, '_unbound_config', None)
         if rv is None:
+            # Prevent bad recursion if stuff wants to access the default
+            # config
+            self._unbound_config = {}
             rv = self._unbound_config = self.generate_new_config()
         return rv
 
@@ -226,13 +232,17 @@ class AuthenticatorInterface(object):
         """Invoked to enroll a user for this interface.  If already enrolled
         an error is raised.
         """
-        if self.authenticator is not None:
-            raise RuntimeError('Already enrolled')
-        self.authenticator = Authenticator.objects.create(
-            user=user,
-            type=self.type,
-            config=self.config,
-        )
+        if self.authenticator is None:
+            self.authenticator = Authenticator.objects.create(
+                user=user,
+                type=self.type,
+                config=self.config,
+            )
+        else:
+            if not self.allow_multi_enrollment:
+                raise RuntimeError('Already enrolled')
+            self.authenticator.config = self.config
+            self.authenticator.save()
 
     def validate_otp(self, otp):
         """This method is invoked for an OTP response and has to return
@@ -414,12 +424,14 @@ class SmsInterface(OtpMixin, AuthenticatorInterface):
 class U2fInterface(AuthenticatorInterface):
     type = 3
     interface_id = 'u2f'
+    configure_button = _('Configure')
     name = _('U2F (Universal 2nd Factor)')
     description = _('Authenticate with a U2F hardware device. This is a '
                     'device like a Yubikey or something similar which '
                     'supports FIDO\'s U2F specification. This also requires '
                     'a browser which supports this system (like Google '
                     'Chrome).')
+    allow_multi_enrollment = True
 
     @classproperty
     def u2f_app_id(cls):
@@ -437,46 +449,59 @@ class U2fInterface(AuthenticatorInterface):
             app_id.startswith('https://')
 
     def generate_new_config(self):
-        return {
-            'enrollment': dict(u2f.start_register(self.u2f_app_id, [])),
-        }
+        return {}
+
+    def start_enrollment(self):
+        return dict(u2f.start_register(self.u2f_app_id,
+                                       self.get_u2f_devices()))
+
+    def get_u2f_devices(self):
+        rv = []
+        for data in self.config.get('devices') or ():
+            rv.append(u2f_jsapi.DeviceRegistration(data['binding']))
+        return rv
+
+    def remove_u2f_device(self, key):
+        """Removes a U2F device but never removes the last one.  This returns
+        False if the last device would be removed.
+        """
+        devices = [x for x in self.config.get('devices') or ()
+                   if x['binding']['keyHandle'] != key]
+        if devices:
+            self.config['devices'] = devices
+            return True
+        return False
+
+    def get_registered_devices(self):
+        rv = []
+        for device in self.config.get('devices') or ():
+            rv.append({
+                'timestamp': to_datetime(device['ts']),
+                'name': device['name'],
+                'key_handle': device['binding']['keyHandle'],
+                'app_id': device['binding']['appId'],
+            })
+        rv.sort(key=lambda x: x['name'])
+        return rv
 
-    def _get_enrollment_data(self):
-        return self.config.get('enrollment')
-
-    def _set_enrollment_data(self, value):
-        if 'device' in self.config:
-            raise RuntimeError('Cannot set enrollment data if interface is '
-                               'already enrolled.')
-        self.config['enrollment'] = value
-
-    enrollment_data = property(_get_enrollment_data, _set_enrollment_data)
-    del _get_enrollment_data, _set_enrollment_data
-
-    def get_u2f_device(self):
-        device = self.config.get('device')
-        if device is None:
-            raise RuntimeError('This authenticator is not enrolled.')
-        return u2f_jsapi.DeviceRegistration(device)
-
-    def try_enroll(self, response_data):
-        # XXX: handle error
-        enrollment_data = self.config.get('enrollment')
-        if enrollment_data is None:
-            raise RuntimeError('This authenticator is not in a state that '
-                               'permits user enrollment.')
+    def try_enroll(self, enrollment_data, response_data, device_name=None):
         binding, cert = u2f.complete_register(enrollment_data, response_data,
                                               self.u2f_facets)
-        self.config['device'] = dict(binding)
+        devices = self.config.setdefault('devices', [])
+        devices.append({
+            'name': device_name or 'Security Key',
+            'ts': int(time.time()),
+            'binding': dict(binding),
+        })
 
     def activate(self, request):
         return ActivationChallengeResult(
-            challenge=dict(u2f.start_authenticate([self.get_u2f_device()])),
+            challenge=dict(u2f.start_authenticate(self.get_u2f_devices())),
         )
 
     def validate_response(self, request, challenge, response):
         try:
-            counter, touch = u2f.verify_authenticate([self.get_u2f_device()],
+            counter, touch = u2f.verify_authenticate(self.get_u2f_devices(),
                                                      challenge, response,
                                                      self.u2f_facets)
         except (InvalidSignature, InvalidKey, StopIteration):
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index 8c1e847db0..3f6374b78f 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -23,6 +23,7 @@ const U2fInterface = React.createClass({
       formElement: null,
       challengeElement: null,
       hasBeenTapped: false,
+      deviceFailure: null,
       responseElement: null
     };
   },
@@ -39,6 +40,15 @@ const U2fInterface = React.createClass({
     });
   },
 
+  onTryAgain() {
+    this.setState({
+      hasBeenTapped: false,
+      deviceFailure: null,
+    }, () => {
+      this.invokeU2fFlow();
+    });
+  },
+
   invokeU2fFlow() {
     let promise;
     if (this.props.flowMode === 'sign') {
@@ -58,6 +68,22 @@ const U2fInterface = React.createClass({
           this.state.formElement.submit();
         }
       });
+    })
+    .catch((err) => {
+      let failure = 'DEVICE_ERROR';
+      if (err.metaData.type === 'DEVICE_INELIGIBLE') {
+        if (this.props.flowMode === 'enroll') {
+          failure = 'DUPLICATE_DEVICE';
+        } else {
+          failure = 'UNKNOWN_DEVICE';
+        }
+      } else if (err.metaData.type === 'BAD_REQUEST') {
+        failure = 'BAD_APPID';
+      }
+      this.setState({
+        deviceFailure: failure,
+        hasBeenTapped: false,
+      });
     });
   },
 
@@ -94,10 +120,37 @@ const U2fInterface = React.createClass({
     );
   },
 
+  renderFailure() {
+    let {deviceFailure} = this.state;
+    return (
+      <div className="failure-message">
+        <p><strong>{t('Error: ')}</strong> {{
+          'DEVICE_ERROR': t('Your U2F device reported an error.'),
+          'DUPLICATE_DEVICE': t('This device is already in use.'),
+          'UNKNOWN_DEVICE': t('The device you used for sign-in is unknown.'),
+          'BAD_APPID': t('The Sentry server administrator modified the ' +
+                         'device registrations. You need to remove and ' +
+                         're-add the device to continue.'),
+        }[deviceFailure]}</p>
+        <p><a onClick={this.onTryAgain} className="btn btn-primary">{t('Try Again')}</a></p>
+      </div>
+    );
+  },
+
+  renderBody() {
+    if (this.state.deviceFailure) {
+      return this.renderFailure();
+    } else {
+      return this.props.children;
+    }
+  },
+
   renderPrompt() {
     return (
-      <div className={'u2f-box' + (this.state.hasBeenTapped ? ' tapped' : '')}>
+      <div className={'u2f-box' + (this.state.hasBeenTapped ? ' tapped' : '')
+          + (this.state.deviceFailure ? ' device-failure' : '')}>
         <div className="device-animation-frame">
+          <div className="device-failed"/>
           <div className="device-animation"/>
           <div className="loading-dots">
             <span className="dot" />
@@ -108,7 +161,7 @@ const U2fInterface = React.createClass({
         <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
         <input type="hidden" name="response" ref={this.bindResponseElement}/>
         <div className="inner">
-          {this.props.children}
+          {this.renderBody()}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/less/auth.less b/src/sentry/static/sentry/less/auth.less
index 604d436c81..c27b413392 100644
--- a/src/sentry/static/sentry/less/auth.less
+++ b/src/sentry/static/sentry/less/auth.less
@@ -190,6 +190,7 @@ section.org-login {
 }
 
 div.u2f-box {
+  position: relative;
   background: @white-dark;
   padding: 20px;
   text-align: center;
@@ -219,7 +220,7 @@ div.u2f-box {
       display: inline-block;
       width: 14px;
       height: 14px;
-      background: @purple;
+      background: @blue;
       border-radius: 50%;
       margin-right: 4px;
 
@@ -251,6 +252,22 @@ div.u2f-box {
     .transition(opacity .3s);
   }
 
+  div.device-failed {
+    display: none;
+    position: absolute;
+    top: 35%;
+    left: 50%;
+    width: 100px;
+    text-align: center;
+    margin-left: -50px;
+    &:after {
+      content: ":-(";
+    }
+    font-size: 46px;
+    font-weight: bold;
+    color: @red;
+  }
+
   div.inner {
     margin: 0 auto;
     padding-top: 20px;
@@ -261,17 +278,29 @@ div.u2f-box {
     }
   }
 
+  div.failure-message {
+    p {
+      margin: 0 0 10px 0;
+    }
+  }
+
   &.tapped {
     .loading-dots {
       opacity: 1;
       top: 50%;
+      display: block;
     }
     .device-animation {
       -webkit-filter: blur(4px);
       filter: blur(4px);
-      opacity: .4;
     }
-    .loading-dots {
+  }
+
+  &.device-failure {
+    .device-animation {
+      visibility: hidden;
+    }
+    .device-failed {
       display: block;
     }
   }
diff --git a/src/sentry/templates/sentry/account/twofactor/configure.html b/src/sentry/templates/sentry/account/twofactor/configure.html
index 38891af132..59ff536184 100644
--- a/src/sentry/templates/sentry/account/twofactor/configure.html
+++ b/src/sentry/templates/sentry/account/twofactor/configure.html
@@ -27,7 +27,7 @@
   {% endblock %}
 
   <fieldset class="form-actions">
-    <form action="" method="post" style="display: inline">
+    <form action="" method="post" id="twofactor-form" style="display: inline">
       {% csrf_token %}
       {% block twofactor_buttons %}
         {% if not auth.is_enrolled %}
diff --git a/src/sentry/templates/sentry/account/twofactor/configure_u2f.html b/src/sentry/templates/sentry/account/twofactor/configure_u2f.html
new file mode 100644
index 0000000000..0648758d90
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/configure_u2f.html
@@ -0,0 +1,33 @@
+{% extends "sentry/account/twofactor/configure.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_info %}
+  {{ block.super }}
+
+  <input type=hidden name="key_handle_to_delete">
+
+  {% with auth.get_registered_devices as devices %}
+    {% if devices %}
+      <h3>Registered Devices</h3>
+      <ul class="registered-devices">
+        {% for device in devices %}
+          <li><strong>{{ device.name }}</strong>, added on {{ device.timestamp|date:"N j, Y, P e" }}
+            <form action="" method=post style="display: inline">
+              {% csrf_token %}
+              <input type=hidden name="key_handle" value="{{ device.key_handle }}">
+              <button type="submit" name="remove"
+                class="btn btn-default btn-sm"><span class="icon-trash"></span></button>
+            </form>
+        {% endfor %}
+      </ul>
+    {% endif %}
+  {% endwith %}
+{% endblock %}
+{% block twofactor_buttons %}
+  {{ block.super }}
+  {% if auth.is_enrolled %}
+    <button type="submit" name="enroll" class="btn btn-default">{% trans "Add Another Device" %}</button>
+  {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html b/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
index f34d5ca03b..f422542ff9 100644
--- a/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
+++ b/src/sentry/templates/sentry/account/twofactor/enroll_u2f.html
@@ -7,6 +7,9 @@
 {% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
 {% block twofactor_body %}
   <form action="" method="post">
+    {% for field in u2f_form %}
+      {{ field|as_crispy_field }}
+    {% endfor %}
     <div id="u2f-enrollment"></div>
     {% csrf_token %}
     <fieldset class="form-actions">
@@ -18,7 +21,7 @@
   </form>
   <script>
     ReactDOM.render(React.createElement(Sentry.U2fEnrollment, {
-      enrollmentData: {{ auth.enrollment_data|to_json|safe }}
+      enrollmentData: {{ enrollment_data|to_json|safe }}
     }), document.getElementById('u2f-enrollment'));
   </script>
 {% endblock %}
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index 929b832b15..d0c06bb2bc 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -26,6 +26,13 @@ class SmsForm(forms.Form):
     )
 
 
+class U2fForm(forms.Form):
+    device_name = forms.CharField(
+        label=_('Device name'), max_length=60, required=False,
+        initial='Security Key',
+    )
+
+
 class TwoFactorSettingsView(BaseView):
     interface_id = None
 
@@ -40,8 +47,6 @@ class TwoFactorSettingsView(BaseView):
                 request.user, self.interface_id)
         except LookupError:
             raise Http404
-        if 'remove' in request.POST:
-            return self.remove(request, interface)
         return self.configure(request, interface)
 
     def make_context(self, request, interface):
@@ -105,6 +110,8 @@ class TwoFactorSettingsView(BaseView):
         return HttpResponseRedirect(next)
 
     def configure(self, request, interface):
+        if 'remove' in request.POST:
+            return self.remove(request, interface)
         if 'enroll' in request.POST or \
            request.GET.get('enroll') == 'yes':
             return self.enroll(request, interface,
@@ -193,16 +200,39 @@ class SmsSettingsView(TwoFactorSettingsView):
 class U2fSettingsView(TwoFactorSettingsView):
     interface_id = 'u2f'
 
+    def configure(self, request, interface):
+        # Try to remove a key handle.  If this returns `False` it means we
+        # are about to remove the last key handle.  In that case just
+        # bubble through to the configure page which will pick up the
+        # 'remove' in the form and bring up the remove screen for the
+        # entire authentication method.
+        key_handle = request.POST.get('key_handle')
+        if key_handle and 'remove' in request.POST and \
+           interface.remove_u2f_device(key_handle):
+            interface.authenticator.save()
+            return HttpResponseRedirect(request.path)
+
+        return TwoFactorSettingsView.configure(self, request, interface)
+
     def enroll(self, request, interface, insecure=False):
+        u2f_form = U2fForm()
+
         challenge = request.POST.get('challenge')
         if challenge:
-            interface.enrollment_data = json.loads(challenge)
+            enrollment_data = json.loads(challenge)
+        else:
+            enrollment_data = interface.start_enrollment()
 
         response = request.POST.get('response')
         if response:
-            interface.try_enroll(json.loads(response))
-            return TwoFactorSettingsView.enroll(self, request, interface)
+            u2f_form = U2fForm(request.POST)
+            if u2f_form.is_valid():
+                interface.try_enroll(enrollment_data, json.loads(response),
+                                     u2f_form.cleaned_data['device_name'])
+                return TwoFactorSettingsView.enroll(self, request, interface)
 
         context = self.make_context(request, interface)
+        context['enrollment_data'] = enrollment_data
+        context['u2f_form'] = u2f_form
         return render_to_response('sentry/account/twofactor/enroll_u2f.html',
                                   context, request)
