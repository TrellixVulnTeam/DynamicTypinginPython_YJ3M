commit 9703b49d031d15233ab60a335f28eb35634efc9c
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 25 15:39:54 2014 -0800

    Update project settings for org constraints

diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 5e5a1ced5a..d717ea1cb5 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -9,8 +9,7 @@ from __future__ import absolute_import
 
 import six
 
-from django.core.validators import URLValidator
-from django.forms.widgets import RadioFieldRenderer, TextInput, Textarea, Widget
+from django.forms.widgets import RadioFieldRenderer, TextInput, Widget
 from django.forms.util import flatatt
 from django.forms import Field, CharField, IntegerField, ValidationError
 from django.utils.encoding import force_unicode
@@ -20,9 +19,6 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import User
 
-# Special case origins that don't fit the normal regex pattern, but are valid
-WHITELIST_ORIGINS = ('*', 'localhost')
-
 
 class RangeInput(TextInput):
     input_type = 'range'
@@ -75,42 +71,6 @@ class RangeField(IntegerField):
         return attrs
 
 
-class OriginsField(CharField):
-    _url_validator = URLValidator()
-    widget = Textarea(
-        attrs={'placeholder': mark_safe(_('e.g. example.com or https://example.com')), 'class': 'span8'},
-    )
-
-    def clean(self, value):
-        if not value:
-            return []
-        values = filter(bool, (v.strip() for v in value.split('\n')))
-        for value in values:
-            if not self.is_valid_origin(value):
-                raise ValidationError('%r is not an acceptable value' % value)
-        return values
-
-    def is_valid_origin(self, value):
-        if value in WHITELIST_ORIGINS:
-            return True
-
-        if '://' in value:
-            # URLValidator will raise a forms.ValidationError itself
-            self._url_validator(value)
-            return True
-
-        # ports are not supported on matching expressions (yet)
-        if ':' in value:
-            return False
-
-        # no .com's
-        parts = filter(bool, value.split('.'))
-        if len(parts) < 2:
-            return False
-
-        return True
-
-
 class ReadOnlyTextWidget(Widget):
     def render(self, name, value, attrs):
         final_attrs = self.build_attrs(attrs)
@@ -130,25 +90,3 @@ class ReadOnlyTextField(Field):
         # Always return initial because the widget doesn't
         # render an input field.
         return initial
-
-
-def get_team_label(team):
-    return '%s (%s)' % (team.name, team.slug)
-
-
-def get_team_choices(team_list, default=None):
-    sorted_team_list = sorted(team_list.itervalues(), key=lambda x: x.name)
-
-    choices = []
-    for team in sorted_team_list:
-        # TODO: optimize queries
-        choices.append(
-            (team.id, get_team_label(team))
-        )
-
-    if default is None:
-        choices.insert(0, (-1, mark_safe('&ndash;' * 8)))
-    elif default not in sorted_team_list:
-        choices.insert(0, (default.id, get_team_label(default)))
-
-    return choices
diff --git a/src/sentry/web/forms/projects.py b/src/sentry/web/forms/projects.py
index b134caa578..a999b64e83 100644
--- a/src/sentry/web/forms/projects.py
+++ b/src/sentry/web/forms/projects.py
@@ -12,13 +12,8 @@ from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import TAG_LABELS
-from sentry.models import Project, ProjectOption
-from sentry.permissions import can_set_public_projects
-from sentry.web.forms.fields import (
-    UserField, OriginsField, RangeField, get_team_choices)
-
-
-BLANK_CHOICE = [("", "")]
+from sentry.models import ProjectOption
+from sentry.web.forms.fields import RangeField
 
 
 class ProjectTagsForm(forms.Form):
@@ -59,59 +54,6 @@ class ProjectTagsForm(forms.Form):
             self.project, 'annotations', annotations)
 
 
-class BaseProjectForm(forms.ModelForm):
-    name = forms.CharField(label=_('Project Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('Production')}))
-    platform = forms.ChoiceField(choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
-        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}))
-
-    class Meta:
-        fields = ('name', 'platform')
-        model = Project
-
-
-class EditProjectForm(BaseProjectForm):
-    public = forms.BooleanField(required=False,
-        help_text=_('Imply public access to any event for this project.'))
-    team = forms.TypedChoiceField(choices=(), coerce=int, required=False)
-    origins = OriginsField(label=_('Allowed Domains'), required=False,
-        help_text=_('Separate multiple entries with a newline.'))
-    resolve_age = RangeField(help_text=_('Treat an event as resolved if it hasn\'t been seen for this amount of time.'),
-        required=False, min_value=0, max_value=168, step_value=1)
-    owner = UserField(required=False)
-
-    class Meta:
-        fields = ('name', 'platform', 'public', 'team', 'owner', 'slug')
-        model = Project
-
-    def __init__(self, request, team_list, data, instance, *args, **kwargs):
-        super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
-        self.team_map = dict((t.pk, t) for t in team_list)
-
-        if not can_set_public_projects(request.user):
-            del self.fields['public']
-        if len(team_list) == 1 and instance.team == team_list[0]:
-            del self.fields['team']
-        else:
-            self.fields['team'].choices = get_team_choices(self.team_map, instance.team)
-            self.fields['team'].widget.choices = self.fields['team'].choices
-
-    def clean_team(self):
-        value = self.cleaned_data.get('team')
-        if not value:
-            return
-
-        # TODO: why is this not already an int?
-        value = int(value)
-        if value == -1:
-            return
-
-        if self.instance.team and value == self.instance.team.id:
-            return self.instance.team
-
-        return self.team_list[value]
-
-
 class AlertSettingsForm(forms.Form):
     pct_threshold = RangeField(
         label=_('Threshold'), required=False, min_value=0, max_value=1000, step_value=100,
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
new file mode 100644
index 0000000000..8f8f7f6126
--- /dev/null
+++ b/src/sentry/web/frontend/project_settings.py
@@ -0,0 +1,191 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.core.validators import URLValidator
+from django.http import HttpResponseRedirect
+from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import OrganizationMemberType, Project, Team
+from sentry.permissions import can_remove_project, can_set_public_projects
+from sentry.plugins import plugins
+from sentry.web.forms.fields import RangeField
+from sentry.web.frontend.base import ProjectView
+
+
+BLANK_CHOICE = [("", "")]
+
+# Special case origins that don't fit the normal regex pattern, but are valid
+WHITELIST_ORIGINS = ('*', 'localhost')
+
+
+class OriginsField(forms.CharField):
+    _url_validator = URLValidator()
+    widget = forms.Textarea(
+        attrs={
+            'placeholder': mark_safe(_('e.g. example.com or https://example.com')),
+            'class': 'span8',
+        },
+    )
+
+    def clean(self, value):
+        if not value:
+            return []
+        values = filter(bool, (v.strip() for v in value.split('\n')))
+        for value in values:
+            if not self.is_valid_origin(value):
+                raise forms.ValidationError('%r is not an acceptable value' % value)
+        return values
+
+    def is_valid_origin(self, value):
+        if value in WHITELIST_ORIGINS:
+            return True
+
+        if '://' in value:
+            # URLValidator will raise a forms.ValidationError itself
+            self._url_validator(value)
+            return True
+
+        # ports are not supported on matching expressions (yet)
+        if ':' in value:
+            return False
+
+        # no .com's
+        parts = filter(bool, value.split('.'))
+        if len(parts) < 2:
+            return False
+
+        return True
+
+
+class EditProjectForm(forms.ModelForm):
+    name = forms.CharField(label=_('Project Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('Production')}))
+    platform = forms.ChoiceField(choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
+        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')}))
+    public = forms.BooleanField(required=False,
+        help_text=_('Imply public access to any event for this project.'))
+    team = forms.TypedChoiceField(choices=(), coerce=int, required=False)
+    origins = OriginsField(label=_('Allowed Domains'), required=False,
+        help_text=_('Separate multiple entries with a newline.'))
+    resolve_age = RangeField(help_text=_('Treat an event as resolved if it hasn\'t been seen for this amount of time.'),
+        required=False, min_value=0, max_value=168, step_value=1)
+
+    class Meta:
+        fields = ('name', 'platform', 'public', 'team', 'slug')
+        model = Project
+
+    def __init__(self, request, team_list, data, instance, *args, **kwargs):
+        super(EditProjectForm, self).__init__(data=data, instance=instance, *args, **kwargs)
+
+        self.team_list = team_list
+
+        if not can_set_public_projects(request.user):
+            del self.fields['public']
+        if len(team_list) == 1 and instance.team == team_list[0]:
+            del self.fields['team']
+        else:
+            self.fields['team'].choices = self.get_team_choices(team_list, instance.team)
+            self.fields['team'].widget.choices = self.fields['team'].choices
+
+    def get_team_label(self, team):
+        return '%s (%s)' % (team.name, team.slug)
+
+    def get_team_choices(self, team_list, default=None):
+        sorted_team_list = sorted(team_list, key=lambda x: x.name)
+
+        choices = []
+        for team in sorted_team_list:
+            # TODO: optimize queries
+            choices.append(
+                (team.id, self.get_team_label(team))
+            )
+
+        if default is None:
+            choices.insert(0, (-1, mark_safe('&ndash;' * 8)))
+        elif default not in sorted_team_list:
+            choices.insert(0, (default.id, self.get_team_label(default)))
+
+        return choices
+
+    def clean_team(self):
+        value = self.cleaned_data.get('team')
+        if not value:
+            return
+
+        # TODO: why is this not already an int?
+        value = int(value)
+        if value == -1:
+            return
+
+        if self.instance.team and value == self.instance.team.id:
+            return self.instance.team
+
+        for team in self.team_list:
+            if value == team.id:
+                return team
+
+        raise forms.ValidationError('Unable to find chosen team')
+
+
+class ProjectSettingsView(ProjectView):
+    required_access = OrganizationMemberType.ADMIN
+
+    def get_default_context(self, request, **kwargs):
+        context = super(ProjectSettingsView, self).get_default_context(request, **kwargs)
+        context.update({
+            'can_remove_project': can_remove_project(request.user, kwargs['project']),
+        })
+        return context
+
+    def has_permission(self, request, organization, team, project):
+        if request.user.is_superuser:
+            return True
+
+        result = plugins.first('has_perm', request.user, 'edit_project', project)
+        if result is False:
+            return False
+
+        return True
+
+    def get_form(self, request, project):
+        organization = project.team.organization
+        if request.user.is_superuser:
+            accessing_user = organization.owner
+        else:
+            accessing_user = request.user
+
+        team_list = Team.objects.get_for_user(
+            organization=organization,
+            user=accessing_user,
+            access=OrganizationMemberType.ADMIN,
+        )
+
+        return EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
+            'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
+            'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
+        })
+
+    def handle(self, request, organization, team, project):
+        form = self.get_form(request, project)
+
+        if form.is_valid():
+            project = form.save()
+            project.update_option('sentry:origins', form.cleaned_data.get('origins') or [])
+            project.update_option('sentry:resolve_age', form.cleaned_data.get('resolve_age'))
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Changes to your project were saved.'))
+
+            redirect = reverse('sentry-manage-project', args=[project.team.slug, project.slug])
+
+            return HttpResponseRedirect(redirect)
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/projects/manage.html', context)
diff --git a/src/sentry/web/frontend/projects/settings.py b/src/sentry/web/frontend/projects/settings.py
deleted file mode 100644
index 269d462780..0000000000
--- a/src/sentry/web/frontend/projects/settings.py
+++ /dev/null
@@ -1,63 +0,0 @@
-"""
-sentry.web.frontend.projects.settings
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.constants import MEMBER_OWNER
-from sentry.models import Team
-from sentry.permissions import can_remove_project
-from sentry.plugins import plugins
-from sentry.web.decorators import has_access
-from sentry.web.forms.projects import EditProjectForm
-from sentry.web.helpers import render_to_response
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def manage_project(request, team, project):
-    result = plugins.first('has_perm', request.user, 'edit_project', project)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    team_list = Team.objects.get_for_user(
-        organization=team.organization,
-        user=team.owner,
-        access=MEMBER_OWNER,
-    )
-
-    form = EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
-        'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
-        'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
-    })
-
-    if form.is_valid():
-        project = form.save()
-        project.update_option('sentry:origins', form.cleaned_data.get('origins') or [])
-        project.update_option('sentry:resolve_age', form.cleaned_data.get('resolve_age'))
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Changes to your project were saved.'))
-
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[team.slug, project.slug]))
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'can_remove_project': can_remove_project(request.user, project),
-        'page': 'details',
-        'form': form,
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/manage.html', context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 6677910ad3..1c2f35cbf2 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -28,7 +28,6 @@ import sentry.web.frontend.projects.notifications
 import sentry.web.frontend.projects.plugins
 import sentry.web.frontend.projects.quotas
 import sentry.web.frontend.projects.rules
-import sentry.web.frontend.projects.settings
 import sentry.web.frontend.projects.tags
 
 __all__ = ('urlpatterns',)
@@ -45,6 +44,7 @@ from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_organization_member import CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
+from sentry.web.frontend.project_settings import ProjectSettingsView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.team_access_groups import TeamAccessGroupsView
@@ -168,8 +168,8 @@ urlpatterns += patterns('',
         sentry.web.frontend.projects.general.get_started,
         name='sentry-get-started'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/$',
-        sentry.web.frontend.projects.settings.manage_project,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_slug>[\w_-]+)/settings/$',
+        ProjectSettingsView.as_view(),
         name='sentry-manage-project'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/$',
         docs.client_help,
diff --git a/tests/sentry/web/forms/fields/__init__.py b/tests/sentry/web/forms/fields/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/sentry/web/forms/fields/tests.py b/tests/sentry/web/frontend/test_project_settings.py
similarity index 50%
rename from tests/sentry/web/forms/fields/tests.py
rename to tests/sentry/web/frontend/test_project_settings.py
index db535e4534..aa7077b392 100644
--- a/tests/sentry/web/forms/fields/tests.py
+++ b/tests/sentry/web/frontend/test_project_settings.py
@@ -1,8 +1,12 @@
+from __future__ import absolute_import
+
 from django import forms
+from django.core.urlresolvers import reverse
 from exam import fixture
 
-from sentry.web.forms.fields import OriginsField
+from sentry.models import Project
 from sentry.testutils import TestCase
+from sentry.web.frontend.project_settings import OriginsField
 
 
 class OriginsFieldTest(TestCase):
@@ -44,3 +48,34 @@ class OriginsFieldTest(TestCase):
         value = 'localhost'
         result = self.field.clean(value)
         self.assertEquals(result, ['localhost'])
+
+
+class ProjectSettingsTest(TestCase):
+    def setUp(self):
+        super(ProjectSettingsTest, self).setUp()
+        self.organization = self.create_organization()
+        self.team = self.create_team(organization=self.organization)
+        self.project = self.create_project(team=self.team)
+
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project', args=[self.team.slug, self.project.slug])
+
+    def test_renders_with_context(self):
+        self.login_as(self.organization.owner)
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/projects/manage.html')
+        assert resp.context['project'] == self.project
+
+    def test_valid_params(self):
+        self.login_as(self.organization.owner)
+        resp = self.client.post(self.path, {
+            'name': 'bar',
+            'slug': self.project.slug,
+            'platform': 'python',
+        })
+        assert resp.status_code == 302
+        self.assertEquals(resp['Location'], 'http://testserver' + self.path)
+        project = Project.objects.get(id=self.project.id)
+        assert project.name == 'bar'
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 686e6aae0d..3bac52bb2c 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -202,29 +202,6 @@ class NewTeamProjectTest(PermissionBase):
         self._assertPerm(self.path, self.template, None, False)
 
 
-class ManageProjectTest(PermissionBase):
-    template = 'sentry/projects/manage.html'
-
-    @fixture
-    def path(self):
-        return reverse('sentry-manage-project', kwargs={'team_slug': self.team.slug, 'project_id': self.project.id})
-
-    def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, self.admin.username)
-
-    def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, self.owner.username)
-
-    def test_anonymous_cannot_load(self):
-        self._assertPerm(self.path, self.template, None, False)
-
-    def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.nobody.username, False)
-
-    def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.member.username, False)
-
-
 class RemoveProjectTest(PermissionBase):
     template = 'sentry/projects/remove.html'
 
