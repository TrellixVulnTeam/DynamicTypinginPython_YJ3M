commit e935ea9191f86a4321457569b82acf59fe83f960
Author: Nola Chen <chen.no@husky.neu.edu>
Date:   Wed Sep 18 13:52:20 2019 -0700

    ref(ts): Refactor some integration files to typescript (#14742)
    
    * ref(ts): Refactor some integration files to typescript
    
    * Update snapshots
    
    * Convert configureIntegration
    
    * Fix issues & convert integrationRepos to ts
    
    * Refactor
    
    * Fixes from review
    
    * update  snapshot
    
    * Remove unnecessary default state fields
    
    * Add more typing
    
    * Use new Field type

diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
rename to src/sentry/static/sentry/app/components/group/externalIssueActions.tsx
index 874c502c61..da96f42c27 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.tsx
@@ -12,8 +12,20 @@ import NavTabs from 'app/components/navTabs';
 import {t} from 'app/locale';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
+import {Group, GroupIntegration, IntegrationExternalIssue} from 'app/types';
 
-class ExternalIssueActions extends AsyncComponent {
+type Props = AsyncComponent['props'] & {
+  integration: GroupIntegration;
+  group: Group;
+};
+
+type State = AsyncComponent['state'] & {
+  showModal: boolean;
+  action: string | null;
+  selectedIntegration: GroupIntegration;
+  issue: IntegrationExternalIssue | null;
+};
+class ExternalIssueActions extends AsyncComponent<Props, State> {
   static propTypes = {
     group: PropTypes.object.isRequired,
     integration: PropTypes.object.isRequired,
@@ -48,13 +60,13 @@ class ExternalIssueActions extends AsyncComponent {
     }/?externalIssue=${issueId}`;
     this.api.request(endpoint, {
       method: 'DELETE',
-      success: (data, _, jqXHR) => {
+      success: () => {
         addSuccessMessage(t('Successfully unlinked issue.'));
         this.setState({
           issue: null,
         });
       },
-      error: error => {
+      error: () => {
         addErrorMessage(t('Unable to unlink issue.'));
       },
     });
@@ -94,7 +106,6 @@ class ExternalIssueActions extends AsyncComponent {
           externalIssueDisplayName={issue ? issue.displayName : null}
           onClose={this.deleteIssue.bind(this)}
           integrationType={selectedIntegration.provider.key}
-          integrationName={selectedIntegration.name}
           hoverCardHeader={t('Linked %s Integration', selectedIntegration.provider.name)}
           hoverCardBody={
             issue && issue.title ? (
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 4fe6ec53b6..3751543f7e 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1,5 +1,6 @@
 import {SpanEntry} from 'app/components/events/interfaces/spans/types';
 import {API_SCOPES} from 'app/constants';
+import {Field} from 'app/views/settings/components/forms/type';
 
 export type ObjectStatus =
   | 'active'
@@ -409,7 +410,22 @@ export type Integration = {
   accountType: string;
   status: ObjectStatus;
   provider: IntegrationProvider;
-  configOrganization: Array<any>;
+  configOrganization: Field[];
+  //TODO(ts): This includes the initial data that is passed into the integration's configuration form
+  configData: object;
+};
+
+export type IntegrationExternalIssue = {
+  id: string;
+  key: string;
+  url: string;
+  title: string;
+  description: string;
+  displayName: string;
+};
+
+export type GroupIntegration = Integration & {
+  externalIssues: IntegrationExternalIssue[];
 };
 
 export type SentryAppInstallation = {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx
similarity index 71%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx
index 379aa5c518..25843922dd 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationIcon.tsx
@@ -3,15 +3,23 @@ import styled from 'react-emotion';
 import PropTypes from 'prop-types';
 
 import PluginIcon from 'app/plugins/components/pluginIcon';
+import {Integration} from 'app/types';
 
-const Icon = styled('img')`
+type Props = {
+  integration: Integration;
+  size: number;
+};
+
+type IconProps = Pick<Props, 'size'>;
+
+const Icon = styled('img')<IconProps>`
   height: ${p => p.size}px;
   width: ${p => p.size}px;
   border-radius: 2px;
   display: block;
 `;
 
-const IntegrationIcon = ({integration, size}) =>
+const IntegrationIcon = ({integration, size}: Props) =>
   integration.icon ? (
     <Icon size={size} src={integration.icon} />
   ) : (
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
similarity index 84%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
index 188e3d7b68..2ba5c244c2 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationItem.tsx
@@ -7,13 +7,22 @@ import {t} from 'app/locale';
 import IntegrationIcon from 'app/views/organizationIntegrations/integrationIcon';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
+import {Integration} from 'app/types';
 
-export default class IntegrationItem extends React.Component {
+type Props = {
+  integration: Integration;
+  compact?: boolean;
+};
+export default class IntegrationItem extends React.Component<Props> {
   static propTypes = {
     integration: PropTypes.object.isRequired,
     compact: PropTypes.bool,
   };
 
+  static defaultProps = {
+    compact: false,
+  };
+
   render() {
     const {integration, compact} = this.props;
 
@@ -42,7 +51,8 @@ export default class IntegrationItem extends React.Component {
   }
 }
 
-const Labels = styled('div')`
+type StyledProps = Pick<Props, 'compact'>;
+const Labels = styled('div')<StyledProps>`
   box-sizing: border-box;
   display: flex;
   ${p => (p.compact ? 'align-items: center;' : '')};
@@ -58,7 +68,7 @@ const IntegrationName = styled('div')`
 // Not using the overflowEllipsis style import here
 // as it sets width 100% which causes layout issues in the
 // integration list.
-const DomainName = styled('div')`
+const DomainName = styled('div')<StyledProps>`
   color: ${p => (p.compact ? p.theme.gray1 : p.theme.gray3)};
   margin-left: ${p => (p.compact ? space(1) : 'inherit')};
   margin-top: ${p => (!p.compact ? space(0.25) : 'inherit')};
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx
index 7f93f27d04..39c0721fe0 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.tsx
@@ -17,27 +17,42 @@ import RepositoryRow from 'app/components/repositoryRow';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
+import {Integration, Repository} from 'app/types';
 
-export default class IntegrationRepos extends AsyncComponent {
+type Props = AsyncComponent['props'] & {
+  integration: Integration;
+};
+
+type State = AsyncComponent['state'] & {
+  adding: boolean;
+  dropdownBusy: boolean;
+  itemList: Repository[];
+  integrationRepos: {
+    repos: {identifier: string; name: string}[];
+    searchable: boolean;
+  };
+};
+
+export default class IntegrationRepos extends AsyncComponent<Props, State> {
   static propTypes = {
     integration: PropTypes.object.isRequired,
   };
   static contextTypes = {
     organization: PropTypes.object.isRequired,
+    router: PropTypes.object,
   };
 
-  constructor(props, context) {
-    super(props, context);
-    this.state = {
-      error: false,
+  getDefaultState(): State {
+    return {
+      ...super.getDefaultState(),
       adding: false,
       itemList: [],
+      integrationRepos: {repos: [], searchable: false},
       dropdownBusy: false,
-      errors: {},
     };
   }
 
-  getEndpoints() {
+  getEndpoints(): ([string, string, any] | [string, string])[] {
     const orgId = this.context.organization.slug;
     return [
       ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],
@@ -69,7 +84,7 @@ export default class IntegrationRepos extends AsyncComponent {
     200
   );
 
-  searchRepositoriesRequest = searchQuery => {
+  searchRepositoriesRequest = (searchQuery: string) => {
     const orgId = this.context.organization.slug;
     const query = {search: searchQuery};
     const endpoint = `/organizations/${orgId}/integrations/${
@@ -87,12 +102,12 @@ export default class IntegrationRepos extends AsyncComponent {
     });
   };
 
-  handleSearchRepositories = e => {
+  handleSearchRepositories = (e: React.ChangeEvent<HTMLInputElement>) => {
     this.setState({dropdownBusy: true});
     this.debouncedSearchRepositoriesRequest(e.target.value);
   };
 
-  addRepo(selection) {
+  addRepo(selection: {searchKey: string; value: string; label: JSX.Element}) {
     const {integration} = this.props;
     const {itemList} = this.state;
     const orgId = this.context.organization.slug;
@@ -113,7 +128,7 @@ export default class IntegrationRepos extends AsyncComponent {
       promise = addRepository(this.api, orgId, selection.value, integration);
     }
     promise.then(
-      repo => {
+      (repo: Repository) => {
         this.setState({adding: false, itemList: itemList.concat(repo)});
       },
       () => this.setState({adding: false})
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.jsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
similarity index 77%
rename from src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.jsx
rename to src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
index 11a847217b..5cc56a58d1 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import {RouteComponentProps} from 'react-router/lib/Router';
 
 import {analytics} from 'app/utils/analytics';
 import {t} from 'app/locale';
@@ -11,9 +12,22 @@ import IntegrationRepos from 'app/views/organizationIntegrations/integrationRepo
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import withOrganization from 'app/utils/withOrganization';
+import {Organization, Integration, IntegrationProvider} from 'app/types';
 
-class ConfigureIntegration extends AsyncView {
-  getEndpoints() {
+type RouteParams = {
+  orgId: string;
+  integrationId: string;
+};
+type Props = RouteComponentProps<RouteParams, {}> &
+  AsyncView['props'] & {
+    organization: Organization;
+  };
+type State = AsyncView['state'] & {
+  config: {providers: IntegrationProvider[]};
+  integration: Integration;
+};
+class ConfigureIntegration extends AsyncView<Props, State> {
+  getEndpoints(): [string, string][] {
     const {orgId, integrationId} = this.props.params;
 
     return [
@@ -45,7 +59,7 @@ class ConfigureIntegration extends AsyncView {
       p => p.key === integration.provider.key
     );
 
-    const title = <IntegrationItem integration={integration} withProvider={true} />;
+    const title = <IntegrationItem integration={integration} />;
 
     return (
       <React.Fragment>
@@ -68,11 +82,11 @@ class ConfigureIntegration extends AsyncView {
           </Form>
         )}
 
-        {provider.features.includes('alert-rule') && (
+        {provider && provider.features.includes('alert-rule') && (
           <IntegrationAlertRules integration={integration} />
         )}
 
-        {provider.features.includes('commits') && (
+        {provider && provider.features.includes('commits') && (
           <IntegrationRepos {...this.props} integration={integration} />
         )}
       </React.Fragment>
diff --git a/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap b/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
index e293f1c4db..502a0a8541 100644
--- a/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
+++ b/tests/js/spec/components/group/__snapshots__/externalIssueActions.spec.jsx.snap
@@ -99,6 +99,7 @@ exports[`ExternalIssueActions with no external issues linked renders 1`] = `
     externalIssueLink={null}
     hoverCardBody={
       <IntegrationItem
+        compact={false}
         integration={
           Object {
             "configData": Object {},
@@ -120,7 +121,6 @@ exports[`ExternalIssueActions with no external issues linked renders 1`] = `
       />
     }
     hoverCardHeader="Linked GitHub Integration"
-    integrationName="Test Integration"
     integrationType="github"
     onClose={[Function]}
     onOpen={[Function]}
@@ -132,6 +132,7 @@ exports[`ExternalIssueActions with no external issues linked renders 1`] = `
         <Hovercard
           body={
             <IntegrationItem
+              compact={false}
               integration={
                 Object {
                   "configData": Object {},
