commit 074cec17a1141404c2d84d315c2279571ce3a6b0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Apr 9 14:46:04 2019 -0700

    feat(ui): Remove default period/utc from URL params (#12423)
    
    * fix discover with empty dates
    * fix bug when navigating back to empty datetime
    * fix bug where we update date picker while on saved queries tab and then navigate to new query and try to save, query gets reset with default stats period
    * fix saved queries with absolute dates, range mistakenly being applied
    
    Fixes SEN-372

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
index 4c9a1df390..58f14cbee2 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
@@ -2,7 +2,7 @@
 import {isEqual, isInteger, omit} from 'lodash';
 import * as Sentry from '@sentry/browser';
 
-import {getParams} from 'app/views/organizationEvents/utils/getParams';
+import {defined} from 'app/utils';
 import {getUtcDateString} from 'app/utils/dates';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
 
@@ -170,3 +170,31 @@ function getNewQueryParams(obj, oldQueryParams, {resetParams} = {}) {
 
   return newQuery;
 }
+
+// Filters out params with null values and returns a default
+// `statsPeriod` when necessary.
+//
+// Accepts `period` and `statsPeriod` but will only return `statsPeriod`
+//
+function getParams(params = {}) {
+  const {start, end, period, statsPeriod, ...otherParams} = params;
+
+  // `statsPeriod` takes precendence for now
+  const coercedPeriod = statsPeriod || period;
+
+  // Filter null values
+  return Object.entries({
+    statsPeriod: coercedPeriod,
+    start: coercedPeriod ? null : start,
+    end: coercedPeriod ? null : end,
+    ...otherParams,
+  })
+    .filter(([key, value]) => defined(value))
+    .reduce(
+      (acc, [key, value]) => ({
+        ...acc,
+        [key]: value,
+      }),
+      {}
+    );
+}
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
index 41151426ef..6f46779a91 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -10,7 +10,6 @@ import {
 } from 'app/components/organizations/globalSelectionHeader/constants';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {callIfFunction} from 'app/utils/callIfFunction';
-import {defined} from 'app/utils';
 import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import {t} from 'app/locale';
 import {
@@ -221,7 +220,7 @@ class GlobalSelectionHeader extends React.Component {
     const nextQuery = pick(nextProps.location.query, urlParamKeys);
 
     // If no next query is specified keep the previous global selection values
-    if (Object.keys(nextQuery).length === 0) {
+    if (Object.keys(prevQuery).length === 0 && Object.keys(nextQuery).length === 0) {
       return false;
     }
 
@@ -241,11 +240,7 @@ class GlobalSelectionHeader extends React.Component {
       nextProps.location.query
     );
 
-    if (start || end || period || utc) {
-      // Don't attempt to update date if all of these values are empty
-      updateDateTime({start, end, period, utc});
-    }
-
+    updateDateTime({start, end, period, utc});
     updateEnvironments(environment || []);
     updateProjects(project || []);
   };
@@ -281,7 +276,9 @@ class GlobalSelectionHeader extends React.Component {
 
   handleUpdateTime = ({relative: period, start, end, utc} = {}) => {
     const newValueObj = {
-      ...(defined(period) ? {period} : {start, end}),
+      period,
+      start,
+      end,
       utc,
     };
 
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index a1ed15819d..9022eb3e13 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -6,6 +6,7 @@ import styled from 'react-emotion';
 
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {analytics} from 'app/utils/analytics';
+import {defined, parsePeriodToHours} from 'app/utils';
 import {
   getLocalToSystem,
   getPeriodAgo,
@@ -13,7 +14,6 @@ import {
   getUtcToSystem,
 } from 'app/utils/dates';
 import {getRelativeSummary} from 'app/components/organizations/timeRangeSelector/utils';
-import {parsePeriodToHours} from 'app/utils';
 import {t} from 'app/locale';
 import DateRange from 'app/components/organizations/timeRangeSelector/dateRange';
 import DateSummary from 'app/components/organizations/timeRangeSelector/dateSummary';
@@ -105,7 +105,6 @@ class TimeRangeSelector extends React.PureComponent {
   static defaultProps = {
     showAbsolute: true,
     showRelative: true,
-    utc: getUserTimezone() === 'UTC',
   };
 
   static contextTypes = {
@@ -124,7 +123,9 @@ class TimeRangeSelector extends React.PureComponent {
     }
 
     this.state = {
-      utc: props.utc,
+      // if utc is not null and not undefined, then use value of `props.utc` (it can be false)
+      // otherwise if no value is supplied, the default should be the user's timezone preference
+      utc: defined(props.utc) ? props.utc : getUserTimezone() === 'UTC',
       isOpen: false,
       hasChanges: false,
       start,
@@ -188,8 +189,12 @@ class TimeRangeSelector extends React.PureComponent {
         'hours'
       ).toDate(),
       end: new Date(),
-      utc: this.state.utc,
     };
+
+    if (defined(this.props.utc)) {
+      newDateTime.utc = this.state.utc;
+    }
+
     this.setState({
       hasChanges: true,
       ...newDateTime,
@@ -205,7 +210,6 @@ class TimeRangeSelector extends React.PureComponent {
       relative: value,
       start: null,
       end: null,
-      utc: this.state.utc,
     };
     this.setState(newDateTime);
     this.callCallback(onChange, newDateTime);
@@ -215,11 +219,12 @@ class TimeRangeSelector extends React.PureComponent {
   handleClear = () => {
     const {onChange} = this.props;
     const newDateTime = {
-      relative: DEFAULT_STATS_PERIOD,
+      relative: null,
       start: null,
       end: null,
-      utc: this.state.utc,
+      utc: null,
     };
+    this.setState(newDateTime);
     this.callCallback(onChange, newDateTime);
     this.handleUpdate(newDateTime);
   };
@@ -231,8 +236,12 @@ class TimeRangeSelector extends React.PureComponent {
       relative: null,
       start,
       end,
-      utc: this.state.utc,
     };
+
+    if (defined(this.props.utc)) {
+      newDateTime.utc = this.state.utc;
+    }
+
     this.setState({hasChanges: true, ...newDateTime});
     this.callCallback(onChange, newDateTime);
   };
@@ -241,26 +250,27 @@ class TimeRangeSelector extends React.PureComponent {
     const {onChange} = this.props;
     let {start, end} = this.props;
 
-    if (!start) {
-      start = getDateWithTimezoneInUtc(this.state.start, this.props.utc);
-    }
-
-    if (!end) {
-      end = getDateWithTimezoneInUtc(this.state.end, this.props.utc);
-    }
-
     this.setState(state => {
       const utc = !state.utc;
 
+      if (!start) {
+        start = getDateWithTimezoneInUtc(state.start, state.utc);
+      }
+
+      if (!end) {
+        end = getDateWithTimezoneInUtc(state.end, state.utc);
+      }
+
       analytics('dateselector.utc_changed', {
         utc,
         path: getRouteStringFromRoutes(this.context.router.routes),
         org_id: parseInt(this.props.organization.id, 10),
       });
+
       const newDateTime = {
         relative: null,
-        start: this.props.utc ? getUtcToSystem(start) : getLocalToSystem(start),
-        end: this.props.utc ? getUtcToSystem(end) : getLocalToSystem(end),
+        start: utc ? getLocalToSystem(start) : getUtcToSystem(start),
+        end: utc ? getLocalToSystem(end) : getUtcToSystem(end),
         utc,
       };
       this.callCallback(onChange, newDateTime);
@@ -280,10 +290,10 @@ class TimeRangeSelector extends React.PureComponent {
     const shouldShowRelative = showRelative;
     const isAbsoluteSelected = !!start && !!end;
 
-    const summary = relative ? (
-      getRelativeSummary(relative)
-    ) : (
+    const summary = isAbsoluteSelected ? (
       <DateSummary utc={this.state.utc} start={start} end={end} />
+    ) : (
+      getRelativeSummary(relative || DEFAULT_STATS_PERIOD)
     );
 
     return (
@@ -298,7 +308,10 @@ class TimeRangeSelector extends React.PureComponent {
             <StyledHeaderItem
               icon={<StyledInlineSvg src="icon-calendar" />}
               isOpen={isOpen}
-              hasSelected={this.props.relative !== DEFAULT_STATS_PERIOD}
+              hasSelected={
+                (!!this.props.relative && this.props.relative !== DEFAULT_STATS_PERIOD) ||
+                isAbsoluteSelected
+              }
               hasChanges={this.state.hasChanges}
               onClear={this.handleClear}
               allowClear={true}
@@ -317,7 +330,7 @@ class TimeRangeSelector extends React.PureComponent {
                   {shouldShowRelative && (
                     <RelativeSelector
                       onClick={this.handleSelectRelative}
-                      selected={relative}
+                      selected={relative || DEFAULT_STATS_PERIOD}
                     />
                   )}
                   {shouldShowAbsolute && (
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index ef249a796f..bdbd4fb177 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -7,24 +7,20 @@ import {
   LOCAL_STORAGE_KEY,
 } from 'app/components/organizations/globalSelectionHeader/constants';
 import {getStateFromQuery} from 'app/components/organizations/globalSelectionHeader/utils';
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {isEqualWithDates} from 'app/utils/isEqualWithDates';
-import ConfigStore from 'app/stores/configStore';
 import OrganizationsStore from 'app/stores/organizationsStore';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
 import localStorage from 'app/utils/localStorage';
 
 const getDefaultSelection = () => {
-  const user = ConfigStore.get('user');
-
   return {
     projects: [],
     environments: [],
     datetime: {
       [DATE_TIME.START]: null,
       [DATE_TIME.END]: null,
-      [DATE_TIME.PERIOD]: DEFAULT_STATS_PERIOD,
-      [DATE_TIME.UTC]: user?.options?.timezone === 'UTC' ? true : null,
+      [DATE_TIME.PERIOD]: null,
+      [DATE_TIME.UTC]: null,
     },
   };
 };
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
index a0a966aaac..e309443a14 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
@@ -2,6 +2,7 @@ import {isEqual, omit} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
 
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {getInterval} from 'app/components/charts/utils';
 import {getPeriod} from 'app/utils/getPeriod';
 import {parsePeriodToHours} from 'app/utils';
@@ -88,7 +89,12 @@ class DiscoverQuery extends React.Component {
     if (query.rollup) {
       // getInterval returns a period string depending on current datetime range selected
       // we then use a helper function to parse into hours and then convert back to seconds
-      query.rollup = parsePeriodToHours(getInterval(datetime)) * 60 * 60;
+      query.rollup =
+        parsePeriodToHours(
+          getInterval({...datetime, period: datetime.period || DEFAULT_STATS_PERIOD})
+        ) *
+        60 *
+        60;
     }
 
     return {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 7ef26077d1..c96c085288 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -8,8 +8,8 @@ import {getUtcDateString} from 'app/utils/dates';
 import {t, tct} from 'app/locale';
 import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import BetaTag from 'app/components/betaTag';
-import SentryTypes from 'app/sentryTypes';
 import PageHeading from 'app/components/pageHeading';
+import SentryTypes from 'app/sentryTypes';
 
 import {
   DiscoverContainer,
@@ -116,34 +116,27 @@ export default class OrganizationDiscover extends React.Component {
       // This indicates navigation changes (e.g. back button on browser)
       // We need to update our search store and probably runQuery
       const {projects, range, start, end, utc} = newQuery;
-      let hasChange = false;
 
       if (projects) {
         this.updateProjects(projects);
-        hasChange = true;
       }
 
-      if (range || (end && start)) {
-        this.updateDateTime({
-          period: range || null,
-          start: start || null,
-          end: end || null,
-          utc: typeof utc !== 'undefined' ? utc : null,
-        });
+      this.updateDateTime({
+        period: range || null,
+        start: start || null,
+        end: end || null,
+        utc: typeof utc !== 'undefined' ? utc : null,
+      });
 
-        // These props come from URL string, so will always be in UTC
-        updateDateTime({
-          start: start && new Date(moment.utc(start).local()),
-          end: end && new Date(moment.utc(end).local()),
-          period: range,
-          utc,
-        });
-        hasChange = true;
-      }
+      // These props come from URL string, so will always be in UTC
+      updateDateTime({
+        start: (start && new Date(moment.utc(start).local())) || null,
+        end: (end && new Date(moment.utc(end).local())) || null,
+        period: range || null,
+        utc: typeof utc !== 'undefined' ? utc : null,
+      });
 
-      if (hasChange) {
-        this.runQuery();
-      }
+      this.runQuery();
     }
   }
 
@@ -154,7 +147,7 @@ export default class OrganizationDiscover extends React.Component {
 
   getDateTimeFields = ({period, start, end, utc}) => ({
     range: period || null,
-    utc,
+    utc: typeof utc !== 'undefined' ? utc : null,
     start: (start && getUtcDateString(start)) || null,
     end: (end && getUtcDateString(end)) || null,
   });
@@ -166,6 +159,12 @@ export default class OrganizationDiscover extends React.Component {
   updateDateTime = datetime => {
     const {start, end, range, utc} = this.getDateTimeFields(datetime);
 
+    updateDateTime({
+      start,
+      end,
+      period: range,
+      utc,
+    });
     this.updateFields({start, end, range, utc});
   };
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index f7981d1a8b..7defc6172a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -96,8 +96,9 @@ class OrganizationDiscoverContainer extends React.Component {
       this.setState({savedQuery: null});
       // Reset querybuilder if we're switching from a saved query
       if (this.props.params.savedQueryId) {
-        const projects = nextProps.selection.projects;
-        this.queryBuilder.reset({projects});
+        const {datetime, projects} = nextProps.selection;
+        const {start, end, period: range} = datetime;
+        this.queryBuilder.reset({projects, range, start, end});
       }
       return;
     }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index e2a00ad767..8b428fff09 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -20,7 +20,6 @@ const DEFAULTS = {
   fields: ['id', 'issue.id', 'project.name', 'platform', 'timestamp'],
   conditions: [],
   aggregations: [],
-  range: DEFAULT_STATS_PERIOD,
   orderby: '-timestamp',
   limit: 1000,
 };
@@ -42,6 +41,11 @@ function applyDefaults(query) {
 export default function createQueryBuilder(initial = {}, organization) {
   const api = new Client();
   let query = applyDefaults(initial);
+
+  if (!query.start && !query.end && !query.range) {
+    query.range = DEFAULT_STATS_PERIOD;
+  }
+
   const defaultProjects = organization.projects
     .filter(projects => projects.isMember)
     .map(project => parseInt(project.id, 10));
@@ -113,6 +117,14 @@ export default function createQueryBuilder(initial = {}, organization) {
     // Default to all projects if none is selected
     const projects = query.projects.length ? query.projects : defaultProjects;
 
+    // Default to DEFAULT_STATS_PERIOD when no date range selected (either relative or absolute)
+    const {range, start, end} = query;
+    const hasAbsolute = start && end;
+    const daterange = {
+      ...(hasAbsolute && {start, end}),
+      ...(range ? {range} : !hasAbsolute && {range: DEFAULT_STATS_PERIOD}),
+    };
+
     // Default to all fields if there are none selected, and no aggregation is
     // specified
     const useDefaultFields = !query.fields.length && !query.aggregations.length;
@@ -126,6 +138,7 @@ export default function createQueryBuilder(initial = {}, organization) {
 
     return {
       ...query,
+      ...daterange,
       projects,
       fields,
     };
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 81102352da..7c4aaf5b10 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -76,12 +76,16 @@ class EventsChart extends React.Component {
     api: PropTypes.object,
     period: PropTypes.string,
     query: PropTypes.string,
+    start: PropTypes.instanceOf(Date),
+    end: PropTypes.instanceOf(Date),
     utc: PropTypes.bool,
     router: PropTypes.object,
   };
 
   render() {
-    const {api, period, utc, query, router, ...props} = this.props;
+    const {api, period, utc, query, router, start, end, ...props} = this.props;
+    // Include previous only on relative dates (defaults to relative if no start and end)
+    const includePrevious = !!period || (!start && !end);
 
     return (
       <ChartZoom router={router} period={period} utc={utc} {...props}>
@@ -90,11 +94,13 @@ class EventsChart extends React.Component {
             {...props}
             api={api}
             period={period}
+            start={start}
+            end={end}
             interval={getInterval(this.props, true)}
             showLoading={false}
             query={query}
             getCategory={DEFAULT_GET_CATEGORY}
-            includePrevious={!!period}
+            includePrevious={includePrevious}
           >
             {({loading, reloading, timeseriesData, previousTimeseriesData}) => {
               return (
diff --git a/tests/js/helpers/mockRouterPush.jsx b/tests/js/helpers/mockRouterPush.jsx
index 7fdb006c27..678b03c73d 100644
--- a/tests/js/helpers/mockRouterPush.jsx
+++ b/tests/js/helpers/mockRouterPush.jsx
@@ -3,12 +3,17 @@ import qs from 'query-string';
 // More closely mocks a router push -- updates wrapper's props/context
 // with updated `router` and calls `wrapper.update()`
 export function mockRouterPush(wrapper, router) {
-  router.push.mockImplementation(({pathname, query}) => {
+  router.push.mockImplementation(({query}) => {
+    const stringifiedQuery = qs.stringify(query);
     const location = {
       ...router.location,
-      query,
-      search: qs.stringify(query),
+
+      // Need to make sure query more closely reflects datatypes in browser
+      // e.g. if we had a param that was boolean, it would get stringified
+      query: qs.parse(stringifiedQuery),
+      search: stringifiedQuery,
     };
+
     const newRouter = {
       router: {
         ...router,
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index b21b08205b..24a9da26c7 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -53,19 +53,10 @@ describe('GlobalSelectionHeader', function() {
     expect(router.push).not.toHaveBeenCalled();
   });
 
-  it('replaces URL with values from store when mounted with no query params', function() {
+  it('does not replace URL with values from store when mounted with no query params', function() {
     mount(<GlobalSelectionHeader organization={organization} />, routerContext);
 
-    expect(router.replace).toHaveBeenCalledWith(
-      expect.objectContaining({
-        query: {
-          environment: [],
-          project: [],
-          statsPeriod: '14d',
-          utc: 'true',
-        },
-      })
-    );
+    expect(router.replace).not.toHaveBeenCalled();
   });
 
   it('only updates GlobalSelection store when mounted with query params', async function() {
@@ -169,6 +160,43 @@ describe('GlobalSelectionHeader', function() {
     });
   });
 
+  it('updates GlobalSelection store with empty date selections', async function() {
+    const wrapper = mount(
+      <GlobalSelectionHeader organization={organization} />,
+      changeQuery(routerContext, {
+        statsPeriod: '7d',
+      })
+    );
+
+    wrapper.setContext(
+      changeQuery(routerContext, {
+        statsPeriod: null,
+      }).context
+    );
+    await tick();
+    wrapper.update();
+
+    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
+      period: null,
+      utc: null,
+      start: null,
+      end: null,
+    });
+    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
+    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
+
+    expect(GlobalSelectionStore.get()).toEqual({
+      datetime: {
+        period: null,
+        utc: null,
+        start: null,
+        end: null,
+      },
+      environments: [],
+      projects: [],
+    });
+  });
+
   it('does not update store if url params have not changed', async function() {
     const wrapper = mount(
       <GlobalSelectionHeader organization={organization} />,
diff --git a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
index 489c1e81f8..ac25e54818 100644
--- a/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
+++ b/tests/js/spec/components/organizations/timeRangeSelector/index.spec.jsx
@@ -63,9 +63,8 @@ describe('TimeRangeSelector', function() {
 
     const newProps = {
       relative: null,
-      start: new Date('2017-10-02T22:41:20.000Z'),
-      end: new Date('2017-10-16T22:41:20.000Z'),
-      utc: true,
+      start: new Date('2017-10-03T02:41:20.000Z'),
+      end: new Date('2017-10-17T02:41:20.000Z'),
     };
     expect(onChange).toHaveBeenLastCalledWith(newProps);
     wrapper.setProps(newProps);
@@ -114,7 +113,6 @@ describe('TimeRangeSelector', function() {
       relative: '14d',
       start: null,
       end: null,
-      utc: false,
     });
 
     wrapper.setProps({relative: '14d', start: null, end: null});
@@ -148,7 +146,6 @@ describe('TimeRangeSelector', function() {
       relative: '14d',
       start: null,
       end: null,
-      utc: true,
     });
 
     wrapper.setProps({relative: '14d', start: null, end: null});
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index 2ef7b753f6..6106663e84 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -26,7 +26,7 @@ describe('GlobalSelectionStore', function() {
     expect(GlobalSelectionStore.get()).toEqual({
       projects: [],
       environments: [],
-      datetime: {period: '14d', start: null, end: null, utc: true},
+      datetime: {period: null, start: null, end: null, utc: null},
     });
   });
 
@@ -38,14 +38,46 @@ describe('GlobalSelectionStore', function() {
   });
 
   it('updateDateTime()', async function() {
-    expect(GlobalSelectionStore.get().datetime.period).toEqual('14d');
+    expect(GlobalSelectionStore.get().datetime).toEqual({
+      period: null,
+      start: null,
+      end: null,
+      utc: null,
+    });
     updateDateTime({period: '2h', start: null, end: null});
     await tick();
-    expect(GlobalSelectionStore.get().datetime.period).toEqual('2h');
+    expect(GlobalSelectionStore.get().datetime).toEqual({
+      period: '2h',
+      start: null,
+      end: null,
+    });
+
     updateDateTime({
       period: null,
       start: '2018-08-08T00:00:00',
       end: '2018-09-08T00:00:00',
+      utc: true,
+    });
+    await tick();
+    expect(GlobalSelectionStore.get().datetime).toEqual({
+      period: null,
+      start: '2018-08-08T00:00:00',
+      end: '2018-09-08T00:00:00',
+      utc: true,
+    });
+
+    updateDateTime({
+      period: null,
+      start: null,
+      end: null,
+      utc: null,
+    });
+    await tick();
+    expect(GlobalSelectionStore.get().datetime).toEqual({
+      period: null,
+      start: null,
+      end: null,
+      utc: null,
     });
   });
 
diff --git a/tests/js/spec/utils/withGlobalSelection.spec.jsx b/tests/js/spec/utils/withGlobalSelection.spec.jsx
index b3539f1ee4..e57a723264 100644
--- a/tests/js/spec/utils/withGlobalSelection.spec.jsx
+++ b/tests/js/spec/utils/withGlobalSelection.spec.jsx
@@ -23,11 +23,15 @@ describe('withGlobalSelection HoC', function() {
   });
 
   it('handles datetime', function() {
+    let selection;
     const MyComponent = () => null;
     const Container = withGlobalSelection(MyComponent);
     const wrapper = mount(<Container />);
 
-    expect(wrapper.find('MyComponent').prop('selection').datetime.period).toEqual('14d');
+    selection = wrapper.find('MyComponent').prop('selection');
+    expect(selection.datetime.period).toEqual(null);
+    expect(selection.datetime.start).toEqual(null);
+    expect(selection.datetime.end).toEqual(null);
 
     GlobalSelectionStore.updateDateTime({
       period: '7d',
@@ -36,13 +40,22 @@ describe('withGlobalSelection HoC', function() {
     });
     wrapper.update();
 
-    expect(wrapper.find('MyComponent').prop('selection').datetime.period).toEqual('7d');
+    selection = wrapper.find('MyComponent').prop('selection');
+    expect(selection.datetime.period).toEqual('7d');
+    expect(selection.datetime.start).toEqual(null);
+    expect(selection.datetime.end).toEqual(null);
 
     GlobalSelectionStore.updateDateTime({
       period: null,
       start: '2018-08-08T00:00:00',
       end: '2018-08-08T00:00:00',
     });
+    wrapper.update();
+
+    selection = wrapper.find('MyComponent').prop('selection');
+    expect(selection.datetime.period).toEqual(null);
+    expect(selection.datetime.start).toEqual('2018-08-08T00:00:00');
+    expect(selection.datetime.end).toEqual('2018-08-08T00:00:00');
   });
 
   it('handles environments', function() {
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 41ef349f46..cdea8a32b4 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -184,10 +184,10 @@ describe('Discover', function() {
 
       wrapper = mount(
         <Discover
-          location={{query: {}}}
           queryBuilder={queryBuilder}
           organization={organization}
           params={{}}
+          location={{query: {}, search: ''}}
           updateSavedQueryData={jest.fn()}
           toggleEditMode={jest.fn()}
           isLoading={false}
@@ -245,7 +245,8 @@ describe('Discover', function() {
 
       wrapper = mount(
         <Discover
-          location={{query: {}}}
+          params={{}}
+          location={{query: {}, search: ''}}
           queryBuilder={queryBuilder}
           organization={organization}
           updateSavedQueryData={jest.fn()}
@@ -316,7 +317,8 @@ describe('Discover', function() {
     it('can be saved', function() {
       const wrapper = mount(
         <Discover
-          location={{query: {}}}
+          params={{}}
+          location={{query: {}, search: ''}}
           queryBuilder={queryBuilder}
           organization={organization}
           updateSavedQueryData={jest.fn()}
@@ -532,7 +534,7 @@ describe('Discover', function() {
           organization={organization}
           location={{
             query: {},
-            location: '?fields=something',
+            search: '?fields=something',
           }}
           updateSavedQueryData={jest.fn()}
           toggleEditMode={jest.fn()}
@@ -586,8 +588,8 @@ describe('Discover', function() {
           organization={organization}
           location={{
             query: {},
-            location: '',
           }}
+          params={{}}
           updateSavedQueryData={jest.fn()}
           toggleEditMode={jest.fn()}
           isLoading={false}
@@ -629,16 +631,20 @@ describe('Discover', function() {
         method: 'POST',
         body: {timing: {}, data: [], meta: []},
       });
+
+      const routerContext = TestStubs.routerContext([{organization}]);
+
       wrapper = mount(
         <Discover
-          location={{query: {}}}
           queryBuilder={queryBuilder}
+          params={{}}
+          location={routerContext.context.location}
           organization={organization}
           updateSavedQueryData={jest.fn()}
           toggleEditMode={jest.fn()}
           isLoading={false}
         />,
-        TestStubs.routerContext([{organization}])
+        routerContext
       );
     });
 
@@ -674,7 +680,7 @@ describe('Discover', function() {
           data: expect.objectContaining({
             start: '2017-10-03T02:41:20',
             end: '2017-10-17T02:41:20',
-            utc: null,
+            utc: false,
           }),
         })
       );
@@ -694,8 +700,7 @@ describe('Discover', function() {
       // Hide date picker
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
-      await tick();
-      wrapper.update();
+      await wrapper.update();
 
       // Should make request for the last day an absolute date range
       expect(query).toHaveBeenLastCalledWith(
@@ -704,7 +709,7 @@ describe('Discover', function() {
           data: expect.objectContaining({
             start: '2017-10-01T04:00:00',
             end: '2017-10-02T03:59:59',
-            utc: null,
+            utc: false,
           }),
         })
       );
@@ -716,6 +721,8 @@ describe('Discover', function() {
       // Hide dropdown
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
+      await wrapper.update();
+
       expect(query).toHaveBeenLastCalledWith(
         expect.anything(),
         expect.objectContaining({
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/organizationDiscover/index.spec.jsx
index 61b408c0cd..316fc0fe68 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/index.spec.jsx
@@ -1,5 +1,4 @@
 import React from 'react';
-import PropTypes from 'prop-types';
 import {mount} from 'enzyme';
 import {browserHistory} from 'react-router';
 
@@ -73,15 +72,39 @@ describe('OrganizationDiscoverContainer', function() {
   });
 
   describe('saved query', function() {
-    let wrapper, savedQueryMock, savedQueries;
+    let wrapper, savedQueryMock, addMock, savedQueries;
     const organization = TestStubs.Organization({
       projects: [TestStubs.Project()],
       features: ['discover'],
     });
+
+    const createWrapper = async (props, withStore) => {
+      const Component = withStore
+        ? OrganizationDiscoverContainerWithStore
+        : OrganizationDiscoverContainer;
+      const wrap = mount(
+        <Component
+          location={{query: {}, search: ''}}
+          params={{savedQueryId: 1}}
+          {...(withStore ? {} : {selection: {datetime: {}}})}
+          {...props}
+        />,
+        TestStubs.routerContext([{organization}])
+      );
+      await tick();
+      wrap.update();
+      return wrap;
+    };
+
     beforeEach(async function() {
       savedQueries = [
         TestStubs.DiscoverSavedQuery({id: '1', name: 'one'}),
-        TestStubs.DiscoverSavedQuery({id: '2', name: 'two'}),
+        TestStubs.DiscoverSavedQuery({
+          id: '2',
+          name: 'two',
+          start: '2019-04-01T07:00:00.000Z',
+          end: '2019-04-04T06:59:59.000Z',
+        }),
       ];
 
       savedQueryMock = MockApiClient.addMockResponse({
@@ -94,47 +117,158 @@ describe('OrganizationDiscoverContainer', function() {
         body: savedQueries,
       });
 
-      wrapper = mount(
-        <OrganizationDiscoverContainer
-          location={{query: {}, search: ''}}
-          params={{savedQueryId: 1}}
-          selection={{datetime: {}}}
-        />,
-        {
-          ...TestStubs.routerContext([{organization}, {organization: PropTypes.object}]),
-          disableLifecycleMethods: false,
-        }
-      );
-      await tick();
-      wrapper.update();
+      addMock = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/saved/',
+        method: 'POST',
+      });
     });
 
-    it('fetches saved query', function() {
-      expect(savedQueryMock).toHaveBeenCalled();
-    });
+    describe('Without Global Header Store', function() {
+      let request;
+      beforeEach(async function() {
+        request = MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+          method: 'POST',
+          body: {timing: {}, data: [], meta: []},
+        });
+        wrapper = await createWrapper();
+      });
+
+      afterEach(function() {
+        MockApiClient.clearMockResponses();
+      });
 
-    it('navigates to second query', function() {
-      const nextQueryMock = MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/discover/saved/2/',
-        body: savedQueries[1],
+      it('fetches saved query', function() {
+        expect(savedQueryMock).toHaveBeenCalled();
       });
 
-      expect(wrapper.find('SavedQueryListItem')).toHaveLength(2);
+      it('navigates to and opens query with no date ranges saved', function() {
+        const nextQueryMock = MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/discover/saved/1/',
+          body: savedQueries[0],
+        });
 
-      wrapper.setProps({
-        params: {savedQueryId: '2'},
+        expect(wrapper.find('SavedQueryListItem')).toHaveLength(2);
+
+        wrapper.setProps({
+          params: {savedQueryId: '1'},
+        });
+
+        expect(savedQueryMock).toHaveBeenCalledTimes(1);
+        expect(nextQueryMock).toHaveBeenCalledTimes(1);
+        expect(request).toHaveBeenLastCalledWith(
+          expect.anything(),
+          expect.objectContaining({
+            data: {
+              aggregations: [],
+              conditions: [],
+              fields: ['test'],
+              limit: expect.any(Number),
+              orderby: expect.any(String),
+              projects: [2],
+              range: '14d',
+            },
+          })
+        );
+      });
+
+      it('navigates to and opens query with absolute dates saved', async function() {
+        const nextQueryMock = MockApiClient.addMockResponse({
+          url: '/organizations/org-slug/discover/saved/2/',
+          body: savedQueries[1],
+        });
+
+        expect(wrapper.find('SavedQueryListItem')).toHaveLength(2);
+
+        wrapper.setProps({
+          params: {savedQueryId: '2'},
+        });
+
+        // This is needed because we are changing from savedQueryId: 1 --> 2,
+        // so unliked the above, this will hit cWRP (see `createWrapper()`)
+        await tick();
+        wrapper.update();
+
+        expect(savedQueryMock).toHaveBeenCalledTimes(1);
+        expect(nextQueryMock).toHaveBeenCalledTimes(1);
+        expect(request).toHaveBeenLastCalledWith(
+          expect.anything(),
+          expect.objectContaining({
+            data: {
+              aggregations: [],
+              conditions: [],
+              start: '2019-04-01T07:00:00.000Z',
+              end: '2019-04-04T06:59:59.000Z',
+              fields: ['test'],
+              limit: expect.any(Number),
+              orderby: expect.any(String),
+              projects: [2],
+            },
+          })
+        );
       });
 
-      expect(savedQueryMock).toHaveBeenCalledTimes(1);
-      expect(nextQueryMock).toHaveBeenCalledTimes(1);
+      it('toggles edit mode', function() {
+        wrapper.instance().toggleEditMode();
+        expect(browserHistory.push).toHaveBeenCalledWith({
+          pathname: '/organizations/org-slug/discover/saved/1/',
+          query: {editing: 'true'},
+        });
+      });
     });
 
-    it('toggles edit mode', function() {
-      wrapper.instance().toggleEditMode();
-      expect(browserHistory.push).toHaveBeenCalledWith({
-        pathname: '/organizations/org-slug/discover/saved/1/',
-        query: {editing: 'true'},
+    it('changes date correctly', async function() {
+      wrapper = await createWrapper({}, true);
+      const request = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+        method: 'POST',
+        body: {timing: {}, data: [], meta: []},
       });
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('SelectorItem[value="7d"]').simulate('click');
+
+      await tick();
+      wrapper.update();
+      expect(request).toHaveBeenLastCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            range: '7d',
+            start: null,
+            end: null,
+            utc: null,
+          }),
+        })
+      );
+
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      wrapper.find('SelectorItem[value="24h"]').simulate('click');
+
+      await tick();
+      wrapper.update();
+
+      // Go to New Query and try to save
+      // We need this click because it updates component state :/
+      wrapper
+        .find('SidebarTabs .nav-tabs a')
+        .first()
+        .simulate('click');
+      // We need to update savedQueryId because there's also logic in cWRP of container
+      wrapper.setProps({
+        params: {savedQueryId: undefined},
+      });
+      await tick();
+      wrapper.update();
+
+      wrapper.find('button[aria-label="Save"]').simulate('click');
+      expect(addMock).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: expect.objectContaining({
+            range: '24h',
+          }),
+        })
+      );
     });
   });
 
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 6e372c18ce..29ae494b5b 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -398,7 +398,8 @@ describe('OrganizationEventsContainer', function() {
     expect(eventsMock).toHaveBeenLastCalledWith(
       '/organizations/org-slug/events/',
       expect.objectContaining({
-        query: {project: [2], statsPeriod: '14d'},
+        // This is not an array because of `mockRouterPush`
+        query: {project: '2', statsPeriod: '14d'},
       })
     );
   });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index e7263da350..64690e0d38 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -60,11 +60,8 @@ describe('OrganizationEvents', function() {
       mockRouterPush(wrapper, router);
     });
 
-    it('renders', function() {
-      expect(wrapper.find('PageContent')).toHaveLength(1);
-    });
-
     it('updates router when changing environments', async function() {
+      expect(wrapper.find('PageContent')).toHaveLength(1);
       expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([]);
 
       wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
@@ -83,7 +80,6 @@ describe('OrganizationEvents', function() {
         pathname: '/organizations/org-slug/events/',
         query: {
           environment: ['production'],
-          statsPeriod: '14d',
         },
       });
 
@@ -120,7 +116,6 @@ describe('OrganizationEvents', function() {
         pathname: '/organizations/org-slug/events/',
         query: {
           environment: ['production', 'staging'],
-          statsPeriod: '14d',
         },
       });
 
@@ -146,7 +141,6 @@ describe('OrganizationEvents', function() {
         pathname: '/organizations/org-slug/events/',
         query: {
           environment: [],
-          statsPeriod: '14d',
         },
       });
     });
@@ -168,7 +162,6 @@ describe('OrganizationEvents', function() {
         pathname: '/organizations/org-slug/events/',
         query: {
           project: [2],
-          statsPeriod: '14d',
         },
       });
       expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([2]);
@@ -199,7 +192,6 @@ describe('OrganizationEvents', function() {
         pathname: '/organizations/org-slug/events/',
         query: {
           project: [2, 3],
-          statsPeriod: '14d',
         },
       });
     });
@@ -216,6 +208,7 @@ describe('OrganizationEvents', function() {
         .find('DayCell')
         .at(0)
         .simulate('mouseUp');
+      expect(wrapper.find('UtcPicker Checkbox').prop('checked')).toBe(true);
 
       wrapper.find('TimeRangeSelector StyledChevron').simulate('click');
 
@@ -227,13 +220,18 @@ describe('OrganizationEvents', function() {
         query: {
           start: '2017-10-01T00:00:00',
           end: '2017-10-01T23:59:59',
-          utc: 'true',
+          utc: true,
         },
       });
 
       expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(start);
       expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(end);
       expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual(null);
+      // Open menu and make sure UTC is checked
+      wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+      await tick();
+      wrapper.update();
+      expect(wrapper.find('UtcPicker Checkbox').prop('checked')).toBe(true);
     });
 
     it('does not update router when toggling environment selector without changes', async function() {
@@ -246,7 +244,6 @@ describe('OrganizationEvents', function() {
             ...router.location,
             query: {
               environment: ['production'],
-              statsPeriod: '14d',
               utc: 'true',
             },
           },
@@ -264,7 +261,7 @@ describe('OrganizationEvents', function() {
     it('updates router when changing periods', async function() {
       expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(null);
       expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(null);
-      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual('14d');
+      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual(null);
 
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
@@ -283,7 +280,7 @@ describe('OrganizationEvents', function() {
         query: {
           end: '2017-10-16T22:41:20',
           start: '2017-10-02T22:41:20',
-          utc: 'true',
+          utc: true,
         },
       });
 
@@ -305,11 +302,13 @@ describe('OrganizationEvents', function() {
 
       expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual('7d');
 
+      // Note this is NOT called with utc true like the above because 1) it's a relative date
+      // and we do not need UTC value (which is default true in tests because timezone is set to UTC)
+      // and 2) we removed forcing a default value in url params so there is no explicit utc value
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
           statsPeriod: '7d',
-          utc: 'true',
         },
       });
 
@@ -318,7 +317,6 @@ describe('OrganizationEvents', function() {
           end: null,
           start: null,
           relative: '7d',
-          utc: true,
         })
       );
     });
diff --git a/tests/js/spec/views/userFeedback/__snapshots__/organizationUserFeedback.spec.jsx.snap b/tests/js/spec/views/userFeedback/__snapshots__/organizationUserFeedback.spec.jsx.snap
index 058ef1e169..e107215be7 100644
--- a/tests/js/spec/views/userFeedback/__snapshots__/organizationUserFeedback.spec.jsx.snap
+++ b/tests/js/spec/views/userFeedback/__snapshots__/organizationUserFeedback.spec.jsx.snap
@@ -473,27 +473,7 @@ exports[`OrganizationUserFeedback renders 1`] = `
                       "params": Object {
                         "orgId": "org-slug",
                       },
-                      "push": [MockFunction] {
-                        "calls": Array [
-                          Array [
-                            Object {
-                              "pathname": undefined,
-                              "query": Object {
-                                "environment": Array [],
-                                "project": Array [],
-                                "statsPeriod": "14d",
-                                "utc": "true",
-                              },
-                            },
-                          ],
-                        ],
-                        "results": Array [
-                          Object {
-                            "type": "return",
-                            "value": undefined,
-                          },
-                        ],
-                      },
+                      "push": [MockFunction],
                       "replace": [MockFunction],
                       "setRouteLeaveHook": [MockFunction],
                     }
@@ -623,27 +603,7 @@ exports[`OrganizationUserFeedback renders 1`] = `
                         "params": Object {
                           "orgId": "org-slug",
                         },
-                        "push": [MockFunction] {
-                          "calls": Array [
-                            Array [
-                              Object {
-                                "pathname": undefined,
-                                "query": Object {
-                                  "environment": Array [],
-                                  "project": Array [],
-                                  "statsPeriod": "14d",
-                                  "utc": "true",
-                                },
-                              },
-                            ],
-                          ],
-                          "results": Array [
-                            Object {
-                              "type": "return",
-                              "value": undefined,
-                            },
-                          ],
-                        },
+                        "push": [MockFunction],
                         "replace": [MockFunction],
                         "setRouteLeaveHook": [MockFunction],
                       }
@@ -652,9 +612,9 @@ exports[`OrganizationUserFeedback renders 1`] = `
                       Object {
                         "datetime": Object {
                           "end": null,
-                          "period": "14d",
+                          "period": null,
                           "start": null,
-                          "utc": true,
+                          "utc": null,
                         },
                         "environments": Array [],
                         "projects": Array [],
@@ -1671,7 +1631,7 @@ exports[`OrganizationUserFeedback renders 1`] = `
                             >
                               <TimeRangeSelector
                                 end={null}
-                                key="period:14d-start:null-end:null-utc:true"
+                                key="period:null-start:null-end:null-utc:null"
                                 onChange={[Function]}
                                 onUpdate={[Function]}
                                 organization={
@@ -1715,11 +1675,11 @@ exports[`OrganizationUserFeedback renders 1`] = `
                                     "teams": Array [],
                                   }
                                 }
-                                relative="14d"
+                                relative={null}
                                 showAbsolute={true}
                                 showRelative={true}
                                 start={null}
-                                utc={true}
+                                utc={null}
                               >
                                 <DropdownMenu
                                   closeOnEscape={true}
