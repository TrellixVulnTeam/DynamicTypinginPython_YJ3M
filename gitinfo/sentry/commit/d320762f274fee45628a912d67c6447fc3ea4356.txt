commit d320762f274fee45628a912d67c6447fc3ea4356
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Tue Oct 8 11:47:09 2019 -0700

    feat(request-join): Add organization setting (#14936)

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 5a402180a2..6092cdc57a 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -82,6 +82,7 @@ ORG_OPTIONS = (
         org_serializers.REQUIRE_SCRUB_IP_ADDRESS_DEFAULT,
     ),
     ("trustedRelays", "sentry:trusted-relays", list, org_serializers.TRUSTED_RELAYS_DEFAULT),
+    ("allowJoinRequests", "sentry:join_requests", bool, org_serializers.JOIN_REQUESTS_DEFAULT),
 )
 
 delete_logger = logging.getLogger("sentry.deletions.api")
@@ -136,6 +137,7 @@ class OrganizationSerializer(serializers.Serializer):
     isEarlyAdopter = serializers.BooleanField(required=False)
     require2FA = serializers.BooleanField(required=False)
     trustedRelays = ListField(child=serializers.CharField(), required=False)
+    allowJoinRequests = serializers.BooleanField(required=False)
 
     @memoize
     def _has_legacy_rate_limits(self):
diff --git a/src/sentry/api/endpoints/organization_join_request.py b/src/sentry/api/endpoints/organization_join_request.py
index 57ef183773..ed9a488dc2 100644
--- a/src/sentry/api/endpoints/organization_join_request.py
+++ b/src/sentry/api/endpoints/organization_join_request.py
@@ -23,11 +23,6 @@ class JoinRequestSerializer(serializers.Serializer):
 
 
 def create_organization_join_request(organization, email, ip_address=None):
-    # users can already join organizations with SSO enabled without an invite
-    # so no need to allow requests to join as well
-    if AuthProvider.objects.filter(organization=organization).exists():
-        return
-
     if OrganizationMember.objects.filter(
         Q(email__iexact=email) | Q(user__is_active=True, user__email__iexact=email),
         organization=organization,
@@ -59,6 +54,20 @@ class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
     permission_classes = []
 
     def post(self, request, organization):
+        assignment = experiments.get(org=organization, experiment_name=JOIN_REQUEST_EXPERIMENT)
+        if assignment != 1:
+            return Response(status=403)
+
+        if organization.get_option("sentry:join_requests") is False:
+            return Response(
+                {"detail": "Your organization does not allow join requests."}, status=403
+            )
+
+        # users can already join organizations with SSO enabled without an invite
+        # so no need to allow requests to join as well
+        if AuthProvider.objects.filter(organization=organization).exists():
+            return Response(status=403)
+
         ip_address = request.META["REMOTE_ADDR"]
 
         if ratelimiter.is_limited(
@@ -74,9 +83,5 @@ class OrganizationJoinRequestEndpoint(OrganizationEndpoint):
         result = serializer.validated_data
         email = result["email"]
 
-        assignment = experiments.get(org=organization, experiment_name=JOIN_REQUEST_EXPERIMENT)
-        if assignment != 1:
-            return Response(status=403)
-
         create_organization_join_request(organization, email, ip_address)
         return Response(status=204)
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 97edb1cc5e..06c1709acb 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -34,6 +34,7 @@ ATTACHMENTS_ROLE_DEFAULT = settings.SENTRY_DEFAULT_ROLE
 REQUIRE_SCRUB_IP_ADDRESS_DEFAULT = False
 SCRAPE_JAVASCRIPT_DEFAULT = True
 TRUSTED_RELAYS_DEFAULT = None
+JOIN_REQUESTS_DEFAULT = True
 
 
 @register(Organization)
@@ -189,6 +190,9 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
                 ),
                 "trustedRelays": obj.get_option("sentry:trusted-relays", TRUSTED_RELAYS_DEFAULT)
                 or [],
+                "allowJoinRequests": bool(
+                    obj.get_option("sentry:join_requests", JOIN_REQUESTS_DEFAULT)
+                ),
             }
         )
         context["access"] = access.scopes
diff --git a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
index 0a941b72d1..3702c63d88 100644
--- a/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/organizationGeneralSettings.jsx
@@ -74,7 +74,7 @@ const formGroups = [
         name: 'require2FA',
         type: 'boolean',
         label: t('Require Two-Factor Authentication'),
-        help: t('Require two-factor authentication for all members'),
+        help: t('Require and enforce two-factor authentication for all members'),
         confirm: {
           true: t(
             'This will remove all members without two-factor authentication' +
@@ -141,7 +141,7 @@ const formGroups = [
         autosize: true,
         maxRows: 10,
         placeholder: 'e.g. email',
-        label: t('Global sensitive fields'),
+        label: t('Global Sensitive Fields'),
         help: t(
           'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
         ),
@@ -158,7 +158,7 @@ const formGroups = [
         autosize: true,
         maxRows: 10,
         placeholder: t('e.g. business-email'),
-        label: t('Global safe fields'),
+        label: t('Global Safe Fields'),
         help: t(
           'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
         ),
@@ -189,7 +189,7 @@ const formGroups = [
             "Are you sure you want to disable sourcecode fetching for JavaScript events? This will affect Sentry's ability to aggregate issues if you're not already uploading sourcemaps as artifacts."
           ),
         },
-        label: t('Allow JavaScript source fetching'),
+        label: t('Allow JavaScript Source Fetching'),
         help: t('Allow Sentry to scrape missing JavaScript source context when possible'),
       },
       {
@@ -229,6 +229,20 @@ const formGroups = [
         setValue: val => (val && typeof val.join === 'function' && val.join('\n')) || '',
         visible: ({features}) => features.has('relay'),
       },
+      {
+        name: 'allowJoinRequests',
+        type: 'boolean',
+
+        label: t('Allow Join Requests'),
+        help: t('Allow users to request to join your organization'),
+        confirm: {
+          true: t(
+            'Are you sure you want to allow users to request to join your organization?'
+          ),
+        },
+        visible: ({experiments}) =>
+          !!experiments && experiments.JoinRequestExperiment === 1,
+      },
     ],
   },
 ];
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
index 3a8a538adc..c20fd0f858 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
@@ -20,6 +20,7 @@ type Props = {
   // TODO(ts): See if this is still in use
   access: any;
   features: any;
+  experiments: any;
 
   additionalFieldProps: {[key: string]: any};
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
index ba8f70373d..a6394c5060 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
@@ -62,6 +62,7 @@ class JsonForm extends React.Component<Props, State> {
 
     access: PropTypes.object,
     features: PropTypes.object,
+    experiments: PropTypes.object,
     renderFooter: PropTypes.func,
     /**
      * Renders inside of PanelBody
@@ -129,6 +130,7 @@ class JsonForm extends React.Component<Props, State> {
       access,
       disabled,
       features,
+      experiments,
       additionalFieldProps,
       renderFooter,
       renderHeader,
@@ -140,6 +142,7 @@ class JsonForm extends React.Component<Props, State> {
       access,
       disabled,
       features,
+      experiments,
       additionalFieldProps,
       renderFooter,
       renderHeader,
diff --git a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
index 28622e8192..44c6a6b92b 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationGeneralSettings/organizationSettingsForm.jsx
@@ -42,6 +42,7 @@ class OrganizationSettingsForm extends React.Component {
       >
         <PermissionAlert />
         <JsonForm
+          experiments={organization.experiments}
           features={new Set(organization.features)}
           access={access}
           location={this.props.location}
diff --git a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
index dd2f92eb21..a4aa2dd565 100644
--- a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
@@ -185,7 +185,7 @@ describe('OrganizationGeneralSettings', function() {
     );
   });
 
-  it('shows require2fa switch w/ feature flag', async function() {
+  it('shows require2fa switch', async function() {
     const wrapper = mount(
       <OrganizationGeneralSettings params={{orgId: org.slug}} />,
       TestStubs.routerContext()
@@ -293,4 +293,61 @@ describe('OrganizationGeneralSettings', function() {
     // eslint-disable-next-line no-console
     console.error.mockRestore();
   });
+
+  it('renders join request switch with experiment', async function() {
+    const organization = TestStubs.Organization({
+      experiments: {JoinRequestExperiment: 1},
+    });
+    const wrapper = mount(
+      <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
+      TestStubs.routerContext([{organization}])
+    );
+
+    wrapper.setState({loading: false});
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(true);
+  });
+
+  it('does not render join request switch not in experiment', async function() {
+    const organization = TestStubs.Organization({
+      experiments: {JoinRequestExperiment: -1},
+    });
+    const wrapper = mount(
+      <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
+      TestStubs.routerContext([{organization}])
+    );
+
+    wrapper.setState({loading: false});
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(false);
+  });
+
+  it('does not render join request switch in experiment control', async function() {
+    const organization = TestStubs.Organization({
+      experiments: {JoinRequestExperiment: 0},
+    });
+    const wrapper = mount(
+      <OrganizationGeneralSettings params={{orgId: organization.slug}} />,
+      TestStubs.routerContext([{organization}])
+    );
+
+    wrapper.setState({loading: false});
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(false);
+  });
+
+  it('does not render join request switch without experiments', async function() {
+    const wrapper = mount(
+      <OrganizationGeneralSettings params={{orgId: org.slug}} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.setState({loading: false});
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Switch[name="allowJoinRequests"]').exists()).toBe(false);
+  });
 });
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 4bf508f864..acacef7b83 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -203,6 +203,7 @@ class OrganizationUpdateTest(APITestCase):
             "scrapeJavaScript": False,
             "defaultRole": "owner",
             "require2FA": True,
+            "allowJoinRequests": False,
         }
 
         # needed to set require2FA
@@ -231,6 +232,7 @@ class OrganizationUpdateTest(APITestCase):
         assert options.get("sentry:safe_fields") == ["email"]
         assert options.get("sentry:store_crash_reports") is True
         assert options.get("sentry:scrape_javascript") is False
+        assert options.get("sentry:join_requests") is False
 
         # log created
         log = AuditLogEntry.objects.get(organization=org)
@@ -249,6 +251,7 @@ class OrganizationUpdateTest(APITestCase):
         assert u"to {}".format(data["safeFields"]) in log.data["safeFields"]
         assert u"to {}".format(data["scrubIPAddresses"]) in log.data["scrubIPAddresses"]
         assert u"to {}".format(data["scrapeJavaScript"]) in log.data["scrapeJavaScript"]
+        assert u"to {}".format(data["allowJoinRequests"]) in log.data["allowJoinRequests"]
 
     def test_setting_trusted_relays_forbidden(self):
         org = self.create_organization(owner=self.user)
diff --git a/tests/sentry/api/endpoints/test_organization_join_request.py b/tests/sentry/api/endpoints/test_organization_join_request.py
index 80fac46996..968ec5c393 100644
--- a/tests/sentry/api/endpoints/test_organization_join_request.py
+++ b/tests/sentry/api/endpoints/test_organization_join_request.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from exam import fixture
 from mock import patch
 
-from sentry.models import AuthProvider, InviteStatus, OrganizationMember
+from sentry.models import AuthProvider, InviteStatus, OrganizationOption, OrganizationMember
 from sentry.testutils import APITestCase
 from sentry.api.endpoints.organization_join_request import JOIN_REQUEST_EXPERIMENT
 
@@ -21,43 +21,60 @@ class OrganizationJoinRequestTest(APITestCase):
     def owner(self):
         return OrganizationMember.objects.get(user=self.user, organization=self.org)
 
-    def test_email_required(self):
+    def test_invalid_org_slug(self):
+        resp = self.get_response("invalid-slug", email=self.email)
+        assert resp.status_code == 404
+
+    def test_experiment(self):
+        with patch("sentry.experiments.get", return_value=-1) as mock_experiment:
+            resp = self.get_response(self.org.slug, email=self.email)
+            assert resp.status_code == 403
+
+        mock_experiment.assert_called_once_with(
+            org=self.org, experiment_name=JOIN_REQUEST_EXPERIMENT
+        )
+
+        with patch("sentry.experiments.get", return_value=0):
+            resp = self.get_response(self.org.slug, email=self.email)
+            assert resp.status_code == 403
+
+    @patch("sentry.experiments.get", return_value=1)
+    def test_email_required(self, mock_experiment):
         resp = self.get_response(self.org.slug)
         assert resp.status_code == 400
         assert resp.data["email"][0] == "This field is required."
 
-    def test_invalid_email(self):
+    @patch("sentry.experiments.get", return_value=1)
+    def test_invalid_email(self, mock_experiment):
         resp = self.get_response(self.org.slug, email="invalid-email")
+        assert resp.status_code == 400
         assert resp.data["email"][0] == "Enter a valid email address."
 
-    def test_invalid_org_slug(self):
-        resp = self.get_response("invalid-slug", email=self.email)
-        assert resp.status_code == 404
+    @patch("sentry.experiments.get", return_value=1)
+    def test_organization_setting_disabled(self, mock_experiment):
+        OrganizationOption.objects.create(
+            organization_id=self.org.id, key="sentry:join_requests", value=False
+        )
+
+        resp = self.get_response(self.org.slug)
+        assert resp.status_code == 403
 
     @patch(
         "sentry.api.endpoints.organization_join_request.ratelimiter.is_limited", return_value=True
     )
-    def test_ratelimit(self, is_limited):
+    @patch("sentry.experiments.get", return_value=1)
+    def test_ratelimit(self, mock_experiment, is_limited):
         resp = self.get_response(self.org.slug, email=self.email)
         assert resp.status_code == 429
         assert resp.data["detail"] == "Rate limit exceeded."
 
-    @patch("sentry.experiments.get", return_value=-1)
-    def test_experiment(self, mock_experiment):
-        resp = self.get_response(self.org.slug, email=self.email)
-        assert resp.status_code == 403
-
-        mock_experiment.assert_called_once_with(
-            org=self.org, experiment_name=JOIN_REQUEST_EXPERIMENT
-        )
-
     @patch("sentry.api.endpoints.organization_join_request.logger")
     @patch("sentry.experiments.get", return_value=1)
     def test_org_sso_enabled(self, mock_experiment, mock_log):
         AuthProvider.objects.create(organization=self.org, provider="google")
 
         resp = self.get_response(self.org.slug, email=self.email)
-        assert resp.status_code == 204
+        assert resp.status_code == 403
 
         member = OrganizationMember.objects.get(organization=self.org)
         assert member == self.owner
