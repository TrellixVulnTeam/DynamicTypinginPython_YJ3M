commit 77f49f24028587b621e4636b605cfa5f075987bb
Author: Dena Mwangi <dena@getsentry.com>
Date:   Fri Apr 13 13:37:58 2018 -0700

    feat(assistant): Add an assistant manager (#8022)
    
    * Add assistant manager

diff --git a/src/sentry/api/endpoints/assistant.py b/src/sentry/api/endpoints/assistant.py
index 393c8f02dd..b747a59e3d 100644
--- a/src/sentry/api/endpoints/assistant.py
+++ b/src/sentry/api/endpoints/assistant.py
@@ -8,35 +8,41 @@ from rest_framework.permissions import IsAuthenticated
 from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
-from sentry.assistant.guides import GUIDES
 from sentry.models import AssistantActivity
+from sentry.assistant import manager
 
-
-VALID_GUIDE_IDS = frozenset(v['id'] for v in GUIDES.values())
 VALID_STATUSES = frozenset(('viewed', 'dismissed'))
 
 
 class AssistantSerializer(serializers.Serializer):
-    guide_id = serializers.ChoiceField(
-        choices=zip(VALID_GUIDE_IDS, VALID_GUIDE_IDS),
-        required=True,
-    )
+    guide_id = serializers.IntegerField(required=True)
     status = serializers.ChoiceField(
         choices=zip(VALID_STATUSES, VALID_STATUSES),
         required=True,
     )
     useful = serializers.BooleanField()
 
+    def validate_guide_id(self, attrs, source):
+        value = attrs[source]
+        valid_ids = manager.get_valid_ids()
+
+        if not value:
+            raise serializers.ValidationError('Assistant guide id is required')
+        if value not in valid_ids:
+            raise serializers.ValidationError('Not a valid assistant guide id')
+        return attrs
+
 
 class AssistantEndpoint(Endpoint):
     permission_classes = (IsAuthenticated, )
 
     def get(self, request):
         """Return all the guides the user has not viewed or dismissed."""
+        guides = manager.all()
         exclude_ids = set(AssistantActivity.objects.filter(
             user=request.user,
         ).values_list('guide_id', flat=True))
-        result = {k: v for k, v in GUIDES.items() if v['id'] not in exclude_ids}
+        result = {k: v for k, v in guides.items() if v['id'] not in exclude_ids}
 
         return Response(result)
 
diff --git a/src/sentry/assistant/__init__.py b/src/sentry/assistant/__init__.py
index c3961685ab..c37d611ce5 100644
--- a/src/sentry/assistant/__init__.py
+++ b/src/sentry/assistant/__init__.py
@@ -1 +1,7 @@
 from __future__ import absolute_import
+
+from .manager import AssistantManager
+from .guides import GUIDES
+
+manager = AssistantManager()
+manager.add(GUIDES)
diff --git a/src/sentry/assistant/manager.py b/src/sentry/assistant/manager.py
new file mode 100644
index 0000000000..3407930f6e
--- /dev/null
+++ b/src/sentry/assistant/manager.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+import six
+
+
+class AssistantManager(object):
+    def __init__(self):
+        self._guides = {}
+
+    def add(self, guides):
+        for k, v in six.iteritems(guides):
+            self._guides[k] = v
+
+    def get_valid_ids(self):
+        return list(v['id'] for k, v in six.iteritems(self._guides))
+
+    def all(self):
+        return self._guides
diff --git a/tests/sentry/api/endpoints/test_assistant.py b/tests/sentry/api/endpoints/test_assistant.py
index 5fca503f1b..cdd663f8a6 100644
--- a/tests/sentry/api/endpoints/test_assistant.py
+++ b/tests/sentry/api/endpoints/test_assistant.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.assistant.guides import GUIDES
+from sentry.assistant import manager
 from sentry.testutils import APITestCase
 
 
@@ -11,6 +11,7 @@ class AssistantActivity(APITestCase):
         super(AssistantActivity, self).setUp()
         self.login_as(user=self.user)
         self.path = reverse('sentry-api-0-assistant')
+        self.guides = manager.all()
 
     def test_invalid_inputs(self):
         # Invalid guide id.
@@ -29,7 +30,7 @@ class AssistantActivity(APITestCase):
     def test_activity(self):
         resp = self.client.get(self.path)
         assert resp.status_code == 200
-        assert resp.data == GUIDES
+        assert resp.data == self.guides
 
         # Dismiss the guide and make sure it is not returned again.
         resp = self.client.put(self.path, {
@@ -39,11 +40,11 @@ class AssistantActivity(APITestCase):
         assert resp.status_code == 201
         resp = self.client.get(self.path)
         assert resp.status_code == 200
-        assert resp.data == {k: v for k, v in GUIDES.items() if v['id'] != 2}
+        assert resp.data == {k: v for k, v in self.guides.items() if v['id'] != 2}
 
     def test_validate_guides(self):
         # Steps in different guides should not have the same target.
-        guides = GUIDES.values()
+        guides = self.guides.values()
         for i in range(len(guides)):
             for j in range(0, i):
                 steps_i = set(s['target'] for s in guides[i]['steps'])
