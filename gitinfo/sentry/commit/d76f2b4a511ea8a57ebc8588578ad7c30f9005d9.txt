commit d76f2b4a511ea8a57ebc8588578ad7c30f9005d9
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 10 19:01:53 2015 -0700

    Basic join/leave UI flow

diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
new file mode 100644
index 0000000000..c7b164e320
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -0,0 +1,12 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var TeamActions = Reflux.createActions([
+  "update",
+  "updateError",
+  "updateSuccess"
+]);
+
+
+module.exports = TeamActions;
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 0b98395885..055aff68c5 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -2,6 +2,7 @@
 
 var $ = require("jquery");
 var GroupActions = require("./actions/groupActions");
+var TeamActions = require("./actions/teamActions");
 
 class Request {
   constructor(xhr) {
@@ -163,6 +164,40 @@ class Client {
       }
     });
   }
+
+  joinTeam(params) {
+    var path = "/organizations/" + params.orgId + "/members/" + (params.memberId || 'me') + "/teams/" + params.teamId + "/";
+    var id = this.uniqueId();
+
+    TeamActions.update(id, params.teamId);
+
+    return this.request(path, {
+      method: "POST",
+      success: (response) => {
+        TeamActions.updateSuccess(id, params.teamId, response);
+      },
+      error: (error) => {
+        TeamActions.updateError(id, params.teamId, error);
+      }
+    });
+  }
+
+  leaveTeam(params) {
+    var path = "/organizations/" + params.orgId + "/members/" + (params.memberId || 'me') + "/teams/" + params.teamId + "/";
+    var id = this.uniqueId();
+
+    TeamActions.update(id, params.teamId);
+
+    return this.request(path, {
+      method: "DELETE",
+      success: (response) => {
+        TeamActions.updateSuccess(id, params.teamId, response);
+      },
+      error: (error) => {
+        TeamActions.updateError(id, params.teamId, error);
+      }
+    });
+  }
 }
 
 module.exports = new Client();
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index b8920c0f1a..cd1c0f14cc 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -2,9 +2,13 @@
 
 var Reflux = require("reflux");
 
+var TeamActions = require("../actions/teamActions");
+
 var TeamStore = Reflux.createStore({
   init() {
     this.items = [];
+
+    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
   },
 
   loadInitialData(items) {
@@ -12,6 +16,19 @@ var TeamStore = Reflux.createStore({
     this.trigger(this.items, 'initial');
   },
 
+  onUpdateSuccess(changeId, itemId, response) {
+    if (!response) {
+      return;
+    }
+    var item = this.getBySlug(itemId);
+    if (!item) {
+      this.items.push(response);
+    } else {
+      $.extend(true, item, response);
+    }
+    this.trigger(this.items, 'update');
+  },
+
   getById(id) {
     id = '' + id;
     for (var i=0; i<this.items.length; i++) {
diff --git a/src/sentry/static/sentry/app/views/organizationTeams.jsx b/src/sentry/static/sentry/app/views/organizationTeams.jsx
index 9dc055cc45..6e19f78edc 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams.jsx
@@ -12,13 +12,19 @@ var PropTypes = require("../proptypes");
 var TeamStore = require("../stores/teamStore");
 
 var ExpandedTeamList = React.createClass({
-  mixins: [PureRenderMixin],
-
   propTypes: {
     organization: PropTypes.Organization.isRequired,
     teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired
   },
 
+  leaveTeam(team) {
+    // TODO(dcramer): handle loading indicator
+    api.leaveTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug
+    });
+  },
+
   render() {
     var org = this.props.organization;
     var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
@@ -35,7 +41,8 @@ var ExpandedTeamList = React.createClass({
               <a className="new-project" href={urlPrefix + '/projects/new/'}>
                 New Project
               </a>
-              <a className="leave-team" href="#">
+              <a className="leave-team"
+                 onClick={this.leaveTeam.bind(this, team)}>
                 Leave Team
               </a>
               <a className="team-settings" href={urlPrefix + '/teams/' + team.slug + '/settings/'}>
@@ -86,11 +93,26 @@ var ExpandedTeamList = React.createClass({
 });
 
 var SlimTeamList = React.createClass({
-  mixins: [PureRenderMixin],
-
   propTypes: {
     organization: PropTypes.Organization.isRequired,
-    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired
+    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired,
+    openMembership: React.PropTypes.bool
+  },
+
+  joinTeam(team) {
+    // TODO(dcramer): handle 'requested' case and loading indicator
+    api.joinTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug
+    });
+  },
+
+  leaveTeam(team) {
+    // TODO(dcramer): handle loading indicator
+    api.leaveTeam({
+      orgId: this.props.organization.slug,
+      teamId: team.slug
+    });
   },
 
   render() {
@@ -107,10 +129,17 @@ var SlimTeamList = React.createClass({
           <div className="box-header">
             <div className="pull-right actions">
               {team.isMember ?
-                <a className="leave-team" href="#">Leave Team</a>
+                <a className="leave-team"
+                   onClick={this.leaveTeam.bind(this, team)}>Leave Team</a>
+              : (team.isPending ?
+                <a className="join-team">Request Pending</a>
+              : (this.props.openMembership ?
+                <a className="join-team"
+                   onClick={this.joinTeam.bind(this, team)}>Join Team</a>
               :
-                <a className="join-team" href="#">Request Access</a>
-              }
+                <a className="join-team"
+                   onClick={this.joinTeam.bind(this, team)}>Request Access</a>
+              ))}
             </div>
             <h3>{team.name}</h3>
           </div>
@@ -133,14 +162,13 @@ var SlimTeamList = React.createClass({
 var OrganizationTeams = React.createClass({
   mixins: [
     OrganizationState,
-    PureRenderMixin,
     Reflux.listenTo(TeamStore, "onTeamListChange")
   ],
 
   getInitialState() {
     return {
       activeNav: 'your-teams',
-      teamList: []
+      teamList: TeamStore.getAll()
     };
   },
 
@@ -159,6 +187,8 @@ var OrganizationTeams = React.createClass({
   },
 
   render() {
+    var access = this.getAccess();
+    var features = this.getFeatures();
     var org = this.getOrganization();
     var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
 
@@ -183,10 +213,12 @@ var OrganizationTeams = React.createClass({
             </li>
           </ul>
           {activeNav == 'your-teams' ?
-            <ExpandedTeamList organization={org} teamList={activeTeams} />
+            <ExpandedTeamList
+                organization={org} teamList={activeTeams} />
           :
             <SlimTeamList
-                organization={org} teamList={allTeams} />
+                organization={org} teamList={allTeams}
+                openMembership={features.has('open-membership') || access.has('org:write')} />
           }
         </div>
       </OrganizationHomeContainer>
