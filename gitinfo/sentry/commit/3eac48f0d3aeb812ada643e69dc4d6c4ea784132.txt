commit 3eac48f0d3aeb812ada643e69dc4d6c4ea784132
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jan 23 11:49:45 2020 -0800

    feat(workflow): Change Metric Alert status badges (#16531)
    
    Add a prop to make the status have a smaller text size.

diff --git a/src/sentry/static/sentry/app/views/incidents/details/header.tsx b/src/sentry/static/sentry/app/views/incidents/details/header.tsx
index b6d7fe2c32..f5c24e4fed 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/header.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/header.tsx
@@ -44,17 +44,20 @@ export default class DetailsHeader extends React.Component<Props> {
     return (
       <Access
         access={['org:write']}
-        renderNoAccessMessage={() => (incident ? <Status incident={incident} /> : null)}
+        renderNoAccessMessage={() =>
+          incident ? <Status isSmall incident={incident} /> : null
+        }
       >
         <DropdownControl
           data-test-id="status-dropdown"
-          label={incident && <Status incident={incident} />}
-          menuWidth="160px"
+          label={incident && <Status isSmall incident={incident} />}
+          menuWidth="180px"
           alignRight
+          disabled={!isIncidentOpen}
           buttonProps={{size: 'small', disabled: !incident}}
         >
           <StyledMenuItem onSelect={onStatusChange}>
-            {isIncidentOpen ? t('Close this incident') : t('Reopen this incident')}
+            <ResolveIcon src="icon-circle-check" /> {t('Resolve this incident')}
           </StyledMenuItem>
         </DropdownControl>
       </Access>
@@ -241,7 +244,8 @@ const Chevron = styled(InlineSvg)`
 const StyledMenuItem = styled(MenuItem)`
   font-size: ${p => p.theme.fontSizeMedium};
   text-align: left;
-  padding: ${space(1)};
+  padding: ${space(1)} 12px; /* To match dropdown */
+  white-space: nowrap;
 `;
 
 const OpenLink = styled(Link)`
@@ -250,3 +254,8 @@ const OpenLink = styled(Link)`
   color: ${p => p.theme.gray2};
   margin-left: ${space(1)};
 `;
+
+const ResolveIcon = styled(InlineSvg)`
+  color: ${p => p.theme.greenLight};
+  margin-right: ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/incidents/status.tsx b/src/sentry/static/sentry/app/views/incidents/status.tsx
index 98fb92c33a..a7620a158e 100644
--- a/src/sentry/static/sentry/app/views/incidents/status.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/status.tsx
@@ -1,10 +1,8 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
-import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 
 import {Incident, IncidentStatus} from './types';
@@ -12,49 +10,44 @@ import {Incident, IncidentStatus} from './types';
 type Props = {
   className?: string;
   incident: Incident;
+  isSmall?: boolean;
 };
 
-export default class Status extends React.Component<Props> {
-  static propTypes = {
-    className: PropTypes.string,
-    incident: SentryTypes.Incident,
-  };
-
-  render() {
-    const {className, incident} = this.props;
-    const isIncidentOpen = incident.status !== IncidentStatus.CLOSED;
-
-    // TODO(incidents): Make this work
-    const status = !isIncidentOpen
-      ? 'resolved'
-      : incident.status === IncidentStatus.CREATED
-      ? 'critical'
-      : 'warning';
-    const isResolved = status === 'resolved';
-    const isCritical = status === 'critical';
-
-    const icon = isResolved
-      ? 'icon-circle-check'
-      : isCritical
-      ? 'icon-circle-exclamation'
-      : 'icon-warning-sm';
-
-    const text = isResolved ? t('Resolved') : isCritical ? t('Critical') : t('Warning');
+const Status: React.FC<Props> = ({className, incident, isSmall}: Props) => {
+  const isIncidentOpen = incident.status !== IncidentStatus.CLOSED;
+
+  // TODO(incidents): Make this work
+  const status = !isIncidentOpen
+    ? 'resolved'
+    : incident.status === IncidentStatus.CREATED
+    ? 'critical'
+    : 'warning';
+  const isResolved = status === 'resolved';
+  const isCritical = status === 'critical';
+
+  const icon = isResolved
+    ? 'icon-circle-check'
+    : isCritical
+    ? 'icon-circle-exclamation'
+    : 'icon-warning-sm';
+
+  const text = isResolved ? t('Resolved') : isCritical ? t('Critical') : t('Warning');
+
+  return (
+    <Wrapper status={status} className={className} isSmall={!!isSmall}>
+      <Icon src={icon} status={status} isOpen={isIncidentOpen} />
+      {text}
+    </Wrapper>
+  );
+};
 
-    return (
-      <Wrapper status={status} className={className}>
-        <Icon src={icon} status={status} isOpen={isIncidentOpen} />
-        {text}
-      </Wrapper>
-    );
-  }
-}
+export default Status;
 
 type StatusType = 'warning' | 'critical' | 'resolved';
 
 type WrapperProps = {status: StatusType};
 
-function getHighlight({theme, status}) {
+function getColor({theme, status}) {
   if (status === 'resolved') {
     return theme.greenDark;
   } else if (status === 'warning') {
@@ -64,31 +57,15 @@ function getHighlight({theme, status}) {
   return theme.redDark;
 }
 
-function getColor({theme, status}) {
-  if (status === 'resolved') {
-    return theme.greenLightest;
-  } else if (status === 'warning') {
-    return theme.yellowLightest;
-  }
-
-  return theme.redLightest;
-}
-
-const Wrapper = styled('div')<WrapperProps>`
+const Wrapper = styled('div')<WrapperProps & {isSmall: boolean}>`
   display: flex;
   align-items: center;
   justify-self: flex-start;
-  background-color: ${getColor};
-  border: 1px solid ${getHighlight};
-  border-radius: ${p => p.theme.borderRadius};
-  color: ${getHighlight};
-  padding: 0 ${space(0.5)};
-  font-size: ${p => p.theme.fontSizeSmall};
-  text-transform: uppercase;
+  ${p => p.isSmall && `font-size: ${p.theme.fontSizeSmall};`};
 `;
 
 const Icon = styled(InlineSvg)<WrapperProps & {isOpen: boolean}>`
-  color: ${getHighlight};
+  color: ${getColor};
   margin-right: ${space(0.5)};
   font-size: ${p => p.theme.fontSizeMedium};
 `;
