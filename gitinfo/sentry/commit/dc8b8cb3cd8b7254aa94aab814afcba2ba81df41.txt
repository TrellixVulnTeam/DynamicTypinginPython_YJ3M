commit dc8b8cb3cd8b7254aa94aab814afcba2ba81df41
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sun Jul 3 14:27:46 2016 +0300

    Implemented basic support for flexible symbolication

diff --git a/src/sentry/interfaces/debug_images.py b/src/sentry/interfaces/debug_images.py
index 987df3bd26..f7eba15e6f 100644
--- a/src/sentry/interfaces/debug_images.py
+++ b/src/sentry/interfaces/debug_images.py
@@ -61,7 +61,7 @@ class DebugImages(Interface):
             raise InterfaceValidationError('Unknown image type %r' % image)
         rv = func(image)
         assert 'uuid' in rv, 'debug image normalizer did not produce a UUID'
-        assert 'object_addr' in rv, 'debug image normalizer did not ' \
+        assert 'image_addr' in rv, 'debug image normalizer did not ' \
             'produce an object address'
         rv['type'] = ty
         return rv
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 0e2274348b..9e30255c12 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -288,7 +288,7 @@ class Frame(Interface):
             'module': trim(module, 256),
             'function': trim(function, 256),
             'package': trim(data.get('package'), 256),
-            'image_addr': trim(data.get('image_addr'), 16),
+            'object_addr': trim(data.get('object_addr'), 16),
             'symbol_addr': trim(data.get('symbol_addr'), 16),
             'instruction_addr': trim(data.get('instruction_addr'), 16),
             'instruction_offset': instruction_offset,
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index fd12969c85..ea094ae166 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -1,4 +1,4 @@
-from __future__ import absolute_import, print_function
+from __future__ import absolute_import
 
 import os
 import re
@@ -9,7 +9,7 @@ import posixpath
 from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, have_symsynd
-from sentry.lang.native.utils import find_all_stacktraces, \
+from sentry.lang.native.utils import parse_addr, find_all_stacktraces, \
     find_apple_crash_report_referenced_images, \
     find_stacktrace_referenced_images, get_sdk_from_apple_system_info, \
     APPLE_SDK_MAPPING
@@ -131,10 +131,10 @@ def is_in_app(frame, app_uuid=None):
         frame_uuid = frame.get('uuid')
         if frame_uuid == app_uuid:
             return True
-    object_name = frame.get('object_name', '')
-    if not object_name.startswith(APP_BUNDLE_PATHS):
+    fn = frame.get('package', '')
+    if not fn.startswith(APP_BUNDLE_PATHS):
         return False
-    if object_name.endswith(NON_APP_FRAMEWORKS):
+    if fn.endswith(NON_APP_FRAMEWORKS):
         return False
     return True
 
@@ -161,7 +161,6 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
             offset = frame['instruction_addr'] - frame['symbol_addr']
 
         cframe = {
-            'in_app': is_in_app(frame, app_uuid),
             'abs_path': fn,
             'filename': fn and posixpath.basename(fn) or None,
             # This can come back as `None` from the symbolizer, in which
@@ -175,6 +174,7 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
             'instruction_offset': offset,
             'lineno': lineno,
         }
+        cframe['in_app'] = is_in_app(cframe, app_uuid)
         converted_frames.append(cframe)
         longest_addr = max(longest_addr, len(cframe['symbol_addr']),
                            len(cframe['instruction_addr']))
@@ -387,10 +387,13 @@ def resolve_frame_symbols(data):
     processed_frames = []
     with sym:
         for stacktrace in stacktraces:
+            set_in_app = False
             for idx, frame in enumerate(stacktrace['frames']):
-                if 'image_addr' not in frame or \
-                   'instruction_addr' not in frame:
+                if 'object_addr' not in frame or \
+                   'instruction_addr' not in frame or \
+                   'symbol_addr' not in frame:
                     continue
+                set_in_app = frame.get('in_app') is None
                 try:
                     sfrm = sym.symbolize_frame(frame, sdk_info,
                                                report_error=report_error)
@@ -403,14 +406,15 @@ def resolve_frame_symbols(data):
                         frame['lineno'] = sfrm['line']
                     else:
                         frame['instruction_offset'] = \
-                            sfrm['instruction_addr'] - sfrm['symbol_addr']
+                            parse_addr(sfrm['instruction_addr']) - \
+                            parse_addr(sfrm['symbol_addr'])
                     if sfrm.get('column') is not None:
                         frame['colno'] = sfrm['column']
                     frame['package'] = sfrm['object_name']
                     frame['symbol_addr'] = '%x' % sfrm['symbol_addr']
                     frame['instruction_addr'] = '%x' % sfrm['instruction_addr']
-                    longest_addr = max(longest_addr, len(sfrm['symbol_addr']),
-                                       len(sfrm['instruction_addr']))
+                    longest_addr = max(longest_addr, len(frame['symbol_addr']),
+                                       len(frame['instruction_addr']))
                     processed_frames.append(frame)
                 except Exception as e:
                     logger.exception('Failed to symbolicate')
@@ -419,6 +423,11 @@ def resolve_frame_symbols(data):
                         'error': '%s: %s' % (e.__class__.__name__, str(e)),
                     })
 
+            if set_in_app:
+                for frame in stacktrace['frames']:
+                    if frame.get('in_app') is None:
+                        frame['in_app'] = is_in_app(frame)
+
     # Pad out addresses to be of the same length and add prefix
     for frame in processed_frames:
         for key in 'symbol_addr', 'instruction_addr':
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 3c1fe72110..9aad08a9e3 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -62,7 +62,7 @@ def find_all_stacktraces(data):
 
     threads = data.get('threads')
     if threads:
-        for thread in threads:
+        for thread in threads['values']:
             stacktrace = thread.get('stacktrace')
             if stacktrace:
                 rv.append(stacktrace)
@@ -87,3 +87,15 @@ def get_sdk_from_apple_system_info(info):
         'version_minor': system_version[1],
         'version_patchlevel': system_version[2],
     }
+
+
+def parse_addr(x):
+    if x is None:
+        return 0
+    if isinstance(x, (int, long)):
+        return x
+    if isinstance(x, basestring):
+        if x[:2] == '0x':
+            return int(x[2:], 16)
+        return int(x)
+    raise ValueError('Unsupported address format %r' % (x,))
