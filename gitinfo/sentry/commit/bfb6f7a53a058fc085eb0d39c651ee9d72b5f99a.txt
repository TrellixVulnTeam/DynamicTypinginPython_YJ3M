commit bfb6f7a53a058fc085eb0d39c651ee9d72b5f99a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jan 23 17:02:49 2020 -0800

    ref: Simplify event.message field (#16557)
    
    Since we no longer need to also support Django Event, we can now
    always use the event.search_message field to refer to the search message
    rather than saving it into event.message.
    
    Now event.message is always the same as event.real_message and we can remove the EventCompatibilityProxy

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index d524d2cd31..f9d015e6b4 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -566,14 +566,6 @@ class EventManager(object):
         data.update(materialized_metadata)
         data["culprit"] = culprit
 
-        # index components into ``Event.message``
-        # See GH-3248
-        # TODO: We temporarily save the search message into the message field to
-        # maintain backward compatibility with the Django event model. Once
-        # "store.use-django-event" is turned off for good, we can just reference
-        # event.search_message everywhere.
-        event.message = event.search_message
-
         received_timestamp = event.data.get("received") or float(event.datetime.strftime("%s"))
 
         if not issueless_event:
@@ -584,7 +576,7 @@ class EventManager(object):
             group_metadata["last_received"] = received_timestamp
             kwargs = {
                 "platform": platform,
-                "message": event.message,
+                "message": event.search_message,
                 "culprit": culprit,
                 "logger": logger_name,
                 "level": LOG_LEVELS_MAP.get(level),
@@ -956,8 +948,8 @@ class EventManager(object):
     def _process_existing_aggregate(self, group, event, data, release):
         date = max(event.datetime, group.last_seen)
         extra = {"last_seen": date, "score": ScoreClause(group), "data": data["data"]}
-        if event.message and event.message != group.message:
-            extra["message"] = event.message
+        if event.search_message and event.search_message != group.message:
+            extra["message"] = event.search_message
         if group.level != data["level"]:
             extra["level"] = data["level"]
         if group.culprit != data["culprit"]:
diff --git a/src/sentry/eventstore/models.py b/src/sentry/eventstore/models.py
index 78f3f25f05..002010e9b2 100644
--- a/src/sentry/eventstore/models.py
+++ b/src/sentry/eventstore/models.py
@@ -85,21 +85,11 @@ class Event(object):
 
     @property
     def message(self):
-        if hasattr(self, "_message"):
-            return self._message
-        column = self.__get_column_name(Columns.MESSAGE)
-        if column in self._snuba_data:
-            return self._snuba_data[column]
-
-        return self.real_message
-
-    @message.setter
-    def message(self, value):
-        """
-        This can be removed once Django Event is removed and we no longer need to manually
-        update this field in event_manager.save().
-        """
-        self._message = value
+        return (
+            get_path(self.data, "logentry", "formatted")
+            or get_path(self.data, "logentry", "message")
+            or ""
+        )
 
     @property
     def datetime(self):
@@ -392,17 +382,6 @@ class Event(object):
         # TODO: This *might* need to be protected from an IndexError?
         return self.get_hashes()[0]
 
-    @property
-    def real_message(self):
-        # XXX(mitsuhiko): this is a transitional attribute that should be
-        # removed.  `message` will be renamed to `search_message` and this
-        # will become `message`.
-        return (
-            get_path(self.data, "logentry", "formatted")
-            or get_path(self.data, "logentry", "message")
-            or ""
-        )
-
     @property
     def organization(self):
         return self.project.organization
@@ -438,7 +417,7 @@ class Event(object):
         data["release"] = self.release
         data["dist"] = self.dist
         data["platform"] = self.platform
-        data["message"] = self.real_message
+        data["message"] = self.message
         data["datetime"] = self.datetime
         data["tags"] = [(k.split("sentry:", 1)[-1], v) for (k, v) in self.tags]
         for k, v in sorted(six.iteritems(self.data)):
@@ -459,7 +438,7 @@ class Event(object):
 
         return data
 
-    @property
+    @memoize
     def search_message(self):
         """
         The internal search_message attribute is only used for search purposes.
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 7b22a449e0..4d84ef8f89 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -59,7 +59,7 @@ class Template(Interface):
         return "\n".join(result)
 
     def get_traceback(self, event, context):
-        result = [event.real_message, "", 'File "%s", line %s' % (self.filename, self.lineno), ""]
+        result = [event.message, "", 'File "%s", line %s' % (self.filename, self.lineno), ""]
         result.extend([n[1].strip("\n") if n[1] else "" for n in context])
 
         return "\n".join(result)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index c898bfff40..fd8a5d0871 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -174,10 +174,6 @@ register("store.eventstream-per-type-topic", default=False, flags=FLAG_PRIORITIZ
 # regards to filter responses.
 register("store.lie-about-filter-status", default=False)
 
-# Use Django event
-register("store.use-django-event", default=False, flags=FLAG_PRIORITIZE_DISK)
-register("eventstream.use-django-event", default=False, flags=FLAG_PRIORITIZE_DISK)
-
 # Symbolicator refactors
 # - Disabling minidump stackwalking in endpoints
 register("symbolicator.minidump-refactor-projects-opt-in", type=Sequence, default=[])  # unused
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index 86886f0287..63281eb3dc 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -85,7 +85,7 @@ class WebHooksPlugin(notify.NotificationPlugin):
             "logger": event.get_tag("logger"),
             "level": event.get_tag("level"),
             "culprit": group.culprit,
-            "message": event.real_message,
+            "message": event.message,
             "url": group.get_absolute_url(params={"referrer": "webhooks_plugin"}),
             "triggering_rules": triggering_rules,
         }
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index a12bf4ef79..d0dd0334e3 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -99,8 +99,7 @@ class EventAttributeCondition(EventCondition):
         if path[0] == "message":
             if len(path) != 1:
                 return []
-            return [event.real_message]
-
+            return [event.message]
         elif path[0] == "environment":
             return [event.get_tag("environment")]
 
diff --git a/src/sentry/rules/processor.py b/src/sentry/rules/processor.py
index da2b7daecb..fe55f8388a 100644
--- a/src/sentry/rules/processor.py
+++ b/src/sentry/rules/processor.py
@@ -16,35 +16,11 @@ from sentry.utils.safe import safe_execute
 RuleFuture = namedtuple("RuleFuture", ["rule", "kwargs"])
 
 
-# TODO(dcramer): come up with a clean way to kill this either by renaming
-# the Event.message attribute or updating all plugins (former is better)
-class EventCompatibilityProxy(object):
-    """
-    A proxy which manages the 'message' attribute on an event to safely
-    upgrade legacy notifications.
-    """
-
-    __class__ = property(lambda x: x._event.__class__)
-
-    # TODO: this goes away once message has been renamed to search_message
-    # and real_message to message
-
-    def __init__(self, event):
-        self._event = event
-
-    def __getattr__(self, attr):
-        return getattr(self._event, attr)
-
-    @property
-    def message(self):
-        return self._event.real_message
-
-
 class RuleProcessor(object):
     logger = logging.getLogger("sentry.rules")
 
     def __init__(self, event, is_new, is_regression, is_new_group_environment, has_reappeared):
-        self.event = EventCompatibilityProxy(event)
+        self.event = event
         self.group = event.group
         self.project = event.project
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 82d99fd5d4..ce9d5ae592 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -797,7 +797,7 @@ class SnubaTestCase(BaseTestCase):
             "group_id": event.group_id,
             "event_id": event.event_id,
             "project_id": event.project_id,
-            "message": event.real_message,
+            "message": event.message,
             "platform": event.platform,
             "datetime": event.datetime,
             "data": dict(data),
diff --git a/src/sentry_plugins/pagerduty/plugin.py b/src/sentry_plugins/pagerduty/plugin.py
index 50b43af415..d5998c7e1f 100644
--- a/src/sentry_plugins/pagerduty/plugin.py
+++ b/src/sentry_plugins/pagerduty/plugin.py
@@ -60,9 +60,9 @@ class PagerDutyPlugin(CorePluginMixin, NotifyPlugin):
         # TODO: This should eventually just be event.title in line with other plugins.
         # However, we should notify users first, since PD alert routing may be
         # based off the message field. We default to the title now because it's
-        # possible for `event.message` and `event.real_message` to be "" and the description
+        # possible for `event.message` to be "" and the description
         # is a required field for the PD payload.
-        description = (event.real_message or event.message or event.title)[:1024]
+        description = (event.message or event.title)[:1024]
 
         tags = dict(event.tags)
         details = {
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index 2cc7284f57..47d1de7f6e 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -115,22 +115,6 @@ class EventSerializerTest(TestCase):
         assert result["message"] == "baz"
         assert result["_meta"]["message"] == {"": {"err": ["some error"]}}
 
-    def test_message_legacy(self):
-        event = self.store_event(
-            data={
-                "event_id": "a" * 32,
-                "timestamp": iso_format(before_now(minutes=1)),
-                "logentry": {"formatted": None},
-            },
-            project_id=self.project.id,
-            assert_no_errors=False,
-        )
-
-        event.message = "search message"
-
-        result = serialize(event)
-        assert result["message"] == "search message"
-
     def test_tags_tuples(self):
         event = self.store_event(
             data={
diff --git a/tests/sentry/rules/test_processor.py b/tests/sentry/rules/test_processor.py
index c116b4a0c5..55695395be 100644
--- a/tests/sentry/rules/test_processor.py
+++ b/tests/sentry/rules/test_processor.py
@@ -8,7 +8,7 @@ from django.utils import timezone
 from sentry.models import GroupRuleStatus, Rule
 from sentry.plugins.base import plugins
 from sentry.testutils import TestCase
-from sentry.rules.processor import EventCompatibilityProxy, RuleProcessor
+from sentry.rules.processor import RuleProcessor
 
 
 class RuleProcessorTest(TestCase):
@@ -50,16 +50,3 @@ class RuleProcessorTest(TestCase):
 
         results = list(rp.apply())
         assert len(results) == 1
-
-
-class EventCompatibilityProxyTest(TestCase):
-    def test_simple(self):
-        event = self.store_event(
-            data={
-                "message": "biz baz",
-                "logentry": {"message": "biz baz", "formatted": "foo bar", "params": ["bar"]},
-            },
-            project_id=self.project.id,
-        )
-        event_proxy = EventCompatibilityProxy(event)
-        assert event_proxy.message == "foo bar"
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 1965763ece..952663a8b2 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -998,10 +998,7 @@ class CreateReferenceEventConditionsTest(SnubaTestCase, TestCase):
             self.organization, slug, ["message", "transaction", "unknown-field"]
         )
         result = discover.create_reference_event_conditions(ref)
-        assert result == [
-            ["message", "=", "oh no! /issues/{issue_id}"],
-            ["transaction", "=", "/issues/{issue_id}"],
-        ]
+        assert result == [["message", "=", "oh no!"], ["transaction", "=", "/issues/{issue_id}"]]
 
     def test_geo_field(self):
         event = self.store_event(
diff --git a/tests/sentry_plugins/pagerduty/test_plugin.py b/tests/sentry_plugins/pagerduty/test_plugin.py
index d4c9888d80..280e15df65 100644
--- a/tests/sentry_plugins/pagerduty/test_plugin.py
+++ b/tests/sentry_plugins/pagerduty/test_plugin.py
@@ -100,7 +100,7 @@ class PagerDutyPluginTest(PluginTestCase):
                 "datetime": event.datetime.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
             },
             "service_key": "abcdef",
-            "description": event.real_message,
+            "description": event.message,
         }
 
     def test_no_secrets(self):
