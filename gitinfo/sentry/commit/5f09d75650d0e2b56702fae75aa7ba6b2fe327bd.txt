commit 5f09d75650d0e2b56702fae75aa7ba6b2fe327bd
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Feb 15 09:31:55 2018 -0800

    feat(ui): Add react UI for two factor auth (#7158)
    
    * refactor account security components + add comments
    * change json form to check for fields that are render functions
    * fix new account settings -> old account settings links
    * add routes.jsx to codecov ignore
    * add test for settings layout
    * fix remove defaultValues when rendering fields in jsonForm
    * Add error message in AsyncComponent for 401s (e.g. closing sudo modal)
    * Add "disabled" prop to Tooltip to allow rendering children without tooltip

diff --git a/codecov.yml b/codecov.yml
index d549a35f47..a8ded35364 100644
--- a/codecov.yml
+++ b/codecov.yml
@@ -22,4 +22,5 @@ coverage:
   - src/debug_toolbar/.*
   - src/social_auth/.*
   - src/south/.*
+  - src/sentry/static/sentry/app/routes.jsx
 comment: false
diff --git a/src/sentry/api/endpoints/user_authenticator_details.py b/src/sentry/api/endpoints/user_authenticator_details.py
index 592a7f5b76..fd80281c0a 100644
--- a/src/sentry/api/endpoints/user_authenticator_details.py
+++ b/src/sentry/api/endpoints/user_authenticator_details.py
@@ -80,13 +80,14 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
         return Response(serialize(interface))
 
     @sudo_required
-    def delete(self, request, user, auth_id):
+    def delete(self, request, user, auth_id, interface_device_id=None):
         """
         Remove authenticator
         ````````````````````
 
         :pparam string user_id: user id or 'me' for current user
         :pparam string auth_id: authenticator model id
+        :pparam string interface_device_id: some interfaces (u2f) allow multiple devices
 
         :auth required:
         """
@@ -99,13 +100,34 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
         except (ValueError, Authenticator.DoesNotExist):
             return Response(status=status.HTTP_404_NOT_FOUND)
 
+        interface = authenticator.interface
+
+        # Remove a single device and not entire authentication method
+        if interface.interface_id == 'u2f' and interface_device_id is not None:
+            # Can't remove if this is the last device, will return False if so
+            if not interface.remove_u2f_device(interface_device_id):
+                return Response(status=status.HTTP_500_INTERNAL_SERVER_ERROR)
+
+            interface.authenticator.save()
+            capture_security_activity(
+                account=user,
+                type='mfa-removed',
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                context={
+                    'authenticator': authenticator,
+                },
+                send_email=False
+            )
+            return Response(status=status.HTTP_204_NO_CONTENT)
+
         with transaction.atomic():
             authenticator.delete()
 
             # if we delete an actual authenticator and all that
             # remainds are backup interfaces, then we kill them in the
             # process.
-            if not authenticator.interface.is_backup_interface:
+            if not interface.is_backup_interface:
                 interfaces = Authenticator.objects.all_interfaces_for_user(user)
                 backup_interfaces = [x for x in interfaces if x.is_backup_interface]
                 if len(backup_interfaces) == len(interfaces):
@@ -134,7 +156,7 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
                 context={
                     'authenticator': authenticator,
                 },
-                send_email=not authenticator.interface.is_backup_interface,
+                send_email=not interface.is_backup_interface,
             )
 
         return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index ca54d5f91d..462f32bfda 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -216,6 +216,11 @@ urlpatterns = patterns(
         UserAuthenticatorEnrollEndpoint.as_view(),
         name='sentry-api-0-user-authenticator-enroll'
     ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/authenticators/(?P<auth_id>[^\/]+)/(?P<interface_device_id>[^\/]+)/$',
+        UserAuthenticatorDetailsEndpoint.as_view(),
+        name='sentry-api-0-user-authenticator-device-details'
+    ),
     url(
         r'^users/(?P<user_id>[^\/]+)/authenticators/(?P<auth_id>[^\/]+)/$',
         UserAuthenticatorDetailsEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 23f284f99b..cc2a31d508 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -89,7 +89,8 @@ export class Client {
         },
         onClose: () => {
           if (typeof requestOptions.error !== 'function') return;
-          requestOptions.error();
+          // If modal was closed, then forward the original response
+          requestOptions.error(response);
         },
       });
       return;
@@ -156,6 +157,7 @@ export class Client {
       this.request(path, {
         ...options,
         success: (data, ...args) => {
+          // This fails if we need jqXhr :(
           resolve(data);
         },
         error: (error, ...args) => {
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 95b62ca2fb..35ba781102 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -4,7 +4,7 @@ import Raven from 'raven-js';
 import React from 'react';
 
 import {Client} from '../api';
-import {tct} from '../locale';
+import {t, tct} from '../locale';
 import ExternalLink from './externalLink';
 import LoadingError from './loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
@@ -106,7 +106,8 @@ class AsyncComponent extends React.Component {
           this.setState(prevState => {
             return {
               [stateKey]: data,
-              [`${stateKey}PageLinks`]: jqXHR.getResponseHeader('Link'),
+              // TODO(billy): This currently fails if this request is retried by SudoModal
+              [`${stateKey}PageLinks`]: jqXHR && jqXHR.getResponseHeader('Link'),
               remainingRequests: prevState.remainingRequests - 1,
               loading: prevState.remainingRequests > 1,
             };
@@ -167,20 +168,31 @@ class AsyncComponent extends React.Component {
   }
 
   renderError(error) {
-    // Look through endpoint results to see if we had any 403s
-    let permissionErrors = Object.keys(this.state.errors).find(endpointName => {
+    let unauthorizedErrors = Object.keys(this.state.errors).find(endpointName => {
       let result = this.state.errors[endpointName];
+      // 401s are captured by SudaModal, but may be passed back to AsyncComponent if they close the modal without identifying
+      return result && result.status === 401;
+    });
 
+    // Look through endpoint results to see if we had any 403s, means their role can not access resource
+    let permissionErrors = Object.keys(this.state.errors).find(endpointName => {
+      let result = this.state.errors[endpointName];
       return result && result.status === 403;
     });
 
+    if (unauthorizedErrors) {
+      return (
+        <LoadingError message={t('You are not authorized to access this resource.')} />
+      );
+    }
+
     if (permissionErrors) {
       // TODO(billy): Refactor this into a new PermissionDenied component
       Raven.captureException(new Error('Permission Denied'), {});
       return (
         <LoadingError
           message={tct(
-            'You do not have permission to access this, please read more about [link:organizational roles]',
+            'Your role does not have the necessary permissions to access this resource, please read more about [link:organizational roles]',
             {
               link: <ExternalLink href="https://docs.sentry.io/learn/membership/" />,
             }
diff --git a/src/sentry/static/sentry/app/components/tooltip.jsx b/src/sentry/static/sentry/app/components/tooltip.jsx
index e9dd4b4995..8760822f04 100644
--- a/src/sentry/static/sentry/app/components/tooltip.jsx
+++ b/src/sentry/static/sentry/app/components/tooltip.jsx
@@ -9,6 +9,7 @@ import 'bootstrap/js/tooltip';
 class Tooltip extends React.Component {
   static propTypes = {
     children: PropTypes.node.isRequired,
+    disabled: PropTypes.bool,
     tooltipOptions: PropTypes.object,
     title: PropTypes.node,
   };
@@ -51,11 +52,18 @@ class Tooltip extends React.Component {
       className,
       title,
       children,
+      disabled,
       // eslint-disable-next-line no-unused-vars
       tooltipOptions,
       ...props
     } = this.props;
 
+    // Return children as normal if Tooltip is disabled
+    // (this lets us do <Tooltip disabled={isDisabled}><Button>Foo</Button></Tooltip>)
+    if (disabled) {
+      return children;
+    }
+
     return React.cloneElement(children, {
       ...props,
       ref: this.handleMount,
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 599d4d6b32..04ef9bac6d 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -164,6 +164,31 @@ const accountSettingsRoutes = [
       import(/*webpackChunkName: "AccountAuthorizations"*/ './views/settings/account/accountAuthorizations')}
     component={errorHandler(LazyLoad)}
   />,
+
+  <Route key="security/" name="Security" path="security/">
+    <IndexRoute
+      componentPromise={() =>
+        import(/*webpackChunkName: "AccountSecurity"*/ './views/settings/account/accountSecurity/index')}
+      component={errorHandler(LazyLoad)}
+    />
+
+    <Route
+      path=":authId/enroll/"
+      name="Enroll"
+      componentPromise={() =>
+        import(/*webpackChunkName: "AccountSecurityEnroll"*/ './views/settings/account/accountSecurity/accountSecurityEnroll')}
+      component={errorHandler(LazyLoad)}
+    />
+
+    <Route
+      path=":authId/"
+      name="Details"
+      componentPromise={() =>
+        import(/*webpackChunkName: "AccountSecurityDetails"*/ './views/settings/account/accountSecurity/accountSecurityDetails')}
+      component={errorHandler(LazyLoad)}
+    />
+  </Route>,
+
   <Route
     key="subscriptions/"
     path="subscriptions/"
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
new file mode 100644
index 0000000000..5e29becc32
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityDetails.jsx
@@ -0,0 +1,175 @@
+/**
+ * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.
+ * It displays created + last used time of the 2fa method.
+ *
+ * Also displays 2fa method specific details.
+ */
+import {Box, Flex} from 'grid-emotion';
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {
+  addErrorMessage,
+  addSuccessMessage,
+} from '../../../../actionCreators/settingsIndicator';
+import {t} from '../../../../locale';
+import AsyncView from '../../../asyncView';
+import Button from '../../../../components/buttons/button';
+import CircleIndicator from '../../../../components/circleIndicator';
+import DateTime from '../../../../components/dateTime';
+import RecoveryCodes from './components/recoveryCodes';
+import RemoveConfirm from './components/removeConfirm';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import TextBlock from '../../components/text/textBlock';
+import U2fEnrolledDetails from './components/u2fEnrolledDetails';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+const DateLabel = styled.span`
+  font-weight: bold;
+  margin-right: 6px;
+  width: 100px;
+`;
+
+const Phone = styled.span`
+  font-weight: bold;
+  margin-left: 6px;
+`;
+
+class AuthenticatorDate extends React.Component {
+  static propTypes = {
+    label: PropTypes.string,
+    /**
+     * Can be null or a Date object.
+     * Component will have value "never" if it is null
+     */
+    date: PropTypes.string,
+  };
+  render() {
+    let {label, date} = this.props;
+
+    return (
+      <Flex mb={1}>
+        <DateLabel>{label}</DateLabel>
+        <Box flex="1">{date ? <DateTime date={date} /> : t('never')}</Box>
+      </Flex>
+    );
+  }
+}
+
+class AccountSecurityDetails extends AsyncView {
+  constructor(...args) {
+    super(...args);
+    this._form = {};
+  }
+
+  getTitle() {
+    return t('Security');
+  }
+
+  getEndpoints() {
+    return [['authenticator', `${ENDPOINT}${this.props.params.authId}/`]];
+  }
+
+  addError(message) {
+    this.setState({loading: false});
+    addErrorMessage(message);
+  }
+
+  handleRemove = device => {
+    let {authenticator} = this.state;
+
+    if (!authenticator || !authenticator.authId) return;
+    let isRemovingU2fDevice = !!device;
+    let deviceId = isRemovingU2fDevice ? `${device.key_handle}/` : '';
+
+    this.setState(
+      {
+        loading: true,
+      },
+      () =>
+        this.api
+          .requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {
+            method: 'DELETE',
+          })
+          .then(
+            () => {
+              this.props.router.push('/settings/account/security');
+              let deviceName = isRemovingU2fDevice ? device.name : 'Authenticator';
+              addSuccessMessage(t('%s has been removed', deviceName));
+            },
+            () => {
+              // Error deleting authenticator
+              let deviceName = isRemovingU2fDevice ? device.name : 'authenticator';
+              this.addError(t('Error removing %s', deviceName));
+            }
+          )
+    );
+  };
+
+  handleRegenerateBackupCodes = () => {
+    this.setState({loading: true}, () =>
+      this.api
+        .requestPromise(`${ENDPOINT}${this.props.params.authId}/`, {
+          method: 'PUT',
+        })
+        .then(this.remountComponent, () =>
+          this.addError(t('Error regenerating backup codes'))
+        )
+    );
+  };
+
+  renderBody() {
+    let {authenticator} = this.state;
+
+    return (
+      <div>
+        <SettingsPageHeader
+          title={
+            <React.Fragment>
+              <span>{authenticator.name}</span>
+              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />
+            </React.Fragment>
+          }
+          action={
+            authenticator.isEnrolled &&
+            authenticator.removeButton && (
+              <RemoveConfirm onConfirm={this.handleRemove}>
+                <Button priority="danger">{authenticator.removeButton}</Button>
+              </RemoveConfirm>
+            )
+          }
+        />
+
+        <TextBlock>{authenticator.description}</TextBlock>
+        <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />
+        <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />
+
+        <U2fEnrolledDetails
+          isEnrolled={authenticator.isEnrolled}
+          id={authenticator.id}
+          devices={authenticator.devices}
+          onRemoveU2fDevice={this.handleRemove}
+        />
+
+        {authenticator.isEnrolled &&
+          authenticator.phone && (
+            <div css={{marginTop: 30}}>
+              {t('Confirmation codes are sent to the following phone number')}:
+              <Phone>{authenticator.phone}</Phone>
+            </div>
+          )}
+
+        <RecoveryCodes
+          onRegenerateBackupCodes={this.handleRegenerateBackupCodes}
+          isEnrolled={authenticator.isEnrolled}
+          codes={authenticator.codes}
+        />
+      </div>
+    );
+  }
+}
+
+export default withRouter(AccountSecurityDetails);
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
new file mode 100644
index 0000000000..e3ea4f935a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx
@@ -0,0 +1,337 @@
+/**
+ * Renders necessary forms in order to enroll user in 2fa
+ */
+import {withRouter} from 'react-router';
+import React from 'react';
+
+import {
+  addErrorMessage,
+  addMessage,
+  addSuccessMessage,
+} from '../../../../actionCreators/settingsIndicator';
+import {t} from '../../../../locale';
+import AsyncView from '../../../asyncView';
+import Button from '../../../../components/buttons/button';
+import CircleIndicator from '../../../../components/circleIndicator';
+import Form from '../../components/forms/form';
+import JsonForm from '../../components/forms/jsonForm';
+import PanelItem from '../../components/panelItem';
+import Qrcode from '../../../../components/qrcode';
+import RemoveConfirm from './components/removeConfirm';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import TextBlock from '../../components/text/textBlock';
+import U2fsign from '../../../../components/u2fsign';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+/**
+ * Retrieve additional form fields (or modify ones) based on 2fa method
+ *
+ * @param {object} params Params object
+ * @param {object} authenticator Authenticator model
+ * @param {boolean} hasSentCode Flag to track if totp has been sent
+ * @param {function} onSmsReset Callback to reset SMS 2fa enrollment
+ * @param {function} onSmsSubmit Callback to handle sending code or submit OTP
+ * @param {function} onU2fTap Callback when u2f device is activated
+ */
+const getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTap}) => {
+  let {form, qrcode, challenge, id} = authenticator || {};
+
+  if (!form) return null;
+
+  if (qrcode) {
+    return [
+      () => (
+        <PanelItem key="qrcode" justify="center" p={2}>
+          <Qrcode code={authenticator.qrcode} />
+        </PanelItem>
+      ),
+      ...form,
+      () => (
+        <PanelItem key="confirm" justify="flex-end" p={2}>
+          <Button priority="primary" type="submit">
+            {t('Confirm')}
+          </Button>
+        </PanelItem>
+      ),
+    ];
+  }
+
+  // Sms Form needs a start over button + confirm button
+  // Also inputs being disabled vary based on hasSentCode
+  if (id === 'sms') {
+    // Ideally we would have greater flexibility when rendering footer
+    return [
+      {
+        ...form[0],
+        disabled: () => hasSentCode,
+      },
+      {
+        ...form[1],
+        required: true,
+        visible: () => hasSentCode,
+      },
+      () => (
+        <PanelItem key="sms-footer" justify="flex-end" p={2} pr={'36px'}>
+          {hasSentCode && (
+            <Button css={{marginRight: 6}} onClick={onSmsReset}>
+              {t('Start Over')}
+            </Button>
+          )}
+          <Button priority="primary" type="button" onClick={onSmsSubmit}>
+            {hasSentCode ? t('Confirm') : t('Send Code')}
+          </Button>
+        </PanelItem>
+      ),
+    ];
+  }
+
+  // Need to render device name field + U2f component
+  if (id === 'u2f') {
+    let deviceNameField = form.find(({name}) => name === 'deviceName');
+    return [
+      deviceNameField,
+      () => (
+        <U2fsign
+          key="u2f-enroll"
+          style={{marginBottom: 0}}
+          challengeData={challenge}
+          displayMode="enroll"
+          flowMode="enroll"
+          onTap={onU2fTap}
+        />
+      ),
+    ];
+  }
+
+  return null;
+};
+
+class AccountSecurityEnroll extends AsyncView {
+  constructor(...args) {
+    super(...args);
+    this._form = {};
+  }
+
+  getTitle() {
+    return t('Security');
+  }
+
+  getEndpoints() {
+    return [['authenticator', `${ENDPOINT}${this.props.params.authId}/enroll/`]];
+  }
+
+  handleFieldChange = (name, value) => {
+    // This should not be used for rendering, that's why it's not in state
+    this._form[name] = value;
+  };
+
+  // This resets state so that user can re-enter their phone number again
+  handleSmsReset = () => {
+    this.setState(
+      {
+        hasSentCode: false,
+      },
+      this.remountComponent
+    );
+  };
+
+  // Handles
+  handleSmsSubmit = dataModel => {
+    let {authenticator, hasSentCode} = this.state;
+
+    // Don't submit if empty
+    if (!this._form.phone) return;
+
+    let data = {
+      phone: this._form.phone,
+      // Make sure `otp` is undefined if we are submitting OTP verification
+      // Otherwise API will think that we are on verification step (e.g. after submitting phone)
+      otp: hasSentCode ? this._form.otp || '' : undefined,
+      secret: authenticator.secret,
+    };
+
+    // Only show loading when submitting OTP
+    this.setState({
+      loading: hasSentCode,
+    });
+
+    if (!hasSentCode) {
+      addMessage(t('Sending code to %s...', data.phone));
+    }
+
+    this.api
+      .requestPromise(`${ENDPOINT}${this.props.params.authId}/enroll/`, {
+        data,
+      })
+      .then(
+        () => {
+          if (!hasSentCode) {
+            // Just successfully finished sending OTP to user
+            this.setState({
+              hasSentCode: true,
+              loading: false,
+              // authenticator: data,
+            });
+            addMessage(t('Sent code to %s', data.phone));
+          } else {
+            // OTP was accepted and SMS was added as a 2fa method
+            this.props.router.push('/settings/account/security/');
+            addSuccessMessage(t('Added authenticator %s', authenticator.name));
+          }
+        },
+        error => {
+          this._form = {};
+          let isSmsInterface = authenticator.id === 'sms';
+
+          this.setState({
+            hasSentCode: !isSmsInterface,
+          });
+
+          // Re-mount because we want to fetch a fresh secret
+          this.remountComponent();
+
+          let errorMessage = this.state.hasSentCode
+            ? t('Incorrect OTP')
+            : t('Error sending SMS');
+          addErrorMessage(errorMessage);
+        }
+      );
+  };
+
+  // Handle u2f device tap
+  handleU2fTap = data => {
+    return this.api
+      .requestPromise(`${ENDPOINT}${this.props.params.authId}/enroll/`, {
+        data: {
+          ...data,
+          ...this._form,
+        },
+      })
+      .then(this.handleEnrollSuccess, this.handleEnrollError);
+  };
+
+  // Currently only TOTP uses this
+  handleSubmit = dataModel => {
+    let {authenticator} = this.state;
+
+    let data = {
+      ...this._form,
+      ...((dataModel && dataModel.toJSON()) || {}),
+      secret: authenticator.secret,
+    };
+
+    this.setState({
+      loading: true,
+    });
+    this.api
+      .requestPromise(`${ENDPOINT}${this.props.params.authId}/enroll/`, {
+        method: 'POST',
+        data,
+      })
+      .then(this.handleEnrollSuccess, this.handleEnrollError);
+  };
+
+  // Handler when we successfully add a 2fa device
+  handleEnrollSuccess = () => {
+    let authenticatorName =
+      (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
+    this.props.router.push('/settings/account/security');
+    addSuccessMessage(t('%s has been added', authenticatorName));
+  };
+
+  // Handler when we failed to add a 2fa device
+  handleEnrollError = () => {
+    let authenticatorName =
+      (this.state.authenticator && this.state.authenticator.name) || 'Authenticator';
+    this.setState({loading: false});
+    addErrorMessage(t('Error adding %s authenticator', authenticatorName));
+  };
+
+  // Removes an authenticator
+  handleRemove = () => {
+    let {authenticator} = this.state;
+
+    if (!authenticator || !authenticator.authId) return;
+
+    // `authenticator.authId` is NOT the same as `props.params.authId`
+    // This is for backwards compatbility with API endpoint
+    this.api
+      .requestPromise(`${ENDPOINT}${authenticator.authId}/`, {
+        method: 'DELETE',
+      })
+      .then(
+        () => {
+          this.props.router.push('/settings/account/security/');
+          addSuccessMessage(t('Authenticator has been removed'));
+        },
+        () => {
+          // Error deleting authenticator
+          addErrorMessage(t('Error removing authenticator'));
+        }
+      );
+  };
+
+  renderBody() {
+    let {authenticator} = this.state;
+    let endpoint = `${ENDPOINT}${this.props.params.authId}/`;
+
+    let fields = getFields({
+      authenticator,
+      hasSentCode: this.state.hasSentCode,
+      onSmsReset: this.handleSmsReset,
+      onSmsSubmit: this.handleSmsSubmit,
+      onU2fTap: this.handleU2fTap,
+    });
+
+    // Attempt to extract `defaultValue` from server generated form fields
+    const defaultValues = fields
+      ? fields
+          .filter(field => typeof field.defaultValue !== 'undefined')
+          .map(field => [field.name, field.defaultValue])
+          .reduce((acc, [name, value]) => {
+            acc[name] = value;
+            return acc;
+          }, {})
+      : {};
+
+    return (
+      <div>
+        <SettingsPageHeader
+          title={
+            <React.Fragment>
+              <span>{authenticator.name}</span>
+              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />
+            </React.Fragment>
+          }
+          action={
+            authenticator.isEnrolled &&
+            authenticator.removeButton && (
+              <RemoveConfirm onConfirm={this.handleRemove}>
+                <Button priority="danger">{authenticator.removeButton}</Button>
+              </RemoveConfirm>
+            )
+          }
+        />
+
+        <TextBlock>{authenticator.description}</TextBlock>
+
+        {authenticator.form &&
+          !!authenticator.form.length && (
+            <Form
+              apiMethod="POST"
+              onFieldChange={this.handleFieldChange}
+              apiEndpoint={endpoint}
+              onSubmit={this.handleSubmit}
+              initialData={{...defaultValues, ...authenticator}}
+              hideFooter
+            >
+              <JsonForm {...this.props} forms={[{title: 'Configuration', fields}]} />
+            </Form>
+          )}
+      </div>
+    );
+  }
+}
+
+export default withRouter(AccountSecurityEnroll);
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/confirmHeader.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/confirmHeader.jsx
new file mode 100644
index 0000000000..1c30d9f122
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/confirmHeader.jsx
@@ -0,0 +1,8 @@
+import styled from 'react-emotion';
+
+const ConfirmHeader = styled.div`
+  font-size: 1.2em;
+  margin-bottom: 10px;
+`;
+
+export default ConfirmHeader;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
new file mode 100644
index 0000000000..8b2813089b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/recoveryCodes.jsx
@@ -0,0 +1,75 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled, {css} from 'react-emotion';
+
+import {t} from '../../../../../locale';
+import Button from '../../../../../components/buttons/button';
+import Confirm from '../../../../../components/confirm';
+import EmptyMessage from '../../../components/emptyMessage';
+import InlineSvg from '../../../../../components/inlineSvg';
+import Panel from '../../../components/panel';
+import PanelBody from '../../../components/panelBody';
+import PanelHeader from '../../../components/panelHeader';
+import PanelItem from '../../../components/panelItem';
+
+const Code = styled(props => <PanelItem p={2} {...props} />)`
+  font-family: ${p => p.theme.text.familyMono};
+`;
+
+const PanelWarning = styled(props => <Flex p={2} {...props} />)`
+  ${p => css`
+    background-color: ${p.theme.alert.warning.backgroundLight};
+    border-bottom: 1px solid ${p.theme.borderLight};
+    color: ${p.theme.alert.warning.textDark};
+  `};
+`;
+
+class RecoveryCodes extends React.Component {
+  static propTypes = {
+    isEnrolled: PropTypes.bool,
+    codes: PropTypes.arrayOf(PropTypes.string),
+    onRegenerateBackupCodes: PropTypes.func.isRequired,
+  };
+
+  render() {
+    let {isEnrolled, codes} = this.props;
+
+    if (!isEnrolled || !codes) return null;
+
+    return (
+      <Panel css={{marginTop: 30}}>
+        <PanelHeader>
+          <Flex align="center">
+            <Box flex="1">{t('Unused Codes')}</Box>
+            <Confirm
+              onConfirm={this.props.onRegenerateBackupCodes}
+              message={t(
+                'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'
+              )}
+            >
+              <Button priority="danger" size="small">
+                {t('Regenerate Codes')}
+              </Button>
+            </Confirm>
+          </Flex>
+        </PanelHeader>
+        <PanelBody>
+          <PanelWarning>
+            <InlineSvg css={{fontSize: '2em'}} src="icon-warning-sm" />
+            <Flex align="center" ml={2} flex="1">
+              {t(`Make sure to keep a copy of these codes to recover your account if you lose
+              your authenticator.`)}
+            </Flex>
+          </PanelWarning>
+          {!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}
+          {!codes.length && (
+            <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>
+          )}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default RecoveryCodes;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx
new file mode 100644
index 0000000000..af71fe34bf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/removeConfirm.jsx
@@ -0,0 +1,28 @@
+import React from 'react';
+
+import {t} from '../../../../../locale';
+import ConfirmHeader from './confirmHeader';
+import Confirm from '../../../../../components/confirm';
+import TextBlock from '../../../components/text/textBlock';
+
+class RemoveConfirm extends React.Component {
+  render() {
+    return (
+      <Confirm
+        message={
+          <React.Fragment>
+            <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>
+            <TextBlock>
+              {t(
+                'Removing the last authentication method will disable two-factor authentication completely.'
+              )}
+            </TextBlock>
+          </React.Fragment>
+        }
+        {...this.props}
+      />
+    );
+  }
+}
+
+export default RemoveConfirm;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
new file mode 100644
index 0000000000..4ddb718e25
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx
@@ -0,0 +1,101 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../../../../locale';
+import Button from '../../../../../components/buttons/button';
+import Confirm from '../../../../../components/confirm';
+import ConfirmHeader from './confirmHeader';
+import DateTime from '../../../../../components/dateTime';
+import Panel from '../../../components/panel';
+import PanelBody from '../../../components/panelBody';
+import PanelHeader from '../../../components/panelHeader';
+import PanelItem from '../../../components/panelItem';
+import TextBlock from '../../../components/text/textBlock';
+import EmptyMessage from '../../../components/emptyMessage';
+import Tooltip from '../../../../../components/tooltip';
+
+/**
+ * List u2f devices w/ ability to remove a single device
+ */
+class U2fEnrolledDetails extends React.Component {
+  static propTypes = {
+    isEnrolled: PropTypes.bool,
+    id: PropTypes.string,
+    devices: PropTypes.arrayOf(
+      PropTypes.shape({
+        name: PropTypes.string,
+        timestamp: PropTypes.any,
+      })
+    ),
+    onRemoveU2fDevice: PropTypes.func.isRequired,
+  };
+
+  render() {
+    let {isEnrolled, devices, id, onRemoveU2fDevice} = this.props;
+
+    if (id !== 'u2f' || !isEnrolled) return null;
+
+    let hasDevices = devices && devices.length;
+    // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons
+    let isLastDevice = hasDevices === 1;
+
+    return (
+      <Panel css={{marginTop: 30}}>
+        <PanelHeader>{t('Device name')}</PanelHeader>
+
+        <PanelBody>
+          {!hasDevices && (
+            <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>
+          )}
+          {hasDevices &&
+            devices.map(device => (
+              <PanelItem p={0} key={device.name}>
+                <Flex p={2} pr={0} align="center" flex="1">
+                  <Box flex="1">{device.name}</Box>
+                  <div css={{fontSize: '0.8em', opacity: 0.6}}>
+                    <DateTime date={device.timestamp} />
+                  </div>
+                </Flex>
+
+                <Box p={2}>
+                  <Confirm
+                    onConfirm={() => onRemoveU2fDevice(device)}
+                    disabled={isLastDevice}
+                    message={
+                      <React.Fragment>
+                        <ConfirmHeader>
+                          {t('Do you want to remove U2F device?')}
+                        </ConfirmHeader>
+                        <TextBlock>
+                          {t(
+                            `Are you sure you want to remove the U2F device "${device.name}"?`
+                          )}
+                        </TextBlock>
+                      </React.Fragment>
+                    }
+                  >
+                    <Button size="small" priority="danger">
+                      <Tooltip
+                        disabled={!isLastDevice}
+                        title={t('Can not remove last U2F device')}
+                      >
+                        <span className="icon icon-trash" />
+                      </Tooltip>
+                    </Button>
+                  </Confirm>
+                </Box>
+              </PanelItem>
+            ))}
+          <PanelItem justify="flex-end" p={2}>
+            <Button type="button" to="/settings/account/security/u2f/enroll/">
+              {t('Add Another Device')}
+            </Button>
+          </PanelItem>
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default U2fEnrolledDetails;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
new file mode 100644
index 0000000000..a9cbdac999
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
@@ -0,0 +1,137 @@
+/**
+ * Lists 2fa devices + password change form
+ */
+import {Box, Flex} from 'grid-emotion';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {addErrorMessage} from '../../../../actionCreators/settingsIndicator';
+import {t} from '../../../../locale';
+import AsyncView from '../../../asyncView';
+import Button from '../../../../components/buttons/button';
+import CircleIndicator from '../../../../components/circleIndicator';
+import EmptyMessage from '../../components/emptyMessage';
+import Panel from '../../components/panel';
+import PanelBody from '../../components/panelBody';
+import PanelHeader from '../../components/panelHeader';
+import PanelItem from '../../components/panelItem';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import TextBlock from '../../components/text/textBlock';
+import RemoveConfirm from './components/removeConfirm';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+const AuthenticatorName = styled.span`
+  font-size: 1.2em;
+`;
+
+class AccountSecurity extends AsyncView {
+  getEndpoints() {
+    return [['authenticators', '/users/me/authenticators/']];
+  }
+
+  getTitle() {
+    return t('Security');
+  }
+
+  handleDisable = auth => {
+    if (!auth || !auth.authId) return;
+
+    this.setState(
+      {
+        loading: true,
+      },
+      () =>
+        this.api
+          .requestPromise(`${ENDPOINT}${auth.authId}/`, {
+            method: 'DELETE',
+          })
+          .then(this.remountComponent, () => {
+            this.setState({loading: false});
+            addErrorMessage(t('Error disabling', auth.name));
+          })
+    );
+  };
+
+  renderBody() {
+    let isEmpty = !this.state.authenticators.length;
+
+    return (
+      <div>
+        <SettingsPageHeader title="Security" />
+        <Panel>
+          <PanelHeader>
+            <Box>{t('Two Factor Authentication')}</Box>
+          </PanelHeader>
+
+          {isEmpty && (
+            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>
+          )}
+
+          <PanelBody>
+            {!isEmpty &&
+              this.state.authenticators.map(auth => {
+                let {
+                  id,
+                  authId,
+                  description,
+                  isBackupInterface,
+                  isEnrolled,
+                  configureButton,
+                  name,
+                } = auth;
+                return (
+                  <PanelItem key={id} p={0} direction="column">
+                    <Flex flex="1" p={2} align="center">
+                      <Box flex="1">
+                        <CircleIndicator css={{marginRight: 6}} enabled={isEnrolled} />
+                        <AuthenticatorName>{name}</AuthenticatorName>
+                      </Box>
+
+                      {!isBackupInterface &&
+                        !isEnrolled && (
+                          <Button
+                            to={`/settings/account/security/${id}/enroll/`}
+                            size="small"
+                            priority="primary"
+                          >
+                            {t('Add')}
+                          </Button>
+                        )}
+
+                      {isEnrolled &&
+                        authId && (
+                          <Button
+                            to={`/settings/account/security/${authId}/`}
+                            size="small"
+                          >
+                            {configureButton}
+                          </Button>
+                        )}
+
+                      {!isBackupInterface &&
+                        isEnrolled && (
+                          <RemoveConfirm onConfirm={() => this.handleDisable(auth)}>
+                            <Button css={{marginLeft: 6}} size="small">
+                              <span className="icon icon-trash" />
+                            </Button>
+                          </RemoveConfirm>
+                        )}
+
+                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}
+                    </Flex>
+
+                    <Box p={2} pt={0}>
+                      <TextBlock css={{marginBottom: 0}}>{description}</TextBlock>
+                    </Box>
+                  </PanelItem>
+                );
+              })}
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default AccountSecurity;
diff --git a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
index 82ee1cdd1c..b43b1a80e6 100644
--- a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
@@ -10,6 +10,10 @@ const accountNavigation = [
         path: `${pathPrefix}/details/`,
         title: t('Account Details'),
       },
+      {
+        path: `${pathPrefix}/security/`,
+        title: t('Security'),
+      },
       {
         path: `${pathPrefix}/notifications/`,
         title: t('Notifications'),
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
index 25e9c5d862..adc16afdf0 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/form.jsx
@@ -13,6 +13,7 @@ export default class Form extends React.Component {
     onSubmit: PropTypes.func,
     onSubmitSuccess: PropTypes.func,
     onSubmitError: PropTypes.func,
+    onFieldChange: PropTypes.func,
     submitDisabled: PropTypes.bool,
     submitLabel: PropTypes.string,
     footerClass: PropTypes.string,
@@ -55,6 +56,7 @@ export default class Form extends React.Component {
       apiMethod,
       onSubmitSuccess,
       onSubmitError,
+      onFieldChange,
       initialData,
       model,
       allowUndo,
@@ -64,6 +66,7 @@ export default class Form extends React.Component {
     this.model.setInitialData(initialData);
     this.model.setFormOptions({
       allowUndo,
+      onFieldChange,
       onSubmitSuccess,
       onSubmitError,
       saveOnBlur,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
index 849281d334..ba6d1b8107 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
@@ -16,7 +16,9 @@ class JsonForm extends React.Component {
     forms: PropTypes.arrayOf(
       PropTypes.shape({
         title: PropTypes.string,
-        fields: PropTypes.arrayOf(FieldFromConfig.propTypes.field),
+        fields: PropTypes.arrayOf(
+          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
+        ),
       })
     ).isRequired,
     access: PropTypes.object,
@@ -73,16 +75,25 @@ class JsonForm extends React.Component {
             <Panel key={title} id={title}>
               <PanelHeader>{title}</PanelHeader>
               <PanelBody>
-                {fields.map(field => (
-                  <FieldFromConfig
-                    access={access}
-                    key={field.name}
-                    {...otherProps}
-                    {...additionalFieldProps}
-                    field={field}
-                    highlighted={this.state.highlighted === `#${field.name}`}
-                  />
-                ))}
+                {fields.map(field => {
+                  if (typeof field === 'function') {
+                    return field();
+                  }
+
+                  // eslint-disable-next-line no-unused-vars
+                  let {defaultValue, ...fieldWithoutDefaultValue} = field;
+
+                  return (
+                    <FieldFromConfig
+                      access={access}
+                      key={field.name}
+                      {...otherProps}
+                      {...additionalFieldProps}
+                      field={fieldWithoutDefaultValue}
+                      highlighted={this.state.highlighted === `#${field.name}`}
+                    />
+                  );
+                })}
               </PanelBody>
             </Panel>
           );
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index eb644b8172..01e44badf8 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -214,6 +214,10 @@ class FormModel {
   setValue(id, value) {
     this.fields.set(id, value);
 
+    if (this.options.onFieldChange) {
+      this.options.onFieldChange(id, value);
+    }
+
     // specifically check for empty string, 0 should be allowed
     if (!this.isValidRequiredField(id)) {
       this.setError(id, 'Field is required');
diff --git a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
index 35dd0eeba6..e2b22c2744 100644
--- a/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/settingsLayout.jsx
@@ -13,15 +13,25 @@ let StyledAlert = styled(Alert)`
   margin: 30px 0;
 `;
 
-// TODO(billy): Temp
+// TODO(billy): Temp #NEW-SETTINGS
 let NewSettingsWarning = ({location = {}}) => {
-  // TODO(billy): Remove this warning when ready
+  // This translates current URLs back to "old" settings URLs
+  // This is so that we can move from new settings back to old settings
   let projectRegex = /^\/settings\/organization\/([^\/]+)\/project\/([^\/]+)\//;
+  let accountRegex = /^\/settings\/account\/([^\/]+)\//;
   let isProject = projectRegex.test(location.pathname);
+  let isAccount = accountRegex.test(location.pathname);
   let oldLocation;
 
   if (isProject) {
     oldLocation = location.pathname.replace(projectRegex, '/$1/$2/settings/');
+  } else if (isAccount) {
+    oldLocation = location.pathname
+      .replace(accountRegex, '/account/settings/$1/')
+      .replace('details/', '')
+      .replace('settings/close-account/', 'remove/')
+      .replace('account/settings/api/', 'api/')
+      .replace('auth-tokens/', '');
   } else {
     oldLocation = location.pathname.replace(
       /^\/settings\/organization\//,
@@ -29,10 +39,8 @@ let NewSettingsWarning = ({location = {}}) => {
     );
   }
 
-  //if (oldLocation === location.pathname) return null;
-
-  // auth should not be react routes
-  let isRouter = !/\/(auth)\//.test(location.pathname);
+  // original org auth view and account settings are django views so we can't use react router navigation
+  let isRouter = !/\/(auth|account)\//.test(location.pathname);
   let linkProps = {
     href: isRouter ? undefined : oldLocation,
     to: isRouter ? oldLocation : undefined,
diff --git a/tests/js/setup.js b/tests/js/setup.js
index c534f17f74..bbe470ac6b 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -115,6 +115,76 @@ window.TestStubs = {
     };
   },
 
+  Authenticators: () => {
+    return {
+      Totp: params => ({
+        lastUsedAt: null,
+        enrollButton: 'Enroll',
+        description:
+          'An authenticator application that supports TOTP (like Google Authenticator or 1Password) can be used to conveniently secure your account.  A new token is generated every 30 seconds.',
+        isEnrolled: true,
+        removeButton: 'Remove',
+        id: 'totp',
+        createdAt: '2018-01-30T17:24:36.554Z',
+        configureButton: 'Info',
+        name: 'Authenticator App',
+        allowMultiEnrollment: false,
+        authId: '15',
+        canValidateOtp: true,
+        isBackupInterface: false,
+        ...params,
+      }),
+      Sms: params => ({
+        enrollButton: 'Enroll',
+        name: 'Text Message',
+        allowMultiEnrollment: false,
+        removeButton: 'Remove',
+        canValidateOtp: true,
+        isEnrolled: false,
+        configureButton: 'Info',
+        id: 'sms',
+        isBackupInterface: false,
+        description:
+          "This authenticator sends you text messages for verification.  It's useful as a backup method or when you do not have a phone that supports an authenticator application.",
+        ...params,
+      }),
+      U2f: params => ({
+        lastUsedAt: null,
+        enrollButton: 'Enroll',
+        description:
+          "Authenticate with a U2F hardware device. This is a device like a Yubikey or something similar which supports FIDO's U2F specification. This also requires a browser which supports this system (like Google Chrome).",
+        isEnrolled: true,
+        removeButton: 'Remove',
+        id: 'u2f',
+        createdAt: '2018-01-30T20:56:45.932Z',
+        configureButton: 'Configure',
+        name: 'U2F (Universal 2nd Factor)',
+        allowMultiEnrollment: true,
+        authId: '23',
+        canValidateOtp: false,
+        isBackupInterface: false,
+        ...params,
+      }),
+      Recovery: params => ({
+        lastUsedAt: null,
+        enrollButton: 'Activate',
+        description:
+          'Recovery codes can be used to access your account in the event you lose access to your device and cannot receive two-factor authentication codes.',
+        isEnrolled: true,
+        removeButton: null,
+        id: 'recovery',
+        createdAt: '2018-01-30T17:24:36.570Z',
+        configureButton: 'View Codes',
+        name: 'Recovery Codes',
+        allowMultiEnrollment: false,
+        authId: '16',
+        canValidateOtp: true,
+        isBackupInterface: true,
+        ...params,
+      }),
+    };
+  },
+
   AccountEmails: () => {
     return [
       {
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
new file mode 100644
index 0000000000..a048f20d58
--- /dev/null
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -0,0 +1,23 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`SettingsLayout renders 1`] = `
+<div>
+  <SettingsHeader>
+    <Box
+      flex="1"
+    >
+      <SettingsBreadcrumb
+        route={Object {}}
+        routes={Array []}
+      />
+    </Box>
+    <SettingsSearchContainer />
+  </SettingsHeader>
+  <Flex>
+    <Content>
+      <NewSettingsWarning />
+    </Content>
+  </Flex>
+  <SettingsActivity />
+</div>
+`;
diff --git a/tests/js/spec/components/settingsLayout.spec.jsx b/tests/js/spec/components/settingsLayout.spec.jsx
new file mode 100644
index 0000000000..b56e88924e
--- /dev/null
+++ b/tests/js/spec/components/settingsLayout.spec.jsx
@@ -0,0 +1,48 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Client} from 'app/api';
+import SettingsLayout from 'app/views/settings/settingsLayout';
+
+describe('SettingsLayout', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+    Client.addMockResponse({
+      url: '/internal/health/',
+      body: {
+        problems: [],
+      },
+    });
+    Client.addMockResponse({
+      url: '/organizations/',
+      body: [TestStubs.Organization()],
+    });
+    Client.addMockResponse({
+      url: '/organizations/org-slug/',
+      method: 'DELETE',
+      statusCode: 401,
+      body: {
+        sudoRequired: true,
+      },
+    });
+    Client.addMockResponse({
+      url: '/authenticators/',
+      body: [],
+    });
+  });
+
+  it('renders', function() {
+    let wrapper = shallow(<SettingsLayout route={{}} routes={[]} />);
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('can render navigation', function() {
+    const Navigation = () => <div>Navigation</div>;
+    let wrapper = shallow(
+      <SettingsLayout route={{}} routes={[]} renderNavigation={() => <Navigation />} />
+    );
+
+    expect(wrapper.find('Navigation')).toHaveLength(1);
+  });
+});
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
new file mode 100644
index 0000000000..70c7c75c94
--- /dev/null
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -0,0 +1,138 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import AccountSecurity from 'app/views/settings/account/accountSecurity';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+describe('AccountSecurity', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  it('renders empty', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [],
+    });
+
+    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+
+    expect(wrapper.find('EmptyMessage')).toHaveLength(1);
+  });
+
+  it('renders a primary interface that is enrolled', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Totp({configureButton: 'Info'})],
+    });
+
+    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+
+    expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Authenticator App');
+
+    // There should be an "Info" button
+    expect(
+      wrapper
+        .find('Button')
+        .first()
+        .prop('children')
+    ).toBe('Info');
+
+    // Remove button
+    expect(wrapper.find('Button .icon-trash')).toHaveLength(1);
+    expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+  });
+
+  it('can delete enrolled authenticator', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [
+        TestStubs.Authenticators().Totp({
+          authId: '15',
+          configureButton: 'Info',
+        }),
+      ],
+    });
+
+    let deleteMock = Client.addMockResponse({
+      url: `${ENDPOINT}15/`,
+      method: 'DELETE',
+    });
+
+    expect(deleteMock).not.toHaveBeenCalled();
+
+    let wrapper = mount(<AccountSecurity />, TestStubs.routerContext());
+    expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+
+    // This will open confirm modal
+    wrapper.find('Button .icon-trash').simulate('click');
+    // Confirm
+    wrapper
+      .find('Modal Button')
+      .last()
+      .simulate('click');
+
+    expect(deleteMock).toHaveBeenCalled();
+
+    setTimeout(() => {
+      wrapper.update();
+      expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
+    }, 1);
+  });
+
+  it('renders a primary interface that is not enrolled', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Totp({isEnrolled: false})],
+    });
+
+    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+
+    expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Authenticator App');
+    // There should be an "Add" button
+    expect(
+      wrapper
+        .find('Button')
+        .first()
+        .prop('children')
+    ).toBe('Add');
+    expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
+  });
+
+  it('renders a backup interface that is not enrolled', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Recovery({isEnrolled: false})],
+    });
+
+    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+
+    expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Recovery Codes');
+
+    // There should be an View Codes button
+    expect(wrapper.find('Button')).toHaveLength(0);
+    expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
+  });
+
+  it('renders a backup interface that is enrolled', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      body: [TestStubs.Authenticators().Recovery({isEnrolled: true})],
+    });
+
+    let wrapper = shallow(<AccountSecurity />, TestStubs.routerContext());
+
+    expect(wrapper.find('AuthenticatorName').prop('children')).toBe('Recovery Codes');
+
+    // There should be an View Codes button
+    expect(
+      wrapper
+        .find('Button')
+        .first()
+        .prop('children')
+    ).toBe('View Codes');
+    expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+  });
+});
diff --git a/tests/js/spec/views/accountSecurityDetails.spec.jsx b/tests/js/spec/views/accountSecurityDetails.spec.jsx
new file mode 100644
index 0000000000..403b82f58d
--- /dev/null
+++ b/tests/js/spec/views/accountSecurityDetails.spec.jsx
@@ -0,0 +1,97 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import AccountSecurityDetails from 'app/views/settings/account/accountSecurity/accountSecurityDetails';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+describe('AccountSecurityDetails', function() {
+  let wrapper;
+
+  describe('Totp', function() {
+    Client.clearMockResponses();
+    beforeAll(function() {
+      Client.addMockResponse({
+        url: `${ENDPOINT}15/`,
+        body: TestStubs.Authenticators().Totp(),
+      });
+      wrapper = mount(<AccountSecurityDetails />, {
+        context: {
+          router: {
+            ...TestStubs.router(),
+            params: {
+              authId: 15,
+            },
+          },
+        },
+      });
+    });
+
+    it('has enrolled circle indicator', function() {
+      expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+    });
+
+    it('has created and last used dates', function() {
+      expect(wrapper.find('AuthenticatorDate')).toHaveLength(2);
+    });
+
+    it('can remove method', function() {
+      let deleteMock = Client.addMockResponse({
+        url: `${ENDPOINT}15/`,
+        method: 'DELETE',
+      });
+
+      wrapper.find('RemoveConfirm Button').simulate('click');
+      wrapper
+        .find('Modal Button')
+        .last()
+        .simulate('click');
+
+      expect(deleteMock).toHaveBeenCalled();
+    });
+  });
+
+  describe('Recovery', function() {
+    beforeEach(function() {
+      Client.clearMockResponses();
+      Client.addMockResponse({
+        url: `${ENDPOINT}16/`,
+        body: TestStubs.Authenticators().Recovery(),
+      });
+      wrapper = mount(<AccountSecurityDetails />, {
+        context: {
+          router: {
+            ...TestStubs.router(),
+            params: {
+              authId: 16,
+            },
+          },
+        },
+      });
+    });
+
+    it('has enrolled circle indicator', function() {
+      expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+    });
+
+    it('has created and last used dates', function() {
+      expect(wrapper.find('AuthenticatorDate')).toHaveLength(2);
+    });
+
+    it('does not have remove button', function() {
+      expect(wrapper.find('RemoveConfirm')).toHaveLength(0);
+    });
+
+    it('regenerates codes', function() {
+      let deleteMock = Client.addMockResponse({
+        url: `${ENDPOINT}16/`,
+        method: 'PUT',
+      });
+
+      wrapper.find('RecoveryCodes').prop('onRegenerateBackupCodes')();
+
+      expect(deleteMock).toHaveBeenCalled();
+    });
+  });
+});
diff --git a/tests/js/spec/views/accountSecurityEnroll.spec.jsx b/tests/js/spec/views/accountSecurityEnroll.spec.jsx
new file mode 100644
index 0000000000..5a3650a967
--- /dev/null
+++ b/tests/js/spec/views/accountSecurityEnroll.spec.jsx
@@ -0,0 +1,114 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import AccountSecurityEnroll from 'app/views/settings/account/accountSecurity/accountSecurityEnroll';
+
+const ENDPOINT = '/users/me/authenticators/';
+
+describe('AccountSecurityEnroll', function() {
+  let wrapper;
+
+  describe('Totp', function() {
+    Client.clearMockResponses();
+    let authenticator = TestStubs.Authenticators().Totp({
+      isEnrolled: false,
+      qrcode: [[1, 0]],
+      secret: 'secret',
+      form: [
+        {
+          type: 'string',
+          name: 'otp',
+        },
+      ],
+    });
+
+    beforeAll(function() {
+      Client.addMockResponse({
+        url: `${ENDPOINT}${authenticator.authId}/enroll/`,
+        body: authenticator,
+      });
+      wrapper = mount(<AccountSecurityEnroll />, {
+        context: {
+          router: {
+            ...TestStubs.router(),
+            params: {
+              authId: authenticator.authId,
+            },
+          },
+        },
+      });
+    });
+
+    it('does not have enrolled circle indicator', function() {
+      expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(false);
+    });
+
+    it('has qrcode component', function() {
+      expect(wrapper.find('Qrcode')).toHaveLength(1);
+    });
+
+    it('can enroll', function() {
+      let enrollMock = Client.addMockResponse({
+        url: `${ENDPOINT}${authenticator.authId}/enroll/`,
+        method: 'POST',
+      });
+
+      wrapper.find('input[name="otp"]').simulate('change', {target: {value: 'otp'}});
+      wrapper.find('Form').simulate('submit');
+      expect(enrollMock).toHaveBeenCalledWith(
+        `${ENDPOINT}15/enroll/`,
+        expect.objectContaining({
+          method: 'POST',
+          data: expect.objectContaining({
+            secret: 'secret',
+            otp: 'otp',
+          }),
+        })
+      );
+    });
+  });
+
+  describe.skip('Recovery', function() {
+    beforeEach(function() {
+      Client.clearMockResponses();
+      Client.addMockResponse({
+        url: `${ENDPOINT}16/`,
+        body: TestStubs.Authenticators().Recovery(),
+      });
+      wrapper = mount(<AccountSecurityEnroll />, {
+        context: {
+          router: {
+            ...TestStubs.router(),
+            params: {
+              authId: 16,
+            },
+          },
+        },
+      });
+    });
+
+    it('has enrolled circle indicator', function() {
+      expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
+    });
+
+    it('has created and last used dates', function() {
+      expect(wrapper.find('AuthenticatorDate')).toHaveLength(2);
+    });
+
+    it('does not have remove button', function() {
+      expect(wrapper.find('RemoveConfirm')).toHaveLength(0);
+    });
+
+    it('regenerates codes', function() {
+      let deleteMock = Client.addMockResponse({
+        url: `${ENDPOINT}16/`,
+        method: 'PUT',
+      });
+
+      wrapper.find('RecoveryCodes').prop('onRegenerateBackupCodes')();
+
+      expect(deleteMock).toHaveBeenCalled();
+    });
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index 537293e755..9f69fe99d3 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -103,6 +103,58 @@ class UserAuthenticatorDetailsTest(APITestCase):
         assert 'challenge' not in resp.data
         assert 'response' not in resp.data
 
+    def test_u2f_remove_device(self):
+        auth = Authenticator.objects.create(
+            type=3,  # u2f
+            user=self.user,
+            config={
+                'devices': [{
+                    'binding': {
+                        'publicKey': 'aowekroawker',
+                        'keyHandle': 'devicekeyhandle',
+                        'appId': 'https://dev.getsentry.net:8000/auth/2fa/u2fappid.json'
+                    },
+                    'name': 'Amused Beetle',
+                    'ts': 1512505334
+                }, {
+                    'binding': {
+                        'publicKey': 'publickey',
+                        'keyHandle': 'aowerkoweraowerkkro',
+                        'appId': 'https://dev.getsentry.net:8000/auth/2fa/u2fappid.json'
+                    },
+                    'name': 'Sentry',
+                    'ts': 1512505334
+                }]
+            }
+        )
+
+        url = reverse(
+            'sentry-api-0-user-authenticator-device-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': auth.id,
+                'interface_device_id': 'devicekeyhandle'
+            }
+        )
+
+        resp = self.client.delete(url)
+        assert resp.status_code == 204
+
+        authenticator = Authenticator.objects.get(id=auth.id)
+        assert len(authenticator.interface.get_registered_devices()) == 1
+
+        # Can't remove last device
+        url = reverse(
+            'sentry-api-0-user-authenticator-device-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': auth.id,
+                'interface_device_id': 'aowerkoweraowerkkro',
+            }
+        )
+        resp = self.client.delete(url)
+        assert resp.status_code == 500
+
     def test_sms_get_phone(self):
         interface = SmsInterface()
         interface.phone_number = '5551231234'
