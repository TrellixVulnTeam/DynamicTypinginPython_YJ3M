commit 772b126941b532d4cd6b3519e0d9d67e332a90ca
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Oct 6 16:30:18 2015 -0700

    Handle serialization with a mix of None's
    
    Fixes GH-2100

diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index 2180ce5db8..04df4dc5f4 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -17,10 +17,16 @@ def serialize(objects, user=None, serializer=None):
 
     # elif isinstance(obj, dict):
     #     return dict((k, serialize(v, request=request)) for k, v in obj.iteritems())
+
     if serializer is None:
-        try:
-            serializer = registry[type(objects[0])]
-        except KeyError:
+        # find the first object that is in the registry
+        for o in objects:
+            try:
+                serializer = registry[type(o)]
+                break
+            except KeyError:
+                pass
+        else:
             return objects
 
     attrs = serializer.get_attrs(item_list=objects, user=user)
@@ -35,8 +41,10 @@ def register(type):
 
 
 class Serializer(object):
-    def __call__(self, *args, **kwargs):
-        return self.serialize(*args, **kwargs)
+    def __call__(self, obj, attrs, user):
+        if not obj:
+            return obj
+        return self.serialize(obj, attrs, user)
 
     def get_attrs(self, item_list, user):
         return {}
diff --git a/tests/sentry/api/serializers/test_base.py b/tests/sentry/api/serializers/test_base.py
new file mode 100644
index 0000000000..09b378a553
--- /dev/null
+++ b/tests/sentry/api/serializers/test_base.py
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.api.serializers import serialize
+from sentry.testutils import TestCase
+
+
+class BaseSerializerTest(TestCase):
+    def test_simple(self):
+        assert serialize([]) == []
+        assert serialize(None) is None
+
+        user = self.create_user()
+        # We don't want to assert on the value, just that it serialized
+        assert isinstance(serialize(user), dict)
+
+        f = type('lol', (), {})()
+        assert serialize(f) is f, 'should return the object when unknown'
+
+        rv = serialize([user])
+        assert isinstance(rv, list)
+        assert len(rv) == 1
+
+        rv = serialize([user, None])
+        assert isinstance(rv, list)
+        assert len(rv) == 2
+        assert rv[1] is None
+
+        rv = serialize([None, user])
+        assert isinstance(rv, list)
+        assert len(rv) == 2
+        assert rv[0] is None
+        assert isinstance(rv[1], dict)
