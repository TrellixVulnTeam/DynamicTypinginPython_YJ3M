commit 0476ca2222f0da45fa85a49cc5718c1262234616
Author: David Cramer <dcramer@gmail.com>
Date:   Tue May 17 11:19:43 2016 -0500

    Disable DISALLOWED_IPS by default in tests

diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index d77d693fb2..402e493eb0 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -44,8 +44,6 @@ def pytest_configure(config):
 
     settings.TEMPLATE_DEBUG = True
 
-    settings.SENTRY_DISALLOWED_IPS = ('127.0.0.1',)
-
     # Disable static compiling in tests
     settings.STATIC_BUNDLES = {}
 
@@ -136,6 +134,10 @@ def pytest_configure(config):
     # force celery registration
     from sentry.celery import app  # NOQA
 
+    # disable DISALLOWED_IPS
+    from sentry import http
+    http.DISALLOWED_IPS = set()
+
 
 def pytest_runtest_teardown(item):
     from sentry.app import tsdb
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index 0e2dd981a2..d72dabc105 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -4,24 +4,19 @@ import responses
 import pytest
 
 from django.core.exceptions import SuspiciousOperation
-from mock import patch
+from ipaddr import IPNetwork
 
-from sentry.http import safe_urlopen, safe_urlread
+from sentry import http
 from sentry.testutils import TestCase
 
 
 class HttpTest(TestCase):
     @responses.activate
-    @patch('socket.gethostbyname')
-    def test_simple(self, mock_gethostbyname):
+    def test_simple(self):
         responses.add(responses.GET, 'http://example.com', body='foo bar')
 
-        # this test fails if you dont have working DNS as it resolves it to
-        # localhost, so we patch gethostbyname
-        mock_gethostbyname.return_value = '208.1.41.1'
-
-        resp = safe_urlopen('http://example.com')
-        data = safe_urlread(resp)
+        resp = http.safe_urlopen('http://example.com')
+        data = http.safe_urlread(resp)
         assert data == 'foo bar'
 
         request = responses.calls[0].request
@@ -31,5 +26,6 @@ class HttpTest(TestCase):
     # XXX(dcramer): we can't use responses here as it hooks Session.send
     # @responses.activate
     def test_ip_blacklist(self):
+        http.DISALLOWED_IPS = set([IPNetwork('127.0.0.1')])
         with pytest.raises(SuspiciousOperation):
-            safe_urlopen('http://127.0.0.1')
+            http.safe_urlopen('http://127.0.0.1')
