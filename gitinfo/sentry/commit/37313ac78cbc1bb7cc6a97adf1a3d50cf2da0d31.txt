commit 37313ac78cbc1bb7cc6a97adf1a3d50cf2da0d31
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Jun 8 15:48:58 2020 -0700

    feat(ui): Add NumberDragControl (for metric alerts) (#19200)

diff --git a/docs-ui/components/numberDragControl.stories.js b/docs-ui/components/numberDragControl.stories.js
new file mode 100644
index 0000000000..0bd0875d11
--- /dev/null
+++ b/docs-ui/components/numberDragControl.stories.js
@@ -0,0 +1,24 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import styled from '@emotion/styled';
+import {select, number} from '@storybook/addon-knobs';
+import {action} from '@storybook/addon-actions';
+
+import NumberDragControl from 'app/components/numberDragControl';
+
+const onChange = action('onChange');
+
+storiesOf('Forms|Controls', module).add('NumberDragControl', () => (
+  <Container>
+    <NumberDragControl
+      axis={select('Direction', {x: 'x', y: 'y'}, 'x')}
+      step={number('Step')}
+      shiftStep={number('Shift held step')}
+      onChange={delta => onChange(delta)}
+    />
+  </Container>
+));
+
+const Container = styled('div')`
+  display: inline-block;
+`;
diff --git a/src/sentry/static/sentry/app/components/numberDragControl.tsx b/src/sentry/static/sentry/app/components/numberDragControl.tsx
new file mode 100644
index 0000000000..c864d4275d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/numberDragControl.tsx
@@ -0,0 +1,83 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {IconArrow} from 'app/icons';
+import space from 'app/styles/space';
+
+type NumberDragControlProps = {
+  onChange: (delta: number, event: React.MouseEvent<HTMLDivElement>) => void;
+  axis?: 'x' | 'y';
+  /**
+   * The value to increment by as the mouse is dragged. Defaults to 1
+   */
+  step?: number;
+  /**
+   * The value to increment by if the shift key is held. Defaults to 1
+   */
+  shiftStep?: number;
+};
+
+type Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof NumberDragControlProps> &
+  NumberDragControlProps;
+
+type State = {
+  isClicked: boolean;
+};
+
+class NumberDragControl extends React.Component<Props, State> {
+  state: State = {
+    isClicked: false,
+  };
+
+  render() {
+    const {onChange, axis, step, shiftStep, ...props} = this.props;
+    const isX = (axis ?? 'x') === 'x';
+
+    return (
+      <Wrapper
+        {...props}
+        onMouseDown={(event: React.MouseEvent<HTMLDivElement>) => {
+          if (event.button !== 0) {
+            return;
+          }
+          event.currentTarget.requestPointerLock();
+          this.setState({isClicked: true});
+        }}
+        onMouseUp={() => {
+          document.exitPointerLock();
+          this.setState({isClicked: false});
+        }}
+        onMouseMove={(event: React.MouseEvent<HTMLDivElement>) => {
+          if (!this.state.isClicked) {
+            return;
+          }
+          const delta = isX ? event.movementX : event.movementY * -1;
+          const deltaOne = delta > 0 ? Math.ceil(delta / 100) : Math.floor(delta / 100);
+          const deltaStep = deltaOne * ((event.shiftKey ? shiftStep : step) ?? 1);
+
+          onChange(deltaStep, event);
+        }}
+        isActive={this.state.isClicked}
+        isX={isX}
+      >
+        <IconArrow direction={isX ? 'left' : 'up'} size="8px" />
+        <IconArrow direction={isX ? 'right' : 'down'} size="8px" />
+      </Wrapper>
+    );
+  }
+}
+
+const Wrapper = styled('div')<{isActive: boolean; isX: boolean}>`
+  display: grid;
+  padding: ${space(0.5)};
+  ${p =>
+    p.isX
+      ? 'grid-template-columns: max-content max-content'
+      : 'grid-template-rows: max-content max-content'};
+  cursor: ${p => (p.isX ? 'ew-resize' : 'ns-resize')};
+  color: ${p => (p.isActive ? p.theme.gray800 : p.theme.gray500)};
+  background: ${p => p.isActive && p.theme.gray200};
+  border-radius: 2px;
+`;
+
+export default NumberDragControl;
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx
index a0027785d3..18a1241c8d 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/thresholdControl.tsx
@@ -6,10 +6,12 @@ import {
   AlertRuleThreshold,
   AlertRuleThresholdType,
 } from 'app/views/settings/incidentRules/types';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import Input from 'app/views/settings/components/forms/controls/input';
 import SelectControl from 'app/components/forms/selectControl';
 import space from 'app/styles/space';
+import NumberDragControl from 'app/components/numberDragControl';
+import Tooltip from 'app/components/tooltip';
 
 type Props = ThresholdControlValue & {
   type: AlertRuleThreshold;
@@ -83,6 +85,12 @@ class ThresholdControl extends React.Component<Props, State> {
     );
   };
 
+  handleDragChange = (delta: number, e: React.MouseEvent) => {
+    const {onChange, type, thresholdType, threshold} = this.props;
+    const currentValue = threshold || 0;
+    onChange(type, {thresholdType, threshold: currentValue + delta}, e);
+  };
+
   render() {
     const {currentValue} = this.state;
     const {thresholdType, threshold, type, onChange: _, disabled, ...props} = this.props;
@@ -108,12 +116,28 @@ class ThresholdControl extends React.Component<Props, State> {
           onChange={this.handleThresholdChange}
           onBlur={this.handleThresholdBlur}
         />
+        <DragContainer>
+          <Tooltip
+            title={tct('Drag to adjust threshold[break]You can hold shift to fine tune', {
+              break: <br />,
+            })}
+          >
+            <NumberDragControl step={5} axis="y" onChange={this.handleDragChange} />
+          </Tooltip>
+        </DragContainer>
       </div>
     );
   }
 }
 
+const DragContainer = styled('div')`
+  position: absolute;
+  top: 6px;
+  right: 12px;
+`;
+
 export default styled(ThresholdControl)`
+  position: relative;
   display: grid;
   align-items: center;
   grid-template-columns: 1fr 3fr;
