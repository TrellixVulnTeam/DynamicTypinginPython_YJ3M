commit 0f9b1fc56cc37bca1d392c796323790a529cab17
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri Jan 13 16:33:20 2017 -0800

    get rid of transactions in release creation (#4767)

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 2da71bd34b..a4ca5c3b47 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 import string
 
-from django.db import transaction
 from rest_framework import serializers
 from rest_framework.response import Response
 
@@ -139,43 +138,42 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
         if serializer.is_valid():
             result = serializer.object
 
-            with transaction.atomic():
-                # release creation is idempotent to simplify user
-                # experiences
+            # release creation is idempotent to simplify user
+            # experiences
+            release = Release.objects.filter(
+                organization_id=project.organization_id,
+                version=result['version'],
+                projects=project
+            ).first()
+            created = False
+            if release:
+                was_released = bool(release.date_released)
+            else:
                 release = Release.objects.filter(
                     organization_id=project.organization_id,
                     version=result['version'],
-                    projects=project
                 ).first()
-                created = False
-                if release:
-                    was_released = bool(release.date_released)
-                else:
-                    release = Release.objects.filter(
-                        organization_id=project.organization_id,
-                        version=result['version'],
-                    ).first()
-                    if not release:
-                        lock_key = Release.get_lock_key(project.organization_id, result['version'])
-                        lock = locks.get(lock_key, duration=5)
-                        with TimedRetryPolicy(10)(lock.acquire):
-                            try:
-                                release, created = Release.objects.get(
-                                    version=result['version'],
-                                    organization_id=project.organization_id
-                                ), False
-                            except Release.DoesNotExist:
-                                release, created = Release.objects.create(
-                                    organization_id=project.organization_id,
-                                    version=result['version'],
-                                    ref=result.get('ref'),
-                                    url=result.get('url'),
-                                    owner=result.get('owner'),
-                                    date_started=result.get('dateStarted'),
-                                    date_released=result.get('dateReleased'),
-                                ), True
-                    was_released = False
-                    release.add_project(project)
+                if not release:
+                    lock_key = Release.get_lock_key(project.organization_id, result['version'])
+                    lock = locks.get(lock_key, duration=5)
+                    with TimedRetryPolicy(10)(lock.acquire):
+                        try:
+                            release, created = Release.objects.get(
+                                version=result['version'],
+                                organization_id=project.organization_id
+                            ), False
+                        except Release.DoesNotExist:
+                            release, created = Release.objects.create(
+                                organization_id=project.organization_id,
+                                version=result['version'],
+                                ref=result.get('ref'),
+                                url=result.get('url'),
+                                owner=result.get('owner'),
+                                date_started=result.get('dateStarted'),
+                                date_released=result.get('dateReleased'),
+                            ), True
+                was_released = False
+                release.add_project(project)
 
             commit_list = result.get('commits')
             if commit_list:
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 459a06c28e..669de3def2 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -107,33 +107,32 @@ class Release(Model):
         if release in (None, -1):
             # TODO(dcramer): if the cache result is -1 we could attempt a
             # default create here instead of default get
-            with transaction.atomic():
+            release = cls.objects.filter(
+                organization_id=project.organization_id,
+                version=version,
+                projects=project
+            ).first()
+            if not release:
                 release = cls.objects.filter(
                     organization_id=project.organization_id,
-                    version=version,
-                    projects=project
+                    version=version
                 ).first()
                 if not release:
-                    release = cls.objects.filter(
-                        organization_id=project.organization_id,
-                        version=version
-                    ).first()
-                    if not release:
-                        lock_key = cls.get_lock_key(project.organization_id, version)
-                        lock = locks.get(lock_key, duration=5)
-                        with TimedRetryPolicy(10)(lock.acquire):
-                            try:
-                                release = cls.objects.get(
-                                    organization_id=project.organization_id,
-                                    version=version
-                                )
-                            except cls.DoesNotExist:
-                                release = cls.objects.create(
-                                    organization_id=project.organization_id,
-                                    version=version,
-                                    date_added=date_added
-                                )
-                    release.add_project(project)
+                    lock_key = cls.get_lock_key(project.organization_id, version)
+                    lock = locks.get(lock_key, duration=5)
+                    with TimedRetryPolicy(10)(lock.acquire):
+                        try:
+                            release = cls.objects.get(
+                                organization_id=project.organization_id,
+                                version=version
+                            )
+                        except cls.DoesNotExist:
+                            release = cls.objects.create(
+                                organization_id=project.organization_id,
+                                version=version,
+                                date_added=date_added
+                            )
+                release.add_project(project)
 
             # TODO(dcramer): upon creating a new release, check if it should be
             # the new "latest release" for this project
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index 7dc14591eb..6e7c3af4fc 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -32,36 +32,35 @@ class ReleaseHook(object):
     def start_release(self, version, **values):
         values.setdefault('date_started', timezone.now())
 
-        with transaction.atomic():
-            affected = Release.objects.filter(
+        affected = Release.objects.filter(
+            version=version,
+            organization_id=self.project.organization_id,
+            projects=self.project,
+        ).update(**values)
+        if not affected:
+            release = Release.objects.filter(
                 version=version,
                 organization_id=self.project.organization_id,
-                projects=self.project,
-            ).update(**values)
-            if not affected:
-                release = Release.objects.filter(
-                    version=version,
-                    organization_id=self.project.organization_id,
-                ).first()
-                if release:
-                    release.update(**values)
-                else:
-                    lock_key = Release.get_lock_key(self.project.organization_id, version)
-                    lock = locks.get(lock_key, duration=5)
-                    with TimedRetryPolicy(10)(lock.acquire):
-                        try:
-                            release = Release.objects.get(
-                                version=version,
-                                organization_id=self.project.organization_id
-                            )
-                        except Release.DoesNotExist:
-                            release = Release.objects.create(
-                                version=version,
-                                organization_id=self.project.organization_id,
-                                **values
-                            )
-
-                release.add_project(self.project)
+            ).first()
+            if release:
+                release.update(**values)
+            else:
+                lock_key = Release.get_lock_key(self.project.organization_id, version)
+                lock = locks.get(lock_key, duration=5)
+                with TimedRetryPolicy(10)(lock.acquire):
+                    try:
+                        release = Release.objects.get(
+                            version=version,
+                            organization_id=self.project.organization_id
+                        )
+                    except Release.DoesNotExist:
+                        release = Release.objects.create(
+                            version=version,
+                            organization_id=self.project.organization_id,
+                            **values
+                        )
+
+            release.add_project(self.project)
 
     # TODO(dcramer): this is being used by the release details endpoint, but
     # it'd be ideal if most if not all of this logic lived there, and this
@@ -73,32 +72,31 @@ class ReleaseHook(object):
         Calling this method will remove all existing commit history.
         """
         project = self.project
-        with transaction.atomic():
+        release = Release.objects.filter(
+            organization_id=project.organization_id,
+            version=version,
+            projects=self.project
+        ).first()
+        if not release:
             release = Release.objects.filter(
                 organization_id=project.organization_id,
                 version=version,
-                projects=self.project
             ).first()
             if not release:
-                release = Release.objects.filter(
-                    organization_id=project.organization_id,
-                    version=version,
-                ).first()
-                if not release:
-                    lock_key = Release.get_lock_key(project.organization_id, version)
-                    lock = locks.get(lock_key, duration=5)
-                    with TimedRetryPolicy(10)(lock.acquire):
-                        try:
-                            release = Release.objects.get(
-                                organization_id=project.organization_id,
-                                version=version
-                            )
-                        except Release.DoesNotExist:
-                            release = Release.objects.create(
-                                organization_id=project.organization_id,
-                                version=version
-                            )
-                release.add_project(project)
+                lock_key = Release.get_lock_key(project.organization_id, version)
+                lock = locks.get(lock_key, duration=5)
+                with TimedRetryPolicy(10)(lock.acquire):
+                    try:
+                        release = Release.objects.get(
+                            organization_id=project.organization_id,
+                            version=version
+                        )
+                    except Release.DoesNotExist:
+                        release = Release.objects.create(
+                            organization_id=project.organization_id,
+                            version=version
+                        )
+            release.add_project(project)
 
         with transaction.atomic():
             # TODO(dcramer): would be good to optimize the logic to avoid these
@@ -158,35 +156,34 @@ class ReleaseHook(object):
 
     def finish_release(self, version, **values):
         values.setdefault('date_released', timezone.now())
-        with transaction.atomic():
-            affected = Release.objects.filter(
+        affected = Release.objects.filter(
+            version=version,
+            organization_id=self.project.organization_id,
+            projects=self.project,
+        ).update(**values)
+        if not affected:
+            release = Release.objects.filter(
                 version=version,
                 organization_id=self.project.organization_id,
-                projects=self.project,
-            ).update(**values)
-            if not affected:
-                release = Release.objects.filter(
-                    version=version,
-                    organization_id=self.project.organization_id,
-                ).first()
-                if release:
-                    release.update(**values)
-                else:
-                    lock_key = Release.get_lock_key(self.project.organization_id, version)
-                    lock = locks.get(lock_key, duration=5)
-                    with TimedRetryPolicy(10)(lock.acquire):
-                        try:
-                            release = Release.objects.get(
-                                version=version,
-                                organization_id=self.project.organization_id,
-                            )
-                        except Release.DoesNotExist:
-                            release = Release.objects.create(
-                                version=version,
-                                organization_id=self.project.organization_id,
-                                **values
-                            )
-                release.add_project(self.project)
+            ).first()
+            if release:
+                release.update(**values)
+            else:
+                lock_key = Release.get_lock_key(self.project.organization_id, version)
+                lock = locks.get(lock_key, duration=5)
+                with TimedRetryPolicy(10)(lock.acquire):
+                    try:
+                        release = Release.objects.get(
+                            version=version,
+                            organization_id=self.project.organization_id,
+                        )
+                    except Release.DoesNotExist:
+                        release = Release.objects.create(
+                            version=version,
+                            organization_id=self.project.organization_id,
+                            **values
+                        )
+            release.add_project(self.project)
 
         activity = Activity.objects.create(
             type=Activity.RELEASE,
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 58613a320d..55996f2f7e 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import, print_function
 
-from django.db import transaction
 from django.db.models.signals import post_save
 
 from sentry.app import locks
@@ -16,36 +15,35 @@ def ensure_release_exists(instance, created, **kwargs):
     if instance.data and instance.data.get('release_id'):
         return
 
-    with transaction.atomic():
-        affected = Release.objects.filter(
+    affected = Release.objects.filter(
+        organization_id=instance.project.organization_id,
+        version=instance.value,
+        projects=instance.project
+    ).update(date_added=instance.first_seen)
+    if not affected:
+        release = Release.objects.filter(
             organization_id=instance.project.organization_id,
-            version=instance.value,
-            projects=instance.project
-        ).update(date_added=instance.first_seen)
-        if not affected:
-            release = Release.objects.filter(
-                organization_id=instance.project.organization_id,
-                version=instance.value
-            ).first()
-            if release:
-                release.update(date_added=instance.first_seen)
-            else:
-                lock_key = Release.get_lock_key(instance.project.organization_id, instance.value)
-                lock = locks.get(lock_key, duration=5)
-                with TimedRetryPolicy(10)(lock.acquire):
-                    try:
-                        release = Release.objects.get(
-                            organization_id=instance.project.organization_id,
-                            version=instance.value,
-                        )
-                    except Release.DoesNotExist:
-                        release = Release.objects.create(
-                            organization_id=instance.project.organization_id,
-                            version=instance.value,
-                            date_added=instance.first_seen,
-                        )
-                        instance.update(data={'release_id': release.id})
-            release.add_project(instance.project)
+            version=instance.value
+        ).first()
+        if release:
+            release.update(date_added=instance.first_seen)
+        else:
+            lock_key = Release.get_lock_key(instance.project.organization_id, instance.value)
+            lock = locks.get(lock_key, duration=5)
+            with TimedRetryPolicy(10)(lock.acquire):
+                try:
+                    release = Release.objects.get(
+                        organization_id=instance.project.organization_id,
+                        version=instance.value,
+                    )
+                except Release.DoesNotExist:
+                    release = Release.objects.create(
+                        organization_id=instance.project.organization_id,
+                        version=instance.value,
+                        date_added=instance.first_seen,
+                    )
+                    instance.update(data={'release_id': release.id})
+        release.add_project(instance.project)
 
 
 def resolve_group_resolutions(instance, created, **kwargs):
