commit 1cdd20c9b4c2f7481311e9360f634680037dc6a4
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 5 16:48:31 2016 -0700

    Improvements to security flows
    
    - Move mfa to Security settings under account
    - Require password confirmation on email change
    - Improve managed user flows
    - Remove feature flag for mfa
    - Remove sudo on various account settings
    
    /cc @getsentry/infrastructure @getsentry/security

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index fdd3d475b4..53c8e254ae 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -635,7 +635,6 @@ SENTRY_CLIENT = 'sentry.utils.raven.SentryInternalClient'
 
 SENTRY_FEATURES = {
     'auth:register': True,
-    'auth:twofactor': True,
     'organizations:api-keys': True,
     'organizations:create': True,
     'organizations:sso': True,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 95686c9ec5..4d2ed7c634 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -7,7 +7,6 @@ from .manager import *  # NOQA
 
 default_manager = FeatureManager()
 default_manager.add('auth:register')
-default_manager.add('auth:twofactor')
 default_manager.add('organizations:api-keys', OrganizationFeature)
 default_manager.add('organizations:create')
 default_manager.add('organizations:sso', OrganizationFeature)
diff --git a/src/sentry/templates/sentry/account/security.html b/src/sentry/templates/sentry/account/security.html
new file mode 100644
index 0000000000..12f860be2d
--- /dev/null
+++ b/src/sentry/templates/sentry/account/security.html
@@ -0,0 +1,22 @@
+{% extends "sentry/bases/account.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Account Security" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+  <legend>{% trans "Two-factor authenticaton"  %}</legend>
+  {% if has_2fa %}
+    <p class="well">
+      <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Manage" %}</a>
+      <span class="circle-indicator enabled"></span>{% blocktrans  %}Two-factor authentication is <strong>enabled</strong>.{% endblocktrans  %}
+    </p>
+  {% else %}
+    <p class="well">
+      <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Enable" %}</a>
+      <span class="circle-indicator disabled"></span>{% blocktrans  %}Two-factor authentication is currently <strong>disabled</strong>.{% endblocktrans  %}</p>
+    <p></p>
+  {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
index 126ca7632e..e2236d4f9e 100644
--- a/src/sentry/templates/sentry/account/settings.html
+++ b/src/sentry/templates/sentry/account/settings.html
@@ -42,45 +42,33 @@
             </div>
           </div>
           <div class="account-settings-body">
-            {% with settings_form.name as field %}
-                {{ field|as_crispy_field }}
+            {% with form.name as field %}
+              {{ field|as_crispy_field }}
             {% endwith %}
-            {% if settings_form.username %}
-                {% with settings_form.username as field %}
-                    {{ field|as_crispy_field }}
-                {% endwith %}
-            {% endif %}
-            {% with settings_form.email as field %}
+            {% if form.username %}
+              {% with form.username as field %}
                 {{ field|as_crispy_field }}
+              {% endwith %}
+            {% endif %}
+            {% with form.email as field %}
+              {{ field|as_crispy_field }}
             {% endwith %}
+            {% if form.new_password %}
+              <p class="help-block pull-right" style="margin-top: 0">({% trans "Optional" %})</p>
+              {% with form.new_password as field %}
+                {{ field|as_crispy_field }}
+              {% endwith %}
+            {% endif %}
           </div>
         </div>
 
-        {% if password_form %}
-          <legend>{% trans "Change Password"  %}</legend>
-          {% with password_form.password as field %}
-              {{ field|as_crispy_field }}
-          {% endwith %}
-          {% with password_form.new_password as field %}
+        {% if form.password %}
+          <legend>{% trans "Verification"  %}</legend>
+          {% with form.password as field %}
               {{ field|as_crispy_field }}
           {% endwith %}
         {% endif %}
 
-        {% feature auth:twofactor %}
-          <legend>{% trans "Two-factor authenticaton"  %}</legend>
-          {% if has_2fa %}
-            <p class="well">
-              <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Manage" %}</a>
-              <span class="circle-indicator enabled"></span>{% blocktrans  %}Two-factor authentication is <strong>enabled</strong>.{% endblocktrans  %}
-            </p>
-          {% else %}
-            <p class="well">
-              <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Enable" %}</a>
-              <span class="circle-indicator disabled"></span>{% blocktrans  %}Two-factor authentication is currently <strong>disabled</strong>.{% endblocktrans  %}</p>
-            <p></p>
-          {% endif %}
-        {% endfeature %}
-
         {% if not form.is_readonly %}
           <fieldset class="form-actions">
               <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
diff --git a/src/sentry/templates/sentry/bases/account.html b/src/sentry/templates/sentry/bases/account.html
index ff836ba14b..06f3afc073 100644
--- a/src/sentry/templates/sentry/bases/account.html
+++ b/src/sentry/templates/sentry/bases/account.html
@@ -1,6 +1,7 @@
 {% extends "sentry/bases/modal.html" %}
 
 {% load i18n %}
+{% load sentry_features %}
 {% load sentry_helpers %}
 
 {% block title %}{% trans "Settings" %} | {{ block.super }}{% endblock %}
@@ -22,9 +23,10 @@
           <li{% if page == 'avatar' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-avatar' %}">{% trans "Avatar" %}</a></li>
           <li{% if page == 'appearance' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-appearance' %}">{% trans "Appearance" %}</a></li>
           <li{% if page == 'notifications' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-notifications' %}">{% trans "Notifications" %}</a></li>
-      {% if AUTH_PROVIDERS %}
-          <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-identities' %}">{% trans "Identities" %}</a></li>
-        {% endif %}
+          {% if AUTH_PROVIDERS %}
+            <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url 'sentry-account-settings-identities' %}">{% trans "Identities" %}</a></li>
+          {% endif %}
+          <li{% if page == 'security' %} class="active"{% endif %}><a href="{% url 'sentry-account-security' %}">{% trans "Security" %}</a></li>
         </ul>
       {% endblock %}
 
diff --git a/src/sentry/templates/sentry/bases/twofactor_settings.html b/src/sentry/templates/sentry/bases/twofactor_settings.html
index 66edc3dc3f..35b054215e 100644
--- a/src/sentry/templates/sentry/bases/twofactor_settings.html
+++ b/src/sentry/templates/sentry/bases/twofactor_settings.html
@@ -1,11 +1,15 @@
-{% extends "sentry/bases/account.html" %}
+{% extends "sentry/bases/modal.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
 
 {% block title %}{{ auth.name }} | {{ block.super }}{% endblock %}
 
-{% block main %}
-  <legend style="margin-top: 0;">{% block twofactor_title %}{% trans "Method:" %} {{ auth.name }}{% endblock %}</legend>
-  {% block twofactor_body %}{% endblock %}
+{% block content %}
+  <div class="box">
+    <div class="box-content with-padding">
+      <legend style="margin-top: 0;">{% block twofactor_title %}{% trans "Method:" %} {{ auth.name }}{% endblock %}</legend>
+      {% block twofactor_body %}{% endblock %}
+    </div>
+  </div>
 {% endblock %}
diff --git a/src/sentry/templates/sentry/organization-members.html b/src/sentry/templates/sentry/organization-members.html
index 6e923b43de..0cb360aeae 100644
--- a/src/sentry/templates/sentry/organization-members.html
+++ b/src/sentry/templates/sentry/organization-members.html
@@ -108,9 +108,7 @@
               <a href="javascript:void(0)" class="resend-invite btn btn-sm btn-primary" data-member-id="{{ member.id }}" style="padding: 0 4px; margin-top: 2px">Resend invite</a>
               {% endif %}
             {% elif not has_2fa %}
-              {% feature auth:twofactor %}
               <span style="color:#B64236;" class="icon-exclamation tip" title="{% trans "Two-factor auth not enabled" %}"></span>
-              {% endfeature %}
             {% endif %}
           </td>
           <td class="squash">{{ member.get_role_display }}</td>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 4779697165..02d70c7cca 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -244,41 +244,21 @@ class NotificationSettingsForm(forms.Form):
         )
 
 
-class ChangePasswordForm(forms.Form):
-    password = forms.CharField(
-        label=_('Current password'), widget=forms.PasswordInput(
-            attrs={'placeholder': _('password'),
-        }),
-    )
-    new_password = forms.CharField(
-        label=_('New password'), widget=forms.PasswordInput(
-            attrs={'placeholder': _('password'),
-        }),
-    )
-
-    def __init__(self, user, *args, **kwargs):
-        self.user = user
-        super(ChangePasswordForm, self).__init__(*args, **kwargs)
-
-    def clean_password(self):
-        value = self.cleaned_data.get('password')
-        if not self.user.check_password(value):
-            raise forms.ValidationError('The password you entered is not correct.')
-        return value
-
-    def save(self, commit=True):
-        self.user.set_password(self.cleaned_data['new_password'])
-
-        if commit:
-            self.user.save()
-
-        return self.user
-
-
 class AccountSettingsForm(forms.Form):
+    name = forms.CharField(required=True, label=_('Name'), max_length=30)
     username = forms.CharField(label=_('Username'), max_length=128)
     email = forms.EmailField(label=_('Email'))
-    name = forms.CharField(required=True, label=_('Name'), max_length=30)
+    new_password = forms.CharField(
+        label=_('New password'),
+        widget=forms.PasswordInput(),
+        required=False,
+    )
+    password = forms.CharField(
+        label=_('Current password'),
+        widget=forms.PasswordInput(),
+        help_text='You will need to enter your current account password to make changes.',
+        required=False,
+    )
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
@@ -287,9 +267,16 @@ class AccountSettingsForm(forms.Form):
         if self.user.is_managed:
             # username and password always managed, email and
             # name optionally managed
+            needs_password = True
             for field in ('email', 'name', 'username'):
                 if field == 'username' or field in settings.SENTRY_MANAGED_USER_FIELDS:
                     self.fields[field] = ReadOnlyTextField(label=self.fields[field].label)
+                if field == 'email':
+                    needs_password = False
+
+            del self.fields['new_password']
+            if not needs_password:
+                del self.fields['password']
 
         # don't show username field if its the same as their email address
         if self.user.email == self.user.username:
@@ -318,9 +305,24 @@ class AccountSettingsForm(forms.Form):
             raise forms.ValidationError(_("That username is already in use."))
         return value
 
+    def clean_password(self):
+        value = self.cleaned_data.get('password')
+        if value and not self.user.check_password(value):
+            raise forms.ValidationError('The password you entered is not correct.')
+        return value
+
+    def clean(self):
+        if not self.cleaned_data.get('password') and (
+            self.cleaned_data.get('email', self.user.email) != self.user.email or
+            self.cleaned_data.get('new_password')
+        ):
+            raise forms.ValidationError('You must confirm your current password to make changes.')
+        return self.cleaned_data
+
     def save(self, commit=True):
         if self.cleaned_data.get('new_password'):
             self.user.set_password(self.cleaned_data['new_password'])
+
         self.user.name = self.cleaned_data['name']
 
         if self.cleaned_data['email'] != self.user.email:
diff --git a/src/sentry/web/frontend/account_security.py b/src/sentry/web/frontend/account_security.py
new file mode 100644
index 0000000000..5284cbf35e
--- /dev/null
+++ b/src/sentry/web/frontend/account_security.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import
+
+from sentry.web.frontend.base import BaseView
+
+
+class AccountSecurityView(BaseView):
+    def handle(self, request):
+        return self.respond('sentry/account/security.html', {
+            'page': 'security',
+        })
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index cff4532689..1ee2315f9f 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -22,13 +22,15 @@ from django.utils.translation import ugettext as _
 from sudo.decorators import sudo_required
 
 from sentry.models import (
-    UserEmail, LostPasswordHash, Project, ProjectStatus, UserOption, Authenticator)
+    UserEmail, LostPasswordHash, Project, ProjectStatus, UserOption, Authenticator
+)
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
     RecoverPasswordForm, ChangePasswordRecoverForm,
-    ProjectEmailOptionsForm, ChangePasswordForm)
+    ProjectEmailOptionsForm
+)
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers, get_login_redirect
 from sentry.utils.safe import safe_execute
@@ -162,7 +164,7 @@ def confirm_email(request, user_id, hash):
 def settings(request):
     user = request.user
 
-    settings_form = AccountSettingsForm(
+    form = AccountSettingsForm(
         user, request.POST or None,
         initial={
             'email': user.email,
@@ -171,23 +173,10 @@ def settings(request):
         },
     )
 
-    if user.is_managed:
-        is_changing_password = False
-        password_form = None
-    else:
-        is_changing_password = request.POST.get('new_password')
-        password_form = ChangePasswordForm(
-            user, request.POST if is_changing_password else None)
-
-    if settings_form.is_valid() and (
-        not is_changing_password or password_form.is_valid()
-    ):
-        if is_changing_password:
-            password_form.save(commit=False)
-
+    if form.is_valid():
         old_email = user.email
 
-        settings_form.save()
+        form.save()
 
         # remove previously valid email address
         # TODO(dcramer): we should maintain validation here when we support
@@ -213,8 +202,7 @@ def settings(request):
 
     context = csrf(request)
     context.update({
-        'settings_form': settings_form,
-        'password_form': password_form,
+        'form': form,
         'page': 'settings',
         'has_2fa': Authenticator.objects.user_has_2fa(request.user),
         'AUTH_PROVIDERS': get_auth_providers(),
@@ -236,7 +224,7 @@ def twofactor_settings(request):
 
     context = csrf(request)
     context.update({
-        'page': 'settings',
+        'page': 'security',
         'has_2fa': any(x.is_enrolled and not x.is_backup_interface for x in interfaces),
         'interfaces': interfaces,
     })
@@ -246,7 +234,6 @@ def twofactor_settings(request):
 @csrf_protect
 @never_cache
 @login_required
-@sudo_required
 @transaction.atomic
 def avatar_settings(request):
     context = csrf(request)
@@ -260,7 +247,6 @@ def avatar_settings(request):
 @csrf_protect
 @never_cache
 @login_required
-@sudo_required
 @transaction.atomic
 def appearance_settings(request):
     from django.conf import settings
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index 18358038ca..19cd39e57f 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -53,7 +53,7 @@ class TwoFactorSettingsView(BaseView):
     def make_context(self, request, interface):
         context = csrf(request)
         context['auth'] = interface
-        context['page'] = 'settings'
+        context['page'] = 'security'
         return context
 
     def delete_authenticator(self, interface):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index c99be68fb1..a2e651639b 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -16,6 +16,7 @@ from sentry.web import api
 from sentry.web.frontend import accounts, admin, generic, accounts_twofactor
 from sentry.web.frontend.accept_organization_invite import \
     AcceptOrganizationInviteView
+from sentry.web.frontend.account_security import AccountSecurityView
 from sentry.web.frontend.admin_queue import AdminQueueView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.twofactor import TwoFactorAuthView, u2f_appid
@@ -259,6 +260,8 @@ urlpatterns += patterns(
         name='sentry-account-settings-identities'),
     url(r'^account/settings/notifications/$', accounts.notification_settings,
         name='sentry-account-settings-notifications'),
+    url(r'^account/settings/security/$', AccountSecurityView.as_view(),
+        name='sentry-account-security'),
 
     # compatibility
     url(r'^account/settings/notifications/unsubscribe/(?P<project_id>\d+)/$',
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 35f3f8467a..1d03c414e1 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -52,8 +52,7 @@ class SettingsTest(TestCase):
 
     def params(self, without=()):
         params = {
-            'username': 'foobar',
-            'email': 'foo@example.com',
+            'email': 'admin@localhost',
             'name': 'Foo bar',
         }
         return dict((k, v) for k, v in params.iteritems() if k not in without)
@@ -68,7 +67,6 @@ class SettingsTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/account/settings.html')
         assert 'form' in resp.context
-        assert 'password_form' in resp.context
 
     def test_requires_email(self):
         self.login_as(self.user)
@@ -97,9 +95,8 @@ class SettingsTest(TestCase):
         assert resp.status_code == 302
         user = User.objects.get(id=self.user.id)
         assert user.name == params['name']
-        assert user.email == params['email']
 
-    def test_can_change_password(self):
+    def test_can_change_password_with_password(self):
         self.login_as(self.user)
 
         params = self.params()
@@ -115,44 +112,54 @@ class SettingsTest(TestCase):
         self.login_as(self.user)
 
         params = self.params()
-        params['password'] = 'bizbaz'
         params['new_password'] = 'foobar'
 
         resp = self.client.post(self.path, params)
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/account/settings.html')
-        assert 'password_form' in resp.context
-        assert 'password' in resp.context['password_form'].errors
+        assert resp.context['form'].errors
         user = User.objects.get(id=self.user.id)
         assert not user.check_password('foobar')
 
-    def test_password_form_not_available_with_managed_user(self):
+    def test_cannot_change_password_with_managed_user(self):
         user = self.create_user('foo@example.com', is_managed=True)
 
         self.login_as(user)
 
         params = self.params()
+        params['email'] = user.email
         params['password'] = 'admin'
         params['new_password'] = 'foobar'
 
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert resp.context['password_form'] is None
-
-    def test_cannot_change_password_with_managed_user(self):
-        user = self.create_user('foo@example.com', is_managed=True)
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert not user.check_password('foobar')
 
-        self.login_as(user)
+    def test_can_change_email_with_password(self):
+        self.login_as(self.user)
 
         params = self.params()
         params['password'] = 'admin'
-        params['new_password'] = 'foobar'
+        params['email'] = 'bizbaz@example.com'
 
         resp = self.client.post(self.path, params)
         assert resp.status_code == 302
         user = User.objects.get(id=self.user.id)
-        assert not user.check_password('foobar')
+        assert user.email == 'bizbaz@example.com'
+
+    def test_cannot_change_email_with_invalid_password(self):
+        self.login_as(self.user)
+
+        params = self.params()
+        params['email'] = 'bizbaz@example.com'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert resp.context['form'].errors
+        user = User.objects.get(id=self.user.id)
+        assert user.email == 'admin@localhost'
 
 
 class NotificationSettingsTest(TestCase):
