commit a568dd79887fad21ffcfbd42343b8c8ff88cc424
Author: Mark Story <mark@sentry.io>
Date:   Tue Apr 21 11:15:29 2020 -0400

    feat(discover) Add top5 results mode to graph (#18319)
    
    Add topEvents support to EventsRequest, and option selectors. This also changes
    how EventsRequest processes data for multiple YAxis values.  We were not using
    all the different flavours of data that were generated so I see little to no value in
    preserving them all, and would like to remove them entirely down the road.
    
    Because of the changes in EventsRequest, I needed to refactor how performance
    views charts handle their data.

diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index bb285a80c6..b8a1ca379f 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -30,6 +30,8 @@ type Options = {
   field?: string[];
   referenceEvent?: string;
   keyTransactions?: boolean;
+  topEvents?: number;
+  orderby?: string;
 };
 
 /**
@@ -62,6 +64,8 @@ export const doEventsRequest = (
     field,
     referenceEvent,
     keyTransactions,
+    topEvents,
+    orderby,
   }: Options
 ): Promise<EventsStats | YAxisEventsStats> => {
   const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);
@@ -74,6 +78,8 @@ export const doEventsRequest = (
       yAxis,
       field,
       referenceEvent,
+      topEvents,
+      orderby,
     }).filter(([, value]) => typeof value !== 'undefined')
   );
 
diff --git a/src/sentry/static/sentry/app/components/charts/areaChart.jsx b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
index a91a7622de..bbbf98c7c4 100644
--- a/src/sentry/static/sentry/app/components/charts/areaChart.jsx
+++ b/src/sentry/static/sentry/app/components/charts/areaChart.jsx
@@ -3,6 +3,7 @@ import PropTypes from 'prop-types';
 
 import AreaSeries from './series/areaSeries';
 import BaseChart from './baseChart';
+import {AREA_COLORS} from './utils';
 
 class AreaChart extends React.Component {
   static propTypes = {
@@ -16,14 +17,14 @@ class AreaChart extends React.Component {
     return (
       <BaseChart
         {...props}
-        series={series.map(({seriesName, data, ...otherSeriesProps}) =>
+        series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>
           AreaSeries({
             stack: stacked ? 'area' : false,
             name: seriesName,
             data: data.map(({name, value}) => [name, value]),
-            color: '#948BCF',
+            color: AREA_COLORS[i].line,
             areaStyle: {
-              color: '#C4BFE9',
+              color: AREA_COLORS[i].area,
               opacity: 1.0,
             },
             animation: false,
diff --git a/src/sentry/static/sentry/app/components/charts/utils.tsx b/src/sentry/static/sentry/app/components/charts/utils.tsx
index c63c496fd6..e9301b2c51 100644
--- a/src/sentry/static/sentry/app/components/charts/utils.tsx
+++ b/src/sentry/static/sentry/app/components/charts/utils.tsx
@@ -9,6 +9,16 @@ const DEFAULT_TRUNCATE_LENGTH = 80;
 const TWENTY_FOUR_HOURS = 1440;
 const ONE_HOUR = 60;
 
+export const AREA_COLORS = [
+  // This first color is used when only a single series is plotted.
+  {line: '#948BCF', area: '#C4BFE9'},
+  {line: '#FFE3FD', area: '#FFE3FD'},
+  {line: '#E8B0F2', area: '#E8B0F2'},
+  {line: '#BD81E6', area: '#BD81E6'},
+  {line: '#5246A3', area: '#5246A3'},
+  {line: '#422C6F', area: '#422C6F'},
+];
+
 export type DateTimeObject = {
   start: Date | null;
   end: Date | null;
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index c3c8e64b32..433e9f27aa 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -520,14 +520,14 @@ class EventView {
     return this.fields.length > 0;
   }
 
-  getFields(): string[] {
-    return this.fields.map(field => field.field);
-  }
-
   getWidths(): number[] {
     return this.fields.map(field => (field.width ? field.width : COL_WIDTH_UNDEFINED));
   }
 
+  getFields(): string[] {
+    return this.fields.map(field => field.field);
+  }
+
   getAggregateFields(): Field[] {
     return this.fields.filter(field => isAggregateField(field.field));
   }
diff --git a/src/sentry/static/sentry/app/utils/discover/types.tsx b/src/sentry/static/sentry/app/utils/discover/types.tsx
index 05522b3118..e7982ca010 100644
--- a/src/sentry/static/sentry/app/utils/discover/types.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/types.tsx
@@ -5,12 +5,14 @@ export enum DisplayModes {
   NONE = 'none',
   PREVIOUS = 'previous',
   RELEASES = 'releases',
+  TOP5 = 'top5',
 }
 
 export const DISPLAY_MODE_OPTIONS: SelectValue<string>[] = [
   {value: DisplayModes.NONE, label: t('None')},
   {value: DisplayModes.PREVIOUS, label: t('Previous Period')},
   {value: DisplayModes.RELEASES, label: t('Release Markers')},
+  {value: DisplayModes.TOP5, label: t('Top 5 Breakdown')},
 ];
 
 // default list of yAxis options
diff --git a/src/sentry/static/sentry/app/views/events/eventsChart.jsx b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
index 811a7b56bd..5d94fb0d97 100644
--- a/src/sentry/static/sentry/app/views/events/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/events/eventsChart.jsx
@@ -120,6 +120,9 @@ class EventsChart extends React.Component {
     disableReleases: PropTypes.bool,
     currentSeriesName: PropTypes.string,
     previousSeriesName: PropTypes.string,
+    topEvents: PropTypes.number,
+    field: PropTypes.arrayOf(PropTypes.string),
+    orderby: PropTypes.string,
   };
 
   render() {
@@ -139,6 +142,9 @@ class EventsChart extends React.Component {
       disableReleases,
       currentSeriesName: currentName,
       previousSeriesName: previousName,
+      field,
+      topEvents,
+      orderby,
       ...props
     } = this.props;
     // Include previous only on relative dates (defaults to relative if no start and end)
@@ -170,6 +176,7 @@ class EventsChart extends React.Component {
       errored,
       loading,
       reloading,
+      results,
       timeseriesData,
       previousTimeseriesData,
     }) => {
@@ -180,6 +187,7 @@ class EventsChart extends React.Component {
           </ErrorPanel>
         );
       }
+      const seriesData = results ? Object.values(results) : timeseriesData;
 
       return (
         <TransitionChart loading={loading} reloading={reloading}>
@@ -192,10 +200,11 @@ class EventsChart extends React.Component {
             utc={utc}
             showLegend={showLegend}
             releaseSeries={releaseSeries || []}
-            timeseriesData={timeseriesData}
+            timeseriesData={seriesData}
             previousTimeseriesData={previousTimeseriesData}
             currentSeriesName={currentSeriesName}
             previousSeriesName={previousSeriesName}
+            stacked={typeof topEvents === 'number' && topEvents > 0}
           />
         </TransitionChart>
       );
@@ -229,12 +238,14 @@ class EventsChart extends React.Component {
             start={start}
             end={end}
             interval={router?.location?.query?.interval || getInterval(this.props, true)}
-            showLoading={false}
             query={query}
             includePrevious={includePrevious}
             currentSeriesName={currentSeriesName}
             previousSeriesName={previousSeriesName}
             yAxis={yAxis}
+            field={field}
+            orderby={orderby}
+            topEvents={topEvents}
           >
             {eventData => chartImplementation({...eventData, zoomRenderProps})}
           </EventsRequest>
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index f217ac112a..fa45e0fa81 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -5,11 +5,11 @@ import React from 'react';
 
 import {Organization, EventsStats, YAxisEventsStats, EventsStatsData} from 'app/types';
 import {Series, SeriesDataUnit} from 'app/types/echarts';
-import {assert, assertType} from 'app/types/utils';
 import {Client} from 'app/api';
+import {doEventsRequest} from 'app/actionCreators/events';
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {truncationFormatter} from 'app/components/charts/utils';
 import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
-import {doEventsRequest} from 'app/actionCreators/events';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 
@@ -29,38 +29,115 @@ export type TimeSeriesData = {
 type LoadingStatus = {
   loading: boolean;
   reloading: boolean;
+  /**
+   * Whether there was an error retrieving data
+   */
   errored: boolean;
 };
 
-type YAxisResults = {[yAxisName: string]: TimeSeriesData};
+// API response format for multiple series
+type MultiSeriesData = {[seriesName: string]: EventsStats};
 
-type RenderProps = LoadingStatus & TimeSeriesData & {results?: YAxisResults};
+// Chart format for multiple series.
+type MultiSeriesResults = {[seriesName: string]: Series};
+
+type RenderProps = LoadingStatus & TimeSeriesData & {results?: MultiSeriesResults};
 
 type DefaultProps = {
+  /**
+   * Relative time period for query.
+   *
+   * Use `start` and `end` for absolute dates.
+   *
+   * e.g. 24h, 7d, 30d
+   */
   period: any;
+  /**
+   * Absolute start date for query
+   */
   start: any;
+  /**
+   * Absolute end date for query
+   */
   end: any;
+  /**
+   * Interval to group results in
+   *
+   * e.g. 1d, 1h, 1m, 1s
+   */
   interval: string;
+  /**
+   * number of rows to return
+   */
   limit: number;
+  /**
+   * The query string to search events by
+   */
   query: string;
+  /**
+   * Include data for previous period
+   */
   includePrevious: boolean;
+  /**
+   * Transform the response data to be something ingestible by charts
+   */
   includeTransformedData: boolean;
 };
 
 type EventsRequestPartialProps = {
+  /**
+   * API client instance
+   */
   api: Client;
   organization: Organization;
+  /**
+   * List of project ids to query
+   */
   project?: number[];
+  /**
+   * List of environments to query
+   */
   environment?: string[];
+  /**
+   * List of fields to group with when doing a topEvents request.
+   */
   field?: string[];
+  /**
+   * Reference event to use when generating additional conditions.
+   */
   referenceEvent?: string;
+  /**
+   * Initial loading state
+   */
   loading?: boolean;
+  /**
+   * Should loading be shown.
+   */
   showLoading?: boolean;
+  /**
+   * The yAxis being plotted. If multiple yAxis are requested,
+   * the child render function will be called with `results`
+   */
   yAxis?: string | string[];
+  /**
+   * Name used for display current series data set tooltip
+   */
   currentSeriesName?: string;
   previousSeriesName?: string;
   children: (renderProps: RenderProps) => React.ReactNode;
+  /**
+   * Determines if the "key transactions" version of the event-stats endpoint should be used
+   */
   keyTransactions?: boolean;
+  /**
+   * The number of top results to get. When set a multi-series result will be returned
+   * in the `results` child render function.
+   */
+  topEvents?: number;
+  /**
+   * How to order results when getting top events.
+   */
+  orderby?: string;
 };
 
 type TimeAggregationProps =
@@ -79,69 +156,25 @@ const propNamesToIgnore = ['api', 'children', 'organization', 'loading'];
 const omitIgnoredProps = (props: EventsRequestProps) =>
   omitBy(props, (_value, key) => propNamesToIgnore.includes(key));
 
+function isMultiSeriesData(
+  data: MultiSeriesData | EventsStats | null
+): data is MultiSeriesData {
+  return data !== null && data.data === undefined && data.totals === undefined;
+}
+
 class EventsRequest extends React.PureComponent<EventsRequestProps, EventsRequestState> {
   static propTypes = {
-    /**
-     * API client instance
-     */
     api: PropTypes.object.isRequired,
-
     organization: SentryTypes.Organization.isRequired,
-
-    /**
-     * List of project ids to query
-     */
     project: PropTypes.arrayOf(PropTypes.number),
-
-    /**
-     * List of environments to query
-     */
     environment: PropTypes.arrayOf(PropTypes.string),
-
-    /**
-     * Relative time period for query.
-     *
-     * Use `start` and `end` for absolute dates.
-     *
-     * e.g. 24h, 7d, 30d
-     */
     period: PropTypes.string,
-
-    /**
-     * Absolute start date for query
-     */
     start: PropTypes.instanceOf(Date),
-
-    /**
-     * Absolute end date for query
-     */
     end: PropTypes.instanceOf(Date),
-
-    /**
-     * Interval to group results in
-     *
-     * e.g. 1d, 1h, 1m, 1s
-     */
     interval: PropTypes.string,
-
-    /**
-     * Include data for previous period
-     */
     includePrevious: PropTypes.bool,
-
-    /**
-     * number of rows to return
-     */
     limit: PropTypes.number,
-
-    /**
-     * The query string to search events by
-     */
     query: PropTypes.string,
-
-    /**
-     * Transform the response data to be something ingestible by charts
-     */
     includeTransformedData: PropTypes.bool,
 
     /**
@@ -154,38 +187,17 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
      * Name of series of aggregated timeseries
      */
     timeAggregationSeriesName: PropTypes.string,
-
-    /**
-     * Initial loading state
-     */
     loading: PropTypes.bool,
-
-    /**
-     * Whether there was an error retrieving data
-     */
     errored: PropTypes.bool,
-
-    /**
-     * Should loading be shown.
-     */
     showLoading: PropTypes.bool,
-
-    /**
-     * Name used for display current series data set tooltip
-     */
     currentSeriesName: PropTypes.string,
-    /**
-     * The yAxis being plotted
-     */
     yAxis: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
 
     field: PropTypes.arrayOf(PropTypes.string),
     referenceEvent: PropTypes.string,
-
-    /**
-     * Determines if the "key transactions" version of the event-stats endpoint should be used
-     */
     keyTransactions: PropTypes.bool,
+    topEvents: PropTypes.number,
+    orderby: PropTypes.string,
   };
 
   static defaultProps: DefaultProps = {
@@ -195,7 +207,6 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     interval: '1d',
     limit: 15,
     query: '',
-
     includePrevious: true,
     includeTransformedData: true,
   };
@@ -327,11 +338,10 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
   /**
    * Transforms query response into timeseries data to be used in a chart
    */
-  transformTimeseriesData(data: EventsStatsData): Series[] {
-    const seriesName = this.props.currentSeriesName ?? 'Current';
+  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {
     return [
       {
-        seriesName,
+        seriesName: seriesName || 'Current',
         data: data.map(([timestamp, countsForTimestamp]) => ({
           name: timestamp * 1000,
           value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),
@@ -353,7 +363,7 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
     } = this.props;
     const {current, previous} = this.getData(data);
     const transformedData = includeTransformedData
-      ? this.transformTimeseriesData(current)
+      ? this.transformTimeseriesData(current, this.props.currentSeriesName)
       : [];
     const previousData = includeTransformedData
       ? this.transformPreviousPeriodData(current, previous)
@@ -382,39 +392,17 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
       return <LoadingPanel data-test-id="events-request-loading" />;
     }
 
-    assert(timeseriesData);
-
-    if (Array.isArray(props.yAxis) && timeseriesData) {
-      // if yAxis is an array, then the API endpoint will return multiple sets of data
-      // in the form of a map: {[yAxisName: string]: EventsStats}
-
-      assertType<YAxisEventsStats>(timeseriesData);
-
-      const results: YAxisResults = Object.fromEntries(
-        props.yAxis.map((yAxisName: string): [string, TimeSeriesData] => {
-          const {
-            data: transformedTimeseriesData,
-            allData: allTimeseriesData,
-            originalData: originalTimeseriesData,
-            totals: timeseriesTotals,
-            originalPreviousData: originalPreviousTimeseriesData,
-            previousData: previousTimeseriesData,
-            timeAggregatedData,
-          } = this.processData(timeseriesData[yAxisName]);
-
-          // timeseries data
-          return [
-            yAxisName,
-            {
-              timeseriesData: transformedTimeseriesData,
-              allTimeseriesData,
-              originalTimeseriesData,
-              timeseriesTotals,
-              originalPreviousTimeseriesData,
-              previousTimeseriesData,
-              timeAggregatedData,
-            },
-          ];
+    if (isMultiSeriesData(timeseriesData)) {
+      // Convert multi-series results into chartable series. Multi series results
+      // are created when multiple yAxis are used or a topEvents request is made.
+      // Convert the timeseries data into a multi-series result set.
+      // As the server will have replied with a map like:
+      // {[titleString: string]: EventsStats}
+      const results: MultiSeriesResults = Object.fromEntries(
+        Object.keys(timeseriesData).map((seriesName: string): [string, Series] => {
+          const seriesData: EventsStats = timeseriesData[seriesName];
+          const name = truncationFormatter(seriesName, 80);
+          return [name, this.transformTimeseriesData(seriesData.data, name)[0]];
         })
       );
 
@@ -422,15 +410,12 @@ class EventsRequest extends React.PureComponent<EventsRequestProps, EventsReques
         loading,
         reloading,
         errored,
-        // timeseries data
         results,
         // sometimes we want to reference props that were given to EventsRequest
         ...props,
       });
     }
 
-    assertType<EventsStats>(timeseriesData);
-
     const {
       data: transformedTimeseriesData,
       allData: allTimeseriesData,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index 2bc7f13f8b..a26afd98d4 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -51,6 +51,8 @@ class ResultsChart extends React.Component<ResultsChartProps> {
       : undefined;
 
     const {utc} = getParams(location.query);
+    const apiPayload = eventView.getEventsAPIPayload(location);
+    const isTopEvents = eventView.display === DisplayModes.TOP5;
 
     return (
       <React.Fragment>
@@ -59,7 +61,7 @@ class ResultsChart extends React.Component<ResultsChartProps> {
             <EventsChart
               api={api}
               router={router}
-              query={eventView.getEventsAPIPayload(location).query}
+              query={apiPayload.query}
               organization={organization}
               showLegend
               yAxis={yAxisValue}
@@ -70,6 +72,9 @@ class ResultsChart extends React.Component<ResultsChartProps> {
               period={globalSelection.statsPeriod}
               disablePrevious={eventView.display !== DisplayModes.PREVIOUS}
               disableReleases={eventView.display !== DisplayModes.RELEASES}
+              field={isTopEvents ? apiPayload.field : undefined}
+              topEvents={isTopEvents ? 5 : undefined}
+              orderby={isTopEvents ? apiPayload.sort : undefined}
               utc={utc === 'true'}
             />
           ),
diff --git a/src/sentry/static/sentry/app/views/performance/charts/chart.tsx b/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
index 7cf5c0661f..2592e0a7cd 100644
--- a/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/charts/chart.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import * as ReactRouter from 'react-router';
 
-import {TimeSeriesData} from 'app/views/events/utils/eventsRequest';
+import {Series} from 'app/types/echarts';
 import AreaChart from 'app/components/charts/areaChart';
 import ChartZoom from 'app/components/charts/chartZoom';
 import Tooltip from 'app/components/tooltip';
@@ -10,7 +10,7 @@ import {HeaderTitle, ChartContainer, StyledIconQuestion} from '../styles';
 
 type Props = {
   yAxis: string;
-  data: TimeSeriesData;
+  data: Series;
   router: ReactRouter.InjectedRouter;
   statsPeriod: string | undefined;
   utc: boolean;
@@ -33,14 +33,11 @@ class Chart extends React.Component<Props> {
       loading,
       tooltipCopy,
     } = this.props;
-    const {timeseriesData} = data;
 
-    if (!timeseriesData || timeseriesData.length <= 0) {
+    if (!data || data.data.length <= 0) {
       return null;
     }
 
-    timeseriesData[0].seriesName = yAxis;
-
     const areaChartProps = {
       seriesOptions: {
         showSymbol: false,
@@ -81,7 +78,7 @@ class Chart extends React.Component<Props> {
           environments={environments}
         >
           {zoomRenderProps => (
-            <AreaChart {...zoomRenderProps} series={timeseriesData} {...areaChartProps} />
+            <AreaChart {...zoomRenderProps} series={[data]} {...areaChartProps} />
           )}
         </ChartZoom>
       </ChartContainer>
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index e58d860250..a9b434de03 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -2145,6 +2145,34 @@ describe('EventView.getDisplayOptions()', function() {
   });
 });
 
+describe('EventView.getAggregateFields()', function() {
+  const state = {
+    fields: [
+      {field: 'title'},
+      {field: 'count()'},
+      {field: 'count_unique(user)'},
+      {field: 'apdex(300)'},
+      {field: 'transaction'},
+    ],
+    sorts: [],
+    query: '',
+    project: [],
+    statsPeriod: '42d',
+    environment: [],
+  };
+
+  it('getAggregateFields() returns only aggregates', function() {
+    const eventView = new EventView(state);
+    const expected = [
+      {field: 'count()'},
+      {field: 'count_unique(user)'},
+      {field: 'apdex(300)'},
+    ];
+
+    expect(eventView.getAggregateFields()).toEqual(expected);
+  });
+});
+
 describe('EventView.hasAggregateField', function() {
   it('ensures an eventview has an aggregate field', function() {
     let eventView = new EventView({
diff --git a/tests/js/spec/views/events/utils/eventsRequest.spec.jsx b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
index ff578c0668..dbfd38dd35 100644
--- a/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
+++ b/tests/js/spec/views/events/utils/eventsRequest.spec.jsx
@@ -398,44 +398,81 @@ describe('EventsRequest', function() {
       await tick();
       wrapper.update();
 
-      const expectedDataResponse = {
-        allTimeseriesData: [
-          [
-            expect.anything(),
-            [expect.objectContaining({count: 321}), expect.objectContaining({count: 79})],
-          ],
-          [expect.anything(), [expect.objectContaining({count: 123})]],
+      const expectedData = {
+        seriesName: expect.anything(),
+        data: [
+          {name: expect.anything(), value: 400},
+          {name: expect.anything(), value: 123},
         ],
-        timeseriesData: [
-          {
-            seriesName: expect.anything(),
+      };
+
+      expect(mock).toHaveBeenLastCalledWith(
+        expect.objectContaining({
+          loading: false,
+
+          results: {
+            'apdex()': expect.objectContaining(expectedData),
+            'rpm()': expect.objectContaining(expectedData),
+          },
+        })
+      );
+    });
+  });
+
+  describe('topEvents', function() {
+    beforeEach(function() {
+      doEventsRequest.mockClear();
+    });
+
+    it('supports topEvents parameter', async function() {
+      doEventsRequest.mockImplementation(() =>
+        Promise.resolve({
+          'project1,error': {
             data: [
-              expect.objectContaining({
-                name: expect.anything(),
-                value: 123,
-              }),
+              [
+                new Date(),
+                [
+                  {...COUNT_OBJ, count: 321},
+                  {...COUNT_OBJ, count: 79},
+                ],
+              ],
+              [new Date(), [COUNT_OBJ]],
             ],
           },
-        ],
-        previousTimeseriesData: {
-          seriesName: 'Previous',
-          data: [
-            expect.objectContaining({
-              name: expect.anything(),
-              value: 400,
-            }),
-          ],
-        },
+          'project1,warning': {
+            data: [
+              [
+                new Date(),
+                [
+                  {...COUNT_OBJ, count: 321},
+                  {...COUNT_OBJ, count: 79},
+                ],
+              ],
+              [new Date(), [COUNT_OBJ]],
+            ],
+          },
+        })
+      );
 
-        originalTimeseriesData: [
-          [expect.anything(), [expect.objectContaining({count: 123})]],
-        ],
+      wrapper = mount(
+        <EventsRequest
+          {...DEFAULTS}
+          includePrevious
+          field={['project', 'level']}
+          topEvents={2}
+        >
+          {mock}
+        </EventsRequest>
+      );
 
-        originalPreviousTimeseriesData: [
-          [
-            expect.anything(),
-            [expect.objectContaining({count: 321}), expect.objectContaining({count: 79})],
-          ],
+      await tick();
+      wrapper.update();
+
+      const expectedData = {
+        seriesName: expect.anything(),
+        data: [
+          {name: expect.anything(), value: 400},
+          {name: expect.anything(), value: 123},
         ],
       };
 
@@ -444,8 +481,8 @@ describe('EventsRequest', function() {
           loading: false,
 
           results: {
-            'apdex()': expect.objectContaining(expectedDataResponse),
-            'rpm()': expect.objectContaining(expectedDataResponse),
+            'project1,error': expect.objectContaining(expectedData),
+            'project1,warning': expect.objectContaining(expectedData),
           },
         })
       );
