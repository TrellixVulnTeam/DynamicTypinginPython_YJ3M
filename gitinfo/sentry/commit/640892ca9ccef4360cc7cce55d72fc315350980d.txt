commit 640892ca9ccef4360cc7cce55d72fc315350980d
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Feb 4 17:29:31 2020 +0100

    ref: Remove unused constants (#16768)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index cbfda8a09c..98d21397ed 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1112,11 +1112,6 @@ SENTRY_MAX_HTTP_BODY_SIZE = 4096 * 4  # 16kb
 SENTRY_MAX_DICTIONARY_ITEMS = 50
 
 SENTRY_MAX_MESSAGE_LENGTH = 1024 * 8
-# how many frames are fat
-SENTRY_MAX_STACKTRACE_FRAMES = 50
-# how many frames there can be at all
-SENTRY_STACKTRACE_FRAMES_HARD_LIMIT = 250
-SENTRY_MAX_EXCEPTIONS = 25
 
 # Gravatar service base url
 SENTRY_GRAVATAR_BASE_URL = "https://secure.gravatar.com"
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 62a11af968..46bcc99af4 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -476,8 +476,6 @@ ALLOWED_FUTURE_DELTA = timedelta(seconds=MAX_SECS_IN_FUTURE)
 
 DEFAULT_STORE_NORMALIZER_ARGS = dict(
     geoip_lookup=rust_geoip,
-    stacktrace_frames_hard_limit=settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT,
-    max_stacktrace_frames=settings.SENTRY_MAX_STACKTRACE_FRAMES,
     max_secs_in_future=MAX_SECS_IN_FUTURE,
     max_secs_in_past=MAX_SECS_IN_PAST,
     enable_trimming=True,
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 874079ec6f..4f94f860e1 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -5,11 +5,9 @@ __all__ = ("Exception", "Mechanism", "upgrade_legacy_mechanism")
 import re
 import six
 
-from django.conf import settings
-
 from sentry.interfaces.base import Interface
 from sentry.utils.json import prune_empty_keys
-from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
+from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import get_path
 
 _type_value_re = re.compile("^(\w+):(.*)$")
@@ -222,16 +220,14 @@ class SingleException(Interface):
     grouping_variants = ["system", "app"]
 
     @classmethod
-    def to_python(cls, data, slim_frames=True):
+    def to_python(cls, data):
         if get_path(data, "stacktrace", "frames", filter=True):
-            stacktrace = Stacktrace.to_python(data["stacktrace"], slim_frames=slim_frames)
+            stacktrace = Stacktrace.to_python(data["stacktrace"])
         else:
             stacktrace = None
 
         if get_path(data, "raw_stacktrace", "frames", filter=True):
-            raw_stacktrace = Stacktrace.to_python(
-                data["raw_stacktrace"], slim_frames=slim_frames, raw=True
-            )
+            raw_stacktrace = Stacktrace.to_python(data["raw_stacktrace"], raw=True)
         else:
             raw_stacktrace = None
 
@@ -391,8 +387,7 @@ class Exception(Interface):
     def to_python(cls, data):
         return cls(
             values=[
-                v and SingleException.to_python(v, slim_frames=False)
-                for v in get_path(data, "values", default=[])
+                v and SingleException.to_python(v) for v in get_path(data, "values", default=[])
             ],
             exc_omitted=data.get("exc_omitted"),
         )
@@ -465,19 +460,3 @@ class Exception(Interface):
         if mechanism:
             for tag in mechanism.iter_tags():
                 yield tag
-
-
-def slim_exception_data(instance, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
-    """
-    Removes various excess metadata from middle frames which go beyond
-    ``frame_allowance``.
-    """
-    # TODO(dcramer): it probably makes sense to prioritize a certain exception
-    # rather than distributing allowance among all exceptions
-    frames = []
-    for exception in instance.values:
-        if exception is None or not exception.stacktrace:
-            continue
-        frames.extend(exception.stacktrace.frames)
-
-    slim_frame_data(frames, frame_allowance)
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index f31ebfaa1f..2c51742f4d 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -4,7 +4,6 @@ __all__ = ("Stacktrace",)
 
 import six
 
-from django.conf import settings
 from django.utils.translation import ugettext as _
 
 from sentry.app import env
@@ -107,55 +106,6 @@ def is_url(filename):
     return filename.startswith(("file:", "http:", "https:", "applewebdata:"))
 
 
-def slim_frame_data(frames, frame_allowance=settings.SENTRY_MAX_STACKTRACE_FRAMES):
-    """
-    Removes various excess metadata from middle frames which go beyond
-    ``frame_allowance``.
-    """
-    frames_len = 0
-    app_frames = []
-    system_frames = []
-    for frame in frames:
-        frames_len += 1
-        if frame is not None and frame.in_app:
-            app_frames.append(frame)
-        else:
-            system_frames.append(frame)
-
-    if frames_len <= frame_allowance:
-        return
-
-    remaining = frames_len - frame_allowance
-    app_count = len(app_frames)
-    system_allowance = max(frame_allowance - app_count, 0)
-    if system_allowance:
-        half_max = system_allowance / 2
-        # prioritize trimming system frames
-        for frame in system_frames[half_max:-half_max]:
-            frame.vars = None
-            frame.pre_context = None
-            frame.post_context = None
-            remaining -= 1
-
-    else:
-        for frame in system_frames:
-            frame.vars = None
-            frame.pre_context = None
-            frame.post_context = None
-            remaining -= 1
-
-    if not remaining:
-        return
-
-    app_allowance = app_count - remaining
-    half_max = app_allowance / 2
-
-    for frame in app_frames[half_max:-half_max]:
-        frame.vars = None
-        frame.pre_context = None
-        frame.post_context = None
-
-
 def validate_bool(value, required=True):
     if required:
         assert value in (True, False)
@@ -474,7 +424,7 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data, slim_frames=True, raw=False):
+    def to_python(cls, data, raw=False):
         data = dict(data)
         frame_list = []
         for f in data.get("frames") or []:
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 70a01d450f..eb1fb45e2f 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -13,7 +13,7 @@ def get_stacktrace(value, raw=False):
     # stacktrace to none.  Otherwise this will fail really
     # badly.
     if value and value.get("frames"):
-        return Stacktrace.to_python(value, slim_frames=True, raw=raw)
+        return Stacktrace.to_python(value, raw=raw)
 
 
 class Threads(Interface):
diff --git a/tests/sentry/event_manager/interfaces/test_exception.py b/tests/sentry/event_manager/interfaces/test_exception.py
index 9eb4cb452a..4e9396e80e 100644
--- a/tests/sentry/event_manager/interfaces/test_exception.py
+++ b/tests/sentry/event_manager/interfaces/test_exception.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 import pytest
 
 from sentry import eventstore
-from sentry.interfaces.exception import Exception, slim_exception_data
+from sentry.interfaces.exception import Exception
 from sentry.stacktraces.processing import normalize_stacktraces_for_grouping
 from sentry.event_manager import EventManager
 
@@ -224,33 +224,3 @@ def test_iteration():
     assert inst[0].type == "ValueError"
     for exc in inst:
         assert exc.type == "ValueError"
-
-
-def test_slim_exception_data_under_max(insta_snapshot):
-    interface = Exception.to_python(
-        {"values": [{"value": "foo", "stacktrace": {"frames": [{"filename": "foo"}]}}]}
-    )
-    slim_exception_data(interface)
-    insta_snapshot(interface.to_json())
-
-
-def test_slim_exception_data_over_max(insta_snapshot):
-    values = []
-    for x in range(5):
-        exc = {"value": "exc %d" % x, "stacktrace": {"frames": []}}
-        values.append(exc)
-        for y in range(5):
-            exc["stacktrace"]["frames"].append(
-                {
-                    "filename": "exc %d frame %d" % (x, y),
-                    "vars": {"foo": "bar"},
-                    "context_line": "b",
-                    "pre_context": ["a"],
-                    "post_context": ["c"],
-                }
-            )
-
-    interface = Exception.to_python({"values": values})
-    # slim to 10 frames to make tests easier
-    slim_exception_data(interface, 10)
-    insta_snapshot(interface.to_json())
diff --git a/tests/sentry/event_manager/interfaces/test_stacktrace.py b/tests/sentry/event_manager/interfaces/test_stacktrace.py
index 52a1830552..09ce3913d6 100644
--- a/tests/sentry/event_manager/interfaces/test_stacktrace.py
+++ b/tests/sentry/event_manager/interfaces/test_stacktrace.py
@@ -5,7 +5,6 @@ from __future__ import absolute_import
 
 import pytest
 from sentry.utils.compat import mock
-from django.conf import settings
 
 from sentry import eventstore
 from sentry.interfaces.stacktrace import get_context, is_url
@@ -95,22 +94,6 @@ def test_serialize_returns_frames(make_stacktrace_snapshot):
     make_stacktrace_snapshot(dict(frames=[{"lineno": 1, "filename": "foo.py"}]))
 
 
-def test_frame_hard_limit(make_stacktrace_snapshot):
-    hard_limit = settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT
-    make_stacktrace_snapshot(
-        {
-            "frames": [
-                {
-                    "filename": "Application.java",
-                    "function": "main",
-                    "lineno": i,  # linenos from 1 to the hard limit + 1
-                }
-                for i in range(1, hard_limit + 2)
-            ]
-        }
-    )
-
-
 @mock.patch("sentry.interfaces.stacktrace.Stacktrace.get_stacktrace", mock.Mock(return_value="foo"))
 def test_to_string_returns_stacktrace(make_stacktrace_snapshot):
     make_stacktrace_snapshot(dict(frames=[]))
