commit 019cffc691ee03f006b74b0e62fcdb68670a8343
Author: Matte Noble <me@mattenoble.com>
Date:   Tue Sep 18 09:59:28 2018 -0700

    fix(integration): Don't block on unmigratable repo (#9768)
    
    Moves the request to retrieve unmigratable repos into the warning
    component. This will make it not block the entire page load if it takes
    a while to make requests out to the various providers.

diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
index 365883c51b..2a087e30da 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/index.jsx
@@ -32,7 +32,6 @@ export default class OrganizationIntegrations extends AsyncComponent {
       ['config', `/organizations/${orgId}/config/integrations/`],
       ['integrations', `/organizations/${orgId}/integrations/`],
       ['plugins', `/organizations/${orgId}/plugins/`, {query}],
-      ['unmigratableRepos', `/organizations/${orgId}/repos/?status=unmigratable`],
     ];
   }
 
@@ -140,7 +139,7 @@ export default class OrganizationIntegrations extends AsyncComponent {
         {!this.props.hideHeader && <SettingsPageHeader title={t('Integrations')} />}
 
         <MigrationWarnings
-          unmigratableRepos={this.unmigratableReposByOrg}
+          orgId={this.props.params.orgId}
           providers={this.providers}
           onInstall={this.onInstall}
         />
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx
index d355f0686b..9110dbd3d6 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/migrationWarnings.jsx
@@ -1,23 +1,34 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import {map} from 'lodash';
+import {groupBy} from 'lodash';
 
 import {tct} from 'app/locale';
 import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
 import AlertLink from 'app/components/alertLink';
+import AsyncComponent from 'app/components/asyncComponent';
 
-export default class MigrationWarnings extends React.Component {
+export default class MigrationWarnings extends AsyncComponent {
   static propTypes = {
-    unmigratableRepos: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
     providers: PropTypes.array.isRequired,
     onInstall: PropTypes.func.isRequired,
   };
 
+  getEndpoints() {
+    let {orgId} = this.props;
+
+    return [['unmigratableRepos', `/organizations/${orgId}/repos/?status=unmigratable`]];
+  }
+
+  get unmigratableReposByOrg() {
+    // Group by [GitHub|BitBucket|VSTS] Org name
+    return groupBy(this.state.unmigratableRepos, repo => repo.name.split('/')[0]);
+  }
+
   render() {
-    return map(this.props.unmigratableRepos, (repos, orgName) => {
+    return Object.entries(this.unmigratableReposByOrg).map(([orgName, repos]) => {
       // Repos use 'visualstudio', Integrations use 'vsts'. Normalize to 'vsts'.
       const key = repos[0].provider.id == 'visualstudio' ? 'vsts' : repos[0].provider.id;
-
       const provider = this.props.providers.find(p => p.key === key);
 
       // The Org might not have access to this Integration yet.
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
index 2e39e09fff..744a907eea 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/index.spec.jsx.snap
@@ -46,6 +46,7 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
   </SettingsPageHeading>
   <MigrationWarnings
     onInstall={[Function]}
+    orgId="org-slug"
     providers={
       Array [
         Object {
@@ -135,7 +136,6 @@ exports[`OrganizationIntegrations render() with installed integrations Displays
         },
       ]
     }
-    unmigratableRepos={Object {}}
   />
   <Panel>
     <Component
@@ -2929,6 +2929,7 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
   </SettingsPageHeading>
   <MigrationWarnings
     onInstall={[Function]}
+    orgId="org-slug"
     providers={
       Array [
         Object {
@@ -2986,7 +2987,6 @@ exports[`OrganizationIntegrations render() without integrations Displays integra
         },
       ]
     }
-    unmigratableRepos={Object {}}
   />
   <Panel>
     <Component
diff --git a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
index 57b7994ded..2da423374b 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationIntegrations/index.spec.jsx
@@ -169,11 +169,6 @@ describe('OrganizationIntegrations', function() {
 
       const wrapper = mount(<OrganizationIntegrations params={params} />, routerContext);
 
-      it('fetches unmigratable repositories', function() {
-        expect(wrapper.instance().state.unmigratableRepos).toHaveLength(1);
-        expect(wrapper.instance().state.unmigratableRepos[0].name).toBe('Test-Org/foo');
-      });
-
       it('displays an Upgrade when the Plugin is enabled but a new Integration is not', function() {
         expect(
           wrapper
@@ -206,30 +201,6 @@ describe('OrganizationIntegrations', function() {
             .text()
         ).toBe('Install');
       });
-
-      it('displays a warning for each Org with unmigratable repos', () => {
-        // Use a regex because React/Enzyme/Jest/Whatever turns single quotes into
-        // apostrophes, so you can't match it explicitly.
-        expect(
-          wrapper
-            .find('AlertLink')
-            .first()
-            .text()
-        ).toMatch(/Your Test-Org repositories can.t send commit data to Sentry/);
-      });
-
-      it('opens the new Integration dialog when the warning is clicked', () => {
-        wrapper
-          .find('AlertLink')
-          .first()
-          .simulate('click');
-
-        expect(open.mock.calls).toHaveLength(1);
-        expect(focus.mock.calls).toHaveLength(1);
-        expect(open.mock.calls[0][2]).toBe(
-          'scrollbars=yes,width=100,height=100,top=334,left=462'
-        );
-      });
     });
   });
 });
diff --git a/tests/js/spec/views/settings/organizationIntegrations/migrationWarnings.spec.jsx b/tests/js/spec/views/settings/organizationIntegrations/migrationWarnings.spec.jsx
new file mode 100644
index 0000000000..d45030ec03
--- /dev/null
+++ b/tests/js/spec/views/settings/organizationIntegrations/migrationWarnings.spec.jsx
@@ -0,0 +1,82 @@
+/*global global*/
+import React from 'react';
+
+import {Client} from 'app/api';
+import {mount} from 'enzyme';
+import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarnings';
+
+jest.mock('app/actionCreators/modal', () => ({
+  openIntegrationDetails: jest.fn(),
+}));
+
+describe('MigrationWarnings', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  describe('render()', function() {
+    const org = TestStubs.Organization();
+    const routerContext = TestStubs.routerContext();
+
+    const jiraProvider = TestStubs.JiraIntegrationProvider();
+    const githubProvider = TestStubs.GitHubIntegrationProvider({
+      integrations: [],
+      isInstalled: false,
+    });
+
+    const focus = jest.fn();
+    const open = jest.fn().mockReturnValue({focus});
+    global.open = open;
+
+    Client.addMockResponse({
+      url: `/organizations/${org.slug}/repos/?status=unmigratable`,
+      body: [
+        {
+          provider: {
+            id: 'github',
+            name: 'GitHub',
+          },
+          name: 'Test-Org/foo',
+        },
+      ],
+    });
+
+    const wrapper = mount(
+      <MigrationWarnings
+        orgId={org.slug}
+        providers={[githubProvider, jiraProvider]}
+        onInstall={() => {}}
+      />,
+      routerContext
+    );
+
+    it('fetches unmigratable repositories', function() {
+      expect(wrapper.instance().state.unmigratableRepos).toHaveLength(1);
+      expect(wrapper.instance().state.unmigratableRepos[0].name).toBe('Test-Org/foo');
+    });
+
+    it('displays a warning for each Org with unmigratable repos', () => {
+      // Use a regex because React/Enzyme/Jest/Whatever turns single quotes into
+      // apostrophes, so you can't match it explicitly.
+      expect(
+        wrapper
+          .find('AlertLink')
+          .first()
+          .text()
+      ).toMatch(/Your Test-Org repositories can.t send commit data to Sentry/);
+    });
+
+    it('opens the new Integration dialog when the warning is clicked', () => {
+      wrapper
+        .find('AlertLink')
+        .first()
+        .simulate('click');
+
+      expect(open.mock.calls).toHaveLength(1);
+      expect(focus.mock.calls).toHaveLength(1);
+      expect(open.mock.calls[0][2]).toBe(
+        'scrollbars=yes,width=100,height=100,top=334,left=462'
+      );
+    });
+  });
+});
