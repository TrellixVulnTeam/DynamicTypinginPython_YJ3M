commit 92486ec422abb0aad8274c257798610acfac8f9b
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Thu Jun 11 16:41:37 2020 -0700

    ref(endpoints): Get most recent previous release with commits (#19287)
    
    * ref(api): Add org release previous release w/ commit endpoint
    
    * get most recent release with commits
    
    * test rename

diff --git a/src/sentry/api/endpoints/organization_release_previous_commits.py b/src/sentry/api/endpoints/organization_release_previous_commits.py
new file mode 100644
index 0000000000..06ea5396c9
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_release_previous_commits.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.models import Release
+
+
+class OrganizationReleasePreviousCommitsEndpoint(OrganizationReleasesBaseEndpoint):
+    def get(self, request, organization, version):
+        """
+        Retrieve an Organization's Most Recent Release with Commits
+        ````````````````````````````````````````````````````````````
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+
+        try:
+            release = Release.objects.get(organization_id=organization.id, version=version)
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        if not self.has_release_permission(request, organization, release):
+            raise ResourceDoesNotExist
+
+        start_date = release.date_released or release.date_added
+
+        prev_release_with_commits = (
+            Release.objects.filter(
+                organization_id=organization.id,
+                projects__in=release.projects.all(),
+                last_commit_id__isnull=False,
+            )
+            .extra(
+                select={"date": "COALESCE(date_released, date_added)"},
+                where=["COALESCE(date_released, date_added) <= %s"],
+                params=[start_date],
+            )
+            .extra(order_by=["-date"])[:1]
+        )
+
+        if not prev_release_with_commits:
+            return Response({})
+
+        return Response(serialize(prev_release_with_commits[0], request.user,))
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 73604d1fd5..2b70fad573 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -130,6 +130,9 @@ from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_recent_searches import OrganizationRecentSearchesEndpoint
 from .endpoints.organization_release_assemble import OrganizationReleaseAssembleEndpoint
 from .endpoints.organization_release_commits import OrganizationReleaseCommitsEndpoint
+from .endpoints.organization_release_previous_commits import (
+    OrganizationReleasePreviousCommitsEndpoint,
+)
 from .endpoints.organization_release_details import OrganizationReleaseDetailsEndpoint
 from .endpoints.organization_release_meta import OrganizationReleaseMetaEndpoint
 from .endpoints.organization_release_file_details import OrganizationReleaseFileDetailsEndpoint
@@ -1013,6 +1016,11 @@ urlpatterns = [
                     OrganizationReleaseCommitsEndpoint.as_view(),
                     name="sentry-api-0-organization-release-commits",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/releases/(?P<version>[^/]+)/previous-with-commits/$",
+                    OrganizationReleasePreviousCommitsEndpoint.as_view(),
+                    name="sentry-api-0-organization-release-previous-with-commits",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/user-feedback/$",
                     OrganizationUserReportsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_release_previous_commits.py b/tests/sentry/api/endpoints/test_organization_release_previous_commits.py
new file mode 100644
index 0000000000..b7bcdf0b91
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_release_previous_commits.py
@@ -0,0 +1,87 @@
+from __future__ import absolute_import
+from django.core.urlresolvers import reverse
+
+from sentry.models import (
+    Commit,
+    Release,
+    ReleaseCommit,
+    Repository,
+)
+from sentry.testutils import APITestCase
+
+
+class OrganizationReleasePreviousCommitsTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(is_staff=False, is_superuser=False)
+
+        project = self.create_project(organization=self.organization)
+        self.project2 = self.create_project(organization=self.organization)
+
+        repo = Repository.objects.create(organization_id=project.organization_id, name="some/repo")
+
+        # previous releases
+        release = Release.objects.create(organization_id=self.organization.id, version="abcabcabc")
+        release.add_project(project)
+        commit = Commit.objects.create(
+            organization_id=project.organization_id, repository_id=repo.id, key="12345678"
+        )
+        commit2 = Commit.objects.create(
+            organization_id=project.organization_id, repository_id=repo.id, key="b" * 40
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id, release=release, commit=commit, order=1
+        )
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id, release=release, commit=commit2, order=0
+        )
+
+        Release.objects.filter(version="abcabcabc").update(last_commit_id=commit2.id)
+
+        self.release_with_commit = release
+
+        release2 = Release.objects.create(organization_id=self.organization.id, version="12345678")
+        release2.add_project(self.project2)
+
+        new_release = Release.objects.create(
+            organization_id=self.organization.id, version="newnewnew"
+        )
+        new_release.add_project(project)
+        new_release.add_project(self.project2)
+        self.url = reverse(
+            "sentry-api-0-organization-release-previous-with-commits",
+            kwargs={"organization_slug": self.organization.slug, "version": new_release.version},
+        )
+
+    def test_previous_release_has_commits(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.url)
+
+        assert response.status_code == 200, response.content
+        assert response.data["version"] == self.release_with_commit.version
+
+    def test_no_previous_release_with_commit(self):
+        self.login_as(user=self.user)
+        new_release = Release.objects.create(
+            organization_id=self.organization.id, version="123123123"
+        )
+        new_release.add_project(self.project2)
+        url = reverse(
+            "sentry-api-0-organization-release-previous-with-commits",
+            kwargs={"organization_slug": self.organization.slug, "version": new_release.version},
+        )
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+        assert response.content == "{}"
+
+    def test_wrong_release_version(self):
+        self.login_as(user=self.user)
+        release = Release.objects.create(organization_id=self.organization.id, version="456456456")
+
+        url = reverse(
+            "sentry-api-0-organization-release-previous-with-commits",
+            kwargs={"organization_slug": self.organization.slug, "version": release.version},
+        )
+
+        response = self.client.get(url)
+        assert response.status_code == 404, response.content
