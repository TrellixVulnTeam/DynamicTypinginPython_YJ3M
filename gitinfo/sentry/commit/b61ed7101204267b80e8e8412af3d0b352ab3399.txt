commit b61ed7101204267b80e8e8412af3d0b352ab3399
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue Feb 13 13:43:40 2018 -0800

    feat(api): Add environment filter to UserReport Endpoints (#7195)
    
    * Added environment to UserReport in the event manager pipeline.
    
    * Fixed typo with environment
    
    * Added tests and changes to the endpoint so that userreports can be filteredby environments
    
    * Fixed some of the tests. Need more inforation on no environment vs all environments.
    
    * All tests pass will need feedback.
    
    * Added project_id to event query
    
    * making sure event manager tests are updated
    
    * fixed spacing.
    
    * Added filtering by environment to group user reports. made a test case so I could reuse test code.
    
    * Added queryset filter chaining and changed empty queryset to UserRerport.objects.none()
    
    * Removed unnecessary select_related.
    
    * Removed error catching around event.get_environment. Altered previous tests in CreateProjectReportTest to reflect that change. Changed my tests to ensure that filtering by environments happens when there is more than one group.

diff --git a/src/sentry/api/endpoints/group_user_reports.py b/src/sentry/api/endpoints/group_user_reports.py
index ca9004e5aa..05a26d6feb 100644
--- a/src/sentry/api/endpoints/group_user_reports.py
+++ b/src/sentry/api/endpoints/group_user_reports.py
@@ -3,10 +3,11 @@ from __future__ import absolute_import
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import UserReport
+from sentry.models import UserReport, Environment
+from sentry.api.base import EnvironmentMixin
 
 
-class GroupUserReportsEndpoint(GroupEndpoint):
+class GroupUserReportsEndpoint(GroupEndpoint, EnvironmentMixin):
     def get(self, request, group):
         """
         List User Reports
@@ -19,8 +20,17 @@ class GroupUserReportsEndpoint(GroupEndpoint):
         :auth: required
         """
 
-        report_list = UserReport.objects.filter(group=group)
-
+        try:
+            environment = self._get_environment_from_request(
+                request,
+                group.organization.id,
+            )
+        except Environment.DoesNotExist:
+            report_list = UserReport.objects.none()
+        else:
+            report_list = UserReport.objects.filter(group=group)
+            if environment is not None:
+                report_list = report_list.filter(environment=environment)
         return self.paginate(
             request=request,
             queryset=report_list,
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 678f93e78a..0dbc3e7422 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -10,7 +10,7 @@ from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import (Event, EventUser, Group, GroupStatus, UserReport)
+from sentry.models import (Environment, Event, EventUser, Group, GroupStatus, UserReport)
 from sentry.signals import user_feedback_received
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -50,18 +50,30 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
         :pparam string project_slug: the slug of the project.
         :auth: required
         """
-        queryset = UserReport.objects.filter(
-            project=project,
-            group__isnull=False,
-        ).select_related('group')
-
-        status = request.GET.get('status', 'unresolved')
-        if status == 'unresolved':
-            queryset = queryset.filter(
-                group__status=GroupStatus.UNRESOLVED,
+        try:
+            environment = self._get_environment_from_request(
+                request,
+                project.organization_id,
             )
-        elif status:
-            return Response({'status': 'Invalid status choice'}, status=400)
+        except Environment.DoesNotExist:
+            queryset = UserReport.objects.none()
+        else:
+            queryset = UserReport.objects.filter(
+                project=project,
+                group__isnull=False,
+            ).select_related('group')
+            if environment is not None:
+                queryset = queryset.filter(
+                    environment=environment,
+                )
+
+            status = request.GET.get('status', 'unresolved')
+            if status == 'unresolved':
+                queryset = queryset.filter(
+                    group__status=GroupStatus.UNRESOLVED,
+                )
+            elif status:
+                return Response({'status': 'Invalid status choice'}, status=400)
 
         return self.paginate(
             request=request,
@@ -106,9 +118,16 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
             report.event_user_id = euser.id
 
         try:
-            report.group = Group.objects.from_event_id(project, report.event_id)
-        except Group.DoesNotExist:
-            pass
+            event = Event.objects.filter(project_id=project.id,
+                                         event_id=report.event_id).select_related('group')[0]
+        except IndexError:
+            try:
+                report.group = Group.objects.from_event_id(project, report.event_id)
+            except Group.DoesNotExist:
+                pass
+        else:
+            report.environment = event.get_environment()
+            report.group = event.group
 
         try:
             with transaction.atomic():
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 7799449fb7..91254dd69d 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -807,7 +807,10 @@ class EventManager(object):
         UserReport.objects.filter(
             project=project,
             event_id=event_id,
-        ).update(group=group)
+        ).update(
+            group=group,
+            environment=environment,
+        )
 
         # save the event unless its been sampled
         if not is_sample:
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 07e9a2ad87..2af17c881c 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'TwoFactorAPITestCase', 'AuthProviderTestCase', 'RuleTestCase',
     'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'AcceptanceTestCase',
-    'IntegrationTestCase',
+    'IntegrationTestCase', 'UserReportEnvironmentTestCase',
 )
 
 import base64
@@ -20,6 +20,7 @@ import os.path
 import pytest
 import six
 import types
+import logging
 
 from click.testing import CliRunner
 from contextlib import contextmanager
@@ -46,7 +47,9 @@ from sentry.auth.superuser import (
     Superuser, COOKIE_SALT as SU_COOKIE_SALT, COOKIE_NAME as SU_COOKIE_NAME
 )
 from sentry.constants import MODULE_ROOT
-from sentry.models import GroupMeta, ProjectOption, DeletedOrganization, Organization, TotpInterface
+from sentry.models import (
+    GroupMeta, ProjectOption, DeletedOrganization, Environment, GroupStatus, Organization, TotpInterface, UserReport
+)
 from sentry.plugins import plugins
 from sentry.rules import EventState
 from sentry.utils import json
@@ -366,6 +369,69 @@ class TwoFactorAPITestCase(APITestCase):
         return non_compliant_members
 
 
+class UserReportEnvironmentTestCase(APITestCase):
+    def setUp(self):
+
+        self.project = self.create_project()
+        self.env1 = self.create_environment(self.project, 'production')
+        self.env2 = self.create_environment(self.project, 'staging')
+
+        self.group = self.create_group(project=self.project, status=GroupStatus.UNRESOLVED)
+
+        self.env1_events = self.create_events_for_environment(self.group, self.env1, 5)
+        self.env2_events = self.create_events_for_environment(self.group, self.env2, 5)
+
+        self.env1_userreports = self.create_user_report_for_events(
+            self.project, self.group, self.env1_events, self.env1)
+        self.env2_userreports = self.create_user_report_for_events(
+            self.project, self.group, self.env2_events, self.env2)
+
+    def make_event(self, **kwargs):
+        result = {
+            'event_id': 'a' * 32,
+            'message': 'foo',
+            'timestamp': 1403007314.570599,
+            'level': logging.ERROR,
+            'logger': 'default',
+            'tags': [],
+        }
+        result.update(kwargs)
+        return result
+
+    def create_environment(self, project, name):
+        env = Environment.objects.create(
+            project_id=project.id,
+            organization_id=project.organization_id,
+            name=name,
+        )
+        env.add_project(project)
+        return env
+
+    def create_events_for_environment(self, group, environment, num_events):
+        return [self.create_event(group=group, tags={
+            'environment': environment.name}) for __i in range(num_events)]
+
+    def create_user_report_for_events(self, project, group, events, environment):
+        reports = []
+        for i, event in enumerate(events):
+            reports.append(UserReport.objects.create(
+                group=group,
+                project=project,
+                event_id=event.event_id,
+                name='foo%d' % i,
+                email='bar%d@example.com' % i,
+                comments='It Broke!!!',
+                environment=environment,
+            ))
+        return reports
+
+    def assert_same_userreports(self, response_data, userreports):
+        assert sorted(int(r.get('id')) for r in response_data) == sorted(
+            r.id for r in userreports)
+        assert sorted(r.get('eventID') for r in response_data) == sorted(
+            r.event_id for r in userreports)
+
+
 class AuthProviderTestCase(TestCase):
     provider = DummyProvider
     provider_name = 'dummy'
diff --git a/tests/sentry/api/endpoints/test_group_user_reports.py b/tests/sentry/api/endpoints/test_group_user_reports.py
new file mode 100644
index 0000000000..58c2e1a547
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_group_user_reports.py
@@ -0,0 +1,58 @@
+from __future__ import absolute_import
+from sentry.testutils import UserReportEnvironmentTestCase
+from exam import fixture
+
+
+class GroupUserReport(UserReportEnvironmentTestCase):
+    @fixture
+    def path(self):
+        return '/api/0/groups/{}/user-feedback/'.format(
+            self.group.id,
+        )
+
+    def test_specified_enviroment(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.path + '?environment=' + self.env1.name)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(self.env1_events)
+        self.assert_same_userreports(response.data, self.env1_userreports)
+
+        response = self.client.get(self.path + '?environment=' + self.env2.name)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(self.env2_events)
+        self.assert_same_userreports(response.data, self.env2_userreports)
+
+    def test_no_environment_does_not_exists(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path + '?environment=')
+        assert response.status_code == 200
+        assert response.data == []
+
+    def test_no_environment(self):
+        self.login_as(user=self.user)
+
+        empty_env = self.create_environment(self.project, u'')
+        empty_env_events = self.create_events_for_environment(self.group, empty_env, 5)
+        userreports = self.create_user_report_for_events(
+            self.project, self.group, empty_env_events, empty_env)
+        response = self.client.get(self.path + '?environment=')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(userreports)
+        self.assert_same_userreports(response.data, userreports)
+
+    def test_all_environments(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path)
+        userreports = self.env1_userreports + self.env2_userreports
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(userreports)
+        self.assert_same_userreports(response.data, userreports)
+
+    def test_invalid_environment(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path + '?environment=invalid_env')
+        assert response.status_code == 200
+        assert response.data == []
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index e4b38e670b..89cc34f671 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import
 
 import six
+from exam import fixture
 
-from sentry.testutils import APITestCase
-from sentry.models import EventUser, GroupStatus, UserReport
+from sentry.testutils import APITestCase, UserReportEnvironmentTestCase
+from sentry.models import EventUser, Environment, GroupStatus, UserReport
+from sentry.event_manager import EventManager
 
 
 class ProjectUserReportListTest(APITestCase):
@@ -87,12 +89,23 @@ class ProjectUserReportListTest(APITestCase):
 
 
 class CreateProjectUserReportTest(APITestCase):
+    def make_environment(self, project, name='production'):
+        environment = Environment.objects.create(
+            project_id=project.id,
+            organization_id=project.organization_id,
+            name=name,
+        )
+        environment.add_project(project)
+        return environment
+
     def test_simple(self):
         self.login_as(user=self.user)
 
         project = self.create_project()
         group = self.create_group(project=project)
-        event = self.create_event(group=group)
+        environment = self.make_environment(project)
+        event = self.create_event(group=group, tags={
+            'environment': environment.name})
 
         url = '/api/0/projects/{}/{}/user-feedback/'.format(
             project.organization.slug,
@@ -125,7 +138,10 @@ class CreateProjectUserReportTest(APITestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
-        event = self.create_event(group=group)
+        environment = self.make_environment(project)
+        event = self.create_event(group=group, tags={
+            'environment': environment.name})
+
         UserReport.objects.create(
             group=group,
             project=project,
@@ -166,9 +182,11 @@ class CreateProjectUserReportTest(APITestCase):
 
         project = self.create_project()
         group = self.create_group(project=project)
+        environment = self.make_environment(project)
         event = self.create_event(
             group=group, tags={
                 'sentry:user': 'email:foo@example.com',
+                'environment': environment.name,
             }
         )
         euser = EventUser.objects.create(
@@ -214,3 +232,121 @@ class CreateProjectUserReportTest(APITestCase):
 
         euser = EventUser.objects.get(id=euser.id)
         assert euser.name == 'Foo Bar'
+
+
+class ProjectUserReportByEnvironmentsTest(UserReportEnvironmentTestCase):
+
+    def setUp(self):
+        super(ProjectUserReportByEnvironmentsTest, self).setUp()
+        group_2 = self.create_group()
+        env1_events = self.create_events_for_environment(group_2, self.env1, 5)
+        env2_events = self.create_events_for_environment(group_2, self.env2, 5)
+
+        self.env1_userreports += self.create_user_report_for_events(
+            self.project, group_2, env1_events, self.env1)
+        self.env2_userreports += self.create_user_report_for_events(
+            self.project, group_2, env2_events, self.env2)
+
+        self.env1_events += env1_events
+        self.env2_events += env2_events
+
+    @fixture
+    def path(self):
+        return '/api/0/projects/{}/{}/user-feedback/'.format(
+            self.project.organization.slug,
+            self.project.slug,
+        )
+
+    def test_environment_gets_user_report(self):
+        event_id = 'a' * 32
+        manager = EventManager(
+            self.make_event(
+                environment=self.env1.name,
+                event_id=event_id,
+                group=self.group))
+        manager.normalize()
+        manager.save(self.project.id)
+
+        self.login_as(user=self.user)
+        response = self.client.post(
+            self.path,
+            data={
+                'event_id': event_id,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        assert response.status_code == 200, response.content
+        assert UserReport.objects.get(event_id=event_id).environment == self.env1
+
+    def test_user_report_gets_environment(self):
+        event_id = 'a' * 32
+        self.login_as(user=self.user)
+        response = self.client.post(
+            self.path,
+            data={
+                'event_id': event_id,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        manager = EventManager(
+            self.make_event(
+                environment=self.env1.name,
+                event_id=event_id,
+                group=self.group))
+        manager.normalize()
+        manager.save(self.project.id)
+        assert response.status_code == 200, response.content
+        assert UserReport.objects.get(event_id=event_id).environment == self.env1
+
+    def test_specified_enviroment(self):
+        self.login_as(user=self.user)
+
+        response = self.client.get(self.path + '?environment=' + self.env1.name)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(self.env1_events)
+        self.assert_same_userreports(response.data, self.env1_userreports)
+
+        response = self.client.get(self.path + '?environment=' + self.env2.name)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(self.env2_events)
+        self.assert_same_userreports(response.data, self.env2_userreports)
+
+    def test_no_environment_does_not_exists(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path + '?environment=')
+        assert response.status_code == 200
+        assert response.data == []
+
+    def test_no_environment(self):
+        self.login_as(user=self.user)
+
+        empty_env = self.create_environment(self.project, u'')
+        empty_env_events = self.create_events_for_environment(self.group, empty_env, 5)
+        userreports = self.create_user_report_for_events(
+            self.project, self.group, empty_env_events, empty_env)
+        response = self.client.get(self.path + '?environment=')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(userreports)
+        self.assert_same_userreports(response.data, userreports)
+
+    def test_all_environments(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path)
+        userreports = self.env1_userreports + self.env2_userreports
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == len(userreports)
+        self.assert_same_userreports(response.data, userreports)
+
+    def test_invalid_environment(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path + '?environment=invalid_env')
+        assert response.status_code == 200
+        assert response.data == []
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index b93f4ce8b3..1e492e8d28 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -21,7 +21,7 @@ from sentry.event_manager import (
 )
 from sentry.models import (
     Activity, Environment, Event, Group, GroupEnvironment, GroupHash, GroupRelease, GroupResolution,
-    GroupStatus, GroupTombstone, EventMapping, Release
+    GroupStatus, GroupTombstone, EventMapping, Release, UserReport
 )
 from sentry.signals import event_discarded, event_saved
 from sentry.testutils import assert_mock_called_once_with_partial, TestCase, TransactionTestCase
@@ -834,6 +834,34 @@ class EventManagerTest(TransactionTestCase):
 
         assert event.data.get('fingerprint') == ['{{ default }}']
 
+    def test_user_report_gets_environment(self):
+        project = self.create_project()
+        environment = Environment.objects.create(
+            project_id=project.id,
+            organization_id=project.organization_id,
+            name='production',
+        )
+        environment.add_project(project)
+        event_id = 'a' * 32
+
+        group = self.create_group(project=project)
+        UserReport.objects.create(
+            group=group,
+            project=project,
+            event_id=event_id,
+            name='foo',
+            email='bar@example.com',
+            comments='It Broke!!!',
+        )
+        manager = EventManager(
+            self.make_event(
+                environment=environment.name,
+                event_id=event_id,
+                group=group))
+        manager.normalize()
+        manager.save(project.id)
+        assert UserReport.objects.get(event_id=event_id).environment == environment
+
     def test_default_event_type(self):
         manager = EventManager(self.make_event(message='foo bar'))
         data = manager.normalize()
