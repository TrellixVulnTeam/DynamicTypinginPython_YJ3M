commit bd1b514939945ef1a0a537dd6b768fe3a1c94c32
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Mon May 18 15:17:15 2020 +0200

    fix(ui): fixed breadcrumb border bottom (#18867)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCollapsed.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCollapsed.tsx
index 8026c0bc72..41a2fc11d4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCollapsed.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCollapsed.tsx
@@ -24,7 +24,6 @@ const BreadcrumbCollapsed = ({quantity, onClick}: Props) => (
 export default BreadcrumbCollapsed;
 
 const Wrapper = styled(GridCellLeft)`
-  border-right: 1px solid ${p => p.theme.borderDark};
   cursor: pointer;
   background: ${p => p.theme.whiteDark};
   font-size: ${p => p.theme.fontSizeMedium};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
index 7bb83faeab..9c762087ea 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 import styled from '@emotion/styled';
 import pick from 'lodash/pick';
 import omit from 'lodash/omit';
-import isEqual from 'lodash/isEqual';
 
 import EventDataSection from 'app/components/events/eventDataSection';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
@@ -29,7 +28,6 @@ import BreadcrumbsListHeader from './breadcrumbsListHeader';
 import BreadcrumbsListBody from './breadcrumbsListBody';
 import BreadcrumbLevel from './breadcrumbLevel';
 import BreadcrumbIcon from './breadcrumbIcon';
-import {Grid} from './styles';
 
 const MAX_CRUMBS_WHEN_COLLAPSED = 10;
 
@@ -46,7 +44,6 @@ type State = {
   filteredByCustomSearch: Array<BreadcrumbWithDetails>;
   filteredBreadcrumbs: Array<BreadcrumbWithDetails>;
   filterGroups: BreadcrumbFilterGroups;
-  breadCrumbListHeight: React.CSSProperties['maxHeight'];
 };
 
 type Props = {
@@ -66,29 +63,12 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     filteredByCustomSearch: [],
     filteredBreadcrumbs: [],
     filterGroups: [],
-    breadCrumbListHeight: 'none',
   };
 
   componentDidMount() {
     this.loadBreadcrumbs();
   }
 
-  componentDidUpdate(prevProps: Props, prevState: State) {
-    if (isEqual(prevState, this.state) && isEqual(prevProps, this.props)) {
-      return;
-    }
-    this.loadBreadCrumbListHeight();
-  }
-
-  listRef = React.createRef<HTMLDivElement>();
-
-  loadBreadCrumbListHeight = () => {
-    const offsetHeight = this.listRef?.current?.offsetHeight;
-    this.setState({
-      breadCrumbListHeight: offsetHeight ? `${offsetHeight}px` : 'none',
-    });
-  };
-
   loadBreadcrumbs = () => {
     const {data} = this.props;
     let breadcrumbs = data.values;
@@ -318,7 +298,7 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
 
   render() {
     const {type} = this.props;
-    const {filterGroups, searchTerm, breadCrumbListHeight} = this.state;
+    const {filterGroups, searchTerm} = this.state;
 
     const {
       collapsedQuantity,
@@ -350,14 +330,14 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
       >
         <Content>
           {filteredCollapsedBreadcrumbs.length > 0 ? (
-            <Grid maxHeight={breadCrumbListHeight} ref={this.listRef}>
+            <React.Fragment>
               <BreadcrumbsListHeader />
               <BreadcrumbsListBody
                 onToggleCollapse={this.handleToggleCollapse}
                 collapsedQuantity={collapsedQuantity}
                 breadcrumbs={filteredCollapsedBreadcrumbs}
               />
-            </Grid>
+            </React.Fragment>
           ) : (
             <EmptyMessage
               icon={<IconWarning size="xl" />}
@@ -379,8 +359,8 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
 export default BreadcrumbsContainer;
 
 const Content = styled('div')`
-  border-top: 1px solid ${p => p.theme.borderDark};
-  border-radius: 3px;
+  border: 1px solid ${p => p.theme.borderDark};
+  border-radius: ${p => p.theme.borderRadius};
   box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
   margin-bottom: ${space(3)};
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListBody.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListBody.tsx
index f80ca4e76a..9be04ba493 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListBody.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListBody.tsx
@@ -10,7 +10,7 @@ import BreadcrumbData from './breadcrumbData/breadcrumbData';
 import BreadcrumbCategory from './breadcrumbCategory';
 import BreadcrumbIcon from './breadcrumbIcon';
 import BreadcrumbLevel from './breadcrumbLevel';
-import {GridCell, GridCellLeft, GridCellRight} from './styles';
+import {Grid, GridCell, GridCellLeft} from './styles';
 import {Breadcrumb, BreadcrumbDetails, BreadcrumbType} from './types';
 
 type Breadcrumbs = Array<Breadcrumb & BreadcrumbDetails & {id: number}>;
@@ -21,41 +21,64 @@ type Props = {
   onToggleCollapse: () => void;
 };
 
-const BreadcrumbsListBody = ({
-  breadcrumbs,
-  collapsedQuantity,
-  onToggleCollapse,
-}: Props) => (
-  <React.Fragment>
-    {collapsedQuantity > 0 && (
-      <BreadcrumbCollapsed onClick={onToggleCollapse} quantity={collapsedQuantity} />
-    )}
-    {breadcrumbs.map(({color, icon, ...crumb}, idx) => {
-      const hasError = crumb.type === BreadcrumbType.ERROR;
-      return (
-        <React.Fragment key={idx}>
-          <GridCellLeft hasError={hasError}>
-            <Tooltip title={crumb.description}>
-              <BreadcrumbIcon icon={icon} color={color} />
-            </Tooltip>
-          </GridCellLeft>
-          <GridCellCategory hasError={hasError}>
-            <BreadcrumbCategory category={crumb?.category} />
-          </GridCellCategory>
-          <GridCell hasError={hasError}>
-            <BreadcrumbData breadcrumb={crumb as Breadcrumb} />
-          </GridCell>
-          <GridCell hasError={hasError}>
-            <BreadcrumbLevel level={crumb.level} />
-          </GridCell>
-          <GridCellRight hasError={hasError}>
-            <BreadcrumbTime timestamp={crumb.timestamp} />
-          </GridCellRight>
-        </React.Fragment>
-      );
-    })}
-  </React.Fragment>
-);
+type State = {
+  breadCrumbListHeight?: React.CSSProperties['maxHeight'];
+};
+
+class BreadcrumbsListBody extends React.Component<Props, State> {
+  state: State = {};
+
+  componentDidMount() {
+    this.loadBreadCrumbListHeight();
+  }
+
+  listRef = React.createRef<HTMLDivElement>();
+
+  loadBreadCrumbListHeight = () => {
+    const offsetHeight = this.listRef?.current?.offsetHeight;
+    this.setState({
+      breadCrumbListHeight: offsetHeight ? `${offsetHeight}px` : 'none',
+    });
+  };
+
+  render() {
+    const {collapsedQuantity, onToggleCollapse, breadcrumbs} = this.props;
+    const {breadCrumbListHeight} = this.state;
+
+    return (
+      <Grid maxHeight={breadCrumbListHeight} ref={this.listRef}>
+        {collapsedQuantity > 0 && (
+          <BreadcrumbCollapsed onClick={onToggleCollapse} quantity={collapsedQuantity} />
+        )}
+        {breadcrumbs.map(({color, icon, ...crumb}, idx) => {
+          const hasError = crumb.type === BreadcrumbType.ERROR;
+          const isLastItem = breadcrumbs.length - 1 === idx;
+          return (
+            <React.Fragment key={idx}>
+              <GridCellLeft hasError={hasError} isLastItem={isLastItem}>
+                <Tooltip title={crumb.description}>
+                  <BreadcrumbIcon icon={icon} color={color} />
+                </Tooltip>
+              </GridCellLeft>
+              <GridCellCategory hasError={hasError} isLastItem={isLastItem}>
+                <BreadcrumbCategory category={crumb?.category} />
+              </GridCellCategory>
+              <GridCell hasError={hasError} isLastItem={isLastItem}>
+                <BreadcrumbData breadcrumb={crumb as Breadcrumb} />
+              </GridCell>
+              <GridCell hasError={hasError} isLastItem={isLastItem}>
+                <BreadcrumbLevel level={crumb.level} />
+              </GridCell>
+              <GridCell hasError={hasError} isLastItem={isLastItem}>
+                <BreadcrumbTime timestamp={crumb.timestamp} />
+              </GridCell>
+            </React.Fragment>
+          );
+        })}
+      </Grid>
+    );
+  }
+}
 
 export default BreadcrumbsListBody;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx
index 4f5be5310f..b366fbb7f0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx
@@ -4,25 +4,25 @@ import styled from '@emotion/styled';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 
-import {GridCell} from './styles';
+import {Grid, GridCell} from './styles';
 
 const BreadcrumbsListHeader = () => {
   return (
-    <React.Fragment>
-      <StyledGridCellLeft>{t('Type')}</StyledGridCellLeft>
+    <Grid>
+      <StyledGridCell>{t('Type')}</StyledGridCell>
       <StyledGridCellCategory>{t('Category')}</StyledGridCellCategory>
       <StyledGridCell>{t('Description')}</StyledGridCell>
       <StyledGridCell>{t('Level')}</StyledGridCell>
-      <StyledGridCellRight>{t('Time')}</StyledGridCellRight>
-    </React.Fragment>
+      <StyledGridCell>{t('Time')}</StyledGridCell>
+    </Grid>
   );
 };
 
 export default BreadcrumbsListHeader;
 
 const StyledGridCell = styled(GridCell)`
-  border-top: 0;
-  border-bottom: 1px solid ${p => p.theme.borderLight};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  margin: 1px 0 0;
   background: ${p => p.theme.offWhite};
   color: ${p => p.theme.gray3};
   font-weight: 600;
@@ -36,16 +36,6 @@ const StyledGridCell = styled(GridCell)`
   }
 `;
 
-const StyledGridCellLeft = styled(StyledGridCell)`
-  border-radius: ${p => p.theme.borderRadius} 0 0 0;
-  border-left: 1px solid ${p => p.theme.borderDark};
-`;
-
-const StyledGridCellRight = styled(StyledGridCell)`
-  border-radius: 0 ${p => p.theme.borderRadius} 0 0;
-  border-right: 1px solid ${p => p.theme.borderDark};
-`;
-
 const StyledGridCellCategory = styled(StyledGridCell)`
   @media (min-width: ${p => p.theme.breakpoints[0]}) {
     padding-left: ${space(1)};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
index 7078bf3ed5..6913bc246f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
@@ -31,9 +31,10 @@ const IconWrapper = styled('div', {
 
 const GridCell = styled('div')<{
   hasError?: boolean;
+  isLastItem?: boolean;
 }>`
+  position: relative;
   line-height: 26px;
-  border-top: 1px solid ${p => p.theme.borderLight};
   border-bottom: 1px solid ${p => p.theme.borderLight};
   margin-bottom: -1px;
   text-overflow: ellipsis;
@@ -46,7 +47,10 @@ const GridCell = styled('div')<{
     p.hasError &&
     css`
       background: #fffcfb;
-      border-color: #fa4747;
+      border-top: 1px solid #fa4747;
+      border-bottom: 1px solid #fa4747;
+      z-index: 1;
+      ${p.isLastItem && 'margin-bottom: 0'};
     `}
 `;
 
@@ -65,27 +69,19 @@ const GridCellLeft = styled(GridCell)`
       left: 29px;
     }
   }
-  border-left: 1px solid ${p => (p.hasError ? '#fa4747' : p.theme.borderDark)};
-`;
-
-const GridCellRight = styled(GridCell)`
-  border-right: 1px solid ${p => (p.hasError ? '#fa4747' : p.theme.borderDark)};
 `;
 
-const Grid = styled('div')<{maxHeight: React.CSSProperties['maxHeight']}>`
+const Grid = styled('div')<{maxHeight?: React.CSSProperties['maxHeight']}>`
   display: grid;
   overflow-y: auto;
-  max-height: ${p => p.maxHeight};
+  ${p => p.maxHeight && `max-height: ${p.maxHeight}`};
   > *:nth-last-child(5):before {
     bottom: calc(100% - ${space(1)});
   }
-  > *:nth-last-child(-n + 5) {
-    margin-bottom: 0;
-  }
   grid-template-columns: max-content 55px 1fr max-content max-content;
   @media (min-width: ${p => p.theme.breakpoints[0]}) {
     grid-template-columns: max-content 110px 1fr max-content max-content;
   }
 `;
 
-export {Grid, GridCell, GridCellLeft, GridCellRight, IconWrapper};
+export {Grid, GridCell, GridCellLeft, IconWrapper};
