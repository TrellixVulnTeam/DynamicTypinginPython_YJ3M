commit 11223d0f44f71051534fb44605336d7d28b78715
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Nov 6 13:44:20 2019 -0800

    feat(ui): Move "Incident Rules" into a new "Alert Rules" (#15331)
    
    This creates a new "Alert Rules" clone that includes old alert rules and new incident alert rules (but separated using a tab navigation). This is only a stepping stone until we have updated mocks.

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index d05fb19779..17f4e5b80f 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -217,7 +217,15 @@ function routes() {
         }
         component={errorHandler(LazyLoad)}
       />
-      <Route name="Alerts" path="alerts/">
+
+      <Route
+        name="Alerts"
+        path="alerts/"
+        component={errorHandler(LazyLoad)}
+        componentPromise={() =>
+          import(/* webpackChunkName: "ProjectAlerts" */ 'app/views/settings/projectAlerts')
+        }
+      >
         <IndexRedirect to="rules/" />
         <Route
           path="settings/"
@@ -253,6 +261,74 @@ function routes() {
         </Route>
       </Route>
 
+      <Route
+        name="Alerts"
+        path="alerts-v2/"
+        component={errorHandler(LazyLoad)}
+        componentPromise={() =>
+          import(/* webpackChunkName: "ProjectAlertsNew" */ 'app/views/settings/projectAlerts/new')
+        }
+      >
+        <IndexRedirect to="issue-rules/" />
+        <Route
+          path="settings/"
+          name="Settings"
+          component={errorHandler(LazyLoad)}
+          componentPromise={() =>
+            import(/* webpackChunkName: "ProjectAlertSettings" */ 'app/views/settings/projectAlerts/projectAlertSettings')
+          }
+        />
+        <Route path="issue-rules/" name="Rules" component={null}>
+          <IndexRoute
+            component={errorHandler(LazyLoad)}
+            componentPromise={() =>
+              import(/* webpackChunkName: "ProjectAlertRules" */ 'app/views/settings/projectAlerts/projectAlertRulesNew')
+            }
+          />
+          <Route
+            path="new/"
+            name="New"
+            component={errorHandler(LazyLoad)}
+            componentPromise={() =>
+              import(/* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/projectAlertRuleDetails')
+            }
+          />
+          <Route
+            path=":ruleId/"
+            name="Edit"
+            componentPromise={() =>
+              import(/* webpackChunkName: "ProjectAlertRuleDetails" */ 'app/views/settings/projectAlerts/projectAlertRuleDetails')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+        </Route>
+
+        <Route path="event-rules/" name="Event Rules" component={null}>
+          <IndexRoute
+            componentPromise={() =>
+              import(/* webpackChunkName: "IncidentRulesList" */ 'app/views/settings/incidentRules/list')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+          <Route
+            name="New Incident Rule"
+            path="new/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/incidentRules/create')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+          <Route
+            name="Edit Incident Rule"
+            path=":incidentRuleId/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "IncidentRulesDetails" */ 'app/views/settings/incidentRules/details')
+            }
+            component={errorHandler(LazyLoad)}
+          />
+        </Route>
+      </Route>
+
       <Route
         name="Environments"
         path="environments/"
@@ -536,38 +612,6 @@ function routes() {
         />
       </Route>
 
-      <Route
-        name="Incident Rules"
-        path="incident-rules/"
-        componentPromise={() =>
-          import(/* webpackChunkName: "IncidentRules" */ 'app/views/settings/incidentRules')
-        }
-        component={errorHandler(LazyLoad)}
-      >
-        <IndexRoute
-          componentPromise={() =>
-            import(/* webpackChunkName: "IncidentRulesList" */ 'app/views/settings/incidentRules/list')
-          }
-          component={errorHandler(LazyLoad)}
-        />
-        <Route
-          name="New Incident Rule"
-          path="new/"
-          componentPromise={() =>
-            import(/* webpackChunkName: "IncidentRulesCreate" */ 'app/views/settings/incidentRules/create')
-          }
-          component={errorHandler(LazyLoad)}
-        />
-        <Route
-          name="Edit Incident Rule"
-          path=":incidentRuleId/"
-          componentPromise={() =>
-            import(/* webpackChunkName: "IncidentRulesDetails" */ 'app/views/settings/incidentRules/details')
-          }
-          component={errorHandler(LazyLoad)}
-        />
-      </Route>
-
       <Route
         path="rate-limits/"
         name="Rate Limits"
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index e74c43f406..b4cf5c2ecc 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -2,6 +2,7 @@ import {SpanEntry} from 'app/components/events/interfaces/spans/types';
 import {API_SCOPES} from 'app/constants';
 import {Field} from 'app/views/settings/components/forms/type';
 import {Params} from 'react-router/lib/Router';
+import {PlainRoute} from 'react-router/lib/Route';
 import {Location} from 'history';
 
 export type ObjectStatus =
@@ -598,6 +599,7 @@ export type SentryAppComponent = {
 export type RouterProps = {
   params: Params;
   location: Location;
+  routes: PlainRoute[];
 };
 
 export type ActiveExperiments = {
diff --git a/src/sentry/static/sentry/app/views/incidents/list/index.tsx b/src/sentry/static/sentry/app/views/incidents/list/index.tsx
index 8516bc9614..af46b52c30 100644
--- a/src/sentry/static/sentry/app/views/incidents/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/list/index.tsx
@@ -149,14 +149,6 @@ class IncidentsListContainer extends React.Component<Props> {
             </PageHeading>
 
             <Actions>
-              <Button
-                priority="default"
-                size="small"
-                to={`/settings/${orgId}/incident-rules/`}
-                icon="icon-settings"
-              >
-                {t('Manage Rules')}
-              </Button>
               <div className="btn-group">
                 <Button
                   to={{pathname, query: allIncidentsQuery}}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
index 957ffc6ef9..794bd34c39 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -1,30 +1,36 @@
 import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
-import {t} from 'app/locale';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import recreateRoute from 'app/utils/recreateRoute';
 
 import RuleForm from './ruleForm';
 
-type RouteParams = {orgId: string};
+type RouteParams = {
+  orgId: string;
+  projectId: string;
+};
 type Props = {};
 
 class IncidentRulesCreate extends React.Component<
   RouteComponentProps<RouteParams, {}> & Props
 > {
   handleSubmitSuccess = data => {
-    const {orgId} = this.props.params;
-    this.props.router.push(`/settings/${orgId}/incident-rules/${data.id}/`);
+    const {params, routes, location} = this.props;
+
+    this.props.router.push(
+      recreateRoute(`${data.id}/`, {params, routes, location, stepBack: -1})
+    );
   };
 
   render() {
-    const {orgId} = this.props.params;
+    const {orgId, projectId} = this.props.params;
 
     return (
-      <div>
-        <SettingsPageHeader title={t('New Incident Rule')} />
-        <RuleForm orgId={orgId} onSubmitSuccess={this.handleSubmitSuccess} />
-      </div>
+      <RuleForm
+        orgId={orgId}
+        projectId={projectId}
+        onSubmitSuccess={this.handleSubmitSuccess}
+      />
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index ab3ce4b248..64abeb77de 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -20,6 +20,7 @@ import withProjects from 'app/utils/withProjects';
 
 type RouteParams = {
   orgId: string;
+  projectId: string;
   incidentRuleId: string;
 };
 
@@ -143,15 +144,14 @@ class IncidentRulesDetails extends AsyncView<
   };
 
   renderBody() {
-    const {orgId, incidentRuleId} = this.props.params;
+    const {orgId, projectId, incidentRuleId} = this.props.params;
     const {rule} = this.state;
 
     return (
-      <div>
-        <SettingsPageHeader title={t('Edit Incident Rule')} />
-
+      <React.Fragment>
         <RuleForm
           saveOnBlur
+          projectId={projectId}
           orgId={orgId}
           incidentRuleId={incidentRuleId}
           initialData={rule}
@@ -177,7 +177,7 @@ class IncidentRulesDetails extends AsyncView<
           onDelete={this.handleDeleteTrigger}
           onEdit={this.handleEditTrigger}
         />
-      </div>
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
index e44e2cd465..bd311faeb4 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/list.tsx
@@ -10,7 +10,7 @@ import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import recreateRoute from 'app/utils/recreateRoute';
 import space from 'app/styles/space';
 
 import {IncidentRule} from './types';
@@ -23,6 +23,7 @@ type State = {
 
 type RouteParams = {
   orgId: string;
+  projectId: string;
 };
 
 type Props = RouteComponentProps<RouteParams, {}>;
@@ -60,44 +61,29 @@ class IncidentRulesList extends AsyncView<Props, State> {
   }
 
   renderBody() {
-    const {orgId} = this.props.params;
-    const action = (
-      <Button
-        priority="primary"
-        size="small"
-        to={`/settings/${orgId}/incident-rules/new/`}
-        icon="icon-circle-add"
-      >
-        {t('Create New Rule')}
-      </Button>
-    );
-
     const isLoading = this.state.loading;
-
     const isEmpty = !isLoading && !this.state.rules.length;
 
     return (
-      <div>
-        <SettingsPageHeader title={t('Incident Rules')} action={action} />
-        <Panel>
-          <GridPanelHeader>
-            <NameColumn>{t('Name')}</NameColumn>
+      <Panel>
+        <GridPanelHeader>
+          <NameColumn>{t('Name')}</NameColumn>
 
-            <div>{t('Metric')}</div>
+          <div>{t('Metric')}</div>
 
-            <div>{t('Threshold')}</div>
-          </GridPanelHeader>
+          <div>{t('Threshold')}</div>
+        </GridPanelHeader>
 
-          <PanelBody>
-            {isLoading && <LoadingIndicator />}
+        <PanelBody>
+          {isLoading && <LoadingIndicator />}
 
-            {!isLoading &&
-              !isEmpty &&
-              this.state.rules.map(rule => (
+          {!isLoading &&
+            !isEmpty &&
+            this.state.rules.map(rule => {
+              const ruleLink = recreateRoute(`${rule.id}/`, this.props);
+              return (
                 <RuleRow key={rule.id}>
-                  <RuleLink to={`/settings/${orgId}/incident-rules/${rule.id}/`}>
-                    {rule.name}
-                  </RuleLink>
+                  <RuleLink to={ruleLink}>{rule.name}</RuleLink>
 
                   <MetricName>{getMetricDisplayName(rule.aggregations[0])}</MetricName>
 
@@ -108,7 +94,7 @@ class IncidentRulesList extends AsyncView<Props, State> {
 
                     <Actions>
                       <Button
-                        to={`/settings/${orgId}/incident-rules/${rule.id}/`}
+                        to={ruleLink}
                         size="small"
                         icon="icon-edit"
                         aria-label={t('Edit Rule')}
@@ -131,14 +117,14 @@ class IncidentRulesList extends AsyncView<Props, State> {
                     </Actions>
                   </ThresholdColumn>
                 </RuleRow>
-              ))}
-
-            {!isLoading && isEmpty && (
-              <EmptyMessage>{t('No Incident rules have been created yet.')}</EmptyMessage>
-            )}
-          </PanelBody>
-        </Panel>
-      </div>
+              );
+            })}
+
+          {!isLoading && isEmpty && (
+            <EmptyMessage>{t('No Incident rules have been created yet.')}</EmptyMessage>
+          )}
+        </PanelBody>
+      </Panel>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
index 10df35abae..e7b34c55b9 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
 import {Client} from 'app/api';
-import {Organization, Project} from 'app/types';
+import {Organization} from 'app/types';
 import {t} from 'app/locale';
 import Form from 'app/views/settings/components/forms/form';
 import FormField from 'app/views/settings/components/forms/formField';
@@ -9,7 +9,6 @@ import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import SearchBar from 'app/views/events/searchBar';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
-import withProjects from 'app/utils/withProjects';
 
 import {AlertRuleAggregations, IncidentRule, TimeWindow} from './types';
 import getMetricDisplayName from './utils/getMetricDisplayName';
@@ -20,7 +19,6 @@ type Props = {
   api: Client;
   organization: Organization;
   initialData?: IncidentRule;
-  projects: Project[];
 };
 
 type TimeWindowMapType = {[key in TimeWindow]: string};
@@ -39,7 +37,7 @@ const TIME_WINDOW_MAP: TimeWindowMapType = {
 
 class RuleForm extends React.Component<Props> {
   render() {
-    const {organization, projects} = this.props;
+    const {organization} = this.props;
 
     return (
       <JsonForm
@@ -55,17 +53,6 @@ class RuleForm extends React.Component<Props> {
                 placeholder: t('My Incident Rule Name'),
                 required: true,
               },
-              {
-                name: 'projects',
-                type: 'select',
-                label: t('Project'),
-                help: t('Select a project that this rule will apply to'),
-                choices: projects.map(({slug}) => [slug, slug]),
-                getValue: value => [value],
-                setValue: value => (value.length ? value[0] : []),
-                placeholder: t('Select a project'),
-                required: true,
-              },
               {
                 name: 'aggregations',
                 type: 'select',
@@ -132,6 +119,7 @@ class RuleForm extends React.Component<Props> {
 type RuleFormContainerProps = {
   initialData?: IncidentRule;
   orgId: string;
+  projectId: string;
   incidentRuleId?: string;
   saveOnBlur?: boolean;
 } & React.ComponentProps<typeof RuleForm> & {
@@ -140,6 +128,7 @@ type RuleFormContainerProps = {
 
 function RuleFormContainer({
   orgId,
+  projectId,
   incidentRuleId,
   initialData,
   saveOnBlur,
@@ -155,13 +144,12 @@ function RuleFormContainer({
       initialData={{
         query: '',
         aggregations: DEFAULT_METRIC,
-        projects: [],
+        projects: [projectId],
         includeAllProjects: false,
         excludedProjects: [],
 
         // TODO(incidents): Temp values
         alertThreshold: 5,
-        project_id: 1,
         resolveThreshold: 1,
         thresholdType: 0,
         timeWindow: 60,
@@ -176,4 +164,4 @@ function RuleFormContainer({
 }
 
 export {RuleFormContainer};
-export default withProjects(withApi(withOrganization(RuleFormContainer)));
+export default withApi(withOrganization(RuleFormContainer));
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 4015af6085..b22d21a5a9 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -32,13 +32,6 @@ const organizationNavigation = [
         description: t('Manage user membership for an organization'),
         id: 'members',
       },
-      {
-        path: `${pathPrefix}/incident-rules/`,
-        title: t('Incident Rules'),
-        show: ({features}) => features.has('incidents'),
-        description: t('Manage Incident Rules'),
-        id: 'incident-rules',
-      },
       {
         path: `${pathPrefix}/auth/`,
         title: t('Auth'),
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index 15f009592d..3e0c3ec2e6 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -24,6 +24,12 @@ export default function getConfiguration({project}) {
           title: t('Alerts'),
           description: t('Manage alerts and alert rules for a project'),
         },
+        {
+          path: `${pathPrefix}/alerts-v2/`,
+          title: t('Alerts (New)'),
+          description: t('Manage alerts and alert rules for a project'),
+          show: ({features}) => features.has('incidents'),
+        },
         {
           path: `${pathPrefix}/tags/`,
           title: t('Tags'),
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
new file mode 100644
index 0000000000..566e80bbf3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
@@ -0,0 +1,20 @@
+import {Params} from 'react-router/lib/Router';
+import React from 'react';
+
+import ProjectAlertHeader from './projectAlertHeader';
+
+type Props = {
+  params: Params;
+  children: React.ReactNode;
+};
+
+function ProjectAlerts({params, children}: Props) {
+  return (
+    <React.Fragment>
+      <ProjectAlertHeader projectId={params.projectId} />
+      {children}
+    </React.Fragment>
+  );
+}
+
+export default ProjectAlerts;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/new.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/new.tsx
new file mode 100644
index 0000000000..5a2c69e001
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/new.tsx
@@ -0,0 +1,20 @@
+import React from 'react';
+
+import {RouterProps} from 'app/types';
+
+import ProjectAlertHeader from './projectAlertHeaderNew';
+
+type Props = RouterProps & {
+  children: React.ReactNode;
+};
+
+function ProjectAlerts({children, ...props}: Props) {
+  return (
+    <React.Fragment>
+      <ProjectAlertHeader {...props} />
+      {children}
+    </React.Fragment>
+  );
+}
+
+export default ProjectAlerts;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
new file mode 100644
index 0000000000..8d4899c45a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertHeaderNew.tsx
@@ -0,0 +1,69 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Organization, RouterProps} from 'app/types';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import ListLink from 'app/components/links/listLink';
+import NavTabs from 'app/components/navTabs';
+import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = {
+  organization: Organization;
+} & RouterProps;
+
+class ProjectAlertHeader extends React.Component<Props> {
+  render() {
+    const {location, params, organization} = this.props;
+    const {projectId} = params;
+
+    const canEditRule = organization.access.includes('project:write');
+
+    const basePath = `/settings/${organization.slug}/projects/${projectId}/alerts-v2/`;
+    const isIssues = location.pathname.includes('issue-rules');
+
+    return (
+      <SettingsPageHeader
+        title={t('Alerts')}
+        action={
+          <Actions>
+            <Button to={`${basePath}settings/`} size="small" icon="icon-settings">
+              {t('Settings')}
+            </Button>
+            <Tooltip
+              disabled={canEditRule}
+              title={t('You do not have permission to edit alert rules.')}
+            >
+              <Button
+                to={`${basePath}${isIssues ? 'issue' : 'event'}-rules/new/`}
+                disabled={!canEditRule}
+                priority="primary"
+                size="small"
+                icon="icon-circle-add"
+              >
+                {t('New Alert Rule')}
+              </Button>
+            </Tooltip>
+          </Actions>
+        }
+        tabs={
+          <NavTabs underlined>
+            <ListLink to={`${basePath}issue-rules/`}>{t('Issue Rules')}</ListLink>
+            <ListLink to={`${basePath}event-rules/`}>{t('Event Rules')}</ListLink>
+          </NavTabs>
+        }
+      />
+    );
+  }
+}
+
+export default withOrganization(ProjectAlertHeader);
+
+const Actions = styled('div')`
+  display: grid;
+  grid-auto-flow: column;
+  grid-gap: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
index 7fbe8a4f46..71f62117f4 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.tsx
@@ -14,8 +14,6 @@ import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SentryTypes from 'app/sentryTypes';
 
-import ProjectAlertHeader from './projectAlertHeader';
-
 type Props = {
   params: Params;
   location: Location;
@@ -44,7 +42,7 @@ class ProjectAlertRules extends AsyncView<
     return [['ruleList', `/projects/${orgId}/${projectId}/rules/`]];
   }
 
-  handleDeleteRule = rule => {
+  handleDeleteRule = (rule: IssueAlertRule) => {
     this.setState({
       ruleList: this.state.ruleList.filter(r => r.id !== rule.id),
     });
@@ -94,7 +92,6 @@ class ProjectAlertRules extends AsyncView<
     return (
       <React.Fragment>
         <SentryDocumentTitle title={t('Alerts Rules')} objSlug={projectId} />
-        <ProjectAlertHeader projectId={projectId} />
         <PermissionAlert />
         {!!ruleList.length && this.renderResults()}
         {!ruleList.length && this.renderEmpty()}
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
new file mode 100644
index 0000000000..0b7b5e05f0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRulesNew.tsx
@@ -0,0 +1,103 @@
+import {Params} from 'react-router/lib/Router';
+import {PlainRoute} from 'react-router/lib/Route';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {IssueAlertRule} from 'app/types/alerts';
+import {Location} from 'history';
+import {Panel} from 'app/components/panels';
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import PermissionAlert from 'app/views/settings/project/permissionAlert';
+import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
+import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
+import SentryTypes from 'app/sentryTypes';
+
+type Props = {
+  params: Params;
+  location: Location;
+  routes: PlainRoute[];
+};
+
+type State = {
+  ruleList: IssueAlertRule[];
+};
+
+class ProjectAlertRules extends AsyncView<
+  Props & AsyncView['props'],
+  State & AsyncView['state']
+> {
+  static propTypes = {
+    routes: PropTypes.array.isRequired,
+  };
+
+  static contextTypes = {
+    router: PropTypes.object,
+    organization: SentryTypes.Organization,
+  };
+
+  getEndpoints(): [string, string][] {
+    const {orgId, projectId} = this.props.params;
+    return [['ruleList', `/projects/${orgId}/${projectId}/rules/`]];
+  }
+
+  handleDeleteRule = rule => {
+    this.setState({
+      ruleList: this.state.ruleList.filter(r => r.id !== rule.id),
+    });
+  };
+
+  renderEmpty() {
+    return (
+      <Panel>
+        <EmptyStateWarning>
+          <p>{t('There are no alerts configured for this project.')}</p>
+        </EmptyStateWarning>
+      </Panel>
+    );
+  }
+
+  renderResults() {
+    const {orgId, projectId} = this.props.params;
+    const {organization} = this.context;
+    const canEditRule = organization.access.includes('project:write');
+
+    return (
+      <div className="rules-list">
+        {this.state.ruleList.map(rule => {
+          return (
+            <RuleRow
+              api={this.api}
+              key={rule.id}
+              data={rule}
+              orgId={orgId}
+              projectId={projectId}
+              params={this.props.params}
+              location={this.props.location}
+              routes={this.props.routes}
+              onDelete={this.handleDeleteRule.bind(this, rule)}
+              canEdit={canEditRule}
+            />
+          );
+        })}
+      </div>
+    );
+  }
+
+  renderBody() {
+    const {ruleList} = this.state;
+    const {projectId} = this.props.params;
+
+    return (
+      <React.Fragment>
+        <SentryDocumentTitle title={t('Alerts Rules')} objSlug={projectId} />
+        <PermissionAlert />
+        {!!ruleList.length && this.renderResults()}
+        {!ruleList.length && this.renderEmpty()}
+      </React.Fragment>
+    );
+  }
+}
+
+export default ProjectAlertRules;
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
index 3f2dfebe8e..84bf1099f0 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertSettings.jsx
@@ -4,6 +4,7 @@ import {PanelAlert} from 'app/components/panels';
 import {fields} from 'app/data/forms/projectAlerts';
 import {t} from 'app/locale';
 import routeTitleGen from 'app/utils/routeTitle';
+import withOrganization from 'app/utils/withOrganization';
 import Access from 'app/components/acl/access';
 import AlertLink from 'app/components/alertLink';
 import AsyncView from 'app/views/asyncView';
@@ -12,9 +13,8 @@ import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import PermissionAlert from 'app/views/settings/project/permissionAlert';
 import PluginList from 'app/components/pluginList';
 import SentryTypes from 'app/sentryTypes';
-import ProjectAlertHeader from './projectAlertHeader';
 
-export default class ProjectAlertSettings extends AsyncView {
+class ProjectAlertSettings extends AsyncView {
   static propTypes = {
     ...AsyncView.propTypes,
     // these are not declared as required of issues with cloned elements
@@ -77,7 +77,6 @@ export default class ProjectAlertSettings extends AsyncView {
       <Access access={['project:write']}>
         {({hasAccess}) => (
           <React.Fragment>
-            <ProjectAlertHeader projectId={projectId} />
             <PermissionAlert />
             <AlertLink to="/settings/account/notifications/" icon="icon-mail">
               {t(
@@ -137,3 +136,5 @@ export default class ProjectAlertSettings extends AsyncView {
     );
   }
 }
+
+export default withOrganization(ProjectAlertSettings);
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
index 7b08da7033..3ab94a0af7 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -1,13 +1,11 @@
 import {Link} from 'react-router';
-import {Params} from 'react-router/lib/Router';
-import {PlainRoute} from 'react-router/lib/Route';
+import {RouteComponentProps} from 'react-router/lib/Router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
 import {Client} from 'app/api';
 import {IssueAlertRule} from 'app/types/alerts';
-import {Location} from 'history';
 import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {
   addSuccessMessage,
@@ -35,12 +33,10 @@ type Props = {
 
   // Is the alert rule editable?
   canEdit?: boolean;
-
-  // react-router params
-  params: Params;
-  location: Location;
-  routes: PlainRoute[];
-};
+} & Pick<
+  RouteComponentProps<{orgId: string; projectId: string}, {}>,
+  'params' | 'routes' | 'location'
+>;
 
 type State = {
   loading: boolean;
@@ -85,8 +81,8 @@ class RuleRow extends React.Component<Props, State> {
   };
 
   render() {
-    const {data, canEdit} = this.props;
-    const editLink = recreateRoute(`${data.id}/`, this.props);
+    const {params, routes, location, data, canEdit} = this.props;
+    const editLink = recreateRoute(`${data.id}/`, {params, routes, location});
 
     const environmentName = data.environment
       ? getDisplayName({name: data.environment})
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index aae929e69e..ffc7fdc565 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -1,17 +1,41 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
 exports[`ProjectAlertSettings render() renders 1`] = `
-<SideEffect(DocumentTitle)
-  title="Alerts Settings - project-slug - Sentry"
->
-  <WithOrganizationMockWrapper
-    access={
-      Array [
+<ProjectAlertSettings
+  organization={
+    Object {
+      "access": Array [
+        "org:read",
+        "org:write",
+        "org:admin",
+        "org:integrations",
+        "project:read",
         "project:write",
-      ]
+        "project:admin",
+        "team:read",
+        "team:write",
+        "team:admin",
+      ],
+      "features": Array [],
+      "id": "3",
+      "name": "Organization Name",
+      "onboardingTasks": Array [],
+      "projects": Array [],
+      "scrapeJavaScript": true,
+      "slug": "org-slug",
+      "status": Object {
+        "id": "active",
+        "name": "active",
+      },
+      "teams": Array [],
     }
-  >
-    <Component />
-  </WithOrganizationMockWrapper>
-</SideEffect(DocumentTitle)>
+  }
+  params={
+    Object {
+      "orgId": "org-slug",
+      "projectId": "project-slug",
+    }
+  }
+  routes={Array []}
+/>
 `;
diff --git a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
index 81adb229b5..b9a5b8a2af 100644
--- a/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/ruleForm.spec.jsx
@@ -2,7 +2,6 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import React from 'react';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
-import {selectByLabel} from 'sentry-test/select';
 import {RuleFormContainer} from 'app/views/settings/incidentRules/ruleForm';
 
 describe('Incident Rules Form', function() {
@@ -12,6 +11,7 @@ describe('Incident Rules Form', function() {
       <RuleFormContainer
         organization={organization}
         orgId={organization.slug}
+        projectId="project-slug"
         projects={[project, TestStubs.Project({slug: 'project-2', id: '3'})]}
         {...props}
       />,
@@ -41,8 +41,6 @@ describe('Incident Rules Form', function() {
     it('creates a rule', async function() {
       const wrapper = createWrapper();
 
-      selectByLabel(wrapper, 'project-slug', {name: 'projects'});
-
       // Enter in name so we can submit
       wrapper
         .find('input[name="name"]')
@@ -77,20 +75,23 @@ describe('Incident Rules Form', function() {
       });
     });
 
-    it('edits projects', async function() {
+    it('edits metric', async function() {
       const wrapper = createWrapper({
         incidentRuleId: rule.id,
         initialData: rule,
         saveOnBlur: true,
       });
 
-      selectByLabel(wrapper, 'project-2', {name: 'projects'});
+      wrapper
+        .find('input[name="name"]')
+        .simulate('change', {target: {value: 'new name'}})
+        .simulate('blur');
 
       expect(editRule).toHaveBeenLastCalledWith(
         expect.anything(),
         expect.objectContaining({
           data: {
-            projects: ['project-2'],
+            name: 'new name',
           },
         })
       );
