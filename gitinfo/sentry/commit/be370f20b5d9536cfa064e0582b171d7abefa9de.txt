commit be370f20b5d9536cfa064e0582b171d7abefa9de
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 7 09:19:29 2016 -0700

    Expand plugin API (JS) (#4058)
    
    - Add Plugin base class (JSX)
    - Move PluginConfigForm to Plugin.DefaultSettings
    - Allow dynamic registration of plugins
    - Add metadata/isTestable to plugin responses
    - Improve endpoint defaults
    - Improve url defaults

diff --git a/src/sentry/api/endpoints/project_plugin_details.py b/src/sentry/api/endpoints/project_plugin_details.py
index 6a3fe7252b..9e01081e7f 100644
--- a/src/sentry/api/endpoints/project_plugin_details.py
+++ b/src/sentry/api/endpoints/project_plugin_details.py
@@ -6,6 +6,7 @@ from django import forms
 from rest_framework import serializers
 from rest_framework.response import Response
 
+from sentry.exceptions import PluginError
 from sentry.plugins import plugins
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
@@ -75,15 +76,28 @@ class ProjectPluginDetailsEndpoint(ProjectEndpoint):
             if field.get('required') and not value:
                 errors[key] = ERR_FIELD_REQUIRED
 
-            for validator in field.get('validators', ()):
-                try:
-                    value = validator(value)
-                except (forms.ValidationError, serializers.ValidationError) as e:
-                    errors[key] = e.message
+            try:
+                value = plugin.validate_config_field(
+                    project=project,
+                    name=key,
+                    value=value,
+                    actor=request.user,
+                )
+            except (forms.ValidationError, serializers.ValidationError, PluginError) as e:
+                errors[key] = e.message
 
             if not errors.get(key):
                 cleaned[key] = value
 
+        try:
+            cleaned = plugin.validate_config(
+                project=project,
+                config=cleaned,
+                actor=request.user,
+            )
+        except PluginError as e:
+            errors['__all__'] = e.message
+
         if errors:
             return Response({
                 'errors': errors,
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 70245cbbe0..7c5e872941 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -1,11 +1,10 @@
 from __future__ import absolute_import
 
+from sentry.api.serializers import Serializer
+from sentry.utils.assets import get_asset_url
+from sentry.utils.http import absolute_uri
 
-from sentry.api.serializers import Serializer, register
-from sentry.plugins.config import PluginConfigMixin
 
-
-@register(PluginConfigMixin)
 class PluginSerializer(Serializer):
     def __init__(self, project=None):
         self.project = project
@@ -16,6 +15,14 @@ class PluginSerializer(Serializer):
             'name': obj.get_title(),
             'type': obj.get_plugin_type(),
             'canDisable': obj.can_disable,
+            'isTestable': obj.is_testable(),
+            'metadata': obj.get_metadata(),
+            'assets': [
+                {
+                    'url': absolute_uri(get_asset_url(obj.asset_key or obj.slug, asset)),
+                }
+                for asset in obj.get_assets()
+            ],
         }
         if self.project:
             d['enabled'] = obj.is_enabled(self.project)
diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index 1ee4ee0da4..2fb97fcec6 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -37,3 +37,7 @@ class DeleteAborted(Exception):
 
 class RestrictedIPAddress(SuspiciousOperation):
     pass
+
+
+class PluginError(Exception):
+    pass
diff --git a/src/sentry/plugins/base/group_api_urls.py b/src/sentry/plugins/base/group_api_urls.py
index 0eb42993af..63425aaae2 100644
--- a/src/sentry/plugins/base/group_api_urls.py
+++ b/src/sentry/plugins/base/group_api_urls.py
@@ -1,17 +1,44 @@
 from __future__ import absolute_import
 
+import logging
 import re
 
+from django.core.urlresolvers import RegexURLResolver, RegexURLPattern
 from django.conf.urls import patterns, include, url
 
 from sentry.plugins import plugins
 
+logger = logging.getLogger('sentry.plugins')
 
-urlpatterns = patterns('')
 
-for _plugin in plugins.all():
-    _plugin_group_urls = _plugin.get_group_urls()
-    if _plugin_group_urls:
-        urlpatterns.append(
-            url(r'^%s/' % re.escape(_plugin.slug), include(_plugin_group_urls))
+def ensure_url(u):
+    if isinstance(u, (tuple, list)):
+        return url(*u)
+    elif not isinstance(u, (RegexURLResolver, RegexURLPattern)):
+        raise TypeError(
+            'url must be RegexURLResolver or RegexURLPattern, not %r: %r' % (type(u).__name__, u)
         )
+    return u
+
+
+def load_plugin_urls(plugins):
+    urlpatterns = patterns('')
+    for plugin in plugins:
+        try:
+            urls = plugin.get_group_urls()
+            if not urls:
+                continue
+            urls = [ensure_url(u) for u in urls]
+        except Exception:
+            logger.exception('routes.failed', extra={
+                'plugin': type(plugin).__name__,
+            })
+        else:
+            urlpatterns.append(
+                url(r'^%s/' % re.escape(plugin.slug), include(urls))
+            )
+
+    return urlpatterns
+
+
+urlpatterns = load_plugin_urls(plugins.all())
diff --git a/src/sentry/plugins/base/project_api_urls.py b/src/sentry/plugins/base/project_api_urls.py
index eaaa4e22df..7042d24a2b 100644
--- a/src/sentry/plugins/base/project_api_urls.py
+++ b/src/sentry/plugins/base/project_api_urls.py
@@ -11,31 +11,31 @@ from sentry.plugins import plugins
 logger = logging.getLogger('sentry.plugins')
 
 
+def ensure_url(u):
+    if isinstance(u, (tuple, list)):
+        return url(*u)
+    elif not isinstance(u, (RegexURLResolver, RegexURLPattern)):
+        raise TypeError(
+            'url must be RegexURLResolver or RegexURLPattern, not %r: %r' % (type(u).__name__, u)
+        )
+    return u
+
+
 def load_plugin_urls(plugins):
     urlpatterns = patterns('')
-
-    for _plugin in plugins:
+    for plugin in plugins:
         try:
-            _plugin_project_urls = _plugin.get_project_urls()
-            # We're definitely allowed to not have any urls
-            if not _plugin_project_urls:
+            urls = plugin.get_project_urls()
+            if not urls:
                 continue
-            # Once we have urls, we need to assert that the
-            # routes are the correct type. If not, once they
-            # are registered in Django, they will error very
-            # loudly later when trying to do url resolution.
-            for u in _plugin_project_urls:
-                if not isinstance(u, (RegexURLResolver, RegexURLPattern)):
-                    raise TypeError(
-                        'url must be RegexURLResolver or RegexURLPattern, not %r: %r' % (type(u).__name__, u)
-                    )
+            urls = [ensure_url(u) for u in urls]
         except Exception:
             logger.exception('routes.failed', extra={
-                'plugin': type(_plugin).__name__,
+                'plugin': type(plugin).__name__,
             })
         else:
             urlpatterns.append(
-                url(r'^%s/' % re.escape(_plugin.slug), include(_plugin_project_urls))
+                url(r'^%s/' % re.escape(plugin.slug), include(urls))
             )
 
     return urlpatterns
diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index 4bbfde5e1e..1337454b27 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -10,6 +10,7 @@ from django.conf.urls import url
 from django.core.urlresolvers import reverse
 from django.utils.html import format_html
 
+from sentry.exceptions import PluginError
 from sentry.models import Activity, Event, GroupMeta
 from sentry.plugins import Plugin
 from sentry.plugins.endpoints import PluginGroupEndpoint
@@ -31,10 +32,6 @@ class IssueGroupActionEndpoint(PluginGroupEndpoint):
             request, group, *args, **kwargs)
 
 
-class PluginError(Exception):
-    pass
-
-
 class IssueTrackingPlugin2(Plugin):
     auth_provider = None
     allowed_actions = ('create', 'link', 'unlink')
diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
index 0f14d9437d..3ea59f9cf3 100644
--- a/src/sentry/plugins/config.py
+++ b/src/sentry/plugins/config.py
@@ -6,8 +6,13 @@ import six
 
 from django import forms
 
+from .validators import DEFAULT_VALIDATORS
+
 
 class PluginConfigMixin(object):
+    asset_key = None
+    assets = []
+
     def field_to_config(self, name, field):
         config = {
             'name': name,
@@ -16,7 +21,9 @@ class PluginConfigMixin(object):
             'help': field.help_text,
             'required': field.required,
         }
-        if isinstance(field, forms.CharField):
+        if isinstance(field, forms.URLField):
+            config['type'] = 'url'
+        elif isinstance(field, forms.CharField):
             if isinstance(field.widget, forms.PasswordInput):
                 config['type'] = 'secret'
             elif isinstance(field.widget, forms.Textarea):
@@ -28,6 +35,18 @@ class PluginConfigMixin(object):
             config['choices'] = field.choices
         return config
 
+    def get_assets(self):
+        return self.assets
+
+    def get_metadata(self):
+        """
+        Return extra metadata which is used to represent this plugin.
+
+        This is available via the API, and commonly used for runtime
+        configuration that changes per-install, but not per-project.
+        """
+        return {}
+
     def get_config(self, project, **kwargs):
         form = self.project_conf_form
         if not form:
@@ -40,6 +59,36 @@ class PluginConfigMixin(object):
             config.append(row)
         return config
 
+    def validate_config_field(self, project, name, value, actor=None):
+        """
+        ```
+        if name == 'foo' and value != 'bar':
+            raise PluginError('foo must be bar')
+        return value
+        ```
+        """
+        for config in self.get_config(project=project):
+            if config['name'] != name:
+                continue
+
+            for validator in DEFAULT_VALIDATORS.get(config['type'], ()):
+                value = validator(project=project, value=value, actor=actor)
+
+            for validator in config.get('validators', ()):
+                value = validator(value, project=project, actor=actor)
+            return value
+        return value
+
+    def validate_config(self, project, config, actor=None):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        return config
+
     def get_group_urls(self):
         return []
 
diff --git a/src/sentry/plugins/endpoints.py b/src/sentry/plugins/endpoints.py
index b9b21a421c..0566089afe 100644
--- a/src/sentry/plugins/endpoints.py
+++ b/src/sentry/plugins/endpoints.py
@@ -14,6 +14,8 @@ class PluginProjectEndpoint(ProjectEndpoint):
     view = None
 
     def _handle(self, request, project, *args, **kwargs):
+        if self.view is None:
+            return Response(status=405)
         return self.view(request, project, *args, **kwargs)
 
     def get(self, request, project, *args, **kwargs):
@@ -31,6 +33,9 @@ class PluginGroupEndpoint(GroupEndpoint):
     view = None
 
     def _handle(self, request, group, *args, **kwargs):
+        if self.view is None:
+            return Response(status=405)
+
         GroupMeta.objects.populate_cache([group])
 
         return self.view(request, group, *args, **kwargs)
diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index 3812160dc8..f05ffc0854 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -8,21 +8,22 @@ from django import forms
 from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.exceptions import PluginError
 from sentry.plugins.bases import notify
 from sentry.http import is_valid_url, safe_urlopen
 from sentry.utils.safe import safe_execute
 
 
-def validate_urls(value):
+def validate_urls(value, **kwargs):
     output = []
     for url in value.split('\n'):
         url = url.strip()
         if not url:
             continue
         if not url.startswith(('http://', 'https://')):
-            raise forms.ValidationError('Not a valid URL.')
+            raise PluginError('Not a valid URL.')
         if not is_valid_url(url):
-            raise forms.ValidationError('Not a valid URL.')
+            raise PluginError('Not a valid URL.')
         output.append(url)
     return '\n'.join(output)
 
diff --git a/src/sentry/plugins/validators/__init__.py b/src/sentry/plugins/validators/__init__.py
new file mode 100644
index 0000000000..82971fda3b
--- /dev/null
+++ b/src/sentry/plugins/validators/__init__.py
@@ -0,0 +1,8 @@
+from __future__ import absolute_import
+
+from .url import URLValidator
+
+
+DEFAULT_VALIDATORS = {
+    'url': [URLValidator],
+}
diff --git a/src/sentry/plugins/validators/url.py b/src/sentry/plugins/validators/url.py
new file mode 100644
index 0000000000..eb41f571ca
--- /dev/null
+++ b/src/sentry/plugins/validators/url.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import
+
+from sentry.exceptions import PluginError
+from sentry.http import is_valid_url
+
+
+def URLValidator(value, **kwargs):
+    if not value.startswith(('http://', 'https://')):
+        raise PluginError('Not a valid URL.')
+    if not is_valid_url(value):
+        raise PluginError('Not a valid URL.')
+    return value
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
new file mode 100644
index 0000000000..6aeb04a49f
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -0,0 +1,85 @@
+import React from 'react';
+import AlertActions from '../actions/alertActions';
+import ApiMixin from '../mixins/apiMixin';
+import LoadingIndicator from '../components/loadingIndicator';
+import plugins from '../plugins';
+import {t} from '../locale';
+
+const PluginConfig = React.createClass({
+  propTypes: {
+    organization: React.PropTypes.object.isRequired,
+    project: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
+  },
+
+  mixins: [ApiMixin],
+
+  componentWillMount() {
+    this.loadPlugin(this.props.data);
+  },
+
+  componentWillReceiveProps(nextProps) {
+    this.loadPlugin(nextProps.data);
+  },
+
+  loadPlugin(data) {
+    this.setState({
+      loading: true,
+    }, () => {
+      plugins.load(data, () => {
+        this.setState({loading: false});
+      });
+    });
+  },
+
+  getPluginEndpoint(data) {
+    let org = this.props.organization;
+    let project = this.props.project;
+    return (
+      `/projects/${org.slug}/${project.slug}/plugins/${data.id}/`
+    );
+  },
+
+  disablePlugin(data) {
+    this.api.request(this.getPluginEndpoint(data), {
+      method: 'DELETE',
+      success: () => {
+        // When this whole page is a react view, this won't be necessary
+        window.location.reload();
+      },
+      error: (error) => {
+        AlertActions.addAlert({
+          message: t('There was an error disabling the plugin'),
+          type: 'error'
+        });
+      }
+    });
+  },
+
+  render() {
+    let data = this.props.data;
+
+    return (
+      <div className="box">
+        <div className="box-header">
+          {data.canDisable && data.enabled &&
+            <button className="btn btn-sm btn-default pull-right"
+                    onClick={this.disablePlugin.bind(this, data)}>{t('Disable')}</button>}
+          <h3>{data.name}</h3>
+        </div>
+        <div className="box-content with-padding">
+          {this.state.loading ?
+            <LoadingIndicator />
+          :
+            plugins.get(data).renderSettings({
+              organization: this.props.organization,
+              project: this.props.project,
+            })
+          }
+        </div>
+      </div>
+    );
+  }
+});
+
+export default PluginConfig;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 81508ce7c5..e44fcdd134 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -1,5 +1,7 @@
 import jQuery from 'jquery';
 
+import plugins from './plugins';
+
 const csrfCookieName = window.csrfCookieName || 'sc';
 
 // setup jquery for CSRF tokens
@@ -34,6 +36,7 @@ jQuery.ajaxSetup({
 
 // these get exported to a global variable, which is important as its the only
 // way we can call into scoped objects
+
 export default {
   jQuery: jQuery,
   moment: require('moment'),
@@ -46,6 +49,11 @@ export default {
   Sentry: {
     api: require('./api'),
     routes: require('./routes'),
+    plugins: {
+      add: plugins.add,
+      BasePlugin: plugins.BasePlugin
+    },
+
     createHistory: require('history/lib/createBrowserHistory'),
     Alerts: require('./components/alerts'),
     AlertActions: require('./actions/alertActions'),
@@ -62,14 +70,14 @@ export default {
     FlotChart: require('./components/flotChart'),
     HookStore: require('./stores/hookStore'),
     Indicators: require('./components/indicators'),
-    IssuePluginConfigForm: require('./components/plugins/pluginConfigureForm'),
-    IssuePluginConfiguration: require('./views/projectIssueTracking'),
     LoadingError: require('./components/loadingError'),
     LoadingIndicator: require('./components/loadingIndicator'),
     ListLink: require('./components/listLink'),
     MenuItem: require('./components/menuItem'),
     OrganizationHomeContainer: require('./components/organizations/homeContainer'),
     Pagination: require('./components/pagination'),
+    PluginConfig: require('./components/pluginConfig'),
+    ProjectIssueTracking: require('./views/projectIssueTracking'),
     ProjectSelector: require('./components/projectHeader/projectSelector'),
     RuleEditor: require('./views/ruleEditor'),
     StackedBarChart: require('./components/stackedBarChart'),
diff --git a/src/sentry/static/sentry/app/plugins/basePlugin.jsx b/src/sentry/static/sentry/app/plugins/basePlugin.jsx
new file mode 100644
index 0000000000..906c9fef32
--- /dev/null
+++ b/src/sentry/static/sentry/app/plugins/basePlugin.jsx
@@ -0,0 +1,17 @@
+import React from 'react';
+
+import Settings from './components/settings';
+
+class BasePlugin {
+    constructor(data) {
+        Object.assign(this, data);
+    }
+
+    renderSettings(props) {
+        return <Settings plugin={this} {...props} />;
+    }
+}
+
+BasePlugin.DefaultSettings = Settings;
+
+export default BasePlugin;
diff --git a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
similarity index 81%
rename from src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
rename to src/sentry/static/sentry/app/plugins/components/settings.jsx
index 9bef90379e..ddea305c27 100644
--- a/src/sentry/static/sentry/app/components/plugins/pluginConfigureForm.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import underscore from 'underscore';
 
-import ApiMixin from '../../mixins/apiMixin';
 import {
   Form,
   FormState,
@@ -10,34 +9,41 @@ import {
   Select2FieldAutocomplete,
   TextField,
   TextareaField,
-} from '../forms';
+} from '../../components/forms';
+import {Client} from '../../api';
 import IndicatorStore from '../../stores/indicatorStore';
-import LoadingIndicator from '../loadingIndicator';
+import LoadingIndicator from '../../components/loadingIndicator';
 import {t} from '../../locale';
 import {defined} from '../../utils';
 
-const PluginConfigForm = React.createClass({
-  propTypes: {
-    organization: React.PropTypes.object.isRequired,
-    project: React.PropTypes.object.isRequired,
-    plugin: React.PropTypes.object.isRequired,
-  },
 
-  mixins: [ApiMixin],
+class PluginSettings extends React.Component {
+  constructor(props) {
+    super(props);
+
+    this.onSubmit = this.onSubmit.bind(this);
+    this.fetchData = this.fetchData.bind(this);
 
-  getInitialState() {
-    return {
+    this.state = {
       fieldList: null,
       initialData: null,
       formData: null,
       errors: {},
-      state: FormState.READY,
+      state: FormState.READY
     };
-  },
+  }
+
+  componentWillMount() {
+    this.api = new Client();
+  }
 
   componentDidMount() {
     this.fetchData();
-  },
+  }
+
+  componentWillUnmount() {
+    this.api.clear();
+  }
 
   getPluginEndpoint() {
     let org = this.props.organization;
@@ -45,35 +51,16 @@ const PluginConfigForm = React.createClass({
     return (
       `/projects/${org.slug}/${project.slug}/plugins/${this.props.plugin.id}/`
     );
-  },
-
-  fetchData() {
-    this.api.request(this.getPluginEndpoint(), {
-      success: (data) => {
-        let formData = {};
-        data.config.forEach((field) => {
-          formData[field.name] = field.value || field.defaultValue;
-        });
-        this.setState({
-          fieldList: data.config,
-          state: FormState.LOADING,
-          formData: formData,
-          initialData: Object.assign({}, formData)
-        });
-      },
-      error: (error) => {
-        this.setState({
-          state: FormState.ERROR,
-        });
-      }
-    });
-  },
+  }
 
   changeField(name, value) {
     let formData = this.state.formData;
     formData[name] = value;
-    this.setState({formData: formData});
-  },
+    // upon changing a field, remove errors
+    let errors = this.state.errors;
+    delete errors[name];
+    this.setState({formData: formData, errors: errors});
+  }
 
   renderField(field) {
     let el;
@@ -95,6 +82,7 @@ const PluginConfigForm = React.createClass({
         el = <PasswordField {...props} />;
         break;
       case 'text':
+      case 'url':
         el = <TextField {...props} />;
         break;
       case 'textarea':
@@ -112,7 +100,7 @@ const PluginConfigForm = React.createClass({
         el = null;
     }
     return el;
-  },
+  }
 
   onSubmit() {
     if (this.state.state == FormState.SAVING) {
@@ -136,16 +124,40 @@ const PluginConfigForm = React.createClass({
         error: (error) => {
           this.setState({
             state: FormState.ERROR,
-            errors: error.responseJSON.errors || {},
+            errors: (error.responseJSON || {}).errors || {},
+          });
+          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+            duration: 3000
           });
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
         },
         complete: () => {
           IndicatorStore.remove(loadingIndicator);
         }
       });
     });
-  },
+  }
+
+  fetchData() {
+    this.api.request(this.getPluginEndpoint(), {
+      success: (data) => {
+        let formData = {};
+        data.config.forEach((field) => {
+          formData[field.name] = field.value || field.defaultValue;
+        });
+        this.setState({
+          fieldList: data.config,
+          state: FormState.LOADING,
+          formData: formData,
+          initialData: Object.assign({}, formData)
+        });
+      },
+      error: (error) => {
+        this.setState({
+          state: FormState.ERROR,
+        });
+      }
+    });
+  }
 
   render() {
     if (!this.state.fieldList) {
@@ -159,6 +171,12 @@ const PluginConfigForm = React.createClass({
       </Form>
     );
   }
-});
+}
+
+PluginSettings.propTypes = {
+    organization: React.PropTypes.object.isRequired,
+    project: React.PropTypes.object.isRequired,
+    plugin: React.PropTypes.object.isRequired,
+};
 
-export default PluginConfigForm;
+export default PluginSettings;
diff --git a/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx b/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx
new file mode 100644
index 0000000000..a8fdca8518
--- /dev/null
+++ b/src/sentry/static/sentry/app/plugins/defaultPlugin.jsx
@@ -0,0 +1,3 @@
+import BasePlugin from './basePlugin';
+
+export class DefaultPlugin extends BasePlugin {}
diff --git a/src/sentry/static/sentry/app/plugins/index.jsx b/src/sentry/static/sentry/app/plugins/index.jsx
new file mode 100644
index 0000000000..237f09dd26
--- /dev/null
+++ b/src/sentry/static/sentry/app/plugins/index.jsx
@@ -0,0 +1,15 @@
+import Registry from './registry';
+import BasePlugin from './basePlugin';
+
+const registry = new Registry();
+
+export {BasePlugin, registry};
+
+export default {
+    BasePlugin: BasePlugin,
+
+    add: registry.add.bind(registry),
+    get: registry.get.bind(registry),
+    load: registry.load.bind(registry),
+    loadAll: registry.loadAll.bind(registry),
+};
diff --git a/src/sentry/static/sentry/app/plugins/registry.jsx b/src/sentry/static/sentry/app/plugins/registry.jsx
new file mode 100644
index 0000000000..12f611dcd1
--- /dev/null
+++ b/src/sentry/static/sentry/app/plugins/registry.jsx
@@ -0,0 +1,83 @@
+import {DefaultPlugin} from './defaultPlugin';
+import {defined} from '../utils';
+
+export default class Registry {
+  constructor() {
+    this.plugins = {};
+    this.assetCache = {};
+  }
+
+  loadAll(dataList, callback) {
+    let remaining = dataList.length;
+    let pluginList = [];
+    dataList.map((data) => {
+      this.load(data, (plugin) => {
+        remaining--;
+        pluginList.push(plugin);
+        if (remaining === 0) {
+          callback(pluginList);
+        }
+      });
+    });
+  }
+
+  load(data, callback) {
+    // TODO(dcramer): we should probably register all valid plugins
+    let remainingAssets = data.assets.length;
+    let finishLoad = function() {
+      if (!defined(this.plugins[data.id])) {
+        this.plugins[data.id] = DefaultPlugin;
+      }
+      console.info('[plugins] Loaded ' + data.id + ' as {' + this.plugins[data.id].name + '}');
+      callback(this.get(data));
+    }.bind(this);
+
+    if (remainingAssets === 0) {
+      finishLoad();
+      return;
+    }
+
+    let onAssetLoaded = function(asset) {
+      remainingAssets--;
+      if (remainingAssets === 0) {
+        finishLoad();
+      }
+    };
+
+    let onAssetFailed = function(asset) {
+      remainingAssets--;
+      console.error('[plugins] Failed to load asset ' + asset.url);
+      if (remainingAssets === 0) {
+        finishLoad();
+      }
+    };
+
+    // TODO(dcramer): what do we do on failed asset loading?
+    data.assets.forEach((asset) => {
+      if (!defined(this.assetCache[asset.url])) {
+        console.info('[plugins] Loading asset for ' + data.id + ': ' + asset.url);
+        let s = document.createElement('script');
+        s.src = asset.url;
+        s.onload = onAssetLoaded.bind(this, asset);
+        s.onerror = onAssetFailed.bind(this, asset);
+        s.async = true;
+        document.body.appendChild(s);
+        this.assetCache[asset.url] = s;
+      } else {
+        onAssetLoaded(asset);
+      }
+    });
+  }
+
+  get(data) {
+    let cls = this.plugins[data.id];
+    if (!defined(cls)) {
+      throw new Error('Attempted to ``get`` an unloaded plugin: ' + data.id);
+    }
+    return new cls(data);
+  }
+
+  add(id, cls) {
+    this.plugins[id] = cls;
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index 040ea0c3cc..ab7372fa4d 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -1,65 +1,26 @@
 import React from 'react';
-import AlertActions from '../actions/alertActions';
-import ApiMixin from '../mixins/apiMixin';
-import PluginConfigForm from '../components/plugins/pluginConfigureForm';
-import {t} from '../locale';
+import PluginConfig from '../components/pluginConfig';
 
-const IssuePluginConfiguration = React.createClass({
+const ProjectIssueTracking = React.createClass({
   propTypes: {
     organization: React.PropTypes.object.isRequired,
     project: React.PropTypes.object.isRequired,
-    plugins: React.PropTypes.array.isRequired
-  },
-
-  mixins: [ApiMixin],
-
-  getPluginEndpoint(plugin) {
-    let org = this.props.organization;
-    let project = this.props.project;
-    return (
-      `/projects/${org.slug}/${project.slug}/plugins/${plugin.id}/`
-    );
-  },
-
-  disablePlugin(plugin) {
-    this.api.request(this.getPluginEndpoint(plugin), {
-      method: 'DELETE',
-      success: () => {
-        // When this whole page is a react view, this won't be necessary
-        window.location.reload();
-      },
-      error: (error) => {
-        AlertActions.addAlert({
-          message: t('There was an error disabling the plugin'),
-          type: 'error'
-        });
-      }
-    });
+    dataList: React.PropTypes.array.isRequired
   },
 
   render() {
-    if (!this.props.plugins.length) {
+    if (!this.props.dataList.length) {
       return null;
     }
+
     return (
       <div>
-        {this.props.plugins.map((plugin) => {
-          return (
-            <div className="box" key={plugin.id}>
-              <div className="box-header">
-                {plugin.canDisable && plugin.enabled &&
-                  <button className="btn btn-sm btn-default pull-right"
-                          onClick={this.disablePlugin.bind(this, plugin)}>{t('Disable')}</button>}
-                <h3>{plugin.title}</h3>
-              </div>
-              <div className="box-content with-padding">
-                <PluginConfigForm plugin={plugin} {...this.props}/>
-              </div>
-            </div>
-          );
+        {this.props.dataList.map((data) => {
+          return <PluginConfig data={data} {...this.props} key={data.id} />;
         })}
-      </div>);
+      </div>
+    );
   }
 });
 
-export default IssuePluginConfiguration;
+export default ProjectIssueTracking;
diff --git a/src/sentry/static/sentry/less/forms.less b/src/sentry/static/sentry/less/forms.less
index f67345bce7..40d9e3ec62 100644
--- a/src/sentry/static/sentry/less/forms.less
+++ b/src/sentry/static/sentry/less/forms.less
@@ -98,8 +98,23 @@ label {
   }
 }
 
-.error {
-  color: @red;
+.has-error .form-control {
+  border-color: @red-dark;
+}
+
+.error,
+.has-error .help-block,
+.has-error .control-label,
+.has-error .radio,
+.has-error .checkbox,
+.has-error .radio-inline,
+.has-error .checkbox-inline,
+.has-error.radio label,
+.has-error.checkbox label,
+.has-error.radio-inline label,
+.has-error.checkbox-inline label {
+  color: @red-dark;
+
 }
 
 input.form-control[disabled] {
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 08563208c7..55002b0445 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -683,12 +683,14 @@ table.integrations {
 
   &.success {
     background: @green;
+    color: @white;
     .icon:before {
       content: "\e60a"; // checkmark
     }
   }
   &.error {
     background: @red;
+    color: @white;
     .icon:before {
       content: "\e615"; // exclamation
     }
diff --git a/src/sentry/templates/sentry/project-issue-tracking.html b/src/sentry/templates/sentry/project-issue-tracking.html
index 96aa8c8f2d..47b11d2d52 100644
--- a/src/sentry/templates/sentry/project-issue-tracking.html
+++ b/src/sentry/templates/sentry/project-issue-tracking.html
@@ -64,10 +64,10 @@
 
   <script>
   $(function(){
-    ReactDOM.render(React.createFactory(Sentry.IssuePluginConfiguration)({
+    ReactDOM.render(React.createFactory(Sentry.ProjectIssueTracking)({
       project: {% serialize project %},
       organization: {% serialize organization %},
-      plugins: {% serialize issue_v2_plugins %}
+      dataList: {% serialize issue_v2_plugins %}
     }), document.getElementById('issue_plugins'));
   });
   </script>
diff --git a/src/sentry/templates/sentry/projects/plugins/configure.html b/src/sentry/templates/sentry/projects/plugins/configure.html
index 0f60887f2d..acfaaf8a9e 100644
--- a/src/sentry/templates/sentry/projects/plugins/configure.html
+++ b/src/sentry/templates/sentry/projects/plugins/configure.html
@@ -83,10 +83,10 @@
     {% if issue_v2_plugin %}
         <script>
         $(function(){
-            ReactDOM.render(React.createFactory(Sentry.IssuePluginConfigForm)({
+            ReactDOM.render(React.createFactory(Sentry.PluginConfig)({
                 project: {% serialize project %},
                 organization: {% serialize organization %},
-                plugin: {% serialize issue_v2_plugin %}
+                data: {% serialize issue_v2_plugin %}
             }), document.getElementById('issue_plugins'));
         });
         </script>
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index fa588caa41..9828d47224 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -5,6 +5,8 @@ from django.http import HttpResponseRedirect, HttpResponse
 from django.utils.safestring import mark_safe
 
 from sentry import constants
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.plugins import plugins, IssueTrackingPlugin, IssueTrackingPlugin2
 from sentry.signals import plugin_enabled
 from sentry.web.frontend.base import ProjectView
@@ -74,12 +76,11 @@ class ProjectIssueTrackingView(ProjectView):
             'page': 'issue-tracking',
             'enabled_plugins': enabled_plugins,
             'other_plugins': other_plugins,
-            'issue_v2_plugins': [{
-                'title': p.get_title(),
-                'id': p.slug,
-                'canDisable': p.can_disable,
-                'enabled': True
-            } for p in issue_v2_plugins]
+            'issue_v2_plugins': serialize(
+                issue_v2_plugins, request.user, PluginSerializer(
+                    project=project
+                )
+            ),
         }
 
         return self.respond('sentry/project-issue-tracking.html', context)
diff --git a/tests/sentry/plugins/base/test.py b/tests/sentry/plugins/base/test.py
index 689b87c3b9..56dc31e01d 100644
--- a/tests/sentry/plugins/base/test.py
+++ b/tests/sentry/plugins/base/test.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
+
 from django.conf.urls import url
+
+from sentry.plugins import Plugin2
 from sentry.plugins.base.project_api_urls import load_plugin_urls
 from sentry.plugins.base.response import JSONResponse
 
@@ -15,36 +18,32 @@ def test_json_response_with_status_kwarg():
 
 
 def test_load_plugin_urls():
-    class BadPluginA(object):
+    class BadPluginA(Plugin2):
         def get_project_urls(self):
             assert False
 
-    class BadPluginB(object):
+    class BadPluginB(Plugin2):
         def get_project_urls(self):
             return 'lol'
 
-    class BadPluginC(object):
+    class BadPluginC(Plugin2):
         def get_project_urls(self):
             return None
 
-    class BadPluginD(object):
+    class GoodPluginA(Plugin2):
         def get_project_urls(self):
-            return [('foo', 'bar')]
-
-    class GoodPlugin(object):
-        slug = 'thing'
+            return [url('', None)]
 
+    class GoodPluginB(Plugin2):
         def get_project_urls(self):
-            return [
-                url('', None),
-            ]
+            return [('foo', 'bar')]
 
     patterns = load_plugin_urls((
         BadPluginA(),
         BadPluginB(),
         BadPluginC(),
-        BadPluginD(),
-        GoodPlugin(),
+        GoodPluginA(),
+        GoodPluginB(),
     ))
 
-    assert len(patterns) == 1
+    assert len(patterns) == 2
diff --git a/tests/sentry/plugins/test_config.py b/tests/sentry/plugins/test_config.py
index 5db94f8839..be11e7f2ff 100644
--- a/tests/sentry/plugins/test_config.py
+++ b/tests/sentry/plugins/test_config.py
@@ -1,7 +1,10 @@
 from __future__ import absolute_import
 
+import pytest
+
 from django import forms
 
+from sentry.exceptions import PluginError
 from sentry.plugins import Plugin2
 from sentry.testutils import TestCase
 
@@ -11,6 +14,7 @@ class DummyForm(forms.Form):
     textarea = forms.CharField(widget=forms.Textarea, required=False)
     password = forms.CharField(label='A Password', widget=forms.PasswordInput)
     choice = forms.ChoiceField(choices=((1, 'one'), (2, 'two')))
+    url = forms.URLField()
 
 
 class DummyPlugin(Plugin2):
@@ -21,8 +25,8 @@ class ConfigTest(TestCase):
     def test_get_config(self):
         project = self.create_project()
         plugin = DummyPlugin()
-        config = plugin.get_config(project)
-        assert len(config) == 4
+        config = plugin.get_config(project=project)
+        assert len(config) == 5
         assert config[0] == {
             'default': None,
             'help': 'text field',
@@ -60,3 +64,38 @@ class ConfigTest(TestCase):
             'type': 'select',
             'choices': [(1, 'one'), (2, 'two')],
         }
+        assert config[4] == {
+            'default': None,
+            'help': '',
+            'label': 'Url',
+            'name': 'url',
+            'placeholder': None,
+            'required': True,
+            'type': 'url',
+        }
+
+    def test_validate_url(self):
+        project = self.create_project()
+        plugin = DummyPlugin()
+        with pytest.raises(PluginError):
+            plugin.validate_config_field(
+                project=project,
+                name='url',
+                value='foo',
+            )
+
+        value = plugin.validate_config_field(
+            project=project,
+            name='url',
+            value='https://example.com',
+        )
+
+        assert value == 'https://example.com'
+
+        value = plugin.validate_config_field(
+            project=project,
+            name='url',
+            value='http://example.com',
+        )
+
+        assert value == 'http://example.com'
