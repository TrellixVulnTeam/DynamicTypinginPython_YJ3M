commit fed89f21a371ad74ae689063d880ad42d213e0df
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 2 17:11:54 2018 -0700

    ref(tests): Refactor jest setup file (#9982)
    
    This moves all tests data into modules in `tests/js/fixtures` and reorganizes the `setup.js` file a bit.
    
    To add to window.TestStubs, create a module that exports a function (note, use named exports, NOT default!) in tests/js/fixtures and it will automatically be added. subdirectories are currently not supported.

diff --git a/tests/js/fixtures/accountAppearance.js b/tests/js/fixtures/accountAppearance.js
new file mode 100644
index 0000000000..c946c09ece
--- /dev/null
+++ b/tests/js/fixtures/accountAppearance.js
@@ -0,0 +1,9 @@
+export function AccountAppearance(params = {}) {
+  return {
+    stacktrace_order: '2',
+    timezone: 'US/Pacific',
+    language: 'en',
+    clock_24_hours: true,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/accountEmails.js b/tests/js/fixtures/accountEmails.js
new file mode 100644
index 0000000000..3c1bd5eca5
--- /dev/null
+++ b/tests/js/fixtures/accountEmails.js
@@ -0,0 +1,20 @@
+export function AccountEmails(params = []) {
+  return [
+    {
+      email: 'primary@example.com',
+      isPrimary: true,
+      isVerified: true,
+    },
+    {
+      email: 'secondary1@example.com',
+      isPrimary: false,
+      isVerified: true,
+    },
+    {
+      email: 'secondary2@example.com',
+      isPrimary: false,
+      isVerified: false,
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/apiKey.js b/tests/js/fixtures/apiKey.js
new file mode 100644
index 0000000000..0751dc1e92
--- /dev/null
+++ b/tests/js/fixtures/apiKey.js
@@ -0,0 +1,11 @@
+export function ApiKey(params = {}) {
+  return {
+    allowed_origins: '',
+    id: 1,
+    key: 'aa624bcc12024702a202cd90be5feda0',
+    label: 'Default',
+    scope_list: ['project:read', 'event:read', 'team:read', 'member:read'],
+    status: 0,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/apiToken.js b/tests/js/fixtures/apiToken.js
new file mode 100644
index 0000000000..cf339467b5
--- /dev/null
+++ b/tests/js/fixtures/apiToken.js
@@ -0,0 +1,8 @@
+export function ApiToken(params = {}) {
+  return {
+    token: 'apitoken123',
+    dateCreated: new Date('Thu Jan 11 2018 18:01:41 GMT-0800 (PST)'),
+    scopes: ['scope1', 'scope2'],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/auditLogs.js b/tests/js/fixtures/auditLogs.js
new file mode 100644
index 0000000000..b5371410bb
--- /dev/null
+++ b/tests/js/fixtures/auditLogs.js
@@ -0,0 +1,33 @@
+export function AuditLogs(params = []) {
+  return [
+    {
+      note: 'edited project ludic-science',
+      targetObject: 2,
+      targetUser: null,
+      data: {
+        status: 0,
+        slug: 'ludic-science',
+        public: false,
+        name: 'Ludic Science',
+        id: 2,
+      },
+      dateCreated: '2018-02-21T03:04:23.157Z',
+      ipAddress: '127.0.0.1',
+      id: '465',
+      actor: TestStubs.User({isSuperuser: true}),
+      event: 'project.edit',
+    },
+    {
+      note: 'edited the organization setting(s): accountRateLimit from 1000 to 0',
+      targetObject: 2,
+      targetUser: null,
+      data: {accountRateLimit: 'from 1000 to 0'},
+      dateCreated: '2018-02-16T23:45:59.813Z',
+      ipAddress: '127.0.0.1',
+      id: '408',
+      actor: TestStubs.User({isSuperuser: false}),
+      event: 'org.edit',
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/authProvider.js b/tests/js/fixtures/authProvider.js
new file mode 100644
index 0000000000..f3670a906e
--- /dev/null
+++ b/tests/js/fixtures/authProvider.js
@@ -0,0 +1,15 @@
+export function AuthProvider(params = {}) {
+  return {
+    auth_provider: {
+      id: '1',
+      provider: 'dummy',
+    },
+    require_link: true,
+    default_role: 'member',
+    login_url: 'http://loginUrl',
+    provider_name: 'dummy',
+    pending_links_count: 0,
+    content: '',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/authProviders.js b/tests/js/fixtures/authProviders.js
new file mode 100644
index 0000000000..d887a1b474
--- /dev/null
+++ b/tests/js/fixtures/authProviders.js
@@ -0,0 +1,3 @@
+export function AuthProviders(params = []) {
+  return [['dummy', 'Dummy', false], ...params];
+}
diff --git a/tests/js/fixtures/authProvidersSaml.js b/tests/js/fixtures/authProvidersSaml.js
new file mode 100644
index 0000000000..1fab164e72
--- /dev/null
+++ b/tests/js/fixtures/authProvidersSaml.js
@@ -0,0 +1,3 @@
+export function AuthProvidersSaml(params = []) {
+  return [['dummy', 'Dummy', true], ...params];
+}
diff --git a/tests/js/fixtures/authenticators.jsx b/tests/js/fixtures/authenticators.jsx
new file mode 100644
index 0000000000..914a1c2fc4
--- /dev/null
+++ b/tests/js/fixtures/authenticators.jsx
@@ -0,0 +1,70 @@
+export function Authenticators() {
+  return {
+    Totp: params => ({
+      lastUsedAt: null,
+      enrollButton: 'Enroll',
+      description:
+        'An authenticator application that supports TOTP (like Google Authenticator or 1Password) can be used to conveniently secure your account.  A new token is generated every 30 seconds.',
+      isEnrolled: true,
+      removeButton: 'Remove',
+      id: 'totp',
+      createdAt: '2018-01-30T17:24:36.554Z',
+      configureButton: 'Info',
+      name: 'Authenticator App',
+      allowMultiEnrollment: false,
+      authId: '15',
+      canValidateOtp: true,
+      isBackupInterface: false,
+      ...params,
+    }),
+    Sms: params => ({
+      enrollButton: 'Enroll',
+      name: 'Text Message',
+      allowMultiEnrollment: false,
+      removeButton: 'Remove',
+      canValidateOtp: true,
+      isEnrolled: false,
+      configureButton: 'Info',
+      id: 'sms',
+      isBackupInterface: false,
+      description:
+        "This authenticator sends you text messages for verification.  It's useful as a backup method or when you do not have a phone that supports an authenticator application.",
+      ...params,
+    }),
+    U2f: params => ({
+      lastUsedAt: null,
+      enrollButton: 'Enroll',
+      description:
+        "Authenticate with a U2F hardware device. This is a device like a Yubikey or something similar which supports FIDO's U2F specification. This also requires a browser which supports this system (like Google Chrome).",
+      isEnrolled: true,
+      removeButton: 'Remove',
+      id: 'u2f',
+      createdAt: '2018-01-30T20:56:45.932Z',
+      configureButton: 'Configure',
+      name: 'U2F (Universal 2nd Factor)',
+      allowMultiEnrollment: true,
+      authId: '23',
+      canValidateOtp: false,
+      isBackupInterface: false,
+      ...params,
+    }),
+    Recovery: params => ({
+      lastUsedAt: null,
+      enrollButton: 'Activate',
+      description:
+        'Recovery codes are the only way to access your account if you lose your device and cannot receive two-factor authentication codes.',
+      isEnrolled: true,
+      removeButton: null,
+      id: 'recovery',
+      createdAt: '2018-01-30T17:24:36.570Z',
+      configureButton: 'View Codes',
+      name: 'Recovery Codes',
+      allowMultiEnrollment: false,
+      authId: '16',
+      canValidateOtp: true,
+      isBackupInterface: true,
+      codes: ['ABCD-1234', 'EFGH-5678'],
+      ...params,
+    }),
+  };
+}
diff --git a/tests/js/fixtures/broadcast.js b/tests/js/fixtures/broadcast.js
new file mode 100644
index 0000000000..3efd3bdbc5
--- /dev/null
+++ b/tests/js/fixtures/broadcast.js
@@ -0,0 +1,15 @@
+export function Broadcast(params = {}) {
+  return {
+    dateCreated: new Date(),
+    dateExpires: new Date(),
+    hasSeen: false,
+    id: '8',
+    isActive: true,
+    link:
+      'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/#uploading-source-maps-to-sentry',
+    message:
+      'Source maps are JSON files that contain information on how to map your transpiled source code back to their original source.',
+    title: 'Learn about Source Maps',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/debugSymbols.js b/tests/js/fixtures/debugSymbols.js
new file mode 100644
index 0000000000..4e52dfc7a2
--- /dev/null
+++ b/tests/js/fixtures/debugSymbols.js
@@ -0,0 +1,37 @@
+export function DebugSymbols(params) {
+  return {
+    debugSymbols: [
+      {
+        dateAdded: '2018-01-31T07:16:26.072Z',
+        dsym: {
+          headers: {'Content-Type': 'text/x-proguard+plain'},
+          sha1: 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44',
+          uuid: '6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1',
+          objectName: 'proguard-mapping',
+          dateCreated: '2018-01-31T07:16:26.010Z',
+          cpuName: 'any',
+          id: '1',
+          symbolType: 'proguard',
+          size: 212,
+        },
+        dsymAppId: 1,
+        version: '1.0',
+        build: '1',
+        id: '1',
+      },
+    ],
+    unreferencedDebugSymbols: [],
+    apps: [
+      {
+        lastSync: '2018-01-31T07:16:26.070Z',
+        name: 'MyApp',
+        iconUrl: null,
+        platforms: '',
+        platform: 'android',
+        appId: 'com.example.myapp',
+        id: '1',
+      },
+    ],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/environments.js b/tests/js/fixtures/environments.js
new file mode 100644
index 0000000000..35693a5a04
--- /dev/null
+++ b/tests/js/fixtures/environments.js
@@ -0,0 +1,10 @@
+export function Environments(hidden) {
+  if (hidden) {
+    return [{id: '1', name: 'zzz', isHidden: true}];
+  } else {
+    return [
+      {id: '1', name: 'production', isHidden: false},
+      {id: '2', name: 'staging', isHidden: false},
+    ];
+  }
+}
diff --git a/tests/js/fixtures/event.js b/tests/js/fixtures/event.js
new file mode 100644
index 0000000000..2f9941cbc7
--- /dev/null
+++ b/tests/js/fixtures/event.js
@@ -0,0 +1,9 @@
+export function Event(params) {
+  return {
+    id: '1',
+    message: 'ApiException',
+    groupID: '1',
+    eventID: '12345678901234567890123456789012',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/eventIdQueryResult.js b/tests/js/fixtures/eventIdQueryResult.js
new file mode 100644
index 0000000000..361d7d38aa
--- /dev/null
+++ b/tests/js/fixtures/eventIdQueryResult.js
@@ -0,0 +1,18 @@
+import {Event} from './event';
+
+export function EventIdQueryResult(params = {}) {
+  let event = Event({
+    metadata: {
+      type: 'event type',
+      value: 'event description',
+    },
+  });
+  return {
+    organizationSlug: 'org-slug',
+    projectSlug: 'project-slug',
+    groupId: event.groupID,
+    eventId: event.eventID,
+    event,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/events.js b/tests/js/fixtures/events.js
new file mode 100644
index 0000000000..fc235e377d
--- /dev/null
+++ b/tests/js/fixtures/events.js
@@ -0,0 +1,14 @@
+import {Event} from './event';
+
+export function Events(params = []) {
+  return [
+    Event({eventID: '12345', id: '1', message: 'ApiException', groupID: '1'}),
+    Event({
+      eventID: '12346',
+      id: '2',
+      message: 'TestException',
+      groupID: '1',
+    }),
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/githubIntegration.js b/tests/js/fixtures/githubIntegration.js
new file mode 100644
index 0000000000..0b80e0b3f3
--- /dev/null
+++ b/tests/js/fixtures/githubIntegration.js
@@ -0,0 +1,18 @@
+export function GitHubIntegration(params = {}) {
+  return {
+    domainName: 'github.com/test-integration',
+    icon: 'http://example.com/integration_icon.png',
+    id: '1',
+    name: 'Test Integration',
+    provider: {
+      name: 'GitHub',
+      key: 'github',
+      canAdd: true,
+      features: [],
+    },
+    projects: [],
+    configOrganization: [],
+    configData: {},
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/githubIntegrationProvider.js b/tests/js/fixtures/githubIntegrationProvider.js
new file mode 100644
index 0000000000..7e49034ec0
--- /dev/null
+++ b/tests/js/fixtures/githubIntegrationProvider.js
@@ -0,0 +1,32 @@
+export function GitHubIntegrationProvider(params = {}) {
+  return {
+    key: 'github',
+    name: 'GitHub',
+    canAdd: true,
+    config: [],
+    externalIssues: [],
+    features: [],
+    setupDialog: {
+      url: '/github-integration-setup-uri/',
+      width: 100,
+      height: 100,
+    },
+    metadata: {
+      description: '*markdown* formatted _description_',
+      features: [{description: '*markdown* feature description'}],
+      author: 'Morty',
+      noun: 'Installation',
+      issue_url: 'http://example.com/integration_issue_url',
+      source_url: 'http://example.com/integration_source_url',
+      aspects: {
+        alerts: [
+          {
+            type: 'warning',
+            text: 'This is a an alert example',
+          },
+        ],
+      },
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/githubRepositoryProvider.js b/tests/js/fixtures/githubRepositoryProvider.js
new file mode 100644
index 0000000000..960c753d49
--- /dev/null
+++ b/tests/js/fixtures/githubRepositoryProvider.js
@@ -0,0 +1,17 @@
+export function GitHubRepositoryProvider(params = {}) {
+  return {
+    key: 'github',
+    name: 'GitHub',
+    config: [
+      {
+        name: 'name',
+        label: 'Repository Name',
+        type: 'text',
+        placeholder: 'e.g. getsentry/sentry',
+        help: 'Enter your repository name, including the owner.',
+        required: true,
+      },
+    ],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/group.js b/tests/js/fixtures/group.js
new file mode 100644
index 0000000000..54f6263110
--- /dev/null
+++ b/tests/js/fixtures/group.js
@@ -0,0 +1,19 @@
+import {Project} from './project';
+
+export function Group(params = {}) {
+  let project = Project();
+  return {
+    id: '1',
+    stats: {
+      '24h': [[1517281200, 2], [1517310000, 1]],
+      '30d': [[1514764800, 1], [1515024000, 122]],
+    },
+    project: {
+      id: project.id,
+      slug: project.slug,
+    },
+    tags: [],
+    assignedTo: null,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/incident.js b/tests/js/fixtures/incident.js
new file mode 100644
index 0000000000..ff5bc21a5f
--- /dev/null
+++ b/tests/js/fixtures/incident.js
@@ -0,0 +1,9 @@
+export function Incident(params = {}) {
+  return {
+    id: '1',
+    title: 'Test Incident',
+    updates: ['First Update', 'Second Update'],
+    url: 'https://status.sentry.io',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/jiraIntegration.js b/tests/js/fixtures/jiraIntegration.js
new file mode 100644
index 0000000000..871aa1c355
--- /dev/null
+++ b/tests/js/fixtures/jiraIntegration.js
@@ -0,0 +1,18 @@
+export function JiraIntegration(params = {}) {
+  return {
+    domainName: 'jira.com/test-integration',
+    icon: 'http://jira.example.com/integration_icon.png',
+    id: '2',
+    name: 'Jira Test Integration',
+    provider: {
+      name: 'Jira',
+      key: 'jira',
+      canAdd: true,
+      features: [],
+    },
+    projects: [],
+    configOrganization: [],
+    configData: {},
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/jiraIntegrationProvider.js b/tests/js/fixtures/jiraIntegrationProvider.js
new file mode 100644
index 0000000000..365748b293
--- /dev/null
+++ b/tests/js/fixtures/jiraIntegrationProvider.js
@@ -0,0 +1,25 @@
+export function JiraIntegrationProvider(params = {}) {
+  return {
+    key: 'jira',
+    name: 'Jira',
+    canAdd: false,
+    config: [],
+    features: [],
+    metadata: {
+      description: '*markdown* formatted Jira _description_',
+      features: [{description: '*markdown* feature description'}],
+      author: 'Rick',
+      noun: 'Instance',
+      issue_url: 'http://example.com/jira_integration_issue_url',
+      source_url: 'http://example.com/jira_integration_source_url',
+      aspects: {
+        externalInstall: {
+          url: 'http://jira.com',
+          buttonText: 'Visit Jira',
+          noticeText: 'You must visit jira to install the integration',
+        },
+      },
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/member.js b/tests/js/fixtures/member.js
new file mode 100644
index 0000000000..b7e76f37cd
--- /dev/null
+++ b/tests/js/fixtures/member.js
@@ -0,0 +1,17 @@
+import {User} from './user';
+
+export function Member(params = {}) {
+  return {
+    id: '1',
+    email: 'sentry1@test.com',
+    name: 'Sentry 1 Name',
+    role: 'member',
+    roleName: 'Member',
+    pending: false,
+    flags: {
+      'sso:linked': false,
+    },
+    user: User(),
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/members.js b/tests/js/fixtures/members.js
new file mode 100644
index 0000000000..1de21fb67d
--- /dev/null
+++ b/tests/js/fixtures/members.js
@@ -0,0 +1,62 @@
+import {Member} from './member';
+
+export function Members(params = []) {
+  return [
+    Member(),
+    {
+      id: '2',
+      name: 'Sentry 2 Name',
+      email: 'sentry2@test.com',
+      role: 'member',
+      roleName: 'Member',
+      pending: true,
+      flags: {
+        'sso:linked': false,
+      },
+      user: {
+        id: '2',
+        has2fa: false,
+        name: 'Sentry 2 Name',
+        email: 'sentry2@test.com',
+        username: 'Sentry 2 Username',
+      },
+    },
+    {
+      id: '3',
+      name: 'Sentry 3 Name',
+      email: 'sentry3@test.com',
+      role: 'owner',
+      roleName: 'Owner',
+      pending: false,
+      flags: {
+        'sso:linked': true,
+      },
+      user: {
+        id: '3',
+        has2fa: true,
+        name: 'Sentry 3 Name',
+        email: 'sentry3@test.com',
+        username: 'Sentry 3 Username',
+      },
+    },
+    {
+      id: '4',
+      name: 'Sentry 4 Name',
+      email: 'sentry4@test.com',
+      role: 'owner',
+      roleName: 'Owner',
+      pending: false,
+      flags: {
+        'sso:linked': true,
+      },
+      user: {
+        id: '4',
+        has2fa: true,
+        name: 'Sentry 4 Name',
+        email: 'sentry4@test.com',
+        username: 'Sentry 4 Username',
+      },
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/organization.js b/tests/js/fixtures/organization.js
new file mode 100644
index 0000000000..b6070a851d
--- /dev/null
+++ b/tests/js/fixtures/organization.js
@@ -0,0 +1,28 @@
+export function Organization(params = {}) {
+  return {
+    id: '3',
+    slug: 'org-slug',
+    name: 'Organization Name',
+    access: [
+      'org:read',
+      'org:write',
+      'org:admin',
+      'project:read',
+      'project:write',
+      'project:admin',
+      'team:read',
+      'team:write',
+      'team:admin',
+    ],
+    status: {
+      id: 'active',
+      name: 'active',
+    },
+    scrapeJavaScript: true,
+    features: [],
+    onboardingTasks: [],
+    teams: [],
+    projects: [],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/organizations.js b/tests/js/fixtures/organizations.js
new file mode 100644
index 0000000000..a98fcef0af
--- /dev/null
+++ b/tests/js/fixtures/organizations.js
@@ -0,0 +1,26 @@
+export function Organizations(params = {}) {
+  return [
+    {
+      id: '1',
+      name: 'test 1',
+      slug: 'test 1',
+      require2FA: false,
+      status: {
+        id: 'active',
+        name: 'active',
+      },
+      ...params,
+    },
+    {
+      id: '2',
+      name: 'test 2',
+      slug: 'test 2',
+      require2FA: false,
+      status: {
+        id: 'active',
+        name: 'active',
+      },
+      ...params,
+    },
+  ];
+}
diff --git a/tests/js/fixtures/plugin.js b/tests/js/fixtures/plugin.js
new file mode 100644
index 0000000000..65d85220f8
--- /dev/null
+++ b/tests/js/fixtures/plugin.js
@@ -0,0 +1,14 @@
+export function Plugin(params = {}) {
+  return {
+    author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
+    enabled: false,
+    id: 'amazon-sqs',
+    name: 'Amazon SQS',
+    slug: 'amazon-sqs',
+    version: '8.23.0.dev0',
+    assets: [],
+    hasConfiguration: true,
+    canDisable: true,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/plugins.js b/tests/js/fixtures/plugins.js
new file mode 100644
index 0000000000..3554e2ce53
--- /dev/null
+++ b/tests/js/fixtures/plugins.js
@@ -0,0 +1,16 @@
+import {Plugin} from './plugin';
+
+export function Plugins(params = []) {
+  return [
+    Plugin(),
+    Plugin({
+      enabled: true,
+      id: 'github',
+      name: 'GitHub',
+      slug: 'github',
+      canDisable: false,
+      hasConfiguration: false,
+    }),
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/project.js b/tests/js/fixtures/project.js
new file mode 100644
index 0000000000..d78a2ac52e
--- /dev/null
+++ b/tests/js/fixtures/project.js
@@ -0,0 +1,12 @@
+export function Project(params) {
+  return {
+    id: '2',
+    slug: 'project-slug',
+    name: 'Project Name',
+    hasAccess: true,
+    isMember: true,
+    isBookmarked: false,
+    teams: [],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/projectAlertRule.js b/tests/js/fixtures/projectAlertRule.js
new file mode 100644
index 0000000000..191b546d6e
--- /dev/null
+++ b/tests/js/fixtures/projectAlertRule.js
@@ -0,0 +1,12 @@
+export function ProjectAlertRule(params = {}) {
+  return {
+    id: '1',
+    name: 'My alert rule',
+    environment: 'staging',
+    conditions: [{name: 'An alert is first seen', id: 'sentry.rules.conditions.1'}],
+    actions: [
+      {name: 'Send a notification to all services', id: 'sentry.rules.actions.notify1'},
+    ],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/projectAlertRuleConfiguration.js b/tests/js/fixtures/projectAlertRuleConfiguration.js
new file mode 100644
index 0000000000..fc3f937caa
--- /dev/null
+++ b/tests/js/fixtures/projectAlertRuleConfiguration.js
@@ -0,0 +1,19 @@
+export function ProjectAlertRuleConfiguration(params = {}) {
+  return {
+    actions: [
+      {
+        id: 'sentry.rules.actions.notify1',
+        label: 'Send a notification for all services',
+        enabled: true,
+      },
+    ],
+    conditions: [
+      {
+        id: 'sentry.rules.conditions.1',
+        label: 'An event is seen',
+        enabled: true,
+      },
+    ],
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/projectDetails.js b/tests/js/fixtures/projectDetails.js
new file mode 100644
index 0000000000..9d970059ea
--- /dev/null
+++ b/tests/js/fixtures/projectDetails.js
@@ -0,0 +1,24 @@
+import {Project} from './project';
+
+export function ProjectDetails(params) {
+  return Project({
+    subjectTemplate: '[$project] ${tag:level}: $title',
+    subjectPrefix: '[my-org]',
+    digestsMinDelay: 5,
+    digestsMaxDelay: 60,
+    dataScrubber: false,
+    dataScrubberDefaults: false,
+    scrubIPAddresses: false,
+    resolveAge: 48,
+    sensitiveFields: ['creditcard', 'ssn'],
+    safeFields: ['business-email', 'company'],
+    storeCrashReports: false,
+    allowedDomains: ['example.com', 'https://example.com'],
+    scrapeJavaScript: true,
+    securityToken: 'security-token',
+    securityTokenHeader: 'x-security-header',
+    verifySSL: true,
+    features: [],
+    ...params,
+  });
+}
diff --git a/tests/js/fixtures/projectFilters.js b/tests/js/fixtures/projectFilters.js
new file mode 100644
index 0000000000..114598d4ad
--- /dev/null
+++ b/tests/js/fixtures/projectFilters.js
@@ -0,0 +1,33 @@
+export function ProjectFilters(params = []) {
+  return [
+    {
+      active: true,
+      id: 'browser-extensions',
+      name: 'Filter out errors known to be caused by browser extensions',
+      description:
+        'Certain browser extensions will inject inline scripts and are known to cause errors.',
+    },
+    {
+      active: false,
+      id: 'localhost',
+      name: 'Filter out events coming from localhost',
+      description:
+        'This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.',
+    },
+    {
+      active: ['ie_pre_9', 'ie9'],
+      id: 'legacy-browsers',
+      name: 'Filter out known errors from legacy browsers',
+      description:
+        'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.',
+    },
+    {
+      active: false,
+      id: 'web-crawlers',
+      name: 'Filter out known web crawlers',
+      description:
+        'Some crawlers may execute pages in incompatible ways which then cause errors that are unlikely to be seen by a normal user.',
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/projectKeys.js b/tests/js/fixtures/projectKeys.js
new file mode 100644
index 0000000000..1042f22a15
--- /dev/null
+++ b/tests/js/fixtures/projectKeys.js
@@ -0,0 +1,27 @@
+export function ProjectKeys(params = []) {
+  return [
+    {
+      dsn: {
+        secret:
+          'http://188ee45a58094d939428d8585aa6f661:a33bf9aba64c4bbdaf873bb9023b6d2d@dev.getsentry.net:8000/1',
+        minidump:
+          'http://dev.getsentry.net:8000/api/1/minidump?sentry_key=188ee45a58094d939428d8585aa6f661',
+        public: 'http://188ee45a58094d939428d8585aa6f661@dev.getsentry.net:8000/1',
+        csp:
+          'http://dev.getsentry.net:8000/api/1/csp-report/?sentry_key=188ee45a58094d939428d8585aa6f661',
+        security:
+          'http://dev.getsentry.net:8000/api/1/security-report/?sentry_key=188ee45a58094d939428d8585aa6f661',
+      },
+      public: '188ee45a58094d939428d8585aa6f661',
+      secret: 'a33bf9aba64c4bbdaf873bb9023b6d2d',
+      name: 'Natural Halibut',
+      rateLimit: null,
+      projectId: 1,
+      dateCreated: '2018-02-28T07:13:51.087Z',
+      id: '188ee45a58094d939428d8585aa6f661',
+      isActive: true,
+      label: 'Natural Halibut',
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/repository.js b/tests/js/fixtures/repository.js
new file mode 100644
index 0000000000..cd9ac4f68b
--- /dev/null
+++ b/tests/js/fixtures/repository.js
@@ -0,0 +1,10 @@
+export function Repository(params = {}) {
+  return {
+    id: '4',
+    name: 'repo-name',
+    provider: 'github',
+    url: 'https://github.com/example/repo-name',
+    status: 'active',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/searches.js b/tests/js/fixtures/searches.js
new file mode 100644
index 0000000000..dafa1cc031
--- /dev/null
+++ b/tests/js/fixtures/searches.js
@@ -0,0 +1,23 @@
+export function Searches(params = []) {
+  return [
+    {
+      name: 'Needs Triage',
+      dateCreated: '2017-11-14T02:22:58.026Z',
+      isUserDefault: false,
+      isPrivate: false,
+      query: 'is:unresolved is:unassigned',
+      id: '2',
+      isDefault: true,
+    },
+    {
+      name: 'Unresolved Issues',
+      dateCreated: '2017-11-14T02:22:58.022Z',
+      isUserDefault: true,
+      isPrivate: false,
+      query: 'is:unresolved',
+      id: '1',
+      isDefault: false,
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/shortIdQueryResult.js b/tests/js/fixtures/shortIdQueryResult.js
new file mode 100644
index 0000000000..c0e3dd3732
--- /dev/null
+++ b/tests/js/fixtures/shortIdQueryResult.js
@@ -0,0 +1,18 @@
+import {Group} from './group';
+
+export function ShortIdQueryResult(params = {}) {
+  let group = Group({
+    metadata: {
+      type: 'group type',
+      value: 'group description',
+    },
+  });
+  return {
+    organizationSlug: 'org-slug',
+    projectSlug: 'project-slug',
+    groupId: group.id,
+    shortId: 'test-1',
+    group,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/subscriptions.js b/tests/js/fixtures/subscriptions.js
new file mode 100644
index 0000000000..6540605bfd
--- /dev/null
+++ b/tests/js/fixtures/subscriptions.js
@@ -0,0 +1,24 @@
+export function Subscriptions(params = []) {
+  return [
+    {
+      subscribedDate: '2018-01-08T05:14:59.102Z',
+      subscribed: true,
+      listDescription:
+        'Everything you need to know about Sentry features, integrations, partnerships, and launches.',
+      listId: 2,
+      unsubscribedDate: null,
+      listName: 'Product & Feature Updates',
+      email: 'test@sentry.io',
+    },
+    {
+      subscribedDate: null,
+      subscribed: false,
+      listDescription: "Our monthly update on what's new with Sentry and the community.",
+      listId: 1,
+      unsubscribedDate: '2018-01-08T19:31:42.546Z',
+      listName: 'Sentry Newsletter',
+      email: 'test@sentry.io',
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/tags.js b/tests/js/fixtures/tags.js
new file mode 100644
index 0000000000..81b260c27b
--- /dev/null
+++ b/tests/js/fixtures/tags.js
@@ -0,0 +1,9 @@
+export function Tags(params = {}) {
+  return [
+    {key: 'browser', name: 'Browser', canDelete: true},
+    {key: 'device', name: 'Device', canDelete: true},
+    {key: 'url', name: 'URL', canDelete: true},
+    {key: 'environment', name: 'Environment', canDelete: false},
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/team.js b/tests/js/fixtures/team.js
new file mode 100644
index 0000000000..62e74c2fe1
--- /dev/null
+++ b/tests/js/fixtures/team.js
@@ -0,0 +1,9 @@
+export function Team(params) {
+  return {
+    id: '1',
+    slug: 'team-slug',
+    name: 'Team Name',
+    isMember: true,
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/tombstones.js b/tests/js/fixtures/tombstones.js
new file mode 100644
index 0000000000..d8e3204fb0
--- /dev/null
+++ b/tests/js/fixtures/tombstones.js
@@ -0,0 +1,60 @@
+export function Tombstones(params = []) {
+  return [
+    {
+      culprit: 'poll(../../sentry/scripts/views.js)',
+      level: 'error',
+      actor: {
+        username: 'billy@sentry.io',
+        emails: [
+          {is_verified: false, id: '28', email: 'test@test.com'},
+          {is_verified: false, id: '17', email: 'billy36@sentry.io'},
+          {is_verified: false, id: '11', email: 'awerawer@awe.com'},
+          {is_verified: true, id: '10', email: 'billy2@sentry.io'},
+          {is_verified: true, id: '5', email: 'billy@sentry.io'},
+        ],
+        isManaged: false,
+        lastActive: '2018-02-21T01:27:52.255Z',
+        identities: [
+          {
+            name: '79684',
+            dateVerified: '2018-02-21T00:52:40.149Z',
+            provider: {id: 'github', name: 'GitHub'},
+            dateSynced: '2018-02-21T00:52:40.149Z',
+            organization: {slug: 'default', name: 'default'},
+            id: '1',
+          },
+        ],
+        id: '1',
+        isActive: true,
+        has2fa: true,
+        name: 'billy vong',
+        avatarUrl:
+          'https://secure.gravatar.com/avatar/7b544e8eb9d08ed777be5aa82121155a?s=32&d=mm',
+        dateJoined: '2018-01-10T00:19:59Z',
+        options: {
+          timezone: 'America/Los_Angeles',
+          seenReleaseBroadcast: true,
+          stacktraceOrder: -1,
+          language: 'en',
+          clock24Hours: false,
+        },
+        avatar: {
+          avatarUuid: '483ed7478a2248d59211f538c2997e0b',
+          avatarType: 'letter_avatar',
+        },
+        lastLogin: '2018-02-14T07:09:37.536Z',
+        permissions: [],
+        email: 'billy@sentry.io',
+      },
+      message:
+        "This is an example JavaScript exception TypeError Object [object Object] has no method 'updateFrom' poll(../../sentry/scripts/views.js)",
+      type: 'error',
+      id: '1',
+      metadata: {
+        type: 'TypeError',
+        value: "Object [object Object] has no method 'updateFrom'",
+      },
+    },
+    ...params,
+  ];
+}
diff --git a/tests/js/fixtures/user.js b/tests/js/fixtures/user.js
new file mode 100644
index 0000000000..7b37b7df39
--- /dev/null
+++ b/tests/js/fixtures/user.js
@@ -0,0 +1,17 @@
+export function User(params = {}) {
+  return {
+    id: '1',
+    username: 'foo@example.com',
+    email: 'foo@example.com',
+    name: 'Foo Bar',
+    isAuthenticated: true,
+    options: {
+      timezone: 'UTC',
+    },
+    hasPasswordAuth: true,
+    flags: {
+      newsletter_consent_prompt: false,
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/userDetails.js b/tests/js/fixtures/userDetails.js
new file mode 100644
index 0000000000..d4fe938a5c
--- /dev/null
+++ b/tests/js/fixtures/userDetails.js
@@ -0,0 +1,33 @@
+export function UserDetails(params = {}) {
+  return {
+    username: 'billyfirefoxusername@test.com',
+    emails: [
+      {is_verified: false, id: '20', email: 'billyfirefox@test.com2'},
+      {is_verified: true, id: '8', email: 'billyfirefox2@test.com'},
+      {is_verified: false, id: '7', email: 'billyfirefox@test.com'},
+    ],
+    isManaged: false,
+    lastActive: '2018-01-25T21:00:19.946Z',
+    identities: [],
+    id: '4',
+    isActive: true,
+    has2fa: false,
+    name: 'Firefox Billy',
+    avatarUrl:
+      'https://secure.gravatar.com/avatar/5df53e28e63099658c1ba89b8e9a7cf4?s=32&d=mm',
+    authenticators: [],
+    dateJoined: '2018-01-11T00:30:41.366Z',
+    options: {
+      timezone: 'UTC',
+      seenReleaseBroadcast: null,
+      stacktraceOrder: 'default',
+      language: 'en',
+      clock24Hours: false,
+    },
+    avatar: {avatarUuid: null, avatarType: 'letter_avatar'},
+    lastLogin: '2018-01-25T19:57:46.973Z',
+    permissions: [],
+    email: 'billyfirefox@test.com',
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/userFeedback.js b/tests/js/fixtures/userFeedback.js
new file mode 100644
index 0000000000..b984f7ec84
--- /dev/null
+++ b/tests/js/fixtures/userFeedback.js
@@ -0,0 +1,12 @@
+import {Group} from './group';
+
+export function UserFeedback(params = {}) {
+  return {
+    id: '123',
+    name: 'Lyn',
+    email: 'lyn@sentry.io',
+    comments: 'Something bad happened',
+    issue: Group(),
+    ...params,
+  };
+}
diff --git a/tests/js/fixtures/vstsIntegrationProvider.js b/tests/js/fixtures/vstsIntegrationProvider.js
new file mode 100644
index 0000000000..27d77b07f3
--- /dev/null
+++ b/tests/js/fixtures/vstsIntegrationProvider.js
@@ -0,0 +1,19 @@
+export function VstsIntegrationProvider(params = {}) {
+  return {
+    key: 'vsts',
+    name: 'VSTS',
+    canAdd: true,
+    config: [],
+    features: [],
+    metadata: {
+      description: '*markdown* formatted VSTS _description_',
+      features: [{description: '*markdown* feature description'}],
+      author: 'Frank',
+      noun: 'Instance',
+      issue_url: 'http://example.com/vsts_issue_url',
+      source_url: 'http://example.com/vsts_source_url',
+      aspects: {},
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/helpers/loadFixtures.js b/tests/js/helpers/loadFixtures.js
new file mode 100644
index 0000000000..c31896854f
--- /dev/null
+++ b/tests/js/helpers/loadFixtures.js
@@ -0,0 +1,23 @@
+/* eslint import/no-nodejs-modules:0 */
+import fs from 'fs';
+
+export function loadFixtures(dir) {
+  // Dynamically load fixtures
+  const modules = fs.readdirSync(dir).map(filename => require(`${dir}/${filename}`));
+
+  modules.forEach(exports => {
+    if (Object.keys(exports).includes('default')) {
+      throw new Error('Javascript fixtures cannot use default export');
+    }
+  });
+
+  const fixtures = modules.reduce(
+    (acc, exports) => ({
+      ...acc,
+      ...exports,
+    }),
+    {}
+  );
+
+  return fixtures;
+}
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 06524ad335..1daabc9640 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -1,7 +1,4 @@
 /* global __dirname */
-/* eslint import/no-nodejs-modules:0 */
-import fs from 'fs';
-
 import {channel, createBroadcast} from 'emotion-theming';
 import jQuery from 'jquery';
 import sinon from 'sinon';
@@ -13,8 +10,45 @@ import PropTypes from 'prop-types';
 import ConfigStore from 'app/stores/configStore';
 import theme from 'app/utils/theme';
 
+import {loadFixtures} from './helpers/loadFixtures';
+
 export * from './helpers/select';
 
+/**
+ * Enzyme configuration
+ */
+Enzyme.configure({adapter: new Adapter()});
+Enzyme.configure({disableLifecycleMethods: true});
+
+/**
+ * Mock (current) date to alway be below
+ */
+const constantDate = new Date(1508208080000); //National Pasta Day
+MockDate.set(constantDate);
+
+/**
+ * emotion setup for theme provider in context
+ */
+const broadcast = createBroadcast(theme);
+
+/**
+ * Load all files in `tests/js/fixtures/*` as a module.
+ * These will then be added to the `TestStubs` global below
+ */
+const fixturesPath = `${__dirname}/fixtures`;
+const fixtures = loadFixtures(fixturesPath);
+
+/**
+ * Global testing configuration
+ */
+ConfigStore.loadInitialData({
+  messages: [],
+  user: fixtures.User(),
+});
+
+/**
+ * Mocks
+ */
 jest.mock('lodash/debounce', () => jest.fn(fn => fn));
 jest.mock('app/utils/recreateRoute');
 jest.mock('app/translations');
@@ -72,14 +106,12 @@ jest.mock('app/utils/sdk', () => ({
   lastEventId: jest.fn(),
 }));
 
-const constantDate = new Date(1508208080000); //National Pasta Day
-MockDate.set(constantDate);
-
 // We generally use actual jQuery, and jest mocks takes precedence over node_modules
 jest.unmock('jquery');
 
-Enzyme.configure({adapter: new Adapter()});
-Enzyme.configure({disableLifecycleMethods: true});
+/**
+ * Test Globals
+ */
 
 // This is so we can use async/await in tests instead of wrapping with `setTimeout`
 window.tick = () => new Promise(resolve => setTimeout(resolve));
@@ -88,28 +120,8 @@ window.$ = window.jQuery = jQuery;
 window.sinon = sinon;
 window.scrollTo = jest.fn();
 
-// emotion context broadcast
-const broadcast = createBroadcast(theme);
-
-// Dynamically load fixtures
-const fixturesPath = `${__dirname}/fixtures`;
-const modules = fs
-  .readdirSync(fixturesPath)
-  .map(filename => require(`${fixturesPath}/${filename}`));
-
-modules.forEach(exports => {
-  if (Object.keys(exports).includes('default')) {
-    throw new Error('Javascript fixtures cannot use default export');
-  }
-});
-
-const fixtures = modules.reduce(
-  (acc, exports) => ({
-    ...acc,
-    ...exports,
-  }),
-  {}
-);
+// this is very commonly used, so expose it globally
+window.MockApiClient = require.requireMock('app/api').Client;
 
 window.TestStubs = {
   // react-router's 'router' context
@@ -157,8 +169,8 @@ window.TestStubs = {
       },
       location: TestStubs.location(),
       router: TestStubs.router(),
-      organization: TestStubs.Organization(),
-      project: TestStubs.Project(),
+      organization: fixtures.Organization(),
+      project: fixtures.Project(),
       ...context,
     },
     childContextTypes: {
@@ -171,950 +183,9 @@ window.TestStubs = {
     },
   }),
 
-  AccountAppearance: () => {
-    return {
-      stacktrace_order: '2',
-      timezone: 'US/Pacific',
-      language: 'en',
-      clock_24_hours: true,
-    };
-  },
-
-  ApiKey: params => {
-    return {
-      allowed_origins: '',
-      id: 1,
-      key: 'aa624bcc12024702a202cd90be5feda0',
-      label: 'Default',
-      scope_list: ['project:read', 'event:read', 'team:read', 'member:read'],
-      status: 0,
-    };
-  },
-
-  ApiToken: () => {
-    return {
-      token: 'apitoken123',
-      dateCreated: new Date('Thu Jan 11 2018 18:01:41 GMT-0800 (PST)'),
-      scopes: ['scope1', 'scope2'],
-    };
-  },
-
-  AuditLogs: () => [
-    {
-      note: 'edited project ludic-science',
-      targetObject: 2,
-      targetUser: null,
-      data: {
-        status: 0,
-        slug: 'ludic-science',
-        public: false,
-        name: 'Ludic Science',
-        id: 2,
-      },
-      dateCreated: '2018-02-21T03:04:23.157Z',
-      ipAddress: '127.0.0.1',
-      id: '465',
-      actor: TestStubs.User({isSuperuser: true}),
-      event: 'project.edit',
-    },
-    {
-      note: 'edited the organization setting(s): accountRateLimit from 1000 to 0',
-      targetObject: 2,
-      targetUser: null,
-      data: {accountRateLimit: 'from 1000 to 0'},
-      dateCreated: '2018-02-16T23:45:59.813Z',
-      ipAddress: '127.0.0.1',
-      id: '408',
-      actor: TestStubs.User({isSuperuser: false}),
-      event: 'org.edit',
-    },
-  ],
-
-  AuthProviders: () => {
-    return [['dummy', 'Dummy', false]];
-  },
-
-  AuthProvidersSaml: () => {
-    return [['dummy', 'Dummy', true]];
-  },
-
-  AuthProvider: () => {
-    return {
-      auth_provider: {
-        id: '1',
-        provider: 'dummy',
-      },
-      require_link: true,
-      default_role: 'member',
-      login_url: 'http://loginUrl',
-      provider_name: 'dummy',
-      pending_links_count: 0,
-      content: '',
-    };
-  },
-
-  Authenticators: () => {
-    return {
-      Totp: params => ({
-        lastUsedAt: null,
-        enrollButton: 'Enroll',
-        description:
-          'An authenticator application that supports TOTP (like Google Authenticator or 1Password) can be used to conveniently secure your account.  A new token is generated every 30 seconds.',
-        isEnrolled: true,
-        removeButton: 'Remove',
-        id: 'totp',
-        createdAt: '2018-01-30T17:24:36.554Z',
-        configureButton: 'Info',
-        name: 'Authenticator App',
-        allowMultiEnrollment: false,
-        authId: '15',
-        canValidateOtp: true,
-        isBackupInterface: false,
-        ...params,
-      }),
-      Sms: params => ({
-        enrollButton: 'Enroll',
-        name: 'Text Message',
-        allowMultiEnrollment: false,
-        removeButton: 'Remove',
-        canValidateOtp: true,
-        isEnrolled: false,
-        configureButton: 'Info',
-        id: 'sms',
-        isBackupInterface: false,
-        description:
-          "This authenticator sends you text messages for verification.  It's useful as a backup method or when you do not have a phone that supports an authenticator application.",
-        ...params,
-      }),
-      U2f: params => ({
-        lastUsedAt: null,
-        enrollButton: 'Enroll',
-        description:
-          "Authenticate with a U2F hardware device. This is a device like a Yubikey or something similar which supports FIDO's U2F specification. This also requires a browser which supports this system (like Google Chrome).",
-        isEnrolled: true,
-        removeButton: 'Remove',
-        id: 'u2f',
-        createdAt: '2018-01-30T20:56:45.932Z',
-        configureButton: 'Configure',
-        name: 'U2F (Universal 2nd Factor)',
-        allowMultiEnrollment: true,
-        authId: '23',
-        canValidateOtp: false,
-        isBackupInterface: false,
-        ...params,
-      }),
-      Recovery: params => ({
-        lastUsedAt: null,
-        enrollButton: 'Activate',
-        description:
-          'Recovery codes are the only way to access your account if you lose your device and cannot receive two-factor authentication codes.',
-        isEnrolled: true,
-        removeButton: null,
-        id: 'recovery',
-        createdAt: '2018-01-30T17:24:36.570Z',
-        configureButton: 'View Codes',
-        name: 'Recovery Codes',
-        allowMultiEnrollment: false,
-        authId: '16',
-        canValidateOtp: true,
-        isBackupInterface: true,
-        codes: ['ABCD-1234', 'EFGH-5678'],
-        ...params,
-      }),
-    };
-  },
-
   AllAuthenticators: () => {
-    return Object.values(TestStubs.Authenticators()).map(x => x());
-  },
-
-  AccountEmails: () => {
-    return [
-      {
-        email: 'primary@example.com',
-        isPrimary: true,
-        isVerified: true,
-      },
-      {
-        email: 'secondary1@example.com',
-        isPrimary: false,
-        isVerified: true,
-      },
-      {
-        email: 'secondary2@example.com',
-        isPrimary: false,
-        isVerified: false,
-      },
-    ];
-  },
-
-  Broadcast: params => ({
-    dateCreated: new Date(),
-    dateExpires: new Date(),
-    hasSeen: false,
-    id: '8',
-    isActive: true,
-    link:
-      'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/#uploading-source-maps-to-sentry',
-    message:
-      'Source maps are JSON files that contain information on how to map your transpiled source code back to their original source.',
-    title: 'Learn about Source Maps',
-    ...params,
-  }),
-
-  DebugSymbols: params => ({
-    debugSymbols: [
-      {
-        dateAdded: '2018-01-31T07:16:26.072Z',
-        dsym: {
-          headers: {'Content-Type': 'text/x-proguard+plain'},
-          sha1: 'e6d3c5185dac63eddfdc1a5edfffa32d46103b44',
-          uuid: '6dc7fdb0-d2fb-4c8e-9d6b-bb1aa98929b1',
-          objectName: 'proguard-mapping',
-          dateCreated: '2018-01-31T07:16:26.010Z',
-          cpuName: 'any',
-          id: '1',
-          symbolType: 'proguard',
-          size: 212,
-        },
-        dsymAppId: 1,
-        version: '1.0',
-        build: '1',
-        id: '1',
-      },
-    ],
-    unreferencedDebugSymbols: [],
-    apps: [
-      {
-        lastSync: '2018-01-31T07:16:26.070Z',
-        name: 'MyApp',
-        iconUrl: null,
-        platforms: '',
-        platform: 'android',
-        appId: 'com.example.myapp',
-        id: '1',
-      },
-    ],
-    ...params,
-  }),
-
-  Environments: hidden => {
-    if (hidden) {
-      return [{id: '1', name: 'zzz', isHidden: true}];
-    } else {
-      return [
-        {id: '1', name: 'production', isHidden: false},
-        {id: '2', name: 'staging', isHidden: false},
-      ];
-    }
-  },
-
-  Event: params => {
-    return {
-      id: '1',
-      message: 'ApiException',
-      groupID: '1',
-      eventID: '12345678901234567890123456789012',
-      ...params,
-    };
-  },
-
-  EventIdQueryResult: params => {
-    let event = TestStubs.Event({
-      metadata: {
-        type: 'event type',
-        value: 'event description',
-      },
-    });
-    return {
-      organizationSlug: 'org-slug',
-      projectSlug: 'project-slug',
-      groupId: event.groupID,
-      eventId: event.eventID,
-      event,
-    };
-  },
-
-  Events: () => {
-    return [
-      TestStubs.Event({eventID: '12345', id: '1', message: 'ApiException', groupID: '1'}),
-      TestStubs.Event({
-        eventID: '12346',
-        id: '2',
-        message: 'TestException',
-        groupID: '1',
-      }),
-    ];
-  },
-
-  GitHubRepositoryProvider: params => {
-    return {
-      key: 'github',
-      name: 'GitHub',
-      config: [
-        {
-          name: 'name',
-          label: 'Repository Name',
-          type: 'text',
-          placeholder: 'e.g. getsentry/sentry',
-          help: 'Enter your repository name, including the owner.',
-          required: true,
-        },
-      ],
-      ...params,
-    };
-  },
-
-  GitHubIntegrationProvider: params => {
-    return {
-      key: 'github',
-      name: 'GitHub',
-      canAdd: true,
-      config: [],
-      externalIssues: [],
-      features: [],
-      setupDialog: {
-        url: '/github-integration-setup-uri/',
-        width: 100,
-        height: 100,
-      },
-      metadata: {
-        description: '*markdown* formatted _description_',
-        features: [{description: '*markdown* feature description'}],
-        author: 'Morty',
-        noun: 'Installation',
-        issue_url: 'http://example.com/integration_issue_url',
-        source_url: 'http://example.com/integration_source_url',
-        aspects: {
-          alerts: [
-            {
-              type: 'warning',
-              text: 'This is a an alert example',
-            },
-          ],
-        },
-      },
-      ...params,
-    };
-  },
-
-  JiraIntegrationProvider: params => {
-    return {
-      key: 'jira',
-      name: 'Jira',
-      canAdd: false,
-      config: [],
-      features: [],
-      metadata: {
-        description: '*markdown* formatted Jira _description_',
-        features: [{description: '*markdown* feature description'}],
-        author: 'Rick',
-        noun: 'Instance',
-        issue_url: 'http://example.com/jira_integration_issue_url',
-        source_url: 'http://example.com/jira_integration_source_url',
-        aspects: {
-          externalInstall: {
-            url: 'http://jira.com',
-            buttonText: 'Visit Jira',
-            noticeText: 'You must visit jira to install the integration',
-          },
-        },
-      },
-      ...params,
-    };
-  },
-
-  GitHubIntegration: params => {
-    return {
-      domainName: 'github.com/test-integration',
-      icon: 'http://example.com/integration_icon.png',
-      id: '1',
-      name: 'Test Integration',
-      provider: {
-        name: 'GitHub',
-        key: 'github',
-        canAdd: true,
-        features: [],
-      },
-      projects: [],
-      configOrganization: [],
-      configData: {},
-      ...params,
-    };
-  },
-
-  JiraIntegration: params => {
-    return {
-      domainName: 'jira.com/test-integration',
-      icon: 'http://jira.example.com/integration_icon.png',
-      id: '2',
-      name: 'Jira Test Integration',
-      provider: {
-        name: 'Jira',
-        key: 'jira',
-        canAdd: true,
-        features: [],
-      },
-      projects: [],
-      configOrganization: [],
-      configData: {},
-      ...params,
-    };
-  },
-
-  VstsIntegrationProvider: params => {
-    return {
-      key: 'vsts',
-      name: 'VSTS',
-      canAdd: true,
-      config: [],
-      features: [],
-      metadata: {
-        description: '*markdown* formatted VSTS _description_',
-        features: [{description: '*markdown* feature description'}],
-        author: 'Frank',
-        noun: 'Instance',
-        issue_url: 'http://example.com/vsts_issue_url',
-        source_url: 'http://example.com/vsts_source_url',
-        aspects: {},
-      },
-      ...params,
-    };
+    return Object.values(fixtures.Authenticators()).map(x => x());
   },
 
-  Group: params => {
-    let project = TestStubs.Project();
-    return {
-      id: '1',
-      stats: {
-        '24h': [[1517281200, 2], [1517310000, 1]],
-        '30d': [[1514764800, 1], [1515024000, 122]],
-      },
-      project: {
-        id: project.id,
-        slug: project.slug,
-      },
-      tags: [],
-      assignedTo: null,
-      ...params,
-    };
-  },
-
-  Incident: params => ({
-    id: '1',
-    title: 'Test Incident',
-    updates: ['First Update', 'Second Update'],
-    url: 'https://status.sentry.io',
-  }),
-
-  Member: params => ({
-    id: '1',
-    email: 'sentry1@test.com',
-    name: 'Sentry 1 Name',
-    role: 'member',
-    roleName: 'Member',
-    pending: false,
-    flags: {
-      'sso:linked': false,
-    },
-    user: TestStubs.User(),
-    ...params,
-  }),
-
-  Members: () => [
-    TestStubs.Member(),
-    {
-      id: '2',
-      name: 'Sentry 2 Name',
-      email: 'sentry2@test.com',
-      role: 'member',
-      roleName: 'Member',
-      pending: true,
-      flags: {
-        'sso:linked': false,
-      },
-      user: {
-        id: '2',
-        has2fa: false,
-        name: 'Sentry 2 Name',
-        email: 'sentry2@test.com',
-        username: 'Sentry 2 Username',
-      },
-    },
-    {
-      id: '3',
-      name: 'Sentry 3 Name',
-      email: 'sentry3@test.com',
-      role: 'owner',
-      roleName: 'Owner',
-      pending: false,
-      flags: {
-        'sso:linked': true,
-      },
-      user: {
-        id: '3',
-        has2fa: true,
-        name: 'Sentry 3 Name',
-        email: 'sentry3@test.com',
-        username: 'Sentry 3 Username',
-      },
-    },
-    {
-      id: '4',
-      name: 'Sentry 4 Name',
-      email: 'sentry4@test.com',
-      role: 'owner',
-      roleName: 'Owner',
-      pending: false,
-      flags: {
-        'sso:linked': true,
-      },
-      user: {
-        id: '4',
-        has2fa: true,
-        name: 'Sentry 4 Name',
-        email: 'sentry4@test.com',
-        username: 'Sentry 4 Username',
-      },
-    },
-  ],
-
-  Organization: params => {
-    return {
-      id: '3',
-      slug: 'org-slug',
-      name: 'Organization Name',
-      access: [
-        'org:read',
-        'org:write',
-        'org:admin',
-        'project:read',
-        'project:write',
-        'project:admin',
-        'team:read',
-        'team:write',
-        'team:admin',
-      ],
-      status: {
-        id: 'active',
-        name: 'active',
-      },
-      scrapeJavaScript: true,
-      features: [],
-      onboardingTasks: [],
-      teams: [],
-      projects: [],
-      ...params,
-    };
-  },
-
-  Organizations: params => {
-    return [
-      {
-        id: '1',
-        name: 'test 1',
-        slug: 'test 1',
-        require2FA: false,
-        status: {
-          id: 'active',
-          name: 'active',
-        },
-        ...params,
-      },
-      {
-        id: '2',
-        name: 'test 2',
-        slug: 'test 2',
-        require2FA: false,
-        status: {
-          id: 'active',
-          name: 'active',
-        },
-        ...params,
-      },
-    ];
-  },
-
-  Plugin: params => {
-    return {
-      author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
-      enabled: false,
-      id: 'amazon-sqs',
-      name: 'Amazon SQS',
-      slug: 'amazon-sqs',
-      version: '8.23.0.dev0',
-      assets: [],
-      hasConfiguration: true,
-      canDisable: true,
-      ...params,
-    };
-  },
-
-  Plugins: () => {
-    return [
-      {
-        author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
-        enabled: false,
-        id: 'amazon-sqs',
-        name: 'Amazon SQS',
-        slug: 'amazon-sqs',
-        version: '8.23.0.dev0',
-        assets: [],
-        hasConfiguration: true,
-        canDisable: true,
-      },
-      {
-        author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
-        enabled: true,
-        id: 'github',
-        name: 'GitHub',
-        slug: 'github',
-        version: '8.23.0.dev0',
-        assets: [],
-        canDisable: false,
-      },
-    ];
-  },
-
-  Project: params => {
-    return {
-      id: '2',
-      slug: 'project-slug',
-      name: 'Project Name',
-      hasAccess: true,
-      isMember: true,
-      isBookmarked: false,
-      teams: [],
-      ...params,
-    };
-  },
-
-  ProjectDetails: params => {
-    return TestStubs.Project({
-      subjectTemplate: '[$project] ${tag:level}: $title',
-      subjectPrefix: '[my-org]',
-      digestsMinDelay: 5,
-      digestsMaxDelay: 60,
-      dataScrubber: false,
-      dataScrubberDefaults: false,
-      scrubIPAddresses: false,
-      resolveAge: 48,
-      sensitiveFields: ['creditcard', 'ssn'],
-      safeFields: ['business-email', 'company'],
-      storeCrashReports: false,
-      allowedDomains: ['example.com', 'https://example.com'],
-      scrapeJavaScript: true,
-      securityToken: 'security-token',
-      securityTokenHeader: 'x-security-header',
-      verifySSL: true,
-      features: [],
-      ...params,
-    });
-  },
-
-  ProjectAlertRule: () => {
-    return {
-      id: '1',
-      name: 'My alert rule',
-      environment: 'staging',
-      conditions: [{name: 'An alert is first seen', id: 'sentry.rules.conditions.1'}],
-      actions: [
-        {name: 'Send a notification to all services', id: 'sentry.rules.actions.notify1'},
-      ],
-    };
-  },
-
-  ProjectAlertRuleConfiguration: () => {
-    return {
-      actions: [
-        {
-          id: 'sentry.rules.actions.notify1',
-          label: 'Send a notification for all services',
-          enabled: true,
-        },
-      ],
-      conditions: [
-        {
-          id: 'sentry.rules.conditions.1',
-          label: 'An event is seen',
-          enabled: true,
-        },
-      ],
-    };
-  },
-
-  ProjectFilters: params => [
-    {
-      active: true,
-      id: 'browser-extensions',
-      name: 'Filter out errors known to be caused by browser extensions',
-      description:
-        'Certain browser extensions will inject inline scripts and are known to cause errors.',
-    },
-    {
-      active: false,
-      id: 'localhost',
-      name: 'Filter out events coming from localhost',
-      description:
-        'This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.',
-    },
-    {
-      active: ['ie_pre_9', 'ie9'],
-      id: 'legacy-browsers',
-      name: 'Filter out known errors from legacy browsers',
-      description:
-        'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.',
-    },
-    {
-      active: false,
-      id: 'web-crawlers',
-      name: 'Filter out known web crawlers',
-      description:
-        'Some crawlers may execute pages in incompatible ways which then cause errors that are unlikely to be seen by a normal user.',
-    },
-  ],
-
-  ProjectKeys: () => {
-    return [
-      {
-        dsn: {
-          secret:
-            'http://188ee45a58094d939428d8585aa6f661:a33bf9aba64c4bbdaf873bb9023b6d2d@dev.getsentry.net:8000/1',
-          minidump:
-            'http://dev.getsentry.net:8000/api/1/minidump?sentry_key=188ee45a58094d939428d8585aa6f661',
-          public: 'http://188ee45a58094d939428d8585aa6f661@dev.getsentry.net:8000/1',
-          csp:
-            'http://dev.getsentry.net:8000/api/1/csp-report/?sentry_key=188ee45a58094d939428d8585aa6f661',
-          security:
-            'http://dev.getsentry.net:8000/api/1/security-report/?sentry_key=188ee45a58094d939428d8585aa6f661',
-        },
-        public: '188ee45a58094d939428d8585aa6f661',
-        secret: 'a33bf9aba64c4bbdaf873bb9023b6d2d',
-        name: 'Natural Halibut',
-        rateLimit: null,
-        projectId: 1,
-        dateCreated: '2018-02-28T07:13:51.087Z',
-        id: '188ee45a58094d939428d8585aa6f661',
-        isActive: true,
-        label: 'Natural Halibut',
-      },
-    ];
-  },
-
-  Repository: params => {
-    return {
-      id: '4',
-      name: 'repo-name',
-      provider: 'github',
-      url: 'https://github.com/example/repo-name',
-      status: 'active',
-      ...params,
-    };
-  },
-
-  Searches: params => [
-    {
-      name: 'Needs Triage',
-      dateCreated: '2017-11-14T02:22:58.026Z',
-      isUserDefault: false,
-      isPrivate: false,
-      query: 'is:unresolved is:unassigned',
-      id: '2',
-      isDefault: true,
-    },
-    {
-      name: 'Unresolved Issues',
-      dateCreated: '2017-11-14T02:22:58.022Z',
-      isUserDefault: true,
-      isPrivate: false,
-      query: 'is:unresolved',
-      id: '1',
-      isDefault: false,
-    },
-  ],
-
-  ShortIdQueryResult: params => {
-    let group = TestStubs.Group({
-      metadata: {
-        type: 'group type',
-        value: 'group description',
-      },
-    });
-    return {
-      organizationSlug: 'org-slug',
-      projectSlug: 'project-slug',
-      groupId: group.id,
-      shortId: 'test-1',
-      group,
-    };
-  },
-
-  Subscriptions: () => {
-    return [
-      {
-        subscribedDate: '2018-01-08T05:14:59.102Z',
-        subscribed: true,
-        listDescription:
-          'Everything you need to know about Sentry features, integrations, partnerships, and launches.',
-        listId: 2,
-        unsubscribedDate: null,
-        listName: 'Product & Feature Updates',
-        email: 'test@sentry.io',
-      },
-      {
-        subscribedDate: null,
-        subscribed: false,
-        listDescription:
-          "Our monthly update on what's new with Sentry and the community.",
-        listId: 1,
-        unsubscribedDate: '2018-01-08T19:31:42.546Z',
-        listName: 'Sentry Newsletter',
-        email: 'test@sentry.io',
-      },
-    ];
-  },
-
-  Tags: () => {
-    return [
-      {key: 'browser', name: 'Browser', canDelete: true},
-      {key: 'device', name: 'Device', canDelete: true},
-      {key: 'url', name: 'URL', canDelete: true},
-      {key: 'environment', name: 'Environment', canDelete: false},
-    ];
-  },
-
-  Team: params => {
-    return {
-      id: '1',
-      slug: 'team-slug',
-      name: 'Team Name',
-      isMember: true,
-      ...params,
-    };
-  },
-
-  Tombstones: params => [
-    {
-      culprit: 'poll(../../sentry/scripts/views.js)',
-      level: 'error',
-      actor: {
-        username: 'billy@sentry.io',
-        emails: [
-          {is_verified: false, id: '28', email: 'test@test.com'},
-          {is_verified: false, id: '17', email: 'billy36@sentry.io'},
-          {is_verified: false, id: '11', email: 'awerawer@awe.com'},
-          {is_verified: true, id: '10', email: 'billy2@sentry.io'},
-          {is_verified: true, id: '5', email: 'billy@sentry.io'},
-        ],
-        isManaged: false,
-        lastActive: '2018-02-21T01:27:52.255Z',
-        identities: [
-          {
-            name: '79684',
-            dateVerified: '2018-02-21T00:52:40.149Z',
-            provider: {id: 'github', name: 'GitHub'},
-            dateSynced: '2018-02-21T00:52:40.149Z',
-            organization: {slug: 'default', name: 'default'},
-            id: '1',
-          },
-        ],
-        id: '1',
-        isActive: true,
-        has2fa: true,
-        name: 'billy vong',
-        avatarUrl:
-          'https://secure.gravatar.com/avatar/7b544e8eb9d08ed777be5aa82121155a?s=32&d=mm',
-        dateJoined: '2018-01-10T00:19:59Z',
-        options: {
-          timezone: 'America/Los_Angeles',
-          seenReleaseBroadcast: true,
-          stacktraceOrder: -1,
-          language: 'en',
-          clock24Hours: false,
-        },
-        avatar: {
-          avatarUuid: '483ed7478a2248d59211f538c2997e0b',
-          avatarType: 'letter_avatar',
-        },
-        lastLogin: '2018-02-14T07:09:37.536Z',
-        permissions: [],
-        email: 'billy@sentry.io',
-      },
-      message:
-        "This is an example JavaScript exception TypeError Object [object Object] has no method 'updateFrom' poll(../../sentry/scripts/views.js)",
-      type: 'error',
-      id: '1',
-      metadata: {
-        type: 'TypeError',
-        value: "Object [object Object] has no method 'updateFrom'",
-      },
-    },
-  ],
-
-  UserDetails: params => ({
-    username: 'billyfirefoxusername@test.com',
-    emails: [
-      {is_verified: false, id: '20', email: 'billyfirefox@test.com2'},
-      {is_verified: true, id: '8', email: 'billyfirefox2@test.com'},
-      {is_verified: false, id: '7', email: 'billyfirefox@test.com'},
-    ],
-    isManaged: false,
-    lastActive: '2018-01-25T21:00:19.946Z',
-    identities: [],
-    id: '4',
-    isActive: true,
-    has2fa: false,
-    name: 'Firefox Billy',
-    avatarUrl:
-      'https://secure.gravatar.com/avatar/5df53e28e63099658c1ba89b8e9a7cf4?s=32&d=mm',
-    authenticators: [],
-    dateJoined: '2018-01-11T00:30:41.366Z',
-    options: {
-      timezone: 'UTC',
-      seenReleaseBroadcast: null,
-      stacktraceOrder: 'default',
-      language: 'en',
-      clock24Hours: false,
-    },
-    avatar: {avatarUuid: null, avatarType: 'letter_avatar'},
-    lastLogin: '2018-01-25T19:57:46.973Z',
-    permissions: [],
-    email: 'billyfirefox@test.com',
-    ...params,
-  }),
-
-  User: params => ({
-    id: '1',
-    username: 'foo@example.com',
-    email: 'foo@example.com',
-    name: 'Foo Bar',
-    isAuthenticated: true,
-    options: {
-      timezone: 'UTC',
-    },
-    hasPasswordAuth: true,
-    flags: {
-      newsletter_consent_prompt: false,
-    },
-    ...params,
-  }),
-
-  UserFeedback: () => ({
-    id: '123',
-    name: 'Lyn',
-    email: 'lyn@sentry.io',
-    comments: 'Something bad happened',
-    issue: TestStubs.Group(),
-  }),
-
   ...fixtures,
 };
-
-// this is very commonly used, so expose it globally
-window.MockApiClient = require.requireMock('app/api').Client;
-
-// default configuration
-ConfigStore.loadInitialData({
-  messages: [],
-  user: TestStubs.User(),
-});
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
index d97db548a7..b12d3be2bc 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
@@ -69,6 +69,7 @@ exports[`ProjectPlugins renders 1`] = `
         }
         canDisable={false}
         enabled={true}
+        hasConfiguration={false}
         id="github"
         name="GitHub"
         params={
