commit 8aa049d77235b905aa0ae0286231bf8f489a525e
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Feb 13 11:31:47 2019 -0800

    Update 2fa alert and tooltip (#12034)

diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
index 99108d167d..774198683d 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx
@@ -1,54 +1,43 @@
 import React from 'react';
 import styled from 'react-emotion';
 
-import PropTypes from 'prop-types';
-import {capitalize} from 'lodash';
-import {t} from 'app/locale';
+import {tct} from 'app/locale';
 import Alert from 'app/components/alert';
 import AsyncComponent from 'app/components/asyncComponent';
+import Cookies from 'js-cookie';
+import ExternalLink from 'app/components/externalLink';
 import space from 'app/styles/space';
 
-const StyledAlert = styled(Alert)`
-  margin: ${space(3)} 0;
-`;
+const PENDING_INVITE = 'pending-invite';
 
 class TwoFactorRequired extends AsyncComponent {
-  static propTypes = {
-    orgsRequire2fa: PropTypes.arrayOf(PropTypes.object).isRequired,
-  };
-
   getEndpoints() {
     return [];
   }
 
   renderBody() {
-    const {orgsRequire2fa} = this.props;
-    if (!orgsRequire2fa.length) {
+    const pendingInvite = Cookies.get(PENDING_INVITE);
+
+    if (!pendingInvite) {
       return null;
     }
 
-    // singular vs plural message
-    const plural = orgsRequire2fa.length > 1;
-    const require = plural ? t('organizations require') : t('organization requires');
-    const organizations = plural ? t('these organizations') : t('this organization');
-
-    const names = orgsRequire2fa.map(({name}) => capitalize(name));
-    const organizationNames = [names.slice(0, -1).join(', '), names.slice(-1)[0]].join(
-      plural ? ' and ' : ''
-    );
-
     return (
-      <StyledAlert className="require-2fa" type="error" icon="icon-circle-exclamation">
-        {t(
-          'The %s %s all members to enable two-factor authentication.' +
-            ' You need to enable two-factor authentication to access projects under %s.',
-          organizationNames,
-          require,
-          organizations
+      <StyledAlert data-test-id="require-2fa" type="error" icon="icon-circle-exclamation">
+        {tct(
+          'You have been invited to an organization that requires [link:two-factor authentication].' +
+            ' Setup two-factor authentication below to join your organization.',
+          {
+            link: <ExternalLink href="https://docs.sentry.io/accounts/require-2fa/" />,
+          }
         )}
       </StyledAlert>
     );
   }
 }
 
+const StyledAlert = styled(Alert)`
+  margin: ${space(3)} 0;
+`;
+
 export default TwoFactorRequired;
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
index 8a2cce48f7..63954da1eb 100644
--- a/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/accountSecurity/index.jsx
@@ -23,10 +23,6 @@ import RemoveConfirm from 'app/views/settings/account/accountSecurity/components
 import PasswordForm from 'app/views/settings/account/passwordForm';
 import recreateRoute from 'app/utils/recreateRoute';
 
-const AuthenticatorName = styled.span`
-  font-size: 1.2em;
-`;
-
 class AccountSecurity extends AsyncView {
   static PropTypes = {
     authenticators: PropTypes.arrayOf(PropTypes.object).isRequired,
@@ -54,14 +50,17 @@ class AccountSecurity extends AsyncView {
     });
   };
 
+  formatOrgSlugs = () => {
+    const {orgsRequire2fa} = this.props;
+    const slugs = orgsRequire2fa.map(({slug}) => slug);
+
+    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(
+      slugs.length > 1 ? ' and ' : ''
+    );
+  };
+
   renderBody() {
-    const {
-      authenticators,
-      orgsRequire2fa,
-      countEnrolled,
-      deleteDisabled,
-      onDisable,
-    } = this.props;
+    const {authenticators, countEnrolled, deleteDisabled, onDisable} = this.props;
     const isEmpty = !authenticators.length;
 
     return (
@@ -80,8 +79,7 @@ class AccountSecurity extends AsyncView {
           }
         />
 
-        {!isEmpty &&
-          countEnrolled == 0 && <TwoFactorRequired orgsRequire2fa={orgsRequire2fa} />}
+        {!isEmpty && countEnrolled == 0 && <TwoFactorRequired />}
 
         <PasswordForm />
 
@@ -159,7 +157,7 @@ class AccountSecurity extends AsyncView {
                         isEnrolled && (
                           <Tooltip
                             title={t(
-                              "Two-factor authentication is required for at least one organization you're a member of."
+                              `Two-factor authentication is required for organization(s): ${this.formatOrgSlugs()}.`
                             )}
                             disabled={!deleteDisabled}
                           >
@@ -192,4 +190,8 @@ class AccountSecurity extends AsyncView {
   }
 }
 
+const AuthenticatorName = styled.span`
+  font-size: 1.2em;
+`;
+
 export default AccountSecurity;
diff --git a/tests/js/spec/views/accountSecurity.spec.jsx b/tests/js/spec/views/accountSecurity.spec.jsx
index cc16bb8848..d4680e10eb 100644
--- a/tests/js/spec/views/accountSecurity.spec.jsx
+++ b/tests/js/spec/views/accountSecurity.spec.jsx
@@ -145,6 +145,19 @@ describe('AccountSecurity', function() {
         .prop('enabled')
     ).toBe(true);
 
+    expect(
+      wrapper
+        .find('RemoveConfirm')
+        .first()
+        .prop('disabled')
+    ).toBe(false);
+    expect(
+      wrapper
+        .find('Tooltip')
+        .first()
+        .prop('disabled')
+    ).toBe(true);
+
     // This will open confirm modal
     wrapper
       .find('Button .icon-trash')
@@ -188,6 +201,10 @@ describe('AccountSecurity', function() {
     );
     expect(wrapper.find('CircleIndicator').prop('enabled')).toBe(true);
 
+    expect(wrapper.find('RemoveConfirm').prop('disabled')).toBe(true);
+    expect(wrapper.find('Tooltip').prop('disabled')).toBe(false);
+    expect(wrapper.find('Tooltip').prop('title')).toContain('test 1 and test 2');
+
     // This will open confirm modal
     wrapper.find('Button .icon-trash').simulate('click');
     // Confirm
diff --git a/tests/js/spec/views/twoFactorRequired.spec.jsx b/tests/js/spec/views/twoFactorRequired.spec.jsx
index 281574a992..459eeb2ae0 100644
--- a/tests/js/spec/views/twoFactorRequired.spec.jsx
+++ b/tests/js/spec/views/twoFactorRequired.spec.jsx
@@ -1,11 +1,13 @@
 import React from 'react';
 import {mount} from 'enzyme';
+import Cookies from 'js-cookie';
 
 import TwoFactorRequired from 'app/views/settings/account/accountSecurity/';
 import AccountSecurityWrapper from 'app/views/settings/account/accountSecurity/accountSecurityWrapper';
 
 const ENDPOINT = '/users/me/authenticators/';
 const ORG_ENDPOINT = '/organizations/';
+const PENDING_INVITE = 'pending-invite';
 
 describe('TwoFactorRequired', function() {
   beforeEach(function() {
@@ -17,7 +19,7 @@ describe('TwoFactorRequired', function() {
     });
     MockApiClient.addMockResponse({
       url: ORG_ENDPOINT,
-      body: TestStubs.Organizations({require2FA: false}),
+      body: TestStubs.Organizations(),
     });
   });
 
@@ -34,20 +36,21 @@ describe('TwoFactorRequired', function() {
       TestStubs.routerContext()
     );
     expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
-    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+    expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(0);
   });
 
-  it('does not render when 2FA is not required, not 2FA enrolled', function() {
+  it('does not render when 2FA is disabled and no pendingInvite cookie', function() {
     const wrapper = mount(
       <AccountSecurityWrapper>
         <TwoFactorRequired />
       </AccountSecurityWrapper>,
       TestStubs.routerContext()
     );
-    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
+    expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(0);
   });
 
-  it('does not render when 2FA is not required, 2FA is enrolled', function() {
+  it('does not render when 2FA is enrolled and no pendingInvite cookie', function() {
     MockApiClient.addMockResponse({
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
@@ -59,10 +62,12 @@ describe('TwoFactorRequired', function() {
       </AccountSecurityWrapper>,
       TestStubs.routerContext()
     );
-    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
+    expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(0);
   });
 
-  it('does not render when 2FA is required, 2FA is enrolled', function() {
+  it('does not render when 2FA is enrolled and has pendingInvite cookie', function() {
+    Cookies.set(PENDING_INVITE, '/accept/5/abcde/');
     MockApiClient.addMockResponse({
       url: ENDPOINT,
       body: [TestStubs.Authenticators().Totp({isEnrolled: true})],
@@ -78,10 +83,13 @@ describe('TwoFactorRequired', function() {
       </AccountSecurityWrapper>,
       TestStubs.routerContext()
     );
-    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(0);
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(0);
+    expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(0);
+    Cookies.remove(PENDING_INVITE);
   });
 
-  it('renders when 2FA is required for multiple orgs, 2FA is not enrolled', function() {
+  it('renders when 2FA is disabled and has pendingInvite cookie', function() {
+    Cookies.set(PENDING_INVITE, '/accept/5/abcde/');
     MockApiClient.addMockResponse({
       url: ORG_ENDPOINT,
       body: TestStubs.Organizations({require2FA: true}),
@@ -93,33 +101,8 @@ describe('TwoFactorRequired', function() {
       </AccountSecurityWrapper>,
       TestStubs.routerContext()
     );
-    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(1);
-    expect(wrapper.find('StyledAlert[className="require-2fa"]').text()).toEqual(
-      expect.stringContaining('Test 1 and Test 2 organizations')
-    );
-  });
-
-  it('renders when 2FA is required for one org, 2FA is not enrolled', function() {
-    MockApiClient.addMockResponse({
-      url: ORG_ENDPOINT,
-      body: [
-        {
-          id: '1',
-          name: 'test 1',
-          require2FA: true,
-        },
-      ],
-    });
-
-    const wrapper = mount(
-      <AccountSecurityWrapper>
-        <TwoFactorRequired />
-      </AccountSecurityWrapper>,
-      TestStubs.routerContext()
-    );
-    expect(wrapper.find('StyledAlert[className="require-2fa"]')).toHaveLength(1);
-    expect(wrapper.find('StyledAlert[className="require-2fa"]').text()).toEqual(
-      expect.stringContaining('Test 1 organization')
-    );
+    expect(wrapper.find('TwoFactorRequired')).toHaveLength(1);
+    expect(wrapper.find('StyledAlert[data-test-id="require-2fa"]')).toHaveLength(1);
+    Cookies.remove(PENDING_INVITE);
   });
 });
