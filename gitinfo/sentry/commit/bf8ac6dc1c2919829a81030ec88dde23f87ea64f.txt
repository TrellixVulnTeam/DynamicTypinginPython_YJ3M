commit bf8ac6dc1c2919829a81030ec88dde23f87ea64f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 12 16:55:24 2013 -0800

    Support project_alert_pct option

diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index ce33f97304..178f97f77f 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -178,3 +178,8 @@ AUTH_PROVIDERS = {
     'trello': ('TRELLO_API_KEY', 'TRELLO_API_SECRET'),
     'bitbucket': ('BITBUCKET_CONSUMER_KEY', 'BITBUCKET_CONSUMER_SECRET'),
 }
+
+
+# Default alerting threshold values
+DEFAULT_ALERT_PROJECT_THRESHOLD = 300  # 300%
+DEFAULT_ALERT_GROUP_THRESHOLD = 1000  # 1000%
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
index 819820d367..2763a78a74 100644
--- a/src/sentry/tasks/check_alerts.py
+++ b/src/sentry/tasks/check_alerts.py
@@ -76,7 +76,16 @@ def check_project_alerts(project_id, when, count, **kwargs):
     and if over a given threshold, create an alert.
     """
     from sentry.constants import MINUTE_NORMALIZATION
-    from sentry.models import ProjectCountByMinute, Alert
+    from sentry.conf import settings
+    from sentry.models import ProjectCountByMinute, ProjectOption, Alert
+
+    try:
+        threshold = ProjectOption.objects.get(project=project_id, key='alert_threshold_pct')
+    except ProjectOption.DoesNotExist:
+        threshold = settings.DEFAULT_ALERT_PROJECT_THRESHOLD
+
+    if not threshold:
+        return
 
     # number of 15 minute intervals to capture
     intervals = 8
@@ -93,16 +102,14 @@ def check_project_alerts(project_id, when, count, **kwargs):
 
     # Bail if we dont have enough data points
     if len(data) != intervals:
-        return False
+        return
 
-    # take a weighted mean, where the oldest value is worth .5 and the newest is 1.0
+    # take a weighted mean, where the oldest value is worth .7 and the newest is 1.0
+    # Note: this math is completely made up, and I make no claim to know how math works
     previous = sum((k * v) for k, v in zip(data, fsteps(0.7, 1.0, intervals))) / intervals / MINUTE_NORMALIZATION
-    threshold = 300
+
     if count / previous * 100 > threshold:
-        # we could raise an alert here!
         Alert.maybe_alert(
             project_id=project_id,
             message='Rate of events per minute increased from %s to %s' % (previous, count),
         )
-        return True
-    return False
