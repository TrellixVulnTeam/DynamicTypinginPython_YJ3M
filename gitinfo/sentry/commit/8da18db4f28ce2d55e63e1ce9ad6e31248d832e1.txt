commit 8da18db4f28ce2d55e63e1ce9ad6e31248d832e1
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Tue Aug 8 12:49:42 2017 -0700

    Additional project filters (#5748)

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 927c05f960..06f7364b71 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -8,7 +8,8 @@ from django.db import IntegrityError, transaction
 from django.utils import timezone
 from rest_framework import serializers, status
 from rest_framework.response import Response
-
+from sentry import features
+from sentry.utils.data_filters import FilterTypes
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.decorators import sudo_required
@@ -53,10 +54,12 @@ def update_project_scenario(runner):
         )
 
 
-def clean_newline_inputs(value):
+def clean_newline_inputs(value, case_insensitive=True):
     result = []
     for v in value.split('\n'):
-        v = v.lower().strip()
+        if case_insensitive:
+            v = v.lower()
+        v = v.strip()
         if v:
             result.append(v)
     return result
@@ -163,8 +166,8 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
         :auth: required
         """
         has_project_write = (
-            (request.auth and request.auth.has_scope('project:write')) or
-            (request.access and request.access.has_scope('project:write'))
+            (request.auth and request.auth.has_scope('project:write'))
+            or (request.access and request.access.has_scope('project:write'))
         )
 
         if has_project_write:
@@ -274,6 +277,33 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                     'sentry:blacklisted_ips',
                     clean_newline_inputs(options['filters:blacklisted_ips'])
                 )
+            if 'filters:{}'.format(FilterTypes.RELEASES) in options:
+                if features.has('projects:additional-data-filters', project, actor=request.user):
+                    project.update_option(
+                        'sentry:{}'.format(FilterTypes.RELEASES),
+                        clean_newline_inputs(options['filters:{}'.format(FilterTypes.RELEASES)])
+                    )
+                else:
+                    return Response(
+                        {
+                            'detail': ['You do not have that feature enabled']
+                        }, status=400
+                    )
+            if 'filters:{}'.format(FilterTypes.ERROR_MESSAGES) in options:
+                if features.has('projects:additional-data-filters', project, actor=request.user):
+                    project.update_option(
+                        'sentry:{}'.format(FilterTypes.ERROR_MESSAGES),
+                        clean_newline_inputs(
+                            options['filters:{}'.format(FilterTypes.ERROR_MESSAGES)],
+                            case_insensitive=False
+                        )
+                    )
+                else:
+                    return Response(
+                        {
+                            'detail': ['You do not have that feature enabled']
+                        }, status=400
+                    )
 
             self.create_audit_entry(
                 request=request,
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 61de0f2670..722a21c0a2 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -13,6 +13,7 @@ from sentry.models import (
     Project, ProjectBookmark, ProjectOption, ProjectPlatform, ProjectStatus, Release, UserOption,
     DEFAULT_SUBJECT_TEMPLATE
 )
+from sentry.utils.data_filters import FilterTypes
 
 STATUS_LABELS = {
     ProjectStatus.VISIBLE: 'active',
@@ -68,7 +69,8 @@ class ProjectSerializer(Serializer):
 
         feature_list = []
         for feature in (
-            'global-events', 'data-forwarding', 'rate-limits', 'custom-filters', 'similarity-view'
+            'global-events', 'data-forwarding', 'rate-limits', 'custom-filters', 'similarity-view',
+            'additional-data-filters',
         ):
             if features.has('projects:' + feature, obj, actor=user):
                 feature_list.append(feature)
@@ -137,6 +139,8 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
             'sentry:default_environment',
             'sentry:reprocessing_active',
             'sentry:blacklisted_ips',
+            'sentry:releases',
+            'sentry:error_messages',
             'feedback:branding',
             'digests:mail:minimum_delay',
             'digests:mail:maximum_delay',
@@ -247,6 +251,11 @@ class DetailedProjectSerializer(ProjectWithTeamSerializer):
                     bool(attrs['options'].get('sentry:reprocessing_active', False)),
                     'filters:blacklisted_ips':
                     '\n'.join(attrs['options'].get('sentry:blacklisted_ips', [])),
+                    'filters:{}'.format(FilterTypes.RELEASES):
+                    '\n'.join(attrs['options'].get('sentry:{}'.format(FilterTypes.RELEASES), [])),
+                    'filters:{}'.format(FilterTypes.ERROR_MESSAGES):
+                    '\n'.
+                    join(attrs['options'].get('sentry:{}'.format(FilterTypes.ERROR_MESSAGES), [])),
                     'feedback:branding':
                     attrs['options'].get('feedback:branding', '1') == '1',
                 },
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index dd5abc215b..863fc26a70 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -723,6 +723,7 @@ SENTRY_FEATURES = {
     'projects:data-forwarding': True,
     'projects:rate-limits': True,
     'projects:custom-filters': False,
+    'projects:additional-data-filters': False,
     'projects:stream-hit-counts': False,
 }
 
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 87b029ad7c..b119f6faa4 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -28,8 +28,12 @@ from time import time
 from sentry import filters
 from sentry.cache import default_cache
 from sentry.constants import (
-    CLIENT_RESERVED_ATTRS, DEFAULT_LOG_LEVEL, LOG_LEVELS_MAP, MAX_TAG_VALUE_LENGTH,
-    MAX_TAG_KEY_LENGTH, VALID_PLATFORMS
+    CLIENT_RESERVED_ATTRS,
+    DEFAULT_LOG_LEVEL,
+    LOG_LEVELS_MAP,
+    MAX_TAG_VALUE_LENGTH,
+    MAX_TAG_KEY_LENGTH,
+    VALID_PLATFORMS,
 )
 from sentry.db.models import BoundedIntegerField
 from sentry.interfaces.base import get_interface, InterfaceValidationError
@@ -41,7 +45,9 @@ from sentry.tasks.store import preprocess_event, \
 from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.csp import is_valid_csp_report
-from sentry.utils.http import is_valid_ip, origin_from_request
+from sentry.utils.http import origin_from_request
+from sentry.utils.data_filters import is_valid_ip, \
+    is_valid_release, is_valid_error_message
 from sentry.utils.strings import decompress
 from sentry.utils.validators import is_float, is_event_id
 
@@ -369,18 +375,31 @@ class ClientApiHelper(object):
         }
 
     def should_filter(self, project, data, ip_address=None):
-        # TODO(dcramer): read filters from options such as:
-        # - ignore errors from spiders/bots
-        # - ignore errors from legacy browsers
-        if ip_address and not is_valid_ip(ip_address, project):
-            return True
+        """
+        returns (result: bool, reason: string or None)
+        Result is True if an event should be filtered
+        The reason for filtering is passed along as a string
+        so that we can store it in metrics
+        """
+        if ip_address and not is_valid_ip(project, ip_address):
+            return (True, 'ip_address')
+
+        release = data.get('release')
+        if release and not is_valid_release(project, release):
+            return (True, 'release_version')
+
+        message_interface = data.get('sentry.interfaces.Message', {})
+        error_message = message_interface.get('formatted', ''
+                                              ) or message_interface.get('message', '')
+        if error_message and not is_valid_error_message(project, error_message):
+            return (True, 'error_message')
 
         for filter_cls in filters.all():
             filter_obj = filter_cls(project)
             if filter_obj.is_enabled() and filter_obj.test(data):
-                return True
+                return (True, 'other_filter')
 
-        return False
+        return (False, )
 
     def validate_data(self, project, data):
         # TODO(dcramer): move project out of the data packet
@@ -827,7 +846,7 @@ class CspApiHelper(ClientApiHelper):
 
     def should_filter(self, project, data, ip_address=None):
         if not is_valid_csp_report(data['sentry.interfaces.Csp'], project):
-            return True
+            return (True, 'invalid_csp')
         return super(CspApiHelper, self).should_filter(project, data, ip_address)
 
     def validate_data(self, project, data):
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 795681c42c..6b3b9721dc 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -25,6 +25,7 @@ default_manager.add('workflow:release-emails', ProjectFeature)  # NOQA
 default_manager.add('projects:sample-events', ProjectFeature)  # NOQA
 default_manager.add('projects:similarity-indexing', ProjectFeature)  # NOQA
 default_manager.add('projects:custom-filters', ProjectFeature)  # NOQA
+default_manager.add('projects:additional-data-filters', ProjectFeature)  # NOQA
 default_manager.add('projects:stream-hit-counts', ProjectFeature)  # NOQA
 
 # expose public api
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index eeab1041c0..2ba74428bb 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -223,7 +223,7 @@ const ProjectFiltersSettingsForm = React.createClass({
     initialData: React.PropTypes.object.isRequired
   },
 
-  mixins: [ApiMixin],
+  mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
     let formData = {};
@@ -285,9 +285,22 @@ const ProjectFiltersSettingsForm = React.createClass({
     );
   },
 
+  renderLinkToGlobWiki() {
+    return (
+      <span>
+        {t('Separate multiple entries with a newline. Allows ')}
+        <a href="https://en.wikipedia.org/wiki/Glob_(programming)">
+          {t('glob pattern matching.')}
+        </a>
+      </span>
+    );
+  },
+
   render() {
     let isSaving = this.state.state === FormState.SAVING;
     let errors = this.state.errors;
+    let features = this.getProjectFeatures();
+
     return (
       <form onSubmit={this.onSubmit} className="form-stacked p-b-1">
         {this.state.state === FormState.ERROR &&
@@ -297,16 +310,6 @@ const ProjectFiltersSettingsForm = React.createClass({
             )}
           </div>}
         <fieldset>
-          <div className="pull-right">
-
-            <button
-              type="submit"
-              className="btn btn-sm btn-primary"
-              disabled={isSaving || !this.state.hasChanged}>
-              {t('Save Changes')}
-            </button>
-
-          </div>
           <h5>{t('Filter errors from these IP addresses:')}</h5>
           <TextareaField
             key="ip"
@@ -317,6 +320,38 @@ const ProjectFiltersSettingsForm = React.createClass({
             error={errors['filters:blacklisted_ips']}
             onChange={this.onFieldChange.bind(this, 'filters:blacklisted_ips')}
           />
+          {features.has('additional-data-filters') &&
+            <div>
+              <h5>{t('Filter errors from these releases:')}</h5>
+              <TextareaField
+                key="release"
+                name="release"
+                help={this.renderLinkToGlobWiki()}
+                placeholder="e.g. 1.* or [!3].[0-9].*"
+                value={this.state.formData['filters:releases']}
+                error={errors['filters:releases']}
+                onChange={this.onFieldChange.bind(this, 'filters:releases')}
+              />
+              <h5>{t('Filter errors by error message:')}</h5>
+              <TextareaField
+                key="errorMessage"
+                name="errorMessage"
+                help={this.renderLinkToGlobWiki()}
+                placeholder="e.g. TypeError* or *: integer division or modulo by zero"
+                value={this.state.formData['filters:error_messages']}
+                error={errors['filters:error_messages']}
+                onChange={this.onFieldChange.bind(this, 'filters:error_messages')}
+              />
+            </div>}
+          <div className="pull-right">
+            <button
+              type="submit"
+              className="btn btn-sm btn-primary"
+              disabled={isSaving || !this.state.hasChanged}>
+              {t('Save Changes')}
+            </button>
+
+          </div>
         </fieldset>
       </form>
     );
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
new file mode 100644
index 0000000000..ad13f185bb
--- /dev/null
+++ b/src/sentry/utils/data_filters.py
@@ -0,0 +1,80 @@
+"""
+sentry.utils.data_filters.py
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+import fnmatch
+import ipaddress
+import six
+
+
+class FilterTypes(object):
+    ERROR_MESSAGES = 'error_messages'
+    RELEASES = 'releases'
+
+
+def is_valid_ip(project, ip_address):
+    """
+    Verify that an IP address is not being blacklisted
+    for the given project.
+    """
+    blacklist = project.get_option('sentry:blacklisted_ips')
+    if not blacklist:
+        return True
+
+    for addr in blacklist:
+        # We want to error fast if it's an exact match
+        if ip_address == addr:
+            return False
+
+        # Check to make sure it's actually a range before
+        try:
+            if '/' in addr and (
+                ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(
+                    six.text_type(addr), strict=False
+                )
+            ):
+                return False
+        except ValueError:
+            # Ignore invalid values here
+            pass
+
+    return True
+
+
+def is_valid_release(project, release):
+    """
+    Verify that a release is not being filtered
+    for the given project.
+    """
+    release = release.lower()
+    invalid_versions = project.get_option('sentry:{}'.format(FilterTypes.RELEASES))
+    if not invalid_versions:
+        return True
+
+    for version in invalid_versions:
+        if fnmatch.fnmatch(release, version.lower()):
+            return False
+
+    return True
+
+
+def is_valid_error_message(project, message):
+    """
+    Verify that an error message is not being filtered
+    for the given project.
+    """
+    message = message.lower()
+    filtered_errors = project.get_option('sentry:{}'.format(FilterTypes.ERROR_MESSAGES))
+    if not filtered_errors:
+        return True
+
+    for error in filtered_errors:
+        if fnmatch.fnmatch(message, error.lower()):
+            return False
+
+    return True
diff --git a/src/sentry/utils/http.py b/src/sentry/utils/http.py
index 64948db947..86b345bede 100644
--- a/src/sentry/utils/http.py
+++ b/src/sentry/utils/http.py
@@ -7,7 +7,6 @@ sentry.utils.http
 """
 from __future__ import absolute_import
 
-import ipaddress
 import six
 
 from collections import namedtuple
@@ -209,35 +208,6 @@ def is_valid_origin(origin, project=None, allowed=None):
     return False
 
 
-def is_valid_ip(ip_address, project):
-    """
-    Verify that an IP address is not being blacklisted
-    for the given project.
-    """
-    blacklist = project.get_option('sentry:blacklisted_ips')
-    if not blacklist:
-        return True
-
-    for addr in blacklist:
-        # We want to error fast if it's an exact match
-        if ip_address == addr:
-            return False
-
-        # Check to make sure it's actually a range before
-        try:
-            if '/' in addr and (
-                ipaddress.ip_address(six.text_type(ip_address)) in ipaddress.ip_network(
-                    six.text_type(addr), strict=False
-                )
-            ):
-                return False
-        except ValueError:
-            # Ignore invalid values here
-            pass
-
-    return True
-
-
 def origin_from_request(request):
     """
     Returns either the Origin or Referer value from the request headers,
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index db45ef5e6d..35e4d993ee 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -332,7 +332,8 @@ class StoreView(APIView):
             sender=type(self),
         )
 
-        if helper.should_filter(project, data, ip_address=remote_addr):
+        should_filter = helper.should_filter(project, data, ip_address=remote_addr)
+        if should_filter[0]:
             tsdb.incr_multi(
                 [
                     (tsdb.models.project_total_received, project.id),
@@ -343,7 +344,7 @@ class StoreView(APIView):
                     (tsdb.models.key_total_blacklisted, key.id),
                 ]
             )
-            metrics.incr('events.blacklisted')
+            metrics.incr('events.blacklisted', tags={'reason': should_filter[1]})
             event_filtered.send_robust(
                 ip=remote_addr,
                 project=project,
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 474b0b040d..3cd0ba5a9e 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -138,8 +138,12 @@ class ProjectUpdateTest(APITestCase):
             'sentry:safe_fields': ['token'],
             'sentry:csp_ignored_sources_defaults': False,
             'sentry:csp_ignored_sources': 'foo\nbar',
+            'filters:blacklisted_ips': '127.0.0.1\n198.51.100.0',
+            'filters:releases': '1.*\n2.1.*',
+            'filters:error_messages': 'TypeError*\n*: integer division by modulo or zero',
         }
-        resp = self.client.put(url, data={'options': options})
+        with self.feature('projects:additional-data-filters', True):
+            resp = self.client.put(url, data={'options': options})
         assert resp.status_code == 200, resp.content
         project = Project.objects.get(id=project.id)
         assert project.get_option('sentry:origins', []) == options['sentry:origins'].split('\n')
@@ -153,6 +157,11 @@ class ProjectUpdateTest(APITestCase):
                                   True) == options['sentry:csp_ignored_sources_defaults']
         assert project.get_option('sentry:csp_ignored_sources',
                                   []) == options['sentry:csp_ignored_sources'].split('\n')
+        assert project.get_option('sentry:blacklisted_ips') == ['127.0.0.1', '198.51.100.0']
+        assert project.get_option('sentry:releases') == ['1.*', '2.1.*']
+        assert project.get_option('sentry:error_messages') == [
+            'TypeError*', '*: integer division by modulo or zero'
+        ]
 
     def test_bookmarks(self):
         project = self.project  # force creation
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 81033a823b..a0f6a07b18 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -15,9 +15,14 @@ from sentry.utils.http import (
     is_valid_origin,
     get_origins,
     absolute_uri,
-    is_valid_ip,
     origin_from_request,
 )
+from sentry.utils.data_filters import (
+    is_valid_ip,
+    is_valid_release,
+    is_valid_error_message,
+    FilterTypes,
+)
 
 
 class AbsoluteUriTest(TestCase):
@@ -239,7 +244,7 @@ class IsValidOriginTestCase(TestCase):
 class IsValidIPTestCase(TestCase):
     def is_valid_ip(self, ip, inputs):
         self.project.update_option('sentry:blacklisted_ips', inputs)
-        return is_valid_ip(ip, self.project)
+        return is_valid_ip(self.project, ip)
 
     def test_not_in_blacklist(self):
         assert self.is_valid_ip('127.0.0.1', [])
@@ -257,6 +262,48 @@ class IsValidIPTestCase(TestCase):
         assert self.is_valid_ip('127.0.0.1', ['lol/bar'])
 
 
+class IsValidReleaseTestCase(TestCase):
+    def is_valid_release(self, value, inputs):
+        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), inputs)
+        return is_valid_release(self.project, value)
+
+    def test_release_not_in_list(self):
+        assert self.is_valid_release('1.2.3', None)
+        assert self.is_valid_release('1.2.3', [])
+        assert self.is_valid_release('1.2.3', ['1.1.1', '1.1.2', '1.2.1'])
+
+    def test_release_match_list(self):
+        assert not self.is_valid_release('1.2.3', ['1.2.3'])
+        assert not self.is_valid_release('1.2.3', ['1.2.*', '1.3.0', '1.3.1'])
+        assert not self.is_valid_release('1.2.3', ['1.3.0', '1.*', '1.3.1'])
+
+
+class IsValidErrorMessageTestCase(TestCase):
+    def is_valid_error_message(self, value, inputs):
+        self.project.update_option('sentry:{}'.format(FilterTypes.ERROR_MESSAGES), inputs)
+        return is_valid_error_message(self.project, value)
+
+    def test_error_class_not_in_list(self):
+        assert self.is_valid_error_message(
+            'ZeroDivisionError: integer division or modulo by zero', None
+        )
+        assert self.is_valid_error_message(
+            'ZeroDivisionError: integer division or modulo by zero', []
+        )
+        assert self.is_valid_error_message(
+            'ZeroDivisionError: integer division or modulo by zero',
+            ['TypeError*', '*: cannot import name*']
+        )
+
+    def test_error_class_match_list(self):
+        assert not self.is_valid_error_message(
+            'ImportError: cannot import name is_valid', ['*: cannot import name*']
+        )
+        assert not self.is_valid_error_message(
+            'ZeroDivisionError: divided by 0', ['ImportError*', 'TypeError*', '*: divided by 0']
+        )
+
+
 class OriginFromRequestTestCase(TestCase):
     def test_nothing(self):
         request = HttpRequest()
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 64da985a9b..6cf108ae3a 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -12,6 +12,7 @@ from sentry.models import ProjectKey
 from sentry.signals import event_accepted, event_dropped, event_filtered
 from sentry.testutils import (assert_mock_called_once_with_partial, TestCase)
 from sentry.utils import json
+from sentry.utils.data_filters import FilterTypes
 
 
 class CspReportViewTest(TestCase):
@@ -127,10 +128,173 @@ class StoreViewTest(TestCase):
         self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
 
     @mock.patch('sentry.coreapi.is_valid_ip', mock.Mock(return_value=False))
-    def test_request_with_backlisted_ip(self):
+    def test_request_with_blacklisted_ip(self):
         resp = self._postWithHeader({})
         assert resp.status_code == 403, (resp.status_code, resp.content)
 
+    @mock.patch('sentry.coreapi.is_valid_release', mock.Mock(return_value=False))
+    def test_request_with_filtered_release(self):
+        body = {
+            "release": "abcdefg",
+            "message": "foo bar",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    @mock.patch('sentry.coreapi.is_valid_error_message', mock.Mock(return_value=False))
+    def test_request_with_filtered_error(self):
+        body = {
+            "release": "abcdefg",
+            "message": "foo bar",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    def test_request_with_invalid_ip(self):
+        self.project.update_option('sentry:blacklisted_ips', ['127.0.0.1'])
+        body = {
+            "release": "abcdefg",
+            "message": "foo bar",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    def test_request_with_invalid_release(self):
+        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['1.3.2'])
+        body = {
+            "release": "1.3.2",
+            "message": "foo bar",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    def test_request_with_short_release_globbing(self):
+        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['1.*'])
+        body = {
+            "release": "1.3.2",
+            "message": "foo bar",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    def test_request_with_longer_release_globbing(self):
+        self.project.update_option('sentry:{}'.format(FilterTypes.RELEASES), ['2.1.*'])
+        body = {
+            "release": "2.1.3",
+            "message": "foo bar",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    def test_request_with_invalid_error_messages(self):
+        self.project.update_option(
+            'sentry:{}'.format(FilterTypes.ERROR_MESSAGES), ['ZeroDivisionError*']
+        )
+        body = {
+            "release": "abcdefg",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+            "sentry.interfaces.Message": {
+                "formatted": "ZeroDivisionError: integer division or modulo by zero",
+                "message": "%s: integer division or modulo by zero",
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
+    def test_request_with_beggining_glob(self):
+        self.project.update_option(
+            'sentry:{}'.format(FilterTypes.ERROR_MESSAGES),
+            ['*: integer division or modulo by zero']
+        )
+        body = {
+            "release": "abcdefg",
+            "sentry.interfaces.User": {
+                "ip_address": "127.0.0.1"
+            },
+            "sentry.interfaces.Http": {
+                "method": "GET",
+                "url": "http://example.com/",
+                "env": {
+                    "REMOTE_ADDR": "127.0.0.1"
+                }
+            },
+            "sentry.interfaces.Message": {
+                "message": "ZeroDivisionError: integer division or modulo by zero",
+                "formatted": "",
+            },
+        }
+        resp = self._postWithHeader(body)
+        assert resp.status_code == 403, (resp.status_code, resp.content)
+
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
     def test_scrubs_ip_address(self, mock_insert_data_to_database):
         self.project.update_option('sentry:scrub_ip_address', True)
@@ -369,7 +533,7 @@ class StoreViewTest(TestCase):
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())
     @mock.patch('sentry.coreapi.ClientApiHelper.should_filter')
     def test_filtered_signal(self, mock_should_filter):
-        mock_should_filter.return_value = True
+        mock_should_filter.return_value = 'ip_address'
 
         mock_event_filtered = Mock()
 
