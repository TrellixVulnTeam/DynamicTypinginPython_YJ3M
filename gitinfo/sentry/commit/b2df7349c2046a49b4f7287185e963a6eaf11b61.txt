commit b2df7349c2046a49b4f7287185e963a6eaf11b61
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Mar 24 20:16:30 2016 -0700

    Leverage honcho for multi-process management in devserver

diff --git a/setup.py b/setup.py
index a6a48ef234..95e2983343 100755
--- a/setup.py
+++ b/setup.py
@@ -69,6 +69,7 @@ IS_LIGHT_BUILD = os.environ.get('SENTRY_LIGHT_BUILD') == '1'
 dev_requires = [
     'Babel',
     'flake8>=2.0,<2.1',
+    'honcho',
     'isort>=4.2.2,<4.3.0',
 ]
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b62d3525df..707ab36561 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -929,8 +929,8 @@ SENTRY_API_RESPONSE_DELAY = 0
 # XXX(dcramer): this doesn't work outside of a source distribution as the
 # webpack.config.js is not part of Sentry's datafiles
 SENTRY_WATCHERS = (
-    [os.path.join(NODE_MODULES_ROOT, '.bin', 'webpack'), '-d', '--watch',
-     "--config={}".format(os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js")))],
+    ('webpack', [os.path.join(NODE_MODULES_ROOT, '.bin', 'webpack'), '-d', '--watch',
+     "--config={}".format(os.path.normpath(os.path.join(PROJECT_ROOT, os.pardir, os.pardir, "webpack.config.js")))]),
 )
 
 # statuspage.io support
diff --git a/src/sentry/runner/commands/devserver.py b/src/sentry/runner/commands/devserver.py
index 04b950d693..f8722c4ff8 100644
--- a/src/sentry/runner/commands/devserver.py
+++ b/src/sentry/runner/commands/devserver.py
@@ -30,14 +30,17 @@ def devserver(reload, watchers, workers, bind):
     from django.conf import settings
     from sentry.services.http import SentryHTTPServer
 
-    # Make sure we don't try and use uwsgi protocol
-    settings.SENTRY_WEB_OPTIONS['protocol'] = 'http'
-
-    # A better log-format for local dev
-    settings.SENTRY_WEB_OPTIONS['log-format'] = '[%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"'
+    uwsgi_overrides = {
+        # Make sure we don't try and use uwsgi protocol
+        'protocol': 'http',
+        # A better log-format for local dev
+        'log-format': '"%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"'
+    }
 
     if reload:
-        settings.SENTRY_WEB_OPTIONS['py-autoreload'] = 1
+        uwsgi_overrides['py-autoreload'] = 1
+
+    server = SentryHTTPServer(host=host, port=port, workers=1, extra_options=uwsgi_overrides)
 
     daemons = []
 
@@ -49,49 +52,34 @@ def devserver(reload, watchers, workers, bind):
             raise click.ClickException('Disable CELERY_ALWAYS_EAGER in your settings file to spawn workers.')
 
         daemons += [
-            ['sentry', 'celery', 'worker', '-l', 'INFO'],
-            ['sentry', 'celery', 'beat', '-l', 'INFO'],
+            ('worker', ['sentry', 'celery', 'worker', '-c', '1', '-l', 'INFO']),
+            ('beat', ['sentry', 'celery', 'beat', '-l', 'INFO']),
         ]
 
     # If we don't need any other daemons, just launch a normal uwsgi webserver
     # and avoid dealing with subprocesses
     if not daemons:
-        click.secho('*** Launching webserver..', bold=True)
-        SentryHTTPServer(host=host, port=port, workers=1).run()
-        return
-
-    from subprocess import Popen
-    cwd = os.path.realpath(os.path.join(settings.PROJECT_ROOT, os.pardir, os.pardir))
-    env = os.environ.copy()
-
-    daemon_list = []
-    server = None
-    try:
-        for daemon in daemons:
-            click.secho('*** Running: {0}'.format(' '.join([os.path.basename(daemon[0])] + daemon[1:])), bold=True)
-            try:
-                daemon_list.append(Popen(daemon, cwd=cwd, env=env))
-            except OSError:
-                raise click.ClickException('{0} not found.'.format(daemon[0]))
-
-        click.secho('*** Launching webserver..', bold=True)
-        server = SentryHTTPServer(
-            host=host,
-            port=port,
-            workers=1,
-        ).run_subprocess(cwd=cwd, env=env)
-        server.wait()
-    finally:
-        if server and server.poll() is None:
-            server.terminate()
-
-            if server.poll() is None:
-                server.kill()
-
-        for daemon in daemon_list:
-            if daemon.poll() is None:
-                daemon.terminate()
-
-        for daemon in daemon_list:
-            if daemon.poll() is None:
-                daemon.wait()
+        return server.run()
+
+    import sys
+    from subprocess import list2cmdline
+    from honcho.manager import Manager
+
+    os.environ['PYTHONUNBUFFERED'] = 'true'
+
+    # Make sure that the environment is prepared before honcho takes over
+    # This sets all the appropriate uwsgi env vars, etc
+    server.prepare_environment()
+    daemons += [
+        ('server', ['sentry', 'start']),
+    ]
+
+    manager = Manager()
+    for name, cmd in daemons:
+        manager.add_process(
+            name, list2cmdline(cmd),
+            quiet=False, env=os.environ.copy()
+        )
+
+    manager.loop()
+    sys.exit(manager.returncode)
diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index f1191bbdba..1b07914853 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -34,7 +34,7 @@ class SentryHTTPServer(Service):
     name = 'http'
 
     def __init__(self, host=None, port=None, debug=False, workers=None,
-                 validate=True):
+                 validate=True, extra_options=None):
         from django.conf import settings
 
         if validate:
@@ -44,6 +44,9 @@ class SentryHTTPServer(Service):
         port = port or settings.SENTRY_WEB_PORT
 
         options = (settings.SENTRY_WEB_OPTIONS or {}).copy()
+        if extra_options is not None:
+            for k, v in extra_options.iteritems():
+                options[k] = v
         options.setdefault('module', 'sentry.wsgi:application')
         options.setdefault('protocol', 'http')
         options.setdefault('auto-procname', True)
@@ -140,10 +143,3 @@ class SentryHTTPServer(Service):
     def run(self):
         self.prepare_environment()
         os.execvp('uwsgi', ('uwsgi',))
-
-    def run_subprocess(self, cwd=None, env=None):
-        from subprocess import Popen
-        if env is None:
-            env = os.environ.copy()
-        self.prepare_environment(env)
-        return Popen(['uwsgi'], cwd=cwd, env=env)
