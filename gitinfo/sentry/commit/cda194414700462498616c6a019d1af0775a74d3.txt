commit cda194414700462498616c6a019d1af0775a74d3
Author: Jess MacQueen <jess@getsentry.com>
Date:   Wed Apr 20 15:21:20 2016 -0700

    add a test for formatData, move EventsPerHour to separate file to make testing easier

diff --git a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
new file mode 100644
index 0000000000..963976f705
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
@@ -0,0 +1,132 @@
+import React from 'react';
+
+import {Link} from 'react-router';
+
+import ApiMixin from '../../mixins/apiMixin';
+import BarChart from '../../components/barChart';
+import LoadingError from '../../components/loadingError';
+import OrganizationState from '../../mixins/organizationState';
+
+import {t} from '../../locale';
+
+
+const EventsPerHour = React.createClass({
+
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    let until = Math.floor(new Date().getTime() / 1000);
+    let since = until - 3600 * 24;
+
+    return {
+      rawOrgData: {},
+      formattedData: null,
+      querySince: since,
+      queryUntil: until,
+      error: false
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  // Use this so there's a standard order for y values and bar classes
+  STAT_OPTS: ['received', 'rejected', 'blacklisted'],
+
+  fetchData() {
+    let statEndpoint = this.getEndpoint();
+
+    let query = {
+      since: this.state.querySince,
+      until: this.state.queryUntil,
+      resolution: '1h',
+    };
+
+    $.when.apply($, this.STAT_OPTS.map(stat => {
+        let deferred = $.Deferred();
+        this.api.request(statEndpoint, {
+          query: Object.assign({stat: stat}, query),
+          success: deferred.resolve.bind(deferred),
+          error: deferred.reject.bind(deferred)
+        });
+        return deferred;
+      }
+    )).done(function() {
+      let rawOrgData = {};
+      for (let i = 0; i < this.STAT_OPTS.length; i++) {
+        rawOrgData[this.STAT_OPTS[i]] = arguments[i][0];
+      }
+      this.setState({
+        rawOrgData: rawOrgData,
+        formattedData: this.formatData(rawOrgData)
+      });
+    }.bind(this)).fail(function() {
+      this.setState({error: true});
+    }.bind(this));
+  },
+
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/stats/`;
+  },
+
+  formatData(rawData) {
+    // Do this grossness to make sure data is zero filled
+    let allXValues = {};
+    let valueLookup = {};
+    this.STAT_OPTS.forEach(stat => {
+      valueLookup[stat] = {};
+      rawData[stat] && rawData[stat].forEach(point => {
+        allXValues[point[0]] = null;
+        valueLookup[stat][point[0]] = point[1];
+      });
+    });
+    allXValues = Object.keys(allXValues);
+
+    let chartData = [];
+    allXValues.forEach(x => {
+      let point = {x: +x, y: []};
+      // convert received --> accepted
+      let acceptedY = valueLookup.received[x] - valueLookup.rejected[x] - valueLookup.blacklisted[x];
+      point.y.push(acceptedY);
+      ['rejected', 'blacklisted'].forEach(stat => {
+        let yVal = valueLookup[stat][x] || 0;
+        point.y.push(yVal);
+      });
+      chartData.push(point);
+    });
+
+    chartData.sort((a, b) => {
+      if (a.x < b.x) {
+        return -1;
+      }
+      if (a.x > b.x) {
+        return 1;
+      }
+      return 0;
+    });
+
+    return chartData;
+  },
+
+  render() {
+    if (this.state.error) {
+      return <LoadingError />;
+    }
+
+    if (!this.state.formattedData) {
+      return null;
+    }
+    let org = this.getOrganization();
+
+    return (
+      <div>
+        <Link className="btn-sidebar-header" to={`/organizations/${org.slug}/stats/`}>{t('View Stats')}</Link>
+        <h6 className="nav-header">{t('Events Per Hour')}</h6>
+          <BarChart points={this.state.formattedData} className="sparkline dashboard-sparkline" barClasses={this.STAT_OPTS} />
+      </div>
+    );
+  },
+});
+
+export default EventsPerHour;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
index 76b68ab970..1fff460588 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
@@ -9,10 +9,9 @@ import {loadStats} from '../actionCreators/projects';
 import GroupStore from '../stores/groupStore';
 import TeamStore from '../stores/teamStore';
 
-import BarChart from '../components/barChart';
 import ActivityFeed from '../components/activity/feed';
+import EventsPerHour from '../components/events/eventsPerHour';
 import IssueList from '../components/issueList';
-import LoadingError from '../components/loadingError';
 import OrganizationHomeContainer from '../components/organizations/homeContainer';
 import OrganizationState from '../mixins/organizationState';
 
@@ -209,124 +208,6 @@ const Activity = React.createClass({
   },
 });
 
-const EPH = React.createClass({
-
-  mixins: [ApiMixin, OrganizationState],
-
-  getInitialState() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24;
-
-    return {
-      rawOrgData: {},
-      formattedData: null,
-      querySince: since,
-      queryUntil: until,
-      error: false
-    };
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  // Use this so there's a standard order for y values and bar classes
-  STAT_OPTS: ['received', 'rejected', 'blacklisted'],
-
-  fetchData() {
-    let statEndpoint = this.getEndpoint();
-
-    let query = {
-      since: this.state.querySince,
-      until: this.state.queryUntil,
-      resolution: '1h',
-    };
-
-    $.when.apply($, this.STAT_OPTS.map(stat => {
-        let deferred = $.Deferred();
-        this.api.request(statEndpoint, {
-          query: Object.assign({stat: stat}, query),
-          success: deferred.resolve.bind(deferred),
-          error: deferred.reject.bind(deferred)
-        });
-        return deferred;
-      }
-    )).done(function() {
-      let rawOrgData = {};
-      for (let i = 0; i < this.STAT_OPTS.length; i++) {
-        rawOrgData[this.STAT_OPTS[i]] = arguments[i][0];
-      }
-      this.setState({
-        rawOrgData: rawOrgData,
-        formattedData: this.formatData(rawOrgData)
-      });
-    }.bind(this)).fail(function() {
-      this.setState({error: true});
-    }.bind(this));
-  },
-
-  getEndpoint() {
-    return `/organizations/${this.props.params.orgId}/stats/`;
-  },
-
-  formatData(rawData) {
-    // Do this grossness to make sure data is zero filled
-    let allXValues = {};
-    let valueLookup = {};
-    this.STAT_OPTS.forEach(stat => {
-      valueLookup[stat] = {};
-      rawData[stat] && rawData[stat].forEach(point => {
-        allXValues[point[0]] = null;
-        valueLookup[stat][point[0]] = point[1];
-      });
-    });
-    allXValues = Object.keys(allXValues);
-
-    let chartData = [];
-    allXValues.forEach(x => {
-      let point = {x: +x, y: []};
-      // convert received --> accepted
-      let acceptedY = valueLookup.received[x] - valueLookup.rejected[x] - valueLookup.blacklisted[x];
-      point.y.push(acceptedY);
-      ['rejected', 'blacklisted'].forEach(stat => {
-        let yVal = valueLookup[stat][x] || 0;
-        point.y.push(yVal);
-      });
-      chartData.push(point);
-    });
-
-    chartData.sort((a, b) => {
-      if (a.x < b.x) {
-        return -1;
-      }
-      if (a.x > b.x) {
-        return 1;
-      }
-      return 0;
-    });
-
-    return chartData;
-  },
-
-  render() {
-    if (this.state.error) {
-      return <LoadingError />;
-    }
-
-    if (!this.state.formattedData) {
-      return null;
-    }
-    let org = this.getOrganization();
-
-    return (
-      <div>
-        <Link className="btn-sidebar-header" to={`/organizations/${org.slug}/stats/`}>{t('View Stats')}</Link>
-        <h6 className="nav-header">{t('Events Per Hour')}</h6>
-          <BarChart points={this.state.formattedData} className="sparkline dashboard-sparkline" barClasses={this.STAT_OPTS} />
-      </div>
-    );
-  },
-});
 
 const OrganizationDashboard = React.createClass({
   mixins: [
@@ -379,7 +260,7 @@ const OrganizationDashboard = React.createClass({
             <Activity {...this.props} />
           </div>
           <div className="col-md-4">
-            <EPH {...this.props}/>
+            <EventsPerHour {...this.props}/>
             <hr />
             <ProjectList {...this.props} teams={this.state.teams} />
           </div>
diff --git a/tests/js/spec/components/eventsPerHour.spec.jsx b/tests/js/spec/components/eventsPerHour.spec.jsx
new file mode 100644
index 0000000000..8bf11bbae2
--- /dev/null
+++ b/tests/js/spec/components/eventsPerHour.spec.jsx
@@ -0,0 +1,18 @@
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import EventsPerHour from 'app/components/events/eventsPerHour';
+
+
+describe('EventsPerHour', function() {
+  const data = {
+    received: [[1461099600, 31734], [1461103200, 36790]],
+    blacklisted: [[1461099600, 0], [1461103200, 0]],
+    rejected: [[1461099600, 2867], [1461103200, 2742]]
+  };
+  describe('formatData()', function() {
+    sinon.stub(EventsPerHour.prototype.__reactAutoBindMap, 'fetchData').returns(null);
+    let eventsPerHour = TestUtils.renderIntoDocument(<EventsPerHour />);
+    expect(eventsPerHour.formatData(data)).to.deep.equal([{x: 1461099600, y: [28867, 2867, 0]},
+                                                          {x: 1461103200, y: [34048, 2742, 0]}]);
+  });
+});
