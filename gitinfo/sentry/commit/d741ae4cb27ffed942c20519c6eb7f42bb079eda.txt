commit d741ae4cb27ffed942c20519c6eb7f42bb079eda
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon May 14 14:50:32 2018 -0400

    feat(ownership): Rule parsing checks all rules instead of first match (#8216)
    
    The consequence of this behavior change is that now we don't exit on the
    first match, meaning order is no longer important or significant.

diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
index fcb1077dd4..5c526501b1 100644
--- a/src/sentry/api/endpoints/event_owners.py
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -31,7 +31,7 @@ class EventOwnersEndpoint(ProjectEndpoint):
         # populate event data
         Event.objects.bind_nodes([event], 'data')
 
-        owners, matcher = ProjectOwnership.get_owners(project.id, event.data)
+        owners, rules = ProjectOwnership.get_owners(project.id, event.data)
 
         # For sake of the API, we don't differentiate between
         # the implicit "everyone" and no owners
@@ -44,5 +44,8 @@ class EventOwnersEndpoint(ProjectEndpoint):
                 request.user,
                 ActorSerializer(),
             ),
-            'rule': matcher,
+            # TODO(mattrobenolt): We need to change the API here to return
+            # all rules, just keeping this way currently for API compat
+            'rule': rules[0].matcher if rules else None,
+            'rules': rules or [],
         })
diff --git a/src/sentry/api/endpoints/project_ownership.py b/src/sentry/api/endpoints/project_ownership.py
index fec2ef8851..0ec3213005 100644
--- a/src/sentry/api/endpoints/project_ownership.py
+++ b/src/sentry/api/endpoints/project_ownership.py
@@ -1,12 +1,14 @@
 from __future__ import absolute_import
 
+import six
+
 from rest_framework import serializers
 from rest_framework.response import Response
 from django.utils import timezone
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import ProjectOwnership, resolve_actor, UnknownActor
+from sentry.models import ProjectOwnership, resolve_actors
 
 from sentry.ownership.grammar import parse_rules, dump_schema, ParseError
 
@@ -28,17 +30,16 @@ class ProjectOwnershipSerializer(serializers.Serializer):
 
         schema = dump_schema(rules)
 
+        owners = {o for rule in rules for o in rule.owners}
+        actors = resolve_actors(owners, self.context['ownership'].project_id)
+
         bad_actors = []
-        for rule in rules:
-            for owner in rule.owners:
-                try:
-                    resolve_actor(owner, self.context['ownership'].project_id)
-                except UnknownActor:
-                    if owner.type == 'user':
-                        bad_actors.append(owner.identifier)
-
-                    if owner.type == 'team':
-                        bad_actors.append(u'#{}'.format(owner.identifier))
+        for owner, actor in six.iteritems(actors):
+            if actor is None:
+                if owner.type == 'user':
+                    bad_actors.append(owner.identifier)
+                elif owner.type == 'team':
+                    bad_actors.append(u'#{}'.format(owner.identifier))
 
         if bad_actors:
             raise serializers.ValidationError(
diff --git a/src/sentry/api/fields/actor.py b/src/sentry/api/fields/actor.py
index 721e07896c..ff9fac9fbf 100644
--- a/src/sentry/api/fields/actor.py
+++ b/src/sentry/api/fields/actor.py
@@ -2,20 +2,14 @@ from __future__ import absolute_import, print_function
 
 import six
 
-from collections import defaultdict
+from collections import defaultdict, namedtuple
 from rest_framework import serializers
 
 from sentry.models import User, Team
 from sentry.utils.auth import find_users
 
 
-class Actor(object):
-    def __init__(self, id, type):
-        self.id = id
-        self.type = type
-
-    __slots__ = ['id', 'type']
-
+class Actor(namedtuple('Actor', 'id type')):
     def get_actor_id(self):
         return '%s:%d' % (self.type.__name__.lower(), self.id)
 
@@ -79,20 +73,6 @@ class Actor(object):
             for key, value in actor_dict.items()
         }
 
-    def __eq__(self, other):
-        if type(other) != type(self):
-            return False
-        return (self.id, self.type) == (other.id, other.type)
-
-    def __ne__(self, other):
-        return not self.__eq__(other)
-
-    def __hash__(self):
-        return hash((self.id, self.type))
-
-    def __repr__(self):
-        return '<Actor id=%s, type=%s>' % (six.text_type(self.id), six.text_type(self.type))
-
 
 class ActorField(serializers.WritableField):
     def to_native(self, obj):
diff --git a/src/sentry/models/projectownership.py b/src/sentry/models/projectownership.py
index ff297b714d..3011cd3b4a 100644
--- a/src/sentry/models/projectownership.py
+++ b/src/sentry/models/projectownership.py
@@ -1,8 +1,11 @@
 from __future__ import absolute_import
 
+import operator
+
 from jsonfield import JSONField
 
 from django.db import models
+from django.db.models import Q
 from django.utils import timezone
 
 from sentry.db.models import Model, sane_repr
@@ -48,54 +51,65 @@ class ProjectOwnership(Model):
                 project_id=project_id,
             )
 
+        rules = []
         if ownership.schema is not None:
             for rule in load_schema(ownership.schema):
                 if rule.test(data):
-                    # This is O(n) to resolve, but should be fine for now
-                    # since we don't even explain that you can use multiple
-                    # let alone a number that would be potentially abusive.
-                    owners = []
-                    for o in rule.owners:
-                        try:
-                            owners.append(resolve_actor(o, project_id))
-                        except UnknownActor:
-                            continue
-                    return owners, rule.matcher
+                    rules.append(rule)
 
-        owners = cls.Everyone if ownership.fallthrough else []
-        return owners, None
+        if not rules:
+            return cls.Everyone if ownership.fallthrough else [], None
 
+        owners = {o for rule in rules for o in rule.owners}
 
-class UnknownActor(Exception):
-    pass
+        return filter(None, resolve_actors(owners, project_id).values()), rules
 
 
-def resolve_actor(owner, project_id):
-    """ Convert an Owner object into an Actor """
+def resolve_actors(owners, project_id):
+    """ Convert a list of Owner objects into a dictionary
+    of {Owner: Actor} pairs. Actors not identified are returned
+    as None. """
     from sentry.api.fields.actor import Actor
+    from sentry.ownership.grammar import Owner
     from sentry.models import User, Team
 
-    if owner.type == 'user':
-        try:
-            user_id = User.objects.filter(
-                email__iexact=owner.identifier,
-                is_active=True,
-                sentry_orgmember_set__organizationmemberteam__team__projectteam__project_id=project_id,
-            ).values_list('id', flat=True)[0]
-        except IndexError:
-            raise UnknownActor
+    if not owners:
+        return []
 
-        return Actor(user_id, User)
+    users, teams = [], []
 
-    if owner.type == 'team':
-        try:
-            team_id = Team.objects.filter(
+    owners_to_actors = {o: None for o in owners}
+
+    for owner in owners:
+        if owner.type == 'user':
+            users.append(owner)
+        elif owner.type == 'team':
+            teams.append(owner)
+
+    actors = []
+    if users:
+        actors.extend([
+            ('user', email, Actor(u_id, User))
+            for u_id, email in User.objects.filter(
+                reduce(
+                    operator.or_,
+                    [Q(email__iexact=o.identifier) for o in users]
+                ),
+                is_active=True,
+                sentry_orgmember_set__organizationmemberteam__team__projectteam__project_id=project_id,
+            ).values_list('id', 'email')
+        ])
+
+    if teams:
+        actors.extend([
+            ('team', slug, Actor(t_id, Team))
+            for t_id, slug in Team.objects.filter(
+                slug__in=[o.identifier for o in teams],
                 projectteam__project_id=project_id,
-                slug=owner.identifier,
-            ).values_list('id', flat=True)[0]
-        except IndexError:
-            raise UnknownActor
+            ).values_list('id', 'slug')
+        ])
 
-        return Actor(team_id, Team)
+    for type, identifier, actor in actors:
+        owners_to_actors[Owner(type, identifier)] = actor
 
-    raise TypeError('Unknown actor type: %r' % owner.type)
+    return owners_to_actors
diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index 1eac96e75d..2a20a5b6c6 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -179,7 +179,12 @@ class OwnershipVisitor(NodeVisitor):
 
     def visit_owner(self, node, children):
         _, is_team, pattern = children
-        return Owner('team' if is_team else 'user', pattern)
+        type = 'team' if is_team else 'user'
+        # User emails are case insensitive, so coerce them
+        # to lowercase, so they can be de-duped, etc.
+        if type == 'user':
+            pattern = pattern.lower()
+        return Owner(type, pattern)
 
     def visit_team_prefix(self, node, children):
         return bool(children)
diff --git a/tests/sentry/models/test_projectownership.py b/tests/sentry/models/test_projectownership.py
index f6a330a9a4..da0b055860 100644
--- a/tests/sentry/models/test_projectownership.py
+++ b/tests/sentry/models/test_projectownership.py
@@ -7,27 +7,37 @@ from sentry.ownership.grammar import Rule, Owner, Matcher, dump_schema
 
 
 class ProjectOwnershipTestCase(TestCase):
+    def assert_ownership_equals(self, o1, o2):
+        assert (
+            sorted(o1[0]) == sorted(o2[0]) and
+            sorted(o1[1]) == sorted(o2[1])
+        )
+
     def test_get_owners_default(self):
         assert ProjectOwnership.get_owners(self.project.id, {}) == (ProjectOwnership.Everyone, None)
 
     def test_get_owners_basic(self):
-        matcher = Matcher('path', '*.py')
+        rule_a = Rule(
+            Matcher('path', '*.py'), [
+                Owner('team', self.team.slug),
+            ])
+
+        rule_b = Rule(
+            Matcher('path', 'src/*'), [
+                Owner('user', self.user.email),
+            ])
 
         ProjectOwnership.objects.create(
             project_id=self.project.id,
-            schema=dump_schema([
-                Rule(matcher, [
-                    Owner('user', self.user.email),
-                    Owner('team', self.team.slug),
-                ]),
-            ]),
+            schema=dump_schema([rule_a, rule_b]),
             fallthrough=True,
         )
 
         # No data matches
         assert ProjectOwnership.get_owners(self.project.id, {}) == (ProjectOwnership.Everyone, None)
 
-        assert ProjectOwnership.get_owners(
+        # Match only rule_a
+        self.assert_ownership_equals(ProjectOwnership.get_owners(
             self.project.id, {
                 'sentry.interfaces.Stacktrace': {
                     'frames': [{
@@ -35,7 +45,29 @@ class ProjectOwnershipTestCase(TestCase):
                     }]
                 }
             }
-        ) == ([Actor(self.user.id, User), Actor(self.team.id, Team)], matcher)
+        ), ([Actor(self.team.id, Team)], [rule_a]))
+
+        # Match only rule_b
+        self.assert_ownership_equals(ProjectOwnership.get_owners(
+            self.project.id, {
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'filename': 'src/thing.txt',
+                    }]
+                }
+            }
+        ), ([Actor(self.user.id, User)], [rule_b]))
+
+        # Matches both rule_a and rule_b
+        self.assert_ownership_equals(ProjectOwnership.get_owners(
+            self.project.id, {
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'filename': 'src/foo.py',
+                    }]
+                }
+            }
+        ), ([Actor(self.user.id, User), Actor(self.team.id, Team)], [rule_a, rule_b]))
 
         assert ProjectOwnership.get_owners(
             self.project.id, {
diff --git a/tests/sentry/ownership/test_grammar.py b/tests/sentry/ownership/test_grammar.py
index 8c9d315e85..e85a50f822 100644
--- a/tests/sentry/ownership/test_grammar.py
+++ b/tests/sentry/ownership/test_grammar.py
@@ -7,7 +7,7 @@ from sentry.ownership.grammar import (
 
 fixture_data = """
 # cool stuff comment
-*.js                    #frontend m@robenolt.com
+*.js                    #frontend m@ROBENOLT.com
 # good comment
 
 
