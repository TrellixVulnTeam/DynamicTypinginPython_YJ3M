commit 416775ecf3e11562ccf71426a570f8d6e71f0c00
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Oct 2 16:08:19 2018 -0500

    fix(github): Show more options for default repo list (#9807)
    
    * fix(github): Show more options for default repo list

diff --git a/src/sentry/integrations/github/issues.py b/src/sentry/integrations/github/issues.py
index 3932069fbd..8aff71ddb0 100644
--- a/src/sentry/integrations/github/issues.py
+++ b/src/sentry/integrations/github/issues.py
@@ -50,6 +50,15 @@ class GitHubIssueBasic(IssueBasicMixin):
 
         params = kwargs.get('params', {})
         default_repo = params.get('repo', repo_choices[0][0])
+
+        # If a repo has been selected outside of the default 100-limit list of
+        # repos, stick it onto the front of the list so that it can be
+        # selected.
+        try:
+            next(True for r in repo_choices if r[0] == default_repo)
+        except StopIteration:
+            repo_choices.insert(0, (default_repo, default_repo.split('/')[1]))
+
         assignees = self.get_allowed_assignees(default_repo)
 
         org = group.organization
@@ -63,7 +72,7 @@ class GitHubIssueBasic(IssueBasicMixin):
                 'label': 'GitHub Repository',
                 'type': 'select',
                 'default': default_repo,
-                'defaultLabel': default_repo.split('/')[1],
+                'choices': repo_choices,
                 'url': autocomplete_url,
                 'updatesForm': True,
                 'required': True,
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
index 958d785dd8..f9d7bef5b8 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueActions.jsx
@@ -105,13 +105,9 @@ class ExternalIssueForm extends AsyncComponent {
   };
 
   getOptions = (field, input) => {
-    if (!input && field.default && field.defaultLabel) {
-      return Promise.resolve({
-        options: [{value: field.default, label: field.defaultLabel}],
-      });
-    }
     if (!input) {
-      return Promise.resolve([]);
+      const options = (field.choices || []).map(([value, label]) => ({value, label}));
+      return Promise.resolve({options});
     }
 
     let query = queryString.stringify({
diff --git a/tests/sentry/integrations/github/test_issues.py b/tests/sentry/integrations/github/test_issues.py
index b1281280d2..dec29d214d 100644
--- a/tests/sentry/integrations/github/test_issues.py
+++ b/tests/sentry/integrations/github/test_issues.py
@@ -151,6 +151,44 @@ class GitHubIssueBasicTest(TestCase):
         request = responses.calls[1].request
         assert request.headers['Authorization'] == 'token token_1'
 
+    @responses.activate
+    @patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    def test_repo_dropdown_choices(self, mock_get_jwt):
+        group = self.create_group()
+        self.create_event(group)
+
+        responses.add(
+            responses.POST,
+            'https://api.github.com/installations/github_external_id/access_tokens',
+            json={'token': 'token_1', 'expires_at': '2018-10-11T22:14:10Z'}
+        )
+
+        responses.add(
+            responses.GET,
+            'https://api.github.com/repos/getsentry/sentry/assignees',
+            json=[{'login': 'MeredithAnya'}]
+        )
+
+        responses.add(
+            responses.GET,
+            'https://api.github.com/installation/repositories',
+            json={'repositories': [{'full_name': 'getsentry/sentry', 'name': 'sentry'}]}
+        )
+
+        resp = self.integration.get_create_issue_config(group=self.group)
+        assert resp[0]['choices'] == [(u'getsentry/sentry', u'sentry')]
+
+        responses.add(
+            responses.GET,
+            'https://api.github.com/repos/getsentry/hello/assignees',
+            json=[{'login': 'MeredithAnya'}]
+        )
+
+        data = {'params': {'repo': 'getsentry/hello'}}
+        resp = self.integration.get_create_issue_config(group=self.group, **data)
+        assert resp[0]['choices'] == [(u'getsentry/hello', u'hello'),
+                                      (u'getsentry/sentry', u'sentry')]
+
     @responses.activate
     @patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
     def after_link_issue(self, mock_get_jwt):
