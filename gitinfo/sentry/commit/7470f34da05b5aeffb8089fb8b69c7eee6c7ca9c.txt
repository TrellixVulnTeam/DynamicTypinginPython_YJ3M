commit 7470f34da05b5aeffb8089fb8b69c7eee6c7ca9c
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Apr 16 17:16:58 2018 -0500

    feat: Support searches that combine Environment and Release:latest (#8054)
    
    * feat: Support searches that combine Environment and Release:latest
    
    This also removes all current usages of the special `EMPTY` sentinel.
    Release parsing now happens inside the search backend because the
    hydrated environment object is available there.

diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 12e5cac15e..c8147290e7 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -11,7 +11,6 @@ from __future__ import absolute_import
 from sentry.utils.services import Service
 
 ANY = object()
-EMPTY = object()
 
 
 class SearchBackend(Service):
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index a83669fb6a..1ef8817f8b 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -183,6 +183,26 @@ def assigned_to_filter(queryset, user, project):
     )
 
 
+def get_latest_release(project, environment):
+    from sentry.models import Release
+
+    release_qs = Release.objects.filter(
+        organization_id=project.organization_id,
+        projects=project,
+    )
+
+    if environment is not None:
+        release_qs = release_qs.filter(
+            releaseprojectenvironment__environment__id=environment.id
+        )
+
+    return release_qs.extra(select={
+        'sort': 'COALESCE(date_released, date_added)',
+    }).order_by('-sort').values_list(
+        'version', flat=True
+    )[:1].get()
+
+
 class DjangoSearchBackend(SearchBackend):
     def query(self, project, tags=None, environment=None, sort_by='date', limit=100,
               cursor=None, count_hits=False, paginator_options=None, **parameters):
@@ -195,6 +215,16 @@ class DjangoSearchBackend(SearchBackend):
         if tags is None:
             tags = {}
 
+        try:
+            if tags.get('sentry:release') == 'latest':
+                tags['sentry:release'] = get_latest_release(project, environment)
+
+            if parameters.get('first_release') == 'latest':
+                parameters['first_release'] = get_latest_release(project, environment)
+        except Release.DoesNotExist:
+            # no matches could possibly be found from this point on
+            return Paginator(Group.objects.none()).get_result()
+
         group_queryset = QuerySetBuilder({
             'query': CallbackCondition(
                 lambda queryset, query: queryset.filter(
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 611d89c626..c49d94bce5 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -8,8 +8,8 @@ from django.db import DataError
 from django.utils import timezone
 
 from sentry.constants import STATUS_CHOICES
-from sentry.models import EventUser, Release, User
-from sentry.search.base import ANY, EMPTY
+from sentry.models import EventUser, User
+from sentry.search.base import ANY
 from sentry.utils.auth import find_users
 
 
@@ -17,22 +17,6 @@ class InvalidQuery(Exception):
     pass
 
 
-def parse_release(project, value):
-    # TODO(dcramer): add environment support
-    if value == 'latest':
-        value = Release.objects.filter(
-            organization_id=project.organization_id,
-            projects=project,
-        ).extra(select={
-            'sort': 'COALESCE(date_released, date_added)',
-        }).order_by('-sort').values_list(
-            'version', flat=True
-        ).first()
-        if value is None:
-            return EMPTY
-    return value
-
-
 def get_user_tag(project, key, value):
     # TODO(dcramer): do something with case of multiple matches
     try:
@@ -364,9 +348,9 @@ def parse_query(project, query, user):
             elif key == 'subscribed':
                 results['subscribed_by'] = parse_user_value(value, user)
             elif key in ('first-release', 'firstRelease'):
-                results['first_release'] = parse_release(project, value)
+                results['first_release'] = value
             elif key == 'release':
-                results['tags']['sentry:release'] = parse_release(project, value)
+                results['tags']['sentry:release'] = value
             elif key == 'dist':
                 results['tags']['sentry:dist'] = value
             elif key == 'user':
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 5fa9f9ab1c..9156de76a5 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -573,7 +573,7 @@ class LegacyTagStorage(TagStorage):
 
     def get_group_ids_for_search_filter(
             self, project_id, environment_id, tags, candidates=None, limit=1000):
-        from sentry.search.base import ANY, EMPTY
+        from sentry.search.base import ANY
         # Django doesnt support union, so we limit results and try to find
         # reasonable matches
 
@@ -587,10 +587,7 @@ class LegacyTagStorage(TagStorage):
         # for each remaining tag, find matches contained in our
         # existing set, pruning it down each iteration
         for k, v in tag_lookups:
-            if v is EMPTY:
-                return None
-
-            elif v != ANY:
+            if v != ANY:
                 base_qs = GroupTagValue.objects.filter(
                     key=k,
                     value=v,
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index fec3ca8a13..b7b4b3097d 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -390,12 +390,9 @@ class SnubaTagStorage(TagStorage):
 
     # Search
     def get_group_ids_for_search_filter(self, project_id, environment_id, tags):
-        from sentry.search.base import ANY, EMPTY
+        from sentry.search.base import ANY
+
         start, end = self.get_time_range()
-        # Any EMPTY value means there can be no results for this query so
-        # return an empty list immediately.
-        if any(val == EMPTY for _, val in six.iteritems(tags)):
-            return []
 
         filters = {
             'environment': [environment_id],
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index 0e6fea2c63..b929eb002a 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -796,7 +796,7 @@ class V2TagStorage(TagStorage):
 
     def get_group_ids_for_search_filter(
             self, project_id, environment_id, tags, candidates=None, limit=1000):
-        from sentry.search.base import ANY, EMPTY
+        from sentry.search.base import ANY
         # Django doesnt support union, so we limit results and try to find
         # reasonable matches
 
@@ -810,10 +810,7 @@ class V2TagStorage(TagStorage):
         # for each remaining tag, find matches contained in our
         # existing set, pruning it down each iteration
         for k, v in tag_lookups:
-            if v is EMPTY:
-                return None
-
-            elif v != ANY:
+            if v != ANY:
                 base_qs = GroupTagValue.objects.filter(
                     project_id=project_id,
                     _key__key=k,
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 00b008b9d3..9aad17d779 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -11,10 +11,11 @@ from django.conf import settings
 from sentry import tagstore
 from sentry.event_manager import ScoreClause
 from sentry.models import (
-    Environment, Event, GroupAssignee, GroupBookmark, GroupEnvironment, GroupStatus, GroupSubscription
+    Environment, Event, GroupAssignee, GroupBookmark, GroupEnvironment, GroupStatus,
+    GroupSubscription, Release, ReleaseEnvironment, ReleaseProjectEnvironment
 )
 from sentry.search.base import ANY
-from sentry.search.django.backend import DjangoSearchBackend
+from sentry.search.django.backend import DjangoSearchBackend, get_latest_release
 from sentry.tagstore.v2.backend import AGGREGATE_ENVIRONMENT_ID
 from sentry.testutils import TestCase
 
@@ -711,3 +712,58 @@ class DjangoSearchBackendTest(TestCase):
             subscribed_by=self.user,
         )
         assert set(results) == set([])
+
+    def test_parse_release_latest(self):
+        with pytest.raises(Release.DoesNotExist):
+            # no releases exist period
+            environment = None
+            result = get_latest_release(self.project, environment)
+
+        old = Release.objects.create(
+            organization_id=self.project.organization_id,
+            version='old'
+        )
+        old.add_project(self.project)
+
+        new_date = old.date_added + timedelta(minutes=1)
+        new = Release.objects.create(
+            version='new-but-in-environment',
+            organization_id=self.project.organization_id,
+            date_released=new_date,
+        )
+        new.add_project(self.project)
+        ReleaseEnvironment.get_or_create(
+            project=self.project,
+            release=new,
+            environment=self.environment,
+            datetime=new_date,
+        )
+        ReleaseProjectEnvironment.get_or_create(
+            project=self.project,
+            release=new,
+            environment=self.environment,
+            datetime=new_date,
+        )
+
+        newest = Release.objects.create(
+            version='newest-overall',
+            organization_id=self.project.organization_id,
+            date_released=old.date_added + timedelta(minutes=5),
+        )
+        newest.add_project(self.project)
+
+        # latest overall (no environment filter)
+        environment = None
+        result = get_latest_release(self.project, environment)
+        assert result == newest.version
+
+        # latest in environment
+        environment = self.environment
+        result = get_latest_release(self.project, environment)
+        assert result == new.version
+
+        with pytest.raises(Release.DoesNotExist):
+            # environment with no releases
+            environment = self.create_environment()
+            result = get_latest_release(self.project, environment)
+            assert result == new.version
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 1b1a9f6b74..022dac62fd 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -5,7 +5,7 @@ import mock
 from datetime import datetime, timedelta
 from django.utils import timezone
 
-from sentry.models import EventUser, GroupStatus, Release
+from sentry.models import EventUser, GroupStatus
 from sentry.testutils import TestCase
 from sentry.search.base import ANY
 from sentry.search.utils import parse_query, get_numeric_field_value
@@ -287,19 +287,6 @@ class ParseQueryTest(TestCase):
         result = self.parse_query('first-release:bar')
         assert result == {'first_release': 'bar', 'tags': {}, 'query': ''}
 
-    def test_first_release_latest(self):
-        old = Release.objects.create(organization_id=self.project.organization_id, version='a')
-        old.add_project(self.project)
-        new = Release.objects.create(
-            version='b',
-            organization_id=self.project.organization_id,
-            date_released=old.date_added + timedelta(minutes=1),
-        )
-        new.add_project(self.project)
-
-        result = self.parse_query('first-release:latest')
-        assert result == {'tags': {}, 'first_release': new.version, 'query': ''}
-
     def test_release(self):
         result = self.parse_query('release:bar')
         assert result == {'tags': {'sentry:release': 'bar'}, 'query': ''}
@@ -308,19 +295,6 @@ class ParseQueryTest(TestCase):
         result = self.parse_query('dist:123')
         assert result == {'tags': {'sentry:dist': '123'}, 'query': ''}
 
-    def test_release_latest(self):
-        old = Release.objects.create(organization_id=self.project.organization_id, version='a')
-        old.add_project(self.project)
-        new = Release.objects.create(
-            version='b',
-            organization_id=self.project.organization_id,
-            date_released=old.date_added + timedelta(minutes=1),
-        )
-        new.add_project(self.project)
-
-        result = self.parse_query('release:latest')
-        assert result == {'tags': {'sentry:release': new.version}, 'query': ''}
-
     def test_padded_spacing(self):
         result = self.parse_query('release:bar  foo   bar')
         assert result == {'tags': {'sentry:release': 'bar'}, 'query': 'foo bar'}
