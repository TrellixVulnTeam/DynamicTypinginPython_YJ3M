commit fee7676a37a43ae952fff1c0172b4778472f9c83
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Aug 15 09:26:31 2018 -0700

    fix(integrations): Bitbucket Client Key Verification (#9187)
    
    * made get_integration_from_jwt more general, added postInstallRedirect module, added verify installation view

diff --git a/src/sentry/identity/bitbucket/provider.py b/src/sentry/identity/bitbucket/provider.py
index a95828887a..b5c45468df 100644
--- a/src/sentry/identity/bitbucket/provider.py
+++ b/src/sentry/identity/bitbucket/provider.py
@@ -16,12 +16,10 @@ class BitbucketIdentityProvider(Provider):
 class BitbucketLoginView(PipelineView):
 
     def dispatch(self, request, pipeline):
-        client_key = request.GET.get('clientKey')
-        if client_key is None:
+        jwt = request.GET.get('jwt')
+        if jwt is None:
             return self.redirect(
-                'https://bitbucket.org/site/addons/authorize?descriptor_uri=%s&redirect_uri=%s' % (
+                'https://bitbucket.org/site/addons/authorize?descriptor_uri=%s' % (
                     absolute_uri('/extensions/bitbucket/descriptor/'),
-                    absolute_uri('/extensions/bitbucket/setup/'),
                 ))
-        pipeline.bind_state('bitbucket_client_key', client_key)
         return pipeline.next_step()
diff --git a/src/sentry/integrations/atlassian_connect.py b/src/sentry/integrations/atlassian_connect.py
index e37f878d4c..cceb3605c6 100644
--- a/src/sentry/integrations/atlassian_connect.py
+++ b/src/sentry/integrations/atlassian_connect.py
@@ -39,7 +39,7 @@ def get_query_hash(uri, method, query_params=None):
     return hashlib.sha256(query_string.encode('utf8')).hexdigest()
 
 
-def get_integration_from_jwt(token, path, query_params, method='GET'):
+def get_integration_from_jwt(token, path, provider, query_params, method='GET'):
     # https://developer.atlassian.com/static/connect/docs/latest/concepts/authentication.html
     # Extract the JWT token from the request's jwt query
     # parameter or the authorization header.
@@ -56,14 +56,21 @@ def get_integration_from_jwt(token, path, query_params, method='GET'):
     # by the add-on during the installation handshake
     try:
         integration = Integration.objects.get(
-            provider='jira',
+            provider=provider,
             external_id=issuer,
         )
     except Integration.DoesNotExist:
         raise AtlassianConnectValidationError('No integration found')
     # Verify the signature with the sharedSecret and
     # the algorithm specified in the header's alg field.
-    decoded_verified = jwt.decode(token, integration.metadata['shared_secret'])
+    options = {}
+    # If it's BitBucket, we only need the token + shared secret
+    # it will fail on this: https://github.com/jpadilla/pyjwt/blob/d25c92ca5e9980ca7bc8b31420bf36e3f4a9e3f0/jwt/api_jwt.py#L190
+    # if we try to verify the audience
+    if provider == 'bitbucket':
+        options = {'verify_aud': False}
+
+    decoded_verified = jwt.decode(token, integration.metadata['shared_secret'], options=options)
     # Verify the query has not been tampered by Creating a Query Hash
     # and comparing it against the qsh claim on the verified token.
 
@@ -71,8 +78,9 @@ def get_integration_from_jwt(token, path, query_params, method='GET'):
     if qsh != decoded_verified['qsh']:
         raise AtlassianConnectValidationError('Query hash mismatch')
 
+    raise AtlassianConnectValidationError
     return integration
 
 
-def get_integration_from_request(request):
-    return get_integration_from_jwt(request.GET.get('jwt'), request.path, request.GET)
+def get_integration_from_request(request, provider):
+    return get_integration_from_jwt(request.GET.get('jwt'), request.path, provider, request.GET)
diff --git a/src/sentry/integrations/bitbucket/descriptor.py b/src/sentry/integrations/bitbucket/descriptor.py
index eac1ef94f1..d2080476b2 100644
--- a/src/sentry/integrations/bitbucket/descriptor.py
+++ b/src/sentry/integrations/bitbucket/descriptor.py
@@ -30,6 +30,14 @@ class BitbucketDescriptorEndpoint(Endpoint):
                     'uninstalled': '/extensions/bitbucket/uninstalled/'
                 },
                 'scopes': scopes,
-                'contexts': ['account']
+                'contexts': ['account'],
+                # When the user is redirected the URL will become:
+                # https://sentry.io/extensions/bitbucket/setup/?jwt=1212121212
+                'modules': {
+                    'postInstallRedirect': {
+                        'url': '/extensions/bitbucket/setup/',
+                        'key': 'redirect'
+                    }
+                }
             }
         )
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index e74969fa0a..03181426f6 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -1,8 +1,9 @@
 from __future__ import absolute_import
 
 from sentry.integrations import Integration, IntegrationFeatures, IntegrationProvider, IntegrationMetadata
+from sentry.integrations.atlassian_connect import AtlassianConnectValidationError, get_integration_from_request
 from sentry.integrations.repositories import RepositoryMixin
-from sentry.pipeline import NestedPipelineView
+from sentry.pipeline import NestedPipelineView, PipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from django.utils.translation import ugettext_lazy as _
 
@@ -95,7 +96,7 @@ class BitbucketIntegrationProvider(IntegrationProvider):
             pipeline_cls=IdentityProviderPipeline,
             config=identity_pipeline_config,
         )
-        return [identity_pipeline_view]
+        return [identity_pipeline_view, VerifyInstallation()]
 
     def post_install(self, integration, organization):
         repos = Repository.objects.filter(
@@ -111,11 +112,10 @@ class BitbucketIntegrationProvider(IntegrationProvider):
             repo.update(integration_id=integration.id)
 
     def build_integration(self, state):
-        # TODO(LB): Add verification for clientKey
         if state.get('publicKey'):
             principal_data = state['principal']
             return {
-                'provider': 'bitbucket',
+                'provider': self.key,
                 'external_id': state['clientKey'],
                 'name': principal_data['username'],
                 'metadata': {
@@ -129,16 +129,27 @@ class BitbucketIntegrationProvider(IntegrationProvider):
                     'type': principal_data['type'],  # team or user account
                 },
             }
-        return {
-            'provider': 'bitbucket',
-            'external_id': state['identity']['bitbucket_client_key'],
-            'expect_exists': True,
-        }
+        else:
+            return {
+                'provider': self.key,
+                'external_id': state['external_id'],
+                'expect_exists': True,
+            }
 
     def setup(self):
         from sentry.plugins import bindings
         bindings.add(
             'integration-repository.provider',
             BitbucketRepositoryProvider,
-            id='integrations:bitbucket',
+            id='integrations:%s' % self.key,
         )
+
+
+class VerifyInstallation(PipelineView):
+    def dispatch(self, request, pipeline):
+        try:
+            integration = get_integration_from_request(request, BitbucketIntegrationProvider.key)
+        except AtlassianConnectValidationError:
+            return pipeline.error('Unable to verify installation.')
+        pipeline.bind_state('external_id', integration.external_id)
+        return pipeline.next_step()
diff --git a/src/sentry/integrations/jira/configure.py b/src/sentry/integrations/jira/configure.py
index b9bf9a5492..0ae6a7a39b 100644
--- a/src/sentry/integrations/jira/configure.py
+++ b/src/sentry/integrations/jira/configure.py
@@ -37,7 +37,7 @@ class JiraConfigureView(BaseView):
 
     def handle(self, request):
         try:
-            integration = get_integration_from_request(request)
+            integration = get_integration_from_request(request, 'jira')
         except AtlassianConnectValidationError:
             return self.get_response({'error_message': 'Unable to verify installation.'})
 
