commit e854376cad76a49a9e45b39f91310cb8718b132e
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Jan 12 19:26:29 2017 -0800

    use lock when creating a release in hook and api endpoint (#4761)
    
    * use lock when creating a release in hook and api endpoint
    
    * check for existing release within lock
    
    * get not filter
    
    * also use lock in Release.get_or_create and in signal

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index be2b02b12d..503d6c5565 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -11,6 +11,7 @@ from sentry.api.paginator import OffsetPaginator
 from sentry.api.fields.user import UserField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import CommitSerializer, ListField
+from sentry.app import locks
 from sentry.models import Activity, Release
 from sentry.plugins.interfaces.releasehook import ReleaseHook
 from sentry.utils.apidocs import scenario, attach_scenarios
@@ -154,15 +155,24 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
                         version=result['version'],
                     ).first()
                     if not release:
-                        release, created = Release.objects.create(
-                            organization_id=project.organization_id,
-                            version=result['version'],
-                            ref=result.get('ref'),
-                            url=result.get('url'),
-                            owner=result.get('owner'),
-                            date_started=result.get('dateStarted'),
-                            date_released=result.get('dateReleased'),
-                        ), True
+                        lock_key = 'release:%s:%s' % (project.organization_id, result['version'])
+                        lock = locks.get(lock_key, duration=5)
+                        with lock.acquire():
+                            try:
+                                release, created = Release.objects.get(
+                                    version=result['version'],
+                                    organization_id=project.organization_id
+                                ), False
+                            except Release.DoesNotExist:
+                                release, created = Release.objects.create(
+                                    organization_id=project.organization_id,
+                                    version=result['version'],
+                                    ref=result.get('ref'),
+                                    url=result.get('url'),
+                                    owner=result.get('owner'),
+                                    date_started=result.get('dateStarted'),
+                                    date_released=result.get('dateReleased'),
+                                ), True
                     was_released = False
                     release.add_project(project)
 
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index dfa40e7ba4..1eafcbcf54 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -13,6 +13,7 @@ from django.db import models, IntegrityError, transaction
 from django.utils import timezone
 from jsonfield import JSONField
 
+from sentry.app import locks
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
@@ -112,11 +113,20 @@ class Release(Model):
                         version=version
                     ).first()
                     if not release:
-                        release = cls.objects.create(
-                            organization_id=project.organization_id,
-                            version=version,
-                            date_added=date_added
-                        )
+                        lock_key = 'release:%s:%s' % (project.organization_id, version)
+                        lock = locks.get(lock_key, duration=5)
+                        with lock.acquire():
+                            try:
+                                release = cls.objects.get(
+                                    organization_id=project.organization_id,
+                                    version=version
+                                )
+                            except cls.DoesNotExist:
+                                release = cls.objects.create(
+                                    organization_id=project.organization_id,
+                                    version=version,
+                                    date_added=date_added
+                                )
                     release.add_project(project)
 
             # TODO(dcramer): upon creating a new release, check if it should be
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index c2a16dcd22..10f0f5756c 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -15,6 +15,7 @@ import re
 from django.db import transaction
 from django.utils import timezone
 
+from sentry.app import locks
 from sentry.models import (
     Activity, Commit, CommitAuthor, Release, ReleaseCommit, Repository
 )
@@ -44,11 +45,21 @@ class ReleaseHook(object):
                 if release:
                     release.update(**values)
                 else:
-                    release = Release.objects.create(
-                        version=version,
-                        organization_id=self.project.organization_id,
-                        **values
-                    )
+                    lock_key = 'release:%s:%s' % (self.project.organization_id, version)
+                    lock = locks.get(lock_key, duration=5)
+                    with lock.acquire():
+                        try:
+                            release = Release.objects.get(
+                                version=version,
+                                organization_id=self.project.organization_id
+                            )
+                        except Release.DoesNotExist:
+                            release = Release.objects.create(
+                                version=version,
+                                organization_id=self.project.organization_id,
+                                **values
+                            )
+
                 release.add_project(self.project)
 
     # TODO(dcramer): this is being used by the release details endpoint, but
@@ -73,10 +84,19 @@ class ReleaseHook(object):
                     version=version,
                 ).first()
                 if not release:
-                    release = Release.objects.create(
-                        organization_id=project.organization_id,
-                        version=version
-                    )
+                    lock_key = 'release:%s:%s' % (project.organization_id, version)
+                    lock = locks.get(lock_key, duration=5)
+                    with lock.acquire():
+                        try:
+                            release = Release.objects.get(
+                                organization_id=project.organization_id,
+                                version=version
+                            )
+                        except Release.DoesNotExist:
+                            release = Release.objects.create(
+                                organization_id=project.organization_id,
+                                version=version
+                            )
                 release.add_project(project)
 
         with transaction.atomic():
@@ -151,11 +171,20 @@ class ReleaseHook(object):
                 if release:
                     release.update(**values)
                 else:
-                    release = Release.objects.create(
-                        version=version,
-                        organization_id=self.project.organization_id,
-                        **values
-                    )
+                    lock_key = 'release:%s:%s' % (self.project.organization_id, version)
+                    lock = locks.get(lock_key, duration=5)
+                    with lock.acquire():
+                        try:
+                            release = Release.objects.get(
+                                version=version,
+                                organization_id=self.project.organization_id,
+                            )
+                        except Release.DoesNotExist:
+                            release = Release.objects.create(
+                                version=version,
+                                organization_id=self.project.organization_id,
+                                **values
+                            )
                 release.add_project(self.project)
 
         activity = Activity.objects.create(
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 7a1acf5dac..b7070497e0 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import, print_function
 from django.db import transaction
 from django.db.models.signals import post_save
 
+from sentry.app import locks
 from sentry.models import Release, TagValue
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
 
@@ -28,12 +29,21 @@ def ensure_release_exists(instance, created, **kwargs):
             if release:
                 release.update(date_added=instance.first_seen)
             else:
-                release = Release.objects.create(
-                    organization_id=instance.project.organization_id,
-                    version=instance.value,
-                    date_added=instance.first_seen,
-                )
-                instance.update(data={'release_id': release.id})
+                lock_key = 'release:%s:%s' % (instance.project.organization_id, instance.value)
+                lock = locks.get(lock_key, duration=5)
+                with lock.acquire():
+                    try:
+                        release = Release.objects.get(
+                            organization_id=instance.project.organization_id,
+                            version=instance.value,
+                        )
+                    except Release.DoesNotExist:
+                        release = Release.objects.create(
+                            organization_id=instance.project.organization_id,
+                            version=instance.value,
+                            date_added=instance.first_seen,
+                        )
+                        instance.update(data={'release_id': release.id})
             release.add_project(instance.project)
 
 
