commit 744111432564a1cda50a00c1f0dc96d34ae6d396
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 1 21:08:12 2015 -0800

    Break up stream components

diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index bb3a460ad1..2eefa792d2 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -2,455 +2,12 @@
 var React = require("react");
 var $ = require("jquery");
 
-var utils = require("../utils");
-
-var joinClasses = require('react-bootstrap/utils/joinClasses');
 var BarChart = require("./barChart");
 var Count = require("./count");
-var DropdownLink = require("./dropdownLink");
-var MenuItem = require("./menuItem");
-var Modal = require("react-bootstrap/Modal");
-var OverlayMixin = require("react-bootstrap/OverlayMixin");
+var StreamActions = require('./streamActions');
+var StreamFilters = require('./streamFilters');
 var TimeSince = require("./timeSince");
 
-var SearchDropdown = React.createClass({
-  componentDidMount: function(){
-    $('.filter-nav .search-input').focus(function(){
-      $('.search-dropdown').show();
-    }).blur(function(){
-      $('.search-dropdown').hide();
-    });
-  },
-
-  render: function() {
-    return (
-      <div className="search-dropdown" style={{display:"none"}}>
-        <ul className="search-helper search-autocomplete-list">
-          <li className="search-autocomplete-item">
-            <span className="icon icon-tag"></span>
-            <h4>Tag - <span className="search-description">key/value pair associated to an event</span></h4>
-            <p className="search-example">browser:"Chrome 34"</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-toggle"></span>
-            <h4>Status - <span className="search-description">State of an event</span></h4>
-            <p className="search-example">is:resolved, unresolved, muted</p>
-          </li>
-          <li className="search-autocomplete-item">
-            <span className="icon icon-user"></span>
-            <h4>Assigned - <span className="search-description">team member assigned to an event</span></h4>
-            <p className="search-example">assigned:[me|user@example.com]</p>
-          </li>
-        </ul>
-      </div>
-    );
-  }
-});
-
-var SearchBar = React.createClass({
-  propTypes: {
-    query: React.PropTypes.string.isRequired,
-    onQueryChange: React.PropTypes.func.isRequired
-  },
-  onQueryChange: function(event){
-    return this.props.onQueryChange(event.target.value, event);
-  },
-  render: function() {
-    return (
-      <div className="search">
-        <form className="form-horizontal" action="." method="GET">
-          <div>
-            <input type="text" className="search-input form-control"
-                   placeholder="Search for events, users, tags, and everything else."
-                   name="query"
-                   value={this.props.query}
-                   onChange={this.onQueryChange} />
-            <span className="icon-search"></span>
-          </div>
-          <SearchDropdown />
-        </form>
-      </div>
-    );
-  }
-});
-
-var FilterSelectLink = React.createClass({
-  render: function() {
-    var className = this.props.extraClass;
-    className += ' btn btn-default';
-
-    if (this.props.isActive) {
-      className += ' active';
-    }
-
-    var queryString = '?' + this.props.query;
-
-    return (
-      <a href={queryString}
-          className={className}>{this.props.label}</a>
-    );
-  }
-});
-
-var FilterSelect = React.createClass({
-  propTypes: {
-    query: React.PropTypes.string.isRequired,
-    onQueryChange: React.PropTypes.func.isRequired
-  },
-  render: function() {
-    var params = utils.getQueryParams();
-    var activeButton;
-    if (params.bookmarks) {
-      activeButton = 'bookmarks';
-    } else if (params.assigned) {
-      activeButton = 'assigned';
-    } else {
-      activeButton = 'all';
-    }
-
-    return (
-      <div className="filter-nav" ng-controller="ProjectStreamControlsCtrl">
-        <div className="row">
-          <div className="col-sm-4 primary-filters">
-            <div className="btn-group btn-group-justified">
-              <FilterSelectLink label="All Events"
-                                query=""
-                                isActive={activeButton === 'all'}
-                                extraClass="btn-all-events" />
-              <FilterSelectLink label="Bookmarks"
-                                query="bookmarks=1"
-                                isActive={activeButton === 'bookmarks'}
-                                extraClass="btn-middle btn-bookmarks" />
-              <FilterSelectLink label="Assigned"
-                                query="assigned=1"
-                                isActive={activeButton === 'assigned'}
-                                extraClass="btn-assigned" />
-            </div>
-          </div>
-          <div className="col-sm-8">
-            <SearchBar query={this.props.query} onQueryChange={this.props.onQueryChange} />
-          </div>
-        </div>
-      </div>
-    );
-  }
-});
-
-var ActionLink = React.createClass({
-  mixins: [OverlayMixin],
-
-  ALL: -1,
-
-  propTypes: {
-    actionLabel: React.PropTypes.string,
-    aggList: React.PropTypes.array.isRequired,
-    canActionAll: React.PropTypes.bool.isRequired,
-    confirmLabel: React.PropTypes.string,
-    disabled: React.PropTypes.bool,
-    neverConfirm: React.PropTypes.bool,
-    onAction: React.PropTypes.func.isRequired,
-    onlyIfBulk: React.PropTypes.bool,
-    selectAllActive: React.PropTypes.bool.isRequired
-  },
-
-  getDefaultProps: function() {
-    return {
-      confirmLabel: 'Edit',
-      onlyIfBulk: false,
-      neverConfirm: false,
-      disabled: false
-    };
-  },
-
-  getInitialState: function() {
-    return {
-      isModalOpen: false
-    };
-  },
-
-  handleToggle: function() {
-    if (this.props.disabled) {
-      return;
-    }
-    this.setState({
-      isModalOpen: !this.state.isModalOpen
-    });
-  },
-
-  handleActionAll: function(event) {
-    this.props.onAction(ActionLink.ALL, event);
-    this.setState({
-      isModalOpen: false
-    });
-  },
-
-  handleActionSelected: function(event) {
-    this.props.onAction(ActionLink.SELECTED, event);
-    this.setState({
-      isModalOpen: false
-    });
-  },
-
-  defaultActionLabel: function(confirmLabel) {
-    return confirmLabel.toLowerCase() + ' these {count} events';
-  },
-
-  render: function () {
-    var className = this.props.className;
-    if (this.props.disabled) {
-      className += ' disabled';
-    }
-    return (
-      <a className={className} disabled={this.props.disabled} onClick={this.handleToggle}>
-        {this.props.children}
-      </a>
-    );
-  },
-
-  renderOverlay: function() {
-    if (!this.state.isModalOpen) {
-      return <span/>;
-    }
-
-    var selectedAggList = [];
-    for (var i = 0, node; (node = this.props.aggList[i]); i++) {
-      if (node.isSelected === true) {
-        selectedAggList.push(node);
-      }
-    }
-
-    if (selectedAggList.length === 0) {
-      throw new Error('ActionModal rendered without any selected aggregates');
-    }
-
-    var shouldConfirm = true;
-    // if skipConfirm is set we never actually show the modal
-    if (this.props.neverConfirm === true) {
-      shouldConfirm = false;
-    // if onlyIfBulk is set and we've selected a single item, we skip
-    // showing the modal
-    } else if (this.props.onlyIfBulk === true && !this.props.selectAllActive) {
-      shouldConfirm = false;
-    }
-
-    if (!shouldConfirm) {
-      this.handleActionSelected();
-      this.state.isModalOpen = false;
-      return <span />;
-    }
-
-    var confirmLabel = this.props.confirmLabel;
-    var actionLabel = this.props.actionLabel || this.defaultActionLabel(confirmLabel);
-    var numEvents = selectedAggList.length;
-
-    actionLabel = actionLabel.replace('{count}', numEvents);
-
-    return (
-      <Modal title="Please confirm" animation={false} onRequestHide={this.handleToggle}>
-        <div className="modal-body">
-          <p><strong>Are you sure that you want to {actionLabel}?</strong></p>
-          <p>This action cannot be undone.</p>
-        </div>
-        <div className="modal-footer">
-          <button type="button" className="btn btn-default"
-                  onClick={this.handleToggle}>Cancel</button>
-          {this.props.canActionAll &&
-            <button type="button" className="btn btn-danger"
-                    onClick={this.handleActionAll}>{confirmLabel} all recorded events</button>
-          }
-          <button type="button" className="btn btn-primary"
-                  onClick={this.handleActionSelected}>{confirmLabel} {numEvents} selected events</button>
-        </div>
-      </Modal>
-    );
-  }
-});
-
-var Actions = React.createClass({
-  propTypes: {
-    aggList: React.PropTypes.array.isRequired,
-    anySelected: React.PropTypes.bool.isRequired,
-    multiSelected: React.PropTypes.bool.isRequired,
-    onBookmark: React.PropTypes.func.isRequired,
-    onDelete: React.PropTypes.func.isRequired,
-    onMerge: React.PropTypes.func.isRequired,
-    onRemoveBookmark: React.PropTypes.func.isRequired,
-    onResolve: React.PropTypes.func.isRequired,
-    onSelectAll: React.PropTypes.func.isRequired,
-    onSelectStatsPeriod: React.PropTypes.func.isRequired,
-    selectAllActive: React.PropTypes.bool.isRequired,
-    statsPeriod: React.PropTypes.string.isRequired
-  },
-  selectStatsPeriod: function(period) {
-    return this.props.onSelectStatsPeriod(period);
-  },
-  render: function() {
-    var params = utils.getQueryParams();
-    var sortBy = params.sort || 'date';
-    var sortLabel;
-
-    switch (sortBy) {
-      case 'new':
-        sortLabel = 'First Seen';
-        break;
-      case 'priority':
-        sortLabel = 'Priority';
-        break;
-      case 'freq':
-        sortLabel = 'Frequency';
-        break;
-      default:
-        sortLabel = 'Last Seen';
-        sortBy = 'date';
-    }
-
-    return (
-      <div className="stream-actions">
-        <div className="stream-actions-left stream-actions-cell">
-          <div className="checkbox">
-            <input type="checkbox" className="chk-select-all"
-                   onChange={this.props.onSelectAll}
-                   checked={this.props.selectAllActive} />
-          </div>
-          <div className="btn-group">
-            <ActionLink
-               className="btn btn-default btn-sm action-resolve"
-               disabled={!this.props.anySelected}
-               onAction={this.props.onResolve}
-               confirmLabel="Resolve"
-               canActionAll={true}
-               onlyIfBulk={true}
-               selectAllActive={this.props.selectAllActive}
-               aggList={this.props.aggList}>
-              <i aria-hidden="true" className="icon-checkmark"></i>
-            </ActionLink>
-            <ActionLink
-               className="btn btn-default btn-sm action-bookmark"
-               disabled={!this.props.anySelected}
-               onAction={this.props.onBookmark}
-               neverConfirm={true}
-               confirmLabel="Bookmark"
-               canActionAll={false}
-               onlyIfBulk={true}
-               selectAllActive={this.props.selectAllActive}
-               aggList={this.props.aggList}>
-              <i aria-hidden="true" className="icon-bookmark"></i>
-            </ActionLink>
-
-            <DropdownLink
-              key="actions"
-              caret={false}
-              disabled={!this.props.anySelected}
-              className="btn-sm btn-default hidden-xs action-more"
-              title={<span className="icon-ellipsis"></span>}>
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   className="action-merge"
-                   disabled={!this.props.multiSelected}
-                   onAction={this.props.onMerge}
-                   confirmLabel="Merge"
-                   canActionAll={false}
-                   selectAllActive={this.props.selectAllActive}
-                   aggList={this.props.aggList}>
-                  Merge Events
-                </ActionLink>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   className="action-remove-bookmark"
-                   disabled={!this.props.anySelected}
-                   onAction={this.props.onRemoveBookmark}
-                   neverConfirm={true}
-                   actionLabel="remove these {count} events from your bookmarks"
-                   onlyIfBulk={true}
-                   canActionAll={false}
-                   selectAllActive={this.props.selectAllActive}
-                   aggList={this.props.aggList}>
-                  Remove from Bookmarks
-                </ActionLink>
-              </MenuItem>
-              <MenuItem divider={true} />
-              <MenuItem noAnchor={true}>
-                <ActionLink
-                   className="action-delete"
-                   disabled={!this.props.anySelected}
-                   onAction={this.props.onDelete}
-                   confirmLabel="Delete"
-                   canActionAll={false}
-                   selectAllActive={this.props.selectAllActive}
-                   aggList={this.props.aggList}>
-                  Delete Events
-                </ActionLink>
-              </MenuItem>
-            </DropdownLink>
-          </div>
-
-          <div className="btn-group">
-            <a href="#" className="btn btn-default btn-sm hidden-xs realtime-control">
-              <span className="icon icon-pause"></span>
-            </a>
-          </div>
-          <DropdownLink
-            key="sort"
-            className="btn-sm"
-            title={<span><span className="hidden-sm hidden-xs">Sort by:</span> {sortLabel}</span>}>
-            <MenuItem href="?sort=priority" isActive={sortBy === 'priority'}>Priority</MenuItem>
-            <MenuItem href="?sort=date" isActive={sortBy === 'date'}>Last Seen</MenuItem>
-            <MenuItem href="?sort=new" isActive={sortBy === 'new'}>First Seen</MenuItem>
-            <MenuItem href="?sort=freq" isActive={sortBy === 'freq'}>Occurances</MenuItem>
-          </DropdownLink>
-
-          <div className="btn-group">
-            <a href="#" className="btn dropdown-toggle btn-sm" onclick="" data-toggle="dropdown">
-              All time
-            <span aria-hidden="true" className="icon-arrow-down"></span></a>
-            <div className="datepicker-box dropdown-menu" id="daterange">
-              <form method="GET" action=".">
-                <div className="input">
-                  <div className="inline-inputs">
-                    <input data-toggle="datepicker" data-date-format="yyyy-mm-dd"name="df" className="form-control date" type="text" placeholder="Date" />
-                    <input className="time form-control" type="text" name="tf" placeholder="Time" />
-                    to
-                    <input data-toggle="datepicker" data-date-format="yyyy-mm-dd" name="dt" className="date form-control" type="text" placeholder="Date"/>
-                    <input className="time form-control" type="text" name="tt" placeholder="Time" />
-                  </div>
-                  <div className="help-block">All events are represented in UTC time.</div>
-                </div>
-                <div className="submit">
-                  <div className="pull-right">
-                    <button className="btn btn-default btn-sm">Clear</button>
-                    <button className="btn btn-primary btn-sm">Apply</button>
-                  </div>
-                  <div className="radio-inputs">
-                    <label className="radio">
-                      <input type="radio" name="date_type" value="last_seen" /> Last Seen
-                    </label>
-                    <label className="radio">
-                      <input type="radio" name="date_type" value="first_seen" /> First Seen
-                    </label>
-                  </div>
-                </div>
-              </form>
-            </div>
-          </div>
-        </div>
-        <div className="hidden-sm hidden-xs stream-actions-assignee stream-actions-cell">
-        </div>
-        <div className="hidden-sm hidden-xs stream-actions-graph stream-actions-cell">
-          <ul className="toggle-graph">
-            <li><a onClick={this.selectStatsPeriod.bind(this, '24h')}
-                   className={this.props.selectStatsPeriod === '24h' ? 'active' : ''}>24h</a></li>
-            <li><a onClick={this.selectStatsPeriod.bind(this, '30d')}
-                   className={this.props.selectStatsPeriod === '30d' ? 'active' : ''}>30d</a></li>
-          </ul>
-        </div>
-        <div className="stream-actions-occurrences stream-actions-cell align-center hidden-xs"> events</div>
-        <div className="stream-actions-users stream-actions-cell align-center hidden-xs"> users</div>
-      </div>
-    );
-  }
-});
-
 var Aggregate = React.createClass({
   propTypes: {
     data: React.PropTypes.shape({
@@ -689,22 +246,23 @@ var Stream = React.createClass({
 
     return (
       <div>
-        <FilterSelect query={this.state.query} onQueryChange={this.handleQueryChange} />
+        <StreamFilters query={this.state.query} onQueryChange={this.handleQueryChange} />
         <div className="group-header-container" data-spy="affix" data-offset-top="134">
           <div className="container">
             <div className="group-header">
-              <Actions onSelectAll={this.handleSelectAll}
-                       onResolve={this.handleResolve}
-                       onBookmark={this.handleBookmark}
-                       onDelete={this.handleDelete}
-                       onMerge={this.handleMerge}
-                       onRemoveBookmark={this.handleRemoveBookmark}
-                       onSelectStatsPeriod={this.handleSelectStatsPeriod}
-                       statsPeriod={this.state.statsPeriod}
-                       aggList={this.state.aggList}
-                       selectAllActive={this.state.selectAllActive}
-                       anySelected={this.state.anySelected}
-                       multiSelected={this.state.multiSelected} />
+              <StreamActions
+                onSelectAll={this.handleSelectAll}
+                onResolve={this.handleResolve}
+                onBookmark={this.handleBookmark}
+                onDelete={this.handleDelete}
+                onMerge={this.handleMerge}
+                onRemoveBookmark={this.handleRemoveBookmark}
+                onSelectStatsPeriod={this.handleSelectStatsPeriod}
+                statsPeriod={this.state.statsPeriod}
+                aggList={this.state.aggList}
+                selectAllActive={this.state.selectAllActive}
+                anySelected={this.state.anySelected}
+                multiSelected={this.state.multiSelected} />
             </div>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app-react/components/streamActions.jsx b/src/sentry/static/sentry/app-react/components/streamActions.jsx
new file mode 100644
index 0000000000..2e2a3ad78a
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/streamActions.jsx
@@ -0,0 +1,328 @@
+/*** @jsx React.DOM */
+var React = require("react");
+var $ = require("jquery");
+
+var utils = require("../utils");
+
+var joinClasses = require('react-bootstrap/utils/joinClasses');
+var DropdownLink = require("./dropdownLink");
+var MenuItem = require("./menuItem");
+var Modal = require("react-bootstrap/Modal");
+var OverlayMixin = require("react-bootstrap/OverlayMixin");
+
+var ActionLink = React.createClass({
+  mixins: [OverlayMixin],
+
+  ALL: -1,
+
+  propTypes: {
+    actionLabel: React.PropTypes.string,
+    aggList: React.PropTypes.array.isRequired,
+    canActionAll: React.PropTypes.bool.isRequired,
+    confirmLabel: React.PropTypes.string,
+    disabled: React.PropTypes.bool,
+    neverConfirm: React.PropTypes.bool,
+    onAction: React.PropTypes.func.isRequired,
+    onlyIfBulk: React.PropTypes.bool,
+    selectAllActive: React.PropTypes.bool.isRequired
+  },
+
+  getDefaultProps: function() {
+    return {
+      confirmLabel: 'Edit',
+      onlyIfBulk: false,
+      neverConfirm: false,
+      disabled: false
+    };
+  },
+
+  getInitialState: function() {
+    return {
+      isModalOpen: false
+    };
+  },
+
+  handleToggle: function() {
+    if (this.props.disabled) {
+      return;
+    }
+    this.setState({
+      isModalOpen: !this.state.isModalOpen
+    });
+  },
+
+  handleActionAll: function(event) {
+    this.props.onAction(ActionLink.ALL, event);
+    this.setState({
+      isModalOpen: false
+    });
+  },
+
+  handleActionSelected: function(event) {
+    this.props.onAction(ActionLink.SELECTED, event);
+    this.setState({
+      isModalOpen: false
+    });
+  },
+
+  defaultActionLabel: function(confirmLabel) {
+    return confirmLabel.toLowerCase() + ' these {count} events';
+  },
+
+  render: function () {
+    var className = this.props.className;
+    if (this.props.disabled) {
+      className += ' disabled';
+    }
+    return (
+      <a className={className} disabled={this.props.disabled} onClick={this.handleToggle}>
+        {this.props.children}
+      </a>
+    );
+  },
+
+  renderOverlay: function() {
+    if (!this.state.isModalOpen) {
+      return <span/>;
+    }
+
+    var selectedAggList = [];
+    for (var i = 0, node; (node = this.props.aggList[i]); i++) {
+      if (node.isSelected === true) {
+        selectedAggList.push(node);
+      }
+    }
+
+    if (selectedAggList.length === 0) {
+      throw new Error('ActionModal rendered without any selected aggregates');
+    }
+
+    var shouldConfirm = true;
+    // if skipConfirm is set we never actually show the modal
+    if (this.props.neverConfirm === true) {
+      shouldConfirm = false;
+    // if onlyIfBulk is set and we've selected a single item, we skip
+    // showing the modal
+    } else if (this.props.onlyIfBulk === true && !this.props.selectAllActive) {
+      shouldConfirm = false;
+    }
+
+    if (!shouldConfirm) {
+      this.handleActionSelected();
+      this.state.isModalOpen = false;
+      return <span />;
+    }
+
+    var confirmLabel = this.props.confirmLabel;
+    var actionLabel = this.props.actionLabel || this.defaultActionLabel(confirmLabel);
+    var numEvents = selectedAggList.length;
+
+    actionLabel = actionLabel.replace('{count}', numEvents);
+
+    return (
+      <Modal title="Please confirm" animation={false} onRequestHide={this.handleToggle}>
+        <div className="modal-body">
+          <p><strong>Are you sure that you want to {actionLabel}?</strong></p>
+          <p>This action cannot be undone.</p>
+        </div>
+        <div className="modal-footer">
+          <button type="button" className="btn btn-default"
+                  onClick={this.handleToggle}>Cancel</button>
+          {this.props.canActionAll &&
+            <button type="button" className="btn btn-danger"
+                    onClick={this.handleActionAll}>{confirmLabel} all recorded events</button>
+          }
+          <button type="button" className="btn btn-primary"
+                  onClick={this.handleActionSelected}>{confirmLabel} {numEvents} selected events</button>
+        </div>
+      </Modal>
+    );
+  }
+});
+
+var StreamActions = React.createClass({
+  propTypes: {
+    aggList: React.PropTypes.array.isRequired,
+    anySelected: React.PropTypes.bool.isRequired,
+    multiSelected: React.PropTypes.bool.isRequired,
+    onBookmark: React.PropTypes.func.isRequired,
+    onDelete: React.PropTypes.func.isRequired,
+    onMerge: React.PropTypes.func.isRequired,
+    onRemoveBookmark: React.PropTypes.func.isRequired,
+    onResolve: React.PropTypes.func.isRequired,
+    onSelectAll: React.PropTypes.func.isRequired,
+    onSelectStatsPeriod: React.PropTypes.func.isRequired,
+    selectAllActive: React.PropTypes.bool.isRequired,
+    statsPeriod: React.PropTypes.string.isRequired
+  },
+  selectStatsPeriod: function(period) {
+    return this.props.onSelectStatsPeriod(period);
+  },
+  render: function() {
+    var params = utils.getQueryParams();
+    var sortBy = params.sort || 'date';
+    var sortLabel;
+
+    switch (sortBy) {
+      case 'new':
+        sortLabel = 'First Seen';
+        break;
+      case 'priority':
+        sortLabel = 'Priority';
+        break;
+      case 'freq':
+        sortLabel = 'Frequency';
+        break;
+      default:
+        sortLabel = 'Last Seen';
+        sortBy = 'date';
+    }
+
+    return (
+      <div className="stream-actions">
+        <div className="stream-actions-left stream-actions-cell">
+          <div className="checkbox">
+            <input type="checkbox" className="chk-select-all"
+                   onChange={this.props.onSelectAll}
+                   checked={this.props.selectAllActive} />
+          </div>
+          <div className="btn-group">
+            <ActionLink
+               className="btn btn-default btn-sm action-resolve"
+               disabled={!this.props.anySelected}
+               onAction={this.props.onResolve}
+               confirmLabel="Resolve"
+               canActionAll={true}
+               onlyIfBulk={true}
+               selectAllActive={this.props.selectAllActive}
+               aggList={this.props.aggList}>
+              <i aria-hidden="true" className="icon-checkmark"></i>
+            </ActionLink>
+            <ActionLink
+               className="btn btn-default btn-sm action-bookmark"
+               disabled={!this.props.anySelected}
+               onAction={this.props.onBookmark}
+               neverConfirm={true}
+               confirmLabel="Bookmark"
+               canActionAll={false}
+               onlyIfBulk={true}
+               selectAllActive={this.props.selectAllActive}
+               aggList={this.props.aggList}>
+              <i aria-hidden="true" className="icon-bookmark"></i>
+            </ActionLink>
+
+            <DropdownLink
+              key="actions"
+              caret={false}
+              disabled={!this.props.anySelected}
+              className="btn-sm btn-default hidden-xs action-more"
+              title={<span className="icon-ellipsis"></span>}>
+              <MenuItem noAnchor={true}>
+                <ActionLink
+                   className="action-merge"
+                   disabled={!this.props.multiSelected}
+                   onAction={this.props.onMerge}
+                   confirmLabel="Merge"
+                   canActionAll={false}
+                   selectAllActive={this.props.selectAllActive}
+                   aggList={this.props.aggList}>
+                  Merge Events
+                </ActionLink>
+              </MenuItem>
+              <MenuItem noAnchor={true}>
+                <ActionLink
+                   className="action-remove-bookmark"
+                   disabled={!this.props.anySelected}
+                   onAction={this.props.onRemoveBookmark}
+                   neverConfirm={true}
+                   actionLabel="remove these {count} events from your bookmarks"
+                   onlyIfBulk={true}
+                   canActionAll={false}
+                   selectAllActive={this.props.selectAllActive}
+                   aggList={this.props.aggList}>
+                  Remove from Bookmarks
+                </ActionLink>
+              </MenuItem>
+              <MenuItem divider={true} />
+              <MenuItem noAnchor={true}>
+                <ActionLink
+                   className="action-delete"
+                   disabled={!this.props.anySelected}
+                   onAction={this.props.onDelete}
+                   confirmLabel="Delete"
+                   canActionAll={false}
+                   selectAllActive={this.props.selectAllActive}
+                   aggList={this.props.aggList}>
+                  Delete Events
+                </ActionLink>
+              </MenuItem>
+            </DropdownLink>
+          </div>
+
+          <div className="btn-group">
+            <a href="#" className="btn btn-default btn-sm hidden-xs realtime-control">
+              <span className="icon icon-pause"></span>
+            </a>
+          </div>
+          <DropdownLink
+            key="sort"
+            className="btn-sm"
+            title={<span><span className="hidden-sm hidden-xs">Sort by:</span> {sortLabel}</span>}>
+            <MenuItem href="?sort=priority" isActive={sortBy === 'priority'}>Priority</MenuItem>
+            <MenuItem href="?sort=date" isActive={sortBy === 'date'}>Last Seen</MenuItem>
+            <MenuItem href="?sort=new" isActive={sortBy === 'new'}>First Seen</MenuItem>
+            <MenuItem href="?sort=freq" isActive={sortBy === 'freq'}>Occurances</MenuItem>
+          </DropdownLink>
+
+          <div className="btn-group">
+            <a href="#" className="btn dropdown-toggle btn-sm" onclick="" data-toggle="dropdown">
+              All time
+            <span aria-hidden="true" className="icon-arrow-down"></span></a>
+            <div className="datepicker-box dropdown-menu" id="daterange">
+              <form method="GET" action=".">
+                <div className="input">
+                  <div className="inline-inputs">
+                    <input data-toggle="datepicker" data-date-format="yyyy-mm-dd"name="df" className="form-control date" type="text" placeholder="Date" />
+                    <input className="time form-control" type="text" name="tf" placeholder="Time" />
+                    to
+                    <input data-toggle="datepicker" data-date-format="yyyy-mm-dd" name="dt" className="date form-control" type="text" placeholder="Date"/>
+                    <input className="time form-control" type="text" name="tt" placeholder="Time" />
+                  </div>
+                  <div className="help-block">All events are represented in UTC time.</div>
+                </div>
+                <div className="submit">
+                  <div className="pull-right">
+                    <button className="btn btn-default btn-sm">Clear</button>
+                    <button className="btn btn-primary btn-sm">Apply</button>
+                  </div>
+                  <div className="radio-inputs">
+                    <label className="radio">
+                      <input type="radio" name="date_type" value="last_seen" /> Last Seen
+                    </label>
+                    <label className="radio">
+                      <input type="radio" name="date_type" value="first_seen" /> First Seen
+                    </label>
+                  </div>
+                </div>
+              </form>
+            </div>
+          </div>
+        </div>
+        <div className="hidden-sm hidden-xs stream-actions-assignee stream-actions-cell">
+        </div>
+        <div className="hidden-sm hidden-xs stream-actions-graph stream-actions-cell">
+          <ul className="toggle-graph">
+            <li><a onClick={this.selectStatsPeriod.bind(this, '24h')}
+                   className={this.props.selectStatsPeriod === '24h' ? 'active' : ''}>24h</a></li>
+            <li><a onClick={this.selectStatsPeriod.bind(this, '30d')}
+                   className={this.props.selectStatsPeriod === '30d' ? 'active' : ''}>30d</a></li>
+          </ul>
+        </div>
+        <div className="stream-actions-occurrences stream-actions-cell align-center hidden-xs"> events</div>
+        <div className="stream-actions-users stream-actions-cell align-center hidden-xs"> users</div>
+      </div>
+    );
+  }
+});
+
+module.exports = StreamActions;
diff --git a/src/sentry/static/sentry/app-react/components/streamFilters.jsx b/src/sentry/static/sentry/app-react/components/streamFilters.jsx
new file mode 100644
index 0000000000..8fe63184e5
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/components/streamFilters.jsx
@@ -0,0 +1,130 @@
+/*** @jsx React.DOM */
+var React = require("react");
+var $ = require("jquery");
+
+var utils = require("../utils");
+
+var SearchDropdown = React.createClass({
+  componentDidMount: function(){
+    $('.filter-nav .search-input').focus(function(){
+      $('.search-dropdown').show();
+    }).blur(function(){
+      $('.search-dropdown').hide();
+    });
+  },
+
+  render: function() {
+    return (
+      <div className="search-dropdown" style={{display:"none"}}>
+        <ul className="search-helper search-autocomplete-list">
+          <li className="search-autocomplete-item">
+            <span className="icon icon-tag"></span>
+            <h4>Tag - <span className="search-description">key/value pair associated to an event</span></h4>
+            <p className="search-example">browser:"Chrome 34"</p>
+          </li>
+          <li className="search-autocomplete-item">
+            <span className="icon icon-toggle"></span>
+            <h4>Status - <span className="search-description">State of an event</span></h4>
+            <p className="search-example">is:resolved, unresolved, muted</p>
+          </li>
+          <li className="search-autocomplete-item">
+            <span className="icon icon-user"></span>
+            <h4>Assigned - <span className="search-description">team member assigned to an event</span></h4>
+            <p className="search-example">assigned:[me|user@example.com]</p>
+          </li>
+        </ul>
+      </div>
+    );
+  }
+});
+
+var SearchBar = React.createClass({
+  propTypes: {
+    query: React.PropTypes.string.isRequired,
+    onQueryChange: React.PropTypes.func.isRequired
+  },
+  onQueryChange: function(event){
+    return this.props.onQueryChange(event.target.value, event);
+  },
+  render: function() {
+    return (
+      <div className="search">
+        <form className="form-horizontal" action="." method="GET">
+          <div>
+            <input type="text" className="search-input form-control"
+                   placeholder="Search for events, users, tags, and everything else."
+                   name="query"
+                   value={this.props.query}
+                   onChange={this.onQueryChange} />
+            <span className="icon-search"></span>
+          </div>
+          <SearchDropdown />
+        </form>
+      </div>
+    );
+  }
+});
+
+var FilterSelectLink = React.createClass({
+  render: function() {
+    var className = this.props.extraClass;
+    className += ' btn btn-default';
+
+    if (this.props.isActive) {
+      className += ' active';
+    }
+
+    var queryString = '?' + this.props.query;
+
+    return (
+      <a href={queryString}
+          className={className}>{this.props.label}</a>
+    );
+  }
+});
+
+var StreamFilters = React.createClass({
+  propTypes: {
+    query: React.PropTypes.string.isRequired,
+    onQueryChange: React.PropTypes.func.isRequired
+  },
+  render: function() {
+    var params = utils.getQueryParams();
+    var activeButton;
+    if (params.bookmarks) {
+      activeButton = 'bookmarks';
+    } else if (params.assigned) {
+      activeButton = 'assigned';
+    } else {
+      activeButton = 'all';
+    }
+
+    return (
+      <div className="filter-nav" ng-controller="ProjectStreamControlsCtrl">
+        <div className="row">
+          <div className="col-sm-4 primary-filters">
+            <div className="btn-group btn-group-justified">
+              <FilterSelectLink label="All Events"
+                                query=""
+                                isActive={activeButton === 'all'}
+                                extraClass="btn-all-events" />
+              <FilterSelectLink label="Bookmarks"
+                                query="bookmarks=1"
+                                isActive={activeButton === 'bookmarks'}
+                                extraClass="btn-middle btn-bookmarks" />
+              <FilterSelectLink label="Assigned"
+                                query="assigned=1"
+                                isActive={activeButton === 'assigned'}
+                                extraClass="btn-assigned" />
+            </div>
+          </div>
+          <div className="col-sm-8">
+            <SearchBar query={this.props.query} onQueryChange={this.props.onQueryChange} />
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = StreamFilters;
