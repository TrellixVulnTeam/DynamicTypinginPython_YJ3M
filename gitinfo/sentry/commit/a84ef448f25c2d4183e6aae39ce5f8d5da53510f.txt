commit a84ef448f25c2d4183e6aae39ce5f8d5da53510f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Dec 7 12:47:38 2015 -0800

    Add a flag to support not overriding database options if disk value
    exists

diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 28a3d29edb..60148aa846 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -11,7 +11,7 @@ from .store import OptionsStore
 from .manager import OptionsManager
 from .manager import (  # NOQA
     DEFAULT_FLAGS, FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY,
-    FLAG_REQUIRED,
+    FLAG_REQUIRED, FLAG_PRIORITIZE_DISK,
 )
 
 __all__ = (
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 8b43794603..b19d42c9aa 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -8,7 +8,7 @@ sentry.options.defaults
 from __future__ import absolute_import, print_function
 
 
-from sentry.options import register, FLAG_NOSTORE, FLAG_REQUIRED
+from sentry.options import register, FLAG_NOSTORE, FLAG_REQUIRED, FLAG_PRIORITIZE_DISK
 
 
 register('cache.backend', flags=FLAG_NOSTORE)
@@ -20,4 +20,4 @@ register('system.secret-key', flags=FLAG_NOSTORE)
 register('redis.options', default={}, flags=FLAG_NOSTORE)
 
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
-register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED)
+register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index bf0ada84f4..da9e87ecb1 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -31,6 +31,9 @@ FLAG_NOSTORE = 1 << 2
 FLAG_STOREONLY = 1 << 3
 # Values that must be defined for setup to be considered complete
 FLAG_REQUIRED = 1 << 4
+# If the value is defined on disk, use that and don't attempt to fetch from db.
+# This also make the value immutible to changes from web UI.
+FLAG_PRIORITIZE_DISK = 1 << 5
 
 # How long will a cache key exist in local memory before being evicted
 DEFAULT_KEY_TTL = 10
@@ -74,6 +77,8 @@ class OptionsManager(object):
         assert not (opt.flags & FLAG_NOSTORE), '%r cannot be changed at runtime' % key
         # Enforce immutability on key
         assert not (opt.flags & FLAG_IMMUTABLE), '%r cannot be changed at runtime' % key
+        # Enforce immutability if value is already set on disk
+        assert not(opt.flags & FLAG_PRIORITIZE_DISK and settings.SENTRY_OPTIONS.get(key)), '%r cannot be changed at runtime because it is configured on disk' % key
 
         if not isinstance(value, opt.type):
             raise TypeError('got %r, expected %r' % (_type(value), opt.type))
@@ -107,6 +112,18 @@ class OptionsManager(object):
         # values change. This case is unlikely, but good to cover our bases.
         opt = self.lookup_key(key)
 
+        # First check if the option should exist on disk, and if it actually
+        # has a value set, let's use that one instead without even attempting
+        # to fetch from network storage.
+        if opt.flags & FLAG_PRIORITIZE_DISK:
+            try:
+                result = settings.SENTRY_OPTIONS[key]
+            except KeyError:
+                pass
+            else:
+                if result:
+                    return result
+
         if not (opt.flags & FLAG_NOSTORE):
             result = self.store.get(opt, silent=silent)
             if result is not None:
diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 00a47fc9cc..13542ad1b6 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -9,7 +9,7 @@ from sentry.models import Option
 from sentry.options.store import OptionsStore
 from sentry.options.manager import (
     OptionsManager, UnknownOption, DEFAULT_FLAGS,
-    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY, FLAG_REQUIRED)
+    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY, FLAG_REQUIRED, FLAG_PRIORITIZE_DISK)
 from sentry.testutils import TestCase
 
 
@@ -137,6 +137,22 @@ class OptionsManagerTest(TestCase):
         with self.settings(SENTRY_OPTIONS={'storeonly': 'something-else!'}):
             assert self.manager.get('storeonly') == ''
 
+    def test_flag_prioritize_disk(self):
+        self.manager.register('prioritize_disk', flags=FLAG_PRIORITIZE_DISK)
+        assert self.manager.get('prioritize_disk') == ''
+
+        with self.settings(SENTRY_OPTIONS={'prioritize_disk': 'something-else!'}):
+            with self.assertRaises(AssertionError):
+                assert self.manager.set('prioritize_disk', 'foo')
+            assert self.manager.get('prioritize_disk') == 'something-else!'
+
+        self.manager.set('prioritize_disk', 'foo')
+        assert self.manager.get('prioritize_disk') == 'foo'
+
+        # Make sure the database value is overridden if defined
+        with self.settings(SENTRY_OPTIONS={'prioritize_disk': 'something-else!'}):
+            assert self.manager.get('prioritize_disk') == 'something-else!'
+
     def test_db_unavailable(self):
         with patch.object(Option.objects, 'get_queryset', side_effect=Exception()):
             # we can't update options if the db is unavailable
