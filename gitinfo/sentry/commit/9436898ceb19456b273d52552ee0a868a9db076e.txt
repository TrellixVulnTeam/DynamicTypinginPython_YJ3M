commit 9436898ceb19456b273d52552ee0a868a9db076e
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Nov 7 10:49:18 2018 -0800

    feat(custom-filters): Use feature component w/ hook (#10363)
    
    Refactors the advanced custom filters to use the Feature component,
    allowing the getsentry disabled hook to be rendered in place easily.

diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
index b36881a078..e5e5fe5e0a 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -3,14 +3,22 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import {
+  Panel,
+  PanelAlert,
+  PanelBody,
+  PanelHeader,
+  PanelItem,
+} from 'app/components/panels';
 import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
+import Feature from 'app/components/acl/feature';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
 import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
 import Form from 'app/views/settings/components/forms/form';
 import FormField from 'app/views/settings/components/forms/formField';
 import HookStore from 'app/stores/hookStore';
 import JsonForm from 'app/views/settings/components/forms/jsonForm';
-import {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';
 import SentryTypes from 'app/sentryTypes';
 import Switch from 'app/components/switch';
 import filterGroups, {customFilterFields} from 'app/data/forms/inboundFilters';
@@ -171,12 +179,35 @@ class ProjectFiltersSettings extends AsyncComponent {
     onBlur(subfilters, e);
   };
 
-  renderDisabledFeature(fields) {
-    let {project, organization} = this.props;
-    return this.state.hooksDisabled.map(hook =>
-      hook(organization, project, null, fields)
-    );
-  }
+  renderDisabledCustomFilters = p => (
+    <FeatureDisabled
+      feature={p.features[0]}
+      alert={PanelAlert}
+      name={t('Custom Inbound Filters')}
+      message={t(
+        'Release and Error Message filtering are not enabled on your Sentry installation'
+      )}
+    />
+  );
+
+  renderCustomFilters = () => (
+    <Feature
+      features={['projects:custom-inbound-filters']}
+      renderDisabled={({children, ...props}) =>
+        children({...props, renderDisabled: this.renderDisabledCustomFilters})}
+    >
+      {({hasFeature, renderDisabled, ...featureProps}) => (
+        <React.Fragment>
+          {!hasFeature &&
+            renderDisabled({organization: this.props.organization, ...featureProps})}
+
+          {customFilterFields.map(field => (
+            <FieldFromConfig key={field.name} field={{...field, disabled: !hasFeature}} />
+          ))}
+        </React.Fragment>
+      )}
+    </Feature>
+  );
 
   renderBody() {
     let {features, params} = this.props;
@@ -255,16 +286,7 @@ class ProjectFiltersSettings extends AsyncComponent {
           <JsonForm
             features={features}
             forms={filterGroups}
-            renderFooter={() => {
-              // Render additional fields that are behind a feature flag
-              let customFilters = customFilterFields.map(field => (
-                <FieldFromConfig key={field.name} field={field} />
-              ));
-
-              return features.has('custom-inbound-filters')
-                ? customFilters
-                : this.renderDisabledFeature(customFilters);
-            }}
+            renderFooter={this.renderCustomFilters}
           />
         </Form>
       </React.Fragment>
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
index ab499629e5..7f558801ed 100644
--- a/tests/js/spec/views/projectFilters.spec.jsx
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -206,9 +206,11 @@ describe('ProjectFilters', function() {
     );
   });
 
-  it('does not have filter by release/error message because no hooks store', function() {
-    expect(wrapper.find('TextArea[id="filters:releases"]')).toHaveLength(0);
-    expect(wrapper.find('TextArea[id="filters:error_messages"]')).toHaveLength(0);
+  it('filter by release/error message are not enabled', function() {
+    expect(wrapper.find('TextArea[id="filters:releases"][disabled]')).toHaveLength(1);
+    expect(wrapper.find('TextArea[id="filters:error_messages"][disabled]')).toHaveLength(
+      1
+    );
   });
 
   it('has custom inbound filters with flag + can change', function() {
