commit b4a6474b6507d5648f051d3744e34f076be8fb69
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Feb 11 13:06:08 2019 -0800

    feat(integrations): Update Comment Sync  (#11151)
    
    * Added changes I thought were necessary. Will create tests for them to verify.
    
    * Added mthods to base class
    
    * Added the beginnings of tests.
    
    * Saving place
    
    * return comment directly.
    
    * Got update working but permissions error on delete.
    
    * Fixed update test
    
    * removed delete comment.
    
    * Removed test that was not completed.
    
    * fixed tests.
    
    * Removed get comment id vsts
    
    * Added external_id as an optional field on the serializer.
    
    * Added back post_comment for old jobs. changed endpoint to only update if note has an external_id
    
    * removed tuple from has_comment_sync check
    
    * Added more comprehensive test to put method.
    
    * Added self.group.id rather than hard coded
    
    * Added wrong id

diff --git a/src/sentry/api/bases/group.py b/src/sentry/api/bases/group.py
index 2ce4d05bbe..d6e12c1546 100644
--- a/src/sentry/api/bases/group.py
+++ b/src/sentry/api/bases/group.py
@@ -6,7 +6,8 @@ from sentry.api.base import Endpoint
 from sentry.api.bases.project import ProjectPermission
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.utils.sdk import configure_scope
-from sentry.models import Group, GroupStatus, get_group_with_redirect
+from sentry.models import Group, GroupLink, GroupStatus, get_group_with_redirect
+from sentry.tasks.integrations import create_comment, update_comment
 
 logger = logging.getLogger(__name__)
 
@@ -63,3 +64,30 @@ class GroupEndpoint(Endpoint):
         kwargs['group'] = group
 
         return (args, kwargs)
+
+    def get_external_issue_ids(self, group):
+        return GroupLink.objects.filter(
+            project_id=group.project_id,
+            group_id=group.id,
+            linked_type=GroupLink.LinkedType.issue,
+        ).values_list('linked_id', flat=True)
+
+    def create_external_comment(self, request, group, group_note):
+        for external_issue_id in self.get_external_issue_ids(group):
+            create_comment.apply_async(
+                kwargs={
+                    'external_issue_id': external_issue_id,
+                    'group_note_id': group_note.id,
+                    'user_id': request.user.id,
+                }
+            )
+
+    def update_external_comment(self, request, group, group_note):
+        for external_issue_id in self.get_external_issue_ids(group):
+            update_comment.apply_async(
+                kwargs={
+                    'external_issue_id': external_issue_id,
+                    'group_note_id': group_note.id,
+                    'user_id': request.user.id,
+                }
+            )
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index ca68f2d3a7..fa556241e3 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -13,9 +13,9 @@ from sentry.api.serializers.rest_framework.group_notes import NoteSerializer, se
 from sentry.api.fields.actor import Actor
 
 from sentry.models import (
-    Activity, GroupLink, GroupSubscription, GroupSubscriptionReason, User
+    Activity, GroupSubscription, GroupSubscriptionReason, User
 )
-from sentry.tasks.integrations import post_comment
+
 from sentry.utils.functional import extract_lazy_object
 
 
@@ -102,19 +102,5 @@ class GroupNotesEndpoint(GroupEndpoint):
 
         activity.send_notification()
 
-        # sync Sentry comments to external issues
-        external_issue_ids = GroupLink.objects.filter(
-            project_id=group.project_id,
-            group_id=group.id,
-            linked_type=GroupLink.LinkedType.issue,
-        ).values_list('linked_id', flat=True)
-
-        for external_issue_id in external_issue_ids:
-            post_comment.apply_async(
-                kwargs={
-                    'external_issue_id': external_issue_id,
-                    'data': data,
-                    'user_id': request.user.id,
-                }
-            )
+        self.create_external_comment(request, group, activity)
         return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/api/endpoints/group_notes_details.py b/src/sentry/api/endpoints/group_notes_details.py
index dd7b2dd28d..57689d2c7d 100644
--- a/src/sentry/api/endpoints/group_notes_details.py
+++ b/src/sentry/api/endpoints/group_notes_details.py
@@ -52,9 +52,10 @@ class GroupNotesDetailsEndpoint(GroupEndpoint):
 
         if serializer.is_valid():
             # Would be nice to have a last_modified timestamp we could bump here
-            note.data = dict(serializer.object)
+            note.data.update(dict(serializer.object))
             note.save()
-
+            if note.data.get('external_id'):
+                self.update_external_comment(request, group, note)
             return Response(serialize(note, request.user), status=200)
 
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/serializers/rest_framework/group_notes.py b/src/sentry/api/serializers/rest_framework/group_notes.py
index 96054b64c4..8341385031 100644
--- a/src/sentry/api/serializers/rest_framework/group_notes.py
+++ b/src/sentry/api/serializers/rest_framework/group_notes.py
@@ -25,6 +25,7 @@ def seperate_resolved_actors(actors):
 class NoteSerializer(serializers.Serializer):
     text = serializers.CharField()
     mentions = ListField(child=ActorField(), required=False)
+    external_id = serializers.CharField(allow_none=True, required=False)
 
     def validate_mentions(self, attrs, source):
         if source in attrs and 'group' in self.context:
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index d3f2e51dfc..b3ba9ed676 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -62,11 +62,14 @@ class ExampleIntegration(IntegrationInstallation, IssueSyncMixin):
     def get_issue_url(self, key):
         return u'https://example/issues/{}'.format(key)
 
-    def create_comment(self, issue_id, user_id, comment):
+    def create_comment(self, issue_id, user_id, group_note):
         user = User.objects.get(id=user_id)
         attribution = '%s wrote:\n\n' % user.name
-        quoted_comment = '%s<blockquote>%s</blockquote>' % (attribution, comment)
-        return quoted_comment
+        comment = {
+            'id': '123456789',
+            'text': '%s<blockquote>%s</blockquote>' % (attribution, group_note.data['text'])
+        }
+        return comment
 
     def get_persisted_default_config_fields(self):
         return ['project']
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 0b4b040d4e..424b315d32 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -259,6 +259,15 @@ class IssueBasicMixin(object):
 
         return annotations
 
+    def get_comment_id(self, comment):
+        return comment['id']
+
+    def create_comment(self, issue_id, user_id, group_note):
+        pass
+
+    def update_comment(self, issue_id, user_id, group_note):
+        pass
+
 
 class IssueSyncMixin(IssueBasicMixin):
     comment_key = None
diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 38b0d4de0f..f6e66933f4 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -67,7 +67,8 @@ class JiraCloud(object):
 
 
 class JiraApiClient(ApiClient):
-    COMMENT_URL = '/rest/api/2/issue/%s/comment'
+    COMMENTS_URL = '/rest/api/2/issue/%s/comment'
+    COMMENT_URL = '/rest/api/2/issue/%s/comment/%s'
     STATUS_URL = '/rest/api/2/status'
     CREATE_URL = '/rest/api/2/issue'
     ISSUE_URL = '/rest/api/2/issue/%s'
@@ -126,7 +127,10 @@ class JiraApiClient(ApiClient):
         return self.get(self.SEARCH_URL, params={'jql': jql})
 
     def create_comment(self, issue_key, comment):
-        return self.post(self.COMMENT_URL % issue_key, data={'body': comment})
+        return self.post(self.COMMENTS_URL % issue_key, data={'body': comment})
+
+    def update_comment(self, issue_key, comment_id, comment):
+        return self.put(self.COMMENT_URL % (issue_key, comment_id), data={'body': comment})
 
     def get_projects_list(self):
         return self.get_cached(self.PROJECT_URL)
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 71ad551e04..50fec54709 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -287,12 +287,22 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             'description': issue['fields']['description'],
         }
 
-    def create_comment(self, issue_id, user_id, comment):
+    def create_comment(self, issue_id, user_id, group_note):
         # https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=texteffects
+        comment = group_note.data['text']
+        quoted_comment = self.create_comment_attribution(user_id, comment)
+        return self.get_client().create_comment(issue_id, quoted_comment)
+
+    def create_comment_attribution(self, user_id, comment_text):
         user = User.objects.get(id=user_id)
         attribution = '%s wrote:\n\n' % user.name
-        quoted_comment = '%s{quote}%s{quote}' % (attribution, comment)
-        return self.get_client().create_comment(issue_id, quoted_comment)
+        return '%s{quote}%s{quote}' % (attribution, comment_text)
+
+    def update_comment(self, issue_id, user_id, group_note):
+        quoted_comment = self.create_comment_attribution(user_id, group_note.data['text'])
+        return self.get_client().update_comment(
+            issue_id, group_note.data['external_id'], quoted_comment,
+        )
 
     def search_issues(self, query):
         try:
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index ad0d93269c..ee5978bf17 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -10,7 +10,7 @@ from sentry import http, features
 from sentry.constants import ObjectStatus
 from sentry.models import (
     Integration as IntegrationModel, IntegrationExternalProject, Organization,
-    OrganizationIntegration, User
+    OrganizationIntegration
 )
 from sentry.integrations import IntegrationInstallation, IntegrationFeatures, IntegrationProvider, IntegrationMetadata, FeatureDescription
 from sentry.integrations.exceptions import ApiError, IntegrationError
@@ -286,15 +286,6 @@ class VstsIntegration(IntegrationInstallation, RepositoryMixin, VstsIssueSync):
         except KeyError:
             return None
 
-    def create_comment(self, issue_id, user_id, comment):
-        # VSTS uses markdown or xml
-        # https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/bots/bots-text-formats
-        user = User.objects.get(id=user_id)
-        attribution = '%s wrote:\n\n' % user.name
-
-        quoted_comment = '%s<blockquote>%s</blockquote>' % (attribution, comment)
-        self.get_client().update_work_item(self.instance, issue_id, comment=quoted_comment)
-
 
 class VstsIntegrationProvider(IntegrationProvider):
     key = 'vsts'
diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
index 34f8844d94..0c1a6cc065 100644
--- a/src/sentry/integrations/vsts/issues.py
+++ b/src/sentry/integrations/vsts/issues.py
@@ -5,7 +5,7 @@ from mistune import markdown
 
 
 from django.core.urlresolvers import reverse
-from sentry.models import IntegrationExternalProject, OrganizationIntegration
+from sentry.models import IntegrationExternalProject, OrganizationIntegration, User
 from sentry.integrations.issues import IssueSyncMixin
 
 from sentry.integrations.exceptions import ApiUnauthorized, ApiError
@@ -256,3 +256,20 @@ class VstsIssueSync(IssueSyncMixin):
         if external_issue.metadata is None:
             return ''
         return external_issue.metadata['display_name']
+
+    def create_comment(self, issue_id, user_id, group_note):
+        comment = group_note.data['text']
+        quoted_comment = self.create_comment_attribution(user_id, comment)
+        self.get_client().update_work_item(self.instance, issue_id, comment=quoted_comment)
+
+    def create_comment_attribution(self, user_id, comment_text):
+        # VSTS uses markdown or xml
+        # https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/bots/bots-text-formats
+        user = User.objects.get(id=user_id)
+        attribution = '%s wrote:\n\n' % user.name
+        quoted_comment = '%s<blockquote>%s</blockquote>' % (attribution, comment_text)
+        return quoted_comment
+
+    def update_comment(self, issue_id, user_id, external_comment_id, comment_text):
+        # Azure does not support updating comments
+        pass
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 450dc10a9e..c2bb159f1d 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -8,7 +8,7 @@ import six
 
 from sentry import analytics, features
 from sentry.models import (
-    ExternalIssue, Group, GroupLink, GroupStatus, Integration, Organization,
+    Activity, ExternalIssue, Group, GroupLink, GroupStatus, Integration, Organization,
     ObjectStatus, OrganizationIntegration, Repository, User
 )
 
@@ -19,12 +19,21 @@ from sentry.tasks.base import instrumented_task, retry
 logger = logging.getLogger('sentry.tasks.integrations')
 
 
+def should_comment_sync(installation, external_issue):
+    organization = Organization.objects.get(id=external_issue.organization_id)
+    has_issue_sync = features.has('organizations:integrations-issue-sync',
+                                  organization)
+    return has_issue_sync and installation.should_sync('comment')
+
+
 @instrumented_task(
     name='sentry.tasks.integrations.post_comment',
     queue='integrations',
     default_retry_delay=60 * 5,
     max_retries=5
 )
+# TODO(lb): Replaced by create_comment method. Remove once all preexisting jobs have executed.
+# no longer in use
 # TODO(jess): Add more retry exclusions once ApiClients have better error handling
 @retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist))
 def post_comment(external_issue_id, data, user_id, **kwargs):
@@ -52,6 +61,80 @@ def post_comment(external_issue_id, data, user_id, **kwargs):
         )
 
 
+@instrumented_task(
+    name='sentry.tasks.integrations.create_comment',
+    queue='integrations',
+    default_retry_delay=60 * 5,
+    max_retries=5
+)
+# TODO(jess): Add more retry exclusions once ApiClients have better error handling
+@retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist))
+def create_comment(external_issue_id, user_id, group_note_id, **kwargs):
+    external_issue = ExternalIssue.objects.get(id=external_issue_id)
+    installation = Integration.objects.get(
+        id=external_issue.integration_id
+    ).get_installation(
+        organization_id=external_issue.organization_id,
+    )
+
+    if not should_comment_sync(installation, external_issue):
+        return
+    try:
+        note = Activity.objects.get(
+            type=Activity.NOTE,
+            id=group_note_id,
+        )
+    except Activity.DoesNotExist:
+        return
+    comment = installation.create_comment(external_issue.key, user_id, note)
+    note.data['external_id'] = installation.get_comment_id(comment)
+    note.save()
+    analytics.record(
+        # TODO(lb): this should be changed and/or specified?
+        'integration.issue.comments.synced',
+        provider=installation.model.provider,
+        id=installation.model.id,
+        organization_id=external_issue.organization_id,
+        user_id=user_id,
+    )
+
+
+@instrumented_task(
+    name='sentry.tasks.integrations.update_comment',
+    queue='integrations',
+    default_retry_delay=60 * 5,
+    max_retries=5
+)
+# TODO(jess): Add more retry exclusions once ApiClients have better error handling
+@retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist))
+def update_comment(external_issue_id, user_id, group_note_id, **kwargs):
+    external_issue = ExternalIssue.objects.get(id=external_issue_id)
+    installation = Integration.objects.get(
+        id=external_issue.integration_id
+    ).get_installation(
+        organization_id=external_issue.organization_id,
+    )
+
+    if not should_comment_sync(installation, external_issue):
+        return
+    try:
+        note = Activity.objects.get(
+            type=Activity.NOTE,
+            id=group_note_id,
+        )
+    except Activity.DoesNotExist:
+        return
+    installation.update_comment(external_issue.key, user_id, note)
+    analytics.record(
+        # TODO(lb): this should be changed and/or specified?
+        'integration.issue.comments.synced',
+        provider=installation.model.provider,
+        id=installation.model.id,
+        organization_id=external_issue.organization_id,
+        user_id=user_id,
+    )
+
+
 @instrumented_task(
     name='sentry.tasks.integrations.jira.sync_metadata',
     queue='integrations',
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index 6b4c818ee2..bc6eb6cb76 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -228,4 +228,4 @@ class GroupNoteCreateTest(APITestCase):
                 activity = Activity.objects.get(id=response.data['id'])
                 assert activity.user == self.user
                 assert activity.group == group
-                assert activity.data == {'text': comment}
+                assert activity.data == {'text': comment, 'external_id': '123456789'}
diff --git a/tests/sentry/api/endpoints/test_group_notes_details.py b/tests/sentry/api/endpoints/test_group_notes_details.py
index 1759e4e599..c8d6b7c489 100644
--- a/tests/sentry/api/endpoints/test_group_notes_details.py
+++ b/tests/sentry/api/endpoints/test_group_notes_details.py
@@ -1,12 +1,39 @@
 from __future__ import absolute_import
 
+import responses
+
 from exam import fixture
+from mock import patch
 
-from sentry.models import Activity, Group
+from sentry.models import Activity, ExternalIssue, Group, GroupLink, Integration
 from sentry.testutils import APITestCase
 
 
 class GroupNotesDetailsTest(APITestCase):
+    def setUp(self):
+        super(GroupNotesDetailsTest, self).setUp()
+        self.activity.data['external_id'] = '123'
+        self.activity.save()
+        self.integration = Integration.objects.create(
+            provider='example',
+            external_id='example12345',
+            name='Example 12345',
+        )
+        org_integration = self.integration.add_organization(self.organization)
+        org_integration.config = {'sync_comments': True}
+        org_integration.save()
+        self.external_issue = ExternalIssue.objects.create(
+            organization_id=self.organization.id,
+            integration_id=self.integration.id,
+            key='123'
+        )
+        GroupLink.objects.create(
+            project_id=self.group.project_id,
+            group_id=self.group.id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=self.external_issue.id,
+        )
+
     @fixture
     def url(self):
         return u'/api/0/issues/{}/comments/{}/'.format(
@@ -27,7 +54,39 @@ class GroupNotesDetailsTest(APITestCase):
 
         assert Group.objects.get(id=self.group.id).num_comments == 0
 
-    def test_put(self):
+    @patch('sentry.integrations.issues.IssueBasicMixin.update_comment')
+    @responses.activate
+    def test_put(self, mock_update_comment):
+        self.login_as(user=self.user)
+
+        url = self.url
+
+        response = self.client.put(url, format='json')
+        assert response.status_code == 400, response.content
+
+        with self.tasks():
+            with self.feature('organizations:integrations-issue-sync'):
+                response = self.client.put(
+                    url, format='json', data={
+                        'text': 'hi haters',
+                    }
+                )
+        assert response.status_code == 200, response.content
+
+        activity = Activity.objects.get(id=response.data['id'])
+        assert activity.user == self.user
+        assert activity.group == self.group
+        assert activity.data == {'text': 'hi haters', 'external_id': '123'}
+
+        assert mock_update_comment.call_count == 1
+        assert mock_update_comment.call_args[0][0] == u'123'
+        assert mock_update_comment.call_args[0][1] == self.user.id
+        assert mock_update_comment.call_args[0][2] == activity
+
+    @patch('sentry.integrations.issues.IssueBasicMixin.update_comment')
+    def test_put_no_external_id(self, mock_update_comment):
+        del self.activity.data['external_id']
+        self.activity.save()
         self.login_as(user=self.user)
 
         url = self.url
@@ -46,3 +105,5 @@ class GroupNotesDetailsTest(APITestCase):
         assert activity.user == self.user
         assert activity.group == self.group
         assert activity.data == {'text': 'hi haters'}
+
+        assert mock_update_comment.call_count == 0
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 4445ff98fd..68ed176dcf 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -7,6 +7,7 @@ import six
 
 from django.core.urlresolvers import reverse
 from exam import fixture
+from mock import Mock
 
 from sentry.integrations.exceptions import IntegrationError
 from sentry.models import (
@@ -369,6 +370,9 @@ class MockJiraApiClient(object):
     def create_comment(self, issue_id, comment):
         return comment
 
+    def update_comment(self, issue_key, comment_id, comment):
+        return comment
+
     def create_issue(self, data):
         return {'key': 'APP-123'}
 
@@ -829,12 +833,43 @@ class JiraIntegrationTest(APITestCase):
         integration.add_organization(org, self.user)
         installation = integration.get_installation(org.id)
 
+        group_note = Mock()
         comment = 'hello world\nThis is a comment.\n\n\n    Glad it\'s quoted'
+        group_note.data = {}
+        group_note.data['text'] = comment
         with mock.patch.object(MockJiraApiClient, 'create_comment') as mock_create_comment:
             def get_client():
                 return MockJiraApiClient()
 
             with mock.patch.object(installation, 'get_client', get_client):
-                installation.create_comment(1, self.user.id, comment)
+                installation.create_comment(1, self.user.id, group_note)
                 assert mock_create_comment.call_args[0][1] == \
                     'Sentry Admin wrote:\n\n{quote}%s{quote}' % comment
+
+    def test_update_comment(self):
+        org = self.organization
+
+        self.user.name = 'Sentry Admin'
+        self.user.save()
+        self.login_as(self.user)
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example Jira',
+        )
+        integration.add_organization(org, self.user)
+        installation = integration.get_installation(org.id)
+
+        group_note = Mock()
+        comment = 'hello world\nThis is a comment.\n\n\n    I\'ve changed it'
+        group_note.data = {}
+        group_note.data['text'] = comment
+        group_note.data['external_id'] = '123'
+        with mock.patch.object(MockJiraApiClient, 'update_comment') as mock_update_comment:
+            def get_client():
+                return MockJiraApiClient()
+
+            with mock.patch.object(installation, 'get_client', get_client):
+                installation.update_comment(1, self.user.id, group_note)
+                assert mock_update_comment.call_args[0] == \
+                    (1, '123', 'Sentry Admin wrote:\n\n{quote}%s{quote}' % comment)
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 0e137c3fa9..44ea728f1e 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from mock import patch
+from mock import patch, Mock
 
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.integrations.exceptions import IntegrationError
@@ -395,10 +395,14 @@ class VstsIntegrationTest(VstsIntegrationTestCase):
         integration = Integration.objects.get(provider='vsts')
         installation = integration.get_installation(self.organization.id)
 
-        comment = 'hello world\nThis is a comment.\n\n\n    Glad it\'s quoted'
         self.user.name = 'Sentry Admin'
         self.user.save()
+
+        comment_text = 'hello world\nThis is a comment.\n\n\n    Glad it\'s quoted'
+        comment = Mock()
+        comment.data = {'text': comment_text}
+
         installation.create_comment(1, self.user.id, comment)
 
         assert mock_update_work_item.call_args[1]['comment'] == \
-            'Sentry Admin wrote:\n\n<blockquote>%s</blockquote>' % comment
+            'Sentry Admin wrote:\n\n<blockquote>%s</blockquote>' % comment_text
