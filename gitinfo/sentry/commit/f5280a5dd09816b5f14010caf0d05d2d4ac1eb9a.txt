commit f5280a5dd09816b5f14010caf0d05d2d4ac1eb9a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Jan 17 13:08:44 2017 +0100

    Add a preprocessing step to stacktrace processors

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 7bf83d01b3..3117da1d5c 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -596,7 +596,6 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
         self.cache = SourceCache()
         self.sourcemaps = SourceMapCache()
         self.release = None
-        self._fetched_related_data = False
 
     def get_stacktraces(self, data):
         try:
@@ -626,15 +625,12 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
             ])
         return frames
 
-    def fetch_related_data(self):
-        if self._fetched_related_data:
-            return
-
+    def preprocess_related_data(self):
         frames = self.get_valid_frames()
         if not frames:
             logger.debug('Event %r has no frames with enough context to '
                          'fetch remote source', self.data['event_id'])
-            return
+            return False
 
         if self.data.get('release'):
             self.release = Release.get(
@@ -642,15 +638,13 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                 version=self.data['release'],
             )
         self.populate_source_cache(frames)
-        self._fetched_related_data = True
+        return True
 
     def process_frame(self, frame):
         if not settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT or \
            self.get_effective_platform(frame) != 'javascript':
             return
 
-        self.fetch_related_data()
-
         last_token = None
         token = None
 
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 757a85f17b..2ab52f0bdb 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -32,6 +32,9 @@ class StacktraceProcessor(object):
     def close(self):
         pass
 
+    def preprocess_related_data(self):
+        return False
+
     def get_effective_platform(self, frame):
         return frame.get('platform') or self.data['platform']
 
@@ -166,6 +169,10 @@ def process_stacktraces(data, make_processors=None):
         processors = make_processors(data, infos)
     changed = False
 
+    for processor in processors:
+        if processor.preprocess_related_data():
+            changed = True
+
     for stacktrace_info in infos:
         new_stacktrace, raw_stacktrace, errors = process_single_stacktrace(
             stacktrace_info, processors)
