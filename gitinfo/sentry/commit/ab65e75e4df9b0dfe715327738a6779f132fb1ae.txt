commit ab65e75e4df9b0dfe715327738a6779f132fb1ae
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Thu May 28 10:24:28 2020 -0400

    test(async-csv): Add tests for discover exports (#19047)

diff --git a/src/sentry/data_export/utils.py b/src/sentry/data_export/utils.py
index e753d54505..6b1264c2fc 100644
--- a/src/sentry/data_export/utils.py
+++ b/src/sentry/data_export/utils.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 from contextlib import contextmanager
 
+from sentry.snuba import discover
 from sentry.utils import metrics, snuba
 from sentry.utils.sdk import capture_exception
 
@@ -14,6 +15,11 @@ from .base import ExportError
 def snuba_error_handler(logger):
     try:
         yield
+    except discover.InvalidSearchQuery as error:
+        metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
+        logger.info("dataexport.error: {}".format(six.text_type(error)))
+        capture_exception(error)
+        raise ExportError("Invalid query. Please fix the query and try again.")
     except snuba.QueryOutsideRetentionError as error:
         metrics.incr("dataexport.error", tags={"error": six.text_type(error)}, sample_rate=1.0)
         logger.info("dataexport.error: {}".format(six.text_type(error)))
diff --git a/tests/sentry/data_export/test_tasks.py b/tests/sentry/data_export/test_tasks.py
index 78f4cfbfaf..58ce961473 100644
--- a/tests/sentry/data_export/test_tasks.py
+++ b/tests/sentry/data_export/test_tasks.py
@@ -4,8 +4,21 @@ from sentry.data_export.base import ExportQueryType
 from sentry.data_export.models import ExportedData
 from sentry.data_export.tasks import assemble_download
 from sentry.models import File
+from sentry.snuba.discover import InvalidSearchQuery
 from sentry.testutils import TestCase, SnubaTestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
 from sentry.utils.compat.mock import patch
+from sentry.utils.snuba import (
+    QueryOutsideRetentionError,
+    QueryIllegalTypeOfArgument,
+    SnubaError,
+    RateLimitExceeded,
+    QueryMemoryLimitExceeded,
+    QueryTooManySimultaneous,
+    UnqualifiedQueryError,
+    QueryExecutionError,
+    SchemaValidationError,
+)
 
 
 class AssembleDownloadTest(TestCase, SnubaTestCase):
@@ -15,13 +28,28 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
         self.org = self.create_organization()
         self.project = self.create_project()
         self.event = self.store_event(
-            data={"tags": {"foo": "bar"}, "fingerprint": ["group-1"]}, project_id=self.project.id
+            data={
+                "tags": {"foo": "bar"},
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
         )
         self.store_event(
-            data={"tags": {"foo": "bar2"}, "fingerprint": ["group-1"]}, project_id=self.project.id
+            data={
+                "tags": {"foo": "bar2"},
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
         )
         self.store_event(
-            data={"tags": {"foo": "bar2"}, "fingerprint": ["group-1"]}, project_id=self.project.id
+            data={
+                "tags": {"foo": "bar2"},
+                "fingerprint": ["group-1"],
+                "timestamp": iso_format(before_now(minutes=1)),
+            },
+            project_id=self.project.id,
         )
 
     def test_task_persistent_name(self):
@@ -51,24 +79,182 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
         assert raw2.startswith("bar2,2,")
 
     @patch("sentry.data_export.models.ExportedData.email_failure")
-    def test_issue_by_tag_errors(self, emailer):
-        de1 = ExportedData.objects.create(
+    def test_issue_by_tag_missing_project(self, emailer):
+        de = ExportedData.objects.create(
             user=self.user,
             organization=self.org,
             query_type=ExportQueryType.ISSUES_BY_TAG,
             query_info={"project": [-1], "group": self.event.group_id, "key": "user"},
         )
         with self.tasks():
-            assemble_download(de1.id)
+            assemble_download(de.id)
         error = emailer.call_args[1]["message"]
         assert error == "Requested project does not exist"
-        de2 = ExportedData.objects.create(
+
+    @patch("sentry.data_export.models.ExportedData.email_failure")
+    def test_issue_by_tag_missing_issue(self, emailer):
+        de = ExportedData.objects.create(
             user=self.user,
             organization=self.org,
-            query_type=0,
+            query_type=ExportQueryType.ISSUES_BY_TAG,
             query_info={"project": [self.project.id], "group": -1, "key": "user"},
         )
         with self.tasks():
-            assemble_download(de2.id)
+            assemble_download(de.id)
         error = emailer.call_args[1]["message"]
         assert error == "Requested issue does not exist"
+
+    @patch("sentry.tagstore.get_tag_key")
+    @patch("sentry.utils.snuba.raw_query")
+    @patch("sentry.data_export.models.ExportedData.email_failure")
+    def test_issues_by_tag_outside_retention(self, emailer, mock_query, mock_get_tag_key):
+        """
+        When an issues by tag query goes outside the retention range, it returns 0 results.
+        This gives us an empty CSV with just the headers.
+        """
+        de = ExportedData.objects.create(
+            user=self.user,
+            organization=self.org,
+            query_type=ExportQueryType.ISSUES_BY_TAG,
+            query_info={"project": [self.project.id], "group": self.event.group_id, "key": "foo"},
+        )
+
+        mock_query.side_effect = QueryOutsideRetentionError("test")
+        with self.tasks():
+            assemble_download(de.id)
+        de = ExportedData.objects.get(id=de.id)
+        assert de.date_finished is not None
+        assert de.date_expired is not None
+        assert de.file is not None
+        assert isinstance(de.file, File)
+        assert de.file.headers == {"Content-Type": "text/csv"}
+        # Convert raw csv to list of line-strings
+        header = de.file.getfile().read().strip()
+        assert header == "value,times_seen,last_seen,first_seen"
+
+    @patch("sentry.data_export.models.ExportedData.email_failure")
+    def test_discover(self, emailer):
+        de = ExportedData.objects.create(
+            user=self.user,
+            organization=self.org,
+            query_type=ExportQueryType.DISCOVER,
+            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
+        )
+        with self.tasks():
+            assemble_download(de.id)
+        de = ExportedData.objects.get(id=de.id)
+        assert de.date_finished is not None
+        assert de.date_expired is not None
+        assert de.file is not None
+        assert isinstance(de.file, File)
+        assert de.file.headers == {"Content-Type": "text/csv"}
+        # Convert raw csv to list of line-strings
+        header, raw1, raw2, raw3 = de.file.getfile().read().strip().split("\r\n")
+        assert header == "title"
+
+        assert raw1.startswith("<unlabeled event>")
+        assert raw2.startswith("<unlabeled event>")
+        assert raw3.startswith("<unlabeled event>")
+
+    @patch("sentry.snuba.discover.raw_query")
+    @patch("sentry.data_export.models.ExportedData.email_failure")
+    def test_discover_outside_retention(self, emailer, mock_query):
+        """
+        When a discover query goes outside the retention range, email the user they should
+        use a more recent date range.
+        """
+        de = ExportedData.objects.create(
+            user=self.user,
+            organization=self.org,
+            query_type=ExportQueryType.DISCOVER,
+            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
+        )
+
+        mock_query.side_effect = QueryOutsideRetentionError("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Invalid date range. Please try a more recent date range."
+
+    @patch("sentry.snuba.discover.query")
+    @patch("sentry.data_export.models.ExportedData.email_failure")
+    def test_discover_invalid_search_query(self, emailer, mock_query):
+        de = ExportedData.objects.create(
+            user=self.user,
+            organization=self.org,
+            query_type=ExportQueryType.DISCOVER,
+            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
+        )
+
+        mock_query.side_effect = InvalidSearchQuery("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Invalid query. Please fix the query and try again."
+
+    @patch("sentry.snuba.discover.raw_query")
+    @patch("sentry.data_export.models.ExportedData.email_failure")
+    def test_discover_snuba_error(self, emailer, mock_query):
+        de = ExportedData.objects.create(
+            user=self.user,
+            organization=self.org,
+            query_type=ExportQueryType.DISCOVER,
+            query_info={"project": [self.project.id], "field": ["title"], "query": ""},
+        )
+
+        mock_query.side_effect = QueryIllegalTypeOfArgument("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Invalid query. Argument to function is wrong type."
+
+        mock_query.side_effect = SnubaError("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Internal error. Please try again."
+
+        mock_query.side_effect = RateLimitExceeded("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert (
+            error
+            == "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+        )
+
+        mock_query.side_effect = QueryMemoryLimitExceeded("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert (
+            error
+            == "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+        )
+
+        mock_query.side_effect = QueryTooManySimultaneous("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert (
+            error
+            == "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+        )
+
+        mock_query.side_effect = UnqualifiedQueryError("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Internal error. Your query failed to run."
+
+        mock_query.side_effect = QueryExecutionError("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Internal error. Your query failed to run."
+
+        mock_query.side_effect = SchemaValidationError("test")
+        with self.tasks():
+            assemble_download(de.id)
+        error = emailer.call_args[1]["message"]
+        assert error == "Internal error. Your query failed to run."
