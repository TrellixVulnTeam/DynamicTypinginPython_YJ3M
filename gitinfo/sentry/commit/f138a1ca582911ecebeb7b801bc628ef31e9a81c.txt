commit f138a1ca582911ecebeb7b801bc628ef31e9a81c
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Dec 11 13:34:06 2018 -0800

    ref: Rollup of changes to make Python behave more like Rust (#10972)
    
    * fix: Sync normalization of null with Rust
    
    * ref: More uniform code for breadcrumbs
    
    Also normalize None to 'info' instead of the other way around.
    
    * fix: Bug in breadcrumbs
    
    * build: trigger bot
    
    * fix: Remove empty breadcrumb data
    
    * test: Add basic assertion for containers
    
    * ref: Remove code already covered by interface dispatch code
    
    * fix: Another bug for breadcrumb data

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 789d7c0059..b17495a0ac 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -667,7 +667,7 @@ class EventManager(object):
         if server_name is not None:
             set_tag(data, 'server_name', server_name)
 
-        for key in ('errors', 'tags', 'extra', 'fingerprint'):
+        for key in ('fingerprint', 'modules', 'tags', 'extra'):
             if not data.get(key):
                 data.pop(key, None)
 
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 87f36b2b31..90cd3309c0 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -66,41 +66,45 @@ class Breadcrumbs(Interface):
         return cls(values=values)
 
     def to_json(self):
-        return prune_empty_keys({'values': self.values or None})
+        return prune_empty_keys({
+            'values': [
+                prune_empty_keys({
+                    'type': crumb['type'],
+                    'level': crumb['level'],
+                    'timestamp': crumb['timestamp'],
+                    'message': crumb['message'],
+                    'category': crumb['category'],
+                    'event_id': crumb['event_id'],
+                    'data': crumb['data'] or None
+                }) for crumb in self.values
+            ] or None
+        })
 
     @classmethod
     def normalize_crumb(cls, crumb):
         ty = crumb.get('type') or 'default'
+        level = crumb.get('level') or 'info'
         ts = parse_timestamp(crumb.get('timestamp'))
         if ts is None:
-            raise InterfaceValidationError('Unable to determine timestamp ' 'for crumb')
-
-        rv = {
-            'type': ty,
-            'timestamp': to_timestamp(ts),
-        }
-
-        level = crumb.get('level')
-        if level not in (None, 'info'):
-            rv['level'] = level
+            raise InterfaceValidationError('Unable to determine timestamp for crumb')
+        ts = to_timestamp(ts)
 
         msg = crumb.get('message')
         if msg is not None:
-            rv['message'] = trim(six.text_type(msg), 4096)
+            msg = trim(six.text_type(msg), 4096)
 
         category = crumb.get('category')
         if category is not None:
-            rv['category'] = trim(six.text_type(category), 256)
+            category = trim(six.text_type(category), 256)
 
         event_id = crumb.get('event_id')
-        if event_id is not None:
-            rv['event_id'] = event_id
 
-        if crumb.get('data'):
+        data = crumb.get('data')
+        if data:
             try:
-                for key, value in six.iteritems(crumb['data']):
+                for key, value in six.iteritems(data):
                     if not isinstance(value, six.string_types):
-                        crumb['data'][key] = json.dumps(value)
+                        data[key] = json.dumps(value)
             except AttributeError:
                 # TODO(dcramer): we dont want to discard the the rest of the
                 # crumb, but it'd be nice if we could record an error
@@ -109,11 +113,19 @@ class Breadcrumbs(Interface):
                 #         type(crumb['data']),
                 #     )
                 # )
-                pass
+                data = None
             else:
-                rv['data'] = trim(crumb['data'], 4096)
+                data = trim(data, 4096)
 
-        return rv
+        return {
+            'type': ty,
+            'level': level,
+            'timestamp': ts,
+            'message': msg,
+            'category': category,
+            'event_id': event_id,
+            'data': data
+        }
 
     def get_api_context(self, is_public=False):
         def _convert(x):
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index b547a50c39..ce4211af0b 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -285,3 +285,19 @@ def test_event_id_lowercase():
     data = manager.get_data()
 
     assert data['event_id'] == '1234abcd' * 4
+
+
+@pytest.mark.parametrize('key', [
+    'fingerprint', 'modules', 'user', 'request', 'contexts',
+    'breadcrumbs', 'exception', 'stacktrace', 'threads', 'tags',
+    'extra', 'debug_meta', 'sdk'
+])
+@pytest.mark.parametrize('value', [{}, []])
+def test_removes_some_empty_containers(key, value):
+    event = make_event()
+    event[key] = value
+
+    manager = EventManager(event)
+    manager.normalize()
+    data = manager.get_data()
+    assert key not in data
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index fadfb85b03..f42f8e7298 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -355,6 +355,10 @@ def test_fingerprints():
     assert "fingerprint" not in data
     assert "errors" not in data
 
+    data = validate_and_normalize({"fingerprint": [""]})
+    assert data['fingerprint'] == ['']
+    assert "errors" not in data
+
 
 def test_messages():
     # Just 'message': wrap it in interface
diff --git a/tests/sentry/interfaces/test_breadcrumbs.py b/tests/sentry/interfaces/test_breadcrumbs.py
index 9a39e31c7c..7e7771b9eb 100644
--- a/tests/sentry/interfaces/test_breadcrumbs.py
+++ b/tests/sentry/interfaces/test_breadcrumbs.py
@@ -62,3 +62,18 @@ class BreadcrumbsTest(TestCase):
         )
         assert len(result.values) == 1
         assert result.values[0]['data'] == {'extra': '{"foo":"bar"}'}
+
+    def test_string_data(self):
+        result = Breadcrumbs.to_python(
+            dict(
+                values=[
+                    {
+                        'type': 'message',
+                        'timestamp': 1458857193.973275,
+                        'data': 'must be a mapping'
+                    }
+                ]
+            )
+        )
+        assert len(result.values) == 1
+        assert not result.values[0].get('data')
