commit b20f66dba5765f7cc414c48cc5a51a6a9ecd940f
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Fri Jun 26 14:58:06 2020 -0400

    feat(apm): Add specialized Trace context interface UI component (#19078)
    
    
    Co-authored-by: Mark Story <mark@sentry.io>
    Co-authored-by: Priscila Oliveira <priscilawebdev@gmail.com>
    Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>

diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 506584bf8b..74ccf99541 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -14,6 +14,7 @@ const CONTEXT_TYPES = {
   runtime: require('app/components/events/contexts/runtime/runtime').default,
   user: require('app/components/events/contexts/user/user').default,
   gpu: require('app/components/events/contexts/gpu/gpu').default,
+  trace: require('app/components/events/contexts/trace/trace').default,
 };
 
 function getContextComponent(type) {
@@ -118,6 +119,8 @@ class ContextChunk extends React.Component {
         return t('Graphics Processing Unit');
       case 'runtime':
         return t('Runtime');
+      case 'trace':
+        return t('Trace Details');
       case 'default':
         return toTitleCase(alias);
       default:
@@ -164,7 +167,7 @@ class ContextChunk extends React.Component {
         type={`context-${alias}`}
         title={this.renderSectionTitle()}
       >
-        <Component alias={alias} data={value} />
+        <Component alias={alias} event={evt} data={value} />
       </EventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/contexts/trace/getTraceKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/trace/getTraceKnownData.tsx
new file mode 100644
index 0000000000..c1faa5c679
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/trace/getTraceKnownData.tsx
@@ -0,0 +1,45 @@
+import {Event, Organization} from 'app/types';
+import {defined} from 'app/utils';
+import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+import {TraceKnownData, TraceKnownDataType} from './types';
+import getUserKnownDataDetails from './getTraceKnownDataDetails';
+
+function getTraceKnownData(
+  data: TraceKnownData,
+  traceKnownDataValues: Array<TraceKnownDataType>,
+  event: Event,
+  organization: Organization
+): Array<KeyValueListData> {
+  const knownData: Array<KeyValueListData> = [];
+
+  const dataKeys = traceKnownDataValues.filter(traceKnownDataValue => {
+    if (traceKnownDataValue === TraceKnownDataType.TRANSACTION_NAME) {
+      return event?.tags.find(tag => {
+        return tag.key === 'transaction';
+      });
+    }
+
+    return data[traceKnownDataValue];
+  });
+
+  for (const key of dataKeys) {
+    const knownDataDetails = getUserKnownDataDetails(data, key, event, organization);
+
+    if ((knownDataDetails && !defined(knownDataDetails.value)) || !knownDataDetails) {
+      continue;
+    }
+
+    knownData.push({
+      key,
+      ...knownDataDetails,
+      meta: getMeta(data, key),
+      subjectDataTestId: `trace-context-${key.toLowerCase()}-value`,
+    });
+  }
+
+  return knownData;
+}
+
+export default getTraceKnownData;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/trace/getTraceKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/trace/getTraceKnownDataDetails.tsx
new file mode 100644
index 0000000000..70ce7c6a53
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/trace/getTraceKnownDataDetails.tsx
@@ -0,0 +1,161 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import moment from 'moment-timezone';
+
+import {Event, Organization} from 'app/types';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import space from 'app/styles/space';
+import EventView from 'app/utils/discover/eventView';
+import {getTraceDateTimeRange} from 'app/components/events/interfaces/spans/utils';
+import {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';
+
+import {TraceKnownData, TraceKnownDataType} from './types';
+
+type Output = {
+  subject: string;
+  value: React.ReactNode;
+};
+
+function getUserKnownDataDetails(
+  data: TraceKnownData,
+  type: TraceKnownDataType,
+  event: Event,
+  organization: Organization
+): Output | undefined {
+  switch (type) {
+    case TraceKnownDataType.TRACE_ID: {
+      const traceId = data.trace_id || '';
+
+      if (!traceId) {
+        return undefined;
+      }
+
+      if (!organization.features.includes('discover-basic')) {
+        return {
+          subject: t('Trace ID'),
+          value: traceId,
+        };
+      }
+
+      const dateCreated = moment(event.dateCreated).valueOf() / 1000;
+      const pointInTime = event?.dateReceived
+        ? moment(event.dateReceived).valueOf() / 1000
+        : dateCreated;
+
+      const {start, end} = getTraceDateTimeRange({start: pointInTime, end: pointInTime});
+
+      const orgFeatures = new Set(organization.features);
+
+      const traceEventView = EventView.fromSavedQuery({
+        id: undefined,
+        name: `Events with Trace ID ${traceId}`,
+        fields: ['title', 'event.type', 'project', 'trace.span', 'timestamp'],
+        orderby: '-timestamp',
+        query: `trace:${traceId}`,
+        projects: orgFeatures.has('global-views') ? [] : [Number(event.projectID)],
+        version: 2,
+        start,
+        end,
+      });
+      return {
+        subject: t('Trace ID'),
+        value: (
+          <ButtonWrapper>
+            <pre className="val">
+              <span className="val-string">{traceId}</span>
+            </pre>
+            <StyledButton
+              size="xsmall"
+              to={traceEventView.getResultsViewUrlTarget(organization.slug)}
+            >
+              {t('Search by Trace')}
+            </StyledButton>
+          </ButtonWrapper>
+        ),
+      };
+    }
+
+    case TraceKnownDataType.SPAN_ID: {
+      return {
+        subject: t('Span ID'),
+        value: data.span_id || '',
+      };
+    }
+
+    case TraceKnownDataType.PARENT_SPAN_ID: {
+      return {
+        subject: t('Parent Span ID'),
+        value: data.parent_span_id || '',
+      };
+    }
+
+    case TraceKnownDataType.OP_NAME: {
+      return {
+        subject: t('Operation Name'),
+        value: data.op || '',
+      };
+    }
+
+    case TraceKnownDataType.STATUS: {
+      return {
+        subject: t('Status'),
+        value: data.status || '',
+      };
+    }
+
+    case TraceKnownDataType.TRANSACTION_NAME: {
+      const eventTag = event?.tags.find(tag => {
+        return tag.key === 'transaction';
+      });
+
+      if (!eventTag || typeof eventTag.value !== 'string') {
+        return undefined;
+      }
+      const transactionName = eventTag.value;
+
+      const to = transactionSummaryRouteWithQuery({
+        orgSlug: organization.slug,
+        transaction: transactionName,
+        projectID: event.projectID,
+        query: {},
+      });
+
+      if (!organization.features.includes('performance-view')) {
+        return {
+          subject: t('Transaction'),
+          value: transactionName,
+        };
+      }
+
+      return {
+        subject: t('Transaction'),
+        value: (
+          <ButtonWrapper>
+            <pre className="val">
+              <span className="val-string">{transactionName}</span>
+            </pre>
+            <StyledButton size="xsmall" to={to}>
+              {t('View Summary')}
+            </StyledButton>
+          </ButtonWrapper>
+        ),
+      };
+    }
+
+    default:
+      return undefined;
+  }
+}
+
+const ButtonWrapper = styled('div')`
+  position: relative;
+`;
+
+const StyledButton = styled(Button)`
+  position: absolute;
+  top: ${space(0.75)};
+  right: ${space(0.5)};
+`;
+
+export default getUserKnownDataDetails;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/trace/trace.tsx b/src/sentry/static/sentry/app/components/events/contexts/trace/trace.tsx
new file mode 100644
index 0000000000..a0a7970ea3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/trace/trace.tsx
@@ -0,0 +1,42 @@
+import React from 'react';
+
+import {Event, Organization} from 'app/types';
+import withOrganization from 'app/utils/withOrganization';
+import ErrorBoundary from 'app/components/errorBoundary';
+import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueListV2';
+
+import {TraceKnownData, TraceKnownDataType} from './types';
+import getTraceKnownData from './getTraceKnownData';
+
+const traceKnownDataValues = [
+  TraceKnownDataType.STATUS,
+  TraceKnownDataType.TRACE_ID,
+  TraceKnownDataType.SPAN_ID,
+  TraceKnownDataType.PARENT_SPAN_ID,
+  TraceKnownDataType.TRANSACTION_NAME,
+  TraceKnownDataType.OP_NAME,
+];
+
+type Props = {
+  organization: Organization;
+  event: Event;
+  data: TraceKnownData;
+};
+
+const InnerTrace = withOrganization(function({organization, event, data}: Props) {
+  return (
+    <ErrorBoundary mini>
+      <KeyValueList
+        data={getTraceKnownData(data, traceKnownDataValues, event, organization)}
+        isSorted={false}
+        raw={false}
+      />
+    </ErrorBoundary>
+  );
+});
+
+const Trace = (props: Props) => {
+  return <InnerTrace {...props} />;
+};
+
+export default Trace;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/trace/types.tsx b/src/sentry/static/sentry/app/components/events/contexts/trace/types.tsx
new file mode 100644
index 0000000000..272440b761
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/trace/types.tsx
@@ -0,0 +1,16 @@
+export enum TraceKnownDataType {
+  TRACE_ID = 'trace_id',
+  SPAN_ID = 'span_id',
+  PARENT_SPAN_ID = 'parent_span_id',
+  OP_NAME = 'op',
+  STATUS = 'status',
+  TRANSACTION_NAME = 'transaction_name',
+}
+
+export type TraceKnownData = {
+  trace_id?: string;
+  span_id?: string;
+  parent_span_id?: string;
+  op?: string;
+  status?: string;
+};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
index 42d8ac625b..ddd1434b75 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
@@ -42,30 +42,42 @@ const KeyValueList = ({
       <tbody>
         {getData().map(
           ({key, subject, value = null, meta, subjectIcon, subjectDataTestId}) => {
-            const dataValue =
+            const dataValue: React.ReactNode =
               typeof value === 'object' && !React.isValidElement(value)
                 ? JSON.stringify(value, null, 2)
                 : value;
+
+            const valueIsReactRenderable: boolean =
+              typeof dataValue !== 'string' && React.isValidElement(dataValue);
+
+            let contentComponent: React.ReactNode = (
+              <pre className="val-string">
+                <AnnotatedText value={dataValue} meta={meta} />
+                {subjectIcon}
+              </pre>
+            );
+
+            if (isContextData) {
+              contentComponent = (
+                <ContextData
+                  data={!raw ? value : JSON.stringify(value)}
+                  meta={meta}
+                  withAnnotatedText
+                >
+                  {subjectIcon}
+                </ContextData>
+              );
+            } else if (valueIsReactRenderable) {
+              contentComponent = dataValue;
+            }
+
             return (
               <tr key={key}>
                 <TableSubject className="key" wide={longKeys}>
                   {subject}
                 </TableSubject>
                 <td className="val" data-test-id={subjectDataTestId}>
-                  {isContextData ? (
-                    <ContextData
-                      data={!raw ? value : JSON.stringify(value)}
-                      meta={meta}
-                      withAnnotatedText
-                    >
-                      {subjectIcon}
-                    </ContextData>
-                  ) : (
-                    <pre className="val-string">
-                      <AnnotatedText value={dataValue} meta={meta} />
-                      {subjectIcon}
-                    </pre>
-                  )}
+                  {contentComponent}
                 </td>
               </tr>
             );
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 7388f4e3aa..3641185406 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -236,18 +236,9 @@ type RuntimeContext = {
   name?: string;
 };
 
-type TraceContext = {
-  type: 'trace';
-  op: string;
-  description: string;
-  parent_span_id: string;
-  span_id: string;
-  trace_id: string;
-};
-
 type EventContexts = {
   runtime?: RuntimeContext;
-  trace?: TraceContext;
+  trace?: TraceContextType;
 };
 
 type SentryEventBase = {
@@ -264,6 +255,7 @@ type SentryEventBase = {
   message: string;
   platform?: PlatformKey;
   dateCreated?: string;
+  dateReceived?: string;
   endTimestamp?: number;
   entries: EntryType[];
 
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/eventToolbar.jsx
index 3d4467b912..e1db35ea9d 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/eventToolbar.jsx
@@ -14,7 +14,6 @@ import FileSize from 'app/components/fileSize';
 import SentryTypes from 'app/sentryTypes';
 import Tooltip from 'app/components/tooltip';
 import getDynamicText from 'app/utils/getDynamicText';
-import {transactionSummaryRouteWithQuery} from 'app/views/performance/transactionSummary/utils';
 
 const formatDateDelta = (reference, observed) => {
   const duration = moment.duration(Math.abs(+observed - +reference));
@@ -43,7 +42,6 @@ class GroupEventToolbar extends React.Component {
     group: SentryTypes.Group.isRequired,
     event: SentryTypes.Event.isRequired,
     location: PropTypes.object.isRequired,
-    organization: SentryTypes.Organization.isRequired,
   };
 
   shouldComponentUpdate(nextProps) {
@@ -82,43 +80,6 @@ class GroupEventToolbar extends React.Component {
     );
   }
 
-  renderRelatedTransactionButton() {
-    const {organization, event, orgId, location} = this.props;
-
-    const orgFeatures = new Set(organization.features);
-
-    if (!orgFeatures.has('performance-view')) {
-      return null;
-    }
-
-    const transactionTag = event?.tags?.find(tag => {
-      return tag?.key === 'transaction';
-    });
-
-    if (!transactionTag) {
-      return null;
-    }
-
-    const transactionName = transactionTag?.value;
-
-    if (typeof transactionName !== 'string' || !transactionName) {
-      return null;
-    }
-
-    const to = transactionSummaryRouteWithQuery({
-      orgSlug: orgId,
-      transaction: transactionName,
-      projectID: event.projectID,
-      query: location.query,
-    });
-
-    return (
-      <Button key="related-transaction" to={to} size="small">
-        {t('Related Transaction')}
-      </Button>
-    );
-  }
-
   render() {
     const evt = this.props.event;
 
@@ -182,7 +143,6 @@ class GroupEventToolbar extends React.Component {
     return (
       <div className="event-toolbar">
         <NavigationButtons gap={1}>
-          {this.renderRelatedTransactionButton()}
           <ButtonBar merged>{eventNavNodes}</ButtonBar>
         </NavigationButtons>
         <h4>
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index caaea7e38f..fee2959e93 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1410,7 +1410,6 @@ span.val {
   color: darken(@purple, 10);
   border-radius: 3px;
   padding: 2px 4px;
-  margin: -2px -4px;
 }
 
 .val-string-multiline {
